{
  "_filename": "threads.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lzmq/src/lua/lzmq/threads.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 15
  }, {
    "from": 2,
    "label": "calls",
    "to": 15
  }, {
    "from": 2,
    "label": "calls",
    "to": 15
  }, {
    "from": 2,
    "label": "declares",
    "to": 3
  }, {
    "from": 2,
    "label": "declares",
    "to": 4
  }, {
    "from": 2,
    "label": "declares",
    "to": 5
  }, {
    "from": 2,
    "label": "declares",
    "to": 6
  }, {
    "from": 2,
    "label": "declares",
    "to": 7
  }, {
    "from": 2,
    "label": "declares",
    "to": 8
  }, {
    "from": 2,
    "label": "declares",
    "to": 9
  }, {
    "from": 2,
    "label": "declares",
    "to": 10
  }, {
    "from": 2,
    "label": "declares",
    "to": 11
  }, {
    "from": 2,
    "label": "declares",
    "to": 12
  }, {
    "from": 2,
    "label": "declares",
    "to": 13
  }, {
    "from": 2,
    "label": "declares",
    "to": 14
  }, {
    "from": 2,
    "label": "calls",
    "to": 15
  }, {
    "from": 16,
    "label": "requires",
    "to": 1
  }, {
    "from": 17,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 18
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 1,
    "label": "provides",
    "to": 20
  }, {
    "from": 20,
    "label": "provides",
    "to": 21
  }, {
    "from": 1,
    "label": "contains",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 23
  }, {
    "from": 23,
    "label": "initializes",
    "to": 24
  }, {
    "from": 23,
    "label": "initializes",
    "to": 25
  }, {
    "from": 23,
    "label": "initializes",
    "to": 26
  }, {
    "from": 1,
    "label": "provides",
    "to": 27
  }, {
    "from": 27,
    "label": "provides",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 1,
    "label": "provides",
    "to": 31
  }, {
    "from": 15,
    "label": "represents",
    "to": 32
  }, {
    "from": 31,
    "label": "provides",
    "to": 32
  }, {
    "from": 33,
    "label": "requires",
    "to": 1
  }, {
    "from": 34,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "threads",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "local function rand_bytes(n)\r\n\tlocal t = {}\r\n\tfor i = 1, n do table.insert(t, string.char(math.random(256)-1)) end\r\n\treturn table.concat(t)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function make_pipe(ctx)\r\n\tlocal pipe = ctx:socket(zmq.PAIR)\r\n\tlocal pipe_endpoint = \"inproc://lzmq.pipe.\" .. pipe:fd() .. \".\" .. rand_bytes(10);\r\n\tlocal ok, err = pipe:bind(pipe_endpoint)\r\n\tif not ok then \r\n\t\tpipe:close()\r\n\t\treturn nil, err\r\n\tend\r\n\treturn pipe, pipe_endpoint\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function M.set_bootstrap_prelude (code)\r\n\tprelude = code .. zthreads_prelude\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function M.runfile(ctx, file, ...)\r\n\tif ctx then ctx = ctx:lightuserdata() end\r\n\treturn Threads.runfile_ex(prelude, file, ctx, ...)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function M.runstring(ctx, code, ...)\r\n\tif ctx then ctx = ctx:lightuserdata() end\r\n\treturn Threads.runstring_ex(prelude, code, ctx, ...)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function M.run(ctx, code, ...)\r\n\tif string.sub(code, 1, 1) == '@' then\r\n\t\treturn M.runfile(ctx, string.sub(code, 2), ...)\r\n\tend\r\n\treturn M.runstring(ctx, code, ...)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function M.forkstring(ctx, code, ...)\r\n\tlocal pipe, endpoint = make_pipe(ctx)\r\n\tif not pipe then return nil, endpoint end\r\n\tctx = ctx:lightuserdata()\r\n\tlocal ok, err = Threads.runstring_ex(prelude .. fork_prelude, code, ctx, endpoint, ...)\r\n\tif not ok then\r\n\t\tpipe:close()\r\n\t\treturn nil, err\r\n\tend\r\n\treturn ok, pipe\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function M.forkfile(ctx, file, ...)\r\n\tlocal pipe, endpoint = make_pipe(ctx)\r\n\tif not pipe then return nil, endpoint end\r\n\tctx = ctx:lightuserdata()\r\n\tlocal ok, err = Threads.runfile_ex(prelude .. fork_prelude, file, ctx, endpoint, ...)\r\n\tif not ok then\r\n\t\tpipe:close()\r\n\t\treturn nil, err\r\n\tend\r\n\treturn ok, pipe\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function M.fork(ctx, code, ...)\r\n\tif string.sub(code, 1, 1) == '@' then\r\n\t\treturn M.forkfile(ctx, string.sub(code, 2), ...)\r\n\tend\r\n\treturn M.forkstring(ctx, code, ...)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function M.set_parent_ctx(ctx)\r\n\tparent_ctx = ctx\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function M.get_parent_ctx(ctx)\r\n\treturn parent_ctx\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function(ZMQ_NAME)\r\n\r\nlocal zmq = require(ZMQ_NAME)\r\n\r\nlocal zthreads_prelude = [[\r\nlocal zmq = require(]] .. (\"%q\"):format(ZMQ_NAME) .. [[)\r\nlocal zthreads = require(]] .. (\"%q\"):format(ZMQ_NAME) .. [[ .. \".threads\")\r\nlocal parent_ctx = arg[1]\r\nif parent_ctx then zthreads.set_parent_ctx(zmq.init_ctx(parent_ctx)) end\r\nlocal unpack = table.unpack or unpack\r\narg = {n = arg.n - 1, unpack(arg, 2, arg.n) }\r\n]]\r\n\r\nlocal fork_prelude = [[\r\narg[1] = zmq.assert(zthreads.get_parent_ctx():socket(zmq.PAIR,{\r\n\tconnect = assert(arg[1]);\r\n}))\r\n]]\r\n\r\nlocal prelude = zthreads_prelude\r\n\r\nlocal function make_pipe(ctx)\r\n\tlocal pipe = ctx:socket(zmq.PAIR)\r\n\tlocal pipe_endpoint = \"inproc://lzmq.pipe.\" .. pipe:fd() .. \".\" .. rand_bytes(10);\r\n\tlocal ok, err = pipe:bind(pipe_endpoint)\r\n\tif not ok then \r\n\t\tpipe:close()\r\n\t\treturn nil, err\r\n\tend\r\n\treturn pipe, pipe_endpoint\r\nend\r\n\r\nlocal M = {}\r\n\r\nfunction M.set_bootstrap_prelude (code)\r\n\tprelude = code .. zthreads_prelude\r\nend;\r\n\r\nfunction M.runfile(ctx, file, ...)\r\n\tif ctx then ctx = ctx:lightuserdata() end\r\n\treturn Threads.runfile_ex(prelude, file, ctx, ...)\r\nend\r\n\r\nfunction M.runstring(ctx, code, ...)\r\n\tif ctx then ctx = ctx:lightuserdata() end\r\n\treturn Threads.runstring_ex(prelude, code, ctx, ...)\r\nend\r\n\r\nfunction M.run(ctx, code, ...)\r\n\tif string.sub(code, 1, 1) == '@' then\r\n\t\treturn M.runfile(ctx, string.sub(code, 2), ...)\r\n\tend\r\n\treturn M.runstring(ctx, code, ...)\r\nend\r\n\r\nfunction M.forkstring(ctx, code, ...)\r\n\tlocal pipe, endpoint = make_pipe(ctx)\r\n\tif not pipe then return nil, endpoint end\r\n\tctx = ctx:lightuserdata()\r\n\tlocal ok, err = Threads.runstring_ex(prelude .. fork_prelude, code, ctx, endpoint, ...)\r\n\tif not ok then\r\n\t\tpipe:close()\r\n\t\treturn nil, err\r\n\tend\r\n\treturn ok, pipe\r\nend\r\n\r\nfunction M.forkfile(ctx, file, ...)\r\n\tlocal pipe, endpoint = make_pipe(ctx)\r\n\tif not pipe then return nil, endpoint end\r\n\tctx = ctx:lightuserdata()\r\n\tlocal ok, err = Threads.runfile_ex(prelude .. fork_prelude, file, ctx, endpoint, ...)\r\n\tif not ok then\r\n\t\tpipe:close()\r\n\t\treturn nil, err\r\n\tend\r\n\treturn ok, pipe\r\nend\r\n\r\nfunction M.fork(ctx, code, ...)\r\n\tif string.sub(code, 1, 1) == '@' then\r\n\t\treturn M.forkfile(ctx, string.sub(code, 2), ...)\r\n\tend\r\n\treturn M.forkstring(ctx, code, ...)\r\nend\r\n\r\nlocal parent_ctx = nil\r\nfunction M.set_parent_ctx(ctx)\r\n\tparent_ctx = ctx\r\nend\r\n\r\nfunction M.get_parent_ctx(ctx)\r\n\treturn parent_ctx\r\nend\r\n\r\nreturn M\r\n\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "require",
    "type": "global function"
  }, {
    "id": 16,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 17,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 18,
    "text": "",
    "type": "variable container"
  }, {
    "id": 19,
    "text": "",
    "type": "require container"
  }, {
    "id": 20,
    "text": "",
    "type": "interface container"
  }, {
    "id": 21,
    "text": "",
    "type": "interface"
  }, {
    "id": 22,
    "text": "",
    "type": "variable container"
  }, {
    "id": 23,
    "text": "",
    "type": "require container"
  }, {
    "id": 24,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 25,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 26,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 27,
    "text": "",
    "type": "interface container"
  }, {
    "id": 28,
    "text": "",
    "type": "interface"
  }, {
    "id": 29,
    "text": "",
    "type": "variable container"
  }, {
    "id": 30,
    "text": "",
    "type": "require container"
  }, {
    "id": 31,
    "text": "",
    "type": "interface container"
  }, {
    "id": 32,
    "text": "",
    "type": "interface"
  }, {
    "id": 33,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 34,
    "text": "",
    "type": "require local variable"
  } ]
}