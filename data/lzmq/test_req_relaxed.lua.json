{
  "_filename": "test_req_relaxed.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lzmq/test/test_req_relaxed.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 19
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 22,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 49,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 66
  }, {
    "from": 49,
    "label": "has",
    "to": 67
  }, {
    "from": 49,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "calls",
    "to": 75
  }, {
    "from": 69,
    "label": "calls",
    "to": 74
  }, {
    "from": 5,
    "label": "calls",
    "to": 71
  }, {
    "from": 12,
    "label": "calls",
    "to": 71
  }, {
    "from": 46,
    "label": "calls",
    "to": 71
  }, {
    "from": 69,
    "label": "calls",
    "to": 78
  }, {
    "from": 5,
    "label": "calls",
    "to": 78
  }, {
    "from": 5,
    "label": "calls",
    "to": 78
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 22,
    "label": "calls",
    "to": 78
  }, {
    "from": 69,
    "label": "calls",
    "to": 5
  }, {
    "from": 69,
    "label": "calls",
    "to": 5
  }, {
    "from": 69,
    "label": "calls",
    "to": 77
  }, {
    "from": 69,
    "label": "calls",
    "to": 77
  }, {
    "from": 69,
    "label": "calls",
    "to": 77
  }, {
    "from": 69,
    "label": "calls",
    "to": 77
  }, {
    "from": 69,
    "label": "calls",
    "to": 77
  }, {
    "from": 22,
    "label": "calls",
    "to": 77
  }, {
    "from": 22,
    "label": "calls",
    "to": 77
  }, {
    "from": 41,
    "label": "calls",
    "to": 77
  }, {
    "from": 69,
    "label": "calls",
    "to": 77
  }, {
    "from": 69,
    "label": "calls",
    "to": 76
  }, {
    "from": 69,
    "label": "calls",
    "to": 76
  }, {
    "from": 22,
    "label": "calls",
    "to": 76
  }, {
    "from": 69,
    "label": "calls",
    "to": 72
  }, {
    "from": 69,
    "label": "calls",
    "to": 72
  }, {
    "from": 69,
    "label": "calls",
    "to": 37
  }, {
    "from": 69,
    "label": "calls",
    "to": 37
  }, {
    "from": 69,
    "label": "calls",
    "to": 37
  }, {
    "from": 69,
    "label": "calls",
    "to": 37
  }, {
    "from": 37,
    "label": "calls",
    "to": 22
  }, {
    "from": 69,
    "label": "calls",
    "to": 12
  }, {
    "from": 69,
    "label": "calls",
    "to": 12
  }, {
    "from": 69,
    "label": "calls",
    "to": 81
  }, {
    "from": 69,
    "label": "calls",
    "to": 81
  }, {
    "from": 69,
    "label": "calls",
    "to": 81
  }, {
    "from": 12,
    "label": "calls",
    "to": 81
  }, {
    "from": 12,
    "label": "calls",
    "to": 81
  }, {
    "from": 41,
    "label": "calls",
    "to": 81
  }, {
    "from": 69,
    "label": "calls",
    "to": 79
  }, {
    "from": 69,
    "label": "calls",
    "to": 80
  }, {
    "from": 69,
    "label": "calls",
    "to": 80
  }, {
    "from": 69,
    "label": "calls",
    "to": 80
  }, {
    "from": 69,
    "label": "calls",
    "to": 80
  }, {
    "from": 69,
    "label": "calls",
    "to": 80
  }, {
    "from": 69,
    "label": "calls",
    "to": 80
  }, {
    "from": 5,
    "label": "calls",
    "to": 73
  }, {
    "from": 69,
    "label": "calls",
    "to": 70
  }, {
    "from": 4,
    "label": "contains",
    "to": 69
  }, {
    "from": 69,
    "label": "declares",
    "to": 5
  }, {
    "from": 69,
    "label": "declares",
    "to": 12
  }, {
    "from": 69,
    "label": "declares",
    "to": 22
  }, {
    "from": 69,
    "label": "declares",
    "to": 37
  }, {
    "from": 69,
    "label": "declares",
    "to": 41
  }, {
    "from": 69,
    "label": "declares",
    "to": 46
  }, {
    "from": 69,
    "label": "declares",
    "to": 49
  }, {
    "from": 4,
    "label": "contains",
    "to": 82
  }, {
    "from": 4,
    "label": "contains",
    "to": 83
  }, {
    "from": 82,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 82,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 82,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 82,
    "label": "initializes",
    "to": 90
  }, {
    "from": 82,
    "label": "initializes",
    "to": 91
  }, {
    "from": 82,
    "label": "initializes",
    "to": 92
  }, {
    "from": 82,
    "label": "initializes",
    "to": 93
  }, {
    "from": 82,
    "label": "initializes",
    "to": 94
  }, {
    "from": 83,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "requires",
    "to": 1
  }, {
    "from": 83,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "requires",
    "to": 2
  }, {
    "from": 83,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lzmq",
    "type": "module"
  }, {
    "id": 2,
    "text": "timer",
    "type": "module"
  }, {
    "id": 3,
    "text": "threads",
    "type": "module"
  }, {
    "id": 4,
    "text": "test_req_relaxed",
    "type": "module"
  }, {
    "id": 5,
    "text": "function START()\r\n  local thread = assert(zthreads.run(ctx, SERVER, ENDPOINT)):start(true, true)\r\n  ztimer.sleep(1000)\r\n  local ok, err = thread:join(0)\r\n  assert(err == 'timeout')\r\n  proc = thread\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local thread = assert(zthreads.run(ctx, SERVER, ENDPOINT)):start(true, true)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "ztimer.sleep(1000)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local ok, err = thread:join(0)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "assert(err == 'timeout')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "proc = thread",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function FINISH()\r\n  zassert(pipe:send('FINISH'))\r\n  zassert(pipe:recvx())\r\n  for i = 1, 100 do\r\n    local ok, err = proc:join(0)\r\n    if ok then return end\r\n    ztimer.sleep(500)\r\n  end\r\n  assert(false)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "zassert(pipe:send('FINISH'))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "zassert(pipe:recvx())",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "for i = 1, 100 do\r\n    local ok, err = proc:join(0)\r\n    if ok then return end\r\n    ztimer.sleep(500)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 16,
    "text": "local ok, err = proc:join(0)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if ok then return end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "ztimer.sleep(500)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "assert(false)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function ECHO_()\r\n  echo_no = echo_no + 1\r\n  local msg = \"hello:\" .. echo_no\r\n  local ok, err = pipe:send(msg)\r\n  print(\"== CLIENT SEND:\", (ok and msg or tostring(err)))\r\n  if not ok then return end\r\n\r\n  while true do\r\n    ok, err = pipe:recvx()\r\n    print(\"== CLIENT RECV:\", ok or err)\r\n    if zmq.REQ == CLIENT_SOCKET_TYPE then\r\n      if ok then assert(ok == msg) end\r\n      break\r\n    end\r\n    if ok then \r\n      if(ok == msg) then break end\r\n    else\r\n      break\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "echo_no = echo_no + 1",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "local msg = \"hello:\" .. echo_no",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local ok, err = pipe:send(msg)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "print(\"== CLIENT SEND:\", (ok and msg or tostring(err)))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "if not ok then return end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "while true do\r\n    ok, err = pipe:recvx()\r\n    print(\"== CLIENT RECV:\", ok or err)\r\n    if zmq.REQ == CLIENT_SOCKET_TYPE then\r\n      if ok then assert(ok == msg) end\r\n      break\r\n    end\r\n    if ok then \r\n      if(ok == msg) then break end\r\n    else\r\n      break\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 29,
    "text": "ok, err = pipe:recvx()",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "print(\"== CLIENT RECV:\", ok or err)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if zmq.REQ == CLIENT_SOCKET_TYPE then\r\n      if ok then assert(ok == msg) end\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "if ok then assert(ok == msg) end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "assert(ok == msg)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "if ok then \r\n      if(ok == msg) then break end\r\n    else\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if(ok == msg) then break end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function ECHO(N)\r\n  for i = 1, (N or 1) do ECHO_() end\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "for i = 1, (N or 1) do ECHO_() end",
    "type": "statement:numericfor"
  }, {
    "id": 39,
    "text": "ECHO_()",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function RECONNECT()\r\n  pipe:disconnect(ENDPOINT)\r\n  zassert(pipe:connect(ENDPOINT))\r\n  print(\"== CLIENT RECONNECT\")\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "pipe:disconnect(ENDPOINT)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "zassert(pipe:connect(ENDPOINT))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "print(\"== CLIENT RECONNECT\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function WAIT(n)\r\n  ztimer.sleep(n or 100)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "ztimer.sleep(n or 100)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function(ENDPOINT)\r\n  local zmq      = require \"lzmq\"\r\n  local ztimer   = require \"lzmq.timer\"\r\n  local zthreads = require \"lzmq.threads\"\r\n  local zassert  = zmq.assert\r\n\r\n  local ctx = zthreads.get_parent_ctx() or zmq.context()\r\n  local srv = zassert(ctx:socket{zmq.ROUTER, bind = ENDPOINT})\r\n\r\n  print(\"== SERVER START: \")\r\n\r\n  local msg, err\r\n  while true do\r\n    msg, err = srv:recv_all()\r\n    if not msg then\r\n      print('== SERVER RECV: ' .. tostring(err))\r\n      if err:mnemo() ~= 'EAGAIN' then\r\n        break\r\n      end\r\n    else\r\n      print('== SERVER RECV: ' .. msg[#msg])\r\n      local ok, err = srv:send_all(msg)\r\n      print('== SERVER SEND: ' .. (ok and msg[#msg] or tostring(err)))\r\n      if msg[#msg] == 'FINISH' then break end\r\n    end\r\n  end\r\n\r\n  print(\"== SERVER FINISH: \")\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local zmq      = require \"lzmq\"",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local ztimer   = require \"lzmq.timer\"",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local zthreads = require \"lzmq.threads\"",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local zassert  = zmq.assert",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local ctx = zthreads.get_parent_ctx() or zmq.context()",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local srv = zassert(ctx:socket{zmq.ROUTER, bind = ENDPOINT})",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "print(\"== SERVER START: \")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "local msg, err",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "while true do\r\n    msg, err = srv:recv_all()\r\n    if not msg then\r\n      print('== SERVER RECV: ' .. tostring(err))\r\n      if err:mnemo() ~= 'EAGAIN' then\r\n        break\r\n      end\r\n    else\r\n      print('== SERVER RECV: ' .. msg[#msg])\r\n      local ok, err = srv:send_all(msg)\r\n      print('== SERVER SEND: ' .. (ok and msg[#msg] or tostring(err)))\r\n      if msg[#msg] == 'FINISH' then break end\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 59,
    "text": "msg, err = srv:recv_all()",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if not msg then\r\n      print('== SERVER RECV: ' .. tostring(err))\r\n      if err:mnemo() ~= 'EAGAIN' then\r\n        break\r\n      end\r\n    else\r\n      print('== SERVER RECV: ' .. msg[#msg])\r\n      local ok, err = srv:send_all(msg)\r\n      print('== SERVER SEND: ' .. (ok and msg[#msg] or tostring(err)))\r\n      if msg[#msg] == 'FINISH' then break end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "print('== SERVER RECV: ' .. tostring(err))",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "if err:mnemo() ~= 'EAGAIN' then\r\n        break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "print('== SERVER RECV: ' .. msg[#msg])",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "local ok, err = srv:send_all(msg)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "print('== SERVER SEND: ' .. (ok and msg[#msg] or tostring(err)))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if msg[#msg] == 'FINISH' then break end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "print(\"== SERVER FINISH: \")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "",
    "type": "function container"
  }, {
    "id": 70,
    "text": "version",
    "type": "global function"
  }, {
    "id": 71,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 72,
    "text": "context",
    "type": "global function"
  }, {
    "id": 73,
    "text": "run",
    "type": "global function"
  }, {
    "id": 74,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 75,
    "text": "get_parent_ctx",
    "type": "global function"
  }, {
    "id": 76,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 77,
    "text": "print",
    "type": "global function"
  }, {
    "id": 78,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 79,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 80,
    "text": "require",
    "type": "global function"
  }, {
    "id": 81,
    "text": "zassert",
    "type": "global function"
  }, {
    "id": 82,
    "text": "",
    "type": "variable container"
  }, {
    "id": 83,
    "text": "",
    "type": "require container"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "string"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  } ]
}