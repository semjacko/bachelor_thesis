{
  "_filename": "utils.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lzmq/examples/utils.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "calls",
    "to": 27
  }, {
    "from": 5,
    "label": "calls",
    "to": 29
  }, {
    "from": 5,
    "label": "calls",
    "to": 31
  }, {
    "from": 3,
    "label": "calls",
    "to": 32
  }, {
    "from": 5,
    "label": "calls",
    "to": 32
  }, {
    "from": 5,
    "label": "calls",
    "to": 32
  }, {
    "from": 5,
    "label": "calls",
    "to": 30
  }, {
    "from": 5,
    "label": "calls",
    "to": 33
  }, {
    "from": 5,
    "label": "calls",
    "to": 33
  }, {
    "from": 5,
    "label": "calls",
    "to": 33
  }, {
    "from": 5,
    "label": "calls",
    "to": 33
  }, {
    "from": 5,
    "label": "calls",
    "to": 33
  }, {
    "from": 26,
    "label": "calls",
    "to": 35
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 22,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 26,
    "label": "declares",
    "to": 3
  }, {
    "from": 26,
    "label": "declares",
    "to": 5
  }, {
    "from": 26,
    "label": "declares",
    "to": 22
  }, {
    "from": 1,
    "label": "declares",
    "to": 34
  }, {
    "from": 36,
    "label": "requires",
    "to": 1
  }, {
    "from": 36,
    "label": "requires",
    "to": 1
  }, {
    "from": 36,
    "label": "requires",
    "to": 1
  }, {
    "from": 36,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "requires",
    "to": 2
  }, {
    "from": 36,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "utils",
    "type": "module"
  }, {
    "id": 2,
    "text": "lzmq",
    "type": "module"
  }, {
    "id": 3,
    "text": "function printf(...) return print(string.format(...)) end",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "function print_msg(title, data, err, ...)\r\n  print(title)\r\n  if data then -- data\r\n    if type(data) == 'table' then\r\n      for _, msg in ipairs(data) do\r\n        printf(\"[%.4d] %s\", #msg, msg) \r\n      end\r\n    elseif type(data) == 'userdata'  then\r\n      printf(\"[%.4d] %s\", data:size(), data:data()) \r\n    else \r\n      printf(\"[%.4d] %s\", #data, data)\r\n    end\r\n  else  --error\r\n    if type(err) == 'string' then\r\n      printf(\"Error: %s\", err)\r\n    elseif type(err) == 'number' then \r\n      local msg   = zmq.error(err):msg()\r\n      local mnemo = zmq.errors[err] or 'UNKNOWN'\r\n      printf(\"Error: [%s] %s (%d)\", mnemo, msg, err)\r\n    elseif type(err) == 'userdata' then\r\n      printf(\"Error: [%s] %s (%d)\", err:mnemo(), err:msg(), err:no())\r\n    else\r\n      printf(\"Error: %s\", tostring(err))\r\n    end\r\n  end\r\n  print(\"-------------------------------------\")\r\n  return data, err, ...\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "print(title)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "if data then -- data\r\n    if type(data) == 'table' then\r\n      for _, msg in ipairs(data) do\r\n        printf(\"[%.4d] %s\", #msg, msg) \r\n      end\r\n    elseif type(data) == 'userdata'  then\r\n      printf(\"[%.4d] %s\", data:size(), data:data()) \r\n    else \r\n      printf(\"[%.4d] %s\", #data, data)\r\n    end\r\n  else  --error\r\n    if type(err) == 'string' then\r\n      printf(\"Error: %s\", err)\r\n    elseif type(err) == 'number' then \r\n      local msg   = zmq.error(err):msg()\r\n      local mnemo = zmq.errors[err] or 'UNKNOWN'\r\n      printf(\"Error: [%s] %s (%d)\", mnemo, msg, err)\r\n    elseif type(err) == 'userdata' then\r\n      printf(\"Error: [%s] %s (%d)\", err:mnemo(), err:msg(), err:no())\r\n    else\r\n      printf(\"Error: %s\", tostring(err))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "if type(data) == 'table' then\r\n      for _, msg in ipairs(data) do\r\n        printf(\"[%.4d] %s\", #msg, msg) \r\n      end\r\n    elseif type(data) == 'userdata'  then\r\n      printf(\"[%.4d] %s\", data:size(), data:data()) \r\n    else \r\n      printf(\"[%.4d] %s\", #data, data)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "for _, msg in ipairs(data) do\r\n        printf(\"[%.4d] %s\", #msg, msg) \r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "printf(\"[%.4d] %s\", #msg, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "printf(\"[%.4d] %s\", data:size(), data:data())",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "printf(\"[%.4d] %s\", #data, data)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "if type(err) == 'string' then\r\n      printf(\"Error: %s\", err)\r\n    elseif type(err) == 'number' then \r\n      local msg   = zmq.error(err):msg()\r\n      local mnemo = zmq.errors[err] or 'UNKNOWN'\r\n      printf(\"Error: [%s] %s (%d)\", mnemo, msg, err)\r\n    elseif type(err) == 'userdata' then\r\n      printf(\"Error: [%s] %s (%d)\", err:mnemo(), err:msg(), err:no())\r\n    else\r\n      printf(\"Error: %s\", tostring(err))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "printf(\"Error: %s\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local msg   = zmq.error(err):msg()",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local mnemo = zmq.errors[err] or 'UNKNOWN'",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "printf(\"Error: [%s] %s (%d)\", mnemo, msg, err)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "printf(\"Error: [%s] %s (%d)\", err:mnemo(), err:msg(), err:no())",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "printf(\"Error: %s\", tostring(err))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "print(\"-------------------------------------\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function print_version(zmq)\r\n  local version = zmq.version()\r\n  printf(\"zmq version: %d.%d.%d\", version[1], version[2], version[3])\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local version = zmq.version()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "printf(\"zmq version: %d.%d.%d\", version[1], version[2], version[3])",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "",
    "type": "function container"
  }, {
    "id": 27,
    "text": "version",
    "type": "global function"
  }, {
    "id": 28,
    "text": "format",
    "type": "global function"
  }, {
    "id": 29,
    "text": "error",
    "type": "global function"
  }, {
    "id": 30,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 31,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 32,
    "text": "print",
    "type": "global function"
  }, {
    "id": 33,
    "text": "type",
    "type": "global function"
  }, {
    "id": 34,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 35,
    "text": "require",
    "type": "global function"
  }, {
    "id": 36,
    "text": "",
    "type": "global variable"
  }, {
    "id": 37,
    "text": "",
    "type": "variable container"
  }, {
    "id": 38,
    "text": "",
    "type": "require container"
  }, {
    "id": 39,
    "text": "",
    "type": "require local variable"
  } ]
}