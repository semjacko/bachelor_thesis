{
  "_filename": "utest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lzmq/test/utest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 18
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 4
  }, {
    "from": 31,
    "label": "has",
    "to": 4
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 39,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 49,
    "label": "has",
    "to": 58
  }, {
    "from": 49,
    "label": "has",
    "to": 59
  }, {
    "from": 49,
    "label": "has",
    "to": 60
  }, {
    "from": 49,
    "label": "has",
    "to": 61
  }, {
    "from": 49,
    "label": "has",
    "to": 62
  }, {
    "from": 49,
    "label": "has",
    "to": 63
  }, {
    "from": 49,
    "label": "has",
    "to": 64
  }, {
    "from": 49,
    "label": "has",
    "to": 65
  }, {
    "from": 49,
    "label": "has",
    "to": 66
  }, {
    "from": 49,
    "label": "has",
    "to": 67
  }, {
    "from": 49,
    "label": "has",
    "to": 68
  }, {
    "from": 49,
    "label": "has",
    "to": 69
  }, {
    "from": 49,
    "label": "has",
    "to": 70
  }, {
    "from": 49,
    "label": "has",
    "to": 71
  }, {
    "from": 49,
    "label": "has",
    "to": 72
  }, {
    "from": 49,
    "label": "has",
    "to": 73
  }, {
    "from": 49,
    "label": "has",
    "to": 74
  }, {
    "from": 49,
    "label": "has",
    "to": 75
  }, {
    "from": 49,
    "label": "has",
    "to": 76
  }, {
    "from": 49,
    "label": "has",
    "to": 77
  }, {
    "from": 49,
    "label": "has",
    "to": 78
  }, {
    "from": 49,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 39,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 88,
    "label": "has",
    "to": 93
  }, {
    "from": 88,
    "label": "has",
    "to": 94
  }, {
    "from": 88,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 88,
    "label": "has",
    "to": 97
  }, {
    "from": 88,
    "label": "has",
    "to": 98
  }, {
    "from": 88,
    "label": "has",
    "to": 99
  }, {
    "from": 88,
    "label": "has",
    "to": 100
  }, {
    "from": 88,
    "label": "has",
    "to": 101
  }, {
    "from": 88,
    "label": "has",
    "to": 102
  }, {
    "from": 88,
    "label": "has",
    "to": 103
  }, {
    "from": 88,
    "label": "has",
    "to": 104
  }, {
    "from": 88,
    "label": "has",
    "to": 105
  }, {
    "from": 88,
    "label": "has",
    "to": 106
  }, {
    "from": 88,
    "label": "has",
    "to": 107
  }, {
    "from": 88,
    "label": "has",
    "to": 108
  }, {
    "from": 88,
    "label": "has",
    "to": 109
  }, {
    "from": 88,
    "label": "has",
    "to": 110
  }, {
    "from": 88,
    "label": "has",
    "to": 111
  }, {
    "from": 39,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 113,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 113,
    "label": "has",
    "to": 120
  }, {
    "from": 113,
    "label": "has",
    "to": 121
  }, {
    "from": 113,
    "label": "has",
    "to": 122
  }, {
    "from": 113,
    "label": "has",
    "to": 123
  }, {
    "from": 113,
    "label": "has",
    "to": 124
  }, {
    "from": 113,
    "label": "has",
    "to": 125
  }, {
    "from": 113,
    "label": "has",
    "to": 126
  }, {
    "from": 113,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 128,
    "label": "has",
    "to": 132
  }, {
    "from": 128,
    "label": "has",
    "to": 133
  }, {
    "from": 128,
    "label": "has",
    "to": 134
  }, {
    "from": 128,
    "label": "has",
    "to": 135
  }, {
    "from": 128,
    "label": "has",
    "to": 136
  }, {
    "from": 128,
    "label": "has",
    "to": 137
  }, {
    "from": 128,
    "label": "has",
    "to": 138
  }, {
    "from": 128,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 140,
    "label": "has",
    "to": 145
  }, {
    "from": 140,
    "label": "has",
    "to": 146
  }, {
    "from": 140,
    "label": "has",
    "to": 147
  }, {
    "from": 140,
    "label": "has",
    "to": 148
  }, {
    "from": 140,
    "label": "has",
    "to": 149
  }, {
    "from": 140,
    "label": "has",
    "to": 150
  }, {
    "from": 140,
    "label": "has",
    "to": 151
  }, {
    "from": 140,
    "label": "has",
    "to": 152
  }, {
    "from": 140,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 140,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 156,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 163,
    "label": "has",
    "to": 166
  }, {
    "from": 163,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 168,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 168,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 174,
    "label": "has",
    "to": 180
  }, {
    "from": 174,
    "label": "has",
    "to": 181
  }, {
    "from": 174,
    "label": "has",
    "to": 182
  }, {
    "from": 174,
    "label": "has",
    "to": 183
  }, {
    "from": 174,
    "label": "has",
    "to": 184
  }, {
    "from": 174,
    "label": "has",
    "to": 185
  }, {
    "from": 174,
    "label": "has",
    "to": 186
  }, {
    "from": 174,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 174,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 191,
    "label": "has",
    "to": 196
  }, {
    "from": 191,
    "label": "has",
    "to": 197
  }, {
    "from": 191,
    "label": "has",
    "to": 198
  }, {
    "from": 191,
    "label": "has",
    "to": 199
  }, {
    "from": 191,
    "label": "has",
    "to": 200
  }, {
    "from": 191,
    "label": "has",
    "to": 201
  }, {
    "from": 191,
    "label": "has",
    "to": 202
  }, {
    "from": 191,
    "label": "has",
    "to": 203
  }, {
    "from": 191,
    "label": "has",
    "to": 204
  }, {
    "from": 191,
    "label": "has",
    "to": 205
  }, {
    "from": 191,
    "label": "has",
    "to": 206
  }, {
    "from": 191,
    "label": "has",
    "to": 207
  }, {
    "from": 191,
    "label": "has",
    "to": 208
  }, {
    "from": 191,
    "label": "has",
    "to": 209
  }, {
    "from": 191,
    "label": "has",
    "to": 210
  }, {
    "from": 191,
    "label": "has",
    "to": 211
  }, {
    "from": 191,
    "label": "has",
    "to": 212
  }, {
    "from": 191,
    "label": "has",
    "to": 213
  }, {
    "from": 191,
    "label": "has",
    "to": 214
  }, {
    "from": 191,
    "label": "has",
    "to": 215
  }, {
    "from": 191,
    "label": "has",
    "to": 216
  }, {
    "from": 191,
    "label": "has",
    "to": 217
  }, {
    "from": 191,
    "label": "has",
    "to": 218
  }, {
    "from": 191,
    "label": "has",
    "to": 219
  }, {
    "from": 191,
    "label": "has",
    "to": 220
  }, {
    "from": 191,
    "label": "has",
    "to": 221
  }, {
    "from": 191,
    "label": "has",
    "to": 222
  }, {
    "from": 191,
    "label": "has",
    "to": 223
  }, {
    "from": 191,
    "label": "has",
    "to": 224
  }, {
    "from": 191,
    "label": "has",
    "to": 225
  }, {
    "from": 191,
    "label": "has",
    "to": 226
  }, {
    "from": 191,
    "label": "has",
    "to": 227
  }, {
    "from": 191,
    "label": "has",
    "to": 228
  }, {
    "from": 191,
    "label": "has",
    "to": 229
  }, {
    "from": 191,
    "label": "has",
    "to": 230
  }, {
    "from": 191,
    "label": "has",
    "to": 231
  }, {
    "from": 191,
    "label": "has",
    "to": 232
  }, {
    "from": 191,
    "label": "has",
    "to": 233
  }, {
    "from": 191,
    "label": "has",
    "to": 234
  }, {
    "from": 191,
    "label": "has",
    "to": 235
  }, {
    "from": 191,
    "label": "has",
    "to": 236
  }, {
    "from": 191,
    "label": "has",
    "to": 237
  }, {
    "from": 191,
    "label": "has",
    "to": 238
  }, {
    "from": 191,
    "label": "has",
    "to": 239
  }, {
    "from": 191,
    "label": "has",
    "to": 240
  }, {
    "from": 191,
    "label": "has",
    "to": 241
  }, {
    "from": 191,
    "label": "has",
    "to": 242
  }, {
    "from": 191,
    "label": "has",
    "to": 243
  }, {
    "from": 191,
    "label": "has",
    "to": 244
  }, {
    "from": 191,
    "label": "has",
    "to": 245
  }, {
    "from": 191,
    "label": "has",
    "to": 246
  }, {
    "from": 191,
    "label": "has",
    "to": 247
  }, {
    "from": 191,
    "label": "has",
    "to": 248
  }, {
    "from": 191,
    "label": "has",
    "to": 249
  }, {
    "from": 191,
    "label": "has",
    "to": 250
  }, {
    "from": 191,
    "label": "has",
    "to": 251
  }, {
    "from": 191,
    "label": "has",
    "to": 252
  }, {
    "from": 191,
    "label": "has",
    "to": 253
  }, {
    "from": 191,
    "label": "has",
    "to": 254
  }, {
    "from": 191,
    "label": "has",
    "to": 255
  }, {
    "from": 191,
    "label": "has",
    "to": 256
  }, {
    "from": 191,
    "label": "has",
    "to": 257
  }, {
    "from": 191,
    "label": "has",
    "to": 258
  }, {
    "from": 191,
    "label": "has",
    "to": 259
  }, {
    "from": 191,
    "label": "has",
    "to": 260
  }, {
    "from": 191,
    "label": "has",
    "to": 261
  }, {
    "from": 191,
    "label": "has",
    "to": 262
  }, {
    "from": 191,
    "label": "has",
    "to": 263
  }, {
    "from": 191,
    "label": "has",
    "to": 264
  }, {
    "from": 191,
    "label": "has",
    "to": 265
  }, {
    "from": 191,
    "label": "has",
    "to": 266
  }, {
    "from": 191,
    "label": "has",
    "to": 267
  }, {
    "from": 191,
    "label": "has",
    "to": 268
  }, {
    "from": 191,
    "label": "has",
    "to": 269
  }, {
    "from": 191,
    "label": "has",
    "to": 270
  }, {
    "from": 191,
    "label": "has",
    "to": 271
  }, {
    "from": 191,
    "label": "has",
    "to": 272
  }, {
    "from": 191,
    "label": "has",
    "to": 273
  }, {
    "from": 191,
    "label": "has",
    "to": 274
  }, {
    "from": 191,
    "label": "has",
    "to": 275
  }, {
    "from": 191,
    "label": "has",
    "to": 276
  }, {
    "from": 191,
    "label": "has",
    "to": 277
  }, {
    "from": 191,
    "label": "has",
    "to": 278
  }, {
    "from": 191,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 279,
    "label": "has",
    "to": 281
  }, {
    "from": 279,
    "label": "has",
    "to": 282
  }, {
    "from": 279,
    "label": "has",
    "to": 283
  }, {
    "from": 279,
    "label": "has",
    "to": 284
  }, {
    "from": 279,
    "label": "has",
    "to": 285
  }, {
    "from": 191,
    "label": "has",
    "to": 286
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 289,
    "label": "has",
    "to": 292
  }, {
    "from": 289,
    "label": "has",
    "to": 293
  }, {
    "from": 289,
    "label": "has",
    "to": 294
  }, {
    "from": 289,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 289,
    "label": "has",
    "to": 297
  }, {
    "from": 289,
    "label": "has",
    "to": 298
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 299,
    "label": "has",
    "to": 301
  }, {
    "from": 299,
    "label": "has",
    "to": 166
  }, {
    "from": 299,
    "label": "has",
    "to": 293
  }, {
    "from": 299,
    "label": "has",
    "to": 302
  }, {
    "from": 299,
    "label": "has",
    "to": 303
  }, {
    "from": 304,
    "label": "has",
    "to": 300
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 304,
    "label": "has",
    "to": 166
  }, {
    "from": 304,
    "label": "has",
    "to": 293
  }, {
    "from": 304,
    "label": "has",
    "to": 302
  }, {
    "from": 304,
    "label": "has",
    "to": 306
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 307,
    "label": "has",
    "to": 310
  }, {
    "from": 307,
    "label": "has",
    "to": 311
  }, {
    "from": 307,
    "label": "has",
    "to": 312
  }, {
    "from": 307,
    "label": "has",
    "to": 313
  }, {
    "from": 307,
    "label": "has",
    "to": 314
  }, {
    "from": 307,
    "label": "has",
    "to": 315
  }, {
    "from": 307,
    "label": "has",
    "to": 316
  }, {
    "from": 307,
    "label": "has",
    "to": 317
  }, {
    "from": 307,
    "label": "has",
    "to": 318
  }, {
    "from": 307,
    "label": "has",
    "to": 319
  }, {
    "from": 307,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 307,
    "label": "has",
    "to": 322
  }, {
    "from": 307,
    "label": "has",
    "to": 323
  }, {
    "from": 307,
    "label": "has",
    "to": 324
  }, {
    "from": 307,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 323
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 326,
    "label": "has",
    "to": 309
  }, {
    "from": 326,
    "label": "has",
    "to": 311
  }, {
    "from": 326,
    "label": "has",
    "to": 328
  }, {
    "from": 329,
    "label": "has",
    "to": 323
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 329,
    "label": "has",
    "to": 331
  }, {
    "from": 329,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 333,
    "label": "has",
    "to": 335
  }, {
    "from": 337,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 337,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 170
  }, {
    "from": 337,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 164
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 4
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 342,
    "label": "has",
    "to": 313
  }, {
    "from": 342,
    "label": "has",
    "to": 345
  }, {
    "from": 342,
    "label": "has",
    "to": 346
  }, {
    "from": 342,
    "label": "has",
    "to": 347
  }, {
    "from": 342,
    "label": "has",
    "to": 348
  }, {
    "from": 342,
    "label": "has",
    "to": 349
  }, {
    "from": 342,
    "label": "has",
    "to": 350
  }, {
    "from": 342,
    "label": "has",
    "to": 351
  }, {
    "from": 342,
    "label": "has",
    "to": 352
  }, {
    "from": 342,
    "label": "has",
    "to": 322
  }, {
    "from": 342,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 342,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 342,
    "label": "has",
    "to": 357
  }, {
    "from": 342,
    "label": "has",
    "to": 347
  }, {
    "from": 342,
    "label": "has",
    "to": 358
  }, {
    "from": 342,
    "label": "has",
    "to": 359
  }, {
    "from": 342,
    "label": "has",
    "to": 300
  }, {
    "from": 342,
    "label": "has",
    "to": 323
  }, {
    "from": 342,
    "label": "has",
    "to": 360
  }, {
    "from": 361,
    "label": "has",
    "to": 164
  }, {
    "from": 361,
    "label": "has",
    "to": 343
  }, {
    "from": 361,
    "label": "has",
    "to": 4
  }, {
    "from": 361,
    "label": "has",
    "to": 165
  }, {
    "from": 361,
    "label": "has",
    "to": 166
  }, {
    "from": 361,
    "label": "has",
    "to": 351
  }, {
    "from": 361,
    "label": "has",
    "to": 172
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 364,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 364,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 170
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 366,
    "label": "has",
    "to": 164
  }, {
    "from": 366,
    "label": "has",
    "to": 165
  }, {
    "from": 366,
    "label": "has",
    "to": 166
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 366,
    "label": "has",
    "to": 323
  }, {
    "from": 366,
    "label": "has",
    "to": 172
  }, {
    "from": 366,
    "label": "has",
    "to": 164
  }, {
    "from": 366,
    "label": "has",
    "to": 368
  }, {
    "from": 366,
    "label": "has",
    "to": 369
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 369,
    "label": "has",
    "to": 367
  }, {
    "from": 369,
    "label": "has",
    "to": 371
  }, {
    "from": 366,
    "label": "has",
    "to": 372
  }, {
    "from": 366,
    "label": "has",
    "to": 373
  }, {
    "from": 366,
    "label": "has",
    "to": 374
  }, {
    "from": 366,
    "label": "has",
    "to": 323
  }, {
    "from": 366,
    "label": "has",
    "to": 164
  }, {
    "from": 366,
    "label": "has",
    "to": 368
  }, {
    "from": 366,
    "label": "has",
    "to": 375
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 375,
    "label": "has",
    "to": 166
  }, {
    "from": 375,
    "label": "has",
    "to": 371
  }, {
    "from": 366,
    "label": "has",
    "to": 372
  }, {
    "from": 366,
    "label": "has",
    "to": 373
  }, {
    "from": 366,
    "label": "has",
    "to": 374
  }, {
    "from": 366,
    "label": "has",
    "to": 323
  }, {
    "from": 366,
    "label": "has",
    "to": 377
  }, {
    "from": 378,
    "label": "has",
    "to": 164
  }, {
    "from": 378,
    "label": "has",
    "to": 379
  }, {
    "from": 378,
    "label": "has",
    "to": 368
  }, {
    "from": 378,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 370
  }, {
    "from": 380,
    "label": "has",
    "to": 367
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 380,
    "label": "has",
    "to": 371
  }, {
    "from": 378,
    "label": "has",
    "to": 372
  }, {
    "from": 378,
    "label": "has",
    "to": 373
  }, {
    "from": 378,
    "label": "has",
    "to": 374
  }, {
    "from": 378,
    "label": "has",
    "to": 323
  }, {
    "from": 378,
    "label": "has",
    "to": 383
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 386,
    "label": "has",
    "to": 387
  }, {
    "from": 385,
    "label": "has",
    "to": 388
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 389,
    "label": "has",
    "to": 392
  }, {
    "from": 389,
    "label": "has",
    "to": 393
  }, {
    "from": 389,
    "label": "has",
    "to": 394
  }, {
    "from": 389,
    "label": "has",
    "to": 395
  }, {
    "from": 389,
    "label": "has",
    "to": 396
  }, {
    "from": 389,
    "label": "has",
    "to": 397
  }, {
    "from": 389,
    "label": "has",
    "to": 398
  }, {
    "from": 389,
    "label": "has",
    "to": 399
  }, {
    "from": 389,
    "label": "has",
    "to": 400
  }, {
    "from": 389,
    "label": "has",
    "to": 401
  }, {
    "from": 389,
    "label": "has",
    "to": 402
  }, {
    "from": 389,
    "label": "has",
    "to": 403
  }, {
    "from": 389,
    "label": "has",
    "to": 404
  }, {
    "from": 389,
    "label": "has",
    "to": 405
  }, {
    "from": 389,
    "label": "has",
    "to": 406
  }, {
    "from": 407,
    "label": "has",
    "to": 390
  }, {
    "from": 407,
    "label": "has",
    "to": 408
  }, {
    "from": 407,
    "label": "has",
    "to": 409
  }, {
    "from": 407,
    "label": "has",
    "to": 410
  }, {
    "from": 407,
    "label": "has",
    "to": 411
  }, {
    "from": 407,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 407,
    "label": "has",
    "to": 414
  }, {
    "from": 414,
    "label": "has",
    "to": 415
  }, {
    "from": 407,
    "label": "has",
    "to": 416
  }, {
    "from": 416,
    "label": "has",
    "to": 417
  }, {
    "from": 407,
    "label": "has",
    "to": 410
  }, {
    "from": 407,
    "label": "has",
    "to": 418
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 419,
    "label": "has",
    "to": 410
  }, {
    "from": 419,
    "label": "has",
    "to": 416
  }, {
    "from": 416,
    "label": "has",
    "to": 417
  }, {
    "from": 419,
    "label": "has",
    "to": 421
  }, {
    "from": 422,
    "label": "has",
    "to": 423
  }, {
    "from": 422,
    "label": "has",
    "to": 410
  }, {
    "from": 422,
    "label": "has",
    "to": 424
  }, {
    "from": 422,
    "label": "has",
    "to": 410
  }, {
    "from": 422,
    "label": "has",
    "to": 425
  }, {
    "from": 422,
    "label": "has",
    "to": 410
  }, {
    "from": 422,
    "label": "has",
    "to": 426
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 427,
    "label": "has",
    "to": 429
  }, {
    "from": 427,
    "label": "has",
    "to": 430
  }, {
    "from": 427,
    "label": "has",
    "to": 431
  }, {
    "from": 427,
    "label": "has",
    "to": 432
  }, {
    "from": 427,
    "label": "has",
    "to": 433
  }, {
    "from": 427,
    "label": "has",
    "to": 432
  }, {
    "from": 427,
    "label": "has",
    "to": 434
  }, {
    "from": 427,
    "label": "has",
    "to": 435
  }, {
    "from": 427,
    "label": "has",
    "to": 436
  }, {
    "from": 427,
    "label": "has",
    "to": 437
  }, {
    "from": 427,
    "label": "has",
    "to": 438
  }, {
    "from": 427,
    "label": "has",
    "to": 434
  }, {
    "from": 427,
    "label": "has",
    "to": 439
  }, {
    "from": 427,
    "label": "has",
    "to": 440
  }, {
    "from": 427,
    "label": "has",
    "to": 441
  }, {
    "from": 427,
    "label": "has",
    "to": 442
  }, {
    "from": 427,
    "label": "has",
    "to": 443
  }, {
    "from": 427,
    "label": "has",
    "to": 444
  }, {
    "from": 427,
    "label": "has",
    "to": 445
  }, {
    "from": 427,
    "label": "has",
    "to": 446
  }, {
    "from": 427,
    "label": "has",
    "to": 447
  }, {
    "from": 427,
    "label": "has",
    "to": 448
  }, {
    "from": 427,
    "label": "has",
    "to": 449
  }, {
    "from": 427,
    "label": "has",
    "to": 450
  }, {
    "from": 427,
    "label": "has",
    "to": 451
  }, {
    "from": 427,
    "label": "has",
    "to": 452
  }, {
    "from": 427,
    "label": "has",
    "to": 449
  }, {
    "from": 427,
    "label": "has",
    "to": 450
  }, {
    "from": 427,
    "label": "has",
    "to": 453
  }, {
    "from": 427,
    "label": "has",
    "to": 454
  }, {
    "from": 427,
    "label": "has",
    "to": 455
  }, {
    "from": 427,
    "label": "has",
    "to": 453
  }, {
    "from": 427,
    "label": "has",
    "to": 454
  }, {
    "from": 427,
    "label": "has",
    "to": 456
  }, {
    "from": 427,
    "label": "has",
    "to": 457
  }, {
    "from": 427,
    "label": "has",
    "to": 458
  }, {
    "from": 427,
    "label": "has",
    "to": 459
  }, {
    "from": 427,
    "label": "has",
    "to": 460
  }, {
    "from": 427,
    "label": "has",
    "to": 461
  }, {
    "from": 427,
    "label": "has",
    "to": 462
  }, {
    "from": 427,
    "label": "has",
    "to": 463
  }, {
    "from": 427,
    "label": "has",
    "to": 464
  }, {
    "from": 427,
    "label": "has",
    "to": 465
  }, {
    "from": 427,
    "label": "has",
    "to": 466
  }, {
    "from": 466,
    "label": "has",
    "to": 467
  }, {
    "from": 427,
    "label": "has",
    "to": 468
  }, {
    "from": 468,
    "label": "has",
    "to": 469
  }, {
    "from": 427,
    "label": "has",
    "to": 448
  }, {
    "from": 427,
    "label": "has",
    "to": 456
  }, {
    "from": 427,
    "label": "has",
    "to": 457
  }, {
    "from": 427,
    "label": "has",
    "to": 470
  }, {
    "from": 471,
    "label": "has",
    "to": 472
  }, {
    "from": 471,
    "label": "has",
    "to": 473
  }, {
    "from": 471,
    "label": "has",
    "to": 474
  }, {
    "from": 475,
    "label": "has",
    "to": 472
  }, {
    "from": 475,
    "label": "has",
    "to": 476
  }, {
    "from": 475,
    "label": "has",
    "to": 477
  }, {
    "from": 475,
    "label": "has",
    "to": 478
  }, {
    "from": 475,
    "label": "has",
    "to": 479
  }, {
    "from": 475,
    "label": "has",
    "to": 480
  }, {
    "from": 475,
    "label": "has",
    "to": 481
  }, {
    "from": 475,
    "label": "has",
    "to": 482
  }, {
    "from": 475,
    "label": "has",
    "to": 480
  }, {
    "from": 475,
    "label": "has",
    "to": 479
  }, {
    "from": 475,
    "label": "has",
    "to": 483
  }, {
    "from": 484,
    "label": "has",
    "to": 472
  }, {
    "from": 484,
    "label": "has",
    "to": 485
  }, {
    "from": 484,
    "label": "has",
    "to": 486
  }, {
    "from": 484,
    "label": "has",
    "to": 487
  }, {
    "from": 484,
    "label": "has",
    "to": 488
  }, {
    "from": 484,
    "label": "has",
    "to": 489
  }, {
    "from": 484,
    "label": "has",
    "to": 490
  }, {
    "from": 484,
    "label": "has",
    "to": 491
  }, {
    "from": 484,
    "label": "has",
    "to": 492
  }, {
    "from": 493,
    "label": "has",
    "to": 472
  }, {
    "from": 493,
    "label": "has",
    "to": 477
  }, {
    "from": 493,
    "label": "has",
    "to": 494
  }, {
    "from": 493,
    "label": "has",
    "to": 478
  }, {
    "from": 493,
    "label": "has",
    "to": 495
  }, {
    "from": 493,
    "label": "has",
    "to": 496
  }, {
    "from": 493,
    "label": "has",
    "to": 497
  }, {
    "from": 493,
    "label": "has",
    "to": 498
  }, {
    "from": 499,
    "label": "has",
    "to": 164
  }, {
    "from": 499,
    "label": "has",
    "to": 500
  }, {
    "from": 499,
    "label": "has",
    "to": 501
  }, {
    "from": 499,
    "label": "has",
    "to": 502
  }, {
    "from": 499,
    "label": "has",
    "to": 503
  }, {
    "from": 499,
    "label": "has",
    "to": 504
  }, {
    "from": 499,
    "label": "has",
    "to": 505
  }, {
    "from": 499,
    "label": "has",
    "to": 506
  }, {
    "from": 499,
    "label": "has",
    "to": 507
  }, {
    "from": 499,
    "label": "has",
    "to": 508
  }, {
    "from": 499,
    "label": "has",
    "to": 509
  }, {
    "from": 499,
    "label": "has",
    "to": 510
  }, {
    "from": 499,
    "label": "has",
    "to": 511
  }, {
    "from": 512,
    "label": "has",
    "to": 513
  }, {
    "from": 513,
    "label": "has",
    "to": 387
  }, {
    "from": 512,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 512,
    "label": "has",
    "to": 514
  }, {
    "from": 514,
    "label": "has",
    "to": 515
  }, {
    "from": 512,
    "label": "has",
    "to": 516
  }, {
    "from": 516,
    "label": "has",
    "to": 517
  }, {
    "from": 512,
    "label": "has",
    "to": 518
  }, {
    "from": 518,
    "label": "has",
    "to": 519
  }, {
    "from": 512,
    "label": "has",
    "to": 520
  }, {
    "from": 520,
    "label": "has",
    "to": 521
  }, {
    "from": 512,
    "label": "has",
    "to": 522
  }, {
    "from": 523,
    "label": "has",
    "to": 524
  }, {
    "from": 523,
    "label": "has",
    "to": 525
  }, {
    "from": 523,
    "label": "has",
    "to": 526
  }, {
    "from": 523,
    "label": "has",
    "to": 527
  }, {
    "from": 523,
    "label": "has",
    "to": 528
  }, {
    "from": 523,
    "label": "has",
    "to": 529
  }, {
    "from": 523,
    "label": "has",
    "to": 530
  }, {
    "from": 523,
    "label": "has",
    "to": 531
  }, {
    "from": 523,
    "label": "has",
    "to": 532
  }, {
    "from": 523,
    "label": "has",
    "to": 533
  }, {
    "from": 523,
    "label": "has",
    "to": 534
  }, {
    "from": 523,
    "label": "has",
    "to": 535
  }, {
    "from": 523,
    "label": "has",
    "to": 536
  }, {
    "from": 523,
    "label": "has",
    "to": 537
  }, {
    "from": 523,
    "label": "has",
    "to": 534
  }, {
    "from": 523,
    "label": "has",
    "to": 538
  }, {
    "from": 523,
    "label": "has",
    "to": 539
  }, {
    "from": 523,
    "label": "has",
    "to": 540
  }, {
    "from": 523,
    "label": "has",
    "to": 541
  }, {
    "from": 523,
    "label": "has",
    "to": 542
  }, {
    "from": 523,
    "label": "has",
    "to": 534
  }, {
    "from": 523,
    "label": "has",
    "to": 538
  }, {
    "from": 523,
    "label": "has",
    "to": 539
  }, {
    "from": 523,
    "label": "has",
    "to": 539
  }, {
    "from": 523,
    "label": "has",
    "to": 543
  }, {
    "from": 543,
    "label": "has",
    "to": 544
  }, {
    "from": 543,
    "label": "has",
    "to": 525
  }, {
    "from": 543,
    "label": "has",
    "to": 545
  }, {
    "from": 543,
    "label": "has",
    "to": 534
  }, {
    "from": 543,
    "label": "has",
    "to": 538
  }, {
    "from": 543,
    "label": "has",
    "to": 539
  }, {
    "from": 543,
    "label": "has",
    "to": 546
  }, {
    "from": 523,
    "label": "has",
    "to": 547
  }, {
    "from": 548,
    "label": "has",
    "to": 549
  }, {
    "from": 548,
    "label": "has",
    "to": 550
  }, {
    "from": 548,
    "label": "has",
    "to": 551
  }, {
    "from": 548,
    "label": "has",
    "to": 534
  }, {
    "from": 548,
    "label": "has",
    "to": 552
  }, {
    "from": 548,
    "label": "has",
    "to": 553
  }, {
    "from": 548,
    "label": "has",
    "to": 554
  }, {
    "from": 548,
    "label": "has",
    "to": 555
  }, {
    "from": 548,
    "label": "has",
    "to": 534
  }, {
    "from": 548,
    "label": "has",
    "to": 556
  }, {
    "from": 548,
    "label": "has",
    "to": 557
  }, {
    "from": 548,
    "label": "has",
    "to": 558
  }, {
    "from": 548,
    "label": "has",
    "to": 559
  }, {
    "from": 560,
    "label": "has",
    "to": 561
  }, {
    "from": 560,
    "label": "has",
    "to": 549
  }, {
    "from": 560,
    "label": "has",
    "to": 562
  }, {
    "from": 560,
    "label": "has",
    "to": 563
  }, {
    "from": 564,
    "label": "has",
    "to": 565
  }, {
    "from": 565,
    "label": "has",
    "to": 566
  }, {
    "from": 564,
    "label": "has",
    "to": 567
  }, {
    "from": 567,
    "label": "has",
    "to": 568
  }, {
    "from": 564,
    "label": "has",
    "to": 569
  }, {
    "from": 570,
    "label": "has",
    "to": 164
  }, {
    "from": 570,
    "label": "has",
    "to": 571
  }, {
    "from": 572,
    "label": "has",
    "to": 573
  }, {
    "from": 573,
    "label": "has",
    "to": 574
  }, {
    "from": 572,
    "label": "has",
    "to": 575
  }, {
    "from": 575,
    "label": "has",
    "to": 576
  }, {
    "from": 572,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 170
  }, {
    "from": 572,
    "label": "has",
    "to": 577
  }, {
    "from": 578,
    "label": "has",
    "to": 579
  }, {
    "from": 578,
    "label": "has",
    "to": 501
  }, {
    "from": 578,
    "label": "has",
    "to": 580
  }, {
    "from": 578,
    "label": "has",
    "to": 581
  }, {
    "from": 578,
    "label": "has",
    "to": 534
  }, {
    "from": 578,
    "label": "has",
    "to": 538
  }, {
    "from": 578,
    "label": "has",
    "to": 582
  }, {
    "from": 578,
    "label": "has",
    "to": 583
  }, {
    "from": 584,
    "label": "has",
    "to": 585
  }, {
    "from": 584,
    "label": "has",
    "to": 586
  }, {
    "from": 584,
    "label": "has",
    "to": 587
  }, {
    "from": 584,
    "label": "has",
    "to": 526
  }, {
    "from": 584,
    "label": "has",
    "to": 374
  }, {
    "from": 584,
    "label": "has",
    "to": 588
  }, {
    "from": 589,
    "label": "has",
    "to": 164
  }, {
    "from": 589,
    "label": "has",
    "to": 500
  }, {
    "from": 589,
    "label": "has",
    "to": 501
  }, {
    "from": 589,
    "label": "has",
    "to": 590
  }, {
    "from": 589,
    "label": "has",
    "to": 581
  }, {
    "from": 589,
    "label": "has",
    "to": 591
  }, {
    "from": 589,
    "label": "has",
    "to": 534
  }, {
    "from": 589,
    "label": "has",
    "to": 592
  }, {
    "from": 589,
    "label": "has",
    "to": 593
  }, {
    "from": 589,
    "label": "has",
    "to": 534
  }, {
    "from": 589,
    "label": "has",
    "to": 594
  }, {
    "from": 595,
    "label": "has",
    "to": 513
  }, {
    "from": 513,
    "label": "has",
    "to": 387
  }, {
    "from": 595,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 595,
    "label": "has",
    "to": 514
  }, {
    "from": 514,
    "label": "has",
    "to": 515
  }, {
    "from": 595,
    "label": "has",
    "to": 596
  }, {
    "from": 596,
    "label": "has",
    "to": 597
  }, {
    "from": 595,
    "label": "has",
    "to": 598
  }, {
    "from": 599,
    "label": "has",
    "to": 600
  }, {
    "from": 599,
    "label": "has",
    "to": 601
  }, {
    "from": 599,
    "label": "has",
    "to": 602
  }, {
    "from": 599,
    "label": "has",
    "to": 603
  }, {
    "from": 599,
    "label": "has",
    "to": 604
  }, {
    "from": 605,
    "label": "has",
    "to": 600
  }, {
    "from": 605,
    "label": "has",
    "to": 606
  }, {
    "from": 605,
    "label": "has",
    "to": 607
  }, {
    "from": 605,
    "label": "has",
    "to": 608
  }, {
    "from": 605,
    "label": "has",
    "to": 603
  }, {
    "from": 605,
    "label": "has",
    "to": 609
  }, {
    "from": 605,
    "label": "has",
    "to": 607
  }, {
    "from": 605,
    "label": "has",
    "to": 610
  }, {
    "from": 605,
    "label": "has",
    "to": 603
  }, {
    "from": 605,
    "label": "has",
    "to": 611
  }, {
    "from": 605,
    "label": "has",
    "to": 612
  }, {
    "from": 613,
    "label": "has",
    "to": 600
  }, {
    "from": 613,
    "label": "has",
    "to": 614
  }, {
    "from": 613,
    "label": "has",
    "to": 603
  }, {
    "from": 613,
    "label": "has",
    "to": 609
  }, {
    "from": 613,
    "label": "has",
    "to": 615
  }, {
    "from": 616,
    "label": "has",
    "to": 617
  }, {
    "from": 617,
    "label": "has",
    "to": 618
  }, {
    "from": 617,
    "label": "has",
    "to": 619
  }, {
    "from": 617,
    "label": "has",
    "to": 486
  }, {
    "from": 617,
    "label": "has",
    "to": 620
  }, {
    "from": 617,
    "label": "has",
    "to": 408
  }, {
    "from": 617,
    "label": "has",
    "to": 409
  }, {
    "from": 617,
    "label": "has",
    "to": 410
  }, {
    "from": 616,
    "label": "has",
    "to": 621
  }, {
    "from": 621,
    "label": "has",
    "to": 423
  }, {
    "from": 621,
    "label": "has",
    "to": 622
  }, {
    "from": 621,
    "label": "has",
    "to": 623
  }, {
    "from": 621,
    "label": "has",
    "to": 603
  }, {
    "from": 621,
    "label": "has",
    "to": 624
  }, {
    "from": 621,
    "label": "has",
    "to": 625
  }, {
    "from": 621,
    "label": "has",
    "to": 619
  }, {
    "from": 621,
    "label": "has",
    "to": 486
  }, {
    "from": 621,
    "label": "has",
    "to": 410
  }, {
    "from": 616,
    "label": "has",
    "to": 626
  }, {
    "from": 627,
    "label": "has",
    "to": 628
  }, {
    "from": 628,
    "label": "has",
    "to": 629
  }, {
    "from": 628,
    "label": "has",
    "to": 630
  }, {
    "from": 628,
    "label": "has",
    "to": 409
  }, {
    "from": 628,
    "label": "has",
    "to": 408
  }, {
    "from": 628,
    "label": "has",
    "to": 410
  }, {
    "from": 628,
    "label": "has",
    "to": 631
  }, {
    "from": 628,
    "label": "has",
    "to": 632
  }, {
    "from": 628,
    "label": "has",
    "to": 633
  }, {
    "from": 628,
    "label": "has",
    "to": 634
  }, {
    "from": 628,
    "label": "has",
    "to": 635
  }, {
    "from": 627,
    "label": "has",
    "to": 636
  }, {
    "from": 636,
    "label": "has",
    "to": 637
  }, {
    "from": 636,
    "label": "has",
    "to": 638
  }, {
    "from": 636,
    "label": "has",
    "to": 639
  }, {
    "from": 636,
    "label": "has",
    "to": 640
  }, {
    "from": 636,
    "label": "has",
    "to": 641
  }, {
    "from": 636,
    "label": "has",
    "to": 642
  }, {
    "from": 636,
    "label": "has",
    "to": 643
  }, {
    "from": 636,
    "label": "has",
    "to": 644
  }, {
    "from": 636,
    "label": "has",
    "to": 639
  }, {
    "from": 636,
    "label": "has",
    "to": 640
  }, {
    "from": 636,
    "label": "has",
    "to": 645
  }, {
    "from": 636,
    "label": "has",
    "to": 641
  }, {
    "from": 636,
    "label": "has",
    "to": 646
  }, {
    "from": 636,
    "label": "has",
    "to": 647
  }, {
    "from": 636,
    "label": "has",
    "to": 648
  }, {
    "from": 636,
    "label": "has",
    "to": 649
  }, {
    "from": 636,
    "label": "has",
    "to": 639
  }, {
    "from": 636,
    "label": "has",
    "to": 640
  }, {
    "from": 636,
    "label": "has",
    "to": 650
  }, {
    "from": 636,
    "label": "has",
    "to": 641
  }, {
    "from": 636,
    "label": "has",
    "to": 651
  }, {
    "from": 636,
    "label": "has",
    "to": 652
  }, {
    "from": 652,
    "label": "has",
    "to": 653
  }, {
    "from": 652,
    "label": "has",
    "to": 654
  }, {
    "from": 652,
    "label": "has",
    "to": 640
  }, {
    "from": 652,
    "label": "has",
    "to": 655
  }, {
    "from": 652,
    "label": "has",
    "to": 656
  }, {
    "from": 636,
    "label": "has",
    "to": 657
  }, {
    "from": 627,
    "label": "has",
    "to": 658
  }, {
    "from": 659,
    "label": "has",
    "to": 660
  }, {
    "from": 659,
    "label": "has",
    "to": 661
  }, {
    "from": 659,
    "label": "has",
    "to": 662
  }, {
    "from": 659,
    "label": "has",
    "to": 663
  }, {
    "from": 659,
    "label": "has",
    "to": 664
  }, {
    "from": 665,
    "label": "has",
    "to": 666
  }, {
    "from": 665,
    "label": "has",
    "to": 667
  }, {
    "from": 665,
    "label": "has",
    "to": 668
  }, {
    "from": 665,
    "label": "has",
    "to": 669
  }, {
    "from": 665,
    "label": "has",
    "to": 525
  }, {
    "from": 665,
    "label": "has",
    "to": 349
  }, {
    "from": 665,
    "label": "has",
    "to": 670
  }, {
    "from": 665,
    "label": "has",
    "to": 671
  }, {
    "from": 672,
    "label": "has",
    "to": 666
  }, {
    "from": 672,
    "label": "has",
    "to": 667
  }, {
    "from": 672,
    "label": "has",
    "to": 673
  }, {
    "from": 672,
    "label": "has",
    "to": 669
  }, {
    "from": 672,
    "label": "has",
    "to": 525
  }, {
    "from": 672,
    "label": "has",
    "to": 349
  }, {
    "from": 672,
    "label": "has",
    "to": 670
  }, {
    "from": 672,
    "label": "has",
    "to": 674
  }, {
    "from": 675,
    "label": "has",
    "to": 676
  }, {
    "from": 675,
    "label": "has",
    "to": 677
  }, {
    "from": 675,
    "label": "has",
    "to": 678
  }, {
    "from": 675,
    "label": "has",
    "to": 679
  }, {
    "from": 675,
    "label": "has",
    "to": 680
  }, {
    "from": 675,
    "label": "has",
    "to": 681
  }, {
    "from": 682,
    "label": "has",
    "to": 683
  }, {
    "from": 682,
    "label": "has",
    "to": 684
  }, {
    "from": 682,
    "label": "has",
    "to": 677
  }, {
    "from": 682,
    "label": "has",
    "to": 678
  }, {
    "from": 682,
    "label": "has",
    "to": 679
  }, {
    "from": 682,
    "label": "has",
    "to": 680
  }, {
    "from": 682,
    "label": "has",
    "to": 685
  }, {
    "from": 686,
    "label": "has",
    "to": 687
  }, {
    "from": 686,
    "label": "has",
    "to": 525
  }, {
    "from": 686,
    "label": "has",
    "to": 688
  }, {
    "from": 686,
    "label": "has",
    "to": 689
  }, {
    "from": 690,
    "label": "has",
    "to": 691
  }, {
    "from": 690,
    "label": "has",
    "to": 684
  }, {
    "from": 690,
    "label": "has",
    "to": 661
  }, {
    "from": 690,
    "label": "has",
    "to": 662
  }, {
    "from": 690,
    "label": "has",
    "to": 663
  }, {
    "from": 690,
    "label": "has",
    "to": 692
  }, {
    "from": 693,
    "label": "has",
    "to": 694
  }, {
    "from": 693,
    "label": "has",
    "to": 695
  }, {
    "from": 693,
    "label": "has",
    "to": 661
  }, {
    "from": 693,
    "label": "has",
    "to": 662
  }, {
    "from": 693,
    "label": "has",
    "to": 663
  }, {
    "from": 693,
    "label": "has",
    "to": 696
  }, {
    "from": 697,
    "label": "has",
    "to": 698
  }, {
    "from": 698,
    "label": "has",
    "to": 699
  }, {
    "from": 697,
    "label": "has",
    "to": 700
  }, {
    "from": 701,
    "label": "has",
    "to": 702
  }, {
    "from": 702,
    "label": "has",
    "to": 703
  }, {
    "from": 701,
    "label": "has",
    "to": 704
  }, {
    "from": 705,
    "label": "has",
    "to": 706
  }, {
    "from": 705,
    "label": "has",
    "to": 707
  }, {
    "from": 705,
    "label": "has",
    "to": 708
  }, {
    "from": 705,
    "label": "has",
    "to": 709
  }, {
    "from": 705,
    "label": "has",
    "to": 710
  }, {
    "from": 711,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 170
  }, {
    "from": 711,
    "label": "has",
    "to": 712
  }, {
    "from": 711,
    "label": "has",
    "to": 713
  }, {
    "from": 714,
    "label": "has",
    "to": 715
  }, {
    "from": 714,
    "label": "has",
    "to": 716
  }, {
    "from": 714,
    "label": "has",
    "to": 717
  }, {
    "from": 714,
    "label": "has",
    "to": 718
  }, {
    "from": 719,
    "label": "has",
    "to": 720
  }, {
    "from": 719,
    "label": "has",
    "to": 721
  }, {
    "from": 719,
    "label": "has",
    "to": 722
  }, {
    "from": 719,
    "label": "has",
    "to": 723
  }, {
    "from": 724,
    "label": "has",
    "to": 725
  }, {
    "from": 724,
    "label": "has",
    "to": 709
  }, {
    "from": 724,
    "label": "has",
    "to": 726
  }, {
    "from": 727,
    "label": "has",
    "to": 728
  }, {
    "from": 727,
    "label": "has",
    "to": 712
  }, {
    "from": 727,
    "label": "has",
    "to": 729
  }, {
    "from": 727,
    "label": "has",
    "to": 730
  }, {
    "from": 731,
    "label": "has",
    "to": 732
  }, {
    "from": 731,
    "label": "has",
    "to": 733
  }, {
    "from": 733,
    "label": "has",
    "to": 734
  }, {
    "from": 733,
    "label": "has",
    "to": 735
  }, {
    "from": 731,
    "label": "has",
    "to": 736
  }, {
    "from": 731,
    "label": "has",
    "to": 734
  }, {
    "from": 731,
    "label": "has",
    "to": 715
  }, {
    "from": 731,
    "label": "has",
    "to": 737
  }, {
    "from": 731,
    "label": "has",
    "to": 738
  }, {
    "from": 731,
    "label": "has",
    "to": 739
  }, {
    "from": 731,
    "label": "has",
    "to": 740
  }, {
    "from": 731,
    "label": "has",
    "to": 733
  }, {
    "from": 733,
    "label": "has",
    "to": 734
  }, {
    "from": 733,
    "label": "has",
    "to": 735
  }, {
    "from": 731,
    "label": "has",
    "to": 715
  }, {
    "from": 731,
    "label": "has",
    "to": 741
  }, {
    "from": 731,
    "label": "has",
    "to": 738
  }, {
    "from": 731,
    "label": "has",
    "to": 734
  }, {
    "from": 731,
    "label": "has",
    "to": 736
  }, {
    "from": 731,
    "label": "has",
    "to": 734
  }, {
    "from": 731,
    "label": "has",
    "to": 742
  }, {
    "from": 731,
    "label": "has",
    "to": 739
  }, {
    "from": 731,
    "label": "has",
    "to": 743
  }, {
    "from": 744,
    "label": "has",
    "to": 745
  }, {
    "from": 744,
    "label": "has",
    "to": 746
  }, {
    "from": 744,
    "label": "has",
    "to": 747
  }, {
    "from": 744,
    "label": "has",
    "to": 748
  }, {
    "from": 744,
    "label": "has",
    "to": 749
  }, {
    "from": 749,
    "label": "has",
    "to": 750
  }, {
    "from": 744,
    "label": "has",
    "to": 751
  }, {
    "from": 751,
    "label": "has",
    "to": 752
  }, {
    "from": 751,
    "label": "has",
    "to": 753
  }, {
    "from": 751,
    "label": "has",
    "to": 754
  }, {
    "from": 751,
    "label": "has",
    "to": 755
  }, {
    "from": 755,
    "label": "has",
    "to": 756
  }, {
    "from": 755,
    "label": "has",
    "to": 757
  }, {
    "from": 755,
    "label": "has",
    "to": 758
  }, {
    "from": 755,
    "label": "has",
    "to": 759
  }, {
    "from": 755,
    "label": "has",
    "to": 760
  }, {
    "from": 760,
    "label": "has",
    "to": 753
  }, {
    "from": 760,
    "label": "has",
    "to": 761
  }, {
    "from": 760,
    "label": "has",
    "to": 762
  }, {
    "from": 760,
    "label": "has",
    "to": 754
  }, {
    "from": 760,
    "label": "has",
    "to": 763
  }, {
    "from": 763,
    "label": "has",
    "to": 764
  }, {
    "from": 744,
    "label": "has",
    "to": 765
  }, {
    "from": 765,
    "label": "has",
    "to": 752
  }, {
    "from": 765,
    "label": "has",
    "to": 766
  }, {
    "from": 765,
    "label": "has",
    "to": 754
  }, {
    "from": 765,
    "label": "has",
    "to": 767
  }, {
    "from": 767,
    "label": "has",
    "to": 768
  }, {
    "from": 767,
    "label": "has",
    "to": 735
  }, {
    "from": 767,
    "label": "has",
    "to": 756
  }, {
    "from": 767,
    "label": "has",
    "to": 769
  }, {
    "from": 744,
    "label": "has",
    "to": 770
  }, {
    "from": 744,
    "label": "has",
    "to": 771
  }, {
    "from": 744,
    "label": "has",
    "to": 739
  }, {
    "from": 744,
    "label": "has",
    "to": 772
  }, {
    "from": 744,
    "label": "has",
    "to": 773
  }, {
    "from": 774,
    "label": "has",
    "to": 752
  }, {
    "from": 774,
    "label": "has",
    "to": 753
  }, {
    "from": 774,
    "label": "has",
    "to": 754
  }, {
    "from": 774,
    "label": "has",
    "to": 755
  }, {
    "from": 755,
    "label": "has",
    "to": 756
  }, {
    "from": 755,
    "label": "has",
    "to": 757
  }, {
    "from": 755,
    "label": "has",
    "to": 758
  }, {
    "from": 755,
    "label": "has",
    "to": 759
  }, {
    "from": 755,
    "label": "has",
    "to": 760
  }, {
    "from": 760,
    "label": "has",
    "to": 753
  }, {
    "from": 760,
    "label": "has",
    "to": 761
  }, {
    "from": 760,
    "label": "has",
    "to": 762
  }, {
    "from": 760,
    "label": "has",
    "to": 754
  }, {
    "from": 760,
    "label": "has",
    "to": 763
  }, {
    "from": 763,
    "label": "has",
    "to": 764
  }, {
    "from": 774,
    "label": "has",
    "to": 775
  }, {
    "from": 776,
    "label": "has",
    "to": 752
  }, {
    "from": 776,
    "label": "has",
    "to": 766
  }, {
    "from": 776,
    "label": "has",
    "to": 754
  }, {
    "from": 776,
    "label": "has",
    "to": 767
  }, {
    "from": 767,
    "label": "has",
    "to": 768
  }, {
    "from": 767,
    "label": "has",
    "to": 735
  }, {
    "from": 767,
    "label": "has",
    "to": 756
  }, {
    "from": 767,
    "label": "has",
    "to": 769
  }, {
    "from": 776,
    "label": "has",
    "to": 777
  }, {
    "from": 778,
    "label": "has",
    "to": 779
  }, {
    "from": 778,
    "label": "has",
    "to": 780
  }, {
    "from": 778,
    "label": "has",
    "to": 781
  }, {
    "from": 778,
    "label": "has",
    "to": 782
  }, {
    "from": 778,
    "label": "has",
    "to": 783
  }, {
    "from": 778,
    "label": "has",
    "to": 784
  }, {
    "from": 778,
    "label": "has",
    "to": 785
  }, {
    "from": 778,
    "label": "has",
    "to": 786
  }, {
    "from": 778,
    "label": "has",
    "to": 787
  }, {
    "from": 778,
    "label": "has",
    "to": 788
  }, {
    "from": 778,
    "label": "has",
    "to": 789
  }, {
    "from": 778,
    "label": "has",
    "to": 790
  }, {
    "from": 778,
    "label": "has",
    "to": 791
  }, {
    "from": 792,
    "label": "has",
    "to": 793
  }, {
    "from": 792,
    "label": "has",
    "to": 794
  }, {
    "from": 794,
    "label": "has",
    "to": 795
  }, {
    "from": 794,
    "label": "has",
    "to": 796
  }, {
    "from": 794,
    "label": "has",
    "to": 797
  }, {
    "from": 792,
    "label": "has",
    "to": 798
  }, {
    "from": 792,
    "label": "has",
    "to": 799
  }, {
    "from": 792,
    "label": "has",
    "to": 800
  }, {
    "from": 800,
    "label": "has",
    "to": 801
  }, {
    "from": 792,
    "label": "has",
    "to": 802
  }, {
    "from": 802,
    "label": "has",
    "to": 764
  }, {
    "from": 792,
    "label": "has",
    "to": 715
  }, {
    "from": 792,
    "label": "has",
    "to": 771
  }, {
    "from": 792,
    "label": "has",
    "to": 803
  }, {
    "from": 792,
    "label": "has",
    "to": 804
  }, {
    "from": 792,
    "label": "has",
    "to": 728
  }, {
    "from": 792,
    "label": "has",
    "to": 805
  }, {
    "from": 792,
    "label": "has",
    "to": 806
  }, {
    "from": 807,
    "label": "has",
    "to": 795
  }, {
    "from": 807,
    "label": "has",
    "to": 796
  }, {
    "from": 807,
    "label": "has",
    "to": 797
  }, {
    "from": 807,
    "label": "has",
    "to": 808
  }, {
    "from": 809,
    "label": "has",
    "to": 810
  }, {
    "from": 810,
    "label": "has",
    "to": 712
  }, {
    "from": 809,
    "label": "has",
    "to": 811
  }, {
    "from": 812,
    "label": "has",
    "to": 813
  }, {
    "from": 812,
    "label": "has",
    "to": 814
  }, {
    "from": 812,
    "label": "has",
    "to": 815
  }, {
    "from": 812,
    "label": "has",
    "to": 816
  }, {
    "from": 812,
    "label": "has",
    "to": 817
  }, {
    "from": 812,
    "label": "has",
    "to": 818
  }, {
    "from": 812,
    "label": "has",
    "to": 819
  }, {
    "from": 812,
    "label": "has",
    "to": 820
  }, {
    "from": 812,
    "label": "has",
    "to": 821
  }, {
    "from": 822,
    "label": "has",
    "to": 823
  }, {
    "from": 822,
    "label": "has",
    "to": 824
  }, {
    "from": 822,
    "label": "has",
    "to": 825
  }, {
    "from": 822,
    "label": "has",
    "to": 826
  }, {
    "from": 822,
    "label": "has",
    "to": 827
  }, {
    "from": 822,
    "label": "has",
    "to": 828
  }, {
    "from": 822,
    "label": "has",
    "to": 829
  }, {
    "from": 822,
    "label": "has",
    "to": 830
  }, {
    "from": 822,
    "label": "has",
    "to": 831
  }, {
    "from": 822,
    "label": "has",
    "to": 832
  }, {
    "from": 822,
    "label": "has",
    "to": 833
  }, {
    "from": 822,
    "label": "has",
    "to": 834
  }, {
    "from": 822,
    "label": "has",
    "to": 835
  }, {
    "from": 822,
    "label": "has",
    "to": 836
  }, {
    "from": 837,
    "label": "has",
    "to": 709
  }, {
    "from": 837,
    "label": "has",
    "to": 838
  }, {
    "from": 837,
    "label": "has",
    "to": 839
  }, {
    "from": 840,
    "label": "has",
    "to": 841
  }, {
    "from": 840,
    "label": "has",
    "to": 838
  }, {
    "from": 840,
    "label": "has",
    "to": 842
  }, {
    "from": 843,
    "label": "has",
    "to": 844
  }, {
    "from": 843,
    "label": "has",
    "to": 845
  }, {
    "from": 843,
    "label": "has",
    "to": 846
  }, {
    "from": 843,
    "label": "has",
    "to": 847
  }, {
    "from": 843,
    "label": "has",
    "to": 848
  }, {
    "from": 843,
    "label": "has",
    "to": 849
  }, {
    "from": 843,
    "label": "has",
    "to": 850
  }, {
    "from": 843,
    "label": "has",
    "to": 851
  }, {
    "from": 851,
    "label": "has",
    "to": 852
  }, {
    "from": 843,
    "label": "has",
    "to": 853
  }, {
    "from": 843,
    "label": "has",
    "to": 854
  }, {
    "from": 843,
    "label": "has",
    "to": 855
  }, {
    "from": 843,
    "label": "has",
    "to": 856
  }, {
    "from": 856,
    "label": "has",
    "to": 857
  }, {
    "from": 856,
    "label": "has",
    "to": 858
  }, {
    "from": 843,
    "label": "has",
    "to": 859
  }, {
    "from": 843,
    "label": "has",
    "to": 860
  }, {
    "from": 843,
    "label": "has",
    "to": 861
  }, {
    "from": 861,
    "label": "has",
    "to": 862
  }, {
    "from": 843,
    "label": "has",
    "to": 863
  }, {
    "from": 863,
    "label": "has",
    "to": 852
  }, {
    "from": 843,
    "label": "has",
    "to": 850
  }, {
    "from": 843,
    "label": "has",
    "to": 864
  }, {
    "from": 843,
    "label": "has",
    "to": 865
  }, {
    "from": 843,
    "label": "has",
    "to": 866
  }, {
    "from": 843,
    "label": "has",
    "to": 867
  }, {
    "from": 843,
    "label": "has",
    "to": 868
  }, {
    "from": 843,
    "label": "has",
    "to": 850
  }, {
    "from": 843,
    "label": "has",
    "to": 869
  }, {
    "from": 843,
    "label": "has",
    "to": 854
  }, {
    "from": 843,
    "label": "has",
    "to": 870
  }, {
    "from": 843,
    "label": "has",
    "to": 855
  }, {
    "from": 843,
    "label": "has",
    "to": 861
  }, {
    "from": 861,
    "label": "has",
    "to": 862
  }, {
    "from": 843,
    "label": "has",
    "to": 871
  }, {
    "from": 871,
    "label": "has",
    "to": 852
  }, {
    "from": 843,
    "label": "has",
    "to": 872
  }, {
    "from": 872,
    "label": "has",
    "to": 850
  }, {
    "from": 872,
    "label": "has",
    "to": 873
  }, {
    "from": 872,
    "label": "has",
    "to": 874
  }, {
    "from": 872,
    "label": "has",
    "to": 875
  }, {
    "from": 872,
    "label": "has",
    "to": 876
  }, {
    "from": 843,
    "label": "has",
    "to": 877
  }, {
    "from": 843,
    "label": "has",
    "to": 878
  }, {
    "from": 843,
    "label": "has",
    "to": 877
  }, {
    "from": 843,
    "label": "has",
    "to": 879
  }, {
    "from": 880,
    "label": "has",
    "to": 709
  }, {
    "from": 880,
    "label": "has",
    "to": 881
  }, {
    "from": 880,
    "label": "has",
    "to": 882
  }, {
    "from": 883,
    "label": "has",
    "to": 841
  }, {
    "from": 883,
    "label": "has",
    "to": 881
  }, {
    "from": 883,
    "label": "has",
    "to": 884
  }, {
    "from": 885,
    "label": "has",
    "to": 164
  }, {
    "from": 885,
    "label": "has",
    "to": 500
  }, {
    "from": 885,
    "label": "has",
    "to": 501
  }, {
    "from": 885,
    "label": "has",
    "to": 502
  }, {
    "from": 885,
    "label": "has",
    "to": 503
  }, {
    "from": 885,
    "label": "has",
    "to": 504
  }, {
    "from": 885,
    "label": "has",
    "to": 505
  }, {
    "from": 885,
    "label": "has",
    "to": 506
  }, {
    "from": 885,
    "label": "has",
    "to": 507
  }, {
    "from": 885,
    "label": "has",
    "to": 886
  }, {
    "from": 885,
    "label": "has",
    "to": 887
  }, {
    "from": 885,
    "label": "has",
    "to": 888
  }, {
    "from": 885,
    "label": "has",
    "to": 889
  }, {
    "from": 885,
    "label": "has",
    "to": 890
  }, {
    "from": 885,
    "label": "has",
    "to": 891
  }, {
    "from": 885,
    "label": "has",
    "to": 528
  }, {
    "from": 885,
    "label": "has",
    "to": 529
  }, {
    "from": 885,
    "label": "has",
    "to": 530
  }, {
    "from": 885,
    "label": "has",
    "to": 534
  }, {
    "from": 885,
    "label": "has",
    "to": 535
  }, {
    "from": 885,
    "label": "has",
    "to": 892
  }, {
    "from": 885,
    "label": "has",
    "to": 893
  }, {
    "from": 885,
    "label": "has",
    "to": 534
  }, {
    "from": 885,
    "label": "has",
    "to": 894
  }, {
    "from": 895,
    "label": "has",
    "to": 513
  }, {
    "from": 513,
    "label": "has",
    "to": 387
  }, {
    "from": 895,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 895,
    "label": "has",
    "to": 514
  }, {
    "from": 514,
    "label": "has",
    "to": 515
  }, {
    "from": 895,
    "label": "has",
    "to": 516
  }, {
    "from": 516,
    "label": "has",
    "to": 517
  }, {
    "from": 895,
    "label": "has",
    "to": 518
  }, {
    "from": 518,
    "label": "has",
    "to": 519
  }, {
    "from": 895,
    "label": "has",
    "to": 520
  }, {
    "from": 520,
    "label": "has",
    "to": 521
  }, {
    "from": 895,
    "label": "has",
    "to": 896
  }, {
    "from": 897,
    "label": "has",
    "to": 898
  }, {
    "from": 897,
    "label": "has",
    "to": 899
  }, {
    "from": 899,
    "label": "has",
    "to": 900
  }, {
    "from": 897,
    "label": "has",
    "to": 901
  }, {
    "from": 902,
    "label": "has",
    "to": 903
  }, {
    "from": 903,
    "label": "has",
    "to": 904
  }, {
    "from": 902,
    "label": "has",
    "to": 905
  }, {
    "from": 905,
    "label": "has",
    "to": 906
  }, {
    "from": 902,
    "label": "has",
    "to": 907
  }, {
    "from": 907,
    "label": "has",
    "to": 908
  }, {
    "from": 902,
    "label": "has",
    "to": 909
  }, {
    "from": 910,
    "label": "has",
    "to": 911
  }, {
    "from": 910,
    "label": "has",
    "to": 912
  }, {
    "from": 912,
    "label": "has",
    "to": 913
  }, {
    "from": 912,
    "label": "has",
    "to": 914
  }, {
    "from": 910,
    "label": "has",
    "to": 915
  }, {
    "from": 915,
    "label": "has",
    "to": 916
  }, {
    "from": 915,
    "label": "has",
    "to": 914
  }, {
    "from": 910,
    "label": "has",
    "to": 917
  }, {
    "from": 917,
    "label": "has",
    "to": 918
  }, {
    "from": 917,
    "label": "has",
    "to": 914
  }, {
    "from": 910,
    "label": "has",
    "to": 538
  }, {
    "from": 910,
    "label": "has",
    "to": 919
  }, {
    "from": 910,
    "label": "has",
    "to": 920
  }, {
    "from": 910,
    "label": "has",
    "to": 921
  }, {
    "from": 910,
    "label": "has",
    "to": 922
  }, {
    "from": 910,
    "label": "has",
    "to": 923
  }, {
    "from": 910,
    "label": "has",
    "to": 924
  }, {
    "from": 910,
    "label": "has",
    "to": 925
  }, {
    "from": 910,
    "label": "has",
    "to": 922
  }, {
    "from": 910,
    "label": "has",
    "to": 923
  }, {
    "from": 910,
    "label": "has",
    "to": 924
  }, {
    "from": 910,
    "label": "has",
    "to": 926
  }, {
    "from": 910,
    "label": "has",
    "to": 922
  }, {
    "from": 910,
    "label": "has",
    "to": 923
  }, {
    "from": 910,
    "label": "has",
    "to": 924
  }, {
    "from": 910,
    "label": "has",
    "to": 927
  }, {
    "from": 928,
    "label": "has",
    "to": 929
  }, {
    "from": 928,
    "label": "has",
    "to": 912
  }, {
    "from": 912,
    "label": "has",
    "to": 913
  }, {
    "from": 912,
    "label": "has",
    "to": 914
  }, {
    "from": 928,
    "label": "has",
    "to": 930
  }, {
    "from": 930,
    "label": "has",
    "to": 931
  }, {
    "from": 928,
    "label": "has",
    "to": 932
  }, {
    "from": 932,
    "label": "has",
    "to": 933
  }, {
    "from": 928,
    "label": "has",
    "to": 934
  }, {
    "from": 928,
    "label": "has",
    "to": 935
  }, {
    "from": 935,
    "label": "has",
    "to": 918
  }, {
    "from": 935,
    "label": "has",
    "to": 914
  }, {
    "from": 928,
    "label": "has",
    "to": 538
  }, {
    "from": 928,
    "label": "has",
    "to": 936
  }, {
    "from": 928,
    "label": "has",
    "to": 920
  }, {
    "from": 928,
    "label": "has",
    "to": 921
  }, {
    "from": 928,
    "label": "has",
    "to": 922
  }, {
    "from": 928,
    "label": "has",
    "to": 923
  }, {
    "from": 928,
    "label": "has",
    "to": 924
  }, {
    "from": 928,
    "label": "has",
    "to": 926
  }, {
    "from": 928,
    "label": "has",
    "to": 922
  }, {
    "from": 928,
    "label": "has",
    "to": 923
  }, {
    "from": 928,
    "label": "has",
    "to": 924
  }, {
    "from": 928,
    "label": "has",
    "to": 937
  }, {
    "from": 938,
    "label": "has",
    "to": 929
  }, {
    "from": 938,
    "label": "has",
    "to": 939
  }, {
    "from": 939,
    "label": "has",
    "to": 940
  }, {
    "from": 939,
    "label": "has",
    "to": 914
  }, {
    "from": 938,
    "label": "has",
    "to": 941
  }, {
    "from": 941,
    "label": "has",
    "to": 942
  }, {
    "from": 941,
    "label": "has",
    "to": 914
  }, {
    "from": 941,
    "label": "has",
    "to": 382
  }, {
    "from": 938,
    "label": "has",
    "to": 943
  }, {
    "from": 943,
    "label": "has",
    "to": 944
  }, {
    "from": 943,
    "label": "has",
    "to": 914
  }, {
    "from": 938,
    "label": "has",
    "to": 538
  }, {
    "from": 938,
    "label": "has",
    "to": 919
  }, {
    "from": 938,
    "label": "has",
    "to": 920
  }, {
    "from": 938,
    "label": "has",
    "to": 921
  }, {
    "from": 938,
    "label": "has",
    "to": 922
  }, {
    "from": 938,
    "label": "has",
    "to": 923
  }, {
    "from": 938,
    "label": "has",
    "to": 924
  }, {
    "from": 938,
    "label": "has",
    "to": 925
  }, {
    "from": 938,
    "label": "has",
    "to": 922
  }, {
    "from": 938,
    "label": "has",
    "to": 923
  }, {
    "from": 938,
    "label": "has",
    "to": 924
  }, {
    "from": 938,
    "label": "has",
    "to": 926
  }, {
    "from": 938,
    "label": "has",
    "to": 922
  }, {
    "from": 938,
    "label": "has",
    "to": 923
  }, {
    "from": 938,
    "label": "has",
    "to": 924
  }, {
    "from": 938,
    "label": "has",
    "to": 945
  }, {
    "from": 946,
    "label": "has",
    "to": 4
  }, {
    "from": 946,
    "label": "has",
    "to": 4
  }, {
    "from": 946,
    "label": "has",
    "to": 947
  }, {
    "from": 948,
    "label": "has",
    "to": 949
  }, {
    "from": 948,
    "label": "has",
    "to": 950
  }, {
    "from": 948,
    "label": "has",
    "to": 951
  }, {
    "from": 952,
    "label": "has",
    "to": 4
  }, {
    "from": 953,
    "label": "has",
    "to": 4
  }, {
    "from": 954,
    "label": "has",
    "to": 955
  }, {
    "from": 954,
    "label": "has",
    "to": 956
  }, {
    "from": 954,
    "label": "has",
    "to": 957
  }, {
    "from": 954,
    "label": "has",
    "to": 958
  }, {
    "from": 954,
    "label": "has",
    "to": 959
  }, {
    "from": 960,
    "label": "has",
    "to": 961
  }, {
    "from": 960,
    "label": "has",
    "to": 962
  }, {
    "from": 960,
    "label": "has",
    "to": 963
  }, {
    "from": 964,
    "label": "has",
    "to": 965
  }, {
    "from": 964,
    "label": "has",
    "to": 966
  }, {
    "from": 964,
    "label": "has",
    "to": 967
  }, {
    "from": 964,
    "label": "has",
    "to": 968
  }, {
    "from": 964,
    "label": "has",
    "to": 969
  }, {
    "from": 970,
    "label": "has",
    "to": 971
  }, {
    "from": 971,
    "label": "has",
    "to": 972
  }, {
    "from": 970,
    "label": "has",
    "to": 973
  }, {
    "from": 974,
    "label": "has",
    "to": 975
  }, {
    "from": 975,
    "label": "has",
    "to": 976
  }, {
    "from": 974,
    "label": "has",
    "to": 977
  }, {
    "from": 978,
    "label": "has",
    "to": 979
  }, {
    "from": 978,
    "label": "has",
    "to": 980
  }, {
    "from": 980,
    "label": "has",
    "to": 981
  }, {
    "from": 978,
    "label": "has",
    "to": 4
  }, {
    "from": 978,
    "label": "has",
    "to": 982
  }, {
    "from": 978,
    "label": "has",
    "to": 983
  }, {
    "from": 978,
    "label": "has",
    "to": 984
  }, {
    "from": 978,
    "label": "has",
    "to": 985
  }, {
    "from": 978,
    "label": "has",
    "to": 986
  }, {
    "from": 987,
    "label": "has",
    "to": 988
  }, {
    "from": 987,
    "label": "has",
    "to": 980
  }, {
    "from": 980,
    "label": "has",
    "to": 981
  }, {
    "from": 987,
    "label": "has",
    "to": 4
  }, {
    "from": 987,
    "label": "has",
    "to": 982
  }, {
    "from": 987,
    "label": "has",
    "to": 983
  }, {
    "from": 987,
    "label": "has",
    "to": 989
  }, {
    "from": 987,
    "label": "has",
    "to": 990
  }, {
    "from": 987,
    "label": "has",
    "to": 991
  }, {
    "from": 992,
    "label": "has",
    "to": 725
  }, {
    "from": 992,
    "label": "has",
    "to": 709
  }, {
    "from": 992,
    "label": "has",
    "to": 993
  }, {
    "from": 994,
    "label": "has",
    "to": 728
  }, {
    "from": 994,
    "label": "has",
    "to": 729
  }, {
    "from": 994,
    "label": "has",
    "to": 995
  }, {
    "from": 996,
    "label": "has",
    "to": 793
  }, {
    "from": 996,
    "label": "has",
    "to": 997
  }, {
    "from": 996,
    "label": "has",
    "to": 998
  }, {
    "from": 996,
    "label": "has",
    "to": 794
  }, {
    "from": 794,
    "label": "has",
    "to": 795
  }, {
    "from": 794,
    "label": "has",
    "to": 796
  }, {
    "from": 794,
    "label": "has",
    "to": 797
  }, {
    "from": 996,
    "label": "has",
    "to": 999
  }, {
    "from": 996,
    "label": "has",
    "to": 1000
  }, {
    "from": 996,
    "label": "has",
    "to": 1001
  }, {
    "from": 996,
    "label": "has",
    "to": 4
  }, {
    "from": 996,
    "label": "has",
    "to": 1002
  }, {
    "from": 996,
    "label": "has",
    "to": 4
  }, {
    "from": 996,
    "label": "has",
    "to": 1003
  }, {
    "from": 996,
    "label": "has",
    "to": 1004
  }, {
    "from": 1004,
    "label": "has",
    "to": 1005
  }, {
    "from": 1004,
    "label": "has",
    "to": 1006
  }, {
    "from": 1004,
    "label": "has",
    "to": 1007
  }, {
    "from": 1004,
    "label": "has",
    "to": 1008
  }, {
    "from": 1004,
    "label": "has",
    "to": 1009
  }, {
    "from": 1009,
    "label": "has",
    "to": 1010
  }, {
    "from": 1004,
    "label": "has",
    "to": 1011
  }, {
    "from": 1011,
    "label": "has",
    "to": 1012
  }, {
    "from": 996,
    "label": "has",
    "to": 534
  }, {
    "from": 996,
    "label": "has",
    "to": 1013
  }, {
    "from": 996,
    "label": "has",
    "to": 1014
  }, {
    "from": 996,
    "label": "has",
    "to": 800
  }, {
    "from": 800,
    "label": "has",
    "to": 801
  }, {
    "from": 996,
    "label": "has",
    "to": 1015
  }, {
    "from": 1015,
    "label": "has",
    "to": 764
  }, {
    "from": 996,
    "label": "has",
    "to": 771
  }, {
    "from": 996,
    "label": "has",
    "to": 728
  }, {
    "from": 996,
    "label": "has",
    "to": 1016
  }, {
    "from": 996,
    "label": "has",
    "to": 1017
  }, {
    "from": 996,
    "label": "has",
    "to": 1018
  }, {
    "from": 996,
    "label": "has",
    "to": 1019
  }, {
    "from": 1020,
    "label": "has",
    "to": 795
  }, {
    "from": 1020,
    "label": "has",
    "to": 796
  }, {
    "from": 1020,
    "label": "has",
    "to": 797
  }, {
    "from": 1020,
    "label": "has",
    "to": 1021
  }, {
    "from": 1022,
    "label": "has",
    "to": 1023
  }, {
    "from": 1022,
    "label": "has",
    "to": 1001
  }, {
    "from": 1022,
    "label": "has",
    "to": 4
  }, {
    "from": 1022,
    "label": "has",
    "to": 1024
  }, {
    "from": 1022,
    "label": "has",
    "to": 1025
  }, {
    "from": 1022,
    "label": "has",
    "to": 1026
  }, {
    "from": 1027,
    "label": "has",
    "to": 1023
  }, {
    "from": 1027,
    "label": "has",
    "to": 1001
  }, {
    "from": 1027,
    "label": "has",
    "to": 4
  }, {
    "from": 1027,
    "label": "has",
    "to": 1028
  }, {
    "from": 1027,
    "label": "has",
    "to": 1029
  }, {
    "from": 1027,
    "label": "has",
    "to": 525
  }, {
    "from": 1027,
    "label": "has",
    "to": 1030
  }, {
    "from": 1027,
    "label": "has",
    "to": 1031
  }, {
    "from": 1032,
    "label": "has",
    "to": 1023
  }, {
    "from": 1032,
    "label": "has",
    "to": 1001
  }, {
    "from": 1032,
    "label": "has",
    "to": 4
  }, {
    "from": 1032,
    "label": "has",
    "to": 1033
  }, {
    "from": 1032,
    "label": "has",
    "to": 1034
  }, {
    "from": 1035,
    "label": "has",
    "to": 1023
  }, {
    "from": 1035,
    "label": "has",
    "to": 1001
  }, {
    "from": 1035,
    "label": "has",
    "to": 4
  }, {
    "from": 1035,
    "label": "has",
    "to": 1036
  }, {
    "from": 1035,
    "label": "has",
    "to": 1037
  }, {
    "from": 1038,
    "label": "has",
    "to": 164
  }, {
    "from": 1038,
    "label": "has",
    "to": 1039
  }, {
    "from": 1038,
    "label": "has",
    "to": 1040
  }, {
    "from": 1038,
    "label": "has",
    "to": 534
  }, {
    "from": 1038,
    "label": "has",
    "to": 1041
  }, {
    "from": 1042,
    "label": "has",
    "to": 1043
  }, {
    "from": 1043,
    "label": "has",
    "to": 1044
  }, {
    "from": 1042,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 170
  }, {
    "from": 1042,
    "label": "has",
    "to": 1045
  }, {
    "from": 1046,
    "label": "has",
    "to": 1047
  }, {
    "from": 1046,
    "label": "has",
    "to": 1048
  }, {
    "from": 1049,
    "label": "has",
    "to": 1047
  }, {
    "from": 1049,
    "label": "has",
    "to": 1050
  }, {
    "from": 1049,
    "label": "has",
    "to": 1051
  }, {
    "from": 1049,
    "label": "has",
    "to": 1052
  }, {
    "from": 1049,
    "label": "has",
    "to": 1053
  }, {
    "from": 1054,
    "label": "has",
    "to": 1047
  }, {
    "from": 1054,
    "label": "has",
    "to": 1050
  }, {
    "from": 1054,
    "label": "has",
    "to": 1055
  }, {
    "from": 1054,
    "label": "has",
    "to": 1056
  }, {
    "from": 1054,
    "label": "has",
    "to": 1057
  }, {
    "from": 1054,
    "label": "has",
    "to": 1058
  }, {
    "from": 1054,
    "label": "has",
    "to": 1059
  }, {
    "from": 1060,
    "label": "has",
    "to": 1061
  }, {
    "from": 1060,
    "label": "has",
    "to": 1062
  }, {
    "from": 1060,
    "label": "has",
    "to": 1063
  }, {
    "from": 1060,
    "label": "has",
    "to": 1064
  }, {
    "from": 1060,
    "label": "has",
    "to": 1065
  }, {
    "from": 1060,
    "label": "has",
    "to": 1066
  }, {
    "from": 1060,
    "label": "has",
    "to": 1067
  }, {
    "from": 1060,
    "label": "has",
    "to": 1068
  }, {
    "from": 1069,
    "label": "has",
    "to": 1061
  }, {
    "from": 1069,
    "label": "has",
    "to": 1070
  }, {
    "from": 1070,
    "label": "has",
    "to": 1071
  }, {
    "from": 1069,
    "label": "has",
    "to": 1072
  }, {
    "from": 1069,
    "label": "has",
    "to": 1073
  }, {
    "from": 1074,
    "label": "has",
    "to": 1061
  }, {
    "from": 1074,
    "label": "has",
    "to": 1075
  }, {
    "from": 1074,
    "label": "has",
    "to": 1076
  }, {
    "from": 1074,
    "label": "has",
    "to": 1077
  }, {
    "from": 1074,
    "label": "has",
    "to": 1078
  }, {
    "from": 1074,
    "label": "has",
    "to": 1079
  }, {
    "from": 1074,
    "label": "has",
    "to": 1080
  }, {
    "from": 1081,
    "label": "has",
    "to": 1061
  }, {
    "from": 1081,
    "label": "has",
    "to": 1062
  }, {
    "from": 1081,
    "label": "has",
    "to": 1076
  }, {
    "from": 1081,
    "label": "has",
    "to": 1082
  }, {
    "from": 1081,
    "label": "has",
    "to": 1083
  }, {
    "from": 1081,
    "label": "has",
    "to": 1084
  }, {
    "from": 1085,
    "label": "has",
    "to": 1061
  }, {
    "from": 1085,
    "label": "has",
    "to": 1075
  }, {
    "from": 1085,
    "label": "has",
    "to": 1086
  }, {
    "from": 1085,
    "label": "has",
    "to": 1076
  }, {
    "from": 1085,
    "label": "has",
    "to": 1077
  }, {
    "from": 1085,
    "label": "has",
    "to": 1078
  }, {
    "from": 1085,
    "label": "has",
    "to": 1079
  }, {
    "from": 1085,
    "label": "has",
    "to": 1087
  }, {
    "from": 1088,
    "label": "has",
    "to": 164
  }, {
    "from": 1088,
    "label": "has",
    "to": 1089
  }, {
    "from": 1088,
    "label": "has",
    "to": 1090
  }, {
    "from": 1088,
    "label": "has",
    "to": 1091
  }, {
    "from": 1088,
    "label": "has",
    "to": 1092
  }, {
    "from": 1093,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 1093,
    "label": "has",
    "to": 1094
  }, {
    "from": 1095,
    "label": "has",
    "to": 1096
  }, {
    "from": 1095,
    "label": "has",
    "to": 1097
  }, {
    "from": 1095,
    "label": "has",
    "to": 669
  }, {
    "from": 1095,
    "label": "has",
    "to": 1098
  }, {
    "from": 1095,
    "label": "has",
    "to": 1099
  }, {
    "from": 1095,
    "label": "has",
    "to": 715
  }, {
    "from": 1095,
    "label": "has",
    "to": 1100
  }, {
    "from": 1095,
    "label": "has",
    "to": 1101
  }, {
    "from": 1095,
    "label": "has",
    "to": 1102
  }, {
    "from": 1095,
    "label": "has",
    "to": 1103
  }, {
    "from": 1104,
    "label": "has",
    "to": 4
  }, {
    "from": 1105,
    "label": "has",
    "to": 321
  }, {
    "from": 1106,
    "label": "has",
    "to": 354
  }, {
    "from": 1107,
    "label": "has",
    "to": 356
  }, {
    "from": 1109,
    "label": "has",
    "to": 413
  }, {
    "from": 1110,
    "label": "has",
    "to": 415
  }, {
    "from": 1111,
    "label": "has",
    "to": 417
  }, {
    "from": 1112,
    "label": "has",
    "to": 417
  }, {
    "from": 1113,
    "label": "has",
    "to": 467
  }, {
    "from": 1114,
    "label": "has",
    "to": 469
  }, {
    "from": 1115,
    "label": "has",
    "to": 566
  }, {
    "from": 1116,
    "label": "has",
    "to": 568
  }, {
    "from": 1117,
    "label": "has",
    "to": 699
  }, {
    "from": 1117,
    "label": "has",
    "to": 1118
  }, {
    "from": 1119,
    "label": "has",
    "to": 703
  }, {
    "from": 1119,
    "label": "has",
    "to": 1120
  }, {
    "from": 1121,
    "label": "has",
    "to": 734
  }, {
    "from": 1121,
    "label": "has",
    "to": 735
  }, {
    "from": 1122,
    "label": "has",
    "to": 734
  }, {
    "from": 1122,
    "label": "has",
    "to": 735
  }, {
    "from": 1123,
    "label": "has",
    "to": 750
  }, {
    "from": 1124,
    "label": "has",
    "to": 753
  }, {
    "from": 1124,
    "label": "has",
    "to": 761
  }, {
    "from": 1124,
    "label": "has",
    "to": 762
  }, {
    "from": 1124,
    "label": "has",
    "to": 754
  }, {
    "from": 1124,
    "label": "has",
    "to": 763
  }, {
    "from": 763,
    "label": "has",
    "to": 764
  }, {
    "from": 1124,
    "label": "has",
    "to": 1125
  }, {
    "from": 1126,
    "label": "has",
    "to": 801
  }, {
    "from": 1127,
    "label": "has",
    "to": 764
  }, {
    "from": 1128,
    "label": "has",
    "to": 852
  }, {
    "from": 1129,
    "label": "has",
    "to": 862
  }, {
    "from": 1130,
    "label": "has",
    "to": 852
  }, {
    "from": 1131,
    "label": "has",
    "to": 862
  }, {
    "from": 1132,
    "label": "has",
    "to": 852
  }, {
    "from": 1134,
    "label": "has",
    "to": 900
  }, {
    "from": 1135,
    "label": "has",
    "to": 904
  }, {
    "from": 1136,
    "label": "has",
    "to": 906
  }, {
    "from": 1137,
    "label": "has",
    "to": 908
  }, {
    "from": 1138,
    "label": "has",
    "to": 913
  }, {
    "from": 1138,
    "label": "has",
    "to": 914
  }, {
    "from": 1139,
    "label": "has",
    "to": 916
  }, {
    "from": 1139,
    "label": "has",
    "to": 914
  }, {
    "from": 1140,
    "label": "has",
    "to": 918
  }, {
    "from": 1140,
    "label": "has",
    "to": 914
  }, {
    "from": 1141,
    "label": "has",
    "to": 913
  }, {
    "from": 1141,
    "label": "has",
    "to": 914
  }, {
    "from": 1142,
    "label": "has",
    "to": 931
  }, {
    "from": 1143,
    "label": "has",
    "to": 933
  }, {
    "from": 1144,
    "label": "has",
    "to": 918
  }, {
    "from": 1144,
    "label": "has",
    "to": 914
  }, {
    "from": 1145,
    "label": "has",
    "to": 940
  }, {
    "from": 1145,
    "label": "has",
    "to": 914
  }, {
    "from": 1146,
    "label": "has",
    "to": 942
  }, {
    "from": 1146,
    "label": "has",
    "to": 914
  }, {
    "from": 1146,
    "label": "has",
    "to": 382
  }, {
    "from": 1147,
    "label": "has",
    "to": 944
  }, {
    "from": 1147,
    "label": "has",
    "to": 914
  }, {
    "from": 1148,
    "label": "has",
    "to": 4
  }, {
    "from": 1148,
    "label": "has",
    "to": 1149
  }, {
    "from": 1150,
    "label": "has",
    "to": 972
  }, {
    "from": 1151,
    "label": "has",
    "to": 976
  }, {
    "from": 1152,
    "label": "has",
    "to": 1005
  }, {
    "from": 1152,
    "label": "has",
    "to": 1006
  }, {
    "from": 1152,
    "label": "has",
    "to": 1007
  }, {
    "from": 1152,
    "label": "has",
    "to": 1008
  }, {
    "from": 1152,
    "label": "has",
    "to": 1009
  }, {
    "from": 1009,
    "label": "has",
    "to": 1010
  }, {
    "from": 1152,
    "label": "has",
    "to": 1011
  }, {
    "from": 1011,
    "label": "has",
    "to": 1012
  }, {
    "from": 1152,
    "label": "has",
    "to": 1153
  }, {
    "from": 1154,
    "label": "has",
    "to": 801
  }, {
    "from": 1155,
    "label": "has",
    "to": 764
  }, {
    "from": 1156,
    "label": "has",
    "to": 1071
  }, {
    "from": 26,
    "label": "calls",
    "to": 1182
  }, {
    "from": 113,
    "label": "calls",
    "to": 1182
  }, {
    "from": 128,
    "label": "calls",
    "to": 1182
  }, {
    "from": 39,
    "label": "calls",
    "to": 1209
  }, {
    "from": 156,
    "label": "calls",
    "to": 1209
  }, {
    "from": 659,
    "label": "calls",
    "to": 1209
  }, {
    "from": 690,
    "label": "calls",
    "to": 1209
  }, {
    "from": 693,
    "label": "calls",
    "to": 1209
  }, {
    "from": 807,
    "label": "calls",
    "to": 1209
  }, {
    "from": 422,
    "label": "calls",
    "to": 1209
  }, {
    "from": 422,
    "label": "calls",
    "to": 1209
  }, {
    "from": 422,
    "label": "calls",
    "to": 1209
  }, {
    "from": 928,
    "label": "calls",
    "to": 1209
  }, {
    "from": 928,
    "label": "calls",
    "to": 1209
  }, {
    "from": 938,
    "label": "calls",
    "to": 1209
  }, {
    "from": 938,
    "label": "calls",
    "to": 1209
  }, {
    "from": 938,
    "label": "calls",
    "to": 1209
  }, {
    "from": 807,
    "label": "calls",
    "to": 1209
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1183
  }, {
    "from": 113,
    "label": "calls",
    "to": 1183
  }, {
    "from": 113,
    "label": "calls",
    "to": 1183
  }, {
    "from": 113,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 299,
    "label": "calls",
    "to": 1183
  }, {
    "from": 304,
    "label": "calls",
    "to": 1183
  }, {
    "from": 307,
    "label": "calls",
    "to": 1183
  }, {
    "from": 307,
    "label": "calls",
    "to": 1183
  }, {
    "from": 326,
    "label": "calls",
    "to": 1183
  }, {
    "from": 342,
    "label": "calls",
    "to": 1183
  }, {
    "from": 342,
    "label": "calls",
    "to": 1183
  }, {
    "from": 342,
    "label": "calls",
    "to": 1183
  }, {
    "from": 342,
    "label": "calls",
    "to": 1183
  }, {
    "from": 342,
    "label": "calls",
    "to": 1183
  }, {
    "from": 342,
    "label": "calls",
    "to": 1183
  }, {
    "from": 342,
    "label": "calls",
    "to": 1183
  }, {
    "from": 342,
    "label": "calls",
    "to": 1183
  }, {
    "from": 361,
    "label": "calls",
    "to": 1183
  }, {
    "from": 361,
    "label": "calls",
    "to": 1183
  }, {
    "from": 366,
    "label": "calls",
    "to": 1183
  }, {
    "from": 366,
    "label": "calls",
    "to": 1183
  }, {
    "from": 366,
    "label": "calls",
    "to": 1183
  }, {
    "from": 366,
    "label": "calls",
    "to": 1183
  }, {
    "from": 366,
    "label": "calls",
    "to": 1183
  }, {
    "from": 378,
    "label": "calls",
    "to": 1183
  }, {
    "from": 378,
    "label": "calls",
    "to": 1183
  }, {
    "from": 422,
    "label": "calls",
    "to": 1183
  }, {
    "from": 422,
    "label": "calls",
    "to": 1183
  }, {
    "from": 422,
    "label": "calls",
    "to": 1183
  }, {
    "from": 427,
    "label": "calls",
    "to": 1183
  }, {
    "from": 427,
    "label": "calls",
    "to": 1183
  }, {
    "from": 427,
    "label": "calls",
    "to": 1183
  }, {
    "from": 427,
    "label": "calls",
    "to": 1183
  }, {
    "from": 427,
    "label": "calls",
    "to": 1183
  }, {
    "from": 427,
    "label": "calls",
    "to": 1183
  }, {
    "from": 471,
    "label": "calls",
    "to": 1183
  }, {
    "from": 475,
    "label": "calls",
    "to": 1183
  }, {
    "from": 484,
    "label": "calls",
    "to": 1183
  }, {
    "from": 493,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 548,
    "label": "calls",
    "to": 1183
  }, {
    "from": 548,
    "label": "calls",
    "to": 1183
  }, {
    "from": 548,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 523,
    "label": "calls",
    "to": 1183
  }, {
    "from": 523,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 616,
    "label": "calls",
    "to": 1183
  }, {
    "from": 616,
    "label": "calls",
    "to": 1183
  }, {
    "from": 627,
    "label": "calls",
    "to": 1183
  }, {
    "from": 627,
    "label": "calls",
    "to": 1183
  }, {
    "from": 627,
    "label": "calls",
    "to": 1183
  }, {
    "from": 627,
    "label": "calls",
    "to": 1183
  }, {
    "from": 665,
    "label": "calls",
    "to": 1183
  }, {
    "from": 665,
    "label": "calls",
    "to": 1183
  }, {
    "from": 665,
    "label": "calls",
    "to": 1183
  }, {
    "from": 672,
    "label": "calls",
    "to": 1183
  }, {
    "from": 672,
    "label": "calls",
    "to": 1183
  }, {
    "from": 672,
    "label": "calls",
    "to": 1183
  }, {
    "from": 686,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 792,
    "label": "calls",
    "to": 1183
  }, {
    "from": 792,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 978,
    "label": "calls",
    "to": 1183
  }, {
    "from": 987,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 996,
    "label": "calls",
    "to": 1183
  }, {
    "from": 996,
    "label": "calls",
    "to": 1183
  }, {
    "from": 996,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1022,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1027,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1027,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1032,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1035,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1046,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1049,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1049,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1054,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1054,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1060,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1060,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1069,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1074,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1074,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1081,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1081,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1085,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1085,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1085,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 37,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1183
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1183
  }, {
    "from": 113,
    "label": "calls",
    "to": 1184
  }, {
    "from": 113,
    "label": "calls",
    "to": 1184
  }, {
    "from": 113,
    "label": "calls",
    "to": 1184
  }, {
    "from": 128,
    "label": "calls",
    "to": 1184
  }, {
    "from": 307,
    "label": "calls",
    "to": 1184
  }, {
    "from": 307,
    "label": "calls",
    "to": 1184
  }, {
    "from": 342,
    "label": "calls",
    "to": 1184
  }, {
    "from": 342,
    "label": "calls",
    "to": 1184
  }, {
    "from": 342,
    "label": "calls",
    "to": 1184
  }, {
    "from": 407,
    "label": "calls",
    "to": 1184
  }, {
    "from": 427,
    "label": "calls",
    "to": 1184
  }, {
    "from": 599,
    "label": "calls",
    "to": 1184
  }, {
    "from": 605,
    "label": "calls",
    "to": 1184
  }, {
    "from": 605,
    "label": "calls",
    "to": 1184
  }, {
    "from": 613,
    "label": "calls",
    "to": 1184
  }, {
    "from": 616,
    "label": "calls",
    "to": 1184
  }, {
    "from": 616,
    "label": "calls",
    "to": 1184
  }, {
    "from": 616,
    "label": "calls",
    "to": 1184
  }, {
    "from": 616,
    "label": "calls",
    "to": 1184
  }, {
    "from": 627,
    "label": "calls",
    "to": 1184
  }, {
    "from": 714,
    "label": "calls",
    "to": 1184
  }, {
    "from": 731,
    "label": "calls",
    "to": 1184
  }, {
    "from": 731,
    "label": "calls",
    "to": 1184
  }, {
    "from": 731,
    "label": "calls",
    "to": 1184
  }, {
    "from": 731,
    "label": "calls",
    "to": 1184
  }, {
    "from": 731,
    "label": "calls",
    "to": 1184
  }, {
    "from": 774,
    "label": "calls",
    "to": 1184
  }, {
    "from": 843,
    "label": "calls",
    "to": 1184
  }, {
    "from": 843,
    "label": "calls",
    "to": 1184
  }, {
    "from": 843,
    "label": "calls",
    "to": 1184
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1167
  }, {
    "from": 17,
    "label": "calls",
    "to": 1168
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1168
  }, {
    "from": 26,
    "label": "calls",
    "to": 1168
  }, {
    "from": 26,
    "label": "calls",
    "to": 1168
  }, {
    "from": 26,
    "label": "calls",
    "to": 1168
  }, {
    "from": 128,
    "label": "calls",
    "to": 1168
  }, {
    "from": 342,
    "label": "calls",
    "to": 1168
  }, {
    "from": 342,
    "label": "calls",
    "to": 1168
  }, {
    "from": 471,
    "label": "calls",
    "to": 1168
  }, {
    "from": 843,
    "label": "calls",
    "to": 1168
  }, {
    "from": 422,
    "label": "calls",
    "to": 1168
  }, {
    "from": 422,
    "label": "calls",
    "to": 1168
  }, {
    "from": 422,
    "label": "calls",
    "to": 1168
  }, {
    "from": 928,
    "label": "calls",
    "to": 1168
  }, {
    "from": 928,
    "label": "calls",
    "to": 1168
  }, {
    "from": 938,
    "label": "calls",
    "to": 1168
  }, {
    "from": 938,
    "label": "calls",
    "to": 1168
  }, {
    "from": 938,
    "label": "calls",
    "to": 1168
  }, {
    "from": 26,
    "label": "calls",
    "to": 1207
  }, {
    "from": 113,
    "label": "calls",
    "to": 1207
  }, {
    "from": 113,
    "label": "calls",
    "to": 1207
  }, {
    "from": 113,
    "label": "calls",
    "to": 1207
  }, {
    "from": 39,
    "label": "calls",
    "to": 1169
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1170
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1170
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1170
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1170
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1170
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 299,
    "label": "calls",
    "to": 1171
  }, {
    "from": 304,
    "label": "calls",
    "to": 1171
  }, {
    "from": 342,
    "label": "calls",
    "to": 1171
  }, {
    "from": 361,
    "label": "calls",
    "to": 1171
  }, {
    "from": 366,
    "label": "calls",
    "to": 1171
  }, {
    "from": 366,
    "label": "calls",
    "to": 1171
  }, {
    "from": 378,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 523,
    "label": "calls",
    "to": 1171
  }, {
    "from": 523,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 996,
    "label": "calls",
    "to": 1171
  }, {
    "from": 996,
    "label": "calls",
    "to": 1171
  }, {
    "from": 996,
    "label": "calls",
    "to": 1171
  }, {
    "from": 1022,
    "label": "calls",
    "to": 1171
  }, {
    "from": 1027,
    "label": "calls",
    "to": 1171
  }, {
    "from": 1032,
    "label": "calls",
    "to": 1171
  }, {
    "from": 1035,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 1049,
    "label": "calls",
    "to": 1171
  }, {
    "from": 1054,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 37,
    "label": "calls",
    "to": 1171
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1172
  }, {
    "from": 113,
    "label": "calls",
    "to": 1172
  }, {
    "from": 113,
    "label": "calls",
    "to": 1172
  }, {
    "from": 113,
    "label": "calls",
    "to": 1172
  }, {
    "from": 128,
    "label": "calls",
    "to": 1172
  }, {
    "from": 307,
    "label": "calls",
    "to": 1185
  }, {
    "from": 342,
    "label": "calls",
    "to": 1185
  }, {
    "from": 342,
    "label": "calls",
    "to": 1185
  }, {
    "from": 407,
    "label": "calls",
    "to": 1185
  }, {
    "from": 407,
    "label": "calls",
    "to": 1185
  }, {
    "from": 407,
    "label": "calls",
    "to": 1185
  }, {
    "from": 419,
    "label": "calls",
    "to": 1185
  }, {
    "from": 427,
    "label": "calls",
    "to": 1185
  }, {
    "from": 427,
    "label": "calls",
    "to": 1185
  }, {
    "from": 564,
    "label": "calls",
    "to": 1185
  }, {
    "from": 564,
    "label": "calls",
    "to": 1185
  }, {
    "from": 697,
    "label": "calls",
    "to": 1185
  }, {
    "from": 701,
    "label": "calls",
    "to": 1185
  }, {
    "from": 843,
    "label": "calls",
    "to": 1185
  }, {
    "from": 843,
    "label": "calls",
    "to": 1185
  }, {
    "from": 843,
    "label": "calls",
    "to": 1185
  }, {
    "from": 843,
    "label": "calls",
    "to": 1185
  }, {
    "from": 843,
    "label": "calls",
    "to": 1185
  }, {
    "from": 897,
    "label": "calls",
    "to": 1185
  }, {
    "from": 902,
    "label": "calls",
    "to": 1185
  }, {
    "from": 902,
    "label": "calls",
    "to": 1185
  }, {
    "from": 902,
    "label": "calls",
    "to": 1185
  }, {
    "from": 970,
    "label": "calls",
    "to": 1185
  }, {
    "from": 974,
    "label": "calls",
    "to": 1185
  }, {
    "from": 1069,
    "label": "calls",
    "to": 1185
  }, {
    "from": 964,
    "label": "calls",
    "to": 953
  }, {
    "from": 964,
    "label": "calls",
    "to": 953
  }, {
    "from": 978,
    "label": "calls",
    "to": 1186
  }, {
    "from": 987,
    "label": "calls",
    "to": 1186
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 39,
    "label": "calls",
    "to": 1187
  }, {
    "from": 156,
    "label": "calls",
    "to": 1187
  }, {
    "from": 548,
    "label": "calls",
    "to": 1187
  }, {
    "from": 548,
    "label": "calls",
    "to": 1187
  }, {
    "from": 560,
    "label": "calls",
    "to": 1187
  }, {
    "from": 843,
    "label": "calls",
    "to": 1187
  }, {
    "from": 843,
    "label": "calls",
    "to": 1187
  }, {
    "from": 843,
    "label": "calls",
    "to": 1187
  }, {
    "from": 843,
    "label": "calls",
    "to": 1187
  }, {
    "from": 843,
    "label": "calls",
    "to": 1187
  }, {
    "from": 996,
    "label": "calls",
    "to": 1187
  }, {
    "from": 996,
    "label": "calls",
    "to": 1187
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 174,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 191,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 140,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 822,
    "label": "calls",
    "to": 1173
  }, {
    "from": 954,
    "label": "calls",
    "to": 952
  }, {
    "from": 954,
    "label": "calls",
    "to": 952
  }, {
    "from": 731,
    "label": "calls",
    "to": 1174
  }, {
    "from": 422,
    "label": "calls",
    "to": 1188
  }, {
    "from": 422,
    "label": "calls",
    "to": 1188
  }, {
    "from": 422,
    "label": "calls",
    "to": 1188
  }, {
    "from": 427,
    "label": "calls",
    "to": 1188
  }, {
    "from": 427,
    "label": "calls",
    "to": 1188
  }, {
    "from": 427,
    "label": "calls",
    "to": 1188
  }, {
    "from": 427,
    "label": "calls",
    "to": 1188
  }, {
    "from": 427,
    "label": "calls",
    "to": 1188
  }, {
    "from": 471,
    "label": "calls",
    "to": 1188
  }, {
    "from": 475,
    "label": "calls",
    "to": 1188
  }, {
    "from": 484,
    "label": "calls",
    "to": 1188
  }, {
    "from": 493,
    "label": "calls",
    "to": 1188
  }, {
    "from": 616,
    "label": "calls",
    "to": 1188
  }, {
    "from": 627,
    "label": "calls",
    "to": 1188
  }, {
    "from": 627,
    "label": "calls",
    "to": 1188
  }, {
    "from": 627,
    "label": "calls",
    "to": 1188
  }, {
    "from": 627,
    "label": "calls",
    "to": 1188
  }, {
    "from": 366,
    "label": "calls",
    "to": 14
  }, {
    "from": 366,
    "label": "calls",
    "to": 14
  }, {
    "from": 378,
    "label": "calls",
    "to": 14
  }, {
    "from": 627,
    "label": "calls",
    "to": 1200
  }, {
    "from": 366,
    "label": "calls",
    "to": 12
  }, {
    "from": 366,
    "label": "calls",
    "to": 12
  }, {
    "from": 378,
    "label": "calls",
    "to": 12
  }, {
    "from": 366,
    "label": "calls",
    "to": 31
  }, {
    "from": 366,
    "label": "calls",
    "to": 31
  }, {
    "from": 366,
    "label": "calls",
    "to": 31
  }, {
    "from": 366,
    "label": "calls",
    "to": 31
  }, {
    "from": 378,
    "label": "calls",
    "to": 31
  }, {
    "from": 378,
    "label": "calls",
    "to": 31
  }, {
    "from": 584,
    "label": "calls",
    "to": 31
  }, {
    "from": 1049,
    "label": "calls",
    "to": 31
  }, {
    "from": 342,
    "label": "calls",
    "to": 26
  }, {
    "from": 342,
    "label": "calls",
    "to": 26
  }, {
    "from": 665,
    "label": "calls",
    "to": 26
  }, {
    "from": 672,
    "label": "calls",
    "to": 26
  }, {
    "from": 686,
    "label": "calls",
    "to": 26
  }, {
    "from": 978,
    "label": "calls",
    "to": 26
  }, {
    "from": 987,
    "label": "calls",
    "to": 26
  }, {
    "from": 1027,
    "label": "calls",
    "to": 26
  }, {
    "from": 996,
    "label": "calls",
    "to": 1175
  }, {
    "from": 1032,
    "label": "calls",
    "to": 1175
  }, {
    "from": 1035,
    "label": "calls",
    "to": 1175
  }, {
    "from": 17,
    "label": "calls",
    "to": 1176
  }, {
    "from": 17,
    "label": "calls",
    "to": 1176
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1176
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1176
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1176
  }, {
    "from": 26,
    "label": "calls",
    "to": 1176
  }, {
    "from": 26,
    "label": "calls",
    "to": 1176
  }, {
    "from": 113,
    "label": "calls",
    "to": 1191
  }, {
    "from": 113,
    "label": "calls",
    "to": 1191
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1160
  }, {
    "from": 2,
    "label": "calls",
    "to": 1193
  }, {
    "from": 6,
    "label": "calls",
    "to": 1193
  }, {
    "from": 156,
    "label": "calls",
    "to": 1193
  }, {
    "from": 156,
    "label": "calls",
    "to": 1193
  }, {
    "from": 2,
    "label": "calls",
    "to": 1164
  }, {
    "from": 946,
    "label": "calls",
    "to": 1164
  }, {
    "from": 837,
    "label": "calls",
    "to": 822
  }, {
    "from": 840,
    "label": "calls",
    "to": 822
  }, {
    "from": 523,
    "label": "calls",
    "to": 6
  }, {
    "from": 37,
    "label": "calls",
    "to": 1196
  }, {
    "from": 326,
    "label": "calls",
    "to": 1196
  }, {
    "from": 329,
    "label": "calls",
    "to": 1196
  }, {
    "from": 342,
    "label": "calls",
    "to": 1196
  }, {
    "from": 361,
    "label": "calls",
    "to": 1196
  }, {
    "from": 366,
    "label": "calls",
    "to": 1196
  }, {
    "from": 366,
    "label": "calls",
    "to": 1196
  }, {
    "from": 366,
    "label": "calls",
    "to": 1196
  }, {
    "from": 378,
    "label": "calls",
    "to": 1196
  }, {
    "from": 37,
    "label": "calls",
    "to": 1196
  }, {
    "from": 37,
    "label": "calls",
    "to": 1196
  }, {
    "from": 37,
    "label": "calls",
    "to": 1196
  }, {
    "from": 37,
    "label": "calls",
    "to": 1196
  }, {
    "from": 37,
    "label": "calls",
    "to": 1196
  }, {
    "from": 37,
    "label": "calls",
    "to": 1196
  }, {
    "from": 37,
    "label": "calls",
    "to": 1196
  }, {
    "from": 948,
    "label": "calls",
    "to": 1177
  }, {
    "from": 952,
    "label": "calls",
    "to": 1177
  }, {
    "from": 970,
    "label": "calls",
    "to": 1177
  }, {
    "from": 329,
    "label": "calls",
    "to": 1199
  }, {
    "from": 366,
    "label": "calls",
    "to": 1199
  }, {
    "from": 366,
    "label": "calls",
    "to": 1199
  }, {
    "from": 378,
    "label": "calls",
    "to": 1199
  }, {
    "from": 523,
    "label": "calls",
    "to": 1199
  }, {
    "from": 523,
    "label": "calls",
    "to": 1199
  }, {
    "from": 523,
    "label": "calls",
    "to": 1199
  }, {
    "from": 560,
    "label": "calls",
    "to": 1199
  }, {
    "from": 560,
    "label": "calls",
    "to": 1199
  }, {
    "from": 584,
    "label": "calls",
    "to": 1199
  }, {
    "from": 665,
    "label": "calls",
    "to": 1199
  }, {
    "from": 672,
    "label": "calls",
    "to": 1199
  }, {
    "from": 686,
    "label": "calls",
    "to": 1199
  }, {
    "from": 1027,
    "label": "calls",
    "to": 1199
  }, {
    "from": 1049,
    "label": "calls",
    "to": 1199
  }, {
    "from": 1081,
    "label": "calls",
    "to": 1199
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1199
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1199
  }, {
    "from": 307,
    "label": "calls",
    "to": 22
  }, {
    "from": 342,
    "label": "calls",
    "to": 22
  }, {
    "from": 843,
    "label": "calls",
    "to": 1162
  }, {
    "from": 37,
    "label": "calls",
    "to": 1201
  }, {
    "from": 307,
    "label": "calls",
    "to": 1201
  }, {
    "from": 326,
    "label": "calls",
    "to": 1201
  }, {
    "from": 342,
    "label": "calls",
    "to": 1201
  }, {
    "from": 342,
    "label": "calls",
    "to": 1201
  }, {
    "from": 361,
    "label": "calls",
    "to": 1201
  }, {
    "from": 366,
    "label": "calls",
    "to": 1201
  }, {
    "from": 366,
    "label": "calls",
    "to": 1201
  }, {
    "from": 366,
    "label": "calls",
    "to": 1201
  }, {
    "from": 378,
    "label": "calls",
    "to": 1201
  }, {
    "from": 37,
    "label": "calls",
    "to": 1201
  }, {
    "from": 37,
    "label": "calls",
    "to": 1201
  }, {
    "from": 37,
    "label": "calls",
    "to": 1201
  }, {
    "from": 37,
    "label": "calls",
    "to": 1201
  }, {
    "from": 37,
    "label": "calls",
    "to": 1201
  }, {
    "from": 37,
    "label": "calls",
    "to": 1201
  }, {
    "from": 946,
    "label": "calls",
    "to": 1206
  }, {
    "from": 1157,
    "label": "calls",
    "to": 8
  }, {
    "from": 342,
    "label": "calls",
    "to": 8
  }, {
    "from": 361,
    "label": "calls",
    "to": 8
  }, {
    "from": 978,
    "label": "calls",
    "to": 8
  }, {
    "from": 987,
    "label": "calls",
    "to": 8
  }, {
    "from": 996,
    "label": "calls",
    "to": 8
  }, {
    "from": 996,
    "label": "calls",
    "to": 8
  }, {
    "from": 1022,
    "label": "calls",
    "to": 8
  }, {
    "from": 1027,
    "label": "calls",
    "to": 8
  }, {
    "from": 1032,
    "label": "calls",
    "to": 8
  }, {
    "from": 1035,
    "label": "calls",
    "to": 8
  }, {
    "from": 34,
    "label": "calls",
    "to": 1159
  }, {
    "from": 946,
    "label": "calls",
    "to": 1204
  }, {
    "from": 714,
    "label": "calls",
    "to": 10
  }, {
    "from": 731,
    "label": "calls",
    "to": 10
  }, {
    "from": 731,
    "label": "calls",
    "to": 10
  }, {
    "from": 792,
    "label": "calls",
    "to": 10
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 289,
    "label": "calls",
    "to": 1179
  }, {
    "from": 289,
    "label": "calls",
    "to": 1179
  }, {
    "from": 289,
    "label": "calls",
    "to": 1179
  }, {
    "from": 289,
    "label": "calls",
    "to": 1179
  }, {
    "from": 289,
    "label": "calls",
    "to": 1179
  }, {
    "from": 299,
    "label": "calls",
    "to": 1179
  }, {
    "from": 299,
    "label": "calls",
    "to": 1179
  }, {
    "from": 304,
    "label": "calls",
    "to": 1179
  }, {
    "from": 304,
    "label": "calls",
    "to": 1179
  }, {
    "from": 307,
    "label": "calls",
    "to": 1179
  }, {
    "from": 307,
    "label": "calls",
    "to": 1179
  }, {
    "from": 307,
    "label": "calls",
    "to": 1179
  }, {
    "from": 307,
    "label": "calls",
    "to": 1179
  }, {
    "from": 307,
    "label": "calls",
    "to": 1179
  }, {
    "from": 307,
    "label": "calls",
    "to": 1179
  }, {
    "from": 326,
    "label": "calls",
    "to": 1179
  }, {
    "from": 329,
    "label": "calls",
    "to": 1179
  }, {
    "from": 342,
    "label": "calls",
    "to": 1179
  }, {
    "from": 342,
    "label": "calls",
    "to": 1179
  }, {
    "from": 342,
    "label": "calls",
    "to": 1179
  }, {
    "from": 342,
    "label": "calls",
    "to": 1179
  }, {
    "from": 361,
    "label": "calls",
    "to": 1179
  }, {
    "from": 361,
    "label": "calls",
    "to": 1179
  }, {
    "from": 366,
    "label": "calls",
    "to": 1179
  }, {
    "from": 366,
    "label": "calls",
    "to": 1179
  }, {
    "from": 366,
    "label": "calls",
    "to": 1179
  }, {
    "from": 366,
    "label": "calls",
    "to": 1179
  }, {
    "from": 378,
    "label": "calls",
    "to": 1179
  }, {
    "from": 407,
    "label": "calls",
    "to": 1179
  }, {
    "from": 407,
    "label": "calls",
    "to": 1179
  }, {
    "from": 407,
    "label": "calls",
    "to": 1179
  }, {
    "from": 419,
    "label": "calls",
    "to": 1179
  }, {
    "from": 422,
    "label": "calls",
    "to": 1179
  }, {
    "from": 422,
    "label": "calls",
    "to": 1179
  }, {
    "from": 422,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 427,
    "label": "calls",
    "to": 1179
  }, {
    "from": 475,
    "label": "calls",
    "to": 1179
  }, {
    "from": 475,
    "label": "calls",
    "to": 1179
  }, {
    "from": 475,
    "label": "calls",
    "to": 1179
  }, {
    "from": 484,
    "label": "calls",
    "to": 1179
  }, {
    "from": 484,
    "label": "calls",
    "to": 1179
  }, {
    "from": 493,
    "label": "calls",
    "to": 1179
  }, {
    "from": 493,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 523,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 599,
    "label": "calls",
    "to": 1179
  }, {
    "from": 605,
    "label": "calls",
    "to": 1179
  }, {
    "from": 605,
    "label": "calls",
    "to": 1179
  }, {
    "from": 613,
    "label": "calls",
    "to": 1179
  }, {
    "from": 616,
    "label": "calls",
    "to": 1179
  }, {
    "from": 616,
    "label": "calls",
    "to": 1179
  }, {
    "from": 616,
    "label": "calls",
    "to": 1179
  }, {
    "from": 627,
    "label": "calls",
    "to": 1179
  }, {
    "from": 627,
    "label": "calls",
    "to": 1179
  }, {
    "from": 627,
    "label": "calls",
    "to": 1179
  }, {
    "from": 627,
    "label": "calls",
    "to": 1179
  }, {
    "from": 627,
    "label": "calls",
    "to": 1179
  }, {
    "from": 627,
    "label": "calls",
    "to": 1179
  }, {
    "from": 627,
    "label": "calls",
    "to": 1179
  }, {
    "from": 627,
    "label": "calls",
    "to": 1179
  }, {
    "from": 627,
    "label": "calls",
    "to": 1179
  }, {
    "from": 659,
    "label": "calls",
    "to": 1179
  }, {
    "from": 675,
    "label": "calls",
    "to": 1179
  }, {
    "from": 682,
    "label": "calls",
    "to": 1179
  }, {
    "from": 682,
    "label": "calls",
    "to": 1179
  }, {
    "from": 690,
    "label": "calls",
    "to": 1179
  }, {
    "from": 690,
    "label": "calls",
    "to": 1179
  }, {
    "from": 714,
    "label": "calls",
    "to": 1179
  }, {
    "from": 599,
    "label": "calls",
    "to": 1179
  }, {
    "from": 731,
    "label": "calls",
    "to": 1179
  }, {
    "from": 731,
    "label": "calls",
    "to": 1179
  }, {
    "from": 731,
    "label": "calls",
    "to": 1179
  }, {
    "from": 731,
    "label": "calls",
    "to": 1179
  }, {
    "from": 774,
    "label": "calls",
    "to": 1179
  }, {
    "from": 774,
    "label": "calls",
    "to": 1179
  }, {
    "from": 774,
    "label": "calls",
    "to": 1179
  }, {
    "from": 774,
    "label": "calls",
    "to": 1179
  }, {
    "from": 774,
    "label": "calls",
    "to": 1179
  }, {
    "from": 776,
    "label": "calls",
    "to": 1179
  }, {
    "from": 744,
    "label": "calls",
    "to": 1179
  }, {
    "from": 744,
    "label": "calls",
    "to": 1179
  }, {
    "from": 807,
    "label": "calls",
    "to": 1179
  }, {
    "from": 792,
    "label": "calls",
    "to": 1179
  }, {
    "from": 792,
    "label": "calls",
    "to": 1179
  }, {
    "from": 792,
    "label": "calls",
    "to": 1179
  }, {
    "from": 843,
    "label": "calls",
    "to": 1179
  }, {
    "from": 843,
    "label": "calls",
    "to": 1179
  }, {
    "from": 843,
    "label": "calls",
    "to": 1179
  }, {
    "from": 843,
    "label": "calls",
    "to": 1179
  }, {
    "from": 843,
    "label": "calls",
    "to": 1179
  }, {
    "from": 843,
    "label": "calls",
    "to": 1179
  }, {
    "from": 843,
    "label": "calls",
    "to": 1179
  }, {
    "from": 843,
    "label": "calls",
    "to": 1179
  }, {
    "from": 843,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 37,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 38,
    "label": "calls",
    "to": 1179
  }, {
    "from": 422,
    "label": "calls",
    "to": 1179
  }, {
    "from": 928,
    "label": "calls",
    "to": 1179
  }, {
    "from": 938,
    "label": "calls",
    "to": 1179
  }, {
    "from": 807,
    "label": "calls",
    "to": 1179
  }, {
    "from": 996,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1054,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1054,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1060,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1060,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1069,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1074,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1074,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1081,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1085,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1085,
    "label": "calls",
    "to": 1179
  }, {
    "from": 128,
    "label": "calls",
    "to": 1202
  }, {
    "from": 1049,
    "label": "calls",
    "to": 1203
  }, {
    "from": 1054,
    "label": "calls",
    "to": 1203
  }, {
    "from": 1074,
    "label": "calls",
    "to": 1203
  }, {
    "from": 1085,
    "label": "calls",
    "to": 1203
  }, {
    "from": 113,
    "label": "calls",
    "to": 1190
  }, {
    "from": 113,
    "label": "calls",
    "to": 1190
  }, {
    "from": 113,
    "label": "calls",
    "to": 1190
  }, {
    "from": 427,
    "label": "calls",
    "to": 1190
  }, {
    "from": 427,
    "label": "calls",
    "to": 1190
  }, {
    "from": 484,
    "label": "calls",
    "to": 1190
  }, {
    "from": 523,
    "label": "calls",
    "to": 1190
  }, {
    "from": 523,
    "label": "calls",
    "to": 1190
  }, {
    "from": 523,
    "label": "calls",
    "to": 1190
  }, {
    "from": 523,
    "label": "calls",
    "to": 1190
  }, {
    "from": 523,
    "label": "calls",
    "to": 1190
  }, {
    "from": 523,
    "label": "calls",
    "to": 1190
  }, {
    "from": 523,
    "label": "calls",
    "to": 1190
  }, {
    "from": 627,
    "label": "calls",
    "to": 1190
  }, {
    "from": 675,
    "label": "calls",
    "to": 1190
  }, {
    "from": 675,
    "label": "calls",
    "to": 1190
  }, {
    "from": 675,
    "label": "calls",
    "to": 1190
  }, {
    "from": 682,
    "label": "calls",
    "to": 1190
  }, {
    "from": 682,
    "label": "calls",
    "to": 1190
  }, {
    "from": 682,
    "label": "calls",
    "to": 1190
  }, {
    "from": 948,
    "label": "calls",
    "to": 1190
  }, {
    "from": 954,
    "label": "calls",
    "to": 1190
  }, {
    "from": 954,
    "label": "calls",
    "to": 1190
  }, {
    "from": 960,
    "label": "calls",
    "to": 1190
  }, {
    "from": 964,
    "label": "calls",
    "to": 1190
  }, {
    "from": 964,
    "label": "calls",
    "to": 1190
  }, {
    "from": 978,
    "label": "calls",
    "to": 1190
  }, {
    "from": 978,
    "label": "calls",
    "to": 1190
  }, {
    "from": 987,
    "label": "calls",
    "to": 1190
  }, {
    "from": 987,
    "label": "calls",
    "to": 1190
  }, {
    "from": 996,
    "label": "calls",
    "to": 1190
  }, {
    "from": 996,
    "label": "calls",
    "to": 1190
  }, {
    "from": 996,
    "label": "calls",
    "to": 1190
  }, {
    "from": 37,
    "label": "calls",
    "to": 1190
  }, {
    "from": 880,
    "label": "calls",
    "to": 843
  }, {
    "from": 883,
    "label": "calls",
    "to": 843
  }, {
    "from": 928,
    "label": "calls",
    "to": 1194
  }, {
    "from": 928,
    "label": "calls",
    "to": 1194
  }, {
    "from": 128,
    "label": "calls",
    "to": 1210
  }, {
    "from": 128,
    "label": "calls",
    "to": 1210
  }, {
    "from": 128,
    "label": "calls",
    "to": 1210
  }, {
    "from": 128,
    "label": "calls",
    "to": 1210
  }, {
    "from": 156,
    "label": "calls",
    "to": 1210
  }, {
    "from": 156,
    "label": "calls",
    "to": 1210
  }, {
    "from": 156,
    "label": "calls",
    "to": 1210
  }, {
    "from": 289,
    "label": "calls",
    "to": 1210
  }, {
    "from": 299,
    "label": "calls",
    "to": 1210
  }, {
    "from": 304,
    "label": "calls",
    "to": 1210
  }, {
    "from": 307,
    "label": "calls",
    "to": 1210
  }, {
    "from": 307,
    "label": "calls",
    "to": 1210
  }, {
    "from": 307,
    "label": "calls",
    "to": 1210
  }, {
    "from": 307,
    "label": "calls",
    "to": 1210
  }, {
    "from": 307,
    "label": "calls",
    "to": 1210
  }, {
    "from": 326,
    "label": "calls",
    "to": 1210
  }, {
    "from": 326,
    "label": "calls",
    "to": 1210
  }, {
    "from": 333,
    "label": "calls",
    "to": 1210
  }, {
    "from": 366,
    "label": "calls",
    "to": 1210
  }, {
    "from": 366,
    "label": "calls",
    "to": 1210
  }, {
    "from": 366,
    "label": "calls",
    "to": 1210
  }, {
    "from": 366,
    "label": "calls",
    "to": 1210
  }, {
    "from": 378,
    "label": "calls",
    "to": 1210
  }, {
    "from": 378,
    "label": "calls",
    "to": 1210
  }, {
    "from": 407,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 427,
    "label": "calls",
    "to": 1210
  }, {
    "from": 471,
    "label": "calls",
    "to": 1210
  }, {
    "from": 475,
    "label": "calls",
    "to": 1210
  }, {
    "from": 475,
    "label": "calls",
    "to": 1210
  }, {
    "from": 475,
    "label": "calls",
    "to": 1210
  }, {
    "from": 484,
    "label": "calls",
    "to": 1210
  }, {
    "from": 484,
    "label": "calls",
    "to": 1210
  }, {
    "from": 484,
    "label": "calls",
    "to": 1210
  }, {
    "from": 484,
    "label": "calls",
    "to": 1210
  }, {
    "from": 493,
    "label": "calls",
    "to": 1210
  }, {
    "from": 493,
    "label": "calls",
    "to": 1210
  }, {
    "from": 493,
    "label": "calls",
    "to": 1210
  }, {
    "from": 493,
    "label": "calls",
    "to": 1210
  }, {
    "from": 523,
    "label": "calls",
    "to": 1210
  }, {
    "from": 523,
    "label": "calls",
    "to": 1210
  }, {
    "from": 523,
    "label": "calls",
    "to": 1210
  }, {
    "from": 523,
    "label": "calls",
    "to": 1210
  }, {
    "from": 523,
    "label": "calls",
    "to": 1210
  }, {
    "from": 523,
    "label": "calls",
    "to": 1210
  }, {
    "from": 523,
    "label": "calls",
    "to": 1210
  }, {
    "from": 523,
    "label": "calls",
    "to": 1210
  }, {
    "from": 548,
    "label": "calls",
    "to": 1210
  }, {
    "from": 548,
    "label": "calls",
    "to": 1210
  }, {
    "from": 523,
    "label": "calls",
    "to": 1210
  }, {
    "from": 584,
    "label": "calls",
    "to": 1210
  }, {
    "from": 584,
    "label": "calls",
    "to": 1210
  }, {
    "from": 599,
    "label": "calls",
    "to": 1210
  }, {
    "from": 605,
    "label": "calls",
    "to": 1210
  }, {
    "from": 605,
    "label": "calls",
    "to": 1210
  }, {
    "from": 605,
    "label": "calls",
    "to": 1210
  }, {
    "from": 605,
    "label": "calls",
    "to": 1210
  }, {
    "from": 613,
    "label": "calls",
    "to": 1210
  }, {
    "from": 613,
    "label": "calls",
    "to": 1210
  }, {
    "from": 616,
    "label": "calls",
    "to": 1210
  }, {
    "from": 616,
    "label": "calls",
    "to": 1210
  }, {
    "from": 616,
    "label": "calls",
    "to": 1210
  }, {
    "from": 616,
    "label": "calls",
    "to": 1210
  }, {
    "from": 616,
    "label": "calls",
    "to": 1210
  }, {
    "from": 616,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 627,
    "label": "calls",
    "to": 1210
  }, {
    "from": 659,
    "label": "calls",
    "to": 1210
  }, {
    "from": 659,
    "label": "calls",
    "to": 1210
  }, {
    "from": 675,
    "label": "calls",
    "to": 1210
  }, {
    "from": 682,
    "label": "calls",
    "to": 1210
  }, {
    "from": 690,
    "label": "calls",
    "to": 1210
  }, {
    "from": 690,
    "label": "calls",
    "to": 1210
  }, {
    "from": 693,
    "label": "calls",
    "to": 1210
  }, {
    "from": 693,
    "label": "calls",
    "to": 1210
  }, {
    "from": 599,
    "label": "calls",
    "to": 1210
  }, {
    "from": 731,
    "label": "calls",
    "to": 1210
  }, {
    "from": 731,
    "label": "calls",
    "to": 1210
  }, {
    "from": 731,
    "label": "calls",
    "to": 1210
  }, {
    "from": 731,
    "label": "calls",
    "to": 1210
  }, {
    "from": 843,
    "label": "calls",
    "to": 1210
  }, {
    "from": 843,
    "label": "calls",
    "to": 1210
  }, {
    "from": 843,
    "label": "calls",
    "to": 1210
  }, {
    "from": 843,
    "label": "calls",
    "to": 1210
  }, {
    "from": 843,
    "label": "calls",
    "to": 1210
  }, {
    "from": 843,
    "label": "calls",
    "to": 1210
  }, {
    "from": 843,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 422,
    "label": "calls",
    "to": 1210
  }, {
    "from": 928,
    "label": "calls",
    "to": 1210
  }, {
    "from": 928,
    "label": "calls",
    "to": 1210
  }, {
    "from": 928,
    "label": "calls",
    "to": 1210
  }, {
    "from": 928,
    "label": "calls",
    "to": 1210
  }, {
    "from": 928,
    "label": "calls",
    "to": 1210
  }, {
    "from": 928,
    "label": "calls",
    "to": 1210
  }, {
    "from": 928,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 938,
    "label": "calls",
    "to": 1210
  }, {
    "from": 948,
    "label": "calls",
    "to": 1210
  }, {
    "from": 954,
    "label": "calls",
    "to": 1210
  }, {
    "from": 954,
    "label": "calls",
    "to": 1210
  }, {
    "from": 960,
    "label": "calls",
    "to": 1210
  }, {
    "from": 964,
    "label": "calls",
    "to": 1210
  }, {
    "from": 964,
    "label": "calls",
    "to": 1210
  }, {
    "from": 978,
    "label": "calls",
    "to": 1210
  }, {
    "from": 978,
    "label": "calls",
    "to": 1210
  }, {
    "from": 987,
    "label": "calls",
    "to": 1210
  }, {
    "from": 987,
    "label": "calls",
    "to": 1210
  }, {
    "from": 1022,
    "label": "calls",
    "to": 1210
  }, {
    "from": 1049,
    "label": "calls",
    "to": 1210
  }, {
    "from": 1054,
    "label": "calls",
    "to": 1210
  }, {
    "from": 1054,
    "label": "calls",
    "to": 1210
  }, {
    "from": 1060,
    "label": "calls",
    "to": 1210
  }, {
    "from": 1060,
    "label": "calls",
    "to": 1210
  }, {
    "from": 1060,
    "label": "calls",
    "to": 1210
  }, {
    "from": 307,
    "label": "calls",
    "to": 1192
  }, {
    "from": 427,
    "label": "calls",
    "to": 1192
  }, {
    "from": 427,
    "label": "calls",
    "to": 1192
  }, {
    "from": 475,
    "label": "calls",
    "to": 1192
  }, {
    "from": 548,
    "label": "calls",
    "to": 1192
  }, {
    "from": 523,
    "label": "calls",
    "to": 34
  }, {
    "from": 523,
    "label": "calls",
    "to": 34
  }, {
    "from": 523,
    "label": "calls",
    "to": 34
  }, {
    "from": 523,
    "label": "calls",
    "to": 34
  }, {
    "from": 548,
    "label": "calls",
    "to": 34
  }, {
    "from": 548,
    "label": "calls",
    "to": 34
  }, {
    "from": 523,
    "label": "calls",
    "to": 34
  }, {
    "from": 37,
    "label": "calls",
    "to": 34
  }, {
    "from": 37,
    "label": "calls",
    "to": 34
  }, {
    "from": 38,
    "label": "calls",
    "to": 34
  }, {
    "from": 843,
    "label": "calls",
    "to": 34
  }, {
    "from": 843,
    "label": "calls",
    "to": 34
  }, {
    "from": 37,
    "label": "calls",
    "to": 34
  }, {
    "from": 37,
    "label": "calls",
    "to": 34
  }, {
    "from": 38,
    "label": "calls",
    "to": 34
  }, {
    "from": 996,
    "label": "calls",
    "to": 34
  }, {
    "from": 37,
    "label": "calls",
    "to": 34
  }, {
    "from": 37,
    "label": "calls",
    "to": 1165
  }, {
    "from": 37,
    "label": "calls",
    "to": 1165
  }, {
    "from": 307,
    "label": "calls",
    "to": 1205
  }, {
    "from": 342,
    "label": "calls",
    "to": 1205
  }, {
    "from": 659,
    "label": "calls",
    "to": 1163
  }, {
    "from": 690,
    "label": "calls",
    "to": 1163
  }, {
    "from": 693,
    "label": "calls",
    "to": 1163
  }, {
    "from": 840,
    "label": "calls",
    "to": 1158
  }, {
    "from": 883,
    "label": "calls",
    "to": 1158
  }, {
    "from": 14,
    "label": "calls",
    "to": 1181
  }, {
    "from": 14,
    "label": "calls",
    "to": 1181
  }, {
    "from": 378,
    "label": "calls",
    "to": 1165
  }, {
    "from": 37,
    "label": "calls",
    "to": 1165
  }, {
    "from": 665,
    "label": "calls",
    "to": 1161
  }, {
    "from": 672,
    "label": "calls",
    "to": 1161
  }, {
    "from": 37,
    "label": "calls",
    "to": 1161
  }, {
    "from": 37,
    "label": "calls",
    "to": 1161
  }, {
    "from": 837,
    "label": "calls",
    "to": 1161
  }, {
    "from": 880,
    "label": "calls",
    "to": 1161
  }, {
    "from": 37,
    "label": "calls",
    "to": 1161
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1161
  }, {
    "from": 953,
    "label": "calls",
    "to": 1195
  }, {
    "from": 960,
    "label": "calls",
    "to": 1195
  }, {
    "from": 974,
    "label": "calls",
    "to": 1195
  }, {
    "from": 1157,
    "label": "calls",
    "to": 2
  }, {
    "from": 960,
    "label": "calls",
    "to": 946
  }, {
    "from": 960,
    "label": "calls",
    "to": 946
  }, {
    "from": 964,
    "label": "calls",
    "to": 946
  }, {
    "from": 964,
    "label": "calls",
    "to": 946
  }, {
    "from": 964,
    "label": "calls",
    "to": 946
  }, {
    "from": 964,
    "label": "calls",
    "to": 946
  }, {
    "from": 12,
    "label": "calls",
    "to": 1208
  }, {
    "from": 140,
    "label": "calls",
    "to": 1189
  }, {
    "from": 407,
    "label": "calls",
    "to": 1189
  }, {
    "from": 419,
    "label": "calls",
    "to": 1189
  }, {
    "from": 422,
    "label": "calls",
    "to": 1189
  }, {
    "from": 427,
    "label": "calls",
    "to": 1189
  }, {
    "from": 427,
    "label": "calls",
    "to": 1189
  }, {
    "from": 616,
    "label": "calls",
    "to": 1189
  }, {
    "from": 627,
    "label": "calls",
    "to": 1189
  }, {
    "from": 1157,
    "label": "calls",
    "to": 9
  }, {
    "from": 1157,
    "label": "calls",
    "to": 9
  }, {
    "from": 422,
    "label": "calls",
    "to": 1180
  }, {
    "from": 427,
    "label": "calls",
    "to": 1180
  }, {
    "from": 471,
    "label": "calls",
    "to": 1180
  }, {
    "from": 475,
    "label": "calls",
    "to": 1180
  }, {
    "from": 484,
    "label": "calls",
    "to": 1180
  }, {
    "from": 493,
    "label": "calls",
    "to": 1180
  }, {
    "from": 616,
    "label": "calls",
    "to": 1180
  }, {
    "from": 627,
    "label": "calls",
    "to": 1180
  }, {
    "from": 627,
    "label": "calls",
    "to": 1180
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1198
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1198
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1198
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1198
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1198
  }, {
    "from": 422,
    "label": "calls",
    "to": 1178
  }, {
    "from": 427,
    "label": "calls",
    "to": 1178
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1157,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1,
    "label": "contains",
    "to": 1157
  }, {
    "from": 1157,
    "label": "declares",
    "to": 2
  }, {
    "from": 1157,
    "label": "declares",
    "to": 6
  }, {
    "from": 1157,
    "label": "declares",
    "to": 8
  }, {
    "from": 1157,
    "label": "declares",
    "to": 9
  }, {
    "from": 1157,
    "label": "declares",
    "to": 10
  }, {
    "from": 1157,
    "label": "declares",
    "to": 12
  }, {
    "from": 1157,
    "label": "declares",
    "to": 14
  }, {
    "from": 1157,
    "label": "declares",
    "to": 17
  }, {
    "from": 1157,
    "label": "declares",
    "to": 22
  }, {
    "from": 1157,
    "label": "declares",
    "to": 26
  }, {
    "from": 1157,
    "label": "declares",
    "to": 31
  }, {
    "from": 1157,
    "label": "declares",
    "to": 34
  }, {
    "from": 1157,
    "label": "declares",
    "to": 37
  }, {
    "from": 1157,
    "label": "declares",
    "to": 38
  }, {
    "from": 1157,
    "label": "declares",
    "to": 39
  }, {
    "from": 1157,
    "label": "declares",
    "to": 113
  }, {
    "from": 1157,
    "label": "declares",
    "to": 128
  }, {
    "from": 1157,
    "label": "declares",
    "to": 140
  }, {
    "from": 1157,
    "label": "declares",
    "to": 156
  }, {
    "from": 1157,
    "label": "declares",
    "to": 163
  }, {
    "from": 1157,
    "label": "declares",
    "to": 168
  }, {
    "from": 1157,
    "label": "declares",
    "to": 174
  }, {
    "from": 1157,
    "label": "declares",
    "to": 191
  }, {
    "from": 1157,
    "label": "declares",
    "to": 287
  }, {
    "from": 1157,
    "label": "declares",
    "to": 289
  }, {
    "from": 1157,
    "label": "declares",
    "to": 299
  }, {
    "from": 1157,
    "label": "declares",
    "to": 304
  }, {
    "from": 1157,
    "label": "declares",
    "to": 307
  }, {
    "from": 1157,
    "label": "declares",
    "to": 326
  }, {
    "from": 1157,
    "label": "declares",
    "to": 329
  }, {
    "from": 1157,
    "label": "declares",
    "to": 333
  }, {
    "from": 1157,
    "label": "declares",
    "to": 336
  }, {
    "from": 1157,
    "label": "declares",
    "to": 337
  }, {
    "from": 1157,
    "label": "declares",
    "to": 342
  }, {
    "from": 1157,
    "label": "declares",
    "to": 361
  }, {
    "from": 1157,
    "label": "declares",
    "to": 363
  }, {
    "from": 1157,
    "label": "declares",
    "to": 364
  }, {
    "from": 1157,
    "label": "declares",
    "to": 366
  }, {
    "from": 1157,
    "label": "declares",
    "to": 378
  }, {
    "from": 1157,
    "label": "declares",
    "to": 384
  }, {
    "from": 1157,
    "label": "declares",
    "to": 385
  }, {
    "from": 1157,
    "label": "declares",
    "to": 389
  }, {
    "from": 1157,
    "label": "declares",
    "to": 407
  }, {
    "from": 1157,
    "label": "declares",
    "to": 419
  }, {
    "from": 1157,
    "label": "declares",
    "to": 422
  }, {
    "from": 1157,
    "label": "declares",
    "to": 427
  }, {
    "from": 1157,
    "label": "declares",
    "to": 471
  }, {
    "from": 1157,
    "label": "declares",
    "to": 475
  }, {
    "from": 1157,
    "label": "declares",
    "to": 484
  }, {
    "from": 1157,
    "label": "declares",
    "to": 493
  }, {
    "from": 1157,
    "label": "declares",
    "to": 499
  }, {
    "from": 1157,
    "label": "declares",
    "to": 512
  }, {
    "from": 1157,
    "label": "declares",
    "to": 523
  }, {
    "from": 1157,
    "label": "declares",
    "to": 548
  }, {
    "from": 1157,
    "label": "declares",
    "to": 560
  }, {
    "from": 1157,
    "label": "declares",
    "to": 564
  }, {
    "from": 1157,
    "label": "declares",
    "to": 570
  }, {
    "from": 1157,
    "label": "declares",
    "to": 572
  }, {
    "from": 1157,
    "label": "declares",
    "to": 578
  }, {
    "from": 1157,
    "label": "declares",
    "to": 584
  }, {
    "from": 1157,
    "label": "declares",
    "to": 589
  }, {
    "from": 1157,
    "label": "declares",
    "to": 595
  }, {
    "from": 1157,
    "label": "declares",
    "to": 599
  }, {
    "from": 1157,
    "label": "declares",
    "to": 605
  }, {
    "from": 1157,
    "label": "declares",
    "to": 613
  }, {
    "from": 1157,
    "label": "declares",
    "to": 616
  }, {
    "from": 1157,
    "label": "declares",
    "to": 627
  }, {
    "from": 1157,
    "label": "declares",
    "to": 659
  }, {
    "from": 1157,
    "label": "declares",
    "to": 665
  }, {
    "from": 1157,
    "label": "declares",
    "to": 672
  }, {
    "from": 1157,
    "label": "declares",
    "to": 675
  }, {
    "from": 1157,
    "label": "declares",
    "to": 682
  }, {
    "from": 1157,
    "label": "declares",
    "to": 686
  }, {
    "from": 1157,
    "label": "declares",
    "to": 690
  }, {
    "from": 1157,
    "label": "declares",
    "to": 693
  }, {
    "from": 1157,
    "label": "declares",
    "to": 697
  }, {
    "from": 1157,
    "label": "declares",
    "to": 701
  }, {
    "from": 1157,
    "label": "declares",
    "to": 705
  }, {
    "from": 1157,
    "label": "declares",
    "to": 711
  }, {
    "from": 1157,
    "label": "declares",
    "to": 714
  }, {
    "from": 1157,
    "label": "declares",
    "to": 719
  }, {
    "from": 1157,
    "label": "declares",
    "to": 724
  }, {
    "from": 1157,
    "label": "declares",
    "to": 727
  }, {
    "from": 1157,
    "label": "declares",
    "to": 731
  }, {
    "from": 1157,
    "label": "declares",
    "to": 744
  }, {
    "from": 1157,
    "label": "declares",
    "to": 774
  }, {
    "from": 1157,
    "label": "declares",
    "to": 776
  }, {
    "from": 1157,
    "label": "declares",
    "to": 778
  }, {
    "from": 1157,
    "label": "declares",
    "to": 792
  }, {
    "from": 1157,
    "label": "declares",
    "to": 807
  }, {
    "from": 1157,
    "label": "declares",
    "to": 809
  }, {
    "from": 1157,
    "label": "declares",
    "to": 812
  }, {
    "from": 1157,
    "label": "declares",
    "to": 822
  }, {
    "from": 1157,
    "label": "declares",
    "to": 837
  }, {
    "from": 1157,
    "label": "declares",
    "to": 840
  }, {
    "from": 1157,
    "label": "declares",
    "to": 843
  }, {
    "from": 1157,
    "label": "declares",
    "to": 880
  }, {
    "from": 1157,
    "label": "declares",
    "to": 883
  }, {
    "from": 1157,
    "label": "declares",
    "to": 885
  }, {
    "from": 1157,
    "label": "declares",
    "to": 895
  }, {
    "from": 1157,
    "label": "declares",
    "to": 897
  }, {
    "from": 1157,
    "label": "declares",
    "to": 902
  }, {
    "from": 1157,
    "label": "declares",
    "to": 910
  }, {
    "from": 1157,
    "label": "declares",
    "to": 928
  }, {
    "from": 1157,
    "label": "declares",
    "to": 938
  }, {
    "from": 1157,
    "label": "declares",
    "to": 946
  }, {
    "from": 1157,
    "label": "declares",
    "to": 948
  }, {
    "from": 1157,
    "label": "declares",
    "to": 952
  }, {
    "from": 1157,
    "label": "declares",
    "to": 953
  }, {
    "from": 1157,
    "label": "declares",
    "to": 954
  }, {
    "from": 1157,
    "label": "declares",
    "to": 960
  }, {
    "from": 1157,
    "label": "declares",
    "to": 964
  }, {
    "from": 1157,
    "label": "declares",
    "to": 970
  }, {
    "from": 1157,
    "label": "declares",
    "to": 974
  }, {
    "from": 1157,
    "label": "declares",
    "to": 978
  }, {
    "from": 1157,
    "label": "declares",
    "to": 987
  }, {
    "from": 1157,
    "label": "declares",
    "to": 992
  }, {
    "from": 1157,
    "label": "declares",
    "to": 994
  }, {
    "from": 1157,
    "label": "declares",
    "to": 996
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1020
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1022
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1027
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1032
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1035
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1038
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1042
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1046
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1049
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1054
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1060
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1069
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1074
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1081
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1085
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1088
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1093
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1095
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1104
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1105
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1106
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1107
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1108
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1109
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1110
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1111
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1112
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1113
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1114
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1115
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1116
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1117
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1119
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1121
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1122
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1123
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1124
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1126
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1127
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1128
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1129
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1130
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1131
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1132
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1133
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1134
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1135
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1136
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1137
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1138
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1139
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1140
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1141
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1142
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1143
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1144
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1145
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1146
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1147
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1148
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1150
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1151
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1152
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1154
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1155
  }, {
    "from": 1157,
    "label": "declares",
    "to": 1156
  }, {
    "from": 1,
    "label": "contains",
    "to": 1214
  }, {
    "from": 1,
    "label": "contains",
    "to": 1215
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1216
  }, {
    "from": 1216,
    "label": "assigns",
    "to": 1217
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1218
  }, {
    "from": 1218,
    "label": "assigns",
    "to": 1219
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1220
  }, {
    "from": 1220,
    "label": "assigns",
    "to": 1221
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1222
  }, {
    "from": 1222,
    "label": "assigns",
    "to": 1223
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1224
  }, {
    "from": 1224,
    "label": "assigns",
    "to": 1225
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1226
  }, {
    "from": 1226,
    "label": "assigns",
    "to": 1227
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1228
  }, {
    "from": 1228,
    "label": "assigns",
    "to": 1229
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1230
  }, {
    "from": 1230,
    "label": "assigns",
    "to": 1231
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1232
  }, {
    "from": 1232,
    "label": "assigns",
    "to": 1233
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1234
  }, {
    "from": 1234,
    "label": "assigns",
    "to": 1235
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1236
  }, {
    "from": 1236,
    "label": "assigns",
    "to": 1237
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1238
  }, {
    "from": 1238,
    "label": "assigns",
    "to": 1239
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1240
  }, {
    "from": 1240,
    "label": "assigns",
    "to": 1241
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1242
  }, {
    "from": 1242,
    "label": "assigns",
    "to": 1243
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1244
  }, {
    "from": 1244,
    "label": "assigns",
    "to": 1245
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1246
  }, {
    "from": 1246,
    "label": "assigns",
    "to": 1247
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1248
  }, {
    "from": 1248,
    "label": "assigns",
    "to": 1249
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1250
  }, {
    "from": 1250,
    "label": "assigns",
    "to": 1251
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1252
  }, {
    "from": 1252,
    "label": "assigns",
    "to": 1253
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1254
  }, {
    "from": 1254,
    "label": "assigns",
    "to": 1255
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1256
  }, {
    "from": 1256,
    "label": "assigns",
    "to": 1257
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1258
  }, {
    "from": 1258,
    "label": "assigns",
    "to": 1259
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1260
  }, {
    "from": 1260,
    "label": "assigns",
    "to": 1261
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1262
  }, {
    "from": 1262,
    "label": "assigns",
    "to": 1263
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1264
  }, {
    "from": 1264,
    "label": "assigns",
    "to": 1265
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1266
  }, {
    "from": 1266,
    "label": "assigns",
    "to": 1267
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1268
  }, {
    "from": 1268,
    "label": "assigns",
    "to": 1269
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1270
  }, {
    "from": 1270,
    "label": "assigns",
    "to": 1271
  }, {
    "from": 1214,
    "label": "initializes",
    "to": 1272
  }, {
    "from": 1272,
    "label": "assigns",
    "to": 1273
  }, {
    "from": 1215,
    "label": "initializes",
    "to": 1274
  }, {
    "from": 1274,
    "label": "requires",
    "to": 1166
  }, {
    "from": 1215,
    "label": "initializes",
    "to": 1275
  }, {
    "from": 1275,
    "label": "requires",
    "to": 1212
  }, {
    "from": 1215,
    "label": "initializes",
    "to": 1276
  }, {
    "from": 1276,
    "label": "requires",
    "to": 1213
  }, {
    "from": 1215,
    "label": "initializes",
    "to": 1277
  }, {
    "from": 1277,
    "label": "requires",
    "to": 1278
  }, {
    "from": 1215,
    "label": "initializes",
    "to": 1279
  }, {
    "from": 1279,
    "label": "requires",
    "to": 1211
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 1105
  }, {
    "from": 353,
    "label": "hasArgument",
    "to": 1106
  }, {
    "from": 355,
    "label": "hasArgument",
    "to": 1107
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 1108
  }, {
    "from": 381,
    "label": "hasArgument",
    "to": 1133
  }, {
    "from": 412,
    "label": "hasArgument",
    "to": 1109
  }, {
    "from": 414,
    "label": "hasArgument",
    "to": 1110
  }, {
    "from": 416,
    "label": "hasArgument",
    "to": 1111
  }, {
    "from": 416,
    "label": "hasArgument",
    "to": 1112
  }, {
    "from": 466,
    "label": "hasArgument",
    "to": 1113
  }, {
    "from": 468,
    "label": "hasArgument",
    "to": 1114
  }, {
    "from": 565,
    "label": "hasArgument",
    "to": 1115
  }, {
    "from": 567,
    "label": "hasArgument",
    "to": 1116
  }, {
    "from": 698,
    "label": "hasArgument",
    "to": 1117
  }, {
    "from": 702,
    "label": "hasArgument",
    "to": 1119
  }, {
    "from": 733,
    "label": "hasArgument",
    "to": 1121
  }, {
    "from": 733,
    "label": "hasArgument",
    "to": 1122
  }, {
    "from": 760,
    "label": "hasArgument",
    "to": 1124
  }, {
    "from": 800,
    "label": "hasArgument",
    "to": 1126
  }, {
    "from": 800,
    "label": "hasArgument",
    "to": 1154
  }, {
    "from": 802,
    "label": "hasArgument",
    "to": 1127
  }, {
    "from": 802,
    "label": "hasArgument",
    "to": 1155
  }, {
    "from": 851,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 851,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 861,
    "label": "hasArgument",
    "to": 1129
  }, {
    "from": 861,
    "label": "hasArgument",
    "to": 1131
  }, {
    "from": 863,
    "label": "hasArgument",
    "to": 1128
  }, {
    "from": 863,
    "label": "hasArgument",
    "to": 1130
  }, {
    "from": 871,
    "label": "hasArgument",
    "to": 1132
  }, {
    "from": 898,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 898,
    "label": "hasArgument",
    "to": 1108
  }, {
    "from": 898,
    "label": "hasArgument",
    "to": 1133
  }, {
    "from": 899,
    "label": "hasArgument",
    "to": 1134
  }, {
    "from": 903,
    "label": "hasArgument",
    "to": 1135
  }, {
    "from": 905,
    "label": "hasArgument",
    "to": 1136
  }, {
    "from": 907,
    "label": "hasArgument",
    "to": 1137
  }, {
    "from": 912,
    "label": "hasArgument",
    "to": 1138
  }, {
    "from": 912,
    "label": "hasArgument",
    "to": 1141
  }, {
    "from": 915,
    "label": "hasArgument",
    "to": 1139
  }, {
    "from": 917,
    "label": "hasArgument",
    "to": 1140
  }, {
    "from": 917,
    "label": "hasArgument",
    "to": 1144
  }, {
    "from": 930,
    "label": "hasArgument",
    "to": 1142
  }, {
    "from": 932,
    "label": "hasArgument",
    "to": 1143
  }, {
    "from": 935,
    "label": "hasArgument",
    "to": 1140
  }, {
    "from": 935,
    "label": "hasArgument",
    "to": 1144
  }, {
    "from": 939,
    "label": "hasArgument",
    "to": 1145
  }, {
    "from": 941,
    "label": "hasArgument",
    "to": 1146
  }, {
    "from": 943,
    "label": "hasArgument",
    "to": 1147
  }, {
    "from": 971,
    "label": "hasArgument",
    "to": 1150
  }, {
    "from": 975,
    "label": "hasArgument",
    "to": 1151
  }, {
    "from": 1004,
    "label": "hasArgument",
    "to": 1152
  }, {
    "from": 1015,
    "label": "hasArgument",
    "to": 1127
  }, {
    "from": 1015,
    "label": "hasArgument",
    "to": 1155
  }, {
    "from": 1070,
    "label": "hasArgument",
    "to": 1156
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "utest",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function zversion(zmq)\r\n  local version = zmq.version()\r\n  return string.format(\"%d.%d.%d\", version[1], version[2], version[3])\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local version = zmq.version()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function iszvereq(zmq, mi, ma, bu)\r\n  local version = zmq.version()\r\n  return (mi == version[1]) and (ma == version[2]) and (bu == version[3])\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function(msg) return function() return skip(msg) end end",
    "type": "function"
  }, {
    "id": 10,
    "text": "local function ge(expected, value)\r\n  return (value >= expected), value .. \" less then \" .. expected\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function weak_ptr(val)\r\n  return setmetatable({value = val},{__mode = 'v'})\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function gc_collect()\r\n  collectgarbage(\"collect\")\r\n  collectgarbage(\"collect\")\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function is_object(o, ...)\r\n  if o == nil then return o, ... end\r\n  local flag = (type(o) == 'table') or (type(o) == 'userdata')\r\n  if not flag then return nil, '`' .. tostring(o) .. '` is not object' end\r\n  return o, ...\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if o == nil then return o, ... end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "local flag = (type(o) == 'table') or (type(o) == 'userdata')",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not flag then return nil, '`' .. tostring(o) .. '` is not object' end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function(o, ...)\r\n  if o == nil then return o, ... end\r\n  local flag = (type(o) == 'number') or (type(o) == 'userdata') or (type(o) == 'string')\r\n  if not flag then return nil, '`' .. tostring(o) .. '` is not zma.context.userdata' end\r\n  return o, ...\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local flag = (type(o) == 'number') or (type(o) == 'userdata') or (type(o) == 'string')",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if not flag then return nil, '`' .. tostring(o) .. '` is not zma.context.userdata' end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function error_is(err, no)\r\n  local msg = \"expected `\" .. tostring(zmq.error(no)) .. \"` but was `\" .. tostring(err) .. \"`\"\r\n  if type(err) == 'number' then\r\n    return err == no, msg\r\n  end\r\n  if type(err) == 'string' then\r\n    return not not string.find(err, tostring(no), nil, true), msg\r\n  end\r\n  return err:no() == no, msg\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local msg = \"expected `\" .. tostring(zmq.error(no)) .. \"` but was `\" .. tostring(err) .. \"`\"",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if type(err) == 'number' then\r\n    return err == no, msg\r\n  end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "if type(err) == 'string' then\r\n    return not not string.find(err, tostring(no), nil, true), msg\r\n  end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function socket_count(ctx, hint)\r\n  if ctx.socket_count then -- if compile with debug info\r\n    return hint, ctx:socket_count()\r\n  end\r\n  return hint, hint\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "if ctx.socket_count then -- if compile with debug info\r\n    return hint, ctx:socket_count()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function wait(ms)\r\n  ztimer.sleep(ms or 100)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "ztimer.sleep(ms or 100)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function setup() end",
    "type": "function"
  }, {
    "id": 38,
    "text": "function teardown() end",
    "type": "function"
  }, {
    "id": 39,
    "text": "function test_constant()\r\n  do -- flags\r\n    assert_number(zmq.SNDMORE                        )\r\n    assert_number(zmq.DONTWAIT                       )\r\n    if zmq.NOBLOCK then assert_number(zmq.NOBLOCK    ) end\r\n  end\r\n  do -- poller\r\n    assert_number(zmq.POLLIN                         )\r\n    assert_number(zmq.POLLOUT                        )\r\n    assert_number(zmq.POLLERR                        )\r\n  end\r\n  do -- socket opt\r\n    assert_number(zmq.AFFINITY                       )\r\n    assert_number(zmq.IDENTITY                       )\r\n    assert_number(zmq.SUBSCRIBE                      )\r\n    assert_number(zmq.UNSUBSCRIBE                    )\r\n    assert_number(zmq.RATE                           )\r\n    assert_number(zmq.RECOVERY_IVL                   )\r\n    assert_number(zmq.SNDBUF                         )\r\n    assert_number(zmq.RCVBUF                         )\r\n    assert_number(zmq.RCVMORE                        )\r\n    assert_number(zmq.FD                             )\r\n    assert_number(zmq.EVENTS                         )\r\n    assert_number(zmq.TYPE                           )\r\n    assert_number(zmq.LINGER                         )\r\n    assert_number(zmq.RECONNECT_IVL                  )\r\n    assert_number(zmq.BACKLOG                        )\r\n    assert_number(zmq.RECONNECT_IVL_MAX              )\r\n    assert_number(zmq.MAXMSGSIZE                     )\r\n    assert_number(zmq.SNDHWM                         )\r\n    assert_number(zmq.RCVHWM                         )\r\n    assert_number(zmq.MULTICAST_HOPS                 )\r\n    assert_number(zmq.RCVTIMEO                       )\r\n    assert_number(zmq.SNDTIMEO                       )\r\n    assert_number(zmq.IPV4ONLY                       )\r\n    assert_number(zmq.LAST_ENDPOINT                  )\r\n    assert_number(zmq.TCP_KEEPALIVE                  )\r\n    assert_number(zmq.TCP_KEEPALIVE_CNT              )\r\n    assert_number(zmq.TCP_KEEPALIVE_IDLE             )\r\n    assert_number(zmq.TCP_KEEPALIVE_INTVL            )\r\n    assert_number(zmq.TCP_ACCEPT_FILTER              )\r\n    if false then \r\n      -- @todo optional test\r\n      assert_number(zmq.ROUTER_BEHAVIOR                )\r\n      assert_number(zmq.FAIL_UNROUTABLE                )\r\n      assert_number(zmq.ROUTER_MANDATORY               )\r\n      assert_number(zmq.DELAY_ATTACH_ON_CONNECT        )\r\n      assert_number(zmq.XPUB_VERBOSE                   )\r\n      assert_number(zmq.ROUTER_RAW                     )\r\n    end\r\n  end\r\n  do -- errors\r\n    assert_table(zmq.errors)\r\n    for _, Z in ipairs{zmq, zmq.errors} do\r\n      assert_number( Z.EFSM             )\r\n      assert_number( Z.ENOCOMPATPROTO   )\r\n      assert_number( Z.ETERM            )\r\n      assert_number( Z.EMTHREAD         )\r\n      assert_number( Z.EAGAIN           )\r\n      assert_number( Z.EINVAL           )\r\n      assert_number( Z.EHOSTUNREACH     )\r\n      assert_number( Z.ENOTSOCK         )\r\n      assert_number( Z.ENETDOWN         )\r\n      assert_number( Z.EPROTONOSUPPORT  )\r\n      assert_number( Z.ENOBUFS          )\r\n      assert_number( Z.ENETUNREACH      )\r\n      assert_number( Z.ENOTSUP          )\r\n      assert_number( Z.ETIMEDOUT        )\r\n      assert_number( Z.EADDRNOTAVAIL    )\r\n      assert_number( Z.EADDRINUSE       )\r\n      assert_number( Z.ECONNABORTED     )\r\n      assert_number( Z.EAFNOSUPPORT     )\r\n      assert_number( Z.ECONNREFUSED     )\r\n      assert_number( Z.ENOTCONN         )\r\n      assert_number( Z.EINPROGRESS      )\r\n      assert_number( Z.ECONNRESET       )\r\n      assert_number( Z.EMSGSIZE         )\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "do -- flags\r\n    assert_number(zmq.SNDMORE                        )\r\n    assert_number(zmq.DONTWAIT                       )\r\n    if zmq.NOBLOCK then assert_number(zmq.NOBLOCK    ) end\r\n  end",
    "type": "statement:do"
  }, {
    "id": 41,
    "text": "assert_number(zmq.SNDMORE                        )",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert_number(zmq.DONTWAIT                       )",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if zmq.NOBLOCK then assert_number(zmq.NOBLOCK    ) end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "assert_number(zmq.NOBLOCK    )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "do -- poller\r\n    assert_number(zmq.POLLIN                         )\r\n    assert_number(zmq.POLLOUT                        )\r\n    assert_number(zmq.POLLERR                        )\r\n  end",
    "type": "statement:do"
  }, {
    "id": 46,
    "text": "assert_number(zmq.POLLIN                         )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert_number(zmq.POLLOUT                        )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert_number(zmq.POLLERR                        )",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "do -- socket opt\r\n    assert_number(zmq.AFFINITY                       )\r\n    assert_number(zmq.IDENTITY                       )\r\n    assert_number(zmq.SUBSCRIBE                      )\r\n    assert_number(zmq.UNSUBSCRIBE                    )\r\n    assert_number(zmq.RATE                           )\r\n    assert_number(zmq.RECOVERY_IVL                   )\r\n    assert_number(zmq.SNDBUF                         )\r\n    assert_number(zmq.RCVBUF                         )\r\n    assert_number(zmq.RCVMORE                        )\r\n    assert_number(zmq.FD                             )\r\n    assert_number(zmq.EVENTS                         )\r\n    assert_number(zmq.TYPE                           )\r\n    assert_number(zmq.LINGER                         )\r\n    assert_number(zmq.RECONNECT_IVL                  )\r\n    assert_number(zmq.BACKLOG                        )\r\n    assert_number(zmq.RECONNECT_IVL_MAX              )\r\n    assert_number(zmq.MAXMSGSIZE                     )\r\n    assert_number(zmq.SNDHWM                         )\r\n    assert_number(zmq.RCVHWM                         )\r\n    assert_number(zmq.MULTICAST_HOPS                 )\r\n    assert_number(zmq.RCVTIMEO                       )\r\n    assert_number(zmq.SNDTIMEO                       )\r\n    assert_number(zmq.IPV4ONLY                       )\r\n    assert_number(zmq.LAST_ENDPOINT                  )\r\n    assert_number(zmq.TCP_KEEPALIVE                  )\r\n    assert_number(zmq.TCP_KEEPALIVE_CNT              )\r\n    assert_number(zmq.TCP_KEEPALIVE_IDLE             )\r\n    assert_number(zmq.TCP_KEEPALIVE_INTVL            )\r\n    assert_number(zmq.TCP_ACCEPT_FILTER              )\r\n    if false then \r\n      -- @todo optional test\r\n      assert_number(zmq.ROUTER_BEHAVIOR                )\r\n      assert_number(zmq.FAIL_UNROUTABLE                )\r\n      assert_number(zmq.ROUTER_MANDATORY               )\r\n      assert_number(zmq.DELAY_ATTACH_ON_CONNECT        )\r\n      assert_number(zmq.XPUB_VERBOSE                   )\r\n      assert_number(zmq.ROUTER_RAW                     )\r\n    end\r\n  end",
    "type": "statement:do"
  }, {
    "id": 50,
    "text": "assert_number(zmq.AFFINITY                       )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert_number(zmq.IDENTITY                       )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert_number(zmq.SUBSCRIBE                      )",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert_number(zmq.UNSUBSCRIBE                    )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert_number(zmq.RATE                           )",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert_number(zmq.RECOVERY_IVL                   )",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert_number(zmq.SNDBUF                         )",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert_number(zmq.RCVBUF                         )",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert_number(zmq.RCVMORE                        )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert_number(zmq.FD                             )",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert_number(zmq.EVENTS                         )",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert_number(zmq.TYPE                           )",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert_number(zmq.LINGER                         )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert_number(zmq.RECONNECT_IVL                  )",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert_number(zmq.BACKLOG                        )",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "assert_number(zmq.RECONNECT_IVL_MAX              )",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "assert_number(zmq.MAXMSGSIZE                     )",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert_number(zmq.SNDHWM                         )",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert_number(zmq.RCVHWM                         )",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert_number(zmq.MULTICAST_HOPS                 )",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert_number(zmq.RCVTIMEO                       )",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert_number(zmq.SNDTIMEO                       )",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert_number(zmq.IPV4ONLY                       )",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert_number(zmq.LAST_ENDPOINT                  )",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "assert_number(zmq.TCP_KEEPALIVE                  )",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert_number(zmq.TCP_KEEPALIVE_CNT              )",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert_number(zmq.TCP_KEEPALIVE_IDLE             )",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert_number(zmq.TCP_KEEPALIVE_INTVL            )",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert_number(zmq.TCP_ACCEPT_FILTER              )",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "if false then \r\n      -- @todo optional test\r\n      assert_number(zmq.ROUTER_BEHAVIOR                )\r\n      assert_number(zmq.FAIL_UNROUTABLE                )\r\n      assert_number(zmq.ROUTER_MANDATORY               )\r\n      assert_number(zmq.DELAY_ATTACH_ON_CONNECT        )\r\n      assert_number(zmq.XPUB_VERBOSE                   )\r\n      assert_number(zmq.ROUTER_RAW                     )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "assert_number(zmq.ROUTER_BEHAVIOR                )",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert_number(zmq.FAIL_UNROUTABLE                )",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert_number(zmq.ROUTER_MANDATORY               )",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert_number(zmq.DELAY_ATTACH_ON_CONNECT        )",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "assert_number(zmq.XPUB_VERBOSE                   )",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert_number(zmq.ROUTER_RAW                     )",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "do -- errors\r\n    assert_table(zmq.errors)\r\n    for _, Z in ipairs{zmq, zmq.errors} do\r\n      assert_number( Z.EFSM             )\r\n      assert_number( Z.ENOCOMPATPROTO   )\r\n      assert_number( Z.ETERM            )\r\n      assert_number( Z.EMTHREAD         )\r\n      assert_number( Z.EAGAIN           )\r\n      assert_number( Z.EINVAL           )\r\n      assert_number( Z.EHOSTUNREACH     )\r\n      assert_number( Z.ENOTSOCK         )\r\n      assert_number( Z.ENETDOWN         )\r\n      assert_number( Z.EPROTONOSUPPORT  )\r\n      assert_number( Z.ENOBUFS          )\r\n      assert_number( Z.ENETUNREACH      )\r\n      assert_number( Z.ENOTSUP          )\r\n      assert_number( Z.ETIMEDOUT        )\r\n      assert_number( Z.EADDRNOTAVAIL    )\r\n      assert_number( Z.EADDRINUSE       )\r\n      assert_number( Z.ECONNABORTED     )\r\n      assert_number( Z.EAFNOSUPPORT     )\r\n      assert_number( Z.ECONNREFUSED     )\r\n      assert_number( Z.ENOTCONN         )\r\n      assert_number( Z.EINPROGRESS      )\r\n      assert_number( Z.ECONNRESET       )\r\n      assert_number( Z.EMSGSIZE         )\r\n    end\r\n  end",
    "type": "statement:do"
  }, {
    "id": 87,
    "text": "assert_table(zmq.errors)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "for _, Z in ipairs{zmq, zmq.errors} do\r\n      assert_number( Z.EFSM             )\r\n      assert_number( Z.ENOCOMPATPROTO   )\r\n      assert_number( Z.ETERM            )\r\n      assert_number( Z.EMTHREAD         )\r\n      assert_number( Z.EAGAIN           )\r\n      assert_number( Z.EINVAL           )\r\n      assert_number( Z.EHOSTUNREACH     )\r\n      assert_number( Z.ENOTSOCK         )\r\n      assert_number( Z.ENETDOWN         )\r\n      assert_number( Z.EPROTONOSUPPORT  )\r\n      assert_number( Z.ENOBUFS          )\r\n      assert_number( Z.ENETUNREACH      )\r\n      assert_number( Z.ENOTSUP          )\r\n      assert_number( Z.ETIMEDOUT        )\r\n      assert_number( Z.EADDRNOTAVAIL    )\r\n      assert_number( Z.EADDRINUSE       )\r\n      assert_number( Z.ECONNABORTED     )\r\n      assert_number( Z.EAFNOSUPPORT     )\r\n      assert_number( Z.ECONNREFUSED     )\r\n      assert_number( Z.ENOTCONN         )\r\n      assert_number( Z.EINPROGRESS      )\r\n      assert_number( Z.ECONNRESET       )\r\n      assert_number( Z.EMSGSIZE         )\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 89,
    "text": "assert_number( Z.EFSM             )",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assert_number( Z.ENOCOMPATPROTO   )",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "assert_number( Z.ETERM            )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert_number( Z.EMTHREAD         )",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert_number( Z.EAGAIN           )",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert_number( Z.EINVAL           )",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "assert_number( Z.EHOSTUNREACH     )",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "assert_number( Z.ENOTSOCK         )",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "assert_number( Z.ENETDOWN         )",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "assert_number( Z.EPROTONOSUPPORT  )",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert_number( Z.ENOBUFS          )",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assert_number( Z.ENETUNREACH      )",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "assert_number( Z.ENOTSUP          )",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "assert_number( Z.ETIMEDOUT        )",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "assert_number( Z.EADDRNOTAVAIL    )",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert_number( Z.EADDRINUSE       )",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "assert_number( Z.ECONNABORTED     )",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "assert_number( Z.EAFNOSUPPORT     )",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert_number( Z.ECONNREFUSED     )",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert_number( Z.ENOTCONN         )",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert_number( Z.EINPROGRESS      )",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert_number( Z.ECONNRESET       )",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert_number( Z.EMSGSIZE         )",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function test_assert()\r\n  local msg = zmq.strerror(zmq.errors.EINVAL)\r\n  local ok1, msg1 = pcall(zmq.assert, false, zmq.error(zmq.errors.EINVAL));    -- object\r\n  local ok2, msg2 = pcall(zmq.assert, false, zmq.errors.EINVAL);               -- number\r\n  local ok3, msg3 = pcall(zmq.assert, false, zmq.strerror(zmq.errors.EINVAL)); -- string\r\n  assert_false(ok1)\r\n  assert_false(ok2)\r\n  assert_false(ok3)\r\n  assert_string(msg1)\r\n  assert_string(msg2)\r\n  assert_string(msg3)\r\n  assert(string.find(msg1, msg, nil, true), \"`\" .. msg .. \"` not found in `\" .. msg1 .. \"`\")\r\n  assert(string.find(msg2, msg, nil, true), \"`\" .. msg .. \"` not found in `\" .. msg2 .. \"`\")\r\n  assert(string.find(msg3, msg, nil, true), \"`\" .. msg .. \"` not found in `\" .. msg3 .. \"`\")\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "local msg = zmq.strerror(zmq.errors.EINVAL)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "local ok1, msg1 = pcall(zmq.assert, false, zmq.error(zmq.errors.EINVAL))",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "local ok2, msg2 = pcall(zmq.assert, false, zmq.errors.EINVAL)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "local ok3, msg3 = pcall(zmq.assert, false, zmq.strerror(zmq.errors.EINVAL))",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "assert_false(ok1)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert_false(ok2)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert_false(ok3)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assert_string(msg1)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert_string(msg2)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "assert_string(msg3)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assert(string.find(msg1, msg, nil, true), \"`\" .. msg .. \"` not found in `\" .. msg1 .. \"`\")",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "assert(string.find(msg2, msg, nil, true), \"`\" .. msg .. \"` not found in `\" .. msg2 .. \"`\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert(string.find(msg3, msg, nil, true), \"`\" .. msg .. \"` not found in `\" .. msg3 .. \"`\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function test_error()\r\n  for k, v in pairs(zmq.errors) do\r\n    assert_equal(k, zmq.errors[v])\r\n  end\r\n\r\n  local zassert = zmq.assert\r\n  local err = zmq.error(zmq.errors.EAGAIN)\r\n  assert_equal(zmq.errors.EAGAIN, err:no())\r\n  assert_equal(\"EAGAIN\", err:mnemo())\r\n  local str_err = tostring(err)\r\n  local ok, msg = pcall( zassert, false, err )\r\n  assert_false(ok)\r\n  assert_equal(str_err, msg)\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "for k, v in pairs(zmq.errors) do\r\n    assert_equal(k, zmq.errors[v])\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 130,
    "text": "assert_equal(k, zmq.errors[v])",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "local zassert = zmq.assert",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "local err = zmq.error(zmq.errors.EAGAIN)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "assert_equal(zmq.errors.EAGAIN, err:no())",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "assert_equal(\"EAGAIN\", err:mnemo())",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "local str_err = tostring(err)",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "local ok, msg = pcall( zassert, false, err )",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "assert_false(ok)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "assert_equal(str_err, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function test_interface()\r\n  assert_function(zmq.version)\r\n  assert_function(zmq.device)\r\n  assert_function(zmq.assert)\r\n  assert_function(zmq.error)\r\n  assert_function(zmq.strerror)\r\n  assert_function(zmq.context)\r\n  -- assert_function(zmq.poller)\r\n  assert_function(zmq.init)\r\n  assert_function(zmq.init_ctx)\r\n  assert_function(zmq.init_socket)\r\n  assert_function(zmq.msg_init)\r\n  assert_function(zmq.msg_init_size)\r\n  assert_function(zmq.msg_init_data)\r\n  -- assert_function(zmq.msg_init_data_multi)\r\n  -- assert_function(zmq.msg_init_data_array)\r\n  if zmq.proxy then assert_function(zmq.proxy) end\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "assert_function(zmq.version)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "assert_function(zmq.device)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "assert_function(zmq.assert)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "assert_function(zmq.error)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "assert_function(zmq.strerror)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "assert_function(zmq.context)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "assert_function(zmq.init)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "assert_function(zmq.init_ctx)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "assert_function(zmq.init_socket)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "assert_function(zmq.msg_init)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "assert_function(zmq.msg_init_size)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "assert_function(zmq.msg_init_data)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "if zmq.proxy then assert_function(zmq.proxy) end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "assert_function(zmq.proxy)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function test_version()\r\n  local version = assert_table(zmq.version())\r\n  local major,minor,patch = assert_number(zmq.version(true))\r\n  assert_equal(major, version[1])\r\n  assert_equal(minor, version[2])\r\n  assert_equal(patch, version[3])\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "local version = assert_table(zmq.version())",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "local major,minor,patch = assert_number(zmq.version(true))",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "assert_equal(major, version[1])",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "assert_equal(minor, version[2])",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "assert_equal(patch, version[3])",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function setup()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  skt = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(skt)\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "ctx = assert(is_zcontext(zmq.context()))",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "skt = assert(is_zsocket(ctx:socket(zmq.SUB)))",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "ctx:autoclose(skt)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "function teardown()\r\n  if ctx then ctx:destroy()             end\r\n  if skt then assert_true(skt:closed()) end\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "if ctx then ctx:destroy()             end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "ctx:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "if skt then assert_true(skt:closed()) end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "assert_true(skt:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function test_context()\r\n  assert_function(ctx.set)\r\n  assert_function(ctx.get)\r\n  assert_function(ctx.lightuserdata)\r\n  assert_function(ctx.get_io_threads)\r\n  assert_function(ctx.set_io_threads)\r\n  assert_function(ctx.get_max_sockets)\r\n  assert_function(ctx.set_max_sockets)\r\n  assert_function(ctx.closed)\r\n  assert_function(ctx.socket)\r\n  assert_function(ctx.autoclose)\r\n  assert_function(ctx.destroy)\r\n  assert_function(ctx.term)\r\n  if ctx.shutdown then\r\n    assert_function(ctx.shutdown)\r\n    assert_function(ctx.shutdowned)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "assert_function(ctx.set)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "assert_function(ctx.get)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "assert_function(ctx.lightuserdata)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "assert_function(ctx.get_io_threads)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "assert_function(ctx.set_io_threads)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "assert_function(ctx.get_max_sockets)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "assert_function(ctx.set_max_sockets)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "assert_function(ctx.closed)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "assert_function(ctx.socket)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "assert_function(ctx.autoclose)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assert_function(ctx.destroy)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "assert_function(ctx.term)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "if ctx.shutdown then\r\n    assert_function(ctx.shutdown)\r\n    assert_function(ctx.shutdowned)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "assert_function(ctx.shutdown)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert_function(ctx.shutdowned)",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function test_socket()\r\n  assert_function(skt.context)\r\n  assert_function(skt.bind)\r\n  assert_function(skt.unbind)\r\n  assert_function(skt.connect)\r\n  assert_function(skt.disconnect)\r\n  assert_function(skt.send)\r\n  assert_function(skt.send_msg)\r\n  assert_function(skt.send_more)\r\n  assert_function(skt.recv)\r\n  assert_function(skt.recv_msg)\r\n  assert_function(skt.recv_new_msg)\r\n  assert_function(skt.recv_len)\r\n  assert_function(skt.send_all)\r\n  assert_function(skt.recv_all)\r\n  assert_function(skt.more)\r\n  assert_function(skt.on_close)\r\n  assert_function(skt.close)\r\n  assert_function(skt.closed)\r\n  assert_function(skt.lightuserdata)\r\n\r\n  assert_function(skt.getopt_int)\r\n  assert_function(skt.getopt_i64)\r\n  assert_function(skt.getopt_u64)\r\n  assert_function(skt.getopt_str)\r\n  assert_function(skt.setopt_int)\r\n  assert_function(skt.setopt_i64)\r\n  assert_function(skt.setopt_u64)\r\n  assert_function(skt.setopt_str)\r\n\r\n\r\n  assert_function(skt.get_affinity            )\r\n  assert_function(skt.set_affinity            )\r\n  assert_function(skt.get_identity            )\r\n  assert_function(skt.set_identity            )\r\n\r\n  assert_function(skt.subscribe               )\r\n  assert_function(skt.set_subscribe           )\r\n  assert_function(skt.unsubscribe             )\r\n  assert_function(skt.set_unsubscribe         )\r\n\r\n  assert_function(skt.get_rate                )\r\n  assert_function(skt.set_rate                )\r\n  assert_function(skt.get_recovery_ivl        )\r\n  assert_function(skt.set_recovery_ivl        )\r\n\r\n  assert_function(skt.get_sndbuf              )\r\n  assert_function(skt.set_sndbuf              )\r\n  assert_function(skt.get_rcvbuf              )\r\n  assert_function(skt.set_rcvbuf              )\r\n  assert_function(skt.rcvmore                 )\r\n  assert_function(skt.get_rcvmore             )\r\n  assert_function(skt.fd                      )\r\n  assert_function(skt.get_fd                  )\r\n  assert_function(skt.events                  )\r\n  assert_function(skt.get_events              )\r\n  assert_function(skt.type                    )\r\n  assert_function(skt.get_type                )\r\n\r\n  assert_function(skt.get_linger              )\r\n  assert_function(skt.set_linger              )\r\n  assert_function(skt.get_reconnect_ivl       )\r\n  assert_function(skt.set_reconnect_ivl       )\r\n  assert_function(skt.get_backlog             )\r\n  assert_function(skt.set_backlog             )\r\n\r\n  assert_function(skt.get_reconnect_ivl_max   )\r\n  assert_function(skt.set_reconnect_ivl_max   )\r\n  assert_function(skt.get_maxmsgsize          )\r\n  assert_function(skt.set_maxmsgsize          )\r\n  assert_function(skt.get_sndhwm              )\r\n  assert_function(skt.set_sndhwm              )\r\n  assert_function(skt.get_rcvhwm              )\r\n  assert_function(skt.set_rcvhwm              )\r\n  assert_function(skt.get_multicast_hops      )\r\n  assert_function(skt.set_multicast_hops      )\r\n  assert_function(skt.get_rcvtimeo            )\r\n  assert_function(skt.set_rcvtimeo            )\r\n  assert_function(skt.get_sndtimeo            )\r\n  assert_function(skt.set_sndtimeo            )\r\n  assert_function(skt.get_ipv4only            )\r\n  assert_function(skt.set_ipv4only            )\r\n\r\n  assert_function(skt.last_endpoint           )\r\n  assert_function(skt.get_last_endpoint       )\r\n\r\n  -- assert_function(skt.fail_unroutable         )\r\n  -- assert_function(skt.set_fail_unroutable     )\r\n\r\n  -- assert_function(skt.router_behavior         )\r\n  -- assert_function(skt.set_router_behavior     )\r\n\r\n  assert_function(skt.router_mandatory        )\r\n  assert_function(skt.set_router_mandatory    )\r\n\r\n  assert_function(skt.get_tcp_keepalive       )\r\n  assert_function(skt.set_tcp_keepalive       )\r\n  assert_function(skt.get_tcp_keepalive_cnt   )\r\n  assert_function(skt.set_tcp_keepalive_cnt   )\r\n  assert_function(skt.get_tcp_keepalive_idle  )\r\n  assert_function(skt.set_tcp_keepalive_idle  )\r\n  assert_function(skt.get_tcp_keepalive_intvl )\r\n  assert_function(skt.set_tcp_keepalive_intvl )\r\n\r\n  assert_function(skt.tcp_accept_filter       )\r\n  assert_function(skt.set_tcp_accept_filter   )\r\n\r\n  if false then -- optional\r\n    -- @todo optional test\r\n    assert_function(skt.get_delay_attach_on_connect )\r\n    assert_function(skt.set_delay_attach_on_connect )\r\n    assert_function(skt.get_xpub_verbose         )\r\n    assert_function(skt.set_xpub_verbose         )\r\n    assert_function(skt.get_router_raw           )\r\n    assert_function(skt.set_router_raw           )\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "assert_function(skt.context)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "assert_function(skt.bind)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "assert_function(skt.unbind)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "assert_function(skt.connect)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "assert_function(skt.disconnect)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "assert_function(skt.send)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "assert_function(skt.send_msg)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "assert_function(skt.send_more)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "assert_function(skt.recv)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "assert_function(skt.recv_msg)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "assert_function(skt.recv_new_msg)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "assert_function(skt.recv_len)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "assert_function(skt.send_all)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "assert_function(skt.recv_all)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "assert_function(skt.more)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "assert_function(skt.on_close)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "assert_function(skt.close)",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "assert_function(skt.closed)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "assert_function(skt.lightuserdata)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "assert_function(skt.getopt_int)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "assert_function(skt.getopt_i64)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "assert_function(skt.getopt_u64)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "assert_function(skt.getopt_str)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "assert_function(skt.setopt_int)",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "assert_function(skt.setopt_i64)",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "assert_function(skt.setopt_u64)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "assert_function(skt.setopt_str)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "assert_function(skt.get_affinity            )",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "assert_function(skt.set_affinity            )",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "assert_function(skt.get_identity            )",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "assert_function(skt.set_identity            )",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "assert_function(skt.subscribe               )",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "assert_function(skt.set_subscribe           )",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "assert_function(skt.unsubscribe             )",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "assert_function(skt.set_unsubscribe         )",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "assert_function(skt.get_rate                )",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "assert_function(skt.set_rate                )",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "assert_function(skt.get_recovery_ivl        )",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "assert_function(skt.set_recovery_ivl        )",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "assert_function(skt.get_sndbuf              )",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "assert_function(skt.set_sndbuf              )",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "assert_function(skt.get_rcvbuf              )",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "assert_function(skt.set_rcvbuf              )",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "assert_function(skt.rcvmore                 )",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "assert_function(skt.get_rcvmore             )",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "assert_function(skt.fd                      )",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "assert_function(skt.get_fd                  )",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "assert_function(skt.events                  )",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "assert_function(skt.get_events              )",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "assert_function(skt.type                    )",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "assert_function(skt.get_type                )",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "assert_function(skt.get_linger              )",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "assert_function(skt.set_linger              )",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "assert_function(skt.get_reconnect_ivl       )",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "assert_function(skt.set_reconnect_ivl       )",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "assert_function(skt.get_backlog             )",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "assert_function(skt.set_backlog             )",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "assert_function(skt.get_reconnect_ivl_max   )",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "assert_function(skt.set_reconnect_ivl_max   )",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "assert_function(skt.get_maxmsgsize          )",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "assert_function(skt.set_maxmsgsize          )",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "assert_function(skt.get_sndhwm              )",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "assert_function(skt.set_sndhwm              )",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "assert_function(skt.get_rcvhwm              )",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "assert_function(skt.set_rcvhwm              )",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "assert_function(skt.get_multicast_hops      )",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "assert_function(skt.set_multicast_hops      )",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "assert_function(skt.get_rcvtimeo            )",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "assert_function(skt.set_rcvtimeo            )",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "assert_function(skt.get_sndtimeo            )",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "assert_function(skt.set_sndtimeo            )",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "assert_function(skt.get_ipv4only            )",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "assert_function(skt.set_ipv4only            )",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "assert_function(skt.last_endpoint           )",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "assert_function(skt.get_last_endpoint       )",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "assert_function(skt.router_mandatory        )",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "assert_function(skt.set_router_mandatory    )",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "assert_function(skt.get_tcp_keepalive       )",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "assert_function(skt.set_tcp_keepalive       )",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "assert_function(skt.get_tcp_keepalive_cnt   )",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "assert_function(skt.set_tcp_keepalive_cnt   )",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "assert_function(skt.get_tcp_keepalive_idle  )",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "assert_function(skt.set_tcp_keepalive_idle  )",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "assert_function(skt.get_tcp_keepalive_intvl )",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "assert_function(skt.set_tcp_keepalive_intvl )",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "assert_function(skt.tcp_accept_filter       )",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "assert_function(skt.set_tcp_accept_filter   )",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "if false then -- optional\r\n    -- @todo optional test\r\n    assert_function(skt.get_delay_attach_on_connect )\r\n    assert_function(skt.set_delay_attach_on_connect )\r\n    assert_function(skt.get_xpub_verbose         )\r\n    assert_function(skt.set_xpub_verbose         )\r\n    assert_function(skt.get_router_raw           )\r\n    assert_function(skt.set_router_raw           )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "assert_function(skt.get_delay_attach_on_connect )",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "assert_function(skt.set_delay_attach_on_connect )",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "assert_function(skt.get_xpub_verbose         )",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "assert_function(skt.set_xpub_verbose         )",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "assert_function(skt.get_router_raw           )",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "assert_function(skt.set_router_raw           )",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 287,
    "text": "function test_socket_error()\r\n  -- skt:send()\r\n  -- skt:send(nil)\r\nend",
    "type": "function"
  }, {
    "id": 288,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 289,
    "text": "function test_socket_options()\r\n  assert_true(skt:set_subscribe(\"sub 1\"))\r\n  assert_true(skt:set_subscribe(\"sub 2\"))\r\n  assert_true(skt:set_subscribe{\"sub 3\"; \"sub 3\"})\r\n\r\n  assert_true(skt:set_unsubscribe{\"sub 1\", \"sub 2\"})\r\n  local ok, err, no = skt:set_unsubscribe{\"sub 3\", \"sub 1\"}\r\n  if not ok then assert_equal(2, no) end\r\n\r\n  assert_true(skt:set_unsubscribe(\"sub 3\"))\r\nend",
    "type": "function"
  }, {
    "id": 290,
    "text": "assert_true(skt:set_subscribe(\"sub 1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "assert_true(skt:set_subscribe(\"sub 2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "assert_true(skt:set_subscribe{\"sub 3\"; \"sub 3\"})",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "assert_true(skt:set_unsubscribe{\"sub 1\", \"sub 2\"})",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "local ok, err, no = skt:set_unsubscribe{\"sub 3\", \"sub 1\"}",
    "type": "statement:localassign"
  }, {
    "id": 295,
    "text": "if not ok then assert_equal(2, no) end",
    "type": "statement:if"
  }, {
    "id": 296,
    "text": "assert_equal(2, no)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "assert_true(skt:set_unsubscribe(\"sub 3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 299,
    "text": "function test_socket_options_ctor()\r\n  assert_true(skt:close())\r\n  skt = assert(is_zsocket(ctx:socket(zmq.SUB,{\r\n    subscribe = { \"sub 1\", \"sub 2\", \"sub 3\" };\r\n    linger    = 123;\r\n  })))\r\n  ctx:autoclose(skt)\r\n  assert_true(skt:set_unsubscribe{\"sub 1\", \"sub 2\"})\r\n  assert_equal(123, skt:get_linger())\r\nend",
    "type": "function"
  }, {
    "id": 300,
    "text": "assert_true(skt:close())",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "skt = assert(is_zsocket(ctx:socket(zmq.SUB,{\r\n    subscribe = { \"sub 1\", \"sub 2\", \"sub 3\" };\r\n    linger    = 123;\r\n  })))",
    "type": "statement:assign"
  }, {
    "id": 302,
    "text": "assert_equal(123, skt:get_linger())",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 304,
    "text": "function test_socket_options2_ctor()\r\n  assert_true(skt:close())\r\n  skt = assert(is_zsocket(ctx:socket{zmq.SUB,\r\n    subscribe = { \"sub 1\", \"sub 2\", \"sub 3\" };\r\n    linger    = 123;\r\n  }))\r\n  ctx:autoclose(skt)\r\n  assert_true(skt:set_unsubscribe{\"sub 1\", \"sub 2\"})\r\n  assert_equal(123, skt:get_linger())\r\nend",
    "type": "function"
  }, {
    "id": 305,
    "text": "skt = assert(is_zsocket(ctx:socket{zmq.SUB,\r\n    subscribe = { \"sub 1\", \"sub 2\", \"sub 3\" };\r\n    linger    = 123;\r\n  }))",
    "type": "statement:assign"
  }, {
    "id": 306,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 307,
    "text": "function test_context_options()\r\n  assert_true(ctx:set_io_threads(2))\r\n  assert_equal(2, ctx:get_io_threads())\r\n  assert_true(ctx:set_max_sockets(252))\r\n  assert_equal(252, ctx:get_max_sockets())\r\n\r\n  local ptr = assert(is_zcontext_ud(ctx:lightuserdata()))\r\n  local ctx2 = assert(is_zcontext(zmq.init_ctx(ptr)))\r\n  assert_not_equal(ctx, ctx2)\r\n  -- assert_not_equal(ptr, ctx2:lightuserdata())\r\n  assert_equal(ctx:get_io_threads(),  ctx2:get_io_threads() )\r\n  assert_equal(ctx:get_max_sockets(), ctx2:get_max_sockets())\r\n\r\n  assert_false(ctx2:closed())\r\n  assert_true(ctx2:destroy())\r\n  assert_true(ctx2:closed())\r\n\r\n  assert_error(function() ctx2:get_io_threads() end)\r\n  assert_equal(2, ctx:get_io_threads())\r\n\r\n  assert_false(ctx:closed())\r\n  assert_true(ctx:destroy())\r\n  assert_true(ctx:closed())\r\nend",
    "type": "function"
  }, {
    "id": 308,
    "text": "assert_true(ctx:set_io_threads(2))",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "assert_equal(2, ctx:get_io_threads())",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "assert_true(ctx:set_max_sockets(252))",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "assert_equal(252, ctx:get_max_sockets())",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "local ptr = assert(is_zcontext_ud(ctx:lightuserdata()))",
    "type": "statement:localassign"
  }, {
    "id": 313,
    "text": "local ctx2 = assert(is_zcontext(zmq.init_ctx(ptr)))",
    "type": "statement:localassign"
  }, {
    "id": 314,
    "text": "assert_not_equal(ctx, ctx2)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "assert_equal(ctx:get_io_threads(),  ctx2:get_io_threads() )",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "assert_equal(ctx:get_max_sockets(), ctx2:get_max_sockets())",
    "type": "statement:functioncall"
  }, {
    "id": 317,
    "text": "assert_false(ctx2:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "assert_true(ctx2:destroy())",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "assert_true(ctx2:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "assert_error(function() ctx2:get_io_threads() end)",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "ctx2:get_io_threads()",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "assert_false(ctx:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "assert_true(ctx:destroy())",
    "type": "statement:functioncall"
  }, {
    "id": 324,
    "text": "assert_true(ctx:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 326,
    "text": "function test_context_options_on_ctor()\r\n  assert_true(ctx:destroy())\r\n  ctx = assert(is_zcontext(zmq.context{\r\n    io_threads  = 2;\r\n    max_sockets =252;\r\n  }))\r\n  assert_equal(2, ctx:get_io_threads())\r\n  assert_equal(252, ctx:get_max_sockets())\r\nend",
    "type": "function"
  }, {
    "id": 327,
    "text": "ctx = assert(is_zcontext(zmq.context{\r\n    io_threads  = 2;\r\n    max_sockets =252;\r\n  }))",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 329,
    "text": "function test_context_options_fail_on_ctor()\r\n  assert_true(ctx:destroy())\r\n  local ctx, err = zmq.context{\r\n    max_sockets = -1;\r\n  }\r\n  assert_nil(ctx, err)\r\nend",
    "type": "function"
  }, {
    "id": 330,
    "text": "local ctx, err = zmq.context{\r\n    max_sockets = -1;\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 331,
    "text": "assert_nil(ctx, err)",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function test_socket_context()\r\n  assert_equal(ctx, skt:context())\r\nend",
    "type": "function"
  }, {
    "id": 334,
    "text": "assert_equal(ctx, skt:context())",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 336,
    "text": "function setup() end",
    "type": "function"
  }, {
    "id": 337,
    "text": "function teardown()\r\n  if skt then skt:close()   end\r\n  if ctx then ctx:destroy() end\r\nend",
    "type": "function"
  }, {
    "id": 338,
    "text": "if skt then skt:close()   end",
    "type": "statement:if"
  }, {
    "id": 339,
    "text": "skt:close()",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "if ctx then ctx:destroy() end",
    "type": "statement:if"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function test_context_shutdown()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  if not ctx.shutdown then\r\n    return skip(\"shutdown support since ZMQ 4.0.0\")\r\n  end\r\n\r\n  local ptr  = assert(is_zcontext_ud(ctx:lightuserdata()))\r\n  local ctx2 = assert(is_zcontext(zmq.init_ctx(ptr)))\r\n\r\n  -- to prevent autoclose socket\r\n  skt = assert(is_zsocket(ctx2:socket(zmq.SUB)))\r\n  skt:set_rcvtimeo(1)\r\n\r\n  local ok, err = skt:recv()\r\n  assert(not ok, 'EAGAIN expected got: ' .. tostring(ok))\r\n  assert(error_is(err, zmq.errors.EAGAIN))\r\n  assert_false(ctx:shutdowned())\r\n  assert_true(ctx:shutdown())\r\n  assert_true(ctx:shutdowned())\r\n  assert_false(ctx:closed())\r\n  assert_error(function() ctx:socket() end)\r\n  assert_error(function() ctx:shutdown() end)\r\n  assert_false(skt:closed())\r\n  local ok, err = skt:recv()\r\n  assert(not ok, 'ETERM expected got: ' .. tostring(ok))\r\n  assert(error_is(err, zmq.errors.ETERM))\r\n  assert_true(skt:close())\r\n  assert_true(ctx:destroy())\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "if not ctx.shutdown then\r\n    return skip(\"shutdown support since ZMQ 4.0.0\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "local ptr  = assert(is_zcontext_ud(ctx:lightuserdata()))",
    "type": "statement:localassign"
  }, {
    "id": 345,
    "text": "skt = assert(is_zsocket(ctx2:socket(zmq.SUB)))",
    "type": "statement:assign"
  }, {
    "id": 346,
    "text": "skt:set_rcvtimeo(1)",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "local ok, err = skt:recv()",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "assert(not ok, 'EAGAIN expected got: ' .. tostring(ok))",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "assert(error_is(err, zmq.errors.EAGAIN))",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "assert_false(ctx:shutdowned())",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "assert_true(ctx:shutdown())",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "assert_true(ctx:shutdowned())",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "assert_error(function() ctx:socket() end)",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "ctx:socket()",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "assert_error(function() ctx:shutdown() end)",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "ctx:shutdown()",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "assert_false(skt:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "assert(not ok, 'ETERM expected got: ' .. tostring(ok))",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "assert(error_is(err, zmq.errors.ETERM))",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 361,
    "text": "function test_context_shutdown_autoclose()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  if not ctx.shutdown then\r\n    return skip(\"shutdown support since ZMQ 4.0.0\")\r\n  end\r\n\r\n  skt = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(skt)\r\n  assert_true(ctx:shutdown())\r\n  assert_true(skt:closed())\r\nend",
    "type": "function"
  }, {
    "id": 362,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 363,
    "text": "function setup() end",
    "type": "function"
  }, {
    "id": 364,
    "text": "function teardown()\r\n  if skt then skt:close()   end\r\n  if ctx then ctx:destroy() end\r\nend",
    "type": "function"
  }, {
    "id": 365,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 366,
    "text": "function test_socket_autoclose()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  skt = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(skt)\r\n  assert_equal(socket_count(ctx, 1))\r\n  assert_true(ctx:destroy())\r\n  assert_true(skt:closed())\r\n\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  local ptr\r\n  do \r\n    local skt = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n    assert_equal(socket_count(ctx, 1))\r\n    ptr = weak_ptr(skt)\r\n  end\r\n  gc_collect()\r\n  assert_nil(ptr.value)\r\n  assert_equal(socket_count(ctx, 0))\r\n  assert_true(ctx:destroy())\r\n\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  local ptr\r\n  do\r\n    local skt = ctx:socket(zmq.SUB)\r\n    ctx:autoclose(skt) -- do not prevent clean socket by gc\r\n    ptr = weak_ptr(skt)\r\n  end\r\n  gc_collect()\r\n  assert_nil(ptr.value)\r\n  assert_equal(socket_count(ctx, 0))\r\n  assert_true(ctx:destroy())\r\nend",
    "type": "function"
  }, {
    "id": 367,
    "text": "assert_equal(socket_count(ctx, 1))",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "local ptr",
    "type": "statement:localassign"
  }, {
    "id": 369,
    "text": "do \r\n    local skt = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n    assert_equal(socket_count(ctx, 1))\r\n    ptr = weak_ptr(skt)\r\n  end",
    "type": "statement:do"
  }, {
    "id": 370,
    "text": "local skt = assert(is_zsocket(ctx:socket(zmq.SUB)))",
    "type": "statement:localassign"
  }, {
    "id": 371,
    "text": "ptr = weak_ptr(skt)",
    "type": "statement:assign"
  }, {
    "id": 372,
    "text": "gc_collect()",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "assert_nil(ptr.value)",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "assert_equal(socket_count(ctx, 0))",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "do\r\n    local skt = ctx:socket(zmq.SUB)\r\n    ctx:autoclose(skt) -- do not prevent clean socket by gc\r\n    ptr = weak_ptr(skt)\r\n  end",
    "type": "statement:do"
  }, {
    "id": 376,
    "text": "local skt = ctx:socket(zmq.SUB)",
    "type": "statement:localassign"
  }, {
    "id": 377,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 378,
    "text": "function test_socket_autoclose_poller()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n\r\n  local poller = zpoller.new(1)\r\n  local ptr\r\n  do \r\n    local skt = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n    assert_equal(socket_count(ctx, 1))\r\n\r\n    poller:add(skt, zmq.POLLIN, function() end)\r\n    poller:remove(skt)\r\n    ptr = weak_ptr(skt)\r\n  end\r\n  gc_collect()\r\n  assert_nil(ptr.value)\r\n  assert_equal(socket_count(ctx, 0))\r\n  assert_true(ctx:destroy())\r\nend",
    "type": "function"
  }, {
    "id": 379,
    "text": "local poller = zpoller.new(1)",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "do \r\n    local skt = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n    assert_equal(socket_count(ctx, 1))\r\n\r\n    poller:add(skt, zmq.POLLIN, function() end)\r\n    poller:remove(skt)\r\n    ptr = weak_ptr(skt)\r\n  end",
    "type": "statement:do"
  }, {
    "id": 381,
    "text": "poller:add(skt, zmq.POLLIN, function() end)",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "poller:remove(skt)",
    "type": "statement:functioncall"
  }, {
    "id": 383,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 384,
    "text": "function setup()end",
    "type": "function"
  }, {
    "id": 385,
    "text": "function teardown()\r\n  if msg then msg:close() end\r\nend",
    "type": "function"
  }, {
    "id": 386,
    "text": "if msg then msg:close() end",
    "type": "statement:if"
  }, {
    "id": 387,
    "text": "msg:close()",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 389,
    "text": "function test_interface()\r\n  msg = zmq.msg_init()\r\n  assert_function(msg.more)\r\n  assert_function(msg.close)\r\n  assert_function(msg.closed)\r\n  assert_function(msg.move)\r\n  assert_function(msg.copy)\r\n  assert_function(msg.size)\r\n  assert_function(msg.set_size)\r\n  assert_function(msg.pointer)\r\n  assert_function(msg.data)\r\n  assert_function(msg.set_data)\r\n  assert_function(msg.get)\r\n  assert_function(msg.set)\r\n  assert_function(msg.send)\r\n  assert_function(msg.send_more)\r\n  assert_function(msg.recv)\r\nend",
    "type": "function"
  }, {
    "id": 390,
    "text": "msg = zmq.msg_init()",
    "type": "statement:assign"
  }, {
    "id": 391,
    "text": "assert_function(msg.more)",
    "type": "statement:functioncall"
  }, {
    "id": 392,
    "text": "assert_function(msg.close)",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "assert_function(msg.closed)",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "assert_function(msg.move)",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "assert_function(msg.copy)",
    "type": "statement:functioncall"
  }, {
    "id": 396,
    "text": "assert_function(msg.size)",
    "type": "statement:functioncall"
  }, {
    "id": 397,
    "text": "assert_function(msg.set_size)",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "assert_function(msg.pointer)",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "assert_function(msg.data)",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "assert_function(msg.set_data)",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "assert_function(msg.get)",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "assert_function(msg.set)",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "assert_function(msg.send)",
    "type": "statement:functioncall"
  }, {
    "id": 404,
    "text": "assert_function(msg.send_more)",
    "type": "statement:functioncall"
  }, {
    "id": 405,
    "text": "assert_function(msg.recv)",
    "type": "statement:functioncall"
  }, {
    "id": 406,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 407,
    "text": "function test_close()\r\n  msg = zmq.msg_init()\r\n  assert_false(msg:closed())\r\n  assert_equal(0, msg:size())\r\n  assert_true(msg:close())\r\n  assert_true(msg:closed())\r\n  assert_error(function() msg:size() end)\r\n  assert_error(function() msg:more() end)\r\n  assert_error(function() msg:data() end)\r\n  assert_true(msg:close())\r\nend",
    "type": "function"
  }, {
    "id": 408,
    "text": "assert_false(msg:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 409,
    "text": "assert_equal(0, msg:size())",
    "type": "statement:functioncall"
  }, {
    "id": 410,
    "text": "assert_true(msg:close())",
    "type": "statement:functioncall"
  }, {
    "id": 411,
    "text": "assert_true(msg:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 412,
    "text": "assert_error(function() msg:size() end)",
    "type": "statement:functioncall"
  }, {
    "id": 413,
    "text": "msg:size()",
    "type": "statement:functioncall"
  }, {
    "id": 414,
    "text": "assert_error(function() msg:more() end)",
    "type": "statement:functioncall"
  }, {
    "id": 415,
    "text": "msg:more()",
    "type": "statement:functioncall"
  }, {
    "id": 416,
    "text": "assert_error(function() msg:data() end)",
    "type": "statement:functioncall"
  }, {
    "id": 417,
    "text": "msg:data()",
    "type": "statement:functioncall"
  }, {
    "id": 418,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 419,
    "text": "function test_access_after_close()\r\n  local msg = zmq.msg_init()\r\n  assert_true(msg:close())\r\n  assert_error(function() msg:data() end) -- no AV\r\nend",
    "type": "function"
  }, {
    "id": 420,
    "text": "local msg = zmq.msg_init()",
    "type": "statement:localassign"
  }, {
    "id": 421,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 422,
    "text": "function test_create()\r\n  msg = assert(is_zmessage(zmq.msg_init()))\r\n  assert_true(msg:close())\r\n  msg = assert(is_zmessage(zmq.msg_init_size(255)))\r\n  assert_true(msg:close())\r\n  msg = assert(is_zmessage(zmq.msg_init_data(\"Hello world!\")))\r\n  assert_true(msg:close())\r\nend",
    "type": "function"
  }, {
    "id": 423,
    "text": "msg = assert(is_zmessage(zmq.msg_init()))",
    "type": "statement:assign"
  }, {
    "id": 424,
    "text": "msg = assert(is_zmessage(zmq.msg_init_size(255)))",
    "type": "statement:assign"
  }, {
    "id": 425,
    "text": "msg = assert(is_zmessage(zmq.msg_init_data(\"Hello world!\")))",
    "type": "statement:assign"
  }, {
    "id": 426,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 427,
    "text": "function test_operations()\r\n  local msg1\r\n  local msg2\r\n  local msg3\r\n\r\n  msg1 = assert(is_zmessage(zmq.msg_init_size(10)))\r\n  assert_equal(10, msg1:size())\r\n  assert_true(msg1:set_data(\"Hello\"))\r\n  assert_equal(10, msg1:size())\r\n  local data = assert_string(msg1:data())\r\n  assert_equal(10, #data)\r\n  assert_equal('Hello', (data:sub(1, 5)))\r\n\r\n  assert_true(msg1:set_data(6, \", world!\")) -- append and resize buffer\r\n  assert_equal(13, msg1:size())\r\n  local data = assert_string(msg1:data())\r\n  assert_equal(13, #data)\r\n  assert_equal('Hello, world!', data)\r\n  \r\n  msg2 = assert(is_zmessage(zmq.msg_init()))\r\n  assert_equal(msg2, msg2:move(msg1))\r\n\r\n  assert_equal(0, msg1:size())\r\n  assert_false(msg1:closed())\r\n  assert_true(msg1:set_data('hi'))\r\n  assert_equal(2, msg1:size())\r\n  assert_equal('hi', msg1:data())\r\n  assert_true(msg1:close())\r\n\r\n  assert_equal(#data, msg2:size())\r\n  assert_equal(data,  msg2:data())\r\n\r\n  msg3 = assert(is_zmessage(zmq.msg_init()))\r\n  assert_equal(msg3, msg3:copy(msg2)) -- copy to exists object\r\n\r\n  assert_equal(#data, msg2:size())\r\n  assert_equal(data,  msg2:data())\r\n  assert_equal(#data, msg3:size())\r\n  assert_equal(data,  msg3:data())\r\n  assert_true(msg2:set_data((\"0\"):rep(#data)))\r\n  assert_equal(#data, msg3:size())\r\n  assert_equal(data,  msg3:data())\r\n\r\n  assert_true(msg2:close())\r\n  assert_true(msg3:close())\r\n  \r\n  msg1 = assert(is_zmessage(zmq.msg_init_data(\"hello world\")))\r\n  msg2 = assert(is_zmessage(msg1:copy())) -- copy to new object\r\n  assert_not_equal(msg1, msg2)\r\n  assert_equal(msg1:data(), msg2:data())\r\n\r\n  msg3 = assert(msg1:move())\r\n  assert_not_equal(msg1, msg3)\r\n  assert_equal(msg2:data(), msg3:data())\r\n  assert_equal(\"\", msg1:data())\r\n\r\n  assert_error(function() msg2:copy(nil) end) -- nil params do not create new object\r\n  assert_error(function() msg3:move(nil) end) -- nil params do not create new object\r\n\r\n  assert_true(msg1:close())\r\n  assert_true(msg2:close())\r\n  assert_true(msg3:close())\r\nend",
    "type": "function"
  }, {
    "id": 428,
    "text": "local msg1",
    "type": "statement:localassign"
  }, {
    "id": 429,
    "text": "local msg2",
    "type": "statement:localassign"
  }, {
    "id": 430,
    "text": "local msg3",
    "type": "statement:localassign"
  }, {
    "id": 431,
    "text": "msg1 = assert(is_zmessage(zmq.msg_init_size(10)))",
    "type": "statement:assign"
  }, {
    "id": 432,
    "text": "assert_equal(10, msg1:size())",
    "type": "statement:functioncall"
  }, {
    "id": 433,
    "text": "assert_true(msg1:set_data(\"Hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 434,
    "text": "local data = assert_string(msg1:data())",
    "type": "statement:localassign"
  }, {
    "id": 435,
    "text": "assert_equal(10, #data)",
    "type": "statement:functioncall"
  }, {
    "id": 436,
    "text": "assert_equal('Hello', (data:sub(1, 5)))",
    "type": "statement:functioncall"
  }, {
    "id": 437,
    "text": "assert_true(msg1:set_data(6, \", world!\"))",
    "type": "statement:functioncall"
  }, {
    "id": 438,
    "text": "assert_equal(13, msg1:size())",
    "type": "statement:functioncall"
  }, {
    "id": 439,
    "text": "assert_equal(13, #data)",
    "type": "statement:functioncall"
  }, {
    "id": 440,
    "text": "assert_equal('Hello, world!', data)",
    "type": "statement:functioncall"
  }, {
    "id": 441,
    "text": "msg2 = assert(is_zmessage(zmq.msg_init()))",
    "type": "statement:assign"
  }, {
    "id": 442,
    "text": "assert_equal(msg2, msg2:move(msg1))",
    "type": "statement:functioncall"
  }, {
    "id": 443,
    "text": "assert_equal(0, msg1:size())",
    "type": "statement:functioncall"
  }, {
    "id": 444,
    "text": "assert_false(msg1:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 445,
    "text": "assert_true(msg1:set_data('hi'))",
    "type": "statement:functioncall"
  }, {
    "id": 446,
    "text": "assert_equal(2, msg1:size())",
    "type": "statement:functioncall"
  }, {
    "id": 447,
    "text": "assert_equal('hi', msg1:data())",
    "type": "statement:functioncall"
  }, {
    "id": 448,
    "text": "assert_true(msg1:close())",
    "type": "statement:functioncall"
  }, {
    "id": 449,
    "text": "assert_equal(#data, msg2:size())",
    "type": "statement:functioncall"
  }, {
    "id": 450,
    "text": "assert_equal(data,  msg2:data())",
    "type": "statement:functioncall"
  }, {
    "id": 451,
    "text": "msg3 = assert(is_zmessage(zmq.msg_init()))",
    "type": "statement:assign"
  }, {
    "id": 452,
    "text": "assert_equal(msg3, msg3:copy(msg2))",
    "type": "statement:functioncall"
  }, {
    "id": 453,
    "text": "assert_equal(#data, msg3:size())",
    "type": "statement:functioncall"
  }, {
    "id": 454,
    "text": "assert_equal(data,  msg3:data())",
    "type": "statement:functioncall"
  }, {
    "id": 455,
    "text": "assert_true(msg2:set_data((\"0\"):rep(#data)))",
    "type": "statement:functioncall"
  }, {
    "id": 456,
    "text": "assert_true(msg2:close())",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "assert_true(msg3:close())",
    "type": "statement:functioncall"
  }, {
    "id": 458,
    "text": "msg1 = assert(is_zmessage(zmq.msg_init_data(\"hello world\")))",
    "type": "statement:assign"
  }, {
    "id": 459,
    "text": "msg2 = assert(is_zmessage(msg1:copy()))",
    "type": "statement:assign"
  }, {
    "id": 460,
    "text": "assert_not_equal(msg1, msg2)",
    "type": "statement:functioncall"
  }, {
    "id": 461,
    "text": "assert_equal(msg1:data(), msg2:data())",
    "type": "statement:functioncall"
  }, {
    "id": 462,
    "text": "msg3 = assert(msg1:move())",
    "type": "statement:assign"
  }, {
    "id": 463,
    "text": "assert_not_equal(msg1, msg3)",
    "type": "statement:functioncall"
  }, {
    "id": 464,
    "text": "assert_equal(msg2:data(), msg3:data())",
    "type": "statement:functioncall"
  }, {
    "id": 465,
    "text": "assert_equal(\"\", msg1:data())",
    "type": "statement:functioncall"
  }, {
    "id": 466,
    "text": "assert_error(function() msg2:copy(nil) end)",
    "type": "statement:functioncall"
  }, {
    "id": 467,
    "text": "msg2:copy(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 468,
    "text": "assert_error(function() msg3:move(nil) end)",
    "type": "statement:functioncall"
  }, {
    "id": 469,
    "text": "msg3:move(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 470,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 471,
    "text": "function test_tostring()\r\n  local msg = assert(is_zmessage(zmq.msg_init_data(\"Hello world!\")))\r\n  assert_equal(\"Hello world!\", tostring(msg))\r\nend",
    "type": "function"
  }, {
    "id": 472,
    "text": "local msg = assert(is_zmessage(zmq.msg_init_data(\"Hello world!\")))",
    "type": "statement:localassign"
  }, {
    "id": 473,
    "text": "assert_equal(\"Hello world!\", tostring(msg))",
    "type": "statement:functioncall"
  }, {
    "id": 474,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 475,
    "text": "function test_pointer()\r\n  local msg = assert(is_zmessage(zmq.msg_init_data(\"Hello world!\")))\r\n  local ptr = msg:pointer()\r\n  assert_true(msg:set_data(\"Privet\"))\r\n  assert_equal(\"Privetworld!\", msg:data())\r\n  assert_equal(ptr, msg:pointer())\r\n  assert_true(msg:set_size(100))\r\n  assert_not_equal(ptr, msg:pointer())\r\n  ptr = msg:pointer()\r\n  assert_true(msg:set_size(100))\r\n  assert_equal(ptr, msg:pointer())\r\nend",
    "type": "function"
  }, {
    "id": 476,
    "text": "local ptr = msg:pointer()",
    "type": "statement:localassign"
  }, {
    "id": 477,
    "text": "assert_true(msg:set_data(\"Privet\"))",
    "type": "statement:functioncall"
  }, {
    "id": 478,
    "text": "assert_equal(\"Privetworld!\", msg:data())",
    "type": "statement:functioncall"
  }, {
    "id": 479,
    "text": "assert_equal(ptr, msg:pointer())",
    "type": "statement:functioncall"
  }, {
    "id": 480,
    "text": "assert_true(msg:set_size(100))",
    "type": "statement:functioncall"
  }, {
    "id": 481,
    "text": "assert_not_equal(ptr, msg:pointer())",
    "type": "statement:functioncall"
  }, {
    "id": 482,
    "text": "ptr = msg:pointer()",
    "type": "statement:assign"
  }, {
    "id": 483,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 484,
    "text": "function test_resize()\r\n  local msg = assert(is_zmessage(zmq.msg_init_data(\"Hello world!\")))\r\n  assert_true(msg:set_size(5)) -- shrink\r\n  assert_equal(5, msg:size())\r\n  assert_equal(\"Hello\", msg:data())\r\n  assert_true(msg:set_size(10)) -- extend\r\n  assert_equal(10, msg:size())\r\n  local str = assert_string(msg:data())\r\n  assert_equal(\"Hello\", str:sub(1,5))\r\nend",
    "type": "function"
  }, {
    "id": 485,
    "text": "assert_true(msg:set_size(5))",
    "type": "statement:functioncall"
  }, {
    "id": 486,
    "text": "assert_equal(5, msg:size())",
    "type": "statement:functioncall"
  }, {
    "id": 487,
    "text": "assert_equal(\"Hello\", msg:data())",
    "type": "statement:functioncall"
  }, {
    "id": 488,
    "text": "assert_true(msg:set_size(10))",
    "type": "statement:functioncall"
  }, {
    "id": 489,
    "text": "assert_equal(10, msg:size())",
    "type": "statement:functioncall"
  }, {
    "id": 490,
    "text": "local str = assert_string(msg:data())",
    "type": "statement:localassign"
  }, {
    "id": 491,
    "text": "assert_equal(\"Hello\", str:sub(1,5))",
    "type": "statement:functioncall"
  }, {
    "id": 492,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 493,
    "text": "function test_setdata()\r\n  local msg = assert(is_zmessage(zmq.msg_init_data(\"Hello world!\")))\r\n  assert_true(msg:set_data(\"Privet\")) -- this is do not shrink message\r\n  assert_equal(12, msg:size())\r\n  assert_equal(\"Privetworld!\", msg:data())\r\n  assert_true(msg:set_data(7, \" world!!!\")) -- extend message\r\n  assert_equal(15, msg:size())\r\n  assert_equal(\"Privet world!!!\", msg:data())\r\nend",
    "type": "function"
  }, {
    "id": 494,
    "text": "assert_equal(12, msg:size())",
    "type": "statement:functioncall"
  }, {
    "id": 495,
    "text": "assert_true(msg:set_data(7, \" world!!!\"))",
    "type": "statement:functioncall"
  }, {
    "id": 496,
    "text": "assert_equal(15, msg:size())",
    "type": "statement:functioncall"
  }, {
    "id": 497,
    "text": "assert_equal(\"Privet world!!!\", msg:data())",
    "type": "statement:functioncall"
  }, {
    "id": 498,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 499,
    "text": "function setup()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  pub = assert(is_zsocket(ctx:socket(zmq.PUB)))\r\n  ctx:autoclose(pub)\r\n  sub1 = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(sub1)\r\n  sub2 = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(sub2)\r\n  sub3 = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(sub3)\r\n  \r\n  sub1:set_rcvtimeo(1000)\r\n  sub2:set_rcvtimeo(1000)\r\n  sub3:set_rcvtimeo(1000)\r\nend",
    "type": "function"
  }, {
    "id": 500,
    "text": "pub = assert(is_zsocket(ctx:socket(zmq.PUB)))",
    "type": "statement:assign"
  }, {
    "id": 501,
    "text": "ctx:autoclose(pub)",
    "type": "statement:functioncall"
  }, {
    "id": 502,
    "text": "sub1 = assert(is_zsocket(ctx:socket(zmq.SUB)))",
    "type": "statement:assign"
  }, {
    "id": 503,
    "text": "ctx:autoclose(sub1)",
    "type": "statement:functioncall"
  }, {
    "id": 504,
    "text": "sub2 = assert(is_zsocket(ctx:socket(zmq.SUB)))",
    "type": "statement:assign"
  }, {
    "id": 505,
    "text": "ctx:autoclose(sub2)",
    "type": "statement:functioncall"
  }, {
    "id": 506,
    "text": "sub3 = assert(is_zsocket(ctx:socket(zmq.SUB)))",
    "type": "statement:assign"
  }, {
    "id": 507,
    "text": "ctx:autoclose(sub3)",
    "type": "statement:functioncall"
  }, {
    "id": 508,
    "text": "sub1:set_rcvtimeo(1000)",
    "type": "statement:functioncall"
  }, {
    "id": 509,
    "text": "sub2:set_rcvtimeo(1000)",
    "type": "statement:functioncall"
  }, {
    "id": 510,
    "text": "sub3:set_rcvtimeo(1000)",
    "type": "statement:functioncall"
  }, {
    "id": 511,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 512,
    "text": "function teardown()\r\n  if msg then msg:close()               end\r\n  if ctx then ctx:destroy()             end\r\n  if pub then assert_true(pub:closed()) end\r\n  if sub1 then assert_true(sub1:closed()) end\r\n  if sub2 then assert_true(sub2:closed()) end\r\n  if sub3 then assert_true(sub3:closed()) end\r\nend",
    "type": "function"
  }, {
    "id": 513,
    "text": "if msg then msg:close()               end",
    "type": "statement:if"
  }, {
    "id": 514,
    "text": "if pub then assert_true(pub:closed()) end",
    "type": "statement:if"
  }, {
    "id": 515,
    "text": "assert_true(pub:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 516,
    "text": "if sub1 then assert_true(sub1:closed()) end",
    "type": "statement:if"
  }, {
    "id": 517,
    "text": "assert_true(sub1:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 518,
    "text": "if sub2 then assert_true(sub2:closed()) end",
    "type": "statement:if"
  }, {
    "id": 519,
    "text": "assert_true(sub2:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 520,
    "text": "if sub3 then assert_true(sub3:closed()) end",
    "type": "statement:if"
  }, {
    "id": 521,
    "text": "assert_true(sub3:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 522,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 523,
    "text": "function test_connect()\r\n  local ok, err, str = pub:bind{\r\n    ECHO_ADDR;\r\n    \"inproc://pub.test.1\";\r\n    \"inproc://pub.test.2\";\r\n    \"error address\";\r\n    \"inproc://pub.test.3\";\r\n  }\r\n\r\n  -- do return end\r\n\r\n  assert_nil(ok)\r\n  assert_equal(\"error address\", str)\r\n  assert_true(pub:bind(\"inproc://pub.test.3\"))\r\n\r\n  assert_true(sub1:subscribe(\"\"))\r\n  assert_true(sub2:subscribe(\"\"))\r\n  assert_true(sub3:subscribe(\"\"))\r\n\r\n  assert_true(sub1:set_rcvtimeo(100))\r\n  assert_true(sub2:set_rcvtimeo(100))\r\n  assert_true(sub3:set_rcvtimeo(100))\r\n  \r\n\r\n  wait()\r\n\r\n  assert_true(sub1:connect(\"inproc://pub.test.1\"))\r\n  assert_true(sub2:connect(\"inproc://pub.test.2\"))\r\n  assert_true(sub3:connect(\"inproc://pub.test.3\"))\r\n\r\n  wait()\r\n\r\n  assert_true(pub:send(\"hello\"))\r\n  assert_equal( \"hello\", assert_string(sub1:recv()))\r\n  assert_equal( \"hello\", assert_string(sub2:recv()))\r\n  assert_equal( \"hello\", assert_string(sub3:recv()))\r\n\r\n  assert_true(sub1:connect(ECHO_ADDR))\r\n\r\n  wait()\r\n\r\n  assert_true(pub:send(\"hello\"))\r\n  assert_equal( \"hello\", assert_string(sub1:recv()))\r\n  assert_equal( \"hello\", assert_string(sub1:recv()))\r\n\r\n  if not iszvereq(zmq, 3, 2, 2) then -- fix in 3.2.3\r\n    -- disconnect from first and get error from second\r\n    ok, err, str = sub1:disconnect{\r\n      ECHO_ADDR;\r\n      \"inproc://pub.test.3\";\r\n    }\r\n    assert_nil(ok)\r\n    assert_equal(\"inproc://pub.test.3\", str)\r\n\r\n    wait()\r\n\r\n    assert_true(pub:send(\"hello\"))\r\n    assert_equal( \"hello\", assert_string(sub1:recv()))\r\n    assert_nil(sub1:recv())\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 524,
    "text": "local ok, err, str = pub:bind{\r\n    ECHO_ADDR;\r\n    \"inproc://pub.test.1\";\r\n    \"inproc://pub.test.2\";\r\n    \"error address\";\r\n    \"inproc://pub.test.3\";\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 525,
    "text": "assert_nil(ok)",
    "type": "statement:functioncall"
  }, {
    "id": 526,
    "text": "assert_equal(\"error address\", str)",
    "type": "statement:functioncall"
  }, {
    "id": 527,
    "text": "assert_true(pub:bind(\"inproc://pub.test.3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 528,
    "text": "assert_true(sub1:subscribe(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 529,
    "text": "assert_true(sub2:subscribe(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 530,
    "text": "assert_true(sub3:subscribe(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 531,
    "text": "assert_true(sub1:set_rcvtimeo(100))",
    "type": "statement:functioncall"
  }, {
    "id": 532,
    "text": "assert_true(sub2:set_rcvtimeo(100))",
    "type": "statement:functioncall"
  }, {
    "id": 533,
    "text": "assert_true(sub3:set_rcvtimeo(100))",
    "type": "statement:functioncall"
  }, {
    "id": 534,
    "text": "wait()",
    "type": "statement:functioncall"
  }, {
    "id": 535,
    "text": "assert_true(sub1:connect(\"inproc://pub.test.1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 536,
    "text": "assert_true(sub2:connect(\"inproc://pub.test.2\"))",
    "type": "statement:functioncall"
  }, {
    "id": 537,
    "text": "assert_true(sub3:connect(\"inproc://pub.test.3\"))",
    "type": "statement:functioncall"
  }, {
    "id": 538,
    "text": "assert_true(pub:send(\"hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 539,
    "text": "assert_equal( \"hello\", assert_string(sub1:recv()))",
    "type": "statement:functioncall"
  }, {
    "id": 540,
    "text": "assert_equal( \"hello\", assert_string(sub2:recv()))",
    "type": "statement:functioncall"
  }, {
    "id": 541,
    "text": "assert_equal( \"hello\", assert_string(sub3:recv()))",
    "type": "statement:functioncall"
  }, {
    "id": 542,
    "text": "assert_true(sub1:connect(ECHO_ADDR))",
    "type": "statement:functioncall"
  }, {
    "id": 543,
    "text": "if not iszvereq(zmq, 3, 2, 2) then -- fix in 3.2.3\r\n    -- disconnect from first and get error from second\r\n    ok, err, str = sub1:disconnect{\r\n      ECHO_ADDR;\r\n      \"inproc://pub.test.3\";\r\n    }\r\n    assert_nil(ok)\r\n    assert_equal(\"inproc://pub.test.3\", str)\r\n\r\n    wait()\r\n\r\n    assert_true(pub:send(\"hello\"))\r\n    assert_equal( \"hello\", assert_string(sub1:recv()))\r\n    assert_nil(sub1:recv())\r\n  end",
    "type": "statement:if"
  }, {
    "id": 544,
    "text": "ok, err, str = sub1:disconnect{\r\n      ECHO_ADDR;\r\n      \"inproc://pub.test.3\";\r\n    }",
    "type": "statement:assign"
  }, {
    "id": 545,
    "text": "assert_equal(\"inproc://pub.test.3\", str)",
    "type": "statement:functioncall"
  }, {
    "id": 546,
    "text": "assert_nil(sub1:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 547,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 548,
    "text": "function test_bind_random_port()\r\n  local port1 = assert_number(pub:bind_to_random_port(\"tcp://127.0.0.1\"))\r\n  local port2 = assert_number(pub:bind_to_random_port(\"tcp://127.0.0.1\"))\r\n  assert_not_equal(port1, port2)\r\n  wait()\r\n  sub1:subscribe(\"\")\r\n  sub2:subscribe(\"\")\r\n  assert(sub1:connect(\"tcp://127.0.0.1:\" .. port1))\r\n  assert(sub2:connect(\"tcp://127.0.0.1:\" .. port2))\r\n  wait()\r\n  \r\n  assert(pub:send(\"HELLO\"))\r\n  assert_equal(\"HELLO\", sub1:recv())\r\n  assert_equal(\"HELLO\", sub2:recv())\r\nend",
    "type": "function"
  }, {
    "id": 549,
    "text": "local port1 = assert_number(pub:bind_to_random_port(\"tcp://127.0.0.1\"))",
    "type": "statement:localassign"
  }, {
    "id": 550,
    "text": "local port2 = assert_number(pub:bind_to_random_port(\"tcp://127.0.0.1\"))",
    "type": "statement:localassign"
  }, {
    "id": 551,
    "text": "assert_not_equal(port1, port2)",
    "type": "statement:functioncall"
  }, {
    "id": 552,
    "text": "sub1:subscribe(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 553,
    "text": "sub2:subscribe(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 554,
    "text": "assert(sub1:connect(\"tcp://127.0.0.1:\" .. port1))",
    "type": "statement:functioncall"
  }, {
    "id": 555,
    "text": "assert(sub2:connect(\"tcp://127.0.0.1:\" .. port2))",
    "type": "statement:functioncall"
  }, {
    "id": 556,
    "text": "assert(pub:send(\"HELLO\"))",
    "type": "statement:functioncall"
  }, {
    "id": 557,
    "text": "assert_equal(\"HELLO\", sub1:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 558,
    "text": "assert_equal(\"HELLO\", sub2:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 559,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 560,
    "text": "function test_bind_random_port_fail()\r\n  assert_nil(pub:bind_to_random_port(\"tcp//127.0.0.1\"))\r\n  local port1 = assert_number(pub:bind_to_random_port(\"tcp://127.0.0.1\"))\r\n  assert_nil(pub:bind_to_random_port(\"tcp://127.0.0.1\", port1, 1))\r\nend",
    "type": "function"
  }, {
    "id": 561,
    "text": "assert_nil(pub:bind_to_random_port(\"tcp//127.0.0.1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 562,
    "text": "assert_nil(pub:bind_to_random_port(\"tcp://127.0.0.1\", port1, 1))",
    "type": "statement:functioncall"
  }, {
    "id": 563,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 564,
    "text": "function test_bind_random_port_error()\r\n  assert_error(function() pub:bind_to_random_port(\"tcp://127.0.0.1\", 0) end)\r\n  assert_error(function() pub:bind_to_random_port(\"tcp://127.0.0.1\", 1, 0) end)\r\nend",
    "type": "function"
  }, {
    "id": 565,
    "text": "assert_error(function() pub:bind_to_random_port(\"tcp://127.0.0.1\", 0) end)",
    "type": "statement:functioncall"
  }, {
    "id": 566,
    "text": "pub:bind_to_random_port(\"tcp://127.0.0.1\", 0)",
    "type": "statement:functioncall"
  }, {
    "id": 567,
    "text": "assert_error(function() pub:bind_to_random_port(\"tcp://127.0.0.1\", 1, 0) end)",
    "type": "statement:functioncall"
  }, {
    "id": 568,
    "text": "pub:bind_to_random_port(\"tcp://127.0.0.1\", 1, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 569,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 570,
    "text": "function setup()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\nend",
    "type": "function"
  }, {
    "id": 571,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 572,
    "text": "function teardown()\r\n  if pub then pub:close()   end\r\n  if sub then sub:close()   end\r\n  if ctx then ctx:destroy() end\r\nend",
    "type": "function"
  }, {
    "id": 573,
    "text": "if pub then pub:close()   end",
    "type": "statement:if"
  }, {
    "id": 574,
    "text": "pub:close()",
    "type": "statement:functioncall"
  }, {
    "id": 575,
    "text": "if sub then sub:close()   end",
    "type": "statement:if"
  }, {
    "id": 576,
    "text": "sub:close()",
    "type": "statement:functioncall"
  }, {
    "id": 577,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 578,
    "text": "function test_connect()\r\n  pub = assert(is_zsocket(ctx:socket(zmq.PUB,{\r\n    bind = {\r\n      \"inproc://pub.test.1\";\r\n      \"inproc://pub.test.2\";\r\n      \"inproc://pub.test.3\";\r\n    };\r\n  })))\r\n  ctx:autoclose(pub)\r\n\r\n  sub = assert(is_zsocket(ctx:socket(zmq.SUB,{\r\n    subscribe = \"\", rcvtimeo = 100;\r\n    connect = \"inproc://pub.test.1\";\r\n  })))\r\n  ctx:autoclose(sub)\r\n\r\n  wait()\r\n\r\n  assert_true(pub:send(\"hello\"))\r\n  assert_equal( \"hello\", assert_string(sub:recv()))\r\nend",
    "type": "function"
  }, {
    "id": 579,
    "text": "pub = assert(is_zsocket(ctx:socket(zmq.PUB,{\r\n    bind = {\r\n      \"inproc://pub.test.1\";\r\n      \"inproc://pub.test.2\";\r\n      \"inproc://pub.test.3\";\r\n    };\r\n  })))",
    "type": "statement:assign"
  }, {
    "id": 580,
    "text": "sub = assert(is_zsocket(ctx:socket(zmq.SUB,{\r\n    subscribe = \"\", rcvtimeo = 100;\r\n    connect = \"inproc://pub.test.1\";\r\n  })))",
    "type": "statement:assign"
  }, {
    "id": 581,
    "text": "ctx:autoclose(sub)",
    "type": "statement:functioncall"
  }, {
    "id": 582,
    "text": "assert_equal( \"hello\", assert_string(sub:recv()))",
    "type": "statement:functioncall"
  }, {
    "id": 583,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 584,
    "text": "function test_fail_bind()\r\n  local err, str\r\n  pub, err, str = ctx:socket(zmq.PUB,{\r\n    bind = {\r\n      \"inproc://pub.test.1\";\r\n      \"inproc://pub.test.2\";\r\n      \"inproc://pub.test.3\";\r\n      \"error address\"\r\n    };\r\n  })\r\n  assert_nil(pub)\r\n  assert_equal(\"error address\", str)\r\n  assert_equal(socket_count(ctx, 0))\r\nend",
    "type": "function"
  }, {
    "id": 585,
    "text": "local err, str",
    "type": "statement:localassign"
  }, {
    "id": 586,
    "text": "pub, err, str = ctx:socket(zmq.PUB,{\r\n    bind = {\r\n      \"inproc://pub.test.1\";\r\n      \"inproc://pub.test.2\";\r\n      \"inproc://pub.test.3\";\r\n      \"error address\"\r\n    };\r\n  })",
    "type": "statement:assign"
  }, {
    "id": 587,
    "text": "assert_nil(pub)",
    "type": "statement:functioncall"
  }, {
    "id": 588,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 589,
    "text": "function setup()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  pub = assert(is_zsocket(ctx:socket(zmq.PUB)))\r\n  ctx:autoclose(pub)\r\n  sub = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(sub)\r\n  assert_true(pub:bind(\"inproc://test\"))\r\n  wait()\r\n  assert_true(sub:connect(\"inproc://test\"))\r\n  assert_true(sub:subscribe(\"\"))\r\n  wait()\r\nend",
    "type": "function"
  }, {
    "id": 590,
    "text": "sub = assert(is_zsocket(ctx:socket(zmq.SUB)))",
    "type": "statement:assign"
  }, {
    "id": 591,
    "text": "assert_true(pub:bind(\"inproc://test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 592,
    "text": "assert_true(sub:connect(\"inproc://test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 593,
    "text": "assert_true(sub:subscribe(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 594,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 595,
    "text": "function teardown()\r\n  if msg then msg:close()               end\r\n  if ctx then ctx:destroy()             end\r\n  if pub then assert_true(pub:closed()) end\r\n  if sub then assert_true(sub:closed()) end\r\nend",
    "type": "function"
  }, {
    "id": 596,
    "text": "if sub then assert_true(sub:closed()) end",
    "type": "statement:if"
  }, {
    "id": 597,
    "text": "assert_true(sub:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 598,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 599,
    "text": "function test_recv()\r\n  assert_true(pub:send((\"0\"):rep(32)))\r\n\r\n  local str, more = sub:recv()\r\n  assert_equal((\"0\"):rep(32), str, more)\r\n  assert_false(more)\r\nend",
    "type": "function"
  }, {
    "id": 600,
    "text": "assert_true(pub:send((\"0\"):rep(32)))",
    "type": "statement:functioncall"
  }, {
    "id": 601,
    "text": "local str, more = sub:recv()",
    "type": "statement:localassign"
  }, {
    "id": 602,
    "text": "assert_equal((\"0\"):rep(32), str, more)",
    "type": "statement:functioncall"
  }, {
    "id": 603,
    "text": "assert_false(more)",
    "type": "statement:functioncall"
  }, {
    "id": 604,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 605,
    "text": "function test_recv_len()\r\n  assert_true(pub:send((\"0\"):rep(32)))\r\n  assert_true(pub:send((\"0\"):rep(8)))\r\n\r\n  local str, more, len = sub:recv_len(16)\r\n  assert_equal((\"0\"):rep(16), str, more)\r\n  assert_false(more)\r\n  assert_equal(32, len)\r\n\r\n  local str, more, len = sub:recv_len(16)\r\n  assert_equal((\"0\"):rep(8), str, more)\r\n  assert_false(more)\r\n  assert_equal(8, len)\r\nend",
    "type": "function"
  }, {
    "id": 606,
    "text": "assert_true(pub:send((\"0\"):rep(8)))",
    "type": "statement:functioncall"
  }, {
    "id": 607,
    "text": "local str, more, len = sub:recv_len(16)",
    "type": "statement:localassign"
  }, {
    "id": 608,
    "text": "assert_equal((\"0\"):rep(16), str, more)",
    "type": "statement:functioncall"
  }, {
    "id": 609,
    "text": "assert_equal(32, len)",
    "type": "statement:functioncall"
  }, {
    "id": 610,
    "text": "assert_equal((\"0\"):rep(8), str, more)",
    "type": "statement:functioncall"
  }, {
    "id": 611,
    "text": "assert_equal(8, len)",
    "type": "statement:functioncall"
  }, {
    "id": 612,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 613,
    "text": "function test_recv_len_0()\r\n  assert_true(pub:send((\"0\"):rep(32)))\r\n\r\n  local str, more, len = assert_equal(\"\", sub:recv_len(0))\r\n  assert_false(more)\r\n  assert_equal(32, len)\r\nend",
    "type": "function"
  }, {
    "id": 614,
    "text": "local str, more, len = assert_equal(\"\", sub:recv_len(0))",
    "type": "statement:localassign"
  }, {
    "id": 615,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 616,
    "text": "function test_recv_msg()\r\n  do -- send\r\n    msg = assert(zmq.msg_init_data('hello'))\r\n    assert_equal('hello', msg:data())\r\n    assert_equal(5, msg:size())\r\n\r\n    assert_true(msg:send(pub))\r\n    assert_false(msg:closed())\r\n    assert_equal(0, msg:size())\r\n    assert_true(msg:close())\r\n  end\r\n\r\n  do -- recv\r\n    msg = assert(is_zmessage(zmq.msg_init()))\r\n    local msg2, more = sub:recv_msg(msg)\r\n    assert_equal(msg, msg2, more)\r\n    assert_false(more)\r\n    assert_false(sub:more())\r\n    assert_false(msg:more())\r\n    assert_equal('hello', msg:data())\r\n    assert_equal(5, msg:size())\r\n    assert_true(msg:close())\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 617,
    "text": "do -- send\r\n    msg = assert(zmq.msg_init_data('hello'))\r\n    assert_equal('hello', msg:data())\r\n    assert_equal(5, msg:size())\r\n\r\n    assert_true(msg:send(pub))\r\n    assert_false(msg:closed())\r\n    assert_equal(0, msg:size())\r\n    assert_true(msg:close())\r\n  end",
    "type": "statement:do"
  }, {
    "id": 618,
    "text": "msg = assert(zmq.msg_init_data('hello'))",
    "type": "statement:assign"
  }, {
    "id": 619,
    "text": "assert_equal('hello', msg:data())",
    "type": "statement:functioncall"
  }, {
    "id": 620,
    "text": "assert_true(msg:send(pub))",
    "type": "statement:functioncall"
  }, {
    "id": 621,
    "text": "do -- recv\r\n    msg = assert(is_zmessage(zmq.msg_init()))\r\n    local msg2, more = sub:recv_msg(msg)\r\n    assert_equal(msg, msg2, more)\r\n    assert_false(more)\r\n    assert_false(sub:more())\r\n    assert_false(msg:more())\r\n    assert_equal('hello', msg:data())\r\n    assert_equal(5, msg:size())\r\n    assert_true(msg:close())\r\n  end",
    "type": "statement:do"
  }, {
    "id": 622,
    "text": "local msg2, more = sub:recv_msg(msg)",
    "type": "statement:localassign"
  }, {
    "id": 623,
    "text": "assert_equal(msg, msg2, more)",
    "type": "statement:functioncall"
  }, {
    "id": 624,
    "text": "assert_false(sub:more())",
    "type": "statement:functioncall"
  }, {
    "id": 625,
    "text": "assert_false(msg:more())",
    "type": "statement:functioncall"
  }, {
    "id": 626,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 627,
    "text": "function test_recv_msg_more()\r\n  do -- send\r\n    msg = assert(is_zmessage(zmq.msg_init_data('hello')))\r\n    assert_true(msg:send_more(pub))\r\n    assert_equal(0, msg:size())\r\n    assert_false(msg:closed())\r\n    assert_true(msg:close())\r\n    assert_true(pub:send_more(\", \"))\r\n    msg = assert(is_zmessage(zmq.msg_init_data('world')))\r\n    assert_true(msg:send(pub, zmq.SNDMORE))\r\n    assert_true(pub:send(\"!!!\", zmq.SNDMORE))\r\n    assert_true(pub:send(\"\"))\r\n  end\r\n\r\n  do -- recv\r\n    local msg1, more = sub:recv()\r\n    assert_equal('hello', msg1, more)\r\n    assert_true(more)\r\n    assert_equal(more, sub:more())\r\n    assert_equal(1, sub:rcvmore())\r\n\r\n    local msg2, more = sub:recv_new_msg()\r\n    assert(is_zmessage(msg2))\r\n    assert_equal(', ', msg2:data())\r\n    assert_true(more)\r\n    assert_equal(more, sub:more())\r\n    assert_equal(more, msg2:more())\r\n    assert_equal(1, sub:rcvmore())\r\n\r\n    local msg3 = assert(is_zmessage(zmq.msg_init()))\r\n    local msg3_, more = msg3:recv(sub)\r\n    assert_equal(msg3, msg3_, more)\r\n    assert_equal('world', msg3:data())\r\n    assert_true(more)\r\n    assert_equal(more, sub:more())\r\n    assert_equal(more, msg3:more())\r\n    assert_equal(1, sub:rcvmore())\r\n\r\n    local msgs = {}\r\n    repeat \r\n      local msg, more = sub:recv()\r\n      assert_string(msg, more)\r\n      assert_equal(more, sub:more())\r\n      assert_equal(more and 1 or 0, sub:rcvmore())\r\n      table.insert(msgs, msg)\r\n    until not more\r\n    assert_equal(2, #msgs)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 628,
    "text": "do -- send\r\n    msg = assert(is_zmessage(zmq.msg_init_data('hello')))\r\n    assert_true(msg:send_more(pub))\r\n    assert_equal(0, msg:size())\r\n    assert_false(msg:closed())\r\n    assert_true(msg:close())\r\n    assert_true(pub:send_more(\", \"))\r\n    msg = assert(is_zmessage(zmq.msg_init_data('world')))\r\n    assert_true(msg:send(pub, zmq.SNDMORE))\r\n    assert_true(pub:send(\"!!!\", zmq.SNDMORE))\r\n    assert_true(pub:send(\"\"))\r\n  end",
    "type": "statement:do"
  }, {
    "id": 629,
    "text": "msg = assert(is_zmessage(zmq.msg_init_data('hello')))",
    "type": "statement:assign"
  }, {
    "id": 630,
    "text": "assert_true(msg:send_more(pub))",
    "type": "statement:functioncall"
  }, {
    "id": 631,
    "text": "assert_true(pub:send_more(\", \"))",
    "type": "statement:functioncall"
  }, {
    "id": 632,
    "text": "msg = assert(is_zmessage(zmq.msg_init_data('world')))",
    "type": "statement:assign"
  }, {
    "id": 633,
    "text": "assert_true(msg:send(pub, zmq.SNDMORE))",
    "type": "statement:functioncall"
  }, {
    "id": 634,
    "text": "assert_true(pub:send(\"!!!\", zmq.SNDMORE))",
    "type": "statement:functioncall"
  }, {
    "id": 635,
    "text": "assert_true(pub:send(\"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 636,
    "text": "do -- recv\r\n    local msg1, more = sub:recv()\r\n    assert_equal('hello', msg1, more)\r\n    assert_true(more)\r\n    assert_equal(more, sub:more())\r\n    assert_equal(1, sub:rcvmore())\r\n\r\n    local msg2, more = sub:recv_new_msg()\r\n    assert(is_zmessage(msg2))\r\n    assert_equal(', ', msg2:data())\r\n    assert_true(more)\r\n    assert_equal(more, sub:more())\r\n    assert_equal(more, msg2:more())\r\n    assert_equal(1, sub:rcvmore())\r\n\r\n    local msg3 = assert(is_zmessage(zmq.msg_init()))\r\n    local msg3_, more = msg3:recv(sub)\r\n    assert_equal(msg3, msg3_, more)\r\n    assert_equal('world', msg3:data())\r\n    assert_true(more)\r\n    assert_equal(more, sub:more())\r\n    assert_equal(more, msg3:more())\r\n    assert_equal(1, sub:rcvmore())\r\n\r\n    local msgs = {}\r\n    repeat \r\n      local msg, more = sub:recv()\r\n      assert_string(msg, more)\r\n      assert_equal(more, sub:more())\r\n      assert_equal(more and 1 or 0, sub:rcvmore())\r\n      table.insert(msgs, msg)\r\n    until not more\r\n    assert_equal(2, #msgs)\r\n  end",
    "type": "statement:do"
  }, {
    "id": 637,
    "text": "local msg1, more = sub:recv()",
    "type": "statement:localassign"
  }, {
    "id": 638,
    "text": "assert_equal('hello', msg1, more)",
    "type": "statement:functioncall"
  }, {
    "id": 639,
    "text": "assert_true(more)",
    "type": "statement:functioncall"
  }, {
    "id": 640,
    "text": "assert_equal(more, sub:more())",
    "type": "statement:functioncall"
  }, {
    "id": 641,
    "text": "assert_equal(1, sub:rcvmore())",
    "type": "statement:functioncall"
  }, {
    "id": 642,
    "text": "local msg2, more = sub:recv_new_msg()",
    "type": "statement:localassign"
  }, {
    "id": 643,
    "text": "assert(is_zmessage(msg2))",
    "type": "statement:functioncall"
  }, {
    "id": 644,
    "text": "assert_equal(', ', msg2:data())",
    "type": "statement:functioncall"
  }, {
    "id": 645,
    "text": "assert_equal(more, msg2:more())",
    "type": "statement:functioncall"
  }, {
    "id": 646,
    "text": "local msg3 = assert(is_zmessage(zmq.msg_init()))",
    "type": "statement:localassign"
  }, {
    "id": 647,
    "text": "local msg3_, more = msg3:recv(sub)",
    "type": "statement:localassign"
  }, {
    "id": 648,
    "text": "assert_equal(msg3, msg3_, more)",
    "type": "statement:functioncall"
  }, {
    "id": 649,
    "text": "assert_equal('world', msg3:data())",
    "type": "statement:functioncall"
  }, {
    "id": 650,
    "text": "assert_equal(more, msg3:more())",
    "type": "statement:functioncall"
  }, {
    "id": 651,
    "text": "local msgs = {}",
    "type": "statement:localassign"
  }, {
    "id": 652,
    "text": "repeat \r\n      local msg, more = sub:recv()\r\n      assert_string(msg, more)\r\n      assert_equal(more, sub:more())\r\n      assert_equal(more and 1 or 0, sub:rcvmore())\r\n      table.insert(msgs, msg)\r\n    until not more",
    "type": "statement:repeat"
  }, {
    "id": 653,
    "text": "local msg, more = sub:recv()",
    "type": "statement:localassign"
  }, {
    "id": 654,
    "text": "assert_string(msg, more)",
    "type": "statement:functioncall"
  }, {
    "id": 655,
    "text": "assert_equal(more and 1 or 0, sub:rcvmore())",
    "type": "statement:functioncall"
  }, {
    "id": 656,
    "text": "table.insert(msgs, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 657,
    "text": "assert_equal(2, #msgs)",
    "type": "statement:functioncall"
  }, {
    "id": 658,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 659,
    "text": "function test_recv_all()\r\n  assert_true(pub:send_all{'hello', ', ', 'world'})\r\n  local t = assert_table(sub:recv_all())\r\n  assert_equal(3, #t)\r\n  assert_equal('hello, world', table.concat(t))\r\nend",
    "type": "function"
  }, {
    "id": 660,
    "text": "assert_true(pub:send_all{'hello', ', ', 'world'})",
    "type": "statement:functioncall"
  }, {
    "id": 661,
    "text": "local t = assert_table(sub:recv_all())",
    "type": "statement:localassign"
  }, {
    "id": 662,
    "text": "assert_equal(3, #t)",
    "type": "statement:functioncall"
  }, {
    "id": 663,
    "text": "assert_equal('hello, world', table.concat(t))",
    "type": "statement:functioncall"
  }, {
    "id": 664,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 665,
    "text": "function test_recv_flags()\r\n  sub:set_rcvtimeo(10000)\r\n  local timer = assert(ztimer.monotonic():start())\r\n  local ok, err = sub:recv(zmq.DONTWAIT)\r\n  local elapsed = timer:stop()\r\n  assert_nil(ok)\r\n  assert(error_is(err, zmq.errors.EAGAIN))\r\n  assert(elapsed < 100)\r\nend",
    "type": "function"
  }, {
    "id": 666,
    "text": "sub:set_rcvtimeo(10000)",
    "type": "statement:functioncall"
  }, {
    "id": 667,
    "text": "local timer = assert(ztimer.monotonic():start())",
    "type": "statement:localassign"
  }, {
    "id": 668,
    "text": "local ok, err = sub:recv(zmq.DONTWAIT)",
    "type": "statement:localassign"
  }, {
    "id": 669,
    "text": "local elapsed = timer:stop()",
    "type": "statement:localassign"
  }, {
    "id": 670,
    "text": "assert(elapsed < 100)",
    "type": "statement:functioncall"
  }, {
    "id": 671,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 672,
    "text": "function test_recv_all_flags()\r\n  sub:set_rcvtimeo(10000)\r\n  local timer = assert(ztimer.monotonic():start())\r\n  local ok, err = sub:recv_all(zmq.DONTWAIT)\r\n  local elapsed = timer:stop()\r\n  assert_nil(ok)\r\n  assert(error_is(err, zmq.errors.EAGAIN))\r\n  assert(elapsed < 100)\r\nend",
    "type": "function"
  }, {
    "id": 673,
    "text": "local ok, err = sub:recv_all(zmq.DONTWAIT)",
    "type": "statement:localassign"
  }, {
    "id": 674,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 675,
    "text": "function test_sendx()\r\n  assert_true(pub:sendx('hello', ', ', 'world'))\r\n  local a,b,c = assert_string(sub:recvx())\r\n  assert_string(b)\r\n  assert_string(c)\r\n  assert_equal('hello, world', a .. b .. c)\r\nend",
    "type": "function"
  }, {
    "id": 676,
    "text": "assert_true(pub:sendx('hello', ', ', 'world'))",
    "type": "statement:functioncall"
  }, {
    "id": 677,
    "text": "local a,b,c = assert_string(sub:recvx())",
    "type": "statement:localassign"
  }, {
    "id": 678,
    "text": "assert_string(b)",
    "type": "statement:functioncall"
  }, {
    "id": 679,
    "text": "assert_string(c)",
    "type": "statement:functioncall"
  }, {
    "id": 680,
    "text": "assert_equal('hello, world', a .. b .. c)",
    "type": "statement:functioncall"
  }, {
    "id": 681,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 682,
    "text": "function test_sendx_more()\r\n  assert_true(pub:sendx_more('hello', ', '))\r\n  assert_true(pub:send('world'))\r\n  local a,b,c = assert_string(sub:recvx())\r\n  assert_string(b)\r\n  assert_string(c)\r\n  assert_equal('hello, world', a .. b .. c)\r\nend",
    "type": "function"
  }, {
    "id": 683,
    "text": "assert_true(pub:sendx_more('hello', ', '))",
    "type": "statement:functioncall"
  }, {
    "id": 684,
    "text": "assert_true(pub:send('world'))",
    "type": "statement:functioncall"
  }, {
    "id": 685,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 686,
    "text": "function test_send_all_wrong_flag()\r\n  local ok, err = pub:send_all({'hello', ', ', 'world'}, zmq.DONTWAIT)\r\n  assert_nil(ok)\r\n  assert(error_is(err, zmq.errors.ENOTSUP))\r\nend",
    "type": "function"
  }, {
    "id": 687,
    "text": "local ok, err = pub:send_all({'hello', ', ', 'world'}, zmq.DONTWAIT)",
    "type": "statement:localassign"
  }, {
    "id": 688,
    "text": "assert(error_is(err, zmq.errors.ENOTSUP))",
    "type": "statement:functioncall"
  }, {
    "id": 689,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 690,
    "text": "function test_send_all_more()\r\n  assert_true(pub:send_all({'hello', ', '},zmq.SNDMORE))\r\n  assert_true(pub:send('world'))\r\n  local t = assert_table(sub:recv_all())\r\n  assert_equal(3, #t)\r\n  assert_equal('hello, world', table.concat(t))\r\nend",
    "type": "function"
  }, {
    "id": 691,
    "text": "assert_true(pub:send_all({'hello', ', '},zmq.SNDMORE))",
    "type": "statement:functioncall"
  }, {
    "id": 692,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 693,
    "text": "function test_send_all_position()\r\n  local msg = {\r\n    [-1] = 'hello';\r\n    [ 0] = ', ';\r\n    [ 1] = 'world';\r\n  }\r\n  \r\n  local ok, err = pub:send_all(msg, 0, -1, 1)\r\n  local t = assert_table(sub:recv_all())\r\n  assert_equal(3, #t)\r\n  assert_equal('hello, world', table.concat(t))\r\nend",
    "type": "function"
  }, {
    "id": 694,
    "text": "local msg = {\r\n    [-1] = 'hello';\r\n    [ 0] = ', ';\r\n    [ 1] = 'world';\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 695,
    "text": "local ok, err = pub:send_all(msg, 0, -1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 696,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 697,
    "text": "function test_send_all_hole()\r\n  assert_error(function()\r\n    pub:send_all({\"1\", nil, \"2\"}, 0, 1, 3)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 698,
    "text": "assert_error(function()\r\n    pub:send_all({\"1\", nil, \"2\"}, 0, 1, 3)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 699,
    "text": "pub:send_all({\"1\", nil, \"2\"}, 0, 1, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 700,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 701,
    "text": "function test_sendx_hole()\r\n  assert_error(function()\r\n    pub:sendx(\"1\", nil, \"2\")\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 702,
    "text": "assert_error(function()\r\n    pub:sendx(\"1\", nil, \"2\")\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 703,
    "text": "pub:sendx(\"1\", nil, \"2\")",
    "type": "statement:functioncall"
  }, {
    "id": 704,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 705,
    "text": "function setup()\r\n  ctx   = assert(zmq.context())\r\n  rep   = assert(ctx:socket{zmq.REP, bind = ECHO_ADDR, rcvtimeo = 100})\r\n  req   = assert(ctx:socket{zmq.REQ, connect = ECHO_ADDR})\r\n  timer = ztimer.monotonic()\r\nend",
    "type": "function"
  }, {
    "id": 706,
    "text": "ctx   = assert(zmq.context())",
    "type": "statement:assign"
  }, {
    "id": 707,
    "text": "rep   = assert(ctx:socket{zmq.REP, bind = ECHO_ADDR, rcvtimeo = 100})",
    "type": "statement:assign"
  }, {
    "id": 708,
    "text": "req   = assert(ctx:socket{zmq.REQ, connect = ECHO_ADDR})",
    "type": "statement:assign"
  }, {
    "id": 709,
    "text": "timer = ztimer.monotonic()",
    "type": "statement:assign"
  }, {
    "id": 710,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 711,
    "text": "function teardown()\r\n  if ctx then ctx:destroy() end\r\n  timer:close()\r\nend",
    "type": "function"
  }, {
    "id": 712,
    "text": "timer:close()",
    "type": "statement:functioncall"
  }, {
    "id": 713,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 714,
    "text": "function test_timeout()\r\n  timer:start()\r\n  assert_false(rep:poll(2000))\r\n  assert_true(ge(1900, timer:stop()))\r\nend",
    "type": "function"
  }, {
    "id": 715,
    "text": "timer:start()",
    "type": "statement:functioncall"
  }, {
    "id": 716,
    "text": "assert_false(rep:poll(2000))",
    "type": "statement:functioncall"
  }, {
    "id": 717,
    "text": "assert_true(ge(1900, timer:stop()))",
    "type": "statement:functioncall"
  }, {
    "id": 718,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 719,
    "text": "function test_recv()\r\n  req:send(\"HELLO\")\r\n  assert_true(rep:poll(2000))\r\n  assert_equal(\"HELLO\", rep:recv())\r\nend",
    "type": "function"
  }, {
    "id": 720,
    "text": "req:send(\"HELLO\")",
    "type": "statement:functioncall"
  }, {
    "id": 721,
    "text": "assert_true(rep:poll(2000))",
    "type": "statement:functioncall"
  }, {
    "id": 722,
    "text": "assert_equal(\"HELLO\", rep:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 723,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 724,
    "text": "function setup()\r\n  loop  = assert(zloop.new())\r\n  timer = ztimer.monotonic()\r\nend",
    "type": "function"
  }, {
    "id": 725,
    "text": "loop  = assert(zloop.new())",
    "type": "statement:assign"
  }, {
    "id": 726,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 727,
    "text": "function teardown()\r\n  loop:destroy()\r\n  timer:close()\r\n  wait(500) -- for TCP time to release IP address\r\nend",
    "type": "function"
  }, {
    "id": 728,
    "text": "loop:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 729,
    "text": "wait(500)",
    "type": "statement:functioncall"
  }, {
    "id": 730,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 731,
    "text": "function test_sleep()\r\n  local flag1 = false\r\n  loop:add_once(10, function() assert_false(flag1) flag1 = true end)\r\n  assert_equal(0, loop:flush(100)) -- only flush io events and no wait\r\n  assert_false(flag1)\r\n\r\n  timer:start()\r\n  assert_equal(1, loop:sleep_ex(100)) -- run event\r\n  assert_true(ge(100, timer:stop()))  -- wait full interval\r\n  assert_true(flag1)                  -- ensure event was emit\r\n\r\n  flag1 = false\r\n  loop:add_once(10, function() assert_false(flag1) flag1 = true end)\r\n  timer:start()\r\n  loop.sleep(100)                     -- do not run event\r\n  assert_true(ge(100, timer:stop()))  -- wait full interval\r\n  assert_false(flag1)\r\n\r\n  assert_equal(0, loop:flush(100))    -- only flush io events and no wait\r\n  assert_false(flag1)\r\n\r\n  assert_equal(1, loop:sleep_ex(0))   -- run event\r\n  assert_true(flag1)                  -- ensure event was emit\r\nend",
    "type": "function"
  }, {
    "id": 732,
    "text": "local flag1 = false",
    "type": "statement:localassign"
  }, {
    "id": 733,
    "text": "loop:add_once(10, function() assert_false(flag1) flag1 = true end)",
    "type": "statement:functioncall"
  }, {
    "id": 734,
    "text": "assert_false(flag1)",
    "type": "statement:functioncall"
  }, {
    "id": 735,
    "text": "flag1 = true",
    "type": "statement:assign"
  }, {
    "id": 736,
    "text": "assert_equal(0, loop:flush(100))",
    "type": "statement:functioncall"
  }, {
    "id": 737,
    "text": "assert_equal(1, loop:sleep_ex(100))",
    "type": "statement:functioncall"
  }, {
    "id": 738,
    "text": "assert_true(ge(100, timer:stop()))",
    "type": "statement:functioncall"
  }, {
    "id": 739,
    "text": "assert_true(flag1)",
    "type": "statement:functioncall"
  }, {
    "id": 740,
    "text": "flag1 = false",
    "type": "statement:assign"
  }, {
    "id": 741,
    "text": "loop.sleep(100)",
    "type": "statement:functioncall"
  }, {
    "id": 742,
    "text": "assert_equal(1, loop:sleep_ex(0))",
    "type": "statement:functioncall"
  }, {
    "id": 743,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 744,
    "text": "function test_remove_event()\r\n  local c = 0\r\n  local N = 10\r\n  local T = 100\r\n  local flag1, flag2, flag3\r\n\r\n  local ext_ev = loop:add_interval(T, function() flag3 = false end)\r\n\r\n  local function fn2(ev, loop) \r\n    assert_true(c < N)\r\n    assert_true(flag1, \"event 1 does not stop\")\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      ev:reset()     -- remove self\r\n      ext_ev:reset() -- remove ext\r\n\r\n      assert_false(flag3, \"ext_ev does not work\")\r\n\r\n      c, flag2, flag3 = 0, true, true\r\n\r\n      loop:add_interval(T, function()\r\n        assert_true(flag1, \"event 1 does not stop\")\r\n        assert_true(flag2, \"event 1 does not stop\")\r\n        assert_true(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)\r\n\r\n    end\r\n  end\r\n\r\n  local function fn1(ev, loop) \r\n    assert_true(c < N)\r\n    flag3 = true --  ext_ev should set to false\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      c = 0\r\n      flag1 = true\r\n      ev:reset()\r\n      loop:add_interval(T, fn2)\r\n    end\r\n  end\r\n\r\n  loop:add_interval(T, fn1)\r\n\r\n  loop:start()\r\n\r\n  assert_true(flag1)\r\n  assert_true(flag2)\r\nend",
    "type": "function"
  }, {
    "id": 745,
    "text": "local c = 0",
    "type": "statement:localassign"
  }, {
    "id": 746,
    "text": "local N = 10",
    "type": "statement:localassign"
  }, {
    "id": 747,
    "text": "local T = 100",
    "type": "statement:localassign"
  }, {
    "id": 748,
    "text": "local flag1, flag2, flag3",
    "type": "statement:localassign"
  }, {
    "id": 749,
    "text": "local ext_ev = loop:add_interval(T, function() flag3 = false end)",
    "type": "statement:localassign"
  }, {
    "id": 750,
    "text": "flag3 = false",
    "type": "statement:assign"
  }, {
    "id": 751,
    "text": "local function fn2(ev, loop) \r\n    assert_true(c < N)\r\n    assert_true(flag1, \"event 1 does not stop\")\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      ev:reset()     -- remove self\r\n      ext_ev:reset() -- remove ext\r\n\r\n      assert_false(flag3, \"ext_ev does not work\")\r\n\r\n      c, flag2, flag3 = 0, true, true\r\n\r\n      loop:add_interval(T, function()\r\n        assert_true(flag1, \"event 1 does not stop\")\r\n        assert_true(flag2, \"event 1 does not stop\")\r\n        assert_true(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)\r\n\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 752,
    "text": "assert_true(c < N)",
    "type": "statement:functioncall"
  }, {
    "id": 753,
    "text": "assert_true(flag1, \"event 1 does not stop\")",
    "type": "statement:functioncall"
  }, {
    "id": 754,
    "text": "c = c + 1",
    "type": "statement:assign"
  }, {
    "id": 755,
    "text": "if c == N then\r\n      ev:reset()     -- remove self\r\n      ext_ev:reset() -- remove ext\r\n\r\n      assert_false(flag3, \"ext_ev does not work\")\r\n\r\n      c, flag2, flag3 = 0, true, true\r\n\r\n      loop:add_interval(T, function()\r\n        assert_true(flag1, \"event 1 does not stop\")\r\n        assert_true(flag2, \"event 1 does not stop\")\r\n        assert_true(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)\r\n\r\n    end",
    "type": "statement:if"
  }, {
    "id": 756,
    "text": "ev:reset()",
    "type": "statement:functioncall"
  }, {
    "id": 757,
    "text": "ext_ev:reset()",
    "type": "statement:functioncall"
  }, {
    "id": 758,
    "text": "assert_false(flag3, \"ext_ev does not work\")",
    "type": "statement:functioncall"
  }, {
    "id": 759,
    "text": "c, flag2, flag3 = 0, true, true",
    "type": "statement:assign"
  }, {
    "id": 760,
    "text": "loop:add_interval(T, function()\r\n        assert_true(flag1, \"event 1 does not stop\")\r\n        assert_true(flag2, \"event 1 does not stop\")\r\n        assert_true(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 761,
    "text": "assert_true(flag2, \"event 1 does not stop\")",
    "type": "statement:functioncall"
  }, {
    "id": 762,
    "text": "assert_true(flag3, \"event 1 does not stop\")",
    "type": "statement:functioncall"
  }, {
    "id": 763,
    "text": "if c == N then\r\n          loop:interrupt()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 764,
    "text": "loop:interrupt()",
    "type": "statement:functioncall"
  }, {
    "id": 765,
    "text": "local function fn1(ev, loop) \r\n    assert_true(c < N)\r\n    flag3 = true --  ext_ev should set to false\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      c = 0\r\n      flag1 = true\r\n      ev:reset()\r\n      loop:add_interval(T, fn2)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 766,
    "text": "flag3 = true",
    "type": "statement:assign"
  }, {
    "id": 767,
    "text": "if c == N then\r\n      c = 0\r\n      flag1 = true\r\n      ev:reset()\r\n      loop:add_interval(T, fn2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 768,
    "text": "c = 0",
    "type": "statement:assign"
  }, {
    "id": 769,
    "text": "loop:add_interval(T, fn2)",
    "type": "statement:functioncall"
  }, {
    "id": 770,
    "text": "loop:add_interval(T, fn1)",
    "type": "statement:functioncall"
  }, {
    "id": 771,
    "text": "loop:start()",
    "type": "statement:functioncall"
  }, {
    "id": 772,
    "text": "assert_true(flag2)",
    "type": "statement:functioncall"
  }, {
    "id": 773,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 774,
    "text": "local function fn2(ev, loop) \r\n    assert_true(c < N)\r\n    assert_true(flag1, \"event 1 does not stop\")\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      ev:reset()     -- remove self\r\n      ext_ev:reset() -- remove ext\r\n\r\n      assert_false(flag3, \"ext_ev does not work\")\r\n\r\n      c, flag2, flag3 = 0, true, true\r\n\r\n      loop:add_interval(T, function()\r\n        assert_true(flag1, \"event 1 does not stop\")\r\n        assert_true(flag2, \"event 1 does not stop\")\r\n        assert_true(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end)\r\n\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 775,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 776,
    "text": "local function fn1(ev, loop) \r\n    assert_true(c < N)\r\n    flag3 = true --  ext_ev should set to false\r\n\r\n    c = c + 1\r\n    if c == N then\r\n      c = 0\r\n      flag1 = true\r\n      ev:reset()\r\n      loop:add_interval(T, fn2)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 777,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 778,
    "text": "function test_interface()\r\n  assert_function(loop.destroy)\r\n  assert_function(loop.context)\r\n  assert_function(loop.flush)\r\n  assert_function(loop.sleep)\r\n  assert_function(loop.sleep_ex)\r\n  assert_function(loop.interrupt)\r\n  assert_function(loop.add_socket)\r\n  assert_function(loop.remove_socket)\r\n  assert_function(loop.start)\r\n  assert_function(loop.add_once)\r\n  assert_function(loop.add_interval)\r\n  assert_function(loop.add_time)\r\nend",
    "type": "function"
  }, {
    "id": 779,
    "text": "assert_function(loop.destroy)",
    "type": "statement:functioncall"
  }, {
    "id": 780,
    "text": "assert_function(loop.context)",
    "type": "statement:functioncall"
  }, {
    "id": 781,
    "text": "assert_function(loop.flush)",
    "type": "statement:functioncall"
  }, {
    "id": 782,
    "text": "assert_function(loop.sleep)",
    "type": "statement:functioncall"
  }, {
    "id": 783,
    "text": "assert_function(loop.sleep_ex)",
    "type": "statement:functioncall"
  }, {
    "id": 784,
    "text": "assert_function(loop.interrupt)",
    "type": "statement:functioncall"
  }, {
    "id": 785,
    "text": "assert_function(loop.add_socket)",
    "type": "statement:functioncall"
  }, {
    "id": 786,
    "text": "assert_function(loop.remove_socket)",
    "type": "statement:functioncall"
  }, {
    "id": 787,
    "text": "assert_function(loop.start)",
    "type": "statement:functioncall"
  }, {
    "id": 788,
    "text": "assert_function(loop.add_once)",
    "type": "statement:functioncall"
  }, {
    "id": 789,
    "text": "assert_function(loop.add_interval)",
    "type": "statement:functioncall"
  }, {
    "id": 790,
    "text": "assert_function(loop.add_time)",
    "type": "statement:functioncall"
  }, {
    "id": 791,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 792,
    "text": "function test_echo()\r\n  local counter = 0\r\n\r\n  local function echo(skt)\r\n    local msg = assert_table(skt:recv_all())\r\n    assert_true(skt:send_all(msg))\r\n    counter = counter + 1\r\n  end\r\n\r\n  assert(loop:add_new_bind(zmq.REP, ECHO_ADDR, echo))\r\n\r\n  local cli = assert(loop:add_new_connect(zmq.REQ, ECHO_ADDR, echo))\r\n\r\n  -- run ball\r\n  loop:add_once(10, function() cli:send_all{'hello', 'world'} end)\r\n\r\n  -- time to play\r\n  loop:add_once(2000, function() loop:interrupt() end)\r\n\r\n  timer:start()\r\n  loop:start()\r\n  assert_true(ge(2000, timer:stop()))\r\n  assert_true(counter > 3)\r\n\r\n  loop:destroy()\r\n\r\n  assert_true(cli:closed())\r\nend",
    "type": "function"
  }, {
    "id": 793,
    "text": "local counter = 0",
    "type": "statement:localassign"
  }, {
    "id": 794,
    "text": "local function echo(skt)\r\n    local msg = assert_table(skt:recv_all())\r\n    assert_true(skt:send_all(msg))\r\n    counter = counter + 1\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 795,
    "text": "local msg = assert_table(skt:recv_all())",
    "type": "statement:localassign"
  }, {
    "id": 796,
    "text": "assert_true(skt:send_all(msg))",
    "type": "statement:functioncall"
  }, {
    "id": 797,
    "text": "counter = counter + 1",
    "type": "statement:assign"
  }, {
    "id": 798,
    "text": "assert(loop:add_new_bind(zmq.REP, ECHO_ADDR, echo))",
    "type": "statement:functioncall"
  }, {
    "id": 799,
    "text": "local cli = assert(loop:add_new_connect(zmq.REQ, ECHO_ADDR, echo))",
    "type": "statement:localassign"
  }, {
    "id": 800,
    "text": "loop:add_once(10, function() cli:send_all{'hello', 'world'} end)",
    "type": "statement:functioncall"
  }, {
    "id": 801,
    "text": "cli:send_all{'hello', 'world'}",
    "type": "statement:functioncall"
  }, {
    "id": 802,
    "text": "loop:add_once(2000, function() loop:interrupt() end)",
    "type": "statement:functioncall"
  }, {
    "id": 803,
    "text": "assert_true(ge(2000, timer:stop()))",
    "type": "statement:functioncall"
  }, {
    "id": 804,
    "text": "assert_true(counter > 3)",
    "type": "statement:functioncall"
  }, {
    "id": 805,
    "text": "assert_true(cli:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 806,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 807,
    "text": "local function echo(skt)\r\n    local msg = assert_table(skt:recv_all())\r\n    assert_true(skt:send_all(msg))\r\n    counter = counter + 1\r\n  end",
    "type": "function"
  }, {
    "id": 808,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 809,
    "text": "function teardown()\r\n  if timer then timer:close() end\r\nend",
    "type": "function"
  }, {
    "id": 810,
    "text": "if timer then timer:close() end",
    "type": "statement:if"
  }, {
    "id": 811,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 812,
    "text": "function test_interface()\r\n  assert_function(ztimer.monotonic)\r\n  assert_function(ztimer.absolute)\r\n\r\n  assert_function(ztimer.absolute_time)\r\n  assert_function(ztimer.absolute_delta)\r\n  assert_function(ztimer.absolute_elapsed)\r\n\r\n  assert_function(ztimer.monotonic_time)\r\n  assert_function(ztimer.monotonic_delta)\r\n  assert_function(ztimer.monotonic_elapsed)\r\nend",
    "type": "function"
  }, {
    "id": 813,
    "text": "assert_function(ztimer.monotonic)",
    "type": "statement:functioncall"
  }, {
    "id": 814,
    "text": "assert_function(ztimer.absolute)",
    "type": "statement:functioncall"
  }, {
    "id": 815,
    "text": "assert_function(ztimer.absolute_time)",
    "type": "statement:functioncall"
  }, {
    "id": 816,
    "text": "assert_function(ztimer.absolute_delta)",
    "type": "statement:functioncall"
  }, {
    "id": 817,
    "text": "assert_function(ztimer.absolute_elapsed)",
    "type": "statement:functioncall"
  }, {
    "id": 818,
    "text": "assert_function(ztimer.monotonic_time)",
    "type": "statement:functioncall"
  }, {
    "id": 819,
    "text": "assert_function(ztimer.monotonic_delta)",
    "type": "statement:functioncall"
  }, {
    "id": 820,
    "text": "assert_function(ztimer.monotonic_elapsed)",
    "type": "statement:functioncall"
  }, {
    "id": 821,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 822,
    "text": "local function test_timer_interface(timer)\r\n  assert_function(timer.close)\r\n  assert_function(timer.closed)\r\n  assert_function(timer.set)\r\n  assert_function(timer.get)\r\n  assert_function(timer.reset)\r\n  assert_function(timer.setted)\r\n  assert_function(timer.start)\r\n  assert_function(timer.started)\r\n  assert_function(timer.elapsed)\r\n  assert_function(timer.rest)\r\n  assert_function(timer.stop)\r\n  assert_function(timer.is_absolute)\r\n  assert_function(timer.is_monotonic)\r\nend",
    "type": "function"
  }, {
    "id": 823,
    "text": "assert_function(timer.close)",
    "type": "statement:functioncall"
  }, {
    "id": 824,
    "text": "assert_function(timer.closed)",
    "type": "statement:functioncall"
  }, {
    "id": 825,
    "text": "assert_function(timer.set)",
    "type": "statement:functioncall"
  }, {
    "id": 826,
    "text": "assert_function(timer.get)",
    "type": "statement:functioncall"
  }, {
    "id": 827,
    "text": "assert_function(timer.reset)",
    "type": "statement:functioncall"
  }, {
    "id": 828,
    "text": "assert_function(timer.setted)",
    "type": "statement:functioncall"
  }, {
    "id": 829,
    "text": "assert_function(timer.start)",
    "type": "statement:functioncall"
  }, {
    "id": 830,
    "text": "assert_function(timer.started)",
    "type": "statement:functioncall"
  }, {
    "id": 831,
    "text": "assert_function(timer.elapsed)",
    "type": "statement:functioncall"
  }, {
    "id": 832,
    "text": "assert_function(timer.rest)",
    "type": "statement:functioncall"
  }, {
    "id": 833,
    "text": "assert_function(timer.stop)",
    "type": "statement:functioncall"
  }, {
    "id": 834,
    "text": "assert_function(timer.is_absolute)",
    "type": "statement:functioncall"
  }, {
    "id": 835,
    "text": "assert_function(timer.is_monotonic)",
    "type": "statement:functioncall"
  }, {
    "id": 836,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 837,
    "text": "function test_monotonic_interface()\r\n  timer = ztimer.monotonic()\r\n  test_timer_interface(timer)\r\nend",
    "type": "function"
  }, {
    "id": 838,
    "text": "test_timer_interface(timer)",
    "type": "statement:functioncall"
  }, {
    "id": 839,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 840,
    "text": "function test_absolute_interface()\r\n  timer = ztimer.absolute()\r\n  test_timer_interface(timer)\r\nend",
    "type": "function"
  }, {
    "id": 841,
    "text": "timer = ztimer.absolute()",
    "type": "statement:assign"
  }, {
    "id": 842,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 843,
    "text": "local function test_timer(timer)\r\n  local COUNT    = 100\r\n  local INTERVAL = 100\r\n  local DELTA    = 50  -- to ensure\r\n\r\n  local name = timer:is_absolute() and 'absolute' or 'monotonic';\r\n\r\n  local max_delta, totla_delta, totla_delta2 = 0, 0, 0\r\n\r\n  assert_false(timer:setted())\r\n  assert_equal(timer, timer:start())\r\n  assert_error (function() timer:rest() end)\r\n  assert_true(timer:reset())\r\n  assert_number(timer:elapsed())\r\n  assert_number(timer:stop())\r\n\r\n  if timer:is_absolute() then\r\n    assert_equal( timer, timer:set(ztimer.absolute_time() + INTERVAL) )\r\n  else\r\n    assert_equal( timer, timer:set(INTERVAL) )\r\n  end\r\n\r\n  assert_false(timer:started())\r\n  assert_false(timer:closed())\r\n\r\n  assert_error(function() timer:elapsed() end)\r\n  assert_error(function() timer:rest() end)\r\n  assert_equal(timer, timer:start())\r\n  assert_true(timer:started())\r\n  assert_true(timer:setted())\r\n  wait(100)\r\n  local e = timer:elapsed()\r\n  assert_true((e >= 50)and(e <= 150), \"expected value >=50,<=150 got: \" .. tostring(e)) -- wait is not realy correct\r\n  assert_equal(timer, timer:start())\r\n  assert_true(timer:elapsed() < 50)\r\n  assert_number(timer:elapsed())\r\n  assert_number(timer:rest())\r\n  assert_number(timer:stop())\r\n  assert_error(function() timer:elapsed() end)\r\n  assert_error(function() timer:rest()    end)\r\n\r\n  for i = 1, COUNT do\r\n    assert_equal(timer, timer:start())\r\n    wait(INTERVAL + DELTA)\r\n    local elapsed = timer:elapsed()\r\n    assert_equal(0, timer:rest())\r\n    assert_true(elapsed <= timer:stop())\r\n  end\r\n\r\n  assert_true(timer:close())\r\n  assert_true(timer:closed())\r\n  assert_true(timer:close())\r\nend",
    "type": "function"
  }, {
    "id": 844,
    "text": "local COUNT    = 100",
    "type": "statement:localassign"
  }, {
    "id": 845,
    "text": "local INTERVAL = 100",
    "type": "statement:localassign"
  }, {
    "id": 846,
    "text": "local DELTA    = 50",
    "type": "statement:localassign"
  }, {
    "id": 847,
    "text": "local name = timer:is_absolute() and 'absolute' or 'monotonic'",
    "type": "statement:localassign"
  }, {
    "id": 848,
    "text": "local max_delta, totla_delta, totla_delta2 = 0, 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 849,
    "text": "assert_false(timer:setted())",
    "type": "statement:functioncall"
  }, {
    "id": 850,
    "text": "assert_equal(timer, timer:start())",
    "type": "statement:functioncall"
  }, {
    "id": 851,
    "text": "assert_error (function() timer:rest() end)",
    "type": "statement:functioncall"
  }, {
    "id": 852,
    "text": "timer:rest()",
    "type": "statement:functioncall"
  }, {
    "id": 853,
    "text": "assert_true(timer:reset())",
    "type": "statement:functioncall"
  }, {
    "id": 854,
    "text": "assert_number(timer:elapsed())",
    "type": "statement:functioncall"
  }, {
    "id": 855,
    "text": "assert_number(timer:stop())",
    "type": "statement:functioncall"
  }, {
    "id": 856,
    "text": "if timer:is_absolute() then\r\n    assert_equal( timer, timer:set(ztimer.absolute_time() + INTERVAL) )\r\n  else\r\n    assert_equal( timer, timer:set(INTERVAL) )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 857,
    "text": "assert_equal( timer, timer:set(ztimer.absolute_time() + INTERVAL) )",
    "type": "statement:functioncall"
  }, {
    "id": 858,
    "text": "assert_equal( timer, timer:set(INTERVAL) )",
    "type": "statement:functioncall"
  }, {
    "id": 859,
    "text": "assert_false(timer:started())",
    "type": "statement:functioncall"
  }, {
    "id": 860,
    "text": "assert_false(timer:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 861,
    "text": "assert_error(function() timer:elapsed() end)",
    "type": "statement:functioncall"
  }, {
    "id": 862,
    "text": "timer:elapsed()",
    "type": "statement:functioncall"
  }, {
    "id": 863,
    "text": "assert_error(function() timer:rest() end)",
    "type": "statement:functioncall"
  }, {
    "id": 864,
    "text": "assert_true(timer:started())",
    "type": "statement:functioncall"
  }, {
    "id": 865,
    "text": "assert_true(timer:setted())",
    "type": "statement:functioncall"
  }, {
    "id": 866,
    "text": "wait(100)",
    "type": "statement:functioncall"
  }, {
    "id": 867,
    "text": "local e = timer:elapsed()",
    "type": "statement:localassign"
  }, {
    "id": 868,
    "text": "assert_true((e >= 50)and(e <= 150), \"expected value >=50,<=150 got: \" .. tostring(e))",
    "type": "statement:functioncall"
  }, {
    "id": 869,
    "text": "assert_true(timer:elapsed() < 50)",
    "type": "statement:functioncall"
  }, {
    "id": 870,
    "text": "assert_number(timer:rest())",
    "type": "statement:functioncall"
  }, {
    "id": 871,
    "text": "assert_error(function() timer:rest()    end)",
    "type": "statement:functioncall"
  }, {
    "id": 872,
    "text": "for i = 1, COUNT do\r\n    assert_equal(timer, timer:start())\r\n    wait(INTERVAL + DELTA)\r\n    local elapsed = timer:elapsed()\r\n    assert_equal(0, timer:rest())\r\n    assert_true(elapsed <= timer:stop())\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 873,
    "text": "wait(INTERVAL + DELTA)",
    "type": "statement:functioncall"
  }, {
    "id": 874,
    "text": "local elapsed = timer:elapsed()",
    "type": "statement:localassign"
  }, {
    "id": 875,
    "text": "assert_equal(0, timer:rest())",
    "type": "statement:functioncall"
  }, {
    "id": 876,
    "text": "assert_true(elapsed <= timer:stop())",
    "type": "statement:functioncall"
  }, {
    "id": 877,
    "text": "assert_true(timer:close())",
    "type": "statement:functioncall"
  }, {
    "id": 878,
    "text": "assert_true(timer:closed())",
    "type": "statement:functioncall"
  }, {
    "id": 879,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 880,
    "text": "function test_monotonic()\r\n  timer = ztimer.monotonic()\r\n  test_timer(timer)\r\nend",
    "type": "function"
  }, {
    "id": 881,
    "text": "test_timer(timer)",
    "type": "statement:functioncall"
  }, {
    "id": 882,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 883,
    "text": "function test_absolute()\r\n  timer = ztimer.absolute()\r\n  test_timer(timer)\r\nend",
    "type": "function"
  }, {
    "id": 884,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 885,
    "text": "function setup()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  pub = assert(is_zsocket(ctx:socket(zmq.PUB)))\r\n  ctx:autoclose(pub)\r\n  sub1 = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(sub1)\r\n  sub2 = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(sub2)\r\n  sub3 = assert(is_zsocket(ctx:socket(zmq.SUB)))\r\n  ctx:autoclose(sub3)\r\n  poller = zpoller.new()\r\n\r\n  names = {}\r\n  names[sub1] = \"sub1\"\r\n  names[sub2] = \"sub2\"\r\n  names[sub3] = \"sub3\"\r\n\r\n  assert_true(pub:bind(\"inproc://pub.test.1\"))\r\n\r\n  assert_true(sub1:subscribe(\"\"))\r\n  assert_true(sub2:subscribe(\"\"))\r\n  assert_true(sub3:subscribe(\"\"))\r\n\r\n  wait()\r\n\r\n  assert_true(sub1:connect(\"inproc://pub.test.1\"))\r\n  assert_true(sub2:connect(\"inproc://pub.test.1\"))\r\n  assert_true(sub3:connect(\"inproc://pub.test.1\"))\r\n\r\n  wait()\r\nend",
    "type": "function"
  }, {
    "id": 886,
    "text": "poller = zpoller.new()",
    "type": "statement:assign"
  }, {
    "id": 887,
    "text": "names = {}",
    "type": "statement:assign"
  }, {
    "id": 888,
    "text": "names[sub1] = \"sub1\"",
    "type": "statement:assign"
  }, {
    "id": 889,
    "text": "names[sub2] = \"sub2\"",
    "type": "statement:assign"
  }, {
    "id": 890,
    "text": "names[sub3] = \"sub3\"",
    "type": "statement:assign"
  }, {
    "id": 891,
    "text": "assert_true(pub:bind(\"inproc://pub.test.1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 892,
    "text": "assert_true(sub2:connect(\"inproc://pub.test.1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 893,
    "text": "assert_true(sub3:connect(\"inproc://pub.test.1\"))",
    "type": "statement:functioncall"
  }, {
    "id": 894,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 895,
    "text": "function teardown()\r\n  if msg then msg:close()               end\r\n  if ctx then ctx:destroy()             end\r\n  if pub then assert_true(pub:closed()) end\r\n  if sub1 then assert_true(sub1:closed()) end\r\n  if sub2 then assert_true(sub2:closed()) end\r\n  if sub3 then assert_true(sub3:closed()) end\r\nend",
    "type": "function"
  }, {
    "id": 896,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 897,
    "text": "function test_poll_withot_timeout()\r\n  poller:add(sub1, zmq.POLLIN, function() end)\r\n  assert_error(function() poller:poll() end)\r\nend",
    "type": "function"
  }, {
    "id": 898,
    "text": "poller:add(sub1, zmq.POLLIN, function() end)",
    "type": "statement:functioncall"
  }, {
    "id": 899,
    "text": "assert_error(function() poller:poll() end)",
    "type": "statement:functioncall"
  }, {
    "id": 900,
    "text": "poller:poll()",
    "type": "statement:functioncall"
  }, {
    "id": 901,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 902,
    "text": "function test_add_error()\r\n  assert_error(function() poller:add(sub1, zmq.POLLIN) end)\r\n  assert_error(function() poller:add(sub1) end)\r\n  assert_error(function() poller:add() end)\r\nend",
    "type": "function"
  }, {
    "id": 903,
    "text": "assert_error(function() poller:add(sub1, zmq.POLLIN) end)",
    "type": "statement:functioncall"
  }, {
    "id": 904,
    "text": "poller:add(sub1, zmq.POLLIN)",
    "type": "statement:functioncall"
  }, {
    "id": 905,
    "text": "assert_error(function() poller:add(sub1) end)",
    "type": "statement:functioncall"
  }, {
    "id": 906,
    "text": "poller:add(sub1)",
    "type": "statement:functioncall"
  }, {
    "id": 907,
    "text": "assert_error(function() poller:add() end)",
    "type": "statement:functioncall"
  }, {
    "id": 908,
    "text": "poller:add()",
    "type": "statement:functioncall"
  }, {
    "id": 909,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 910,
    "text": "function test_create()\r\n  local t = {}\r\n  poller:add(sub1, zmq.POLLIN, function(skt) assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end)\r\n  poller:add(sub2, zmq.POLLIN, function(skt) assert_equal(sub2, skt, \" expect socket `sub2` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end)\r\n  poller:add(sub3, zmq.POLLIN, function(skt) assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end)\r\n\r\n  assert_true(pub:send(\"hello\"))\r\n\r\n  assert_equal(3, poller:poll(100))\r\n  local ret\r\n  ret = t[sub1] assert_table(ret) assert_equal(\"hello\", ret[1]) assert_equal(false, ret[2])\r\n  ret = t[sub2] assert_table(ret) assert_equal(\"hello\", ret[1]) assert_equal(false, ret[2])\r\n  ret = t[sub3] assert_table(ret) assert_equal(\"hello\", ret[1]) assert_equal(false, ret[2])\r\nend",
    "type": "function"
  }, {
    "id": 911,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 912,
    "text": "poller:add(sub1, zmq.POLLIN, function(skt) assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end)",
    "type": "statement:functioncall"
  }, {
    "id": 913,
    "text": "assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt)))",
    "type": "statement:functioncall"
  }, {
    "id": 914,
    "text": "t[skt] = {skt:recv()}",
    "type": "statement:assign"
  }, {
    "id": 915,
    "text": "poller:add(sub2, zmq.POLLIN, function(skt) assert_equal(sub2, skt, \" expect socket `sub2` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end)",
    "type": "statement:functioncall"
  }, {
    "id": 916,
    "text": "assert_equal(sub2, skt, \" expect socket `sub2` got `\" .. (names[skt] or tostring(skt)))",
    "type": "statement:functioncall"
  }, {
    "id": 917,
    "text": "poller:add(sub3, zmq.POLLIN, function(skt) assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end)",
    "type": "statement:functioncall"
  }, {
    "id": 918,
    "text": "assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt)))",
    "type": "statement:functioncall"
  }, {
    "id": 919,
    "text": "assert_equal(3, poller:poll(100))",
    "type": "statement:functioncall"
  }, {
    "id": 920,
    "text": "local ret",
    "type": "statement:localassign"
  }, {
    "id": 921,
    "text": "ret = t[sub1]",
    "type": "statement:assign"
  }, {
    "id": 922,
    "text": "assert_table(ret)",
    "type": "statement:functioncall"
  }, {
    "id": 923,
    "text": "assert_equal(\"hello\", ret[1])",
    "type": "statement:functioncall"
  }, {
    "id": 924,
    "text": "assert_equal(false, ret[2])",
    "type": "statement:functioncall"
  }, {
    "id": 925,
    "text": "ret = t[sub2]",
    "type": "statement:assign"
  }, {
    "id": 926,
    "text": "ret = t[sub3]",
    "type": "statement:assign"
  }, {
    "id": 927,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 928,
    "text": "function test_remove()\r\n  local t  = {}\r\n\r\n  poller:add(sub1, zmq.POLLIN, function(skt) assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end)\r\n  poller:add(sub2, zmq.POLLIN, function(skt) fail(\"poller remove fail\") end)\r\n  poller:add(sub3, zmq.POLLIN, function(skt) fail(\"poller modify fail\") end)\r\n\r\n  poller:remove(sub2)\r\n  poller:modify(sub3, zmq.POLLIN, function(skt) assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end)\r\n\r\n  assert_true(pub:send(\"hello\"))\r\n\r\n  assert_equal(2, poller:poll(100))\r\n  local ret\r\n  ret = t[sub1] assert_table(ret) assert_equal(\"hello\", ret[1]) assert_equal(false, ret[2])\r\n  ret = t[sub3] assert_table(ret) assert_equal(\"hello\", ret[1]) assert_equal(false, ret[2])\r\nend",
    "type": "function"
  }, {
    "id": 929,
    "text": "local t  = {}",
    "type": "statement:localassign"
  }, {
    "id": 930,
    "text": "poller:add(sub2, zmq.POLLIN, function(skt) fail(\"poller remove fail\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 931,
    "text": "fail(\"poller remove fail\")",
    "type": "statement:functioncall"
  }, {
    "id": 932,
    "text": "poller:add(sub3, zmq.POLLIN, function(skt) fail(\"poller modify fail\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 933,
    "text": "fail(\"poller modify fail\")",
    "type": "statement:functioncall"
  }, {
    "id": 934,
    "text": "poller:remove(sub2)",
    "type": "statement:functioncall"
  }, {
    "id": 935,
    "text": "poller:modify(sub3, zmq.POLLIN, function(skt) assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end)",
    "type": "statement:functioncall"
  }, {
    "id": 936,
    "text": "assert_equal(2, poller:poll(100))",
    "type": "statement:functioncall"
  }, {
    "id": 937,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 938,
    "text": "function test_remove_on_poll()\r\n  local t  = {}\r\n\r\n  poller:add(sub1, zmq.POLLIN, function(skt) assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt)) .. \"`\") t[skt] = {skt:recv()} end)\r\n  poller:add(sub2, zmq.POLLIN, function(skt) assert_equal(sub2, skt, \" expect socket `sub2` got `\" .. (names[skt] or tostring(skt)) .. \"`\") t[skt] = {skt:recv()} poller:remove(skt) end)\r\n  poller:add(sub3, zmq.POLLIN, function(skt) assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt)) .. \"`\") t[skt] = {skt:recv()} end)\r\n\r\n  assert_true(pub:send(\"hello\"))\r\n\r\n  assert_equal(3, poller:poll(100))\r\n  local ret\r\n  ret = t[sub1] assert_table(ret) assert_equal(\"hello\", ret[1]) assert_equal(false, ret[2])\r\n  ret = t[sub2] assert_table(ret) assert_equal(\"hello\", ret[1]) assert_equal(false, ret[2])\r\n  ret = t[sub3] assert_table(ret) assert_equal(\"hello\", ret[1]) assert_equal(false, ret[2])\r\nend",
    "type": "function"
  }, {
    "id": 939,
    "text": "poller:add(sub1, zmq.POLLIN, function(skt) assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt)) .. \"`\") t[skt] = {skt:recv()} end)",
    "type": "statement:functioncall"
  }, {
    "id": 940,
    "text": "assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt)) .. \"`\")",
    "type": "statement:functioncall"
  }, {
    "id": 941,
    "text": "poller:add(sub2, zmq.POLLIN, function(skt) assert_equal(sub2, skt, \" expect socket `sub2` got `\" .. (names[skt] or tostring(skt)) .. \"`\") t[skt] = {skt:recv()} poller:remove(skt) end)",
    "type": "statement:functioncall"
  }, {
    "id": 942,
    "text": "assert_equal(sub2, skt, \" expect socket `sub2` got `\" .. (names[skt] or tostring(skt)) .. \"`\")",
    "type": "statement:functioncall"
  }, {
    "id": 943,
    "text": "poller:add(sub3, zmq.POLLIN, function(skt) assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt)) .. \"`\") t[skt] = {skt:recv()} end)",
    "type": "statement:functioncall"
  }, {
    "id": 944,
    "text": "assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt)) .. \"`\")",
    "type": "statement:functioncall"
  }, {
    "id": 945,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 946,
    "text": "local function dump(str)\r\n  return (string.gsub(str,\".\", function(ch)\r\n    return (string.format(\"\\\\%.3d\", string.byte(ch)))\r\n  end))\r\nend",
    "type": "function"
  }, {
    "id": 947,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 948,
    "text": "function test_encode()\r\n  local encoded = assert_string(zmq.z85_encode(key_bin))\r\n  assert_equal(key_txt, encoded)\r\nend",
    "type": "function"
  }, {
    "id": 949,
    "text": "local encoded = assert_string(zmq.z85_encode(key_bin))",
    "type": "statement:localassign"
  }, {
    "id": 950,
    "text": "assert_equal(key_txt, encoded)",
    "type": "statement:functioncall"
  }, {
    "id": 951,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 952,
    "text": "local function encoden(str, n) return zmq.z85_encode(str:rep(n)) end",
    "type": "function"
  }, {
    "id": 953,
    "text": "local function decoden(str, n) return zmq.z85_decode(str:rep(n)) end",
    "type": "function"
  }, {
    "id": 954,
    "text": "function test_encodeN()\r\n  local encoded = assert_string(encoden(key_bin, 100))\r\n  assert_equal(key_txt:rep(100), encoded)\r\n\r\n  local encoded = assert_string(encoden(key_bin, 1000))\r\n  assert_equal(key_txt:rep(1000), encoded)\r\nend",
    "type": "function"
  }, {
    "id": 955,
    "text": "local encoded = assert_string(encoden(key_bin, 100))",
    "type": "statement:localassign"
  }, {
    "id": 956,
    "text": "assert_equal(key_txt:rep(100), encoded)",
    "type": "statement:functioncall"
  }, {
    "id": 957,
    "text": "local encoded = assert_string(encoden(key_bin, 1000))",
    "type": "statement:localassign"
  }, {
    "id": 958,
    "text": "assert_equal(key_txt:rep(1000), encoded)",
    "type": "statement:functioncall"
  }, {
    "id": 959,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 960,
    "text": "function test_decode()\r\n  local decoded = assert_string(zmq.z85_decode(key_txt))\r\n  assert_equal(dump(key_bin), dump(decoded))\r\nend",
    "type": "function"
  }, {
    "id": 961,
    "text": "local decoded = assert_string(zmq.z85_decode(key_txt))",
    "type": "statement:localassign"
  }, {
    "id": 962,
    "text": "assert_equal(dump(key_bin), dump(decoded))",
    "type": "statement:functioncall"
  }, {
    "id": 963,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 964,
    "text": "function test_decodeN()\r\n  local decoded = assert_string(decoden(key_txt, 100))\r\n  assert_equal(dump(key_bin:rep(100)), dump(decoded))\r\n\r\n  local decoded = assert_string(decoden(key_txt, 1000))\r\n  assert_equal(dump(key_bin:rep(1000)), dump(decoded))\r\nend",
    "type": "function"
  }, {
    "id": 965,
    "text": "local decoded = assert_string(decoden(key_txt, 100))",
    "type": "statement:localassign"
  }, {
    "id": 966,
    "text": "assert_equal(dump(key_bin:rep(100)), dump(decoded))",
    "type": "statement:functioncall"
  }, {
    "id": 967,
    "text": "local decoded = assert_string(decoden(key_txt, 1000))",
    "type": "statement:localassign"
  }, {
    "id": 968,
    "text": "assert_equal(dump(key_bin:rep(1000)), dump(decoded))",
    "type": "statement:functioncall"
  }, {
    "id": 969,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 970,
    "text": "function test_encode_wrong_size()\r\n  assert_error(function() zmq.z85_encode(key_bin .. \"1\") end)\r\nend",
    "type": "function"
  }, {
    "id": 971,
    "text": "assert_error(function() zmq.z85_encode(key_bin .. \"1\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 972,
    "text": "zmq.z85_encode(key_bin .. \"1\")",
    "type": "statement:functioncall"
  }, {
    "id": 973,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 974,
    "text": "function test_decode_wrong_size()\r\n  assert_error(function() zmq.z85_decode(key_txt .. \"2\") end)\r\nend",
    "type": "function"
  }, {
    "id": 975,
    "text": "assert_error(function() zmq.z85_decode(key_txt .. \"2\") end)",
    "type": "statement:functioncall"
  }, {
    "id": 976,
    "text": "zmq.z85_decode(key_txt .. \"2\")",
    "type": "statement:functioncall"
  }, {
    "id": 977,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 978,
    "text": "function test_generate_z85()\r\n  local pub, sec = zmq.curve_keypair()\r\n  if not pub then\r\n    assert(error_is(sec, zmq.errors.ENOTSUP))\r\n    return skip(\"you need build libzmq with libsodium\")\r\n  end\r\n  assert_string(pub)\r\n  assert_string(sec)\r\n  assert_equal(40, #pub)\r\n  assert_equal(40, #sec)\r\nend",
    "type": "function"
  }, {
    "id": 979,
    "text": "local pub, sec = zmq.curve_keypair()",
    "type": "statement:localassign"
  }, {
    "id": 980,
    "text": "if not pub then\r\n    assert(error_is(sec, zmq.errors.ENOTSUP))\r\n    return skip(\"you need build libzmq with libsodium\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 981,
    "text": "assert(error_is(sec, zmq.errors.ENOTSUP))",
    "type": "statement:functioncall"
  }, {
    "id": 982,
    "text": "assert_string(pub)",
    "type": "statement:functioncall"
  }, {
    "id": 983,
    "text": "assert_string(sec)",
    "type": "statement:functioncall"
  }, {
    "id": 984,
    "text": "assert_equal(40, #pub)",
    "type": "statement:functioncall"
  }, {
    "id": 985,
    "text": "assert_equal(40, #sec)",
    "type": "statement:functioncall"
  }, {
    "id": 986,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 987,
    "text": "function test_generate_bin()\r\n  local pub, sec = zmq.curve_keypair(true)\r\n  if not pub then\r\n    assert(error_is(sec, zmq.errors.ENOTSUP))\r\n    return skip(\"you need build libzmq with libsodium\")\r\n  end\r\n  assert_string(pub)\r\n  assert_string(sec)\r\n  assert_equal(32, #pub)\r\n  assert_equal(32, #sec)\r\nend",
    "type": "function"
  }, {
    "id": 988,
    "text": "local pub, sec = zmq.curve_keypair(true)",
    "type": "statement:localassign"
  }, {
    "id": 989,
    "text": "assert_equal(32, #pub)",
    "type": "statement:functioncall"
  }, {
    "id": 990,
    "text": "assert_equal(32, #sec)",
    "type": "statement:functioncall"
  }, {
    "id": 991,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 992,
    "text": "function setup()\r\n  loop  = assert(zloop.new())\r\n  timer = ztimer.monotonic()\r\nend",
    "type": "function"
  }, {
    "id": 993,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 994,
    "text": "function teardown()\r\n  loop:destroy()\r\n  wait(500) -- for TCP time to release IP address\r\nend",
    "type": "function"
  }, {
    "id": 995,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 996,
    "text": "function test_monitor()\r\n  local counter = 0\r\n  local monitor_called = false\r\n  local address = \"<NOT ACCEPTED>\"\r\n\r\n  local function echo(skt)\r\n    local msg = assert_table(skt:recv_all())\r\n    assert_true(skt:send_all(msg))\r\n    counter = counter + 1\r\n  end\r\n\r\n  local srv = assert(is_zsocket(loop:create_socket(zmq.REP, {\r\n    linger = 0, sndtimeo = 100, rcvtimeo = 100;\r\n    bind = {\r\n      \"inproc://test.zmq\";\r\n      \"tcp://*:9000\";\r\n    }\r\n  })))\r\n  loop:add_socket(srv, echo)\r\n\r\n  if not srv.monitor then\r\n    return skip(\"this version of LZMQ does not support socket monitor\")\r\n  end\r\n\r\n  if not srv.recv_event then\r\n    return skip(\"this version of LZMQ does not support receive event\")\r\n  end\r\n\r\n  local monitor_endpoint = assert_string(srv:monitor())\r\n\r\n  assert(is_zsocket(loop:add_new_connect(zmq.PAIR, monitor_endpoint, function(sok)\r\n    monitor_called = true\r\n    local event, data, addr = sok:recv_event()\r\n    assert_number(event, data)\r\n    assert_number(data)\r\n    if addr then assert_string(addr) end\r\n\r\n    if event == zmq.EVENT_ACCEPTED then\r\n      address = addr\r\n    end\r\n  end)))\r\n\r\n  wait()\r\n\r\n  local cli = assert(is_zsocket(loop:create_socket(zmq.REQ, {\r\n    linger = 0, sndtimeo = 100, rcvtimeo = 100;\r\n    connect = \"tcp://127.0.0.1:9000\";\r\n  })))\r\n  loop:add_socket(cli, echo)\r\n\r\n  -- run ball\r\n  loop:add_once(10, function() cli:send_all{'hello', 'world'} end)\r\n\r\n  -- time to play\r\n  loop:add_once(500, function() loop:interrupt() end)\r\n\r\n  loop:start()\r\n\r\n  loop:destroy()\r\n\r\n  assert_true(monitor_called)\r\n  assert_string(address)\r\n  assert_match(\"^tcp://%d+%.%d+%.%d+%.%d+:%d+$\", address)\r\nend",
    "type": "function"
  }, {
    "id": 997,
    "text": "local monitor_called = false",
    "type": "statement:localassign"
  }, {
    "id": 998,
    "text": "local address = \"<NOT ACCEPTED>\"",
    "type": "statement:localassign"
  }, {
    "id": 999,
    "text": "local srv = assert(is_zsocket(loop:create_socket(zmq.REP, {\r\n    linger = 0, sndtimeo = 100, rcvtimeo = 100;\r\n    bind = {\r\n      \"inproc://test.zmq\";\r\n      \"tcp://*:9000\";\r\n    }\r\n  })))",
    "type": "statement:localassign"
  }, {
    "id": 1000,
    "text": "loop:add_socket(srv, echo)",
    "type": "statement:functioncall"
  }, {
    "id": 1001,
    "text": "if not srv.monitor then\r\n    return skip(\"this version of LZMQ does not support socket monitor\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 1002,
    "text": "if not srv.recv_event then\r\n    return skip(\"this version of LZMQ does not support receive event\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 1003,
    "text": "local monitor_endpoint = assert_string(srv:monitor())",
    "type": "statement:localassign"
  }, {
    "id": 1004,
    "text": "assert(is_zsocket(loop:add_new_connect(zmq.PAIR, monitor_endpoint, function(sok)\r\n    monitor_called = true\r\n    local event, data, addr = sok:recv_event()\r\n    assert_number(event, data)\r\n    assert_number(data)\r\n    if addr then assert_string(addr) end\r\n\r\n    if event == zmq.EVENT_ACCEPTED then\r\n      address = addr\r\n    end\r\n  end)))",
    "type": "statement:functioncall"
  }, {
    "id": 1005,
    "text": "monitor_called = true",
    "type": "statement:assign"
  }, {
    "id": 1006,
    "text": "local event, data, addr = sok:recv_event()",
    "type": "statement:localassign"
  }, {
    "id": 1007,
    "text": "assert_number(event, data)",
    "type": "statement:functioncall"
  }, {
    "id": 1008,
    "text": "assert_number(data)",
    "type": "statement:functioncall"
  }, {
    "id": 1009,
    "text": "if addr then assert_string(addr) end",
    "type": "statement:if"
  }, {
    "id": 1010,
    "text": "assert_string(addr)",
    "type": "statement:functioncall"
  }, {
    "id": 1011,
    "text": "if event == zmq.EVENT_ACCEPTED then\r\n      address = addr\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1012,
    "text": "address = addr",
    "type": "statement:assign"
  }, {
    "id": 1013,
    "text": "local cli = assert(is_zsocket(loop:create_socket(zmq.REQ, {\r\n    linger = 0, sndtimeo = 100, rcvtimeo = 100;\r\n    connect = \"tcp://127.0.0.1:9000\";\r\n  })))",
    "type": "statement:localassign"
  }, {
    "id": 1014,
    "text": "loop:add_socket(cli, echo)",
    "type": "statement:functioncall"
  }, {
    "id": 1015,
    "text": "loop:add_once(500, function() loop:interrupt() end)",
    "type": "statement:functioncall"
  }, {
    "id": 1016,
    "text": "assert_true(monitor_called)",
    "type": "statement:functioncall"
  }, {
    "id": 1017,
    "text": "assert_string(address)",
    "type": "statement:functioncall"
  }, {
    "id": 1018,
    "text": "assert_match(\"^tcp://%d+%.%d+%.%d+%.%d+:%d+$\", address)",
    "type": "statement:functioncall"
  }, {
    "id": 1019,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1020,
    "text": "local function echo(skt)\r\n    local msg = assert_table(skt:recv_all())\r\n    assert_true(skt:send_all(msg))\r\n    counter = counter + 1\r\n  end",
    "type": "function"
  }, {
    "id": 1021,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1022,
    "text": "function test_monitor_with_addr()\r\n  local srv = assert(is_zsocket(loop:create_socket(zmq.REP)))\r\n  if not srv.monitor then\r\n    return skip(\"this version of LZMQ does not support socket monitor\")\r\n  end\r\n\r\n  local addr = \"inproc://lzmq.monitor.test\"\r\n  assert_equal(addr, srv:monitor(addr))\r\nend",
    "type": "function"
  }, {
    "id": 1023,
    "text": "local srv = assert(is_zsocket(loop:create_socket(zmq.REP)))",
    "type": "statement:localassign"
  }, {
    "id": 1024,
    "text": "local addr = \"inproc://lzmq.monitor.test\"",
    "type": "statement:localassign"
  }, {
    "id": 1025,
    "text": "assert_equal(addr, srv:monitor(addr))",
    "type": "statement:functioncall"
  }, {
    "id": 1026,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1027,
    "text": "function test_monitor_with_wrong_addr()\r\n  local srv = assert(is_zsocket(loop:create_socket(zmq.REP)))\r\n  if not srv.monitor then\r\n    return skip(\"this version of LZMQ does not support socket monitor\")\r\n  end\r\n\r\n  local addr = \"lzmq.monitor.test\"\r\n  local ok, err = srv:monitor(addr)\r\n  assert_nil(ok)\r\n  assert(error_is(err, zmq.errors.EINVAL))\r\nend",
    "type": "function"
  }, {
    "id": 1028,
    "text": "local addr = \"lzmq.monitor.test\"",
    "type": "statement:localassign"
  }, {
    "id": 1029,
    "text": "local ok, err = srv:monitor(addr)",
    "type": "statement:localassign"
  }, {
    "id": 1030,
    "text": "assert(error_is(err, zmq.errors.EINVAL))",
    "type": "statement:functioncall"
  }, {
    "id": 1031,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1032,
    "text": "function test_monitor_without_addr()\r\n  local srv = assert(is_zsocket(loop:create_socket(zmq.REP)))\r\n  if not srv.monitor then\r\n    return skip(\"this version of LZMQ does not support socket monitor\")\r\n  end\r\n\r\n  assert_match(\"^inproc://lzmq%.monitor%.[0-9a-fA-FxX]+$\", srv:monitor())\r\nend",
    "type": "function"
  }, {
    "id": 1033,
    "text": "assert_match(\"^inproc://lzmq%.monitor%.[0-9a-fA-FxX]+$\", srv:monitor())",
    "type": "statement:functioncall"
  }, {
    "id": 1034,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1035,
    "text": "function test_monitor_without_addr_with_event()\r\n  local srv = assert(is_zsocket(loop:create_socket(zmq.REP)))\r\n  if not srv.monitor then\r\n    return skip(\"this version of LZMQ does not support socket monitor\")\r\n  end\r\n\r\n  assert_match(\"^inproc://lzmq%.monitor%.[0-9a-fA-FxX]+$\", srv:monitor(1))\r\nend",
    "type": "function"
  }, {
    "id": 1036,
    "text": "assert_match(\"^inproc://lzmq%.monitor%.[0-9a-fA-FxX]+$\", srv:monitor(1))",
    "type": "statement:functioncall"
  }, {
    "id": 1037,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1038,
    "text": "function setup()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  rep = assert(is_zsocket(ctx:socket{zmq.REP, bind    = ECHO_ADDR}))\r\n  s1  = assert(is_zsocket(ctx:socket{zmq.REQ, connect = ECHO_ADDR}))\r\n  wait()\r\nend",
    "type": "function"
  }, {
    "id": 1039,
    "text": "rep = assert(is_zsocket(ctx:socket{zmq.REP, bind    = ECHO_ADDR}))",
    "type": "statement:assign"
  }, {
    "id": 1040,
    "text": "s1  = assert(is_zsocket(ctx:socket{zmq.REQ, connect = ECHO_ADDR}))",
    "type": "statement:assign"
  }, {
    "id": 1041,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1042,
    "text": "function teardown()\r\n  if rep then rep:close() end\r\n  if ctx then ctx:destroy() end\r\nend",
    "type": "function"
  }, {
    "id": 1043,
    "text": "if rep then rep:close() end",
    "type": "statement:if"
  }, {
    "id": 1044,
    "text": "rep:close()",
    "type": "statement:functioncall"
  }, {
    "id": 1045,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1046,
    "text": "function test_lightuserdata()\r\n  local h = assert(s1:lightuserdata())\r\nend",
    "type": "function"
  }, {
    "id": 1047,
    "text": "local h = assert(s1:lightuserdata())",
    "type": "statement:localassign"
  }, {
    "id": 1048,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1049,
    "text": "function test_wrap_socket()\r\n  local h = assert(s1:lightuserdata())\r\n  s2 =  assert(is_zsocket(zmq.init_socket(h)))\r\n  assert_nil(s2:context())\r\n  assert_equal(socket_count(ctx, 2))\r\nend",
    "type": "function"
  }, {
    "id": 1050,
    "text": "s2 =  assert(is_zsocket(zmq.init_socket(h)))",
    "type": "statement:assign"
  }, {
    "id": 1051,
    "text": "assert_nil(s2:context())",
    "type": "statement:functioncall"
  }, {
    "id": 1052,
    "text": "assert_equal(socket_count(ctx, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 1053,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1054,
    "text": "function test_send_recv()\r\n  local h = assert(s1:lightuserdata())\r\n  s2 =  assert(is_zsocket(zmq.init_socket(h)))\r\n  assert_true(s1:send(\"hello\"))\r\n  assert_equal(\"hello\", rep:recv())\r\n  assert_true(rep:send(\"world\"))\r\n  assert_equal(\"world\", s2:recv())\r\nend",
    "type": "function"
  }, {
    "id": 1055,
    "text": "assert_true(s1:send(\"hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 1056,
    "text": "assert_equal(\"hello\", rep:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 1057,
    "text": "assert_true(rep:send(\"world\"))",
    "type": "statement:functioncall"
  }, {
    "id": 1058,
    "text": "assert_equal(\"world\", s2:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 1059,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1060,
    "text": "function test_swap()\r\n  local h1 = assert(s1:lightuserdata())\r\n  local h2 = assert(rep:reset_handle(h1))\r\n  assert_equal(h1, s1:reset_handle(h2))\r\n\r\n  assert_true(rep:send(\"hello\"))\r\n  assert_equal(\"hello\", s1:recv())\r\n  assert_true(s1:send(\"world\"))\r\n  assert_equal(\"world\", rep:recv())\r\nend",
    "type": "function"
  }, {
    "id": 1061,
    "text": "local h1 = assert(s1:lightuserdata())",
    "type": "statement:localassign"
  }, {
    "id": 1062,
    "text": "local h2 = assert(rep:reset_handle(h1))",
    "type": "statement:localassign"
  }, {
    "id": 1063,
    "text": "assert_equal(h1, s1:reset_handle(h2))",
    "type": "statement:functioncall"
  }, {
    "id": 1064,
    "text": "assert_true(rep:send(\"hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 1065,
    "text": "assert_equal(\"hello\", s1:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 1066,
    "text": "assert_true(s1:send(\"world\"))",
    "type": "statement:functioncall"
  }, {
    "id": 1067,
    "text": "assert_equal(\"world\", rep:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 1068,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1069,
    "text": "function test_reset_handle()\r\n  local h1 = assert(s1:lightuserdata())\r\n  assert_error(function() rep:reset_handle() end)\r\n  assert_true(rep:reset_handle(h1, false, true)) -- close handle\r\nend",
    "type": "function"
  }, {
    "id": 1070,
    "text": "assert_error(function() rep:reset_handle() end)",
    "type": "statement:functioncall"
  }, {
    "id": 1071,
    "text": "rep:reset_handle()",
    "type": "statement:functioncall"
  }, {
    "id": 1072,
    "text": "assert_true(rep:reset_handle(h1, false, true))",
    "type": "statement:functioncall"
  }, {
    "id": 1073,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1074,
    "text": "function test_reset_handle_own()\r\n  local h1 = assert(s1:lightuserdata())\r\n  local h2 = assert(rep:reset_handle(h1, false)) -- do not close h1 after rep:close()\r\n  assert_true(rep:close())\r\n\r\n  -- anchor h2 to socket\r\n  rep = zmq.init_socket(h2)\r\n  rep:reset_handle(h2, true)\r\n\r\n  assert_true(s1:bind(\"inproc://test\"))\r\nend",
    "type": "function"
  }, {
    "id": 1075,
    "text": "local h2 = assert(rep:reset_handle(h1, false))",
    "type": "statement:localassign"
  }, {
    "id": 1076,
    "text": "assert_true(rep:close())",
    "type": "statement:functioncall"
  }, {
    "id": 1077,
    "text": "rep = zmq.init_socket(h2)",
    "type": "statement:assign"
  }, {
    "id": 1078,
    "text": "rep:reset_handle(h2, true)",
    "type": "statement:functioncall"
  }, {
    "id": 1079,
    "text": "assert_true(s1:bind(\"inproc://test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 1080,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1081,
    "text": "function test_reset_handle_nochange_own()\r\n  local h1 = assert(s1:lightuserdata())\r\n  local h2 = assert(rep:reset_handle(h1)) -- by default rep close handle on `close` method\r\n  assert_true(rep:close())\r\n\r\n  assert_nil(s1:bind(\"inproc://test\"))\r\n\r\n  -- close h2\r\n  s1:reset_handle(h2, true)\r\nend",
    "type": "function"
  }, {
    "id": 1082,
    "text": "assert_nil(s1:bind(\"inproc://test\"))",
    "type": "statement:functioncall"
  }, {
    "id": 1083,
    "text": "s1:reset_handle(h2, true)",
    "type": "statement:functioncall"
  }, {
    "id": 1084,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1085,
    "text": "function test_reset_handle_nochange2_own()\r\n  local h1 = assert(s1:lightuserdata())\r\n  local h2 = assert(rep:reset_handle(h1, false)) -- do not close h1 after rep:close()\r\n  assert(rep:reset_handle(h1))                   -- do not change on_close bihavior\r\n\r\n  assert_true(rep:close())\r\n\r\n  -- anchor h2 to socket\r\n  rep = zmq.init_socket(h2)\r\n  rep:reset_handle(h2, true)\r\n\r\n  assert_true(s1:bind(\"inproc://test\"))\r\nend",
    "type": "function"
  }, {
    "id": 1086,
    "text": "assert(rep:reset_handle(h1))",
    "type": "statement:functioncall"
  }, {
    "id": 1087,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1088,
    "text": "function setup()\r\n  ctx = assert(is_zcontext(zmq.context()))\r\n  skt = assert(is_zsocket(ctx:socket(zmq.PUB)))\r\n  local monitor_endpoint = assert_string(skt:monitor())\r\n  mon = assert(is_zsocket(ctx:socket{zmq.PAIR,\r\n    rcvtimeo = timeout, connect = monitor_endpoint\r\n  }))\r\nend",
    "type": "function"
  }, {
    "id": 1089,
    "text": "skt = assert(is_zsocket(ctx:socket(zmq.PUB)))",
    "type": "statement:assign"
  }, {
    "id": 1090,
    "text": "local monitor_endpoint = assert_string(skt:monitor())",
    "type": "statement:localassign"
  }, {
    "id": 1091,
    "text": "mon = assert(is_zsocket(ctx:socket{zmq.PAIR,\r\n    rcvtimeo = timeout, connect = monitor_endpoint\r\n  }))",
    "type": "statement:assign"
  }, {
    "id": 1092,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1093,
    "text": "function teardown()\r\n  if ctx then ctx:destroy()             end\r\nend",
    "type": "function"
  }, {
    "id": 1094,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1095,
    "text": "function test()\r\n  local timer = ztimer.monotonic():start()\r\n  assert_nil( mon:recv_event() )\r\n  local elapsed = timer:stop()\r\n  assert(elapsed > (timeout-epselon), \"Expeted \" .. timeout .. \"(+/-\" .. epselon .. \") got: \" .. elapsed)\r\n  assert(elapsed < (timeout+epselon), \"Expeted \" .. timeout .. \"(+/-\" .. epselon .. \") got: \" .. elapsed)\r\n\r\n  timer:start()\r\n  assert_nil( mon:recv_event(zmq.DONTWAIT) )\r\n  elapsed = timer:stop()\r\n  assert(elapsed < (epselon), \"Expeted less then \" .. epselon .. \" got: \" .. elapsed)\r\nend",
    "type": "function"
  }, {
    "id": 1096,
    "text": "local timer = ztimer.monotonic():start()",
    "type": "statement:localassign"
  }, {
    "id": 1097,
    "text": "assert_nil( mon:recv_event() )",
    "type": "statement:functioncall"
  }, {
    "id": 1098,
    "text": "assert(elapsed > (timeout-epselon), \"Expeted \" .. timeout .. \"(+/-\" .. epselon .. \") got: \" .. elapsed)",
    "type": "statement:functioncall"
  }, {
    "id": 1099,
    "text": "assert(elapsed < (timeout+epselon), \"Expeted \" .. timeout .. \"(+/-\" .. epselon .. \") got: \" .. elapsed)",
    "type": "statement:functioncall"
  }, {
    "id": 1100,
    "text": "assert_nil( mon:recv_event(zmq.DONTWAIT) )",
    "type": "statement:functioncall"
  }, {
    "id": 1101,
    "text": "elapsed = timer:stop()",
    "type": "statement:assign"
  }, {
    "id": 1102,
    "text": "assert(elapsed < (epselon), \"Expeted less then \" .. epselon .. \" got: \" .. elapsed)",
    "type": "statement:functioncall"
  }, {
    "id": 1103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1104,
    "text": "function() return skip(msg) end",
    "type": "function"
  }, {
    "id": 1105,
    "text": "function() ctx2:get_io_threads() end",
    "type": "function"
  }, {
    "id": 1106,
    "text": "function() ctx:socket() end",
    "type": "function"
  }, {
    "id": 1107,
    "text": "function() ctx:shutdown() end",
    "type": "function"
  }, {
    "id": 1108,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 1109,
    "text": "function() msg:size() end",
    "type": "function"
  }, {
    "id": 1110,
    "text": "function() msg:more() end",
    "type": "function"
  }, {
    "id": 1111,
    "text": "function() msg:data() end",
    "type": "function"
  }, {
    "id": 1112,
    "text": "function() msg:data() end",
    "type": "function"
  }, {
    "id": 1113,
    "text": "function() msg2:copy(nil) end",
    "type": "function"
  }, {
    "id": 1114,
    "text": "function() msg3:move(nil) end",
    "type": "function"
  }, {
    "id": 1115,
    "text": "function() pub:bind_to_random_port(\"tcp://127.0.0.1\", 0) end",
    "type": "function"
  }, {
    "id": 1116,
    "text": "function() pub:bind_to_random_port(\"tcp://127.0.0.1\", 1, 0) end",
    "type": "function"
  }, {
    "id": 1117,
    "text": "function()\r\n    pub:send_all({\"1\", nil, \"2\"}, 0, 1, 3)\r\n  end",
    "type": "function"
  }, {
    "id": 1118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1119,
    "text": "function()\r\n    pub:sendx(\"1\", nil, \"2\")\r\n  end",
    "type": "function"
  }, {
    "id": 1120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1121,
    "text": "function() assert_false(flag1) flag1 = true end",
    "type": "function"
  }, {
    "id": 1122,
    "text": "function() assert_false(flag1) flag1 = true end",
    "type": "function"
  }, {
    "id": 1123,
    "text": "function() flag3 = false end",
    "type": "function"
  }, {
    "id": 1124,
    "text": "function()\r\n        assert_true(flag1, \"event 1 does not stop\")\r\n        assert_true(flag2, \"event 1 does not stop\")\r\n        assert_true(flag3, \"event 1 does not stop\")\r\n        c = c + 1\r\n        if c == N then\r\n          loop:interrupt()\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 1125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1126,
    "text": "function() cli:send_all{'hello', 'world'} end",
    "type": "function"
  }, {
    "id": 1127,
    "text": "function() loop:interrupt() end",
    "type": "function"
  }, {
    "id": 1128,
    "text": "function() timer:rest() end",
    "type": "function"
  }, {
    "id": 1129,
    "text": "function() timer:elapsed() end",
    "type": "function"
  }, {
    "id": 1130,
    "text": "function() timer:rest() end",
    "type": "function"
  }, {
    "id": 1131,
    "text": "function() timer:elapsed() end",
    "type": "function"
  }, {
    "id": 1132,
    "text": "function() timer:rest()    end",
    "type": "function"
  }, {
    "id": 1133,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 1134,
    "text": "function() poller:poll() end",
    "type": "function"
  }, {
    "id": 1135,
    "text": "function() poller:add(sub1, zmq.POLLIN) end",
    "type": "function"
  }, {
    "id": 1136,
    "text": "function() poller:add(sub1) end",
    "type": "function"
  }, {
    "id": 1137,
    "text": "function() poller:add() end",
    "type": "function"
  }, {
    "id": 1138,
    "text": "function(skt) assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end",
    "type": "function"
  }, {
    "id": 1139,
    "text": "function(skt) assert_equal(sub2, skt, \" expect socket `sub2` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end",
    "type": "function"
  }, {
    "id": 1140,
    "text": "function(skt) assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end",
    "type": "function"
  }, {
    "id": 1141,
    "text": "function(skt) assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end",
    "type": "function"
  }, {
    "id": 1142,
    "text": "function(skt) fail(\"poller remove fail\") end",
    "type": "function"
  }, {
    "id": 1143,
    "text": "function(skt) fail(\"poller modify fail\") end",
    "type": "function"
  }, {
    "id": 1144,
    "text": "function(skt) assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt))) t[skt] = {skt:recv()} end",
    "type": "function"
  }, {
    "id": 1145,
    "text": "function(skt) assert_equal(sub1, skt, \" expect socket `sub1` got `\" .. (names[skt] or tostring(skt)) .. \"`\") t[skt] = {skt:recv()} end",
    "type": "function"
  }, {
    "id": 1146,
    "text": "function(skt) assert_equal(sub2, skt, \" expect socket `sub2` got `\" .. (names[skt] or tostring(skt)) .. \"`\") t[skt] = {skt:recv()} poller:remove(skt) end",
    "type": "function"
  }, {
    "id": 1147,
    "text": "function(skt) assert_equal(sub3, skt, \" expect socket `sub3` got `\" .. (names[skt] or tostring(skt)) .. \"`\") t[skt] = {skt:recv()} end",
    "type": "function"
  }, {
    "id": 1148,
    "text": "function(ch)\r\n    return (string.format(\"\\\\%.3d\", string.byte(ch)))\r\n  end",
    "type": "function"
  }, {
    "id": 1149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1150,
    "text": "function() zmq.z85_encode(key_bin .. \"1\") end",
    "type": "function"
  }, {
    "id": 1151,
    "text": "function() zmq.z85_decode(key_txt .. \"2\") end",
    "type": "function"
  }, {
    "id": 1152,
    "text": "function(sok)\r\n    monitor_called = true\r\n    local event, data, addr = sok:recv_event()\r\n    assert_number(event, data)\r\n    assert_number(data)\r\n    if addr then assert_string(addr) end\r\n\r\n    if event == zmq.EVENT_ACCEPTED then\r\n      address = addr\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 1153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1154,
    "text": "function() cli:send_all{'hello', 'world'} end",
    "type": "function"
  }, {
    "id": 1155,
    "text": "function() loop:interrupt() end",
    "type": "function"
  }, {
    "id": 1156,
    "text": "function() rep:reset_handle() end",
    "type": "function"
  }, {
    "id": 1157,
    "text": "",
    "type": "function container"
  }, {
    "id": 1158,
    "text": "absolute",
    "type": "global function"
  }, {
    "id": 1159,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 1160,
    "text": "run",
    "type": "global function"
  }, {
    "id": 1161,
    "text": "monotonic",
    "type": "global function"
  }, {
    "id": 1162,
    "text": "absolute_time",
    "type": "global function"
  }, {
    "id": 1163,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 1164,
    "text": "format",
    "type": "global function"
  }, {
    "id": 1165,
    "text": "new",
    "type": "global function"
  }, {
    "id": 1166,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 1167,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 1168,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 1169,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 1170,
    "text": "print",
    "type": "global function"
  }, {
    "id": 1171,
    "text": "is_zsocket",
    "type": "global function"
  }, {
    "id": 1172,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 1173,
    "text": "assert_function",
    "type": "global function"
  }, {
    "id": 1174,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 1175,
    "text": "assert_match",
    "type": "global function"
  }, {
    "id": 1176,
    "text": "type",
    "type": "global function"
  }, {
    "id": 1177,
    "text": "z85_encode",
    "type": "global function"
  }, {
    "id": 1178,
    "text": "msg_init_size",
    "type": "global function"
  }, {
    "id": 1179,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 1180,
    "text": "msg_init_data",
    "type": "global function"
  }, {
    "id": 1181,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 1182,
    "text": "error",
    "type": "global function"
  }, {
    "id": 1183,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 1184,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 1185,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 1186,
    "text": "curve_keypair",
    "type": "global function"
  }, {
    "id": 1187,
    "text": "assert_number",
    "type": "global function"
  }, {
    "id": 1188,
    "text": "is_zmessage",
    "type": "global function"
  }, {
    "id": 1189,
    "text": "msg_init",
    "type": "global function"
  }, {
    "id": 1190,
    "text": "assert_string",
    "type": "global function"
  }, {
    "id": 1191,
    "text": "strerror",
    "type": "global function"
  }, {
    "id": 1192,
    "text": "assert_not_equal",
    "type": "global function"
  }, {
    "id": 1193,
    "text": "version",
    "type": "global function"
  }, {
    "id": 1194,
    "text": "fail",
    "type": "global function"
  }, {
    "id": 1195,
    "text": "z85_decode",
    "type": "global function"
  }, {
    "id": 1196,
    "text": "context",
    "type": "global function"
  }, {
    "id": 1197,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 1198,
    "text": "require",
    "type": "global function"
  }, {
    "id": 1199,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 1200,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 1201,
    "text": "is_zcontext",
    "type": "global function"
  }, {
    "id": 1202,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 1203,
    "text": "init_socket",
    "type": "global function"
  }, {
    "id": 1204,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 1205,
    "text": "init_ctx",
    "type": "global function"
  }, {
    "id": 1206,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 1207,
    "text": "find",
    "type": "global function"
  }, {
    "id": 1208,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 1209,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 1210,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 1211,
    "text": "poller)",
    "type": "module"
  }, {
    "id": 1212,
    "text": "(LZMQ)",
    "type": "module"
  }, {
    "id": 1213,
    "text": "timer )",
    "type": "module"
  }, {
    "id": 1214,
    "text": "",
    "type": "variable container"
  }, {
    "id": 1215,
    "text": "",
    "type": "require container"
  }, {
    "id": 1216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1217,
    "text": "",
    "type": "unop"
  }, {
    "id": 1218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1219,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1221,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1223,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1227,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1228,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1229,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1230,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1231,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1232,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1233,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1234,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1235,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1236,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1237,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1238,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1239,
    "text": "",
    "type": "string"
  }, {
    "id": 1240,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1241,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1242,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1243,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1244,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1245,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1246,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1247,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1248,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1249,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1250,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1251,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1252,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1253,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1254,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1255,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1256,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1257,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1258,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1259,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1260,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1261,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1262,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1263,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1264,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1265,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1266,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1267,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1268,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1269,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1270,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1271,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1272,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1273,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1274,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 1275,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 1276,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 1277,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 1278,
    "text": "loop  )",
    "type": "module"
  }, {
    "id": 1279,
    "text": "",
    "type": "require local variable"
  } ]
}