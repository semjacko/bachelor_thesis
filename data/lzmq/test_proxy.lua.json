{
  "_filename": "test_proxy.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lzmq/test/test_proxy.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 9
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 33,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 33,
    "label": "has",
    "to": 43
  }, {
    "from": 33,
    "label": "has",
    "to": 44
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 33,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 45
  }, {
    "from": 33,
    "label": "has",
    "to": 46
  }, {
    "from": 33,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 35
  }, {
    "from": 48,
    "label": "has",
    "to": 36
  }, {
    "from": 48,
    "label": "has",
    "to": 37
  }, {
    "from": 48,
    "label": "has",
    "to": 38
  }, {
    "from": 48,
    "label": "has",
    "to": 43
  }, {
    "from": 48,
    "label": "has",
    "to": 44
  }, {
    "from": 48,
    "label": "has",
    "to": 46
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 26
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 29
  }, {
    "from": 53,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 35
  }, {
    "from": 55,
    "label": "has",
    "to": 36
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 37
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 38
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 55,
    "label": "has",
    "to": 65
  }, {
    "from": 55,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 35
  }, {
    "from": 67,
    "label": "has",
    "to": 36
  }, {
    "from": 67,
    "label": "has",
    "to": 37
  }, {
    "from": 67,
    "label": "has",
    "to": 38
  }, {
    "from": 67,
    "label": "has",
    "to": 43
  }, {
    "from": 67,
    "label": "has",
    "to": 44
  }, {
    "from": 67,
    "label": "has",
    "to": 46
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 6,
    "label": "calls",
    "to": 80
  }, {
    "from": 71,
    "label": "calls",
    "to": 80
  }, {
    "from": 71,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 33,
    "label": "calls",
    "to": 84
  }, {
    "from": 33,
    "label": "calls",
    "to": 84
  }, {
    "from": 71,
    "label": "calls",
    "to": 79
  }, {
    "from": 33,
    "label": "calls",
    "to": 79
  }, {
    "from": 33,
    "label": "calls",
    "to": 79
  }, {
    "from": 33,
    "label": "calls",
    "to": 79
  }, {
    "from": 33,
    "label": "calls",
    "to": 79
  }, {
    "from": 48,
    "label": "calls",
    "to": 79
  }, {
    "from": 48,
    "label": "calls",
    "to": 79
  }, {
    "from": 48,
    "label": "calls",
    "to": 79
  }, {
    "from": 48,
    "label": "calls",
    "to": 79
  }, {
    "from": 55,
    "label": "calls",
    "to": 79
  }, {
    "from": 55,
    "label": "calls",
    "to": 79
  }, {
    "from": 55,
    "label": "calls",
    "to": 79
  }, {
    "from": 55,
    "label": "calls",
    "to": 79
  }, {
    "from": 48,
    "label": "calls",
    "to": 79
  }, {
    "from": 48,
    "label": "calls",
    "to": 79
  }, {
    "from": 48,
    "label": "calls",
    "to": 79
  }, {
    "from": 48,
    "label": "calls",
    "to": 79
  }, {
    "from": 71,
    "label": "calls",
    "to": 76
  }, {
    "from": 33,
    "label": "calls",
    "to": 85
  }, {
    "from": 33,
    "label": "calls",
    "to": 85
  }, {
    "from": 33,
    "label": "calls",
    "to": 85
  }, {
    "from": 33,
    "label": "calls",
    "to": 85
  }, {
    "from": 33,
    "label": "calls",
    "to": 85
  }, {
    "from": 33,
    "label": "calls",
    "to": 85
  }, {
    "from": 33,
    "label": "calls",
    "to": 85
  }, {
    "from": 33,
    "label": "calls",
    "to": 85
  }, {
    "from": 48,
    "label": "calls",
    "to": 85
  }, {
    "from": 48,
    "label": "calls",
    "to": 85
  }, {
    "from": 55,
    "label": "calls",
    "to": 85
  }, {
    "from": 55,
    "label": "calls",
    "to": 85
  }, {
    "from": 55,
    "label": "calls",
    "to": 85
  }, {
    "from": 48,
    "label": "calls",
    "to": 85
  }, {
    "from": 48,
    "label": "calls",
    "to": 85
  }, {
    "from": 71,
    "label": "calls",
    "to": 8
  }, {
    "from": 55,
    "label": "calls",
    "to": 83
  }, {
    "from": 33,
    "label": "calls",
    "to": 77
  }, {
    "from": 55,
    "label": "calls",
    "to": 77
  }, {
    "from": 71,
    "label": "calls",
    "to": 21
  }, {
    "from": 71,
    "label": "calls",
    "to": 21
  }, {
    "from": 71,
    "label": "calls",
    "to": 21
  }, {
    "from": 71,
    "label": "calls",
    "to": 18
  }, {
    "from": 71,
    "label": "calls",
    "to": 78
  }, {
    "from": 71,
    "label": "calls",
    "to": 81
  }, {
    "from": 71,
    "label": "calls",
    "to": 81
  }, {
    "from": 71,
    "label": "calls",
    "to": 16
  }, {
    "from": 71,
    "label": "calls",
    "to": 20
  }, {
    "from": 22,
    "label": "calls",
    "to": 72
  }, {
    "from": 71,
    "label": "calls",
    "to": 82
  }, {
    "from": 71,
    "label": "calls",
    "to": 82
  }, {
    "from": 71,
    "label": "calls",
    "to": 82
  }, {
    "from": 71,
    "label": "calls",
    "to": 82
  }, {
    "from": 48,
    "label": "calls",
    "to": 73
  }, {
    "from": 48,
    "label": "calls",
    "to": 73
  }, {
    "from": 71,
    "label": "calls",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 71,
    "label": "declares",
    "to": 2
  }, {
    "from": 71,
    "label": "declares",
    "to": 6
  }, {
    "from": 71,
    "label": "declares",
    "to": 8
  }, {
    "from": 71,
    "label": "declares",
    "to": 16
  }, {
    "from": 71,
    "label": "declares",
    "to": 18
  }, {
    "from": 71,
    "label": "declares",
    "to": 20
  }, {
    "from": 71,
    "label": "declares",
    "to": 21
  }, {
    "from": 71,
    "label": "declares",
    "to": 22
  }, {
    "from": 71,
    "label": "declares",
    "to": 25
  }, {
    "from": 71,
    "label": "declares",
    "to": 28
  }, {
    "from": 71,
    "label": "declares",
    "to": 33
  }, {
    "from": 71,
    "label": "declares",
    "to": 48
  }, {
    "from": 71,
    "label": "declares",
    "to": 51
  }, {
    "from": 71,
    "label": "declares",
    "to": 53
  }, {
    "from": 71,
    "label": "declares",
    "to": 55
  }, {
    "from": 71,
    "label": "declares",
    "to": 67
  }, {
    "from": 71,
    "label": "declares",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 86
  }, {
    "from": 1,
    "label": "contains",
    "to": 87
  }, {
    "from": 86,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 86,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 86,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 86,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 86,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 86,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 86,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 86,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 86,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 86,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 86,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 86,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 86,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 87,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "requires",
    "to": 75
  }, {
    "from": 87,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "requires",
    "to": 116
  }, {
    "from": 87,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "requires",
    "to": 118
  }, {
    "from": 87,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "requires",
    "to": 120
  }, {
    "from": 121,
    "label": "requires",
    "to": 116
  }, {
    "from": 122,
    "label": "requires",
    "to": 118
  }, {
    "from": 123,
    "label": "requires",
    "to": 118
  }, {
    "from": 124,
    "label": "requires",
    "to": 116
  }, {
    "from": 125,
    "label": "requires",
    "to": 118
  }, {
    "from": 126,
    "label": "requires",
    "to": 116
  }, {
    "from": 127,
    "label": "requires",
    "to": 118
  }, {
    "from": 128,
    "label": "requires",
    "to": 116
  }, {
    "from": 129,
    "label": "requires",
    "to": 118
  }, {
    "from": 130,
    "label": "requires",
    "to": 116
  }, {
    "from": 131,
    "label": "requires",
    "to": 120
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_proxy",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function zversion(zmq)\r\n  local version = zmq.version()\r\n  return string.format(\"%d.%d.%d\", version[1], version[2], version[3])\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local version = zmq.version()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function iszvereq(zmq, mi, ma, bu)\r\n  local version = zmq.version()\r\n  return (mi == version[1]) and (ma == version[2]) and (bu == version[3])\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function (zmq, major, minor, patch)\r\n  local ZMQ_VERSION_MAJOR, ZMQ_VERSION_MINOR, ZMQ_VERSION_PATCH = zmq.version(true)\r\n\r\n  if ZMQ_VERSION_MAJOR < major then return false end\r\n  if ZMQ_VERSION_MAJOR > major then return true  end\r\n  if ZMQ_VERSION_MINOR < minor then return false end\r\n  if ZMQ_VERSION_MINOR > minor then return true  end\r\n  if ZMQ_VERSION_PATCH < patch then return false  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local ZMQ_VERSION_MAJOR, ZMQ_VERSION_MINOR, ZMQ_VERSION_PATCH = zmq.version(true)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if ZMQ_VERSION_MAJOR < major then return false end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "if ZMQ_VERSION_MAJOR > major then return true  end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if ZMQ_VERSION_MINOR < minor then return false end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "if ZMQ_VERSION_MINOR > minor then return true  end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "if ZMQ_VERSION_PATCH < patch then return false  end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function (zmq, major, minor, patch)\r\n  local ZMQ_VERSION_MAJOR, ZMQ_VERSION_MINOR, ZMQ_VERSION_PATCH = zmq.version(true)\r\n\r\n  return ZMQ_VERSION_MAJOR == major\r\n     and ZMQ_VERSION_MINOR == minor\r\n     and ZMQ_VERSION_PATCH == patch\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function (zmq, major, minor, patch)\r\n  return is_zmq_eq(zmq, major, minor, patch)\r\n    or not is_zmq_ge(zmq, major, minor, patch)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 21,
    "text": "function(msg) return function() return skip(msg) end end",
    "type": "function"
  }, {
    "id": 22,
    "text": "local function wait(ms)\r\n  ztimer.sleep(ms or 100)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "ztimer.sleep(ms or 100)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function setup()\r\n  ctx = zmq:context()\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "ctx = zmq:context()",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function teardown()\r\n  ctx:destroy(0)  -- close context\r\n  if thread then thread:join() end -- close thread\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "ctx:destroy(0)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "if thread then thread:join() end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "thread:join()",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function test_capture()\r\n  thread, pipe = zthreads.fork(ctx, include_thread .. [[\r\n    local pipe, cli_endpoint, srv_endpoint = ...\r\n\r\n    local fe = assert('ROUTER:', ctx:socket{zmq.ROUTER, connect = cli_endpoint})\r\n    local be = assert('DEALER:', ctx:socket{zmq.DEALER, connect = srv_endpoint})\r\n\r\n    local ok, err = zmq.proxy(fe, be, pipe)\r\n\r\n    ctx:destroy(0)\r\n  --]], cli_endpoint, srv_endpoint)\r\n\r\n  local cli = assert(ctx:socket{zmq.REQ, bind = cli_endpoint, rcvtimeo=1000})\r\n  local srv = assert(ctx:socket{zmq.REP, bind = srv_endpoint, rcvtimeo=1000})\r\n\r\n  thread:start()\r\n\r\n  assert(cli:send(\"hello\"))\r\n\r\n  local msg = assert_table(pipe:recv_all())\r\n  assert_equal(3, #msg) -- id, empty, message\r\n  assert_equal('', msg[2])\r\n  assert_equal('hello',  msg[3])\r\n\r\n  assert_equal('hello', srv:recv())\r\n\r\n  ----------------------------\r\n  assert(srv:send(\"world\"))\r\n\r\n  local msg = assert_table(pipe:recv_all())\r\n  assert_equal(3, #msg) -- id, empty, message\r\n  assert_equal('', msg[2])\r\n  assert_equal('world',  msg[3])\r\n\r\n  assert_equal('world', cli:recv())\r\n\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "thread, pipe = zthreads.fork(ctx, include_thread .. [[\r\n    local pipe, cli_endpoint, srv_endpoint = ...\r\n\r\n    local fe = assert('ROUTER:', ctx:socket{zmq.ROUTER, connect = cli_endpoint})\r\n    local be = assert('DEALER:', ctx:socket{zmq.DEALER, connect = srv_endpoint})\r\n\r\n    local ok, err = zmq.proxy(fe, be, pipe)\r\n\r\n    ctx:destroy(0)\r\n  --]], cli_endpoint, srv_endpoint)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local cli = assert(ctx:socket{zmq.REQ, bind = cli_endpoint, rcvtimeo=1000})",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local srv = assert(ctx:socket{zmq.REP, bind = srv_endpoint, rcvtimeo=1000})",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "thread:start()",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert(cli:send(\"hello\"))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local msg = assert_table(pipe:recv_all())",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "assert_equal(3, #msg)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert_equal('', msg[2])",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert_equal('hello',  msg[3])",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert_equal('hello', srv:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert(srv:send(\"world\"))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert_equal('world',  msg[3])",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert_equal('world', cli:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function test_basic()\r\n  thread, pipe = zthreads.run(ctx, include_thread .. [[\r\n    local cli_endpoint, srv_endpoint = ...\r\n\r\n    local fe = assert('ROUTER:', ctx:socket{zmq.ROUTER, connect = cli_endpoint})\r\n    local be = assert('DEALER:', ctx:socket{zmq.DEALER, connect = srv_endpoint})\r\n\r\n    local ok, err = zmq.proxy(fe, be)\r\n\r\n    ctx:destroy(0)\r\n  --]], cli_endpoint, srv_endpoint)\r\n\r\n  local cli = assert(ctx:socket{zmq.REQ, bind = cli_endpoint, rcvtimeo=1000})\r\n  local srv = assert(ctx:socket{zmq.REP, bind = srv_endpoint, rcvtimeo=1000})\r\n\r\n  thread:start()\r\n\r\n  assert(cli:send(\"hello\"))\r\n  assert_equal('hello', srv:recv())\r\n\r\n  ----------------------------\r\n  assert(srv:send(\"world\"))\r\n  assert_equal('world', cli:recv())\r\n\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "thread, pipe = zthreads.run(ctx, include_thread .. [[\r\n    local cli_endpoint, srv_endpoint = ...\r\n\r\n    local fe = assert('ROUTER:', ctx:socket{zmq.ROUTER, connect = cli_endpoint})\r\n    local be = assert('DEALER:', ctx:socket{zmq.DEALER, connect = srv_endpoint})\r\n\r\n    local ok, err = zmq.proxy(fe, be)\r\n\r\n    ctx:destroy(0)\r\n  --]], cli_endpoint, srv_endpoint)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function setup()\r\n  ctx = zmq:context()\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function teardown()\r\n  ctx:destroy(0)  -- close context\r\n  if thread then thread:join() end -- close thread\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function test_control()\r\n  thread, pipe = zthreads.fork(ctx, include_thread .. [[\r\n    local pipe, cli_endpoint, srv_endpoint = ...\r\n\r\n    local fe = assert('ROUTER:', ctx:socket{zmq.ROUTER, connect = cli_endpoint})\r\n    local be = assert('DEALER:', ctx:socket{zmq.DEALER, connect = srv_endpoint})\r\n\r\n    local ok, err = zmq.proxy_steerable(fe, be, nil, pipe)\r\n\r\n    pipe:send(\"DONE\")\r\n\r\n    ctx:destroy(100)\r\n  --]], cli_endpoint, srv_endpoint)\r\n\r\n  local cli = assert(ctx:socket{zmq.REQ, bind = cli_endpoint, rcvtimeo=1000})\r\n  local srv = assert(ctx:socket{zmq.REP, bind = srv_endpoint, rcvtimeo=1000})\r\n  pipe:set_rcvtimeo(1000)\r\n\r\n  thread:start()\r\n\r\n  pipe:send(\"PAUSE\")\r\n  assert(cli:send(\"hello\"))\r\n\r\n  local _, err = assert_nil(srv:recv())\r\n  assert_equal('EAGAIN', err:mnemo())\r\n\r\n  pipe:send(\"RESUME\")\r\n  assert_equal(\"hello\", srv:recv())\r\n\r\n  pipe:send(\"TERMINATE\")\r\n  assert_equal(\"DONE\", pipe:recv())\r\n\r\n  assert(thread:join())\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "thread, pipe = zthreads.fork(ctx, include_thread .. [[\r\n    local pipe, cli_endpoint, srv_endpoint = ...\r\n\r\n    local fe = assert('ROUTER:', ctx:socket{zmq.ROUTER, connect = cli_endpoint})\r\n    local be = assert('DEALER:', ctx:socket{zmq.DEALER, connect = srv_endpoint})\r\n\r\n    local ok, err = zmq.proxy_steerable(fe, be, nil, pipe)\r\n\r\n    pipe:send(\"DONE\")\r\n\r\n    ctx:destroy(100)\r\n  --]], cli_endpoint, srv_endpoint)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "pipe:set_rcvtimeo(1000)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "pipe:send(\"PAUSE\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "local _, err = assert_nil(srv:recv())",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "assert_equal('EAGAIN', err:mnemo())",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "pipe:send(\"RESUME\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert_equal(\"hello\", srv:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "pipe:send(\"TERMINATE\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert_equal(\"DONE\", pipe:recv())",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "assert(thread:join())",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function test_basic()\r\n  thread, pipe = zthreads.run(ctx, include_thread .. [[\r\n    local cli_endpoint, srv_endpoint = ...\r\n\r\n    local fe = assert('ROUTER:', ctx:socket{zmq.ROUTER, connect = cli_endpoint})\r\n    local be = assert('DEALER:', ctx:socket{zmq.DEALER, connect = srv_endpoint})\r\n\r\n    local ok, err = zmq.proxy_steerable(fe, be)\r\n\r\n    ctx:destroy(0)\r\n  --]], cli_endpoint, srv_endpoint)\r\n\r\n  local cli = assert(ctx:socket{zmq.REQ, bind = cli_endpoint, rcvtimeo=1000})\r\n  local srv = assert(ctx:socket{zmq.REP, bind = srv_endpoint, rcvtimeo=1000})\r\n\r\n  thread:start()\r\n\r\n  assert(cli:send(\"hello\"))\r\n  assert_equal('hello', srv:recv())\r\n\r\n  ----------------------------\r\n  assert(srv:send(\"world\"))\r\n  assert_equal('world', cli:recv())\r\n\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "thread, pipe = zthreads.run(ctx, include_thread .. [[\r\n    local cli_endpoint, srv_endpoint = ...\r\n\r\n    local fe = assert('ROUTER:', ctx:socket{zmq.ROUTER, connect = cli_endpoint})\r\n    local be = assert('DEALER:', ctx:socket{zmq.DEALER, connect = srv_endpoint})\r\n\r\n    local ok, err = zmq.proxy_steerable(fe, be)\r\n\r\n    ctx:destroy(0)\r\n  --]], cli_endpoint, srv_endpoint)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function() return skip(msg) end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "function container"
  }, {
    "id": 72,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 73,
    "text": "run",
    "type": "global function"
  }, {
    "id": 74,
    "text": "format",
    "type": "global function"
  }, {
    "id": 75,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 76,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 77,
    "text": "fork",
    "type": "global function"
  }, {
    "id": 78,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 79,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 80,
    "text": "version",
    "type": "global function"
  }, {
    "id": 81,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 82,
    "text": "require",
    "type": "global function"
  }, {
    "id": 83,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 84,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 85,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 86,
    "text": "",
    "type": "variable container"
  }, {
    "id": 87,
    "text": "",
    "type": "require container"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "unop"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "n/a"
  }, {
    "id": 112,
    "text": "",
    "type": "local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 116,
    "text": "(LZMQ)",
    "type": "module"
  }, {
    "id": 117,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 118,
    "text": "threads )",
    "type": "module"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 120,
    "text": "timer )",
    "type": "module"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  } ]
}