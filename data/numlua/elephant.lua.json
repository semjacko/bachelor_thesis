{
  "_filename": "elephant.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/numlua/examples/elephant.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "calls",
    "to": 16
  }, {
    "from": 8,
    "label": "calls",
    "to": 32
  }, {
    "from": 8,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 8,
    "label": "calls",
    "to": 27
  }, {
    "from": 24,
    "label": "calls",
    "to": 26
  }, {
    "from": 16,
    "label": "calls",
    "to": 31
  }, {
    "from": 16,
    "label": "calls",
    "to": 31
  }, {
    "from": 16,
    "label": "calls",
    "to": 31
  }, {
    "from": 16,
    "label": "calls",
    "to": 31
  }, {
    "from": 24,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 8,
    "label": "calls",
    "to": 28
  }, {
    "from": 8,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 8,
    "label": "calls",
    "to": 33
  }, {
    "from": 16,
    "label": "calls",
    "to": 34
  }, {
    "from": 16,
    "label": "calls",
    "to": 34
  }, {
    "from": 16,
    "label": "calls",
    "to": 34
  }, {
    "from": 16,
    "label": "calls",
    "to": 34
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 29
  }, {
    "from": 24,
    "label": "calls",
    "to": 35
  }, {
    "from": 8,
    "label": "calls",
    "to": 25
  }, {
    "from": 8,
    "label": "calls",
    "to": 25
  }, {
    "from": 16,
    "label": "calls",
    "to": 30
  }, {
    "from": 16,
    "label": "calls",
    "to": 30
  }, {
    "from": 16,
    "label": "calls",
    "to": 30
  }, {
    "from": 16,
    "label": "calls",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 24
  }, {
    "from": 24,
    "label": "declares",
    "to": 2
  }, {
    "from": 24,
    "label": "declares",
    "to": 8
  }, {
    "from": 24,
    "label": "declares",
    "to": 16
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 37,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 37,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 37,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 37,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 37,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 37,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 37,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 37,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 37,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 37,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 37,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 37,
    "label": "initializes",
    "to": 61
  }, {
    "from": 38,
    "label": "initializes",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "elephant",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function fourier0 (t, A, B) -- naive: many temp objects\r\n  local f = zeros(#t)\r\n  for k = 1, #A do\r\n    f = f + A[k] * cos((k - 1) * t) + B[k] * sin((k - 1) * t)\r\n  end\r\n  return f\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local f = zeros(#t)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for k = 1, #A do\r\n    f = f + A[k] * cos((k - 1) * t) + B[k] * sin((k - 1) * t)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 5,
    "text": "f = f + A[k] * cos((k - 1) * t) + B[k] * sin((k - 1) * t)",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function fourier (t, A, B)\r\n  local op = numlua.opmode(true) -- in-place\r\n  local f, w = zeros(#t), zeros(#t) -- `w` is workspace\r\n  for k = 1, #A do\r\n    f = f + A[k] * cos((k - 1) * set(w, t))\r\n    f = f + B[k] * sin((k - 1) * set(w, t))\r\n  end\r\n  numlua.opmode(op) -- restore opmode\r\n  return f\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local op = numlua.opmode(true)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local f, w = zeros(#t), zeros(#t)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "for k = 1, #A do\r\n    f = f + A[k] * cos((k - 1) * set(w, t))\r\n    f = f + B[k] * sin((k - 1) * set(w, t))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 12,
    "text": "f = f + A[k] * cos((k - 1) * set(w, t))",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "f = f + B[k] * sin((k - 1) * set(w, t))",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "numlua.opmode(op)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function elephant (p, nsamples) -- `p` are shape parameters\r\n  local Ax = c(0, 0, 0, creal(p[3]), 0, creal(p[4]))\r\n  local Bx = c(0, creal(p[1]), creal(p[2]), 0, 0, 0)\r\n  local Ay = c(0, cimag(p[4]), 0, 0, 0, 0)\r\n  local By = c(0, cimag(p[1]), cimag(p[2]), cimag(p[3]), 0, 0)\r\n  -- generate curve\r\n  local t = linspace(0, 2 * math.pi, nsamples or 100)\r\n  local x, y = fourier(t, Ax, Bx), fourier(t, Ay, By)\r\n  return y, -x -- reflect and rotate\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local Ax = c(0, 0, 0, creal(p[3]), 0, creal(p[4]))",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local Bx = c(0, creal(p[1]), creal(p[2]), 0, 0, 0)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local Ay = c(0, cimag(p[4]), 0, 0, 0, 0)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local By = c(0, cimag(p[1]), cimag(p[2]), cimag(p[3]), 0, 0)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local t = linspace(0, 2 * math.pi, nsamples or 100)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local x, y = fourier(t, Ax, Bx), fourier(t, Ay, By)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "",
    "type": "function container"
  }, {
    "id": 25,
    "text": "opmode",
    "type": "global function"
  }, {
    "id": 26,
    "text": "print",
    "type": "global function"
  }, {
    "id": 27,
    "text": "sin",
    "type": "global function"
  }, {
    "id": 28,
    "text": "zeros",
    "type": "global function"
  }, {
    "id": 29,
    "text": "linspace",
    "type": "global function"
  }, {
    "id": 30,
    "text": "cimag",
    "type": "global function"
  }, {
    "id": 31,
    "text": "c",
    "type": "global function"
  }, {
    "id": 32,
    "text": "set",
    "type": "global function"
  }, {
    "id": 33,
    "text": "cos",
    "type": "global function"
  }, {
    "id": 34,
    "text": "creal",
    "type": "global function"
  }, {
    "id": 35,
    "text": "require",
    "type": "global function"
  }, {
    "id": 36,
    "text": "",
    "type": "global variable"
  }, {
    "id": 37,
    "text": "",
    "type": "variable container"
  }, {
    "id": 38,
    "text": "",
    "type": "require container"
  }, {
    "id": 39,
    "text": "",
    "type": "local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "n/a"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "n/a"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "n/a"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  } ]
}