{
  "_filename": "solvef.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/numlua/examples/solvef.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 22
  }, {
    "from": 25,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 26,
    "label": "calls",
    "to": 28
  }, {
    "from": 26,
    "label": "calls",
    "to": 28
  }, {
    "from": 26,
    "label": "calls",
    "to": 32
  }, {
    "from": 26,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 26,
    "label": "calls",
    "to": 33
  }, {
    "from": 26,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 26,
    "label": "calls",
    "to": 29
  }, {
    "from": 26,
    "label": "calls",
    "to": 29
  }, {
    "from": 26,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 26,
    "label": "declares",
    "to": 2
  }, {
    "from": 26,
    "label": "declares",
    "to": 24
  }, {
    "from": 26,
    "label": "declares",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 37,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 37,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 37,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 37,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 37,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 38,
    "label": "initializes",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "solvef",
    "type": "module"
  }, {
    "id": 2,
    "text": "function solve (a, b)\r\n  local n = #b\r\n  assert(a:size\"#\" == 2 and a:size(1) == a:size(2), \"a must be square\")\r\n  assert(#a == n, \"a and b sizes must be equal\")\r\n\r\n  for j = 1, n do -- update elements in column j\r\n    for i = 1, j - 1 do\r\n      a{{i+1,n}, {j,j}}._ = a{{i+1,n}, {j,j}} - a{{i+1,n}, {i,i}} * a[i][j]\r\n      --a{{i+1,n}, {j,j}}:add(a{{i+1,n}, {i,i}}, -a[i][j], true) -- in-place\r\n    end\r\n\r\n    if j < n then\r\n      -- find pivot and check its size\r\n      local _, i = a{{j,n},{j,j}}:norm\"m\" -- argmax(abs(a[[j:n, j]]))\r\n      i = i + j - 1\r\n\r\n      -- if necessary apply row interchange\r\n      if i ~= j then\r\n        swap(a[i], a[j])\r\n        b[j], b[i] = b[i], b[j]\r\n      end\r\n\r\n      a{{j+1,n},{j,j}}._ = a{{j+1,n},{j,j}} / a[j][j]\r\n      --a{{j+1,n},{j,j}}:div(a[j][j], false, true) -- in-place\r\n    end\r\n  end\r\n\r\n  -- forward substitution\r\n  for i = 1, n - 1 do\r\n    b{{i+1,n}}._ = b{{i+1,n}} - a{{i+1,n},{i,i}} * b[i]\r\n    --b{{i+1,n}}:add(a{{i+1,n},{i,i}}, -b[i], true) -- in-place\r\n  end\r\n\r\n  -- back substitution\r\n  for j = n, 2, -1 do\r\n    b[j] = b[j] / a[j][j]\r\n    b{{1,j-1}}._ = b{{1,j-1}} - a{{1,j-1},{j,j}} * b[j]\r\n    --b{{1,j-1}}:add(a{{1,j-1},{j,j}}, -b[j], true) -- in-place\r\n  end\r\n  b[1] = b[1] / a[1][1] -- last case\r\n\r\n  return b\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local n = #b",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "assert(a:size\"#\" == 2 and a:size(1) == a:size(2), \"a must be square\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "assert(#a == n, \"a and b sizes must be equal\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "for j = 1, n do -- update elements in column j\r\n    for i = 1, j - 1 do\r\n      a{{i+1,n}, {j,j}}._ = a{{i+1,n}, {j,j}} - a{{i+1,n}, {i,i}} * a[i][j]\r\n      --a{{i+1,n}, {j,j}}:add(a{{i+1,n}, {i,i}}, -a[i][j], true) -- in-place\r\n    end\r\n\r\n    if j < n then\r\n      -- find pivot and check its size\r\n      local _, i = a{{j,n},{j,j}}:norm\"m\" -- argmax(abs(a[[j:n, j]]))\r\n      i = i + j - 1\r\n\r\n      -- if necessary apply row interchange\r\n      if i ~= j then\r\n        swap(a[i], a[j])\r\n        b[j], b[i] = b[i], b[j]\r\n      end\r\n\r\n      a{{j+1,n},{j,j}}._ = a{{j+1,n},{j,j}} / a[j][j]\r\n      --a{{j+1,n},{j,j}}:div(a[j][j], false, true) -- in-place\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 7,
    "text": "for i = 1, j - 1 do\r\n      a{{i+1,n}, {j,j}}._ = a{{i+1,n}, {j,j}} - a{{i+1,n}, {i,i}} * a[i][j]\r\n      --a{{i+1,n}, {j,j}}:add(a{{i+1,n}, {i,i}}, -a[i][j], true) -- in-place\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 8,
    "text": "a{{i+1,n}, {j,j}}._ = a{{i+1,n}, {j,j}} - a{{i+1,n}, {i,i}} * a[i][j]",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if j < n then\r\n      -- find pivot and check its size\r\n      local _, i = a{{j,n},{j,j}}:norm\"m\" -- argmax(abs(a[[j:n, j]]))\r\n      i = i + j - 1\r\n\r\n      -- if necessary apply row interchange\r\n      if i ~= j then\r\n        swap(a[i], a[j])\r\n        b[j], b[i] = b[i], b[j]\r\n      end\r\n\r\n      a{{j+1,n},{j,j}}._ = a{{j+1,n},{j,j}} / a[j][j]\r\n      --a{{j+1,n},{j,j}}:div(a[j][j], false, true) -- in-place\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local _, i = a{{j,n},{j,j}}:norm\"m\"",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "i = i + j - 1",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if i ~= j then\r\n        swap(a[i], a[j])\r\n        b[j], b[i] = b[i], b[j]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "swap(a[i], a[j])",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "b[j], b[i] = b[i], b[j]",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "a{{j+1,n},{j,j}}._ = a{{j+1,n},{j,j}} / a[j][j]",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "for i = 1, n - 1 do\r\n    b{{i+1,n}}._ = b{{i+1,n}} - a{{i+1,n},{i,i}} * b[i]\r\n    --b{{i+1,n}}:add(a{{i+1,n},{i,i}}, -b[i], true) -- in-place\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 17,
    "text": "b{{i+1,n}}._ = b{{i+1,n}} - a{{i+1,n},{i,i}} * b[i]",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "for j = n, 2, -1 do\r\n    b[j] = b[j] / a[j][j]\r\n    b{{1,j-1}}._ = b{{1,j-1}} - a{{1,j-1},{j,j}} * b[j]\r\n    --b{{1,j-1}}:add(a{{1,j-1},{j,j}}, -b[j], true) -- in-place\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 19,
    "text": "b[j] = b[j] / a[j][j]",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "b{{1,j-1}}._ = b{{1,j-1}} - a{{1,j-1},{j,j}} * b[j]",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "b[1] = b[1] / a[1][1]",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function (i,j) return i + j * (0.5 - rng.runif()) end",
    "type": "function"
  }, {
    "id": 25,
    "text": "function (i) return i * rng.runif() end",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "function container"
  }, {
    "id": 27,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 28,
    "text": "print",
    "type": "global function"
  }, {
    "id": 29,
    "text": "zeros",
    "type": "global function"
  }, {
    "id": 30,
    "text": "b",
    "type": "global function"
  }, {
    "id": 31,
    "text": "a",
    "type": "global function"
  }, {
    "id": 32,
    "text": "list",
    "type": "global function"
  }, {
    "id": 33,
    "text": "runif",
    "type": "global function"
  }, {
    "id": 34,
    "text": "swap",
    "type": "global function"
  }, {
    "id": 35,
    "text": "require",
    "type": "global function"
  }, {
    "id": 36,
    "text": "",
    "type": "global variable"
  }, {
    "id": 37,
    "text": "",
    "type": "variable container"
  }, {
    "id": 38,
    "text": "",
    "type": "require container"
  }, {
    "id": 39,
    "text": "",
    "type": "local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "n/a"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "boolean"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "number"
  }, {
    "id": 45,
    "text": "",
    "type": "global variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "global variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  } ]
}