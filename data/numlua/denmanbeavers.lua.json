{
  "_filename": "denmanbeavers.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/numlua/examples/denmanbeavers.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "calls",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 21
  }, {
    "from": 2,
    "label": "calls",
    "to": 20
  }, {
    "from": 2,
    "label": "calls",
    "to": 20
  }, {
    "from": 17,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 18
  }, {
    "from": 2,
    "label": "calls",
    "to": 18
  }, {
    "from": 2,
    "label": "calls",
    "to": 19
  }, {
    "from": 1,
    "label": "contains",
    "to": 17
  }, {
    "from": 17,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 27
  }, {
    "from": 26,
    "label": "initializes",
    "to": 28
  }, {
    "from": 28,
    "label": "assigns",
    "to": 29
  }, {
    "from": 26,
    "label": "initializes",
    "to": 30
  }, {
    "from": 30,
    "label": "assigns",
    "to": 31
  }, {
    "from": 26,
    "label": "initializes",
    "to": 32
  }, {
    "from": 26,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "assigns",
    "to": 34
  }, {
    "from": 26,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 26,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 27,
    "label": "initializes",
    "to": 25
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "denmanbeavers",
    "type": "module"
  }, {
    "id": 2,
    "text": "function dbsqrtm (A, tol, maxiters)\r\n  local opmode = numlua.opmode(true) -- set in-place operations\r\n  local tol, maxiters = tol or TOL, maxiters or MAXITERS\r\n  local iY, iZ = matrix.new(A:shape()), matrix.new(A:shape()) -- buffers\r\n  local s, n = inf, 1 -- norm(Y), #iterations\r\n  local Y, Z = A:copy(), matrix.eye(#A) -- Y_0, Z_0 = A, I\r\n  while true do\r\n    -- Y_{k+1} = 1/2 * (Y_k + inv(Z_k))\r\n    -- Z_{k+1} = 1/2 * (Z_k + inv(Y_k))\r\n    iY._, iZ._ = Y, Z\r\n    Y, Z = (Y + inv(iZ)) / 2, (Z + inv(iY)) / 2\r\n    -- check termination\r\n    local f = norm(Y)\r\n    if abs(f - s) <= tol or n > maxiters then break end\r\n    s, n = f, n + 1\r\n  end\r\n  numlua.opmode(opmode) -- restore previous mode\r\n  return Y, Z, s\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local opmode = numlua.opmode(true)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local tol, maxiters = tol or TOL, maxiters or MAXITERS",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local iY, iZ = matrix.new(A:shape()), matrix.new(A:shape())",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local s, n = inf, 1",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local Y, Z = A:copy(), matrix.eye(#A)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "while true do\r\n    -- Y_{k+1} = 1/2 * (Y_k + inv(Z_k))\r\n    -- Z_{k+1} = 1/2 * (Z_k + inv(Y_k))\r\n    iY._, iZ._ = Y, Z\r\n    Y, Z = (Y + inv(iZ)) / 2, (Z + inv(iY)) / 2\r\n    -- check termination\r\n    local f = norm(Y)\r\n    if abs(f - s) <= tol or n > maxiters then break end\r\n    s, n = f, n + 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 9,
    "text": "iY._, iZ._ = Y, Z",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "Y, Z = (Y + inv(iZ)) / 2, (Z + inv(iY)) / 2",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local f = norm(Y)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if abs(f - s) <= tol or n > maxiters then break end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "s, n = f, n + 1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "numlua.opmode(opmode)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "",
    "type": "function container"
  }, {
    "id": 18,
    "text": "opmode",
    "type": "global function"
  }, {
    "id": 19,
    "text": "eye",
    "type": "global function"
  }, {
    "id": 20,
    "text": "inv",
    "type": "global function"
  }, {
    "id": 21,
    "text": "norm",
    "type": "global function"
  }, {
    "id": 22,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 23,
    "text": "require",
    "type": "global function"
  }, {
    "id": 24,
    "text": "new",
    "type": "global function"
  }, {
    "id": 25,
    "text": "",
    "type": "global variable"
  }, {
    "id": 26,
    "text": "",
    "type": "variable container"
  }, {
    "id": 27,
    "text": "",
    "type": "require container"
  }, {
    "id": 28,
    "text": "",
    "type": "local variable"
  }, {
    "id": 29,
    "text": "",
    "type": "n/a"
  }, {
    "id": 30,
    "text": "",
    "type": "local variable"
  }, {
    "id": 31,
    "text": "",
    "type": "n/a"
  }, {
    "id": 32,
    "text": "",
    "type": "local variable"
  }, {
    "id": 33,
    "text": "",
    "type": "local variable"
  }, {
    "id": 34,
    "text": "",
    "type": "n/a"
  }, {
    "id": 35,
    "text": "",
    "type": "local variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "local variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  } ]
}