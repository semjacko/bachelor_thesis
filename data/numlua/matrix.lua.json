{
  "_filename": "matrix.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/numlua/matrix.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 5
  }, {
    "from": 18,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 5
  }, {
    "from": 33,
    "label": "has",
    "to": 5
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 5
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 5
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 5
  }, {
    "from": 46,
    "label": "has",
    "to": 5
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 48,
    "label": "has",
    "to": 5
  }, {
    "from": 49,
    "label": "has",
    "to": 5
  }, {
    "from": 50,
    "label": "has",
    "to": 5
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 51,
    "label": "has",
    "to": 5
  }, {
    "from": 51,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 63,
    "label": "has",
    "to": 5
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 63,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 63,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 63,
    "label": "has",
    "to": 5
  }, {
    "from": 63,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 5
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 5
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 5
  }, {
    "from": 101,
    "label": "has",
    "to": 5
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 104
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 109,
    "label": "has",
    "to": 5
  }, {
    "from": 109,
    "label": "has",
    "to": 5
  }, {
    "from": 109,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 5
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 5
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 5
  }, {
    "from": 124,
    "label": "has",
    "to": 5
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 5
  }, {
    "from": 127,
    "label": "has",
    "to": 5
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 5
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 130,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 130,
    "label": "has",
    "to": 140
  }, {
    "from": 130,
    "label": "has",
    "to": 141
  }, {
    "from": 130,
    "label": "has",
    "to": 142
  }, {
    "from": 130,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 130,
    "label": "has",
    "to": 5
  }, {
    "from": 130,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 150,
    "label": "has",
    "to": 5
  }, {
    "from": 150,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 5
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 5
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 161,
    "label": "has",
    "to": 5
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 5
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 159
  }, {
    "from": 168,
    "label": "has",
    "to": 5
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 170,
    "label": "has",
    "to": 5
  }, {
    "from": 170,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 175,
    "label": "has",
    "to": 5
  }, {
    "from": 175,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 171
  }, {
    "from": 180,
    "label": "has",
    "to": 172
  }, {
    "from": 180,
    "label": "has",
    "to": 173
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 180,
    "label": "has",
    "to": 5
  }, {
    "from": 180,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 189
  }, {
    "from": 185,
    "label": "has",
    "to": 190
  }, {
    "from": 185,
    "label": "has",
    "to": 191
  }, {
    "from": 185,
    "label": "has",
    "to": 192
  }, {
    "from": 185,
    "label": "has",
    "to": 193
  }, {
    "from": 185,
    "label": "has",
    "to": 194
  }, {
    "from": 185,
    "label": "has",
    "to": 195
  }, {
    "from": 185,
    "label": "has",
    "to": 5
  }, {
    "from": 185,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 5
  }, {
    "from": 198,
    "label": "has",
    "to": 5
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 200,
    "label": "has",
    "to": 121
  }, {
    "from": 200,
    "label": "has",
    "to": 5
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 202,
    "label": "has",
    "to": 5
  }, {
    "from": 41,
    "label": "calls",
    "to": 222
  }, {
    "from": 130,
    "label": "calls",
    "to": 222
  }, {
    "from": 130,
    "label": "calls",
    "to": 222
  }, {
    "from": 168,
    "label": "calls",
    "to": 222
  }, {
    "from": 170,
    "label": "calls",
    "to": 222
  }, {
    "from": 175,
    "label": "calls",
    "to": 222
  }, {
    "from": 180,
    "label": "calls",
    "to": 222
  }, {
    "from": 185,
    "label": "calls",
    "to": 222
  }, {
    "from": 2,
    "label": "calls",
    "to": 204
  }, {
    "from": 41,
    "label": "calls",
    "to": 204
  }, {
    "from": 63,
    "label": "calls",
    "to": 204
  }, {
    "from": 81,
    "label": "calls",
    "to": 204
  }, {
    "from": 109,
    "label": "calls",
    "to": 204
  }, {
    "from": 130,
    "label": "calls",
    "to": 204
  }, {
    "from": 155,
    "label": "calls",
    "to": 204
  }, {
    "from": 158,
    "label": "calls",
    "to": 204
  }, {
    "from": 168,
    "label": "calls",
    "to": 204
  }, {
    "from": 170,
    "label": "calls",
    "to": 204
  }, {
    "from": 175,
    "label": "calls",
    "to": 204
  }, {
    "from": 180,
    "label": "calls",
    "to": 204
  }, {
    "from": 185,
    "label": "calls",
    "to": 204
  }, {
    "from": 185,
    "label": "calls",
    "to": 204
  }, {
    "from": 203,
    "label": "calls",
    "to": 224
  }, {
    "from": 203,
    "label": "calls",
    "to": 224
  }, {
    "from": 203,
    "label": "calls",
    "to": 224
  }, {
    "from": 203,
    "label": "calls",
    "to": 224
  }, {
    "from": 109,
    "label": "calls",
    "to": 103
  }, {
    "from": 109,
    "label": "calls",
    "to": 103
  }, {
    "from": 63,
    "label": "calls",
    "to": 51
  }, {
    "from": 47,
    "label": "calls",
    "to": 235
  }, {
    "from": 49,
    "label": "calls",
    "to": 235
  }, {
    "from": 50,
    "label": "calls",
    "to": 235
  }, {
    "from": 117,
    "label": "calls",
    "to": 234
  }, {
    "from": 51,
    "label": "calls",
    "to": 205
  }, {
    "from": 63,
    "label": "calls",
    "to": 205
  }, {
    "from": 63,
    "label": "calls",
    "to": 205
  }, {
    "from": 63,
    "label": "calls",
    "to": 205
  }, {
    "from": 63,
    "label": "calls",
    "to": 205
  }, {
    "from": 48,
    "label": "calls",
    "to": 206
  }, {
    "from": 155,
    "label": "calls",
    "to": 206
  }, {
    "from": 175,
    "label": "calls",
    "to": 206
  }, {
    "from": 97,
    "label": "calls",
    "to": 94
  }, {
    "from": 97,
    "label": "calls",
    "to": 94
  }, {
    "from": 203,
    "label": "calls",
    "to": 233
  }, {
    "from": 170,
    "label": "calls",
    "to": 233
  }, {
    "from": 180,
    "label": "calls",
    "to": 233
  }, {
    "from": 185,
    "label": "calls",
    "to": 233
  }, {
    "from": 41,
    "label": "calls",
    "to": 249
  }, {
    "from": 155,
    "label": "calls",
    "to": 249
  }, {
    "from": 203,
    "label": "calls",
    "to": 8
  }, {
    "from": 203,
    "label": "calls",
    "to": 8
  }, {
    "from": 203,
    "label": "calls",
    "to": 8
  }, {
    "from": 203,
    "label": "calls",
    "to": 8
  }, {
    "from": 180,
    "label": "calls",
    "to": 8
  }, {
    "from": 158,
    "label": "calls",
    "to": 209
  }, {
    "from": 168,
    "label": "calls",
    "to": 209
  }, {
    "from": 170,
    "label": "calls",
    "to": 209
  }, {
    "from": 175,
    "label": "calls",
    "to": 209
  }, {
    "from": 180,
    "label": "calls",
    "to": 209
  }, {
    "from": 203,
    "label": "calls",
    "to": 240
  }, {
    "from": 203,
    "label": "calls",
    "to": 240
  }, {
    "from": 130,
    "label": "calls",
    "to": 240
  }, {
    "from": 203,
    "label": "calls",
    "to": 236
  }, {
    "from": 130,
    "label": "calls",
    "to": 236
  }, {
    "from": 63,
    "label": "calls",
    "to": 248
  }, {
    "from": 87,
    "label": "calls",
    "to": 248
  }, {
    "from": 175,
    "label": "calls",
    "to": 230
  }, {
    "from": 180,
    "label": "calls",
    "to": 230
  }, {
    "from": 203,
    "label": "calls",
    "to": 246
  }, {
    "from": 203,
    "label": "calls",
    "to": 246
  }, {
    "from": 41,
    "label": "calls",
    "to": 216
  }, {
    "from": 150,
    "label": "calls",
    "to": 237
  }, {
    "from": 48,
    "label": "calls",
    "to": 238
  }, {
    "from": 45,
    "label": "calls",
    "to": 229
  }, {
    "from": 46,
    "label": "calls",
    "to": 229
  }, {
    "from": 37,
    "label": "calls",
    "to": 243
  }, {
    "from": 185,
    "label": "calls",
    "to": 228
  }, {
    "from": 37,
    "label": "calls",
    "to": 213
  }, {
    "from": 155,
    "label": "calls",
    "to": 129
  }, {
    "from": 203,
    "label": "calls",
    "to": 231
  }, {
    "from": 9,
    "label": "calls",
    "to": 231
  }, {
    "from": 10,
    "label": "calls",
    "to": 231
  }, {
    "from": 10,
    "label": "calls",
    "to": 231
  }, {
    "from": 50,
    "label": "calls",
    "to": 231
  }, {
    "from": 130,
    "label": "calls",
    "to": 231
  }, {
    "from": 203,
    "label": "calls",
    "to": 210
  }, {
    "from": 203,
    "label": "calls",
    "to": 210
  }, {
    "from": 203,
    "label": "calls",
    "to": 210
  }, {
    "from": 203,
    "label": "calls",
    "to": 210
  }, {
    "from": 203,
    "label": "calls",
    "to": 210
  }, {
    "from": 41,
    "label": "calls",
    "to": 210
  }, {
    "from": 51,
    "label": "calls",
    "to": 210
  }, {
    "from": 81,
    "label": "calls",
    "to": 210
  }, {
    "from": 109,
    "label": "calls",
    "to": 210
  }, {
    "from": 109,
    "label": "calls",
    "to": 210
  }, {
    "from": 130,
    "label": "calls",
    "to": 210
  }, {
    "from": 130,
    "label": "calls",
    "to": 210
  }, {
    "from": 150,
    "label": "calls",
    "to": 227
  }, {
    "from": 103,
    "label": "calls",
    "to": 241
  }, {
    "from": 109,
    "label": "calls",
    "to": 241
  }, {
    "from": 101,
    "label": "calls",
    "to": 226
  }, {
    "from": 103,
    "label": "calls",
    "to": 226
  }, {
    "from": 168,
    "label": "calls",
    "to": 162
  }, {
    "from": 170,
    "label": "calls",
    "to": 162
  }, {
    "from": 175,
    "label": "calls",
    "to": 162
  }, {
    "from": 180,
    "label": "calls",
    "to": 162
  }, {
    "from": 81,
    "label": "calls",
    "to": 81
  }, {
    "from": 203,
    "label": "calls",
    "to": 242
  }, {
    "from": 203,
    "label": "calls",
    "to": 242
  }, {
    "from": 203,
    "label": "calls",
    "to": 242
  }, {
    "from": 203,
    "label": "calls",
    "to": 242
  }, {
    "from": 203,
    "label": "calls",
    "to": 242
  }, {
    "from": 7,
    "label": "calls",
    "to": 225
  }, {
    "from": 203,
    "label": "calls",
    "to": 225
  }, {
    "from": 203,
    "label": "calls",
    "to": 225
  }, {
    "from": 203,
    "label": "calls",
    "to": 225
  }, {
    "from": 97,
    "label": "calls",
    "to": 244
  }, {
    "from": 101,
    "label": "calls",
    "to": 245
  }, {
    "from": 168,
    "label": "calls",
    "to": 245
  }, {
    "from": 170,
    "label": "calls",
    "to": 245
  }, {
    "from": 175,
    "label": "calls",
    "to": 245
  }, {
    "from": 180,
    "label": "calls",
    "to": 245
  }, {
    "from": 37,
    "label": "calls",
    "to": 215
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 87,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 150,
    "label": "calls",
    "to": 2
  }, {
    "from": 155,
    "label": "calls",
    "to": 2
  }, {
    "from": 158,
    "label": "calls",
    "to": 2
  }, {
    "from": 168,
    "label": "calls",
    "to": 2
  }, {
    "from": 170,
    "label": "calls",
    "to": 2
  }, {
    "from": 175,
    "label": "calls",
    "to": 2
  }, {
    "from": 180,
    "label": "calls",
    "to": 2
  }, {
    "from": 185,
    "label": "calls",
    "to": 2
  }, {
    "from": 185,
    "label": "calls",
    "to": 2
  }, {
    "from": 124,
    "label": "calls",
    "to": 117
  }, {
    "from": 127,
    "label": "calls",
    "to": 117
  }, {
    "from": 63,
    "label": "calls",
    "to": 63
  }, {
    "from": 203,
    "label": "calls",
    "to": 63
  }, {
    "from": 203,
    "label": "calls",
    "to": 223
  }, {
    "from": 9,
    "label": "calls",
    "to": 223
  }, {
    "from": 10,
    "label": "calls",
    "to": 223
  }, {
    "from": 203,
    "label": "calls",
    "to": 223
  }, {
    "from": 63,
    "label": "calls",
    "to": 223
  }, {
    "from": 203,
    "label": "calls",
    "to": 223
  }, {
    "from": 130,
    "label": "calls",
    "to": 223
  }, {
    "from": 162,
    "label": "calls",
    "to": 161
  }, {
    "from": 203,
    "label": "calls",
    "to": 232
  }, {
    "from": 185,
    "label": "calls",
    "to": 232
  }, {
    "from": 87,
    "label": "calls",
    "to": 207
  }, {
    "from": 203,
    "label": "calls",
    "to": 220
  }, {
    "from": 155,
    "label": "calls",
    "to": 217
  }, {
    "from": 203,
    "label": "calls",
    "to": 218
  }, {
    "from": 203,
    "label": "calls",
    "to": 218
  }, {
    "from": 2,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 51,
    "label": "calls",
    "to": 219
  }, {
    "from": 51,
    "label": "calls",
    "to": 219
  }, {
    "from": 51,
    "label": "calls",
    "to": 219
  }, {
    "from": 51,
    "label": "calls",
    "to": 219
  }, {
    "from": 63,
    "label": "calls",
    "to": 219
  }, {
    "from": 63,
    "label": "calls",
    "to": 219
  }, {
    "from": 81,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 219
  }, {
    "from": 203,
    "label": "calls",
    "to": 211
  }, {
    "from": 63,
    "label": "calls",
    "to": 221
  }, {
    "from": 109,
    "label": "calls",
    "to": 101
  }, {
    "from": 1,
    "label": "contains",
    "to": 203
  }, {
    "from": 203,
    "label": "declares",
    "to": 2
  }, {
    "from": 203,
    "label": "declares",
    "to": 7
  }, {
    "from": 203,
    "label": "declares",
    "to": 8
  }, {
    "from": 203,
    "label": "declares",
    "to": 9
  }, {
    "from": 203,
    "label": "declares",
    "to": 10
  }, {
    "from": 203,
    "label": "declares",
    "to": 11
  }, {
    "from": 203,
    "label": "declares",
    "to": 14
  }, {
    "from": 203,
    "label": "declares",
    "to": 18
  }, {
    "from": 203,
    "label": "declares",
    "to": 28
  }, {
    "from": 203,
    "label": "declares",
    "to": 33
  }, {
    "from": 203,
    "label": "declares",
    "to": 37
  }, {
    "from": 203,
    "label": "declares",
    "to": 41
  }, {
    "from": 203,
    "label": "declares",
    "to": 45
  }, {
    "from": 203,
    "label": "declares",
    "to": 46
  }, {
    "from": 203,
    "label": "declares",
    "to": 47
  }, {
    "from": 203,
    "label": "declares",
    "to": 48
  }, {
    "from": 203,
    "label": "declares",
    "to": 49
  }, {
    "from": 203,
    "label": "declares",
    "to": 50
  }, {
    "from": 203,
    "label": "declares",
    "to": 51
  }, {
    "from": 203,
    "label": "declares",
    "to": 63
  }, {
    "from": 203,
    "label": "declares",
    "to": 81
  }, {
    "from": 203,
    "label": "declares",
    "to": 87
  }, {
    "from": 203,
    "label": "declares",
    "to": 94
  }, {
    "from": 203,
    "label": "declares",
    "to": 97
  }, {
    "from": 203,
    "label": "declares",
    "to": 101
  }, {
    "from": 203,
    "label": "declares",
    "to": 103
  }, {
    "from": 203,
    "label": "declares",
    "to": 109
  }, {
    "from": 203,
    "label": "declares",
    "to": 117
  }, {
    "from": 203,
    "label": "declares",
    "to": 123
  }, {
    "from": 203,
    "label": "declares",
    "to": 124
  }, {
    "from": 203,
    "label": "declares",
    "to": 126
  }, {
    "from": 203,
    "label": "declares",
    "to": 127
  }, {
    "from": 203,
    "label": "declares",
    "to": 129
  }, {
    "from": 203,
    "label": "declares",
    "to": 130
  }, {
    "from": 203,
    "label": "declares",
    "to": 150
  }, {
    "from": 203,
    "label": "declares",
    "to": 155
  }, {
    "from": 203,
    "label": "declares",
    "to": 158
  }, {
    "from": 203,
    "label": "declares",
    "to": 161
  }, {
    "from": 203,
    "label": "declares",
    "to": 162
  }, {
    "from": 203,
    "label": "declares",
    "to": 168
  }, {
    "from": 203,
    "label": "declares",
    "to": 170
  }, {
    "from": 203,
    "label": "declares",
    "to": 175
  }, {
    "from": 203,
    "label": "declares",
    "to": 180
  }, {
    "from": 203,
    "label": "declares",
    "to": 185
  }, {
    "from": 203,
    "label": "declares",
    "to": 197
  }, {
    "from": 203,
    "label": "declares",
    "to": 198
  }, {
    "from": 203,
    "label": "declares",
    "to": 200
  }, {
    "from": 203,
    "label": "declares",
    "to": 202
  }, {
    "from": 1,
    "label": "declares",
    "to": 208
  }, {
    "from": 1,
    "label": "declares",
    "to": 212
  }, {
    "from": 1,
    "label": "declares",
    "to": 214
  }, {
    "from": 1,
    "label": "declares",
    "to": 239
  }, {
    "from": 1,
    "label": "declares",
    "to": 247
  }, {
    "from": 1,
    "label": "declares",
    "to": 250
  }, {
    "from": 1,
    "label": "contains",
    "to": 251
  }, {
    "from": 1,
    "label": "contains",
    "to": 252
  }, {
    "from": 251,
    "label": "initializes",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 251,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "assigns",
    "to": 256
  }, {
    "from": 251,
    "label": "initializes",
    "to": 257
  }, {
    "from": 257,
    "label": "assigns",
    "to": 258
  }, {
    "from": 251,
    "label": "initializes",
    "to": 259
  }, {
    "from": 259,
    "label": "assigns",
    "to": 260
  }, {
    "from": 251,
    "label": "initializes",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 251,
    "label": "initializes",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 251,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 251,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "assigns",
    "to": 268
  }, {
    "from": 251,
    "label": "initializes",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 251,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 251,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 251,
    "label": "initializes",
    "to": 275
  }, {
    "from": 275,
    "label": "assigns",
    "to": 276
  }, {
    "from": 251,
    "label": "initializes",
    "to": 277
  }, {
    "from": 277,
    "label": "assigns",
    "to": 278
  }, {
    "from": 251,
    "label": "initializes",
    "to": 279
  }, {
    "from": 279,
    "label": "assigns",
    "to": 280
  }, {
    "from": 251,
    "label": "initializes",
    "to": 281
  }, {
    "from": 281,
    "label": "assigns",
    "to": 282
  }, {
    "from": 251,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "assigns",
    "to": 284
  }, {
    "from": 251,
    "label": "initializes",
    "to": 285
  }, {
    "from": 285,
    "label": "assigns",
    "to": 286
  }, {
    "from": 251,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "assigns",
    "to": 288
  }, {
    "from": 251,
    "label": "initializes",
    "to": 289
  }, {
    "from": 289,
    "label": "assigns",
    "to": 290
  }, {
    "from": 251,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 251,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 251,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 251,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 251,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 251,
    "label": "initializes",
    "to": 301
  }, {
    "from": 301,
    "label": "assigns",
    "to": 302
  }, {
    "from": 251,
    "label": "initializes",
    "to": 303
  }, {
    "from": 303,
    "label": "assigns",
    "to": 304
  }, {
    "from": 251,
    "label": "initializes",
    "to": 305
  }, {
    "from": 305,
    "label": "assigns",
    "to": 306
  }, {
    "from": 251,
    "label": "initializes",
    "to": 307
  }, {
    "from": 307,
    "label": "assigns",
    "to": 308
  }, {
    "from": 251,
    "label": "initializes",
    "to": 309
  }, {
    "from": 309,
    "label": "assigns",
    "to": 310
  }, {
    "from": 251,
    "label": "initializes",
    "to": 311
  }, {
    "from": 311,
    "label": "assigns",
    "to": 312
  }, {
    "from": 251,
    "label": "initializes",
    "to": 313
  }, {
    "from": 313,
    "label": "assigns",
    "to": 314
  }, {
    "from": 251,
    "label": "initializes",
    "to": 315
  }, {
    "from": 315,
    "label": "assigns",
    "to": 316
  }, {
    "from": 251,
    "label": "initializes",
    "to": 317
  }, {
    "from": 317,
    "label": "assigns",
    "to": 318
  }, {
    "from": 251,
    "label": "initializes",
    "to": 319
  }, {
    "from": 319,
    "label": "assigns",
    "to": 320
  }, {
    "from": 251,
    "label": "initializes",
    "to": 321
  }, {
    "from": 321,
    "label": "assigns",
    "to": 322
  }, {
    "from": 251,
    "label": "initializes",
    "to": 323
  }, {
    "from": 323,
    "label": "assigns",
    "to": 324
  }, {
    "from": 251,
    "label": "initializes",
    "to": 325
  }, {
    "from": 325,
    "label": "assigns",
    "to": 326
  }, {
    "from": 251,
    "label": "initializes",
    "to": 327
  }, {
    "from": 327,
    "label": "assigns",
    "to": 328
  }, {
    "from": 251,
    "label": "initializes",
    "to": 329
  }, {
    "from": 329,
    "label": "assigns",
    "to": 330
  }, {
    "from": 251,
    "label": "initializes",
    "to": 331
  }, {
    "from": 331,
    "label": "assigns",
    "to": 332
  }, {
    "from": 251,
    "label": "initializes",
    "to": 333
  }, {
    "from": 333,
    "label": "assigns",
    "to": 334
  }, {
    "from": 251,
    "label": "initializes",
    "to": 335
  }, {
    "from": 335,
    "label": "assigns",
    "to": 336
  }, {
    "from": 251,
    "label": "initializes",
    "to": 337
  }, {
    "from": 337,
    "label": "assigns",
    "to": 338
  }, {
    "from": 251,
    "label": "initializes",
    "to": 339
  }, {
    "from": 339,
    "label": "assigns",
    "to": 340
  }, {
    "from": 251,
    "label": "initializes",
    "to": 341
  }, {
    "from": 341,
    "label": "assigns",
    "to": 342
  }, {
    "from": 251,
    "label": "initializes",
    "to": 343
  }, {
    "from": 343,
    "label": "assigns",
    "to": 344
  }, {
    "from": 251,
    "label": "initializes",
    "to": 345
  }, {
    "from": 345,
    "label": "assigns",
    "to": 346
  }, {
    "from": 251,
    "label": "initializes",
    "to": 347
  }, {
    "from": 347,
    "label": "assigns",
    "to": 348
  }, {
    "from": 251,
    "label": "initializes",
    "to": 349
  }, {
    "from": 349,
    "label": "assigns",
    "to": 350
  }, {
    "from": 251,
    "label": "initializes",
    "to": 351
  }, {
    "from": 351,
    "label": "assigns",
    "to": 352
  }, {
    "from": 251,
    "label": "initializes",
    "to": 353
  }, {
    "from": 353,
    "label": "assigns",
    "to": 354
  }, {
    "from": 251,
    "label": "initializes",
    "to": 355
  }, {
    "from": 355,
    "label": "assigns",
    "to": 356
  }, {
    "from": 251,
    "label": "initializes",
    "to": 357
  }, {
    "from": 357,
    "label": "assigns",
    "to": 358
  }, {
    "from": 251,
    "label": "initializes",
    "to": 359
  }, {
    "from": 359,
    "label": "assigns",
    "to": 360
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "matrix",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function checkmatrix (m)\r\n  local t = type(m)\r\n  assert(t == \"matrix\", \"matrix expected, got \" .. t)\r\n  return m\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local t = type(m)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "assert(t == \"matrix\", \"matrix expected, got \" .. t)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function matrix.ctranspose (m) return transpose(m, true) end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function (...) return set(new(...), 0) end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function matrix.ones (...) return set(new(...), 1) end",
    "type": "function"
  }, {
    "id": 10,
    "text": "function matrix.eye (n, c) return set(set(new(n, n, c), 0), \"D\", 1) end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function (a, b)\r\n  if type(a) == \"number\" or type(a) == \"complex\" then\r\n    return add(b, a)\r\n  end\r\n  return add(a, b)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "if type(a) == \"number\" or type(a) == \"complex\" then\r\n    return add(b, a)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function (a, b)\r\n  if type(a) == \"number\" or type(a) == \"complex\" then\r\n    return add(-b, a)\r\n  end\r\n  if type(b) == \"number\" or type(b) == \"complex\" then\r\n    return add(a, -b)\r\n  end\r\n  return add(a, b, -1)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "if type(a) == \"number\" or type(a) == \"complex\" then\r\n    return add(-b, a)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if type(b) == \"number\" or type(b) == \"complex\" then\r\n    return add(a, -b)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function (a, b)\r\n  if type(a) == \"number\" or type(a) == \"complex\" then\r\n    return mul(b, a)\r\n  end\r\n  if type(b) == \"number\" or type(b) == \"complex\" then\r\n    return mul(a, b)\r\n  end\r\n  local da, db = size(a, \"#\"), size(b, \"#\")\r\n  local n, m = size(a, 1), size(b, 2)\r\n  local iscomplex = a:iscomplex() or b:iscomplex()\r\n  if da == 1 and db == 1 then -- outer product?\r\n    return mmul(zeros(n, n, iscomplex), a, b)\r\n  end\r\n  if da == 1 then -- v * A?\r\n    return mmul(zeros(m, iscomplex), b, a, \"T\")\r\n  end\r\n  if db == 1 then -- A * v?\r\n    return mmul(zeros(n, iscomplex), a, b)\r\n  end\r\n  -- da = db = 2:\r\n  return mmul(zeros(n, m, iscomplex), a, b)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if type(a) == \"number\" or type(a) == \"complex\" then\r\n    return mul(b, a)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "if type(b) == \"number\" or type(b) == \"complex\" then\r\n    return mul(a, b)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "local da, db = size(a, \"#\"), size(b, \"#\")",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local n, m = size(a, 1), size(b, 2)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local iscomplex = a:iscomplex() or b:iscomplex()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if da == 1 and db == 1 then -- outer product?\r\n    return mmul(zeros(n, n, iscomplex), a, b)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "if da == 1 then -- v * A?\r\n    return mmul(zeros(m, iscomplex), b, a, \"T\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if db == 1 then -- A * v?\r\n    return mmul(zeros(n, iscomplex), a, b)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function (a, b)\r\n  if type(a) == \"number\" or type(a) == \"complex\" then\r\n    return div(b, a, true)\r\n  end\r\n  if type(b) == \"number\" or type(b) == \"complex\" then\r\n    return div(a, b)\r\n  end\r\n  local x = ls(transpose(b), transpose(a))\r\n  return size(x, \"#\") == 2 and transpose(x) or x\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "if type(a) == \"number\" or type(a) == \"complex\" then\r\n    return div(b, a, true)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "if type(b) == \"number\" or type(b) == \"complex\" then\r\n    return div(a, b)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "local x = ls(transpose(b), transpose(a))",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function (a, ...)\r\n  local t = select(1, ...)\r\n  if type(t) == \"table\" then return section(a, t) end\r\n  return slice(a, ...)\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local t = select(1, ...)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if type(t) == \"table\" then return section(a, t) end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function matrix.seq (a, b, step)\r\n  local s = step or 1\r\n  local n = floor(cabs((b - a) / s + 1))\r\n  return linspace(a, b, n)\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local s = step or 1",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local n = floor(cabs((b - a) / s + 1))",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function matrix.trace (m)\r\n  local r, c = shape(checkmatrix(m))\r\n  assert(size(m, \"#\") == 2 and r == c, \"square matrix expected\")\r\n  return sum(diag(m))\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local r, c = shape(checkmatrix(m))",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "assert(size(m, \"#\") == 2 and r == c, \"square matrix expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function matrix.any (m, cond) return find(m, cond) ~= nil end",
    "type": "function"
  }, {
    "id": 46,
    "text": "function matrix.all (m, cond) return find(m, cond, true) == nil end",
    "type": "function"
  }, {
    "id": 47,
    "text": "function matrix.count (m, cond) return which(m, cond, \"#\") end",
    "type": "function"
  }, {
    "id": 48,
    "text": "function matrix.merge (x, y, mask) return ifelse(copy(mask), 1, x, y) end",
    "type": "function"
  }, {
    "id": 49,
    "text": "function matrix.pack (m, mask) return which(m, mask, \"v\") end",
    "type": "function"
  }, {
    "id": 50,
    "text": "function matrix.unpack (v, mask, m) return set(m, which(m, mask), v) end",
    "type": "function"
  }, {
    "id": 51,
    "text": "local function checkvector (t, iscomplex)\r\n  local isvector, iscomplex = true, iscomplex or t.complex\r\n  for i, v in ipairs(t) do\r\n    if type(v) ~= \"number\" and type(v) ~= \"complex\" then\r\n      isvector = false\r\n      if type(v) == \"matrix\" and size(v, \"#\") == 1 then\r\n        v = v[1]\r\n        t[i] = v\r\n        isvector = true\r\n      end\r\n    end\r\n    if isvector then\r\n      iscomplex = iscomplex or type(v) == \"complex\"\r\n    else\r\n      break\r\n    end\r\n  end\r\n  return isvector, iscomplex\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local isvector, iscomplex = true, iscomplex or t.complex",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "for i, v in ipairs(t) do\r\n    if type(v) ~= \"number\" and type(v) ~= \"complex\" then\r\n      isvector = false\r\n      if type(v) == \"matrix\" and size(v, \"#\") == 1 then\r\n        v = v[1]\r\n        t[i] = v\r\n        isvector = true\r\n      end\r\n    end\r\n    if isvector then\r\n      iscomplex = iscomplex or type(v) == \"complex\"\r\n    else\r\n      break\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "if type(v) ~= \"number\" and type(v) ~= \"complex\" then\r\n      isvector = false\r\n      if type(v) == \"matrix\" and size(v, \"#\") == 1 then\r\n        v = v[1]\r\n        t[i] = v\r\n        isvector = true\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "isvector = false",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if type(v) == \"matrix\" and size(v, \"#\") == 1 then\r\n        v = v[1]\r\n        t[i] = v\r\n        isvector = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "v = v[1]",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "t[i] = v",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "isvector = true",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if isvector then\r\n      iscomplex = iscomplex or type(v) == \"complex\"\r\n    else\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "iscomplex = iscomplex or type(v) == \"complex\"",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function fromtable (t, iscomplex)\r\n  assert(type(t) == \"table\", \"table expected\")\r\n  local isvector, iscomplex = checkvector(t, iscomplex)\r\n  if isvector then -- base case?\r\n    local v = new(#t, iscomplex)\r\n    for i, e in ipairs(t) do v[i] = e end\r\n    return v\r\n  end\r\n  -- recursion\r\n  for i, v in ipairs(t) do\r\n    if type(v) == \"table\" then -- recurse?\r\n      t[i] = fromtable(v, iscomplex)\r\n    end\r\n  end\r\n  -- fix if complex\r\n  iscomplex = false\r\n  for _, v in ipairs(t) do\r\n    iscomplex = iscomplex or v:iscomplex()\r\n  end\r\n  if iscomplex then\r\n    for i, v in ipairs(t) do\r\n      if not v:iscomplex() then\r\n        t[i] = v:complex()\r\n      end\r\n    end\r\n  end\r\n  return concat(unpack(t))\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "assert(type(t) == \"table\", \"table expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local isvector, iscomplex = checkvector(t, iscomplex)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if isvector then -- base case?\r\n    local v = new(#t, iscomplex)\r\n    for i, e in ipairs(t) do v[i] = e end\r\n    return v\r\n  end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "local v = new(#t, iscomplex)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "for i, e in ipairs(t) do v[i] = e end",
    "type": "statement:genericfor"
  }, {
    "id": 69,
    "text": "v[i] = e",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "for i, v in ipairs(t) do\r\n    if type(v) == \"table\" then -- recurse?\r\n      t[i] = fromtable(v, iscomplex)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 71,
    "text": "if type(v) == \"table\" then -- recurse?\r\n      t[i] = fromtable(v, iscomplex)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "t[i] = fromtable(v, iscomplex)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "iscomplex = false",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "for _, v in ipairs(t) do\r\n    iscomplex = iscomplex or v:iscomplex()\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "iscomplex = iscomplex or v:iscomplex()",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if iscomplex then\r\n    for i, v in ipairs(t) do\r\n      if not v:iscomplex() then\r\n        t[i] = v:complex()\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "for i, v in ipairs(t) do\r\n      if not v:iscomplex() then\r\n        t[i] = v:complex()\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 78,
    "text": "if not v:iscomplex() then\r\n        t[i] = v:complex()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "t[i] = v:complex()",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "local function totable (m)\r\n  assert(type(m) == \"matrix\", \"matrix expected\")\r\n  local d, t = size(m, \"#\"), {}\r\n  for i = 1, #m do\r\n    t[i] = d == 1 and m[i] or totable(m[i])\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "assert(type(m) == \"matrix\", \"matrix expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "local d, t = size(m, \"#\"), {}",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "for i = 1, #m do\r\n    t[i] = d == 1 and m[i] or totable(m[i])\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 85,
    "text": "t[i] = d == 1 and m[i] or totable(m[i])",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function matrix.list (m)\r\n  checkmatrix(m)\r\n  for i, e in m:entries(true) do\r\n    local t = {m:eindex(i)}\r\n    t[#t + 1] = e\r\n    print(unpack(t))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "checkmatrix(m)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "for i, e in m:entries(true) do\r\n    local t = {m:eindex(i)}\r\n    t[#t + 1] = e\r\n    print(unpack(t))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "local t = {m:eindex(i)}",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "t[#t + 1] = e",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "print(unpack(t))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "local function formatnumber (x, d)\r\n  local fmt = d and (\"%.\" .. d .. \"f\") or \"%g\"\r\n  return fmt:format(x)\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "local fmt = d and (\"%.\" .. d .. \"f\") or \"%g\"",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "local function formatcomplex (c, d)\r\n  local re, im = c:real(), c:imag()\r\n  local fmt = signbit(im) and \"%s%si\" or \"%s+%si\"\r\n  return fmt:format(formatnumber(re, d), formatnumber(im, d))\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local re, im = c:real(), c:imag()",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local fmt = signbit(im) and \"%s%si\" or \"%s+%si\"",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "local function getmaxlen (fmt, d)\r\n  return function (l, e) return max(l, #fmt(e, d)) end\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "local function prettyaux (v, ml, fmt, d) -- print vector with max length ml\r\n  local t = {}\r\n  for i = 1, #v do\r\n    local vi = fmt(v[i], d)\r\n    t[i] = (\" \"):rep(3 + ml - #vi) .. vi\r\n  end\r\n  return tconcat(t)\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "for i = 1, #v do\r\n    local vi = fmt(v[i], d)\r\n    t[i] = (\" \"):rep(3 + ml - #vi) .. vi\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 106,
    "text": "local vi = fmt(v[i], d)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "t[i] = (\" \"):rep(3 + ml - #vi) .. vi",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function matrix.pretty (m, d) -- `d` is number of decimal places\r\n  assert(size(checkmatrix(m), \"#\") <= 2, \"two-dimensional matrix expected\")\r\n  local fmt = m:iscomplex() and formatcomplex or formatnumber\r\n  local ml = m:fold(getmaxlen(fmt, d), 0) -- max length\r\n  if size(m, \"#\") == 1 then\r\n    return prettyaux(m, ml, fmt, d)\r\n  else -- m:size\"#\" == 2\r\n    local t = {}\r\n    for i = 1, #m do t[i] = prettyaux(m[i], ml, fmt, d) end\r\n    return tconcat(t, \"\\n\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "assert(size(checkmatrix(m), \"#\") <= 2, \"two-dimensional matrix expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "local fmt = m:iscomplex() and formatcomplex or formatnumber",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "local ml = m:fold(getmaxlen(fmt, d), 0)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if size(m, \"#\") == 1 then\r\n    return prettyaux(m, ml, fmt, d)\r\n  else -- m:size\"#\" == 2\r\n    local t = {}\r\n    for i = 1, #m do t[i] = prettyaux(m[i], ml, fmt, d) end\r\n    return tconcat(t, \"\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "for i = 1, #m do t[i] = prettyaux(m[i], ml, fmt, d) end",
    "type": "statement:numericfor"
  }, {
    "id": 115,
    "text": "t[i] = prettyaux(m[i], ml, fmt, d)",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "local function opfold (f, init)\r\n  local c\r\n  return function (i, e)\r\n    if i == 1 then c = init end\r\n    c = f(c, v)\r\n    return c\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "local c",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if i == 1 then c = init end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "c = init",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "c = f(c, v)",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function(x, y) return x + y end",
    "type": "function"
  }, {
    "id": 124,
    "text": "function matrix.cumsum (m)\r\n  return m:apply(opfold(sum2, 0), true)\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function(x, y) return x * y end",
    "type": "function"
  }, {
    "id": 127,
    "text": "function matrix.cumprod (m)\r\n  return m:apply(opfold(prod2, 1), true)\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function (m) return m:fold(prod2, 1) end",
    "type": "function"
  }, {
    "id": 130,
    "text": "function matrix.kronecker (a, b)\r\n  assert(size(a, \"#\") == 2 and size(b, \"#\") == 2,\r\n    \"two-dimensional matrix expected\")\r\n  local ra, ca, ica = shape(a, 1, true)\r\n  local rb, cb, icb = shape(b, 1, true)\r\n  local iscomplex = ica or icb\r\n  if iscomplex then\r\n    if not ica then a = a:complex() end\r\n    if not icb then b = b:complex() end\r\n  end\r\n  local x = new(ra * rb, ca * cb, iscomplex)\r\n  local indexr, indexc = {}, {}\r\n  local index = {indexr, indexc}\r\n  for i = 1, ra do\r\n    local ai = a[i]\r\n    indexr[1], indexr[2] = (i - 1) * rb + 1, i * rb\r\n    for j = 1, ca do\r\n      indexc[1], indexc[2] = (j - 1) * cb + 1, j * cb\r\n      mul(set(section(x, index), b), ai[j], true) -- x[index] = a[i][j] * b\r\n    end\r\n  end\r\n  return x\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "assert(size(a, \"#\") == 2 and size(b, \"#\") == 2,\r\n    \"two-dimensional matrix expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "local ra, ca, ica = shape(a, 1, true)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local rb, cb, icb = shape(b, 1, true)",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local iscomplex = ica or icb",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "if iscomplex then\r\n    if not ica then a = a:complex() end\r\n    if not icb then b = b:complex() end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "if not ica then a = a:complex() end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "a = a:complex()",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "if not icb then b = b:complex() end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "b = b:complex()",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "local x = new(ra * rb, ca * cb, iscomplex)",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "local indexr, indexc = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "local index = {indexr, indexc}",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "for i = 1, ra do\r\n    local ai = a[i]\r\n    indexr[1], indexr[2] = (i - 1) * rb + 1, i * rb\r\n    for j = 1, ca do\r\n      indexc[1], indexc[2] = (j - 1) * cb + 1, j * cb\r\n      mul(set(section(x, index), b), ai[j], true) -- x[index] = a[i][j] * b\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 144,
    "text": "local ai = a[i]",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "indexr[1], indexr[2] = (i - 1) * rb + 1, i * rb",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "for j = 1, ca do\r\n      indexc[1], indexc[2] = (j - 1) * cb + 1, j * cb\r\n      mul(set(section(x, index), b), ai[j], true) -- x[index] = a[i][j] * b\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 147,
    "text": "indexc[1], indexc[2] = (j - 1) * cb + 1, j * cb",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "mul(set(section(x, index), b), ai[j], true)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function matrix.isposdef (m)\r\n  local c, msg = chol(checkmatrix(m))\r\n  if c == nil then error(msg) end\r\n  return not c == false\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "local c, msg = chol(checkmatrix(m))",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if c == nil then error(msg) end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "error(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function matrix.det (m)\r\n  local c = assert(lu(copy(checkmatrix(m)), true))\r\n  return prod(diag(c))\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "local c = assert(lu(copy(checkmatrix(m)), true))",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function matrix.cond (m)\r\n  local s = assert(svd(checkmatrix(m), \"n\")) -- just singular values\r\n  return s[1] / s[#m]\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "local s = assert(svd(checkmatrix(m), \"n\"))",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function (x) return function(e) return e < x end end",
    "type": "function"
  }, {
    "id": 162,
    "text": "local function srank (s, m, tol)\r\n  local tol = tol or 0\r\n  if tol <= 0 then -- set default tolerance?\r\n    tol = m * eps * s[1]\r\n  end\r\n  local r = s:find(lt(tol))\r\n  return r and r - 1 or #s\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "local tol = tol or 0",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "if tol <= 0 then -- set default tolerance?\r\n    tol = m * eps * s[1]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "tol = m * eps * s[1]",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "local r = s:find(lt(tol))",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "function matrix.rank (m, tol)\r\n  local s = assert(svd(checkmatrix(m), \"n\")) -- just singular values\r\n  return srank(s, max(shape(m)), tol)\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function matrix.null (m, tol)\r\n  local u, s, vh = assert(svd(checkmatrix(m)))\r\n  local nr, nc = shape(m)\r\n  local rank = srank(s, max(nr, nc), tol)\r\n  return rank < nc and slice(vh, rank + 1) or nil\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "local u, s, vh = assert(svd(checkmatrix(m)))",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "local nr, nc = shape(m)",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "local rank = srank(s, max(nr, nc), tol)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function matrix.orth (m, tol)\r\n  local u = copy(checkmatrix(m))\r\n  local s = assert(svd(u, \"l\"))\r\n  local rank = srank(s, max(shape(m)), tol)\r\n  return u{{}, {1, rank}} -- columns from 1 to rank\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "local u = copy(checkmatrix(m))",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local s = assert(svd(u, \"l\"))",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "local rank = srank(s, max(shape(m)), tol)",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function matrix.pinv (m, tol)\r\n  local u, s, vh = assert(svd(checkmatrix(m)))\r\n  local nr, nc = shape(m)\r\n  local rank = srank(s, max(nr, nc), tol)\r\n  local v = slice(vh, 1, rank)\r\n  for i = 1, rank do -- inv(s) * vh\r\n    v[i]:div(s[i], false, true) -- v[i,:] = v[i,:] / s[i], in-place\r\n  end\r\n  return zeros(nc, nr):mmul(v, u{{}, {1, rank}}, \"c\", \"c\")\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "local v = slice(vh, 1, rank)",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "for i = 1, rank do -- inv(s) * vh\r\n    v[i]:div(s[i], false, true) -- v[i,:] = v[i,:] / s[i], in-place\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 183,
    "text": "v[i]:div(s[i], false, true)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function matrix.lm (a, b, svd)\r\n  local m, n = shape(checkmatrix(a))\r\n  assert(m >= n, \"system is underdetermined\")\r\n  assert(checkmatrix(b):size\"#\" == 1, \"single RHS expected\")\r\n  local x, rank = ls(a, b, svd)\r\n  -- report summary statistics\r\n  local coef = slice(x, 1, n)\r\n  local rss = (b - a % coef):norm() ^ 2\r\n  local rss0 = (b - b:sum() / m):norm() ^ 2\r\n  local df = m - rank\r\n  local F = df / (rank - 1) * (rss0 / rss - 1)\r\n  local pvalue = 1 - stat.pf(F, rank - 1, df)\r\n  return {coef = coef, rss = rss, df = df, F = F, pvalue =  pvalue}\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "local m, n = shape(checkmatrix(a))",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "assert(m >= n, \"system is underdetermined\")",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert(checkmatrix(b):size\"#\" == 1, \"single RHS expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "local x, rank = ls(a, b, svd)",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "local coef = slice(x, 1, n)",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "local rss = (b - a % coef):norm() ^ 2",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "local rss0 = (b - b:sum() / m):norm() ^ 2",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "local df = m - rank",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "local F = df / (rank - 1) * (rss0 / rss - 1)",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "local pvalue = 1 - stat.pf(F, rank - 1, df)",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function (l, e) return max(l, #fmt(e, d)) end",
    "type": "function"
  }, {
    "id": 198,
    "text": "function(_, ...)\r\n    return type(select(1, ...)) == \"table\" and fromtable(...) or new(...)\r\n  end",
    "type": "function"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "function (i, e)\r\n    if i == 1 then c = init end\r\n    c = f(c, v)\r\n    return c\r\n  end",
    "type": "function"
  }, {
    "id": 201,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 202,
    "text": "function(e) return e < x end",
    "type": "function"
  }, {
    "id": 203,
    "text": "",
    "type": "function container"
  }, {
    "id": 204,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 205,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 206,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 207,
    "text": "print",
    "type": "global function"
  }, {
    "id": 208,
    "text": "eye",
    "type": "global function"
  }, {
    "id": 209,
    "text": "svd",
    "type": "global function"
  }, {
    "id": 210,
    "text": "size",
    "type": "global function"
  }, {
    "id": 211,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 212,
    "text": "c",
    "type": "global function"
  }, {
    "id": 213,
    "text": "linspace",
    "type": "global function"
  }, {
    "id": 214,
    "text": "zeros",
    "type": "global function"
  }, {
    "id": 215,
    "text": "cabs",
    "type": "global function"
  }, {
    "id": 216,
    "text": "sum",
    "type": "global function"
  }, {
    "id": 217,
    "text": "lu",
    "type": "global function"
  }, {
    "id": 218,
    "text": "div",
    "type": "global function"
  }, {
    "id": 219,
    "text": "type",
    "type": "global function"
  }, {
    "id": 220,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 221,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 222,
    "text": "shape",
    "type": "global function"
  }, {
    "id": 223,
    "text": "new",
    "type": "global function"
  }, {
    "id": 224,
    "text": "mmul",
    "type": "global function"
  }, {
    "id": 225,
    "text": "transpose",
    "type": "global function"
  }, {
    "id": 226,
    "text": "fmt",
    "type": "global function"
  }, {
    "id": 227,
    "text": "error",
    "type": "global function"
  }, {
    "id": 228,
    "text": "pf",
    "type": "global function"
  }, {
    "id": 229,
    "text": "find",
    "type": "global function"
  }, {
    "id": 230,
    "text": "u",
    "type": "global function"
  }, {
    "id": 231,
    "text": "set",
    "type": "global function"
  }, {
    "id": 232,
    "text": "ls",
    "type": "global function"
  }, {
    "id": 233,
    "text": "slice",
    "type": "global function"
  }, {
    "id": 234,
    "text": "f",
    "type": "global function"
  }, {
    "id": 235,
    "text": "which",
    "type": "global function"
  }, {
    "id": 236,
    "text": "section",
    "type": "global function"
  }, {
    "id": 237,
    "text": "chol",
    "type": "global function"
  }, {
    "id": 238,
    "text": "ifelse",
    "type": "global function"
  }, {
    "id": 239,
    "text": "list",
    "type": "global function"
  }, {
    "id": 240,
    "text": "mul",
    "type": "global function"
  }, {
    "id": 241,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 242,
    "text": "add",
    "type": "global function"
  }, {
    "id": 243,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 244,
    "text": "signbit",
    "type": "global function"
  }, {
    "id": 245,
    "text": "max",
    "type": "global function"
  }, {
    "id": 246,
    "text": "select",
    "type": "global function"
  }, {
    "id": 247,
    "text": "pretty",
    "type": "global function"
  }, {
    "id": 248,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 249,
    "text": "diag",
    "type": "global function"
  }, {
    "id": 250,
    "text": "new",
    "type": "global function"
  }, {
    "id": 251,
    "text": "",
    "type": "variable container"
  }, {
    "id": 252,
    "text": "",
    "type": "require container"
  }, {
    "id": 253,
    "text": "",
    "type": "local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "n/a"
  }, {
    "id": 255,
    "text": "",
    "type": "local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "n/a"
  }, {
    "id": 257,
    "text": "",
    "type": "local variable"
  }, {
    "id": 258,
    "text": "",
    "type": "n/a"
  }, {
    "id": 259,
    "text": "",
    "type": "local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "n/a"
  }, {
    "id": 261,
    "text": "",
    "type": "local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "n/a"
  }, {
    "id": 263,
    "text": "",
    "type": "local variable"
  }, {
    "id": 264,
    "text": "",
    "type": "n/a"
  }, {
    "id": 265,
    "text": "",
    "type": "local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "n/a"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "n/a"
  }, {
    "id": 269,
    "text": "",
    "type": "local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "n/a"
  }, {
    "id": 271,
    "text": "",
    "type": "local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "n/a"
  }, {
    "id": 273,
    "text": "",
    "type": "local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "n/a"
  }, {
    "id": 275,
    "text": "",
    "type": "local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "n/a"
  }, {
    "id": 277,
    "text": "",
    "type": "local variable"
  }, {
    "id": 278,
    "text": "",
    "type": "n/a"
  }, {
    "id": 279,
    "text": "",
    "type": "local variable"
  }, {
    "id": 280,
    "text": "",
    "type": "n/a"
  }, {
    "id": 281,
    "text": "",
    "type": "local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "n/a"
  }, {
    "id": 283,
    "text": "",
    "type": "local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 285,
    "text": "",
    "type": "local variable"
  }, {
    "id": 286,
    "text": "",
    "type": "n/a"
  }, {
    "id": 287,
    "text": "",
    "type": "local variable"
  }, {
    "id": 288,
    "text": "",
    "type": "n/a"
  }, {
    "id": 289,
    "text": "",
    "type": "local variable"
  }, {
    "id": 290,
    "text": "",
    "type": "n/a"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "n/a"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "n/a"
  }, {
    "id": 295,
    "text": "",
    "type": "local variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "local variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  }, {
    "id": 301,
    "text": "",
    "type": "local variable"
  }, {
    "id": 302,
    "text": "",
    "type": "n/a"
  }, {
    "id": 303,
    "text": "",
    "type": "local variable"
  }, {
    "id": 304,
    "text": "",
    "type": "n/a"
  }, {
    "id": 305,
    "text": "",
    "type": "local variable"
  }, {
    "id": 306,
    "text": "",
    "type": "n/a"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "n/a"
  }, {
    "id": 309,
    "text": "",
    "type": "local variable"
  }, {
    "id": 310,
    "text": "",
    "type": "n/a"
  }, {
    "id": 311,
    "text": "",
    "type": "local variable"
  }, {
    "id": 312,
    "text": "",
    "type": "n/a"
  }, {
    "id": 313,
    "text": "",
    "type": "local variable"
  }, {
    "id": 314,
    "text": "",
    "type": "n/a"
  }, {
    "id": 315,
    "text": "",
    "type": "local variable"
  }, {
    "id": 316,
    "text": "",
    "type": "n/a"
  }, {
    "id": 317,
    "text": "",
    "type": "local variable"
  }, {
    "id": 318,
    "text": "",
    "type": "n/a"
  }, {
    "id": 319,
    "text": "",
    "type": "local variable"
  }, {
    "id": 320,
    "text": "",
    "type": "n/a"
  }, {
    "id": 321,
    "text": "",
    "type": "local variable"
  }, {
    "id": 322,
    "text": "",
    "type": "n/a"
  }, {
    "id": 323,
    "text": "",
    "type": "local variable"
  }, {
    "id": 324,
    "text": "",
    "type": "n/a"
  }, {
    "id": 325,
    "text": "",
    "type": "local variable"
  }, {
    "id": 326,
    "text": "",
    "type": "n/a"
  }, {
    "id": 327,
    "text": "",
    "type": "local variable"
  }, {
    "id": 328,
    "text": "",
    "type": "n/a"
  }, {
    "id": 329,
    "text": "",
    "type": "local variable"
  }, {
    "id": 330,
    "text": "",
    "type": "n/a"
  }, {
    "id": 331,
    "text": "",
    "type": "local variable"
  }, {
    "id": 332,
    "text": "",
    "type": "n/a"
  }, {
    "id": 333,
    "text": "",
    "type": "local variable"
  }, {
    "id": 334,
    "text": "",
    "type": "n/a"
  }, {
    "id": 335,
    "text": "",
    "type": "local variable"
  }, {
    "id": 336,
    "text": "",
    "type": "n/a"
  }, {
    "id": 337,
    "text": "",
    "type": "global variable"
  }, {
    "id": 338,
    "text": "",
    "type": "n/a"
  }, {
    "id": 339,
    "text": "",
    "type": "global variable"
  }, {
    "id": 340,
    "text": "",
    "type": "n/a"
  }, {
    "id": 341,
    "text": "",
    "type": "global variable"
  }, {
    "id": 342,
    "text": "",
    "type": "n/a"
  }, {
    "id": 343,
    "text": "",
    "type": "global variable"
  }, {
    "id": 344,
    "text": "",
    "type": "n/a"
  }, {
    "id": 345,
    "text": "",
    "type": "global variable"
  }, {
    "id": 346,
    "text": "",
    "type": "n/a"
  }, {
    "id": 347,
    "text": "",
    "type": "global variable"
  }, {
    "id": 348,
    "text": "",
    "type": "n/a"
  }, {
    "id": 349,
    "text": "",
    "type": "global variable"
  }, {
    "id": 350,
    "text": "",
    "type": "n/a"
  }, {
    "id": 351,
    "text": "",
    "type": "global variable"
  }, {
    "id": 352,
    "text": "",
    "type": "n/a"
  }, {
    "id": 353,
    "text": "",
    "type": "global variable"
  }, {
    "id": 354,
    "text": "",
    "type": "n/a"
  }, {
    "id": 355,
    "text": "",
    "type": "global variable"
  }, {
    "id": 356,
    "text": "",
    "type": "n/a"
  }, {
    "id": 357,
    "text": "",
    "type": "global variable"
  }, {
    "id": 358,
    "text": "",
    "type": "n/a"
  }, {
    "id": 359,
    "text": "",
    "type": "global variable"
  }, {
    "id": 360,
    "text": "",
    "type": "n/a"
  } ]
}