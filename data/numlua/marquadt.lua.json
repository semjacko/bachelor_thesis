{
  "_filename": "marquadt.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/numlua/examples/marquadt.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 20
  }, {
    "from": 10,
    "label": "has",
    "to": 21
  }, {
    "from": 10,
    "label": "has",
    "to": 22
  }, {
    "from": 10,
    "label": "has",
    "to": 23
  }, {
    "from": 10,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 33,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 33,
    "label": "has",
    "to": 43
  }, {
    "from": 10,
    "label": "has",
    "to": 44
  }, {
    "from": 10,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 44
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 44
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 47
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 48
  }, {
    "from": 51,
    "label": "has",
    "to": 44
  }, {
    "from": 51,
    "label": "has",
    "to": 48
  }, {
    "from": 51,
    "label": "has",
    "to": 44
  }, {
    "from": 51,
    "label": "has",
    "to": 44
  }, {
    "from": 51,
    "label": "has",
    "to": 44
  }, {
    "from": 50,
    "label": "has",
    "to": 44
  }, {
    "from": 50,
    "label": "has",
    "to": 44
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 48
  }, {
    "from": 53,
    "label": "has",
    "to": 44
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 48
  }, {
    "from": 55,
    "label": "has",
    "to": 44
  }, {
    "from": 56,
    "label": "has",
    "to": 48
  }, {
    "from": 56,
    "label": "has",
    "to": 44
  }, {
    "from": 57,
    "label": "has",
    "to": 44
  }, {
    "from": 58,
    "label": "has",
    "to": 44
  }, {
    "from": 59,
    "label": "has",
    "to": 44
  }, {
    "from": 10,
    "label": "calls",
    "to": 70
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 65
  }, {
    "from": 10,
    "label": "calls",
    "to": 63
  }, {
    "from": 10,
    "label": "calls",
    "to": 63
  }, {
    "from": 2,
    "label": "calls",
    "to": 67
  }, {
    "from": 10,
    "label": "calls",
    "to": 64
  }, {
    "from": 10,
    "label": "calls",
    "to": 64
  }, {
    "from": 10,
    "label": "calls",
    "to": 64
  }, {
    "from": 10,
    "label": "calls",
    "to": 64
  }, {
    "from": 10,
    "label": "calls",
    "to": 64
  }, {
    "from": 10,
    "label": "calls",
    "to": 64
  }, {
    "from": 60,
    "label": "calls",
    "to": 71
  }, {
    "from": 60,
    "label": "calls",
    "to": 66
  }, {
    "from": 60,
    "label": "calls",
    "to": 66
  }, {
    "from": 60,
    "label": "calls",
    "to": 66
  }, {
    "from": 60,
    "label": "calls",
    "to": 66
  }, {
    "from": 60,
    "label": "calls",
    "to": 66
  }, {
    "from": 60,
    "label": "calls",
    "to": 66
  }, {
    "from": 10,
    "label": "calls",
    "to": 68
  }, {
    "from": 10,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 62
  }, {
    "from": 2,
    "label": "calls",
    "to": 62
  }, {
    "from": 10,
    "label": "calls",
    "to": 69
  }, {
    "from": 10,
    "label": "calls",
    "to": 69
  }, {
    "from": 10,
    "label": "calls",
    "to": 69
  }, {
    "from": 10,
    "label": "calls",
    "to": 69
  }, {
    "from": 10,
    "label": "calls",
    "to": 61
  }, {
    "from": 10,
    "label": "calls",
    "to": 61
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 60,
    "label": "declares",
    "to": 2
  }, {
    "from": 60,
    "label": "declares",
    "to": 10
  }, {
    "from": 60,
    "label": "declares",
    "to": 46
  }, {
    "from": 60,
    "label": "declares",
    "to": 50
  }, {
    "from": 60,
    "label": "declares",
    "to": 53
  }, {
    "from": 60,
    "label": "declares",
    "to": 55
  }, {
    "from": 60,
    "label": "declares",
    "to": 56
  }, {
    "from": 60,
    "label": "declares",
    "to": 57
  }, {
    "from": 60,
    "label": "declares",
    "to": 58
  }, {
    "from": 60,
    "label": "declares",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 72,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 72,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 72,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 72,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 72,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 72,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 72,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 72,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 72,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "marquadt",
    "type": "module"
  }, {
    "id": 2,
    "text": "function solveh (A, mu, g, h)\r\n  A:diag():add(mu, true) -- A = A + mu * I\r\n  chol(A, true) -- in-place\r\n  h._ = g; h:mul(-1, true) -- h = -g\r\n  trmul(h, A, \"l\", true) -- h = inv(A) * h\r\n  trmul(h, A, \"l\", true, \"t\") -- h = inv(A)' * h\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "A:diag():add(mu, true)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "chol(A, true)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "h._ = g",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "h:mul(-1, true)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "trmul(h, A, \"l\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "trmul(h, A, \"l\", true, \"t\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function marquadt (n, m, ff, Jf, x0, tau, tolg, tolx, maxeval)\r\n  local tau, eps1, eps2, kmax = TAU, EPS1, EPS2, KMAX\r\n  local x, J, f = new(n), new(m, n), new(m) -- arg, Jacobian, function\r\n  local xnew, C = new(n), new(n, n) -- caches\r\n  local h = new(n) -- step\r\n  -- initialize\r\n  local k, nu = 0, 2\r\n  x:set(x0);  J:apply(Jf(x));  f:apply(ff(x))\r\n  local A = zeros(n, n):hemul(J, true) -- A = J' * J\r\n  local g = zeros(n):mmul(J, f, \"t\") -- g = J' * f\r\n  local F = dot(f, f) -- objective\r\n  local found = g:norm\"inf\" <= eps1\r\n  local mu = tau * A:diag():norm\"inf\"\r\n  -- iterate\r\n  while not found and k < kmax do\r\n    k = k + 1\r\n    solveh(set(C, A), mu, g, h) -- solve (A + mu * I) * h = -g for h\r\n    if h:norm() <= eps2 * (eps2 + x:norm()) then\r\n      found = true\r\n    else\r\n      xnew:set(x):add(h, true) -- xnew = x + h\r\n      f:apply(ff(xnew))\r\n      local Fnew = dot(f, f)\r\n      local rho = (F - Fnew) / (mu * dot(h, h) - dot(h, g)) -- gain ratio\r\n      if rho > 0 then -- step acceptable?\r\n        x:set(xnew);  J:apply(Jf(xnew))\r\n        A:set(0):hemul(J, true) -- A = J' * J\r\n        g:set(0):mmul(J, f, \"t\") -- g = J' * f\r\n        F = Fnew\r\n        found = g:norm\"inf\" <= eps1\r\n        mu = mu * max(1 / 3, 1 - (2 * rho - 1) ^ 3)\r\n        vu = 2\r\n      else\r\n        mu = mu * vu\r\n        vu = vu * 2\r\n      end\r\n    end\r\n  end\r\n  return x\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local tau, eps1, eps2, kmax = TAU, EPS1, EPS2, KMAX",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local x, J, f = new(n), new(m, n), new(m)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local xnew, C = new(n), new(n, n)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local h = new(n)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local k, nu = 0, 2",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "x:set(x0)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "J:apply(Jf(x))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "f:apply(ff(x))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local A = zeros(n, n):hemul(J, true)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local g = zeros(n):mmul(J, f, \"t\")",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local F = dot(f, f)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local found = g:norm\"inf\" <= eps1",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local mu = tau * A:diag():norm\"inf\"",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "while not found and k < kmax do\r\n    k = k + 1\r\n    solveh(set(C, A), mu, g, h) -- solve (A + mu * I) * h = -g for h\r\n    if h:norm() <= eps2 * (eps2 + x:norm()) then\r\n      found = true\r\n    else\r\n      xnew:set(x):add(h, true) -- xnew = x + h\r\n      f:apply(ff(xnew))\r\n      local Fnew = dot(f, f)\r\n      local rho = (F - Fnew) / (mu * dot(h, h) - dot(h, g)) -- gain ratio\r\n      if rho > 0 then -- step acceptable?\r\n        x:set(xnew);  J:apply(Jf(xnew))\r\n        A:set(0):hemul(J, true) -- A = J' * J\r\n        g:set(0):mmul(J, f, \"t\") -- g = J' * f\r\n        F = Fnew\r\n        found = g:norm\"inf\" <= eps1\r\n        mu = mu * max(1 / 3, 1 - (2 * rho - 1) ^ 3)\r\n        vu = 2\r\n      else\r\n        mu = mu * vu\r\n        vu = vu * 2\r\n      end\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 25,
    "text": "k = k + 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "solveh(set(C, A), mu, g, h)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "if h:norm() <= eps2 * (eps2 + x:norm()) then\r\n      found = true\r\n    else\r\n      xnew:set(x):add(h, true) -- xnew = x + h\r\n      f:apply(ff(xnew))\r\n      local Fnew = dot(f, f)\r\n      local rho = (F - Fnew) / (mu * dot(h, h) - dot(h, g)) -- gain ratio\r\n      if rho > 0 then -- step acceptable?\r\n        x:set(xnew);  J:apply(Jf(xnew))\r\n        A:set(0):hemul(J, true) -- A = J' * J\r\n        g:set(0):mmul(J, f, \"t\") -- g = J' * f\r\n        F = Fnew\r\n        found = g:norm\"inf\" <= eps1\r\n        mu = mu * max(1 / 3, 1 - (2 * rho - 1) ^ 3)\r\n        vu = 2\r\n      else\r\n        mu = mu * vu\r\n        vu = vu * 2\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "found = true",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "xnew:set(x):add(h, true)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "f:apply(ff(xnew))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "local Fnew = dot(f, f)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local rho = (F - Fnew) / (mu * dot(h, h) - dot(h, g))",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if rho > 0 then -- step acceptable?\r\n        x:set(xnew);  J:apply(Jf(xnew))\r\n        A:set(0):hemul(J, true) -- A = J' * J\r\n        g:set(0):mmul(J, f, \"t\") -- g = J' * f\r\n        F = Fnew\r\n        found = g:norm\"inf\" <= eps1\r\n        mu = mu * max(1 / 3, 1 - (2 * rho - 1) ^ 3)\r\n        vu = 2\r\n      else\r\n        mu = mu * vu\r\n        vu = vu * 2\r\n      end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "x:set(xnew)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "J:apply(Jf(xnew))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "A:set(0):hemul(J, true)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "g:set(0):mmul(J, f, \"t\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "F = Fnew",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "found = g:norm\"inf\" <= eps1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "mu = mu * max(1 / 3, 1 - (2 * rho - 1) ^ 3)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "vu = 2",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "mu = mu * vu",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "vu = vu * 2",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function (x)\r\n  local x1, x2, x3, x4 = x[1], x[2], x[3], x[4]\r\n  return function (i) -- each f_i(x)\r\n    local ti = t[i]\r\n    return y[i] - x3 * exp(x1 * ti) - x4 * exp(x2 * ti)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local x1, x2, x3, x4 = x[1], x[2], x[3], x[4]",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local ti = t[i]",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function (x) -- Jacobian\r\n  local x1, x2, x3, x4 = x[1], x[2], x[3], x[4]\r\n  local df = {\r\n    [1] = function (i) local ti = t[i] return -x3 * ti * exp(x1 * ti) end,\r\n    [2] = function (i) local ti = t[i] return -x4 * ti * exp(x2 * ti) end,\r\n    [3] = function (i) return -exp(x1 * ti) end,\r\n    [4] = function (i) return -exp(x2 * ti) end\r\n  }\r\n  return function (i, j) return df[j](i) end -- each df_i(x)/dx_j\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local df = {\r\n    [1] = function (i) local ti = t[i] return -x3 * ti * exp(x1 * ti) end,\r\n    [2] = function (i) local ti = t[i] return -x4 * ti * exp(x2 * ti) end,\r\n    [3] = function (i) return -exp(x1 * ti) end,\r\n    [4] = function (i) return -exp(x2 * ti) end\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function (i) -- each f_i(x)\r\n    local ti = t[i]\r\n    return y[i] - x3 * exp(x1 * ti) - x4 * exp(x2 * ti)\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function (i) local ti = t[i] return -x3 * ti * exp(x1 * ti) end",
    "type": "function"
  }, {
    "id": 56,
    "text": "function (i) local ti = t[i] return -x4 * ti * exp(x2 * ti) end",
    "type": "function"
  }, {
    "id": 57,
    "text": "function (i) return -exp(x1 * ti) end",
    "type": "function"
  }, {
    "id": 58,
    "text": "function (i) return -exp(x2 * ti) end",
    "type": "function"
  }, {
    "id": 59,
    "text": "function (i, j) return df[j](i) end",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "function container"
  }, {
    "id": 61,
    "text": "Jf",
    "type": "global function"
  }, {
    "id": 62,
    "text": "trmul",
    "type": "global function"
  }, {
    "id": 63,
    "text": "zeros",
    "type": "global function"
  }, {
    "id": 64,
    "text": "new",
    "type": "global function"
  }, {
    "id": 65,
    "text": "set",
    "type": "global function"
  }, {
    "id": 66,
    "text": "exp",
    "type": "global function"
  }, {
    "id": 67,
    "text": "chol",
    "type": "global function"
  }, {
    "id": 68,
    "text": "ff",
    "type": "global function"
  }, {
    "id": 69,
    "text": "dot",
    "type": "global function"
  }, {
    "id": 70,
    "text": "max",
    "type": "global function"
  }, {
    "id": 71,
    "text": "df[j]",
    "type": "global function"
  }, {
    "id": 72,
    "text": "",
    "type": "variable container"
  }, {
    "id": 73,
    "text": "",
    "type": "require container"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "number"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "number"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "number"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "number"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 84,
    "text": "",
    "type": "symbol"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "symbol"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  } ]
}