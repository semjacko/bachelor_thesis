{
  "_filename": "lm.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/numlua/examples/lm.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 36
  }, {
    "from": 24,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 24,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 46
  }, {
    "from": 24,
    "label": "has",
    "to": 47
  }, {
    "from": 24,
    "label": "has",
    "to": 48
  }, {
    "from": 24,
    "label": "has",
    "to": 49
  }, {
    "from": 24,
    "label": "has",
    "to": 50
  }, {
    "from": 24,
    "label": "has",
    "to": 51
  }, {
    "from": 24,
    "label": "has",
    "to": 52
  }, {
    "from": 24,
    "label": "has",
    "to": 53
  }, {
    "from": 24,
    "label": "has",
    "to": 54
  }, {
    "from": 24,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 7
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 63,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 63,
    "label": "has",
    "to": 74
  }, {
    "from": 63,
    "label": "has",
    "to": 75
  }, {
    "from": 63,
    "label": "has",
    "to": 76
  }, {
    "from": 63,
    "label": "has",
    "to": 77
  }, {
    "from": 63,
    "label": "has",
    "to": 78
  }, {
    "from": 63,
    "label": "has",
    "to": 79
  }, {
    "from": 63,
    "label": "has",
    "to": 80
  }, {
    "from": 63,
    "label": "has",
    "to": 81
  }, {
    "from": 63,
    "label": "has",
    "to": 82
  }, {
    "from": 63,
    "label": "has",
    "to": 83
  }, {
    "from": 63,
    "label": "has",
    "to": 84
  }, {
    "from": 63,
    "label": "has",
    "to": 85
  }, {
    "from": 63,
    "label": "has",
    "to": 86
  }, {
    "from": 63,
    "label": "has",
    "to": 4
  }, {
    "from": 63,
    "label": "has",
    "to": 87
  }, {
    "from": 9,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 89
  }, {
    "from": 63,
    "label": "calls",
    "to": 90
  }, {
    "from": 63,
    "label": "calls",
    "to": 90
  }, {
    "from": 63,
    "label": "calls",
    "to": 90
  }, {
    "from": 63,
    "label": "calls",
    "to": 108
  }, {
    "from": 63,
    "label": "calls",
    "to": 91
  }, {
    "from": 9,
    "label": "calls",
    "to": 92
  }, {
    "from": 9,
    "label": "calls",
    "to": 92
  }, {
    "from": 9,
    "label": "calls",
    "to": 92
  }, {
    "from": 9,
    "label": "calls",
    "to": 92
  }, {
    "from": 63,
    "label": "calls",
    "to": 93
  }, {
    "from": 9,
    "label": "calls",
    "to": 94
  }, {
    "from": 24,
    "label": "calls",
    "to": 94
  }, {
    "from": 24,
    "label": "calls",
    "to": 94
  }, {
    "from": 24,
    "label": "calls",
    "to": 94
  }, {
    "from": 24,
    "label": "calls",
    "to": 94
  }, {
    "from": 24,
    "label": "calls",
    "to": 94
  }, {
    "from": 24,
    "label": "calls",
    "to": 121
  }, {
    "from": 63,
    "label": "calls",
    "to": 100
  }, {
    "from": 63,
    "label": "calls",
    "to": 111
  }, {
    "from": 24,
    "label": "calls",
    "to": 9
  }, {
    "from": 63,
    "label": "calls",
    "to": 116
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 109
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 63,
    "label": "calls",
    "to": 56
  }, {
    "from": 24,
    "label": "calls",
    "to": 112
  }, {
    "from": 63,
    "label": "calls",
    "to": 98
  }, {
    "from": 63,
    "label": "calls",
    "to": 98
  }, {
    "from": 63,
    "label": "calls",
    "to": 98
  }, {
    "from": 63,
    "label": "calls",
    "to": 98
  }, {
    "from": 24,
    "label": "calls",
    "to": 117
  }, {
    "from": 24,
    "label": "calls",
    "to": 99
  }, {
    "from": 56,
    "label": "calls",
    "to": 113
  }, {
    "from": 63,
    "label": "calls",
    "to": 113
  }, {
    "from": 9,
    "label": "calls",
    "to": 103
  }, {
    "from": 63,
    "label": "calls",
    "to": 103
  }, {
    "from": 63,
    "label": "calls",
    "to": 103
  }, {
    "from": 56,
    "label": "calls",
    "to": 107
  }, {
    "from": 63,
    "label": "calls",
    "to": 114
  }, {
    "from": 56,
    "label": "calls",
    "to": 95
  }, {
    "from": 24,
    "label": "calls",
    "to": 115
  }, {
    "from": 24,
    "label": "calls",
    "to": 101
  }, {
    "from": 63,
    "label": "calls",
    "to": 104
  }, {
    "from": 63,
    "label": "calls",
    "to": 96
  }, {
    "from": 24,
    "label": "calls",
    "to": 110
  }, {
    "from": 24,
    "label": "calls",
    "to": 110
  }, {
    "from": 63,
    "label": "calls",
    "to": 110
  }, {
    "from": 63,
    "label": "calls",
    "to": 118
  }, {
    "from": 63,
    "label": "calls",
    "to": 118
  }, {
    "from": 24,
    "label": "calls",
    "to": 102
  }, {
    "from": 63,
    "label": "calls",
    "to": 119
  }, {
    "from": 88,
    "label": "calls",
    "to": 120
  }, {
    "from": 63,
    "label": "calls",
    "to": 105
  }, {
    "from": 24,
    "label": "calls",
    "to": 6
  }, {
    "from": 1,
    "label": "contains",
    "to": 88
  }, {
    "from": 88,
    "label": "declares",
    "to": 2
  }, {
    "from": 88,
    "label": "declares",
    "to": 6
  }, {
    "from": 88,
    "label": "declares",
    "to": 9
  }, {
    "from": 88,
    "label": "declares",
    "to": 24
  }, {
    "from": 88,
    "label": "declares",
    "to": 56
  }, {
    "from": 88,
    "label": "declares",
    "to": 63
  }, {
    "from": 1,
    "label": "contains",
    "to": 123
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 123,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 123,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 123,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 123,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 123,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 123,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 123,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 123,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 123,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 123,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 123,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 123,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 123,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 123,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 123,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 123,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 123,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 123,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 123,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 123,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 123,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 123,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 123,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 170,
    "label": "assigns",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 124,
    "label": "initializes",
    "to": 122
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lm",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function fmt (x, nd)\r\n  local nd = nd or 4 -- #digits\r\n  return string.format(\"%.\" .. nd .. \"f\", x)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local nd = nd or 4",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function label (n)\r\n  n = n - 1\r\n  return n == 0 and \"(Intercept)\" or (\"X\" .. n)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "n = n - 1",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function printtable (t, ns)\r\n  local ns = ns or 1 -- # spaces\r\n  local ml = 0\r\n  for _, r in ipairs(t) do\r\n    for i, v in ipairs(r) do\r\n      local s = type(v) == \"string\" and v or fmt(v)\r\n      r[i] = s; s = #s\r\n      if ml < s then ml = s end\r\n    end\r\n  end\r\n  for _, r in ipairs(t) do\r\n    for i, v in ipairs(r) do\r\n      r[i] = (\" \"):rep(ns + ml - #v) .. v\r\n    end\r\n    print(table.concat(r))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local ns = ns or 1",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local ml = 0",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "for _, r in ipairs(t) do\r\n    for i, v in ipairs(r) do\r\n      local s = type(v) == \"string\" and v or fmt(v)\r\n      r[i] = s; s = #s\r\n      if ml < s then ml = s end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "for i, v in ipairs(r) do\r\n      local s = type(v) == \"string\" and v or fmt(v)\r\n      r[i] = s; s = #s\r\n      if ml < s then ml = s end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "local s = type(v) == \"string\" and v or fmt(v)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "r[i] = s",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "s = #s",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if ml < s then ml = s end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "ml = s",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "for _, r in ipairs(t) do\r\n    for i, v in ipairs(r) do\r\n      r[i] = (\" \"):rep(ns + ml - #v) .. v\r\n    end\r\n    print(table.concat(r))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "for i, v in ipairs(r) do\r\n      r[i] = (\" \"):rep(ns + ml - #v) .. v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "r[i] = (\" \"):rep(ns + ml - #v) .. v",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "print(table.concat(r))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function summary (m)\r\n  local coef, pvt, rank = m.coef, m.pivot, m.rank\r\n  local res, fit = m.residuals, m.fitted\r\n  local sigma = sqrt(diag(m.covmatrix))\r\n  -- statistics\r\n  local n = #res\r\n  local df = n - rank\r\n  local dd = rank - 1 -- df0 - df (with intercept)\r\n  local mss = norm(fit - sum(fit) / #fit) ^ 2\r\n  local rss = norm(res) ^ 2\r\n  -- report\r\n  local order = linspace(1, #pvt):pivot(pvt)\r\n  print(\"Coefficients:\")\r\n  local t = {}\r\n  -- header\r\n  t[1] = {\"Predictor\", \"Estimate\", \"Std. Error\", \"t value\", \"Pr(>|t|)\"}\r\n  -- coefficients\r\n  for i = 1, #pvt do\r\n    local oi = order[i]\r\n    if oi <= rank then\r\n      local bi = coef[oi]\r\n      local si = sigma[oi]\r\n      local ti = bi / si\r\n      local pi = 2 * pt(-abs(ti), df) -- p-value\r\n      t[#t + 1] = {label(i), fmt(bi), fmt(si), fmt(ti), fmt(pi, 5)}\r\n    end\r\n  end\r\n  printtable(t); print()\r\n  -- regression\r\n  local se = rss / df\r\n  print(\"Residual standard error: \" .. fmt(math.sqrt(se))\r\n    .. \" on \" .. df .. \" degrees of freedom\")\r\n  local r2 = mss / (mss + rss)\r\n  local adjr2 = 1 - (1 - r2) * (n - 1) / df\r\n  print(\"Multiple R-squared: \" .. fmt(r2)\r\n    .. \",  Adjusted R-squared: \" .. fmt(adjr2))\r\n  local f = mss / dd / se\r\n  local pv = 1 - pf(f, dd, df)\r\n  print(\"F-statistics: \" .. fmt(f) .. \" on \" .. dd .. \" and \" .. df\r\n    .. \" DFs,  p-value: \" .. fmt(pv, 5))\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local coef, pvt, rank = m.coef, m.pivot, m.rank",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local res, fit = m.residuals, m.fitted",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local sigma = sqrt(diag(m.covmatrix))",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local n = #res",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local df = n - rank",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local dd = rank - 1",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local mss = norm(fit - sum(fit) / #fit) ^ 2",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local rss = norm(res) ^ 2",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local order = linspace(1, #pvt):pivot(pvt)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "print(\"Coefficients:\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "t[1] = {\"Predictor\", \"Estimate\", \"Std. Error\", \"t value\", \"Pr(>|t|)\"}",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "for i = 1, #pvt do\r\n    local oi = order[i]\r\n    if oi <= rank then\r\n      local bi = coef[oi]\r\n      local si = sigma[oi]\r\n      local ti = bi / si\r\n      local pi = 2 * pt(-abs(ti), df) -- p-value\r\n      t[#t + 1] = {label(i), fmt(bi), fmt(si), fmt(ti), fmt(pi, 5)}\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 38,
    "text": "local oi = order[i]",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if oi <= rank then\r\n      local bi = coef[oi]\r\n      local si = sigma[oi]\r\n      local ti = bi / si\r\n      local pi = 2 * pt(-abs(ti), df) -- p-value\r\n      t[#t + 1] = {label(i), fmt(bi), fmt(si), fmt(ti), fmt(pi, 5)}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local bi = coef[oi]",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local si = sigma[oi]",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local ti = bi / si",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local pi = 2 * pt(-abs(ti), df)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "t[#t + 1] = {label(i), fmt(bi), fmt(si), fmt(ti), fmt(pi, 5)}",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "printtable(t)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local se = rss / df",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "print(\"Residual standard error: \" .. fmt(math.sqrt(se))\r\n    .. \" on \" .. df .. \" degrees of freedom\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local r2 = mss / (mss + rss)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local adjr2 = 1 - (1 - r2) * (n - 1) / df",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "print(\"Multiple R-squared: \" .. fmt(r2)\r\n    .. \",  Adjusted R-squared: \" .. fmt(adjr2))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local f = mss / dd / se",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local pv = 1 - pf(f, dd, df)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "print(\"F-statistics: \" .. fmt(f) .. \" on \" .. dd .. \" and \" .. df\r\n    .. \" DFs,  p-value: \" .. fmt(pv, 5))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function getrank (r, tol)\r\n  local n = min(shape(r))\r\n  local c = r[n][n] ^ 2\r\n  while c < tol and n > 1 do\r\n    n = n - 1\r\n    local rn = r[n]\r\n    c = max(c + rn[n + 1] ^ 2, rn[n] ^ 2)\r\n  end\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local n = min(shape(r))",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local c = r[n][n] ^ 2",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "while c < tol and n > 1 do\r\n    n = n - 1\r\n    local rn = r[n]\r\n    c = max(c + rn[n + 1] ^ 2, rn[n] ^ 2)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 60,
    "text": "local rn = r[n]",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "c = max(c + rn[n + 1] ^ 2, rn[n] ^ 2)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function lm (y, ...)\r\n  -- read variables and build design matrix\r\n  assert(type(y) == \"matrix\" and y:size\"#\" == 1,\r\n    \"vector expected for response variable\")\r\n  local m = #y\r\n  local t = {ones(m)}\r\n  for i = 1, select(\"#\", ...) do\r\n    local x = select(i, ...)\r\n    assert(type(x) == \"matrix\" and x:size\"#\" == 1,\r\n      \"vector expected for predictor\")\r\n    assert(#x == m, \"inconsistent dimension for predictor\")\r\n    t[#t + 1] = x\r\n  end\r\n  local n = #t\r\n  t[n + 1] = true\r\n  local X = concat(unpack(t))\r\n  local tol = max(m, n) * eps\r\n  -- fit model\r\n  local q, r, p = qr(X, true)\r\n  local rank = getrank(r, tol)\r\n  local qt = q{{}, {1, rank}}\r\n  local rt = r{{1, rank}, {1, rank}}\r\n  local yt = mmul(zeros(rank), qt, y, 't') -- bt = Q'(1:rank,:) * b\r\n  local z = trmul(yt, rt, 'u', true) -- rt * z = bt\r\n  local fit = qt * trmul(copy(z), rt, 'u') -- fitted values: qt * rt * z\r\n  local res = y - fit -- residuals\r\n  local xtxi = trmul(eye(rank), rt, 'u', true, 't')\r\n  trmul(xtxi, rt, 'u', true) -- xtxi = (r' * r)^(-1)\r\n  mul(xtxi, norm(res) ^ 2 / (m - rank), true) -- xtxi = xtxi * sigmahat^2\r\n  return setmetatable({coef = z, pivot = p, rank = rank,\r\n    residuals = res, fitted = fit, covmatrix = xtxi}, mt)\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "assert(type(y) == \"matrix\" and y:size\"#\" == 1,\r\n    \"vector expected for response variable\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local m = #y",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local t = {ones(m)}",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "for i = 1, select(\"#\", ...) do\r\n    local x = select(i, ...)\r\n    assert(type(x) == \"matrix\" and x:size\"#\" == 1,\r\n      \"vector expected for predictor\")\r\n    assert(#x == m, \"inconsistent dimension for predictor\")\r\n    t[#t + 1] = x\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 68,
    "text": "local x = select(i, ...)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "assert(type(x) == \"matrix\" and x:size\"#\" == 1,\r\n      \"vector expected for predictor\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert(#x == m, \"inconsistent dimension for predictor\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "t[#t + 1] = x",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "local n = #t",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "t[n + 1] = true",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "local X = concat(unpack(t))",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local tol = max(m, n) * eps",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local q, r, p = qr(X, true)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local rank = getrank(r, tol)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local qt = q{{}, {1, rank}}",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local rt = r{{1, rank}, {1, rank}}",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local yt = mmul(zeros(rank), qt, y, 't')",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local z = trmul(yt, rt, 'u', true)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local fit = qt * trmul(copy(z), rt, 'u')",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local res = y - fit",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local xtxi = trmul(eye(rank), rt, 'u', true, 't')",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "trmul(xtxi, rt, 'u', true)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "mul(xtxi, norm(res) ^ 2 / (m - rank), true)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "",
    "type": "function container"
  }, {
    "id": 89,
    "text": "q",
    "type": "global function"
  }, {
    "id": 90,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 91,
    "text": "r",
    "type": "global function"
  }, {
    "id": 92,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 93,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 94,
    "text": "print",
    "type": "global function"
  }, {
    "id": 95,
    "text": "min",
    "type": "global function"
  }, {
    "id": 96,
    "text": "qr",
    "type": "global function"
  }, {
    "id": 97,
    "text": "pt",
    "type": "global function"
  }, {
    "id": 98,
    "text": "trmul",
    "type": "global function"
  }, {
    "id": 99,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 100,
    "text": "zeros",
    "type": "global function"
  }, {
    "id": 101,
    "text": "linspace",
    "type": "global function"
  }, {
    "id": 102,
    "text": "sum",
    "type": "global function"
  }, {
    "id": 103,
    "text": "type",
    "type": "global function"
  }, {
    "id": 104,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 105,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 106,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 107,
    "text": "shape",
    "type": "global function"
  }, {
    "id": 108,
    "text": "mmul",
    "type": "global function"
  }, {
    "id": 109,
    "text": "format",
    "type": "global function"
  }, {
    "id": 110,
    "text": "norm",
    "type": "global function"
  }, {
    "id": 111,
    "text": "mul",
    "type": "global function"
  }, {
    "id": 112,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 113,
    "text": "max",
    "type": "global function"
  }, {
    "id": 114,
    "text": "ones",
    "type": "global function"
  }, {
    "id": 115,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 116,
    "text": "eye",
    "type": "global function"
  }, {
    "id": 117,
    "text": "pf",
    "type": "global function"
  }, {
    "id": 118,
    "text": "select",
    "type": "global function"
  }, {
    "id": 119,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 120,
    "text": "require",
    "type": "global function"
  }, {
    "id": 121,
    "text": "diag",
    "type": "global function"
  }, {
    "id": 122,
    "text": "",
    "type": "global variable"
  }, {
    "id": 123,
    "text": "",
    "type": "variable container"
  }, {
    "id": 124,
    "text": "",
    "type": "require container"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "n/a"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "n/a"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "n/a"
  }, {
    "id": 159,
    "text": "",
    "type": "local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 171,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 172,
    "text": "",
    "type": "tableconstructor"
  } ]
}