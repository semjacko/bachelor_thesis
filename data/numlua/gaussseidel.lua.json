{
  "_filename": "gaussseidel.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/numlua/examples/gaussseidel.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "calls",
    "to": 24
  }, {
    "from": 21,
    "label": "calls",
    "to": 25
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 21
  }, {
    "from": 21,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 27,
    "label": "initializes",
    "to": 29
  }, {
    "from": 29,
    "label": "assigns",
    "to": 30
  }, {
    "from": 27,
    "label": "initializes",
    "to": 31
  }, {
    "from": 31,
    "label": "assigns",
    "to": 32
  }, {
    "from": 28,
    "label": "initializes",
    "to": 26
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "gaussseidel",
    "type": "module"
  }, {
    "id": 2,
    "text": "function gaussseidel (A, b, x0, tol)\r\n  local tol = tol or 1e-6\r\n  local n = A:size(1)\r\n  assert(A:size\"#\" == 2 and A:size(2) == n, \"square matrix expected\")\r\n  assert(b:size\"#\" == 1 and b:size(1) == n, \"consistent vector expected\")\r\n  local S = zeros(n, n)\r\n  S.U = A -- S has upper triangle of A\r\n  S:mul(-1, true) -- S = -S (inplace)\r\n  S:trmul(A, \"l\", true) -- S = A.L^(-1) * S\r\n  local u = b:copy():trmul(A, \"l\", true) -- u = A.L^(-1) * b\r\n  local x = x0:copy()\r\n  local xc = zeros(n) -- current solution\r\n  repeat\r\n    xc._ = u\r\n    xc:mmul(S, x) -- xc = xc + S * x\r\n    swap(x, xc)\r\n    xc:add(x, -1, true) -- xc = xc - x (inplace)\r\n  until xc:norm() < tol\r\n  return x\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local tol = tol or 1e-6",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local n = A:size(1)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "assert(A:size\"#\" == 2 and A:size(2) == n, \"square matrix expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "assert(b:size\"#\" == 1 and b:size(1) == n, \"consistent vector expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local S = zeros(n, n)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "S.U = A",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "S:mul(-1, true)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "S:trmul(A, \"l\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "local u = b:copy():trmul(A, \"l\", true)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local x = x0:copy()",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local xc = zeros(n)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "repeat\r\n    xc._ = u\r\n    xc:mmul(S, x) -- xc = xc + S * x\r\n    swap(x, xc)\r\n    xc:add(x, -1, true) -- xc = xc - x (inplace)\r\n  until xc:norm() < tol",
    "type": "statement:repeat"
  }, {
    "id": 15,
    "text": "xc._ = u",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "xc:mmul(S, x)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "swap(x, xc)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "xc:add(x, -1, true)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "",
    "type": "function container"
  }, {
    "id": 22,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 23,
    "text": "zeros",
    "type": "global function"
  }, {
    "id": 24,
    "text": "swap",
    "type": "global function"
  }, {
    "id": 25,
    "text": "require",
    "type": "global function"
  }, {
    "id": 26,
    "text": "",
    "type": "global variable"
  }, {
    "id": 27,
    "text": "",
    "type": "variable container"
  }, {
    "id": 28,
    "text": "",
    "type": "require container"
  }, {
    "id": 29,
    "text": "",
    "type": "local variable"
  }, {
    "id": 30,
    "text": "",
    "type": "n/a"
  }, {
    "id": 31,
    "text": "",
    "type": "local variable"
  }, {
    "id": 32,
    "text": "",
    "type": "n/a"
  } ]
}