{
  "_filename": "config.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/config/config.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 18
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 6
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 10
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "calls",
    "to": 2
  }, {
    "from": 20,
    "label": "calls",
    "to": 2
  }, {
    "from": 16,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 25,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 25,
    "label": "calls",
    "to": 33
  }, {
    "from": 25,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 20,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 25,
    "label": "declares",
    "to": 2
  }, {
    "from": 25,
    "label": "declares",
    "to": 16
  }, {
    "from": 25,
    "label": "declares",
    "to": 20
  }, {
    "from": 25,
    "label": "declares",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 36,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  }, {
    "from": 36,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 36,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 37,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 45
  }, {
    "from": 37,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 46
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 23
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "config",
    "type": "module"
  }, {
    "id": 2,
    "text": "function loadFunction(fct)\r\n\tlocal old_mt = base.getmetatable(settings)\r\n\tlocal loader = { active = true }\r\n\tbase.setmetatable(settings,\r\n\t{\r\n\t\t__index = function(table, key)\r\n\t\t\tlocal t = {}\r\n\t\t\tbase.setmetatable(t, base.getmetatable(table))\r\n\t\t\tif loader.active and base.rawget(table, key) == nil then base.rawset(table, key, t) end\r\n\t\t\treturn base.rawget(table, key)\r\n\t\tend,\r\n\t})\r\n\r\n\tbase.setfenv(fct, settings)\r\n\tlocal ret, err = base.pcall(fct)\r\n\tloader.active = false\r\n\r\n\tif ret then return true\r\n\telse return false, err end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local old_mt = base.getmetatable(settings)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local loader = { active = true }",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "base.setmetatable(settings,\r\n\t{\r\n\t\t__index = function(table, key)\r\n\t\t\tlocal t = {}\r\n\t\t\tbase.setmetatable(t, base.getmetatable(table))\r\n\t\t\tif loader.active and base.rawget(table, key) == nil then base.rawset(table, key, t) end\r\n\t\t\treturn base.rawget(table, key)\r\n\t\tend,\r\n\t})",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "base.setmetatable(t, base.getmetatable(table))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "if loader.active and base.rawget(table, key) == nil then base.rawset(table, key, t) end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "base.rawset(table, key, t)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "base.setfenv(fct, settings)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local ret, err = base.pcall(fct)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "loader.active = false",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if ret then return true\r\n\telse return false, err end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function loadString(str)\r\n\tlocal fct = base.loadstring(str)\r\n\tif fct then\r\n\t\treturn loadFunction(fct)\r\n\tend\r\n\treturn nil, \"Could not load string\"\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local fct = base.loadstring(str)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if fct then\r\n\t\treturn loadFunction(fct)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function loadFile(file)\r\n\tlocal fct = base.loadfile(file)\r\n\tif fct then\r\n\t\treturn loadFunction(fct)\r\n\tend\r\n\treturn nil, \"Could not load file\"\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local fct = base.loadfile(file)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function(table, key)\r\n\t\t\tlocal t = {}\r\n\t\t\tbase.setmetatable(t, base.getmetatable(table))\r\n\t\t\tif loader.active and base.rawget(table, key) == nil then base.rawset(table, key, t) end\r\n\t\t\treturn base.rawget(table, key)\r\n\t\tend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "",
    "type": "function container"
  }, {
    "id": 26,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 27,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 28,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 29,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 30,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 31,
    "text": "module",
    "type": "global function"
  }, {
    "id": 32,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 33,
    "text": "require",
    "type": "global function"
  }, {
    "id": 34,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 35,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 36,
    "text": "",
    "type": "variable container"
  }, {
    "id": 37,
    "text": "",
    "type": "require container"
  }, {
    "id": 38,
    "text": "",
    "type": "local variable"
  }, {
    "id": 39,
    "text": "",
    "type": "n/a"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  }, {
    "id": 41,
    "text": "",
    "type": "n/a"
  }, {
    "id": 42,
    "text": "",
    "type": "global variable"
  }, {
    "id": 43,
    "text": "",
    "type": "n/a"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 46,
    "text": "(table)",
    "type": "module"
  } ]
}