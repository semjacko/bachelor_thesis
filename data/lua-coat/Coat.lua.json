{
  "_filename": "Coat.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-coat/src/Coat.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 16,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 26
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 26
  }, {
    "from": 60,
    "label": "has",
    "to": 26
  }, {
    "from": 60,
    "label": "has",
    "to": 26
  }, {
    "from": 55,
    "label": "has",
    "to": 66
  }, {
    "from": 55,
    "label": "has",
    "to": 67
  }, {
    "from": 55,
    "label": "has",
    "to": 26
  }, {
    "from": 55,
    "label": "has",
    "to": 26
  }, {
    "from": 55,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 69,
    "label": "has",
    "to": 26
  }, {
    "from": 69,
    "label": "has",
    "to": 26
  }, {
    "from": 69,
    "label": "has",
    "to": 26
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 64
  }, {
    "from": 79,
    "label": "has",
    "to": 65
  }, {
    "from": 76,
    "label": "has",
    "to": 26
  }, {
    "from": 76,
    "label": "has",
    "to": 26
  }, {
    "from": 76,
    "label": "has",
    "to": 26
  }, {
    "from": 71,
    "label": "has",
    "to": 66
  }, {
    "from": 71,
    "label": "has",
    "to": 80
  }, {
    "from": 71,
    "label": "has",
    "to": 26
  }, {
    "from": 71,
    "label": "has",
    "to": 26
  }, {
    "from": 71,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 64
  }, {
    "from": 79,
    "label": "has",
    "to": 65
  }, {
    "from": 82,
    "label": "has",
    "to": 26
  }, {
    "from": 82,
    "label": "has",
    "to": 26
  }, {
    "from": 82,
    "label": "has",
    "to": 26
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 26
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 26
  }, {
    "from": 91,
    "label": "has",
    "to": 26
  }, {
    "from": 87,
    "label": "has",
    "to": 26
  }, {
    "from": 84,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 66
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 101,
    "label": "has",
    "to": 109
  }, {
    "from": 101,
    "label": "has",
    "to": 110
  }, {
    "from": 101,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 105
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 108
  }, {
    "from": 95,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 94,
    "label": "has",
    "to": 26
  }, {
    "from": 94,
    "label": "has",
    "to": 26
  }, {
    "from": 94,
    "label": "has",
    "to": 26
  }, {
    "from": 94,
    "label": "has",
    "to": 26
  }, {
    "from": 84,
    "label": "has",
    "to": 26
  }, {
    "from": 84,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 88
  }, {
    "from": 118,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 118,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 26
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 26
  }, {
    "from": 91,
    "label": "has",
    "to": 26
  }, {
    "from": 118,
    "label": "has",
    "to": 26
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 66
  }, {
    "from": 120,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 101,
    "label": "has",
    "to": 109
  }, {
    "from": 101,
    "label": "has",
    "to": 110
  }, {
    "from": 101,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 105
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 108
  }, {
    "from": 95,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 120,
    "label": "has",
    "to": 26
  }, {
    "from": 120,
    "label": "has",
    "to": 26
  }, {
    "from": 120,
    "label": "has",
    "to": 26
  }, {
    "from": 120,
    "label": "has",
    "to": 26
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 125,
    "label": "has",
    "to": 132
  }, {
    "from": 125,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 122,
    "label": "has",
    "to": 137
  }, {
    "from": 122,
    "label": "has",
    "to": 138
  }, {
    "from": 122,
    "label": "has",
    "to": 139
  }, {
    "from": 122,
    "label": "has",
    "to": 140
  }, {
    "from": 122,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 26
  }, {
    "from": 141,
    "label": "has",
    "to": 26
  }, {
    "from": 122,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 122,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 26
  }, {
    "from": 122,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 122,
    "label": "has",
    "to": 26
  }, {
    "from": 122,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 142
  }, {
    "from": 153,
    "label": "has",
    "to": 143
  }, {
    "from": 153,
    "label": "has",
    "to": 26
  }, {
    "from": 153,
    "label": "has",
    "to": 26
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 145
  }, {
    "from": 155,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 26
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 26
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 168,
    "label": "has",
    "to": 172
  }, {
    "from": 168,
    "label": "has",
    "to": 173
  }, {
    "from": 166,
    "label": "has",
    "to": 26
  }, {
    "from": 166,
    "label": "has",
    "to": 26
  }, {
    "from": 166,
    "label": "has",
    "to": 26
  }, {
    "from": 166,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 180,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 179,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 181
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 190,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 179,
    "label": "has",
    "to": 199
  }, {
    "from": 176,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 175,
    "label": "has",
    "to": 26
  }, {
    "from": 175,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 181
  }, {
    "from": 205,
    "label": "has",
    "to": 189
  }, {
    "from": 205,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 190,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 211,
    "label": "has",
    "to": 214
  }, {
    "from": 209,
    "label": "has",
    "to": 215
  }, {
    "from": 209,
    "label": "has",
    "to": 216
  }, {
    "from": 209,
    "label": "has",
    "to": 217
  }, {
    "from": 207,
    "label": "has",
    "to": 218
  }, {
    "from": 207,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 207,
    "label": "has",
    "to": 222
  }, {
    "from": 207,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 207,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 227,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 233,
    "label": "has",
    "to": 237
  }, {
    "from": 233,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 233,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 239
  }, {
    "from": 233,
    "label": "has",
    "to": 242
  }, {
    "from": 233,
    "label": "has",
    "to": 243
  }, {
    "from": 227,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 227,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 227,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 248,
    "label": "has",
    "to": 251
  }, {
    "from": 227,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 227,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 227,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 227,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 227,
    "label": "has",
    "to": 260
  }, {
    "from": 227,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 262,
    "label": "has",
    "to": 268
  }, {
    "from": 262,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 262,
    "label": "has",
    "to": 26
  }, {
    "from": 261,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 263
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 272,
    "label": "has",
    "to": 266
  }, {
    "from": 272,
    "label": "has",
    "to": 267
  }, {
    "from": 271,
    "label": "has",
    "to": 26
  }, {
    "from": 227,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 274,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 277,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 277,
    "label": "has",
    "to": 26
  }, {
    "from": 227,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 283,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 283,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 289,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 289,
    "label": "has",
    "to": 26
  }, {
    "from": 282,
    "label": "has",
    "to": 294
  }, {
    "from": 282,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 282,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 282,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 282,
    "label": "has",
    "to": 302
  }, {
    "from": 282,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 288
  }, {
    "from": 305,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 290
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 308,
    "label": "has",
    "to": 26
  }, {
    "from": 282,
    "label": "has",
    "to": 312
  }, {
    "from": 282,
    "label": "has",
    "to": 313
  }, {
    "from": 227,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 263
  }, {
    "from": 315,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 315,
    "label": "has",
    "to": 266
  }, {
    "from": 315,
    "label": "has",
    "to": 267
  }, {
    "from": 315,
    "label": "has",
    "to": 268
  }, {
    "from": 315,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 315,
    "label": "has",
    "to": 26
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 263
  }, {
    "from": 317,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 272,
    "label": "has",
    "to": 266
  }, {
    "from": 272,
    "label": "has",
    "to": 267
  }, {
    "from": 317,
    "label": "has",
    "to": 26
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 278
  }, {
    "from": 319,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 319,
    "label": "has",
    "to": 26
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 290
  }, {
    "from": 321,
    "label": "has",
    "to": 291
  }, {
    "from": 321,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 321,
    "label": "has",
    "to": 26
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 323,
    "label": "has",
    "to": 290
  }, {
    "from": 323,
    "label": "has",
    "to": 309
  }, {
    "from": 323,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 323,
    "label": "has",
    "to": 26
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 325,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 325,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 325,
    "label": "has",
    "to": 332
  }, {
    "from": 325,
    "label": "has",
    "to": 333
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 334,
    "label": "has",
    "to": 337
  }, {
    "from": 334,
    "label": "has",
    "to": 338
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 341
  }, {
    "from": 339,
    "label": "has",
    "to": 342
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 339,
    "label": "has",
    "to": 332
  }, {
    "from": 339,
    "label": "has",
    "to": 344
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 345,
    "label": "has",
    "to": 347
  }, {
    "from": 345,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 345,
    "label": "has",
    "to": 350
  }, {
    "from": 345,
    "label": "has",
    "to": 351
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 352,
    "label": "has",
    "to": 354
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 352,
    "label": "has",
    "to": 356
  }, {
    "from": 352,
    "label": "has",
    "to": 357
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 360
  }, {
    "from": 358,
    "label": "has",
    "to": 361
  }, {
    "from": 358,
    "label": "has",
    "to": 362
  }, {
    "from": 362,
    "label": "has",
    "to": 363
  }, {
    "from": 358,
    "label": "has",
    "to": 364
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 364,
    "label": "has",
    "to": 366
  }, {
    "from": 358,
    "label": "has",
    "to": 367
  }, {
    "from": 368,
    "label": "has",
    "to": 365
  }, {
    "from": 368,
    "label": "has",
    "to": 366
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 370,
    "label": "has",
    "to": 372
  }, {
    "from": 370,
    "label": "has",
    "to": 361
  }, {
    "from": 370,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 370,
    "label": "has",
    "to": 375
  }, {
    "from": 375,
    "label": "has",
    "to": 26
  }, {
    "from": 370,
    "label": "has",
    "to": 376
  }, {
    "from": 377,
    "label": "has",
    "to": 26
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 379,
    "label": "has",
    "to": 381
  }, {
    "from": 379,
    "label": "has",
    "to": 361
  }, {
    "from": 379,
    "label": "has",
    "to": 382
  }, {
    "from": 382,
    "label": "has",
    "to": 383
  }, {
    "from": 379,
    "label": "has",
    "to": 384
  }, {
    "from": 384,
    "label": "has",
    "to": 366
  }, {
    "from": 384,
    "label": "has",
    "to": 365
  }, {
    "from": 379,
    "label": "has",
    "to": 385
  }, {
    "from": 386,
    "label": "has",
    "to": 366
  }, {
    "from": 386,
    "label": "has",
    "to": 365
  }, {
    "from": 386,
    "label": "has",
    "to": 387
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 390
  }, {
    "from": 388,
    "label": "has",
    "to": 391
  }, {
    "from": 391,
    "label": "has",
    "to": 392
  }, {
    "from": 388,
    "label": "has",
    "to": 393
  }, {
    "from": 388,
    "label": "has",
    "to": 394
  }, {
    "from": 394,
    "label": "has",
    "to": 395
  }, {
    "from": 394,
    "label": "has",
    "to": 396
  }, {
    "from": 394,
    "label": "has",
    "to": 397
  }, {
    "from": 397,
    "label": "has",
    "to": 398
  }, {
    "from": 394,
    "label": "has",
    "to": 399
  }, {
    "from": 394,
    "label": "has",
    "to": 400
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 400,
    "label": "has",
    "to": 402
  }, {
    "from": 394,
    "label": "has",
    "to": 26
  }, {
    "from": 388,
    "label": "has",
    "to": 403
  }, {
    "from": 404,
    "label": "has",
    "to": 395
  }, {
    "from": 404,
    "label": "has",
    "to": 396
  }, {
    "from": 404,
    "label": "has",
    "to": 397
  }, {
    "from": 397,
    "label": "has",
    "to": 398
  }, {
    "from": 404,
    "label": "has",
    "to": 399
  }, {
    "from": 404,
    "label": "has",
    "to": 400
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 400,
    "label": "has",
    "to": 402
  }, {
    "from": 404,
    "label": "has",
    "to": 26
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 406,
    "label": "has",
    "to": 408
  }, {
    "from": 406,
    "label": "has",
    "to": 409
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 410,
    "label": "has",
    "to": 411
  }, {
    "from": 409,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 406,
    "label": "has",
    "to": 414
  }, {
    "from": 414,
    "label": "has",
    "to": 415
  }, {
    "from": 406,
    "label": "has",
    "to": 416
  }, {
    "from": 406,
    "label": "has",
    "to": 417
  }, {
    "from": 418,
    "label": "has",
    "to": 395
  }, {
    "from": 418,
    "label": "has",
    "to": 419
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 419,
    "label": "has",
    "to": 421
  }, {
    "from": 419,
    "label": "has",
    "to": 422
  }, {
    "from": 422,
    "label": "has",
    "to": 423
  }, {
    "from": 422,
    "label": "has",
    "to": 424
  }, {
    "from": 419,
    "label": "has",
    "to": 425
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 419,
    "label": "has",
    "to": 427
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 419,
    "label": "has",
    "to": 429
  }, {
    "from": 419,
    "label": "has",
    "to": 430
  }, {
    "from": 419,
    "label": "has",
    "to": 431
  }, {
    "from": 419,
    "label": "has",
    "to": 432
  }, {
    "from": 419,
    "label": "has",
    "to": 312
  }, {
    "from": 419,
    "label": "has",
    "to": 433
  }, {
    "from": 419,
    "label": "has",
    "to": 434
  }, {
    "from": 419,
    "label": "has",
    "to": 435
  }, {
    "from": 419,
    "label": "has",
    "to": 436
  }, {
    "from": 436,
    "label": "has",
    "to": 437
  }, {
    "from": 418,
    "label": "has",
    "to": 438
  }, {
    "from": 418,
    "label": "has",
    "to": 439
  }, {
    "from": 439,
    "label": "has",
    "to": 440
  }, {
    "from": 440,
    "label": "has",
    "to": 441
  }, {
    "from": 440,
    "label": "has",
    "to": 442
  }, {
    "from": 442,
    "label": "has",
    "to": 224
  }, {
    "from": 442,
    "label": "has",
    "to": 443
  }, {
    "from": 442,
    "label": "has",
    "to": 444
  }, {
    "from": 440,
    "label": "has",
    "to": 26
  }, {
    "from": 439,
    "label": "has",
    "to": 445
  }, {
    "from": 439,
    "label": "has",
    "to": 239
  }, {
    "from": 439,
    "label": "has",
    "to": 446
  }, {
    "from": 446,
    "label": "has",
    "to": 447
  }, {
    "from": 439,
    "label": "has",
    "to": 26
  }, {
    "from": 418,
    "label": "has",
    "to": 448
  }, {
    "from": 418,
    "label": "has",
    "to": 449
  }, {
    "from": 449,
    "label": "has",
    "to": 450
  }, {
    "from": 450,
    "label": "has",
    "to": 441
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 451,
    "label": "has",
    "to": 224
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 451,
    "label": "has",
    "to": 444
  }, {
    "from": 450,
    "label": "has",
    "to": 26
  }, {
    "from": 449,
    "label": "has",
    "to": 445
  }, {
    "from": 449,
    "label": "has",
    "to": 239
  }, {
    "from": 449,
    "label": "has",
    "to": 26
  }, {
    "from": 418,
    "label": "has",
    "to": 453
  }, {
    "from": 454,
    "label": "has",
    "to": 441
  }, {
    "from": 454,
    "label": "has",
    "to": 442
  }, {
    "from": 442,
    "label": "has",
    "to": 224
  }, {
    "from": 442,
    "label": "has",
    "to": 443
  }, {
    "from": 442,
    "label": "has",
    "to": 444
  }, {
    "from": 454,
    "label": "has",
    "to": 26
  }, {
    "from": 454,
    "label": "has",
    "to": 455
  }, {
    "from": 456,
    "label": "has",
    "to": 440
  }, {
    "from": 440,
    "label": "has",
    "to": 441
  }, {
    "from": 440,
    "label": "has",
    "to": 442
  }, {
    "from": 442,
    "label": "has",
    "to": 224
  }, {
    "from": 442,
    "label": "has",
    "to": 443
  }, {
    "from": 442,
    "label": "has",
    "to": 444
  }, {
    "from": 440,
    "label": "has",
    "to": 26
  }, {
    "from": 456,
    "label": "has",
    "to": 445
  }, {
    "from": 456,
    "label": "has",
    "to": 239
  }, {
    "from": 456,
    "label": "has",
    "to": 446
  }, {
    "from": 446,
    "label": "has",
    "to": 447
  }, {
    "from": 456,
    "label": "has",
    "to": 26
  }, {
    "from": 456,
    "label": "has",
    "to": 457
  }, {
    "from": 458,
    "label": "has",
    "to": 441
  }, {
    "from": 458,
    "label": "has",
    "to": 451
  }, {
    "from": 451,
    "label": "has",
    "to": 224
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 451,
    "label": "has",
    "to": 444
  }, {
    "from": 458,
    "label": "has",
    "to": 26
  }, {
    "from": 458,
    "label": "has",
    "to": 459
  }, {
    "from": 460,
    "label": "has",
    "to": 450
  }, {
    "from": 450,
    "label": "has",
    "to": 441
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 451,
    "label": "has",
    "to": 224
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 451,
    "label": "has",
    "to": 444
  }, {
    "from": 450,
    "label": "has",
    "to": 26
  }, {
    "from": 460,
    "label": "has",
    "to": 445
  }, {
    "from": 460,
    "label": "has",
    "to": 239
  }, {
    "from": 460,
    "label": "has",
    "to": 26
  }, {
    "from": 460,
    "label": "has",
    "to": 461
  }, {
    "from": 462,
    "label": "has",
    "to": 395
  }, {
    "from": 462,
    "label": "has",
    "to": 294
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 463,
    "label": "has",
    "to": 420
  }, {
    "from": 463,
    "label": "has",
    "to": 464
  }, {
    "from": 464,
    "label": "has",
    "to": 465
  }, {
    "from": 465,
    "label": "has",
    "to": 466
  }, {
    "from": 465,
    "label": "has",
    "to": 467
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 465,
    "label": "has",
    "to": 469
  }, {
    "from": 469,
    "label": "has",
    "to": 470
  }, {
    "from": 470,
    "label": "has",
    "to": 471
  }, {
    "from": 469,
    "label": "has",
    "to": 472
  }, {
    "from": 472,
    "label": "has",
    "to": 471
  }, {
    "from": 469,
    "label": "has",
    "to": 473
  }, {
    "from": 464,
    "label": "has",
    "to": 474
  }, {
    "from": 474,
    "label": "has",
    "to": 475
  }, {
    "from": 474,
    "label": "has",
    "to": 476
  }, {
    "from": 476,
    "label": "has",
    "to": 477
  }, {
    "from": 474,
    "label": "has",
    "to": 478
  }, {
    "from": 478,
    "label": "has",
    "to": 479
  }, {
    "from": 474,
    "label": "has",
    "to": 480
  }, {
    "from": 480,
    "label": "has",
    "to": 481
  }, {
    "from": 480,
    "label": "has",
    "to": 482
  }, {
    "from": 482,
    "label": "has",
    "to": 483
  }, {
    "from": 480,
    "label": "has",
    "to": 484
  }, {
    "from": 464,
    "label": "has",
    "to": 485
  }, {
    "from": 464,
    "label": "has",
    "to": 486
  }, {
    "from": 486,
    "label": "has",
    "to": 487
  }, {
    "from": 486,
    "label": "has",
    "to": 488
  }, {
    "from": 464,
    "label": "has",
    "to": 489
  }, {
    "from": 489,
    "label": "has",
    "to": 490
  }, {
    "from": 464,
    "label": "has",
    "to": 312
  }, {
    "from": 464,
    "label": "has",
    "to": 313
  }, {
    "from": 464,
    "label": "has",
    "to": 434
  }, {
    "from": 464,
    "label": "has",
    "to": 491
  }, {
    "from": 464,
    "label": "has",
    "to": 302
  }, {
    "from": 464,
    "label": "has",
    "to": 492
  }, {
    "from": 492,
    "label": "has",
    "to": 304
  }, {
    "from": 492,
    "label": "has",
    "to": 493
  }, {
    "from": 462,
    "label": "has",
    "to": 494
  }, {
    "from": 495,
    "label": "has",
    "to": 496
  }, {
    "from": 496,
    "label": "has",
    "to": 497
  }, {
    "from": 495,
    "label": "has",
    "to": 498
  }, {
    "from": 498,
    "label": "has",
    "to": 499
  }, {
    "from": 498,
    "label": "has",
    "to": 500
  }, {
    "from": 498,
    "label": "has",
    "to": 501
  }, {
    "from": 501,
    "label": "has",
    "to": 502
  }, {
    "from": 501,
    "label": "has",
    "to": 503
  }, {
    "from": 501,
    "label": "has",
    "to": 504
  }, {
    "from": 498,
    "label": "has",
    "to": 505
  }, {
    "from": 498,
    "label": "has",
    "to": 506
  }, {
    "from": 498,
    "label": "has",
    "to": 26
  }, {
    "from": 495,
    "label": "has",
    "to": 507
  }, {
    "from": 495,
    "label": "has",
    "to": 508
  }, {
    "from": 495,
    "label": "has",
    "to": 509
  }, {
    "from": 495,
    "label": "has",
    "to": 510
  }, {
    "from": 495,
    "label": "has",
    "to": 511
  }, {
    "from": 495,
    "label": "has",
    "to": 26
  }, {
    "from": 495,
    "label": "has",
    "to": 512
  }, {
    "from": 513,
    "label": "has",
    "to": 499
  }, {
    "from": 513,
    "label": "has",
    "to": 500
  }, {
    "from": 513,
    "label": "has",
    "to": 501
  }, {
    "from": 501,
    "label": "has",
    "to": 502
  }, {
    "from": 501,
    "label": "has",
    "to": 503
  }, {
    "from": 501,
    "label": "has",
    "to": 504
  }, {
    "from": 513,
    "label": "has",
    "to": 505
  }, {
    "from": 513,
    "label": "has",
    "to": 506
  }, {
    "from": 513,
    "label": "has",
    "to": 26
  }, {
    "from": 513,
    "label": "has",
    "to": 514
  }, {
    "from": 515,
    "label": "has",
    "to": 516
  }, {
    "from": 515,
    "label": "has",
    "to": 517
  }, {
    "from": 517,
    "label": "has",
    "to": 26
  }, {
    "from": 515,
    "label": "has",
    "to": 518
  }, {
    "from": 515,
    "label": "has",
    "to": 519
  }, {
    "from": 515,
    "label": "has",
    "to": 520
  }, {
    "from": 515,
    "label": "has",
    "to": 521
  }, {
    "from": 515,
    "label": "has",
    "to": 522
  }, {
    "from": 515,
    "label": "has",
    "to": 523
  }, {
    "from": 515,
    "label": "has",
    "to": 524
  }, {
    "from": 515,
    "label": "has",
    "to": 525
  }, {
    "from": 515,
    "label": "has",
    "to": 526
  }, {
    "from": 515,
    "label": "has",
    "to": 527
  }, {
    "from": 515,
    "label": "has",
    "to": 528
  }, {
    "from": 515,
    "label": "has",
    "to": 529
  }, {
    "from": 515,
    "label": "has",
    "to": 530
  }, {
    "from": 515,
    "label": "has",
    "to": 531
  }, {
    "from": 515,
    "label": "has",
    "to": 532
  }, {
    "from": 532,
    "label": "has",
    "to": 26
  }, {
    "from": 515,
    "label": "has",
    "to": 533
  }, {
    "from": 533,
    "label": "has",
    "to": 26
  }, {
    "from": 515,
    "label": "has",
    "to": 534
  }, {
    "from": 534,
    "label": "has",
    "to": 26
  }, {
    "from": 515,
    "label": "has",
    "to": 535
  }, {
    "from": 535,
    "label": "has",
    "to": 536
  }, {
    "from": 515,
    "label": "has",
    "to": 537
  }, {
    "from": 537,
    "label": "has",
    "to": 538
  }, {
    "from": 515,
    "label": "has",
    "to": 539
  }, {
    "from": 539,
    "label": "has",
    "to": 540
  }, {
    "from": 515,
    "label": "has",
    "to": 541
  }, {
    "from": 541,
    "label": "has",
    "to": 542
  }, {
    "from": 515,
    "label": "has",
    "to": 543
  }, {
    "from": 543,
    "label": "has",
    "to": 544
  }, {
    "from": 515,
    "label": "has",
    "to": 545
  }, {
    "from": 545,
    "label": "has",
    "to": 546
  }, {
    "from": 515,
    "label": "has",
    "to": 547
  }, {
    "from": 547,
    "label": "has",
    "to": 548
  }, {
    "from": 515,
    "label": "has",
    "to": 549
  }, {
    "from": 549,
    "label": "has",
    "to": 550
  }, {
    "from": 515,
    "label": "has",
    "to": 551
  }, {
    "from": 551,
    "label": "has",
    "to": 26
  }, {
    "from": 515,
    "label": "has",
    "to": 552
  }, {
    "from": 552,
    "label": "has",
    "to": 26
  }, {
    "from": 515,
    "label": "has",
    "to": 553
  }, {
    "from": 553,
    "label": "has",
    "to": 26
  }, {
    "from": 515,
    "label": "has",
    "to": 554
  }, {
    "from": 515,
    "label": "has",
    "to": 555
  }, {
    "from": 515,
    "label": "has",
    "to": 26
  }, {
    "from": 515,
    "label": "has",
    "to": 556
  }, {
    "from": 557,
    "label": "has",
    "to": 26
  }, {
    "from": 558,
    "label": "has",
    "to": 26
  }, {
    "from": 559,
    "label": "has",
    "to": 26
  }, {
    "from": 560,
    "label": "has",
    "to": 26
  }, {
    "from": 561,
    "label": "has",
    "to": 26
  }, {
    "from": 562,
    "label": "has",
    "to": 26
  }, {
    "from": 563,
    "label": "has",
    "to": 564
  }, {
    "from": 563,
    "label": "has",
    "to": 565
  }, {
    "from": 563,
    "label": "has",
    "to": 566
  }, {
    "from": 567,
    "label": "has",
    "to": 568
  }, {
    "from": 567,
    "label": "has",
    "to": 569
  }, {
    "from": 567,
    "label": "has",
    "to": 570
  }, {
    "from": 570,
    "label": "has",
    "to": 26
  }, {
    "from": 567,
    "label": "has",
    "to": 571
  }, {
    "from": 567,
    "label": "has",
    "to": 572
  }, {
    "from": 573,
    "label": "has",
    "to": 26
  }, {
    "from": 574,
    "label": "has",
    "to": 575
  }, {
    "from": 574,
    "label": "has",
    "to": 569
  }, {
    "from": 574,
    "label": "has",
    "to": 576
  }, {
    "from": 576,
    "label": "has",
    "to": 577
  }, {
    "from": 574,
    "label": "has",
    "to": 578
  }, {
    "from": 579,
    "label": "has",
    "to": 577
  }, {
    "from": 580,
    "label": "has",
    "to": 581
  }, {
    "from": 580,
    "label": "has",
    "to": 582
  }, {
    "from": 582,
    "label": "has",
    "to": 583
  }, {
    "from": 582,
    "label": "has",
    "to": 584
  }, {
    "from": 580,
    "label": "has",
    "to": 585
  }, {
    "from": 585,
    "label": "has",
    "to": 586
  }, {
    "from": 580,
    "label": "has",
    "to": 587
  }, {
    "from": 580,
    "label": "has",
    "to": 588
  }, {
    "from": 589,
    "label": "has",
    "to": 32
  }, {
    "from": 589,
    "label": "has",
    "to": 590
  }, {
    "from": 591,
    "label": "has",
    "to": 26
  }, {
    "from": 592,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 26
  }, {
    "from": 592,
    "label": "has",
    "to": 93
  }, {
    "from": 592,
    "label": "has",
    "to": 26
  }, {
    "from": 592,
    "label": "has",
    "to": 26
  }, {
    "from": 592,
    "label": "has",
    "to": 593
  }, {
    "from": 594,
    "label": "has",
    "to": 26
  }, {
    "from": 594,
    "label": "has",
    "to": 595
  }, {
    "from": 596,
    "label": "has",
    "to": 536
  }, {
    "from": 597,
    "label": "has",
    "to": 538
  }, {
    "from": 598,
    "label": "has",
    "to": 540
  }, {
    "from": 599,
    "label": "has",
    "to": 542
  }, {
    "from": 600,
    "label": "has",
    "to": 544
  }, {
    "from": 601,
    "label": "has",
    "to": 546
  }, {
    "from": 602,
    "label": "has",
    "to": 548
  }, {
    "from": 603,
    "label": "has",
    "to": 550
  }, {
    "from": 175,
    "label": "calls",
    "to": 205
  }, {
    "from": 175,
    "label": "calls",
    "to": 205
  }, {
    "from": 175,
    "label": "calls",
    "to": 71
  }, {
    "from": 42,
    "label": "calls",
    "to": 617
  }, {
    "from": 84,
    "label": "calls",
    "to": 617
  }, {
    "from": 84,
    "label": "calls",
    "to": 617
  }, {
    "from": 84,
    "label": "calls",
    "to": 617
  }, {
    "from": 388,
    "label": "calls",
    "to": 617
  }, {
    "from": 227,
    "label": "calls",
    "to": 619
  }, {
    "from": 84,
    "label": "calls",
    "to": 620
  }, {
    "from": 84,
    "label": "calls",
    "to": 620
  }, {
    "from": 227,
    "label": "calls",
    "to": 620
  }, {
    "from": 227,
    "label": "calls",
    "to": 620
  }, {
    "from": 227,
    "label": "calls",
    "to": 620
  }, {
    "from": 227,
    "label": "calls",
    "to": 620
  }, {
    "from": 418,
    "label": "calls",
    "to": 620
  }, {
    "from": 418,
    "label": "calls",
    "to": 620
  }, {
    "from": 166,
    "label": "calls",
    "to": 621
  }, {
    "from": 227,
    "label": "calls",
    "to": 621
  }, {
    "from": 227,
    "label": "calls",
    "to": 621
  }, {
    "from": 358,
    "label": "calls",
    "to": 621
  }, {
    "from": 370,
    "label": "calls",
    "to": 621
  }, {
    "from": 379,
    "label": "calls",
    "to": 621
  }, {
    "from": 388,
    "label": "calls",
    "to": 621
  }, {
    "from": 122,
    "label": "calls",
    "to": 622
  }, {
    "from": 515,
    "label": "calls",
    "to": 379
  }, {
    "from": 48,
    "label": "calls",
    "to": 45
  }, {
    "from": 28,
    "label": "calls",
    "to": 623
  }, {
    "from": 48,
    "label": "calls",
    "to": 623
  }, {
    "from": 52,
    "label": "calls",
    "to": 623
  }, {
    "from": 55,
    "label": "calls",
    "to": 623
  }, {
    "from": 55,
    "label": "calls",
    "to": 623
  }, {
    "from": 55,
    "label": "calls",
    "to": 623
  }, {
    "from": 55,
    "label": "calls",
    "to": 623
  }, {
    "from": 55,
    "label": "calls",
    "to": 623
  }, {
    "from": 71,
    "label": "calls",
    "to": 623
  }, {
    "from": 71,
    "label": "calls",
    "to": 623
  }, {
    "from": 71,
    "label": "calls",
    "to": 623
  }, {
    "from": 71,
    "label": "calls",
    "to": 623
  }, {
    "from": 84,
    "label": "calls",
    "to": 623
  }, {
    "from": 166,
    "label": "calls",
    "to": 623
  }, {
    "from": 207,
    "label": "calls",
    "to": 623
  }, {
    "from": 227,
    "label": "calls",
    "to": 623
  }, {
    "from": 227,
    "label": "calls",
    "to": 623
  }, {
    "from": 227,
    "label": "calls",
    "to": 623
  }, {
    "from": 227,
    "label": "calls",
    "to": 623
  }, {
    "from": 227,
    "label": "calls",
    "to": 623
  }, {
    "from": 406,
    "label": "calls",
    "to": 623
  }, {
    "from": 418,
    "label": "calls",
    "to": 623
  }, {
    "from": 462,
    "label": "calls",
    "to": 623
  }, {
    "from": 462,
    "label": "calls",
    "to": 623
  }, {
    "from": 462,
    "label": "calls",
    "to": 623
  }, {
    "from": 462,
    "label": "calls",
    "to": 623
  }, {
    "from": 462,
    "label": "calls",
    "to": 623
  }, {
    "from": 462,
    "label": "calls",
    "to": 623
  }, {
    "from": 462,
    "label": "calls",
    "to": 623
  }, {
    "from": 462,
    "label": "calls",
    "to": 623
  }, {
    "from": 495,
    "label": "calls",
    "to": 623
  }, {
    "from": 580,
    "label": "calls",
    "to": 623
  }, {
    "from": 418,
    "label": "calls",
    "to": 454
  }, {
    "from": 418,
    "label": "calls",
    "to": 454
  }, {
    "from": 418,
    "label": "calls",
    "to": 454
  }, {
    "from": 418,
    "label": "calls",
    "to": 454
  }, {
    "from": 28,
    "label": "calls",
    "to": 625
  }, {
    "from": 84,
    "label": "calls",
    "to": 625
  }, {
    "from": 515,
    "label": "calls",
    "to": 495
  }, {
    "from": 515,
    "label": "calls",
    "to": 358
  }, {
    "from": 84,
    "label": "calls",
    "to": 120
  }, {
    "from": 84,
    "label": "calls",
    "to": 120
  }, {
    "from": 84,
    "label": "calls",
    "to": 120
  }, {
    "from": 84,
    "label": "calls",
    "to": 120
  }, {
    "from": 175,
    "label": "calls",
    "to": 627
  }, {
    "from": 604,
    "label": "calls",
    "to": 613
  }, {
    "from": 515,
    "label": "calls",
    "to": 162
  }, {
    "from": 207,
    "label": "calls",
    "to": 628
  }, {
    "from": 604,
    "label": "calls",
    "to": 614
  }, {
    "from": 34,
    "label": "calls",
    "to": 614
  }, {
    "from": 175,
    "label": "calls",
    "to": 55
  }, {
    "from": 462,
    "label": "calls",
    "to": 641
  }, {
    "from": 207,
    "label": "calls",
    "to": 175
  }, {
    "from": 207,
    "label": "calls",
    "to": 175
  }, {
    "from": 227,
    "label": "calls",
    "to": 175
  }, {
    "from": 227,
    "label": "calls",
    "to": 175
  }, {
    "from": 227,
    "label": "calls",
    "to": 611
  }, {
    "from": 358,
    "label": "calls",
    "to": 631
  }, {
    "from": 379,
    "label": "calls",
    "to": 631
  }, {
    "from": 122,
    "label": "calls",
    "to": 632
  }, {
    "from": 207,
    "label": "calls",
    "to": 633
  }, {
    "from": 515,
    "label": "calls",
    "to": 612
  }, {
    "from": 515,
    "label": "calls",
    "to": 406
  }, {
    "from": 122,
    "label": "calls",
    "to": 639
  }, {
    "from": 515,
    "label": "calls",
    "to": 462
  }, {
    "from": 84,
    "label": "calls",
    "to": 606
  }, {
    "from": 175,
    "label": "calls",
    "to": 606
  }, {
    "from": 162,
    "label": "calls",
    "to": 616
  }, {
    "from": 515,
    "label": "calls",
    "to": 370
  }, {
    "from": 45,
    "label": "calls",
    "to": 42
  }, {
    "from": 55,
    "label": "calls",
    "to": 42
  }, {
    "from": 71,
    "label": "calls",
    "to": 42
  }, {
    "from": 406,
    "label": "calls",
    "to": 42
  }, {
    "from": 418,
    "label": "calls",
    "to": 42
  }, {
    "from": 462,
    "label": "calls",
    "to": 42
  }, {
    "from": 462,
    "label": "calls",
    "to": 42
  }, {
    "from": 462,
    "label": "calls",
    "to": 42
  }, {
    "from": 462,
    "label": "calls",
    "to": 42
  }, {
    "from": 462,
    "label": "calls",
    "to": 42
  }, {
    "from": 462,
    "label": "calls",
    "to": 42
  }, {
    "from": 580,
    "label": "calls",
    "to": 42
  }, {
    "from": 495,
    "label": "calls",
    "to": 513
  }, {
    "from": 515,
    "label": "calls",
    "to": 227
  }, {
    "from": 55,
    "label": "calls",
    "to": 69
  }, {
    "from": 55,
    "label": "calls",
    "to": 69
  }, {
    "from": 71,
    "label": "calls",
    "to": 69
  }, {
    "from": 71,
    "label": "calls",
    "to": 69
  }, {
    "from": 227,
    "label": "calls",
    "to": 640
  }, {
    "from": 515,
    "label": "calls",
    "to": 418
  }, {
    "from": 515,
    "label": "calls",
    "to": 334
  }, {
    "from": 515,
    "label": "calls",
    "to": 624
  }, {
    "from": 52,
    "label": "calls",
    "to": 48
  }, {
    "from": 227,
    "label": "calls",
    "to": 48
  }, {
    "from": 227,
    "label": "calls",
    "to": 48
  }, {
    "from": 325,
    "label": "calls",
    "to": 48
  }, {
    "from": 325,
    "label": "calls",
    "to": 48
  }, {
    "from": 334,
    "label": "calls",
    "to": 48
  }, {
    "from": 334,
    "label": "calls",
    "to": 48
  }, {
    "from": 339,
    "label": "calls",
    "to": 48
  }, {
    "from": 339,
    "label": "calls",
    "to": 48
  }, {
    "from": 345,
    "label": "calls",
    "to": 48
  }, {
    "from": 345,
    "label": "calls",
    "to": 48
  }, {
    "from": 352,
    "label": "calls",
    "to": 48
  }, {
    "from": 358,
    "label": "calls",
    "to": 48
  }, {
    "from": 358,
    "label": "calls",
    "to": 48
  }, {
    "from": 370,
    "label": "calls",
    "to": 48
  }, {
    "from": 370,
    "label": "calls",
    "to": 48
  }, {
    "from": 379,
    "label": "calls",
    "to": 48
  }, {
    "from": 379,
    "label": "calls",
    "to": 48
  }, {
    "from": 388,
    "label": "calls",
    "to": 48
  }, {
    "from": 406,
    "label": "calls",
    "to": 48
  }, {
    "from": 563,
    "label": "calls",
    "to": 48
  }, {
    "from": 567,
    "label": "calls",
    "to": 48
  }, {
    "from": 574,
    "label": "calls",
    "to": 48
  }, {
    "from": 515,
    "label": "calls",
    "to": 325
  }, {
    "from": 495,
    "label": "calls",
    "to": 16
  }, {
    "from": 580,
    "label": "calls",
    "to": 16
  }, {
    "from": 563,
    "label": "calls",
    "to": 515
  }, {
    "from": 567,
    "label": "calls",
    "to": 515
  }, {
    "from": 574,
    "label": "calls",
    "to": 515
  }, {
    "from": 604,
    "label": "calls",
    "to": 635
  }, {
    "from": 34,
    "label": "calls",
    "to": 635
  }, {
    "from": 42,
    "label": "calls",
    "to": 34
  }, {
    "from": 122,
    "label": "calls",
    "to": 34
  }, {
    "from": 122,
    "label": "calls",
    "to": 34
  }, {
    "from": 122,
    "label": "calls",
    "to": 34
  }, {
    "from": 166,
    "label": "calls",
    "to": 34
  }, {
    "from": 175,
    "label": "calls",
    "to": 34
  }, {
    "from": 175,
    "label": "calls",
    "to": 34
  }, {
    "from": 175,
    "label": "calls",
    "to": 34
  }, {
    "from": 175,
    "label": "calls",
    "to": 34
  }, {
    "from": 175,
    "label": "calls",
    "to": 34
  }, {
    "from": 175,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 227,
    "label": "calls",
    "to": 34
  }, {
    "from": 325,
    "label": "calls",
    "to": 34
  }, {
    "from": 325,
    "label": "calls",
    "to": 34
  }, {
    "from": 339,
    "label": "calls",
    "to": 34
  }, {
    "from": 345,
    "label": "calls",
    "to": 34
  }, {
    "from": 352,
    "label": "calls",
    "to": 34
  }, {
    "from": 358,
    "label": "calls",
    "to": 34
  }, {
    "from": 370,
    "label": "calls",
    "to": 34
  }, {
    "from": 379,
    "label": "calls",
    "to": 34
  }, {
    "from": 388,
    "label": "calls",
    "to": 34
  }, {
    "from": 406,
    "label": "calls",
    "to": 34
  }, {
    "from": 418,
    "label": "calls",
    "to": 34
  }, {
    "from": 495,
    "label": "calls",
    "to": 34
  }, {
    "from": 574,
    "label": "calls",
    "to": 34
  }, {
    "from": 84,
    "label": "calls",
    "to": 615
  }, {
    "from": 122,
    "label": "calls",
    "to": 618
  }, {
    "from": 175,
    "label": "calls",
    "to": 626
  }, {
    "from": 515,
    "label": "calls",
    "to": 339
  }, {
    "from": 207,
    "label": "calls",
    "to": 642
  }, {
    "from": 418,
    "label": "calls",
    "to": 642
  }, {
    "from": 418,
    "label": "calls",
    "to": 642
  }, {
    "from": 84,
    "label": "calls",
    "to": 630
  }, {
    "from": 207,
    "label": "calls",
    "to": 630
  }, {
    "from": 207,
    "label": "calls",
    "to": 630
  }, {
    "from": 227,
    "label": "calls",
    "to": 630
  }, {
    "from": 227,
    "label": "calls",
    "to": 630
  }, {
    "from": 227,
    "label": "calls",
    "to": 630
  }, {
    "from": 462,
    "label": "calls",
    "to": 630
  }, {
    "from": 207,
    "label": "calls",
    "to": 166
  }, {
    "from": 227,
    "label": "calls",
    "to": 166
  }, {
    "from": 175,
    "label": "calls",
    "to": 634
  }, {
    "from": 84,
    "label": "calls",
    "to": 610
  }, {
    "from": 45,
    "label": "calls",
    "to": 28
  }, {
    "from": 175,
    "label": "calls",
    "to": 28
  }, {
    "from": 175,
    "label": "calls",
    "to": 28
  }, {
    "from": 159,
    "label": "calls",
    "to": 122
  }, {
    "from": 515,
    "label": "calls",
    "to": 122
  }, {
    "from": 122,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 638
  }, {
    "from": 515,
    "label": "calls",
    "to": 207
  }, {
    "from": 567,
    "label": "calls",
    "to": 159
  }, {
    "from": 84,
    "label": "calls",
    "to": 118
  }, {
    "from": 84,
    "label": "calls",
    "to": 118
  }, {
    "from": 515,
    "label": "calls",
    "to": 388
  }, {
    "from": 345,
    "label": "calls",
    "to": 629
  }, {
    "from": 352,
    "label": "calls",
    "to": 629
  }, {
    "from": 604,
    "label": "calls",
    "to": 608
  }, {
    "from": 604,
    "label": "calls",
    "to": 637
  }, {
    "from": 604,
    "label": "calls",
    "to": 637
  }, {
    "from": 604,
    "label": "calls",
    "to": 637
  }, {
    "from": 604,
    "label": "calls",
    "to": 637
  }, {
    "from": 604,
    "label": "calls",
    "to": 637
  }, {
    "from": 227,
    "label": "calls",
    "to": 637
  }, {
    "from": 406,
    "label": "calls",
    "to": 637
  }, {
    "from": 418,
    "label": "calls",
    "to": 637
  }, {
    "from": 462,
    "label": "calls",
    "to": 637
  }, {
    "from": 580,
    "label": "calls",
    "to": 637
  }, {
    "from": 175,
    "label": "calls",
    "to": 636
  }, {
    "from": 166,
    "label": "calls",
    "to": 643
  }, {
    "from": 2,
    "label": "contains",
    "to": 604
  }, {
    "from": 604,
    "label": "declares",
    "to": 16
  }, {
    "from": 604,
    "label": "declares",
    "to": 28
  }, {
    "from": 604,
    "label": "declares",
    "to": 34
  }, {
    "from": 604,
    "label": "declares",
    "to": 42
  }, {
    "from": 604,
    "label": "declares",
    "to": 45
  }, {
    "from": 604,
    "label": "declares",
    "to": 48
  }, {
    "from": 604,
    "label": "declares",
    "to": 52
  }, {
    "from": 604,
    "label": "declares",
    "to": 55
  }, {
    "from": 604,
    "label": "declares",
    "to": 69
  }, {
    "from": 604,
    "label": "declares",
    "to": 71
  }, {
    "from": 604,
    "label": "declares",
    "to": 82
  }, {
    "from": 604,
    "label": "declares",
    "to": 84
  }, {
    "from": 604,
    "label": "declares",
    "to": 118
  }, {
    "from": 604,
    "label": "declares",
    "to": 120
  }, {
    "from": 604,
    "label": "declares",
    "to": 122
  }, {
    "from": 604,
    "label": "declares",
    "to": 153
  }, {
    "from": 604,
    "label": "declares",
    "to": 155
  }, {
    "from": 604,
    "label": "declares",
    "to": 157
  }, {
    "from": 604,
    "label": "declares",
    "to": 159
  }, {
    "from": 604,
    "label": "declares",
    "to": 162
  }, {
    "from": 604,
    "label": "declares",
    "to": 166
  }, {
    "from": 604,
    "label": "declares",
    "to": 175
  }, {
    "from": 604,
    "label": "declares",
    "to": 205
  }, {
    "from": 604,
    "label": "declares",
    "to": 207
  }, {
    "from": 604,
    "label": "declares",
    "to": 227
  }, {
    "from": 604,
    "label": "declares",
    "to": 315
  }, {
    "from": 604,
    "label": "declares",
    "to": 317
  }, {
    "from": 604,
    "label": "declares",
    "to": 319
  }, {
    "from": 604,
    "label": "declares",
    "to": 321
  }, {
    "from": 604,
    "label": "declares",
    "to": 323
  }, {
    "from": 604,
    "label": "declares",
    "to": 325
  }, {
    "from": 604,
    "label": "declares",
    "to": 334
  }, {
    "from": 604,
    "label": "declares",
    "to": 339
  }, {
    "from": 604,
    "label": "declares",
    "to": 345
  }, {
    "from": 604,
    "label": "declares",
    "to": 352
  }, {
    "from": 604,
    "label": "declares",
    "to": 358
  }, {
    "from": 604,
    "label": "declares",
    "to": 368
  }, {
    "from": 604,
    "label": "declares",
    "to": 370
  }, {
    "from": 604,
    "label": "declares",
    "to": 377
  }, {
    "from": 604,
    "label": "declares",
    "to": 379
  }, {
    "from": 604,
    "label": "declares",
    "to": 386
  }, {
    "from": 604,
    "label": "declares",
    "to": 388
  }, {
    "from": 604,
    "label": "declares",
    "to": 404
  }, {
    "from": 604,
    "label": "declares",
    "to": 406
  }, {
    "from": 604,
    "label": "declares",
    "to": 418
  }, {
    "from": 604,
    "label": "declares",
    "to": 454
  }, {
    "from": 604,
    "label": "declares",
    "to": 456
  }, {
    "from": 604,
    "label": "declares",
    "to": 458
  }, {
    "from": 604,
    "label": "declares",
    "to": 460
  }, {
    "from": 604,
    "label": "declares",
    "to": 462
  }, {
    "from": 604,
    "label": "declares",
    "to": 495
  }, {
    "from": 604,
    "label": "declares",
    "to": 513
  }, {
    "from": 604,
    "label": "declares",
    "to": 515
  }, {
    "from": 604,
    "label": "declares",
    "to": 557
  }, {
    "from": 604,
    "label": "declares",
    "to": 558
  }, {
    "from": 604,
    "label": "declares",
    "to": 559
  }, {
    "from": 604,
    "label": "declares",
    "to": 560
  }, {
    "from": 604,
    "label": "declares",
    "to": 561
  }, {
    "from": 604,
    "label": "declares",
    "to": 562
  }, {
    "from": 604,
    "label": "declares",
    "to": 563
  }, {
    "from": 604,
    "label": "declares",
    "to": 567
  }, {
    "from": 604,
    "label": "declares",
    "to": 573
  }, {
    "from": 604,
    "label": "declares",
    "to": 574
  }, {
    "from": 604,
    "label": "declares",
    "to": 579
  }, {
    "from": 604,
    "label": "declares",
    "to": 580
  }, {
    "from": 604,
    "label": "declares",
    "to": 589
  }, {
    "from": 604,
    "label": "declares",
    "to": 591
  }, {
    "from": 604,
    "label": "declares",
    "to": 592
  }, {
    "from": 604,
    "label": "declares",
    "to": 594
  }, {
    "from": 604,
    "label": "declares",
    "to": 596
  }, {
    "from": 604,
    "label": "declares",
    "to": 597
  }, {
    "from": 604,
    "label": "declares",
    "to": 598
  }, {
    "from": 604,
    "label": "declares",
    "to": 599
  }, {
    "from": 604,
    "label": "declares",
    "to": 600
  }, {
    "from": 604,
    "label": "declares",
    "to": 601
  }, {
    "from": 604,
    "label": "declares",
    "to": 602
  }, {
    "from": 604,
    "label": "declares",
    "to": 603
  }, {
    "from": 645,
    "label": "requires",
    "to": 2
  }, {
    "from": 646,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 647
  }, {
    "from": 2,
    "label": "contains",
    "to": 648
  }, {
    "from": 647,
    "label": "initializes",
    "to": 649
  }, {
    "from": 649,
    "label": "assigns",
    "to": 650
  }, {
    "from": 647,
    "label": "initializes",
    "to": 651
  }, {
    "from": 651,
    "label": "assigns",
    "to": 652
  }, {
    "from": 647,
    "label": "initializes",
    "to": 653
  }, {
    "from": 653,
    "label": "assigns",
    "to": 654
  }, {
    "from": 647,
    "label": "initializes",
    "to": 655
  }, {
    "from": 655,
    "label": "assigns",
    "to": 656
  }, {
    "from": 647,
    "label": "initializes",
    "to": 657
  }, {
    "from": 657,
    "label": "assigns",
    "to": 658
  }, {
    "from": 647,
    "label": "initializes",
    "to": 659
  }, {
    "from": 659,
    "label": "assigns",
    "to": 660
  }, {
    "from": 647,
    "label": "initializes",
    "to": 661
  }, {
    "from": 661,
    "label": "assigns",
    "to": 662
  }, {
    "from": 647,
    "label": "initializes",
    "to": 663
  }, {
    "from": 663,
    "label": "assigns",
    "to": 664
  }, {
    "from": 647,
    "label": "initializes",
    "to": 665
  }, {
    "from": 665,
    "label": "assigns",
    "to": 666
  }, {
    "from": 647,
    "label": "initializes",
    "to": 667
  }, {
    "from": 667,
    "label": "assigns",
    "to": 668
  }, {
    "from": 647,
    "label": "initializes",
    "to": 669
  }, {
    "from": 669,
    "label": "assigns",
    "to": 670
  }, {
    "from": 647,
    "label": "initializes",
    "to": 671
  }, {
    "from": 671,
    "label": "assigns",
    "to": 672
  }, {
    "from": 647,
    "label": "initializes",
    "to": 673
  }, {
    "from": 673,
    "label": "assigns",
    "to": 674
  }, {
    "from": 647,
    "label": "initializes",
    "to": 675
  }, {
    "from": 675,
    "label": "assigns",
    "to": 676
  }, {
    "from": 647,
    "label": "initializes",
    "to": 677
  }, {
    "from": 647,
    "label": "initializes",
    "to": 678
  }, {
    "from": 678,
    "label": "assigns",
    "to": 679
  }, {
    "from": 647,
    "label": "initializes",
    "to": 680
  }, {
    "from": 680,
    "label": "assigns",
    "to": 681
  }, {
    "from": 647,
    "label": "initializes",
    "to": 682
  }, {
    "from": 682,
    "label": "assigns",
    "to": 683
  }, {
    "from": 647,
    "label": "initializes",
    "to": 684
  }, {
    "from": 684,
    "label": "assigns",
    "to": 685
  }, {
    "from": 647,
    "label": "initializes",
    "to": 686
  }, {
    "from": 686,
    "label": "assigns",
    "to": 687
  }, {
    "from": 647,
    "label": "initializes",
    "to": 688
  }, {
    "from": 688,
    "label": "assigns",
    "to": 689
  }, {
    "from": 647,
    "label": "initializes",
    "to": 690
  }, {
    "from": 690,
    "label": "assigns",
    "to": 691
  }, {
    "from": 647,
    "label": "initializes",
    "to": 692
  }, {
    "from": 692,
    "label": "assigns",
    "to": 693
  }, {
    "from": 647,
    "label": "initializes",
    "to": 694
  }, {
    "from": 694,
    "label": "assigns",
    "to": 695
  }, {
    "from": 647,
    "label": "initializes",
    "to": 696
  }, {
    "from": 696,
    "label": "assigns",
    "to": 697
  }, {
    "from": 647,
    "label": "initializes",
    "to": 698
  }, {
    "from": 698,
    "label": "assigns",
    "to": 699
  }, {
    "from": 647,
    "label": "initializes",
    "to": 700
  }, {
    "from": 700,
    "label": "assigns",
    "to": 701
  }, {
    "from": 647,
    "label": "initializes",
    "to": 702
  }, {
    "from": 702,
    "label": "assigns",
    "to": 703
  }, {
    "from": 647,
    "label": "initializes",
    "to": 704
  }, {
    "from": 704,
    "label": "assigns",
    "to": 705
  }, {
    "from": 647,
    "label": "initializes",
    "to": 706
  }, {
    "from": 706,
    "label": "assigns",
    "to": 707
  }, {
    "from": 647,
    "label": "initializes",
    "to": 708
  }, {
    "from": 708,
    "label": "assigns",
    "to": 709
  }, {
    "from": 647,
    "label": "initializes",
    "to": 710
  }, {
    "from": 710,
    "label": "assigns",
    "to": 711
  }, {
    "from": 647,
    "label": "initializes",
    "to": 712
  }, {
    "from": 712,
    "label": "assigns",
    "to": 713
  }, {
    "from": 647,
    "label": "initializes",
    "to": 714
  }, {
    "from": 714,
    "label": "assigns",
    "to": 715
  }, {
    "from": 647,
    "label": "initializes",
    "to": 716
  }, {
    "from": 716,
    "label": "assigns",
    "to": 717
  }, {
    "from": 647,
    "label": "initializes",
    "to": 718
  }, {
    "from": 718,
    "label": "assigns",
    "to": 719
  }, {
    "from": 647,
    "label": "initializes",
    "to": 720
  }, {
    "from": 720,
    "label": "assigns",
    "to": 721
  }, {
    "from": 647,
    "label": "initializes",
    "to": 722
  }, {
    "from": 722,
    "label": "assigns",
    "to": 723
  }, {
    "from": 647,
    "label": "initializes",
    "to": 724
  }, {
    "from": 724,
    "label": "assigns",
    "to": 725
  }, {
    "from": 647,
    "label": "initializes",
    "to": 726
  }, {
    "from": 726,
    "label": "assigns",
    "to": 727
  }, {
    "from": 647,
    "label": "initializes",
    "to": 728
  }, {
    "from": 728,
    "label": "assigns",
    "to": 729
  }, {
    "from": 647,
    "label": "initializes",
    "to": 730
  }, {
    "from": 730,
    "label": "assigns",
    "to": 731
  }, {
    "from": 647,
    "label": "initializes",
    "to": 732
  }, {
    "from": 647,
    "label": "initializes",
    "to": 733
  }, {
    "from": 647,
    "label": "initializes",
    "to": 734
  }, {
    "from": 648,
    "label": "initializes",
    "to": 735
  }, {
    "from": 735,
    "label": "requires",
    "to": 607
  }, {
    "from": 648,
    "label": "initializes",
    "to": 736
  }, {
    "from": 736,
    "label": "requires",
    "to": 737
  }, {
    "from": 648,
    "label": "initializes",
    "to": 738
  }, {
    "from": 738,
    "label": "requires",
    "to": 605
  }, {
    "from": 648,
    "label": "initializes",
    "to": 739
  }, {
    "from": 739,
    "label": "requires",
    "to": 609
  }, {
    "from": 648,
    "label": "initializes",
    "to": 740
  }, {
    "from": 740,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 741
  }, {
    "from": 644,
    "label": "represents",
    "to": 742
  }, {
    "from": 741,
    "label": "provides",
    "to": 742
  }, {
    "from": 743,
    "label": "requires",
    "to": 2
  }, {
    "from": 743,
    "label": "requires",
    "to": 2
  }, {
    "from": 743,
    "label": "requires",
    "to": 2
  }, {
    "from": 743,
    "label": "requires",
    "to": 2
  }, {
    "from": 743,
    "label": "requires",
    "to": 2
  }, {
    "from": 743,
    "label": "requires",
    "to": 2
  }, {
    "from": 743,
    "label": "requires",
    "to": 2
  }, {
    "from": 675,
    "label": "contains",
    "to": 3
  }, {
    "from": 675,
    "label": "contains",
    "to": 4
  }, {
    "from": 675,
    "label": "contains",
    "to": 5
  }, {
    "from": 675,
    "label": "contains",
    "to": 6
  }, {
    "from": 675,
    "label": "contains",
    "to": 7
  }, {
    "from": 675,
    "label": "contains",
    "to": 8
  }, {
    "from": 675,
    "label": "contains",
    "to": 9
  }, {
    "from": 675,
    "label": "contains",
    "to": 10
  }, {
    "from": 675,
    "label": "contains",
    "to": 11
  }, {
    "from": 675,
    "label": "contains",
    "to": 12
  }, {
    "from": 675,
    "label": "contains",
    "to": 13
  }, {
    "from": 675,
    "label": "contains",
    "to": 14
  }, {
    "from": 675,
    "label": "contains",
    "to": 15
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 589
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 591
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 592
  }, {
    "from": 517,
    "label": "hasArgument",
    "to": 594
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Class",
    "type": "module"
  }, {
    "id": 2,
    "text": "Coat",
    "type": "module"
  }, {
    "id": 3,
    "text": "function _M.classes ()\r\n    return _classes\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function _M.class (name)\r\n    return _classes[name]\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function _M.has (class, name)\r\n    return class._ATTR[name]\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function _M.attributes (class)\r\n    return next, class._ATTR, nil\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function _M.methods (class)\r\n    local function getnext (t, k)\r\n        local v\r\n        repeat\r\n            k, v = next(t, k)\r\n            if not k then return nil end\r\n        until not reserved[k]\r\n          and basic_type(v) == 'function'\r\n          and not k:match '^_get_' and not k:match '^_set_'\r\n          and not k:match '^_build_'\r\n        return k, v\r\n    end\r\n    return getnext, class, nil\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function _M.metamethods (class)\r\n    local function getnext (mt, k)\r\n        local v\r\n        repeat\r\n            k, v = next(mt, k)\r\n            if not k then return nil end\r\n        until k ~= '__index'\r\n        return k, v\r\n    end\r\n    return getnext, class._MT, nil\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function _M.parents (class)\r\n    local i = 0\r\n    return  function ()\r\n                i = i + 1\r\n                local parent = class._PARENT[i]\r\n                return parent and parent._NAME, parent\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function _M.roles (class)\r\n    local i = 0\r\n    return  function ()\r\n                i = i + 1\r\n                local role = class._ROLE[i]\r\n                return role and role._NAME, role\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function _M.roles ()\r\n    return _roles\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function _M.role (name)\r\n    return _roles[name]\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function _M.attributes (role)\r\n    local i = 0\r\n    return  function ()\r\n                local v\r\n                repeat\r\n                    i = i + 1\r\n                    v = role._STORE[i]\r\n                    if not v then return nil end\r\n                until v[1] == 'has'\r\n                return v[2], v[3]\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function _M.methods (role)\r\n    local i = 0\r\n    return  function ()\r\n                local v\r\n                repeat\r\n                    i = i + 1\r\n                    v = role._STORE[i]\r\n                    if not v then return nil end\r\n                    local name = v[2]\r\n                until v[1] == 'method' and not name:match '^_build_'\r\n                  and not name:match '^_get_' and not name:match '^_set_'\r\n                return v[2], v[3]\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function _M.to_dot (opt)\r\n    opt = opt or {}\r\n    local with_attr = not opt.no_attr\r\n    local with_meth = not opt.no_meth\r\n    local with_meta = not opt.no_meta\r\n    local note = opt.note\r\n    local out = 'digraph {\\n\\n    node [shape=record];\\n\\n'\r\n    if note then\r\n        out = out .. '    \"__note__\"\\n'\r\n        out = out .. '        [label=\"' .. note .. '\" shape=note];\\n\\n'\r\n    end\r\n    for classname, class in pairs(mc.classes()) do\r\n        out = out .. '    \"' .. classname .. '\"\\n'\r\n        out = out .. '        [label=\"{'\r\n        if class.instance then\r\n            out = out .. '&laquo;singleton&raquo;\\\\n'\r\n        end\r\n        out = out .. '\\\\N'\r\n        if with_attr then\r\n            local first = true\r\n            for name, attr in sort(mc.attributes(class)) do\r\n                if first then\r\n                    out = out .. '|'\r\n                    first = false\r\n                end\r\n                out = out .. name\r\n                if attr.isa then\r\n                    out = out .. ' : ' .. escape(attr.isa)\r\n                elseif attr.does then\r\n                    out = out .. ' : ' .. attr.does\r\n                end\r\n                out = out .. '\\\\l'\r\n            end\r\n        end\r\n        if with_meth then\r\n            local first = true\r\n            if with_meta then\r\n                for name in sort(mc.metamethods(class)) do\r\n                    if first then\r\n                        out = out .. '|'\r\n                        first = false\r\n                    end\r\n                    out = out .. name .. '()\\\\l'\r\n                end\r\n            end\r\n            for name in sort(mc.methods(class)) do\r\n                if first then\r\n                    out = out .. '|'\r\n                    first = false\r\n                end\r\n                out = out .. name .. '()\\\\l'\r\n            end\r\n        end\r\n        out = out .. '}\"];\\n'\r\n        for name, attr in mc.attributes(class) do\r\n            if attr.isa then\r\n                local isa, agreg = find_type(attr.isa)\r\n                if isa then\r\n                    out = out .. '    \"' .. classname .. '\" -> \"' .. isa .. '\" // attr isa ' .. attr.isa .. '\\n'\r\n                    if agreg then\r\n                        out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = odiamond];\\n'\r\n                    else\r\n                        out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = diamond];\\n'\r\n                    end\r\n                end\r\n            end\r\n            if attr.does and mr.role(attr.does) then\r\n                out = out .. '    \"' .. classname .. '\" -> \"' .. attr.does .. '\" // attr does\\n'\r\n                out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = diamond];\\n'\r\n            end\r\n        end\r\n        for parent in mc.parents(class) do\r\n            out = out .. '    \"' .. classname .. '\" -> \"' .. parent .. '\" // extends\\n'\r\n            out = out .. '        [arrowhead = onormal, arrowtail = none, arrowsize = 2.0];\\n'\r\n        end\r\n        for role in mc.roles(class) do\r\n            out = out .. '    \"' .. classname .. '\" -> \"' .. role .. '\" // with\\n'\r\n            out = out .. '        [arrowhead = odot, arrowtail = none];\\n'\r\n        end\r\n        out = out .. '\\n'\r\n    end\r\n    for rolename, role in pairs(mr.roles()) do\r\n        out = out .. '    \"' .. rolename .. '\"\\n'\r\n        out = out .. '        [label=\"{&laquo;role&raquo;\\\\n\\\\N'\r\n        if with_attr then\r\n            local first = true\r\n            for name, attr in sort(mr.attributes(role)) do\r\n                if first then\r\n                    out = out .. '|'\r\n                    first = false\r\n                end\r\n                out = out .. name\r\n                if attr.isa then\r\n                    out = out .. ' : ' .. escape(attr.isa)\r\n                elseif attr.does then\r\n                    out = out .. ' : ' .. attr.does\r\n                end\r\n                out = out .. '\\\\l'\r\n            end\r\n        end\r\n        if with_meth then\r\n            local first = true\r\n            for name in sort(mr.methods(role)) do\r\n                if first then\r\n                    out = out .. '|'\r\n                    first = false\r\n                end\r\n                out = out .. name .. '()\\\\l'\r\n            end\r\n        end\r\n        out = out .. '}\"];\\n\\n'\r\n        for name, attr in mr.attributes(role) do\r\n            if attr.isa then\r\n                local isa, agreg = find_type(attr.isa)\r\n                if isa then\r\n                    out = out .. '    \"' .. rolename .. '\" -> \"' .. isa .. '\" // attr isa ' .. attr.isa .. '\\n'\r\n                    if agreg then\r\n                        out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = odiamond];\\n'\r\n                    else\r\n                        out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = diamond];\\n'\r\n                    end\r\n                end\r\n            end\r\n            if attr.does and mr.role(attr.does) then\r\n                out = out .. '    \"' .. rolename .. '\" -> \"' .. attr.does .. '\" // attr does\\n'\r\n                out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = diamond];\\n'\r\n            end\r\n        end\r\n    end\r\n    out = out .. '}'\r\n    return out\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function (level, M)\r\n        local func = debug.getinfo(level + 1, 'f').func\r\n        local up = 1\r\n        while true do\r\n            local name = debug.getupvalue(func, up)\r\n            if name == '_ENV' then\r\n                debug.setupvalue(func, up, M)\r\n                return\r\n            end\r\n            if name == nil then\r\n                basic_error \"_ENV not found\"\r\n            end\r\n            up = up + 1\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 17,
    "text": "local func = debug.getinfo(level + 1, 'f').func",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local up = 1",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "while true do\r\n            local name = debug.getupvalue(func, up)\r\n            if name == '_ENV' then\r\n                debug.setupvalue(func, up, M)\r\n                return\r\n            end\r\n            if name == nil then\r\n                basic_error \"_ENV not found\"\r\n            end\r\n            up = up + 1\r\n        end",
    "type": "statement:while"
  }, {
    "id": 20,
    "text": "local name = debug.getupvalue(func, up)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if name == '_ENV' then\r\n                debug.setupvalue(func, up, M)\r\n                return\r\n            end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "debug.setupvalue(func, up, M)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "if name == nil then\r\n                basic_error \"_ENV not found\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "basic_error \"_ENV not found\"",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "up = up + 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function type (obj)\r\n    local t = basic_type(obj)\r\n    if t == 'table' then\r\n        pcall(function ()\r\n                t = obj._CLASS or t\r\n              end)\r\n    end\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local t = basic_type(obj)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if t == 'table' then\r\n        pcall(function ()\r\n                t = obj._CLASS or t\r\n              end)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "pcall(function ()\r\n                t = obj._CLASS or t\r\n              end)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "t = obj._CLASS or t",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function error (msg)\r\n    local lvl = 1\r\n    while true do\r\n        local t = debug.getinfo(lvl,'S')\r\n        if not t.short_src:find '/Coat' then break end\r\n        lvl = lvl + 1\r\n    end\r\n    basic_error(msg, lvl)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "local lvl = 1",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "while true do\r\n        local t = debug.getinfo(lvl,'S')\r\n        if not t.short_src:find '/Coat' then break end\r\n        lvl = lvl + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 37,
    "text": "local t = debug.getinfo(lvl,'S')",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if not t.short_src:find '/Coat' then break end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "lvl = lvl + 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "basic_error(msg, lvl)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function argerror (caller, narg, extramsg)\r\n    error(\"bad argument #\" .. tostring(narg) .. \" to \"\r\n          .. caller .. \" (\" .. extramsg .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "error(\"bad argument #\" .. tostring(narg) .. \" to \"\r\n          .. caller .. \" (\" .. extramsg .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function typeerror (caller, narg, arg, tname)\r\n    argerror(caller, narg, tname .. \" expected, got \" .. type(arg))\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "argerror(caller, narg, tname .. \" expected, got \" .. type(arg))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function checktype (caller, narg, arg, tname)\r\n    if basic_type(arg) ~= tname then\r\n        typeerror(caller, narg, arg, tname)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if basic_type(arg) ~= tname then\r\n        typeerror(caller, narg, arg, tname)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "typeerror(caller, narg, arg, tname)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function can (obj, name)\r\n    checktype('can', 2, name, 'string')\r\n    return basic_type(obj[name]) == 'function'\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "checktype('can', 2, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function isa (obj, t)\r\n    if basic_type(t) == 'table' and t._NAME then\r\n        t = t._NAME\r\n    end\r\n    if basic_type(t) ~= 'string' then\r\n        argerror('isa', 2, \"string or Object/Class expected\")\r\n    end\r\n\r\n    local function walk (types)\r\n        for i = 1, #types do\r\n            local v = types[i]\r\n            if v == t then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end\r\n        end\r\n        return false\r\n    end -- walk\r\n\r\n    local tobj = basic_type(obj)\r\n    if (tobj == 'table' or tobj == 'userdata') and obj._ISA then\r\n        return walk(obj._ISA)\r\n    else\r\n        return basic_type(obj) == t\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "if basic_type(t) == 'table' and t._NAME then\r\n        t = t._NAME\r\n    end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "t = t._NAME",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "if basic_type(t) ~= 'string' then\r\n        argerror('isa', 2, \"string or Object/Class expected\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "argerror('isa', 2, \"string or Object/Class expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local function walk (types)\r\n        for i = 1, #types do\r\n            local v = types[i]\r\n            if v == t then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end\r\n        end\r\n        return false\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 61,
    "text": "for i = 1, #types do\r\n            local v = types[i]\r\n            if v == t then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 62,
    "text": "local v = types[i]",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if v == t then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local result = walk(v)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if result then\r\n                    return result\r\n                end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local tobj = basic_type(obj)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if (tobj == 'table' or tobj == 'userdata') and obj._ISA then\r\n        return walk(obj._ISA)\r\n    else\r\n        return basic_type(obj) == t\r\n    end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "local function walk (types)\r\n        for i = 1, #types do\r\n            local v = types[i]\r\n            if v == t then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end\r\n        end\r\n        return false\r\n    end",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "local function does (obj, r)\r\n    if basic_type(r) == 'table' and r._NAME then\r\n        r = r._NAME\r\n    end\r\n    if basic_type(r) ~= 'string' then\r\n        argerror('does', 2, \"string or Role expected\")\r\n    end\r\n\r\n    local function walk (roles)\r\n        for i = 1, #roles do\r\n            local v = roles[i]\r\n            if v == r then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end\r\n        end\r\n        return false\r\n    end -- walk\r\n\r\n    local tobj = basic_type(obj)\r\n    if (tobj == 'table' or tobj == 'userdata') and obj._DOES then\r\n        return walk(obj._DOES)\r\n    else\r\n        return false\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "if basic_type(r) == 'table' and r._NAME then\r\n        r = r._NAME\r\n    end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "r = r._NAME",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if basic_type(r) ~= 'string' then\r\n        argerror('does', 2, \"string or Role expected\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "argerror('does', 2, \"string or Role expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "local function walk (roles)\r\n        for i = 1, #roles do\r\n            local v = roles[i]\r\n            if v == r then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end\r\n        end\r\n        return false\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 77,
    "text": "for i = 1, #roles do\r\n            local v = roles[i]\r\n            if v == r then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 78,
    "text": "local v = roles[i]",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if v == r then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "if (tobj == 'table' or tobj == 'userdata') and obj._DOES then\r\n        return walk(obj._DOES)\r\n    else\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function walk (roles)\r\n        for i = 1, #roles do\r\n            local v = roles[i]\r\n            if v == r then\r\n                return true\r\n            elseif basic_type(v) == 'table' then\r\n                local result = walk(v)\r\n                if result then\r\n                    return result\r\n                end\r\n            end\r\n        end\r\n        return false\r\n    end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function dump (obj, label)\r\n    label = label or 'obj'\r\n    local seen = {}\r\n\r\n    local function keys_sorted (t)\r\n        local sorted = {}\r\n        for k in pairs(t) do\r\n            sorted[#sorted+1] = k\r\n        end\r\n        table.sort(sorted, function (a, b)\r\n                          local r, cmp = pcall(function () return a < b end)\r\n                          if r == nil then\r\n                              return tostring(a) < tostring(b)\r\n                          else\r\n                              return cmp\r\n                          end\r\n                      end)\r\n        return sorted\r\n    end -- keys_sorted\r\n\r\n    local function _dump (obj, indent, ref)\r\n        local tobj = basic_type(obj)\r\n        if tobj == 'string' then\r\n            return string.format('%q', obj)\r\n        elseif tobj == 'table' then\r\n            if seen[obj] then\r\n                return seen[obj]\r\n            end\r\n            seen[obj] = ref\r\n            local indent2 = indent .. \"  \"\r\n            local lines = {}\r\n            local str\r\n            if obj._NAME then\r\n                str = obj._CLASS .. \" {\"\r\n                local sorted = keys_sorted(obj._VALUES)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj._VALUES, k)\r\n                    local line = indent2 .. k .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. '.' .. k) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            else\r\n                str = \"{\"\r\n                local sorted = keys_sorted(obj)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj, k)\r\n                    local kr = \"[\" .. _dump(k, indent2) .. \"]\"\r\n                    local line = indent2 .. kr .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. kr) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            end\r\n            if #lines > 0 then\r\n                str = str .. \"\\n\" .. table.concat(lines) .. indent\r\n            end\r\n            return str .. \"}\"\r\n        else\r\n            return tostring(obj)\r\n        end\r\n    end -- _dump\r\n\r\n    return label .. \" = \" .. _dump(obj, '', label)\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "label = label or 'obj'",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "local seen = {}",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local function keys_sorted (t)\r\n        local sorted = {}\r\n        for k in pairs(t) do\r\n            sorted[#sorted+1] = k\r\n        end\r\n        table.sort(sorted, function (a, b)\r\n                          local r, cmp = pcall(function () return a < b end)\r\n                          if r == nil then\r\n                              return tostring(a) < tostring(b)\r\n                          else\r\n                              return cmp\r\n                          end\r\n                      end)\r\n        return sorted\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 88,
    "text": "local sorted = {}",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "for k in pairs(t) do\r\n            sorted[#sorted+1] = k\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "sorted[#sorted+1] = k",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "table.sort(sorted, function (a, b)\r\n                          local r, cmp = pcall(function () return a < b end)\r\n                          if r == nil then\r\n                              return tostring(a) < tostring(b)\r\n                          else\r\n                              return cmp\r\n                          end\r\n                      end)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "local r, cmp = pcall(function () return a < b end)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if r == nil then\r\n                              return tostring(a) < tostring(b)\r\n                          else\r\n                              return cmp\r\n                          end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "local function _dump (obj, indent, ref)\r\n        local tobj = basic_type(obj)\r\n        if tobj == 'string' then\r\n            return string.format('%q', obj)\r\n        elseif tobj == 'table' then\r\n            if seen[obj] then\r\n                return seen[obj]\r\n            end\r\n            seen[obj] = ref\r\n            local indent2 = indent .. \"  \"\r\n            local lines = {}\r\n            local str\r\n            if obj._NAME then\r\n                str = obj._CLASS .. \" {\"\r\n                local sorted = keys_sorted(obj._VALUES)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj._VALUES, k)\r\n                    local line = indent2 .. k .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. '.' .. k) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            else\r\n                str = \"{\"\r\n                local sorted = keys_sorted(obj)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj, k)\r\n                    local kr = \"[\" .. _dump(k, indent2) .. \"]\"\r\n                    local line = indent2 .. kr .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. kr) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            end\r\n            if #lines > 0 then\r\n                str = str .. \"\\n\" .. table.concat(lines) .. indent\r\n            end\r\n            return str .. \"}\"\r\n        else\r\n            return tostring(obj)\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 95,
    "text": "if tobj == 'string' then\r\n            return string.format('%q', obj)\r\n        elseif tobj == 'table' then\r\n            if seen[obj] then\r\n                return seen[obj]\r\n            end\r\n            seen[obj] = ref\r\n            local indent2 = indent .. \"  \"\r\n            local lines = {}\r\n            local str\r\n            if obj._NAME then\r\n                str = obj._CLASS .. \" {\"\r\n                local sorted = keys_sorted(obj._VALUES)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj._VALUES, k)\r\n                    local line = indent2 .. k .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. '.' .. k) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            else\r\n                str = \"{\"\r\n                local sorted = keys_sorted(obj)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj, k)\r\n                    local kr = \"[\" .. _dump(k, indent2) .. \"]\"\r\n                    local line = indent2 .. kr .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. kr) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            end\r\n            if #lines > 0 then\r\n                str = str .. \"\\n\" .. table.concat(lines) .. indent\r\n            end\r\n            return str .. \"}\"\r\n        else\r\n            return tostring(obj)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "if seen[obj] then\r\n                return seen[obj]\r\n            end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "seen[obj] = ref",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "local indent2 = indent .. \"  \"",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local lines = {}",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local str",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if obj._NAME then\r\n                str = obj._CLASS .. \" {\"\r\n                local sorted = keys_sorted(obj._VALUES)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj._VALUES, k)\r\n                    local line = indent2 .. k .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. '.' .. k) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            else\r\n                str = \"{\"\r\n                local sorted = keys_sorted(obj)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj, k)\r\n                    local kr = \"[\" .. _dump(k, indent2) .. \"]\"\r\n                    local line = indent2 .. kr .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. kr) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "str = obj._CLASS .. \" {\"",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "local sorted = keys_sorted(obj._VALUES)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj._VALUES, k)\r\n                    local line = indent2 .. k .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. '.' .. k) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 105,
    "text": "local k = sorted[i]",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local v = rawget(obj._VALUES, k)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "local line = indent2 .. k .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. '.' .. k) .. \",\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "lines[#lines+1] = line",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "str = \"{\"",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "local sorted = keys_sorted(obj)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj, k)\r\n                    local kr = \"[\" .. _dump(k, indent2) .. \"]\"\r\n                    local line = indent2 .. kr .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. kr) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 112,
    "text": "local v = rawget(obj, k)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "local kr = \"[\" .. _dump(k, indent2) .. \"]\"",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local line = indent2 .. kr .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. kr) .. \",\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "if #lines > 0 then\r\n                str = str .. \"\\n\" .. table.concat(lines) .. indent\r\n            end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "str = str .. \"\\n\" .. table.concat(lines) .. indent",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "local function keys_sorted (t)\r\n        local sorted = {}\r\n        for k in pairs(t) do\r\n            sorted[#sorted+1] = k\r\n        end\r\n        table.sort(sorted, function (a, b)\r\n                          local r, cmp = pcall(function () return a < b end)\r\n                          if r == nil then\r\n                              return tostring(a) < tostring(b)\r\n                          else\r\n                              return cmp\r\n                          end\r\n                      end)\r\n        return sorted\r\n    end",
    "type": "function"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "local function _dump (obj, indent, ref)\r\n        local tobj = basic_type(obj)\r\n        if tobj == 'string' then\r\n            return string.format('%q', obj)\r\n        elseif tobj == 'table' then\r\n            if seen[obj] then\r\n                return seen[obj]\r\n            end\r\n            seen[obj] = ref\r\n            local indent2 = indent .. \"  \"\r\n            local lines = {}\r\n            local str\r\n            if obj._NAME then\r\n                str = obj._CLASS .. \" {\"\r\n                local sorted = keys_sorted(obj._VALUES)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj._VALUES, k)\r\n                    local line = indent2 .. k .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. '.' .. k) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            else\r\n                str = \"{\"\r\n                local sorted = keys_sorted(obj)\r\n                for i = 1, #sorted do\r\n                    local k = sorted[i]\r\n                    local v = rawget(obj, k)\r\n                    local kr = \"[\" .. _dump(k, indent2) .. \"]\"\r\n                    local line = indent2 .. kr .. \" = \"\r\n                                         .. _dump(v, indent2, ref .. kr) .. \",\\n\"\r\n                    lines[#lines+1] = line\r\n                end\r\n            end\r\n            if #lines > 0 then\r\n                str = str .. \"\\n\" .. table.concat(lines) .. indent\r\n            end\r\n            return str .. \"}\"\r\n        else\r\n            return tostring(obj)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function new (class, args)\r\n    args = args or {}\r\n\r\n    local roles = class._ROLE\r\n    for i = 1, #roles do -- check roles\r\n        local r = roles[i]\r\n        local excl = r._EXCL\r\n        for j = 1, #excl do\r\n            local v = excl[j]\r\n            if class:does(v) then\r\n                error(\"Role \" .. r._NAME .. \" excludes role \" .. v)\r\n            end\r\n        end\r\n        local req = r._REQ\r\n        for j = 1, #req do\r\n            local v = req[j]\r\n            if not class[v] then\r\n                error(\"Role \" .. r._NAME .. \" requires method \" .. v)\r\n            end\r\n        end\r\n    end\r\n\r\n    local obj = {\r\n        _CLASS = class._NAME,\r\n        _VALUES = {}\r\n    }\r\n    local mt = {}\r\n    setmetatable(obj, mt)\r\n    class._INIT(obj, args)\r\n    mt.__index = function (o, k)\r\n        local getter = '_get_' .. k\r\n        if class[getter] then\r\n            return class[getter](o)\r\n        else\r\n            return class[k]\r\n        end\r\n    end\r\n    mt.__newindex = function (o, k, v)\r\n        local setter = '_set_' .. k\r\n        if class[setter] then\r\n            class[setter](o, v)\r\n        else\r\n            error(\"Cannot set '\" .. k .. \"' (unknown)\")\r\n        end\r\n    end\r\n    mt.__pairs = function (o)\r\n        return next, o._VALUES\r\n    end\r\n    if class.BUILD then\r\n        class.BUILD(obj, args)\r\n    end\r\n    return obj\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "args = args or {}",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "local roles = class._ROLE",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "for i = 1, #roles do -- check roles\r\n        local r = roles[i]\r\n        local excl = r._EXCL\r\n        for j = 1, #excl do\r\n            local v = excl[j]\r\n            if class:does(v) then\r\n                error(\"Role \" .. r._NAME .. \" excludes role \" .. v)\r\n            end\r\n        end\r\n        local req = r._REQ\r\n        for j = 1, #req do\r\n            local v = req[j]\r\n            if not class[v] then\r\n                error(\"Role \" .. r._NAME .. \" requires method \" .. v)\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 126,
    "text": "local r = roles[i]",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local excl = r._EXCL",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "for j = 1, #excl do\r\n            local v = excl[j]\r\n            if class:does(v) then\r\n                error(\"Role \" .. r._NAME .. \" excludes role \" .. v)\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 129,
    "text": "local v = excl[j]",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "if class:does(v) then\r\n                error(\"Role \" .. r._NAME .. \" excludes role \" .. v)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "error(\"Role \" .. r._NAME .. \" excludes role \" .. v)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "local req = r._REQ",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "for j = 1, #req do\r\n            local v = req[j]\r\n            if not class[v] then\r\n                error(\"Role \" .. r._NAME .. \" requires method \" .. v)\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 134,
    "text": "local v = req[j]",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "if not class[v] then\r\n                error(\"Role \" .. r._NAME .. \" requires method \" .. v)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "error(\"Role \" .. r._NAME .. \" requires method \" .. v)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "local obj = {\r\n        _CLASS = class._NAME,\r\n        _VALUES = {}\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "local mt = {}",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "setmetatable(obj, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "class._INIT(obj, args)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "mt.__index = function (o, k)\r\n        local getter = '_get_' .. k\r\n        if class[getter] then\r\n            return class[getter](o)\r\n        else\r\n            return class[k]\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "local getter = '_get_' .. k",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "if class[getter] then\r\n            return class[getter](o)\r\n        else\r\n            return class[k]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "mt.__newindex = function (o, k, v)\r\n        local setter = '_set_' .. k\r\n        if class[setter] then\r\n            class[setter](o, v)\r\n        else\r\n            error(\"Cannot set '\" .. k .. \"' (unknown)\")\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "local setter = '_set_' .. k",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "if class[setter] then\r\n            class[setter](o, v)\r\n        else\r\n            error(\"Cannot set '\" .. k .. \"' (unknown)\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "class[setter](o, v)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "error(\"Cannot set '\" .. k .. \"' (unknown)\")",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "mt.__pairs = function (o)\r\n        return next, o._VALUES\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "if class.BUILD then\r\n        class.BUILD(obj, args)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "class.BUILD(obj, args)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function (o, k)\r\n        local getter = '_get_' .. k\r\n        if class[getter] then\r\n            return class[getter](o)\r\n        else\r\n            return class[k]\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function (o, k, v)\r\n        local setter = '_set_' .. k\r\n        if class[setter] then\r\n            class[setter](o, v)\r\n        else\r\n            error(\"Cannot set '\" .. k .. \"' (unknown)\")\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function (o)\r\n        return next, o._VALUES\r\n    end",
    "type": "function"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "local function instance (class, args)\r\n    class._INSTANCE = class._INSTANCE or new(class, args)\r\n    return class._INSTANCE\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "class._INSTANCE = class._INSTANCE or new(class, args)",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "local function __gc (class, obj)\r\n    if class.DEMOLISH then\r\n        class.DEMOLISH(obj)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "if class.DEMOLISH then\r\n        class.DEMOLISH(obj)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "class.DEMOLISH(obj)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "local function attr_default (options, obj)\r\n    local builder = options.builder\r\n    if builder then\r\n        local func = obj[builder]\r\n        if not func then\r\n            error(\"method \" .. builder .. \" not found in \" .. obj._CLASS)\r\n        end\r\n        return func(obj)\r\n    else\r\n        local default = options.default\r\n        if basic_type(default) == 'function' then\r\n            return default(obj)\r\n        else\r\n            return default\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "local builder = options.builder",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "if builder then\r\n        local func = obj[builder]\r\n        if not func then\r\n            error(\"method \" .. builder .. \" not found in \" .. obj._CLASS)\r\n        end\r\n        return func(obj)\r\n    else\r\n        local default = options.default\r\n        if basic_type(default) == 'function' then\r\n            return default(obj)\r\n        else\r\n            return default\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "local func = obj[builder]",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "if not func then\r\n            error(\"method \" .. builder .. \" not found in \" .. obj._CLASS)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "error(\"method \" .. builder .. \" not found in \" .. obj._CLASS)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "local default = options.default",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "if basic_type(default) == 'function' then\r\n            return default(obj)\r\n        else\r\n            return default\r\n        end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "local function validate (name, options, val)\r\n    if val == nil then\r\n        if options.required and not options.lazy then\r\n            error(\"Attribute '\" .. name .. \"' is required\")\r\n        end\r\n    else\r\n        if options.isa then\r\n            if options.coerce then\r\n                local Types = loaded['Coat.Types']\r\n                local mapping = Types and Types.coercion_map(options.isa)\r\n                if not mapping then\r\n                    error(\"Coercion is not available for type \" .. options.isa)\r\n                end\r\n                local coerce = mapping[type(val)]\r\n                if coerce then\r\n                    val = coerce(val)\r\n                end\r\n            end\r\n\r\n            local function check_isa (tname)\r\n                local Types = loaded['Coat.Types']\r\n                local tc = Types and Types.find_type_constraint(tname)\r\n                if tc then\r\n                    check_isa(tc.parent)\r\n                    if not tc.validator(val) then\r\n                        local msg = tc.message\r\n                        if msg == nil then\r\n                            error(\"Value for attribute '\" .. name\r\n                                  .. \"' does not validate type constraint '\"\r\n                                  .. tname .. \"'\")\r\n                        else\r\n                            error(string.format(msg, val))\r\n                        end\r\n                    end\r\n                else\r\n                    if not isa(val, tname) then\r\n                        error(\"Invalid type for attribute '\" .. name\r\n                              .. \"' (got \" .. type(val)\r\n                              .. \", expected \" .. tname ..\")\")\r\n                    end\r\n                end\r\n            end -- check_isa\r\n\r\n            check_isa(options.isa)\r\n        end\r\n\r\n        if options.does then\r\n            local role = options.does\r\n            if not does(val, role) then\r\n                error(\"Value for attribute '\" .. name\r\n                      .. \"' does not consume role '\" .. role .. \"'\")\r\n            end\r\n        end\r\n    end\r\n    return val\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "if val == nil then\r\n        if options.required and not options.lazy then\r\n            error(\"Attribute '\" .. name .. \"' is required\")\r\n        end\r\n    else\r\n        if options.isa then\r\n            if options.coerce then\r\n                local Types = loaded['Coat.Types']\r\n                local mapping = Types and Types.coercion_map(options.isa)\r\n                if not mapping then\r\n                    error(\"Coercion is not available for type \" .. options.isa)\r\n                end\r\n                local coerce = mapping[type(val)]\r\n                if coerce then\r\n                    val = coerce(val)\r\n                end\r\n            end\r\n\r\n            local function check_isa (tname)\r\n                local Types = loaded['Coat.Types']\r\n                local tc = Types and Types.find_type_constraint(tname)\r\n                if tc then\r\n                    check_isa(tc.parent)\r\n                    if not tc.validator(val) then\r\n                        local msg = tc.message\r\n                        if msg == nil then\r\n                            error(\"Value for attribute '\" .. name\r\n                                  .. \"' does not validate type constraint '\"\r\n                                  .. tname .. \"'\")\r\n                        else\r\n                            error(string.format(msg, val))\r\n                        end\r\n                    end\r\n                else\r\n                    if not isa(val, tname) then\r\n                        error(\"Invalid type for attribute '\" .. name\r\n                              .. \"' (got \" .. type(val)\r\n                              .. \", expected \" .. tname ..\")\")\r\n                    end\r\n                end\r\n            end -- check_isa\r\n\r\n            check_isa(options.isa)\r\n        end\r\n\r\n        if options.does then\r\n            local role = options.does\r\n            if not does(val, role) then\r\n                error(\"Value for attribute '\" .. name\r\n                      .. \"' does not consume role '\" .. role .. \"'\")\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "if options.required and not options.lazy then\r\n            error(\"Attribute '\" .. name .. \"' is required\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "error(\"Attribute '\" .. name .. \"' is required\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "if options.isa then\r\n            if options.coerce then\r\n                local Types = loaded['Coat.Types']\r\n                local mapping = Types and Types.coercion_map(options.isa)\r\n                if not mapping then\r\n                    error(\"Coercion is not available for type \" .. options.isa)\r\n                end\r\n                local coerce = mapping[type(val)]\r\n                if coerce then\r\n                    val = coerce(val)\r\n                end\r\n            end\r\n\r\n            local function check_isa (tname)\r\n                local Types = loaded['Coat.Types']\r\n                local tc = Types and Types.find_type_constraint(tname)\r\n                if tc then\r\n                    check_isa(tc.parent)\r\n                    if not tc.validator(val) then\r\n                        local msg = tc.message\r\n                        if msg == nil then\r\n                            error(\"Value for attribute '\" .. name\r\n                                  .. \"' does not validate type constraint '\"\r\n                                  .. tname .. \"'\")\r\n                        else\r\n                            error(string.format(msg, val))\r\n                        end\r\n                    end\r\n                else\r\n                    if not isa(val, tname) then\r\n                        error(\"Invalid type for attribute '\" .. name\r\n                              .. \"' (got \" .. type(val)\r\n                              .. \", expected \" .. tname ..\")\")\r\n                    end\r\n                end\r\n            end -- check_isa\r\n\r\n            check_isa(options.isa)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "if options.coerce then\r\n                local Types = loaded['Coat.Types']\r\n                local mapping = Types and Types.coercion_map(options.isa)\r\n                if not mapping then\r\n                    error(\"Coercion is not available for type \" .. options.isa)\r\n                end\r\n                local coerce = mapping[type(val)]\r\n                if coerce then\r\n                    val = coerce(val)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "local Types = loaded['Coat.Types']",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "local mapping = Types and Types.coercion_map(options.isa)",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "if not mapping then\r\n                    error(\"Coercion is not available for type \" .. options.isa)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "error(\"Coercion is not available for type \" .. options.isa)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "local coerce = mapping[type(val)]",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "if coerce then\r\n                    val = coerce(val)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "val = coerce(val)",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "local function check_isa (tname)\r\n                local Types = loaded['Coat.Types']\r\n                local tc = Types and Types.find_type_constraint(tname)\r\n                if tc then\r\n                    check_isa(tc.parent)\r\n                    if not tc.validator(val) then\r\n                        local msg = tc.message\r\n                        if msg == nil then\r\n                            error(\"Value for attribute '\" .. name\r\n                                  .. \"' does not validate type constraint '\"\r\n                                  .. tname .. \"'\")\r\n                        else\r\n                            error(string.format(msg, val))\r\n                        end\r\n                    end\r\n                else\r\n                    if not isa(val, tname) then\r\n                        error(\"Invalid type for attribute '\" .. name\r\n                              .. \"' (got \" .. type(val)\r\n                              .. \", expected \" .. tname ..\")\")\r\n                    end\r\n                end\r\n            end",
    "type": "statement:localfunction"
  }, {
    "id": 189,
    "text": "local tc = Types and Types.find_type_constraint(tname)",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "if tc then\r\n                    check_isa(tc.parent)\r\n                    if not tc.validator(val) then\r\n                        local msg = tc.message\r\n                        if msg == nil then\r\n                            error(\"Value for attribute '\" .. name\r\n                                  .. \"' does not validate type constraint '\"\r\n                                  .. tname .. \"'\")\r\n                        else\r\n                            error(string.format(msg, val))\r\n                        end\r\n                    end\r\n                else\r\n                    if not isa(val, tname) then\r\n                        error(\"Invalid type for attribute '\" .. name\r\n                              .. \"' (got \" .. type(val)\r\n                              .. \", expected \" .. tname ..\")\")\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "check_isa(tc.parent)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "if not tc.validator(val) then\r\n                        local msg = tc.message\r\n                        if msg == nil then\r\n                            error(\"Value for attribute '\" .. name\r\n                                  .. \"' does not validate type constraint '\"\r\n                                  .. tname .. \"'\")\r\n                        else\r\n                            error(string.format(msg, val))\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "local msg = tc.message",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "if msg == nil then\r\n                            error(\"Value for attribute '\" .. name\r\n                                  .. \"' does not validate type constraint '\"\r\n                                  .. tname .. \"'\")\r\n                        else\r\n                            error(string.format(msg, val))\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "error(\"Value for attribute '\" .. name\r\n                                  .. \"' does not validate type constraint '\"\r\n                                  .. tname .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "error(string.format(msg, val))",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "if not isa(val, tname) then\r\n                        error(\"Invalid type for attribute '\" .. name\r\n                              .. \"' (got \" .. type(val)\r\n                              .. \", expected \" .. tname ..\")\")\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "error(\"Invalid type for attribute '\" .. name\r\n                              .. \"' (got \" .. type(val)\r\n                              .. \", expected \" .. tname ..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "check_isa(options.isa)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "if options.does then\r\n            local role = options.does\r\n            if not does(val, role) then\r\n                error(\"Value for attribute '\" .. name\r\n                      .. \"' does not consume role '\" .. role .. \"'\")\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "local role = options.does",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "if not does(val, role) then\r\n                error(\"Value for attribute '\" .. name\r\n                      .. \"' does not consume role '\" .. role .. \"'\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "error(\"Value for attribute '\" .. name\r\n                      .. \"' does not consume role '\" .. role .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 205,
    "text": "local function check_isa (tname)\r\n                local Types = loaded['Coat.Types']\r\n                local tc = Types and Types.find_type_constraint(tname)\r\n                if tc then\r\n                    check_isa(tc.parent)\r\n                    if not tc.validator(val) then\r\n                        local msg = tc.message\r\n                        if msg == nil then\r\n                            error(\"Value for attribute '\" .. name\r\n                                  .. \"' does not validate type constraint '\"\r\n                                  .. tname .. \"'\")\r\n                        else\r\n                            error(string.format(msg, val))\r\n                        end\r\n                    end\r\n                else\r\n                    if not isa(val, tname) then\r\n                        error(\"Invalid type for attribute '\" .. name\r\n                              .. \"' (got \" .. type(val)\r\n                              .. \", expected \" .. tname ..\")\")\r\n                    end\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "local function _INIT (class, obj, args)\r\n    for k, opts in pairs(class._ATTR) do\r\n        if obj._VALUES[k] == nil then\r\n            local val = args[k]\r\n            if val ~= nil then\r\n                if basic_type(val) == 'function' then\r\n                    val = val(obj)\r\n                end\r\n            elseif not opts.lazy then\r\n                val = attr_default(opts, obj)\r\n            end\r\n            val = validate(k, opts, val)\r\n            obj._VALUES[k] = val\r\n        else\r\n            validate(k, opts, obj._VALUES[k])\r\n        end\r\n    end\r\n\r\n    local m = getmetatable(obj)\r\n    for k, v in pairs(class._MT) do\r\n        if not m[k] then\r\n            m[k] = v\r\n        end\r\n    end\r\n\r\n    local parents = class._PARENT\r\n    for i = 1, #parents do\r\n        local p = parents[i]\r\n        p._INIT(obj, args)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "for k, opts in pairs(class._ATTR) do\r\n        if obj._VALUES[k] == nil then\r\n            local val = args[k]\r\n            if val ~= nil then\r\n                if basic_type(val) == 'function' then\r\n                    val = val(obj)\r\n                end\r\n            elseif not opts.lazy then\r\n                val = attr_default(opts, obj)\r\n            end\r\n            val = validate(k, opts, val)\r\n            obj._VALUES[k] = val\r\n        else\r\n            validate(k, opts, obj._VALUES[k])\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 209,
    "text": "if obj._VALUES[k] == nil then\r\n            local val = args[k]\r\n            if val ~= nil then\r\n                if basic_type(val) == 'function' then\r\n                    val = val(obj)\r\n                end\r\n            elseif not opts.lazy then\r\n                val = attr_default(opts, obj)\r\n            end\r\n            val = validate(k, opts, val)\r\n            obj._VALUES[k] = val\r\n        else\r\n            validate(k, opts, obj._VALUES[k])\r\n        end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "local val = args[k]",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "if val ~= nil then\r\n                if basic_type(val) == 'function' then\r\n                    val = val(obj)\r\n                end\r\n            elseif not opts.lazy then\r\n                val = attr_default(opts, obj)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "if basic_type(val) == 'function' then\r\n                    val = val(obj)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "val = val(obj)",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "val = attr_default(opts, obj)",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "val = validate(k, opts, val)",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "obj._VALUES[k] = val",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "validate(k, opts, obj._VALUES[k])",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "local m = getmetatable(obj)",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "for k, v in pairs(class._MT) do\r\n        if not m[k] then\r\n            m[k] = v\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 220,
    "text": "if not m[k] then\r\n            m[k] = v\r\n        end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "m[k] = v",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "local parents = class._PARENT",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "for i = 1, #parents do\r\n        local p = parents[i]\r\n        p._INIT(obj, args)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 224,
    "text": "local p = parents[i]",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "p._INIT(obj, args)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "local function has (class, name, options)\r\n    checktype('has', 1, name, 'string')\r\n    options = options or {}\r\n    checktype('has', 2, options, 'table')\r\n\r\n    if class[name] then\r\n        error(\"Overwrite definition of method \" .. name)\r\n    end\r\n    if options[1] == '+' then\r\n        local inherited = class._ATTR[name]\r\n        if inherited == nil then\r\n            error(\"Cannot overload unknown attribute \" .. name)\r\n        end\r\n        local t = {}\r\n        for k, v in pairs(inherited) do\r\n            t[k] = v\r\n        end\r\n        for k, v in pairs(options) do\r\n            if k == 'is' and t[k] == 'ro' then\r\n                break\r\n            end\r\n            t[k] = v\r\n        end\r\n        options = t\r\n    elseif class._ATTR[name] ~= nil then\r\n        error(\"Duplicate definition of attribute \" .. name)\r\n    end\r\n\r\n    if options.reset and options.required then\r\n        error \"The reset option is incompatible with required option\"\r\n    end\r\n    if options.inject then\r\n        options.lazy_build = true\r\n    end\r\n    if options.lazy_build then\r\n        options.lazy = true\r\n        options.builder = '_build_' .. name\r\n        options.reset = true\r\n    end\r\n    if options.trigger and basic_type(options.trigger) ~= 'function' then\r\n        error \"The trigger option requires a function\"\r\n    end\r\n    if options.default and options.builder then\r\n        error \"The options default and builder are not compatible\"\r\n    end\r\n    if options.lazy and options.default == nil and options.builder == nil then\r\n        error \"The lazy option implies the builder or default option\"\r\n    end\r\n    if options.builder and basic_type(options.builder) ~= 'string' then\r\n        error \"The builder option requires a string (method name)\"\r\n    end\r\n    class._ATTR[name] = options\r\n\r\n    if options.is then\r\n        class['_set_' .. name] = function (obj, val)\r\n            local t = rawget(obj, '_VALUES')\r\n            if options.is == 'ro'\r\n               and (options.lazy or t[name] ~= nil)\r\n               and (not options.reset or val ~= nil) then\r\n                error(\"Cannot set a read-only attribute (\"\r\n                      .. name .. \")\")\r\n            end\r\n            val = validate(name, options, val)\r\n            t[name] = val\r\n            local trigger = options.trigger\r\n            if trigger then\r\n                trigger(obj, val)\r\n            end\r\n            return val\r\n        end\r\n\r\n        class['_get_' .. name] = function (obj)\r\n            local t = rawget(obj, '_VALUES')\r\n            if options.lazy and t[name] == nil then\r\n                local val = attr_default(options, obj)\r\n                val = validate(name, options, val)\r\n                t[name] = val\r\n            end\r\n            return t[name]\r\n        end\r\n    end\r\n\r\n    if options.inject then\r\n        if not options.does then\r\n            error \"The inject option requires a does option\"\r\n        end\r\n        class[options.builder] = function (obj)\r\n            local impl = Meta.class(obj._CLASS)._BINDING[options.does]\r\n            if not impl then\r\n                error(\"No binding found for \" .. options.does .. \" in class \" .. obj._CLASS)\r\n            end\r\n            return impl()\r\n        end\r\n    end\r\n\r\n    if options.handles then\r\n        if basic_type(options.handles) == 'table' and not options.handles._NAME then\r\n            for k, v in pairs(options.handles) do\r\n                local meth = k\r\n                if basic_type(meth) == 'number' then\r\n                    meth = v\r\n                end\r\n                if class[meth] then\r\n                    error(\"Duplicate definition of method \" .. meth)\r\n                end\r\n                class[meth] = function (obj, ...)\r\n                    local attr = rawget(obj, '_VALUES')[name]\r\n                    local func = attr[v]\r\n                    if func == nil then\r\n                        error(\"Cannot delegate \" .. meth .. \" from \"\r\n                              .. name .. \" (\" .. v .. \")\")\r\n                    end\r\n                    return func(attr, ...)\r\n                end -- delegate\r\n            end\r\n        else\r\n            local role\r\n            if basic_type(options.handles) == 'string' then\r\n                role = require(options.handles)\r\n            elseif options.handles._NAME then\r\n                role = options.handles\r\n            end\r\n            if not role or role._INIT then\r\n                error \"The handles option requires a table or a Role\"\r\n            end\r\n            if options.does ~= role._NAME then\r\n                error \"The handles option requires a does option with the same role\"\r\n            end\r\n            local store = role._STORE\r\n            for i = 1, #store do\r\n                local v = store[i]\r\n                if v[1] == 'method' then\r\n                    local meth = v[2]\r\n                    if class[meth] then\r\n                        error(\"Duplicate definition of method \" .. meth)\r\n                    end\r\n                    class[meth] = function (obj, ...)\r\n                        local attr = rawget(obj, '_VALUES')[name]\r\n                        local func = attr[meth]\r\n                        if func == nil then\r\n                            error(\"Cannot delegate \" .. meth .. \" from \"\r\n                                  .. name .. \" (\" .. meth .. \")\")\r\n                        end\r\n                        return func(attr, ...)\r\n                    end -- delegate\r\n                end\r\n            end\r\n            local t = class._DOES; t[#t+1] = role._NAME\r\n        end\r\n    end -- options.handles\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "checktype('has', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "options = options or {}",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "checktype('has', 2, options, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "if class[name] then\r\n        error(\"Overwrite definition of method \" .. name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "error(\"Overwrite definition of method \" .. name)",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "if options[1] == '+' then\r\n        local inherited = class._ATTR[name]\r\n        if inherited == nil then\r\n            error(\"Cannot overload unknown attribute \" .. name)\r\n        end\r\n        local t = {}\r\n        for k, v in pairs(inherited) do\r\n            t[k] = v\r\n        end\r\n        for k, v in pairs(options) do\r\n            if k == 'is' and t[k] == 'ro' then\r\n                break\r\n            end\r\n            t[k] = v\r\n        end\r\n        options = t\r\n    elseif class._ATTR[name] ~= nil then\r\n        error(\"Duplicate definition of attribute \" .. name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "local inherited = class._ATTR[name]",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "if inherited == nil then\r\n            error(\"Cannot overload unknown attribute \" .. name)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "error(\"Cannot overload unknown attribute \" .. name)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "for k, v in pairs(inherited) do\r\n            t[k] = v\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 239,
    "text": "t[k] = v",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "for k, v in pairs(options) do\r\n            if k == 'is' and t[k] == 'ro' then\r\n                break\r\n            end\r\n            t[k] = v\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 241,
    "text": "if k == 'is' and t[k] == 'ro' then\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "options = t",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "error(\"Duplicate definition of attribute \" .. name)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "if options.reset and options.required then\r\n        error \"The reset option is incompatible with required option\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "error \"The reset option is incompatible with required option\"",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "if options.inject then\r\n        options.lazy_build = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "options.lazy_build = true",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "if options.lazy_build then\r\n        options.lazy = true\r\n        options.builder = '_build_' .. name\r\n        options.reset = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "options.lazy = true",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "options.builder = '_build_' .. name",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "options.reset = true",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "if options.trigger and basic_type(options.trigger) ~= 'function' then\r\n        error \"The trigger option requires a function\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 253,
    "text": "error \"The trigger option requires a function\"",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "if options.default and options.builder then\r\n        error \"The options default and builder are not compatible\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "error \"The options default and builder are not compatible\"",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "if options.lazy and options.default == nil and options.builder == nil then\r\n        error \"The lazy option implies the builder or default option\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "error \"The lazy option implies the builder or default option\"",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "if options.builder and basic_type(options.builder) ~= 'string' then\r\n        error \"The builder option requires a string (method name)\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "error \"The builder option requires a string (method name)\"",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "class._ATTR[name] = options",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "if options.is then\r\n        class['_set_' .. name] = function (obj, val)\r\n            local t = rawget(obj, '_VALUES')\r\n            if options.is == 'ro'\r\n               and (options.lazy or t[name] ~= nil)\r\n               and (not options.reset or val ~= nil) then\r\n                error(\"Cannot set a read-only attribute (\"\r\n                      .. name .. \")\")\r\n            end\r\n            val = validate(name, options, val)\r\n            t[name] = val\r\n            local trigger = options.trigger\r\n            if trigger then\r\n                trigger(obj, val)\r\n            end\r\n            return val\r\n        end\r\n\r\n        class['_get_' .. name] = function (obj)\r\n            local t = rawget(obj, '_VALUES')\r\n            if options.lazy and t[name] == nil then\r\n                local val = attr_default(options, obj)\r\n                val = validate(name, options, val)\r\n                t[name] = val\r\n            end\r\n            return t[name]\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "class['_set_' .. name] = function (obj, val)\r\n            local t = rawget(obj, '_VALUES')\r\n            if options.is == 'ro'\r\n               and (options.lazy or t[name] ~= nil)\r\n               and (not options.reset or val ~= nil) then\r\n                error(\"Cannot set a read-only attribute (\"\r\n                      .. name .. \")\")\r\n            end\r\n            val = validate(name, options, val)\r\n            t[name] = val\r\n            local trigger = options.trigger\r\n            if trigger then\r\n                trigger(obj, val)\r\n            end\r\n            return val\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "local t = rawget(obj, '_VALUES')",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "if options.is == 'ro'\r\n               and (options.lazy or t[name] ~= nil)\r\n               and (not options.reset or val ~= nil) then\r\n                error(\"Cannot set a read-only attribute (\"\r\n                      .. name .. \")\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "error(\"Cannot set a read-only attribute (\"\r\n                      .. name .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "val = validate(name, options, val)",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "t[name] = val",
    "type": "statement:assign"
  }, {
    "id": 268,
    "text": "local trigger = options.trigger",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "if trigger then\r\n                trigger(obj, val)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "trigger(obj, val)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "class['_get_' .. name] = function (obj)\r\n            local t = rawget(obj, '_VALUES')\r\n            if options.lazy and t[name] == nil then\r\n                local val = attr_default(options, obj)\r\n                val = validate(name, options, val)\r\n                t[name] = val\r\n            end\r\n            return t[name]\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "if options.lazy and t[name] == nil then\r\n                local val = attr_default(options, obj)\r\n                val = validate(name, options, val)\r\n                t[name] = val\r\n            end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "local val = attr_default(options, obj)",
    "type": "statement:localassign"
  }, {
    "id": 274,
    "text": "if options.inject then\r\n        if not options.does then\r\n            error \"The inject option requires a does option\"\r\n        end\r\n        class[options.builder] = function (obj)\r\n            local impl = Meta.class(obj._CLASS)._BINDING[options.does]\r\n            if not impl then\r\n                error(\"No binding found for \" .. options.does .. \" in class \" .. obj._CLASS)\r\n            end\r\n            return impl()\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 275,
    "text": "if not options.does then\r\n            error \"The inject option requires a does option\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 276,
    "text": "error \"The inject option requires a does option\"",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "class[options.builder] = function (obj)\r\n            local impl = Meta.class(obj._CLASS)._BINDING[options.does]\r\n            if not impl then\r\n                error(\"No binding found for \" .. options.does .. \" in class \" .. obj._CLASS)\r\n            end\r\n            return impl()\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "local impl = Meta.class(obj._CLASS)._BINDING[options.does]",
    "type": "statement:localassign"
  }, {
    "id": 279,
    "text": "if not impl then\r\n                error(\"No binding found for \" .. options.does .. \" in class \" .. obj._CLASS)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "error(\"No binding found for \" .. options.does .. \" in class \" .. obj._CLASS)",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "if options.handles then\r\n        if basic_type(options.handles) == 'table' and not options.handles._NAME then\r\n            for k, v in pairs(options.handles) do\r\n                local meth = k\r\n                if basic_type(meth) == 'number' then\r\n                    meth = v\r\n                end\r\n                if class[meth] then\r\n                    error(\"Duplicate definition of method \" .. meth)\r\n                end\r\n                class[meth] = function (obj, ...)\r\n                    local attr = rawget(obj, '_VALUES')[name]\r\n                    local func = attr[v]\r\n                    if func == nil then\r\n                        error(\"Cannot delegate \" .. meth .. \" from \"\r\n                              .. name .. \" (\" .. v .. \")\")\r\n                    end\r\n                    return func(attr, ...)\r\n                end -- delegate\r\n            end\r\n        else\r\n            local role\r\n            if basic_type(options.handles) == 'string' then\r\n                role = require(options.handles)\r\n            elseif options.handles._NAME then\r\n                role = options.handles\r\n            end\r\n            if not role or role._INIT then\r\n                error \"The handles option requires a table or a Role\"\r\n            end\r\n            if options.does ~= role._NAME then\r\n                error \"The handles option requires a does option with the same role\"\r\n            end\r\n            local store = role._STORE\r\n            for i = 1, #store do\r\n                local v = store[i]\r\n                if v[1] == 'method' then\r\n                    local meth = v[2]\r\n                    if class[meth] then\r\n                        error(\"Duplicate definition of method \" .. meth)\r\n                    end\r\n                    class[meth] = function (obj, ...)\r\n                        local attr = rawget(obj, '_VALUES')[name]\r\n                        local func = attr[meth]\r\n                        if func == nil then\r\n                            error(\"Cannot delegate \" .. meth .. \" from \"\r\n                                  .. name .. \" (\" .. meth .. \")\")\r\n                        end\r\n                        return func(attr, ...)\r\n                    end -- delegate\r\n                end\r\n            end\r\n            local t = class._DOES; t[#t+1] = role._NAME\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 282,
    "text": "if basic_type(options.handles) == 'table' and not options.handles._NAME then\r\n            for k, v in pairs(options.handles) do\r\n                local meth = k\r\n                if basic_type(meth) == 'number' then\r\n                    meth = v\r\n                end\r\n                if class[meth] then\r\n                    error(\"Duplicate definition of method \" .. meth)\r\n                end\r\n                class[meth] = function (obj, ...)\r\n                    local attr = rawget(obj, '_VALUES')[name]\r\n                    local func = attr[v]\r\n                    if func == nil then\r\n                        error(\"Cannot delegate \" .. meth .. \" from \"\r\n                              .. name .. \" (\" .. v .. \")\")\r\n                    end\r\n                    return func(attr, ...)\r\n                end -- delegate\r\n            end\r\n        else\r\n            local role\r\n            if basic_type(options.handles) == 'string' then\r\n                role = require(options.handles)\r\n            elseif options.handles._NAME then\r\n                role = options.handles\r\n            end\r\n            if not role or role._INIT then\r\n                error \"The handles option requires a table or a Role\"\r\n            end\r\n            if options.does ~= role._NAME then\r\n                error \"The handles option requires a does option with the same role\"\r\n            end\r\n            local store = role._STORE\r\n            for i = 1, #store do\r\n                local v = store[i]\r\n                if v[1] == 'method' then\r\n                    local meth = v[2]\r\n                    if class[meth] then\r\n                        error(\"Duplicate definition of method \" .. meth)\r\n                    end\r\n                    class[meth] = function (obj, ...)\r\n                        local attr = rawget(obj, '_VALUES')[name]\r\n                        local func = attr[meth]\r\n                        if func == nil then\r\n                            error(\"Cannot delegate \" .. meth .. \" from \"\r\n                                  .. name .. \" (\" .. meth .. \")\")\r\n                        end\r\n                        return func(attr, ...)\r\n                    end -- delegate\r\n                end\r\n            end\r\n            local t = class._DOES; t[#t+1] = role._NAME\r\n        end",
    "type": "statement:if"
  }, {
    "id": 283,
    "text": "for k, v in pairs(options.handles) do\r\n                local meth = k\r\n                if basic_type(meth) == 'number' then\r\n                    meth = v\r\n                end\r\n                if class[meth] then\r\n                    error(\"Duplicate definition of method \" .. meth)\r\n                end\r\n                class[meth] = function (obj, ...)\r\n                    local attr = rawget(obj, '_VALUES')[name]\r\n                    local func = attr[v]\r\n                    if func == nil then\r\n                        error(\"Cannot delegate \" .. meth .. \" from \"\r\n                              .. name .. \" (\" .. v .. \")\")\r\n                    end\r\n                    return func(attr, ...)\r\n                end -- delegate\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 284,
    "text": "local meth = k",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "if basic_type(meth) == 'number' then\r\n                    meth = v\r\n                end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "meth = v",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "if class[meth] then\r\n                    error(\"Duplicate definition of method \" .. meth)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "error(\"Duplicate definition of method \" .. meth)",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "class[meth] = function (obj, ...)\r\n                    local attr = rawget(obj, '_VALUES')[name]\r\n                    local func = attr[v]\r\n                    if func == nil then\r\n                        error(\"Cannot delegate \" .. meth .. \" from \"\r\n                              .. name .. \" (\" .. v .. \")\")\r\n                    end\r\n                    return func(attr, ...)\r\n                end",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "local attr = rawget(obj, '_VALUES')[name]",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "local func = attr[v]",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "if func == nil then\r\n                        error(\"Cannot delegate \" .. meth .. \" from \"\r\n                              .. name .. \" (\" .. v .. \")\")\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 293,
    "text": "error(\"Cannot delegate \" .. meth .. \" from \"\r\n                              .. name .. \" (\" .. v .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "local role",
    "type": "statement:localassign"
  }, {
    "id": 295,
    "text": "if basic_type(options.handles) == 'string' then\r\n                role = require(options.handles)\r\n            elseif options.handles._NAME then\r\n                role = options.handles\r\n            end",
    "type": "statement:if"
  }, {
    "id": 296,
    "text": "role = require(options.handles)",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "role = options.handles",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "if not role or role._INIT then\r\n                error \"The handles option requires a table or a Role\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 299,
    "text": "error \"The handles option requires a table or a Role\"",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "if options.does ~= role._NAME then\r\n                error \"The handles option requires a does option with the same role\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 301,
    "text": "error \"The handles option requires a does option with the same role\"",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "local store = role._STORE",
    "type": "statement:localassign"
  }, {
    "id": 303,
    "text": "for i = 1, #store do\r\n                local v = store[i]\r\n                if v[1] == 'method' then\r\n                    local meth = v[2]\r\n                    if class[meth] then\r\n                        error(\"Duplicate definition of method \" .. meth)\r\n                    end\r\n                    class[meth] = function (obj, ...)\r\n                        local attr = rawget(obj, '_VALUES')[name]\r\n                        local func = attr[meth]\r\n                        if func == nil then\r\n                            error(\"Cannot delegate \" .. meth .. \" from \"\r\n                                  .. name .. \" (\" .. meth .. \")\")\r\n                        end\r\n                        return func(attr, ...)\r\n                    end -- delegate\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 304,
    "text": "local v = store[i]",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "if v[1] == 'method' then\r\n                    local meth = v[2]\r\n                    if class[meth] then\r\n                        error(\"Duplicate definition of method \" .. meth)\r\n                    end\r\n                    class[meth] = function (obj, ...)\r\n                        local attr = rawget(obj, '_VALUES')[name]\r\n                        local func = attr[meth]\r\n                        if func == nil then\r\n                            error(\"Cannot delegate \" .. meth .. \" from \"\r\n                                  .. name .. \" (\" .. meth .. \")\")\r\n                        end\r\n                        return func(attr, ...)\r\n                    end -- delegate\r\n                end",
    "type": "statement:if"
  }, {
    "id": 306,
    "text": "local meth = v[2]",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "if class[meth] then\r\n                        error(\"Duplicate definition of method \" .. meth)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "class[meth] = function (obj, ...)\r\n                        local attr = rawget(obj, '_VALUES')[name]\r\n                        local func = attr[meth]\r\n                        if func == nil then\r\n                            error(\"Cannot delegate \" .. meth .. \" from \"\r\n                                  .. name .. \" (\" .. meth .. \")\")\r\n                        end\r\n                        return func(attr, ...)\r\n                    end",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "local func = attr[meth]",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "if func == nil then\r\n                            error(\"Cannot delegate \" .. meth .. \" from \"\r\n                                  .. name .. \" (\" .. meth .. \")\")\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "error(\"Cannot delegate \" .. meth .. \" from \"\r\n                                  .. name .. \" (\" .. meth .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "local t = class._DOES",
    "type": "statement:localassign"
  }, {
    "id": 313,
    "text": "t[#t+1] = role._NAME",
    "type": "statement:assign"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "function (obj, val)\r\n            local t = rawget(obj, '_VALUES')\r\n            if options.is == 'ro'\r\n               and (options.lazy or t[name] ~= nil)\r\n               and (not options.reset or val ~= nil) then\r\n                error(\"Cannot set a read-only attribute (\"\r\n                      .. name .. \")\")\r\n            end\r\n            val = validate(name, options, val)\r\n            t[name] = val\r\n            local trigger = options.trigger\r\n            if trigger then\r\n                trigger(obj, val)\r\n            end\r\n            return val\r\n        end",
    "type": "function"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function (obj)\r\n            local t = rawget(obj, '_VALUES')\r\n            if options.lazy and t[name] == nil then\r\n                local val = attr_default(options, obj)\r\n                val = validate(name, options, val)\r\n                t[name] = val\r\n            end\r\n            return t[name]\r\n        end",
    "type": "function"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function (obj)\r\n            local impl = Meta.class(obj._CLASS)._BINDING[options.does]\r\n            if not impl then\r\n                error(\"No binding found for \" .. options.does .. \" in class \" .. obj._CLASS)\r\n            end\r\n            return impl()\r\n        end",
    "type": "function"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function (obj, ...)\r\n                    local attr = rawget(obj, '_VALUES')[name]\r\n                    local func = attr[v]\r\n                    if func == nil then\r\n                        error(\"Cannot delegate \" .. meth .. \" from \"\r\n                              .. name .. \" (\" .. v .. \")\")\r\n                    end\r\n                    return func(attr, ...)\r\n                end",
    "type": "function"
  }, {
    "id": 322,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 323,
    "text": "function (obj, ...)\r\n                        local attr = rawget(obj, '_VALUES')[name]\r\n                        local func = attr[meth]\r\n                        if func == nil then\r\n                            error(\"Cannot delegate \" .. meth .. \" from \"\r\n                                  .. name .. \" (\" .. meth .. \")\")\r\n                        end\r\n                        return func(attr, ...)\r\n                    end",
    "type": "function"
  }, {
    "id": 324,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 325,
    "text": "local function method (class, name, func)\r\n    checktype('method', 1, name, 'string')\r\n    checktype('method', 2, func, 'function')\r\n    if class._ATTR[name] then\r\n        error(\"Overwrite definition of attribute \" .. name)\r\n    end\r\n    if class[name] then\r\n        error(\"Duplicate definition of method \" .. name)\r\n    end\r\n    class[name] = func\r\nend",
    "type": "function"
  }, {
    "id": 326,
    "text": "checktype('method', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "checktype('method', 2, func, 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 328,
    "text": "if class._ATTR[name] then\r\n        error(\"Overwrite definition of attribute \" .. name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 329,
    "text": "error(\"Overwrite definition of attribute \" .. name)",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "if class[name] then\r\n        error(\"Duplicate definition of method \" .. name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 331,
    "text": "error(\"Duplicate definition of method \" .. name)",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "class[name] = func",
    "type": "statement:assign"
  }, {
    "id": 333,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 334,
    "text": "local function overload (class, name, func)\r\n    checktype('overload', 1, name, 'string')\r\n    checktype('overload', 2, func, 'function')\r\n    class._MT[name] = func\r\nend",
    "type": "function"
  }, {
    "id": 335,
    "text": "checktype('overload', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "checktype('overload', 2, func, 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "class._MT[name] = func",
    "type": "statement:assign"
  }, {
    "id": 338,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 339,
    "text": "local function override (class, name, func)\r\n    checktype('override', 1, name, 'string')\r\n    checktype('override', 2, func, 'function')\r\n    if not class[name] then\r\n        error(\"Cannot override non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end\r\n    class[name] = func\r\nend",
    "type": "function"
  }, {
    "id": 340,
    "text": "checktype('override', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "checktype('override', 2, func, 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "if not class[name] then\r\n        error(\"Cannot override non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 343,
    "text": "error(\"Cannot override non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 345,
    "text": "local function mock (obj, name, func)\r\n    checktype('mock', 1, name, 'string')\r\n    checktype('mock', 2, func, 'function')\r\n    if not obj[name] then\r\n        error(\"Cannot mock non-existent method \"\r\n              .. name .. \" in class \" .. obj._NAME)\r\n    end\r\n    rawset(obj, name, func)\r\nend",
    "type": "function"
  }, {
    "id": 346,
    "text": "checktype('mock', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "checktype('mock', 2, func, 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "if not obj[name] then\r\n        error(\"Cannot mock non-existent method \"\r\n              .. name .. \" in class \" .. obj._NAME)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 349,
    "text": "error(\"Cannot mock non-existent method \"\r\n              .. name .. \" in class \" .. obj._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "rawset(obj, name, func)",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 352,
    "text": "local function unmock (obj, name)\r\n    checktype('unmock', 1, name, 'string')\r\n    if not obj[name] then\r\n        error(\"Cannot unmock non-existent method \"\r\n              .. name .. \" in class \" .. obj._NAME)\r\n    end\r\n    rawset(obj, name, nil)\r\nend",
    "type": "function"
  }, {
    "id": 353,
    "text": "checktype('unmock', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "if not obj[name] then\r\n        error(\"Cannot unmock non-existent method \"\r\n              .. name .. \" in class \" .. obj._NAME)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 355,
    "text": "error(\"Cannot unmock non-existent method \"\r\n              .. name .. \" in class \" .. obj._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "rawset(obj, name, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 358,
    "text": "local function before (class, name, func)\r\n    checktype('before', 1, name, 'string')\r\n    checktype('before', 2, func, 'function')\r\n    local super = class[name]\r\n    if not super then\r\n        error(\"Cannot before non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end\r\n\r\n    class[name] = function (...)\r\n        func(...)\r\n        super(...)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 359,
    "text": "checktype('before', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "checktype('before', 2, func, 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "local super = class[name]",
    "type": "statement:localassign"
  }, {
    "id": 362,
    "text": "if not super then\r\n        error(\"Cannot before non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 363,
    "text": "error(\"Cannot before non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "class[name] = function (...)\r\n        func(...)\r\n        super(...)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 365,
    "text": "func(...)",
    "type": "statement:functioncall"
  }, {
    "id": 366,
    "text": "super(...)",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 368,
    "text": "function (...)\r\n        func(...)\r\n        super(...)\r\n    end",
    "type": "function"
  }, {
    "id": 369,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 370,
    "text": "local function around (class, name, func)\r\n    checktype('around', 1, name, 'string')\r\n    checktype('around', 2, func, 'function')\r\n    local super = class[name]\r\n    if not super then\r\n        error(\"Cannot around non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end\r\n\r\n    class[name] = function (obj, ...)\r\n        return func(obj, super,  ...)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 371,
    "text": "checktype('around', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "checktype('around', 2, func, 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "if not super then\r\n        error(\"Cannot around non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 374,
    "text": "error(\"Cannot around non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "class[name] = function (obj, ...)\r\n        return func(obj, super,  ...)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 376,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 377,
    "text": "function (obj, ...)\r\n        return func(obj, super,  ...)\r\n    end",
    "type": "function"
  }, {
    "id": 378,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 379,
    "text": "local function after (class, name, func)\r\n    checktype('after', 1, name, 'string')\r\n    checktype('after', 2, func, 'function')\r\n    local super = class[name]\r\n    if not super then\r\n        error(\"Cannot after non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end\r\n\r\n    class[name] = function (...)\r\n        super(...)\r\n        func(...)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 380,
    "text": "checktype('after', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "checktype('after', 2, func, 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 382,
    "text": "if not super then\r\n        error(\"Cannot after non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 383,
    "text": "error(\"Cannot after non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 384,
    "text": "class[name] = function (...)\r\n        super(...)\r\n        func(...)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 386,
    "text": "function (...)\r\n        super(...)\r\n        func(...)\r\n    end",
    "type": "function"
  }, {
    "id": 387,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 388,
    "text": "local function memoize (class, name)\r\n    checktype('memoize', 1, name, 'string')\r\n    local func = class[name]\r\n    if not func then\r\n        error(\"Cannot memoize non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end\r\n\r\n    local cache = Meta._CACHE\r\n    class[name] = function (...)\r\n        local arg = {...}\r\n        local key = name\r\n        for i = 1, #arg do\r\n            key = key .. '|' .. tostring(arg[i])\r\n        end\r\n        local result = cache[key]\r\n        if result == nil then\r\n            result = func(...)\r\n            cache[key] =result\r\n        end\r\n        return result\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 389,
    "text": "checktype('memoize', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 390,
    "text": "local func = class[name]",
    "type": "statement:localassign"
  }, {
    "id": 391,
    "text": "if not func then\r\n        error(\"Cannot memoize non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 392,
    "text": "error(\"Cannot memoize non-existent method \"\r\n              .. name .. \" in class \" .. class._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "local cache = Meta._CACHE",
    "type": "statement:localassign"
  }, {
    "id": 394,
    "text": "class[name] = function (...)\r\n        local arg = {...}\r\n        local key = name\r\n        for i = 1, #arg do\r\n            key = key .. '|' .. tostring(arg[i])\r\n        end\r\n        local result = cache[key]\r\n        if result == nil then\r\n            result = func(...)\r\n            cache[key] =result\r\n        end\r\n        return result\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 395,
    "text": "local arg = {...}",
    "type": "statement:localassign"
  }, {
    "id": 396,
    "text": "local key = name",
    "type": "statement:localassign"
  }, {
    "id": 397,
    "text": "for i = 1, #arg do\r\n            key = key .. '|' .. tostring(arg[i])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 398,
    "text": "key = key .. '|' .. tostring(arg[i])",
    "type": "statement:assign"
  }, {
    "id": 399,
    "text": "local result = cache[key]",
    "type": "statement:localassign"
  }, {
    "id": 400,
    "text": "if result == nil then\r\n            result = func(...)\r\n            cache[key] =result\r\n        end",
    "type": "statement:if"
  }, {
    "id": 401,
    "text": "result = func(...)",
    "type": "statement:assign"
  }, {
    "id": 402,
    "text": "cache[key] =result",
    "type": "statement:assign"
  }, {
    "id": 403,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 404,
    "text": "function (...)\r\n        local arg = {...}\r\n        local key = name\r\n        for i = 1, #arg do\r\n            key = key .. '|' .. tostring(arg[i])\r\n        end\r\n        local result = cache[key]\r\n        if result == nil then\r\n            result = func(...)\r\n            cache[key] =result\r\n        end\r\n        return result\r\n    end",
    "type": "function"
  }, {
    "id": 405,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 406,
    "text": "local function bind (class, name, impl)\r\n    checktype('bind', 1, name, 'string')\r\n    local t = basic_type(impl)\r\n    if t ~= 'function' then\r\n        if t == 'string' then\r\n            impl = require(impl)\r\n        end\r\n        if not impl._INIT then\r\n            argerror('bind', 2, \"function or string or Class expected\")\r\n        end\r\n    end\r\n    if class._BINDING[name] then\r\n        error(\"Duplicate binding of \" .. name)\r\n    end\r\n    class._BINDING[name] = impl\r\nend",
    "type": "function"
  }, {
    "id": 407,
    "text": "checktype('bind', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "local t = basic_type(impl)",
    "type": "statement:localassign"
  }, {
    "id": 409,
    "text": "if t ~= 'function' then\r\n        if t == 'string' then\r\n            impl = require(impl)\r\n        end\r\n        if not impl._INIT then\r\n            argerror('bind', 2, \"function or string or Class expected\")\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 410,
    "text": "if t == 'string' then\r\n            impl = require(impl)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 411,
    "text": "impl = require(impl)",
    "type": "statement:assign"
  }, {
    "id": 412,
    "text": "if not impl._INIT then\r\n            argerror('bind', 2, \"function or string or Class expected\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 413,
    "text": "argerror('bind', 2, \"function or string or Class expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 414,
    "text": "if class._BINDING[name] then\r\n        error(\"Duplicate binding of \" .. name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 415,
    "text": "error(\"Duplicate binding of \" .. name)",
    "type": "statement:functioncall"
  }, {
    "id": 416,
    "text": "class._BINDING[name] = impl",
    "type": "statement:assign"
  }, {
    "id": 417,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 418,
    "text": "local function extends(class, ...)\r\n    local arg = {...}\r\n    for i = 1, #arg do\r\n        local v = arg[i]\r\n        local parent\r\n        if basic_type(v) == 'string' then\r\n            parent = require(v)\r\n        elseif v._NAME then\r\n            parent = v\r\n        end\r\n        if not parent or not parent._INIT then\r\n            argerror('extends', i, \"string or Class expected\")\r\n        end\r\n\r\n        if parent:isa(class) then\r\n            error(\"Circular class structure between '\"\r\n                  .. class._NAME ..\"' and '\" .. parent._NAME .. \"'\")\r\n        end\r\n\r\n        local t = class._PARENT; t[#t+1] = parent\r\n        local t = class._ISA; t[#t+1] = parent._ISA\r\n        local t = class._DOES; t[#t+1] = parent._DOES\r\n        local t = class._ROLE\r\n        local roles = parent._ROLE\r\n        for i = 1, #roles do\r\n            t[#t+1] = roles[i]\r\n        end\r\n    end\r\n\r\n    local t = getmetatable(class)\r\n    t.__index = function (t, k)\r\n                    local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end -- search\r\n\r\n                    local v = search(class)\r\n                    t[k] = v      -- save for next access\r\n                    if v == nil then\r\n                        v = _G[k]\r\n                    end\r\n                    return v\r\n                end\r\n    local a = getmetatable(class._ATTR)\r\n    a.__index = function (t, k)\r\n                    local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p._ATTR, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end -- search\r\n\r\n                    local v = search(class)\r\n                    t[k] = v      -- save for next access\r\n                    return v\r\n                end\r\nend",
    "type": "function"
  }, {
    "id": 419,
    "text": "for i = 1, #arg do\r\n        local v = arg[i]\r\n        local parent\r\n        if basic_type(v) == 'string' then\r\n            parent = require(v)\r\n        elseif v._NAME then\r\n            parent = v\r\n        end\r\n        if not parent or not parent._INIT then\r\n            argerror('extends', i, \"string or Class expected\")\r\n        end\r\n\r\n        if parent:isa(class) then\r\n            error(\"Circular class structure between '\"\r\n                  .. class._NAME ..\"' and '\" .. parent._NAME .. \"'\")\r\n        end\r\n\r\n        local t = class._PARENT; t[#t+1] = parent\r\n        local t = class._ISA; t[#t+1] = parent._ISA\r\n        local t = class._DOES; t[#t+1] = parent._DOES\r\n        local t = class._ROLE\r\n        local roles = parent._ROLE\r\n        for i = 1, #roles do\r\n            t[#t+1] = roles[i]\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 420,
    "text": "local v = arg[i]",
    "type": "statement:localassign"
  }, {
    "id": 421,
    "text": "local parent",
    "type": "statement:localassign"
  }, {
    "id": 422,
    "text": "if basic_type(v) == 'string' then\r\n            parent = require(v)\r\n        elseif v._NAME then\r\n            parent = v\r\n        end",
    "type": "statement:if"
  }, {
    "id": 423,
    "text": "parent = require(v)",
    "type": "statement:assign"
  }, {
    "id": 424,
    "text": "parent = v",
    "type": "statement:assign"
  }, {
    "id": 425,
    "text": "if not parent or not parent._INIT then\r\n            argerror('extends', i, \"string or Class expected\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 426,
    "text": "argerror('extends', i, \"string or Class expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 427,
    "text": "if parent:isa(class) then\r\n            error(\"Circular class structure between '\"\r\n                  .. class._NAME ..\"' and '\" .. parent._NAME .. \"'\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 428,
    "text": "error(\"Circular class structure between '\"\r\n                  .. class._NAME ..\"' and '\" .. parent._NAME .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 429,
    "text": "local t = class._PARENT",
    "type": "statement:localassign"
  }, {
    "id": 430,
    "text": "t[#t+1] = parent",
    "type": "statement:assign"
  }, {
    "id": 431,
    "text": "local t = class._ISA",
    "type": "statement:localassign"
  }, {
    "id": 432,
    "text": "t[#t+1] = parent._ISA",
    "type": "statement:assign"
  }, {
    "id": 433,
    "text": "t[#t+1] = parent._DOES",
    "type": "statement:assign"
  }, {
    "id": 434,
    "text": "local t = class._ROLE",
    "type": "statement:localassign"
  }, {
    "id": 435,
    "text": "local roles = parent._ROLE",
    "type": "statement:localassign"
  }, {
    "id": 436,
    "text": "for i = 1, #roles do\r\n            t[#t+1] = roles[i]\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 437,
    "text": "t[#t+1] = roles[i]",
    "type": "statement:assign"
  }, {
    "id": 438,
    "text": "local t = getmetatable(class)",
    "type": "statement:localassign"
  }, {
    "id": 439,
    "text": "t.__index = function (t, k)\r\n                    local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end -- search\r\n\r\n                    local v = search(class)\r\n                    t[k] = v      -- save for next access\r\n                    if v == nil then\r\n                        v = _G[k]\r\n                    end\r\n                    return v\r\n                end",
    "type": "statement:assign"
  }, {
    "id": 440,
    "text": "local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end",
    "type": "statement:localfunction"
  }, {
    "id": 441,
    "text": "local parents = cl._PARENT",
    "type": "statement:localassign"
  }, {
    "id": 442,
    "text": "for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end",
    "type": "statement:numericfor"
  }, {
    "id": 443,
    "text": "local v = rawget(p, k) or search(p)",
    "type": "statement:localassign"
  }, {
    "id": 444,
    "text": "if v then\r\n                                return v\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 445,
    "text": "local v = search(class)",
    "type": "statement:localassign"
  }, {
    "id": 446,
    "text": "if v == nil then\r\n                        v = _G[k]\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 447,
    "text": "v = _G[k]",
    "type": "statement:assign"
  }, {
    "id": 448,
    "text": "local a = getmetatable(class._ATTR)",
    "type": "statement:localassign"
  }, {
    "id": 449,
    "text": "a.__index = function (t, k)\r\n                    local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p._ATTR, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end -- search\r\n\r\n                    local v = search(class)\r\n                    t[k] = v      -- save for next access\r\n                    return v\r\n                end",
    "type": "statement:assign"
  }, {
    "id": 450,
    "text": "local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p._ATTR, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end",
    "type": "statement:localfunction"
  }, {
    "id": 451,
    "text": "for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p._ATTR, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end",
    "type": "statement:numericfor"
  }, {
    "id": 452,
    "text": "local v = rawget(p._ATTR, k) or search(p)",
    "type": "statement:localassign"
  }, {
    "id": 453,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 454,
    "text": "local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end",
    "type": "function"
  }, {
    "id": 455,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 456,
    "text": "function (t, k)\r\n                    local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end -- search\r\n\r\n                    local v = search(class)\r\n                    t[k] = v      -- save for next access\r\n                    if v == nil then\r\n                        v = _G[k]\r\n                    end\r\n                    return v\r\n                end",
    "type": "function"
  }, {
    "id": 457,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 458,
    "text": "local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p._ATTR, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end",
    "type": "function"
  }, {
    "id": 459,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 460,
    "text": "function (t, k)\r\n                    local function search (cl)\r\n                        local parents = cl._PARENT\r\n                        for i = 1, #parents do\r\n                            local p = parents[i]\r\n                            local v = rawget(p._ATTR, k) or search(p)\r\n                            if v then\r\n                                return v\r\n                            end\r\n                        end\r\n                    end -- search\r\n\r\n                    local v = search(class)\r\n                    t[k] = v      -- save for next access\r\n                    return v\r\n                end",
    "type": "function"
  }, {
    "id": 461,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 462,
    "text": "local function with (class, ...)\r\n    local arg = {...}\r\n    local role\r\n    for i = 1, #arg do\r\n        local v = arg[i]\r\n        if role and basic_type(v) == 'table' then\r\n            if v.alias then\r\n                local alias = v.alias\r\n                if basic_type(alias) ~= 'table' then\r\n                    argerror('with-alias', i, \"table expected\")\r\n                end\r\n                for old, new in pairs(alias) do\r\n                    if basic_type(old) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    if basic_type(new) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    class[new] = class[old]\r\n                end\r\n            end\r\n            if v.excludes then\r\n                local excludes = v.excludes\r\n                if basic_type(excludes) == 'string' then\r\n                    excludes = { excludes }\r\n                end\r\n                if basic_type(excludes) ~= 'table' then\r\n                    argerror('with-excludes', i, \"table or string expected\")\r\n                end\r\n                for i = 1, #excludes do\r\n                    local name = excludes[i]\r\n                    if basic_type(name) ~= 'string' then\r\n                        argerror('with-excludes', i, \"string expected\")\r\n                    end\r\n                    class[name] = nil\r\n                end\r\n            end\r\n            role = nil\r\n        else\r\n            if basic_type(v) == 'string' then\r\n                role = require(v)\r\n            elseif v._NAME then\r\n                role = v\r\n            end\r\n            if not role or role._INIT then\r\n                argerror('with', i, \"string or Role expected\")\r\n            end\r\n\r\n            local t = class._DOES; t[#t+1] = role._NAME\r\n            local t = class._ROLE; t[#t+1] = role\r\n            local store = role._STORE\r\n            for i = 1, #store do\r\n                local v = store[i]\r\n                _M[v[1]](class, v[2], v[3])\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 463,
    "text": "for i = 1, #arg do\r\n        local v = arg[i]\r\n        if role and basic_type(v) == 'table' then\r\n            if v.alias then\r\n                local alias = v.alias\r\n                if basic_type(alias) ~= 'table' then\r\n                    argerror('with-alias', i, \"table expected\")\r\n                end\r\n                for old, new in pairs(alias) do\r\n                    if basic_type(old) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    if basic_type(new) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    class[new] = class[old]\r\n                end\r\n            end\r\n            if v.excludes then\r\n                local excludes = v.excludes\r\n                if basic_type(excludes) == 'string' then\r\n                    excludes = { excludes }\r\n                end\r\n                if basic_type(excludes) ~= 'table' then\r\n                    argerror('with-excludes', i, \"table or string expected\")\r\n                end\r\n                for i = 1, #excludes do\r\n                    local name = excludes[i]\r\n                    if basic_type(name) ~= 'string' then\r\n                        argerror('with-excludes', i, \"string expected\")\r\n                    end\r\n                    class[name] = nil\r\n                end\r\n            end\r\n            role = nil\r\n        else\r\n            if basic_type(v) == 'string' then\r\n                role = require(v)\r\n            elseif v._NAME then\r\n                role = v\r\n            end\r\n            if not role or role._INIT then\r\n                argerror('with', i, \"string or Role expected\")\r\n            end\r\n\r\n            local t = class._DOES; t[#t+1] = role._NAME\r\n            local t = class._ROLE; t[#t+1] = role\r\n            local store = role._STORE\r\n            for i = 1, #store do\r\n                local v = store[i]\r\n                _M[v[1]](class, v[2], v[3])\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 464,
    "text": "if role and basic_type(v) == 'table' then\r\n            if v.alias then\r\n                local alias = v.alias\r\n                if basic_type(alias) ~= 'table' then\r\n                    argerror('with-alias', i, \"table expected\")\r\n                end\r\n                for old, new in pairs(alias) do\r\n                    if basic_type(old) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    if basic_type(new) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    class[new] = class[old]\r\n                end\r\n            end\r\n            if v.excludes then\r\n                local excludes = v.excludes\r\n                if basic_type(excludes) == 'string' then\r\n                    excludes = { excludes }\r\n                end\r\n                if basic_type(excludes) ~= 'table' then\r\n                    argerror('with-excludes', i, \"table or string expected\")\r\n                end\r\n                for i = 1, #excludes do\r\n                    local name = excludes[i]\r\n                    if basic_type(name) ~= 'string' then\r\n                        argerror('with-excludes', i, \"string expected\")\r\n                    end\r\n                    class[name] = nil\r\n                end\r\n            end\r\n            role = nil\r\n        else\r\n            if basic_type(v) == 'string' then\r\n                role = require(v)\r\n            elseif v._NAME then\r\n                role = v\r\n            end\r\n            if not role or role._INIT then\r\n                argerror('with', i, \"string or Role expected\")\r\n            end\r\n\r\n            local t = class._DOES; t[#t+1] = role._NAME\r\n            local t = class._ROLE; t[#t+1] = role\r\n            local store = role._STORE\r\n            for i = 1, #store do\r\n                local v = store[i]\r\n                _M[v[1]](class, v[2], v[3])\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 465,
    "text": "if v.alias then\r\n                local alias = v.alias\r\n                if basic_type(alias) ~= 'table' then\r\n                    argerror('with-alias', i, \"table expected\")\r\n                end\r\n                for old, new in pairs(alias) do\r\n                    if basic_type(old) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    if basic_type(new) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    class[new] = class[old]\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 466,
    "text": "local alias = v.alias",
    "type": "statement:localassign"
  }, {
    "id": 467,
    "text": "if basic_type(alias) ~= 'table' then\r\n                    argerror('with-alias', i, \"table expected\")\r\n                end",
    "type": "statement:if"
  }, {
    "id": 468,
    "text": "argerror('with-alias', i, \"table expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 469,
    "text": "for old, new in pairs(alias) do\r\n                    if basic_type(old) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    if basic_type(new) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end\r\n                    class[new] = class[old]\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 470,
    "text": "if basic_type(old) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 471,
    "text": "argerror('with-alias', i, \"string expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 472,
    "text": "if basic_type(new) ~= 'string' then\r\n                        argerror('with-alias', i, \"string expected\")\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 473,
    "text": "class[new] = class[old]",
    "type": "statement:assign"
  }, {
    "id": 474,
    "text": "if v.excludes then\r\n                local excludes = v.excludes\r\n                if basic_type(excludes) == 'string' then\r\n                    excludes = { excludes }\r\n                end\r\n                if basic_type(excludes) ~= 'table' then\r\n                    argerror('with-excludes', i, \"table or string expected\")\r\n                end\r\n                for i = 1, #excludes do\r\n                    local name = excludes[i]\r\n                    if basic_type(name) ~= 'string' then\r\n                        argerror('with-excludes', i, \"string expected\")\r\n                    end\r\n                    class[name] = nil\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 475,
    "text": "local excludes = v.excludes",
    "type": "statement:localassign"
  }, {
    "id": 476,
    "text": "if basic_type(excludes) == 'string' then\r\n                    excludes = { excludes }\r\n                end",
    "type": "statement:if"
  }, {
    "id": 477,
    "text": "excludes = { excludes }",
    "type": "statement:assign"
  }, {
    "id": 478,
    "text": "if basic_type(excludes) ~= 'table' then\r\n                    argerror('with-excludes', i, \"table or string expected\")\r\n                end",
    "type": "statement:if"
  }, {
    "id": 479,
    "text": "argerror('with-excludes', i, \"table or string expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 480,
    "text": "for i = 1, #excludes do\r\n                    local name = excludes[i]\r\n                    if basic_type(name) ~= 'string' then\r\n                        argerror('with-excludes', i, \"string expected\")\r\n                    end\r\n                    class[name] = nil\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 481,
    "text": "local name = excludes[i]",
    "type": "statement:localassign"
  }, {
    "id": 482,
    "text": "if basic_type(name) ~= 'string' then\r\n                        argerror('with-excludes', i, \"string expected\")\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 483,
    "text": "argerror('with-excludes', i, \"string expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 484,
    "text": "class[name] = nil",
    "type": "statement:assign"
  }, {
    "id": 485,
    "text": "role = nil",
    "type": "statement:assign"
  }, {
    "id": 486,
    "text": "if basic_type(v) == 'string' then\r\n                role = require(v)\r\n            elseif v._NAME then\r\n                role = v\r\n            end",
    "type": "statement:if"
  }, {
    "id": 487,
    "text": "role = require(v)",
    "type": "statement:assign"
  }, {
    "id": 488,
    "text": "role = v",
    "type": "statement:assign"
  }, {
    "id": 489,
    "text": "if not role or role._INIT then\r\n                argerror('with', i, \"string or Role expected\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 490,
    "text": "argerror('with', i, \"string or Role expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 491,
    "text": "t[#t+1] = role",
    "type": "statement:assign"
  }, {
    "id": 492,
    "text": "for i = 1, #store do\r\n                local v = store[i]\r\n                _M[v[1]](class, v[2], v[3])\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 493,
    "text": "_M[v[1]](class, v[2], v[3])",
    "type": "statement:functioncall"
  }, {
    "id": 494,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 495,
    "text": "local function module (modname, level)\r\n    if basic_type(loaded[modname]) == 'table' then\r\n        error(\"name conflict for module '\" .. modname .. \"'\")\r\n    end\r\n\r\n    local function findtable (fname)\r\n        local i = 1\r\n        local t = _G\r\n        for w in fname:gmatch \"(%w+)%.\" do\r\n            i = i + w:len() + 1\r\n            t[w] = t[w] or {}\r\n            t = t[w]\r\n        end\r\n        local name = fname:sub(i)\r\n        t[name] = t[name] or {}\r\n        return t[name]\r\n    end  -- findtable\r\n\r\n    local M = findtable(modname)\r\n    loaded[modname] = M\r\n    M._NAME = modname\r\n    M._M = M\r\n    setfenv(level, M)\r\n    return M\r\nend",
    "type": "function"
  }, {
    "id": 496,
    "text": "if basic_type(loaded[modname]) == 'table' then\r\n        error(\"name conflict for module '\" .. modname .. \"'\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 497,
    "text": "error(\"name conflict for module '\" .. modname .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 498,
    "text": "local function findtable (fname)\r\n        local i = 1\r\n        local t = _G\r\n        for w in fname:gmatch \"(%w+)%.\" do\r\n            i = i + w:len() + 1\r\n            t[w] = t[w] or {}\r\n            t = t[w]\r\n        end\r\n        local name = fname:sub(i)\r\n        t[name] = t[name] or {}\r\n        return t[name]\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 499,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 500,
    "text": "local t = _G",
    "type": "statement:localassign"
  }, {
    "id": 501,
    "text": "for w in fname:gmatch \"(%w+)%.\" do\r\n            i = i + w:len() + 1\r\n            t[w] = t[w] or {}\r\n            t = t[w]\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 502,
    "text": "i = i + w:len() + 1",
    "type": "statement:assign"
  }, {
    "id": 503,
    "text": "t[w] = t[w] or {}",
    "type": "statement:assign"
  }, {
    "id": 504,
    "text": "t = t[w]",
    "type": "statement:assign"
  }, {
    "id": 505,
    "text": "local name = fname:sub(i)",
    "type": "statement:localassign"
  }, {
    "id": 506,
    "text": "t[name] = t[name] or {}",
    "type": "statement:assign"
  }, {
    "id": 507,
    "text": "local M = findtable(modname)",
    "type": "statement:localassign"
  }, {
    "id": 508,
    "text": "loaded[modname] = M",
    "type": "statement:assign"
  }, {
    "id": 509,
    "text": "M._NAME = modname",
    "type": "statement:assign"
  }, {
    "id": 510,
    "text": "M._M = M",
    "type": "statement:assign"
  }, {
    "id": 511,
    "text": "setfenv(level, M)",
    "type": "statement:functioncall"
  }, {
    "id": 512,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 513,
    "text": "local function findtable (fname)\r\n        local i = 1\r\n        local t = _G\r\n        for w in fname:gmatch \"(%w+)%.\" do\r\n            i = i + w:len() + 1\r\n            t[w] = t[w] or {}\r\n            t = t[w]\r\n        end\r\n        local name = fname:sub(i)\r\n        t[name] = t[name] or {}\r\n        return t[name]\r\n    end",
    "type": "function"
  }, {
    "id": 514,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 515,
    "text": "local function _class (modname)\r\n    local M = module(modname, 4)\r\n    setmetatable(M, {\r\n        __index = _G,\r\n        __call  = function (t, ...)\r\n                      return t.new(...)\r\n                  end,\r\n    })\r\n    M._ISA = { modname }\r\n    M._PARENT = {}\r\n    M._DOES = {}\r\n    M._ROLE = {}\r\n    M._MT = { __index = M }\r\n    M._ATTR = setmetatable({}, {})\r\n    M._BINDING = {}\r\n    M.type = type\r\n    M.can = can\r\n    M.isa = isa\r\n    M.does = does\r\n    M.dump = dump\r\n    M.mock = mock\r\n    M.unmock = unmock\r\n    M.new = function (...) return new(M, ...) end\r\n    M.__gc = function (...) return __gc(M, ...) end\r\n    M._INIT = function (...) return _INIT(M, ...) end\r\n    M.has = setmetatable({}, { __newindex = function (t, k, v) has(M, k, v) end })\r\n    M.method = setmetatable({}, { __newindex = function (t, k, v) method(M, k, v) end })\r\n    M.overload = setmetatable({}, { __newindex = function (t, k, v) overload(M, k, v) end })\r\n    M.override = setmetatable({}, { __newindex = function (t, k, v) override(M, k, v) end })\r\n    M.before = setmetatable({}, { __newindex = function (t, k, v) before(M, k, v) end })\r\n    M.around = setmetatable({}, { __newindex = function (t, k, v) around(M, k, v) end })\r\n    M.after = setmetatable({}, { __newindex = function (t, k, v) after(M, k, v) end })\r\n    M.bind = setmetatable({}, { __newindex = function (t, k, v) bind(M, k, v) end })\r\n    M.extends = function (...) return extends(M, ...) end\r\n    M.with = function (...) return with(M, ...) end\r\n    M.memoize = function (name) return memoize(M, name) end\r\n    local classes = Meta.classes()\r\n    classes[modname] = M\r\n    return M\r\nend",
    "type": "function"
  }, {
    "id": 516,
    "text": "local M = module(modname, 4)",
    "type": "statement:localassign"
  }, {
    "id": 517,
    "text": "setmetatable(M, {\r\n        __index = _G,\r\n        __call  = function (t, ...)\r\n                      return t.new(...)\r\n                  end,\r\n    })",
    "type": "statement:functioncall"
  }, {
    "id": 518,
    "text": "M._ISA = { modname }",
    "type": "statement:assign"
  }, {
    "id": 519,
    "text": "M._PARENT = {}",
    "type": "statement:assign"
  }, {
    "id": 520,
    "text": "M._DOES = {}",
    "type": "statement:assign"
  }, {
    "id": 521,
    "text": "M._ROLE = {}",
    "type": "statement:assign"
  }, {
    "id": 522,
    "text": "M._MT = { __index = M }",
    "type": "statement:assign"
  }, {
    "id": 523,
    "text": "M._ATTR = setmetatable({}, {})",
    "type": "statement:assign"
  }, {
    "id": 524,
    "text": "M._BINDING = {}",
    "type": "statement:assign"
  }, {
    "id": 525,
    "text": "M.type = type",
    "type": "statement:assign"
  }, {
    "id": 526,
    "text": "M.can = can",
    "type": "statement:assign"
  }, {
    "id": 527,
    "text": "M.isa = isa",
    "type": "statement:assign"
  }, {
    "id": 528,
    "text": "M.does = does",
    "type": "statement:assign"
  }, {
    "id": 529,
    "text": "M.dump = dump",
    "type": "statement:assign"
  }, {
    "id": 530,
    "text": "M.mock = mock",
    "type": "statement:assign"
  }, {
    "id": 531,
    "text": "M.unmock = unmock",
    "type": "statement:assign"
  }, {
    "id": 532,
    "text": "M.new = function (...) return new(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 533,
    "text": "M.__gc = function (...) return __gc(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 534,
    "text": "M._INIT = function (...) return _INIT(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 535,
    "text": "M.has = setmetatable({}, { __newindex = function (t, k, v) has(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 536,
    "text": "has(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 537,
    "text": "M.method = setmetatable({}, { __newindex = function (t, k, v) method(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 538,
    "text": "method(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 539,
    "text": "M.overload = setmetatable({}, { __newindex = function (t, k, v) overload(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 540,
    "text": "overload(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 541,
    "text": "M.override = setmetatable({}, { __newindex = function (t, k, v) override(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 542,
    "text": "override(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 543,
    "text": "M.before = setmetatable({}, { __newindex = function (t, k, v) before(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 544,
    "text": "before(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 545,
    "text": "M.around = setmetatable({}, { __newindex = function (t, k, v) around(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 546,
    "text": "around(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 547,
    "text": "M.after = setmetatable({}, { __newindex = function (t, k, v) after(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 548,
    "text": "after(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 549,
    "text": "M.bind = setmetatable({}, { __newindex = function (t, k, v) bind(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 550,
    "text": "bind(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 551,
    "text": "M.extends = function (...) return extends(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 552,
    "text": "M.with = function (...) return with(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 553,
    "text": "M.memoize = function (name) return memoize(M, name) end",
    "type": "statement:assign"
  }, {
    "id": 554,
    "text": "local classes = Meta.classes()",
    "type": "statement:localassign"
  }, {
    "id": 555,
    "text": "classes[modname] = M",
    "type": "statement:assign"
  }, {
    "id": 556,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 557,
    "text": "function (...) return new(M, ...) end",
    "type": "function"
  }, {
    "id": 558,
    "text": "function (...) return __gc(M, ...) end",
    "type": "function"
  }, {
    "id": 559,
    "text": "function (...) return _INIT(M, ...) end",
    "type": "function"
  }, {
    "id": 560,
    "text": "function (...) return extends(M, ...) end",
    "type": "function"
  }, {
    "id": 561,
    "text": "function (...) return with(M, ...) end",
    "type": "function"
  }, {
    "id": 562,
    "text": "function (name) return memoize(M, name) end",
    "type": "function"
  }, {
    "id": 563,
    "text": "function _G.class (modname)\r\n    checktype('class', 1, modname, 'string')\r\n    _class(modname)\r\nend",
    "type": "function"
  }, {
    "id": 564,
    "text": "checktype('class', 1, modname, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 565,
    "text": "_class(modname)",
    "type": "statement:functioncall"
  }, {
    "id": 566,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 567,
    "text": "function _G.singleton (modname)\r\n    checktype('singleton', 1, modname, 'string')\r\n    local M = _class(modname)\r\n    M.instance = function (...) return instance(M, ...) end\r\n    M.new = M.instance\r\nend",
    "type": "function"
  }, {
    "id": 568,
    "text": "checktype('singleton', 1, modname, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 569,
    "text": "local M = _class(modname)",
    "type": "statement:localassign"
  }, {
    "id": 570,
    "text": "M.instance = function (...) return instance(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 571,
    "text": "M.new = M.instance",
    "type": "statement:assign"
  }, {
    "id": 572,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 573,
    "text": "function (...) return instance(M, ...) end",
    "type": "function"
  }, {
    "id": 574,
    "text": "function _G.abstract (modname)\r\n    checktype('abstract', 1, modname, 'string')\r\n    local M = _class(modname)\r\n    M.new = function () error(\"Cannot instanciate an abstract class \" .. modname) end\r\nend",
    "type": "function"
  }, {
    "id": 575,
    "text": "checktype('abstract', 1, modname, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 576,
    "text": "M.new = function () error(\"Cannot instanciate an abstract class \" .. modname) end",
    "type": "statement:assign"
  }, {
    "id": 577,
    "text": "error(\"Cannot instanciate an abstract class \" .. modname)",
    "type": "statement:functioncall"
  }, {
    "id": 578,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 579,
    "text": "function () error(\"Cannot instanciate an abstract class \" .. modname) end",
    "type": "function"
  }, {
    "id": 580,
    "text": "function _G.augment (class)\r\n    local M\r\n    if basic_type(class) == 'string' then\r\n        M = require(class)\r\n    elseif class._NAME then\r\n        M = class\r\n    end\r\n    if not M or not M._INIT then\r\n        argerror('augment', 1, \"string or Class expected\")\r\n    end\r\n    setfenv(2, M)\r\nend",
    "type": "function"
  }, {
    "id": 581,
    "text": "local M",
    "type": "statement:localassign"
  }, {
    "id": 582,
    "text": "if basic_type(class) == 'string' then\r\n        M = require(class)\r\n    elseif class._NAME then\r\n        M = class\r\n    end",
    "type": "statement:if"
  }, {
    "id": 583,
    "text": "M = require(class)",
    "type": "statement:assign"
  }, {
    "id": 584,
    "text": "M = class",
    "type": "statement:assign"
  }, {
    "id": 585,
    "text": "if not M or not M._INIT then\r\n        argerror('augment', 1, \"string or Class expected\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 586,
    "text": "argerror('augment', 1, \"string or Class expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 587,
    "text": "setfenv(2, M)",
    "type": "statement:functioncall"
  }, {
    "id": 588,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 589,
    "text": "function ()\r\n                t = obj._CLASS or t\r\n              end",
    "type": "function"
  }, {
    "id": 590,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 591,
    "text": "function () return a < b end",
    "type": "function"
  }, {
    "id": 592,
    "text": "function (a, b)\r\n                          local r, cmp = pcall(function () return a < b end)\r\n                          if r == nil then\r\n                              return tostring(a) < tostring(b)\r\n                          else\r\n                              return cmp\r\n                          end\r\n                      end",
    "type": "function"
  }, {
    "id": 593,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 594,
    "text": "function (t, ...)\r\n                      return t.new(...)\r\n                  end",
    "type": "function"
  }, {
    "id": 595,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 596,
    "text": "function (t, k, v) has(M, k, v) end",
    "type": "function"
  }, {
    "id": 597,
    "text": "function (t, k, v) method(M, k, v) end",
    "type": "function"
  }, {
    "id": 598,
    "text": "function (t, k, v) overload(M, k, v) end",
    "type": "function"
  }, {
    "id": 599,
    "text": "function (t, k, v) override(M, k, v) end",
    "type": "function"
  }, {
    "id": 600,
    "text": "function (t, k, v) before(M, k, v) end",
    "type": "function"
  }, {
    "id": 601,
    "text": "function (t, k, v) around(M, k, v) end",
    "type": "function"
  }, {
    "id": 602,
    "text": "function (t, k, v) after(M, k, v) end",
    "type": "function"
  }, {
    "id": 603,
    "text": "function (t, k, v) bind(M, k, v) end",
    "type": "function"
  }, {
    "id": 604,
    "text": "",
    "type": "function container"
  }, {
    "id": 605,
    "text": "string",
    "type": "module"
  }, {
    "id": 606,
    "text": "format",
    "type": "global function"
  }, {
    "id": 607,
    "text": "debug",
    "type": "module"
  }, {
    "id": 608,
    "text": "setupvalue",
    "type": "global function"
  }, {
    "id": 609,
    "text": "table",
    "type": "module"
  }, {
    "id": 610,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 611,
    "text": "class",
    "type": "global function"
  }, {
    "id": 612,
    "text": "classes",
    "type": "global function"
  }, {
    "id": 613,
    "text": "getupvalue",
    "type": "global function"
  }, {
    "id": 614,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 615,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 616,
    "text": "DEMOLISH",
    "type": "global function"
  }, {
    "id": 617,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 618,
    "text": "class[getter]",
    "type": "global function"
  }, {
    "id": 619,
    "text": "trigger",
    "type": "global function"
  }, {
    "id": 620,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 621,
    "text": "func",
    "type": "global function"
  }, {
    "id": 622,
    "text": "BUILD",
    "type": "global function"
  }, {
    "id": 623,
    "text": "basic_type",
    "type": "global function"
  }, {
    "id": 624,
    "text": "new",
    "type": "global function"
  }, {
    "id": 625,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 626,
    "text": "validator",
    "type": "global function"
  }, {
    "id": 627,
    "text": "find_type_constraint",
    "type": "global function"
  }, {
    "id": 628,
    "text": "val",
    "type": "global function"
  }, {
    "id": 629,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 630,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 631,
    "text": "super",
    "type": "global function"
  }, {
    "id": 632,
    "text": "class[setter]",
    "type": "global function"
  }, {
    "id": 633,
    "text": "_INIT",
    "type": "global function"
  }, {
    "id": 634,
    "text": "coerce",
    "type": "global function"
  }, {
    "id": 635,
    "text": "basic_error",
    "type": "global function"
  }, {
    "id": 636,
    "text": "coercion_map",
    "type": "global function"
  }, {
    "id": 637,
    "text": "require",
    "type": "global function"
  }, {
    "id": 638,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 639,
    "text": "_INIT",
    "type": "global function"
  }, {
    "id": 640,
    "text": "impl",
    "type": "global function"
  }, {
    "id": 641,
    "text": "_M[v[1]]",
    "type": "global function"
  }, {
    "id": 642,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 643,
    "text": "default",
    "type": "global function"
  }, {
    "id": 644,
    "text": "",
    "type": "local variable"
  }, {
    "id": 645,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 646,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 647,
    "text": "",
    "type": "variable container"
  }, {
    "id": 648,
    "text": "",
    "type": "require container"
  }, {
    "id": 649,
    "text": "",
    "type": "local variable"
  }, {
    "id": 650,
    "text": "",
    "type": "n/a"
  }, {
    "id": 651,
    "text": "",
    "type": "local variable"
  }, {
    "id": 652,
    "text": "",
    "type": "n/a"
  }, {
    "id": 653,
    "text": "",
    "type": "local variable"
  }, {
    "id": 654,
    "text": "",
    "type": "n/a"
  }, {
    "id": 655,
    "text": "",
    "type": "local variable"
  }, {
    "id": 656,
    "text": "",
    "type": "n/a"
  }, {
    "id": 657,
    "text": "",
    "type": "local variable"
  }, {
    "id": 658,
    "text": "",
    "type": "n/a"
  }, {
    "id": 659,
    "text": "",
    "type": "local variable"
  }, {
    "id": 660,
    "text": "",
    "type": "n/a"
  }, {
    "id": 661,
    "text": "",
    "type": "local variable"
  }, {
    "id": 662,
    "text": "",
    "type": "n/a"
  }, {
    "id": 663,
    "text": "",
    "type": "local variable"
  }, {
    "id": 664,
    "text": "",
    "type": "n/a"
  }, {
    "id": 665,
    "text": "",
    "type": "local variable"
  }, {
    "id": 666,
    "text": "",
    "type": "n/a"
  }, {
    "id": 667,
    "text": "",
    "type": "local variable"
  }, {
    "id": 668,
    "text": "",
    "type": "n/a"
  }, {
    "id": 669,
    "text": "",
    "type": "local variable"
  }, {
    "id": 670,
    "text": "",
    "type": "n/a"
  }, {
    "id": 671,
    "text": "",
    "type": "local variable"
  }, {
    "id": 672,
    "text": "",
    "type": "n/a"
  }, {
    "id": 673,
    "text": "",
    "type": "local variable"
  }, {
    "id": 674,
    "text": "",
    "type": "n/a"
  }, {
    "id": 675,
    "text": "",
    "type": "local variable"
  }, {
    "id": 676,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 677,
    "text": "",
    "type": "global variable"
  }, {
    "id": 678,
    "text": "",
    "type": "global variable"
  }, {
    "id": 679,
    "text": "",
    "type": "n/a"
  }, {
    "id": 680,
    "text": "",
    "type": "global variable"
  }, {
    "id": 681,
    "text": "",
    "type": "n/a"
  }, {
    "id": 682,
    "text": "",
    "type": "global variable"
  }, {
    "id": 683,
    "text": "",
    "type": "n/a"
  }, {
    "id": 684,
    "text": "",
    "type": "global variable"
  }, {
    "id": 685,
    "text": "",
    "type": "n/a"
  }, {
    "id": 686,
    "text": "",
    "type": "global variable"
  }, {
    "id": 687,
    "text": "",
    "type": "n/a"
  }, {
    "id": 688,
    "text": "",
    "type": "global variable"
  }, {
    "id": 689,
    "text": "",
    "type": "n/a"
  }, {
    "id": 690,
    "text": "",
    "type": "global variable"
  }, {
    "id": 691,
    "text": "",
    "type": "n/a"
  }, {
    "id": 692,
    "text": "",
    "type": "global variable"
  }, {
    "id": 693,
    "text": "",
    "type": "n/a"
  }, {
    "id": 694,
    "text": "",
    "type": "global variable"
  }, {
    "id": 695,
    "text": "",
    "type": "n/a"
  }, {
    "id": 696,
    "text": "",
    "type": "global variable"
  }, {
    "id": 697,
    "text": "",
    "type": "n/a"
  }, {
    "id": 698,
    "text": "",
    "type": "global variable"
  }, {
    "id": 699,
    "text": "",
    "type": "n/a"
  }, {
    "id": 700,
    "text": "",
    "type": "global variable"
  }, {
    "id": 701,
    "text": "",
    "type": "n/a"
  }, {
    "id": 702,
    "text": "",
    "type": "global variable"
  }, {
    "id": 703,
    "text": "",
    "type": "n/a"
  }, {
    "id": 704,
    "text": "",
    "type": "global variable"
  }, {
    "id": 705,
    "text": "",
    "type": "n/a"
  }, {
    "id": 706,
    "text": "",
    "type": "global variable"
  }, {
    "id": 707,
    "text": "",
    "type": "n/a"
  }, {
    "id": 708,
    "text": "",
    "type": "global variable"
  }, {
    "id": 709,
    "text": "",
    "type": "n/a"
  }, {
    "id": 710,
    "text": "",
    "type": "global variable"
  }, {
    "id": 711,
    "text": "",
    "type": "n/a"
  }, {
    "id": 712,
    "text": "",
    "type": "global variable"
  }, {
    "id": 713,
    "text": "",
    "type": "n/a"
  }, {
    "id": 714,
    "text": "",
    "type": "global variable"
  }, {
    "id": 715,
    "text": "",
    "type": "n/a"
  }, {
    "id": 716,
    "text": "",
    "type": "global variable"
  }, {
    "id": 717,
    "text": "",
    "type": "n/a"
  }, {
    "id": 718,
    "text": "",
    "type": "global variable"
  }, {
    "id": 719,
    "text": "",
    "type": "n/a"
  }, {
    "id": 720,
    "text": "",
    "type": "global variable"
  }, {
    "id": 721,
    "text": "",
    "type": "n/a"
  }, {
    "id": 722,
    "text": "",
    "type": "global variable"
  }, {
    "id": 723,
    "text": "",
    "type": "n/a"
  }, {
    "id": 724,
    "text": "",
    "type": "global variable"
  }, {
    "id": 725,
    "text": "",
    "type": "n/a"
  }, {
    "id": 726,
    "text": "",
    "type": "global variable"
  }, {
    "id": 727,
    "text": "",
    "type": "n/a"
  }, {
    "id": 728,
    "text": "",
    "type": "global variable"
  }, {
    "id": 729,
    "text": "",
    "type": "n/a"
  }, {
    "id": 730,
    "text": "",
    "type": "global variable"
  }, {
    "id": 731,
    "text": "",
    "type": "n/a"
  }, {
    "id": 732,
    "text": "",
    "type": "global variable"
  }, {
    "id": 733,
    "text": "",
    "type": "global variable"
  }, {
    "id": 734,
    "text": "",
    "type": "global variable"
  }, {
    "id": 735,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 736,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 737,
    "text": "package",
    "type": "module"
  }, {
    "id": 738,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 739,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 740,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 741,
    "text": "",
    "type": "interface container"
  }, {
    "id": 742,
    "text": "",
    "type": "interface"
  }, {
    "id": 743,
    "text": "",
    "type": "global variable"
  } ]
}