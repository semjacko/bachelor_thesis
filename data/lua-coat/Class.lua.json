{
  "_filename": "Class.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-coat/src/Coat/Meta/Class.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 11,
    "label": "has",
    "to": 3
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 13
  }, {
    "from": 18,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 13
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 21,
    "label": "has",
    "to": 3
  }, {
    "from": 21,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 25,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 28
  }, {
    "from": 32,
    "label": "has",
    "to": 3
  }, {
    "from": 32,
    "label": "has",
    "to": 29
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 3
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 35,
    "label": "has",
    "to": 30
  }, {
    "from": 35,
    "label": "has",
    "to": 3
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 29
  }, {
    "from": 37,
    "label": "has",
    "to": 33
  }, {
    "from": 37,
    "label": "has",
    "to": 3
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "calls",
    "to": 47
  }, {
    "from": 18,
    "label": "calls",
    "to": 46
  }, {
    "from": 18,
    "label": "calls",
    "to": 46
  }, {
    "from": 18,
    "label": "calls",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 39,
    "label": "declares",
    "to": 2
  }, {
    "from": 39,
    "label": "declares",
    "to": 5
  }, {
    "from": 39,
    "label": "declares",
    "to": 7
  }, {
    "from": 39,
    "label": "declares",
    "to": 9
  }, {
    "from": 39,
    "label": "declares",
    "to": 11
  }, {
    "from": 39,
    "label": "declares",
    "to": 18
  }, {
    "from": 39,
    "label": "declares",
    "to": 20
  }, {
    "from": 39,
    "label": "declares",
    "to": 25
  }, {
    "from": 39,
    "label": "declares",
    "to": 27
  }, {
    "from": 39,
    "label": "declares",
    "to": 32
  }, {
    "from": 39,
    "label": "declares",
    "to": 35
  }, {
    "from": 39,
    "label": "declares",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 49,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 49,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 49,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 49,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 49,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 49,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 62,
    "label": "assigns",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 62,
    "label": "assigns",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 62,
    "label": "assigns",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 62,
    "label": "assigns",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 62,
    "label": "assigns",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 62,
    "label": "assigns",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 62,
    "label": "assigns",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 62,
    "label": "assigns",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 62,
    "label": "assigns",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 62,
    "label": "assigns",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 62,
    "label": "assigns",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 62,
    "label": "assigns",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 62,
    "label": "assigns",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 62,
    "label": "assigns",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 49,
    "label": "initializes",
    "to": 93
  }, {
    "from": 49,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 1,
    "label": "provides",
    "to": 96
  }, {
    "from": 48,
    "label": "represents",
    "to": 97
  }, {
    "from": 96,
    "label": "provides",
    "to": 97
  }, {
    "from": 102,
    "label": "requires",
    "to": 1
  }, {
    "from": 104,
    "label": "requires",
    "to": 1
  }, {
    "from": 48,
    "label": "contains",
    "to": 2
  }, {
    "from": 57,
    "label": "contains",
    "to": 2
  }, {
    "from": 98,
    "label": "contains",
    "to": 2
  }, {
    "from": 99,
    "label": "contains",
    "to": 2
  }, {
    "from": 100,
    "label": "contains",
    "to": 2
  }, {
    "from": 101,
    "label": "contains",
    "to": 2
  }, {
    "from": 103,
    "label": "contains",
    "to": 2
  }, {
    "from": 48,
    "label": "contains",
    "to": 5
  }, {
    "from": 57,
    "label": "contains",
    "to": 5
  }, {
    "from": 98,
    "label": "contains",
    "to": 5
  }, {
    "from": 99,
    "label": "contains",
    "to": 5
  }, {
    "from": 100,
    "label": "contains",
    "to": 5
  }, {
    "from": 101,
    "label": "contains",
    "to": 5
  }, {
    "from": 103,
    "label": "contains",
    "to": 5
  }, {
    "from": 48,
    "label": "contains",
    "to": 7
  }, {
    "from": 57,
    "label": "contains",
    "to": 7
  }, {
    "from": 98,
    "label": "contains",
    "to": 7
  }, {
    "from": 99,
    "label": "contains",
    "to": 7
  }, {
    "from": 100,
    "label": "contains",
    "to": 7
  }, {
    "from": 101,
    "label": "contains",
    "to": 7
  }, {
    "from": 103,
    "label": "contains",
    "to": 7
  }, {
    "from": 48,
    "label": "contains",
    "to": 9
  }, {
    "from": 57,
    "label": "contains",
    "to": 9
  }, {
    "from": 98,
    "label": "contains",
    "to": 9
  }, {
    "from": 99,
    "label": "contains",
    "to": 9
  }, {
    "from": 100,
    "label": "contains",
    "to": 9
  }, {
    "from": 101,
    "label": "contains",
    "to": 9
  }, {
    "from": 103,
    "label": "contains",
    "to": 9
  }, {
    "from": 48,
    "label": "contains",
    "to": 11
  }, {
    "from": 57,
    "label": "contains",
    "to": 11
  }, {
    "from": 98,
    "label": "contains",
    "to": 11
  }, {
    "from": 99,
    "label": "contains",
    "to": 11
  }, {
    "from": 100,
    "label": "contains",
    "to": 11
  }, {
    "from": 101,
    "label": "contains",
    "to": 11
  }, {
    "from": 103,
    "label": "contains",
    "to": 11
  }, {
    "from": 48,
    "label": "contains",
    "to": 20
  }, {
    "from": 57,
    "label": "contains",
    "to": 20
  }, {
    "from": 98,
    "label": "contains",
    "to": 20
  }, {
    "from": 99,
    "label": "contains",
    "to": 20
  }, {
    "from": 100,
    "label": "contains",
    "to": 20
  }, {
    "from": 101,
    "label": "contains",
    "to": 20
  }, {
    "from": 103,
    "label": "contains",
    "to": 20
  }, {
    "from": 48,
    "label": "contains",
    "to": 27
  }, {
    "from": 57,
    "label": "contains",
    "to": 27
  }, {
    "from": 98,
    "label": "contains",
    "to": 27
  }, {
    "from": 99,
    "label": "contains",
    "to": 27
  }, {
    "from": 100,
    "label": "contains",
    "to": 27
  }, {
    "from": 101,
    "label": "contains",
    "to": 27
  }, {
    "from": 103,
    "label": "contains",
    "to": 27
  }, {
    "from": 48,
    "label": "contains",
    "to": 32
  }, {
    "from": 57,
    "label": "contains",
    "to": 32
  }, {
    "from": 98,
    "label": "contains",
    "to": 32
  }, {
    "from": 99,
    "label": "contains",
    "to": 32
  }, {
    "from": 100,
    "label": "contains",
    "to": 32
  }, {
    "from": 101,
    "label": "contains",
    "to": 32
  }, {
    "from": 103,
    "label": "contains",
    "to": 32
  }, {
    "from": 57,
    "label": "contains",
    "to": 40
  }, {
    "from": 57,
    "label": "contains",
    "to": 41
  }, {
    "from": 57,
    "label": "contains",
    "to": 42
  }, {
    "from": 57,
    "label": "contains",
    "to": 43
  }, {
    "from": 57,
    "label": "contains",
    "to": 44
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Class",
    "type": "module"
  }, {
    "id": 2,
    "text": "function _M.classes ()\r\n    return _classes\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function _M.class (name)\r\n    return _classes[name]\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function _M.has (class, name)\r\n    return class._ATTR[name]\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function _M.attributes (class)\r\n    return next, class._ATTR, nil\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function _M.methods (class)\r\n    local function getnext (t, k)\r\n        local v\r\n        repeat\r\n            k, v = next(t, k)\r\n            if not k then return nil end\r\n        until not reserved[k]\r\n          and basic_type(v) == 'function'\r\n          and not k:match '^_get_' and not k:match '^_set_'\r\n          and not k:match '^_build_'\r\n        return k, v\r\n    end\r\n    return getnext, class, nil\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local function getnext (t, k)\r\n        local v\r\n        repeat\r\n            k, v = next(t, k)\r\n            if not k then return nil end\r\n        until not reserved[k]\r\n          and basic_type(v) == 'function'\r\n          and not k:match '^_get_' and not k:match '^_set_'\r\n          and not k:match '^_build_'\r\n        return k, v\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 13,
    "text": "local v",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "repeat\r\n            k, v = next(t, k)\r\n            if not k then return nil end\r\n        until not reserved[k]\r\n          and basic_type(v) == 'function'\r\n          and not k:match '^_get_' and not k:match '^_set_'\r\n          and not k:match '^_build_'",
    "type": "statement:repeat"
  }, {
    "id": 15,
    "text": "k, v = next(t, k)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if not k then return nil end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function getnext (t, k)\r\n        local v\r\n        repeat\r\n            k, v = next(t, k)\r\n            if not k then return nil end\r\n        until not reserved[k]\r\n          and basic_type(v) == 'function'\r\n          and not k:match '^_get_' and not k:match '^_set_'\r\n          and not k:match '^_build_'\r\n        return k, v\r\n    end",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function _M.metamethods (class)\r\n    local function getnext (mt, k)\r\n        local v\r\n        repeat\r\n            k, v = next(mt, k)\r\n            if not k then return nil end\r\n        until k ~= '__index'\r\n        return k, v\r\n    end\r\n    return getnext, class._MT, nil\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local function getnext (mt, k)\r\n        local v\r\n        repeat\r\n            k, v = next(mt, k)\r\n            if not k then return nil end\r\n        until k ~= '__index'\r\n        return k, v\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 22,
    "text": "repeat\r\n            k, v = next(mt, k)\r\n            if not k then return nil end\r\n        until k ~= '__index'",
    "type": "statement:repeat"
  }, {
    "id": 23,
    "text": "k, v = next(mt, k)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function getnext (mt, k)\r\n        local v\r\n        repeat\r\n            k, v = next(mt, k)\r\n            if not k then return nil end\r\n        until k ~= '__index'\r\n        return k, v\r\n    end",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function _M.parents (class)\r\n    local i = 0\r\n    return  function ()\r\n                i = i + 1\r\n                local parent = class._PARENT[i]\r\n                return parent and parent._NAME, parent\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local parent = class._PARENT[i]",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function _M.roles (class)\r\n    local i = 0\r\n    return  function ()\r\n                i = i + 1\r\n                local role = class._ROLE[i]\r\n                return role and role._NAME, role\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local role = class._ROLE[i]",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function ()\r\n                i = i + 1\r\n                local parent = class._PARENT[i]\r\n                return parent and parent._NAME, parent\r\n            end",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function ()\r\n                i = i + 1\r\n                local role = class._ROLE[i]\r\n                return role and role._NAME, role\r\n            end",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "",
    "type": "function container"
  }, {
    "id": 40,
    "text": "function _M.roles ()\r\n    return _roles\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function _M.role (name)\r\n    return _roles[name]\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "function _M.attributes (role)\r\n    local i = 0\r\n    return  function ()\r\n                local v\r\n                repeat\r\n                    i = i + 1\r\n                    v = role._STORE[i]\r\n                    if not v then return nil end\r\n                until v[1] == 'has'\r\n                return v[2], v[3]\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "function _M.methods (role)\r\n    local i = 0\r\n    return  function ()\r\n                local v\r\n                repeat\r\n                    i = i + 1\r\n                    v = role._STORE[i]\r\n                    if not v then return nil end\r\n                    local name = v[2]\r\n                until v[1] == 'method' and not name:match '^_build_'\r\n                  and not name:match '^_get_' and not name:match '^_set_'\r\n                return v[2], v[3]\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "function _M.to_dot (opt)\r\n    opt = opt or {}\r\n    local with_attr = not opt.no_attr\r\n    local with_meth = not opt.no_meth\r\n    local with_meta = not opt.no_meta\r\n    local note = opt.note\r\n    local out = 'digraph {\\n\\n    node [shape=record];\\n\\n'\r\n    if note then\r\n        out = out .. '    \"__note__\"\\n'\r\n        out = out .. '        [label=\"' .. note .. '\" shape=note];\\n\\n'\r\n    end\r\n    for classname, class in pairs(mc.classes()) do\r\n        out = out .. '    \"' .. classname .. '\"\\n'\r\n        out = out .. '        [label=\"{'\r\n        if class.instance then\r\n            out = out .. '&laquo;singleton&raquo;\\\\n'\r\n        end\r\n        out = out .. '\\\\N'\r\n        if with_attr then\r\n            local first = true\r\n            for name, attr in sort(mc.attributes(class)) do\r\n                if first then\r\n                    out = out .. '|'\r\n                    first = false\r\n                end\r\n                out = out .. name\r\n                if attr.isa then\r\n                    out = out .. ' : ' .. escape(attr.isa)\r\n                elseif attr.does then\r\n                    out = out .. ' : ' .. attr.does\r\n                end\r\n                out = out .. '\\\\l'\r\n            end\r\n        end\r\n        if with_meth then\r\n            local first = true\r\n            if with_meta then\r\n                for name in sort(mc.metamethods(class)) do\r\n                    if first then\r\n                        out = out .. '|'\r\n                        first = false\r\n                    end\r\n                    out = out .. name .. '()\\\\l'\r\n                end\r\n            end\r\n            for name in sort(mc.methods(class)) do\r\n                if first then\r\n                    out = out .. '|'\r\n                    first = false\r\n                end\r\n                out = out .. name .. '()\\\\l'\r\n            end\r\n        end\r\n        out = out .. '}\"];\\n'\r\n        for name, attr in mc.attributes(class) do\r\n            if attr.isa then\r\n                local isa, agreg = find_type(attr.isa)\r\n                if isa then\r\n                    out = out .. '    \"' .. classname .. '\" -> \"' .. isa .. '\" // attr isa ' .. attr.isa .. '\\n'\r\n                    if agreg then\r\n                        out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = odiamond];\\n'\r\n                    else\r\n                        out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = diamond];\\n'\r\n                    end\r\n                end\r\n            end\r\n            if attr.does and mr.role(attr.does) then\r\n                out = out .. '    \"' .. classname .. '\" -> \"' .. attr.does .. '\" // attr does\\n'\r\n                out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = diamond];\\n'\r\n            end\r\n        end\r\n        for parent in mc.parents(class) do\r\n            out = out .. '    \"' .. classname .. '\" -> \"' .. parent .. '\" // extends\\n'\r\n            out = out .. '        [arrowhead = onormal, arrowtail = none, arrowsize = 2.0];\\n'\r\n        end\r\n        for role in mc.roles(class) do\r\n            out = out .. '    \"' .. classname .. '\" -> \"' .. role .. '\" // with\\n'\r\n            out = out .. '        [arrowhead = odot, arrowtail = none];\\n'\r\n        end\r\n        out = out .. '\\n'\r\n    end\r\n    for rolename, role in pairs(mr.roles()) do\r\n        out = out .. '    \"' .. rolename .. '\"\\n'\r\n        out = out .. '        [label=\"{&laquo;role&raquo;\\\\n\\\\N'\r\n        if with_attr then\r\n            local first = true\r\n            for name, attr in sort(mr.attributes(role)) do\r\n                if first then\r\n                    out = out .. '|'\r\n                    first = false\r\n                end\r\n                out = out .. name\r\n                if attr.isa then\r\n                    out = out .. ' : ' .. escape(attr.isa)\r\n                elseif attr.does then\r\n                    out = out .. ' : ' .. attr.does\r\n                end\r\n                out = out .. '\\\\l'\r\n            end\r\n        end\r\n        if with_meth then\r\n            local first = true\r\n            for name in sort(mr.methods(role)) do\r\n                if first then\r\n                    out = out .. '|'\r\n                    first = false\r\n                end\r\n                out = out .. name .. '()\\\\l'\r\n            end\r\n        end\r\n        out = out .. '}\"];\\n\\n'\r\n        for name, attr in mr.attributes(role) do\r\n            if attr.isa then\r\n                local isa, agreg = find_type(attr.isa)\r\n                if isa then\r\n                    out = out .. '    \"' .. rolename .. '\" -> \"' .. isa .. '\" // attr isa ' .. attr.isa .. '\\n'\r\n                    if agreg then\r\n                        out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = odiamond];\\n'\r\n                    else\r\n                        out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = diamond];\\n'\r\n                    end\r\n                end\r\n            end\r\n            if attr.does and mr.role(attr.does) then\r\n                out = out .. '    \"' .. rolename .. '\" -> \"' .. attr.does .. '\" // attr does\\n'\r\n                out = out .. '        [label = \"' .. name .. '\", dir = back, arrowtail = diamond];\\n'\r\n            end\r\n        end\r\n    end\r\n    out = out .. '}'\r\n    return out\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "basic_type",
    "type": "global function"
  }, {
    "id": 46,
    "text": "next",
    "type": "global function"
  }, {
    "id": 47,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 48,
    "text": "",
    "type": "local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "variable container"
  }, {
    "id": 50,
    "text": "",
    "type": "require container"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "n/a"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 63,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 64,
    "text": "",
    "type": "boolean"
  }, {
    "id": 65,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 66,
    "text": "",
    "type": "boolean"
  }, {
    "id": 67,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 68,
    "text": "",
    "type": "boolean"
  }, {
    "id": 69,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 70,
    "text": "",
    "type": "boolean"
  }, {
    "id": 71,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 72,
    "text": "",
    "type": "boolean"
  }, {
    "id": 73,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 74,
    "text": "",
    "type": "boolean"
  }, {
    "id": 75,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 76,
    "text": "",
    "type": "boolean"
  }, {
    "id": 77,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 78,
    "text": "",
    "type": "boolean"
  }, {
    "id": 79,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 80,
    "text": "",
    "type": "boolean"
  }, {
    "id": 81,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 82,
    "text": "",
    "type": "boolean"
  }, {
    "id": 83,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 84,
    "text": "",
    "type": "boolean"
  }, {
    "id": 85,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 86,
    "text": "",
    "type": "boolean"
  }, {
    "id": 87,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 88,
    "text": "",
    "type": "boolean"
  }, {
    "id": 89,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 90,
    "text": "",
    "type": "boolean"
  }, {
    "id": 91,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 92,
    "text": "",
    "type": "boolean"
  }, {
    "id": 93,
    "text": "",
    "type": "global variable"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "interface container"
  }, {
    "id": 97,
    "text": "",
    "type": "interface"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "require local variable"
  } ]
}