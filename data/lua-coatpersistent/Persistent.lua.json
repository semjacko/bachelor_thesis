{
  "_filename": "Persistent.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-coatpersistent/src/Coat/Persistent.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 20
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 20
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 36,
    "label": "has",
    "to": 20
  }, {
    "from": 36,
    "label": "has",
    "to": 20
  }, {
    "from": 36,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 20
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 56,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 56,
    "label": "has",
    "to": 70
  }, {
    "from": 56,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 56,
    "label": "has",
    "to": 20
  }, {
    "from": 56,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 57
  }, {
    "from": 76,
    "label": "has",
    "to": 64
  }, {
    "from": 76,
    "label": "has",
    "to": 20
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 50
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 20
  }, {
    "from": 78,
    "label": "has",
    "to": 20
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 20
  }, {
    "from": 85,
    "label": "has",
    "to": 40
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 69
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 20
  }, {
    "from": 85,
    "label": "has",
    "to": 20
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 20
  }, {
    "from": 91,
    "label": "has",
    "to": 20
  }, {
    "from": 91,
    "label": "has",
    "to": 20
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 20
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 96,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 105
  }, {
    "from": 96,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 107,
    "label": "has",
    "to": 102
  }, {
    "from": 107,
    "label": "has",
    "to": 20
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 109,
    "label": "has",
    "to": 117
  }, {
    "from": 109,
    "label": "has",
    "to": 118
  }, {
    "from": 109,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 109,
    "label": "has",
    "to": 121
  }, {
    "from": 109,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 109,
    "label": "has",
    "to": 124
  }, {
    "from": 109,
    "label": "has",
    "to": 125
  }, {
    "from": 109,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 20
  }, {
    "from": 109,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 20
  }, {
    "from": 109,
    "label": "has",
    "to": 131
  }, {
    "from": 109,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 127
  }, {
    "from": 133,
    "label": "has",
    "to": 20
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 129
  }, {
    "from": 135,
    "label": "has",
    "to": 130
  }, {
    "from": 135,
    "label": "has",
    "to": 20
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 110
  }, {
    "from": 137,
    "label": "has",
    "to": 111
  }, {
    "from": 137,
    "label": "has",
    "to": 112
  }, {
    "from": 137,
    "label": "has",
    "to": 113
  }, {
    "from": 137,
    "label": "has",
    "to": 114
  }, {
    "from": 137,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 57
  }, {
    "from": 137,
    "label": "has",
    "to": 117
  }, {
    "from": 137,
    "label": "has",
    "to": 118
  }, {
    "from": 137,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 140,
    "label": "has",
    "to": 70
  }, {
    "from": 140,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 140,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 137,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 50
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 52
  }, {
    "from": 153,
    "label": "has",
    "to": 20
  }, {
    "from": 137,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 157,
    "label": "has",
    "to": 143
  }, {
    "from": 157,
    "label": "has",
    "to": 70
  }, {
    "from": 157,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 157,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 50
  }, {
    "from": 159,
    "label": "has",
    "to": 154
  }, {
    "from": 159,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 52
  }, {
    "from": 159,
    "label": "has",
    "to": 20
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 111
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 167
  }, {
    "from": 161,
    "label": "has",
    "to": 168
  }, {
    "from": 161,
    "label": "has",
    "to": 169
  }, {
    "from": 161,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 20
  }, {
    "from": 161,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 20
  }, {
    "from": 161,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 20
  }, {
    "from": 161,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 20
  }, {
    "from": 161,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 20
  }, {
    "from": 161,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 20
  }, {
    "from": 161,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 20
  }, {
    "from": 161,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 161,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 161,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 161,
    "label": "has",
    "to": 183
  }, {
    "from": 161,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 20
  }, {
    "from": 186,
    "label": "has",
    "to": 20
  }, {
    "from": 187,
    "label": "has",
    "to": 20
  }, {
    "from": 188,
    "label": "has",
    "to": 20
  }, {
    "from": 189,
    "label": "has",
    "to": 20
  }, {
    "from": 190,
    "label": "has",
    "to": 20
  }, {
    "from": 191,
    "label": "has",
    "to": 20
  }, {
    "from": 192,
    "label": "has",
    "to": 40
  }, {
    "from": 192,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 69
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 192,
    "label": "has",
    "to": 20
  }, {
    "from": 192,
    "label": "has",
    "to": 20
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 178
  }, {
    "from": 195,
    "label": "has",
    "to": 180
  }, {
    "from": 196,
    "label": "has",
    "to": 182
  }, {
    "from": 91,
    "label": "calls",
    "to": 209
  }, {
    "from": 161,
    "label": "calls",
    "to": 56
  }, {
    "from": 96,
    "label": "calls",
    "to": 211
  }, {
    "from": 161,
    "label": "calls",
    "to": 211
  }, {
    "from": 161,
    "label": "calls",
    "to": 76
  }, {
    "from": 36,
    "label": "calls",
    "to": 200
  }, {
    "from": 91,
    "label": "calls",
    "to": 200
  }, {
    "from": 91,
    "label": "calls",
    "to": 200
  }, {
    "from": 91,
    "label": "calls",
    "to": 200
  }, {
    "from": 96,
    "label": "calls",
    "to": 200
  }, {
    "from": 56,
    "label": "calls",
    "to": 214
  }, {
    "from": 56,
    "label": "calls",
    "to": 214
  }, {
    "from": 137,
    "label": "calls",
    "to": 214
  }, {
    "from": 36,
    "label": "calls",
    "to": 203
  }, {
    "from": 56,
    "label": "calls",
    "to": 203
  }, {
    "from": 78,
    "label": "calls",
    "to": 204
  }, {
    "from": 85,
    "label": "calls",
    "to": 204
  }, {
    "from": 49,
    "label": "calls",
    "to": 206
  }, {
    "from": 49,
    "label": "calls",
    "to": 206
  }, {
    "from": 49,
    "label": "calls",
    "to": 206
  }, {
    "from": 56,
    "label": "calls",
    "to": 206
  }, {
    "from": 161,
    "label": "calls",
    "to": 24
  }, {
    "from": 76,
    "label": "calls",
    "to": 198
  }, {
    "from": 26,
    "label": "calls",
    "to": 215
  }, {
    "from": 109,
    "label": "calls",
    "to": 91
  }, {
    "from": 161,
    "label": "calls",
    "to": 91
  }, {
    "from": 161,
    "label": "calls",
    "to": 207
  }, {
    "from": 56,
    "label": "calls",
    "to": 208
  }, {
    "from": 56,
    "label": "calls",
    "to": 208
  }, {
    "from": 85,
    "label": "calls",
    "to": 208
  }, {
    "from": 137,
    "label": "calls",
    "to": 208
  }, {
    "from": 36,
    "label": "calls",
    "to": 199
  }, {
    "from": 36,
    "label": "calls",
    "to": 199
  }, {
    "from": 56,
    "label": "calls",
    "to": 199
  }, {
    "from": 76,
    "label": "calls",
    "to": 199
  }, {
    "from": 91,
    "label": "calls",
    "to": 199
  }, {
    "from": 96,
    "label": "calls",
    "to": 199
  }, {
    "from": 2,
    "label": "calls",
    "to": 212
  }, {
    "from": 2,
    "label": "calls",
    "to": 212
  }, {
    "from": 2,
    "label": "calls",
    "to": 212
  }, {
    "from": 26,
    "label": "calls",
    "to": 212
  }, {
    "from": 26,
    "label": "calls",
    "to": 212
  }, {
    "from": 96,
    "label": "calls",
    "to": 212
  }, {
    "from": 109,
    "label": "calls",
    "to": 212
  }, {
    "from": 109,
    "label": "calls",
    "to": 212
  }, {
    "from": 137,
    "label": "calls",
    "to": 212
  }, {
    "from": 137,
    "label": "calls",
    "to": 212
  }, {
    "from": 137,
    "label": "calls",
    "to": 212
  }, {
    "from": 137,
    "label": "calls",
    "to": 212
  }, {
    "from": 109,
    "label": "calls",
    "to": 201
  }, {
    "from": 137,
    "label": "calls",
    "to": 201
  }, {
    "from": 56,
    "label": "calls",
    "to": 36
  }, {
    "from": 109,
    "label": "calls",
    "to": 96
  }, {
    "from": 161,
    "label": "calls",
    "to": 96
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 161,
    "label": "calls",
    "to": 137
  }, {
    "from": 36,
    "label": "calls",
    "to": 26
  }, {
    "from": 36,
    "label": "calls",
    "to": 26
  }, {
    "from": 36,
    "label": "calls",
    "to": 26
  }, {
    "from": 56,
    "label": "calls",
    "to": 26
  }, {
    "from": 56,
    "label": "calls",
    "to": 26
  }, {
    "from": 76,
    "label": "calls",
    "to": 26
  }, {
    "from": 85,
    "label": "calls",
    "to": 26
  }, {
    "from": 56,
    "label": "calls",
    "to": 210
  }, {
    "from": 36,
    "label": "calls",
    "to": 202
  }, {
    "from": 56,
    "label": "calls",
    "to": 202
  }, {
    "from": 197,
    "label": "calls",
    "to": 217
  }, {
    "from": 197,
    "label": "calls",
    "to": 217
  }, {
    "from": 197,
    "label": "calls",
    "to": 217
  }, {
    "from": 2,
    "label": "calls",
    "to": 217
  }, {
    "from": 78,
    "label": "calls",
    "to": 216
  }, {
    "from": 91,
    "label": "calls",
    "to": 216
  }, {
    "from": 91,
    "label": "calls",
    "to": 216
  }, {
    "from": 137,
    "label": "calls",
    "to": 216
  }, {
    "from": 137,
    "label": "calls",
    "to": 216
  }, {
    "from": 78,
    "label": "calls",
    "to": 78
  }, {
    "from": 161,
    "label": "calls",
    "to": 78
  }, {
    "from": 2,
    "label": "calls",
    "to": 219
  }, {
    "from": 161,
    "label": "calls",
    "to": 213
  }, {
    "from": 161,
    "label": "calls",
    "to": 213
  }, {
    "from": 161,
    "label": "calls",
    "to": 213
  }, {
    "from": 96,
    "label": "calls",
    "to": 218
  }, {
    "from": 96,
    "label": "calls",
    "to": 218
  }, {
    "from": 109,
    "label": "calls",
    "to": 218
  }, {
    "from": 109,
    "label": "calls",
    "to": 218
  }, {
    "from": 137,
    "label": "calls",
    "to": 218
  }, {
    "from": 137,
    "label": "calls",
    "to": 218
  }, {
    "from": 161,
    "label": "calls",
    "to": 218
  }, {
    "from": 161,
    "label": "calls",
    "to": 218
  }, {
    "from": 137,
    "label": "calls",
    "to": 205
  }, {
    "from": 56,
    "label": "calls",
    "to": 49
  }, {
    "from": 161,
    "label": "calls",
    "to": 2
  }, {
    "from": 91,
    "label": "calls",
    "to": 85
  }, {
    "from": 91,
    "label": "calls",
    "to": 85
  }, {
    "from": 91,
    "label": "calls",
    "to": 85
  }, {
    "from": 96,
    "label": "calls",
    "to": 85
  }, {
    "from": 161,
    "label": "calls",
    "to": 85
  }, {
    "from": 161,
    "label": "calls",
    "to": 109
  }, {
    "from": 1,
    "label": "contains",
    "to": 197
  }, {
    "from": 197,
    "label": "declares",
    "to": 2
  }, {
    "from": 197,
    "label": "declares",
    "to": 22
  }, {
    "from": 197,
    "label": "declares",
    "to": 24
  }, {
    "from": 197,
    "label": "declares",
    "to": 26
  }, {
    "from": 197,
    "label": "declares",
    "to": 36
  }, {
    "from": 197,
    "label": "declares",
    "to": 49
  }, {
    "from": 197,
    "label": "declares",
    "to": 56
  }, {
    "from": 197,
    "label": "declares",
    "to": 76
  }, {
    "from": 197,
    "label": "declares",
    "to": 78
  }, {
    "from": 197,
    "label": "declares",
    "to": 85
  }, {
    "from": 197,
    "label": "declares",
    "to": 91
  }, {
    "from": 197,
    "label": "declares",
    "to": 96
  }, {
    "from": 197,
    "label": "declares",
    "to": 107
  }, {
    "from": 197,
    "label": "declares",
    "to": 109
  }, {
    "from": 197,
    "label": "declares",
    "to": 133
  }, {
    "from": 197,
    "label": "declares",
    "to": 135
  }, {
    "from": 197,
    "label": "declares",
    "to": 137
  }, {
    "from": 197,
    "label": "declares",
    "to": 157
  }, {
    "from": 197,
    "label": "declares",
    "to": 159
  }, {
    "from": 197,
    "label": "declares",
    "to": 161
  }, {
    "from": 197,
    "label": "declares",
    "to": 185
  }, {
    "from": 197,
    "label": "declares",
    "to": 186
  }, {
    "from": 197,
    "label": "declares",
    "to": 187
  }, {
    "from": 197,
    "label": "declares",
    "to": 188
  }, {
    "from": 197,
    "label": "declares",
    "to": 189
  }, {
    "from": 197,
    "label": "declares",
    "to": 190
  }, {
    "from": 197,
    "label": "declares",
    "to": 191
  }, {
    "from": 197,
    "label": "declares",
    "to": 192
  }, {
    "from": 197,
    "label": "declares",
    "to": 194
  }, {
    "from": 197,
    "label": "declares",
    "to": 195
  }, {
    "from": 197,
    "label": "declares",
    "to": 196
  }, {
    "from": 1,
    "label": "contains",
    "to": 220
  }, {
    "from": 1,
    "label": "contains",
    "to": 221
  }, {
    "from": 220,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 220,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 220,
    "label": "initializes",
    "to": 226
  }, {
    "from": 226,
    "label": "assigns",
    "to": 227
  }, {
    "from": 220,
    "label": "initializes",
    "to": 228
  }, {
    "from": 228,
    "label": "assigns",
    "to": 229
  }, {
    "from": 220,
    "label": "initializes",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 220,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "assigns",
    "to": 233
  }, {
    "from": 220,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 220,
    "label": "initializes",
    "to": 236
  }, {
    "from": 236,
    "label": "assigns",
    "to": 237
  }, {
    "from": 220,
    "label": "initializes",
    "to": 238
  }, {
    "from": 238,
    "label": "assigns",
    "to": 239
  }, {
    "from": 220,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "assigns",
    "to": 241
  }, {
    "from": 220,
    "label": "initializes",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 220,
    "label": "initializes",
    "to": 244
  }, {
    "from": 244,
    "label": "assigns",
    "to": 245
  }, {
    "from": 220,
    "label": "initializes",
    "to": 246
  }, {
    "from": 246,
    "label": "assigns",
    "to": 247
  }, {
    "from": 220,
    "label": "initializes",
    "to": 248
  }, {
    "from": 248,
    "label": "assigns",
    "to": 249
  }, {
    "from": 220,
    "label": "initializes",
    "to": 250
  }, {
    "from": 250,
    "label": "assigns",
    "to": 251
  }, {
    "from": 220,
    "label": "initializes",
    "to": 252
  }, {
    "from": 252,
    "label": "assigns",
    "to": 253
  }, {
    "from": 220,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "assigns",
    "to": 255
  }, {
    "from": 220,
    "label": "initializes",
    "to": 256
  }, {
    "from": 220,
    "label": "initializes",
    "to": 257
  }, {
    "from": 257,
    "label": "assigns",
    "to": 258
  }, {
    "from": 220,
    "label": "initializes",
    "to": 259
  }, {
    "from": 259,
    "label": "assigns",
    "to": 260
  }, {
    "from": 220,
    "label": "initializes",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 220,
    "label": "initializes",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 220,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 220,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "assigns",
    "to": 268
  }, {
    "from": 220,
    "label": "initializes",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 220,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 220,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 220,
    "label": "initializes",
    "to": 275
  }, {
    "from": 275,
    "label": "assigns",
    "to": 276
  }, {
    "from": 220,
    "label": "initializes",
    "to": 277
  }, {
    "from": 220,
    "label": "initializes",
    "to": 278
  }, {
    "from": 220,
    "label": "initializes",
    "to": 279
  }, {
    "from": 221,
    "label": "initializes",
    "to": 280
  }, {
    "from": 280,
    "label": "requires",
    "to": 281
  }, {
    "from": 221,
    "label": "initializes",
    "to": 282
  }, {
    "from": 282,
    "label": "requires",
    "to": 283
  }, {
    "from": 221,
    "label": "initializes",
    "to": 284
  }, {
    "from": 284,
    "label": "requires",
    "to": 285
  }, {
    "from": 221,
    "label": "initializes",
    "to": 286
  }, {
    "from": 286,
    "label": "requires",
    "to": 287
  }, {
    "from": 1,
    "label": "provides",
    "to": 288
  }, {
    "from": 250,
    "label": "represents",
    "to": 289
  }, {
    "from": 288,
    "label": "provides",
    "to": 289
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Persistent",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function establish_connection (class, driver, ...)\r\n    local function create_db_sequence_tables (conn)\r\n        if not conn:execute \"select count(*) from db_sequence_state\" then\r\n            local r, msg = conn:execute \"create table db_sequence_state (dataset varchar(50), state_id int(11))\"\r\n            if not r then\r\n                error(msg)\r\n            end\r\n        end\r\n    end --  create_db_sequence_tables\r\n\r\n    drv[class] = driver\r\n    local conn = cnx[driver]\r\n    if not conn then\r\n        require('luasql.' .. driver)\r\n        local env = _G.luasql[driver]()\r\n        if not env then\r\n            error(\"cannot create an environment for \" .. driver)\r\n        end\r\n        local msg\r\n        conn, msg = env:connect(...)\r\n        if not conn then\r\n            error(msg)\r\n        end\r\n        cnx[driver] = conn\r\n    end\r\n    create_db_sequence_tables(conn)\r\n    return conn\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function create_db_sequence_tables (conn)\r\n        if not conn:execute \"select count(*) from db_sequence_state\" then\r\n            local r, msg = conn:execute \"create table db_sequence_state (dataset varchar(50), state_id int(11))\"\r\n            if not r then\r\n                error(msg)\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 4,
    "text": "if not conn:execute \"select count(*) from db_sequence_state\" then\r\n            local r, msg = conn:execute \"create table db_sequence_state (dataset varchar(50), state_id int(11))\"\r\n            if not r then\r\n                error(msg)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "local r, msg = conn:execute \"create table db_sequence_state (dataset varchar(50), state_id int(11))\"",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if not r then\r\n                error(msg)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "error(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "drv[class] = driver",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "local conn = cnx[driver]",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if not conn then\r\n        require('luasql.' .. driver)\r\n        local env = _G.luasql[driver]()\r\n        if not env then\r\n            error(\"cannot create an environment for \" .. driver)\r\n        end\r\n        local msg\r\n        conn, msg = env:connect(...)\r\n        if not conn then\r\n            error(msg)\r\n        end\r\n        cnx[driver] = conn\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "require('luasql.' .. driver)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local env = _G.luasql[driver]()",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if not env then\r\n            error(\"cannot create an environment for \" .. driver)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "error(\"cannot create an environment for \" .. driver)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local msg",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "conn, msg = env:connect(...)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if not conn then\r\n            error(msg)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "cnx[driver] = conn",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "create_db_sequence_tables(conn)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function create_db_sequence_tables (conn)\r\n        if not conn:execute \"select count(*) from db_sequence_state\" then\r\n            local r, msg = conn:execute \"create table db_sequence_state (dataset varchar(50), state_id int(11))\"\r\n            if not r then\r\n                error(msg)\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function connection (class)\r\n    return cnx[drv[class]]\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function execute (class, sql)\r\n    local trace = _M.trace\r\n    if trace then\r\n        trace('#', sql)\r\n    end\r\n    local conn = cnx[drv[class]]\r\n    if not conn then\r\n        error(\"No connection for class \" .. class._NAME)\r\n    end\r\n    local r, msg = conn:execute(sql)\r\n    if not r then\r\n        error(msg)\r\n    end\r\n    return r\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local trace = _M.trace",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if trace then\r\n        trace('#', sql)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "trace('#', sql)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local conn = cnx[drv[class]]",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if not conn then\r\n        error(\"No connection for class \" .. class._NAME)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "error(\"No connection for class \" .. class._NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local r, msg = conn:execute(sql)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if not r then\r\n        error(msg)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function next_id (class)\r\n    local dataset = class._TABLE_NAME\r\n    local cond = dado.AND { dataset = dataset }\r\n    local cur = execute(class, dado.select('*', 'db_sequence_state', cond))\r\n    local row = cur:fetch({}, 'a')\r\n    if not row then\r\n        local id_1 = 1\r\n        execute(class, dado.insert('db_sequence_state', { dataset = dataset, state_id = id_1 }))\r\n        return id_1\r\n    else\r\n        local id = row.state_id\r\n        local id_1 = id + 1\r\n        local cond = dado.AND { dataset = dataset, state_id = id }\r\n        execute(class, dado.update('db_sequence_state', { state_id = id_1 }, cond))\r\n        return id_1\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local dataset = class._TABLE_NAME",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local cond = dado.AND { dataset = dataset }",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local cur = execute(class, dado.select('*', 'db_sequence_state', cond))",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local row = cur:fetch({}, 'a')",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if not row then\r\n        local id_1 = 1\r\n        execute(class, dado.insert('db_sequence_state', { dataset = dataset, state_id = id_1 }))\r\n        return id_1\r\n    else\r\n        local id = row.state_id\r\n        local id_1 = id + 1\r\n        local cond = dado.AND { dataset = dataset, state_id = id }\r\n        execute(class, dado.update('db_sequence_state', { state_id = id_1 }, cond))\r\n        return id_1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local id_1 = 1",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "execute(class, dado.insert('db_sequence_state', { dataset = dataset, state_id = id_1 }))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local id = row.state_id",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local id_1 = id + 1",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local cond = dado.AND { dataset = dataset, state_id = id }",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "execute(class, dado.update('db_sequence_state', { state_id = id_1 }, cond))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function attributes (class)\r\n    local t = {}\r\n    for _, v in ipairs(class._ATTR_P) do\r\n        t[#t+1] = v\r\n    end\r\n    for _, cl in ipairs(class._PARENT) do\r\n        for _, v in ipairs(cl._ATTR_P) do\r\n            t[#t+1] = v\r\n        end\r\n    end\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "for _, v in ipairs(class._ATTR_P) do\r\n        t[#t+1] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 52,
    "text": "t[#t+1] = v",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "for _, cl in ipairs(class._PARENT) do\r\n        for _, v in ipairs(cl._ATTR_P) do\r\n            t[#t+1] = v\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 54,
    "text": "for _, v in ipairs(cl._ATTR_P) do\r\n            t[#t+1] = v\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function save (class, obj)\r\n    local primary_key = class._PRIMARY_KEY\r\n\r\n    local values = {}\r\n    for _, field in ipairs(attributes(class)) do\r\n        local val = obj[field]\r\n        if val ~= nil then\r\n            values[field] = tostring(val)\r\n        end\r\n    end\r\n\r\n    if rawget(obj, '_db_exist') then\r\n        local cond = dado.AND { [primary_key] = obj[primary_key] }\r\n        execute(class, dado.update(class._TABLE_NAME, values, cond))\r\n    else\r\n        obj[primary_key] = next_id(class)\r\n        values[primary_key] = obj[primary_key]\r\n        execute(class, dado.insert(class._TABLE_NAME, values))\r\n        rawset(obj, '_db_exist', true)\r\n    end\r\n\r\n    local t = rawget(obj, '_subobjects')\r\n    if t then\r\n        for i = 1, #t do\r\n            t[i]:save()\r\n        end\r\n        rawset(obj, '_subobjects', nil)\r\n    end\r\n\r\n    return obj[primary_key]\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local primary_key = class._PRIMARY_KEY",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local values = {}",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "for _, field in ipairs(attributes(class)) do\r\n        local val = obj[field]\r\n        if val ~= nil then\r\n            values[field] = tostring(val)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "local val = obj[field]",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if val ~= nil then\r\n            values[field] = tostring(val)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "values[field] = tostring(val)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if rawget(obj, '_db_exist') then\r\n        local cond = dado.AND { [primary_key] = obj[primary_key] }\r\n        execute(class, dado.update(class._TABLE_NAME, values, cond))\r\n    else\r\n        obj[primary_key] = next_id(class)\r\n        values[primary_key] = obj[primary_key]\r\n        execute(class, dado.insert(class._TABLE_NAME, values))\r\n        rawset(obj, '_db_exist', true)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local cond = dado.AND { [primary_key] = obj[primary_key] }",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "execute(class, dado.update(class._TABLE_NAME, values, cond))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "obj[primary_key] = next_id(class)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "values[primary_key] = obj[primary_key]",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "execute(class, dado.insert(class._TABLE_NAME, values))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "rawset(obj, '_db_exist', true)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "local t = rawget(obj, '_subobjects')",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if t then\r\n        for i = 1, #t do\r\n            t[i]:save()\r\n        end\r\n        rawset(obj, '_subobjects', nil)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "for i = 1, #t do\r\n            t[i]:save()\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 73,
    "text": "t[i]:save()",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "rawset(obj, '_subobjects', nil)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "local function delete (class, obj)\r\n    local primary_key = class._PRIMARY_KEY\r\n    local cond = dado.AND { [primary_key] = obj[primary_key] }\r\n    return execute(class, dado.delete(class._TABLE_NAME, cond))\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "local function create (class, val)\r\n    if type(val) == 'table' and #val > 0 then\r\n        local t = {}\r\n        for i = 1, #val do\r\n            t[#t+1] = create(class, val[i])\r\n        end\r\n        return t\r\n    else\r\n        local obj = class.new(val)\r\n        obj:save()\r\n        return obj\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "if type(val) == 'table' and #val > 0 then\r\n        local t = {}\r\n        for i = 1, #val do\r\n            t[#t+1] = create(class, val[i])\r\n        end\r\n        return t\r\n    else\r\n        local obj = class.new(val)\r\n        obj:save()\r\n        return obj\r\n    end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "for i = 1, #val do\r\n            t[#t+1] = create(class, val[i])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 81,
    "text": "t[#t+1] = create(class, val[i])",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "local obj = class.new(val)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "obj:save()",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "local function find_by_sql (class, sql)\r\n    local cur = execute(class, sql)\r\n    return function ()\r\n        local row = cur:fetch({}, 'a')\r\n        if row then\r\n            local obj = class.new(row)\r\n            rawset(obj, '_db_exist', true)\r\n            return obj\r\n        else\r\n            cur:close()\r\n            return nil\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "local cur = execute(class, sql)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "if row then\r\n            local obj = class.new(row)\r\n            rawset(obj, '_db_exist', true)\r\n            return obj\r\n        else\r\n            cur:close()\r\n            return nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "local obj = class.new(row)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "cur:close()",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "local function find (class, val)\r\n    if val == nil then\r\n        return find_by_sql(class, dado.select('*', class._TABLE_NAME))\r\n    elseif type(val) == 'number' then\r\n        local cond = dado.AND { [class._PRIMARY_KEY] = val }\r\n        return find_by_sql(class, dado.select('*', class._TABLE_NAME, cond))\r\n    elseif type(val) == 'string' then\r\n        return find_by_sql(class, dado.select('*', class._TABLE_NAME, val))\r\n    else\r\n        argerror('find', 2, \"number or string expected\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "if val == nil then\r\n        return find_by_sql(class, dado.select('*', class._TABLE_NAME))\r\n    elseif type(val) == 'number' then\r\n        local cond = dado.AND { [class._PRIMARY_KEY] = val }\r\n        return find_by_sql(class, dado.select('*', class._TABLE_NAME, cond))\r\n    elseif type(val) == 'string' then\r\n        return find_by_sql(class, dado.select('*', class._TABLE_NAME, val))\r\n    else\r\n        argerror('find', 2, \"number or string expected\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "local cond = dado.AND { [class._PRIMARY_KEY] = val }",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "argerror('find', 2, \"number or string expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "local function has_p (class, name, options)\r\n    checktype('has_p', 1, name, 'string')\r\n    checktype('has_p', 2, options or {}, 'table')\r\n\r\n    class['find_by_' .. name] = function (val)\r\n        if val == nil then\r\n            error \"Cannot find without a value\"\r\n        end\r\n        local cond = dado.AND { [name] = val }\r\n        return find_by_sql(class, dado.select('*', class._TABLE_NAME, cond))\r\n    end\r\n\r\n    local t = class._ATTR_P; t[#t+1] = name\r\n    has(class, name, options)\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "checktype('has_p', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "checktype('has_p', 2, options or {}, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "class['find_by_' .. name] = function (val)\r\n        if val == nil then\r\n            error \"Cannot find without a value\"\r\n        end\r\n        local cond = dado.AND { [name] = val }\r\n        return find_by_sql(class, dado.select('*', class._TABLE_NAME, cond))\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "if val == nil then\r\n            error \"Cannot find without a value\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "error \"Cannot find without a value\"",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "local cond = dado.AND { [name] = val }",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local t = class._ATTR_P",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "t[#t+1] = name",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "has(class, name, options)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function (val)\r\n        if val == nil then\r\n            error \"Cannot find without a value\"\r\n        end\r\n        local cond = dado.AND { [name] = val }\r\n        return find_by_sql(class, dado.select('*', class._TABLE_NAME, cond))\r\n    end",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "local function has_one (class, name, options)\r\n    checktype('has_one', 1, name, 'string')\r\n    options = options or {}\r\n    checktype('has_one', 2, options, 'table')\r\n    local owned_class_name = options.class_name or name\r\n    local owned_class = Meta.class(owned_class_name)\r\n    if not owned_class then\r\n        error(\"Unknown class \" .. owned_class_name)\r\n    end\r\n    local owned_table_name = owned_class._TABLE_NAME\r\n    local owned_primary_key = owned_class._PRIMARY_KEY\r\n    if not owned_primary_key then\r\n        error(\"The class \" .. owned_class_name .. \" has not a primary key.\")\r\n    end\r\n    local attr_name = owned_table_name\r\n    if options.class_name then\r\n        attr_name = name\r\n    end\r\n    local foreign_key = options.foreign_key or owned_table_name .. '_' .. owned_primary_key\r\n\r\n    has_p(class, foreign_key, { is = 'rw', isa = 'number' })\r\n\r\n    class['_set_' .. attr_name] = function (obj, val)\r\n        obj[foreign_key] = val[owned_primary_key]\r\n        return val\r\n    end\r\n\r\n    class['_get_' .. attr_name] = function (obj)\r\n        local id = obj[foreign_key]\r\n        if id then\r\n            return find(owned_class, id)()\r\n        end\r\n    end\r\n\r\n    class._ACCESSOR = attr_name\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "checktype('has_one', 1, name, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "options = options or {}",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "checktype('has_one', 2, options, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "local owned_class_name = options.class_name or name",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local owned_class = Meta.class(owned_class_name)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "if not owned_class then\r\n        error(\"Unknown class \" .. owned_class_name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "error(\"Unknown class \" .. owned_class_name)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "local owned_table_name = owned_class._TABLE_NAME",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local owned_primary_key = owned_class._PRIMARY_KEY",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if not owned_primary_key then\r\n        error(\"The class \" .. owned_class_name .. \" has not a primary key.\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "error(\"The class \" .. owned_class_name .. \" has not a primary key.\")",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "local attr_name = owned_table_name",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if options.class_name then\r\n        attr_name = name\r\n    end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "attr_name = name",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "local foreign_key = options.foreign_key or owned_table_name .. '_' .. owned_primary_key",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "has_p(class, foreign_key, { is = 'rw', isa = 'number' })",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "class['_set_' .. attr_name] = function (obj, val)\r\n        obj[foreign_key] = val[owned_primary_key]\r\n        return val\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "obj[foreign_key] = val[owned_primary_key]",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "class['_get_' .. attr_name] = function (obj)\r\n        local id = obj[foreign_key]\r\n        if id then\r\n            return find(owned_class, id)()\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "local id = obj[foreign_key]",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "if id then\r\n            return find(owned_class, id)()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "class._ACCESSOR = attr_name",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function (obj, val)\r\n        obj[foreign_key] = val[owned_primary_key]\r\n        return val\r\n    end",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function (obj)\r\n        local id = obj[foreign_key]\r\n        if id then\r\n            return find(owned_class, id)()\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "local function has_many (class, name, options)\r\n    checktype('has_one', 1, name, 'string')\r\n    options = options or {}\r\n    checktype('has_one', 2, options, 'table')\r\n    local owned_class_name = options.class_name or name\r\n    local owned_class = Meta.class(owned_class_name)\r\n    if not owned_class then\r\n        error(\"Unknown class \" .. owned_class_name)\r\n    end\r\n    local table_name = class._TABLE_NAME\r\n    local primary_key = class._PRIMARY_KEY\r\n    local owned_table_name = owned_class._TABLE_NAME\r\n    local owned_primary_key = owned_class._PRIMARY_KEY\r\n    if not owned_primary_key then\r\n        error(\"The class \" .. owned_class_name .. \" has not a primary key.\")\r\n    end\r\n    local attr_name = owned_table_name .. 's'\r\n    if options.class_name then\r\n        attr_name = name\r\n    end\r\n\r\n    class['_set_' .. attr_name] = function (obj, list)\r\n        if type(list) ~= 'table' or list._CLASS then\r\n            error(\"Not an array of object\")\r\n        end\r\n        local accessor = owned_class._ACCESSOR or table_name\r\n        local t = rawget(obj, '_subobjects')\r\n        if not t then\r\n            t = {}\r\n            rawset(obj, '_subobjects', t)\r\n        end\r\n        for i = 1, #list do\r\n            local val = list[i]\r\n            if not val:isa(owned_class) then\r\n                error(\"Not an object of class \" .. owned_class._NAME .. \" (got \" .. type(val) .. \")\")\r\n            end\r\n            val[accessor] = obj\r\n            t[#t+1] = val\r\n        end\r\n    end\r\n\r\n    class['_get_' .. attr_name] = function (obj)\r\n        local t = {}\r\n        local iter = owned_class['find_by_' .. table_name .. '_' .. primary_key](obj[primary_key])\r\n        for v in iter do\r\n            t[#t+1] = v\r\n        end\r\n        return t\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "local table_name = class._TABLE_NAME",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "local attr_name = owned_table_name .. 's'",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "class['_set_' .. attr_name] = function (obj, list)\r\n        if type(list) ~= 'table' or list._CLASS then\r\n            error(\"Not an array of object\")\r\n        end\r\n        local accessor = owned_class._ACCESSOR or table_name\r\n        local t = rawget(obj, '_subobjects')\r\n        if not t then\r\n            t = {}\r\n            rawset(obj, '_subobjects', t)\r\n        end\r\n        for i = 1, #list do\r\n            local val = list[i]\r\n            if not val:isa(owned_class) then\r\n                error(\"Not an object of class \" .. owned_class._NAME .. \" (got \" .. type(val) .. \")\")\r\n            end\r\n            val[accessor] = obj\r\n            t[#t+1] = val\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "if type(list) ~= 'table' or list._CLASS then\r\n            error(\"Not an array of object\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "error(\"Not an array of object\")",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "local accessor = owned_class._ACCESSOR or table_name",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if not t then\r\n            t = {}\r\n            rawset(obj, '_subobjects', t)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "t = {}",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "rawset(obj, '_subobjects', t)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "for i = 1, #list do\r\n            local val = list[i]\r\n            if not val:isa(owned_class) then\r\n                error(\"Not an object of class \" .. owned_class._NAME .. \" (got \" .. type(val) .. \")\")\r\n            end\r\n            val[accessor] = obj\r\n            t[#t+1] = val\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 148,
    "text": "local val = list[i]",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "if not val:isa(owned_class) then\r\n                error(\"Not an object of class \" .. owned_class._NAME .. \" (got \" .. type(val) .. \")\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "error(\"Not an object of class \" .. owned_class._NAME .. \" (got \" .. type(val) .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "val[accessor] = obj",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "t[#t+1] = val",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "class['_get_' .. attr_name] = function (obj)\r\n        local t = {}\r\n        local iter = owned_class['find_by_' .. table_name .. '_' .. primary_key](obj[primary_key])\r\n        for v in iter do\r\n            t[#t+1] = v\r\n        end\r\n        return t\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "local iter = owned_class['find_by_' .. table_name .. '_' .. primary_key](obj[primary_key])",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "for v in iter do\r\n            t[#t+1] = v\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function (obj, list)\r\n        if type(list) ~= 'table' or list._CLASS then\r\n            error(\"Not an array of object\")\r\n        end\r\n        local accessor = owned_class._ACCESSOR or table_name\r\n        local t = rawget(obj, '_subobjects')\r\n        if not t then\r\n            t = {}\r\n            rawset(obj, '_subobjects', t)\r\n        end\r\n        for i = 1, #list do\r\n            local val = list[i]\r\n            if not val:isa(owned_class) then\r\n                error(\"Not an object of class \" .. owned_class._NAME .. \" (got \" .. type(val) .. \")\")\r\n            end\r\n            val[accessor] = obj\r\n            t[#t+1] = val\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function (obj)\r\n        local t = {}\r\n        local iter = owned_class['find_by_' .. table_name .. '_' .. primary_key](obj[primary_key])\r\n        for v in iter do\r\n            t[#t+1] = v\r\n        end\r\n        return t\r\n    end",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function _G.persistent (modname, options)\r\n    checktype('persistent', 1, modname, 'string')\r\n    options = options or {}\r\n    checktype('persistent', 2, options, 'table')\r\n    local primary_key = options.primary_key or 'id'\r\n    local table_name = options.table_name or modname:gsub('%.', '_')\r\n    local M = _class(modname)\r\n    M._PRIMARY_KEY = primary_key\r\n    M._TABLE_NAME = table_name:lower()\r\n    M._ATTR_P = { primary_key }\r\n    M.establish_connection = function (...) return establish_connection(M, ...) end\r\n    M.connection = function () return connection(M) end\r\n    M.save = function (...) return save(M, ...) end\r\n    M.delete = function (...) return delete(M, ...) end\r\n    M.create = function (...) return create(M, ...) end\r\n    M.find = function (...) return find(M, ...) end\r\n    M.find_by_sql = function (...) return find_by_sql(M, ...) end\r\n    M.has_p = setmetatable({}, { __newindex = function (t, k, v) has_p(M, k, v) end })\r\n    M.has_one = setmetatable({}, { __newindex = function (t, k, v) has_one(M, k, v) end })\r\n    M.has_many = setmetatable({}, { __newindex = function (t, k, v) has_many(M, k, v) end })\r\n    has(M, primary_key, { is = 'rw', isa = 'number' })\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "checktype('persistent', 1, modname, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "checktype('persistent', 2, options, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "local primary_key = options.primary_key or 'id'",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "local table_name = options.table_name or modname:gsub('%.', '_')",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "local M = _class(modname)",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "M._PRIMARY_KEY = primary_key",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "M._TABLE_NAME = table_name:lower()",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "M._ATTR_P = { primary_key }",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "M.establish_connection = function (...) return establish_connection(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "M.connection = function () return connection(M) end",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "M.save = function (...) return save(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "M.delete = function (...) return delete(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "M.create = function (...) return create(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "M.find = function (...) return find(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "M.find_by_sql = function (...) return find_by_sql(M, ...) end",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "M.has_p = setmetatable({}, { __newindex = function (t, k, v) has_p(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "has_p(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "M.has_one = setmetatable({}, { __newindex = function (t, k, v) has_one(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "has_one(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "M.has_many = setmetatable({}, { __newindex = function (t, k, v) has_many(M, k, v) end })",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "has_many(M, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "has(M, primary_key, { is = 'rw', isa = 'number' })",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function (...) return establish_connection(M, ...) end",
    "type": "function"
  }, {
    "id": 186,
    "text": "function () return connection(M) end",
    "type": "function"
  }, {
    "id": 187,
    "text": "function (...) return save(M, ...) end",
    "type": "function"
  }, {
    "id": 188,
    "text": "function (...) return delete(M, ...) end",
    "type": "function"
  }, {
    "id": 189,
    "text": "function (...) return create(M, ...) end",
    "type": "function"
  }, {
    "id": 190,
    "text": "function (...) return find(M, ...) end",
    "type": "function"
  }, {
    "id": 191,
    "text": "function (...) return find_by_sql(M, ...) end",
    "type": "function"
  }, {
    "id": 192,
    "text": "function ()\r\n        local row = cur:fetch({}, 'a')\r\n        if row then\r\n            local obj = class.new(row)\r\n            rawset(obj, '_db_exist', true)\r\n            return obj\r\n        else\r\n            cur:close()\r\n            return nil\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "function (t, k, v) has_p(M, k, v) end",
    "type": "function"
  }, {
    "id": 195,
    "text": "function (t, k, v) has_one(M, k, v) end",
    "type": "function"
  }, {
    "id": 196,
    "text": "function (t, k, v) has_many(M, k, v) end",
    "type": "function"
  }, {
    "id": 197,
    "text": "",
    "type": "function container"
  }, {
    "id": 198,
    "text": "delete",
    "type": "global function"
  }, {
    "id": 199,
    "text": "AND",
    "type": "global function"
  }, {
    "id": 200,
    "text": "select",
    "type": "global function"
  }, {
    "id": 201,
    "text": "class",
    "type": "global function"
  }, {
    "id": 202,
    "text": "update",
    "type": "global function"
  }, {
    "id": 203,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 204,
    "text": "new",
    "type": "global function"
  }, {
    "id": 205,
    "text": "owned_class['find_by_' .. table_name .. '_' .. primary_key]",
    "type": "global function"
  }, {
    "id": 206,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 207,
    "text": "_class",
    "type": "global function"
  }, {
    "id": 208,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 209,
    "text": "argerror",
    "type": "global function"
  }, {
    "id": 210,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 211,
    "text": "has",
    "type": "global function"
  }, {
    "id": 212,
    "text": "error",
    "type": "global function"
  }, {
    "id": 213,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 214,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 215,
    "text": "trace",
    "type": "global function"
  }, {
    "id": 216,
    "text": "type",
    "type": "global function"
  }, {
    "id": 217,
    "text": "require",
    "type": "global function"
  }, {
    "id": 218,
    "text": "checktype",
    "type": "global function"
  }, {
    "id": 219,
    "text": "luasql[driver]",
    "type": "global function"
  }, {
    "id": 220,
    "text": "",
    "type": "variable container"
  }, {
    "id": 221,
    "text": "",
    "type": "require container"
  }, {
    "id": 222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "n/a"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "n/a"
  }, {
    "id": 228,
    "text": "",
    "type": "local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "n/a"
  }, {
    "id": 230,
    "text": "",
    "type": "local variable"
  }, {
    "id": 231,
    "text": "",
    "type": "n/a"
  }, {
    "id": 232,
    "text": "",
    "type": "local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "n/a"
  }, {
    "id": 234,
    "text": "",
    "type": "local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "n/a"
  }, {
    "id": 236,
    "text": "",
    "type": "local variable"
  }, {
    "id": 237,
    "text": "",
    "type": "n/a"
  }, {
    "id": 238,
    "text": "",
    "type": "local variable"
  }, {
    "id": 239,
    "text": "",
    "type": "n/a"
  }, {
    "id": 240,
    "text": "",
    "type": "local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "n/a"
  }, {
    "id": 242,
    "text": "",
    "type": "local variable"
  }, {
    "id": 243,
    "text": "",
    "type": "n/a"
  }, {
    "id": 244,
    "text": "",
    "type": "local variable"
  }, {
    "id": 245,
    "text": "",
    "type": "n/a"
  }, {
    "id": 246,
    "text": "",
    "type": "local variable"
  }, {
    "id": 247,
    "text": "",
    "type": "n/a"
  }, {
    "id": 248,
    "text": "",
    "type": "local variable"
  }, {
    "id": 249,
    "text": "",
    "type": "n/a"
  }, {
    "id": 250,
    "text": "",
    "type": "local variable"
  }, {
    "id": 251,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 252,
    "text": "",
    "type": "local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 254,
    "text": "",
    "type": "local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 256,
    "text": "",
    "type": "global variable"
  }, {
    "id": 257,
    "text": "",
    "type": "global variable"
  }, {
    "id": 258,
    "text": "",
    "type": "n/a"
  }, {
    "id": 259,
    "text": "",
    "type": "global variable"
  }, {
    "id": 260,
    "text": "",
    "type": "n/a"
  }, {
    "id": 261,
    "text": "",
    "type": "global variable"
  }, {
    "id": 262,
    "text": "",
    "type": "n/a"
  }, {
    "id": 263,
    "text": "",
    "type": "global variable"
  }, {
    "id": 264,
    "text": "",
    "type": "n/a"
  }, {
    "id": 265,
    "text": "",
    "type": "global variable"
  }, {
    "id": 266,
    "text": "",
    "type": "n/a"
  }, {
    "id": 267,
    "text": "",
    "type": "global variable"
  }, {
    "id": 268,
    "text": "",
    "type": "n/a"
  }, {
    "id": 269,
    "text": "",
    "type": "global variable"
  }, {
    "id": 270,
    "text": "",
    "type": "n/a"
  }, {
    "id": 271,
    "text": "",
    "type": "global variable"
  }, {
    "id": 272,
    "text": "",
    "type": "n/a"
  }, {
    "id": 273,
    "text": "",
    "type": "global variable"
  }, {
    "id": 274,
    "text": "",
    "type": "n/a"
  }, {
    "id": 275,
    "text": "",
    "type": "global variable"
  }, {
    "id": 276,
    "text": "",
    "type": "n/a"
  }, {
    "id": 277,
    "text": "",
    "type": "global variable"
  }, {
    "id": 278,
    "text": "",
    "type": "global variable"
  }, {
    "id": 279,
    "text": "",
    "type": "global variable"
  }, {
    "id": 280,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 281,
    "text": "Coat",
    "type": "module"
  }, {
    "id": 282,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 283,
    "text": "Class",
    "type": "module"
  }, {
    "id": 284,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 285,
    "text": "sql",
    "type": "module"
  }, {
    "id": 286,
    "text": "",
    "type": "global variable"
  }, {
    "id": 287,
    "text": " driver)",
    "type": "module"
  }, {
    "id": 288,
    "text": "",
    "type": "interface container"
  }, {
    "id": 289,
    "text": "",
    "type": "interface"
  } ]
}