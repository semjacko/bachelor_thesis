{
  "_filename": "dkjson.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/dkjson/dkjson.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 13
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 13
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 16,
    "label": "has",
    "to": 13
  }, {
    "from": 16,
    "label": "has",
    "to": 13
  }, {
    "from": 16,
    "label": "has",
    "to": 13
  }, {
    "from": 16,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 13
  }, {
    "from": 30,
    "label": "has",
    "to": 13
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 33,
    "label": "has",
    "to": 13
  }, {
    "from": 33,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 13
  }, {
    "from": 45,
    "label": "has",
    "to": 13
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 13
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 13
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 13
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 13
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 70,
    "label": "has",
    "to": 78
  }, {
    "from": 70,
    "label": "has",
    "to": 79
  }, {
    "from": 70,
    "label": "has",
    "to": 13
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 86,
    "label": "has",
    "to": 93
  }, {
    "from": 86,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 74
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 86,
    "label": "has",
    "to": 74
  }, {
    "from": 86,
    "label": "has",
    "to": 96
  }, {
    "from": 86,
    "label": "has",
    "to": 97
  }, {
    "from": 86,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 86,
    "label": "has",
    "to": 74
  }, {
    "from": 86,
    "label": "has",
    "to": 101
  }, {
    "from": 86,
    "label": "has",
    "to": 74
  }, {
    "from": 86,
    "label": "has",
    "to": 102
  }, {
    "from": 86,
    "label": "has",
    "to": 74
  }, {
    "from": 86,
    "label": "has",
    "to": 103
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 104
  }, {
    "from": 86,
    "label": "has",
    "to": 105
  }, {
    "from": 86,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 86,
    "label": "has",
    "to": 108
  }, {
    "from": 86,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 74
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 74
  }, {
    "from": 114,
    "label": "has",
    "to": 75
  }, {
    "from": 109,
    "label": "has",
    "to": 74
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 109,
    "label": "has",
    "to": 116
  }, {
    "from": 109,
    "label": "has",
    "to": 74
  }, {
    "from": 109,
    "label": "has",
    "to": 117
  }, {
    "from": 109,
    "label": "has",
    "to": 118
  }, {
    "from": 109,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 119,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 127
  }, {
    "from": 130,
    "label": "has",
    "to": 113
  }, {
    "from": 130,
    "label": "has",
    "to": 128
  }, {
    "from": 119,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 127
  }, {
    "from": 131,
    "label": "has",
    "to": 113
  }, {
    "from": 131,
    "label": "has",
    "to": 128
  }, {
    "from": 109,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 109,
    "label": "has",
    "to": 74
  }, {
    "from": 109,
    "label": "has",
    "to": 134
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 136,
    "label": "has",
    "to": 139
  }, {
    "from": 136,
    "label": "has",
    "to": 58
  }, {
    "from": 136,
    "label": "has",
    "to": 140
  }, {
    "from": 136,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 136,
    "label": "has",
    "to": 13
  }, {
    "from": 136,
    "label": "has",
    "to": 13
  }, {
    "from": 136,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 145,
    "label": "has",
    "to": 13
  }, {
    "from": 145,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 13
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 156,
    "label": "has",
    "to": 13
  }, {
    "from": 156,
    "label": "has",
    "to": 13
  }, {
    "from": 156,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 13
  }, {
    "from": 163,
    "label": "has",
    "to": 13
  }, {
    "from": 163,
    "label": "has",
    "to": 13
  }, {
    "from": 163,
    "label": "has",
    "to": 13
  }, {
    "from": 163,
    "label": "has",
    "to": 13
  }, {
    "from": 163,
    "label": "has",
    "to": 13
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 12
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 169,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 180,
    "label": "has",
    "to": 188
  }, {
    "from": 180,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 174,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 174,
    "label": "has",
    "to": 12
  }, {
    "from": 174,
    "label": "has",
    "to": 196
  }, {
    "from": 166,
    "label": "has",
    "to": 13
  }, {
    "from": 166,
    "label": "has",
    "to": 197
  }, {
    "from": 166,
    "label": "has",
    "to": 13
  }, {
    "from": 166,
    "label": "has",
    "to": 13
  }, {
    "from": 166,
    "label": "has",
    "to": 13
  }, {
    "from": 166,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 199,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 206,
    "label": "has",
    "to": 209
  }, {
    "from": 206,
    "label": "has",
    "to": 210
  }, {
    "from": 206,
    "label": "has",
    "to": 211
  }, {
    "from": 206,
    "label": "has",
    "to": 212
  }, {
    "from": 206,
    "label": "has",
    "to": 213
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 206,
    "label": "has",
    "to": 214
  }, {
    "from": 206,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 208
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 215,
    "label": "has",
    "to": 219
  }, {
    "from": 215,
    "label": "has",
    "to": 213
  }, {
    "from": 215,
    "label": "has",
    "to": 220
  }, {
    "from": 215,
    "label": "has",
    "to": 207
  }, {
    "from": 215,
    "label": "has",
    "to": 208
  }, {
    "from": 215,
    "label": "has",
    "to": 214
  }, {
    "from": 215,
    "label": "has",
    "to": 12
  }, {
    "from": 215,
    "label": "has",
    "to": 221
  }, {
    "from": 206,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 152
  }, {
    "from": 199,
    "label": "has",
    "to": 13
  }, {
    "from": 199,
    "label": "has",
    "to": 13
  }, {
    "from": 199,
    "label": "has",
    "to": 13
  }, {
    "from": 199,
    "label": "has",
    "to": 13
  }, {
    "from": 199,
    "label": "has",
    "to": 13
  }, {
    "from": 199,
    "label": "has",
    "to": 13
  }, {
    "from": 199,
    "label": "has",
    "to": 13
  }, {
    "from": 199,
    "label": "has",
    "to": 13
  }, {
    "from": 199,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 207
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 224,
    "label": "has",
    "to": 13
  }, {
    "from": 224,
    "label": "has",
    "to": 209
  }, {
    "from": 224,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 227,
    "label": "has",
    "to": 232
  }, {
    "from": 227,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 224,
    "label": "has",
    "to": 13
  }, {
    "from": 224,
    "label": "has",
    "to": 13
  }, {
    "from": 224,
    "label": "has",
    "to": 13
  }, {
    "from": 224,
    "label": "has",
    "to": 13
  }, {
    "from": 224,
    "label": "has",
    "to": 13
  }, {
    "from": 224,
    "label": "has",
    "to": 13
  }, {
    "from": 224,
    "label": "has",
    "to": 13
  }, {
    "from": 224,
    "label": "has",
    "to": 13
  }, {
    "from": 224,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 13
  }, {
    "from": 237,
    "label": "has",
    "to": 13
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 13
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 243,
    "label": "has",
    "to": 247
  }, {
    "from": 243,
    "label": "has",
    "to": 248
  }, {
    "from": 243,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 249,
    "label": "has",
    "to": 13
  }, {
    "from": 243,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 13
  }, {
    "from": 243,
    "label": "has",
    "to": 254
  }, {
    "from": 243,
    "label": "has",
    "to": 255
  }, {
    "from": 243,
    "label": "has",
    "to": 256
  }, {
    "from": 243,
    "label": "has",
    "to": 257
  }, {
    "from": 243,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 258,
    "label": "has",
    "to": 260
  }, {
    "from": 258,
    "label": "has",
    "to": 13
  }, {
    "from": 258,
    "label": "has",
    "to": 13
  }, {
    "from": 243,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 13
  }, {
    "from": 243,
    "label": "has",
    "to": 262
  }, {
    "from": 243,
    "label": "has",
    "to": 263
  }, {
    "from": 243,
    "label": "has",
    "to": 264
  }, {
    "from": 243,
    "label": "has",
    "to": 265
  }, {
    "from": 243,
    "label": "has",
    "to": 266
  }, {
    "from": 243,
    "label": "has",
    "to": 267
  }, {
    "from": 243,
    "label": "has",
    "to": 268
  }, {
    "from": 243,
    "label": "has",
    "to": 269
  }, {
    "from": 243,
    "label": "has",
    "to": 270
  }, {
    "from": 243,
    "label": "has",
    "to": 271
  }, {
    "from": 243,
    "label": "has",
    "to": 272
  }, {
    "from": 243,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 273,
    "label": "has",
    "to": 276
  }, {
    "from": 273,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 277,
    "label": "has",
    "to": 279
  }, {
    "from": 277,
    "label": "has",
    "to": 280
  }, {
    "from": 277,
    "label": "has",
    "to": 281
  }, {
    "from": 277,
    "label": "has",
    "to": 282
  }, {
    "from": 273,
    "label": "has",
    "to": 13
  }, {
    "from": 243,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 275
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 283,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 279
  }, {
    "from": 286,
    "label": "has",
    "to": 280
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 283,
    "label": "has",
    "to": 13
  }, {
    "from": 243,
    "label": "has",
    "to": 289
  }, {
    "from": 243,
    "label": "has",
    "to": 290
  }, {
    "from": 243,
    "label": "has",
    "to": 291
  }, {
    "from": 243,
    "label": "has",
    "to": 292
  }, {
    "from": 243,
    "label": "has",
    "to": 293
  }, {
    "from": 243,
    "label": "has",
    "to": 294
  }, {
    "from": 243,
    "label": "has",
    "to": 295
  }, {
    "from": 243,
    "label": "has",
    "to": 296
  }, {
    "from": 243,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 297,
    "label": "has",
    "to": 300
  }, {
    "from": 297,
    "label": "has",
    "to": 301
  }, {
    "from": 297,
    "label": "has",
    "to": 13
  }, {
    "from": 297,
    "label": "has",
    "to": 13
  }, {
    "from": 243,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 13
  }, {
    "from": 243,
    "label": "has",
    "to": 303
  }, {
    "from": 243,
    "label": "has",
    "to": 13
  }, {
    "from": 243,
    "label": "has",
    "to": 304
  }, {
    "from": 305,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 305,
    "label": "has",
    "to": 13
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 307,
    "label": "has",
    "to": 13
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 309,
    "label": "has",
    "to": 259
  }, {
    "from": 309,
    "label": "has",
    "to": 260
  }, {
    "from": 309,
    "label": "has",
    "to": 13
  }, {
    "from": 309,
    "label": "has",
    "to": 13
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 311,
    "label": "has",
    "to": 13
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 313,
    "label": "has",
    "to": 274
  }, {
    "from": 313,
    "label": "has",
    "to": 275
  }, {
    "from": 313,
    "label": "has",
    "to": 276
  }, {
    "from": 313,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 277,
    "label": "has",
    "to": 279
  }, {
    "from": 277,
    "label": "has",
    "to": 280
  }, {
    "from": 277,
    "label": "has",
    "to": 281
  }, {
    "from": 277,
    "label": "has",
    "to": 282
  }, {
    "from": 313,
    "label": "has",
    "to": 13
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 284
  }, {
    "from": 315,
    "label": "has",
    "to": 275
  }, {
    "from": 315,
    "label": "has",
    "to": 285
  }, {
    "from": 315,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 279
  }, {
    "from": 286,
    "label": "has",
    "to": 280
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 315,
    "label": "has",
    "to": 13
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 298
  }, {
    "from": 317,
    "label": "has",
    "to": 299
  }, {
    "from": 317,
    "label": "has",
    "to": 300
  }, {
    "from": 317,
    "label": "has",
    "to": 301
  }, {
    "from": 317,
    "label": "has",
    "to": 13
  }, {
    "from": 317,
    "label": "has",
    "to": 13
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 13
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 320,
    "label": "has",
    "to": 324
  }, {
    "from": 325,
    "label": "has",
    "to": 13
  }, {
    "from": 313,
    "label": "calls",
    "to": 335
  }, {
    "from": 315,
    "label": "calls",
    "to": 335
  }, {
    "from": 243,
    "label": "calls",
    "to": 335
  }, {
    "from": 243,
    "label": "calls",
    "to": 336
  }, {
    "from": 243,
    "label": "calls",
    "to": 336
  }, {
    "from": 243,
    "label": "calls",
    "to": 336
  }, {
    "from": 243,
    "label": "calls",
    "to": 336
  }, {
    "from": 243,
    "label": "calls",
    "to": 336
  }, {
    "from": 240,
    "label": "calls",
    "to": 237
  }, {
    "from": 243,
    "label": "calls",
    "to": 237
  }, {
    "from": 154,
    "label": "calls",
    "to": 337
  }, {
    "from": 199,
    "label": "calls",
    "to": 337
  }, {
    "from": 326,
    "label": "calls",
    "to": 337
  }, {
    "from": 166,
    "label": "calls",
    "to": 163
  }, {
    "from": 309,
    "label": "calls",
    "to": 163
  }, {
    "from": 311,
    "label": "calls",
    "to": 163
  }, {
    "from": 16,
    "label": "calls",
    "to": 352
  }, {
    "from": 16,
    "label": "calls",
    "to": 352
  }, {
    "from": 30,
    "label": "calls",
    "to": 340
  }, {
    "from": 49,
    "label": "calls",
    "to": 340
  }, {
    "from": 53,
    "label": "calls",
    "to": 45
  }, {
    "from": 55,
    "label": "calls",
    "to": 45
  }, {
    "from": 55,
    "label": "calls",
    "to": 45
  }, {
    "from": 326,
    "label": "calls",
    "to": 53
  }, {
    "from": 243,
    "label": "calls",
    "to": 327
  }, {
    "from": 243,
    "label": "calls",
    "to": 330
  }, {
    "from": 45,
    "label": "calls",
    "to": 360
  }, {
    "from": 45,
    "label": "calls",
    "to": 360
  }, {
    "from": 156,
    "label": "calls",
    "to": 360
  }, {
    "from": 166,
    "label": "calls",
    "to": 360
  }, {
    "from": 166,
    "label": "calls",
    "to": 360
  }, {
    "from": 166,
    "label": "calls",
    "to": 360
  }, {
    "from": 166,
    "label": "calls",
    "to": 360
  }, {
    "from": 166,
    "label": "calls",
    "to": 360
  }, {
    "from": 166,
    "label": "calls",
    "to": 360
  }, {
    "from": 199,
    "label": "calls",
    "to": 360
  }, {
    "from": 199,
    "label": "calls",
    "to": 360
  }, {
    "from": 199,
    "label": "calls",
    "to": 360
  }, {
    "from": 326,
    "label": "calls",
    "to": 360
  }, {
    "from": 326,
    "label": "calls",
    "to": 360
  }, {
    "from": 326,
    "label": "calls",
    "to": 360
  }, {
    "from": 326,
    "label": "calls",
    "to": 199
  }, {
    "from": 326,
    "label": "calls",
    "to": 199
  }, {
    "from": 326,
    "label": "calls",
    "to": 341
  }, {
    "from": 326,
    "label": "calls",
    "to": 341
  }, {
    "from": 326,
    "label": "calls",
    "to": 55
  }, {
    "from": 326,
    "label": "calls",
    "to": 349
  }, {
    "from": 243,
    "label": "calls",
    "to": 307
  }, {
    "from": 243,
    "label": "calls",
    "to": 307
  }, {
    "from": 243,
    "label": "calls",
    "to": 307
  }, {
    "from": 243,
    "label": "calls",
    "to": 307
  }, {
    "from": 243,
    "label": "calls",
    "to": 307
  }, {
    "from": 243,
    "label": "calls",
    "to": 307
  }, {
    "from": 243,
    "label": "calls",
    "to": 350
  }, {
    "from": 243,
    "label": "calls",
    "to": 350
  }, {
    "from": 243,
    "label": "calls",
    "to": 350
  }, {
    "from": 243,
    "label": "calls",
    "to": 350
  }, {
    "from": 243,
    "label": "calls",
    "to": 350
  }, {
    "from": 154,
    "label": "calls",
    "to": 145
  }, {
    "from": 199,
    "label": "calls",
    "to": 145
  }, {
    "from": 326,
    "label": "calls",
    "to": 145
  }, {
    "from": 305,
    "label": "calls",
    "to": 145
  }, {
    "from": 326,
    "label": "calls",
    "to": 70
  }, {
    "from": 326,
    "label": "calls",
    "to": 70
  }, {
    "from": 326,
    "label": "calls",
    "to": 70
  }, {
    "from": 307,
    "label": "calls",
    "to": 334
  }, {
    "from": 243,
    "label": "calls",
    "to": 334
  }, {
    "from": 243,
    "label": "calls",
    "to": 334
  }, {
    "from": 243,
    "label": "calls",
    "to": 334
  }, {
    "from": 243,
    "label": "calls",
    "to": 334
  }, {
    "from": 243,
    "label": "calls",
    "to": 334
  }, {
    "from": 237,
    "label": "calls",
    "to": 356
  }, {
    "from": 326,
    "label": "calls",
    "to": 355
  }, {
    "from": 199,
    "label": "calls",
    "to": 355
  }, {
    "from": 199,
    "label": "calls",
    "to": 355
  }, {
    "from": 313,
    "label": "calls",
    "to": 355
  }, {
    "from": 315,
    "label": "calls",
    "to": 355
  }, {
    "from": 326,
    "label": "calls",
    "to": 49
  }, {
    "from": 55,
    "label": "calls",
    "to": 49
  }, {
    "from": 136,
    "label": "calls",
    "to": 49
  }, {
    "from": 55,
    "label": "calls",
    "to": 339
  }, {
    "from": 55,
    "label": "calls",
    "to": 339
  }, {
    "from": 166,
    "label": "calls",
    "to": 339
  }, {
    "from": 166,
    "label": "calls",
    "to": 339
  }, {
    "from": 309,
    "label": "calls",
    "to": 339
  }, {
    "from": 309,
    "label": "calls",
    "to": 339
  }, {
    "from": 311,
    "label": "calls",
    "to": 339
  }, {
    "from": 2,
    "label": "calls",
    "to": 342
  }, {
    "from": 326,
    "label": "calls",
    "to": 342
  }, {
    "from": 326,
    "label": "calls",
    "to": 342
  }, {
    "from": 199,
    "label": "calls",
    "to": 156
  }, {
    "from": 199,
    "label": "calls",
    "to": 156
  }, {
    "from": 199,
    "label": "calls",
    "to": 156
  }, {
    "from": 199,
    "label": "calls",
    "to": 156
  }, {
    "from": 326,
    "label": "calls",
    "to": 156
  }, {
    "from": 30,
    "label": "calls",
    "to": 343
  }, {
    "from": 33,
    "label": "calls",
    "to": 343
  }, {
    "from": 45,
    "label": "calls",
    "to": 343
  }, {
    "from": 145,
    "label": "calls",
    "to": 343
  }, {
    "from": 156,
    "label": "calls",
    "to": 343
  }, {
    "from": 166,
    "label": "calls",
    "to": 343
  }, {
    "from": 326,
    "label": "calls",
    "to": 343
  }, {
    "from": 326,
    "label": "calls",
    "to": 343
  }, {
    "from": 243,
    "label": "calls",
    "to": 333
  }, {
    "from": 243,
    "label": "calls",
    "to": 333
  }, {
    "from": 136,
    "label": "calls",
    "to": 344
  }, {
    "from": 243,
    "label": "calls",
    "to": 344
  }, {
    "from": 326,
    "label": "calls",
    "to": 2
  }, {
    "from": 66,
    "label": "calls",
    "to": 61
  }, {
    "from": 70,
    "label": "calls",
    "to": 61
  }, {
    "from": 326,
    "label": "calls",
    "to": 61
  }, {
    "from": 326,
    "label": "calls",
    "to": 345
  }, {
    "from": 199,
    "label": "calls",
    "to": 224
  }, {
    "from": 199,
    "label": "calls",
    "to": 224
  }, {
    "from": 240,
    "label": "calls",
    "to": 224
  }, {
    "from": 163,
    "label": "calls",
    "to": 347
  }, {
    "from": 163,
    "label": "calls",
    "to": 347
  }, {
    "from": 163,
    "label": "calls",
    "to": 347
  }, {
    "from": 163,
    "label": "calls",
    "to": 347
  }, {
    "from": 2,
    "label": "calls",
    "to": 346
  }, {
    "from": 16,
    "label": "calls",
    "to": 346
  }, {
    "from": 163,
    "label": "calls",
    "to": 346
  }, {
    "from": 163,
    "label": "calls",
    "to": 346
  }, {
    "from": 163,
    "label": "calls",
    "to": 346
  }, {
    "from": 163,
    "label": "calls",
    "to": 346
  }, {
    "from": 163,
    "label": "calls",
    "to": 346
  }, {
    "from": 163,
    "label": "calls",
    "to": 346
  }, {
    "from": 163,
    "label": "calls",
    "to": 346
  }, {
    "from": 163,
    "label": "calls",
    "to": 346
  }, {
    "from": 163,
    "label": "calls",
    "to": 346
  }, {
    "from": 33,
    "label": "calls",
    "to": 30
  }, {
    "from": 33,
    "label": "calls",
    "to": 30
  }, {
    "from": 33,
    "label": "calls",
    "to": 30
  }, {
    "from": 33,
    "label": "calls",
    "to": 30
  }, {
    "from": 33,
    "label": "calls",
    "to": 30
  }, {
    "from": 33,
    "label": "calls",
    "to": 30
  }, {
    "from": 33,
    "label": "calls",
    "to": 30
  }, {
    "from": 33,
    "label": "calls",
    "to": 30
  }, {
    "from": 33,
    "label": "calls",
    "to": 30
  }, {
    "from": 53,
    "label": "calls",
    "to": 30
  }, {
    "from": 70,
    "label": "calls",
    "to": 33
  }, {
    "from": 326,
    "label": "calls",
    "to": 33
  }, {
    "from": 49,
    "label": "calls",
    "to": 354
  }, {
    "from": 243,
    "label": "calls",
    "to": 329
  }, {
    "from": 16,
    "label": "calls",
    "to": 348
  }, {
    "from": 49,
    "label": "calls",
    "to": 338
  }, {
    "from": 53,
    "label": "calls",
    "to": 338
  }, {
    "from": 61,
    "label": "calls",
    "to": 351
  }, {
    "from": 243,
    "label": "calls",
    "to": 331
  }, {
    "from": 243,
    "label": "calls",
    "to": 331
  }, {
    "from": 243,
    "label": "calls",
    "to": 331
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 243,
    "label": "calls",
    "to": 353
  }, {
    "from": 307,
    "label": "calls",
    "to": 332
  }, {
    "from": 243,
    "label": "calls",
    "to": 332
  }, {
    "from": 243,
    "label": "calls",
    "to": 332
  }, {
    "from": 243,
    "label": "calls",
    "to": 332
  }, {
    "from": 326,
    "label": "calls",
    "to": 166
  }, {
    "from": 307,
    "label": "calls",
    "to": 328
  }, {
    "from": 243,
    "label": "calls",
    "to": 328
  }, {
    "from": 243,
    "label": "calls",
    "to": 328
  }, {
    "from": 243,
    "label": "calls",
    "to": 328
  }, {
    "from": 243,
    "label": "calls",
    "to": 328
  }, {
    "from": 243,
    "label": "calls",
    "to": 328
  }, {
    "from": 243,
    "label": "calls",
    "to": 328
  }, {
    "from": 70,
    "label": "calls",
    "to": 81
  }, {
    "from": 326,
    "label": "calls",
    "to": 81
  }, {
    "from": 136,
    "label": "calls",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 357
  }, {
    "from": 2,
    "label": "calls",
    "to": 357
  }, {
    "from": 70,
    "label": "calls",
    "to": 357
  }, {
    "from": 326,
    "label": "calls",
    "to": 357
  }, {
    "from": 326,
    "label": "calls",
    "to": 357
  }, {
    "from": 326,
    "label": "calls",
    "to": 357
  }, {
    "from": 326,
    "label": "calls",
    "to": 358
  }, {
    "from": 243,
    "label": "calls",
    "to": 358
  }, {
    "from": 136,
    "label": "calls",
    "to": 359
  }, {
    "from": 166,
    "label": "calls",
    "to": 359
  }, {
    "from": 166,
    "label": "calls",
    "to": 154
  }, {
    "from": 199,
    "label": "calls",
    "to": 154
  }, {
    "from": 199,
    "label": "calls",
    "to": 154
  }, {
    "from": 199,
    "label": "calls",
    "to": 154
  }, {
    "from": 199,
    "label": "calls",
    "to": 154
  }, {
    "from": 1,
    "label": "contains",
    "to": 326
  }, {
    "from": 326,
    "label": "declares",
    "to": 2
  }, {
    "from": 326,
    "label": "declares",
    "to": 16
  }, {
    "from": 326,
    "label": "declares",
    "to": 30
  }, {
    "from": 326,
    "label": "declares",
    "to": 33
  }, {
    "from": 326,
    "label": "declares",
    "to": 45
  }, {
    "from": 326,
    "label": "declares",
    "to": 49
  }, {
    "from": 326,
    "label": "declares",
    "to": 53
  }, {
    "from": 326,
    "label": "declares",
    "to": 55
  }, {
    "from": 326,
    "label": "declares",
    "to": 61
  }, {
    "from": 326,
    "label": "declares",
    "to": 66
  }, {
    "from": 326,
    "label": "declares",
    "to": 70
  }, {
    "from": 326,
    "label": "declares",
    "to": 81
  }, {
    "from": 326,
    "label": "declares",
    "to": 136
  }, {
    "from": 326,
    "label": "declares",
    "to": 145
  }, {
    "from": 326,
    "label": "declares",
    "to": 154
  }, {
    "from": 326,
    "label": "declares",
    "to": 156
  }, {
    "from": 326,
    "label": "declares",
    "to": 163
  }, {
    "from": 326,
    "label": "declares",
    "to": 166
  }, {
    "from": 326,
    "label": "declares",
    "to": 199
  }, {
    "from": 326,
    "label": "declares",
    "to": 224
  }, {
    "from": 326,
    "label": "declares",
    "to": 237
  }, {
    "from": 326,
    "label": "declares",
    "to": 240
  }, {
    "from": 326,
    "label": "declares",
    "to": 243
  }, {
    "from": 326,
    "label": "declares",
    "to": 305
  }, {
    "from": 326,
    "label": "declares",
    "to": 307
  }, {
    "from": 326,
    "label": "declares",
    "to": 309
  }, {
    "from": 326,
    "label": "declares",
    "to": 311
  }, {
    "from": 326,
    "label": "declares",
    "to": 313
  }, {
    "from": 326,
    "label": "declares",
    "to": 315
  }, {
    "from": 326,
    "label": "declares",
    "to": 317
  }, {
    "from": 326,
    "label": "declares",
    "to": 319
  }, {
    "from": 326,
    "label": "declares",
    "to": 320
  }, {
    "from": 326,
    "label": "declares",
    "to": 325
  }, {
    "from": 1,
    "label": "contains",
    "to": 361
  }, {
    "from": 1,
    "label": "contains",
    "to": 362
  }, {
    "from": 361,
    "label": "initializes",
    "to": 363
  }, {
    "from": 363,
    "label": "assigns",
    "to": 364
  }, {
    "from": 361,
    "label": "initializes",
    "to": 365
  }, {
    "from": 365,
    "label": "assigns",
    "to": 366
  }, {
    "from": 361,
    "label": "initializes",
    "to": 367
  }, {
    "from": 367,
    "label": "assigns",
    "to": 368
  }, {
    "from": 361,
    "label": "initializes",
    "to": 369
  }, {
    "from": 369,
    "label": "assigns",
    "to": 370
  }, {
    "from": 361,
    "label": "initializes",
    "to": 371
  }, {
    "from": 371,
    "label": "assigns",
    "to": 372
  }, {
    "from": 361,
    "label": "initializes",
    "to": 373
  }, {
    "from": 373,
    "label": "assigns",
    "to": 374
  }, {
    "from": 361,
    "label": "initializes",
    "to": 375
  }, {
    "from": 375,
    "label": "assigns",
    "to": 376
  }, {
    "from": 361,
    "label": "initializes",
    "to": 377
  }, {
    "from": 377,
    "label": "assigns",
    "to": 378
  }, {
    "from": 361,
    "label": "initializes",
    "to": 379
  }, {
    "from": 379,
    "label": "assigns",
    "to": 380
  }, {
    "from": 361,
    "label": "initializes",
    "to": 381
  }, {
    "from": 381,
    "label": "assigns",
    "to": 382
  }, {
    "from": 361,
    "label": "initializes",
    "to": 383
  }, {
    "from": 383,
    "label": "assigns",
    "to": 384
  }, {
    "from": 361,
    "label": "initializes",
    "to": 385
  }, {
    "from": 385,
    "label": "assigns",
    "to": 386
  }, {
    "from": 361,
    "label": "initializes",
    "to": 387
  }, {
    "from": 387,
    "label": "assigns",
    "to": 388
  }, {
    "from": 361,
    "label": "initializes",
    "to": 389
  }, {
    "from": 389,
    "label": "assigns",
    "to": 390
  }, {
    "from": 361,
    "label": "initializes",
    "to": 391
  }, {
    "from": 391,
    "label": "assigns",
    "to": 392
  }, {
    "from": 361,
    "label": "initializes",
    "to": 393
  }, {
    "from": 393,
    "label": "assigns",
    "to": 394
  }, {
    "from": 361,
    "label": "initializes",
    "to": 395
  }, {
    "from": 395,
    "label": "assigns",
    "to": 396
  }, {
    "from": 361,
    "label": "initializes",
    "to": 397
  }, {
    "from": 397,
    "label": "assigns",
    "to": 398
  }, {
    "from": 361,
    "label": "initializes",
    "to": 399
  }, {
    "from": 399,
    "label": "assigns",
    "to": 400
  }, {
    "from": 361,
    "label": "initializes",
    "to": 401
  }, {
    "from": 401,
    "label": "assigns",
    "to": 402
  }, {
    "from": 361,
    "label": "initializes",
    "to": 403
  }, {
    "from": 403,
    "label": "assigns",
    "to": 404
  }, {
    "from": 361,
    "label": "initializes",
    "to": 405
  }, {
    "from": 405,
    "label": "assigns",
    "to": 406
  }, {
    "from": 361,
    "label": "initializes",
    "to": 407
  }, {
    "from": 407,
    "label": "assigns",
    "to": 408
  }, {
    "from": 361,
    "label": "initializes",
    "to": 409
  }, {
    "from": 409,
    "label": "assigns",
    "to": 410
  }, {
    "from": 361,
    "label": "initializes",
    "to": 411
  }, {
    "from": 411,
    "label": "assigns",
    "to": 412
  }, {
    "from": 361,
    "label": "initializes",
    "to": 413
  }, {
    "from": 413,
    "label": "assigns",
    "to": 414
  }, {
    "from": 361,
    "label": "initializes",
    "to": 415
  }, {
    "from": 415,
    "label": "assigns",
    "to": 416
  }, {
    "from": 416,
    "label": "assigns",
    "to": 417
  }, {
    "from": 417,
    "label": "assigns",
    "to": 418
  }, {
    "from": 361,
    "label": "initializes",
    "to": 419
  }, {
    "from": 419,
    "label": "assigns",
    "to": 420
  }, {
    "from": 361,
    "label": "initializes",
    "to": 421
  }, {
    "from": 421,
    "label": "assigns",
    "to": 422
  }, {
    "from": 422,
    "label": "assigns",
    "to": 423
  }, {
    "from": 423,
    "label": "assigns",
    "to": 424
  }, {
    "from": 422,
    "label": "assigns",
    "to": 425
  }, {
    "from": 425,
    "label": "assigns",
    "to": 426
  }, {
    "from": 422,
    "label": "assigns",
    "to": 427
  }, {
    "from": 427,
    "label": "assigns",
    "to": 428
  }, {
    "from": 422,
    "label": "assigns",
    "to": 429
  }, {
    "from": 429,
    "label": "assigns",
    "to": 430
  }, {
    "from": 422,
    "label": "assigns",
    "to": 431
  }, {
    "from": 431,
    "label": "assigns",
    "to": 432
  }, {
    "from": 422,
    "label": "assigns",
    "to": 433
  }, {
    "from": 433,
    "label": "assigns",
    "to": 434
  }, {
    "from": 422,
    "label": "assigns",
    "to": 435
  }, {
    "from": 435,
    "label": "assigns",
    "to": 436
  }, {
    "from": 361,
    "label": "initializes",
    "to": 437
  }, {
    "from": 361,
    "label": "initializes",
    "to": 438
  }, {
    "from": 361,
    "label": "initializes",
    "to": 439
  }, {
    "from": 361,
    "label": "initializes",
    "to": 440
  }, {
    "from": 440,
    "label": "assigns",
    "to": 441
  }, {
    "from": 441,
    "label": "assigns",
    "to": 442
  }, {
    "from": 442,
    "label": "assigns",
    "to": 443
  }, {
    "from": 441,
    "label": "assigns",
    "to": 444
  }, {
    "from": 444,
    "label": "assigns",
    "to": 445
  }, {
    "from": 441,
    "label": "assigns",
    "to": 446
  }, {
    "from": 446,
    "label": "assigns",
    "to": 447
  }, {
    "from": 441,
    "label": "assigns",
    "to": 448
  }, {
    "from": 448,
    "label": "assigns",
    "to": 449
  }, {
    "from": 441,
    "label": "assigns",
    "to": 450
  }, {
    "from": 450,
    "label": "assigns",
    "to": 451
  }, {
    "from": 441,
    "label": "assigns",
    "to": 452
  }, {
    "from": 452,
    "label": "assigns",
    "to": 453
  }, {
    "from": 441,
    "label": "assigns",
    "to": 454
  }, {
    "from": 454,
    "label": "assigns",
    "to": 455
  }, {
    "from": 441,
    "label": "assigns",
    "to": 456
  }, {
    "from": 456,
    "label": "assigns",
    "to": 457
  }, {
    "from": 361,
    "label": "initializes",
    "to": 458
  }, {
    "from": 361,
    "label": "initializes",
    "to": 459
  }, {
    "from": 459,
    "label": "assigns",
    "to": 460
  }, {
    "from": 361,
    "label": "initializes",
    "to": 461
  }, {
    "from": 461,
    "label": "assigns",
    "to": 462
  }, {
    "from": 361,
    "label": "initializes",
    "to": 463
  }, {
    "from": 463,
    "label": "assigns",
    "to": 464
  }, {
    "from": 361,
    "label": "initializes",
    "to": 465
  }, {
    "from": 465,
    "label": "assigns",
    "to": 466
  }, {
    "from": 362,
    "label": "initializes",
    "to": 467
  }, {
    "from": 467,
    "label": "requires",
    "to": 468
  }, {
    "from": 1,
    "label": "provides",
    "to": 469
  }, {
    "from": 415,
    "label": "represents",
    "to": 470
  }, {
    "from": 469,
    "label": "provides",
    "to": 470
  }, {
    "from": 471,
    "label": "requires",
    "to": 1
  }, {
    "from": 472,
    "label": "requires",
    "to": 1
  }, {
    "from": 473,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dkjson",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function isarray (tbl)\r\n  local max, n, arraylen = 0, 0, 0\r\n  for k,v in pairs (tbl) do\r\n    if k == 'n' and type(v) == 'number' then\r\n      arraylen = v\r\n      if v > max then\r\n        max = v\r\n      end\r\n    else\r\n      if type(k) ~= 'number' or k < 1 or floor(k) ~= k then\r\n        return false\r\n      end\r\n      if k > max then\r\n        max = k\r\n      end\r\n      n = n + 1\r\n    end\r\n  end\r\n  if max > 10 and max > arraylen and max > n * 2 then\r\n    return false -- don't create an array with too many holes\r\n  end\r\n  return true, max\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local max, n, arraylen = 0, 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for k,v in pairs (tbl) do\r\n    if k == 'n' and type(v) == 'number' then\r\n      arraylen = v\r\n      if v > max then\r\n        max = v\r\n      end\r\n    else\r\n      if type(k) ~= 'number' or k < 1 or floor(k) ~= k then\r\n        return false\r\n      end\r\n      if k > max then\r\n        max = k\r\n      end\r\n      n = n + 1\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "if k == 'n' and type(v) == 'number' then\r\n      arraylen = v\r\n      if v > max then\r\n        max = v\r\n      end\r\n    else\r\n      if type(k) ~= 'number' or k < 1 or floor(k) ~= k then\r\n        return false\r\n      end\r\n      if k > max then\r\n        max = k\r\n      end\r\n      n = n + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "arraylen = v",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if v > max then\r\n        max = v\r\n      end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "max = v",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if type(k) ~= 'number' or k < 1 or floor(k) ~= k then\r\n        return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "if k > max then\r\n        max = k\r\n      end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "max = k",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "if max > 10 and max > arraylen and max > n * 2 then\r\n    return false -- don't create an array with too many holes\r\n  end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function escapeutf8 (uchar)\r\n  local value = escapecodes[uchar]\r\n  if value then\r\n    return value\r\n  end\r\n  local a, b, c, d = strbyte (uchar, 1, 4)\r\n  a, b, c, d = a or 0, b or 0, c or 0, d or 0\r\n  if a <= 0x7f then\r\n    value = a\r\n  elseif 0xc0 <= a and a <= 0xdf and b >= 0x80 then\r\n    value = (a - 0xc0) * 0x40 + b - 0x80\r\n  elseif 0xe0 <= a and a <= 0xef and b >= 0x80 and c >= 0x80 then\r\n    value = ((a - 0xe0) * 0x40 + b - 0x80) * 0x40 + c - 0x80\r\n  elseif 0xf0 <= a and a <= 0xf7 and b >= 0x80 and c >= 0x80 and d >= 0x80 then\r\n    value = (((a - 0xf0) * 0x40 + b - 0x80) * 0x40 + c - 0x80) * 0x40 + d - 0x80\r\n  else\r\n    return \"\"\r\n  end\r\n  if value <= 0xffff then\r\n    return strformat (\"\\\\u%.4x\", value)\r\n  elseif value <= 0x10ffff then\r\n    -- encode as UTF-16 surrogate pair\r\n    value = value - 0x10000\r\n    local highsur, lowsur = 0xD800 + floor (value/0x400), 0xDC00 + (value % 0x400)\r\n    return strformat (\"\\\\u%.4x\\\\u%.4x\", highsur, lowsur)\r\n  else\r\n    return \"\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local value = escapecodes[uchar]",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if value then\r\n    return value\r\n  end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "local a, b, c, d = strbyte (uchar, 1, 4)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "a, b, c, d = a or 0, b or 0, c or 0, d or 0",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if a <= 0x7f then\r\n    value = a\r\n  elseif 0xc0 <= a and a <= 0xdf and b >= 0x80 then\r\n    value = (a - 0xc0) * 0x40 + b - 0x80\r\n  elseif 0xe0 <= a and a <= 0xef and b >= 0x80 and c >= 0x80 then\r\n    value = ((a - 0xe0) * 0x40 + b - 0x80) * 0x40 + c - 0x80\r\n  elseif 0xf0 <= a and a <= 0xf7 and b >= 0x80 and c >= 0x80 and d >= 0x80 then\r\n    value = (((a - 0xf0) * 0x40 + b - 0x80) * 0x40 + c - 0x80) * 0x40 + d - 0x80\r\n  else\r\n    return \"\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "value = a",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "value = (a - 0xc0) * 0x40 + b - 0x80",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "value = ((a - 0xe0) * 0x40 + b - 0x80) * 0x40 + c - 0x80",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "value = (((a - 0xf0) * 0x40 + b - 0x80) * 0x40 + c - 0x80) * 0x40 + d - 0x80",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if value <= 0xffff then\r\n    return strformat (\"\\\\u%.4x\", value)\r\n  elseif value <= 0x10ffff then\r\n    -- encode as UTF-16 surrogate pair\r\n    value = value - 0x10000\r\n    local highsur, lowsur = 0xD800 + floor (value/0x400), 0xDC00 + (value % 0x400)\r\n    return strformat (\"\\\\u%.4x\\\\u%.4x\", highsur, lowsur)\r\n  else\r\n    return \"\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "value = value - 0x10000",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local highsur, lowsur = 0xD800 + floor (value/0x400), 0xDC00 + (value % 0x400)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function fsub (str, pattern, repl)\r\n  -- gsub always builds a new string in a buffer, even when no match\r\n  -- exists. First using find should be more efficient when most strings\r\n  -- don't contain the pattern.\r\n  if strfind (str, pattern) then\r\n    return gsub (str, pattern, repl)\r\n  else\r\n    return str\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if strfind (str, pattern) then\r\n    return gsub (str, pattern, repl)\r\n  else\r\n    return str\r\n  end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function quotestring (value)\r\n  -- based on the regexp \"escapable\" in https://github.com/douglascrockford/JSON-js\r\n  value = fsub (value, \"[%z\\1-\\31\\\"\\\\\\127]\", escapeutf8)\r\n  if strfind (value, \"[\\194\\216\\220\\225\\226\\239]\") then\r\n    value = fsub (value, \"\\194[\\128-\\159\\173]\", escapeutf8)\r\n    value = fsub (value, \"\\216[\\128-\\132]\", escapeutf8)\r\n    value = fsub (value, \"\\220\\143\", escapeutf8)\r\n    value = fsub (value, \"\\225\\158[\\180\\181]\", escapeutf8)\r\n    value = fsub (value, \"\\226\\128[\\140-\\143\\168-\\175]\", escapeutf8)\r\n    value = fsub (value, \"\\226\\129[\\160-\\175]\", escapeutf8)\r\n    value = fsub (value, \"\\239\\187\\191\", escapeutf8)\r\n    value = fsub (value, \"\\239\\191[\\176-\\191]\", escapeutf8)\r\n  end\r\n  return \"\\\"\" .. value .. \"\\\"\"\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "value = fsub (value, \"[%z\\1-\\31\\\"\\\\\\127]\", escapeutf8)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if strfind (value, \"[\\194\\216\\220\\225\\226\\239]\") then\r\n    value = fsub (value, \"\\194[\\128-\\159\\173]\", escapeutf8)\r\n    value = fsub (value, \"\\216[\\128-\\132]\", escapeutf8)\r\n    value = fsub (value, \"\\220\\143\", escapeutf8)\r\n    value = fsub (value, \"\\225\\158[\\180\\181]\", escapeutf8)\r\n    value = fsub (value, \"\\226\\128[\\140-\\143\\168-\\175]\", escapeutf8)\r\n    value = fsub (value, \"\\226\\129[\\160-\\175]\", escapeutf8)\r\n    value = fsub (value, \"\\239\\187\\191\", escapeutf8)\r\n    value = fsub (value, \"\\239\\191[\\176-\\191]\", escapeutf8)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "value = fsub (value, \"\\194[\\128-\\159\\173]\", escapeutf8)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "value = fsub (value, \"\\216[\\128-\\132]\", escapeutf8)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "value = fsub (value, \"\\220\\143\", escapeutf8)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "value = fsub (value, \"\\225\\158[\\180\\181]\", escapeutf8)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "value = fsub (value, \"\\226\\128[\\140-\\143\\168-\\175]\", escapeutf8)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "value = fsub (value, \"\\226\\129[\\160-\\175]\", escapeutf8)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "value = fsub (value, \"\\239\\187\\191\", escapeutf8)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "value = fsub (value, \"\\239\\191[\\176-\\191]\", escapeutf8)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function replace(str, o, n)\r\n  local i, j = strfind (str, o, 1, true)\r\n  if i then\r\n    return strsub(str, 1, i-1) .. n .. strsub(str, j+1, -1)\r\n  else\r\n    return str\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local i, j = strfind (str, o, 1, true)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if i then\r\n    return strsub(str, 1, i-1) .. n .. strsub(str, j+1, -1)\r\n  else\r\n    return str\r\n  end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function updatedecpoint ()\r\n  decpoint = strmatch(tostring(0.5), \"([^05+])\")\r\n  -- build a filter that can be used to remove group separators\r\n  numfilter = \"[^0-9%-%+eE\" .. gsub(decpoint, \"[%^%$%(%)%%%.%[%]%*%+%-%?]\", \"%%%0\") .. \"]+\"\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "decpoint = strmatch(tostring(0.5), \"([^05+])\")",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "numfilter = \"[^0-9%-%+eE\" .. gsub(decpoint, \"[%^%$%(%)%%%.%[%]%*%+%-%?]\", \"%%%0\") .. \"]+\"",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function num2str (num)\r\n  return replace(fsub(tostring(num), numfilter, \"\"), decpoint, \".\")\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function str2num (str)\r\n  local num = tonumber(replace(str, \".\", decpoint))\r\n  if not num then\r\n    updatedecpoint()\r\n    num = tonumber(replace(str, \".\", decpoint))\r\n  end\r\n  return num\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local num = tonumber(replace(str, \".\", decpoint))",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if not num then\r\n    updatedecpoint()\r\n    num = tonumber(replace(str, \".\", decpoint))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "updatedecpoint()",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "num = tonumber(replace(str, \".\", decpoint))",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function addnewline2 (level, buffer, buflen)\r\n  buffer[buflen+1] = \"\\n\"\r\n  buffer[buflen+2] = strrep (\"  \", level)\r\n  buflen = buflen + 2\r\n  return buflen\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "buffer[buflen+1] = \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "buffer[buflen+2] = strrep (\"  \", level)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "buflen = buflen + 2",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function json.addnewline (state)\r\n  if state.indent then\r\n    state.bufferlen = addnewline2 (state.level or 0,\r\n                           state.buffer, state.bufferlen or #(state.buffer))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "if state.indent then\r\n    state.bufferlen = addnewline2 (state.level or 0,\r\n                           state.buffer, state.bufferlen or #(state.buffer))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "state.bufferlen = addnewline2 (state.level or 0,\r\n                           state.buffer, state.bufferlen or #(state.buffer))",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function addpair (key, value, prev, indent, level, buffer, buflen, tables, globalorder)\r\n  local kt = type (key)\r\n  if kt ~= 'string' and kt ~= 'number' then\r\n    return nil, \"type '\" .. kt .. \"' is not supported as a key by JSON.\"\r\n  end\r\n  if prev then\r\n    buflen = buflen + 1\r\n    buffer[buflen] = \",\"\r\n  end\r\n  if indent then\r\n    buflen = addnewline2 (level, buffer, buflen)\r\n  end\r\n  buffer[buflen+1] = quotestring (key)\r\n  buffer[buflen+2] = \":\"\r\n  return encode2 (value, indent, level, buffer, buflen + 2, tables, globalorder)\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local kt = type (key)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if kt ~= 'string' and kt ~= 'number' then\r\n    return nil, \"type '\" .. kt .. \"' is not supported as a key by JSON.\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "if prev then\r\n    buflen = buflen + 1\r\n    buffer[buflen] = \",\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "buflen = buflen + 1",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "buffer[buflen] = \",\"",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if indent then\r\n    buflen = addnewline2 (level, buffer, buflen)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "buflen = addnewline2 (level, buffer, buflen)",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "buffer[buflen+1] = quotestring (key)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "buffer[buflen+2] = \":\"",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function (value, indent, level, buffer, buflen, tables, globalorder)\r\n  local valtype = type (value)\r\n  local valmeta = getmetatable (value)\r\n  valmeta = type (valmeta) == 'table' and valmeta -- only tables\r\n  local valtojson = valmeta and valmeta.__tojson\r\n  if valtojson then\r\n    if tables[value] then\r\n      return nil, \"reference cycle\"\r\n    end\r\n    tables[value] = true\r\n    local state = {\r\n        indent = indent, level = level, buffer = buffer,\r\n        bufferlen = buflen, tables = tables, keyorder = globalorder\r\n    }\r\n    local ret, msg = valtojson (value, state)\r\n    if not ret then return nil, msg end\r\n    tables[value] = nil\r\n    buflen = state.bufferlen\r\n    if type (ret) == 'string' then\r\n      buflen = buflen + 1\r\n      buffer[buflen] = ret\r\n    end\r\n  elseif value == nil then\r\n    buflen = buflen + 1\r\n    buffer[buflen] = \"null\"\r\n  elseif valtype == 'number' then\r\n    local s\r\n    if value ~= value or value >= huge or -value >= huge then\r\n      -- This is the behaviour of the original JSON implementation.\r\n      s = \"null\"\r\n    else\r\n      s = num2str (value)\r\n    end\r\n    buflen = buflen + 1\r\n    buffer[buflen] = s\r\n  elseif valtype == 'boolean' then\r\n    buflen = buflen + 1\r\n    buffer[buflen] = value and \"true\" or \"false\"\r\n  elseif valtype == 'string' then\r\n    buflen = buflen + 1\r\n    buffer[buflen] = quotestring (value)\r\n  elseif valtype == 'table' then\r\n    if tables[value] then\r\n      return nil, \"reference cycle\"\r\n    end\r\n    tables[value] = true\r\n    level = level + 1\r\n    local isa, n = isarray (value)\r\n    if n == 0 and valmeta and valmeta.__jsontype == 'object' then\r\n      isa = false\r\n    end\r\n    local msg\r\n    if isa then -- JSON array\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"[\"\r\n      for i = 1, n do\r\n        buflen, msg = encode2 (value[i], indent, level, buffer, buflen, tables, globalorder)\r\n        if not buflen then return nil, msg end\r\n        if i < n then\r\n          buflen = buflen + 1\r\n          buffer[buflen] = \",\"\r\n        end\r\n      end\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"]\"\r\n    else -- JSON object\r\n      local prev = false\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"{\"\r\n      local order = valmeta and valmeta.__jsonorder or globalorder\r\n      if order then\r\n        local used = {}\r\n        n = #order\r\n        for i = 1, n do\r\n          local k = order[i]\r\n          local v = value[k]\r\n          if v then\r\n            used[k] = true\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end\r\n        for k,v in pairs (value) do\r\n          if not used[k] then\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            if not buflen then return nil, msg end\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end\r\n      else -- unordered\r\n        for k,v in pairs (value) do\r\n          buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n          if not buflen then return nil, msg end\r\n          prev = true -- add a seperator before the next element\r\n        end\r\n      end\r\n      if indent then\r\n        buflen = addnewline2 (level - 1, buffer, buflen)\r\n      end\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"}\"\r\n    end\r\n    tables[value] = nil\r\n  else\r\n    return nil, \"type '\" .. valtype .. \"' is not supported by JSON.\"\r\n  end\r\n  return buflen\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "local valtype = type (value)",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local valmeta = getmetatable (value)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "valmeta = type (valmeta) == 'table' and valmeta",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "local valtojson = valmeta and valmeta.__tojson",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if valtojson then\r\n    if tables[value] then\r\n      return nil, \"reference cycle\"\r\n    end\r\n    tables[value] = true\r\n    local state = {\r\n        indent = indent, level = level, buffer = buffer,\r\n        bufferlen = buflen, tables = tables, keyorder = globalorder\r\n    }\r\n    local ret, msg = valtojson (value, state)\r\n    if not ret then return nil, msg end\r\n    tables[value] = nil\r\n    buflen = state.bufferlen\r\n    if type (ret) == 'string' then\r\n      buflen = buflen + 1\r\n      buffer[buflen] = ret\r\n    end\r\n  elseif value == nil then\r\n    buflen = buflen + 1\r\n    buffer[buflen] = \"null\"\r\n  elseif valtype == 'number' then\r\n    local s\r\n    if value ~= value or value >= huge or -value >= huge then\r\n      -- This is the behaviour of the original JSON implementation.\r\n      s = \"null\"\r\n    else\r\n      s = num2str (value)\r\n    end\r\n    buflen = buflen + 1\r\n    buffer[buflen] = s\r\n  elseif valtype == 'boolean' then\r\n    buflen = buflen + 1\r\n    buffer[buflen] = value and \"true\" or \"false\"\r\n  elseif valtype == 'string' then\r\n    buflen = buflen + 1\r\n    buffer[buflen] = quotestring (value)\r\n  elseif valtype == 'table' then\r\n    if tables[value] then\r\n      return nil, \"reference cycle\"\r\n    end\r\n    tables[value] = true\r\n    level = level + 1\r\n    local isa, n = isarray (value)\r\n    if n == 0 and valmeta and valmeta.__jsontype == 'object' then\r\n      isa = false\r\n    end\r\n    local msg\r\n    if isa then -- JSON array\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"[\"\r\n      for i = 1, n do\r\n        buflen, msg = encode2 (value[i], indent, level, buffer, buflen, tables, globalorder)\r\n        if not buflen then return nil, msg end\r\n        if i < n then\r\n          buflen = buflen + 1\r\n          buffer[buflen] = \",\"\r\n        end\r\n      end\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"]\"\r\n    else -- JSON object\r\n      local prev = false\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"{\"\r\n      local order = valmeta and valmeta.__jsonorder or globalorder\r\n      if order then\r\n        local used = {}\r\n        n = #order\r\n        for i = 1, n do\r\n          local k = order[i]\r\n          local v = value[k]\r\n          if v then\r\n            used[k] = true\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end\r\n        for k,v in pairs (value) do\r\n          if not used[k] then\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            if not buflen then return nil, msg end\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end\r\n      else -- unordered\r\n        for k,v in pairs (value) do\r\n          buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n          if not buflen then return nil, msg end\r\n          prev = true -- add a seperator before the next element\r\n        end\r\n      end\r\n      if indent then\r\n        buflen = addnewline2 (level - 1, buffer, buflen)\r\n      end\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"}\"\r\n    end\r\n    tables[value] = nil\r\n  else\r\n    return nil, \"type '\" .. valtype .. \"' is not supported by JSON.\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "if tables[value] then\r\n      return nil, \"reference cycle\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "tables[value] = true",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "local state = {\r\n        indent = indent, level = level, buffer = buffer,\r\n        bufferlen = buflen, tables = tables, keyorder = globalorder\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local ret, msg = valtojson (value, state)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if not ret then return nil, msg end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "tables[value] = nil",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "buflen = state.bufferlen",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "if type (ret) == 'string' then\r\n      buflen = buflen + 1\r\n      buffer[buflen] = ret\r\n    end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "buffer[buflen] = ret",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "buffer[buflen] = \"null\"",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "local s",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if value ~= value or value >= huge or -value >= huge then\r\n      -- This is the behaviour of the original JSON implementation.\r\n      s = \"null\"\r\n    else\r\n      s = num2str (value)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "s = \"null\"",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "s = num2str (value)",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "buffer[buflen] = s",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "buffer[buflen] = value and \"true\" or \"false\"",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "buffer[buflen] = quotestring (value)",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "level = level + 1",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "local isa, n = isarray (value)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if n == 0 and valmeta and valmeta.__jsontype == 'object' then\r\n      isa = false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "isa = false",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "local msg",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if isa then -- JSON array\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"[\"\r\n      for i = 1, n do\r\n        buflen, msg = encode2 (value[i], indent, level, buffer, buflen, tables, globalorder)\r\n        if not buflen then return nil, msg end\r\n        if i < n then\r\n          buflen = buflen + 1\r\n          buffer[buflen] = \",\"\r\n        end\r\n      end\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"]\"\r\n    else -- JSON object\r\n      local prev = false\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"{\"\r\n      local order = valmeta and valmeta.__jsonorder or globalorder\r\n      if order then\r\n        local used = {}\r\n        n = #order\r\n        for i = 1, n do\r\n          local k = order[i]\r\n          local v = value[k]\r\n          if v then\r\n            used[k] = true\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end\r\n        for k,v in pairs (value) do\r\n          if not used[k] then\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            if not buflen then return nil, msg end\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end\r\n      else -- unordered\r\n        for k,v in pairs (value) do\r\n          buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n          if not buflen then return nil, msg end\r\n          prev = true -- add a seperator before the next element\r\n        end\r\n      end\r\n      if indent then\r\n        buflen = addnewline2 (level - 1, buffer, buflen)\r\n      end\r\n      buflen = buflen + 1\r\n      buffer[buflen] = \"}\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "buffer[buflen] = \"[\"",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "for i = 1, n do\r\n        buflen, msg = encode2 (value[i], indent, level, buffer, buflen, tables, globalorder)\r\n        if not buflen then return nil, msg end\r\n        if i < n then\r\n          buflen = buflen + 1\r\n          buffer[buflen] = \",\"\r\n        end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 112,
    "text": "buflen, msg = encode2 (value[i], indent, level, buffer, buflen, tables, globalorder)",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if not buflen then return nil, msg end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "if i < n then\r\n          buflen = buflen + 1\r\n          buffer[buflen] = \",\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "buffer[buflen] = \"]\"",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "local prev = false",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "buffer[buflen] = \"{\"",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "local order = valmeta and valmeta.__jsonorder or globalorder",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if order then\r\n        local used = {}\r\n        n = #order\r\n        for i = 1, n do\r\n          local k = order[i]\r\n          local v = value[k]\r\n          if v then\r\n            used[k] = true\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end\r\n        for k,v in pairs (value) do\r\n          if not used[k] then\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            if not buflen then return nil, msg end\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end\r\n      else -- unordered\r\n        for k,v in pairs (value) do\r\n          buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n          if not buflen then return nil, msg end\r\n          prev = true -- add a seperator before the next element\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "local used = {}",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "n = #order",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "for i = 1, n do\r\n          local k = order[i]\r\n          local v = value[k]\r\n          if v then\r\n            used[k] = true\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 123,
    "text": "local k = order[i]",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "local v = value[k]",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "if v then\r\n            used[k] = true\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            prev = true -- add a seperator before the next element\r\n          end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "used[k] = true",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "prev = true",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "for k,v in pairs (value) do\r\n          if not used[k] then\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            if not buflen then return nil, msg end\r\n            prev = true -- add a seperator before the next element\r\n          end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 130,
    "text": "if not used[k] then\r\n            buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n            if not buflen then return nil, msg end\r\n            prev = true -- add a seperator before the next element\r\n          end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "for k,v in pairs (value) do\r\n          buflen, msg = addpair (k, v, prev, indent, level, buffer, buflen, tables, globalorder)\r\n          if not buflen then return nil, msg end\r\n          prev = true -- add a seperator before the next element\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 132,
    "text": "if indent then\r\n        buflen = addnewline2 (level - 1, buffer, buflen)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "buflen = addnewline2 (level - 1, buffer, buflen)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "buffer[buflen] = \"}\"",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function json.encode (value, state)\r\n  state = state or {}\r\n  local oldbuffer = state.buffer\r\n  local buffer = oldbuffer or {}\r\n  updatedecpoint()\r\n  local ret, msg = encode2 (value, state.indent, state.level or 0,\r\n                   buffer, state.bufferlen or 0, state.tables or {}, state.keyorder)\r\n  if not ret then\r\n    error (msg, 2)\r\n  elseif oldbuffer then\r\n    state.bufferlen = ret\r\n    return true\r\n  else\r\n    return concat (buffer)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "state = state or {}",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "local oldbuffer = state.buffer",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "local buffer = oldbuffer or {}",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "local ret, msg = encode2 (value, state.indent, state.level or 0,\r\n                   buffer, state.bufferlen or 0, state.tables or {}, state.keyorder)",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "if not ret then\r\n    error (msg, 2)\r\n  elseif oldbuffer then\r\n    state.bufferlen = ret\r\n    return true\r\n  else\r\n    return concat (buffer)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "error (msg, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "state.bufferlen = ret",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "local function loc (str, where)\r\n  local line, pos, linepos = 1, 1, 0\r\n  while true do\r\n    pos = strfind (str, \"\\n\", pos, true)\r\n    if pos and pos < where then\r\n      line = line + 1\r\n      linepos = pos\r\n      pos = pos + 1\r\n    else\r\n      break\r\n    end\r\n  end\r\n  return \"line \" .. line .. \", column \" .. (where - linepos)\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "local line, pos, linepos = 1, 1, 0",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "while true do\r\n    pos = strfind (str, \"\\n\", pos, true)\r\n    if pos and pos < where then\r\n      line = line + 1\r\n      linepos = pos\r\n      pos = pos + 1\r\n    else\r\n      break\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 148,
    "text": "pos = strfind (str, \"\\n\", pos, true)",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "if pos and pos < where then\r\n      line = line + 1\r\n      linepos = pos\r\n      pos = pos + 1\r\n    else\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "line = line + 1",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "linepos = pos",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "pos = pos + 1",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "local function unterminated (str, what, where)\r\n  return nil, strlen (str) + 1, \"unterminated \" .. what .. \" at \" .. loc (str, where)\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "local function scanwhite (str, pos)\r\n  while true do\r\n    pos = strfind (str, \"%S\", pos)\r\n    if not pos then return nil end\r\n    if strsub (str, pos, pos + 2) == \"\\239\\187\\191\" then\r\n      -- UTF-8 Byte Order Mark\r\n      pos = pos + 3\r\n    else\r\n      return pos\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "while true do\r\n    pos = strfind (str, \"%S\", pos)\r\n    if not pos then return nil end\r\n    if strsub (str, pos, pos + 2) == \"\\239\\187\\191\" then\r\n      -- UTF-8 Byte Order Mark\r\n      pos = pos + 3\r\n    else\r\n      return pos\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 158,
    "text": "pos = strfind (str, \"%S\", pos)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "if not pos then return nil end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "if strsub (str, pos, pos + 2) == \"\\239\\187\\191\" then\r\n      -- UTF-8 Byte Order Mark\r\n      pos = pos + 3\r\n    else\r\n      return pos\r\n    end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "pos = pos + 3",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "local function unichar (value)\r\n  if value < 0 then\r\n    return nil\r\n  elseif value <= 0x007f then\r\n    return strchar (value)\r\n  elseif value <= 0x07ff then\r\n    return strchar (0xc0 + floor(value/0x40),\r\n                    0x80 + (floor(value) % 0x40))\r\n  elseif value <= 0xffff then\r\n    return strchar (0xe0 + floor(value/0x1000),\r\n                    0x80 + (floor(value/0x40) % 0x40),\r\n                    0x80 + (floor(value) % 0x40))\r\n  elseif value <= 0x10ffff then\r\n    return strchar (0xf0 + floor(value/0x40000),\r\n                    0x80 + (floor(value/0x1000) % 0x40),\r\n                    0x80 + (floor(value/0x40) % 0x40),\r\n                    0x80 + (floor(value) % 0x40))\r\n  else\r\n    return nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "if value < 0 then\r\n    return nil\r\n  elseif value <= 0x007f then\r\n    return strchar (value)\r\n  elseif value <= 0x07ff then\r\n    return strchar (0xc0 + floor(value/0x40),\r\n                    0x80 + (floor(value) % 0x40))\r\n  elseif value <= 0xffff then\r\n    return strchar (0xe0 + floor(value/0x1000),\r\n                    0x80 + (floor(value/0x40) % 0x40),\r\n                    0x80 + (floor(value) % 0x40))\r\n  elseif value <= 0x10ffff then\r\n    return strchar (0xf0 + floor(value/0x40000),\r\n                    0x80 + (floor(value/0x1000) % 0x40),\r\n                    0x80 + (floor(value/0x40) % 0x40),\r\n                    0x80 + (floor(value) % 0x40))\r\n  else\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "local function scanstring (str, pos)\r\n  local lastpos = pos + 1\r\n  local buffer, n = {}, 0\r\n  while true do\r\n    local nextpos = strfind (str, \"[\\\"\\\\]\", lastpos)\r\n    if not nextpos then\r\n      return unterminated (str, \"string\", pos)\r\n    end\r\n    if nextpos > lastpos then\r\n      n = n + 1\r\n      buffer[n] = strsub (str, lastpos, nextpos - 1)\r\n    end\r\n    if strsub (str, nextpos, nextpos) == \"\\\"\" then\r\n      lastpos = nextpos + 1\r\n      break\r\n    else\r\n      local escchar = strsub (str, nextpos + 1, nextpos + 1)\r\n      local value\r\n      if escchar == \"u\" then\r\n        value = tonumber (strsub (str, nextpos + 2, nextpos + 5), 16)\r\n        if value then\r\n          local value2\r\n          if 0xD800 <= value and value <= 0xDBff then\r\n            -- we have the high surrogate of UTF-16. Check if there is a\r\n            -- low surrogate escaped nearby to combine them.\r\n            if strsub (str, nextpos + 6, nextpos + 7) == \"\\\\u\" then\r\n              value2 = tonumber (strsub (str, nextpos + 8, nextpos + 11), 16)\r\n              if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then\r\n                value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000\r\n              else\r\n                value2 = nil -- in case it was out of range for a low surrogate\r\n              end\r\n            end\r\n          end\r\n          value = value and unichar (value)\r\n          if value then\r\n            if value2 then\r\n              lastpos = nextpos + 12\r\n            else\r\n              lastpos = nextpos + 6\r\n            end\r\n          end\r\n        end\r\n      end\r\n      if not value then\r\n        value = escapechars[escchar] or escchar\r\n        lastpos = nextpos + 2\r\n      end\r\n      n = n + 1\r\n      buffer[n] = value\r\n    end\r\n  end\r\n  if n == 1 then\r\n    return buffer[1], lastpos\r\n  elseif n > 1 then\r\n    return concat (buffer), lastpos\r\n  else\r\n    return \"\", lastpos\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "local lastpos = pos + 1",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local buffer, n = {}, 0",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "while true do\r\n    local nextpos = strfind (str, \"[\\\"\\\\]\", lastpos)\r\n    if not nextpos then\r\n      return unterminated (str, \"string\", pos)\r\n    end\r\n    if nextpos > lastpos then\r\n      n = n + 1\r\n      buffer[n] = strsub (str, lastpos, nextpos - 1)\r\n    end\r\n    if strsub (str, nextpos, nextpos) == \"\\\"\" then\r\n      lastpos = nextpos + 1\r\n      break\r\n    else\r\n      local escchar = strsub (str, nextpos + 1, nextpos + 1)\r\n      local value\r\n      if escchar == \"u\" then\r\n        value = tonumber (strsub (str, nextpos + 2, nextpos + 5), 16)\r\n        if value then\r\n          local value2\r\n          if 0xD800 <= value and value <= 0xDBff then\r\n            -- we have the high surrogate of UTF-16. Check if there is a\r\n            -- low surrogate escaped nearby to combine them.\r\n            if strsub (str, nextpos + 6, nextpos + 7) == \"\\\\u\" then\r\n              value2 = tonumber (strsub (str, nextpos + 8, nextpos + 11), 16)\r\n              if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then\r\n                value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000\r\n              else\r\n                value2 = nil -- in case it was out of range for a low surrogate\r\n              end\r\n            end\r\n          end\r\n          value = value and unichar (value)\r\n          if value then\r\n            if value2 then\r\n              lastpos = nextpos + 12\r\n            else\r\n              lastpos = nextpos + 6\r\n            end\r\n          end\r\n        end\r\n      end\r\n      if not value then\r\n        value = escapechars[escchar] or escchar\r\n        lastpos = nextpos + 2\r\n      end\r\n      n = n + 1\r\n      buffer[n] = value\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 170,
    "text": "local nextpos = strfind (str, \"[\\\"\\\\]\", lastpos)",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "if not nextpos then\r\n      return unterminated (str, \"string\", pos)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "if nextpos > lastpos then\r\n      n = n + 1\r\n      buffer[n] = strsub (str, lastpos, nextpos - 1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "buffer[n] = strsub (str, lastpos, nextpos - 1)",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "if strsub (str, nextpos, nextpos) == \"\\\"\" then\r\n      lastpos = nextpos + 1\r\n      break\r\n    else\r\n      local escchar = strsub (str, nextpos + 1, nextpos + 1)\r\n      local value\r\n      if escchar == \"u\" then\r\n        value = tonumber (strsub (str, nextpos + 2, nextpos + 5), 16)\r\n        if value then\r\n          local value2\r\n          if 0xD800 <= value and value <= 0xDBff then\r\n            -- we have the high surrogate of UTF-16. Check if there is a\r\n            -- low surrogate escaped nearby to combine them.\r\n            if strsub (str, nextpos + 6, nextpos + 7) == \"\\\\u\" then\r\n              value2 = tonumber (strsub (str, nextpos + 8, nextpos + 11), 16)\r\n              if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then\r\n                value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000\r\n              else\r\n                value2 = nil -- in case it was out of range for a low surrogate\r\n              end\r\n            end\r\n          end\r\n          value = value and unichar (value)\r\n          if value then\r\n            if value2 then\r\n              lastpos = nextpos + 12\r\n            else\r\n              lastpos = nextpos + 6\r\n            end\r\n          end\r\n        end\r\n      end\r\n      if not value then\r\n        value = escapechars[escchar] or escchar\r\n        lastpos = nextpos + 2\r\n      end\r\n      n = n + 1\r\n      buffer[n] = value\r\n    end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "lastpos = nextpos + 1",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "local escchar = strsub (str, nextpos + 1, nextpos + 1)",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local value",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if escchar == \"u\" then\r\n        value = tonumber (strsub (str, nextpos + 2, nextpos + 5), 16)\r\n        if value then\r\n          local value2\r\n          if 0xD800 <= value and value <= 0xDBff then\r\n            -- we have the high surrogate of UTF-16. Check if there is a\r\n            -- low surrogate escaped nearby to combine them.\r\n            if strsub (str, nextpos + 6, nextpos + 7) == \"\\\\u\" then\r\n              value2 = tonumber (strsub (str, nextpos + 8, nextpos + 11), 16)\r\n              if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then\r\n                value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000\r\n              else\r\n                value2 = nil -- in case it was out of range for a low surrogate\r\n              end\r\n            end\r\n          end\r\n          value = value and unichar (value)\r\n          if value then\r\n            if value2 then\r\n              lastpos = nextpos + 12\r\n            else\r\n              lastpos = nextpos + 6\r\n            end\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "value = tonumber (strsub (str, nextpos + 2, nextpos + 5), 16)",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "if value then\r\n          local value2\r\n          if 0xD800 <= value and value <= 0xDBff then\r\n            -- we have the high surrogate of UTF-16. Check if there is a\r\n            -- low surrogate escaped nearby to combine them.\r\n            if strsub (str, nextpos + 6, nextpos + 7) == \"\\\\u\" then\r\n              value2 = tonumber (strsub (str, nextpos + 8, nextpos + 11), 16)\r\n              if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then\r\n                value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000\r\n              else\r\n                value2 = nil -- in case it was out of range for a low surrogate\r\n              end\r\n            end\r\n          end\r\n          value = value and unichar (value)\r\n          if value then\r\n            if value2 then\r\n              lastpos = nextpos + 12\r\n            else\r\n              lastpos = nextpos + 6\r\n            end\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "local value2",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "if 0xD800 <= value and value <= 0xDBff then\r\n            -- we have the high surrogate of UTF-16. Check if there is a\r\n            -- low surrogate escaped nearby to combine them.\r\n            if strsub (str, nextpos + 6, nextpos + 7) == \"\\\\u\" then\r\n              value2 = tonumber (strsub (str, nextpos + 8, nextpos + 11), 16)\r\n              if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then\r\n                value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000\r\n              else\r\n                value2 = nil -- in case it was out of range for a low surrogate\r\n              end\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "if strsub (str, nextpos + 6, nextpos + 7) == \"\\\\u\" then\r\n              value2 = tonumber (strsub (str, nextpos + 8, nextpos + 11), 16)\r\n              if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then\r\n                value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000\r\n              else\r\n                value2 = nil -- in case it was out of range for a low surrogate\r\n              end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "value2 = tonumber (strsub (str, nextpos + 8, nextpos + 11), 16)",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then\r\n                value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000\r\n              else\r\n                value2 = nil -- in case it was out of range for a low surrogate\r\n              end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "value = (value - 0xD800)  * 0x400 + (value2 - 0xDC00) + 0x10000",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "value2 = nil",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "value = value and unichar (value)",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "if value then\r\n            if value2 then\r\n              lastpos = nextpos + 12\r\n            else\r\n              lastpos = nextpos + 6\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "if value2 then\r\n              lastpos = nextpos + 12\r\n            else\r\n              lastpos = nextpos + 6\r\n            end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "lastpos = nextpos + 12",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "lastpos = nextpos + 6",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "if not value then\r\n        value = escapechars[escchar] or escchar\r\n        lastpos = nextpos + 2\r\n      end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "value = escapechars[escchar] or escchar",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "lastpos = nextpos + 2",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "buffer[n] = value",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "if n == 1 then\r\n    return buffer[1], lastpos\r\n  elseif n > 1 then\r\n    return concat (buffer), lastpos\r\n  else\r\n    return \"\", lastpos\r\n  end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "local function scantable (what, closechar, str, startpos, nullval, objectmeta, arraymeta)\r\n  local len = strlen (str)\r\n  local tbl, n = {}, 0\r\n  local pos = startpos + 1\r\n  if what == 'object' then\r\n    setmetatable (tbl, objectmeta)\r\n  else\r\n    setmetatable (tbl, arraymeta)\r\n  end\r\n  while true do\r\n    pos = scanwhite (str, pos)\r\n    if not pos then return unterminated (str, what, startpos) end\r\n    local char = strsub (str, pos, pos)\r\n    if char == closechar then\r\n      return tbl, pos + 1\r\n    end\r\n    local val1, err\r\n    val1, pos, err = scanvalue (str, pos, nullval, objectmeta, arraymeta)\r\n    if err then return nil, pos, err end\r\n    pos = scanwhite (str, pos)\r\n    if not pos then return unterminated (str, what, startpos) end\r\n    char = strsub (str, pos, pos)\r\n    if char == \":\" then\r\n      if val1 == nil then\r\n        return nil, pos, \"cannot use nil as table index (at \" .. loc (str, pos) .. \")\"\r\n      end\r\n      pos = scanwhite (str, pos + 1)\r\n      if not pos then return unterminated (str, what, startpos) end\r\n      local val2\r\n      val2, pos, err = scanvalue (str, pos, nullval, objectmeta, arraymeta)\r\n      if err then return nil, pos, err end\r\n      tbl[val1] = val2\r\n      pos = scanwhite (str, pos)\r\n      if not pos then return unterminated (str, what, startpos) end\r\n      char = strsub (str, pos, pos)\r\n    else\r\n      n = n + 1\r\n      tbl[n] = val1\r\n    end\r\n    if char == \",\" then\r\n      pos = pos + 1\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "local len = strlen (str)",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "local tbl, n = {}, 0",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "local pos = startpos + 1",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "if what == 'object' then\r\n    setmetatable (tbl, objectmeta)\r\n  else\r\n    setmetatable (tbl, arraymeta)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "setmetatable (tbl, objectmeta)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "setmetatable (tbl, arraymeta)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "while true do\r\n    pos = scanwhite (str, pos)\r\n    if not pos then return unterminated (str, what, startpos) end\r\n    local char = strsub (str, pos, pos)\r\n    if char == closechar then\r\n      return tbl, pos + 1\r\n    end\r\n    local val1, err\r\n    val1, pos, err = scanvalue (str, pos, nullval, objectmeta, arraymeta)\r\n    if err then return nil, pos, err end\r\n    pos = scanwhite (str, pos)\r\n    if not pos then return unterminated (str, what, startpos) end\r\n    char = strsub (str, pos, pos)\r\n    if char == \":\" then\r\n      if val1 == nil then\r\n        return nil, pos, \"cannot use nil as table index (at \" .. loc (str, pos) .. \")\"\r\n      end\r\n      pos = scanwhite (str, pos + 1)\r\n      if not pos then return unterminated (str, what, startpos) end\r\n      local val2\r\n      val2, pos, err = scanvalue (str, pos, nullval, objectmeta, arraymeta)\r\n      if err then return nil, pos, err end\r\n      tbl[val1] = val2\r\n      pos = scanwhite (str, pos)\r\n      if not pos then return unterminated (str, what, startpos) end\r\n      char = strsub (str, pos, pos)\r\n    else\r\n      n = n + 1\r\n      tbl[n] = val1\r\n    end\r\n    if char == \",\" then\r\n      pos = pos + 1\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 207,
    "text": "pos = scanwhite (str, pos)",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "if not pos then return unterminated (str, what, startpos) end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "local char = strsub (str, pos, pos)",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "if char == closechar then\r\n      return tbl, pos + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "local val1, err",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "val1, pos, err = scanvalue (str, pos, nullval, objectmeta, arraymeta)",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "if err then return nil, pos, err end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "char = strsub (str, pos, pos)",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "if char == \":\" then\r\n      if val1 == nil then\r\n        return nil, pos, \"cannot use nil as table index (at \" .. loc (str, pos) .. \")\"\r\n      end\r\n      pos = scanwhite (str, pos + 1)\r\n      if not pos then return unterminated (str, what, startpos) end\r\n      local val2\r\n      val2, pos, err = scanvalue (str, pos, nullval, objectmeta, arraymeta)\r\n      if err then return nil, pos, err end\r\n      tbl[val1] = val2\r\n      pos = scanwhite (str, pos)\r\n      if not pos then return unterminated (str, what, startpos) end\r\n      char = strsub (str, pos, pos)\r\n    else\r\n      n = n + 1\r\n      tbl[n] = val1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 216,
    "text": "if val1 == nil then\r\n        return nil, pos, \"cannot use nil as table index (at \" .. loc (str, pos) .. \")\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "pos = scanwhite (str, pos + 1)",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "local val2",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "val2, pos, err = scanvalue (str, pos, nullval, objectmeta, arraymeta)",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "tbl[val1] = val2",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "tbl[n] = val1",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "if char == \",\" then\r\n      pos = pos + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "function (str, pos, nullval, objectmeta, arraymeta)\r\n  pos = pos or 1\r\n  pos = scanwhite (str, pos)\r\n  if not pos then\r\n    return nil, strlen (str) + 1, \"no valid JSON value (reached the end)\"\r\n  end\r\n  local char = strsub (str, pos, pos)\r\n  if char == \"{\" then\r\n    return scantable ('object', \"}\", str, pos, nullval, objectmeta, arraymeta)\r\n  elseif char == \"[\" then\r\n    return scantable ('array', \"]\", str, pos, nullval, objectmeta, arraymeta)\r\n  elseif char == \"\\\"\" then\r\n    return scanstring (str, pos)\r\n  else\r\n    local pstart, pend = strfind (str, \"^%-?[%d%.]+[eE]?[%+%-]?%d*\", pos)\r\n    if pstart then\r\n      local number = str2num (strsub (str, pstart, pend))\r\n      if number then\r\n        return number, pend + 1\r\n      end\r\n    end\r\n    pstart, pend = strfind (str, \"^%a%w*\", pos)\r\n    if pstart then\r\n      local name = strsub (str, pstart, pend)\r\n      if name == \"true\" then\r\n        return true, pend + 1\r\n      elseif name == \"false\" then\r\n        return false, pend + 1\r\n      elseif name == \"null\" then\r\n        return nullval, pend + 1\r\n      end\r\n    end\r\n    return nil, pos, \"no valid JSON value at \" .. loc (str, pos)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "pos = pos or 1",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "if not pos then\r\n    return nil, strlen (str) + 1, \"no valid JSON value (reached the end)\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "if char == \"{\" then\r\n    return scantable ('object', \"}\", str, pos, nullval, objectmeta, arraymeta)\r\n  elseif char == \"[\" then\r\n    return scantable ('array', \"]\", str, pos, nullval, objectmeta, arraymeta)\r\n  elseif char == \"\\\"\" then\r\n    return scanstring (str, pos)\r\n  else\r\n    local pstart, pend = strfind (str, \"^%-?[%d%.]+[eE]?[%+%-]?%d*\", pos)\r\n    if pstart then\r\n      local number = str2num (strsub (str, pstart, pend))\r\n      if number then\r\n        return number, pend + 1\r\n      end\r\n    end\r\n    pstart, pend = strfind (str, \"^%a%w*\", pos)\r\n    if pstart then\r\n      local name = strsub (str, pstart, pend)\r\n      if name == \"true\" then\r\n        return true, pend + 1\r\n      elseif name == \"false\" then\r\n        return false, pend + 1\r\n      elseif name == \"null\" then\r\n        return nullval, pend + 1\r\n      end\r\n    end\r\n    return nil, pos, \"no valid JSON value at \" .. loc (str, pos)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 228,
    "text": "local pstart, pend = strfind (str, \"^%-?[%d%.]+[eE]?[%+%-]?%d*\", pos)",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "if pstart then\r\n      local number = str2num (strsub (str, pstart, pend))\r\n      if number then\r\n        return number, pend + 1\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "local number = str2num (strsub (str, pstart, pend))",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "if number then\r\n        return number, pend + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "pstart, pend = strfind (str, \"^%a%w*\", pos)",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "if pstart then\r\n      local name = strsub (str, pstart, pend)\r\n      if name == \"true\" then\r\n        return true, pend + 1\r\n      elseif name == \"false\" then\r\n        return false, pend + 1\r\n      elseif name == \"null\" then\r\n        return nullval, pend + 1\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "local name = strsub (str, pstart, pend)",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "if name == \"true\" then\r\n        return true, pend + 1\r\n      elseif name == \"false\" then\r\n        return false, pend + 1\r\n      elseif name == \"null\" then\r\n        return nullval, pend + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "local function optionalmetatables(...)\r\n  if select(\"#\", ...) > 0 then\r\n    return ...\r\n  else\r\n    return {__jsontype = 'object'}, {__jsontype = 'array'}\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 238,
    "text": "if select(\"#\", ...) > 0 then\r\n    return ...\r\n  else\r\n    return {__jsontype = 'object'}, {__jsontype = 'array'}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 239,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 240,
    "text": "function json.decode (str, pos, nullval, ...)\r\n  local objectmeta, arraymeta = optionalmetatables(...)\r\n  return scanvalue (str, pos, nullval, objectmeta, arraymeta)\r\nend",
    "type": "function"
  }, {
    "id": 241,
    "text": "local objectmeta, arraymeta = optionalmetatables(...)",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function json.use_lpeg ()\r\n  local g = require (\"lpeg\")\r\n\r\n  if g.version() == \"0.11\" then\r\n    error \"due to a bug in LPeg 0.11, it cannot be used for JSON matching\"\r\n  end\r\n\r\n  local pegmatch = g.match\r\n  local P, S, R = g.P, g.S, g.R\r\n\r\n  local function ErrorCall (str, pos, msg, state)\r\n    if not state.msg then\r\n      state.msg = msg .. \" at \" .. loc (str, pos)\r\n      state.pos = pos\r\n    end\r\n    return false\r\n  end\r\n\r\n  local function Err (msg)\r\n    return g.Cmt (g.Cc (msg) * g.Carg (2), ErrorCall)\r\n  end\r\n\r\n  local Space = (S\" \\n\\r\\t\" + P\"\\239\\187\\191\")^0\r\n\r\n  local PlainChar = 1 - S\"\\\"\\\\\\n\\r\"\r\n  local EscapeSequence = (P\"\\\\\" * g.C (S\"\\\"\\\\/bfnrt\" + Err \"unsupported escape sequence\")) / escapechars\r\n  local HexDigit = R(\"09\", \"af\", \"AF\")\r\n  local function UTF16Surrogate (match, pos, high, low)\r\n    high, low = tonumber (high, 16), tonumber (low, 16)\r\n    if 0xD800 <= high and high <= 0xDBff and 0xDC00 <= low and low <= 0xDFFF then\r\n      return true, unichar ((high - 0xD800)  * 0x400 + (low - 0xDC00) + 0x10000)\r\n    else\r\n      return false\r\n    end\r\n  end\r\n  local function UTF16BMP (hex)\r\n    return unichar (tonumber (hex, 16))\r\n  end\r\n  local U16Sequence = (P\"\\\\u\" * g.C (HexDigit * HexDigit * HexDigit * HexDigit))\r\n  local UnicodeEscape = g.Cmt (U16Sequence * U16Sequence, UTF16Surrogate) + U16Sequence/UTF16BMP\r\n  local Char = UnicodeEscape + EscapeSequence + PlainChar\r\n  local String = P\"\\\"\" * g.Cs (Char ^ 0) * (P\"\\\"\" + Err \"unterminated string\")\r\n  local Integer = P\"-\"^(-1) * (P\"0\" + (R\"19\" * R\"09\"^0))\r\n  local Fractal = P\".\" * R\"09\"^0\r\n  local Exponent = (S\"eE\") * (S\"+-\")^(-1) * R\"09\"^1\r\n  local Number = (Integer * Fractal^(-1) * Exponent^(-1))/str2num\r\n  local Constant = P\"true\" * g.Cc (true) + P\"false\" * g.Cc (false) + P\"null\" * g.Carg (1)\r\n  local SimpleValue = Number + String + Constant\r\n  local ArrayContent, ObjectContent\r\n\r\n  -- The functions parsearray and parseobject parse only a single value/pair\r\n  -- at a time and store them directly to avoid hitting the LPeg limits.\r\n  local function parsearray (str, pos, nullval, state)\r\n    local obj, cont\r\n    local npos\r\n    local t, nt = {}, 0\r\n    repeat\r\n      obj, cont, npos = pegmatch (ArrayContent, str, pos, nullval, state)\r\n      if not npos then break end\r\n      pos = npos\r\n      nt = nt + 1\r\n      t[nt] = obj\r\n    until cont == 'last'\r\n    return pos, setmetatable (t, state.arraymeta)\r\n  end\r\n\r\n  local function parseobject (str, pos, nullval, state)\r\n    local obj, key, cont\r\n    local npos\r\n    local t = {}\r\n    repeat\r\n      key, obj, cont, npos = pegmatch (ObjectContent, str, pos, nullval, state)\r\n      if not npos then break end\r\n      pos = npos\r\n      t[key] = obj\r\n    until cont == 'last'\r\n    return pos, setmetatable (t, state.objectmeta)\r\n  end\r\n\r\n  local Array = P\"[\" * g.Cmt (g.Carg(1) * g.Carg(2), parsearray) * Space * (P\"]\" + Err \"']' expected\")\r\n  local Object = P\"{\" * g.Cmt (g.Carg(1) * g.Carg(2), parseobject) * Space * (P\"}\" + Err \"'}' expected\")\r\n  local Value = Space * (Array + Object + SimpleValue)\r\n  local ExpectedValue = Value + Space * Err \"value expected\"\r\n  ArrayContent = Value * Space * (P\",\" * g.Cc'cont' + g.Cc'last') * g.Cp()\r\n  local Pair = g.Cg (Space * String * Space * (P\":\" + Err \"colon expected\") * ExpectedValue)\r\n  ObjectContent = Pair * Space * (P\",\" * g.Cc'cont' + g.Cc'last') * g.Cp()\r\n  local DecodeValue = ExpectedValue * g.Cp ()\r\n\r\n  function json.decode (str, pos, nullval, ...)\r\n    local state = {}\r\n    state.objectmeta, state.arraymeta = optionalmetatables(...)\r\n    local obj, retpos = pegmatch (DecodeValue, str, pos, nullval, state)\r\n    if state.msg then\r\n      return nil, state.pos, state.msg\r\n    else\r\n      return obj, retpos\r\n    end\r\n  end\r\n\r\n  -- use this function only once:\r\n  json.use_lpeg = function () return json end\r\n\r\n  json.using_lpeg = true\r\n\r\n  return json -- so you can get the module using json = require \"dkjson\".use_lpeg()\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "local g = require (\"lpeg\")",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "if g.version() == \"0.11\" then\r\n    error \"due to a bug in LPeg 0.11, it cannot be used for JSON matching\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "error \"due to a bug in LPeg 0.11, it cannot be used for JSON matching\"",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "local pegmatch = g.match",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "local P, S, R = g.P, g.S, g.R",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "local function ErrorCall (str, pos, msg, state)\r\n    if not state.msg then\r\n      state.msg = msg .. \" at \" .. loc (str, pos)\r\n      state.pos = pos\r\n    end\r\n    return false\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 250,
    "text": "if not state.msg then\r\n      state.msg = msg .. \" at \" .. loc (str, pos)\r\n      state.pos = pos\r\n    end",
    "type": "statement:if"
  }, {
    "id": 251,
    "text": "state.msg = msg .. \" at \" .. loc (str, pos)",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "state.pos = pos",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "local function Err (msg)\r\n    return g.Cmt (g.Cc (msg) * g.Carg (2), ErrorCall)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 254,
    "text": "local Space = (S\" \\n\\r\\t\" + P\"\\239\\187\\191\")^0",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "local PlainChar = 1 - S\"\\\"\\\\\\n\\r\"",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "local EscapeSequence = (P\"\\\\\" * g.C (S\"\\\"\\\\/bfnrt\" + Err \"unsupported escape sequence\")) / escapechars",
    "type": "statement:localassign"
  }, {
    "id": 257,
    "text": "local HexDigit = R(\"09\", \"af\", \"AF\")",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "local function UTF16Surrogate (match, pos, high, low)\r\n    high, low = tonumber (high, 16), tonumber (low, 16)\r\n    if 0xD800 <= high and high <= 0xDBff and 0xDC00 <= low and low <= 0xDFFF then\r\n      return true, unichar ((high - 0xD800)  * 0x400 + (low - 0xDC00) + 0x10000)\r\n    else\r\n      return false\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 259,
    "text": "high, low = tonumber (high, 16), tonumber (low, 16)",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "if 0xD800 <= high and high <= 0xDBff and 0xDC00 <= low and low <= 0xDFFF then\r\n      return true, unichar ((high - 0xD800)  * 0x400 + (low - 0xDC00) + 0x10000)\r\n    else\r\n      return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "local function UTF16BMP (hex)\r\n    return unichar (tonumber (hex, 16))\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 262,
    "text": "local U16Sequence = (P\"\\\\u\" * g.C (HexDigit * HexDigit * HexDigit * HexDigit))",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "local UnicodeEscape = g.Cmt (U16Sequence * U16Sequence, UTF16Surrogate) + U16Sequence/UTF16BMP",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "local Char = UnicodeEscape + EscapeSequence + PlainChar",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "local String = P\"\\\"\" * g.Cs (Char ^ 0) * (P\"\\\"\" + Err \"unterminated string\")",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "local Integer = P\"-\"^(-1) * (P\"0\" + (R\"19\" * R\"09\"^0))",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "local Fractal = P\".\" * R\"09\"^0",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "local Exponent = (S\"eE\") * (S\"+-\")^(-1) * R\"09\"^1",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "local Number = (Integer * Fractal^(-1) * Exponent^(-1))/str2num",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "local Constant = P\"true\" * g.Cc (true) + P\"false\" * g.Cc (false) + P\"null\" * g.Carg (1)",
    "type": "statement:localassign"
  }, {
    "id": 271,
    "text": "local SimpleValue = Number + String + Constant",
    "type": "statement:localassign"
  }, {
    "id": 272,
    "text": "local ArrayContent, ObjectContent",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "local function parsearray (str, pos, nullval, state)\r\n    local obj, cont\r\n    local npos\r\n    local t, nt = {}, 0\r\n    repeat\r\n      obj, cont, npos = pegmatch (ArrayContent, str, pos, nullval, state)\r\n      if not npos then break end\r\n      pos = npos\r\n      nt = nt + 1\r\n      t[nt] = obj\r\n    until cont == 'last'\r\n    return pos, setmetatable (t, state.arraymeta)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 274,
    "text": "local obj, cont",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "local npos",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "local t, nt = {}, 0",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "repeat\r\n      obj, cont, npos = pegmatch (ArrayContent, str, pos, nullval, state)\r\n      if not npos then break end\r\n      pos = npos\r\n      nt = nt + 1\r\n      t[nt] = obj\r\n    until cont == 'last'",
    "type": "statement:repeat"
  }, {
    "id": 278,
    "text": "obj, cont, npos = pegmatch (ArrayContent, str, pos, nullval, state)",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "if not npos then break end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "pos = npos",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "nt = nt + 1",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "t[nt] = obj",
    "type": "statement:assign"
  }, {
    "id": 283,
    "text": "local function parseobject (str, pos, nullval, state)\r\n    local obj, key, cont\r\n    local npos\r\n    local t = {}\r\n    repeat\r\n      key, obj, cont, npos = pegmatch (ObjectContent, str, pos, nullval, state)\r\n      if not npos then break end\r\n      pos = npos\r\n      t[key] = obj\r\n    until cont == 'last'\r\n    return pos, setmetatable (t, state.objectmeta)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 284,
    "text": "local obj, key, cont",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 286,
    "text": "repeat\r\n      key, obj, cont, npos = pegmatch (ObjectContent, str, pos, nullval, state)\r\n      if not npos then break end\r\n      pos = npos\r\n      t[key] = obj\r\n    until cont == 'last'",
    "type": "statement:repeat"
  }, {
    "id": 287,
    "text": "key, obj, cont, npos = pegmatch (ObjectContent, str, pos, nullval, state)",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "t[key] = obj",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "local Array = P\"[\" * g.Cmt (g.Carg(1) * g.Carg(2), parsearray) * Space * (P\"]\" + Err \"']' expected\")",
    "type": "statement:localassign"
  }, {
    "id": 290,
    "text": "local Object = P\"{\" * g.Cmt (g.Carg(1) * g.Carg(2), parseobject) * Space * (P\"}\" + Err \"'}' expected\")",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "local Value = Space * (Array + Object + SimpleValue)",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "local ExpectedValue = Value + Space * Err \"value expected\"",
    "type": "statement:localassign"
  }, {
    "id": 293,
    "text": "ArrayContent = Value * Space * (P\",\" * g.Cc'cont' + g.Cc'last') * g.Cp()",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "local Pair = g.Cg (Space * String * Space * (P\":\" + Err \"colon expected\") * ExpectedValue)",
    "type": "statement:localassign"
  }, {
    "id": 295,
    "text": "ObjectContent = Pair * Space * (P\",\" * g.Cc'cont' + g.Cc'last') * g.Cp()",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "local DecodeValue = ExpectedValue * g.Cp ()",
    "type": "statement:localassign"
  }, {
    "id": 297,
    "text": "function json.decode (str, pos, nullval, ...)\r\n    local state = {}\r\n    state.objectmeta, state.arraymeta = optionalmetatables(...)\r\n    local obj, retpos = pegmatch (DecodeValue, str, pos, nullval, state)\r\n    if state.msg then\r\n      return nil, state.pos, state.msg\r\n    else\r\n      return obj, retpos\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 298,
    "text": "local state = {}",
    "type": "statement:localassign"
  }, {
    "id": 299,
    "text": "state.objectmeta, state.arraymeta = optionalmetatables(...)",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "local obj, retpos = pegmatch (DecodeValue, str, pos, nullval, state)",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "if state.msg then\r\n      return nil, state.pos, state.msg\r\n    else\r\n      return obj, retpos\r\n    end",
    "type": "statement:if"
  }, {
    "id": 302,
    "text": "json.use_lpeg = function () return json end",
    "type": "statement:assign"
  }, {
    "id": 303,
    "text": "json.using_lpeg = true",
    "type": "statement:assign"
  }, {
    "id": 304,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 305,
    "text": "local function ErrorCall (str, pos, msg, state)\r\n    if not state.msg then\r\n      state.msg = msg .. \" at \" .. loc (str, pos)\r\n      state.pos = pos\r\n    end\r\n    return false\r\n  end",
    "type": "function"
  }, {
    "id": 306,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 307,
    "text": "local function Err (msg)\r\n    return g.Cmt (g.Cc (msg) * g.Carg (2), ErrorCall)\r\n  end",
    "type": "function"
  }, {
    "id": 308,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 309,
    "text": "local function UTF16Surrogate (match, pos, high, low)\r\n    high, low = tonumber (high, 16), tonumber (low, 16)\r\n    if 0xD800 <= high and high <= 0xDBff and 0xDC00 <= low and low <= 0xDFFF then\r\n      return true, unichar ((high - 0xD800)  * 0x400 + (low - 0xDC00) + 0x10000)\r\n    else\r\n      return false\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 310,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 311,
    "text": "local function UTF16BMP (hex)\r\n    return unichar (tonumber (hex, 16))\r\n  end",
    "type": "function"
  }, {
    "id": 312,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 313,
    "text": "local function parsearray (str, pos, nullval, state)\r\n    local obj, cont\r\n    local npos\r\n    local t, nt = {}, 0\r\n    repeat\r\n      obj, cont, npos = pegmatch (ArrayContent, str, pos, nullval, state)\r\n      if not npos then break end\r\n      pos = npos\r\n      nt = nt + 1\r\n      t[nt] = obj\r\n    until cont == 'last'\r\n    return pos, setmetatable (t, state.arraymeta)\r\n  end",
    "type": "function"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "local function parseobject (str, pos, nullval, state)\r\n    local obj, key, cont\r\n    local npos\r\n    local t = {}\r\n    repeat\r\n      key, obj, cont, npos = pegmatch (ObjectContent, str, pos, nullval, state)\r\n      if not npos then break end\r\n      pos = npos\r\n      t[key] = obj\r\n    until cont == 'last'\r\n    return pos, setmetatable (t, state.objectmeta)\r\n  end",
    "type": "function"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function json.decode (str, pos, nullval, ...)\r\n    local state = {}\r\n    state.objectmeta, state.arraymeta = optionalmetatables(...)\r\n    local obj, retpos = pegmatch (DecodeValue, str, pos, nullval, state)\r\n    if state.msg then\r\n      return nil, state.pos, state.msg\r\n    else\r\n      return obj, retpos\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function () return json end",
    "type": "function"
  }, {
    "id": 320,
    "text": "function()\r\n  -- Enable access to blocked metatables.\r\n  -- Don't worry, this module doesn't change anything in them.\r\n  local debmeta = require \"debug\".getmetatable\r\n  if debmeta then getmetatable = debmeta end\r\nend",
    "type": "function"
  }, {
    "id": 321,
    "text": "local debmeta = require \"debug\".getmetatable",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "if debmeta then getmetatable = debmeta end",
    "type": "statement:if"
  }, {
    "id": 323,
    "text": "getmetatable = debmeta",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 325,
    "text": "function () return \"null\" end",
    "type": "function"
  }, {
    "id": 326,
    "text": "",
    "type": "function container"
  }, {
    "id": 327,
    "text": "version",
    "type": "global function"
  }, {
    "id": 328,
    "text": "Cc",
    "type": "global function"
  }, {
    "id": 329,
    "text": "Cs",
    "type": "global function"
  }, {
    "id": 330,
    "text": "Cg",
    "type": "global function"
  }, {
    "id": 331,
    "text": "Cp",
    "type": "global function"
  }, {
    "id": 332,
    "text": "Cmt",
    "type": "global function"
  }, {
    "id": 333,
    "text": "C",
    "type": "global function"
  }, {
    "id": 334,
    "text": "Carg",
    "type": "global function"
  }, {
    "id": 335,
    "text": "pegmatch",
    "type": "global function"
  }, {
    "id": 336,
    "text": "S",
    "type": "global function"
  }, {
    "id": 337,
    "text": "strlen",
    "type": "global function"
  }, {
    "id": 338,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 339,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 340,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 341,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 342,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 343,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 344,
    "text": "error",
    "type": "global function"
  }, {
    "id": 345,
    "text": "valtojson",
    "type": "global function"
  }, {
    "id": 346,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 347,
    "text": "strchar",
    "type": "global function"
  }, {
    "id": 348,
    "text": "strbyte",
    "type": "global function"
  }, {
    "id": 349,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 350,
    "text": "R",
    "type": "global function"
  }, {
    "id": 351,
    "text": "strrep",
    "type": "global function"
  }, {
    "id": 352,
    "text": "strformat",
    "type": "global function"
  }, {
    "id": 353,
    "text": "P",
    "type": "global function"
  }, {
    "id": 354,
    "text": "strmatch",
    "type": "global function"
  }, {
    "id": 355,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 356,
    "text": "select",
    "type": "global function"
  }, {
    "id": 357,
    "text": "type",
    "type": "global function"
  }, {
    "id": 358,
    "text": "require",
    "type": "global function"
  }, {
    "id": 359,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 360,
    "text": "strsub",
    "type": "global function"
  }, {
    "id": 361,
    "text": "",
    "type": "variable container"
  }, {
    "id": 362,
    "text": "",
    "type": "require container"
  }, {
    "id": 363,
    "text": "",
    "type": "local variable"
  }, {
    "id": 364,
    "text": "",
    "type": "boolean"
  }, {
    "id": 365,
    "text": "",
    "type": "local variable"
  }, {
    "id": 366,
    "text": "",
    "type": "boolean"
  }, {
    "id": 367,
    "text": "",
    "type": "local variable"
  }, {
    "id": 368,
    "text": "",
    "type": "string"
  }, {
    "id": 369,
    "text": "",
    "type": "local variable"
  }, {
    "id": 370,
    "text": "",
    "type": "n/a"
  }, {
    "id": 371,
    "text": "",
    "type": "local variable"
  }, {
    "id": 372,
    "text": "",
    "type": "n/a"
  }, {
    "id": 373,
    "text": "",
    "type": "local variable"
  }, {
    "id": 374,
    "text": "",
    "type": "n/a"
  }, {
    "id": 375,
    "text": "",
    "type": "local variable"
  }, {
    "id": 376,
    "text": "",
    "type": "n/a"
  }, {
    "id": 377,
    "text": "",
    "type": "local variable"
  }, {
    "id": 378,
    "text": "",
    "type": "n/a"
  }, {
    "id": 379,
    "text": "",
    "type": "local variable"
  }, {
    "id": 380,
    "text": "",
    "type": "n/a"
  }, {
    "id": 381,
    "text": "",
    "type": "local variable"
  }, {
    "id": 382,
    "text": "",
    "type": "n/a"
  }, {
    "id": 383,
    "text": "",
    "type": "local variable"
  }, {
    "id": 384,
    "text": "",
    "type": "n/a"
  }, {
    "id": 385,
    "text": "",
    "type": "local variable"
  }, {
    "id": 386,
    "text": "",
    "type": "n/a"
  }, {
    "id": 387,
    "text": "",
    "type": "local variable"
  }, {
    "id": 388,
    "text": "",
    "type": "n/a"
  }, {
    "id": 389,
    "text": "",
    "type": "local variable"
  }, {
    "id": 390,
    "text": "",
    "type": "n/a"
  }, {
    "id": 391,
    "text": "",
    "type": "local variable"
  }, {
    "id": 392,
    "text": "",
    "type": "n/a"
  }, {
    "id": 393,
    "text": "",
    "type": "local variable"
  }, {
    "id": 394,
    "text": "",
    "type": "n/a"
  }, {
    "id": 395,
    "text": "",
    "type": "local variable"
  }, {
    "id": 396,
    "text": "",
    "type": "n/a"
  }, {
    "id": 397,
    "text": "",
    "type": "local variable"
  }, {
    "id": 398,
    "text": "",
    "type": "n/a"
  }, {
    "id": 399,
    "text": "",
    "type": "local variable"
  }, {
    "id": 400,
    "text": "",
    "type": "n/a"
  }, {
    "id": 401,
    "text": "",
    "type": "local variable"
  }, {
    "id": 402,
    "text": "",
    "type": "n/a"
  }, {
    "id": 403,
    "text": "",
    "type": "local variable"
  }, {
    "id": 404,
    "text": "",
    "type": "n/a"
  }, {
    "id": 405,
    "text": "",
    "type": "local variable"
  }, {
    "id": 406,
    "text": "",
    "type": "n/a"
  }, {
    "id": 407,
    "text": "",
    "type": "local variable"
  }, {
    "id": 408,
    "text": "",
    "type": "n/a"
  }, {
    "id": 409,
    "text": "",
    "type": "local variable"
  }, {
    "id": 410,
    "text": "",
    "type": "n/a"
  }, {
    "id": 411,
    "text": "",
    "type": "local variable"
  }, {
    "id": 412,
    "text": "",
    "type": "n/a"
  }, {
    "id": 413,
    "text": "",
    "type": "local variable"
  }, {
    "id": 414,
    "text": "",
    "type": "n/a"
  }, {
    "id": 415,
    "text": "",
    "type": "local variable"
  }, {
    "id": 416,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 417,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 418,
    "text": "",
    "type": "string"
  }, {
    "id": 419,
    "text": "",
    "type": "local variable"
  }, {
    "id": 420,
    "text": "",
    "type": "keyword"
  }, {
    "id": 421,
    "text": "",
    "type": "local variable"
  }, {
    "id": 422,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 423,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 424,
    "text": "",
    "type": "string"
  }, {
    "id": 425,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 426,
    "text": "",
    "type": "string"
  }, {
    "id": 427,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 428,
    "text": "",
    "type": "string"
  }, {
    "id": 429,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 430,
    "text": "",
    "type": "string"
  }, {
    "id": 431,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 432,
    "text": "",
    "type": "string"
  }, {
    "id": 433,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 434,
    "text": "",
    "type": "string"
  }, {
    "id": 435,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 436,
    "text": "",
    "type": "string"
  }, {
    "id": 437,
    "text": "",
    "type": "local variable"
  }, {
    "id": 438,
    "text": "",
    "type": "local variable"
  }, {
    "id": 439,
    "text": "",
    "type": "local variable"
  }, {
    "id": 440,
    "text": "",
    "type": "local variable"
  }, {
    "id": 441,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 442,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 443,
    "text": "",
    "type": "string"
  }, {
    "id": 444,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 445,
    "text": "",
    "type": "string"
  }, {
    "id": 446,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 447,
    "text": "",
    "type": "string"
  }, {
    "id": 448,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 449,
    "text": "",
    "type": "string"
  }, {
    "id": 450,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 451,
    "text": "",
    "type": "string"
  }, {
    "id": 452,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 453,
    "text": "",
    "type": "string"
  }, {
    "id": 454,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 455,
    "text": "",
    "type": "string"
  }, {
    "id": 456,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 457,
    "text": "",
    "type": "string"
  }, {
    "id": 458,
    "text": "",
    "type": "local variable"
  }, {
    "id": 459,
    "text": "",
    "type": "global variable"
  }, {
    "id": 460,
    "text": "",
    "type": "n/a"
  }, {
    "id": 461,
    "text": "",
    "type": "global variable"
  }, {
    "id": 462,
    "text": "",
    "type": "n/a"
  }, {
    "id": 463,
    "text": "",
    "type": "global variable"
  }, {
    "id": 464,
    "text": "",
    "type": "n/a"
  }, {
    "id": 465,
    "text": "",
    "type": "global variable"
  }, {
    "id": 466,
    "text": "",
    "type": "n/a"
  }, {
    "id": 467,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 468,
    "text": "(lpeg)",
    "type": "module"
  }, {
    "id": 469,
    "text": "",
    "type": "interface container"
  }, {
    "id": 470,
    "text": "",
    "type": "interface"
  }, {
    "id": 471,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 472,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 473,
    "text": "",
    "type": "require local variable"
  } ]
}