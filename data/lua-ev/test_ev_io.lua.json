{
  "_filename": "test_ev_io.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-ev/test/test_ev_io.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 20
  }, {
    "from": 10,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 14
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 22,
    "label": "has",
    "to": 17
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 19
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 35
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 29,
    "label": "has",
    "to": 43
  }, {
    "from": 29,
    "label": "has",
    "to": 44
  }, {
    "from": 29,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 29,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 35
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 42
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 35
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 29,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 54
  }, {
    "from": 26,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 5
  }, {
    "from": 56,
    "label": "has",
    "to": 6
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 32
  }, {
    "from": 59,
    "label": "has",
    "to": 35
  }, {
    "from": 59,
    "label": "has",
    "to": 41
  }, {
    "from": 59,
    "label": "has",
    "to": 42
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 35
  }, {
    "from": 61,
    "label": "has",
    "to": 39
  }, {
    "from": 61,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 35
  }, {
    "from": 63,
    "label": "has",
    "to": 36
  }, {
    "from": 63,
    "label": "has",
    "to": 37
  }, {
    "from": 63,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 35
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 46
  }, {
    "from": 66,
    "label": "has",
    "to": 35
  }, {
    "from": 66,
    "label": "has",
    "to": 51
  }, {
    "from": 66,
    "label": "has",
    "to": 52
  }, {
    "from": 66,
    "label": "has",
    "to": 53
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 35
  }, {
    "from": 68,
    "label": "has",
    "to": 48
  }, {
    "from": 68,
    "label": "has",
    "to": 49
  }, {
    "from": 68,
    "label": "has",
    "to": 42
  }, {
    "from": 68,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 35
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 30
  }, {
    "from": 70,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 70,
    "label": "has",
    "to": 33
  }, {
    "from": 70,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 35
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 70,
    "label": "has",
    "to": 43
  }, {
    "from": 70,
    "label": "has",
    "to": 44
  }, {
    "from": 70,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 70,
    "label": "has",
    "to": 37
  }, {
    "from": 70,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 35
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 42
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 35
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 70,
    "label": "has",
    "to": 8
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 26,
    "label": "calls",
    "to": 10
  }, {
    "from": 72,
    "label": "calls",
    "to": 87
  }, {
    "from": 72,
    "label": "calls",
    "to": 87
  }, {
    "from": 72,
    "label": "calls",
    "to": 74
  }, {
    "from": 10,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 26,
    "label": "calls",
    "to": 75
  }, {
    "from": 10,
    "label": "calls",
    "to": 80
  }, {
    "from": 72,
    "label": "calls",
    "to": 81
  }, {
    "from": 72,
    "label": "calls",
    "to": 81
  }, {
    "from": 72,
    "label": "calls",
    "to": 81
  }, {
    "from": 26,
    "label": "calls",
    "to": 76
  }, {
    "from": 26,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 73
  }, {
    "from": 26,
    "label": "calls",
    "to": 73
  }, {
    "from": 26,
    "label": "calls",
    "to": 73
  }, {
    "from": 26,
    "label": "calls",
    "to": 73
  }, {
    "from": 26,
    "label": "calls",
    "to": 73
  }, {
    "from": 26,
    "label": "calls",
    "to": 73
  }, {
    "from": 72,
    "label": "calls",
    "to": 82
  }, {
    "from": 10,
    "label": "calls",
    "to": 82
  }, {
    "from": 10,
    "label": "calls",
    "to": 82
  }, {
    "from": 10,
    "label": "calls",
    "to": 83
  }, {
    "from": 26,
    "label": "calls",
    "to": 79
  }, {
    "from": 26,
    "label": "calls",
    "to": 84
  }, {
    "from": 26,
    "label": "calls",
    "to": 78
  }, {
    "from": 72,
    "label": "calls",
    "to": 85
  }, {
    "from": 72,
    "label": "calls",
    "to": 85
  }, {
    "from": 72,
    "label": "calls",
    "to": 85
  }, {
    "from": 72,
    "label": "calls",
    "to": 85
  }, {
    "from": 2,
    "label": "calls",
    "to": 86
  }, {
    "from": 2,
    "label": "calls",
    "to": 86
  }, {
    "from": 26,
    "label": "calls",
    "to": 86
  }, {
    "from": 26,
    "label": "calls",
    "to": 86
  }, {
    "from": 26,
    "label": "calls",
    "to": 77
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 72,
    "label": "declares",
    "to": 2
  }, {
    "from": 72,
    "label": "declares",
    "to": 10
  }, {
    "from": 72,
    "label": "declares",
    "to": 22
  }, {
    "from": 72,
    "label": "declares",
    "to": 24
  }, {
    "from": 72,
    "label": "declares",
    "to": 26
  }, {
    "from": 72,
    "label": "declares",
    "to": 56
  }, {
    "from": 72,
    "label": "declares",
    "to": 58
  }, {
    "from": 72,
    "label": "declares",
    "to": 59
  }, {
    "from": 72,
    "label": "declares",
    "to": 61
  }, {
    "from": 72,
    "label": "declares",
    "to": 63
  }, {
    "from": 72,
    "label": "declares",
    "to": 65
  }, {
    "from": 72,
    "label": "declares",
    "to": 66
  }, {
    "from": 72,
    "label": "declares",
    "to": 68
  }, {
    "from": 72,
    "label": "declares",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 92,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 92,
    "label": "initializes",
    "to": 96
  }, {
    "from": 92,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 92,
    "label": "initializes",
    "to": 99
  }, {
    "from": 92,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 92,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 92,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 92,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 92,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 93,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 88
  }, {
    "from": 93,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 89
  }, {
    "from": 93,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 90
  }, {
    "from": 93,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "requires",
    "to": 91
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 47,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 66
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_ev_io",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function test_stdin()\r\n   local io1 = ev.IO.new(\r\n      function(loop, io, revents)\r\n         ok(true, 'STDIN is writable')\r\n         ok(io:getfd() == 1, 'getfd() works')\r\n         io:stop(loop)\r\n      end, 1, ev.WRITE)\r\n   io1:start(loop)\r\n   loop:loop()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local io1 = ev.IO.new(\r\n      function(loop, io, revents)\r\n         ok(true, 'STDIN is writable')\r\n         ok(io:getfd() == 1, 'getfd() works')\r\n         io:stop(loop)\r\n      end, 1, ev.WRITE)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "ok(true, 'STDIN is writable')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "ok(io:getfd() == 1, 'getfd() works')",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "io:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "io1:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "loop:loop()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function newtry()\r\n   local try = {}\r\n   setmetatable(try, try)\r\n   function try:__call(body)\r\n      local is_err, err = pcall(body)\r\n      for _, finalizer in ipairs(self) do\r\n         -- ignore errors in finalizers:\r\n         pcall(finalizer)\r\n      end\r\n      assert(is_err, err)\r\n   end\r\n   function try:finally(finalizer)\r\n      self[#self + 1] = finalizer\r\n   end\r\n   return try\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local try = {}",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "setmetatable(try, try)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "function try:__call(body)\r\n      local is_err, err = pcall(body)\r\n      for _, finalizer in ipairs(self) do\r\n         -- ignore errors in finalizers:\r\n         pcall(finalizer)\r\n      end\r\n      assert(is_err, err)\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 14,
    "text": "local is_err, err = pcall(body)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "for _, finalizer in ipairs(self) do\r\n         -- ignore errors in finalizers:\r\n         pcall(finalizer)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "pcall(finalizer)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert(is_err, err)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "function try:finally(finalizer)\r\n      self[#self + 1] = finalizer\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 19,
    "text": "self[#self + 1] = finalizer",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function try:__call(body)\r\n      local is_err, err = pcall(body)\r\n      for _, finalizer in ipairs(self) do\r\n         -- ignore errors in finalizers:\r\n         pcall(finalizer)\r\n      end\r\n      assert(is_err, err)\r\n   end",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function try:finally(finalizer)\r\n      self[#self + 1] = finalizer\r\n   end",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function test_echo()\r\n   local got_response\r\n   local try = newtry()\r\n   try(function()\r\n          local server = assert(socket.bind(\"*\", 0))\r\n          try:finally(function() server:close() end)\r\n          server:settimeout(0)\r\n          ev.IO.new(\r\n             function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local client = assert(server:accept())\r\n                client:settimeout(0)\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local buff = assert(client:receive('*a'))\r\n                      ev.IO.new(\r\n                         function(loop, watcher)\r\n                            watcher:stop(loop)\r\n                            assert(client:send(buff))\r\n                            assert(client:shutdown(\"send\"))\r\n                         end,\r\n                         client:getfd(),\r\n                         ev.WRITE):start(loop)\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end,\r\n             server:getfd(),\r\n             ev.READ):start(loop)\r\n          local port   = select(2, server:getsockname())\r\n          local client = assert(socket.connect(\"127.0.0.1\", port))\r\n          try:finally(function() client:close() end)\r\n          client:settimeout(0)\r\n          ev.IO.new(\r\n             function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local str = \"Hello World\"\r\n                assert(client:send(str))\r\n                assert(client:shutdown(\"send\"))\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local response = assert(client:receive(\"*a\"))\r\n                      ok(response == str,\r\n                         tostring(response) .. \" == \" .. tostring(str))\r\n                      got_response = true\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end,\r\n             client:getfd(),\r\n             ev.WRITE):start(loop)\r\n          loop:loop()\r\n       end)\r\n   ok(got_response, \"echo\")\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local got_response",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local try = newtry()",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "try(function()\r\n          local server = assert(socket.bind(\"*\", 0))\r\n          try:finally(function() server:close() end)\r\n          server:settimeout(0)\r\n          ev.IO.new(\r\n             function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local client = assert(server:accept())\r\n                client:settimeout(0)\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local buff = assert(client:receive('*a'))\r\n                      ev.IO.new(\r\n                         function(loop, watcher)\r\n                            watcher:stop(loop)\r\n                            assert(client:send(buff))\r\n                            assert(client:shutdown(\"send\"))\r\n                         end,\r\n                         client:getfd(),\r\n                         ev.WRITE):start(loop)\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end,\r\n             server:getfd(),\r\n             ev.READ):start(loop)\r\n          local port   = select(2, server:getsockname())\r\n          local client = assert(socket.connect(\"127.0.0.1\", port))\r\n          try:finally(function() client:close() end)\r\n          client:settimeout(0)\r\n          ev.IO.new(\r\n             function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local str = \"Hello World\"\r\n                assert(client:send(str))\r\n                assert(client:shutdown(\"send\"))\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local response = assert(client:receive(\"*a\"))\r\n                      ok(response == str,\r\n                         tostring(response) .. \" == \" .. tostring(str))\r\n                      got_response = true\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end,\r\n             client:getfd(),\r\n             ev.WRITE):start(loop)\r\n          loop:loop()\r\n       end)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local server = assert(socket.bind(\"*\", 0))",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "try:finally(function() server:close() end)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "server:close()",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "server:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "ev.IO.new(\r\n             function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local client = assert(server:accept())\r\n                client:settimeout(0)\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local buff = assert(client:receive('*a'))\r\n                      ev.IO.new(\r\n                         function(loop, watcher)\r\n                            watcher:stop(loop)\r\n                            assert(client:send(buff))\r\n                            assert(client:shutdown(\"send\"))\r\n                         end,\r\n                         client:getfd(),\r\n                         ev.WRITE):start(loop)\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end,\r\n             server:getfd(),\r\n             ev.READ):start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "watcher:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "local client = assert(server:accept())",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "client:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local buff = assert(client:receive('*a'))\r\n                      ev.IO.new(\r\n                         function(loop, watcher)\r\n                            watcher:stop(loop)\r\n                            assert(client:send(buff))\r\n                            assert(client:shutdown(\"send\"))\r\n                         end,\r\n                         client:getfd(),\r\n                         ev.WRITE):start(loop)\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local buff = assert(client:receive('*a'))",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "ev.IO.new(\r\n                         function(loop, watcher)\r\n                            watcher:stop(loop)\r\n                            assert(client:send(buff))\r\n                            assert(client:shutdown(\"send\"))\r\n                         end,\r\n                         client:getfd(),\r\n                         ev.WRITE):start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert(client:send(buff))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert(client:shutdown(\"send\"))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local port   = select(2, server:getsockname())",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local client = assert(socket.connect(\"127.0.0.1\", port))",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "try:finally(function() client:close() end)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "client:close()",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "ev.IO.new(\r\n             function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local str = \"Hello World\"\r\n                assert(client:send(str))\r\n                assert(client:shutdown(\"send\"))\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local response = assert(client:receive(\"*a\"))\r\n                      ok(response == str,\r\n                         tostring(response) .. \" == \" .. tostring(str))\r\n                      got_response = true\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end,\r\n             client:getfd(),\r\n             ev.WRITE):start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local str = \"Hello World\"",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "assert(client:send(str))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local response = assert(client:receive(\"*a\"))\r\n                      ok(response == str,\r\n                         tostring(response) .. \" == \" .. tostring(str))\r\n                      got_response = true\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "local response = assert(client:receive(\"*a\"))",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "ok(response == str,\r\n                         tostring(response) .. \" == \" .. tostring(str))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "got_response = true",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "ok(got_response, \"echo\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function(loop, io, revents)\r\n         ok(true, 'STDIN is writable')\r\n         ok(io:getfd() == 1, 'getfd() works')\r\n         io:stop(loop)\r\n      end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function() server:close() end",
    "type": "function"
  }, {
    "id": 59,
    "text": "function(loop, watcher)\r\n                            watcher:stop(loop)\r\n                            assert(client:send(buff))\r\n                            assert(client:shutdown(\"send\"))\r\n                         end",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local buff = assert(client:receive('*a'))\r\n                      ev.IO.new(\r\n                         function(loop, watcher)\r\n                            watcher:stop(loop)\r\n                            assert(client:send(buff))\r\n                            assert(client:shutdown(\"send\"))\r\n                         end,\r\n                         client:getfd(),\r\n                         ev.WRITE):start(loop)\r\n                   end",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local client = assert(server:accept())\r\n                client:settimeout(0)\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local buff = assert(client:receive('*a'))\r\n                      ev.IO.new(\r\n                         function(loop, watcher)\r\n                            watcher:stop(loop)\r\n                            assert(client:send(buff))\r\n                            assert(client:shutdown(\"send\"))\r\n                         end,\r\n                         client:getfd(),\r\n                         ev.WRITE):start(loop)\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function() client:close() end",
    "type": "function"
  }, {
    "id": 66,
    "text": "function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local response = assert(client:receive(\"*a\"))\r\n                      ok(response == str,\r\n                         tostring(response) .. \" == \" .. tostring(str))\r\n                      got_response = true\r\n                   end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local str = \"Hello World\"\r\n                assert(client:send(str))\r\n                assert(client:shutdown(\"send\"))\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local response = assert(client:receive(\"*a\"))\r\n                      ok(response == str,\r\n                         tostring(response) .. \" == \" .. tostring(str))\r\n                      got_response = true\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n          local server = assert(socket.bind(\"*\", 0))\r\n          try:finally(function() server:close() end)\r\n          server:settimeout(0)\r\n          ev.IO.new(\r\n             function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local client = assert(server:accept())\r\n                client:settimeout(0)\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local buff = assert(client:receive('*a'))\r\n                      ev.IO.new(\r\n                         function(loop, watcher)\r\n                            watcher:stop(loop)\r\n                            assert(client:send(buff))\r\n                            assert(client:shutdown(\"send\"))\r\n                         end,\r\n                         client:getfd(),\r\n                         ev.WRITE):start(loop)\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end,\r\n             server:getfd(),\r\n             ev.READ):start(loop)\r\n          local port   = select(2, server:getsockname())\r\n          local client = assert(socket.connect(\"127.0.0.1\", port))\r\n          try:finally(function() client:close() end)\r\n          client:settimeout(0)\r\n          ev.IO.new(\r\n             function(loop, watcher)\r\n                watcher:stop(loop)\r\n                local str = \"Hello World\"\r\n                assert(client:send(str))\r\n                assert(client:shutdown(\"send\"))\r\n                ev.IO.new(\r\n                   function(loop, watcher)\r\n                      watcher:stop(loop)\r\n                      local response = assert(client:receive(\"*a\"))\r\n                      ok(response == str,\r\n                         tostring(response) .. \" == \" .. tostring(str))\r\n                      got_response = true\r\n                   end,\r\n                   client:getfd(),\r\n                   ev.READ):start(loop)\r\n             end,\r\n             client:getfd(),\r\n             ev.WRITE):start(loop)\r\n          loop:loop()\r\n       end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "",
    "type": "function container"
  }, {
    "id": 73,
    "text": "IO.new",
    "type": "global function"
  }, {
    "id": 74,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 75,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 76,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 77,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 78,
    "text": "try",
    "type": "global function"
  }, {
    "id": 79,
    "text": "select",
    "type": "global function"
  }, {
    "id": 80,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 81,
    "text": "print",
    "type": "global function"
  }, {
    "id": 82,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 83,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 84,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 85,
    "text": "require",
    "type": "global function"
  }, {
    "id": 86,
    "text": "ok",
    "type": "global function"
  }, {
    "id": 87,
    "text": "noleaks",
    "type": "global function"
  }, {
    "id": 88,
    "text": "(tap)",
    "type": "module"
  }, {
    "id": 89,
    "text": "(ev)",
    "type": "module"
  }, {
    "id": 90,
    "text": "(help)",
    "type": "module"
  }, {
    "id": 91,
    "text": "(dumper)",
    "type": "module"
  }, {
    "id": 92,
    "text": "",
    "type": "variable container"
  }, {
    "id": 93,
    "text": "",
    "type": "require container"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "symbol"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "global variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "global variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  } ]
}