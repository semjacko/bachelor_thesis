{
  "_filename": "test_ev_signal.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-ev/test/test_ev_signal.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 6
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 8
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 7
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 6
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 7
  }, {
    "from": 18,
    "label": "has",
    "to": 8
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 19
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 33,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 39
  }, {
    "from": 42,
    "label": "has",
    "to": 40
  }, {
    "from": 42,
    "label": "has",
    "to": 6
  }, {
    "from": 33,
    "label": "has",
    "to": 44
  }, {
    "from": 33,
    "label": "has",
    "to": 8
  }, {
    "from": 33,
    "label": "has",
    "to": 9
  }, {
    "from": 33,
    "label": "has",
    "to": 45
  }, {
    "from": 33,
    "label": "has",
    "to": 46
  }, {
    "from": 33,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 35
  }, {
    "from": 48,
    "label": "has",
    "to": 36
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 40
  }, {
    "from": 48,
    "label": "has",
    "to": 41
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 40
  }, {
    "from": 48,
    "label": "has",
    "to": 44
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 8
  }, {
    "from": 48,
    "label": "has",
    "to": 9
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 48,
    "label": "has",
    "to": 59
  }, {
    "from": 48,
    "label": "has",
    "to": 60
  }, {
    "from": 48,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 62,
    "label": "has",
    "to": 5
  }, {
    "from": 62,
    "label": "has",
    "to": 6
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 14
  }, {
    "from": 64,
    "label": "has",
    "to": 6
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 21
  }, {
    "from": 66,
    "label": "has",
    "to": 22
  }, {
    "from": 66,
    "label": "has",
    "to": 6
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 21
  }, {
    "from": 68,
    "label": "has",
    "to": 29
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 70,
    "label": "has",
    "to": 40
  }, {
    "from": 70,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 39
  }, {
    "from": 72,
    "label": "has",
    "to": 40
  }, {
    "from": 72,
    "label": "has",
    "to": 6
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 74,
    "label": "has",
    "to": 40
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 76,
    "label": "has",
    "to": 40
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 56
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "calls",
    "to": 85
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 11,
    "label": "calls",
    "to": 82
  }, {
    "from": 18,
    "label": "calls",
    "to": 82
  }, {
    "from": 27,
    "label": "calls",
    "to": 82
  }, {
    "from": 33,
    "label": "calls",
    "to": 82
  }, {
    "from": 33,
    "label": "calls",
    "to": 82
  }, {
    "from": 48,
    "label": "calls",
    "to": 82
  }, {
    "from": 48,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 11,
    "label": "calls",
    "to": 84
  }, {
    "from": 18,
    "label": "calls",
    "to": 84
  }, {
    "from": 33,
    "label": "calls",
    "to": 84
  }, {
    "from": 48,
    "label": "calls",
    "to": 84
  }, {
    "from": 27,
    "label": "calls",
    "to": 83
  }, {
    "from": 48,
    "label": "calls",
    "to": 81
  }, {
    "from": 80,
    "label": "calls",
    "to": 86
  }, {
    "from": 80,
    "label": "calls",
    "to": 86
  }, {
    "from": 80,
    "label": "calls",
    "to": 86
  }, {
    "from": 80,
    "label": "calls",
    "to": 86
  }, {
    "from": 2,
    "label": "calls",
    "to": 87
  }, {
    "from": 2,
    "label": "calls",
    "to": 87
  }, {
    "from": 11,
    "label": "calls",
    "to": 87
  }, {
    "from": 18,
    "label": "calls",
    "to": 87
  }, {
    "from": 18,
    "label": "calls",
    "to": 87
  }, {
    "from": 18,
    "label": "calls",
    "to": 87
  }, {
    "from": 18,
    "label": "calls",
    "to": 87
  }, {
    "from": 27,
    "label": "calls",
    "to": 87
  }, {
    "from": 27,
    "label": "calls",
    "to": 87
  }, {
    "from": 33,
    "label": "calls",
    "to": 87
  }, {
    "from": 33,
    "label": "calls",
    "to": 87
  }, {
    "from": 48,
    "label": "calls",
    "to": 87
  }, {
    "from": 80,
    "label": "calls",
    "to": 88
  }, {
    "from": 80,
    "label": "calls",
    "to": 88
  }, {
    "from": 80,
    "label": "calls",
    "to": 88
  }, {
    "from": 80,
    "label": "calls",
    "to": 88
  }, {
    "from": 80,
    "label": "calls",
    "to": 88
  }, {
    "from": 80,
    "label": "calls",
    "to": 88
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 80,
    "label": "declares",
    "to": 2
  }, {
    "from": 80,
    "label": "declares",
    "to": 11
  }, {
    "from": 80,
    "label": "declares",
    "to": 18
  }, {
    "from": 80,
    "label": "declares",
    "to": 27
  }, {
    "from": 80,
    "label": "declares",
    "to": 33
  }, {
    "from": 80,
    "label": "declares",
    "to": 48
  }, {
    "from": 80,
    "label": "declares",
    "to": 62
  }, {
    "from": 80,
    "label": "declares",
    "to": 64
  }, {
    "from": 80,
    "label": "declares",
    "to": 66
  }, {
    "from": 80,
    "label": "declares",
    "to": 68
  }, {
    "from": 80,
    "label": "declares",
    "to": 70
  }, {
    "from": 80,
    "label": "declares",
    "to": 72
  }, {
    "from": 80,
    "label": "declares",
    "to": 74
  }, {
    "from": 80,
    "label": "declares",
    "to": 76
  }, {
    "from": 80,
    "label": "declares",
    "to": 78
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 94
  }, {
    "from": 93,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 93,
    "label": "initializes",
    "to": 97
  }, {
    "from": 93,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 93,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 93,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 93,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 93,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 94,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "requires",
    "to": 89
  }, {
    "from": 94,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "requires",
    "to": 90
  }, {
    "from": 94,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 91
  }, {
    "from": 94,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 92
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_ev_signal",
    "type": "module"
  }, {
    "id": 2,
    "text": "function test_basic()\r\n   local sig = ev.Signal.new(\r\n      function(loop, sig, revents)\r\n         ok(true, 'got SIGALRM')\r\n         ok(ev.SIGNAL == revents, 'ev.SIGNAL(' .. ev.SIGNAL .. ') == revents (' .. revents .. ')')\r\n         sig:stop(loop)\r\n      end,\r\n      14) -- SIGALRM\r\n   sig:start(loop)\r\n   os.execute('kill -14 $PPID')\r\n   loop:loop()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local sig = ev.Signal.new(\r\n      function(loop, sig, revents)\r\n         ok(true, 'got SIGALRM')\r\n         ok(ev.SIGNAL == revents, 'ev.SIGNAL(' .. ev.SIGNAL .. ') == revents (' .. revents .. ')')\r\n         sig:stop(loop)\r\n      end,\r\n      14)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "ok(true, 'got SIGALRM')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "ok(ev.SIGNAL == revents, 'ev.SIGNAL(' .. ev.SIGNAL .. ') == revents (' .. revents .. ')')",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "sig:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "sig:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "os.execute('kill -14 $PPID')",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "loop:loop()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function test_daemon_true()\r\n   local loop_iters = 0\r\n   local sig = ev.Signal.new(\r\n      function(loop, sig)\r\n         ok(loop_iters > 0, 'got SIGALRM after one loop iteration')\r\n         sig:stop(loop)\r\n      end,\r\n      14) -- SIGALRM\r\n\r\n   sig:start(loop, true)\r\n   loop:loop() -- Should be a no-op.\r\n   loop_iters = 1\r\n   os.execute('kill -14 $PPID')\r\n   loop:loop()\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local loop_iters = 0",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local sig = ev.Signal.new(\r\n      function(loop, sig)\r\n         ok(loop_iters > 0, 'got SIGALRM after one loop iteration')\r\n         sig:stop(loop)\r\n      end,\r\n      14)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "ok(loop_iters > 0, 'got SIGALRM after one loop iteration')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "sig:start(loop, true)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "loop_iters = 1",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function test_start_stop_active()\r\n   local cnt = 0\r\n   local sig = ev.Signal.new(\r\n      function(loop, sig)\r\n         cnt = cnt + 1\r\n         ok(cnt == 1, 'get SIGALRM exactly once')\r\n         sig:stop(loop)\r\n      end,\r\n      14) -- SIGALRM\r\n\r\n   ok(not sig:is_active(), 'not active')\r\n\r\n   sig:start(loop)\r\n\r\n   ok(sig:is_active(), 'active')\r\n   sig:stop(loop)\r\n\r\n   loop:loop() -- no-op\r\n\r\n   sig:start(loop)\r\n   os.execute('kill -14 $PPID')\r\n\r\n   loop:loop()\r\n\r\n   ok(cnt == 1, 'SIGALRM callback got called')\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local cnt = 0",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local sig = ev.Signal.new(\r\n      function(loop, sig)\r\n         cnt = cnt + 1\r\n         ok(cnt == 1, 'get SIGALRM exactly once')\r\n         sig:stop(loop)\r\n      end,\r\n      14)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "cnt = cnt + 1",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "ok(cnt == 1, 'get SIGALRM exactly once')",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "ok(not sig:is_active(), 'not active')",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "ok(sig:is_active(), 'active')",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "ok(cnt == 1, 'SIGALRM callback got called')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function test_callback()\r\n   local cnt = 0\r\n   local sig = ev.Signal.new(\r\n      function()\r\n         cnt = cnt + 1\r\n         ok(cnt == 1, 'Signal callback called exactly once')\r\n      end,\r\n      14)\r\n\r\n   sig:callback()()\r\n   ok(cnt == 1, 'Signal callback actually got called')\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local sig = ev.Signal.new(\r\n      function()\r\n         cnt = cnt + 1\r\n         ok(cnt == 1, 'Signal callback called exactly once')\r\n      end,\r\n      14)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "ok(cnt == 1, 'Signal callback called exactly once')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "sig:callback()()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "ok(cnt == 1, 'Signal callback actually got called')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function test_is_pending()\r\n   local num_pending = 0\r\n   local num_called  = 0\r\n   local sig2\r\n   local sig1 = ev.Signal.new(\r\n      function(loop, sig)\r\n         if ( sig2:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n         sig:stop(loop)\r\n      end,\r\n      14)\r\n\r\n   sig1:start(loop)\r\n\r\n   sig2 = ev.Signal.new(\r\n      function(loop, sig)\r\n         if ( sig1:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n         sig:stop(loop)\r\n      end,\r\n      14)\r\n\r\n   sig2:start(loop)\r\n\r\n   os.execute('kill -14 $PPID')\r\n   loop:loop()\r\n\r\n   ok(num_pending == 1, 'exactly one signal was pending')\r\n   ok(num_called  == 2, 'both signal handlers got called')\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local num_pending = 0",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local num_called  = 0",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local sig2",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local sig1 = ev.Signal.new(\r\n      function(loop, sig)\r\n         if ( sig2:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n         sig:stop(loop)\r\n      end,\r\n      14)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if ( sig2:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "num_pending = num_pending + 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "num_called = num_called + 1",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "sig1:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "sig2 = ev.Signal.new(\r\n      function(loop, sig)\r\n         if ( sig1:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n         sig:stop(loop)\r\n      end,\r\n      14)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if ( sig1:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "sig2:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "ok(num_pending == 1, 'exactly one signal was pending')",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "ok(num_called  == 2, 'both signal handlers got called')",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function test_clear_pending()\r\n   local num_called  = 0\r\n   local sig2\r\n   local sig1 = ev.Signal.new(\r\n      function(loop, sig)\r\n         if ( sig2:is_pending() ) then\r\n            sig2:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end,\r\n      14)\r\n   sig1:start(loop)\r\n\r\n   sig2 = ev.Signal.new(\r\n      function(loop, sig)\r\n         if ( sig1:is_pending() ) then\r\n            sig1:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end,\r\n      14)\r\n   sig2:start(loop)\r\n\r\n   local timer = ev.Timer.new(\r\n      function(loop, sig)\r\n         loop:unloop()\r\n      end,\r\n      0.01)\r\n   timer:start(loop)\r\n\r\n   os.execute('kill -14 $PPID')\r\n   loop:loop()\r\n   sig1:stop(loop)\r\n   sig2:stop(loop)\r\n\r\n   ok(num_called  == 1, 'just one signal handler got called')\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local sig1 = ev.Signal.new(\r\n      function(loop, sig)\r\n         if ( sig2:is_pending() ) then\r\n            sig2:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end,\r\n      14)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if ( sig2:is_pending() ) then\r\n            sig2:clear_pending(loop)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "sig2:clear_pending(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "sig2 = ev.Signal.new(\r\n      function(loop, sig)\r\n         if ( sig1:is_pending() ) then\r\n            sig1:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end,\r\n      14)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if ( sig1:is_pending() ) then\r\n            sig1:clear_pending(loop)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "sig1:clear_pending(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local timer = ev.Timer.new(\r\n      function(loop, sig)\r\n         loop:unloop()\r\n      end,\r\n      0.01)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "loop:unloop()",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "timer:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "sig1:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "sig2:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "ok(num_called  == 1, 'just one signal handler got called')",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function(loop, sig, revents)\r\n         ok(true, 'got SIGALRM')\r\n         ok(ev.SIGNAL == revents, 'ev.SIGNAL(' .. ev.SIGNAL .. ') == revents (' .. revents .. ')')\r\n         sig:stop(loop)\r\n      end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function(loop, sig)\r\n         ok(loop_iters > 0, 'got SIGALRM after one loop iteration')\r\n         sig:stop(loop)\r\n      end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function(loop, sig)\r\n         cnt = cnt + 1\r\n         ok(cnt == 1, 'get SIGALRM exactly once')\r\n         sig:stop(loop)\r\n      end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function()\r\n         cnt = cnt + 1\r\n         ok(cnt == 1, 'Signal callback called exactly once')\r\n      end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function(loop, sig)\r\n         if ( sig2:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n         sig:stop(loop)\r\n      end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function(loop, sig)\r\n         if ( sig1:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n         sig:stop(loop)\r\n      end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function(loop, sig)\r\n         if ( sig2:is_pending() ) then\r\n            sig2:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function(loop, sig)\r\n         if ( sig1:is_pending() ) then\r\n            sig1:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function(loop, sig)\r\n         loop:unloop()\r\n      end",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "",
    "type": "function container"
  }, {
    "id": 81,
    "text": "Timer.new",
    "type": "global function"
  }, {
    "id": 82,
    "text": "Signal.new",
    "type": "global function"
  }, {
    "id": 83,
    "text": "sigcallback",
    "type": "global function"
  }, {
    "id": 84,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 85,
    "text": "print",
    "type": "global function"
  }, {
    "id": 86,
    "text": "require",
    "type": "global function"
  }, {
    "id": 87,
    "text": "ok",
    "type": "global function"
  }, {
    "id": 88,
    "text": "noleaks",
    "type": "global function"
  }, {
    "id": 89,
    "text": "(tap)",
    "type": "module"
  }, {
    "id": 90,
    "text": "(ev)",
    "type": "module"
  }, {
    "id": 91,
    "text": "(help)",
    "type": "module"
  }, {
    "id": 92,
    "text": "(dumper)",
    "type": "module"
  }, {
    "id": 93,
    "text": "",
    "type": "variable container"
  }, {
    "id": 94,
    "text": "",
    "type": "require container"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "symbol"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "global variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "global variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  } ]
}