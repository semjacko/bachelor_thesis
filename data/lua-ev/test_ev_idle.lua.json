{
  "_filename": "test_ev_idle.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-ev/test/test_ev_idle.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 23
  }, {
    "from": 10,
    "label": "has",
    "to": 24
  }, {
    "from": 10,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 10,
    "label": "has",
    "to": 28
  }, {
    "from": 10,
    "label": "has",
    "to": 29
  }, {
    "from": 10,
    "label": "has",
    "to": 30
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 31
  }, {
    "from": 10,
    "label": "has",
    "to": 32
  }, {
    "from": 10,
    "label": "has",
    "to": 33
  }, {
    "from": 10,
    "label": "has",
    "to": 34
  }, {
    "from": 10,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 4
  }, {
    "from": 43,
    "label": "has",
    "to": 5
  }, {
    "from": 43,
    "label": "has",
    "to": 6
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 13
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 20
  }, {
    "from": 47,
    "label": "has",
    "to": 21
  }, {
    "from": 47,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 26
  }, {
    "from": 49,
    "label": "has",
    "to": 27
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 6
  }, {
    "from": 51,
    "label": "has",
    "to": 38
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "calls",
    "to": 58
  }, {
    "from": 53,
    "label": "calls",
    "to": 58
  }, {
    "from": 53,
    "label": "calls",
    "to": 58
  }, {
    "from": 53,
    "label": "calls",
    "to": 56
  }, {
    "from": 53,
    "label": "calls",
    "to": 56
  }, {
    "from": 53,
    "label": "calls",
    "to": 56
  }, {
    "from": 53,
    "label": "calls",
    "to": 56
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 10,
    "label": "calls",
    "to": 54
  }, {
    "from": 10,
    "label": "calls",
    "to": 54
  }, {
    "from": 10,
    "label": "calls",
    "to": 54
  }, {
    "from": 36,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 57
  }, {
    "from": 2,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 10,
    "label": "calls",
    "to": 57
  }, {
    "from": 36,
    "label": "calls",
    "to": 57
  }, {
    "from": 36,
    "label": "calls",
    "to": 57
  }, {
    "from": 53,
    "label": "calls",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 53,
    "label": "declares",
    "to": 2
  }, {
    "from": 53,
    "label": "declares",
    "to": 10
  }, {
    "from": 53,
    "label": "declares",
    "to": 36
  }, {
    "from": 53,
    "label": "declares",
    "to": 43
  }, {
    "from": 53,
    "label": "declares",
    "to": 45
  }, {
    "from": 53,
    "label": "declares",
    "to": 47
  }, {
    "from": 53,
    "label": "declares",
    "to": 49
  }, {
    "from": 53,
    "label": "declares",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 63
  }, {
    "from": 1,
    "label": "contains",
    "to": 64
  }, {
    "from": 63,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 63,
    "label": "initializes",
    "to": 67
  }, {
    "from": 63,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 63,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 63,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 63,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 63,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 64,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "requires",
    "to": 59
  }, {
    "from": 64,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "requires",
    "to": 60
  }, {
    "from": 64,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "requires",
    "to": 61
  }, {
    "from": 64,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 62
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_ev_idle",
    "type": "module"
  }, {
    "id": 2,
    "text": "function test_basic()\r\n   local idle1 = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         ok(true, 'simple idle')\r\n         ok(ev.IDLE == revents, 'ev.IDLE(' .. ev.IDLE .. ') == revents (' .. revents .. ')')\r\n         idle:stop(loop)\r\n      end)\r\n   idle1:start(loop)\r\n   loop:loop()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local idle1 = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         ok(true, 'simple idle')\r\n         ok(ev.IDLE == revents, 'ev.IDLE(' .. ev.IDLE .. ') == revents (' .. revents .. ')')\r\n         idle:stop(loop)\r\n      end)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "ok(true, 'simple idle')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "ok(ev.IDLE == revents, 'ev.IDLE(' .. ev.IDLE .. ') == revents (' .. revents .. ')')",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "idle:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "idle1:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "loop:loop()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function test_priority()\r\n   local high_count, low_count = 0, 0\r\n   local idle_high = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         high_count = high_count + 1\r\n         ok(low_count == 0, 'high idle running first')\r\n         if high_count == 3 then\r\n            idle:stop(loop)\r\n         end\r\n      end)\r\n   ok(idle_high:priority(ev.MAXPRI) == 0, 'priority was default (0)')\r\n   ok(idle_high:priority() == ev.MAXPRI, 'priority correctly set')\r\n   idle_high:start(loop)\r\n   local idle_low = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         low_count = low_count + 1\r\n         ok(high_count == 3, 'low idle running last')\r\n         if low_count == 3 then\r\n            idle:stop(loop)\r\n         end\r\n      end)\r\n   idle_low:start(loop)\r\n   local daemon_count = 0\r\n   local idle_daemon = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         daemon_count = daemon_count + 1\r\n         ok(false, \"daemon idle shouldn't run at all\")\r\n     end)\r\n   ok(idle_daemon:priority(ev.MINPRI) == 0, 'priority was default (0)')\r\n   ok(idle_daemon:priority() == ev.MINPRI, 'priority correctly set')\r\n   idle_daemon:start(loop, true)\r\n   loop:loop()\r\n   ok(high_count == 3, 'high idle ran thrice')\r\n   ok(low_count == 3, 'low idle ran thrice')\r\n   ok(daemon_count == 0, 'daemon idle never ran')\r\n   idle_daemon:stop(loop)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local high_count, low_count = 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local idle_high = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         high_count = high_count + 1\r\n         ok(low_count == 0, 'high idle running first')\r\n         if high_count == 3 then\r\n            idle:stop(loop)\r\n         end\r\n      end)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "high_count = high_count + 1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "ok(low_count == 0, 'high idle running first')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "if high_count == 3 then\r\n            idle:stop(loop)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "ok(idle_high:priority(ev.MAXPRI) == 0, 'priority was default (0)')",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "ok(idle_high:priority() == ev.MAXPRI, 'priority correctly set')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "idle_high:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local idle_low = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         low_count = low_count + 1\r\n         ok(high_count == 3, 'low idle running last')\r\n         if low_count == 3 then\r\n            idle:stop(loop)\r\n         end\r\n      end)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "low_count = low_count + 1",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "ok(high_count == 3, 'low idle running last')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if low_count == 3 then\r\n            idle:stop(loop)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "idle_low:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "local daemon_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local idle_daemon = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         daemon_count = daemon_count + 1\r\n         ok(false, \"daemon idle shouldn't run at all\")\r\n     end)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "daemon_count = daemon_count + 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "ok(false, \"daemon idle shouldn't run at all\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "ok(idle_daemon:priority(ev.MINPRI) == 0, 'priority was default (0)')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "ok(idle_daemon:priority() == ev.MINPRI, 'priority correctly set')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "idle_daemon:start(loop, true)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "ok(high_count == 3, 'high idle ran thrice')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "ok(low_count == 3, 'low idle ran thrice')",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "ok(daemon_count == 0, 'daemon idle never ran')",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "idle_daemon:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function test_shadow_table()\r\n   local idle = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         idle:stop(loop)\r\n         ok(idle.user_data == \"foo\", 'shadow table works in callback')\r\n      end)\r\n   idle:start(loop)\r\n   idle.user_data = \"foo\"\r\n   ok(idle.user_data == \"foo\", 'shadow table works')\r\n   loop:loop()\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local idle = ev.Idle.new(\r\n      function(loop, idle, revents)\r\n         idle:stop(loop)\r\n         ok(idle.user_data == \"foo\", 'shadow table works in callback')\r\n      end)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "ok(idle.user_data == \"foo\", 'shadow table works in callback')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "idle:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "idle.user_data = \"foo\"",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "ok(idle.user_data == \"foo\", 'shadow table works')",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function(loop, idle, revents)\r\n         ok(true, 'simple idle')\r\n         ok(ev.IDLE == revents, 'ev.IDLE(' .. ev.IDLE .. ') == revents (' .. revents .. ')')\r\n         idle:stop(loop)\r\n      end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function(loop, idle, revents)\r\n         high_count = high_count + 1\r\n         ok(low_count == 0, 'high idle running first')\r\n         if high_count == 3 then\r\n            idle:stop(loop)\r\n         end\r\n      end",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function(loop, idle, revents)\r\n         low_count = low_count + 1\r\n         ok(high_count == 3, 'low idle running last')\r\n         if low_count == 3 then\r\n            idle:stop(loop)\r\n         end\r\n      end",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function(loop, idle, revents)\r\n         daemon_count = daemon_count + 1\r\n         ok(false, \"daemon idle shouldn't run at all\")\r\n     end",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function(loop, idle, revents)\r\n         idle:stop(loop)\r\n         ok(idle.user_data == \"foo\", 'shadow table works in callback')\r\n      end",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "",
    "type": "function container"
  }, {
    "id": 54,
    "text": "Idle.new",
    "type": "global function"
  }, {
    "id": 55,
    "text": "print",
    "type": "global function"
  }, {
    "id": 56,
    "text": "require",
    "type": "global function"
  }, {
    "id": 57,
    "text": "ok",
    "type": "global function"
  }, {
    "id": 58,
    "text": "noleaks",
    "type": "global function"
  }, {
    "id": 59,
    "text": "(tap)",
    "type": "module"
  }, {
    "id": 60,
    "text": "(ev)",
    "type": "module"
  }, {
    "id": 61,
    "text": "(help)",
    "type": "module"
  }, {
    "id": 62,
    "text": "(dumper)",
    "type": "module"
  }, {
    "id": 63,
    "text": "",
    "type": "variable container"
  }, {
    "id": 64,
    "text": "",
    "type": "require container"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "symbol"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "global variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "global variable"
  }, {
    "id": 77,
    "text": "",
    "type": "n/a"
  }, {
    "id": 78,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  } ]
}