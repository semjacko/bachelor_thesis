{
  "_filename": "test_ev_timer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-ev/test/test_ev_timer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 6
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 9,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 9,
    "label": "has",
    "to": 21
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 22
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 12
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 7
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 10
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 12
  }, {
    "from": 32,
    "label": "has",
    "to": 13
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 7
  }, {
    "from": 37,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 54
  }, {
    "from": 56,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 48,
    "label": "has",
    "to": 7
  }, {
    "from": 48,
    "label": "has",
    "to": 59
  }, {
    "from": 48,
    "label": "has",
    "to": 60
  }, {
    "from": 48,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 51
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 55
  }, {
    "from": 62,
    "label": "has",
    "to": 6
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 55
  }, {
    "from": 62,
    "label": "has",
    "to": 58
  }, {
    "from": 62,
    "label": "has",
    "to": 7
  }, {
    "from": 62,
    "label": "has",
    "to": 70
  }, {
    "from": 62,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 4
  }, {
    "from": 72,
    "label": "has",
    "to": 5
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 12
  }, {
    "from": 74,
    "label": "has",
    "to": 13
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 16
  }, {
    "from": 76,
    "label": "has",
    "to": 17
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 20
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 12
  }, {
    "from": 80,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 12
  }, {
    "from": 82,
    "label": "has",
    "to": 13
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 40
  }, {
    "from": 84,
    "label": "has",
    "to": 41
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 45
  }, {
    "from": 86,
    "label": "has",
    "to": 46
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 88,
    "label": "has",
    "to": 55
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 54
  }, {
    "from": 90,
    "label": "has",
    "to": 55
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 92,
    "label": "has",
    "to": 55
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 94,
    "label": "has",
    "to": 55
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "calls",
    "to": 102
  }, {
    "from": 96,
    "label": "calls",
    "to": 102
  }, {
    "from": 96,
    "label": "calls",
    "to": 102
  }, {
    "from": 96,
    "label": "calls",
    "to": 102
  }, {
    "from": 96,
    "label": "calls",
    "to": 102
  }, {
    "from": 96,
    "label": "calls",
    "to": 102
  }, {
    "from": 96,
    "label": "calls",
    "to": 102
  }, {
    "from": 96,
    "label": "calls",
    "to": 100
  }, {
    "from": 96,
    "label": "calls",
    "to": 100
  }, {
    "from": 96,
    "label": "calls",
    "to": 100
  }, {
    "from": 96,
    "label": "calls",
    "to": 100
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 9,
    "label": "calls",
    "to": 97
  }, {
    "from": 9,
    "label": "calls",
    "to": 97
  }, {
    "from": 9,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 31,
    "label": "calls",
    "to": 97
  }, {
    "from": 37,
    "label": "calls",
    "to": 97
  }, {
    "from": 48,
    "label": "calls",
    "to": 97
  }, {
    "from": 48,
    "label": "calls",
    "to": 97
  }, {
    "from": 62,
    "label": "calls",
    "to": 97
  }, {
    "from": 62,
    "label": "calls",
    "to": 97
  }, {
    "from": 96,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 9,
    "label": "calls",
    "to": 101
  }, {
    "from": 9,
    "label": "calls",
    "to": 101
  }, {
    "from": 9,
    "label": "calls",
    "to": 101
  }, {
    "from": 24,
    "label": "calls",
    "to": 101
  }, {
    "from": 31,
    "label": "calls",
    "to": 101
  }, {
    "from": 31,
    "label": "calls",
    "to": 101
  }, {
    "from": 31,
    "label": "calls",
    "to": 101
  }, {
    "from": 37,
    "label": "calls",
    "to": 101
  }, {
    "from": 37,
    "label": "calls",
    "to": 101
  }, {
    "from": 48,
    "label": "calls",
    "to": 101
  }, {
    "from": 48,
    "label": "calls",
    "to": 101
  }, {
    "from": 62,
    "label": "calls",
    "to": 101
  }, {
    "from": 37,
    "label": "calls",
    "to": 98
  }, {
    "from": 1,
    "label": "contains",
    "to": 96
  }, {
    "from": 96,
    "label": "declares",
    "to": 2
  }, {
    "from": 96,
    "label": "declares",
    "to": 9
  }, {
    "from": 96,
    "label": "declares",
    "to": 24
  }, {
    "from": 96,
    "label": "declares",
    "to": 31
  }, {
    "from": 96,
    "label": "declares",
    "to": 37
  }, {
    "from": 96,
    "label": "declares",
    "to": 48
  }, {
    "from": 96,
    "label": "declares",
    "to": 62
  }, {
    "from": 96,
    "label": "declares",
    "to": 72
  }, {
    "from": 96,
    "label": "declares",
    "to": 74
  }, {
    "from": 96,
    "label": "declares",
    "to": 76
  }, {
    "from": 96,
    "label": "declares",
    "to": 78
  }, {
    "from": 96,
    "label": "declares",
    "to": 80
  }, {
    "from": 96,
    "label": "declares",
    "to": 82
  }, {
    "from": 96,
    "label": "declares",
    "to": 84
  }, {
    "from": 96,
    "label": "declares",
    "to": 86
  }, {
    "from": 96,
    "label": "declares",
    "to": 88
  }, {
    "from": 96,
    "label": "declares",
    "to": 90
  }, {
    "from": 96,
    "label": "declares",
    "to": 92
  }, {
    "from": 96,
    "label": "declares",
    "to": 94
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 1,
    "label": "contains",
    "to": 108
  }, {
    "from": 107,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 107,
    "label": "initializes",
    "to": 111
  }, {
    "from": 107,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 107,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 107,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 107,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 107,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 108,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 103
  }, {
    "from": 108,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "requires",
    "to": 104
  }, {
    "from": 108,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "requires",
    "to": 105
  }, {
    "from": 108,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "requires",
    "to": 106
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 86
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_ev_timer",
    "type": "module"
  }, {
    "id": 2,
    "text": "function test_basic()\r\n   local timer1 = ev.Timer.new(\r\n      function(loop, timer, revents)\r\n         ok(true, 'one second timer')\r\n         ok(ev.TIMEOUT == revents, 'ev.TIMEOUT(' .. ev.TIMEOUT .. ') == revents (' .. revents .. ')')\r\n      end,\r\n      0.01)\r\n   timer1:start(loop)\r\n   loop:loop()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local timer1 = ev.Timer.new(\r\n      function(loop, timer, revents)\r\n         ok(true, 'one second timer')\r\n         ok(ev.TIMEOUT == revents, 'ev.TIMEOUT(' .. ev.TIMEOUT .. ') == revents (' .. revents .. ')')\r\n      end,\r\n      0.01)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "ok(true, 'one second timer')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "ok(ev.TIMEOUT == revents, 'ev.TIMEOUT(' .. ev.TIMEOUT .. ') == revents (' .. revents .. ')')",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "timer1:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "loop:loop()",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function test_daemon_true()\r\n   local timer1_count = 0\r\n   local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         timer1_count = timer1_count + 1\r\n         ok(timer1_count == 1, 'once and only once')\r\n      end, 0.1)\r\n   timer1:start(loop)\r\n\r\n   local timer2_count = 0\r\n   local timer2 = ev.Timer.new(\r\n      function(loop, timer)\r\n         timer2_count = timer2_count + 1\r\n         ok(timer2_count == 1, 'once and only once')\r\n      end, 0.01)\r\n\r\n   timer2:start(loop, true)\r\n\r\n   loop:loop()\r\n\r\n   local timer3 = ev.Timer.new(\r\n      function(loop, timer)\r\n         ok(false, 'Should never be called!')\r\n      end, 0.01)\r\n\r\n   timer3:start(loop, true)\r\n\r\n\r\n   loop:loop()\r\n\r\n   -- TODO: Should we make it so timer3 is automatically stopped if it is never executed in the event loop?\r\n   timer3:stop(loop)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local timer1_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         timer1_count = timer1_count + 1\r\n         ok(timer1_count == 1, 'once and only once')\r\n      end, 0.1)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "timer1_count = timer1_count + 1",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "ok(timer1_count == 1, 'once and only once')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "local timer2_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local timer2 = ev.Timer.new(\r\n      function(loop, timer)\r\n         timer2_count = timer2_count + 1\r\n         ok(timer2_count == 1, 'once and only once')\r\n      end, 0.01)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "timer2_count = timer2_count + 1",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "ok(timer2_count == 1, 'once and only once')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "timer2:start(loop, true)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local timer3 = ev.Timer.new(\r\n      function(loop, timer)\r\n         ok(false, 'Should never be called!')\r\n      end, 0.01)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "ok(false, 'Should never be called!')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "timer3:start(loop, true)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "timer3:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function test_again()\r\n   local timer1_count = 0\r\n   local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         timer1_count = timer1_count + 1\r\n         if timer1_count == 3 then\r\n            timer:stop(loop)\r\n         else\r\n            timer:again(loop, 0.1)\r\n         end\r\n      end, 0.1)\r\n   timer1:start(loop)\r\n   loop:loop()\r\n   ok(timer1_count == 3, 'timer1 called thrice')\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         timer1_count = timer1_count + 1\r\n         if timer1_count == 3 then\r\n            timer:stop(loop)\r\n         else\r\n            timer:again(loop, 0.1)\r\n         end\r\n      end, 0.1)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if timer1_count == 3 then\r\n            timer:stop(loop)\r\n         else\r\n            timer:again(loop, 0.1)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "timer:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "timer:again(loop, 0.1)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "ok(timer1_count == 3, 'timer1 called thrice')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function test_start_stop_active()\r\n   local timer1_count = 0\r\n   local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         timer1_count = timer1_count + 1\r\n         ok(timer1_count == 1, 'once and only once')\r\n      end, 0.01)\r\n\r\n   ok(not timer1:is_active(), 'not active')\r\n\r\n   timer1:start(loop)\r\n\r\n   ok(timer1:is_active(), 'active')\r\n\r\n   timer1:stop(loop)\r\n\r\n   loop:loop()\r\n\r\n   timer1:start(loop)\r\n\r\n   loop:loop()\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         timer1_count = timer1_count + 1\r\n         ok(timer1_count == 1, 'once and only once')\r\n      end, 0.01)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "ok(not timer1:is_active(), 'not active')",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "ok(timer1:is_active(), 'active')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "timer1:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function test_callback()\r\n   local timer1_count1 = 0\r\n   local timer1 = ev.Timer.new(\r\n      function()\r\n         timer1_count1 = timer1_count1 + 1\r\n         ok(timer1_count1 == 1, 'once and only once A')\r\n      end, 0.01)\r\n\r\n   -- Test calling the callback manually:\r\n   timer1:callback()()\r\n\r\n   local timer1_count2 = 0\r\n\r\n   -- Test setting the callback:\r\n   timer1:callback(\r\n      function(loop, timer)\r\n         timer1_count2 = timer1_count2 + 1\r\n         ok(timer1_count2 == 1, 'once and only once B')\r\n      end)\r\n\r\n   -- Register it and have it get called:\r\n   timer1:start(loop)\r\n\r\n   loop:loop()\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local timer1_count1 = 0",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local timer1 = ev.Timer.new(\r\n      function()\r\n         timer1_count1 = timer1_count1 + 1\r\n         ok(timer1_count1 == 1, 'once and only once A')\r\n      end, 0.01)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "timer1_count1 = timer1_count1 + 1",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "ok(timer1_count1 == 1, 'once and only once A')",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "timer1:callback()()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local timer1_count2 = 0",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "timer1:callback(\r\n      function(loop, timer)\r\n         timer1_count2 = timer1_count2 + 1\r\n         ok(timer1_count2 == 1, 'once and only once B')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "timer1_count2 = timer1_count2 + 1",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "ok(timer1_count2 == 1, 'once and only once B')",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function test_is_pending()\r\n   local num_pending = 0\r\n   local num_called  = 0\r\n   local timer2\r\n   local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         if ( timer2:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n      end, 0.01)\r\n\r\n   timer1:start(loop)\r\n\r\n   timer2 = ev.Timer.new(\r\n      function(loop, timer)\r\n         if ( timer1:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n      end, 0.01)\r\n\r\n   timer2:start(loop)\r\n\r\n   loop:loop()\r\n\r\n   ok(num_pending == 1, 'exactly one timer was pending')\r\n   ok(num_called  == 2, 'both timers got called')\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local num_pending = 0",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local num_called  = 0",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local timer2",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         if ( timer2:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n      end, 0.01)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if ( timer2:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "num_pending = num_pending + 1",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "num_called = num_called + 1",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "timer2 = ev.Timer.new(\r\n      function(loop, timer)\r\n         if ( timer1:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n      end, 0.01)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if ( timer1:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "timer2:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "ok(num_pending == 1, 'exactly one timer was pending')",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "ok(num_called  == 2, 'both timers got called')",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function test_clear_pending()\r\n   local num_called = 0\r\n   local timer2\r\n   local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         if ( timer2:is_pending() ) then\r\n            timer2:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end, 0.01)\r\n\r\n   timer1:start(loop)\r\n\r\n   timer2 = ev.Timer.new(\r\n      function(loop, timer)\r\n         if ( timer1:is_pending() ) then\r\n            timer1:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end, 0.01)\r\n\r\n   timer2:start(loop)\r\n\r\n   loop:loop()\r\n\r\n   ok(num_called == 1, 'exactly one timer was called')\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local num_called = 0",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local timer1 = ev.Timer.new(\r\n      function(loop, timer)\r\n         if ( timer2:is_pending() ) then\r\n            timer2:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end, 0.01)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if ( timer2:is_pending() ) then\r\n            timer2:clear_pending(loop)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "timer2:clear_pending(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "timer2 = ev.Timer.new(\r\n      function(loop, timer)\r\n         if ( timer1:is_pending() ) then\r\n            timer1:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end, 0.01)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if ( timer1:is_pending() ) then\r\n            timer1:clear_pending(loop)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "timer1:clear_pending(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "ok(num_called == 1, 'exactly one timer was called')",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function(loop, timer, revents)\r\n         ok(true, 'one second timer')\r\n         ok(ev.TIMEOUT == revents, 'ev.TIMEOUT(' .. ev.TIMEOUT .. ') == revents (' .. revents .. ')')\r\n      end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function(loop, timer)\r\n         timer1_count = timer1_count + 1\r\n         ok(timer1_count == 1, 'once and only once')\r\n      end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function(loop, timer)\r\n         timer2_count = timer2_count + 1\r\n         ok(timer2_count == 1, 'once and only once')\r\n      end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function(loop, timer)\r\n         ok(false, 'Should never be called!')\r\n      end",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function(loop, timer)\r\n         timer1_count = timer1_count + 1\r\n         if timer1_count == 3 then\r\n            timer:stop(loop)\r\n         else\r\n            timer:again(loop, 0.1)\r\n         end\r\n      end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function(loop, timer)\r\n         timer1_count = timer1_count + 1\r\n         ok(timer1_count == 1, 'once and only once')\r\n      end",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n         timer1_count1 = timer1_count1 + 1\r\n         ok(timer1_count1 == 1, 'once and only once A')\r\n      end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function(loop, timer)\r\n         timer1_count2 = timer1_count2 + 1\r\n         ok(timer1_count2 == 1, 'once and only once B')\r\n      end",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function(loop, timer)\r\n         if ( timer2:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n      end",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function(loop, timer)\r\n         if ( timer1:is_pending() ) then\r\n            num_pending = num_pending + 1\r\n         end\r\n         num_called = num_called + 1\r\n      end",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function(loop, timer)\r\n         if ( timer2:is_pending() ) then\r\n            timer2:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end",
    "type": "function"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function(loop, timer)\r\n         if ( timer1:is_pending() ) then\r\n            timer1:clear_pending(loop)\r\n         end\r\n         num_called = num_called + 1\r\n      end",
    "type": "function"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "",
    "type": "function container"
  }, {
    "id": 97,
    "text": "Timer.new",
    "type": "global function"
  }, {
    "id": 98,
    "text": "timer1callback",
    "type": "global function"
  }, {
    "id": 99,
    "text": "print",
    "type": "global function"
  }, {
    "id": 100,
    "text": "require",
    "type": "global function"
  }, {
    "id": 101,
    "text": "ok",
    "type": "global function"
  }, {
    "id": 102,
    "text": "noleaks",
    "type": "global function"
  }, {
    "id": 103,
    "text": "(tap)",
    "type": "module"
  }, {
    "id": 104,
    "text": "(ev)",
    "type": "module"
  }, {
    "id": 105,
    "text": "(help)",
    "type": "module"
  }, {
    "id": 106,
    "text": "(dumper)",
    "type": "module"
  }, {
    "id": 107,
    "text": "",
    "type": "variable container"
  }, {
    "id": 108,
    "text": "",
    "type": "require container"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "symbol"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  }, {
    "id": 118,
    "text": "",
    "type": "global variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  } ]
}