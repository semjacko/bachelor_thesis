{
  "_filename": "dumper.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-ev/test/dumper.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 20
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 23,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 23,
    "label": "calls",
    "to": 32
  }, {
    "from": 29,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 2
  }, {
    "from": 23,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 29,
    "label": "declares",
    "to": 2
  }, {
    "from": 29,
    "label": "declares",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dumper",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function dump_impl(input, output, path, indent, done)\r\n   if nil == input then\r\n      table.insert(output, \"nil\")\r\n   elseif \"table\" == type(input) then\r\n      if done[input] then\r\n         table.insert(output, done[input]);\r\n      else\r\n         done[input] = path\r\n         table.insert(output, tostring(input))\r\n         table.insert(output, \" {\\n\");\r\n         for key, value in pairs(input) do\r\n            table.insert(output, string.rep(\"  \", indent + 1)) -- indent it\r\n            table.insert(output, string.format(\"[%s] = \", tostring(key)))\r\n            local kpath = string.format(\"%s[%s]\", path, tostring(key))\r\n            dump_impl(value, output, kpath, indent + 1, done)\r\n            table.insert(output, \"\\n\")\r\n         end\r\n         table.insert(output, string.rep(\"  \", indent)) -- indent it\r\n         table.insert(output, \"}\");\r\n      end\r\n   elseif \"string\" == type(input) then\r\n      table.insert(output, \"\\\"\")\r\n      table.insert(output, input)\r\n      table.insert(output, \"\\\"\");\r\n   elseif \"number\" == type(input) or \"boolean\" == type(input) then\r\n      table.insert(output, tostring(input))\r\n   else\r\n      table.insert(output, \"[\")\r\n      table.insert(output, tostring(input))\r\n      table.insert(output, \"\\]\");\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if nil == input then\r\n      table.insert(output, \"nil\")\r\n   elseif \"table\" == type(input) then\r\n      if done[input] then\r\n         table.insert(output, done[input]);\r\n      else\r\n         done[input] = path\r\n         table.insert(output, tostring(input))\r\n         table.insert(output, \" {\\n\");\r\n         for key, value in pairs(input) do\r\n            table.insert(output, string.rep(\"  \", indent + 1)) -- indent it\r\n            table.insert(output, string.format(\"[%s] = \", tostring(key)))\r\n            local kpath = string.format(\"%s[%s]\", path, tostring(key))\r\n            dump_impl(value, output, kpath, indent + 1, done)\r\n            table.insert(output, \"\\n\")\r\n         end\r\n         table.insert(output, string.rep(\"  \", indent)) -- indent it\r\n         table.insert(output, \"}\");\r\n      end\r\n   elseif \"string\" == type(input) then\r\n      table.insert(output, \"\\\"\")\r\n      table.insert(output, input)\r\n      table.insert(output, \"\\\"\");\r\n   elseif \"number\" == type(input) or \"boolean\" == type(input) then\r\n      table.insert(output, tostring(input))\r\n   else\r\n      table.insert(output, \"[\")\r\n      table.insert(output, tostring(input))\r\n      table.insert(output, \"\\]\");\r\n   end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "table.insert(output, \"nil\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "if done[input] then\r\n         table.insert(output, done[input]);\r\n      else\r\n         done[input] = path\r\n         table.insert(output, tostring(input))\r\n         table.insert(output, \" {\\n\");\r\n         for key, value in pairs(input) do\r\n            table.insert(output, string.rep(\"  \", indent + 1)) -- indent it\r\n            table.insert(output, string.format(\"[%s] = \", tostring(key)))\r\n            local kpath = string.format(\"%s[%s]\", path, tostring(key))\r\n            dump_impl(value, output, kpath, indent + 1, done)\r\n            table.insert(output, \"\\n\")\r\n         end\r\n         table.insert(output, string.rep(\"  \", indent)) -- indent it\r\n         table.insert(output, \"}\");\r\n      end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "table.insert(output, done[input])",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "done[input] = path",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "table.insert(output, tostring(input))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "table.insert(output, \" {\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "for key, value in pairs(input) do\r\n            table.insert(output, string.rep(\"  \", indent + 1)) -- indent it\r\n            table.insert(output, string.format(\"[%s] = \", tostring(key)))\r\n            local kpath = string.format(\"%s[%s]\", path, tostring(key))\r\n            dump_impl(value, output, kpath, indent + 1, done)\r\n            table.insert(output, \"\\n\")\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "table.insert(output, string.rep(\"  \", indent + 1))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "table.insert(output, string.format(\"[%s] = \", tostring(key)))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local kpath = string.format(\"%s[%s]\", path, tostring(key))",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "dump_impl(value, output, kpath, indent + 1, done)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "table.insert(output, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "table.insert(output, string.rep(\"  \", indent))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "table.insert(output, \"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "table.insert(output, \"\\\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "table.insert(output, input)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "table.insert(output, \"[\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "table.insert(output, \"\\]\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function dump(name, input)\r\n   local output = { tostring(name) }\r\n   table.insert(output, \" = \")\r\n   dump_impl(input, output, name, 0, {})\r\n   return table.concat(output)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local output = { tostring(name) }",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "table.insert(output, \" = \")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "dump_impl(input, output, name, 0, {})",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "",
    "type": "function container"
  }, {
    "id": 30,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 31,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 32,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 33,
    "text": "format",
    "type": "global function"
  }, {
    "id": 34,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 35,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 36,
    "text": "module",
    "type": "global function"
  }, {
    "id": 37,
    "text": "type",
    "type": "global function"
  }, {
    "id": 38,
    "text": "",
    "type": "variable container"
  }, {
    "id": 39,
    "text": "",
    "type": "require container"
  } ]
}