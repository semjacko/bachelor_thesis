{
  "_filename": "test_ev_child.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-ev/test/test_ev_child.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 27
  }, {
    "from": 14,
    "label": "has",
    "to": 28
  }, {
    "from": 14,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 30,
    "label": "has",
    "to": 18
  }, {
    "from": 30,
    "label": "has",
    "to": 19
  }, {
    "from": 30,
    "label": "has",
    "to": 20
  }, {
    "from": 30,
    "label": "has",
    "to": 21
  }, {
    "from": 30,
    "label": "has",
    "to": 22
  }, {
    "from": 30,
    "label": "has",
    "to": 23
  }, {
    "from": 30,
    "label": "has",
    "to": 24
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 32,
    "label": "calls",
    "to": 39
  }, {
    "from": 14,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 14,
    "label": "calls",
    "to": 38
  }, {
    "from": 14,
    "label": "calls",
    "to": 38
  }, {
    "from": 14,
    "label": "calls",
    "to": 38
  }, {
    "from": 14,
    "label": "calls",
    "to": 38
  }, {
    "from": 14,
    "label": "calls",
    "to": 38
  }, {
    "from": 14,
    "label": "calls",
    "to": 38
  }, {
    "from": 14,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 32,
    "label": "calls",
    "to": 37
  }, {
    "from": 32,
    "label": "calls",
    "to": 37
  }, {
    "from": 32,
    "label": "calls",
    "to": 37
  }, {
    "from": 32,
    "label": "calls",
    "to": 37
  }, {
    "from": 32,
    "label": "calls",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 32,
    "label": "declares",
    "to": 2
  }, {
    "from": 32,
    "label": "declares",
    "to": 14
  }, {
    "from": 32,
    "label": "declares",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 42,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 42,
    "label": "initializes",
    "to": 46
  }, {
    "from": 42,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 42,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 42,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 42,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 42,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 43,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "requires",
    "to": 40
  }, {
    "from": 43,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "requires",
    "to": 41
  }, {
    "from": 43,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "requires",
    "to": 60
  }, {
    "from": 43,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "requires",
    "to": 62
  }, {
    "from": 43,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 64
  }, {
    "from": 65,
    "label": "requires",
    "to": 60
  }, {
    "from": 66,
    "label": "requires",
    "to": 62
  }, {
    "from": 67,
    "label": "requires",
    "to": 60
  }, {
    "from": 68,
    "label": "requires",
    "to": 62
  }, {
    "from": 69,
    "label": "requires",
    "to": 60
  }, {
    "from": 70,
    "label": "requires",
    "to": 60
  }, {
    "from": 71,
    "label": "requires",
    "to": 62
  }, {
    "from": 72,
    "label": "requires",
    "to": 60
  }, {
    "from": 73,
    "label": "requires",
    "to": 62
  }, {
    "from": 74,
    "label": "requires",
    "to": 60
  }, {
    "from": 75,
    "label": "requires",
    "to": 62
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_ev_child",
    "type": "module"
  }, {
    "id": 2,
    "text": "function spawn(cmd)\r\n    local fork = alien.default.fork\r\n    local exec = alien.default.execl\r\n\r\n    cmd = cmd or 'echo -e \"\"'\r\n\r\n    fork:types('int')\r\n    exec:types('int', 'string', 'string', 'string', 'string', 'string')\r\n    \r\n    local pid = fork()\r\n\r\n    if (pid == 0) then\r\n        local ret = exec('/bin/sh', '/bin/sh', '-c', cmd, nil)\r\n        ok(not ret, 'shouldn\\'t get here, ret: ' .. tostring(ret))\r\n    else\r\n        return pid\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local fork = alien.default.fork",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local exec = alien.default.execl",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "cmd = cmd or 'echo -e \"\"'",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "fork:types('int')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "exec:types('int', 'string', 'string', 'string', 'string', 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local pid = fork()",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if (pid == 0) then\r\n        local ret = exec('/bin/sh', '/bin/sh', '-c', cmd, nil)\r\n        ok(not ret, 'shouldn\\'t get here, ret: ' .. tostring(ret))\r\n    else\r\n        return pid\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local ret = exec('/bin/sh', '/bin/sh', '-c', cmd, nil)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "ok(not ret, 'shouldn\\'t get here, ret: ' .. tostring(ret))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function test_basic()\r\n    local pid\r\n    local child = ev.Child.new(function(loop, child, revents)\r\n        local status = child:getstatus()\r\n        ok(child:getrpid() == pid, 'got proper pid')\r\n        ok(child:getpid() == 0, 'pid == 0')\r\n        ok(status.exited, 'process exited')\r\n        ok(status.exit_status == 0, 'process exited with exit status == 0')\r\n        ok(status.stopped == false, 'process not stopped')\r\n        ok(status.signaled == false, 'process not signaled')\r\n        child:stop(loop)\r\n    end, 0, false)\r\n    child:start(loop)\r\n    pid = spawn()\r\n    ok(pid > -1, 'fork successful')\r\n    loop:loop()\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local pid",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local child = ev.Child.new(function(loop, child, revents)\r\n        local status = child:getstatus()\r\n        ok(child:getrpid() == pid, 'got proper pid')\r\n        ok(child:getpid() == 0, 'pid == 0')\r\n        ok(status.exited, 'process exited')\r\n        ok(status.exit_status == 0, 'process exited with exit status == 0')\r\n        ok(status.stopped == false, 'process not stopped')\r\n        ok(status.signaled == false, 'process not signaled')\r\n        child:stop(loop)\r\n    end, 0, false)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local status = child:getstatus()",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "ok(child:getrpid() == pid, 'got proper pid')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "ok(child:getpid() == 0, 'pid == 0')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "ok(status.exited, 'process exited')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "ok(status.exit_status == 0, 'process exited with exit status == 0')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "ok(status.stopped == false, 'process not stopped')",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "ok(status.signaled == false, 'process not signaled')",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "child:stop(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "child:start(loop)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "pid = spawn()",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "ok(pid > -1, 'fork successful')",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "loop:loop()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function(loop, child, revents)\r\n        local status = child:getstatus()\r\n        ok(child:getrpid() == pid, 'got proper pid')\r\n        ok(child:getpid() == 0, 'pid == 0')\r\n        ok(status.exited, 'process exited')\r\n        ok(status.exit_status == 0, 'process exited with exit status == 0')\r\n        ok(status.stopped == false, 'process not stopped')\r\n        ok(status.signaled == false, 'process not signaled')\r\n        child:stop(loop)\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "",
    "type": "function container"
  }, {
    "id": 33,
    "text": "Child.new",
    "type": "global function"
  }, {
    "id": 34,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 35,
    "text": "exec",
    "type": "global function"
  }, {
    "id": 36,
    "text": "fork",
    "type": "global function"
  }, {
    "id": 37,
    "text": "require",
    "type": "global function"
  }, {
    "id": 38,
    "text": "ok",
    "type": "global function"
  }, {
    "id": 39,
    "text": "noleaks",
    "type": "global function"
  }, {
    "id": 40,
    "text": "(tap)",
    "type": "module"
  }, {
    "id": 41,
    "text": "(ev)",
    "type": "module"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "symbol"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "global variable"
  }, {
    "id": 54,
    "text": "",
    "type": "n/a"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 60,
    "text": "(help)",
    "type": "module"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 62,
    "text": "(dumper)",
    "type": "module"
  }, {
    "id": 63,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 64,
    "text": "(alien)",
    "type": "module"
  }, {
    "id": 65,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "require local variable"
  } ]
}