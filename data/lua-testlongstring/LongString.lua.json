{
  "_filename": "LongString.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-testlongstring/src/Test/LongString.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 17
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 17
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 36,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 38
  }, {
    "from": 49,
    "label": "has",
    "to": 39
  }, {
    "from": 49,
    "label": "has",
    "to": 38
  }, {
    "from": 49,
    "label": "has",
    "to": 40
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 42
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 38
  }, {
    "from": 58,
    "label": "has",
    "to": 39
  }, {
    "from": 58,
    "label": "has",
    "to": 38
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 42
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 38
  }, {
    "from": 65,
    "label": "has",
    "to": 39
  }, {
    "from": 65,
    "label": "has",
    "to": 38
  }, {
    "from": 65,
    "label": "has",
    "to": 59
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 42
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 70,
    "label": "has",
    "to": 17
  }, {
    "from": 70,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 38
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 38
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 42
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 97,
    "label": "has",
    "to": 105
  }, {
    "from": 86,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 38
  }, {
    "from": 108,
    "label": "has",
    "to": 88
  }, {
    "from": 108,
    "label": "has",
    "to": 38
  }, {
    "from": 108,
    "label": "has",
    "to": 89
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 42
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 107,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 15
  }, {
    "from": 115,
    "label": "has",
    "to": 16
  }, {
    "from": 115,
    "label": "has",
    "to": 17
  }, {
    "from": 115,
    "label": "has",
    "to": 17
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 2,
    "label": "calls",
    "to": 118
  }, {
    "from": 2,
    "label": "calls",
    "to": 118
  }, {
    "from": 117,
    "label": "calls",
    "to": 120
  }, {
    "from": 36,
    "label": "calls",
    "to": 122
  }, {
    "from": 36,
    "label": "calls",
    "to": 122
  }, {
    "from": 48,
    "label": "calls",
    "to": 122
  }, {
    "from": 48,
    "label": "calls",
    "to": 122
  }, {
    "from": 57,
    "label": "calls",
    "to": 122
  }, {
    "from": 57,
    "label": "calls",
    "to": 122
  }, {
    "from": 64,
    "label": "calls",
    "to": 122
  }, {
    "from": 64,
    "label": "calls",
    "to": 122
  }, {
    "from": 117,
    "label": "calls",
    "to": 121
  }, {
    "from": 86,
    "label": "calls",
    "to": 123
  }, {
    "from": 36,
    "label": "calls",
    "to": 119
  }, {
    "from": 36,
    "label": "calls",
    "to": 119
  }, {
    "from": 48,
    "label": "calls",
    "to": 119
  }, {
    "from": 48,
    "label": "calls",
    "to": 119
  }, {
    "from": 57,
    "label": "calls",
    "to": 119
  }, {
    "from": 57,
    "label": "calls",
    "to": 119
  }, {
    "from": 64,
    "label": "calls",
    "to": 119
  }, {
    "from": 64,
    "label": "calls",
    "to": 119
  }, {
    "from": 86,
    "label": "calls",
    "to": 119
  }, {
    "from": 86,
    "label": "calls",
    "to": 119
  }, {
    "from": 107,
    "label": "calls",
    "to": 119
  }, {
    "from": 107,
    "label": "calls",
    "to": 119
  }, {
    "from": 117,
    "label": "calls",
    "to": 119
  }, {
    "from": 36,
    "label": "calls",
    "to": 19
  }, {
    "from": 48,
    "label": "calls",
    "to": 19
  }, {
    "from": 36,
    "label": "calls",
    "to": 27
  }, {
    "from": 107,
    "label": "calls",
    "to": 27
  }, {
    "from": 36,
    "label": "calls",
    "to": 2
  }, {
    "from": 36,
    "label": "calls",
    "to": 2
  }, {
    "from": 48,
    "label": "calls",
    "to": 2
  }, {
    "from": 48,
    "label": "calls",
    "to": 2
  }, {
    "from": 57,
    "label": "calls",
    "to": 2
  }, {
    "from": 64,
    "label": "calls",
    "to": 2
  }, {
    "from": 86,
    "label": "calls",
    "to": 2
  }, {
    "from": 86,
    "label": "calls",
    "to": 2
  }, {
    "from": 86,
    "label": "calls",
    "to": 2
  }, {
    "from": 86,
    "label": "calls",
    "to": 2
  }, {
    "from": 107,
    "label": "calls",
    "to": 2
  }, {
    "from": 107,
    "label": "calls",
    "to": 2
  }, {
    "from": 86,
    "label": "calls",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 117
  }, {
    "from": 117,
    "label": "declares",
    "to": 2
  }, {
    "from": 117,
    "label": "declares",
    "to": 19
  }, {
    "from": 117,
    "label": "declares",
    "to": 27
  }, {
    "from": 117,
    "label": "declares",
    "to": 36
  }, {
    "from": 117,
    "label": "declares",
    "to": 48
  }, {
    "from": 117,
    "label": "declares",
    "to": 57
  }, {
    "from": 117,
    "label": "declares",
    "to": 64
  }, {
    "from": 117,
    "label": "declares",
    "to": 70
  }, {
    "from": 117,
    "label": "declares",
    "to": 86
  }, {
    "from": 117,
    "label": "declares",
    "to": 107
  }, {
    "from": 117,
    "label": "declares",
    "to": 115
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 1,
    "label": "contains",
    "to": 125
  }, {
    "from": 124,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 124,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 124,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 124,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 124,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 124,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 124,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 124,
    "label": "initializes",
    "to": 140
  }, {
    "from": 124,
    "label": "initializes",
    "to": 141
  }, {
    "from": 124,
    "label": "initializes",
    "to": 142
  }, {
    "from": 124,
    "label": "initializes",
    "to": 143
  }, {
    "from": 124,
    "label": "initializes",
    "to": 144
  }, {
    "from": 124,
    "label": "initializes",
    "to": 145
  }, {
    "from": 124,
    "label": "initializes",
    "to": 146
  }, {
    "from": 124,
    "label": "initializes",
    "to": 147
  }, {
    "from": 125,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "requires",
    "to": 149
  }, {
    "from": 1,
    "label": "provides",
    "to": 150
  }, {
    "from": 138,
    "label": "represents",
    "to": 151
  }, {
    "from": 150,
    "label": "provides",
    "to": 151
  }, {
    "from": 138,
    "label": "contains",
    "to": 36
  }, {
    "from": 138,
    "label": "contains",
    "to": 48
  }, {
    "from": 138,
    "label": "contains",
    "to": 57
  }, {
    "from": 138,
    "label": "contains",
    "to": 64
  }, {
    "from": 138,
    "label": "contains",
    "to": 86
  }, {
    "from": 138,
    "label": "contains",
    "to": 107
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "LongString",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function display (str, offset)\r\n    local fmt = '\"%s\"'\r\n    if str:len() > m.max then\r\n        offset = offset or 1\r\n        if m.context then\r\n            offset = offset - m.context\r\n            if offset < 1 then\r\n                offset = 1\r\n            end\r\n        else\r\n            offset = 1\r\n        end\r\n        if offset == 1 then\r\n            fmt = '\"%s\"...'\r\n        else\r\n            fmt = '...\"%s\"...'\r\n        end\r\n        str = str:sub(offset, offset + m.max - 1)\r\n    end\r\n    str = str:gsub( '.',\r\n                function (ch)\r\n                    local val = ch:byte()\r\n                    if val < 32 or val > 127 then\r\n                        return '\\\\' .. string.format( '%03d', val )\r\n                    else\r\n                        return ch\r\n                    end\r\n                end )\r\n    return string.format( fmt, str )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local fmt = '\"%s\"'",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if str:len() > m.max then\r\n        offset = offset or 1\r\n        if m.context then\r\n            offset = offset - m.context\r\n            if offset < 1 then\r\n                offset = 1\r\n            end\r\n        else\r\n            offset = 1\r\n        end\r\n        if offset == 1 then\r\n            fmt = '\"%s\"...'\r\n        else\r\n            fmt = '...\"%s\"...'\r\n        end\r\n        str = str:sub(offset, offset + m.max - 1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "offset = offset or 1",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "if m.context then\r\n            offset = offset - m.context\r\n            if offset < 1 then\r\n                offset = 1\r\n            end\r\n        else\r\n            offset = 1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "offset = offset - m.context",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "if offset < 1 then\r\n                offset = 1\r\n            end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "offset = 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if offset == 1 then\r\n            fmt = '\"%s\"...'\r\n        else\r\n            fmt = '...\"%s\"...'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "fmt = '\"%s\"...'",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "fmt = '...\"%s\"...'",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "str = str:sub(offset, offset + m.max - 1)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "str = str:gsub( '.',\r\n                function (ch)\r\n                    local val = ch:byte()\r\n                    if val < 32 or val > 127 then\r\n                        return '\\\\' .. string.format( '%03d', val )\r\n                    else\r\n                        return ch\r\n                    end\r\n                end )",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local val = ch:byte()",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if val < 32 or val > 127 then\r\n                        return '\\\\' .. string.format( '%03d', val )\r\n                    else\r\n                        return ch\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function common_prefix_length (str1, str2)\r\n    local i = 1\r\n    while true do\r\n        local c1 = str1:sub(i,i)\r\n        local c2 = str2:sub(i,i)\r\n        if not c1 or not c2 or c1 ~= c2 then\r\n            return i\r\n        end\r\n        i = i + 1\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "while true do\r\n        local c1 = str1:sub(i,i)\r\n        local c2 = str2:sub(i,i)\r\n        if not c1 or not c2 or c1 ~= c2 then\r\n            return i\r\n        end\r\n        i = i + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 22,
    "text": "local c1 = str1:sub(i,i)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local c2 = str2:sub(i,i)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if not c1 or not c2 or c1 ~= c2 then\r\n            return i\r\n        end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function line_column (str, max)\r\n    local init = 1\r\n    local line = 1\r\n    while true do\r\n        local pos, posn = str:find(m.EOL, init)\r\n        if not pos or pos >= max then\r\n            break\r\n        end\r\n        init = posn + 1\r\n        line = line + 1\r\n    end\r\n    return line, max - init + 1\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local init = 1",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local line = 1",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "while true do\r\n        local pos, posn = str:find(m.EOL, init)\r\n        if not pos or pos >= max then\r\n            break\r\n        end\r\n        init = posn + 1\r\n        line = line + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 31,
    "text": "local pos, posn = str:find(m.EOL, init)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if not pos or pos >= max then\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "init = posn + 1",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "line = line + 1",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function m.is_string(got, expected, name)\r\n    if type(got) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a string : \" .. tostring(got))\r\n    elseif type(expected) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"expected value isn't a string : \" .. tostring(expected))\r\n    else\r\n        local pass = got == expected\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            local common_prefix = common_prefix_length(got, expected)\r\n            local line, column = line_column(got, common_prefix)\r\n            tb:diag(\"         got: \" .. display(got, common_prefix)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n    expected: \" .. display(expected, common_prefix)\r\n               .. \"\\n      length: \" .. expected:len()\r\n               .. \"\\n    strings begin to differ at char \" .. common_prefix .. \" (line \"\r\n                                                           .. line .. \" column \"\r\n                                                           .. column .. \")\")\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "if type(got) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a string : \" .. tostring(got))\r\n    elseif type(expected) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"expected value isn't a string : \" .. tostring(expected))\r\n    else\r\n        local pass = got == expected\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            local common_prefix = common_prefix_length(got, expected)\r\n            local line, column = line_column(got, common_prefix)\r\n            tb:diag(\"         got: \" .. display(got, common_prefix)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n    expected: \" .. display(expected, common_prefix)\r\n               .. \"\\n      length: \" .. expected:len()\r\n               .. \"\\n    strings begin to differ at char \" .. common_prefix .. \" (line \"\r\n                                                           .. line .. \" column \"\r\n                                                           .. column .. \")\")\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "tb:ok(false, name)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "tb:diag(\"got value isn't a string : \" .. tostring(got))",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "tb:diag(\"expected value isn't a string : \" .. tostring(expected))",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local pass = got == expected",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "tb:ok(pass, name)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if not pass then\r\n            local common_prefix = common_prefix_length(got, expected)\r\n            local line, column = line_column(got, common_prefix)\r\n            tb:diag(\"         got: \" .. display(got, common_prefix)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n    expected: \" .. display(expected, common_prefix)\r\n               .. \"\\n      length: \" .. expected:len()\r\n               .. \"\\n    strings begin to differ at char \" .. common_prefix .. \" (line \"\r\n                                                           .. line .. \" column \"\r\n                                                           .. column .. \")\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "local common_prefix = common_prefix_length(got, expected)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local line, column = line_column(got, common_prefix)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "tb:diag(\"         got: \" .. display(got, common_prefix)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n    expected: \" .. display(expected, common_prefix)\r\n               .. \"\\n      length: \" .. expected:len()\r\n               .. \"\\n    strings begin to differ at char \" .. common_prefix .. \" (line \"\r\n                                                           .. line .. \" column \"\r\n                                                           .. column .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function m.is_string_nows(got, expected, name)\r\n    if type(got) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a string : \" .. tostring(got))\r\n    elseif type(expected) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"expected value isn't a string : \" .. tostring(expected))\r\n    else\r\n        local got_nows = got:gsub( \"%s+\", '' )\r\n        local expected_nows = expected:gsub( \"%s+\", '' )\r\n        local pass = got_nows == expected_nows\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            local common_prefix = common_prefix_length(got_nows, expected_nows)\r\n            tb:diag(\"after whitespace removal:\"\r\n               .. \"\\n         got: \" .. display(got_nows, common_prefix)\r\n               .. \"\\n      length: \" .. got_nows:len()\r\n               .. \"\\n    expected: \" .. display(expected_nows, common_prefix)\r\n               .. \"\\n      length: \" .. expected_nows:len()\r\n               .. \"\\n    strings begin to differ at char \" .. common_prefix)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if type(got) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a string : \" .. tostring(got))\r\n    elseif type(expected) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"expected value isn't a string : \" .. tostring(expected))\r\n    else\r\n        local got_nows = got:gsub( \"%s+\", '' )\r\n        local expected_nows = expected:gsub( \"%s+\", '' )\r\n        local pass = got_nows == expected_nows\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            local common_prefix = common_prefix_length(got_nows, expected_nows)\r\n            tb:diag(\"after whitespace removal:\"\r\n               .. \"\\n         got: \" .. display(got_nows, common_prefix)\r\n               .. \"\\n      length: \" .. got_nows:len()\r\n               .. \"\\n    expected: \" .. display(expected_nows, common_prefix)\r\n               .. \"\\n      length: \" .. expected_nows:len()\r\n               .. \"\\n    strings begin to differ at char \" .. common_prefix)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local got_nows = got:gsub( \"%s+\", '' )",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local expected_nows = expected:gsub( \"%s+\", '' )",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local pass = got_nows == expected_nows",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if not pass then\r\n            local common_prefix = common_prefix_length(got_nows, expected_nows)\r\n            tb:diag(\"after whitespace removal:\"\r\n               .. \"\\n         got: \" .. display(got_nows, common_prefix)\r\n               .. \"\\n      length: \" .. got_nows:len()\r\n               .. \"\\n    expected: \" .. display(expected_nows, common_prefix)\r\n               .. \"\\n      length: \" .. expected_nows:len()\r\n               .. \"\\n    strings begin to differ at char \" .. common_prefix)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "local common_prefix = common_prefix_length(got_nows, expected_nows)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "tb:diag(\"after whitespace removal:\"\r\n               .. \"\\n         got: \" .. display(got_nows, common_prefix)\r\n               .. \"\\n      length: \" .. got_nows:len()\r\n               .. \"\\n    expected: \" .. display(expected_nows, common_prefix)\r\n               .. \"\\n      length: \" .. expected_nows:len()\r\n               .. \"\\n    strings begin to differ at char \" .. common_prefix)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function m.like_string(got, pattern, name)\r\n    if type(got) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a string : \" .. tostring(got))\r\n    elseif type(pattern) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"pattern isn't a string : \" .. tostring(pattern))\r\n    else\r\n        local pass = got:match(pattern)\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            tb:diag(\"         got: \" .. display(got)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n    doesn't match '\" .. pattern .. \"'\")\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "if type(got) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a string : \" .. tostring(got))\r\n    elseif type(pattern) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"pattern isn't a string : \" .. tostring(pattern))\r\n    else\r\n        local pass = got:match(pattern)\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            tb:diag(\"         got: \" .. display(got)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n    doesn't match '\" .. pattern .. \"'\")\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "tb:diag(\"pattern isn't a string : \" .. tostring(pattern))",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local pass = got:match(pattern)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if not pass then\r\n            tb:diag(\"         got: \" .. display(got)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n    doesn't match '\" .. pattern .. \"'\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "tb:diag(\"         got: \" .. display(got)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n    doesn't match '\" .. pattern .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function m.unlike_string(got, pattern, name)\r\n    if type(got) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a string : \" .. tostring(got))\r\n    elseif type(pattern) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"pattern isn't a string : \" .. tostring(pattern))\r\n    else\r\n        local pass = not got:match(pattern)\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            tb:diag(\"         got: \" .. display(got)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n          matches '\" .. pattern .. \"'\")\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "if type(got) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"got value isn't a string : \" .. tostring(got))\r\n    elseif type(pattern) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"pattern isn't a string : \" .. tostring(pattern))\r\n    else\r\n        local pass = not got:match(pattern)\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            tb:diag(\"         got: \" .. display(got)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n          matches '\" .. pattern .. \"'\")\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local pass = not got:match(pattern)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if not pass then\r\n            tb:diag(\"         got: \" .. display(got)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n          matches '\" .. pattern .. \"'\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "tb:diag(\"         got: \" .. display(got)\r\n               .. \"\\n      length: \" .. got:len()\r\n               .. \"\\n          matches '\" .. pattern .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function lcss (S, T)\r\n    local L = {}\r\n    local offset = 1\r\n    local length = 0\r\n    for i = 1, S:len() do\r\n        for j = 1, T:len() do\r\n            if S:byte(i) == T:byte(j) then\r\n                if i == 1 or j == 1 then\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = 1\r\n                else\r\n                    L[i-1] = L[i-1] or {}\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = (L[i-1][j-1] or 0) + 1\r\n                end\r\n                if L[i][j] > length then\r\n                    length = L[i][j]\r\n                    offset = i - length + 1\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return offset, length\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local L = {}",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local offset = 1",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local length = 0",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "for i = 1, S:len() do\r\n        for j = 1, T:len() do\r\n            if S:byte(i) == T:byte(j) then\r\n                if i == 1 or j == 1 then\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = 1\r\n                else\r\n                    L[i-1] = L[i-1] or {}\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = (L[i-1][j-1] or 0) + 1\r\n                end\r\n                if L[i][j] > length then\r\n                    length = L[i][j]\r\n                    offset = i - length + 1\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 75,
    "text": "for j = 1, T:len() do\r\n            if S:byte(i) == T:byte(j) then\r\n                if i == 1 or j == 1 then\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = 1\r\n                else\r\n                    L[i-1] = L[i-1] or {}\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = (L[i-1][j-1] or 0) + 1\r\n                end\r\n                if L[i][j] > length then\r\n                    length = L[i][j]\r\n                    offset = i - length + 1\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 76,
    "text": "if S:byte(i) == T:byte(j) then\r\n                if i == 1 or j == 1 then\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = 1\r\n                else\r\n                    L[i-1] = L[i-1] or {}\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = (L[i-1][j-1] or 0) + 1\r\n                end\r\n                if L[i][j] > length then\r\n                    length = L[i][j]\r\n                    offset = i - length + 1\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "if i == 1 or j == 1 then\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = 1\r\n                else\r\n                    L[i-1] = L[i-1] or {}\r\n                    L[i] = L[i] or {}\r\n                    L[i][j] = (L[i-1][j-1] or 0) + 1\r\n                end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "L[i] = L[i] or {}",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "L[i][j] = 1",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "L[i-1] = L[i-1] or {}",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "L[i][j] = (L[i-1][j-1] or 0) + 1",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if L[i][j] > length then\r\n                    length = L[i][j]\r\n                    offset = i - length + 1\r\n                end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "length = L[i][j]",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "offset = i - length + 1",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function m.contains_string(str, substring, name)\r\n    if type(str) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"String to look in isn't a string\")\r\n    elseif type(substring) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"String to look for isn't a string\")\r\n    else\r\n        local pass = str:find(substring, 1, true)\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            tb:diag(\"    searched: \" .. display(str)\r\n               .. \"\\n  can't find: \" .. display(substring))\r\n            if m.LCSS then\r\n                local off, len = lcss(str, substring)\r\n                local l = str:sub(off, off + len - 1)\r\n                tb:diag(\"        LCSS: \" .. display(l))\r\n                if len < m.max then\r\n                    local available = math.ceil((m.max - len) / 2)\r\n                    local begin = off - 2 * available\r\n                    if begin < 1 then\r\n                        begin = off - available\r\n                        if begin < 1 then\r\n                            begin = 1\r\n                        end\r\n                    end\r\n                    local ctx = str:sub(begin, begin + m.max)\r\n                    tb:diag(\"LCSS context: \" .. display(ctx))\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "if type(str) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"String to look in isn't a string\")\r\n    elseif type(substring) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"String to look for isn't a string\")\r\n    else\r\n        local pass = str:find(substring, 1, true)\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            tb:diag(\"    searched: \" .. display(str)\r\n               .. \"\\n  can't find: \" .. display(substring))\r\n            if m.LCSS then\r\n                local off, len = lcss(str, substring)\r\n                local l = str:sub(off, off + len - 1)\r\n                tb:diag(\"        LCSS: \" .. display(l))\r\n                if len < m.max then\r\n                    local available = math.ceil((m.max - len) / 2)\r\n                    local begin = off - 2 * available\r\n                    if begin < 1 then\r\n                        begin = off - available\r\n                        if begin < 1 then\r\n                            begin = 1\r\n                        end\r\n                    end\r\n                    local ctx = str:sub(begin, begin + m.max)\r\n                    tb:diag(\"LCSS context: \" .. display(ctx))\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "tb:diag(\"String to look in isn't a string\")",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "tb:diag(\"String to look for isn't a string\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local pass = str:find(substring, 1, true)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if not pass then\r\n            tb:diag(\"    searched: \" .. display(str)\r\n               .. \"\\n  can't find: \" .. display(substring))\r\n            if m.LCSS then\r\n                local off, len = lcss(str, substring)\r\n                local l = str:sub(off, off + len - 1)\r\n                tb:diag(\"        LCSS: \" .. display(l))\r\n                if len < m.max then\r\n                    local available = math.ceil((m.max - len) / 2)\r\n                    local begin = off - 2 * available\r\n                    if begin < 1 then\r\n                        begin = off - available\r\n                        if begin < 1 then\r\n                            begin = 1\r\n                        end\r\n                    end\r\n                    local ctx = str:sub(begin, begin + m.max)\r\n                    tb:diag(\"LCSS context: \" .. display(ctx))\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "tb:diag(\"    searched: \" .. display(str)\r\n               .. \"\\n  can't find: \" .. display(substring))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "if m.LCSS then\r\n                local off, len = lcss(str, substring)\r\n                local l = str:sub(off, off + len - 1)\r\n                tb:diag(\"        LCSS: \" .. display(l))\r\n                if len < m.max then\r\n                    local available = math.ceil((m.max - len) / 2)\r\n                    local begin = off - 2 * available\r\n                    if begin < 1 then\r\n                        begin = off - available\r\n                        if begin < 1 then\r\n                            begin = 1\r\n                        end\r\n                    end\r\n                    local ctx = str:sub(begin, begin + m.max)\r\n                    tb:diag(\"LCSS context: \" .. display(ctx))\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "local off, len = lcss(str, substring)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local l = str:sub(off, off + len - 1)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "tb:diag(\"        LCSS: \" .. display(l))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "if len < m.max then\r\n                    local available = math.ceil((m.max - len) / 2)\r\n                    local begin = off - 2 * available\r\n                    if begin < 1 then\r\n                        begin = off - available\r\n                        if begin < 1 then\r\n                            begin = 1\r\n                        end\r\n                    end\r\n                    local ctx = str:sub(begin, begin + m.max)\r\n                    tb:diag(\"LCSS context: \" .. display(ctx))\r\n                end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "local available = math.ceil((m.max - len) / 2)",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local begin = off - 2 * available",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if begin < 1 then\r\n                        begin = off - available\r\n                        if begin < 1 then\r\n                            begin = 1\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "begin = off - available",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "if begin < 1 then\r\n                            begin = 1\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "begin = 1",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "local ctx = str:sub(begin, begin + m.max)",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "tb:diag(\"LCSS context: \" .. display(ctx))",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function m.lacks_string(str, substring, name)\r\n    if type(str) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"String to look in isn't a string\")\r\n    elseif type(substring) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"String to look for isn't a string\")\r\n    else\r\n        local idx = str:find(substring, 1, true)\r\n        local pass = not idx\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            local line, column = line_column(str, idx)\r\n            tb:diag(\"    searched: \" .. display(str)\r\n               .. \"\\n   and found: \" .. display(substring)\r\n               .. \"\\n at position: \" .. idx .. \" (line \"\r\n                                     .. line .. \" column \"\r\n                                     .. column .. \")\")\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "if type(str) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"String to look in isn't a string\")\r\n    elseif type(substring) ~= 'string' then\r\n        tb:ok(false, name)\r\n        tb:diag(\"String to look for isn't a string\")\r\n    else\r\n        local idx = str:find(substring, 1, true)\r\n        local pass = not idx\r\n        tb:ok(pass, name)\r\n        if not pass then\r\n            local line, column = line_column(str, idx)\r\n            tb:diag(\"    searched: \" .. display(str)\r\n               .. \"\\n   and found: \" .. display(substring)\r\n               .. \"\\n at position: \" .. idx .. \" (line \"\r\n                                     .. line .. \" column \"\r\n                                     .. column .. \")\")\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "local idx = str:find(substring, 1, true)",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "local pass = not idx",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if not pass then\r\n            local line, column = line_column(str, idx)\r\n            tb:diag(\"    searched: \" .. display(str)\r\n               .. \"\\n   and found: \" .. display(substring)\r\n               .. \"\\n at position: \" .. idx .. \" (line \"\r\n                                     .. line .. \" column \"\r\n                                     .. column .. \")\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "local line, column = line_column(str, idx)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "tb:diag(\"    searched: \" .. display(str)\r\n               .. \"\\n   and found: \" .. display(substring)\r\n               .. \"\\n at position: \" .. idx .. \" (line \"\r\n                                     .. line .. \" column \"\r\n                                     .. column .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function (ch)\r\n                    local val = ch:byte()\r\n                    if val < 32 or val > 127 then\r\n                        return '\\\\' .. string.format( '%03d', val )\r\n                    else\r\n                        return ch\r\n                    end\r\n                end",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "",
    "type": "function container"
  }, {
    "id": 118,
    "text": "format",
    "type": "global function"
  }, {
    "id": 119,
    "text": "type",
    "type": "global function"
  }, {
    "id": 120,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 121,
    "text": "require",
    "type": "global function"
  }, {
    "id": 122,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 123,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 124,
    "text": "",
    "type": "variable container"
  }, {
    "id": 125,
    "text": "",
    "type": "require container"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "n/a"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 140,
    "text": "",
    "type": "global variable"
  }, {
    "id": 141,
    "text": "",
    "type": "global variable"
  }, {
    "id": 142,
    "text": "",
    "type": "global variable"
  }, {
    "id": 143,
    "text": "",
    "type": "global variable"
  }, {
    "id": 144,
    "text": "",
    "type": "global variable"
  }, {
    "id": 145,
    "text": "",
    "type": "global variable"
  }, {
    "id": 146,
    "text": "",
    "type": "global variable"
  }, {
    "id": 147,
    "text": "",
    "type": "global variable"
  }, {
    "id": 148,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 149,
    "text": "Builder",
    "type": "module"
  }, {
    "id": 150,
    "text": "",
    "type": "interface container"
  }, {
    "id": 151,
    "text": "",
    "type": "interface"
  } ]
}