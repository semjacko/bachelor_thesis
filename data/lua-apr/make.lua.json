{
  "_filename": "make.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-apr/etc/make.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 3
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 32
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 60
  }, {
    "from": 48,
    "label": "has",
    "to": 61
  }, {
    "from": 48,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 64
  }, {
    "from": 48,
    "label": "has",
    "to": 65
  }, {
    "from": 48,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 48,
    "label": "has",
    "to": 68
  }, {
    "from": 48,
    "label": "has",
    "to": 3
  }, {
    "from": 48,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 55
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 70,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 70,
    "label": "has",
    "to": 55
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 70,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 70,
    "label": "has",
    "to": 3
  }, {
    "from": 70,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 91,
    "label": "has",
    "to": 99
  }, {
    "from": 91,
    "label": "has",
    "to": 100
  }, {
    "from": 91,
    "label": "has",
    "to": 101
  }, {
    "from": 91,
    "label": "has",
    "to": 102
  }, {
    "from": 91,
    "label": "has",
    "to": 103
  }, {
    "from": 91,
    "label": "has",
    "to": 88
  }, {
    "from": 91,
    "label": "has",
    "to": 104
  }, {
    "from": 87,
    "label": "has",
    "to": 105
  }, {
    "from": 87,
    "label": "has",
    "to": 106
  }, {
    "from": 87,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 87,
    "label": "has",
    "to": 109
  }, {
    "from": 87,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 104
  }, {
    "from": 87,
    "label": "has",
    "to": 118
  }, {
    "from": 34,
    "label": "calls",
    "to": 123
  }, {
    "from": 48,
    "label": "calls",
    "to": 123
  }, {
    "from": 70,
    "label": "calls",
    "to": 123
  }, {
    "from": 87,
    "label": "calls",
    "to": 124
  }, {
    "from": 87,
    "label": "calls",
    "to": 124
  }, {
    "from": 119,
    "label": "calls",
    "to": 124
  }, {
    "from": 31,
    "label": "calls",
    "to": 22
  }, {
    "from": 40,
    "label": "calls",
    "to": 22
  }, {
    "from": 22,
    "label": "calls",
    "to": 120
  }, {
    "from": 22,
    "label": "calls",
    "to": 120
  }, {
    "from": 8,
    "label": "calls",
    "to": 5
  }, {
    "from": 87,
    "label": "calls",
    "to": 34
  }, {
    "from": 87,
    "label": "calls",
    "to": 128
  }, {
    "from": 119,
    "label": "calls",
    "to": 70
  }, {
    "from": 22,
    "label": "calls",
    "to": 125
  }, {
    "from": 22,
    "label": "calls",
    "to": 125
  }, {
    "from": 40,
    "label": "calls",
    "to": 12
  }, {
    "from": 87,
    "label": "calls",
    "to": 12
  }, {
    "from": 119,
    "label": "calls",
    "to": 121
  }, {
    "from": 119,
    "label": "calls",
    "to": 121
  }, {
    "from": 119,
    "label": "calls",
    "to": 129
  }, {
    "from": 34,
    "label": "calls",
    "to": 129
  }, {
    "from": 14,
    "label": "calls",
    "to": 127
  }, {
    "from": 87,
    "label": "calls",
    "to": 122
  }, {
    "from": 84,
    "label": "calls",
    "to": 130
  }, {
    "from": 48,
    "label": "calls",
    "to": 8
  }, {
    "from": 48,
    "label": "calls",
    "to": 8
  }, {
    "from": 48,
    "label": "calls",
    "to": 8
  }, {
    "from": 48,
    "label": "calls",
    "to": 8
  }, {
    "from": 70,
    "label": "calls",
    "to": 8
  }, {
    "from": 70,
    "label": "calls",
    "to": 8
  }, {
    "from": 70,
    "label": "calls",
    "to": 8
  }, {
    "from": 84,
    "label": "calls",
    "to": 8
  }, {
    "from": 87,
    "label": "calls",
    "to": 8
  }, {
    "from": 87,
    "label": "calls",
    "to": 8
  }, {
    "from": 87,
    "label": "calls",
    "to": 8
  }, {
    "from": 87,
    "label": "calls",
    "to": 8
  }, {
    "from": 87,
    "label": "calls",
    "to": 8
  }, {
    "from": 87,
    "label": "calls",
    "to": 8
  }, {
    "from": 119,
    "label": "calls",
    "to": 8
  }, {
    "from": 119,
    "label": "calls",
    "to": 48
  }, {
    "from": 34,
    "label": "calls",
    "to": 31
  }, {
    "from": 48,
    "label": "calls",
    "to": 40
  }, {
    "from": 48,
    "label": "calls",
    "to": 40
  }, {
    "from": 48,
    "label": "calls",
    "to": 40
  }, {
    "from": 48,
    "label": "calls",
    "to": 40
  }, {
    "from": 48,
    "label": "calls",
    "to": 40
  }, {
    "from": 48,
    "label": "calls",
    "to": 40
  }, {
    "from": 48,
    "label": "calls",
    "to": 40
  }, {
    "from": 48,
    "label": "calls",
    "to": 40
  }, {
    "from": 70,
    "label": "calls",
    "to": 40
  }, {
    "from": 70,
    "label": "calls",
    "to": 40
  }, {
    "from": 70,
    "label": "calls",
    "to": 40
  }, {
    "from": 70,
    "label": "calls",
    "to": 40
  }, {
    "from": 70,
    "label": "calls",
    "to": 40
  }, {
    "from": 20,
    "label": "calls",
    "to": 126
  }, {
    "from": 22,
    "label": "calls",
    "to": 126
  }, {
    "from": 87,
    "label": "calls",
    "to": 126
  }, {
    "from": 119,
    "label": "calls",
    "to": 87
  }, {
    "from": 5,
    "label": "calls",
    "to": 2
  }, {
    "from": 34,
    "label": "calls",
    "to": 20
  }, {
    "from": 87,
    "label": "calls",
    "to": 20
  }, {
    "from": 87,
    "label": "calls",
    "to": 20
  }, {
    "from": 87,
    "label": "calls",
    "to": 20
  }, {
    "from": 87,
    "label": "calls",
    "to": 20
  }, {
    "from": 87,
    "label": "calls",
    "to": 20
  }, {
    "from": 87,
    "label": "calls",
    "to": 84
  }, {
    "from": 87,
    "label": "calls",
    "to": 84
  }, {
    "from": 87,
    "label": "calls",
    "to": 84
  }, {
    "from": 87,
    "label": "calls",
    "to": 84
  }, {
    "from": 87,
    "label": "calls",
    "to": 84
  }, {
    "from": 22,
    "label": "calls",
    "to": 14
  }, {
    "from": 22,
    "label": "calls",
    "to": 14
  }, {
    "from": 1,
    "label": "contains",
    "to": 119
  }, {
    "from": 119,
    "label": "declares",
    "to": 2
  }, {
    "from": 119,
    "label": "declares",
    "to": 5
  }, {
    "from": 119,
    "label": "declares",
    "to": 8
  }, {
    "from": 119,
    "label": "declares",
    "to": 12
  }, {
    "from": 119,
    "label": "declares",
    "to": 14
  }, {
    "from": 119,
    "label": "declares",
    "to": 20
  }, {
    "from": 119,
    "label": "declares",
    "to": 22
  }, {
    "from": 119,
    "label": "declares",
    "to": 31
  }, {
    "from": 119,
    "label": "declares",
    "to": 34
  }, {
    "from": 119,
    "label": "declares",
    "to": 40
  }, {
    "from": 119,
    "label": "declares",
    "to": 48
  }, {
    "from": 119,
    "label": "declares",
    "to": 70
  }, {
    "from": 119,
    "label": "declares",
    "to": 84
  }, {
    "from": 119,
    "label": "declares",
    "to": 87
  }, {
    "from": 1,
    "label": "contains",
    "to": 131
  }, {
    "from": 1,
    "label": "contains",
    "to": 132
  }, {
    "from": 131,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "make",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function trim(s)\r\n  return s:match '^%s*(.-)%s*$'\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function dedent(text)\r\n  local pattern = '\\n' .. text:match '^[ \\t]*'\r\n  return trim(('\\n' .. text):gsub(pattern, '\\n'))\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local pattern = '\\n' .. text:match '^[ \\t]*'",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function message(text, ...)\r\n  io.stderr:write(dedent(text:format(...)), '\\n')\r\n  io.stderr:flush()\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "io.stderr:write(dedent(text:format(...)), '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "io.stderr:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function words(text)\r\n  return text:gmatch '%S+'\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function readfile(path)\r\n  local handle = io.open(path)\r\n  local content = handle and handle:read '*a' or ''\r\n  if handle then handle:close() end\r\n  return content\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local handle = io.open(path)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local content = handle and handle:read '*a' or ''",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if handle then handle:close() end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "handle:close()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function executable(program)\r\n  return os.execute('which ' .. program .. ' >/dev/null 2>&1')  == 0\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function readcmd(command)\r\n  local stdout = os.tmpname()\r\n  local stderr = os.tmpname()\r\n  local status = os.execute(command\r\n                  .. ' 1>\"' .. stdout .. '\"'\r\n                  .. ' 2>\"' .. stderr .. '\"')\r\n  local output = readfile(stdout)\r\n  local errors = readfile(stderr)\r\n  os.remove(stdout)\r\n  os.remove(stderr)\r\n  return status, output, errors\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local stdout = os.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local stderr = os.tmpname()",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local status = os.execute(command\r\n                  .. ' 1>\"' .. stdout .. '\"'\r\n                  .. ' 2>\"' .. stderr .. '\"')",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local output = readfile(stdout)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local errors = readfile(stderr)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "os.remove(stdout)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "os.remove(stderr)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function readstdout(command)\r\n  local status, stdout, stderr = readcmd(command)\r\n  return status == 0 and stdout or ''\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local status, stdout, stderr = readcmd(command)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function sudo(command, args)\r\n  if executable 'sudo' and (os.getenv 'SUDO_USER'\r\n      or readstdout 'id -un' ~= 'root') then\r\n    command = 'sudo ' .. command\r\n  end\r\n  if #args > 0 then\r\n    command = command .. ' ' .. table.concat(args, ' ')\r\n  end\r\n  return command\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "if executable 'sudo' and (os.getenv 'SUDO_USER'\r\n      or readstdout 'id -un' ~= 'root') then\r\n    command = 'sudo ' .. command\r\n  end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "command = 'sudo ' .. command",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if #args > 0 then\r\n    command = command .. ' ' .. table.concat(args, ' ')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "command = command .. ' ' .. table.concat(args, ' ')",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function mergeflags(flags, command)\r\n  local status, stdout, stderr = readcmd(command)\r\n  if status == 0 then\r\n    for flag in words(stdout) do\r\n      if not flags[flag] then\r\n        local position = #flags + 1\r\n        flags[flag] = position\r\n        flags[position] = flag\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if status == 0 then\r\n    for flag in words(stdout) do\r\n      if not flags[flag] then\r\n        local position = #flags + 1\r\n        flags[flag] = position\r\n        flags[position] = flag\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "for flag in words(stdout) do\r\n      if not flags[flag] then\r\n        local position = #flags + 1\r\n        flags[flag] = position\r\n        flags[position] = flag\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 43,
    "text": "if not flags[flag] then\r\n        local position = #flags + 1\r\n        flags[flag] = position\r\n        flags[position] = flag\r\n      end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "local position = #flags + 1",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "flags[flag] = position",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "flags[position] = flag",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function getcflags()\r\n  local flags, count = {}, 0\r\n  -- Compiler flags for Lua 5.1.\r\n  mergeflags(flags, 'pkg-config --cflags lua5.1') -- Debian/Ubuntu\r\n  mergeflags(flags, 'pkg-config --cflags lua-5.1') -- FreeBSD\r\n  mergeflags(flags, 'pkg-config --cflags lua') -- Arch Linux\r\n  if DEBUG and #flags == 0 then\r\n    message \"Warning: Failed to determine Lua 5.1 compiler flags.\"\r\n  end\r\n  count = #flags\r\n  -- Compiler flags for APR 1.\r\n  mergeflags(flags, 'apr-1-config --cflags --cppflags --includes') -- sometimes this is available\r\n  mergeflags(flags, 'pkg-config --cflags apr-1') -- otherwise we fall back to pkg-config\r\n  if DEBUG and #flags == count then\r\n    message \"Warning: Failed to determine APR 1 compiler flags.\"\r\n  end\r\n  count = #flags\r\n  -- Compiler flags for APR-util 1.\r\n  mergeflags(flags, 'apu-1-config --includes') -- sometimes this is available\r\n  mergeflags(flags, 'pkg-config --cflags apr-util-1') -- otherwise we fall back to pkg-config\r\n  if DEBUG and #flags == count then\r\n    message \"Warning: Failed to determine APR-util 1 compiler flags.\"\r\n  end\r\n  count = #flags\r\n  -- Compiler flags for libapreq2.\r\n  mergeflags(flags, 'apreq2-config --includes')\r\n  local have_apreq = (#flags > count)\r\n  if DEBUG and not have_apreq then\r\n    message \"Warning: Failed to determine libapreq2 compiler flags.\"\r\n  end\r\n  -- Let the C source code know whether libapreq2 is available.\r\n  flags[#flags + 1] = '-DLUA_APR_HAVE_APREQ=' .. (have_apreq and 1 or 0)\r\n  return table.concat(flags, ' ')\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local flags, count = {}, 0",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "mergeflags(flags, 'pkg-config --cflags lua5.1')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "mergeflags(flags, 'pkg-config --cflags lua-5.1')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "mergeflags(flags, 'pkg-config --cflags lua')",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if DEBUG and #flags == 0 then\r\n    message \"Warning: Failed to determine Lua 5.1 compiler flags.\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "message \"Warning: Failed to determine Lua 5.1 compiler flags.\"",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "count = #flags",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "mergeflags(flags, 'apr-1-config --cflags --cppflags --includes')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "mergeflags(flags, 'pkg-config --cflags apr-1')",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "if DEBUG and #flags == count then\r\n    message \"Warning: Failed to determine APR 1 compiler flags.\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "message \"Warning: Failed to determine APR 1 compiler flags.\"",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "mergeflags(flags, 'apu-1-config --includes')",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "mergeflags(flags, 'pkg-config --cflags apr-util-1')",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "if DEBUG and #flags == count then\r\n    message \"Warning: Failed to determine APR-util 1 compiler flags.\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "message \"Warning: Failed to determine APR-util 1 compiler flags.\"",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "mergeflags(flags, 'apreq2-config --includes')",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local have_apreq = (#flags > count)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if DEBUG and not have_apreq then\r\n    message \"Warning: Failed to determine libapreq2 compiler flags.\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "message \"Warning: Failed to determine libapreq2 compiler flags.\"",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "flags[#flags + 1] = '-DLUA_APR_HAVE_APREQ=' .. (have_apreq and 1 or 0)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function getlflags()\r\n  local flags = {}\r\n  -- Linker flags for APR 1.\r\n  mergeflags(flags, 'apr-1-config --link-ld --libs')\r\n  mergeflags(flags, 'pkg-config --libs apr-1')\r\n  if DEBUG and #flags == 0 then\r\n    message \"Warning: Failed to determine APR 1 linker flags.\"\r\n  end\r\n  count = #flags\r\n  -- Linker flags for APR-util 1.\r\n  mergeflags(flags, 'apu-1-config --link-ld --libs --ldap-libs')\r\n  mergeflags(flags, 'pkg-config --libs apr-util-1')\r\n  if DEBUG and #flags == count then\r\n    message \"Warning: Failed to determine APR-util 1 linker flags.\"\r\n  end\r\n  count = #flags\r\n  -- Linker flags for libapreq2.\r\n  mergeflags(flags, 'apreq2-config --link-ld')\r\n  if DEBUG and #flags == 0 then\r\n    message \"Warning: Failed to determine apreq2 linker flags.\"\r\n  end\r\n  return table.concat(flags, ' ')\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local flags = {}",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "mergeflags(flags, 'apr-1-config --link-ld --libs')",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "mergeflags(flags, 'pkg-config --libs apr-1')",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if DEBUG and #flags == 0 then\r\n    message \"Warning: Failed to determine APR 1 linker flags.\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "message \"Warning: Failed to determine APR 1 linker flags.\"",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "mergeflags(flags, 'apu-1-config --link-ld --libs --ldap-libs')",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "mergeflags(flags, 'pkg-config --libs apr-util-1')",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "if DEBUG and #flags == count then\r\n    message \"Warning: Failed to determine APR-util 1 linker flags.\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "message \"Warning: Failed to determine APR-util 1 linker flags.\"",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "mergeflags(flags, 'apreq2-config --link-ld')",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "if DEBUG and #flags == 0 then\r\n    message \"Warning: Failed to determine apreq2 linker flags.\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "message \"Warning: Failed to determine apreq2 linker flags.\"",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function delimiter()\r\n  message(string.rep('-', 79))\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "message(string.rep('-', 79))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "local function checkpackages()\r\n\r\n  -- Let the user know what's going on.\r\n  delimiter()\r\n  message [[\r\n    It looks like your Lua/APR build failed. This could be because you're\r\n    missing some external dependencies. I will now check if you have the\r\n    required system packages installed (this should work on Debian, Ubuntu,\r\n    Arch Linux, Red Hat, Fedora Core, Suse Linux and CentOS).\r\n  ]]\r\n  delimiter()\r\n\r\n  -- Perform platform detection.\r\n  local command, requiredpackages, installedpackagescmd\r\n  if executable 'dpkg' and executable 'apt-get' then\r\n    -- Debian & Ubuntu.\r\n    -- Tested on Ubuntu Linux 10.04 (Lucid Lynx).\r\n    command = 'apt-get install'\r\n    installedpackagescmd = [[ dpkg --list | awk '/^i/ {print $2}' ]]\r\n    requiredpackages = [[\r\n      lua5.1 liblua5.1-0 liblua5.1-0-dev\r\n      libapr1 libapr1-dev\r\n      libaprutil1 libaprutil1-dev libaprutil1-dbd-sqlite3\r\n      libapreq2 libapreq2-dev\r\n    ]]\r\n    -- Newer versions of Ubuntu install \"recommended packages\" by default, but\r\n    -- unfortunately the libapreq2 package recommends libapache2-mod-apreq2 which\r\n    -- pulls in the whole Apache server :-|. I think this is stupid and work\r\n    -- around it by passing the --no-install-recommends command line option\r\n    -- when it seems to be supported (unfortunately \"apt-get --help\" doesn't list\r\n    -- the supported command line options so we have to grep the binary :-P).\r\n    if os.execute 'strings /usr/bin/apt-get | grep -q install-recommends 1>/dev/null 2>&1' == 0 then\r\n      command = command .. ' --no-install-recommends'\r\n    end\r\n  elseif executable 'rpm' and executable 'yum' then\r\n    -- Red Hat, Fedora Core, Suse Linux & CentOS.\r\n    -- Tested on Fedora Core 15.\r\n    command = 'yum install'\r\n    installedpackagescmd = [[ rpm -qa --qf '%{NAME}\\n' ]]\r\n    requiredpackages = [[\r\n      lua lua-devel\r\n      apr apr-devel\r\n      apr-util apr-util-devel\r\n      libapreq2 libapreq2-devel\r\n    ]]\r\n  elseif executable 'pacman' then\r\n    -- Arch Linux.\r\n    -- Tested on Arch Linux 2011.08.19.\r\n    command = 'pacman -S'\r\n    installedpackagescmd = [[ bash -c \"comm -23 <(pacman -Qeq) <(pacman -Qmq)\" ]]\r\n    requiredpackages = [[ lua apr apr-util perl-libapreq2 ]]\r\n  else\r\n    message [[\r\n      Unknown platform: You'll have to install the required system\r\n      packages manually (lua, apr, apr-util and libapreq2).\r\n    ]]\r\n    delimiter()\r\n    os.exit(1)\r\n  end\r\n\r\n  -- Find the installed packages.\r\n  local installedpackages = {}\r\n  local handle = io.popen(installedpackagescmd)\r\n  for name in handle:lines() do\r\n    installedpackages[name] = true\r\n  end\r\n\r\n  -- Determine missing packages.\r\n  local missingpackages = {}\r\n  for name in words(requiredpackages) do\r\n    if installedpackages[name] then\r\n      message(\" - Package `%s' is already installed.\", name)\r\n    else\r\n      message(\" - Missing package `%s'!\", name)\r\n      table.insert(missingpackages, name)\r\n    end\r\n  end\r\n\r\n  -- If we found any missing system packages, suggest to the user how the\r\n  -- missing packages can be installed.\r\n  delimiter()\r\n  if #missingpackages == 0 then\r\n    message [[\r\n      It looks like you have all required external dependencies installed,\r\n      something else must have gone wrong...\r\n    ]]\r\n  else\r\n    message([[\r\n      The Lua/APR binding has several external dependencies and it looks like\r\n      some are missing on your system. You should be able to install the\r\n      dependencies with the following command:\r\n\r\n        %s\r\n\r\n      ]], sudo(command, missingpackages))\r\n  end\r\n  delimiter()\r\n\r\n  -- Because this script is executed from the makefile in || expressions we\r\n  -- always exit with a non-zero exit code, so that the build still fails.\r\n  os.exit(1)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "delimiter()",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "message [[\r\n    It looks like your Lua/APR build failed. This could be because you're\r\n    missing some external dependencies. I will now check if you have the\r\n    required system packages installed (this should work on Debian, Ubuntu,\r\n    Arch Linux, Red Hat, Fedora Core, Suse Linux and CentOS).\r\n  ]]",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local command, requiredpackages, installedpackagescmd",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if executable 'dpkg' and executable 'apt-get' then\r\n    -- Debian & Ubuntu.\r\n    -- Tested on Ubuntu Linux 10.04 (Lucid Lynx).\r\n    command = 'apt-get install'\r\n    installedpackagescmd = [[ dpkg --list | awk '/^i/ {print $2}' ]]\r\n    requiredpackages = [[\r\n      lua5.1 liblua5.1-0 liblua5.1-0-dev\r\n      libapr1 libapr1-dev\r\n      libaprutil1 libaprutil1-dev libaprutil1-dbd-sqlite3\r\n      libapreq2 libapreq2-dev\r\n    ]]\r\n    -- Newer versions of Ubuntu install \"recommended packages\" by default, but\r\n    -- unfortunately the libapreq2 package recommends libapache2-mod-apreq2 which\r\n    -- pulls in the whole Apache server :-|. I think this is stupid and work\r\n    -- around it by passing the --no-install-recommends command line option\r\n    -- when it seems to be supported (unfortunately \"apt-get --help\" doesn't list\r\n    -- the supported command line options so we have to grep the binary :-P).\r\n    if os.execute 'strings /usr/bin/apt-get | grep -q install-recommends 1>/dev/null 2>&1' == 0 then\r\n      command = command .. ' --no-install-recommends'\r\n    end\r\n  elseif executable 'rpm' and executable 'yum' then\r\n    -- Red Hat, Fedora Core, Suse Linux & CentOS.\r\n    -- Tested on Fedora Core 15.\r\n    command = 'yum install'\r\n    installedpackagescmd = [[ rpm -qa --qf '%{NAME}\\n' ]]\r\n    requiredpackages = [[\r\n      lua lua-devel\r\n      apr apr-devel\r\n      apr-util apr-util-devel\r\n      libapreq2 libapreq2-devel\r\n    ]]\r\n  elseif executable 'pacman' then\r\n    -- Arch Linux.\r\n    -- Tested on Arch Linux 2011.08.19.\r\n    command = 'pacman -S'\r\n    installedpackagescmd = [[ bash -c \"comm -23 <(pacman -Qeq) <(pacman -Qmq)\" ]]\r\n    requiredpackages = [[ lua apr apr-util perl-libapreq2 ]]\r\n  else\r\n    message [[\r\n      Unknown platform: You'll have to install the required system\r\n      packages manually (lua, apr, apr-util and libapreq2).\r\n    ]]\r\n    delimiter()\r\n    os.exit(1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "command = 'apt-get install'",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "installedpackagescmd = [[ dpkg --list | awk '/^i/ {print $2}' ]]",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "requiredpackages = [[\r\n      lua5.1 liblua5.1-0 liblua5.1-0-dev\r\n      libapr1 libapr1-dev\r\n      libaprutil1 libaprutil1-dev libaprutil1-dbd-sqlite3\r\n      libapreq2 libapreq2-dev\r\n    ]]",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if os.execute 'strings /usr/bin/apt-get | grep -q install-recommends 1>/dev/null 2>&1' == 0 then\r\n      command = command .. ' --no-install-recommends'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "command = command .. ' --no-install-recommends'",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "command = 'yum install'",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "installedpackagescmd = [[ rpm -qa --qf '%{NAME}\\n' ]]",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "requiredpackages = [[\r\n      lua lua-devel\r\n      apr apr-devel\r\n      apr-util apr-util-devel\r\n      libapreq2 libapreq2-devel\r\n    ]]",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "command = 'pacman -S'",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "installedpackagescmd = [[ bash -c \"comm -23 <(pacman -Qeq) <(pacman -Qmq)\" ]]",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "requiredpackages = [[ lua apr apr-util perl-libapreq2 ]]",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "message [[\r\n      Unknown platform: You'll have to install the required system\r\n      packages manually (lua, apr, apr-util and libapreq2).\r\n    ]]",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "local installedpackages = {}",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local handle = io.popen(installedpackagescmd)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "for name in handle:lines() do\r\n    installedpackages[name] = true\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 108,
    "text": "installedpackages[name] = true",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "local missingpackages = {}",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "for name in words(requiredpackages) do\r\n    if installedpackages[name] then\r\n      message(\" - Package `%s' is already installed.\", name)\r\n    else\r\n      message(\" - Missing package `%s'!\", name)\r\n      table.insert(missingpackages, name)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 111,
    "text": "if installedpackages[name] then\r\n      message(\" - Package `%s' is already installed.\", name)\r\n    else\r\n      message(\" - Missing package `%s'!\", name)\r\n      table.insert(missingpackages, name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "message(\" - Package `%s' is already installed.\", name)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "message(\" - Missing package `%s'!\", name)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "table.insert(missingpackages, name)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "if #missingpackages == 0 then\r\n    message [[\r\n      It looks like you have all required external dependencies installed,\r\n      something else must have gone wrong...\r\n    ]]\r\n  else\r\n    message([[\r\n      The Lua/APR binding has several external dependencies and it looks like\r\n      some are missing on your system. You should be able to install the\r\n      dependencies with the following command:\r\n\r\n        %s\r\n\r\n      ]], sudo(command, missingpackages))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "message [[\r\n      It looks like you have all required external dependencies installed,\r\n      something else must have gone wrong...\r\n    ]]",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "message([[\r\n      The Lua/APR binding has several external dependencies and it looks like\r\n      some are missing on your system. You should be able to install the\r\n      dependencies with the following command:\r\n\r\n        %s\r\n\r\n      ]], sudo(command, missingpackages))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "",
    "type": "function container"
  }, {
    "id": 120,
    "text": "tmpname",
    "type": "global function"
  }, {
    "id": 121,
    "text": "print",
    "type": "global function"
  }, {
    "id": 122,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 123,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 124,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 125,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 126,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 127,
    "text": "open",
    "type": "global function"
  }, {
    "id": 128,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 129,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 130,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 131,
    "text": "",
    "type": "variable container"
  }, {
    "id": 132,
    "text": "",
    "type": "require container"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  } ]
}