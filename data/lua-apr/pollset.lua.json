{
  "_filename": "pollset.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-apr/test/pollset.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 25,
    "label": "has",
    "to": 33
  }, {
    "from": 25,
    "label": "has",
    "to": 34
  }, {
    "from": 14,
    "label": "has",
    "to": 35
  }, {
    "from": 14,
    "label": "has",
    "to": 36
  }, {
    "from": 14,
    "label": "has",
    "to": 37
  }, {
    "from": 14,
    "label": "has",
    "to": 38
  }, {
    "from": 14,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 15
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 33
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 14,
    "label": "calls",
    "to": 56
  }, {
    "from": 3,
    "label": "calls",
    "to": 53
  }, {
    "from": 3,
    "label": "calls",
    "to": 53
  }, {
    "from": 3,
    "label": "calls",
    "to": 53
  }, {
    "from": 3,
    "label": "calls",
    "to": 53
  }, {
    "from": 3,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 40,
    "label": "calls",
    "to": 53
  }, {
    "from": 14,
    "label": "calls",
    "to": 51
  }, {
    "from": 40,
    "label": "calls",
    "to": 51
  }, {
    "from": 48,
    "label": "calls",
    "to": 54
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 14,
    "label": "calls",
    "to": 50
  }, {
    "from": 48,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 14,
    "label": "calls",
    "to": 57
  }, {
    "from": 40,
    "label": "calls",
    "to": 57
  }, {
    "from": 3,
    "label": "calls",
    "to": 55
  }, {
    "from": 3,
    "label": "calls",
    "to": 49
  }, {
    "from": 2,
    "label": "contains",
    "to": 48
  }, {
    "from": 48,
    "label": "declares",
    "to": 3
  }, {
    "from": 48,
    "label": "declares",
    "to": 14
  }, {
    "from": 48,
    "label": "declares",
    "to": 40
  }, {
    "from": 2,
    "label": "contains",
    "to": 58
  }, {
    "from": 2,
    "label": "contains",
    "to": 59
  }, {
    "from": 58,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 58,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 58,
    "label": "initializes",
    "to": 64
  }, {
    "from": 58,
    "label": "initializes",
    "to": 65
  }, {
    "from": 58,
    "label": "initializes",
    "to": 66
  }, {
    "from": 59,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "requires",
    "to": 1
  }, {
    "from": 59,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "requires",
    "to": 1
  }, {
    "from": 59,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "apr",
    "type": "module"
  }, {
    "id": 2,
    "text": "pollset",
    "type": "module"
  }, {
    "id": 3,
    "text": "function main() -- {{{1\r\n  local server_thread = assert(apr.thread(server_loop))\r\n  apr.sleep(0.25)\r\n  local client_threads = {}\r\n  for i = 1, NUM_CLIENTS do\r\n    table.insert(client_threads, assert(apr.thread(client_loop)))\r\n  end\r\n  local _, served_clients = assert(server_thread:join())\r\n  for i = 1, NUM_CLIENTS do\r\n    assert(client_threads[i]:join())\r\n  end\r\n  assert(served_clients == NUM_CLIENTS)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local server_thread = assert(apr.thread(server_loop))",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "apr.sleep(0.25)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local client_threads = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for i = 1, NUM_CLIENTS do\r\n    table.insert(client_threads, assert(apr.thread(client_loop)))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 8,
    "text": "table.insert(client_threads, assert(apr.thread(client_loop)))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "local _, served_clients = assert(server_thread:join())",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for i = 1, NUM_CLIENTS do\r\n    assert(client_threads[i]:join())\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 11,
    "text": "assert(client_threads[i]:join())",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert(served_clients == NUM_CLIENTS)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function server_loop() -- {{{1\r\n  local apr = require 'apr'\r\n  -- Create the pollset object (+1 for the server socket).\r\n  local pollset = assert(apr.pollset(NUM_CLIENTS + 1))\r\n  -- Create a server socket.\r\n  local server = assert(apr.socket_create())\r\n  assert(server:bind('*', SERVER_PORT))\r\n  assert(server:listen(NUM_CLIENTS))\r\n  -- Add the server socket to the pollset.\r\n  assert(pollset:add(server, 'input'))\r\n  -- Loop to handle connections.\r\n  local counter = 0\r\n  while counter < NUM_CLIENTS do\r\n    local readable = assert(pollset:poll(-1))\r\n    for _, socket in ipairs(readable) do\r\n      if socket == server then\r\n        local client = assert(server:accept())\r\n        assert(pollset:add(client, 'input'))\r\n      else\r\n        assert('first request line' == assert(socket:read()))\r\n        assert(socket:write 'first response line\\n')\r\n        assert('second request line' == assert(socket:read()))\r\n        assert(socket:write 'second response line\\n')\r\n        assert(pollset:remove(socket))\r\n        assert(socket:close())\r\n        counter = counter + 1\r\n      end\r\n    end\r\n  end\r\n  -- Remove the server socket from the pollset.\r\n  assert(pollset:remove(server))\r\n  assert(server:close())\r\n  -- Destroy the pollset.\r\n  assert(pollset:destroy())\r\n  return counter\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local apr = require 'apr'",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local pollset = assert(apr.pollset(NUM_CLIENTS + 1))",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local server = assert(apr.socket_create())",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "assert(server:bind('*', SERVER_PORT))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert(server:listen(NUM_CLIENTS))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert(pollset:add(server, 'input'))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "local counter = 0",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "while counter < NUM_CLIENTS do\r\n    local readable = assert(pollset:poll(-1))\r\n    for _, socket in ipairs(readable) do\r\n      if socket == server then\r\n        local client = assert(server:accept())\r\n        assert(pollset:add(client, 'input'))\r\n      else\r\n        assert('first request line' == assert(socket:read()))\r\n        assert(socket:write 'first response line\\n')\r\n        assert('second request line' == assert(socket:read()))\r\n        assert(socket:write 'second response line\\n')\r\n        assert(pollset:remove(socket))\r\n        assert(socket:close())\r\n        counter = counter + 1\r\n      end\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 23,
    "text": "local readable = assert(pollset:poll(-1))",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for _, socket in ipairs(readable) do\r\n      if socket == server then\r\n        local client = assert(server:accept())\r\n        assert(pollset:add(client, 'input'))\r\n      else\r\n        assert('first request line' == assert(socket:read()))\r\n        assert(socket:write 'first response line\\n')\r\n        assert('second request line' == assert(socket:read()))\r\n        assert(socket:write 'second response line\\n')\r\n        assert(pollset:remove(socket))\r\n        assert(socket:close())\r\n        counter = counter + 1\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "if socket == server then\r\n        local client = assert(server:accept())\r\n        assert(pollset:add(client, 'input'))\r\n      else\r\n        assert('first request line' == assert(socket:read()))\r\n        assert(socket:write 'first response line\\n')\r\n        assert('second request line' == assert(socket:read()))\r\n        assert(socket:write 'second response line\\n')\r\n        assert(pollset:remove(socket))\r\n        assert(socket:close())\r\n        counter = counter + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local client = assert(server:accept())",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "assert(pollset:add(client, 'input'))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert('first request line' == assert(socket:read()))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert(socket:write 'first response line\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert('second request line' == assert(socket:read()))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert(socket:write 'second response line\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert(pollset:remove(socket))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert(socket:close())",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "counter = counter + 1",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "assert(pollset:remove(server))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert(server:close())",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert(pollset:destroy())",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function client_loop() -- {{{1\r\n  local apr = require 'apr'\r\n  local socket = assert(apr.socket_create())\r\n  assert(socket:connect('127.0.0.1', SERVER_PORT))\r\n  assert(socket:write 'first request line\\n')\r\n  assert('first response line' == assert(socket:read()))\r\n  assert(socket:write 'second request line\\n')\r\n  assert('second response line' == assert(socket:read()))\r\n  assert(socket:close())\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local socket = assert(apr.socket_create())",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "assert(socket:connect('127.0.0.1', SERVER_PORT))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert(socket:write 'first request line\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert('first response line' == assert(socket:read()))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert(socket:write 'second request line\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert('second response line' == assert(socket:read()))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "",
    "type": "function container"
  }, {
    "id": 49,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 50,
    "text": "pollset",
    "type": "global function"
  }, {
    "id": 51,
    "text": "socket_create",
    "type": "global function"
  }, {
    "id": 52,
    "text": "thread",
    "type": "global function"
  }, {
    "id": 53,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 54,
    "text": "random",
    "type": "global function"
  }, {
    "id": 55,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 56,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 57,
    "text": "require",
    "type": "global function"
  }, {
    "id": 58,
    "text": "",
    "type": "variable container"
  }, {
    "id": 59,
    "text": "",
    "type": "require container"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "number"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  } ]
}