{
  "_filename": "threaded-webserver.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-apr/examples/threaded-webserver.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 20
  }, {
    "from": 10,
    "label": "has",
    "to": 21
  }, {
    "from": 9,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 3,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 11
  }, {
    "from": 25,
    "label": "has",
    "to": 12
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 25,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 25,
    "label": "has",
    "to": 18
  }, {
    "from": 25,
    "label": "has",
    "to": 19
  }, {
    "from": 25,
    "label": "has",
    "to": 20
  }, {
    "from": 25,
    "label": "has",
    "to": 21
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 40
  }, {
    "from": 31,
    "label": "calls",
    "to": 35
  }, {
    "from": 31,
    "label": "calls",
    "to": 35
  }, {
    "from": 31,
    "label": "calls",
    "to": 35
  }, {
    "from": 3,
    "label": "calls",
    "to": 35
  }, {
    "from": 3,
    "label": "calls",
    "to": 35
  }, {
    "from": 3,
    "label": "calls",
    "to": 35
  }, {
    "from": 3,
    "label": "calls",
    "to": 35
  }, {
    "from": 31,
    "label": "calls",
    "to": 35
  }, {
    "from": 31,
    "label": "calls",
    "to": 35
  }, {
    "from": 31,
    "label": "calls",
    "to": 32
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 3,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 36
  }, {
    "from": 31,
    "label": "calls",
    "to": 36
  }, {
    "from": 31,
    "label": "calls",
    "to": 33
  }, {
    "from": 3,
    "label": "calls",
    "to": 41
  }, {
    "from": 3,
    "label": "calls",
    "to": 38
  }, {
    "from": 3,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 42
  }, {
    "from": 3,
    "label": "calls",
    "to": 42
  }, {
    "from": 3,
    "label": "calls",
    "to": 39
  }, {
    "from": 31,
    "label": "calls",
    "to": 39
  }, {
    "from": 31,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "declares",
    "to": 3
  }, {
    "from": 31,
    "label": "declares",
    "to": 25
  }, {
    "from": 31,
    "label": "declares",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 43,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 43,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 43,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 43,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 43,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 43,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 44,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "requires",
    "to": 2
  }, {
    "from": 44,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "threaded-webserver",
    "type": "module"
  }, {
    "id": 2,
    "text": "apr",
    "type": "module"
  }, {
    "id": 3,
    "text": "function worker(thread_id, queue, template)\r\n  pcall(require, 'luarocks.require')\r\n  local apr = require 'apr'\r\n  while true do\r\n    local client, msg, code = queue:pop()\r\n    assert(client or code == 'EINTR', msg)\r\n    if client then\r\n      local status, message = pcall(function()\r\n        local request = assert(client:read(), \"Failed to receive request from client!\")\r\n        local method, location, protocol = assert(request:match '^(%w+)%s+(%S+)%s+(%S+)')\r\n        local headers = {}\r\n        for line in client:lines() do\r\n          local name, value = line:match '^(%S+):%s+(.-)$'\r\n          if not name then\r\n            break\r\n          end\r\n          table.insert(headers, '<dt>' .. name .. ':</dt><dd>' .. value .. '</dd>')\r\n        end\r\n        table.sort(headers)\r\n        local content = template:format(thread_id, table.concat(headers))\r\n        client:write(protocol, ' 200 OK\\r\\n',\r\n                     'Content-Type: text/html\\r\\n',\r\n                     'Content-Length: ' .. #content .. '\\r\\n',\r\n                     'Connection: close\\r\\n',\r\n                     '\\r\\n',\r\n                     content)\r\n        assert(client:close())\r\n      end)\r\n      if not status then\r\n        print('Error while serving request:', message)\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "pcall(require, 'luarocks.require')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local apr = require 'apr'",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "while true do\r\n    local client, msg, code = queue:pop()\r\n    assert(client or code == 'EINTR', msg)\r\n    if client then\r\n      local status, message = pcall(function()\r\n        local request = assert(client:read(), \"Failed to receive request from client!\")\r\n        local method, location, protocol = assert(request:match '^(%w+)%s+(%S+)%s+(%S+)')\r\n        local headers = {}\r\n        for line in client:lines() do\r\n          local name, value = line:match '^(%S+):%s+(.-)$'\r\n          if not name then\r\n            break\r\n          end\r\n          table.insert(headers, '<dt>' .. name .. ':</dt><dd>' .. value .. '</dd>')\r\n        end\r\n        table.sort(headers)\r\n        local content = template:format(thread_id, table.concat(headers))\r\n        client:write(protocol, ' 200 OK\\r\\n',\r\n                     'Content-Type: text/html\\r\\n',\r\n                     'Content-Length: ' .. #content .. '\\r\\n',\r\n                     'Connection: close\\r\\n',\r\n                     '\\r\\n',\r\n                     content)\r\n        assert(client:close())\r\n      end)\r\n      if not status then\r\n        print('Error while serving request:', message)\r\n      end\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 7,
    "text": "local client, msg, code = queue:pop()",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "assert(client or code == 'EINTR', msg)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "if client then\r\n      local status, message = pcall(function()\r\n        local request = assert(client:read(), \"Failed to receive request from client!\")\r\n        local method, location, protocol = assert(request:match '^(%w+)%s+(%S+)%s+(%S+)')\r\n        local headers = {}\r\n        for line in client:lines() do\r\n          local name, value = line:match '^(%S+):%s+(.-)$'\r\n          if not name then\r\n            break\r\n          end\r\n          table.insert(headers, '<dt>' .. name .. ':</dt><dd>' .. value .. '</dd>')\r\n        end\r\n        table.sort(headers)\r\n        local content = template:format(thread_id, table.concat(headers))\r\n        client:write(protocol, ' 200 OK\\r\\n',\r\n                     'Content-Type: text/html\\r\\n',\r\n                     'Content-Length: ' .. #content .. '\\r\\n',\r\n                     'Connection: close\\r\\n',\r\n                     '\\r\\n',\r\n                     content)\r\n        assert(client:close())\r\n      end)\r\n      if not status then\r\n        print('Error while serving request:', message)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local status, message = pcall(function()\r\n        local request = assert(client:read(), \"Failed to receive request from client!\")\r\n        local method, location, protocol = assert(request:match '^(%w+)%s+(%S+)%s+(%S+)')\r\n        local headers = {}\r\n        for line in client:lines() do\r\n          local name, value = line:match '^(%S+):%s+(.-)$'\r\n          if not name then\r\n            break\r\n          end\r\n          table.insert(headers, '<dt>' .. name .. ':</dt><dd>' .. value .. '</dd>')\r\n        end\r\n        table.sort(headers)\r\n        local content = template:format(thread_id, table.concat(headers))\r\n        client:write(protocol, ' 200 OK\\r\\n',\r\n                     'Content-Type: text/html\\r\\n',\r\n                     'Content-Length: ' .. #content .. '\\r\\n',\r\n                     'Connection: close\\r\\n',\r\n                     '\\r\\n',\r\n                     content)\r\n        assert(client:close())\r\n      end)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local request = assert(client:read(), \"Failed to receive request from client!\")",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local method, location, protocol = assert(request:match '^(%w+)%s+(%S+)%s+(%S+)')",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local headers = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "for line in client:lines() do\r\n          local name, value = line:match '^(%S+):%s+(.-)$'\r\n          if not name then\r\n            break\r\n          end\r\n          table.insert(headers, '<dt>' .. name .. ':</dt><dd>' .. value .. '</dd>')\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "local name, value = line:match '^(%S+):%s+(.-)$'",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if not name then\r\n            break\r\n          end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "table.insert(headers, '<dt>' .. name .. ':</dt><dd>' .. value .. '</dd>')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "table.sort(headers)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local content = template:format(thread_id, table.concat(headers))",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "client:write(protocol, ' 200 OK\\r\\n',\r\n                     'Content-Type: text/html\\r\\n',\r\n                     'Content-Length: ' .. #content .. '\\r\\n',\r\n                     'Connection: close\\r\\n',\r\n                     '\\r\\n',\r\n                     content)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert(client:close())",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if not status then\r\n        print('Error while serving request:', message)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "print('Error while serving request:', message)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function()\r\n        local request = assert(client:read(), \"Failed to receive request from client!\")\r\n        local method, location, protocol = assert(request:match '^(%w+)%s+(%S+)%s+(%S+)')\r\n        local headers = {}\r\n        for line in client:lines() do\r\n          local name, value = line:match '^(%S+):%s+(.-)$'\r\n          if not name then\r\n            break\r\n          end\r\n          table.insert(headers, '<dt>' .. name .. ':</dt><dd>' .. value .. '</dd>')\r\n        end\r\n        table.sort(headers)\r\n        local content = template:format(thread_id, table.concat(headers))\r\n        client:write(protocol, ' 200 OK\\r\\n',\r\n                     'Content-Type: text/html\\r\\n',\r\n                     'Content-Length: ' .. #content .. '\\r\\n',\r\n                     'Connection: close\\r\\n',\r\n                     '\\r\\n',\r\n                     content)\r\n        assert(client:close())\r\n      end",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function()\r\n    local client = assert(server:accept())\r\n    assert(queue:push(client))\r\n  end",
    "type": "function"
  }, {
    "id": 28,
    "text": "local client = assert(server:accept())",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "assert(queue:push(client))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "",
    "type": "function container"
  }, {
    "id": 32,
    "text": "socket_create",
    "type": "global function"
  }, {
    "id": 33,
    "text": "thread_queue",
    "type": "global function"
  }, {
    "id": 34,
    "text": "thread",
    "type": "global function"
  }, {
    "id": 35,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 36,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 37,
    "text": "print",
    "type": "global function"
  }, {
    "id": 38,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 39,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 40,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 41,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 42,
    "text": "require",
    "type": "global function"
  }, {
    "id": 43,
    "text": "",
    "type": "variable container"
  }, {
    "id": 44,
    "text": "",
    "type": "require container"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "string"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "n/a"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 57,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "require local variable"
  } ]
}