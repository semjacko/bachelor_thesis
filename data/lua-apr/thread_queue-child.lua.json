{
  "_filename": "thread_queue-child.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-apr/test/thread_queue-child.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 4
  }, {
    "from": 25,
    "label": "has",
    "to": 5
  }, {
    "from": 25,
    "label": "has",
    "to": 6
  }, {
    "from": 25,
    "label": "has",
    "to": 7
  }, {
    "from": 25,
    "label": "has",
    "to": 8
  }, {
    "from": 25,
    "label": "has",
    "to": 9
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 11
  }, {
    "from": 25,
    "label": "has",
    "to": 12
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 25,
    "label": "has",
    "to": 16
  }, {
    "from": 25,
    "label": "has",
    "to": 17
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 27,
    "label": "has",
    "to": 38
  }, {
    "from": 27,
    "label": "has",
    "to": 39
  }, {
    "from": 27,
    "label": "has",
    "to": 40
  }, {
    "from": 27,
    "label": "has",
    "to": 41
  }, {
    "from": 27,
    "label": "has",
    "to": 42
  }, {
    "from": 27,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 17
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "calls",
    "to": 49
  }, {
    "from": 48,
    "label": "calls",
    "to": 49
  }, {
    "from": 48,
    "label": "calls",
    "to": 50
  }, {
    "from": 48,
    "label": "calls",
    "to": 50
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 48,
    "label": "calls",
    "to": 53
  }, {
    "from": 48,
    "label": "calls",
    "to": 58
  }, {
    "from": 48,
    "label": "calls",
    "to": 58
  }, {
    "from": 48,
    "label": "calls",
    "to": 58
  }, {
    "from": 48,
    "label": "calls",
    "to": 58
  }, {
    "from": 48,
    "label": "calls",
    "to": 54
  }, {
    "from": 48,
    "label": "calls",
    "to": 56
  }, {
    "from": 48,
    "label": "calls",
    "to": 52
  }, {
    "from": 48,
    "label": "calls",
    "to": 51
  }, {
    "from": 48,
    "label": "calls",
    "to": 51
  }, {
    "from": 48,
    "label": "calls",
    "to": 60
  }, {
    "from": 48,
    "label": "calls",
    "to": 60
  }, {
    "from": 48,
    "label": "calls",
    "to": 60
  }, {
    "from": 48,
    "label": "calls",
    "to": 60
  }, {
    "from": 48,
    "label": "calls",
    "to": 59
  }, {
    "from": 48,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "contains",
    "to": 48
  }, {
    "from": 48,
    "label": "declares",
    "to": 3
  }, {
    "from": 48,
    "label": "declares",
    "to": 15
  }, {
    "from": 48,
    "label": "declares",
    "to": 19
  }, {
    "from": 48,
    "label": "declares",
    "to": 27
  }, {
    "from": 48,
    "label": "declares",
    "to": 44
  }, {
    "from": 2,
    "label": "contains",
    "to": 61
  }, {
    "from": 2,
    "label": "contains",
    "to": 62
  }, {
    "from": 61,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 61,
    "label": "initializes",
    "to": 65
  }, {
    "from": 61,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 61,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 62,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "requires",
    "to": 1
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 15
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "helpers",
    "type": "module"
  }, {
    "id": 2,
    "text": "thread_queue-child",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n    -- Scalar values.\r\n    assert(queue:push(nil))\r\n    assert(queue:push(false))\r\n    assert(queue:push(true))\r\n    assert(queue:push(42))\r\n    assert(queue:push(math.pi))\r\n    assert(queue:push \"hello world through a queue!\")\r\n    -- Tuples.\r\n    assert(queue:push(true, false, 13, math.huge, _VERSION))\r\n    -- Object values.\r\n    assert(queue:push(queue))\r\n    assert(queue:push(apr.pipe_open_stdin()))\r\n    assert(queue:push(apr.socket_create()))\r\n  end",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert(queue:push(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "assert(queue:push(false))",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "assert(queue:push(true))",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assert(queue:push(42))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assert(queue:push(math.pi))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assert(queue:push \"hello world through a queue!\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert(queue:push(true, false, 13, math.huge, _VERSION))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert(queue:push(queue))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert(queue:push(apr.pipe_open_stdin()))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert(queue:push(apr.socket_create()))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function(errmsg)\r\n    helpers.message(\"Thread queue tests failed in child thread: %s\\n\", errmsg)\r\n    assert(queue:terminate())\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "helpers.message(\"Thread queue tests failed in child thread: %s\\n\", errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert(queue:terminate())",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function()\r\n  local status, apr = pcall(require, 'apr')\r\n  if not status then\r\n    pcall(require, 'luarocks.require')\r\n    apr = require 'apr'\r\n  end\r\n  local helpers = require 'apr.test.helpers'\r\n  helpers.try(function()\r\n    -- Scalar values.\r\n    assert(queue:push(nil))\r\n    assert(queue:push(false))\r\n    assert(queue:push(true))\r\n    assert(queue:push(42))\r\n    assert(queue:push(math.pi))\r\n    assert(queue:push \"hello world through a queue!\")\r\n    -- Tuples.\r\n    assert(queue:push(true, false, 13, math.huge, _VERSION))\r\n    -- Object values.\r\n    assert(queue:push(queue))\r\n    assert(queue:push(apr.pipe_open_stdin()))\r\n    assert(queue:push(apr.socket_create()))\r\n  end, function(errmsg)\r\n    helpers.message(\"Thread queue tests failed in child thread: %s\\n\", errmsg)\r\n    assert(queue:terminate())\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local status, apr = pcall(require, 'apr')",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if not status then\r\n    pcall(require, 'luarocks.require')\r\n    apr = require 'apr'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "pcall(require, 'luarocks.require')",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "apr = require 'apr'",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "local helpers = require 'apr.test.helpers'",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "helpers.try(function()\r\n    -- Scalar values.\r\n    assert(queue:push(nil))\r\n    assert(queue:push(false))\r\n    assert(queue:push(true))\r\n    assert(queue:push(42))\r\n    assert(queue:push(math.pi))\r\n    assert(queue:push \"hello world through a queue!\")\r\n    -- Tuples.\r\n    assert(queue:push(true, false, 13, math.huge, _VERSION))\r\n    -- Object values.\r\n    assert(queue:push(queue))\r\n    assert(queue:push(apr.pipe_open_stdin()))\r\n    assert(queue:push(apr.socket_create()))\r\n  end, function(errmsg)\r\n    helpers.message(\"Thread queue tests failed in child thread: %s\\n\", errmsg)\r\n    assert(queue:terminate())\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function()\r\n  -- Check the sequence of supported value types.\r\n  assert(queue:pop() == nil)\r\n  assert(queue:pop() == false)\r\n  assert(queue:pop() == true)\r\n  assert(queue:pop() == 42)\r\n  assert(queue:pop() == math.pi)\r\n  assert(queue:pop() == \"hello world through a queue!\")\r\n  -- Check that multiple values are supported.\r\n  local expected = { true, false, 13, math.huge, _VERSION }\r\n  helpers.checktuple(expected, assert(queue:pop()))\r\n  -- These test that Lua/APR objects can be passed between threads and that\r\n  -- objects which are really references __equal the object they reference.\r\n  assert(assert(queue:pop()) == queue)\r\n  assert(apr.type(queue:pop()) == 'file')\r\n  assert(apr.type(queue:pop()) == 'socket')\r\n  -- Now make sure the queue is empty again.\r\n  assert(not queue:trypop())\r\n  -- Make sure trypush() works as expected.\r\n  assert(queue:push(1)) -- the thread queue is now full\r\n  assert(not queue:trypush(2)) -- thus trypush() should fail\r\n  assert(thread:join())\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "assert(queue:pop() == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert(queue:pop() == false)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert(queue:pop() == true)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert(queue:pop() == 42)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert(queue:pop() == math.pi)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert(queue:pop() == \"hello world through a queue!\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local expected = { true, false, 13, math.huge, _VERSION }",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "helpers.checktuple(expected, assert(queue:pop()))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert(assert(queue:pop()) == queue)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert(apr.type(queue:pop()) == 'file')",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert(apr.type(queue:pop()) == 'socket')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert(not queue:trypop())",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert(queue:push(1))",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert(not queue:trypush(2))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert(thread:join())",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function(errmsg)\r\n  helpers.message(\"Thread queue tests failed in parent thread: %s\\n\", errmsg)\r\n  assert(queue:terminate())\r\n  os.exit(1)\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "helpers.message(\"Thread queue tests failed in parent thread: %s\\n\", errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "",
    "type": "function container"
  }, {
    "id": 49,
    "text": "try",
    "type": "global function"
  }, {
    "id": 50,
    "text": "message",
    "type": "global function"
  }, {
    "id": 51,
    "text": "type",
    "type": "global function"
  }, {
    "id": 52,
    "text": "pipe_open_stdin",
    "type": "global function"
  }, {
    "id": 53,
    "text": "socket_create",
    "type": "global function"
  }, {
    "id": 54,
    "text": "thread_queue",
    "type": "global function"
  }, {
    "id": 55,
    "text": "checktuple",
    "type": "global function"
  }, {
    "id": 56,
    "text": "thread",
    "type": "global function"
  }, {
    "id": 57,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 58,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 59,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 60,
    "text": "require",
    "type": "global function"
  }, {
    "id": 61,
    "text": "",
    "type": "variable container"
  }, {
    "id": 62,
    "text": "",
    "type": "require container"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "n/a"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "require local variable"
  } ]
}