{
  "_filename": "helpers.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-apr/test/helpers.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 66
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 10
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 10
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 49,
    "label": "has",
    "to": 58
  }, {
    "from": 49,
    "label": "has",
    "to": 10
  }, {
    "from": 49,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 10
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 10
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 10
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 10
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 80
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 10
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 10
  }, {
    "from": 92,
    "label": "has",
    "to": 10
  }, {
    "from": 92,
    "label": "has",
    "to": 10
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 3,
    "label": "calls",
    "to": 120
  }, {
    "from": 49,
    "label": "calls",
    "to": 109
  }, {
    "from": 60,
    "label": "calls",
    "to": 109
  }, {
    "from": 31,
    "label": "calls",
    "to": 115
  }, {
    "from": 41,
    "label": "calls",
    "to": 115
  }, {
    "from": 41,
    "label": "calls",
    "to": 115
  }, {
    "from": 47,
    "label": "calls",
    "to": 115
  }, {
    "from": 49,
    "label": "calls",
    "to": 115
  }, {
    "from": 49,
    "label": "calls",
    "to": 115
  }, {
    "from": 49,
    "label": "calls",
    "to": 115
  }, {
    "from": 49,
    "label": "calls",
    "to": 115
  }, {
    "from": 96,
    "label": "calls",
    "to": 115
  }, {
    "from": 77,
    "label": "calls",
    "to": 115
  }, {
    "from": 77,
    "label": "calls",
    "to": 115
  }, {
    "from": 77,
    "label": "calls",
    "to": 115
  }, {
    "from": 82,
    "label": "calls",
    "to": 115
  }, {
    "from": 82,
    "label": "calls",
    "to": 115
  }, {
    "from": 82,
    "label": "calls",
    "to": 115
  }, {
    "from": 60,
    "label": "calls",
    "to": 107
  }, {
    "from": 3,
    "label": "calls",
    "to": 116
  }, {
    "from": 92,
    "label": "calls",
    "to": 116
  }, {
    "from": 60,
    "label": "calls",
    "to": 103
  }, {
    "from": 60,
    "label": "calls",
    "to": 103
  }, {
    "from": 21,
    "label": "calls",
    "to": 18
  }, {
    "from": 49,
    "label": "calls",
    "to": 106
  }, {
    "from": 68,
    "label": "calls",
    "to": 66
  }, {
    "from": 73,
    "label": "calls",
    "to": 66
  }, {
    "from": 49,
    "label": "calls",
    "to": 122
  }, {
    "from": 26,
    "label": "calls",
    "to": 125
  }, {
    "from": 86,
    "label": "calls",
    "to": 121
  }, {
    "from": 96,
    "label": "calls",
    "to": 117
  }, {
    "from": 96,
    "label": "calls",
    "to": 117
  }, {
    "from": 86,
    "label": "calls",
    "to": 117
  }, {
    "from": 31,
    "label": "calls",
    "to": 118
  }, {
    "from": 77,
    "label": "calls",
    "to": 124
  }, {
    "from": 82,
    "label": "calls",
    "to": 124
  }, {
    "from": 49,
    "label": "calls",
    "to": 114
  }, {
    "from": 41,
    "label": "calls",
    "to": 9
  }, {
    "from": 21,
    "label": "calls",
    "to": 12
  }, {
    "from": 47,
    "label": "calls",
    "to": 110
  }, {
    "from": 66,
    "label": "calls",
    "to": 110
  }, {
    "from": 86,
    "label": "calls",
    "to": 110
  }, {
    "from": 49,
    "label": "calls",
    "to": 105
  }, {
    "from": 49,
    "label": "calls",
    "to": 108
  }, {
    "from": 12,
    "label": "calls",
    "to": 129
  }, {
    "from": 49,
    "label": "calls",
    "to": 47
  }, {
    "from": 34,
    "label": "calls",
    "to": 34
  }, {
    "from": 34,
    "label": "calls",
    "to": 34
  }, {
    "from": 49,
    "label": "calls",
    "to": 119
  }, {
    "from": 34,
    "label": "calls",
    "to": 123
  }, {
    "from": 34,
    "label": "calls",
    "to": 123
  }, {
    "from": 49,
    "label": "calls",
    "to": 111
  }, {
    "from": 68,
    "label": "calls",
    "to": 104
  }, {
    "from": 73,
    "label": "calls",
    "to": 104
  }, {
    "from": 26,
    "label": "calls",
    "to": 131
  }, {
    "from": 96,
    "label": "calls",
    "to": 113
  }, {
    "from": 3,
    "label": "calls",
    "to": 128
  }, {
    "from": 3,
    "label": "calls",
    "to": 128
  }, {
    "from": 9,
    "label": "calls",
    "to": 128
  }, {
    "from": 96,
    "label": "calls",
    "to": 112
  }, {
    "from": 34,
    "label": "calls",
    "to": 126
  }, {
    "from": 34,
    "label": "calls",
    "to": 126
  }, {
    "from": 92,
    "label": "calls",
    "to": 126
  }, {
    "from": 92,
    "label": "calls",
    "to": 126
  }, {
    "from": 96,
    "label": "calls",
    "to": 130
  }, {
    "from": 14,
    "label": "calls",
    "to": 127
  }, {
    "from": 18,
    "label": "calls",
    "to": 127
  }, {
    "from": 92,
    "label": "calls",
    "to": 127
  }, {
    "from": 96,
    "label": "calls",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 96
  }, {
    "from": 96,
    "label": "declares",
    "to": 3
  }, {
    "from": 96,
    "label": "declares",
    "to": 9
  }, {
    "from": 96,
    "label": "declares",
    "to": 12
  }, {
    "from": 96,
    "label": "declares",
    "to": 14
  }, {
    "from": 96,
    "label": "declares",
    "to": 18
  }, {
    "from": 96,
    "label": "declares",
    "to": 21
  }, {
    "from": 96,
    "label": "declares",
    "to": 26
  }, {
    "from": 96,
    "label": "declares",
    "to": 31
  }, {
    "from": 96,
    "label": "declares",
    "to": 34
  }, {
    "from": 96,
    "label": "declares",
    "to": 41
  }, {
    "from": 96,
    "label": "declares",
    "to": 47
  }, {
    "from": 96,
    "label": "declares",
    "to": 49
  }, {
    "from": 96,
    "label": "declares",
    "to": 60
  }, {
    "from": 96,
    "label": "declares",
    "to": 66
  }, {
    "from": 96,
    "label": "declares",
    "to": 68
  }, {
    "from": 96,
    "label": "declares",
    "to": 73
  }, {
    "from": 96,
    "label": "declares",
    "to": 77
  }, {
    "from": 96,
    "label": "declares",
    "to": 82
  }, {
    "from": 96,
    "label": "declares",
    "to": 86
  }, {
    "from": 96,
    "label": "declares",
    "to": 92
  }, {
    "from": 97,
    "label": "calls",
    "to": 66
  }, {
    "from": 97,
    "label": "calls",
    "to": 66
  }, {
    "from": 97,
    "label": "calls",
    "to": 66
  }, {
    "from": 97,
    "label": "calls",
    "to": 66
  }, {
    "from": 97,
    "label": "calls",
    "to": 66
  }, {
    "from": 97,
    "label": "calls",
    "to": 66
  }, {
    "from": 97,
    "label": "calls",
    "to": 66
  }, {
    "from": 97,
    "label": "calls",
    "to": 66
  }, {
    "from": 98,
    "label": "calls",
    "to": 66
  }, {
    "from": 99,
    "label": "calls",
    "to": 66
  }, {
    "from": 99,
    "label": "calls",
    "to": 66
  }, {
    "from": 100,
    "label": "calls",
    "to": 66
  }, {
    "from": 100,
    "label": "calls",
    "to": 66
  }, {
    "from": 101,
    "label": "calls",
    "to": 66
  }, {
    "from": 102,
    "label": "calls",
    "to": 66
  }, {
    "from": 132,
    "label": "requires",
    "to": 1
  }, {
    "from": 133,
    "label": "requires",
    "to": 1
  }, {
    "from": 134,
    "label": "requires",
    "to": 1
  }, {
    "from": 135,
    "label": "requires",
    "to": 1
  }, {
    "from": 136,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 137
  }, {
    "from": 1,
    "label": "contains",
    "to": 138
  }, {
    "from": 137,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 137,
    "label": "initializes",
    "to": 141
  }, {
    "from": 137,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 137,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 137,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 137,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 137,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 151,
    "label": "assigns",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 151,
    "label": "assigns",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 151,
    "label": "assigns",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 1,
    "label": "provides",
    "to": 160
  }, {
    "from": 142,
    "label": "represents",
    "to": 161
  }, {
    "from": 160,
    "label": "provides",
    "to": 161
  }, {
    "from": 162,
    "label": "requires",
    "to": 1
  }, {
    "from": 163,
    "label": "requires",
    "to": 1
  }, {
    "from": 164,
    "label": "requires",
    "to": 1
  }, {
    "from": 165,
    "label": "requires",
    "to": 1
  }, {
    "from": 166,
    "label": "requires",
    "to": 1
  }, {
    "from": 167,
    "label": "requires",
    "to": 1
  }, {
    "from": 168,
    "label": "requires",
    "to": 1
  }, {
    "from": 169,
    "label": "requires",
    "to": 1
  }, {
    "from": 142,
    "label": "represents",
    "to": 170
  }, {
    "from": 171,
    "label": "requires",
    "to": 1
  }, {
    "from": 172,
    "label": "requires",
    "to": 1
  }, {
    "from": 173,
    "label": "requires",
    "to": 1
  }, {
    "from": 174,
    "label": "requires",
    "to": 1
  }, {
    "from": 175,
    "label": "requires",
    "to": 1
  }, {
    "from": 176,
    "label": "requires",
    "to": 1
  }, {
    "from": 177,
    "label": "requires",
    "to": 1
  }, {
    "from": 178,
    "label": "requires",
    "to": 1
  }, {
    "from": 179,
    "label": "requires",
    "to": 1
  }, {
    "from": 180,
    "label": "requires",
    "to": 1
  }, {
    "from": 181,
    "label": "requires",
    "to": 1
  }, {
    "from": 182,
    "label": "requires",
    "to": 1
  }, {
    "from": 142,
    "label": "contains",
    "to": 9
  }, {
    "from": 142,
    "label": "contains",
    "to": 12
  }, {
    "from": 142,
    "label": "contains",
    "to": 14
  }, {
    "from": 142,
    "label": "contains",
    "to": 18
  }, {
    "from": 142,
    "label": "contains",
    "to": 21
  }, {
    "from": 142,
    "label": "contains",
    "to": 26
  }, {
    "from": 142,
    "label": "contains",
    "to": 31
  }, {
    "from": 142,
    "label": "contains",
    "to": 34
  }, {
    "from": 142,
    "label": "contains",
    "to": 41
  }, {
    "from": 142,
    "label": "contains",
    "to": 47
  }, {
    "from": 142,
    "label": "contains",
    "to": 49
  }, {
    "from": 142,
    "label": "contains",
    "to": 60
  }, {
    "from": 142,
    "label": "contains",
    "to": 68
  }, {
    "from": 142,
    "label": "contains",
    "to": 73
  }, {
    "from": 142,
    "label": "contains",
    "to": 77
  }, {
    "from": 142,
    "label": "contains",
    "to": 82
  }, {
    "from": 142,
    "label": "contains",
    "to": 86
  }, {
    "from": 142,
    "label": "contains",
    "to": 92
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "helpers",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "function print(...)\r\n  local t = {}\r\n  for i = 1, select('#', ...) do\r\n    t[#t + 1] = tostring(select(i, ...))\r\n  end\r\n  io.stderr:write(table.concat(t, ' ') .. '\\n')\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for i = 1, select('#', ...) do\r\n    t[#t + 1] = tostring(select(i, ...))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 6,
    "text": "t[#t + 1] = tostring(select(i, ...))",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "io.stderr:write(table.concat(t, ' ') .. '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function helpers.pack(...) -- {{{1\r\n  return { n = select('#', ...), ... }\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function helpers.unpack(t) -- {{{1\r\n  return unpack(t, 1, t.n)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function helpers.message(s, ...) -- {{{1\r\n  io.stderr:write(string.format(s, ...))\r\n  io.stderr:flush()\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "io.stderr:write(string.format(s, ...))",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "io.stderr:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function helpers.warning(s, ...) -- {{{1\r\n  io.stderr:write(\"\\nWarning: \", string.format(s, ...))\r\n  io.stderr:flush()\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "io.stderr:write(\"\\nWarning: \", string.format(s, ...))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function helpers.soft_assert(tuple, extramsg) -- {{{1\r\n  local status, details = helpers.unpack(tuple)\r\n  if not status then\r\n    helpers.warning(\"Soft assertion failed with \\\"%s\\\"! (%s)\\n\", details, extramsg)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local status, details = helpers.unpack(tuple)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if not status then\r\n    helpers.warning(\"Soft assertion failed with \\\"%s\\\"! (%s)\\n\", details, extramsg)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "helpers.warning(\"Soft assertion failed with \\\"%s\\\"! (%s)\\n\", details, extramsg)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function helpers.try(body, errorhandler) -- {{{1\r\n  local status, value = xpcall(body, debug.traceback)\r\n  if status then return true end\r\n  errorhandler(value)\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local status, value = xpcall(body, debug.traceback)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if status then return true end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "errorhandler(value)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function helpers.filedefined() -- {{{1\r\n  local info = assert(debug.getinfo(2, 'S'))\r\n  return info.source:sub(2)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local info = assert(debug.getinfo(2, 'S'))",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function helpers.deepequal(a, b) -- {{{1\r\n  if type(a) ~= 'table' or type(b) ~= 'table' then\r\n    return a == b\r\n  else\r\n    for k, v in pairs(a) do\r\n      if not helpers.deepequal(v, b[k]) then\r\n        return false\r\n      end\r\n    end\r\n    for k, v in pairs(b) do\r\n      if not helpers.deepequal(v, a[k]) then\r\n        return false\r\n      end\r\n    end\r\n    return true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "if type(a) ~= 'table' or type(b) ~= 'table' then\r\n    return a == b\r\n  else\r\n    for k, v in pairs(a) do\r\n      if not helpers.deepequal(v, b[k]) then\r\n        return false\r\n      end\r\n    end\r\n    for k, v in pairs(b) do\r\n      if not helpers.deepequal(v, a[k]) then\r\n        return false\r\n      end\r\n    end\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "for k, v in pairs(a) do\r\n      if not helpers.deepequal(v, b[k]) then\r\n        return false\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "if not helpers.deepequal(v, b[k]) then\r\n        return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "for k, v in pairs(b) do\r\n      if not helpers.deepequal(v, a[k]) then\r\n        return false\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "if not helpers.deepequal(v, a[k]) then\r\n        return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function helpers.checktuple(expected, ...) -- {{{1\r\n  local received = helpers.pack(...)\r\n  assert(received.n == #expected)\r\n  for i = 1, #expected do assert(expected[i] == received[i]) end\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local received = helpers.pack(...)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "assert(received.n == #expected)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "for i = 1, #expected do assert(expected[i] == received[i]) end",
    "type": "statement:numericfor"
  }, {
    "id": 45,
    "text": "assert(expected[i] == received[i])",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function helpers.scriptpath(name) -- {{{1\r\n  return assert(apr.filepath_merge(testscripts, name))\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function helpers.ld_preload_trick(script) -- {{{1\r\n\r\n  -- XXX This hack is needed to make the tests pass on Ubuntu 10.04 and probably\r\n  -- also other versions of Ubuntu and Debian? The Lua/APR documentation for the\r\n  -- DBD module contains some notes about this, here's a direct link:\r\n  -- http://peterodding.com/code/lua/apr/docs/#debugging_dso_load_failed_errors\r\n\r\n  -- Include the libapr-1.so and libaprutil-1.so libraries in $LD_PRELOAD if\r\n  -- they exist in the usual Debian location.\r\n  local libs = apr.filepath_list_split(apr.env_get 'LD_PRELOAD' or '')\r\n  for _, libname in ipairs { '/usr/lib/libapr-1.so.0', '/usr/lib/libaprutil-1.so.0' } do\r\n    if apr.stat(libname, 'type') == 'file' then table.insert(libs, libname) end\r\n  end\r\n  apr.env_set('LD_PRELOAD', apr.filepath_list_merge(libs))\r\n\r\n  -- Now run the test in a child process where $LD_PRELOAD applies.\r\n  local child = assert(apr.proc_create 'lua')\r\n  assert(child:cmdtype_set 'shellcmd/env')\r\n  assert(child:exec { helpers.scriptpath(script) })\r\n  local dead, reason, code = assert(child:wait(true))\r\n  return reason == 'exit' and code == 0\r\n\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local libs = apr.filepath_list_split(apr.env_get 'LD_PRELOAD' or '')",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "for _, libname in ipairs { '/usr/lib/libapr-1.so.0', '/usr/lib/libaprutil-1.so.0' } do\r\n    if apr.stat(libname, 'type') == 'file' then table.insert(libs, libname) end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 52,
    "text": "if apr.stat(libname, 'type') == 'file' then table.insert(libs, libname) end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "table.insert(libs, libname)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "apr.env_set('LD_PRELOAD', apr.filepath_list_merge(libs))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local child = assert(apr.proc_create 'lua')",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "assert(child:cmdtype_set 'shellcmd/env')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert(child:exec { helpers.scriptpath(script) })",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "local dead, reason, code = assert(child:wait(true))",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function helpers.wait_for(signalfile, timeout) -- {{{1\r\n  local starttime = apr.time_now()\r\n  while apr.time_now() - starttime < timeout do\r\n    apr.sleep(0.25)\r\n    if apr.stat(signalfile, 'type') == 'file' then\r\n      return true\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local starttime = apr.time_now()",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "while apr.time_now() - starttime < timeout do\r\n    apr.sleep(0.25)\r\n    if apr.stat(signalfile, 'type') == 'file' then\r\n      return true\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 63,
    "text": "apr.sleep(0.25)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "if apr.stat(signalfile, 'type') == 'file' then\r\n      return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local function tmpname(tmpnum)\r\n  return apr.filepath_merge(tmpdir, 'lua-apr-tempfile-' .. tmpnum)\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function helpers.tmpname() -- {{{1\r\n  local file = tmpname(tmpnum)\r\n  apr.file_remove(file)\r\n  tmpnum = tmpnum + 1\r\n  return file\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local file = tmpname(tmpnum)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "apr.file_remove(file)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "tmpnum = tmpnum + 1",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function helpers.cleanup() -- {{{1\r\n  for i = 1, tmpnum do\r\n    apr.file_remove(tmpname(i))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "for i = 1, tmpnum do\r\n    apr.file_remove(tmpname(i))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 75,
    "text": "apr.file_remove(tmpname(i))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function helpers.readfile(path) -- {{{1\r\n  local handle = assert(io.open(path, 'r'))\r\n  local data = assert(handle:read '*all')\r\n  assert(handle:close())\r\n  return data\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "local handle = assert(io.open(path, 'r'))",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local data = assert(handle:read '*all')",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "assert(handle:close())",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function helpers.writefile(path, data) -- {{{1\r\n  local handle = assert(io.open(path, 'w'))\r\n  assert(handle:write(data))\r\n  assert(handle:close())\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local handle = assert(io.open(path, 'w'))",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "assert(handle:write(data))",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function helpers.writable(directory) -- {{{1\r\n  local entry = apr.filepath_merge(directory, 'io_dir_writable_check')\r\n  local status = pcall(helpers.writefile, entry, 'something')\r\n  if status then os.remove(entry) end\r\n  return status\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local entry = apr.filepath_merge(directory, 'io_dir_writable_check')",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local status = pcall(helpers.writefile, entry, 'something')",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if status then os.remove(entry) end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "os.remove(entry)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function helpers.formatvalue(v) -- {{{1\r\n  if type(v) == 'number' then\r\n    local s = string.format('%.99f', v)\r\n    return s:find '%.' and (s:gsub('0+$', '0')) or s\r\n  elseif type(v) == 'string' then\r\n    return '\"' .. v:gsub('[\\r\\n\"%z]', escapes) .. '\"'\r\n  else\r\n    return tostring(v)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "if type(v) == 'number' then\r\n    local s = string.format('%.99f', v)\r\n    return s:find '%.' and (s:gsub('0+$', '0')) or s\r\n  elseif type(v) == 'string' then\r\n    return '\"' .. v:gsub('[\\r\\n\"%z]', escapes) .. '\"'\r\n  else\r\n    return tostring(v)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "local s = string.format('%.99f', v)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "",
    "type": "function container"
  }, {
    "id": 97,
    "text": "",
    "type": "function container"
  }, {
    "id": 98,
    "text": "",
    "type": "function container"
  }, {
    "id": 99,
    "text": "",
    "type": "function container"
  }, {
    "id": 100,
    "text": "",
    "type": "function container"
  }, {
    "id": 101,
    "text": "",
    "type": "function container"
  }, {
    "id": 102,
    "text": "",
    "type": "function container"
  }, {
    "id": 103,
    "text": "time_now",
    "type": "global function"
  }, {
    "id": 104,
    "text": "file_remove",
    "type": "global function"
  }, {
    "id": 105,
    "text": "filepath_list_split",
    "type": "global function"
  }, {
    "id": 106,
    "text": "env_set",
    "type": "global function"
  }, {
    "id": 107,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 108,
    "text": "env_get",
    "type": "global function"
  }, {
    "id": 109,
    "text": "stat",
    "type": "global function"
  }, {
    "id": 110,
    "text": "filepath_merge",
    "type": "global function"
  }, {
    "id": 111,
    "text": "proc_create",
    "type": "global function"
  }, {
    "id": 112,
    "text": "filepath_parent",
    "type": "global function"
  }, {
    "id": 113,
    "text": "temp_dir_get",
    "type": "global function"
  }, {
    "id": 114,
    "text": "filepath_list_merge",
    "type": "global function"
  }, {
    "id": 115,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 116,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 117,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 118,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 119,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 120,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 121,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 122,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 123,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 124,
    "text": "open",
    "type": "global function"
  }, {
    "id": 125,
    "text": "errorhandler",
    "type": "global function"
  }, {
    "id": 126,
    "text": "type",
    "type": "global function"
  }, {
    "id": 127,
    "text": "format",
    "type": "global function"
  }, {
    "id": 128,
    "text": "select",
    "type": "global function"
  }, {
    "id": 129,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 130,
    "text": "require",
    "type": "global function"
  }, {
    "id": 131,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "variable container"
  }, {
    "id": 138,
    "text": "",
    "type": "require container"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "number"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "n/a"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 152,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 153,
    "text": "",
    "type": "string"
  }, {
    "id": 154,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 155,
    "text": "",
    "type": "string"
  }, {
    "id": 156,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 157,
    "text": "",
    "type": "string"
  }, {
    "id": 158,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 159,
    "text": "",
    "type": "string"
  }, {
    "id": 160,
    "text": "",
    "type": "interface container"
  }, {
    "id": 161,
    "text": "",
    "type": "interface"
  }, {
    "id": 162,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 167,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 169,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "interface"
  }, {
    "id": 171,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 173,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "require local variable"
  } ]
}