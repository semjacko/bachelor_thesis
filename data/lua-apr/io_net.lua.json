{
  "_filename": "io_net.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-apr/test/io_net.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "calls",
    "to": 32
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 41
  }, {
    "from": 27,
    "label": "calls",
    "to": 41
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 37
  }, {
    "from": 27,
    "label": "calls",
    "to": 29
  }, {
    "from": 27,
    "label": "calls",
    "to": 29
  }, {
    "from": 27,
    "label": "calls",
    "to": 29
  }, {
    "from": 27,
    "label": "calls",
    "to": 29
  }, {
    "from": 27,
    "label": "calls",
    "to": 40
  }, {
    "from": 27,
    "label": "calls",
    "to": 40
  }, {
    "from": 27,
    "label": "calls",
    "to": 38
  }, {
    "from": 27,
    "label": "calls",
    "to": 38
  }, {
    "from": 27,
    "label": "calls",
    "to": 31
  }, {
    "from": 27,
    "label": "calls",
    "to": 36
  }, {
    "from": 27,
    "label": "calls",
    "to": 36
  }, {
    "from": 27,
    "label": "calls",
    "to": 36
  }, {
    "from": 27,
    "label": "calls",
    "to": 30
  }, {
    "from": 27,
    "label": "calls",
    "to": 34
  }, {
    "from": 27,
    "label": "calls",
    "to": 28
  }, {
    "from": 27,
    "label": "calls",
    "to": 33
  }, {
    "from": 27,
    "label": "calls",
    "to": 42
  }, {
    "from": 27,
    "label": "calls",
    "to": 42
  }, {
    "from": 27,
    "label": "calls",
    "to": 42
  }, {
    "from": 27,
    "label": "calls",
    "to": 42
  }, {
    "from": 27,
    "label": "calls",
    "to": 39
  }, {
    "from": 27,
    "label": "calls",
    "to": 39
  }, {
    "from": 27,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "contains",
    "to": 27
  }, {
    "from": 27,
    "label": "declares",
    "to": 4
  }, {
    "from": 27,
    "label": "declares",
    "to": 15
  }, {
    "from": 27,
    "label": "declares",
    "to": 21
  }, {
    "from": 2,
    "label": "contains",
    "to": 43
  }, {
    "from": 2,
    "label": "contains",
    "to": 44
  }, {
    "from": 43,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 43,
    "label": "initializes",
    "to": 47
  }, {
    "from": 43,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 43,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 43,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 43,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 43,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 43,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 43,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 43,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 43,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 43,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 43,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 43,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 43,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 44,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "helpers",
    "type": "module"
  }, {
    "id": 2,
    "text": "io_net",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function tmpname(tmpnum)\r\n  return apr.filepath_merge(tmpdir, 'lua-apr-tempfile-' .. tmpnum)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function()\r\n  -- Load the Lua/APR binding.\r\n  local apr = require 'apr'\r\n  -- Convert file descriptor to socket.\r\n  local client = assert(apr.socket_create())\r\n  assert(client:fd_set(fd))\r\n  local msg = 'So does it expose file descriptors?'\r\n  assert(client:write(msg, '\\n'))\r\n  assert(msg:upper() == assert(client:read()))\r\n  -- Test tostring(socket).\r\n  assert(tostring(client):find '^socket %([x%x]+%)$')\r\n  assert(client:close())\r\n  assert(tostring(client):find '^socket %(closed%)$')\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local apr = require 'apr'",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local client = assert(apr.socket_create())",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "assert(client:fd_set(fd))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local msg = 'So does it expose file descriptors?'",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "assert(client:write(msg, '\\n'))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert(msg:upper() == assert(client:read()))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert(tostring(client):find '^socket %([x%x]+%)$')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert(client:close())",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert(tostring(client):find '^socket %(closed%)$')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function()\r\n  local client, data = assert(udp_socket:recvfrom())\r\n  assert(client.address == '127.0.0.1')\r\n  assert(client.port >= 1024)\r\n  assert(data == 'booyah!')\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local client, data = assert(udp_socket:recvfrom())",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "assert(client.address == '127.0.0.1')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert(client.port >= 1024)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert(data == 'booyah!')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function()\r\n  local apr = require 'apr'\r\n  local socket = assert(apr.socket_create 'udp')\r\n  assert(socket:connect('127.0.0.1', udp_port))\r\n  assert(socket:write 'booyah!')\r\n  assert(socket:close())\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local socket = assert(apr.socket_create 'udp')",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "assert(socket:connect('127.0.0.1', udp_port))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert(socket:write 'booyah!')",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert(socket:close())",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "",
    "type": "function container"
  }, {
    "id": 28,
    "text": "proc_create",
    "type": "global function"
  }, {
    "id": 29,
    "text": "socket_create",
    "type": "global function"
  }, {
    "id": 30,
    "text": "hostname_get",
    "type": "global function"
  }, {
    "id": 31,
    "text": "addr_to_host",
    "type": "global function"
  }, {
    "id": 32,
    "text": "warning",
    "type": "global function"
  }, {
    "id": 33,
    "text": "host_to_addr",
    "type": "global function"
  }, {
    "id": 34,
    "text": "scriptpath",
    "type": "global function"
  }, {
    "id": 35,
    "text": "wait_for",
    "type": "global function"
  }, {
    "id": 36,
    "text": "thread",
    "type": "global function"
  }, {
    "id": 37,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 38,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 39,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 40,
    "text": "random",
    "type": "global function"
  }, {
    "id": 41,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 42,
    "text": "require",
    "type": "global function"
  }, {
    "id": 43,
    "text": "",
    "type": "variable container"
  }, {
    "id": 44,
    "text": "",
    "type": "require container"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "boolean"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "require local variable"
  } ]
}