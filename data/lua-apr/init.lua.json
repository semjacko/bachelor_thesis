{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-apr/test/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 24
  }, {
    "from": 10,
    "label": "has",
    "to": 24
  }, {
    "from": 3,
    "label": "has",
    "to": 25
  }, {
    "from": 3,
    "label": "has",
    "to": 26
  }, {
    "from": 3,
    "label": "has",
    "to": 27
  }, {
    "from": 3,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "calls",
    "to": 33
  }, {
    "from": 29,
    "label": "calls",
    "to": 33
  }, {
    "from": 29,
    "label": "calls",
    "to": 33
  }, {
    "from": 29,
    "label": "calls",
    "to": 34
  }, {
    "from": 29,
    "label": "calls",
    "to": 35
  }, {
    "from": 29,
    "label": "calls",
    "to": 36
  }, {
    "from": 29,
    "label": "calls",
    "to": 36
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 37
  }, {
    "from": 29,
    "label": "calls",
    "to": 37
  }, {
    "from": 29,
    "label": "calls",
    "to": 32
  }, {
    "from": 29,
    "label": "calls",
    "to": 30
  }, {
    "from": 29,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "contains",
    "to": 29
  }, {
    "from": 29,
    "label": "declares",
    "to": 3
  }, {
    "from": 2,
    "label": "contains",
    "to": 38
  }, {
    "from": 2,
    "label": "contains",
    "to": 39
  }, {
    "from": 38,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 41,
    "label": "assigns",
    "to": 43
  }, {
    "from": 41,
    "label": "assigns",
    "to": 44
  }, {
    "from": 41,
    "label": "assigns",
    "to": 45
  }, {
    "from": 41,
    "label": "assigns",
    "to": 46
  }, {
    "from": 41,
    "label": "assigns",
    "to": 47
  }, {
    "from": 41,
    "label": "assigns",
    "to": 48
  }, {
    "from": 41,
    "label": "assigns",
    "to": 49
  }, {
    "from": 41,
    "label": "assigns",
    "to": 50
  }, {
    "from": 41,
    "label": "assigns",
    "to": 51
  }, {
    "from": 41,
    "label": "assigns",
    "to": 52
  }, {
    "from": 41,
    "label": "assigns",
    "to": 53
  }, {
    "from": 41,
    "label": "assigns",
    "to": 54
  }, {
    "from": 41,
    "label": "assigns",
    "to": 55
  }, {
    "from": 41,
    "label": "assigns",
    "to": 56
  }, {
    "from": 41,
    "label": "assigns",
    "to": 57
  }, {
    "from": 41,
    "label": "assigns",
    "to": 58
  }, {
    "from": 41,
    "label": "assigns",
    "to": 59
  }, {
    "from": 41,
    "label": "assigns",
    "to": 60
  }, {
    "from": 41,
    "label": "assigns",
    "to": 61
  }, {
    "from": 41,
    "label": "assigns",
    "to": 62
  }, {
    "from": 41,
    "label": "assigns",
    "to": 63
  }, {
    "from": 41,
    "label": "assigns",
    "to": 64
  }, {
    "from": 41,
    "label": "assigns",
    "to": 65
  }, {
    "from": 41,
    "label": "assigns",
    "to": 66
  }, {
    "from": 41,
    "label": "assigns",
    "to": 67
  }, {
    "from": 41,
    "label": "assigns",
    "to": 68
  }, {
    "from": 41,
    "label": "assigns",
    "to": 69
  }, {
    "from": 41,
    "label": "assigns",
    "to": 70
  }, {
    "from": 41,
    "label": "assigns",
    "to": 71
  }, {
    "from": 38,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 39,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 75
  }, {
    "from": 75,
    "label": "provides",
    "to": 76
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "helpers",
    "type": "module"
  }, {
    "id": 2,
    "text": "init",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n\r\n  local status, apr = pcall(require, 'apr')\r\n  if not status then\r\n    pcall(require, 'luarocks.require')\r\n    apr = require 'apr'\r\n  end\r\n  local helpers = require 'apr.test.helpers'\r\n\r\n  local success = true\r\n  for _, testname in ipairs(modules) do\r\n    local modname = modname .. '.' .. testname\r\n    package.loaded[modname] = nil\r\n    helpers.message(\"Running %s tests: \", testname)\r\n    local starttime = apr.time_now()\r\n    local status, result = pcall(require, modname)\r\n    if status and result ~= false then\r\n      -- All tests passed.\r\n      local elapsed = apr.time_now() - starttime\r\n      if elapsed >= 0.5 then\r\n        helpers.message(\"OK (%.2fs)\\n\", elapsed)\r\n      else\r\n        helpers.message \"OK\\n\"\r\n      end\r\n    elseif status then\r\n      -- Soft failure (anticipated).\r\n      helpers.message(\"Skipped!\\n\")\r\n    else\r\n      -- Hard failure.\r\n      helpers.message(\"Failed! (%s)\\n\", result)\r\n      success = false\r\n    end\r\n    package.loaded[modname] = nil\r\n    -- Garbage collect unreferenced objects before testing the next module.\r\n    collectgarbage 'collect'\r\n    collectgarbage 'collect'\r\n  end\r\n\r\n  -- Cleanup temporary files.\r\n  helpers.cleanup()\r\n\r\n  helpers.message \"Done!\\n\"\r\n\r\n  -- Exit the interpreter (started with lua -e \"require 'apr.test' ()\").\r\n  os.exit(success and 0 or 1)\r\n\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local status, apr = pcall(require, 'apr')",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if not status then\r\n    pcall(require, 'luarocks.require')\r\n    apr = require 'apr'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "pcall(require, 'luarocks.require')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "apr = require 'apr'",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "local helpers = require 'apr.test.helpers'",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local success = true",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for _, testname in ipairs(modules) do\r\n    local modname = modname .. '.' .. testname\r\n    package.loaded[modname] = nil\r\n    helpers.message(\"Running %s tests: \", testname)\r\n    local starttime = apr.time_now()\r\n    local status, result = pcall(require, modname)\r\n    if status and result ~= false then\r\n      -- All tests passed.\r\n      local elapsed = apr.time_now() - starttime\r\n      if elapsed >= 0.5 then\r\n        helpers.message(\"OK (%.2fs)\\n\", elapsed)\r\n      else\r\n        helpers.message \"OK\\n\"\r\n      end\r\n    elseif status then\r\n      -- Soft failure (anticipated).\r\n      helpers.message(\"Skipped!\\n\")\r\n    else\r\n      -- Hard failure.\r\n      helpers.message(\"Failed! (%s)\\n\", result)\r\n      success = false\r\n    end\r\n    package.loaded[modname] = nil\r\n    -- Garbage collect unreferenced objects before testing the next module.\r\n    collectgarbage 'collect'\r\n    collectgarbage 'collect'\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "local modname = modname .. '.' .. testname",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "package.loaded[modname] = nil",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "helpers.message(\"Running %s tests: \", testname)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "local starttime = apr.time_now()",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local status, result = pcall(require, modname)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if status and result ~= false then\r\n      -- All tests passed.\r\n      local elapsed = apr.time_now() - starttime\r\n      if elapsed >= 0.5 then\r\n        helpers.message(\"OK (%.2fs)\\n\", elapsed)\r\n      else\r\n        helpers.message \"OK\\n\"\r\n      end\r\n    elseif status then\r\n      -- Soft failure (anticipated).\r\n      helpers.message(\"Skipped!\\n\")\r\n    else\r\n      -- Hard failure.\r\n      helpers.message(\"Failed! (%s)\\n\", result)\r\n      success = false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local elapsed = apr.time_now() - starttime",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if elapsed >= 0.5 then\r\n        helpers.message(\"OK (%.2fs)\\n\", elapsed)\r\n      else\r\n        helpers.message \"OK\\n\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "helpers.message(\"OK (%.2fs)\\n\", elapsed)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "helpers.message \"OK\\n\"",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "helpers.message(\"Skipped!\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "helpers.message(\"Failed! (%s)\\n\", result)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "success = false",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "collectgarbage 'collect'",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "helpers.cleanup()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "helpers.message \"Done!\\n\"",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "os.exit(success and 0 or 1)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "",
    "type": "function container"
  }, {
    "id": 30,
    "text": "time_now",
    "type": "global function"
  }, {
    "id": 31,
    "text": "message",
    "type": "global function"
  }, {
    "id": 32,
    "text": "cleanup",
    "type": "global function"
  }, {
    "id": 33,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 34,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 35,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 36,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 37,
    "text": "require",
    "type": "global function"
  }, {
    "id": 38,
    "text": "",
    "type": "variable container"
  }, {
    "id": 39,
    "text": "",
    "type": "require container"
  }, {
    "id": 40,
    "text": "",
    "type": "local variable"
  }, {
    "id": 41,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 42,
    "text": "",
    "type": "string"
  }, {
    "id": 43,
    "text": "",
    "type": "string"
  }, {
    "id": 44,
    "text": "",
    "type": "string"
  }, {
    "id": 45,
    "text": "",
    "type": "string"
  }, {
    "id": 46,
    "text": "",
    "type": "string"
  }, {
    "id": 47,
    "text": "",
    "type": "string"
  }, {
    "id": 48,
    "text": "",
    "type": "string"
  }, {
    "id": 49,
    "text": "",
    "type": "string"
  }, {
    "id": 50,
    "text": "",
    "type": "string"
  }, {
    "id": 51,
    "text": "",
    "type": "string"
  }, {
    "id": 52,
    "text": "",
    "type": "string"
  }, {
    "id": 53,
    "text": "",
    "type": "string"
  }, {
    "id": 54,
    "text": "",
    "type": "string"
  }, {
    "id": 55,
    "text": "",
    "type": "string"
  }, {
    "id": 56,
    "text": "",
    "type": "string"
  }, {
    "id": 57,
    "text": "",
    "type": "string"
  }, {
    "id": 58,
    "text": "",
    "type": "string"
  }, {
    "id": 59,
    "text": "",
    "type": "string"
  }, {
    "id": 60,
    "text": "",
    "type": "string"
  }, {
    "id": 61,
    "text": "",
    "type": "string"
  }, {
    "id": 62,
    "text": "",
    "type": "string"
  }, {
    "id": 63,
    "text": "",
    "type": "string"
  }, {
    "id": 64,
    "text": "",
    "type": "string"
  }, {
    "id": 65,
    "text": "",
    "type": "string"
  }, {
    "id": 66,
    "text": "",
    "type": "string"
  }, {
    "id": 67,
    "text": "",
    "type": "string"
  }, {
    "id": 68,
    "text": "",
    "type": "string"
  }, {
    "id": 69,
    "text": "",
    "type": "string"
  }, {
    "id": 70,
    "text": "",
    "type": "string"
  }, {
    "id": 71,
    "text": "",
    "type": "string"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "symbol"
  }, {
    "id": 74,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "interface container"
  }, {
    "id": 76,
    "text": "",
    "type": "interface"
  } ]
}