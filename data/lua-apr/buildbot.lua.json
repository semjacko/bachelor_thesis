{
  "_filename": "buildbot.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-apr/etc/buildbot.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 17,
    "label": "has",
    "to": 26
  }, {
    "from": 17,
    "label": "has",
    "to": 27
  }, {
    "from": 17,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 29,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 24
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 50,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 8
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 59,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 19
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 8
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 19
  }, {
    "from": 83,
    "label": "has",
    "to": 20
  }, {
    "from": 83,
    "label": "has",
    "to": 21
  }, {
    "from": 83,
    "label": "has",
    "to": 22
  }, {
    "from": 83,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 83,
    "label": "has",
    "to": 25
  }, {
    "from": 83,
    "label": "has",
    "to": 26
  }, {
    "from": 83,
    "label": "has",
    "to": 27
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 3,
    "label": "calls",
    "to": 99
  }, {
    "from": 29,
    "label": "calls",
    "to": 89
  }, {
    "from": 41,
    "label": "calls",
    "to": 89
  }, {
    "from": 45,
    "label": "calls",
    "to": 89
  }, {
    "from": 45,
    "label": "calls",
    "to": 89
  }, {
    "from": 85,
    "label": "calls",
    "to": 100
  }, {
    "from": 17,
    "label": "calls",
    "to": 100
  }, {
    "from": 29,
    "label": "calls",
    "to": 100
  }, {
    "from": 29,
    "label": "calls",
    "to": 100
  }, {
    "from": 41,
    "label": "calls",
    "to": 100
  }, {
    "from": 45,
    "label": "calls",
    "to": 100
  }, {
    "from": 50,
    "label": "calls",
    "to": 100
  }, {
    "from": 50,
    "label": "calls",
    "to": 100
  }, {
    "from": 50,
    "label": "calls",
    "to": 100
  }, {
    "from": 50,
    "label": "calls",
    "to": 100
  }, {
    "from": 50,
    "label": "calls",
    "to": 100
  }, {
    "from": 59,
    "label": "calls",
    "to": 100
  }, {
    "from": 59,
    "label": "calls",
    "to": 100
  }, {
    "from": 59,
    "label": "calls",
    "to": 100
  }, {
    "from": 59,
    "label": "calls",
    "to": 100
  }, {
    "from": 59,
    "label": "calls",
    "to": 100
  }, {
    "from": 72,
    "label": "calls",
    "to": 100
  }, {
    "from": 72,
    "label": "calls",
    "to": 100
  }, {
    "from": 72,
    "label": "calls",
    "to": 100
  }, {
    "from": 29,
    "label": "calls",
    "to": 101
  }, {
    "from": 17,
    "label": "calls",
    "to": 102
  }, {
    "from": 17,
    "label": "calls",
    "to": 102
  }, {
    "from": 50,
    "label": "calls",
    "to": 102
  }, {
    "from": 17,
    "label": "calls",
    "to": 50
  }, {
    "from": 17,
    "label": "calls",
    "to": 86
  }, {
    "from": 17,
    "label": "calls",
    "to": 86
  }, {
    "from": 72,
    "label": "calls",
    "to": 86
  }, {
    "from": 72,
    "label": "calls",
    "to": 86
  }, {
    "from": 17,
    "label": "calls",
    "to": 103
  }, {
    "from": 50,
    "label": "calls",
    "to": 103
  }, {
    "from": 17,
    "label": "calls",
    "to": 29
  }, {
    "from": 85,
    "label": "calls",
    "to": 93
  }, {
    "from": 17,
    "label": "calls",
    "to": 93
  }, {
    "from": 59,
    "label": "calls",
    "to": 94
  }, {
    "from": 41,
    "label": "calls",
    "to": 97
  }, {
    "from": 29,
    "label": "calls",
    "to": 96
  }, {
    "from": 85,
    "label": "calls",
    "to": 106
  }, {
    "from": 85,
    "label": "calls",
    "to": 98
  }, {
    "from": 3,
    "label": "calls",
    "to": 95
  }, {
    "from": 17,
    "label": "calls",
    "to": 104
  }, {
    "from": 79,
    "label": "calls",
    "to": 105
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 59,
    "label": "calls",
    "to": 17
  }, {
    "from": 45,
    "label": "calls",
    "to": 41
  }, {
    "from": 3,
    "label": "calls",
    "to": 79
  }, {
    "from": 17,
    "label": "calls",
    "to": 79
  }, {
    "from": 59,
    "label": "calls",
    "to": 79
  }, {
    "from": 59,
    "label": "calls",
    "to": 79
  }, {
    "from": 59,
    "label": "calls",
    "to": 79
  }, {
    "from": 72,
    "label": "calls",
    "to": 79
  }, {
    "from": 72,
    "label": "calls",
    "to": 79
  }, {
    "from": 29,
    "label": "calls",
    "to": 45
  }, {
    "from": 29,
    "label": "calls",
    "to": 45
  }, {
    "from": 45,
    "label": "calls",
    "to": 90
  }, {
    "from": 59,
    "label": "calls",
    "to": 92
  }, {
    "from": 3,
    "label": "calls",
    "to": 72
  }, {
    "from": 50,
    "label": "calls",
    "to": 88
  }, {
    "from": 50,
    "label": "calls",
    "to": 88
  }, {
    "from": 50,
    "label": "calls",
    "to": 88
  }, {
    "from": 45,
    "label": "calls",
    "to": 87
  }, {
    "from": 3,
    "label": "calls",
    "to": 59
  }, {
    "from": 85,
    "label": "calls",
    "to": 3
  }, {
    "from": 59,
    "label": "calls",
    "to": 91
  }, {
    "from": 72,
    "label": "calls",
    "to": 91
  }, {
    "from": 1,
    "label": "contains",
    "to": 85
  }, {
    "from": 85,
    "label": "declares",
    "to": 3
  }, {
    "from": 85,
    "label": "declares",
    "to": 17
  }, {
    "from": 85,
    "label": "declares",
    "to": 29
  }, {
    "from": 85,
    "label": "declares",
    "to": 41
  }, {
    "from": 85,
    "label": "declares",
    "to": 45
  }, {
    "from": 85,
    "label": "declares",
    "to": 50
  }, {
    "from": 85,
    "label": "declares",
    "to": 59
  }, {
    "from": 85,
    "label": "declares",
    "to": 72
  }, {
    "from": 85,
    "label": "declares",
    "to": 79
  }, {
    "from": 85,
    "label": "declares",
    "to": 83
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 1,
    "label": "contains",
    "to": 108
  }, {
    "from": 108,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "buildbot",
    "type": "module"
  }, {
    "id": 2,
    "text": "apr",
    "type": "module"
  }, {
    "id": 3,
    "text": "function main() -- {{{1\r\n  local opts, args = apr.getopt(usage)\r\n  local did_something = false\r\n  if opts['local'] then\r\n    for line in local_build() do\r\n      printf('%s', line)\r\n    end\r\n    did_something = true\r\n  end\r\n  if opts.remote then\r\n    remote_build(opts.remote, serverport or opts.port)\r\n    did_something = true\r\n  end\r\n  if opts.server then\r\n    start_server(serverport or opts.port)\r\n    did_something = true\r\n  end\r\n  if not did_something then\r\n    io.write(usage)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local opts, args = apr.getopt(usage)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local did_something = false",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if opts['local'] then\r\n    for line in local_build() do\r\n      printf('%s', line)\r\n    end\r\n    did_something = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "for line in local_build() do\r\n      printf('%s', line)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "printf('%s', line)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "did_something = true",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if opts.remote then\r\n    remote_build(opts.remote, serverport or opts.port)\r\n    did_something = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "remote_build(opts.remote, serverport or opts.port)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "if opts.server then\r\n    start_server(serverport or opts.port)\r\n    did_something = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "start_server(serverport or opts.port)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "if not did_something then\r\n    io.write(usage)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "io.write(usage)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function local_build() -- {{{1\r\n  -- Create a binary for the current platform using a makefile.\r\n  return coroutine.wrap(function()\r\n    local started = apr.time_now()\r\n    local platform = apr.platform_get()\r\n    coroutine.yield(\"Building on \" .. platform .. \" ..\")\r\n    local build = assert(io.popen(platform ~= 'WIN32' and 'make --no-print-directory 2>&1'\r\n        or 'nmake /nologo /f Makefile.win 2>&1'))\r\n    for line in build:lines() do\r\n      coroutine.yield(line)\r\n    end\r\n    create_env()\r\n    run_tests()\r\n    printf(\"\\nFinished local build in %.2f seconds!\\n\",\r\n        apr.time_now() - started)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 19,
    "text": "local started = apr.time_now()",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local platform = apr.platform_get()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "coroutine.yield(\"Building on \" .. platform .. \" ..\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local build = assert(io.popen(platform ~= 'WIN32' and 'make --no-print-directory 2>&1'\r\n        or 'nmake /nologo /f Makefile.win 2>&1'))",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for line in build:lines() do\r\n      coroutine.yield(line)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "coroutine.yield(line)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "create_env()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "run_tests()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "printf(\"\\nFinished local build in %.2f seconds!\\n\",\r\n        apr.time_now() - started)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function create_env() -- {{{1\r\n  -- Create or update the virtual environment.\r\n  for source, target in pairs(buildfiles) do\r\n    source = projectdir .. '/' .. source\r\n    target = builddir .. '/' .. target\r\n    if apr.stat(source, 'type') ~= 'directory' then\r\n      copy_file(source, target)\r\n    else\r\n      local directory = assert(apr.dir_open(source))\r\n      for entry in directory:entries 'name' do\r\n        if entry:find '%.lua$' then\r\n          copy_file(source .. '/' .. entry, target .. '/' .. entry)\r\n        end\r\n      end\r\n      assert(directory:close())\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "for source, target in pairs(buildfiles) do\r\n    source = projectdir .. '/' .. source\r\n    target = builddir .. '/' .. target\r\n    if apr.stat(source, 'type') ~= 'directory' then\r\n      copy_file(source, target)\r\n    else\r\n      local directory = assert(apr.dir_open(source))\r\n      for entry in directory:entries 'name' do\r\n        if entry:find '%.lua$' then\r\n          copy_file(source .. '/' .. entry, target .. '/' .. entry)\r\n        end\r\n      end\r\n      assert(directory:close())\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "source = projectdir .. '/' .. source",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "target = builddir .. '/' .. target",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if apr.stat(source, 'type') ~= 'directory' then\r\n      copy_file(source, target)\r\n    else\r\n      local directory = assert(apr.dir_open(source))\r\n      for entry in directory:entries 'name' do\r\n        if entry:find '%.lua$' then\r\n          copy_file(source .. '/' .. entry, target .. '/' .. entry)\r\n        end\r\n      end\r\n      assert(directory:close())\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "copy_file(source, target)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "local directory = assert(apr.dir_open(source))",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "for entry in directory:entries 'name' do\r\n        if entry:find '%.lua$' then\r\n          copy_file(source .. '/' .. entry, target .. '/' .. entry)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "if entry:find '%.lua$' then\r\n          copy_file(source .. '/' .. entry, target .. '/' .. entry)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "copy_file(source .. '/' .. entry, target .. '/' .. entry)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert(directory:close())",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function create_dir(path) -- {{{2\r\n  -- Create directories in virtual environment automatically.\r\n  if apr.stat(path, 'type') ~= 'directory' then\r\n    assert(apr.dir_make_recursive(path))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "if apr.stat(path, 'type') ~= 'directory' then\r\n    assert(apr.dir_make_recursive(path))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "assert(apr.dir_make_recursive(path))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function copy_file(source, target) -- {{{2\r\n  -- Copy changed files to the virtual environment.\r\n  if apr.stat(source, 'mtime') ~= apr.stat(target, 'mtime') then\r\n    create_dir(apr.filepath_parent(target))\r\n    assert(apr.file_copy(source, target))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if apr.stat(source, 'mtime') ~= apr.stat(target, 'mtime') then\r\n    create_dir(apr.filepath_parent(target))\r\n    assert(apr.file_copy(source, target))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "create_dir(apr.filepath_parent(target))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert(apr.file_copy(source, target))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function run_tests() -- {{{1\r\n  -- Run the test suite in the virtual environment.\r\n  local pathsep = package.config:sub(3, 3)\r\n  assert(apr.env_set('LUA_PATH', builddir .. '/?.lua' .. pathsep .. builddir .. '/?/init.lua'))\r\n  assert(apr.env_set('LUA_CPATH', builddir .. '/?.' .. libext))\r\n  assert(apr.env_set('LD_PRELOAD', '/lib/libSegFault.so'))\r\n  local testsuite = assert(io.popen [[ lua -e \"require 'apr.test' ()\" 2>&1 ]])\r\n  for line in testsuite:lines() do\r\n    coroutine.yield(line)\r\n  end\r\n  assert(testsuite:close())\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local pathsep = package.config:sub(3, 3)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "assert(apr.env_set('LUA_PATH', builddir .. '/?.lua' .. pathsep .. builddir .. '/?/init.lua'))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert(apr.env_set('LUA_CPATH', builddir .. '/?.' .. libext))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert(apr.env_set('LD_PRELOAD', '/lib/libSegFault.so'))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local testsuite = assert(io.popen [[ lua -e \"require 'apr.test' ()\" 2>&1 ]])",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for line in testsuite:lines() do\r\n    coroutine.yield(line)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "assert(testsuite:close())",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function start_server(port) -- {{{1\r\n  -- Open a TCP server socket and wait for commands from another build bot.\r\n  local server = assert(apr.socket_create('tcp', 'inet'))\r\n  local localhost = apr.host_to_addr(apr.hostname_get())\r\n  assert(server:bind('*', port))\r\n  assert(server:listen(1))\r\n  while true do\r\n    printf(\"Build bot listening on %s:%i ..\", localhost, port)\r\n    local client = assert(server:accept())\r\n    for line in local_build() do\r\n      printf('%s', line)\r\n      client:write(line, '\\n')\r\n    end\r\n    assert(client:close())\r\n    printf \"Finished build ..\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local server = assert(apr.socket_create('tcp', 'inet'))",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local localhost = apr.host_to_addr(apr.hostname_get())",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "assert(server:bind('*', port))",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert(server:listen(1))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "while true do\r\n    printf(\"Build bot listening on %s:%i ..\", localhost, port)\r\n    local client = assert(server:accept())\r\n    for line in local_build() do\r\n      printf('%s', line)\r\n      client:write(line, '\\n')\r\n    end\r\n    assert(client:close())\r\n    printf \"Finished build ..\"\r\n  end",
    "type": "statement:while"
  }, {
    "id": 65,
    "text": "printf(\"Build bot listening on %s:%i ..\", localhost, port)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "local client = assert(server:accept())",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "for line in local_build() do\r\n      printf('%s', line)\r\n      client:write(line, '\\n')\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 68,
    "text": "client:write(line, '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert(client:close())",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "printf \"Finished build ..\"",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function remote_build(host, port) -- {{{1\r\n  -- Command a remote build bot to perform a build and report its results.\r\n  local started = apr.time_now()\r\n  local socket = assert(apr.socket_create('tcp', 'inet'))\r\n  assert(socket:connect(host, port))\r\n  for line in socket:lines() do\r\n    printf('%s', line)\r\n  end\r\n  assert(socket:close())\r\n  printf(\"\\nFinished remote build in %.2f seconds!\\n\",\r\n      apr.time_now() - started)\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "local socket = assert(apr.socket_create('tcp', 'inet'))",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "assert(socket:connect(host, port))",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "for line in socket:lines() do\r\n    printf('%s', line)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 76,
    "text": "assert(socket:close())",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "printf(\"\\nFinished remote build in %.2f seconds!\\n\",\r\n      apr.time_now() - started)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function printf(...) -- {{{1\r\n  io.stderr:write(string.format(...), '\\n')\r\n  io.stderr:flush()\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "io.stderr:write(string.format(...), '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "io.stderr:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function()\r\n    local started = apr.time_now()\r\n    local platform = apr.platform_get()\r\n    coroutine.yield(\"Building on \" .. platform .. \" ..\")\r\n    local build = assert(io.popen(platform ~= 'WIN32' and 'make --no-print-directory 2>&1'\r\n        or 'nmake /nologo /f Makefile.win 2>&1'))\r\n    for line in build:lines() do\r\n      coroutine.yield(line)\r\n    end\r\n    create_env()\r\n    run_tests()\r\n    printf(\"\\nFinished local build in %.2f seconds!\\n\",\r\n        apr.time_now() - started)\r\n  end",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "",
    "type": "function container"
  }, {
    "id": 86,
    "text": "time_now",
    "type": "global function"
  }, {
    "id": 87,
    "text": "file_copy",
    "type": "global function"
  }, {
    "id": 88,
    "text": "env_set",
    "type": "global function"
  }, {
    "id": 89,
    "text": "stat",
    "type": "global function"
  }, {
    "id": 90,
    "text": "filepath_parent",
    "type": "global function"
  }, {
    "id": 91,
    "text": "socket_create",
    "type": "global function"
  }, {
    "id": 92,
    "text": "hostname_get",
    "type": "global function"
  }, {
    "id": 93,
    "text": "platform_get",
    "type": "global function"
  }, {
    "id": 94,
    "text": "host_to_addr",
    "type": "global function"
  }, {
    "id": 95,
    "text": "getopt",
    "type": "global function"
  }, {
    "id": 96,
    "text": "dir_open",
    "type": "global function"
  }, {
    "id": 97,
    "text": "dir_make_recursive",
    "type": "global function"
  }, {
    "id": 98,
    "text": "filepath_get",
    "type": "global function"
  }, {
    "id": 99,
    "text": "write",
    "type": "global function"
  }, {
    "id": 100,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 101,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 102,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 103,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 104,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 105,
    "text": "format",
    "type": "global function"
  }, {
    "id": 106,
    "text": "require",
    "type": "global function"
  }, {
    "id": 107,
    "text": "",
    "type": "variable container"
  }, {
    "id": 108,
    "text": "",
    "type": "require container"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  } ]
}