{
  "_filename": "docs.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-apr/etc/docs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 3
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 3
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 54,
    "label": "has",
    "to": 62
  }, {
    "from": 54,
    "label": "has",
    "to": 63
  }, {
    "from": 54,
    "label": "has",
    "to": 64
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 66,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 79,
    "label": "has",
    "to": 3
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 94,
    "label": "has",
    "to": 98
  }, {
    "from": 94,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 89,
    "label": "has",
    "to": 103
  }, {
    "from": 89,
    "label": "has",
    "to": 104
  }, {
    "from": 89,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 88,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 3
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 67
  }, {
    "from": 112,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 83
  }, {
    "from": 114,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 114,
    "label": "has",
    "to": 3
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "calls",
    "to": 20
  }, {
    "from": 118,
    "label": "calls",
    "to": 20
  }, {
    "from": 79,
    "label": "calls",
    "to": 124
  }, {
    "from": 118,
    "label": "calls",
    "to": 124
  }, {
    "from": 118,
    "label": "calls",
    "to": 124
  }, {
    "from": 118,
    "label": "calls",
    "to": 18
  }, {
    "from": 118,
    "label": "calls",
    "to": 18
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 118,
    "label": "calls",
    "to": 120
  }, {
    "from": 36,
    "label": "calls",
    "to": 120
  }, {
    "from": 66,
    "label": "calls",
    "to": 128
  }, {
    "from": 66,
    "label": "calls",
    "to": 128
  }, {
    "from": 66,
    "label": "calls",
    "to": 128
  }, {
    "from": 118,
    "label": "calls",
    "to": 127
  }, {
    "from": 88,
    "label": "calls",
    "to": 53
  }, {
    "from": 118,
    "label": "calls",
    "to": 121
  }, {
    "from": 15,
    "label": "calls",
    "to": 122
  }, {
    "from": 42,
    "label": "calls",
    "to": 122
  }, {
    "from": 79,
    "label": "calls",
    "to": 122
  }, {
    "from": 118,
    "label": "calls",
    "to": 122
  }, {
    "from": 118,
    "label": "calls",
    "to": 122
  }, {
    "from": 118,
    "label": "calls",
    "to": 122
  }, {
    "from": 88,
    "label": "calls",
    "to": 122
  }, {
    "from": 88,
    "label": "calls",
    "to": 122
  }, {
    "from": 118,
    "label": "calls",
    "to": 130
  }, {
    "from": 118,
    "label": "calls",
    "to": 36
  }, {
    "from": 79,
    "label": "calls",
    "to": 45
  }, {
    "from": 118,
    "label": "calls",
    "to": 45
  }, {
    "from": 118,
    "label": "calls",
    "to": 45
  }, {
    "from": 118,
    "label": "calls",
    "to": 45
  }, {
    "from": 88,
    "label": "calls",
    "to": 45
  }, {
    "from": 118,
    "label": "calls",
    "to": 45
  }, {
    "from": 118,
    "label": "calls",
    "to": 110
  }, {
    "from": 118,
    "label": "calls",
    "to": 110
  }, {
    "from": 118,
    "label": "calls",
    "to": 5
  }, {
    "from": 118,
    "label": "calls",
    "to": 5
  }, {
    "from": 66,
    "label": "calls",
    "to": 131
  }, {
    "from": 118,
    "label": "calls",
    "to": 129
  }, {
    "from": 5,
    "label": "calls",
    "to": 123
  }, {
    "from": 118,
    "label": "calls",
    "to": 123
  }, {
    "from": 118,
    "label": "calls",
    "to": 123
  }, {
    "from": 118,
    "label": "calls",
    "to": 123
  }, {
    "from": 118,
    "label": "calls",
    "to": 22
  }, {
    "from": 118,
    "label": "calls",
    "to": 15
  }, {
    "from": 118,
    "label": "calls",
    "to": 15
  }, {
    "from": 79,
    "label": "calls",
    "to": 66
  }, {
    "from": 36,
    "label": "calls",
    "to": 125
  }, {
    "from": 88,
    "label": "calls",
    "to": 132
  }, {
    "from": 118,
    "label": "calls",
    "to": 126
  }, {
    "from": 118,
    "label": "calls",
    "to": 126
  }, {
    "from": 118,
    "label": "calls",
    "to": 126
  }, {
    "from": 88,
    "label": "calls",
    "to": 126
  }, {
    "from": 118,
    "label": "calls",
    "to": 126
  }, {
    "from": 88,
    "label": "calls",
    "to": 79
  }, {
    "from": 118,
    "label": "calls",
    "to": 79
  }, {
    "from": 5,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 20,
    "label": "calls",
    "to": 2
  }, {
    "from": 118,
    "label": "calls",
    "to": 2
  }, {
    "from": 118,
    "label": "calls",
    "to": 2
  }, {
    "from": 118,
    "label": "calls",
    "to": 2
  }, {
    "from": 118,
    "label": "calls",
    "to": 2
  }, {
    "from": 118,
    "label": "calls",
    "to": 2
  }, {
    "from": 118,
    "label": "calls",
    "to": 50
  }, {
    "from": 88,
    "label": "calls",
    "to": 50
  }, {
    "from": 118,
    "label": "calls",
    "to": 119
  }, {
    "from": 118,
    "label": "calls",
    "to": 88
  }, {
    "from": 1,
    "label": "contains",
    "to": 118
  }, {
    "from": 118,
    "label": "declares",
    "to": 2
  }, {
    "from": 118,
    "label": "declares",
    "to": 5
  }, {
    "from": 118,
    "label": "declares",
    "to": 15
  }, {
    "from": 118,
    "label": "declares",
    "to": 18
  }, {
    "from": 118,
    "label": "declares",
    "to": 20
  }, {
    "from": 118,
    "label": "declares",
    "to": 22
  }, {
    "from": 118,
    "label": "declares",
    "to": 36
  }, {
    "from": 118,
    "label": "declares",
    "to": 42
  }, {
    "from": 118,
    "label": "declares",
    "to": 45
  }, {
    "from": 118,
    "label": "declares",
    "to": 50
  }, {
    "from": 118,
    "label": "declares",
    "to": 53
  }, {
    "from": 118,
    "label": "declares",
    "to": 66
  }, {
    "from": 118,
    "label": "declares",
    "to": 79
  }, {
    "from": 118,
    "label": "declares",
    "to": 88
  }, {
    "from": 118,
    "label": "declares",
    "to": 108
  }, {
    "from": 118,
    "label": "declares",
    "to": 110
  }, {
    "from": 118,
    "label": "declares",
    "to": 112
  }, {
    "from": 118,
    "label": "declares",
    "to": 114
  }, {
    "from": 118,
    "label": "declares",
    "to": 116
  }, {
    "from": 1,
    "label": "contains",
    "to": 133
  }, {
    "from": 1,
    "label": "contains",
    "to": 134
  }, {
    "from": 133,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 133,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 133,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 133,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 133,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 144,
    "label": "assigns",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 144,
    "label": "assigns",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 144,
    "label": "assigns",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 133,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 133,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 133,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 133,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 133,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 164,
    "label": "assigns",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 164,
    "label": "assigns",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 164,
    "label": "assigns",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 164,
    "label": "assigns",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 164,
    "label": "assigns",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 164,
    "label": "assigns",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 164,
    "label": "assigns",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 164,
    "label": "assigns",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 164,
    "label": "assigns",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 164,
    "label": "assigns",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 164,
    "label": "assigns",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 164,
    "label": "assigns",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 164,
    "label": "assigns",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 164,
    "label": "assigns",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 164,
    "label": "assigns",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 164,
    "label": "assigns",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 164,
    "label": "assigns",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 164,
    "label": "assigns",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 164,
    "label": "assigns",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 164,
    "label": "assigns",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 164,
    "label": "assigns",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 164,
    "label": "assigns",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 164,
    "label": "assigns",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 164,
    "label": "assigns",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 164,
    "label": "assigns",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 164,
    "label": "assigns",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 164,
    "label": "assigns",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 164,
    "label": "assigns",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 164,
    "label": "assigns",
    "to": 223
  }, {
    "from": 223,
    "label": "assigns",
    "to": 224
  }, {
    "from": 164,
    "label": "assigns",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 164,
    "label": "assigns",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 164,
    "label": "assigns",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 164,
    "label": "assigns",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 164,
    "label": "assigns",
    "to": 233
  }, {
    "from": 233,
    "label": "assigns",
    "to": 234
  }, {
    "from": 164,
    "label": "assigns",
    "to": 235
  }, {
    "from": 235,
    "label": "assigns",
    "to": 236
  }, {
    "from": 164,
    "label": "assigns",
    "to": 237
  }, {
    "from": 237,
    "label": "assigns",
    "to": 238
  }, {
    "from": 164,
    "label": "assigns",
    "to": 239
  }, {
    "from": 239,
    "label": "assigns",
    "to": 240
  }, {
    "from": 164,
    "label": "assigns",
    "to": 241
  }, {
    "from": 241,
    "label": "assigns",
    "to": 242
  }, {
    "from": 164,
    "label": "assigns",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 164,
    "label": "assigns",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 164,
    "label": "assigns",
    "to": 247
  }, {
    "from": 247,
    "label": "assigns",
    "to": 248
  }, {
    "from": 164,
    "label": "assigns",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 164,
    "label": "assigns",
    "to": 251
  }, {
    "from": 251,
    "label": "assigns",
    "to": 252
  }, {
    "from": 164,
    "label": "assigns",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 164,
    "label": "assigns",
    "to": 255
  }, {
    "from": 255,
    "label": "assigns",
    "to": 256
  }, {
    "from": 164,
    "label": "assigns",
    "to": 257
  }, {
    "from": 257,
    "label": "assigns",
    "to": 258
  }, {
    "from": 164,
    "label": "assigns",
    "to": 259
  }, {
    "from": 259,
    "label": "assigns",
    "to": 260
  }, {
    "from": 164,
    "label": "assigns",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 164,
    "label": "assigns",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 164,
    "label": "assigns",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 133,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "assigns",
    "to": 268
  }, {
    "from": 268,
    "label": "assigns",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 268,
    "label": "assigns",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 268,
    "label": "assigns",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 268,
    "label": "assigns",
    "to": 275
  }, {
    "from": 275,
    "label": "assigns",
    "to": 276
  }, {
    "from": 133,
    "label": "initializes",
    "to": 277
  }, {
    "from": 133,
    "label": "initializes",
    "to": 278
  }, {
    "from": 133,
    "label": "initializes",
    "to": 279
  }, {
    "from": 133,
    "label": "initializes",
    "to": 280
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "docs",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function trim(s)\r\n  return s:match '^%s*(.-)%s*$'\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function getmodule(name, file, header)\r\n  local key = name:lower()\r\n  local value = modules[key]\r\n  if not value then\r\n    local metadata, newheader = (header  .. '\\n\\n'):match '\\n\\n(.-)\\n\\n(.-)$' -- strip metadata\r\n    header = (newheader or ''):find '%S' and trim(newheader) or nil\r\n    value = {name=name, file=file, header=header, functions={}}\r\n    modules[key] = value\r\n    table.insert(sorted_modules, value)\r\n  end\r\n  return value\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local key = name:lower()",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local value = modules[key]",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not value then\r\n    local metadata, newheader = (header  .. '\\n\\n'):match '\\n\\n(.-)\\n\\n(.-)$' -- strip metadata\r\n    header = (newheader or ''):find '%S' and trim(newheader) or nil\r\n    value = {name=name, file=file, header=header, functions={}}\r\n    modules[key] = value\r\n    table.insert(sorted_modules, value)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "local metadata, newheader = (header  .. '\\n\\n'):match '\\n\\n(.-)\\n\\n(.-)$'",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "header = (newheader or ''):find '%S' and trim(newheader) or nil",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "value = {name=name, file=file, header=header, functions={}}",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "modules[key] = value",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "table.insert(sorted_modules, value)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function message(...)\r\n  io.stderr:write(fmt(...), '\\n')\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "io.stderr:write(fmt(...), '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function stripfoldmarker(s)\r\n  return trim(s:gsub('{{%{%d', ''))\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function stripcomment(s)\r\n  return trim(s:gsub('\\n %* ?', '\\n'))\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function mungedesc(signature, description)\r\n  local sname = description:match \"This function implements the interface of Lua's `([^`]+)%(%)` function.\"\r\n  if sname and shareddocs[sname] then\r\n    local oldtype = sname:match '^(%w+)'\r\n    local newtype = signature:match '^%s*(%w+)'\r\n    local firstline, otherlines = shareddocs[sname]:match '^(.-)\\n\\n(.+)$'\r\n    local otherlines, lastline = otherlines:match '^(.+)\\n\\n(.-)$'\r\n    if newtype == 'shm' then\r\n      otherlines = otherlines:gsub('file:seek', 'shm:seek')\r\n      otherlines = otherlines:gsub('@file', '@shm')\r\n      otherlines = otherlines:gsub('file', 'shared memory')\r\n    end\r\n    otherlines = otherlines:gsub(oldtype, newtype)\r\n    description = firstline .. '\\n\\n' .. otherlines .. '\\n\\n' .. lastline\r\n  end\r\n  return description\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local sname = description:match \"This function implements the interface of Lua's `([^`]+)%(%)` function.\"",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if sname and shareddocs[sname] then\r\n    local oldtype = sname:match '^(%w+)'\r\n    local newtype = signature:match '^%s*(%w+)'\r\n    local firstline, otherlines = shareddocs[sname]:match '^(.-)\\n\\n(.+)$'\r\n    local otherlines, lastline = otherlines:match '^(.+)\\n\\n(.-)$'\r\n    if newtype == 'shm' then\r\n      otherlines = otherlines:gsub('file:seek', 'shm:seek')\r\n      otherlines = otherlines:gsub('@file', '@shm')\r\n      otherlines = otherlines:gsub('file', 'shared memory')\r\n    end\r\n    otherlines = otherlines:gsub(oldtype, newtype)\r\n    description = firstline .. '\\n\\n' .. otherlines .. '\\n\\n' .. lastline\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local oldtype = sname:match '^(%w+)'",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local newtype = signature:match '^%s*(%w+)'",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local firstline, otherlines = shareddocs[sname]:match '^(.-)\\n\\n(.+)$'",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local otherlines, lastline = otherlines:match '^(.+)\\n\\n(.-)$'",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if newtype == 'shm' then\r\n      otherlines = otherlines:gsub('file:seek', 'shm:seek')\r\n      otherlines = otherlines:gsub('@file', '@shm')\r\n      otherlines = otherlines:gsub('file', 'shared memory')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "otherlines = otherlines:gsub('file:seek', 'shm:seek')",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "otherlines = otherlines:gsub('@file', '@shm')",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "otherlines = otherlines:gsub('file', 'shared memory')",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "otherlines = otherlines:gsub(oldtype, newtype)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "description = firstline .. '\\n\\n' .. otherlines .. '\\n\\n' .. lastline",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function findrelease()\r\n  for line in io.lines 'src/apr.lua' do\r\n    local version = line:match \"^apr%._VERSION = '(.-)'\"\r\n    if version then return version end\r\n  end\r\n  assert(false, \"Failed to determine Lua/APR version number!\")\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "for line in io.lines 'src/apr.lua' do\r\n    local version = line:match \"^apr%._VERSION = '(.-)'\"\r\n    if version then return version end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "local version = line:match \"^apr%._VERSION = '(.-)'\"",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if version then return version end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "assert(false, \"Failed to determine Lua/APR version number!\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function blocks:add(template, ...)\r\n  self[#self+1] = fmt(template, ...)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "self[#self+1] = fmt(template, ...)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function toanchor(s)\r\n  s = s:lower()\r\n  s = s:gsub('[^a-z0-9_.:]+', '_')\r\n  s = s:gsub('example:_', 'example_')\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "s = s:lower()",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "s = s:gsub('[^a-z0-9_.:]+', '_')",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "s = s:gsub('example:_', 'example_')",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function sig2pubfun(s)\r\n  if s:find '^#result_set' then\r\n    return 'result_set:__len'\r\n  else\r\n    return s:match '^[%w_.:]+'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "if s:find '^#result_set' then\r\n    return 'result_set:__len'\r\n  else\r\n    return s:match '^[%w_.:]+'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function sig2privfun(s)\r\n  if s:find '^#' then\r\n    return s:gsub('^#result_set.-$', 'dbr_len')\r\n  else\r\n    s = s:match '^[%w_.:]+'\r\n    s = s:gsub('%W', '_')\r\n    s = s:gsub('^directory_', 'dir_')\r\n    s = s:gsub('^process_', 'proc_')\r\n    s = s:gsub('^driver_', 'dbd_')\r\n    s = s:gsub('^prepared_statement_', 'dbp_')\r\n    s = s:gsub('^result_set_', 'dbr_')\r\n    s = s:gsub('^xml_parser_', 'xml_')\r\n    s = s:gsub('^mc_client_', 'mc_')\r\n    s = s:gsub('^ldap_conn', 'lua_apr_ldap')\r\n    return s\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "if s:find '^#' then\r\n    return s:gsub('^#result_set.-$', 'dbr_len')\r\n  else\r\n    s = s:match '^[%w_.:]+'\r\n    s = s:gsub('%W', '_')\r\n    s = s:gsub('^directory_', 'dir_')\r\n    s = s:gsub('^process_', 'proc_')\r\n    s = s:gsub('^driver_', 'dbd_')\r\n    s = s:gsub('^prepared_statement_', 'dbp_')\r\n    s = s:gsub('^result_set_', 'dbr_')\r\n    s = s:gsub('^xml_parser_', 'xml_')\r\n    s = s:gsub('^mc_client_', 'mc_')\r\n    s = s:gsub('^ldap_conn', 'lua_apr_ldap')\r\n    return s\r\n  end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "s = s:match '^[%w_.:]+'",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "s = s:gsub('%W', '_')",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "s = s:gsub('^directory_', 'dir_')",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "s = s:gsub('^process_', 'proc_')",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "s = s:gsub('^driver_', 'dbd_')",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "s = s:gsub('^prepared_statement_', 'dbp_')",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "s = s:gsub('^result_set_', 'dbr_')",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "s = s:gsub('^xml_parser_', 'xml_')",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "s = s:gsub('^mc_client_', 'mc_')",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "s = s:gsub('^ldap_conn', 'lua_apr_ldap')",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local function gsplit(string, pattern, capture_delimiters)\r\n  return coroutine.wrap(function()\r\n    local index = 1\r\n    repeat\r\n      local first, last = string:find(pattern, index)\r\n      if first and last then\r\n        if index < first then coroutine.yield(string:sub(index, first - 1)) end\r\n        if capture_delimiters then coroutine.yield(string:sub(first, last)) end\r\n        index = last + 1\r\n      else\r\n        if index <= #string then coroutine.yield(string:sub(index)) end\r\n        break\r\n      end\r\n    until index > #string\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local index = 1",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "repeat\r\n      local first, last = string:find(pattern, index)\r\n      if first and last then\r\n        if index < first then coroutine.yield(string:sub(index, first - 1)) end\r\n        if capture_delimiters then coroutine.yield(string:sub(first, last)) end\r\n        index = last + 1\r\n      else\r\n        if index <= #string then coroutine.yield(string:sub(index)) end\r\n        break\r\n      end\r\n    until index > #string",
    "type": "statement:repeat"
  }, {
    "id": 69,
    "text": "local first, last = string:find(pattern, index)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if first and last then\r\n        if index < first then coroutine.yield(string:sub(index, first - 1)) end\r\n        if capture_delimiters then coroutine.yield(string:sub(first, last)) end\r\n        index = last + 1\r\n      else\r\n        if index <= #string then coroutine.yield(string:sub(index)) end\r\n        break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "if index < first then coroutine.yield(string:sub(index, first - 1)) end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "coroutine.yield(string:sub(index, first - 1))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if capture_delimiters then coroutine.yield(string:sub(first, last)) end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "coroutine.yield(string:sub(first, last))",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "index = last + 1",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if index <= #string then coroutine.yield(string:sub(index)) end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "coroutine.yield(string:sub(index))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "local function preprocess(text)\r\n  local output = {}\r\n  for block in gsplit(text, '\\n\\n', false) do\r\n    output[#output + 1] = block:find '^    ' and block or (block\r\n          :gsub('@permissions', '[permissions](#file_system_permissions)')\r\n          :gsub('error handling', '[error handling](#error_handling)')\r\n          :gsub('(%s)@([%w_]+)', '%1<tt>*%2*</tt>')\r\n          :gsub('([%s])true([%s%p])', '%1<tt>*true*</tt>%2')\r\n          :gsub('([%s%p])false([%s%p])', '%1<tt>*false*</tt>%2')\r\n          :gsub('([%s%p])nil([%s%p])', '%1<tt>*nil*</tt>%2')\r\n          :gsub('`([%w_.:]+)%(%)`', function(funcname)\r\n            local target\r\n            if funcname:find '^apr%.[%w_]+$' or funcname:find '^[%w_]+:[%w_]+$' then\r\n              target = '#' .. toanchor(funcname)\r\n            else\r\n              target = 'http://www.lua.org/manual/5.1/manual.html#pdf-' .. funcname\r\n            end\r\n            return fmt('[%s()](%s)', funcname:gsub('_', '\\\\_'), target)\r\n          end))\r\n  end\r\n  return table.concat(output, '\\n\\n')\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "local output = {}",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "for block in gsplit(text, '\\n\\n', false) do\r\n    output[#output + 1] = block:find '^    ' and block or (block\r\n          :gsub('@permissions', '[permissions](#file_system_permissions)')\r\n          :gsub('error handling', '[error handling](#error_handling)')\r\n          :gsub('(%s)@([%w_]+)', '%1<tt>*%2*</tt>')\r\n          :gsub('([%s])true([%s%p])', '%1<tt>*true*</tt>%2')\r\n          :gsub('([%s%p])false([%s%p])', '%1<tt>*false*</tt>%2')\r\n          :gsub('([%s%p])nil([%s%p])', '%1<tt>*nil*</tt>%2')\r\n          :gsub('`([%w_.:]+)%(%)`', function(funcname)\r\n            local target\r\n            if funcname:find '^apr%.[%w_]+$' or funcname:find '^[%w_]+:[%w_]+$' then\r\n              target = '#' .. toanchor(funcname)\r\n            else\r\n              target = 'http://www.lua.org/manual/5.1/manual.html#pdf-' .. funcname\r\n            end\r\n            return fmt('[%s()](%s)', funcname:gsub('_', '\\\\_'), target)\r\n          end))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 82,
    "text": "output[#output + 1] = block:find '^    ' and block or (block\r\n          :gsub('@permissions', '[permissions](#file_system_permissions)')\r\n          :gsub('error handling', '[error handling](#error_handling)')\r\n          :gsub('(%s)@([%w_]+)', '%1<tt>*%2*</tt>')\r\n          :gsub('([%s])true([%s%p])', '%1<tt>*true*</tt>%2')\r\n          :gsub('([%s%p])false([%s%p])', '%1<tt>*false*</tt>%2')\r\n          :gsub('([%s%p])nil([%s%p])', '%1<tt>*nil*</tt>%2')\r\n          :gsub('`([%w_.:]+)%(%)`', function(funcname)\r\n            local target\r\n            if funcname:find '^apr%.[%w_]+$' or funcname:find '^[%w_]+:[%w_]+$' then\r\n              target = '#' .. toanchor(funcname)\r\n            else\r\n              target = 'http://www.lua.org/manual/5.1/manual.html#pdf-' .. funcname\r\n            end\r\n            return fmt('[%s()](%s)', funcname:gsub('_', '\\\\_'), target)\r\n          end))",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "local target",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if funcname:find '^apr%.[%w_]+$' or funcname:find '^[%w_]+:[%w_]+$' then\r\n              target = '#' .. toanchor(funcname)\r\n            else\r\n              target = 'http://www.lua.org/manual/5.1/manual.html#pdf-' .. funcname\r\n            end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "target = '#' .. toanchor(funcname)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "target = 'http://www.lua.org/manual/5.1/manual.html#pdf-' .. funcname",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "local function dumpentries(functions)\r\n  for _, entry in ipairs(functions) do\r\n    local signature = entry.signature:gsub('%->', '→')\r\n    local funcname = sig2pubfun(signature)\r\n    local anchor = toanchor(funcname)\r\n    local tc = ''\r\n    if next(coverage) then\r\n      local covkey = sig2privfun(signature)\r\n      if not coverage[covkey] then covkey = 'lua_' .. covkey end\r\n      tc = coverage[covkey] or ''\r\n      if tc ~= '' then\r\n        local template = '<span style=\"float: right; font-size: small; color: %s; opacity: 0.5\">test coverage: %s<br></span>'\r\n        local color = tc >= 75 and 'green' or tc >= 50 and 'orange' or 'red'\r\n        tc = fmt(template, color, tc == 0 and 'none' or fmt('%i%%', tc))\r\n      end\r\n    end\r\n    blocks:add('### %s <a name=\"%s\" href=\"#%s\">`%s`</a>', tc, anchor, anchor, signature)\r\n    blocks:add('%s', preprocess(entry.description))\r\n    if entry.binarysafe ~= nil and not bsignore[funcname]\r\n        and not entry.description:find 'This function is binary safe'\r\n        and not entry.description:find 'This function is not binary safe' then\r\n      blocks:add('*This function %s binary safe.*', entry.binarysafe and 'is' or 'is not')\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "for _, entry in ipairs(functions) do\r\n    local signature = entry.signature:gsub('%->', '→')\r\n    local funcname = sig2pubfun(signature)\r\n    local anchor = toanchor(funcname)\r\n    local tc = ''\r\n    if next(coverage) then\r\n      local covkey = sig2privfun(signature)\r\n      if not coverage[covkey] then covkey = 'lua_' .. covkey end\r\n      tc = coverage[covkey] or ''\r\n      if tc ~= '' then\r\n        local template = '<span style=\"float: right; font-size: small; color: %s; opacity: 0.5\">test coverage: %s<br></span>'\r\n        local color = tc >= 75 and 'green' or tc >= 50 and 'orange' or 'red'\r\n        tc = fmt(template, color, tc == 0 and 'none' or fmt('%i%%', tc))\r\n      end\r\n    end\r\n    blocks:add('### %s <a name=\"%s\" href=\"#%s\">`%s`</a>', tc, anchor, anchor, signature)\r\n    blocks:add('%s', preprocess(entry.description))\r\n    if entry.binarysafe ~= nil and not bsignore[funcname]\r\n        and not entry.description:find 'This function is binary safe'\r\n        and not entry.description:find 'This function is not binary safe' then\r\n      blocks:add('*This function %s binary safe.*', entry.binarysafe and 'is' or 'is not')\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "local signature = entry.signature:gsub('%->', '→')",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local funcname = sig2pubfun(signature)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local anchor = toanchor(funcname)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local tc = ''",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "if next(coverage) then\r\n      local covkey = sig2privfun(signature)\r\n      if not coverage[covkey] then covkey = 'lua_' .. covkey end\r\n      tc = coverage[covkey] or ''\r\n      if tc ~= '' then\r\n        local template = '<span style=\"float: right; font-size: small; color: %s; opacity: 0.5\">test coverage: %s<br></span>'\r\n        local color = tc >= 75 and 'green' or tc >= 50 and 'orange' or 'red'\r\n        tc = fmt(template, color, tc == 0 and 'none' or fmt('%i%%', tc))\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "local covkey = sig2privfun(signature)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if not coverage[covkey] then covkey = 'lua_' .. covkey end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "covkey = 'lua_' .. covkey",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "tc = coverage[covkey] or ''",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if tc ~= '' then\r\n        local template = '<span style=\"float: right; font-size: small; color: %s; opacity: 0.5\">test coverage: %s<br></span>'\r\n        local color = tc >= 75 and 'green' or tc >= 50 and 'orange' or 'red'\r\n        tc = fmt(template, color, tc == 0 and 'none' or fmt('%i%%', tc))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "local template = '<span style=\"float: right; font-size: small; color: %s; opacity: 0.5\">test coverage: %s<br></span>'",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local color = tc >= 75 and 'green' or tc >= 50 and 'orange' or 'red'",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "tc = fmt(template, color, tc == 0 and 'none' or fmt('%i%%', tc))",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "blocks:add('### %s <a name=\"%s\" href=\"#%s\">`%s`</a>', tc, anchor, anchor, signature)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "blocks:add('%s', preprocess(entry.description))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "if entry.binarysafe ~= nil and not bsignore[funcname]\r\n        and not entry.description:find 'This function is binary safe'\r\n        and not entry.description:find 'This function is not binary safe' then\r\n      blocks:add('*This function %s binary safe.*', entry.binarysafe and 'is' or 'is not')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "blocks:add('*This function %s binary safe.*', entry.binarysafe and 'is' or 'is not')",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "local function htmlencode(s)\r\n  return (s:gsub('&', '&amp;')\r\n           :gsub('<', '&lt;')\r\n           :gsub('>', '&gt;'))\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "local function order(f)\r\n      return ordertbl[f.signature:match '^[%w_.:]+']\r\n    end",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function()\r\n    local index = 1\r\n    repeat\r\n      local first, last = string:find(pattern, index)\r\n      if first and last then\r\n        if index < first then coroutine.yield(string:sub(index, first - 1)) end\r\n        if capture_delimiters then coroutine.yield(string:sub(first, last)) end\r\n        index = last + 1\r\n      else\r\n        if index <= #string then coroutine.yield(string:sub(index)) end\r\n        break\r\n      end\r\n    until index > #string\r\n  end",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function(funcname)\r\n            local target\r\n            if funcname:find '^apr%.[%w_]+$' or funcname:find '^[%w_]+:[%w_]+$' then\r\n              target = '#' .. toanchor(funcname)\r\n            else\r\n              target = 'http://www.lua.org/manual/5.1/manual.html#pdf-' .. funcname\r\n            end\r\n            return fmt('[%s()](%s)', funcname:gsub('_', '\\\\_'), target)\r\n          end",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function(a, b)\r\n      return order(a) < order(b)\r\n    end",
    "type": "function"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "",
    "type": "function container"
  }, {
    "id": 119,
    "text": "write",
    "type": "global function"
  }, {
    "id": 120,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 121,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 122,
    "text": "fmt",
    "type": "global function"
  }, {
    "id": 123,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 124,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 125,
    "text": "lines",
    "type": "global function"
  }, {
    "id": 126,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 127,
    "text": "open",
    "type": "global function"
  }, {
    "id": 128,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 129,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 130,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 131,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 132,
    "text": "next",
    "type": "global function"
  }, {
    "id": 133,
    "text": "",
    "type": "variable container"
  }, {
    "id": 134,
    "text": "",
    "type": "require container"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "string"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "n/a"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 145,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 146,
    "text": "",
    "type": "string"
  }, {
    "id": 147,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 148,
    "text": "",
    "type": "string"
  }, {
    "id": 149,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 150,
    "text": "",
    "type": "string"
  }, {
    "id": 151,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 152,
    "text": "",
    "type": "string"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 157,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 158,
    "text": "",
    "type": "local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 160,
    "text": "",
    "type": "string"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 165,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 166,
    "text": "",
    "type": "boolean"
  }, {
    "id": 167,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 168,
    "text": "",
    "type": "boolean"
  }, {
    "id": 169,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 170,
    "text": "",
    "type": "boolean"
  }, {
    "id": 171,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 172,
    "text": "",
    "type": "boolean"
  }, {
    "id": 173,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 174,
    "text": "",
    "type": "boolean"
  }, {
    "id": 175,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 176,
    "text": "",
    "type": "boolean"
  }, {
    "id": 177,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 178,
    "text": "",
    "type": "boolean"
  }, {
    "id": 179,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 180,
    "text": "",
    "type": "boolean"
  }, {
    "id": 181,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 182,
    "text": "",
    "type": "boolean"
  }, {
    "id": 183,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 184,
    "text": "",
    "type": "boolean"
  }, {
    "id": 185,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 186,
    "text": "",
    "type": "boolean"
  }, {
    "id": 187,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 188,
    "text": "",
    "type": "boolean"
  }, {
    "id": 189,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 190,
    "text": "",
    "type": "boolean"
  }, {
    "id": 191,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 192,
    "text": "",
    "type": "boolean"
  }, {
    "id": 193,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 194,
    "text": "",
    "type": "boolean"
  }, {
    "id": 195,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 196,
    "text": "",
    "type": "boolean"
  }, {
    "id": 197,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 198,
    "text": "",
    "type": "boolean"
  }, {
    "id": 199,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 200,
    "text": "",
    "type": "boolean"
  }, {
    "id": 201,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 202,
    "text": "",
    "type": "boolean"
  }, {
    "id": 203,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 204,
    "text": "",
    "type": "boolean"
  }, {
    "id": 205,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 206,
    "text": "",
    "type": "boolean"
  }, {
    "id": 207,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 208,
    "text": "",
    "type": "boolean"
  }, {
    "id": 209,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 210,
    "text": "",
    "type": "boolean"
  }, {
    "id": 211,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 212,
    "text": "",
    "type": "boolean"
  }, {
    "id": 213,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 214,
    "text": "",
    "type": "boolean"
  }, {
    "id": 215,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 216,
    "text": "",
    "type": "boolean"
  }, {
    "id": 217,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 218,
    "text": "",
    "type": "boolean"
  }, {
    "id": 219,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 220,
    "text": "",
    "type": "boolean"
  }, {
    "id": 221,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 222,
    "text": "",
    "type": "boolean"
  }, {
    "id": 223,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 224,
    "text": "",
    "type": "boolean"
  }, {
    "id": 225,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 226,
    "text": "",
    "type": "boolean"
  }, {
    "id": 227,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 228,
    "text": "",
    "type": "boolean"
  }, {
    "id": 229,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 230,
    "text": "",
    "type": "boolean"
  }, {
    "id": 231,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 232,
    "text": "",
    "type": "boolean"
  }, {
    "id": 233,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 234,
    "text": "",
    "type": "boolean"
  }, {
    "id": 235,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 236,
    "text": "",
    "type": "boolean"
  }, {
    "id": 237,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 238,
    "text": "",
    "type": "boolean"
  }, {
    "id": 239,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 240,
    "text": "",
    "type": "boolean"
  }, {
    "id": 241,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 242,
    "text": "",
    "type": "boolean"
  }, {
    "id": 243,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 244,
    "text": "",
    "type": "boolean"
  }, {
    "id": 245,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 246,
    "text": "",
    "type": "boolean"
  }, {
    "id": 247,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 248,
    "text": "",
    "type": "boolean"
  }, {
    "id": 249,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 250,
    "text": "",
    "type": "boolean"
  }, {
    "id": 251,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 252,
    "text": "",
    "type": "boolean"
  }, {
    "id": 253,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 254,
    "text": "",
    "type": "boolean"
  }, {
    "id": 255,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 256,
    "text": "",
    "type": "boolean"
  }, {
    "id": 257,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 258,
    "text": "",
    "type": "boolean"
  }, {
    "id": 259,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 260,
    "text": "",
    "type": "boolean"
  }, {
    "id": 261,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 262,
    "text": "",
    "type": "boolean"
  }, {
    "id": 263,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 264,
    "text": "",
    "type": "boolean"
  }, {
    "id": 265,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 266,
    "text": "",
    "type": "boolean"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 269,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 270,
    "text": "",
    "type": "string"
  }, {
    "id": 271,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 272,
    "text": "",
    "type": "string"
  }, {
    "id": 273,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 274,
    "text": "",
    "type": "string"
  }, {
    "id": 275,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 276,
    "text": "",
    "type": "string"
  }, {
    "id": 277,
    "text": "",
    "type": "global variable"
  }, {
    "id": 278,
    "text": "",
    "type": "global variable"
  }, {
    "id": 279,
    "text": "",
    "type": "global variable"
  }, {
    "id": 280,
    "text": "",
    "type": "global variable"
  } ]
}