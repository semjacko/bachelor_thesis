{
  "_filename": "eload.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-AesFileEncrypt/examples/eload.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 5
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 10
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 16,
    "label": "has",
    "to": 32
  }, {
    "from": 16,
    "label": "has",
    "to": 31
  }, {
    "from": 16,
    "label": "has",
    "to": 33
  }, {
    "from": 16,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "has",
    "to": 5
  }, {
    "from": 16,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 5
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 5
  }, {
    "from": 43,
    "label": "has",
    "to": 5
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 38
  }, {
    "from": 56,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 56,
    "label": "has",
    "to": 39
  }, {
    "from": 56,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 71
  }, {
    "from": 58,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 66
  }, {
    "from": 43,
    "label": "calls",
    "to": 67
  }, {
    "from": 35,
    "label": "calls",
    "to": 16
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 58,
    "label": "calls",
    "to": 64
  }, {
    "from": 16,
    "label": "calls",
    "to": 68
  }, {
    "from": 16,
    "label": "calls",
    "to": 68
  }, {
    "from": 35,
    "label": "calls",
    "to": 12
  }, {
    "from": 47,
    "label": "calls",
    "to": 43
  }, {
    "from": 16,
    "label": "calls",
    "to": 60
  }, {
    "from": 58,
    "label": "calls",
    "to": 65
  }, {
    "from": 58,
    "label": "calls",
    "to": 65
  }, {
    "from": 47,
    "label": "calls",
    "to": 69
  }, {
    "from": 35,
    "label": "calls",
    "to": 2
  }, {
    "from": 47,
    "label": "calls",
    "to": 62
  }, {
    "from": 58,
    "label": "calls",
    "to": 70
  }, {
    "from": 43,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 63
  }, {
    "from": 1,
    "label": "contains",
    "to": 58
  }, {
    "from": 58,
    "label": "declares",
    "to": 2
  }, {
    "from": 58,
    "label": "declares",
    "to": 12
  }, {
    "from": 58,
    "label": "declares",
    "to": 14
  }, {
    "from": 58,
    "label": "declares",
    "to": 16
  }, {
    "from": 58,
    "label": "declares",
    "to": 35
  }, {
    "from": 58,
    "label": "declares",
    "to": 43
  }, {
    "from": 58,
    "label": "declares",
    "to": 47
  }, {
    "from": 58,
    "label": "declares",
    "to": 53
  }, {
    "from": 58,
    "label": "declares",
    "to": 55
  }, {
    "from": 58,
    "label": "declares",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 72,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 72,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 72,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 72,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 72,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 72,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 72,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 72,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 72,
    "label": "initializes",
    "to": 90
  }, {
    "from": 73,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 59
  }, {
    "from": 1,
    "label": "provides",
    "to": 92
  }, {
    "from": 88,
    "label": "represents",
    "to": 93
  }, {
    "from": 92,
    "label": "provides",
    "to": 93
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "eload",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function co_reader(fn)\r\n  local sender, err = coroutine.create(function ()\r\n    local writer = function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end\r\n    fn(writer)\r\n  end)\r\n  if not sender then return nil, err end\r\n\r\n  local function reader()\r\n    local ok, data = coroutine.resume(sender, true)\r\n    if ok then return data end\r\n    return nil, data\r\n  end\r\n\r\n  return reader\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local sender, err = coroutine.create(function ()\r\n    local writer = function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end\r\n    fn(writer)\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local writer = function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "fn(writer)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "if not sender then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "local function reader()\r\n    local ok, data = coroutine.resume(sender, true)\r\n    if ok then return data end\r\n    return nil, data\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 9,
    "text": "local ok, data = coroutine.resume(sender, true)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if ok then return data end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function reader()\r\n    local ok, data = coroutine.resume(sender, true)\r\n    if ok then return data end\r\n    return nil, data\r\n  end",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function decrypt(pwd, istream, ostream)\r\n  local salt,  pwd_ver  = istream:read(SALT_LENGTH, PVER_LENGTH)\r\n  if not (salt and pwd_ver)  then return nil, 'invalid stream format' end\r\n  if #pwd_ver ~= PVER_LENGTH then return nil, 'invalid stream format' end\r\n\r\n  local fenc = AesFileEncrypt.new()\r\n\r\n  local _, pwd_check = fenc:open(AES256, pwd, salt)\r\n  if pwd_check ~= pwd_ver then return nil, 'invalid password' end\r\n\r\n  local mac = ''\r\n  while true do\r\n    local chunk = istream:read(1024)\r\n    if not chunk then break end\r\n    chunk = mac .. chunk\r\n    mac   = string.sub(chunk, -MAC_LENGTH)\r\n    chunk = string.sub(chunk, 1, -MAC_LENGTH - 1)\r\n    chunk = fenc:decrypt(chunk)\r\n    ostream:write(chunk)\r\n  end\r\n\r\n  local mac_check, chunk = fenc:close()\r\n  ostream:write(chunk)\r\n  if mac_check == mac then return true end\r\n  return nil, 'invalid password'\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local salt,  pwd_ver  = istream:read(SALT_LENGTH, PVER_LENGTH)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if not (salt and pwd_ver)  then return nil, 'invalid stream format' end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "if #pwd_ver ~= PVER_LENGTH then return nil, 'invalid stream format' end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "local fenc = AesFileEncrypt.new()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local _, pwd_check = fenc:open(AES256, pwd, salt)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if pwd_check ~= pwd_ver then return nil, 'invalid password' end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local mac = ''",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "while true do\r\n    local chunk = istream:read(1024)\r\n    if not chunk then break end\r\n    chunk = mac .. chunk\r\n    mac   = string.sub(chunk, -MAC_LENGTH)\r\n    chunk = string.sub(chunk, 1, -MAC_LENGTH - 1)\r\n    chunk = fenc:decrypt(chunk)\r\n    ostream:write(chunk)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 25,
    "text": "local chunk = istream:read(1024)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if not chunk then break end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "chunk = mac .. chunk",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "mac   = string.sub(chunk, -MAC_LENGTH)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "chunk = string.sub(chunk, 1, -MAC_LENGTH - 1)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "chunk = fenc:decrypt(chunk)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "ostream:write(chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local mac_check, chunk = fenc:close()",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if mac_check == mac then return true end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function decrypt_reader(pwd, istream, do_close)\r\n  local status = {status = true}\r\n\r\n  return co_reader(function(writer)\r\n    local stream = {write = function(self, chunk) writer(chunk) end}\r\n    status.status, status.error = decrypt(pwd, istream, stream)\r\n    if do_close then istream:close() end\r\n  end), status\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local status = {status = true}",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local stream = {write = function(self, chunk) writer(chunk) end}",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "writer(chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "status.status, status.error = decrypt(pwd, istream, stream)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if do_close then istream:close() end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "istream:close()",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function decrypt_file_reader(pwd, ifile)\r\n  local i, err = io.open(ifile, \"rb\")\r\n  if not i then return nil, 'can not open input file :' .. ( err or 'unknown error' ) end\r\n  return decrypt_reader(pwd, i, true)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local i, err = io.open(ifile, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if not i then return nil, 'can not open input file :' .. ( err or 'unknown error' ) end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function decrypt_file_load(pwd, ifile)\r\n  local reader, status = assert(decrypt_file_reader(pwd, ifile))\r\n  local fn, err = load(reader)\r\n  if not fn then return nil, err end\r\n  if not status.status then return nil, status.error, fn end\r\n  return fn\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local reader, status = assert(decrypt_file_reader(pwd, ifile))",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local fn, err = load(reader)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if not fn then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "if not status.status then return nil, status.error, fn end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function ()\r\n    local writer = function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end\r\n    fn(writer)\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function(self, chunk) writer(chunk) end",
    "type": "function"
  }, {
    "id": 56,
    "text": "function(writer)\r\n    local stream = {write = function(self, chunk) writer(chunk) end}\r\n    status.status, status.error = decrypt(pwd, istream, stream)\r\n    if do_close then istream:close() end\r\n  end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "",
    "type": "function container"
  }, {
    "id": 59,
    "text": "AesFileEncrypt",
    "type": "module"
  }, {
    "id": 60,
    "text": "new",
    "type": "global function"
  }, {
    "id": 61,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 62,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 63,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 64,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 65,
    "text": "print",
    "type": "global function"
  }, {
    "id": 66,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 67,
    "text": "open",
    "type": "global function"
  }, {
    "id": 68,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 69,
    "text": "load",
    "type": "global function"
  }, {
    "id": 70,
    "text": "require",
    "type": "global function"
  }, {
    "id": 71,
    "text": "create",
    "type": "global function"
  }, {
    "id": 72,
    "text": "",
    "type": "variable container"
  }, {
    "id": 73,
    "text": "",
    "type": "require container"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "n/a"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "n/a"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "n/a"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "string"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "interface container"
  }, {
    "id": 93,
    "text": "",
    "type": "interface"
  } ]
}