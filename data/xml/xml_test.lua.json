{
  "_filename": "xml_test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/xml/test/xml_test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 33
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 39
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 28,
    "label": "calls",
    "to": 67
  }, {
    "from": 28,
    "label": "calls",
    "to": 67
  }, {
    "from": 46,
    "label": "calls",
    "to": 67
  }, {
    "from": 15,
    "label": "calls",
    "to": 74
  }, {
    "from": 6,
    "label": "calls",
    "to": 72
  }, {
    "from": 6,
    "label": "calls",
    "to": 72
  }, {
    "from": 6,
    "label": "calls",
    "to": 72
  }, {
    "from": 6,
    "label": "calls",
    "to": 72
  }, {
    "from": 15,
    "label": "calls",
    "to": 72
  }, {
    "from": 15,
    "label": "calls",
    "to": 72
  }, {
    "from": 15,
    "label": "calls",
    "to": 72
  }, {
    "from": 24,
    "label": "calls",
    "to": 72
  }, {
    "from": 41,
    "label": "calls",
    "to": 72
  }, {
    "from": 15,
    "label": "calls",
    "to": 70
  }, {
    "from": 46,
    "label": "calls",
    "to": 75
  }, {
    "from": 28,
    "label": "calls",
    "to": 64
  }, {
    "from": 28,
    "label": "calls",
    "to": 64
  }, {
    "from": 46,
    "label": "calls",
    "to": 64
  }, {
    "from": 28,
    "label": "calls",
    "to": 71
  }, {
    "from": 35,
    "label": "calls",
    "to": 76
  }, {
    "from": 3,
    "label": "calls",
    "to": 78
  }, {
    "from": 6,
    "label": "calls",
    "to": 61
  }, {
    "from": 15,
    "label": "calls",
    "to": 61
  }, {
    "from": 41,
    "label": "calls",
    "to": 61
  }, {
    "from": 46,
    "label": "calls",
    "to": 61
  }, {
    "from": 60,
    "label": "calls",
    "to": 69
  }, {
    "from": 46,
    "label": "calls",
    "to": 65
  }, {
    "from": 6,
    "label": "calls",
    "to": 73
  }, {
    "from": 28,
    "label": "calls",
    "to": 73
  }, {
    "from": 46,
    "label": "calls",
    "to": 73
  }, {
    "from": 60,
    "label": "calls",
    "to": 77
  }, {
    "from": 60,
    "label": "calls",
    "to": 77
  }, {
    "from": 60,
    "label": "calls",
    "to": 77
  }, {
    "from": 6,
    "label": "calls",
    "to": 68
  }, {
    "from": 15,
    "label": "calls",
    "to": 68
  }, {
    "from": 24,
    "label": "calls",
    "to": 66
  }, {
    "from": 35,
    "label": "calls",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 60,
    "label": "declares",
    "to": 3
  }, {
    "from": 60,
    "label": "declares",
    "to": 6
  }, {
    "from": 60,
    "label": "declares",
    "to": 15
  }, {
    "from": 60,
    "label": "declares",
    "to": 24
  }, {
    "from": 60,
    "label": "declares",
    "to": 28
  }, {
    "from": 60,
    "label": "declares",
    "to": 31
  }, {
    "from": 60,
    "label": "declares",
    "to": 35
  }, {
    "from": 60,
    "label": "declares",
    "to": 41
  }, {
    "from": 60,
    "label": "declares",
    "to": 46
  }, {
    "from": 60,
    "label": "declares",
    "to": 54
  }, {
    "from": 60,
    "label": "declares",
    "to": 56
  }, {
    "from": 60,
    "label": "declares",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 79,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 79,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 79,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 86,
    "label": "assigns",
    "to": 89
  }, {
    "from": 86,
    "label": "assigns",
    "to": 90
  }, {
    "from": 80,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 62
  }, {
    "from": 80,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "requires",
    "to": 63
  }, {
    "from": 80,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "requires",
    "to": 2
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 58
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "xml_test",
    "type": "module"
  }, {
    "id": 2,
    "text": "xml",
    "type": "module"
  }, {
    "id": 3,
    "text": "function should.autoLoad()\r\n  assertType('table', xml)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "assertType('table', xml)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function should.decodeXml()\r\n  local data = xml.parse(TEST_XML)\r\n  assertValueEqual(TEST_RES, data)\r\n\r\n  assertEqual('document', data.xml)\r\n  local b = xml.find(data,'b')\r\n  assertEqual('b', b.xml)\r\n  assertEqual(\"Rock'n Roll\", b.rock)\r\n  assertEqual('This is Bob', b[1])\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local data = xml.parse(TEST_XML)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "assertValueEqual(TEST_RES, data)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assertEqual('document', data.xml)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local b = xml.find(data,'b')",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "assertEqual('b', b.xml)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assertEqual(\"Rock'n Roll\", b.rock)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assertEqual('This is Bob', b[1])",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function should.removeNamespace()\r\n  local data = xml.parse [[\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<D:propfind xmlns:D=\"DAV:\">\r\n  <D:prop>\r\n    <D:getlastmodified/>\r\n    <D:getcontentlength/>\r\n    <D:creationdate/>\r\n    <D:resourcetype/>\r\n  </D:prop>\r\n</D:propfind>\r\n]]\r\n  assertTrue(data)\r\n  xml.removeNamespace(data, 'DAV:')\r\n  assertEqual('propfind', data.xml)\r\n  local prop = xml.find(data, 'prop')\r\n  assertEqual('prop', prop.xml)\r\n  assertEqual('getlastmodified', prop[1].xml)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local data = xml.parse [[\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<D:propfind xmlns:D=\"DAV:\">\r\n  <D:prop>\r\n    <D:getlastmodified/>\r\n    <D:getcontentlength/>\r\n    <D:creationdate/>\r\n    <D:resourcetype/>\r\n  </D:prop>\r\n</D:propfind>\r\n]]",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "assertTrue(data)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "xml.removeNamespace(data, 'DAV:')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assertEqual('propfind', data.xml)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local prop = xml.find(data, 'prop')",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "assertEqual('prop', prop.xml)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assertEqual('getlastmodified', prop[1].xml)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function should.dump()\r\n  local data = xml.dump(TEST_RES)\r\n  assertEqual(TEST_XML, data)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local data = xml.dump(TEST_RES)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "assertEqual(TEST_XML, data)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function should.load()\r\n  local data = xml.load(lub.path('|fixtures/foo.xml'))\r\n  assertValueEqual(TEST_RES, data)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local data = xml.load(lub.path('|fixtures/foo.xml'))",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function should.load()\r\n  assertPass(function()\r\n    local data = xml.load(lub.path('|fixtures/doxy.xml'))\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "assertPass(function()\r\n    local data = xml.load(lub.path('|fixtures/doxy.xml'))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local data = xml.load(lub.path('|fixtures/doxy.xml'))",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function should.raiseErrorOnRecursion()\r\n  local data = {xml='one', 'hello'}\r\n  data[2] = data\r\n  assertError('Could not dump table to XML. Maximal depth of 3000 reached.', function()\r\n    xml.dump(data)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local data = {xml='one', 'hello'}",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "data[2] = data",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "assertError('Could not dump table to XML. Maximal depth of 3000 reached.', function()\r\n    xml.dump(data)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "xml.dump(data)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function should.find()\r\n  local data = {xml = 'document',\r\n    'blah blah',\r\n    {xml = 'article',\r\n      {xml = 'p', 'Blah blah',\r\n        {xml = 'b', 'Bob'},\r\n      },\r\n      {xml = 'p', 'Hop hop'},\r\n    },\r\n    {xml = 'b', 'Top'},\r\n  }\r\n  local r = xml.find(data, 'b')\r\n  assertEqual('Top', r[1])\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local data = {xml = 'document',\r\n    'blah blah',\r\n    {xml = 'article',\r\n      {xml = 'p', 'Blah blah',\r\n        {xml = 'b', 'Bob'},\r\n      },\r\n      {xml = 'p', 'Hop hop'},\r\n    },\r\n    {xml = 'b', 'Top'},\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local r = xml.find(data, 'b')",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "assertEqual('Top', r[1])",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function should.parserLarge()\r\n  local data = xml.load(lub.path '|fixtures/large.xml')\r\n  local t = {}\r\n  lub.search(data, function(node)\r\n    if node.xml == 'MedlineCitation' and node.Status == 'In-Process' then\r\n      table.insert(t, xml.find(node, 'PMID')[1])\r\n    end\r\n  end)\r\n  assertValueEqual({\r\n    '11056631',\r\n    '18941263',\r\n  }, t)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local data = xml.load(lub.path '|fixtures/large.xml')",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "lub.search(data, function(node)\r\n    if node.xml == 'MedlineCitation' and node.Status == 'In-Process' then\r\n      table.insert(t, xml.find(node, 'PMID')[1])\r\n    end\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "if node.xml == 'MedlineCitation' and node.Status == 'In-Process' then\r\n      table.insert(t, xml.find(node, 'PMID')[1])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "table.insert(t, xml.find(node, 'PMID')[1])",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assertValueEqual({\r\n    '11056631',\r\n    '18941263',\r\n  }, t)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function()\r\n    local data = xml.load(lub.path('|fixtures/doxy.xml'))\r\n  end",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n    xml.dump(data)\r\n  end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function(node)\r\n    if node.xml == 'MedlineCitation' and node.Status == 'In-Process' then\r\n      table.insert(t, xml.find(node, 'PMID')[1])\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "",
    "type": "function container"
  }, {
    "id": 61,
    "text": "find",
    "type": "global function"
  }, {
    "id": 62,
    "text": "lub",
    "type": "module"
  }, {
    "id": 63,
    "text": "lut",
    "type": "module"
  }, {
    "id": 64,
    "text": "path",
    "type": "global function"
  }, {
    "id": 65,
    "text": "search",
    "type": "global function"
  }, {
    "id": 66,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 67,
    "text": "load",
    "type": "global function"
  }, {
    "id": 68,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 69,
    "text": "Test",
    "type": "global function"
  }, {
    "id": 70,
    "text": "removeNamespace",
    "type": "global function"
  }, {
    "id": 71,
    "text": "assertPass",
    "type": "global function"
  }, {
    "id": 72,
    "text": "assertEqual",
    "type": "global function"
  }, {
    "id": 73,
    "text": "assertValueEqual",
    "type": "global function"
  }, {
    "id": 74,
    "text": "assertTrue",
    "type": "global function"
  }, {
    "id": 75,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 76,
    "text": "assertError",
    "type": "global function"
  }, {
    "id": 77,
    "text": "require",
    "type": "global function"
  }, {
    "id": 78,
    "text": "assertType",
    "type": "global function"
  }, {
    "id": 79,
    "text": "",
    "type": "variable container"
  }, {
    "id": 80,
    "text": "",
    "type": "require container"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "string"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 88,
    "text": "",
    "type": "string"
  }, {
    "id": 89,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 90,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "require local variable"
  } ]
}