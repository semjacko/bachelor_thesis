{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/xml/xml/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 21
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 19,
    "label": "has",
    "to": 31
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 32
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 3
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 3
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 55
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 56
  }, {
    "from": 60,
    "label": "has",
    "to": 3
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 16,
    "label": "calls",
    "to": 68
  }, {
    "from": 10,
    "label": "calls",
    "to": 69
  }, {
    "from": 45,
    "label": "calls",
    "to": 69
  }, {
    "from": 62,
    "label": "calls",
    "to": 70
  }, {
    "from": 16,
    "label": "calls",
    "to": 71
  }, {
    "from": 39,
    "label": "calls",
    "to": 72
  }, {
    "from": 45,
    "label": "calls",
    "to": 72
  }, {
    "from": 5,
    "label": "calls",
    "to": 66
  }, {
    "from": 34,
    "label": "calls",
    "to": 64
  }, {
    "from": 16,
    "label": "calls",
    "to": 73
  }, {
    "from": 16,
    "label": "calls",
    "to": 73
  }, {
    "from": 16,
    "label": "calls",
    "to": 73
  }, {
    "from": 16,
    "label": "calls",
    "to": 73
  }, {
    "from": 16,
    "label": "calls",
    "to": 73
  }, {
    "from": 62,
    "label": "calls",
    "to": 67
  }, {
    "from": 16,
    "label": "calls",
    "to": 74
  }, {
    "from": 39,
    "label": "calls",
    "to": 74
  }, {
    "from": 10,
    "label": "calls",
    "to": 7
  }, {
    "from": 16,
    "label": "calls",
    "to": 7
  }, {
    "from": 16,
    "label": "calls",
    "to": 16
  }, {
    "from": 34,
    "label": "calls",
    "to": 16
  }, {
    "from": 16,
    "label": "calls",
    "to": 77
  }, {
    "from": 53,
    "label": "calls",
    "to": 65
  }, {
    "from": 53,
    "label": "calls",
    "to": 65
  }, {
    "from": 7,
    "label": "calls",
    "to": 75
  }, {
    "from": 10,
    "label": "calls",
    "to": 75
  }, {
    "from": 16,
    "label": "calls",
    "to": 75
  }, {
    "from": 39,
    "label": "calls",
    "to": 75
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 16,
    "label": "calls",
    "to": 10
  }, {
    "from": 62,
    "label": "calls",
    "to": 76
  }, {
    "from": 39,
    "label": "calls",
    "to": 39
  }, {
    "from": 45,
    "label": "calls",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 62
  }, {
    "from": 62,
    "label": "declares",
    "to": 2
  }, {
    "from": 62,
    "label": "declares",
    "to": 5
  }, {
    "from": 62,
    "label": "declares",
    "to": 7
  }, {
    "from": 62,
    "label": "declares",
    "to": 10
  }, {
    "from": 62,
    "label": "declares",
    "to": 16
  }, {
    "from": 62,
    "label": "declares",
    "to": 34
  }, {
    "from": 62,
    "label": "declares",
    "to": 39
  }, {
    "from": 62,
    "label": "declares",
    "to": 45
  }, {
    "from": 62,
    "label": "declares",
    "to": 53
  }, {
    "from": 62,
    "label": "declares",
    "to": 58
  }, {
    "from": 62,
    "label": "declares",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 78
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 78,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 78,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 78,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 78,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 78,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 78,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 78,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 78,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 78,
    "label": "initializes",
    "to": 96
  }, {
    "from": 78,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 79,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 63
  }, {
    "from": 1,
    "label": "provides",
    "to": 100
  }, {
    "from": 80,
    "label": "represents",
    "to": 101
  }, {
    "from": 100,
    "label": "provides",
    "to": 101
  }, {
    "from": 80,
    "label": "represents",
    "to": 102
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "init",
    "type": "module"
  }, {
    "id": 2,
    "text": "function lib.parse(string)\r\n  return parser:parse(string)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function lib.load(path)\r\n  return parser:parse(lub.content(path))\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function escape(v)\r\n  if type(v) == 'boolean' then\r\n    return v and 'true' or 'false'\r\n  else\r\n    return v:gsub('&','&amp;'):gsub('>','&gt;'):gsub('<','&lt;'):gsub(\"'\",'&apos;')\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if type(v) == 'boolean' then\r\n    return v and 'true' or 'false'\r\n  else\r\n    return v:gsub('&','&amp;'):gsub('>','&gt;'):gsub('<','&lt;'):gsub(\"'\",'&apos;')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function tagWithAttributes(data)\r\n  local res = data.xml or 'table'\r\n  for k,v in pairs(data) do\r\n    if k ~= 'xml' and type(k) == 'string' then\r\n      res = res .. ' ' .. k .. \"='\" .. escape(v) .. \"'\"\r\n    end\r\n  end\r\n  return res\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local res = data.xml or 'table'",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "for k,v in pairs(data) do\r\n    if k ~= 'xml' and type(k) == 'string' then\r\n      res = res .. ' ' .. k .. \"='\" .. escape(v) .. \"'\"\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "if k ~= 'xml' and type(k) == 'string' then\r\n      res = res .. ' ' .. k .. \"='\" .. escape(v) .. \"'\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "res = res .. ' ' .. k .. \"='\" .. escape(v) .. \"'\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function doDump(data, indent, output, last, depth, max_depth)\r\n  if depth > max_depth then\r\n    error(string.format(\"Could not dump table to XML. Maximal depth of %i reached.\", max_depth))\r\n  end\r\n\r\n  if data[1] then\r\n    insert(output, (last == 'n' and indent or '')..'<'..tagWithAttributes(data)..'>')\r\n    last = 'n'\r\n    local ind = indent..'  '\r\n    for _, child in ipairs(data) do\r\n      local typ = type(child)\r\n      if typ == 'table' then\r\n        doDump(child, ind, output, last, depth + 1, max_depth)\r\n        last = 'n'\r\n      elseif typ == 'number' then\r\n        insert(output, tostring(child))\r\n      else\r\n        local s = escape(child)\r\n        insert(output, s)\r\n        last = 's'\r\n      end\r\n    end\r\n    insert(output, (last == 'n' and indent or '')..'</'..(data.xml or 'table')..'>')\r\n    last = 'n'\r\n  else\r\n    -- no children\r\n    insert(output, (last == 'n' and indent or '')..'<'..tagWithAttributes(data)..'/>')\r\n    last = 'n'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "if depth > max_depth then\r\n    error(string.format(\"Could not dump table to XML. Maximal depth of %i reached.\", max_depth))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "error(string.format(\"Could not dump table to XML. Maximal depth of %i reached.\", max_depth))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if data[1] then\r\n    insert(output, (last == 'n' and indent or '')..'<'..tagWithAttributes(data)..'>')\r\n    last = 'n'\r\n    local ind = indent..'  '\r\n    for _, child in ipairs(data) do\r\n      local typ = type(child)\r\n      if typ == 'table' then\r\n        doDump(child, ind, output, last, depth + 1, max_depth)\r\n        last = 'n'\r\n      elseif typ == 'number' then\r\n        insert(output, tostring(child))\r\n      else\r\n        local s = escape(child)\r\n        insert(output, s)\r\n        last = 's'\r\n      end\r\n    end\r\n    insert(output, (last == 'n' and indent or '')..'</'..(data.xml or 'table')..'>')\r\n    last = 'n'\r\n  else\r\n    -- no children\r\n    insert(output, (last == 'n' and indent or '')..'<'..tagWithAttributes(data)..'/>')\r\n    last = 'n'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "insert(output, (last == 'n' and indent or '')..'<'..tagWithAttributes(data)..'>')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "last = 'n'",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "local ind = indent..'  '",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for _, child in ipairs(data) do\r\n      local typ = type(child)\r\n      if typ == 'table' then\r\n        doDump(child, ind, output, last, depth + 1, max_depth)\r\n        last = 'n'\r\n      elseif typ == 'number' then\r\n        insert(output, tostring(child))\r\n      else\r\n        local s = escape(child)\r\n        insert(output, s)\r\n        last = 's'\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "local typ = type(child)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if typ == 'table' then\r\n        doDump(child, ind, output, last, depth + 1, max_depth)\r\n        last = 'n'\r\n      elseif typ == 'number' then\r\n        insert(output, tostring(child))\r\n      else\r\n        local s = escape(child)\r\n        insert(output, s)\r\n        last = 's'\r\n      end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "doDump(child, ind, output, last, depth + 1, max_depth)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "insert(output, tostring(child))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local s = escape(child)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "insert(output, s)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "last = 's'",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "insert(output, (last == 'n' and indent or '')..'</'..(data.xml or 'table')..'>')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "insert(output, (last == 'n' and indent or '')..'<'..tagWithAttributes(data)..'/>')",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function lib.dump(table, max_depth)\r\n  local max_depth = max_depth or 3000\r\n  local res = {}\r\n  doDump(table, '\\n', res, 's', 1, max_depth)\r\n  return lub.join(res, '')\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "local max_depth = max_depth or 3000",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "doDump(table, '\\n', res, 's', 1, max_depth)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function doRemoveNamespace(data, prefix)\r\n  data.xml = match(data.xml, prefix .. ':(.*)') or data.xml\r\n  for _, sub in ipairs(data) do\r\n    if type(sub) == 'table' then\r\n      doRemoveNamespace(sub, prefix)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "data.xml = match(data.xml, prefix .. ':(.*)') or data.xml",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "for _, sub in ipairs(data) do\r\n    if type(sub) == 'table' then\r\n      doRemoveNamespace(sub, prefix)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "if type(sub) == 'table' then\r\n      doRemoveNamespace(sub, prefix)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "doRemoveNamespace(sub, prefix)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function lib.removeNamespace(data, key)\r\n  local nm\r\n  for k, v in pairs(data) do\r\n    if v == key then\r\n      nm = match(k, 'xmlns:(.*)')\r\n      if nm == '' then\r\n        -- error\r\n        return\r\n      else\r\n        doRemoveNamespace(data, nm)\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local nm",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "for k, v in pairs(data) do\r\n    if v == key then\r\n      nm = match(k, 'xmlns:(.*)')\r\n      if nm == '' then\r\n        -- error\r\n        return\r\n      else\r\n        doRemoveNamespace(data, nm)\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "if v == key then\r\n      nm = match(k, 'xmlns:(.*)')\r\n      if nm == '' then\r\n        -- error\r\n        return\r\n      else\r\n        doRemoveNamespace(data, nm)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "nm = match(k, 'xmlns:(.*)')",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "if nm == '' then\r\n        -- error\r\n        return\r\n      else\r\n        doRemoveNamespace(data, nm)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "doRemoveNamespace(data, nm)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function lib.find(data, tag, attr_key, attr_value)\r\n  if attr_key then\r\n    return lub.search(data, function(node)\r\n      if node.xml == tag and node[attr_key] == attr_value then\r\n        return node\r\n      end\r\n    end)\r\n  else\r\n    return lub.search(data, function(node)\r\n      if node.xml == tag then\r\n        return node\r\n      end\r\n    end)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "if attr_key then\r\n    return lub.search(data, function(node)\r\n      if node.xml == tag and node[attr_key] == attr_value then\r\n        return node\r\n      end\r\n    end)\r\n  else\r\n    return lub.search(data, function(node)\r\n      if node.xml == tag then\r\n        return node\r\n      end\r\n    end)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if node.xml == tag and node[attr_key] == attr_value then\r\n        return node\r\n      end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "if node.xml == tag then\r\n        return node\r\n      end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function(node)\r\n      if node.xml == tag and node[attr_key] == attr_value then\r\n        return node\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function(node)\r\n      if node.xml == tag then\r\n        return node\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "",
    "type": "function container"
  }, {
    "id": 63,
    "text": "lub",
    "type": "module"
  }, {
    "id": 64,
    "text": "join",
    "type": "global function"
  }, {
    "id": 65,
    "text": "search",
    "type": "global function"
  }, {
    "id": 66,
    "text": "content",
    "type": "global function"
  }, {
    "id": 67,
    "text": "Autoload",
    "type": "global function"
  }, {
    "id": 68,
    "text": "format",
    "type": "global function"
  }, {
    "id": 69,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 70,
    "text": "Parser",
    "type": "global function"
  }, {
    "id": 71,
    "text": "error",
    "type": "global function"
  }, {
    "id": 72,
    "text": "match",
    "type": "global function"
  }, {
    "id": 73,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 74,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 75,
    "text": "type",
    "type": "global function"
  }, {
    "id": 76,
    "text": "require",
    "type": "global function"
  }, {
    "id": 77,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 78,
    "text": "",
    "type": "variable container"
  }, {
    "id": 79,
    "text": "",
    "type": "require container"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "n/a"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "global variable"
  }, {
    "id": 97,
    "text": "",
    "type": "global variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "interface container"
  }, {
    "id": 101,
    "text": "",
    "type": "interface"
  }, {
    "id": 102,
    "text": "",
    "type": "interface"
  } ]
}