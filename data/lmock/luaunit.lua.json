{
  "_filename": "luaunit.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lmock/src/luaunit.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 9,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 8,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 11
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 5
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 27
  }, {
    "from": 31,
    "label": "has",
    "to": 28
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 5
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 39,
    "label": "has",
    "to": 47
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 39,
    "label": "has",
    "to": 48
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 39,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 5
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 62
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 5
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 80,
    "label": "has",
    "to": 87
  }, {
    "from": 80,
    "label": "has",
    "to": 88
  }, {
    "from": 80,
    "label": "has",
    "to": 5
  }, {
    "from": 80,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 94,
    "label": "has",
    "to": 98
  }, {
    "from": 94,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 100,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 110,
    "label": "has",
    "to": 5
  }, {
    "from": 110,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 5
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 124,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 124,
    "label": "has",
    "to": 132
  }, {
    "from": 124,
    "label": "has",
    "to": 5
  }, {
    "from": 124,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 140
  }, {
    "from": 134,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 134,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 134,
    "label": "has",
    "to": 146
  }, {
    "from": 134,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 5
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 150,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 154,
    "label": "has",
    "to": 160
  }, {
    "from": 154,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 154,
    "label": "has",
    "to": 163
  }, {
    "from": 154,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 164,
    "label": "has",
    "to": 167
  }, {
    "from": 164,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 167
  }, {
    "from": 154,
    "label": "has",
    "to": 78
  }, {
    "from": 154,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 175,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 171,
    "label": "has",
    "to": 5
  }, {
    "from": 171,
    "label": "has",
    "to": 183
  }, {
    "from": 80,
    "label": "calls",
    "to": 185
  }, {
    "from": 8,
    "label": "calls",
    "to": 21
  }, {
    "from": 8,
    "label": "calls",
    "to": 21
  }, {
    "from": 8,
    "label": "calls",
    "to": 21
  }, {
    "from": 8,
    "label": "calls",
    "to": 21
  }, {
    "from": 33,
    "label": "calls",
    "to": 194
  }, {
    "from": 171,
    "label": "calls",
    "to": 194
  }, {
    "from": 21,
    "label": "calls",
    "to": 186
  }, {
    "from": 2,
    "label": "calls",
    "to": 195
  }, {
    "from": 8,
    "label": "calls",
    "to": 195
  }, {
    "from": 110,
    "label": "calls",
    "to": 195
  }, {
    "from": 154,
    "label": "calls",
    "to": 195
  }, {
    "from": 154,
    "label": "calls",
    "to": 195
  }, {
    "from": 154,
    "label": "calls",
    "to": 50
  }, {
    "from": 171,
    "label": "calls",
    "to": 50
  }, {
    "from": 39,
    "label": "calls",
    "to": 33
  }, {
    "from": 23,
    "label": "calls",
    "to": 204
  }, {
    "from": 73,
    "label": "calls",
    "to": 204
  }, {
    "from": 171,
    "label": "calls",
    "to": 204
  }, {
    "from": 171,
    "label": "calls",
    "to": 204
  }, {
    "from": 21,
    "label": "calls",
    "to": 205
  }, {
    "from": 8,
    "label": "calls",
    "to": 205
  }, {
    "from": 122,
    "label": "calls",
    "to": 205
  }, {
    "from": 134,
    "label": "calls",
    "to": 188
  }, {
    "from": 33,
    "label": "calls",
    "to": 200
  }, {
    "from": 110,
    "label": "calls",
    "to": 198
  }, {
    "from": 110,
    "label": "calls",
    "to": 198
  }, {
    "from": 154,
    "label": "calls",
    "to": 198
  }, {
    "from": 154,
    "label": "calls",
    "to": 198
  }, {
    "from": 154,
    "label": "calls",
    "to": 198
  }, {
    "from": 171,
    "label": "calls",
    "to": 198
  }, {
    "from": 124,
    "label": "calls",
    "to": 110
  }, {
    "from": 8,
    "label": "calls",
    "to": 193
  }, {
    "from": 52,
    "label": "calls",
    "to": 193
  }, {
    "from": 55,
    "label": "calls",
    "to": 193
  }, {
    "from": 59,
    "label": "calls",
    "to": 193
  }, {
    "from": 59,
    "label": "calls",
    "to": 193
  }, {
    "from": 69,
    "label": "calls",
    "to": 193
  }, {
    "from": 69,
    "label": "calls",
    "to": 193
  }, {
    "from": 73,
    "label": "calls",
    "to": 193
  }, {
    "from": 73,
    "label": "calls",
    "to": 193
  }, {
    "from": 73,
    "label": "calls",
    "to": 193
  }, {
    "from": 80,
    "label": "calls",
    "to": 193
  }, {
    "from": 80,
    "label": "calls",
    "to": 193
  }, {
    "from": 154,
    "label": "calls",
    "to": 193
  }, {
    "from": 110,
    "label": "calls",
    "to": 187
  }, {
    "from": 110,
    "label": "calls",
    "to": 187
  }, {
    "from": 124,
    "label": "calls",
    "to": 187
  }, {
    "from": 154,
    "label": "calls",
    "to": 187
  }, {
    "from": 33,
    "label": "calls",
    "to": 201
  }, {
    "from": 100,
    "label": "calls",
    "to": 201
  }, {
    "from": 110,
    "label": "calls",
    "to": 201
  }, {
    "from": 110,
    "label": "calls",
    "to": 201
  }, {
    "from": 171,
    "label": "calls",
    "to": 201
  }, {
    "from": 124,
    "label": "calls",
    "to": 189
  }, {
    "from": 2,
    "label": "calls",
    "to": 191
  }, {
    "from": 154,
    "label": "calls",
    "to": 122
  }, {
    "from": 134,
    "label": "calls",
    "to": 202
  }, {
    "from": 134,
    "label": "calls",
    "to": 202
  }, {
    "from": 124,
    "label": "calls",
    "to": 206
  }, {
    "from": 39,
    "label": "calls",
    "to": 203
  }, {
    "from": 73,
    "label": "calls",
    "to": 203
  }, {
    "from": 124,
    "label": "calls",
    "to": 203
  }, {
    "from": 148,
    "label": "calls",
    "to": 192
  }, {
    "from": 69,
    "label": "calls",
    "to": 199
  }, {
    "from": 150,
    "label": "calls",
    "to": 196
  }, {
    "from": 80,
    "label": "calls",
    "to": 190
  }, {
    "from": 134,
    "label": "calls",
    "to": 197
  }, {
    "from": 1,
    "label": "contains",
    "to": 184
  }, {
    "from": 184,
    "label": "declares",
    "to": 2
  }, {
    "from": 184,
    "label": "declares",
    "to": 8
  }, {
    "from": 184,
    "label": "declares",
    "to": 21
  }, {
    "from": 184,
    "label": "declares",
    "to": 23
  }, {
    "from": 184,
    "label": "declares",
    "to": 31
  }, {
    "from": 184,
    "label": "declares",
    "to": 33
  }, {
    "from": 184,
    "label": "declares",
    "to": 39
  }, {
    "from": 184,
    "label": "declares",
    "to": 50
  }, {
    "from": 184,
    "label": "declares",
    "to": 52
  }, {
    "from": 184,
    "label": "declares",
    "to": 55
  }, {
    "from": 184,
    "label": "declares",
    "to": 59
  }, {
    "from": 184,
    "label": "declares",
    "to": 65
  }, {
    "from": 184,
    "label": "declares",
    "to": 69
  }, {
    "from": 184,
    "label": "declares",
    "to": 73
  }, {
    "from": 184,
    "label": "declares",
    "to": 80
  }, {
    "from": 184,
    "label": "declares",
    "to": 90
  }, {
    "from": 184,
    "label": "declares",
    "to": 94
  }, {
    "from": 184,
    "label": "declares",
    "to": 100
  }, {
    "from": 184,
    "label": "declares",
    "to": 106
  }, {
    "from": 184,
    "label": "declares",
    "to": 110
  }, {
    "from": 184,
    "label": "declares",
    "to": 122
  }, {
    "from": 184,
    "label": "declares",
    "to": 124
  }, {
    "from": 184,
    "label": "declares",
    "to": 134
  }, {
    "from": 184,
    "label": "declares",
    "to": 148
  }, {
    "from": 184,
    "label": "declares",
    "to": 150
  }, {
    "from": 184,
    "label": "declares",
    "to": 154
  }, {
    "from": 184,
    "label": "declares",
    "to": 171
  }, {
    "from": 207,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 208
  }, {
    "from": 1,
    "label": "contains",
    "to": 209
  }, {
    "from": 208,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 208,
    "label": "initializes",
    "to": 212
  }, {
    "from": 208,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 208,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 208,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 208,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luaunit",
    "type": "module"
  }, {
    "id": 2,
    "text": "function assertError(f, ...)\r\n\t-- assert that calling f with the arguments will raise an error\r\n\t-- example: assertError( f, 1, 2 ) => f(1,2) should generate an error\r\n\tlocal has_error, error_msg = not pcall( f, ... )\r\n\tif has_error then return end \r\n\terror( \"No error generated\", 2 )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local has_error, error_msg = not pcall( f, ... )",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if has_error then return end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "error( \"No error generated\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function assertEquals(actual, expected)\r\n\t-- assert that two values are equal and calls error else\r\n\tif  actual ~= expected  then\r\n\t\tlocal function wrapValue( v )\r\n\t\t\tif type(v) == 'string' then return \"'\"..v..\"'\" end\r\n\t\t\treturn tostring(v)\r\n\t\tend\r\n\t\tif not USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS then\r\n\t\t\texpected, actual = actual, expected\r\n\t\tend\r\n\r\n\t\tlocal errorMsg\r\n\t\tif type(expected) == 'string' then\r\n\t\t\terrorMsg = \"\\nexpected: \"..wrapValue(expected)..\"\\n\"..\r\n                             \"actual  : \"..wrapValue(actual)..\"\\n\"\r\n\t\telse\r\n\t\t\terrorMsg = \"expected: \"..wrapValue(expected)..\", actual: \"..wrapValue(actual)\r\n\t\tend\r\n\t\tprint (errorMsg)\r\n\t\terror( errorMsg, 2 )\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if  actual ~= expected  then\r\n\t\tlocal function wrapValue( v )\r\n\t\t\tif type(v) == 'string' then return \"'\"..v..\"'\" end\r\n\t\t\treturn tostring(v)\r\n\t\tend\r\n\t\tif not USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS then\r\n\t\t\texpected, actual = actual, expected\r\n\t\tend\r\n\r\n\t\tlocal errorMsg\r\n\t\tif type(expected) == 'string' then\r\n\t\t\terrorMsg = \"\\nexpected: \"..wrapValue(expected)..\"\\n\"..\r\n                             \"actual  : \"..wrapValue(actual)..\"\\n\"\r\n\t\telse\r\n\t\t\terrorMsg = \"expected: \"..wrapValue(expected)..\", actual: \"..wrapValue(actual)\r\n\t\tend\r\n\t\tprint (errorMsg)\r\n\t\terror( errorMsg, 2 )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local function wrapValue( v )\r\n\t\t\tif type(v) == 'string' then return \"'\"..v..\"'\" end\r\n\t\t\treturn tostring(v)\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 11,
    "text": "if type(v) == 'string' then return \"'\"..v..\"'\" end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if not USE_EXPECTED_ACTUAL_IN_ASSERT_EQUALS then\r\n\t\t\texpected, actual = actual, expected\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "expected, actual = actual, expected",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local errorMsg",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if type(expected) == 'string' then\r\n\t\t\terrorMsg = \"\\nexpected: \"..wrapValue(expected)..\"\\n\"..\r\n                             \"actual  : \"..wrapValue(actual)..\"\\n\"\r\n\t\telse\r\n\t\t\terrorMsg = \"expected: \"..wrapValue(expected)..\", actual: \"..wrapValue(actual)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "errorMsg = \"\\nexpected: \"..wrapValue(expected)..\"\\n\"..\r\n                             \"actual  : \"..wrapValue(actual)..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "errorMsg = \"expected: \"..wrapValue(expected)..\", actual: \"..wrapValue(actual)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "print (errorMsg)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "error( errorMsg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function wrapValue( v )\r\n\t\t\tif type(v) == 'string' then return \"'\"..v..\"'\" end\r\n\t\t\treturn tostring(v)\r\n\t\tend",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function wrapFunctions(...)\r\n\t-- Use me to wrap a set of functions into a Runnable test class:\r\n\t-- TestToto = wrapFunctions( f1, f2, f3, f3, f5 )\r\n\t-- Now, TestToto will be picked up by LuaUnit:run()\r\n\tlocal testClass, testFunction\r\n\ttestClass = {}\r\n\tlocal function storeAsMethod(idx, testName)\r\n\t\ttestFunction = _G[testName]\r\n\t\ttestClass[testName] = testFunction\r\n\tend\r\n\ttable.foreachi( {...}, storeAsMethod )\r\n\treturn testClass\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local testClass, testFunction",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "testClass = {}",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local function storeAsMethod(idx, testName)\r\n\t\ttestFunction = _G[testName]\r\n\t\ttestClass[testName] = testFunction\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 27,
    "text": "testFunction = _G[testName]",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "testClass[testName] = testFunction",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "table.foreachi( {...}, storeAsMethod )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function storeAsMethod(idx, testName)\r\n\t\ttestFunction = _G[testName]\r\n\t\ttestClass[testName] = testFunction\r\n\tend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function __genOrderedIndex( t )\r\n    local orderedIndex = {}\r\n    for key,_ in pairs(t) do\r\n        table.insert( orderedIndex, key )\r\n    end\r\n    table.sort( orderedIndex )\r\n    return orderedIndex\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local orderedIndex = {}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "for key,_ in pairs(t) do\r\n        table.insert( orderedIndex, key )\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "table.insert( orderedIndex, key )",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "table.sort( orderedIndex )",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function orderedNext(t, state)\r\n\t-- Equivalent of the next() function of table iteration, but returns the\r\n\t-- keys in the alphabetic order. We use a temporary ordered key table that\r\n\t-- is stored in the table being iterated.\r\n\r\n    --print(\"orderedNext: state = \"..tostring(state) )\r\n    if state == nil then\r\n        -- the first time, generate the index\r\n        t.__orderedIndex = __genOrderedIndex( t )\r\n        key = t.__orderedIndex[1]\r\n        return key, t[key]\r\n    end\r\n    -- fetch the next value\r\n    key = nil\r\n    for i = 1,table.getn(t.__orderedIndex) do\r\n        if t.__orderedIndex[i] == state then\r\n            key = t.__orderedIndex[i+1]\r\n        end\r\n    end\r\n\r\n    if key then\r\n        return key, t[key]\r\n    end\r\n\r\n    -- no more value to return, cleanup\r\n    t.__orderedIndex = nil\r\n    return\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "if state == nil then\r\n        -- the first time, generate the index\r\n        t.__orderedIndex = __genOrderedIndex( t )\r\n        key = t.__orderedIndex[1]\r\n        return key, t[key]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "t.__orderedIndex = __genOrderedIndex( t )",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "key = t.__orderedIndex[1]",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "key = nil",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "for i = 1,table.getn(t.__orderedIndex) do\r\n        if t.__orderedIndex[i] == state then\r\n            key = t.__orderedIndex[i+1]\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 45,
    "text": "if t.__orderedIndex[i] == state then\r\n            key = t.__orderedIndex[i+1]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "key = t.__orderedIndex[i+1]",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if key then\r\n        return key, t[key]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "t.__orderedIndex = nil",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function orderedPairs(t)\r\n    -- Equivalent of the pairs() function on tables. Allows to iterate\r\n    -- in order\r\n    return orderedNext, t, nil\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function UnitResult:displayClassName()\r\n\t\tprint( '>>>>>>>>> '.. self.currentClassName )\r\n\tend",
    "type": "function"
  }, {
    "id": 53,
    "text": "print( '>>>>>>>>> '.. self.currentClassName )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function UnitResult:displayTestName()\r\n\t\tif self.verbosity > 0 then\r\n\t\t\tprint( \">>> \".. self.currentTestName )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 56,
    "text": "if self.verbosity > 0 then\r\n\t\t\tprint( \">>> \".. self.currentTestName )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "print( \">>> \".. self.currentTestName )",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function UnitResult:displayFailure( errorMsg )\r\n\t\tif self.verbosity == 0 then\r\n\t\t\tio.stdout:write(\"F\")\r\n\t\telse\r\n\t\t\tprint( errorMsg )\r\n\t\t\tprint( 'Failed' )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 60,
    "text": "if self.verbosity == 0 then\r\n\t\t\tio.stdout:write(\"F\")\r\n\t\telse\r\n\t\t\tprint( errorMsg )\r\n\t\t\tprint( 'Failed' )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "io.stdout:write(\"F\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "print( errorMsg )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "print( 'Failed' )",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function UnitResult:displaySuccess()\r\n\t\tif self.verbosity > 0 then\r\n\t\t\t--print (\"Ok\" )\r\n\t\telse \r\n\t\t\tio.stdout:write(\".\")\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 66,
    "text": "if self.verbosity > 0 then\r\n\t\t\t--print (\"Ok\" )\r\n\t\telse \r\n\t\t\tio.stdout:write(\".\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "io.stdout:write(\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function UnitResult:displayOneFailedTest( failure )\r\n\t\ttestName, errorMsg = unpack( failure )\r\n\t\tprint(\">>> \"..testName..\" failed\")\r\n\t\tprint( errorMsg )\r\n\tend",
    "type": "function"
  }, {
    "id": 70,
    "text": "testName, errorMsg = unpack( failure )",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "print(\">>> \"..testName..\" failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function UnitResult:displayFailedTests()\r\n\t\tif table.getn( self.errorList ) == 0 then return end\r\n\t\tprint(\"Failed tests:\")\r\n\t\tprint(\"-------------\")\r\n\t\ttable.foreachi( self.errorList, self.displayOneFailedTest )\r\n\t\tprint()\r\n\tend",
    "type": "function"
  }, {
    "id": 74,
    "text": "if table.getn( self.errorList ) == 0 then return end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "print(\"Failed tests:\")",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "print(\"-------------\")",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "table.foreachi( self.errorList, self.displayOneFailedTest )",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function UnitResult:displayFinalResult()\r\n\t\tprint(\"=========================================================\")\r\n\t\tself:displayFailedTests()\r\n\t\tlocal failurePercent, successCount\r\n\t\tif self.testCount == 0 then\r\n\t\t\tfailurePercent = 0\r\n\t\telse\r\n\t\t\tfailurePercent = 100 * self.failureCount / self.testCount\r\n\t\tend\r\n\t\tsuccessCount = self.testCount - self.failureCount\r\n\t\tprint( string.format(\"Success : %d%% - %d / %d\",\r\n\t\t\t100-math.ceil(failurePercent), successCount, self.testCount) )\r\n\t\treturn self.failureCount\r\n    end",
    "type": "function"
  }, {
    "id": 81,
    "text": "print(\"=========================================================\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "self:displayFailedTests()",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "local failurePercent, successCount",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if self.testCount == 0 then\r\n\t\t\tfailurePercent = 0\r\n\t\telse\r\n\t\t\tfailurePercent = 100 * self.failureCount / self.testCount\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "failurePercent = 0",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "failurePercent = 100 * self.failureCount / self.testCount",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "successCount = self.testCount - self.failureCount",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "print( string.format(\"Success : %d%% - %d / %d\",\r\n\t\t\t100-math.ceil(failurePercent), successCount, self.testCount) )",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function UnitResult:startClass(className)\r\n\t\tself.currentClassName = className\r\n\t\tself:displayClassName()\r\n\tend",
    "type": "function"
  }, {
    "id": 91,
    "text": "self.currentClassName = className",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "self:displayClassName()",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function UnitResult:startTest(testName)\r\n\t\tself.currentTestName = testName\r\n\t\tself:displayTestName()\r\n        self.testCount = self.testCount + 1\r\n\t\tself.testHasFailure = false\r\n\tend",
    "type": "function"
  }, {
    "id": 95,
    "text": "self.currentTestName = testName",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "self:displayTestName()",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "self.testCount = self.testCount + 1",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "self.testHasFailure = false",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function UnitResult:addFailure( errorMsg )\r\n\t\tself.failureCount = self.failureCount + 1\r\n\t\tself.testHasFailure = true\r\n\t\ttable.insert( self.errorList, { self.currentTestName, errorMsg[1] } )\r\n\t\tself:displayFailure( errorMsg[2] )\r\n\tend",
    "type": "function"
  }, {
    "id": 101,
    "text": "self.failureCount = self.failureCount + 1",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "self.testHasFailure = true",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "table.insert( self.errorList, { self.currentTestName, errorMsg[1] } )",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "self:displayFailure( errorMsg[2] )",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function UnitResult:endTest()\r\n\t\tif not self.testHasFailure then\r\n\t\t\tself:displaySuccess()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 107,
    "text": "if not self.testHasFailure then\r\n\t\t\tself:displaySuccess()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "self:displaySuccess()",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function LuaUnit.strsplit(delimiter, text)\r\n\t\tlocal list = {}\r\n\t\tlocal pos = 1\r\n\t\tif string.find(\"\", delimiter, 1) then -- this would result in endless loops\r\n\t\t\terror(\"delimiter matches empty string!\")\r\n\t\tend\r\n\t\twhile 1 do\r\n\t\t\tlocal first, last = string.find(text, delimiter, pos)\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn list\r\n\tend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local list = {}",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if string.find(\"\", delimiter, 1) then -- this would result in endless loops\r\n\t\t\terror(\"delimiter matches empty string!\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "error(\"delimiter matches empty string!\")",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "while 1 do\r\n\t\t\tlocal first, last = string.find(text, delimiter, pos)\r\n\t\t\tif first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 116,
    "text": "local first, last = string.find(text, delimiter, pos)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "if first then -- found?\r\n\t\t\t\ttable.insert(list, string.sub(text, pos, first-1))\r\n\t\t\t\tpos = last+1\r\n\t\t\telse\r\n\t\t\t\ttable.insert(list, string.sub(text, pos))\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "table.insert(list, string.sub(text, pos, first-1))",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "pos = last+1",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "table.insert(list, string.sub(text, pos))",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function LuaUnit.isFunction(aObject) \r\n\t\treturn 'function' == type(aObject)\r\n\tend",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function LuaUnit.strip_luaunit_stack(stack_trace)\r\n\t\tstack_list = LuaUnit.strsplit( \"\\n\", stack_trace )\r\n\t\tstrip_end = nil\r\n\t\tfor i = table.getn(stack_list),1,-1 do\r\n\t\t\t-- a bit rude but it works !\r\n\t\t\tif string.find(stack_list[i],\"[C]: in function `xpcall'\",0,true)\r\n\t\t\t\tthen\r\n\t\t\t\tstrip_end = i - 2\r\n\t\t\tend\r\n\t\tend\r\n\t\tif strip_end then\r\n\t\t\ttable.setn( stack_list, strip_end )\r\n\t\tend\r\n\t\tstack_trace = table.concat( stack_list, \"\\n\" )\r\n\t\treturn stack_trace\r\n\tend",
    "type": "function"
  }, {
    "id": 125,
    "text": "stack_list = LuaUnit.strsplit( \"\\n\", stack_trace )",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "strip_end = nil",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "for i = table.getn(stack_list),1,-1 do\r\n\t\t\t-- a bit rude but it works !\r\n\t\t\tif string.find(stack_list[i],\"[C]: in function `xpcall'\",0,true)\r\n\t\t\t\tthen\r\n\t\t\t\tstrip_end = i - 2\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 128,
    "text": "if string.find(stack_list[i],\"[C]: in function `xpcall'\",0,true)\r\n\t\t\t\tthen\r\n\t\t\t\tstrip_end = i - 2\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "strip_end = i - 2",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "if strip_end then\r\n\t\t\ttable.setn( stack_list, strip_end )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "table.setn( stack_list, strip_end )",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "stack_trace = table.concat( stack_list, \"\\n\" )",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function LuaUnit:runTestMethod(aName, aClassInstance, aMethod)\r\n\t\tlocal ok, errorMsg\r\n\t\t-- example: runTestMethod( 'TestToto:test1', TestToto, TestToto.testToto(self) )\r\n\t\tLuaUnit.result:startTest(aName)\r\n\r\n\t\t-- run setUp first(if any)\r\n\t\tif self.isFunction( aClassInstance.setUp) then\r\n\t\t\t\taClassInstance:setUp()\r\n\t\tend\r\n\r\n\t\tlocal function err_handler(e)\r\n\t\t\treturn {e, e..'\\n'..debug.traceback()}\r\n\t\tend\r\n\r\n\t\t-- run testMethod()\r\n        ok, errorMsg = xpcall( aMethod, err_handler )\r\n\t\tif not ok then\r\n\t\t\terrorMsg[2]  = self.strip_luaunit_stack(errorMsg[2])\r\n\t\t\tLuaUnit.result:addFailure( errorMsg )\r\n        end\r\n\r\n\t\t-- lastly, run tearDown(if any)\r\n\t\tif self.isFunction(aClassInstance.tearDown) then\r\n\t\t\t aClassInstance:tearDown()\r\n\t\tend\r\n\r\n\t\tself.result:endTest()\r\n    end",
    "type": "function"
  }, {
    "id": 135,
    "text": "local ok, errorMsg",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "LuaUnit.result:startTest(aName)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "if self.isFunction( aClassInstance.setUp) then\r\n\t\t\t\taClassInstance:setUp()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "aClassInstance:setUp()",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "local function err_handler(e)\r\n\t\t\treturn {e, e..'\\n'..debug.traceback()}\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 140,
    "text": "ok, errorMsg = xpcall( aMethod, err_handler )",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "if not ok then\r\n\t\t\terrorMsg[2]  = self.strip_luaunit_stack(errorMsg[2])\r\n\t\t\tLuaUnit.result:addFailure( errorMsg )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "errorMsg[2]  = self.strip_luaunit_stack(errorMsg[2])",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "LuaUnit.result:addFailure( errorMsg )",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "if self.isFunction(aClassInstance.tearDown) then\r\n\t\t\t aClassInstance:tearDown()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "aClassInstance:tearDown()",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "self.result:endTest()",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "local function err_handler(e)\r\n\t\t\treturn {e, e..'\\n'..debug.traceback()}\r\n\t\tend",
    "type": "function"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function LuaUnit:runTestMethodName( methodName, classInstance )\r\n\t\t-- example: runTestMethodName( 'TestToto:testToto', TestToto )\r\n\t\tlocal methodInstance = loadstring(methodName .. '()')\r\n\t\tLuaUnit:runTestMethod(methodName, classInstance, methodInstance)\r\n\tend",
    "type": "function"
  }, {
    "id": 151,
    "text": "local methodInstance = loadstring(methodName .. '()')",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "LuaUnit:runTestMethod(methodName, classInstance, methodInstance)",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function LuaUnit:runTestClassByName( aClassName )\r\n\t\t-- example: runTestMethodName( 'TestToto' )\r\n\t\tlocal hasMethod, methodName, classInstance\r\n\t\thasMethod = string.find(aClassName, ':' )\r\n\t\tif hasMethod then\r\n\t\t\tmethodName = string.sub(aClassName, hasMethod+1)\r\n\t\t\taClassName = string.sub(aClassName,1,hasMethod-1)\r\n\t\tend\r\n        classInstance = _G[aClassName]\r\n\t\tif not classInstance then\r\n\t\t\terror( \"No such class: \"..aClassName )\r\n\t\tend\r\n\r\n\t\tLuaUnit.result:startClass( aClassName )\r\n\r\n\t\tif hasMethod then\r\n\t\t\tif not classInstance[ methodName ] then\r\n\t\t\t\terror( \"No such method: \"..methodName )\r\n\t\t\tend\r\n\t\t\tLuaUnit:runTestMethodName( aClassName..':'.. methodName, classInstance )\r\n\t\telse\r\n\t\t\t-- run all test methods of the class\r\n\t\t\tfor methodName, method in orderedPairs(classInstance) do\r\n\t\t\t--for methodName, method in classInstance do\r\n\t\t\t\tif LuaUnit.isFunction(method) and string.sub(methodName, 1, 4) == \"test\" then\r\n\t\t\t\t\tLuaUnit:runTestMethodName( aClassName..':'.. methodName, classInstance )\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tprint()\r\n\tend",
    "type": "function"
  }, {
    "id": 155,
    "text": "local hasMethod, methodName, classInstance",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "hasMethod = string.find(aClassName, ':' )",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "if hasMethod then\r\n\t\t\tmethodName = string.sub(aClassName, hasMethod+1)\r\n\t\t\taClassName = string.sub(aClassName,1,hasMethod-1)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "methodName = string.sub(aClassName, hasMethod+1)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "aClassName = string.sub(aClassName,1,hasMethod-1)",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "classInstance = _G[aClassName]",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "if not classInstance then\r\n\t\t\terror( \"No such class: \"..aClassName )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "error( \"No such class: \"..aClassName )",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "LuaUnit.result:startClass( aClassName )",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "if hasMethod then\r\n\t\t\tif not classInstance[ methodName ] then\r\n\t\t\t\terror( \"No such method: \"..methodName )\r\n\t\t\tend\r\n\t\t\tLuaUnit:runTestMethodName( aClassName..':'.. methodName, classInstance )\r\n\t\telse\r\n\t\t\t-- run all test methods of the class\r\n\t\t\tfor methodName, method in orderedPairs(classInstance) do\r\n\t\t\t--for methodName, method in classInstance do\r\n\t\t\t\tif LuaUnit.isFunction(method) and string.sub(methodName, 1, 4) == \"test\" then\r\n\t\t\t\t\tLuaUnit:runTestMethodName( aClassName..':'.. methodName, classInstance )\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "if not classInstance[ methodName ] then\r\n\t\t\t\terror( \"No such method: \"..methodName )\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "error( \"No such method: \"..methodName )",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "LuaUnit:runTestMethodName( aClassName..':'.. methodName, classInstance )",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "for methodName, method in orderedPairs(classInstance) do\r\n\t\t\t--for methodName, method in classInstance do\r\n\t\t\t\tif LuaUnit.isFunction(method) and string.sub(methodName, 1, 4) == \"test\" then\r\n\t\t\t\t\tLuaUnit:runTestMethodName( aClassName..':'.. methodName, classInstance )\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 169,
    "text": "if LuaUnit.isFunction(method) and string.sub(methodName, 1, 4) == \"test\" then\r\n\t\t\t\t\tLuaUnit:runTestMethodName( aClassName..':'.. methodName, classInstance )\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function LuaUnit:run(...)\r\n\t\t-- Run some specific test classes.\r\n\t\t-- If no arguments are passed, run the class names specified on the\r\n\t\t-- command line. If no class name is specified on the command line\r\n\t\t-- run all classes whose name starts with 'Test'\r\n\t\t--\r\n\t\t-- If arguments are passed, they must be strings of the class names \r\n\t\t-- that you want to run\r\n                args={...};\r\n\t\tif #args > 0 then\r\n\t\t\ttable.foreachi( args, LuaUnit.runTestClassByName )\r\n\t\telse \r\n\t\t\tif argv and #argv > 0 then\r\n\t\t\t\ttable.foreachi(argv, LuaUnit.runTestClassByName )\r\n\t\t\telse\r\n\t\t\t\t-- create the list before. If you do not do it now, you\r\n\t\t\t\t-- get undefined result because you modify _G while iterating\r\n\t\t\t\t-- over it.\r\n\t\t\t\ttestClassList = {}\r\n\t\t\t\tfor key, val in pairs(_G) do \r\n\t\t\t\t\tif string.sub(key,1,4) == 'Test' then \r\n\t\t\t\t\t\ttable.insert( testClassList, key )\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tfor i, val in orderedPairs(testClassList) do \r\n\t\t\t\t\t\tLuaUnit:runTestClassByName(val)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn LuaUnit.result:displayFinalResult()\r\n\tend",
    "type": "function"
  }, {
    "id": 172,
    "text": "args={...}",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "if #args > 0 then\r\n\t\t\ttable.foreachi( args, LuaUnit.runTestClassByName )\r\n\t\telse \r\n\t\t\tif argv and #argv > 0 then\r\n\t\t\t\ttable.foreachi(argv, LuaUnit.runTestClassByName )\r\n\t\t\telse\r\n\t\t\t\t-- create the list before. If you do not do it now, you\r\n\t\t\t\t-- get undefined result because you modify _G while iterating\r\n\t\t\t\t-- over it.\r\n\t\t\t\ttestClassList = {}\r\n\t\t\t\tfor key, val in pairs(_G) do \r\n\t\t\t\t\tif string.sub(key,1,4) == 'Test' then \r\n\t\t\t\t\t\ttable.insert( testClassList, key )\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tfor i, val in orderedPairs(testClassList) do \r\n\t\t\t\t\t\tLuaUnit:runTestClassByName(val)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "table.foreachi( args, LuaUnit.runTestClassByName )",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "if argv and #argv > 0 then\r\n\t\t\t\ttable.foreachi(argv, LuaUnit.runTestClassByName )\r\n\t\t\telse\r\n\t\t\t\t-- create the list before. If you do not do it now, you\r\n\t\t\t\t-- get undefined result because you modify _G while iterating\r\n\t\t\t\t-- over it.\r\n\t\t\t\ttestClassList = {}\r\n\t\t\t\tfor key, val in pairs(_G) do \r\n\t\t\t\t\tif string.sub(key,1,4) == 'Test' then \r\n\t\t\t\t\t\ttable.insert( testClassList, key )\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tfor i, val in orderedPairs(testClassList) do \r\n\t\t\t\t\t\tLuaUnit:runTestClassByName(val)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "table.foreachi(argv, LuaUnit.runTestClassByName )",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "testClassList = {}",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "for key, val in pairs(_G) do \r\n\t\t\t\t\tif string.sub(key,1,4) == 'Test' then \r\n\t\t\t\t\t\ttable.insert( testClassList, key )\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 179,
    "text": "if string.sub(key,1,4) == 'Test' then \r\n\t\t\t\t\t\ttable.insert( testClassList, key )\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "table.insert( testClassList, key )",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "for i, val in orderedPairs(testClassList) do \r\n\t\t\t\t\t\tLuaUnit:runTestClassByName(val)\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 182,
    "text": "LuaUnit:runTestClassByName(val)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "",
    "type": "function container"
  }, {
    "id": 185,
    "text": "format",
    "type": "global function"
  }, {
    "id": 186,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 187,
    "text": "find",
    "type": "global function"
  }, {
    "id": 188,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 189,
    "text": "setn",
    "type": "global function"
  }, {
    "id": 190,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 191,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 192,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 193,
    "text": "print",
    "type": "global function"
  }, {
    "id": 194,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 195,
    "text": "error",
    "type": "global function"
  }, {
    "id": 196,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 197,
    "text": "strip_luaunit_stack",
    "type": "global function"
  }, {
    "id": 198,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 199,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 200,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 201,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 202,
    "text": "isFunction",
    "type": "global function"
  }, {
    "id": 203,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 204,
    "text": "foreachi",
    "type": "global function"
  }, {
    "id": 205,
    "text": "type",
    "type": "global function"
  }, {
    "id": 206,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 207,
    "text": "",
    "type": "global variable"
  }, {
    "id": 208,
    "text": "",
    "type": "variable container"
  }, {
    "id": 209,
    "text": "",
    "type": "require container"
  }, {
    "id": 210,
    "text": "",
    "type": "global variable"
  }, {
    "id": 211,
    "text": "",
    "type": "n/a"
  }, {
    "id": 212,
    "text": "",
    "type": "global variable"
  }, {
    "id": 213,
    "text": "",
    "type": "global variable"
  }, {
    "id": 214,
    "text": "",
    "type": "n/a"
  }, {
    "id": 215,
    "text": "",
    "type": "global variable"
  }, {
    "id": 216,
    "text": "",
    "type": "n/a"
  }, {
    "id": 217,
    "text": "",
    "type": "global variable"
  }, {
    "id": 218,
    "text": "",
    "type": "n/a"
  }, {
    "id": 219,
    "text": "",
    "type": "global variable"
  }, {
    "id": 220,
    "text": "",
    "type": "n/a"
  } ]
}