{
  "_filename": "test_lmock3.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lmock/ut/test_lmock3.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 22,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 29
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 5
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 29
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 5
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 29
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 5
  }, {
    "from": 52,
    "label": "has",
    "to": 49
  }, {
    "from": 52,
    "label": "has",
    "to": 50
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 5
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 29
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 53
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 15,
    "label": "calls",
    "to": 73
  }, {
    "from": 61,
    "label": "calls",
    "to": 73
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 55,
    "label": "calls",
    "to": 69
  }, {
    "from": 55,
    "label": "calls",
    "to": 69
  }, {
    "from": 22,
    "label": "calls",
    "to": 77
  }, {
    "from": 22,
    "label": "calls",
    "to": 77
  }, {
    "from": 22,
    "label": "calls",
    "to": 77
  }, {
    "from": 22,
    "label": "calls",
    "to": 77
  }, {
    "from": 22,
    "label": "calls",
    "to": 77
  }, {
    "from": 48,
    "label": "calls",
    "to": 67
  }, {
    "from": 52,
    "label": "calls",
    "to": 67
  }, {
    "from": 22,
    "label": "calls",
    "to": 78
  }, {
    "from": 22,
    "label": "calls",
    "to": 78
  }, {
    "from": 22,
    "label": "calls",
    "to": 78
  }, {
    "from": 22,
    "label": "calls",
    "to": 78
  }, {
    "from": 22,
    "label": "calls",
    "to": 78
  }, {
    "from": 22,
    "label": "calls",
    "to": 78
  }, {
    "from": 22,
    "label": "calls",
    "to": 78
  }, {
    "from": 36,
    "label": "calls",
    "to": 78
  }, {
    "from": 36,
    "label": "calls",
    "to": 78
  }, {
    "from": 55,
    "label": "calls",
    "to": 78
  }, {
    "from": 55,
    "label": "calls",
    "to": 78
  }, {
    "from": 55,
    "label": "calls",
    "to": 75
  }, {
    "from": 55,
    "label": "calls",
    "to": 75
  }, {
    "from": 61,
    "label": "calls",
    "to": 75
  }, {
    "from": 42,
    "label": "calls",
    "to": 68
  }, {
    "from": 42,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 66
  }, {
    "from": 22,
    "label": "calls",
    "to": 66
  }, {
    "from": 32,
    "label": "calls",
    "to": 66
  }, {
    "from": 36,
    "label": "calls",
    "to": 66
  }, {
    "from": 42,
    "label": "calls",
    "to": 66
  }, {
    "from": 48,
    "label": "calls",
    "to": 66
  }, {
    "from": 52,
    "label": "calls",
    "to": 66
  }, {
    "from": 55,
    "label": "calls",
    "to": 66
  }, {
    "from": 61,
    "label": "calls",
    "to": 66
  }, {
    "from": 15,
    "label": "calls",
    "to": 72
  }, {
    "from": 32,
    "label": "calls",
    "to": 72
  }, {
    "from": 32,
    "label": "calls",
    "to": 72
  }, {
    "from": 32,
    "label": "calls",
    "to": 72
  }, {
    "from": 36,
    "label": "calls",
    "to": 72
  }, {
    "from": 48,
    "label": "calls",
    "to": 72
  }, {
    "from": 48,
    "label": "calls",
    "to": 72
  }, {
    "from": 48,
    "label": "calls",
    "to": 72
  }, {
    "from": 52,
    "label": "calls",
    "to": 72
  }, {
    "from": 55,
    "label": "calls",
    "to": 72
  }, {
    "from": 22,
    "label": "calls",
    "to": 71
  }, {
    "from": 36,
    "label": "calls",
    "to": 71
  }, {
    "from": 36,
    "label": "calls",
    "to": 71
  }, {
    "from": 52,
    "label": "calls",
    "to": 71
  }, {
    "from": 61,
    "label": "calls",
    "to": 71
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 22,
    "label": "calls",
    "to": 76
  }, {
    "from": 36,
    "label": "calls",
    "to": 76
  }, {
    "from": 48,
    "label": "calls",
    "to": 76
  }, {
    "from": 48,
    "label": "calls",
    "to": 76
  }, {
    "from": 48,
    "label": "calls",
    "to": 76
  }, {
    "from": 52,
    "label": "calls",
    "to": 76
  }, {
    "from": 15,
    "label": "calls",
    "to": 79
  }, {
    "from": 42,
    "label": "calls",
    "to": 74
  }, {
    "from": 48,
    "label": "calls",
    "to": 74
  }, {
    "from": 48,
    "label": "calls",
    "to": 74
  }, {
    "from": 52,
    "label": "calls",
    "to": 74
  }, {
    "from": 52,
    "label": "calls",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 65,
    "label": "declares",
    "to": 2
  }, {
    "from": 65,
    "label": "declares",
    "to": 15
  }, {
    "from": 65,
    "label": "declares",
    "to": 22
  }, {
    "from": 65,
    "label": "declares",
    "to": 32
  }, {
    "from": 65,
    "label": "declares",
    "to": 36
  }, {
    "from": 65,
    "label": "declares",
    "to": 42
  }, {
    "from": 65,
    "label": "declares",
    "to": 48
  }, {
    "from": 65,
    "label": "declares",
    "to": 52
  }, {
    "from": 65,
    "label": "declares",
    "to": 55
  }, {
    "from": 65,
    "label": "declares",
    "to": 61
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 81,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 81,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 80,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_lmock3",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Testlmock3:testVarABCInMockEnv()\r\n\tassert_equals( aa.b.c , \"lua\" )\r\n\tassert_equals( uu , nil )\r\n\r\n\tlocal mock = lmock.create()\r\n\r\n\tassert_equals( aa.b.c , \"lua\" )\r\n\tassert_equals( uu , nil )\r\n\taa = {\r\n\t\tb = {\r\n\t\t}\r\n\t}\r\n\taa.b.c = \"ass\"\r\n\tuu = {\r\n\t\tv = {\r\n\t\t\tw = \"hole\"\r\n\t\t}\r\n\t}\r\n\tassert_equals( aa.b.c , \"ass\" )\r\n\tassert_equals( uu.v.w , \"hole\" )\r\n\r\n\tassert_equals( _G.aa.b.c , \"lua\" )\r\n\tassert_equals( _G.uu , nil )\r\n\r\n\tsetfenv( 1 , _G )\r\n\tassert_equals( aa.b.c , \"lua\" )\r\n\tassert_equals( uu , nil )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert_equals( aa.b.c , \"lua\" )",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "assert_equals( uu , nil )",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local mock = lmock.create()",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "aa = {\r\n\t\tb = {\r\n\t\t}\r\n\t}",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "aa.b.c = \"ass\"",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "uu = {\r\n\t\tv = {\r\n\t\t\tw = \"hole\"\r\n\t\t}\r\n\t}",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "assert_equals( aa.b.c , \"ass\" )",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert_equals( uu.v.w , \"hole\" )",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert_equals( _G.aa.b.c , \"lua\" )",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert_equals( _G.uu , nil )",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "setfenv( 1 , _G )",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function doSomething()\r\n\tfoo( 3 , 4 )\r\n\tmod1.foo( \"lua\" )\r\n\tmod1:foo2( \"is\" )\r\n\tmod1.mod2.foo( \"good\" )\r\n\treturn mod1.mod2:foo2( \"hello\" , \"lua\" )\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "foo( 3 , 4 )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "mod1.foo( \"lua\" )",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "mod1:foo2( \"is\" )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "mod1.mod2.foo( \"good\" )",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function Testlmock3:testMethodWithAnyMockCallOk()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(3) , lmock.eq(4) )\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"lua\") )\r\n\tmock:method( \"mod1:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"is\") )\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"good\") )\r\n\tmock:method( \"mod1.mod2:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"hello\") , lmock.eq(\"lua\") )\r\n\t\t:will( 100 )\r\n\t\r\n\tassert_equals( mock:run( doSomething ) , 100 )\r\n\tmock:verify()\r\n\tassert_error( doSomething )\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(3) , lmock.eq(4) )",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "mock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"lua\") )",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "mock:method( \"mod1:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"is\") )",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "mock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"good\") )",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "mock:method( \"mod1.mod2:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"hello\") , lmock.eq(\"lua\") )\r\n\t\t:will( 100 )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert_equals( mock:run( doSomething ) , 100 )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "mock:verify()",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert_error( doSomething )",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function Testlmock3:testMethodWithDefaultCanCallMoreTimes()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:default()\r\n\r\n\tmod1.foo()\r\n\tmod1.foo()\r\n\tmod1.foo()\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "mock:method( \"mod1.foo\" )\r\n\t\t:default()",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "mod1.foo()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function Testlmock3:testCallDefaultWithErrorParam()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:default()\r\n\t\t:with( lmock.eq(7) , lmock.eq(8) )\r\n\t\t:will( 10 )\r\n\t\r\n\tassert_error( mod1.foo , 1 , 2 )\r\n\tassert_error( mod1.foo )\r\n\tassert_equals( mod1.foo( 7 , 8 ) , 10 )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "mock:method( \"mod1.foo\" )\r\n\t\t:default()\r\n\t\t:with( lmock.eq(7) , lmock.eq(8) )\r\n\t\t:will( 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert_error( mod1.foo , 1 , 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert_error( mod1.foo )",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert_equals( mod1.foo( 7 , 8 ) , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function Testlmock3:testAnyParamInMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1:foo\" )\r\n\t\t:default()\r\n\t\t:with( lmock.eqx(10) , lmock.any() , lmock.any() )\r\n\r\n\tmod1:foo( 10 , 10 , 10 )\r\n\tmod1:foo( 10 )\r\n\tmod1:foo( 10 , \"ak\" , \"cn\" )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "mock:method( \"mod1:foo\" )\r\n\t\t:default()\r\n\t\t:with( lmock.eqx(10) , lmock.any() , lmock.any() )",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "mod1:foo( 10 , 10 , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "mod1:foo( 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "mod1:foo( 10 , \"ak\" , \"cn\" )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function Testlmock3:testExactlyCallOk()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.exactly( 3 ) )\r\n\t\t:with( lmock.eqx(1) , lmock.eqx(2) )\r\n\t\t:will( 10 )\r\n\t\t\r\n\tassert_equals( mod1.foo( 1 , 2 ) , 10 )\r\n\tassert_equals( mod1.foo( 1 , 2 ) , 10 )\r\n\tassert_equals( mod1.foo( 1 , 2 ) , 10 )\r\n\t\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "mock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.exactly( 3 ) )\r\n\t\t:with( lmock.eqx(1) , lmock.eqx(2) )\r\n\t\t:will( 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert_equals( mod1.foo( 1 , 2 ) , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function Testlmock3:testFailWithNotEnoughCallInExactly()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.exactly( 3 ) )\r\n\t\t:with( lmock.eqx(1) , lmock.eqx(2) )\r\n\t\t:will( 10 )\r\n\t\t\r\n\tassert_equals( mod1.foo( 1 , 2 ) , 10 )\r\n\tassert_error( mock.verify , mock )\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "assert_error( mock.verify , mock )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function Testlmock3:testRangeCallOk()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.range( 1 , 3 ) )\r\n\t\t:with( lmock.eq(1) )\r\n\t\t:will( 10 )\r\n\t\t\r\n\tmock:method( \"mod1.foo2\" )\r\n\t\t:expects( lmock.range( 2 , 3 ) )\r\n\t\t:with( lmock.eq(4) )\r\n\t\t:will( 8 )\r\n\t\t\r\n\tmod1.foo2(4)\t\r\n\tmod1.foo(1)\r\n\tmod1.foo2(4)\r\n\r\n\tmock:verify()\t\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "mock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.range( 1 , 3 ) )\r\n\t\t:with( lmock.eq(1) )\r\n\t\t:will( 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "mock:method( \"mod1.foo2\" )\r\n\t\t:expects( lmock.range( 2 , 3 ) )\r\n\t\t:with( lmock.eq(4) )\r\n\t\t:will( 8 )",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "mod1.foo2(4)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "mod1.foo(1)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function Testlmock3:testRangeWithNotEnoughCall()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.range( 2 , 3 ) )\r\n\t\r\n\tfoo()\r\n\t\r\n\tassert_error( mock.verify , mock )\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.range( 2 , 3 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "foo()",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "",
    "type": "function container"
  }, {
    "id": 66,
    "text": "create",
    "type": "global function"
  }, {
    "id": 67,
    "text": "exactly",
    "type": "global function"
  }, {
    "id": 68,
    "text": "any",
    "type": "global function"
  }, {
    "id": 69,
    "text": "foo2",
    "type": "global function"
  }, {
    "id": 70,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 71,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 72,
    "text": "foo",
    "type": "global function"
  }, {
    "id": 73,
    "text": "foo",
    "type": "global function"
  }, {
    "id": 74,
    "text": "eqx",
    "type": "global function"
  }, {
    "id": 75,
    "text": "range",
    "type": "global function"
  }, {
    "id": 76,
    "text": "assert_equals",
    "type": "global function"
  }, {
    "id": 77,
    "text": "once",
    "type": "global function"
  }, {
    "id": 78,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 79,
    "text": "mod1.mod2.foo",
    "type": "global function"
  }, {
    "id": 80,
    "text": "",
    "type": "global variable"
  }, {
    "id": 81,
    "text": "",
    "type": "variable container"
  }, {
    "id": 82,
    "text": "",
    "type": "require container"
  }, {
    "id": 83,
    "text": "",
    "type": "global variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "global variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  } ]
}