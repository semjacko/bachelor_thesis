{
  "_filename": "sample.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lmock/sample.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 13
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 13
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 13
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 24
  }, {
    "from": 32,
    "label": "has",
    "to": 19
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 13
  }, {
    "from": 36,
    "label": "has",
    "to": 14
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 19
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 13
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 38
  }, {
    "from": 40,
    "label": "has",
    "to": 19
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 13
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 19
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 13
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 19
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "calls",
    "to": 57
  }, {
    "from": 4,
    "label": "calls",
    "to": 2
  }, {
    "from": 4,
    "label": "calls",
    "to": 2
  }, {
    "from": 4,
    "label": "calls",
    "to": 2
  }, {
    "from": 4,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 58
  }, {
    "from": 12,
    "label": "calls",
    "to": 58
  }, {
    "from": 12,
    "label": "calls",
    "to": 58
  }, {
    "from": 12,
    "label": "calls",
    "to": 58
  }, {
    "from": 21,
    "label": "calls",
    "to": 58
  }, {
    "from": 26,
    "label": "calls",
    "to": 58
  }, {
    "from": 26,
    "label": "calls",
    "to": 58
  }, {
    "from": 36,
    "label": "calls",
    "to": 58
  }, {
    "from": 12,
    "label": "calls",
    "to": 62
  }, {
    "from": 12,
    "label": "calls",
    "to": 62
  }, {
    "from": 12,
    "label": "calls",
    "to": 62
  }, {
    "from": 21,
    "label": "calls",
    "to": 62
  }, {
    "from": 26,
    "label": "calls",
    "to": 62
  }, {
    "from": 36,
    "label": "calls",
    "to": 62
  }, {
    "from": 26,
    "label": "calls",
    "to": 55
  }, {
    "from": 40,
    "label": "calls",
    "to": 55
  }, {
    "from": 44,
    "label": "calls",
    "to": 63
  }, {
    "from": 48,
    "label": "calls",
    "to": 63
  }, {
    "from": 48,
    "label": "calls",
    "to": 63
  }, {
    "from": 48,
    "label": "calls",
    "to": 63
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 26,
    "label": "calls",
    "to": 56
  }, {
    "from": 32,
    "label": "calls",
    "to": 56
  }, {
    "from": 32,
    "label": "calls",
    "to": 56
  }, {
    "from": 12,
    "label": "calls",
    "to": 54
  }, {
    "from": 21,
    "label": "calls",
    "to": 54
  }, {
    "from": 26,
    "label": "calls",
    "to": 54
  }, {
    "from": 32,
    "label": "calls",
    "to": 54
  }, {
    "from": 36,
    "label": "calls",
    "to": 54
  }, {
    "from": 40,
    "label": "calls",
    "to": 54
  }, {
    "from": 44,
    "label": "calls",
    "to": 54
  }, {
    "from": 48,
    "label": "calls",
    "to": 54
  }, {
    "from": 4,
    "label": "calls",
    "to": 64
  }, {
    "from": 4,
    "label": "calls",
    "to": 64
  }, {
    "from": 12,
    "label": "calls",
    "to": 61
  }, {
    "from": 21,
    "label": "calls",
    "to": 61
  }, {
    "from": 26,
    "label": "calls",
    "to": 61
  }, {
    "from": 32,
    "label": "calls",
    "to": 61
  }, {
    "from": 36,
    "label": "calls",
    "to": 61
  }, {
    "from": 40,
    "label": "calls",
    "to": 61
  }, {
    "from": 48,
    "label": "calls",
    "to": 61
  }, {
    "from": 32,
    "label": "calls",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 53,
    "label": "declares",
    "to": 2
  }, {
    "from": 53,
    "label": "declares",
    "to": 4
  }, {
    "from": 53,
    "label": "declares",
    "to": 12
  }, {
    "from": 53,
    "label": "declares",
    "to": 21
  }, {
    "from": 53,
    "label": "declares",
    "to": 26
  }, {
    "from": 53,
    "label": "declares",
    "to": 32
  }, {
    "from": 53,
    "label": "declares",
    "to": 36
  }, {
    "from": 53,
    "label": "declares",
    "to": 40
  }, {
    "from": 53,
    "label": "declares",
    "to": 44
  }, {
    "from": 53,
    "label": "declares",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 65,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sample",
    "type": "module"
  }, {
    "id": 2,
    "text": "function foo( a ) error() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "error()",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "function myFunc( a , b )\r\n\tfoo( a )\r\n\tif type(a) == \"number\" then\r\n\t\tfoo(\"rebmun\")\r\n\tend\r\n\tif type(a) == \"string\" then\r\n\t\tfoo(b)\r\n\tend\r\n\treturn foo( b , a )\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "foo( a )",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "if type(a) == \"number\" then\r\n\t\tfoo(\"rebmun\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "foo(\"rebmun\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "if type(a) == \"string\" then\r\n\t\tfoo(b)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "foo(b)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function TestSample:testMyFuncShouldInvokeFoo3Times()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx(3) )\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx(\"rebmun\") )\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx(5) , lmock.eqx(3) )\r\n\t\t:will( 15 )\r\n\t\t\r\n\tlocal rst = mock:run( myFunc , 3 , 5 )\r\n\tassert_equals( rst , 15 )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local mock = lmock.create()",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx(3) )",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx(\"rebmun\") )",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx(5) , lmock.eqx(3) )\r\n\t\t:will( 15 )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "local rst = mock:run( myFunc , 3 , 5 )",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "assert_equals( rst , 15 )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "mock:verify()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function TestSample:testMyFuncShowInvokeDefaultFoo()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx(3) )\r\n\tmock:method( \"foo\" )\r\n\t\t:default()\r\n\t\t:will(0)\r\n\t\t\r\n\tlocal rst = mock:run( myFunc , 3 )\r\n\tassert_equals( rst , 0 )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "mock:method( \"foo\" )\r\n\t\t:default()\r\n\t\t:will(0)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local rst = mock:run( myFunc , 3 )",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "assert_equals( rst , 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function TestSample:testMyFuncShouldInvokeFooExactly2TimesWithSameParam()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.exactly(2) )\r\n\t\t:with( lmock.eqx\"lua\" )\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx\"lua\" , lmock.any() )\r\n\t\t:will( \"lua is great\" )\r\n\t\r\n\tlocal rst = mock:run( myFunc , \"lua\" , \"lua\" )\r\n\tassert_equals( rst , \"lua is great\" )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.exactly(2) )\r\n\t\t:with( lmock.eqx\"lua\" )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx\"lua\" , lmock.any() )\r\n\t\t:will( \"lua is great\" )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local rst = mock:run( myFunc , \"lua\" , \"lua\" )",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "assert_equals( rst , \"lua is great\" )",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function TestSample:testMyFuncShouldInvokeFooAtLeast2Times()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.range( 2 , 3 ) )\r\n\t\t:with( lmock.any() , lmock.any() )\r\n\t\t:will( 0 )\r\n\t\t\r\n\tlocal rst = mock:run( myFunc )\r\n\tassert_equals( rst , 0 )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.range( 2 , 3 ) )\r\n\t\t:with( lmock.any() , lmock.any() )\r\n\t\t:will( 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local rst = mock:run( myFunc )",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function TestSample:testMyFuncFailWithErrorArgument()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx(3) )\r\n\t\r\n\tlocal rst = mock:run( myFunc , 5 )\r\n\tassert_equals( rst , nil )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local rst = mock:run( myFunc , 5 )",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "assert_equals( rst , nil )",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function TestSample:testMyFuncFailWithNotEnoughCall()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.exactly(3) )\r\n\t\r\n\tlocal rst = mock:run( myFunc , {} )\r\n\tassert_equals( rst , nil )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.exactly(3) )",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local rst = mock:run( myFunc , {} )",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function TestSample:testMyFuncFailWithInvokeDisabled()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.never() )\r\n\t\t:with( lmock.eq( 3 ) )\r\n\r\n\tmock:run( myFunc , 3 )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.never() )\r\n\t\t:with( lmock.eq( 3 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "mock:run( myFunc , 3 )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function TestSample:testMyFunctionWithStubMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"foo\" )\r\n\t\t:stubs()\r\n\t\t:with( lmock.eq(\"lua\") , lmock.eq(\"lua\") )\r\n\t\t:will( 10 )\r\n\r\n\tmock:method( \"foo\" )\r\n\t\t:stubs()\r\n\t\t:with( lmock.eq(\"lua\" ) )\r\n\t\r\n\tassert_equals( mock:run( myFunc , \"lua\" , \"lua\" ) , 10 )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "mock:method( \"foo\" )\r\n\t\t:stubs()\r\n\t\t:with( lmock.eq(\"lua\") , lmock.eq(\"lua\") )\r\n\t\t:will( 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "mock:method( \"foo\" )\r\n\t\t:stubs()\r\n\t\t:with( lmock.eq(\"lua\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert_equals( mock:run( myFunc , \"lua\" , \"lua\" ) , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "",
    "type": "function container"
  }, {
    "id": 54,
    "text": "create",
    "type": "global function"
  }, {
    "id": 55,
    "text": "exactly",
    "type": "global function"
  }, {
    "id": 56,
    "text": "any",
    "type": "global function"
  }, {
    "id": 57,
    "text": "never",
    "type": "global function"
  }, {
    "id": 58,
    "text": "eqx",
    "type": "global function"
  }, {
    "id": 59,
    "text": "error",
    "type": "global function"
  }, {
    "id": 60,
    "text": "range",
    "type": "global function"
  }, {
    "id": 61,
    "text": "assert_equals",
    "type": "global function"
  }, {
    "id": 62,
    "text": "once",
    "type": "global function"
  }, {
    "id": 63,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 64,
    "text": "type",
    "type": "global function"
  }, {
    "id": 65,
    "text": "",
    "type": "variable container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "",
    "type": "global variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  } ]
}