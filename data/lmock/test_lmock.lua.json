{
  "_filename": "test_lmock.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lmock/ut/test_lmock.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 20
  }, {
    "from": 10,
    "label": "has",
    "to": 21
  }, {
    "from": 10,
    "label": "has",
    "to": 22
  }, {
    "from": 10,
    "label": "has",
    "to": 23
  }, {
    "from": 10,
    "label": "has",
    "to": 24
  }, {
    "from": 10,
    "label": "has",
    "to": 25
  }, {
    "from": 10,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 28
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 28
  }, {
    "from": 42,
    "label": "has",
    "to": 38
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 28
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 40
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 28
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 40
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 28
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 56,
    "label": "has",
    "to": 40
  }, {
    "from": 56,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 28
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 40
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 28
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 70,
    "label": "has",
    "to": 40
  }, {
    "from": 70,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 28
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 79,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 79,
    "label": "has",
    "to": 88
  }, {
    "from": 79,
    "label": "has",
    "to": 89
  }, {
    "from": 79,
    "label": "has",
    "to": 90
  }, {
    "from": 79,
    "label": "has",
    "to": 91
  }, {
    "from": 79,
    "label": "has",
    "to": 40
  }, {
    "from": 79,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 28
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 43
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 28
  }, {
    "from": 99,
    "label": "has",
    "to": 94
  }, {
    "from": 99,
    "label": "has",
    "to": 95
  }, {
    "from": 99,
    "label": "has",
    "to": 95
  }, {
    "from": 99,
    "label": "has",
    "to": 96
  }, {
    "from": 99,
    "label": "has",
    "to": 97
  }, {
    "from": 99,
    "label": "has",
    "to": 96
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 40
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 108,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 28
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 113,
    "label": "has",
    "to": 40
  }, {
    "from": 113,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 28
  }, {
    "from": 122,
    "label": "has",
    "to": 38
  }, {
    "from": 122,
    "label": "has",
    "to": 39
  }, {
    "from": 122,
    "label": "has",
    "to": 40
  }, {
    "from": 122,
    "label": "has",
    "to": 34
  }, {
    "from": 122,
    "label": "has",
    "to": 24
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 10,
    "label": "calls",
    "to": 132
  }, {
    "from": 10,
    "label": "calls",
    "to": 132
  }, {
    "from": 10,
    "label": "calls",
    "to": 132
  }, {
    "from": 10,
    "label": "calls",
    "to": 132
  }, {
    "from": 10,
    "label": "calls",
    "to": 132
  }, {
    "from": 10,
    "label": "calls",
    "to": 132
  }, {
    "from": 10,
    "label": "calls",
    "to": 132
  }, {
    "from": 10,
    "label": "calls",
    "to": 132
  }, {
    "from": 10,
    "label": "calls",
    "to": 132
  }, {
    "from": 27,
    "label": "calls",
    "to": 132
  }, {
    "from": 27,
    "label": "calls",
    "to": 132
  }, {
    "from": 27,
    "label": "calls",
    "to": 132
  }, {
    "from": 27,
    "label": "calls",
    "to": 132
  }, {
    "from": 27,
    "label": "calls",
    "to": 132
  }, {
    "from": 45,
    "label": "calls",
    "to": 132
  }, {
    "from": 52,
    "label": "calls",
    "to": 132
  }, {
    "from": 56,
    "label": "calls",
    "to": 132
  }, {
    "from": 56,
    "label": "calls",
    "to": 132
  }, {
    "from": 56,
    "label": "calls",
    "to": 132
  }, {
    "from": 64,
    "label": "calls",
    "to": 132
  }, {
    "from": 64,
    "label": "calls",
    "to": 132
  }, {
    "from": 70,
    "label": "calls",
    "to": 132
  }, {
    "from": 70,
    "label": "calls",
    "to": 132
  }, {
    "from": 70,
    "label": "calls",
    "to": 132
  }, {
    "from": 79,
    "label": "calls",
    "to": 132
  }, {
    "from": 79,
    "label": "calls",
    "to": 132
  }, {
    "from": 79,
    "label": "calls",
    "to": 132
  }, {
    "from": 79,
    "label": "calls",
    "to": 132
  }, {
    "from": 79,
    "label": "calls",
    "to": 132
  }, {
    "from": 79,
    "label": "calls",
    "to": 132
  }, {
    "from": 113,
    "label": "calls",
    "to": 132
  }, {
    "from": 56,
    "label": "calls",
    "to": 3
  }, {
    "from": 79,
    "label": "calls",
    "to": 3
  }, {
    "from": 79,
    "label": "calls",
    "to": 3
  }, {
    "from": 93,
    "label": "calls",
    "to": 3
  }, {
    "from": 99,
    "label": "calls",
    "to": 3
  }, {
    "from": 37,
    "label": "calls",
    "to": 2
  }, {
    "from": 45,
    "label": "calls",
    "to": 2
  }, {
    "from": 64,
    "label": "calls",
    "to": 2
  }, {
    "from": 122,
    "label": "calls",
    "to": 2
  }, {
    "from": 27,
    "label": "calls",
    "to": 127
  }, {
    "from": 27,
    "label": "calls",
    "to": 127
  }, {
    "from": 122,
    "label": "calls",
    "to": 127
  }, {
    "from": 10,
    "label": "calls",
    "to": 129
  }, {
    "from": 122,
    "label": "calls",
    "to": 129
  }, {
    "from": 37,
    "label": "calls",
    "to": 133
  }, {
    "from": 42,
    "label": "calls",
    "to": 133
  }, {
    "from": 45,
    "label": "calls",
    "to": 133
  }, {
    "from": 52,
    "label": "calls",
    "to": 133
  }, {
    "from": 56,
    "label": "calls",
    "to": 133
  }, {
    "from": 56,
    "label": "calls",
    "to": 133
  }, {
    "from": 56,
    "label": "calls",
    "to": 133
  }, {
    "from": 64,
    "label": "calls",
    "to": 133
  }, {
    "from": 70,
    "label": "calls",
    "to": 133
  }, {
    "from": 70,
    "label": "calls",
    "to": 133
  }, {
    "from": 79,
    "label": "calls",
    "to": 133
  }, {
    "from": 79,
    "label": "calls",
    "to": 133
  }, {
    "from": 79,
    "label": "calls",
    "to": 133
  }, {
    "from": 79,
    "label": "calls",
    "to": 133
  }, {
    "from": 79,
    "label": "calls",
    "to": 133
  }, {
    "from": 79,
    "label": "calls",
    "to": 133
  }, {
    "from": 93,
    "label": "calls",
    "to": 133
  }, {
    "from": 93,
    "label": "calls",
    "to": 133
  }, {
    "from": 93,
    "label": "calls",
    "to": 133
  }, {
    "from": 99,
    "label": "calls",
    "to": 133
  }, {
    "from": 99,
    "label": "calls",
    "to": 133
  }, {
    "from": 99,
    "label": "calls",
    "to": 133
  }, {
    "from": 113,
    "label": "calls",
    "to": 133
  }, {
    "from": 113,
    "label": "calls",
    "to": 133
  }, {
    "from": 113,
    "label": "calls",
    "to": 133
  }, {
    "from": 122,
    "label": "calls",
    "to": 133
  }, {
    "from": 56,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 134
  }, {
    "from": 45,
    "label": "calls",
    "to": 134
  }, {
    "from": 52,
    "label": "calls",
    "to": 134
  }, {
    "from": 56,
    "label": "calls",
    "to": 134
  }, {
    "from": 56,
    "label": "calls",
    "to": 134
  }, {
    "from": 56,
    "label": "calls",
    "to": 134
  }, {
    "from": 56,
    "label": "calls",
    "to": 134
  }, {
    "from": 64,
    "label": "calls",
    "to": 134
  }, {
    "from": 64,
    "label": "calls",
    "to": 134
  }, {
    "from": 70,
    "label": "calls",
    "to": 134
  }, {
    "from": 70,
    "label": "calls",
    "to": 134
  }, {
    "from": 70,
    "label": "calls",
    "to": 134
  }, {
    "from": 79,
    "label": "calls",
    "to": 134
  }, {
    "from": 79,
    "label": "calls",
    "to": 134
  }, {
    "from": 79,
    "label": "calls",
    "to": 134
  }, {
    "from": 79,
    "label": "calls",
    "to": 134
  }, {
    "from": 79,
    "label": "calls",
    "to": 134
  }, {
    "from": 79,
    "label": "calls",
    "to": 134
  }, {
    "from": 113,
    "label": "calls",
    "to": 134
  }, {
    "from": 113,
    "label": "calls",
    "to": 134
  }, {
    "from": 113,
    "label": "calls",
    "to": 134
  }, {
    "from": 113,
    "label": "calls",
    "to": 134
  }, {
    "from": 49,
    "label": "calls",
    "to": 131
  }, {
    "from": 102,
    "label": "calls",
    "to": 131
  }, {
    "from": 105,
    "label": "calls",
    "to": 131
  }, {
    "from": 2,
    "label": "calls",
    "to": 131
  }, {
    "from": 52,
    "label": "calls",
    "to": 49
  }, {
    "from": 70,
    "label": "calls",
    "to": 49
  }, {
    "from": 70,
    "label": "calls",
    "to": 49
  }, {
    "from": 10,
    "label": "calls",
    "to": 128
  }, {
    "from": 27,
    "label": "calls",
    "to": 128
  }, {
    "from": 37,
    "label": "calls",
    "to": 128
  }, {
    "from": 42,
    "label": "calls",
    "to": 128
  }, {
    "from": 45,
    "label": "calls",
    "to": 128
  }, {
    "from": 52,
    "label": "calls",
    "to": 128
  }, {
    "from": 56,
    "label": "calls",
    "to": 128
  }, {
    "from": 64,
    "label": "calls",
    "to": 128
  }, {
    "from": 70,
    "label": "calls",
    "to": 128
  }, {
    "from": 79,
    "label": "calls",
    "to": 128
  }, {
    "from": 93,
    "label": "calls",
    "to": 128
  }, {
    "from": 99,
    "label": "calls",
    "to": 128
  }, {
    "from": 113,
    "label": "calls",
    "to": 128
  }, {
    "from": 122,
    "label": "calls",
    "to": 128
  }, {
    "from": 27,
    "label": "calls",
    "to": 135
  }, {
    "from": 27,
    "label": "calls",
    "to": 135
  }, {
    "from": 27,
    "label": "calls",
    "to": 135
  }, {
    "from": 27,
    "label": "calls",
    "to": 135
  }, {
    "from": 108,
    "label": "calls",
    "to": 102
  }, {
    "from": 42,
    "label": "calls",
    "to": 130
  }, {
    "from": 70,
    "label": "calls",
    "to": 130
  }, {
    "from": 93,
    "label": "calls",
    "to": 130
  }, {
    "from": 99,
    "label": "calls",
    "to": 130
  }, {
    "from": 113,
    "label": "calls",
    "to": 130
  }, {
    "from": 122,
    "label": "calls",
    "to": 130
  }, {
    "from": 122,
    "label": "calls",
    "to": 130
  }, {
    "from": 56,
    "label": "calls",
    "to": 4
  }, {
    "from": 79,
    "label": "calls",
    "to": 4
  }, {
    "from": 93,
    "label": "calls",
    "to": 4
  }, {
    "from": 99,
    "label": "calls",
    "to": 4
  }, {
    "from": 99,
    "label": "calls",
    "to": 4
  }, {
    "from": 108,
    "label": "calls",
    "to": 105
  }, {
    "from": 108,
    "label": "calls",
    "to": 105
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 126,
    "label": "declares",
    "to": 2
  }, {
    "from": 126,
    "label": "declares",
    "to": 3
  }, {
    "from": 126,
    "label": "declares",
    "to": 4
  }, {
    "from": 126,
    "label": "declares",
    "to": 5
  }, {
    "from": 126,
    "label": "declares",
    "to": 6
  }, {
    "from": 126,
    "label": "declares",
    "to": 8
  }, {
    "from": 126,
    "label": "declares",
    "to": 10
  }, {
    "from": 126,
    "label": "declares",
    "to": 27
  }, {
    "from": 126,
    "label": "declares",
    "to": 37
  }, {
    "from": 126,
    "label": "declares",
    "to": 42
  }, {
    "from": 126,
    "label": "declares",
    "to": 45
  }, {
    "from": 126,
    "label": "declares",
    "to": 49
  }, {
    "from": 126,
    "label": "declares",
    "to": 52
  }, {
    "from": 126,
    "label": "declares",
    "to": 56
  }, {
    "from": 126,
    "label": "declares",
    "to": 64
  }, {
    "from": 126,
    "label": "declares",
    "to": 70
  }, {
    "from": 126,
    "label": "declares",
    "to": 79
  }, {
    "from": 126,
    "label": "declares",
    "to": 93
  }, {
    "from": 126,
    "label": "declares",
    "to": 99
  }, {
    "from": 126,
    "label": "declares",
    "to": 102
  }, {
    "from": 126,
    "label": "declares",
    "to": 105
  }, {
    "from": 126,
    "label": "declares",
    "to": 108
  }, {
    "from": 126,
    "label": "declares",
    "to": 113
  }, {
    "from": 126,
    "label": "declares",
    "to": 120
  }, {
    "from": 126,
    "label": "declares",
    "to": 122
  }, {
    "from": 1,
    "label": "contains",
    "to": 137
  }, {
    "from": 1,
    "label": "contains",
    "to": 138
  }, {
    "from": 137,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 136,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_lmock",
    "type": "module"
  }, {
    "id": 2,
    "text": "function foo() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function foo1() end",
    "type": "function"
  }, {
    "id": 4,
    "text": "function foo2() end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function foo3() end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function Testlmock:setUp()\r\n\t--print\"Testlmock:setUp\"\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function Testlmock:tearDown()\r\n\t--print\"Testlmock:tearDown\"\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function Testlmock:testSetTempEnvAfterCreateMock()\r\n\tlmock.create()\r\n\r\n\ta = 5\r\n\t_G.a = 5\r\n\tassert_equals( a , 5 )\r\n\tassert_equals( _G.a , 5 )\r\n\r\n\ta = 8\r\n\tassert_equals( a , 8 )\r\n\tassert_equals( _G.a , 5 )\r\n\r\n\t_G.a = 11\r\n\tassert_equals( a , 8 )\r\n\tassert_equals( _G.a , 11 )\r\n\r\n\ta = 35\r\n\t_G.a = 46\r\n\tassert_equals( a , 35 )\r\n\tassert_equals( _G.a , 46 )\r\n\r\n\tsetfenv( 1 , _G )\r\n\tassert_equals( a , 46 )\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "lmock.create()",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "a = 5",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "_G.a = 5",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "assert_equals( a , 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert_equals( _G.a , 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "a = 8",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "assert_equals( a , 8 )",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "_G.a = 11",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "assert_equals( _G.a , 11 )",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "a = 35",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "_G.a = 46",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "assert_equals( a , 35 )",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert_equals( _G.a , 46 )",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "setfenv( 1 , _G )",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "assert_equals( a , 46 )",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function Testlmock:testMockCreateMethod()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foo\" )\r\n\r\n\tassert_equals( type(foo) , \"function\" )\r\n\r\n\tmock:method( \"foo2\" )\r\n\tassert_equals( type(foo2) , \"function\" )\r\n\tassert_equals( type(foo) , \"function\" )\r\n\tassert( foo ~= foo2 )\r\n\r\n\tlocal oldFoo = foo\r\n\tmock:method( \"foo\" )\r\n\tassert_equals( type(foo) , \"function\" )\r\n\tassert_equals( oldFoo , foo )\r\n\tassert( foo ~= foo2 )\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local mock = lmock.create()",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "mock:method( \"foo\" )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert_equals( type(foo) , \"function\" )",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "mock:method( \"foo2\" )",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert_equals( type(foo2) , \"function\" )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert( foo ~= foo2 )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local oldFoo = foo",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "assert_equals( oldFoo , foo )",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function Testlmock:testCheckMockMethodInvokeOnce()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\r\n\tfoo()\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "foo()",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "mock:verify()",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function Testlmock:testFailCheckMockMethodNotInvokeOnce()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\r\n\tassert_error( mock.verify , mock )\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "assert_error( mock.verify , mock )",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function Testlmock:testMockOnceSuccess()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq( 4 ) , lmock.eq( 8 ) )\r\n\t\t:will( 10 )\r\n\t\r\n\tassert_equals( foo( 4 , 8 ) , 10 )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq( 4 ) , lmock.eq( 8 ) )\r\n\t\t:will( 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert_equals( foo( 4 , 8 ) , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function foobar( a )\r\n\terror( \"the mock donot replace origin function , asshole\" )\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "error( \"the mock donot replace origin function , asshole\" )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function Testlmock:testMockCanReplaceTheGlobalFunction()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foobar\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"bar\") )\r\n\t\t:will( 55 )\r\n\t\r\n\tassert_equals( foobar( \"bar\" ) , 55 )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "mock:method( \"foobar\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"bar\") )\r\n\t\t:will( 55 )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert_equals( foobar( \"bar\" ) , 55 )",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function Testlmock:testMoreMethodWorkTogether()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foo1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(5) )\r\n\t\t:will( 25 )\r\n\t\r\n\tmock:method( \"foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq( \"god\" ) )\r\n\t\t:will( \"dam\" )\r\n\r\n\tmock:method( \"foo3\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq( 87 ) , lmock.eq( \"god\" ) )\r\n\t\t:will( \"dam11\" )\r\n\r\n\tassert_equals( foo1( 5 ) , 25 )\r\n\tassert_equals( foo2( \"god\" ) , \"dam\" )\r\n\tassert_equals( foo3( 87 , \"god\" ) , \"dam11\" )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "mock:method( \"foo1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(5) )\r\n\t\t:will( 25 )",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "mock:method( \"foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq( \"god\" ) )\r\n\t\t:will( \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "mock:method( \"foo3\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq( 87 ) , lmock.eq( \"god\" ) )\r\n\t\t:will( \"dam11\" )",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert_equals( foo1( 5 ) , 25 )",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert_equals( foo2( \"god\" ) , \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert_equals( foo3( 87 , \"god\" ) , \"dam11\" )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function Testlmock:testMockWithMoreReturn()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(4) , lmock.eq(\"god\") )\r\n\t\t:will( 87 , \"dam\" )\r\n\t\r\n\tlocal a , b = foo( 4 , \"god\" )\r\n\tassert_equals( a , 87 )\r\n\tassert_equals( b , \"dam\" )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(4) , lmock.eq(\"god\") )\r\n\t\t:will( 87 , \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "local a , b = foo( 4 , \"god\" )",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "assert_equals( a , 87 )",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert_equals( b , \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function Testlmock:testOkWithOneMethodMoreCall()\r\n\tassert_error( foobar )\r\n\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foobar\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"pixel\") )\r\n\t\t:will( 10 , \"a\" )\r\n\r\n\tmock:method( \"foobar\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(5) , lmock.eq(9) )\r\n\t\t:will( \"hwh\" )\r\n\t\r\n\tlocal a , b = foobar\"pixel\"\r\n\tassert_equals( a , 10 )\r\n\tassert_equals( b , \"a\" )\r\n\r\n\tassert_equals( foobar( 5 , 9 ) , \"hwh\" )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "assert_error( foobar )",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "mock:method( \"foobar\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"pixel\") )\r\n\t\t:will( 10 , \"a\" )",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "mock:method( \"foobar\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(5) , lmock.eq(9) )\r\n\t\t:will( \"hwh\" )",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "local a , b = foobar\"pixel\"",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "assert_equals( a , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert_equals( b , \"a\" )",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert_equals( foobar( 5 , 9 ) , \"hwh\" )",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function Testlmock:testOkWithMoreMethodMoreCall()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foo1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(4) )\r\n\t\t:will( 82 )\r\n\t\t\r\n\tmock:method( \"foo1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"pixel\") )\r\n\t\t:will( \"www.g.cn\" )\r\n\t\t\r\n\tmock:method( \"foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(89) )\r\n\t\t:will( \"god\" )\r\n\t\t\r\n\tmock:method( \"foo3\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(7) )\r\n\t\t:will( 49 )\r\n\t\t\r\n\tmock:method( \"foo3\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(8) )\r\n\t\t:will( 64 )\r\n\t\t\r\n\tmock:method( \"foo3\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(9) )\r\n\t\t:will( 81 )\r\n\t\r\n\tassert_equals( foo1(4) , 82 )\r\n\tassert_equals( foo2(89) , \"god\" )\r\n\tassert_equals( foo3(7) , 49 )\r\n\tassert_equals( foo3(8) , 64 )\r\n\tassert_equals( foo1(\"pixel\") , \"www.g.cn\" )\r\n\tassert_equals( foo3(9) , 81 )\r\n\t\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "mock:method( \"foo1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(4) )\r\n\t\t:will( 82 )",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "mock:method( \"foo1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"pixel\") )\r\n\t\t:will( \"www.g.cn\" )",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "mock:method( \"foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(89) )\r\n\t\t:will( \"god\" )",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "mock:method( \"foo3\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(7) )\r\n\t\t:will( 49 )",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "mock:method( \"foo3\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(8) )\r\n\t\t:will( 64 )",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "mock:method( \"foo3\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(9) )\r\n\t\t:will( 81 )",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "assert_equals( foo1(4) , 82 )",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert_equals( foo2(89) , \"god\" )",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "assert_equals( foo3(7) , 49 )",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert_equals( foo3(8) , 64 )",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assert_equals( foo1(\"pixel\") , \"www.g.cn\" )",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "assert_equals( foo3(9) , 81 )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function Testlmock:testFailWithNotEnoughCall()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foo1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t\r\n\tmock:method( \"foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\r\n\tmock:method( \"foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t\r\n\tfoo2()\r\n\tfoo1()\r\n\t\r\n\tassert_error( mock.verify , mock )\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "mock:method( \"foo1\" )\r\n\t\t:expects( lmock.once() )",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "mock:method( \"foo2\" )\r\n\t\t:expects( lmock.once() )",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "foo2()",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "foo1()",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function Testlmock:testFailWithOverloadCall()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foo1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t\r\n\tmock:method( \"foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t\r\n\tmock:method( \"foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\r\n\tfoo2()\r\n\tfoo1()\r\n\tfoo2()\r\n\tassert_error( foo2 )\r\n\t\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "assert_error( foo2 )",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function foobar1( a , b )\r\n\terror( \"asshole\" )\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "error( \"asshole\" )",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function foobar2( a )\r\n\terror( \"dam\" )\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "error( \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function invoke_foobar( a , b )\r\n\tfoobar2( a )\r\n\tfoobar1( a , b )\r\n\treturn foobar2( b )\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "foobar2( a )",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "foobar1( a , b )",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function Testlmock:testSetTesteeFunctionEnv()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"foobar1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(1) , lmock.eq(\"hello\") )\r\n\t\r\n\tmock:method( \"foobar2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(1) )\r\n\t\t\r\n\tmock:method( \"foobar2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"hello\") )\r\n\t\t:will( 10 )\r\n\t\t\r\n\tassert_equals( mock:run( invoke_foobar , 1 , \"hello\" ) , 10 )\r\n\t\r\n\tmock:verify()\r\n\r\n\tassert_error( invoke_foobar )\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "mock:method( \"foobar1\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(1) , lmock.eq(\"hello\") )",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "mock:method( \"foobar2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(1) )",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "mock:method( \"foobar2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"hello\") )\r\n\t\t:will( 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert_equals( mock:run( invoke_foobar , 1 , \"hello\" ) , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assert_error( invoke_foobar )",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function foo() error\"asshole foo\" end",
    "type": "function"
  }, {
    "id": 121,
    "text": "error\"asshole foo\"",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "function Testlmock:testCreateMethodNotChangeG()\r\n\tassert_error( foo )\r\n\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\r\n\tfoo()\r\n\r\n\tmock:verify()\r\n\t\r\n\tlocal oldFoo = foo\r\n\tsetfenv( 1 , _G )\r\n\tassert_error( foo )\r\n\tassert( oldFoo ~= foo )\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "assert_error( foo )",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assert( oldFoo ~= foo )",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "",
    "type": "function container"
  }, {
    "id": 127,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 128,
    "text": "create",
    "type": "global function"
  }, {
    "id": 129,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 130,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 131,
    "text": "error",
    "type": "global function"
  }, {
    "id": 132,
    "text": "assert_equals",
    "type": "global function"
  }, {
    "id": 133,
    "text": "once",
    "type": "global function"
  }, {
    "id": 134,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 135,
    "text": "type",
    "type": "global function"
  }, {
    "id": 136,
    "text": "",
    "type": "global variable"
  }, {
    "id": 137,
    "text": "",
    "type": "variable container"
  }, {
    "id": 138,
    "text": "",
    "type": "require container"
  }, {
    "id": 139,
    "text": "",
    "type": "global variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  } ]
}