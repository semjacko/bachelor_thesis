{
  "_filename": "test_mock_method.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lmock/ut/test_mock_method.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 18,
    "label": "calls",
    "to": 32
  }, {
    "from": 18,
    "label": "calls",
    "to": 32
  }, {
    "from": 25,
    "label": "calls",
    "to": 32
  }, {
    "from": 18,
    "label": "calls",
    "to": 31
  }, {
    "from": 25,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 14,
    "label": "calls",
    "to": 33
  }, {
    "from": 18,
    "label": "calls",
    "to": 33
  }, {
    "from": 25,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 14,
    "label": "calls",
    "to": 35
  }, {
    "from": 14,
    "label": "calls",
    "to": 35
  }, {
    "from": 18,
    "label": "calls",
    "to": 35
  }, {
    "from": 18,
    "label": "calls",
    "to": 35
  }, {
    "from": 25,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 18,
    "label": "calls",
    "to": 36
  }, {
    "from": 18,
    "label": "calls",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 2
  }, {
    "from": 30,
    "label": "declares",
    "to": 14
  }, {
    "from": 30,
    "label": "declares",
    "to": 18
  }, {
    "from": 30,
    "label": "declares",
    "to": 25
  }, {
    "from": 37,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 38,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_mock_method",
    "type": "module"
  }, {
    "id": 2,
    "text": "function TestMockMethod:testSuccessOnceCallWithMoreParamAndReturn()\r\n\tlocal method = lmock.CMockMethod.new( \"foo\" )\r\n\r\n\tmethod:expects( lmock.once() )\r\n\t\t:with( lmock.eq(5) , lmock.eq(\"god\") )\r\n\t\t:will( \"dam\" , 23 )\r\n\r\n\tmethod:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"god\") , lmock.eq(5) )\r\n\t\t:will( 23 , \"dam\" )\r\n\t\r\n\tlocal a , b = method:call( 5 , \"god\" )\r\n\tassert_equals( a , \"dam\" )\r\n\tassert_equals( b , 23 )\r\n\r\n\ta , b = method:call( \"god\" , 5 )\r\n\tassert_equals( a , 23 )\r\n\tassert_equals( b , \"dam\" )\r\n\r\n\tassert_equals( method:verify() , false )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local method = lmock.CMockMethod.new( \"foo\" )",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "method:expects( lmock.once() )\r\n\t\t:with( lmock.eq(5) , lmock.eq(\"god\") )\r\n\t\t:will( \"dam\" , 23 )",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "method:expects( lmock.once() )\r\n\t\t:with( lmock.eq(\"god\") , lmock.eq(5) )\r\n\t\t:will( 23 , \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local a , b = method:call( 5 , \"god\" )",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "assert_equals( a , \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assert_equals( b , 23 )",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "a , b = method:call( \"god\" , 5 )",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "assert_equals( a , 23 )",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert_equals( b , \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert_equals( method:verify() , false )",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function TestMockMethod:testFailWithNotEnoughCall()\r\n\tlocal method = lmock.CMockMethod.new( \"foo\" )\r\n\r\n\tmethod:expects( lmock.once() )\r\n\tmethod:expects( lmock.once() )\r\n\r\n\tmethod:verify()\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "method:expects( lmock.once() )",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "method:verify()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function TestMockMethod:testFailWithErrorParam()\r\n\tlocal method = lmock.CMockMethod.new( \"foo\" )\r\n\r\n\tmethod:expects( lmock.once() ):with( lmock.eq(1) )\r\n\tmethod:expects( lmock.once() ):with( lmock.eq(2) )\r\n\r\n\tassert_error( method.call , method , 10 )\r\n\tassert_error( method.call , method , 20 )\r\n\r\n\tassert( method:verify() )\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "method:expects( lmock.once() ):with( lmock.eq(1) )",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "method:expects( lmock.once() ):with( lmock.eq(2) )",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert_error( method.call , method , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert_error( method.call , method , 20 )",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert( method:verify() )",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function TestMockMethod:testFailWithOverloadCall()\r\n\tlocal method = lmock.CMockMethod.new( \"foo\" )\r\n\r\n\tmethod:expects( lmock.once() )\r\n\r\n\tmethod:call()\r\n\tassert_error( method.call , method )\r\n\r\n\tassert( not method:verify() )\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "method:call()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert_error( method.call , method )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert( not method:verify() )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 32,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 33,
    "text": "lmock.CMockMethod.new",
    "type": "global function"
  }, {
    "id": 34,
    "text": "assert_equals",
    "type": "global function"
  }, {
    "id": 35,
    "text": "once",
    "type": "global function"
  }, {
    "id": 36,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 37,
    "text": "",
    "type": "global variable"
  }, {
    "id": 38,
    "text": "",
    "type": "variable container"
  }, {
    "id": 39,
    "text": "",
    "type": "require container"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  }, {
    "id": 41,
    "text": "",
    "type": "n/a"
  } ]
}