{
  "_filename": "test_lmock2.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lmock/ut/test_lmock2.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 16
  }, {
    "from": 19,
    "label": "has",
    "to": 16
  }, {
    "from": 19,
    "label": "has",
    "to": 17
  }, {
    "from": 19,
    "label": "has",
    "to": 17
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 22,
    "label": "has",
    "to": 17
  }, {
    "from": 22,
    "label": "has",
    "to": 13
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 33,
    "label": "has",
    "to": 13
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 20
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 3
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 8
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 20
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 3
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 41
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 44
  }, {
    "from": 51,
    "label": "has",
    "to": 45
  }, {
    "from": 51,
    "label": "has",
    "to": 3
  }, {
    "from": 51,
    "label": "has",
    "to": 47
  }, {
    "from": 51,
    "label": "has",
    "to": 46
  }, {
    "from": 51,
    "label": "has",
    "to": 48
  }, {
    "from": 51,
    "label": "has",
    "to": 49
  }, {
    "from": 51,
    "label": "has",
    "to": 8
  }, {
    "from": 51,
    "label": "has",
    "to": 41
  }, {
    "from": 51,
    "label": "has",
    "to": 44
  }, {
    "from": 51,
    "label": "has",
    "to": 45
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 58,
    "label": "has",
    "to": 66
  }, {
    "from": 58,
    "label": "has",
    "to": 67
  }, {
    "from": 58,
    "label": "has",
    "to": 68
  }, {
    "from": 58,
    "label": "has",
    "to": 69
  }, {
    "from": 58,
    "label": "has",
    "to": 70
  }, {
    "from": 58,
    "label": "has",
    "to": 71
  }, {
    "from": 58,
    "label": "has",
    "to": 72
  }, {
    "from": 58,
    "label": "has",
    "to": 8
  }, {
    "from": 58,
    "label": "has",
    "to": 41
  }, {
    "from": 58,
    "label": "has",
    "to": 44
  }, {
    "from": 58,
    "label": "has",
    "to": 45
  }, {
    "from": 58,
    "label": "has",
    "to": 20
  }, {
    "from": 58,
    "label": "has",
    "to": 36
  }, {
    "from": 58,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 10,
    "label": "calls",
    "to": 89
  }, {
    "from": 15,
    "label": "calls",
    "to": 89
  }, {
    "from": 15,
    "label": "calls",
    "to": 89
  }, {
    "from": 19,
    "label": "calls",
    "to": 89
  }, {
    "from": 19,
    "label": "calls",
    "to": 89
  }, {
    "from": 22,
    "label": "calls",
    "to": 89
  }, {
    "from": 22,
    "label": "calls",
    "to": 89
  }, {
    "from": 24,
    "label": "calls",
    "to": 89
  }, {
    "from": 28,
    "label": "calls",
    "to": 89
  }, {
    "from": 33,
    "label": "calls",
    "to": 89
  }, {
    "from": 35,
    "label": "calls",
    "to": 89
  }, {
    "from": 35,
    "label": "calls",
    "to": 89
  }, {
    "from": 43,
    "label": "calls",
    "to": 89
  }, {
    "from": 43,
    "label": "calls",
    "to": 89
  }, {
    "from": 51,
    "label": "calls",
    "to": 89
  }, {
    "from": 51,
    "label": "calls",
    "to": 89
  }, {
    "from": 58,
    "label": "calls",
    "to": 89
  }, {
    "from": 58,
    "label": "calls",
    "to": 89
  }, {
    "from": 58,
    "label": "calls",
    "to": 89
  }, {
    "from": 58,
    "label": "calls",
    "to": 89
  }, {
    "from": 58,
    "label": "calls",
    "to": 89
  }, {
    "from": 58,
    "label": "calls",
    "to": 89
  }, {
    "from": 58,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 10,
    "label": "calls",
    "to": 90
  }, {
    "from": 10,
    "label": "calls",
    "to": 90
  }, {
    "from": 24,
    "label": "calls",
    "to": 90
  }, {
    "from": 24,
    "label": "calls",
    "to": 90
  }, {
    "from": 82,
    "label": "calls",
    "to": 87
  }, {
    "from": 82,
    "label": "calls",
    "to": 87
  }, {
    "from": 82,
    "label": "calls",
    "to": 87
  }, {
    "from": 82,
    "label": "calls",
    "to": 87
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 10,
    "label": "calls",
    "to": 83
  }, {
    "from": 15,
    "label": "calls",
    "to": 83
  }, {
    "from": 19,
    "label": "calls",
    "to": 83
  }, {
    "from": 22,
    "label": "calls",
    "to": 83
  }, {
    "from": 24,
    "label": "calls",
    "to": 83
  }, {
    "from": 28,
    "label": "calls",
    "to": 83
  }, {
    "from": 33,
    "label": "calls",
    "to": 83
  }, {
    "from": 35,
    "label": "calls",
    "to": 83
  }, {
    "from": 43,
    "label": "calls",
    "to": 83
  }, {
    "from": 51,
    "label": "calls",
    "to": 83
  }, {
    "from": 53,
    "label": "calls",
    "to": 83
  }, {
    "from": 58,
    "label": "calls",
    "to": 83
  }, {
    "from": 43,
    "label": "calls",
    "to": 86
  }, {
    "from": 51,
    "label": "calls",
    "to": 86
  }, {
    "from": 58,
    "label": "calls",
    "to": 86
  }, {
    "from": 58,
    "label": "calls",
    "to": 86
  }, {
    "from": 10,
    "label": "calls",
    "to": 85
  }, {
    "from": 10,
    "label": "calls",
    "to": 85
  }, {
    "from": 19,
    "label": "calls",
    "to": 85
  }, {
    "from": 22,
    "label": "calls",
    "to": 85
  }, {
    "from": 28,
    "label": "calls",
    "to": 85
  }, {
    "from": 33,
    "label": "calls",
    "to": 85
  }, {
    "from": 35,
    "label": "calls",
    "to": 85
  }, {
    "from": 35,
    "label": "calls",
    "to": 85
  }, {
    "from": 35,
    "label": "calls",
    "to": 85
  }, {
    "from": 35,
    "label": "calls",
    "to": 85
  }, {
    "from": 43,
    "label": "calls",
    "to": 85
  }, {
    "from": 43,
    "label": "calls",
    "to": 85
  }, {
    "from": 43,
    "label": "calls",
    "to": 85
  }, {
    "from": 43,
    "label": "calls",
    "to": 85
  }, {
    "from": 51,
    "label": "calls",
    "to": 85
  }, {
    "from": 51,
    "label": "calls",
    "to": 85
  }, {
    "from": 51,
    "label": "calls",
    "to": 85
  }, {
    "from": 51,
    "label": "calls",
    "to": 85
  }, {
    "from": 53,
    "label": "calls",
    "to": 85
  }, {
    "from": 53,
    "label": "calls",
    "to": 85
  }, {
    "from": 53,
    "label": "calls",
    "to": 85
  }, {
    "from": 58,
    "label": "calls",
    "to": 85
  }, {
    "from": 58,
    "label": "calls",
    "to": 85
  }, {
    "from": 58,
    "label": "calls",
    "to": 85
  }, {
    "from": 58,
    "label": "calls",
    "to": 85
  }, {
    "from": 2,
    "label": "calls",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 88
  }, {
    "from": 24,
    "label": "calls",
    "to": 88
  }, {
    "from": 35,
    "label": "calls",
    "to": 88
  }, {
    "from": 35,
    "label": "calls",
    "to": 88
  }, {
    "from": 58,
    "label": "calls",
    "to": 88
  }, {
    "from": 58,
    "label": "calls",
    "to": 88
  }, {
    "from": 58,
    "label": "calls",
    "to": 88
  }, {
    "from": 58,
    "label": "calls",
    "to": 88
  }, {
    "from": 58,
    "label": "calls",
    "to": 88
  }, {
    "from": 58,
    "label": "calls",
    "to": 88
  }, {
    "from": 58,
    "label": "calls",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 15,
    "label": "calls",
    "to": 91
  }, {
    "from": 15,
    "label": "calls",
    "to": 91
  }, {
    "from": 19,
    "label": "calls",
    "to": 91
  }, {
    "from": 19,
    "label": "calls",
    "to": 91
  }, {
    "from": 22,
    "label": "calls",
    "to": 91
  }, {
    "from": 35,
    "label": "calls",
    "to": 91
  }, {
    "from": 58,
    "label": "calls",
    "to": 91
  }, {
    "from": 35,
    "label": "calls",
    "to": 84
  }, {
    "from": 43,
    "label": "calls",
    "to": 84
  }, {
    "from": 51,
    "label": "calls",
    "to": 84
  }, {
    "from": 58,
    "label": "calls",
    "to": 84
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 82,
    "label": "declares",
    "to": 2
  }, {
    "from": 82,
    "label": "declares",
    "to": 10
  }, {
    "from": 82,
    "label": "declares",
    "to": 15
  }, {
    "from": 82,
    "label": "declares",
    "to": 19
  }, {
    "from": 82,
    "label": "declares",
    "to": 22
  }, {
    "from": 82,
    "label": "declares",
    "to": 24
  }, {
    "from": 82,
    "label": "declares",
    "to": 28
  }, {
    "from": 82,
    "label": "declares",
    "to": 33
  }, {
    "from": 82,
    "label": "declares",
    "to": 35
  }, {
    "from": 82,
    "label": "declares",
    "to": 43
  }, {
    "from": 82,
    "label": "declares",
    "to": 51
  }, {
    "from": 82,
    "label": "declares",
    "to": 53
  }, {
    "from": 82,
    "label": "declares",
    "to": 58
  }, {
    "from": 82,
    "label": "declares",
    "to": 74
  }, {
    "from": 82,
    "label": "declares",
    "to": 76
  }, {
    "from": 82,
    "label": "declares",
    "to": 78
  }, {
    "from": 82,
    "label": "declares",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 94
  }, {
    "from": 93,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 93,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 92,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_lmock2",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Testlmock2:testCallModuleMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(54) , lmock.eq(\"hwh\") )\r\n\t\t:will( 4488 , \"god\" )\r\n\r\n\tlocal a , b = mod1.mod2.foo( 54 , \"hwh\" )\r\n\tassert_equals( a , 4488 )\r\n\tassert_equals( b , \"god\" )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local mock = lmock.create()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "mock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(54) , lmock.eq(\"hwh\") )\r\n\t\t:will( 4488 , \"god\" )",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local a , b = mod1.mod2.foo( 54 , \"hwh\" )",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "assert_equals( a , 4488 )",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assert_equals( b , \"god\" )",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "mock:verify()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function Testlmock2:testFailWithErrorParam()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(2) , lmock.eq(\"dam\") )\r\n\t\t:will( 33 )\r\n\r\n\tassert_error( mod1.mod2.foo , 3 , \"uvw\" )\r\n\r\n\tassert_error( mock.verify , mock )\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "mock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(2) , lmock.eq(\"dam\") )\r\n\t\t:will( 33 )",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert_error( mod1.mod2.foo , 3 , \"uvw\" )",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert_error( mock.verify , mock )",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function Testlmock2:testMoreCallModuleMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\r\n\tmod1.mod2.foo()\r\n\tmod1.mod2.foo()\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "mock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "mod1.mod2.foo()",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function Testlmock2:testFailWithOverloadCallModuleMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\r\n\tmod1.mod2.foo()\r\n\tmod1.mod2.foo()\r\n\tassert_error( mod1.mod2.foo )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "assert_error( mod1.mod2.foo )",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function Testlmock2:testFailWithNotEnoughCallModuleMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\r\n\tmod1.mod2.foo()\r\n\t\r\n\tassert_error( mock.verify , mock )\t\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function Testlmock2:testCallMemberMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.mod2:foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(3) , lmock.eq(1) )\r\n\t\t:will( 7 )\r\n\t\r\n\tassert_equals( mod1.mod2:foo( 3 , 1 ) , 7 )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "mock:method( \"mod1.mod2:foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eq(3) , lmock.eq(1) )\r\n\t\t:will( 7 )",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert_equals( mod1.mod2:foo( 3 , 1 ) , 7 )",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function Testlmock2:testFailWithOverloadCallMemberMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.mod2:foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\r\n\tmod1.mod2:foo()\r\n\tassert_error( mod1.mod2.foo , mod1.mod2 )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "mock:method( \"mod1.mod2:foo\" )\r\n\t\t:expects( lmock.once() )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "mod1.mod2:foo()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert_error( mod1.mod2.foo , mod1.mod2 )",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function Testlmock2:testFailWithNotEnoughCallMemberMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.mod2:foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\r\n\tassert_error( mock.verify , mock )\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function Testlmock2:testCreateModuleMethodNotChangeG()\r\n\tassert_error( mod1.mod2.foo )\r\n\tassert_error( mod1.mod2.foo2 )\r\n\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will( 77 )\r\n\r\n\tmock:method( \"mod1.mod2:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will( \"lua\" )\r\n\r\n\tassert_equals( mod1.mod2.foo() , 77 )\r\n\tassert_equals( mod1.mod2:foo2() , \"lua\" )\r\n\r\n\tmock:verify()\r\n\r\n\tsetfenv( 1 , _G )\r\n\tassert_error( mod1.mod2.foo )\r\n\tassert_error( mod1.mod2.foo2 )\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "assert_error( mod1.mod2.foo2 )",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "mock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will( 77 )",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "mock:method( \"mod1.mod2:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will( \"lua\" )",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert_equals( mod1.mod2.foo() , 77 )",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert_equals( mod1.mod2:foo2() , \"lua\" )",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "setfenv( 1 , _G )",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function Testlmock2:testCreateModuleMethodNotChangeG2()\r\n\tassert_error( mod1.foo )\r\n\tassert_error( mod1.foo2 )\r\n\t\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t\r\n\tmock:method( \"mod1:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t\r\n\tmod1.foo()\r\n\tmod1:foo2()\r\n\tmock:verify()\r\n\t\r\n\tsetfenv( 1 , _G )\r\n\tassert_error( mod1.foo )\r\n\tassert_error( mod1.foo2 )\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "assert_error( mod1.foo )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert_error( mod1.foo2 )",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "mock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.once() )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "mock:method( \"mod1:foo2\" )\r\n\t\t:expects( lmock.once() )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "mod1.foo()",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "mod1:foo2()",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function Testlmock2:testCreateModuleMethodNotChangeG3()\r\n\tassert_error( mod1.foo )\r\n\tassert_error( mod1.foo2 )\r\n\t\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"mod1:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t\t\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t\r\n\tmod1.foo()\r\n\tmod1:foo2()\r\n\tmock:verify()\r\n\t\r\n\tsetfenv( 1 , _G )\r\n\tassert_error( mod1.foo )\r\n\tassert_error( mod1.foo2 )\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function Testlmock2:testFailWithUnExistMethod()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tassert_error( mock.method , mock , \"unexist_method\" , true )\r\n\tassert_error( mock.method , mock , \"unmod.unmod.unmod.unexist_method\" , true )\r\n\tassert_error( mock.method , mock , \"unmod.unmod.unmod.un:unexist_method\" , true )\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "assert_error( mock.method , mock , \"unexist_method\" , true )",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert_error( mock.method , mock , \"unmod.unmod.unmod.unexist_method\" , true )",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert_error( mock.method , mock , \"unmod.unmod.unmod.un:unexist_method\" , true )",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function Testlmock2:test4CallWith4Method()\r\n\tlocal mock = lmock.create()\r\n\t\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(7)\r\n\t\r\n\tmock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(8)\r\n\t\t\r\n\tmock:method( \"mod1:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(9)\r\n\t\t\r\n\tmock:method( \"mod1:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(10)\r\n\t\t\r\n\tmock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(11)\r\n\t\t\r\n\tmock:method( \"mod1.mod2:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(12)\r\n\t\t\r\n\tmock:method( \"mod1.mod2:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(13)\r\n\t\t\r\n\tassert_equals( mod1.foo() , 7 )\r\n\tassert_equals( mod1.foo() , 8 )\r\n\tassert_equals( mod1:foo2() , 9 )\r\n\tassert_equals( mod1:foo2() , 10 )\r\n\tassert_equals( mod1.mod2.foo() , 11 )\r\n\tassert_equals( mod1.mod2:foo2() , 12 )\r\n\tassert_equals( mod1.mod2:foo2() , 13 )\r\n\t\r\n\tmock:verify()\r\n\t\r\n\tsetfenv( 1 , _G )\r\n\tassert_error( mod1.foo )\r\n\tassert_error( mod1.foo2 )\r\n\tassert_error( mod1.mod2.foo )\r\n\tassert_error( mod1.mod2.foo2 )\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "mock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(7)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "mock:method( \"mod1.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(8)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "mock:method( \"mod1:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(9)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "mock:method( \"mod1:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(10)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "mock:method( \"mod1.mod2.foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(11)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "mock:method( \"mod1.mod2:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(12)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "mock:method( \"mod1.mod2:foo2\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:will(13)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "assert_equals( mod1.foo() , 7 )",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert_equals( mod1.foo() , 8 )",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert_equals( mod1:foo2() , 9 )",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert_equals( mod1:foo2() , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert_equals( mod1.mod2.foo() , 11 )",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert_equals( mod1.mod2:foo2() , 12 )",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert_equals( mod1.mod2:foo2() , 13 )",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function () error\"asshole\" end",
    "type": "function"
  }, {
    "id": 75,
    "text": "error\"asshole\"",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "function () error\"asshole2\" end",
    "type": "function"
  }, {
    "id": 77,
    "text": "error\"asshole2\"",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "function () error\"dam\" end",
    "type": "function"
  }, {
    "id": 79,
    "text": "error\"dam\"",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "function () error\"dam2\" end",
    "type": "function"
  }, {
    "id": 81,
    "text": "error\"dam2\"",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "function container"
  }, {
    "id": 83,
    "text": "create",
    "type": "global function"
  }, {
    "id": 84,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 85,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 86,
    "text": "foo",
    "type": "global function"
  }, {
    "id": 87,
    "text": "error",
    "type": "global function"
  }, {
    "id": 88,
    "text": "assert_equals",
    "type": "global function"
  }, {
    "id": 89,
    "text": "once",
    "type": "global function"
  }, {
    "id": 90,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 91,
    "text": "mod1.mod2.foo",
    "type": "global function"
  }, {
    "id": 92,
    "text": "",
    "type": "global variable"
  }, {
    "id": 93,
    "text": "",
    "type": "variable container"
  }, {
    "id": 94,
    "text": "",
    "type": "require container"
  }, {
    "id": 95,
    "text": "",
    "type": "global variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "global variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  } ]
}