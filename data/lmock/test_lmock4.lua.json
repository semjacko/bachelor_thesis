{
  "_filename": "test_lmock4.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lmock/ut/test_lmock4.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 39,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 50
  }, {
    "from": 56,
    "label": "has",
    "to": 51
  }, {
    "from": 56,
    "label": "has",
    "to": 53
  }, {
    "from": 56,
    "label": "has",
    "to": 52
  }, {
    "from": 56,
    "label": "has",
    "to": 53
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 3
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 8
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 53
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 3
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 8
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 10,
    "label": "calls",
    "to": 94
  }, {
    "from": 20,
    "label": "calls",
    "to": 94
  }, {
    "from": 31,
    "label": "calls",
    "to": 94
  }, {
    "from": 2,
    "label": "calls",
    "to": 102
  }, {
    "from": 2,
    "label": "calls",
    "to": 102
  }, {
    "from": 76,
    "label": "calls",
    "to": 102
  }, {
    "from": 89,
    "label": "calls",
    "to": 102
  }, {
    "from": 89,
    "label": "calls",
    "to": 102
  }, {
    "from": 89,
    "label": "calls",
    "to": 102
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 20,
    "label": "calls",
    "to": 95
  }, {
    "from": 20,
    "label": "calls",
    "to": 95
  }, {
    "from": 39,
    "label": "calls",
    "to": 95
  }, {
    "from": 39,
    "label": "calls",
    "to": 95
  }, {
    "from": 39,
    "label": "calls",
    "to": 95
  }, {
    "from": 47,
    "label": "calls",
    "to": 95
  }, {
    "from": 47,
    "label": "calls",
    "to": 95
  }, {
    "from": 47,
    "label": "calls",
    "to": 95
  }, {
    "from": 47,
    "label": "calls",
    "to": 95
  }, {
    "from": 47,
    "label": "calls",
    "to": 95
  }, {
    "from": 47,
    "label": "calls",
    "to": 95
  }, {
    "from": 47,
    "label": "calls",
    "to": 95
  }, {
    "from": 56,
    "label": "calls",
    "to": 95
  }, {
    "from": 56,
    "label": "calls",
    "to": 95
  }, {
    "from": 56,
    "label": "calls",
    "to": 95
  }, {
    "from": 56,
    "label": "calls",
    "to": 95
  }, {
    "from": 56,
    "label": "calls",
    "to": 95
  }, {
    "from": 82,
    "label": "calls",
    "to": 95
  }, {
    "from": 82,
    "label": "calls",
    "to": 95
  }, {
    "from": 2,
    "label": "calls",
    "to": 103
  }, {
    "from": 2,
    "label": "calls",
    "to": 103
  }, {
    "from": 10,
    "label": "calls",
    "to": 103
  }, {
    "from": 10,
    "label": "calls",
    "to": 103
  }, {
    "from": 2,
    "label": "calls",
    "to": 107
  }, {
    "from": 2,
    "label": "calls",
    "to": 107
  }, {
    "from": 10,
    "label": "calls",
    "to": 107
  }, {
    "from": 20,
    "label": "calls",
    "to": 107
  }, {
    "from": 24,
    "label": "calls",
    "to": 107
  }, {
    "from": 31,
    "label": "calls",
    "to": 107
  }, {
    "from": 39,
    "label": "calls",
    "to": 107
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 47,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 108
  }, {
    "from": 2,
    "label": "calls",
    "to": 108
  }, {
    "from": 10,
    "label": "calls",
    "to": 108
  }, {
    "from": 24,
    "label": "calls",
    "to": 108
  }, {
    "from": 24,
    "label": "calls",
    "to": 108
  }, {
    "from": 24,
    "label": "calls",
    "to": 108
  }, {
    "from": 31,
    "label": "calls",
    "to": 108
  }, {
    "from": 31,
    "label": "calls",
    "to": 108
  }, {
    "from": 61,
    "label": "calls",
    "to": 108
  }, {
    "from": 61,
    "label": "calls",
    "to": 108
  }, {
    "from": 76,
    "label": "calls",
    "to": 108
  }, {
    "from": 76,
    "label": "calls",
    "to": 108
  }, {
    "from": 89,
    "label": "calls",
    "to": 108
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 71,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 96
  }, {
    "from": 76,
    "label": "calls",
    "to": 96
  }, {
    "from": 89,
    "label": "calls",
    "to": 96
  }, {
    "from": 24,
    "label": "calls",
    "to": 100
  }, {
    "from": 76,
    "label": "calls",
    "to": 100
  }, {
    "from": 24,
    "label": "calls",
    "to": 104
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 31,
    "label": "calls",
    "to": 106
  }, {
    "from": 31,
    "label": "calls",
    "to": 106
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 47,
    "label": "calls",
    "to": 106
  }, {
    "from": 47,
    "label": "calls",
    "to": 106
  }, {
    "from": 56,
    "label": "calls",
    "to": 106
  }, {
    "from": 56,
    "label": "calls",
    "to": 106
  }, {
    "from": 61,
    "label": "calls",
    "to": 106
  }, {
    "from": 61,
    "label": "calls",
    "to": 106
  }, {
    "from": 61,
    "label": "calls",
    "to": 106
  }, {
    "from": 61,
    "label": "calls",
    "to": 106
  }, {
    "from": 61,
    "label": "calls",
    "to": 106
  }, {
    "from": 61,
    "label": "calls",
    "to": 106
  }, {
    "from": 71,
    "label": "calls",
    "to": 106
  }, {
    "from": 71,
    "label": "calls",
    "to": 106
  }, {
    "from": 82,
    "label": "calls",
    "to": 106
  }, {
    "from": 82,
    "label": "calls",
    "to": 106
  }, {
    "from": 89,
    "label": "calls",
    "to": 106
  }, {
    "from": 89,
    "label": "calls",
    "to": 106
  }, {
    "from": 89,
    "label": "calls",
    "to": 106
  }, {
    "from": 56,
    "label": "calls",
    "to": 105
  }, {
    "from": 76,
    "label": "calls",
    "to": 101
  }, {
    "from": 82,
    "label": "calls",
    "to": 101
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 93,
    "label": "declares",
    "to": 2
  }, {
    "from": 93,
    "label": "declares",
    "to": 10
  }, {
    "from": 93,
    "label": "declares",
    "to": 20
  }, {
    "from": 93,
    "label": "declares",
    "to": 24
  }, {
    "from": 93,
    "label": "declares",
    "to": 31
  }, {
    "from": 93,
    "label": "declares",
    "to": 39
  }, {
    "from": 93,
    "label": "declares",
    "to": 47
  }, {
    "from": 93,
    "label": "declares",
    "to": 56
  }, {
    "from": 93,
    "label": "declares",
    "to": 61
  }, {
    "from": 93,
    "label": "declares",
    "to": 71
  }, {
    "from": 93,
    "label": "declares",
    "to": 76
  }, {
    "from": 93,
    "label": "declares",
    "to": 82
  }, {
    "from": 93,
    "label": "declares",
    "to": 89
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 1,
    "label": "contains",
    "to": 111
  }, {
    "from": 110,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 109,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_lmock4",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Testlmock4:testOutOrderButMatchParamOnCall()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx( 3 ) , lmock.eq( 5 ) )\r\n\t\t:will( 15 )\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx( 5 ) , lmock.eq( 3 ) )\r\n\t\t:will( 151 )\r\n\r\n\tassert_equals( 151 , foo( 5 , 3 ) )\r\n\tassert_equals( 15 , foo( 3 , 5 ) )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local mock = lmock.create()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx( 3 ) , lmock.eq( 5 ) )\r\n\t\t:will( 15 )",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.once() )\r\n\t\t:with( lmock.eqx( 5 ) , lmock.eq( 3 ) )\r\n\t\t:will( 151 )",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "assert_equals( 151 , foo( 5 , 3 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assert_equals( 15 , foo( 3 , 5 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "mock:verify()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function Testlmock4:testInvokerParameterMatch()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\tinvoker:with( lmock.eq( 4 ) , lmock.eqx( \"lua\" ) , lmock.eqx( 53 ) )\r\n\r\n\tassert( invoker:matchParameter( 4 , \"lua\" , 53 ) )\r\n\tassert( not invoker:matchParameter( 4 , \"lua \" , 53 ) )\r\n\tassert( not invoker:matchParameter( 3 , \"lua\" , 53 ) )\r\n\tassert( not invoker:matchParameter( 4 , \"lua\" , 50 ) )\r\n\r\n\tassert( not invoker:matchParameter( 4 ) )\r\n\tassert( invoker:matchParameter( 4 , \"lua\" , 53 , 55 ) )\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local invoker = lmock.CMockInvoker.new( lmock.once() )",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "invoker:with( lmock.eq( 4 ) , lmock.eqx( \"lua\" ) , lmock.eqx( 53 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert( invoker:matchParameter( 4 , \"lua\" , 53 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert( not invoker:matchParameter( 4 , \"lua \" , 53 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert( not invoker:matchParameter( 3 , \"lua\" , 53 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert( not invoker:matchParameter( 4 , \"lua\" , 50 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert( not invoker:matchParameter( 4 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert( invoker:matchParameter( 4 , \"lua\" , 53 , 55 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function Testlmock4:testInvokerParameterMatchWithoutParam()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\r\n\tassert( invoker:matchParameter() )\r\n\tassert( invoker:matchParameter( 1 ) )\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert( invoker:matchParameter() )",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert( invoker:matchParameter( 1 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function Testlmock4:testMethodPrintParameterError()\r\n\tlocal method = lmock.CMockMethod.new( \"foo\" )\r\n\tmethod:expects( lmock.once() )\r\n\t\t:with( lmock.eq( 4 ) , lmock.eq( 8 ) )\r\n\t\t:will( 10 , \"lua\" )\r\n\tmethod:expects( lmock.exactly( 2 ) )\r\n\t\t:with( lmock.eq( \"lua\" ) )\r\n\t\t:will( \"good\" )\r\n\tmethod:default()\r\n\t\t:will( \"lua\" )\r\n\t\r\n\tassert_error( method.printParameterError , 10 )\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local method = lmock.CMockMethod.new( \"foo\" )",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "method:expects( lmock.once() )\r\n\t\t:with( lmock.eq( 4 ) , lmock.eq( 8 ) )\r\n\t\t:will( 10 , \"lua\" )",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "method:expects( lmock.exactly( 2 ) )\r\n\t\t:with( lmock.eq( \"lua\" ) )\r\n\t\t:will( \"good\" )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "method:default()\r\n\t\t:will( \"lua\" )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assert_error( method.printParameterError , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function Testlmock4:testInvokerToString()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\tinvoker:with( lmock.eq( 2 ) , lmock.eq( \"lua\" ) )\r\n\t\t:will( 10 , \"good\" )\r\n\tlocal str = \r\n[[  :expects(lmock.once())\r\n  :invoke(0)\r\n  :with(lmock.eq(2),lmock.eq(\"lua\"))\r\n  :will(10,\"good\")\r\n]]\r\n\tassert_equals( invoker:toString() , str )\r\n\r\n\tinvoker:updateRestrict()\r\n\tstr = \r\n[[  :expects(lmock.once())\r\n  :invoke(1)\r\n  :with(lmock.eq(2),lmock.eq(\"lua\"))\r\n  :will(10,\"good\")\r\n]]\r\n\tassert_equals( str , invoker:toString() )\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "invoker:with( lmock.eq( 2 ) , lmock.eq( \"lua\" ) )\r\n\t\t:will( 10 , \"good\" )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local str = \r\n[[  :expects(lmock.once())\r\n  :invoke(0)\r\n  :with(lmock.eq(2),lmock.eq(\"lua\"))\r\n  :will(10,\"good\")\r\n]]",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "assert_equals( invoker:toString() , str )",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "invoker:updateRestrict()",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "str = \r\n[[  :expects(lmock.once())\r\n  :invoke(1)\r\n  :with(lmock.eq(2),lmock.eq(\"lua\"))\r\n  :will(10,\"good\")\r\n]]",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "assert_equals( str , invoker:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function Testlmock4:testOnce()\r\n\tlocal once = lmock.once()\r\n\r\n\tassert_equals( \r\n[[  :expects(lmock.once())\r\n  :invoke(0)\r\n]] , once:toString() )\r\n\r\n\tassert( once:validate() )\r\n\tassert( not once:update() )\r\n\tassert( not once:validate() )\r\n\r\n\tassert_equals( \r\n[[  :expects(lmock.once())\r\n  :invoke(1)\r\n]] , once:toString() )\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local once = lmock.once()",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "assert_equals( \r\n[[  :expects(lmock.once())\r\n  :invoke(0)\r\n]] , once:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert( once:validate() )",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert( not once:update() )",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "assert( not once:validate() )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert_equals( \r\n[[  :expects(lmock.once())\r\n  :invoke(1)\r\n]] , once:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function Testlmock4:testExactly()\r\n\tlocal r = lmock.exactly( 3 )\r\n\r\n\tassert_equals( \r\n[[  :expects(lmock.exactly(3))\r\n  :invoke(0)\r\n]], r:toString() )\r\n\r\n\tassert( r:validate() )\r\n\tassert( r:update() )\r\n\tassert( r:validate() )\r\n\tassert( r:update() )\r\n\tassert( r:validate() )\r\n\tassert( not r:update() )\r\n\tassert( not r:validate() )\r\n\r\n\tassert_equals( \r\n[[  :expects(lmock.exactly(3))\r\n  :invoke(3)\r\n]], r:toString() )\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local r = lmock.exactly( 3 )",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "assert_equals( \r\n[[  :expects(lmock.exactly(3))\r\n  :invoke(0)\r\n]], r:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert( r:validate() )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert( r:update() )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert( not r:update() )",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert( not r:validate() )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert_equals( \r\n[[  :expects(lmock.exactly(3))\r\n  :invoke(3)\r\n]], r:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function Testlmock4:testRange()\r\n\tlocal r = lmock.range( 1 , 2 )\r\n\t\r\n\tassert_equals( \r\n[[  :expects(lmock.range(1,2))\r\n  :invoke(0)\r\n]] , r:toString() )\r\n\r\n\tassert( r:validate() )\r\n\tassert( r:update() )\r\n\tassert( not r:validate() )\r\n\tassert( not r:update() )\r\n\tassert( not r:validate() )\r\n\r\n\tassert_equals( \r\n[[  :expects(lmock.range(1,2))\r\n  :invoke(2)\r\n]] , r:toString() )\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local r = lmock.range( 1 , 2 )",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "assert_equals( \r\n[[  :expects(lmock.range(1,2))\r\n  :invoke(0)\r\n]] , r:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert_equals( \r\n[[  :expects(lmock.range(1,2))\r\n  :invoke(2)\r\n]] , r:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function Testlmock4:testEq()\r\n\tlocal eq = lmock.eq( 5 )\r\n\tassert_equals( eq:test( 10 ) , false )\r\n\tassert_equals( true , eq:test( 5 ) )\r\n\tassert_equals( \"lmock.eq(5)\" , eq:toString() )\r\n\r\n\teq = lmock.eq( \"lua\" )\r\n\tassert_equals( false , eq:test( \"ooxx\" ) )\r\n\tassert_equals( true , eq:test( \"lua\" ) )\r\n\tassert_equals( \"lmock.eq(\\\"lua\\\")\" , eq:toString() )\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local eq = lmock.eq( 5 )",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "assert_equals( eq:test( 10 ) , false )",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert_equals( true , eq:test( 5 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "assert_equals( \"lmock.eq(5)\" , eq:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "eq = lmock.eq( \"lua\" )",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "assert_equals( false , eq:test( \"ooxx\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert_equals( true , eq:test( \"lua\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "assert_equals( \"lmock.eq(\\\"lua\\\")\" , eq:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function Testlmock4:testAny()\r\n\tlocal any = lmock.any()\r\n\tassert_equals( true , any:test( 4 ) )\r\n\tassert_equals( \"lmock.any()\" , any:toString() )\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local any = lmock.any()",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "assert_equals( true , any:test( 4 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "assert_equals( \"lmock.any()\" , any:toString() )",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function Testlmock4:testNeverExpect()\r\n\tlocal mock = lmock.create()\r\n\tmock:method( \"foo\" )\r\n\t\t:expects( lmock.never() )\r\n\t\t:with( lmock.eq(4) )\r\n\tmock:method( \"foo\" )\r\n\t\t:default()\r\n\t\t:with( lmock.eq(5) )\r\n\r\n\tfoo(5)\r\n\tassert_error( foo , 4 )\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "mock:method( \"foo\" )\r\n\t\t:expects( lmock.never() )\r\n\t\t:with( lmock.eq(4) )",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "mock:method( \"foo\" )\r\n\t\t:default()\r\n\t\t:with( lmock.eq(5) )",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "foo(5)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert_error( foo , 4 )",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function Testlmock4:testNeverObj()\r\n\tlocal r = lmock.never()\r\n\t\r\n\tassert( not r:validate() )\r\n\tassert_equals( r:toString() , \"  :expects(lmock.never())\\n\" )\r\n\tlocal rst , err = pcall( r.update , r )\r\n\tassert( not rst )\r\n\tassert_equals( err , \"Invocation should never invoked\\n\" )\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local r = lmock.never()",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "assert_equals( r:toString() , \"  :expects(lmock.never())\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "local rst , err = pcall( r.update , r )",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "assert( not rst )",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert_equals( err , \"Invocation should never invoked\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function Testlmock4:testStubsMethod()\r\n\tlocal mock = lmock.create()\r\n\r\n\tmock:method( \"foo\" )\r\n\t\t:stubs()\r\n\t\t:with( lmock.eq( 4 ) )\r\n\t\t:will( 10 )\r\n\r\n\tassert_equals( foo( 4 ) , 10 )\r\n\tassert_equals( foo( 4 ) , 10 )\r\n\tassert_equals( foo( 4 ) , 10 )\r\n\r\n\tmock:verify()\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "mock:method( \"foo\" )\r\n\t\t:stubs()\r\n\t\t:with( lmock.eq( 4 ) )\r\n\t\t:will( 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "assert_equals( foo( 4 ) , 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "",
    "type": "function container"
  }, {
    "id": 94,
    "text": "lmock.CMockInvoker.new",
    "type": "global function"
  }, {
    "id": 95,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 96,
    "text": "create",
    "type": "global function"
  }, {
    "id": 97,
    "text": "exactly",
    "type": "global function"
  }, {
    "id": 98,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 99,
    "text": "any",
    "type": "global function"
  }, {
    "id": 100,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 101,
    "text": "never",
    "type": "global function"
  }, {
    "id": 102,
    "text": "foo",
    "type": "global function"
  }, {
    "id": 103,
    "text": "eqx",
    "type": "global function"
  }, {
    "id": 104,
    "text": "lmock.CMockMethod.new",
    "type": "global function"
  }, {
    "id": 105,
    "text": "range",
    "type": "global function"
  }, {
    "id": 106,
    "text": "assert_equals",
    "type": "global function"
  }, {
    "id": 107,
    "text": "once",
    "type": "global function"
  }, {
    "id": 108,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "variable container"
  }, {
    "id": 111,
    "text": "",
    "type": "require container"
  }, {
    "id": 112,
    "text": "",
    "type": "global variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  } ]
}