{
  "_filename": "test_mock_invoker.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lmock/ut/test_mock_invoker.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 3
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 26,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 3
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 50
  }, {
    "from": 6,
    "label": "calls",
    "to": 50
  }, {
    "from": 9,
    "label": "calls",
    "to": 50
  }, {
    "from": 12,
    "label": "calls",
    "to": 50
  }, {
    "from": 15,
    "label": "calls",
    "to": 50
  }, {
    "from": 18,
    "label": "calls",
    "to": 50
  }, {
    "from": 26,
    "label": "calls",
    "to": 50
  }, {
    "from": 38,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 26,
    "label": "calls",
    "to": 51
  }, {
    "from": 26,
    "label": "calls",
    "to": 51
  }, {
    "from": 26,
    "label": "calls",
    "to": 51
  }, {
    "from": 26,
    "label": "calls",
    "to": 51
  }, {
    "from": 38,
    "label": "calls",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 6,
    "label": "calls",
    "to": 53
  }, {
    "from": 9,
    "label": "calls",
    "to": 53
  }, {
    "from": 12,
    "label": "calls",
    "to": 53
  }, {
    "from": 15,
    "label": "calls",
    "to": 53
  }, {
    "from": 18,
    "label": "calls",
    "to": 53
  }, {
    "from": 26,
    "label": "calls",
    "to": 53
  }, {
    "from": 38,
    "label": "calls",
    "to": 53
  }, {
    "from": 45,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 15,
    "label": "calls",
    "to": 52
  }, {
    "from": 18,
    "label": "calls",
    "to": 52
  }, {
    "from": 18,
    "label": "calls",
    "to": 52
  }, {
    "from": 18,
    "label": "calls",
    "to": 52
  }, {
    "from": 26,
    "label": "calls",
    "to": 52
  }, {
    "from": 26,
    "label": "calls",
    "to": 52
  }, {
    "from": 26,
    "label": "calls",
    "to": 52
  }, {
    "from": 26,
    "label": "calls",
    "to": 52
  }, {
    "from": 26,
    "label": "calls",
    "to": 52
  }, {
    "from": 38,
    "label": "calls",
    "to": 52
  }, {
    "from": 38,
    "label": "calls",
    "to": 52
  }, {
    "from": 38,
    "label": "calls",
    "to": 52
  }, {
    "from": 38,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 6,
    "label": "calls",
    "to": 54
  }, {
    "from": 9,
    "label": "calls",
    "to": 54
  }, {
    "from": 12,
    "label": "calls",
    "to": 54
  }, {
    "from": 12,
    "label": "calls",
    "to": 54
  }, {
    "from": 18,
    "label": "calls",
    "to": 54
  }, {
    "from": 18,
    "label": "calls",
    "to": 54
  }, {
    "from": 18,
    "label": "calls",
    "to": 54
  }, {
    "from": 18,
    "label": "calls",
    "to": 54
  }, {
    "from": 26,
    "label": "calls",
    "to": 54
  }, {
    "from": 26,
    "label": "calls",
    "to": 54
  }, {
    "from": 26,
    "label": "calls",
    "to": 54
  }, {
    "from": 26,
    "label": "calls",
    "to": 54
  }, {
    "from": 26,
    "label": "calls",
    "to": 54
  }, {
    "from": 26,
    "label": "calls",
    "to": 54
  }, {
    "from": 45,
    "label": "calls",
    "to": 54
  }, {
    "from": 45,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 49,
    "label": "declares",
    "to": 2
  }, {
    "from": 49,
    "label": "declares",
    "to": 6
  }, {
    "from": 49,
    "label": "declares",
    "to": 9
  }, {
    "from": 49,
    "label": "declares",
    "to": 12
  }, {
    "from": 49,
    "label": "declares",
    "to": 15
  }, {
    "from": 49,
    "label": "declares",
    "to": 18
  }, {
    "from": 49,
    "label": "declares",
    "to": 26
  }, {
    "from": 49,
    "label": "declares",
    "to": 38
  }, {
    "from": 49,
    "label": "declares",
    "to": 45
  }, {
    "from": 55,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 56,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test_mock_invoker",
    "type": "module"
  }, {
    "id": 2,
    "text": "function TestMockInvoker:testUpdateInvokerOnceRestrict()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\tassert_equals( invoker:updateRestrict() , false )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local invoker = lmock.CMockInvoker.new( lmock.once() )",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "assert_equals( invoker:updateRestrict() , false )",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function TestMockInvoker:testSetupInvokerWithParam()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\tinvoker:with( lmock.eq( 4 ) )\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "invoker:with( lmock.eq( 4 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function TestMockInvoker:testSetupInvokerWithParamAndReturn()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\tinvoker:with( lmock.eq( 4 ) )\r\n\t\t:will( 9 )\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "invoker:with( lmock.eq( 4 ) )\r\n\t\t:will( 9 )",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function TestMockInvoker:testSetupInvokerWithMoreParamAndMoreReturn()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\tinvoker:with( lmock.eq( 4 ) , lmock.eq( 8 ) )\r\n\t\t:will( 14 , 28 )\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "invoker:with( lmock.eq( 4 ) , lmock.eq( 8 ) )\r\n\t\t:will( 14 , 28 )",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function TestMockInvoker:testExcuteWithoutAnything()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\tassert_equals( #invoker:excute() , 0 )\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "assert_equals( #invoker:excute() , 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function TestMockInvoker:testExcuteWithParam()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\r\n\tinvoker:with( lmock.eq( 3 ) )\r\n\tassert_equals( #invoker:excute( 3 ) , 0 )\r\n\r\n\tinvoker:with( lmock.eq(32) , lmock.eq(67) )\r\n\tassert_equals( #invoker:excute( 32 , 67 ) , 0 )\r\n\r\n\tinvoker:with( lmock.eq(\"param\") )\r\n\tassert_equals( #invoker:excute( \"param\" ) , 0 )\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "invoker:with( lmock.eq( 3 ) )",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert_equals( #invoker:excute( 3 ) , 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "invoker:with( lmock.eq(32) , lmock.eq(67) )",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert_equals( #invoker:excute( 32 , 67 ) , 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "invoker:with( lmock.eq(\"param\") )",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert_equals( #invoker:excute( \"param\" ) , 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function TestMockInvoker:testExcuteWithParamAndReturn()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\r\n\tinvoker:with( lmock.eq(5) )\r\n\t\t:will( 9 )\r\n\tassert_equals( unpack(invoker:excute( 5 )) , 9 )\r\n\r\n\tinvoker:with( lmock.eq(5) , lmock.eq(7) )\r\n\t\t:will( 99 )\r\n\tassert_equals( unpack(invoker:excute( 5 , 7 )) , 99 )\r\n\r\n\tinvoker:with( lmock.eq(\"god\" ) )\r\n\t\t:will( \"dam\" )\r\n\tassert_equals( unpack(invoker:excute( \"god\" )) , \"dam\" )\r\n\r\n\tinvoker:with( lmock.eq( \"god\" ) , lmock.eq(5) )\r\n\t\t:will( 77 , \"dam\" )\r\n\tlocal a , b = unpack(invoker:excute( \"god\" , 5 ))\r\n\tassert_equals( a , 77 )\r\n\tassert_equals( b , \"dam\" )\r\n\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "invoker:with( lmock.eq(5) )\r\n\t\t:will( 9 )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert_equals( unpack(invoker:excute( 5 )) , 9 )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "invoker:with( lmock.eq(5) , lmock.eq(7) )\r\n\t\t:will( 99 )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "assert_equals( unpack(invoker:excute( 5 , 7 )) , 99 )",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "invoker:with( lmock.eq(\"god\" ) )\r\n\t\t:will( \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert_equals( unpack(invoker:excute( \"god\" )) , \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "invoker:with( lmock.eq( \"god\" ) , lmock.eq(5) )\r\n\t\t:will( 77 , \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local a , b = unpack(invoker:excute( \"god\" , 5 ))",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "assert_equals( a , 77 )",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert_equals( b , \"dam\" )",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function TestMockInvoker:testExcuteWithMoreReturn()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\r\n\tinvoker:will( 9 , \"dam\" , 24 , \"asshole\" )\r\n\r\n\tlocal a , b , c , d = unpack( invoker:excute() )\r\n\tassert_equals( a , 9 )\r\n\tassert_equals( b , \"dam\" )\r\n\tassert_equals( c , 24 )\r\n\tassert_equals( d , \"asshole\" )\r\n\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "invoker:will( 9 , \"dam\" , 24 , \"asshole\" )",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "local a , b , c , d = unpack( invoker:excute() )",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "assert_equals( a , 9 )",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert_equals( c , 24 )",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert_equals( d , \"asshole\" )",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function TestMockInvoker:testExcuteWithoutReturn()\r\n\tlocal invoker = lmock.CMockInvoker.new( lmock.once() )\r\n\r\n\tinvoker:with( lmock.eq(4) , lmock.eq(\"god\") )\r\n\r\n\tassert_equals( #invoker:excute( 4 , \"god\" ) , 0 )\r\n\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "invoker:with( lmock.eq(4) , lmock.eq(\"god\") )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert_equals( #invoker:excute( 4 , \"god\" ) , 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "",
    "type": "function container"
  }, {
    "id": 50,
    "text": "lmock.CMockInvoker.new",
    "type": "global function"
  }, {
    "id": 51,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 52,
    "text": "assert_equals",
    "type": "global function"
  }, {
    "id": 53,
    "text": "once",
    "type": "global function"
  }, {
    "id": 54,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "variable container"
  }, {
    "id": 57,
    "text": "",
    "type": "require container"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  } ]
}