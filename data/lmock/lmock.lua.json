{
  "_filename": "lmock.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lmock/src/lmock.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 25
  }, {
    "from": 31,
    "label": "has",
    "to": 19
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 27
  }, {
    "from": 33,
    "label": "has",
    "to": 19
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 35,
    "label": "has",
    "to": 19
  }, {
    "from": 35,
    "label": "has",
    "to": 19
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 22
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 19
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 19
  }, {
    "from": 39,
    "label": "has",
    "to": 19
  }, {
    "from": 37,
    "label": "has",
    "to": 19
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 19
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 40
  }, {
    "from": 44,
    "label": "has",
    "to": 19
  }, {
    "from": 44,
    "label": "has",
    "to": 19
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 19
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 22
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 19
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 19
  }, {
    "from": 48,
    "label": "has",
    "to": 19
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 19
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 19
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 22
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 19
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 19
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 19
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 59
  }, {
    "from": 63,
    "label": "has",
    "to": 19
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 19
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 19
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 22
  }, {
    "from": 69,
    "label": "has",
    "to": 57
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 59
  }, {
    "from": 70,
    "label": "has",
    "to": 19
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 19
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 19
  }, {
    "from": 69,
    "label": "has",
    "to": 19
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 59
  }, {
    "from": 74,
    "label": "has",
    "to": 19
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 19
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 19
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 22
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 19
  }, {
    "from": 80,
    "label": "has",
    "to": 19
  }, {
    "from": 80,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 82
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 19
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 37,
    "label": "calls",
    "to": 93
  }, {
    "from": 37,
    "label": "calls",
    "to": 93
  }, {
    "from": 56,
    "label": "calls",
    "to": 93
  }, {
    "from": 69,
    "label": "calls",
    "to": 93
  }, {
    "from": 37,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 107
  }, {
    "from": 92,
    "label": "calls",
    "to": 98
  }, {
    "from": 14,
    "label": "calls",
    "to": 103
  }, {
    "from": 37,
    "label": "calls",
    "to": 108
  }, {
    "from": 14,
    "label": "calls",
    "to": 99
  }, {
    "from": 92,
    "label": "calls",
    "to": 109
  }, {
    "from": 92,
    "label": "calls",
    "to": 109
  }, {
    "from": 92,
    "label": "calls",
    "to": 109
  }, {
    "from": 92,
    "label": "calls",
    "to": 109
  }, {
    "from": 46,
    "label": "calls",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 92
  }, {
    "from": 92,
    "label": "declares",
    "to": 14
  }, {
    "from": 92,
    "label": "declares",
    "to": 21
  }, {
    "from": 92,
    "label": "declares",
    "to": 31
  }, {
    "from": 92,
    "label": "declares",
    "to": 33
  }, {
    "from": 92,
    "label": "declares",
    "to": 35
  }, {
    "from": 92,
    "label": "declares",
    "to": 37
  }, {
    "from": 92,
    "label": "declares",
    "to": 42
  }, {
    "from": 92,
    "label": "declares",
    "to": 44
  }, {
    "from": 92,
    "label": "declares",
    "to": 46
  }, {
    "from": 92,
    "label": "declares",
    "to": 48
  }, {
    "from": 92,
    "label": "declares",
    "to": 52
  }, {
    "from": 92,
    "label": "declares",
    "to": 54
  }, {
    "from": 92,
    "label": "declares",
    "to": 56
  }, {
    "from": 92,
    "label": "declares",
    "to": 63
  }, {
    "from": 92,
    "label": "declares",
    "to": 65
  }, {
    "from": 92,
    "label": "declares",
    "to": 67
  }, {
    "from": 92,
    "label": "declares",
    "to": 69
  }, {
    "from": 92,
    "label": "declares",
    "to": 74
  }, {
    "from": 92,
    "label": "declares",
    "to": 76
  }, {
    "from": 92,
    "label": "declares",
    "to": 78
  }, {
    "from": 92,
    "label": "declares",
    "to": 80
  }, {
    "from": 92,
    "label": "declares",
    "to": 86
  }, {
    "from": 92,
    "label": "declares",
    "to": 88
  }, {
    "from": 92,
    "label": "declares",
    "to": 90
  }, {
    "from": 1,
    "label": "declares",
    "to": 95
  }, {
    "from": 1,
    "label": "declares",
    "to": 96
  }, {
    "from": 1,
    "label": "declares",
    "to": 97
  }, {
    "from": 1,
    "label": "declares",
    "to": 100
  }, {
    "from": 1,
    "label": "declares",
    "to": 101
  }, {
    "from": 1,
    "label": "declares",
    "to": 104
  }, {
    "from": 1,
    "label": "declares",
    "to": 105
  }, {
    "from": 1,
    "label": "declares",
    "to": 106
  }, {
    "from": 1,
    "label": "contains",
    "to": 110
  }, {
    "from": 1,
    "label": "contains",
    "to": 111
  }, {
    "from": 111,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 2
  }, {
    "from": 111,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 3
  }, {
    "from": 111,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 5
  }, {
    "from": 111,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 4
  }, {
    "from": 113,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 6
  }, {
    "from": 113,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 13
  }, {
    "from": 113,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 11
  }, {
    "from": 113,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 12
  }, {
    "from": 113,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 7
  }, {
    "from": 113,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 8
  }, {
    "from": 113,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 9
  }, {
    "from": 113,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 10
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lmock",
    "type": "module"
  }, {
    "id": 2,
    "text": "luaunit",
    "type": "module"
  }, {
    "id": 3,
    "text": "mock_env",
    "type": "module"
  }, {
    "id": 4,
    "text": "mock_invoker",
    "type": "module"
  }, {
    "id": 5,
    "text": "mock_method",
    "type": "module"
  }, {
    "id": 6,
    "text": "test_lmock",
    "type": "module"
  }, {
    "id": 7,
    "text": "test_lmock2",
    "type": "module"
  }, {
    "id": 8,
    "text": "test_lmock3",
    "type": "module"
  }, {
    "id": 9,
    "text": "test_lmock4",
    "type": "module"
  }, {
    "id": 10,
    "text": "test_lmock5",
    "type": "module"
  }, {
    "id": 11,
    "text": "test_mock_invoker",
    "type": "module"
  }, {
    "id": 12,
    "text": "test_mock_method",
    "type": "module"
  }, {
    "id": 13,
    "text": "test_restrict",
    "type": "module"
  }, {
    "id": 14,
    "text": "function create()\r\n\tlocal tmpEnv = {}\r\n\tsetmetatable( tmpEnv , { __index = _G } )\r\n\tsetfenv( 2 , tmpEnv )\r\n\r\n\tmock = CMockEnv.new( tmpEnv )\r\n\treturn mock\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local tmpEnv = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "setmetatable( tmpEnv , { __index = _G } )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "setfenv( 2 , tmpEnv )",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "mock = CMockEnv.new( tmpEnv )",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function once()\r\n\tlocal t = {}\r\n\tlocal active = true\r\n\r\n\tfunction t:update()\r\n\t\tactive = false\r\n\t\treturn active\r\n\tend\r\n\r\n\tfunction t:validate()\r\n\t\tif active then\r\n\t\t\treturn \"Invocation was never invoked\\n\"\r\n\t\tend\r\n\tend\r\n\r\n\tfunction t:toString()\r\n\t\tif active then\r\n\t\t\treturn \r\n[[  :expects(lmock.once())\r\n  :invoke(0)\r\n]]\r\n\t\telse\r\n\t\t\treturn \r\n[[  :expects(lmock.once())\r\n  :invoke(1)\r\n]]\r\n\t\tend\r\n\tend\r\n\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local active = true",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "function t:update()\r\n\t\tactive = false\r\n\t\treturn active\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 25,
    "text": "active = false",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "function t:validate()\r\n\t\tif active then\r\n\t\t\treturn \"Invocation was never invoked\\n\"\r\n\t\tend\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 27,
    "text": "if active then\r\n\t\t\treturn \"Invocation was never invoked\\n\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "function t:toString()\r\n\t\tif active then\r\n\t\t\treturn \r\n[[  :expects(lmock.once())\r\n  :invoke(0)\r\n]]\r\n\t\telse\r\n\t\t\treturn \r\n[[  :expects(lmock.once())\r\n  :invoke(1)\r\n]]\r\n\t\tend\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 29,
    "text": "if active then\r\n\t\t\treturn \r\n[[  :expects(lmock.once())\r\n  :invoke(0)\r\n]]\r\n\t\telse\r\n\t\t\treturn \r\n[[  :expects(lmock.once())\r\n  :invoke(1)\r\n]]\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function t:update()\r\n\t\tactive = false\r\n\t\treturn active\r\n\tend",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function t:validate()\r\n\t\tif active then\r\n\t\t\treturn \"Invocation was never invoked\\n\"\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function t:toString()\r\n\t\tif active then\r\n\t\t\treturn \r\n[[  :expects(lmock.once())\r\n  :invoke(0)\r\n]]\r\n\t\telse\r\n\t\t\treturn \r\n[[  :expects(lmock.once())\r\n  :invoke(1)\r\n]]\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function eq( expectValue )\r\n\tlocal t = {}\r\n\r\n\tfunction t:test( actureValue )\r\n\t\treturn expectValue == actureValue\r\n\tend\r\n\r\n\tfunction t:toString()\r\n\t\tif type( expectValue ) == \"string\" then\r\n\t\t\treturn string.format( \"lmock.eq(\\\"%s\\\")\" , expectValue )\r\n\t\tend\r\n\r\n\t\treturn string.format( \"lmock.eq(%s)\" , tostring( expectValue ) )\r\n\tend\r\n\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function t:test( actureValue )\r\n\t\treturn expectValue == actureValue\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 39,
    "text": "function t:toString()\r\n\t\tif type( expectValue ) == \"string\" then\r\n\t\t\treturn string.format( \"lmock.eq(\\\"%s\\\")\" , expectValue )\r\n\t\tend\r\n\r\n\t\treturn string.format( \"lmock.eq(%s)\" , tostring( expectValue ) )\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 40,
    "text": "if type( expectValue ) == \"string\" then\r\n\t\t\treturn string.format( \"lmock.eq(\\\"%s\\\")\" , expectValue )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function t:test( actureValue )\r\n\t\treturn expectValue == actureValue\r\n\tend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function t:toString()\r\n\t\tif type( expectValue ) == \"string\" then\r\n\t\t\treturn string.format( \"lmock.eq(\\\"%s\\\")\" , expectValue )\r\n\t\tend\r\n\r\n\t\treturn string.format( \"lmock.eq(%s)\" , tostring( expectValue ) )\r\n\tend",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function eqx( expectValue )\r\n\treturn eq( expectValue )\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function any()\r\n\tlocal t = {}\r\n\r\n\tfunction t:test()\r\n\t\treturn true\r\n\tend\r\n\r\n\tfunction t:toString()\r\n\t\treturn \"lmock.any()\"\r\n\tend\r\n\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "function t:test()\r\n\t\treturn true\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 50,
    "text": "function t:toString()\r\n\t\treturn \"lmock.any()\"\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function t:test()\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function t:toString()\r\n\t\treturn \"lmock.any()\"\r\n\tend",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function exactly( value )\r\n\tlocal t = {}\r\n\tlocal cnt = 0\r\n\t\r\n\tfunction t:update()\r\n\t\tcnt = cnt + 1\r\n\t\treturn cnt < value\r\n\tend\r\n\r\n\tfunction t:validate()\r\n\t\treturn cnt < value and \"Invocation times and acture invoked time mismatch\\n\"\r\n\tend\r\n\r\n\tfunction t:toString()\r\n\t\treturn string.format( \r\n[[  :expects(lmock.exactly(%d))\r\n  :invoke(%d)\r\n]] , \r\n\t\tvalue , cnt )\r\n\tend\r\n\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local cnt = 0",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "function t:update()\r\n\t\tcnt = cnt + 1\r\n\t\treturn cnt < value\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 59,
    "text": "cnt = cnt + 1",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "function t:validate()\r\n\t\treturn cnt < value and \"Invocation times and acture invoked time mismatch\\n\"\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 61,
    "text": "function t:toString()\r\n\t\treturn string.format( \r\n[[  :expects(lmock.exactly(%d))\r\n  :invoke(%d)\r\n]] , \r\n\t\tvalue , cnt )\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function t:update()\r\n\t\tcnt = cnt + 1\r\n\t\treturn cnt < value\r\n\tend",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function t:validate()\r\n\t\treturn cnt < value and \"Invocation times and acture invoked time mismatch\\n\"\r\n\tend",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function t:toString()\r\n\t\treturn string.format( \r\n[[  :expects(lmock.exactly(%d))\r\n  :invoke(%d)\r\n]] , \r\n\t\tvalue , cnt )\r\n\tend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function range( low , up )\r\n\tlocal t = {}\r\n\tlocal cnt = 0\r\n\t\r\n\tfunction t:update()\r\n\t\tcnt = cnt + 1\r\n\t\treturn cnt < up\r\n\tend\r\n\r\n\tfunction t:validate()\r\n\t\treturn cnt < low and \"Invoked too few times\\n\"\r\n\tend\r\n\r\n\tfunction t:toString()\r\n\t\treturn string.format( \r\n[[  :expects(lmock.range(%d,%d))\r\n  :invoke(%d)\r\n]] , \r\n\t\tlow , up , cnt )\r\n\tend\r\n\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "function t:update()\r\n\t\tcnt = cnt + 1\r\n\t\treturn cnt < up\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 71,
    "text": "function t:validate()\r\n\t\treturn cnt < low and \"Invoked too few times\\n\"\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 72,
    "text": "function t:toString()\r\n\t\treturn string.format( \r\n[[  :expects(lmock.range(%d,%d))\r\n  :invoke(%d)\r\n]] , \r\n\t\tlow , up , cnt )\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function t:update()\r\n\t\tcnt = cnt + 1\r\n\t\treturn cnt < up\r\n\tend",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function t:validate()\r\n\t\treturn cnt < low and \"Invoked too few times\\n\"\r\n\tend",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function t:toString()\r\n\t\treturn string.format( \r\n[[  :expects(lmock.range(%d,%d))\r\n  :invoke(%d)\r\n]] , \r\n\t\tlow , up , cnt )\r\n\tend",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function never()\r\n\tlocal t = {}\r\n\r\n\tfunction t:update()\r\n\t\terror( \"Invocation should never invoked\\n\" , 2 )\r\n\tend\r\n\r\n\tfunction t:validate()\r\n\tend\r\n\r\n\tfunction t:toString()\r\n\t\treturn \"  :expects(lmock.never())\\n\"\r\n\tend\r\n\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "function t:update()\r\n\t\terror( \"Invocation should never invoked\\n\" , 2 )\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 82,
    "text": "error( \"Invocation should never invoked\\n\" , 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "function t:validate()\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 84,
    "text": "function t:toString()\r\n\t\treturn \"  :expects(lmock.never())\\n\"\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function t:update()\r\n\t\terror( \"Invocation should never invoked\\n\" , 2 )\r\n\tend",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function t:validate()\r\n\tend",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function t:toString()\r\n\t\treturn \"  :expects(lmock.never())\\n\"\r\n\tend",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "",
    "type": "function container"
  }, {
    "id": 93,
    "text": "format",
    "type": "global function"
  }, {
    "id": 94,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 95,
    "text": "create",
    "type": "global function"
  }, {
    "id": 96,
    "text": "exactly",
    "type": "global function"
  }, {
    "id": 97,
    "text": "any",
    "type": "global function"
  }, {
    "id": 98,
    "text": "module",
    "type": "global function"
  }, {
    "id": 99,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 100,
    "text": "never",
    "type": "global function"
  }, {
    "id": 101,
    "text": "eqx",
    "type": "global function"
  }, {
    "id": 102,
    "text": "error",
    "type": "global function"
  }, {
    "id": 103,
    "text": "new",
    "type": "global function"
  }, {
    "id": 104,
    "text": "range",
    "type": "global function"
  }, {
    "id": 105,
    "text": "once",
    "type": "global function"
  }, {
    "id": 106,
    "text": "eq",
    "type": "global function"
  }, {
    "id": 107,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 108,
    "text": "type",
    "type": "global function"
  }, {
    "id": 109,
    "text": "require",
    "type": "global function"
  }, {
    "id": 110,
    "text": "",
    "type": "variable container"
  }, {
    "id": 111,
    "text": "",
    "type": "require container"
  }, {
    "id": 112,
    "text": "",
    "type": "global variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require container"
  } ]
}