{
  "_filename": "userguide.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lemock/build/unit/userguide.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 5
  }, {
    "from": 13,
    "label": "has",
    "to": 24
  }, {
    "from": 13,
    "label": "has",
    "to": 25
  }, {
    "from": 13,
    "label": "has",
    "to": 26
  }, {
    "from": 13,
    "label": "has",
    "to": 27
  }, {
    "from": 13,
    "label": "has",
    "to": 25
  }, {
    "from": 13,
    "label": "has",
    "to": 28
  }, {
    "from": 13,
    "label": "has",
    "to": 29
  }, {
    "from": 13,
    "label": "has",
    "to": 30
  }, {
    "from": 13,
    "label": "has",
    "to": 31
  }, {
    "from": 13,
    "label": "has",
    "to": 32
  }, {
    "from": 13,
    "label": "has",
    "to": 33
  }, {
    "from": 13,
    "label": "has",
    "to": 34
  }, {
    "from": 13,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 18
  }, {
    "from": 36,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 36,
    "label": "has",
    "to": 22
  }, {
    "from": 36,
    "label": "has",
    "to": 23
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 16
  }, {
    "from": 38,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 14
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 16
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 4
  }, {
    "from": 40,
    "label": "has",
    "to": 5
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 40,
    "label": "has",
    "to": 52
  }, {
    "from": 40,
    "label": "has",
    "to": 53
  }, {
    "from": 40,
    "label": "has",
    "to": 54
  }, {
    "from": 40,
    "label": "has",
    "to": 55
  }, {
    "from": 40,
    "label": "has",
    "to": 56
  }, {
    "from": 40,
    "label": "has",
    "to": 30
  }, {
    "from": 40,
    "label": "has",
    "to": 31
  }, {
    "from": 40,
    "label": "has",
    "to": 57
  }, {
    "from": 40,
    "label": "has",
    "to": 34
  }, {
    "from": 40,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 43
  }, {
    "from": 59,
    "label": "has",
    "to": 44
  }, {
    "from": 59,
    "label": "has",
    "to": 45
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 16
  }, {
    "from": 61,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 14
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 16
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 65,
    "label": "has",
    "to": 74
  }, {
    "from": 63,
    "label": "has",
    "to": 4
  }, {
    "from": 63,
    "label": "has",
    "to": 5
  }, {
    "from": 63,
    "label": "has",
    "to": 75
  }, {
    "from": 63,
    "label": "has",
    "to": 76
  }, {
    "from": 63,
    "label": "has",
    "to": 77
  }, {
    "from": 63,
    "label": "has",
    "to": 78
  }, {
    "from": 63,
    "label": "has",
    "to": 79
  }, {
    "from": 63,
    "label": "has",
    "to": 80
  }, {
    "from": 63,
    "label": "has",
    "to": 81
  }, {
    "from": 63,
    "label": "has",
    "to": 82
  }, {
    "from": 63,
    "label": "has",
    "to": 83
  }, {
    "from": 63,
    "label": "has",
    "to": 84
  }, {
    "from": 63,
    "label": "has",
    "to": 85
  }, {
    "from": 63,
    "label": "has",
    "to": 86
  }, {
    "from": 63,
    "label": "has",
    "to": 87
  }, {
    "from": 63,
    "label": "has",
    "to": 88
  }, {
    "from": 63,
    "label": "has",
    "to": 89
  }, {
    "from": 63,
    "label": "has",
    "to": 90
  }, {
    "from": 63,
    "label": "has",
    "to": 91
  }, {
    "from": 63,
    "label": "has",
    "to": 92
  }, {
    "from": 63,
    "label": "has",
    "to": 93
  }, {
    "from": 63,
    "label": "has",
    "to": 30
  }, {
    "from": 63,
    "label": "has",
    "to": 31
  }, {
    "from": 63,
    "label": "has",
    "to": 94
  }, {
    "from": 63,
    "label": "has",
    "to": 34
  }, {
    "from": 63,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 66
  }, {
    "from": 96,
    "label": "has",
    "to": 67
  }, {
    "from": 96,
    "label": "has",
    "to": 68
  }, {
    "from": 96,
    "label": "has",
    "to": 69
  }, {
    "from": 96,
    "label": "has",
    "to": 70
  }, {
    "from": 96,
    "label": "has",
    "to": 71
  }, {
    "from": 96,
    "label": "has",
    "to": 72
  }, {
    "from": 96,
    "label": "has",
    "to": 73
  }, {
    "from": 96,
    "label": "has",
    "to": 74
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 16
  }, {
    "from": 98,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 65,
    "label": "has",
    "to": 73
  }, {
    "from": 65,
    "label": "has",
    "to": 74
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 4
  }, {
    "from": 100,
    "label": "has",
    "to": 5
  }, {
    "from": 100,
    "label": "has",
    "to": 6
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 23
  }, {
    "from": 102,
    "label": "has",
    "to": 23
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 100,
    "label": "has",
    "to": 105
  }, {
    "from": 100,
    "label": "has",
    "to": 106
  }, {
    "from": 100,
    "label": "has",
    "to": 107
  }, {
    "from": 100,
    "label": "has",
    "to": 108
  }, {
    "from": 100,
    "label": "has",
    "to": 30
  }, {
    "from": 100,
    "label": "has",
    "to": 109
  }, {
    "from": 100,
    "label": "has",
    "to": 110
  }, {
    "from": 100,
    "label": "has",
    "to": 34
  }, {
    "from": 100,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 103
  }, {
    "from": 112,
    "label": "has",
    "to": 23
  }, {
    "from": 112,
    "label": "has",
    "to": 23
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 4
  }, {
    "from": 114,
    "label": "has",
    "to": 5
  }, {
    "from": 114,
    "label": "has",
    "to": 6
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 114,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 14
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 16
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 121,
    "label": "has",
    "to": 23
  }, {
    "from": 120,
    "label": "has",
    "to": 4
  }, {
    "from": 120,
    "label": "has",
    "to": 5
  }, {
    "from": 120,
    "label": "has",
    "to": 129
  }, {
    "from": 120,
    "label": "has",
    "to": 130
  }, {
    "from": 120,
    "label": "has",
    "to": 131
  }, {
    "from": 120,
    "label": "has",
    "to": 132
  }, {
    "from": 120,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 23
  }, {
    "from": 120,
    "label": "has",
    "to": 136
  }, {
    "from": 120,
    "label": "has",
    "to": 137
  }, {
    "from": 120,
    "label": "has",
    "to": 138
  }, {
    "from": 120,
    "label": "has",
    "to": 139
  }, {
    "from": 120,
    "label": "has",
    "to": 140
  }, {
    "from": 120,
    "label": "has",
    "to": 141
  }, {
    "from": 120,
    "label": "has",
    "to": 127
  }, {
    "from": 120,
    "label": "has",
    "to": 128
  }, {
    "from": 120,
    "label": "has",
    "to": 30
  }, {
    "from": 120,
    "label": "has",
    "to": 31
  }, {
    "from": 120,
    "label": "has",
    "to": 142
  }, {
    "from": 120,
    "label": "has",
    "to": 143
  }, {
    "from": 120,
    "label": "has",
    "to": 34
  }, {
    "from": 120,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 124
  }, {
    "from": 145,
    "label": "has",
    "to": 125
  }, {
    "from": 145,
    "label": "has",
    "to": 126
  }, {
    "from": 145,
    "label": "has",
    "to": 127
  }, {
    "from": 145,
    "label": "has",
    "to": 128
  }, {
    "from": 145,
    "label": "has",
    "to": 23
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 16
  }, {
    "from": 147,
    "label": "has",
    "to": 122
  }, {
    "from": 147,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 123,
    "label": "has",
    "to": 23
  }, {
    "from": 147,
    "label": "has",
    "to": 23
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 134
  }, {
    "from": 149,
    "label": "has",
    "to": 135
  }, {
    "from": 149,
    "label": "has",
    "to": 23
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 14
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 16
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 153,
    "label": "has",
    "to": 23
  }, {
    "from": 151,
    "label": "has",
    "to": 4
  }, {
    "from": 151,
    "label": "has",
    "to": 5
  }, {
    "from": 151,
    "label": "has",
    "to": 24
  }, {
    "from": 151,
    "label": "has",
    "to": 157
  }, {
    "from": 151,
    "label": "has",
    "to": 158
  }, {
    "from": 151,
    "label": "has",
    "to": 159
  }, {
    "from": 151,
    "label": "has",
    "to": 160
  }, {
    "from": 151,
    "label": "has",
    "to": 30
  }, {
    "from": 151,
    "label": "has",
    "to": 31
  }, {
    "from": 151,
    "label": "has",
    "to": 161
  }, {
    "from": 151,
    "label": "has",
    "to": 162
  }, {
    "from": 151,
    "label": "has",
    "to": 34
  }, {
    "from": 151,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 154
  }, {
    "from": 164,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 164,
    "label": "has",
    "to": 23
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 156
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 16
  }, {
    "from": 168,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 153,
    "label": "has",
    "to": 23
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 112,
    "label": "calls",
    "to": 183
  }, {
    "from": 100,
    "label": "calls",
    "to": 183
  }, {
    "from": 13,
    "label": "calls",
    "to": 171
  }, {
    "from": 13,
    "label": "calls",
    "to": 172
  }, {
    "from": 120,
    "label": "calls",
    "to": 172
  }, {
    "from": 100,
    "label": "calls",
    "to": 184
  }, {
    "from": 100,
    "label": "calls",
    "to": 188
  }, {
    "from": 100,
    "label": "calls",
    "to": 188
  }, {
    "from": 3,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 2
  }, {
    "from": 63,
    "label": "calls",
    "to": 2
  }, {
    "from": 100,
    "label": "calls",
    "to": 2
  }, {
    "from": 114,
    "label": "calls",
    "to": 2
  }, {
    "from": 120,
    "label": "calls",
    "to": 2
  }, {
    "from": 151,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 174
  }, {
    "from": 3,
    "label": "calls",
    "to": 185
  }, {
    "from": 120,
    "label": "calls",
    "to": 145
  }, {
    "from": 40,
    "label": "calls",
    "to": 59
  }, {
    "from": 3,
    "label": "calls",
    "to": 187
  }, {
    "from": 13,
    "label": "calls",
    "to": 182
  }, {
    "from": 112,
    "label": "calls",
    "to": 176
  }, {
    "from": 100,
    "label": "calls",
    "to": 176
  }, {
    "from": 40,
    "label": "calls",
    "to": 177
  }, {
    "from": 170,
    "label": "calls",
    "to": 189
  }, {
    "from": 3,
    "label": "calls",
    "to": 189
  }, {
    "from": 13,
    "label": "calls",
    "to": 189
  }, {
    "from": 13,
    "label": "calls",
    "to": 189
  }, {
    "from": 40,
    "label": "calls",
    "to": 189
  }, {
    "from": 40,
    "label": "calls",
    "to": 189
  }, {
    "from": 63,
    "label": "calls",
    "to": 189
  }, {
    "from": 63,
    "label": "calls",
    "to": 189
  }, {
    "from": 100,
    "label": "calls",
    "to": 189
  }, {
    "from": 114,
    "label": "calls",
    "to": 189
  }, {
    "from": 120,
    "label": "calls",
    "to": 189
  }, {
    "from": 120,
    "label": "calls",
    "to": 189
  }, {
    "from": 120,
    "label": "calls",
    "to": 189
  }, {
    "from": 151,
    "label": "calls",
    "to": 189
  }, {
    "from": 151,
    "label": "calls",
    "to": 189
  }, {
    "from": 13,
    "label": "calls",
    "to": 36
  }, {
    "from": 120,
    "label": "calls",
    "to": 181
  }, {
    "from": 120,
    "label": "calls",
    "to": 178
  }, {
    "from": 100,
    "label": "calls",
    "to": 173
  }, {
    "from": 100,
    "label": "calls",
    "to": 173
  }, {
    "from": 170,
    "label": "calls",
    "to": 179
  }, {
    "from": 40,
    "label": "calls",
    "to": 175
  }, {
    "from": 112,
    "label": "calls",
    "to": 186
  }, {
    "from": 63,
    "label": "calls",
    "to": 96
  }, {
    "from": 151,
    "label": "calls",
    "to": 164
  }, {
    "from": 120,
    "label": "calls",
    "to": 180
  }, {
    "from": 1,
    "label": "contains",
    "to": 170
  }, {
    "from": 170,
    "label": "declares",
    "to": 3
  }, {
    "from": 170,
    "label": "declares",
    "to": 13
  }, {
    "from": 170,
    "label": "declares",
    "to": 36
  }, {
    "from": 170,
    "label": "declares",
    "to": 38
  }, {
    "from": 170,
    "label": "declares",
    "to": 40
  }, {
    "from": 170,
    "label": "declares",
    "to": 59
  }, {
    "from": 170,
    "label": "declares",
    "to": 61
  }, {
    "from": 170,
    "label": "declares",
    "to": 63
  }, {
    "from": 170,
    "label": "declares",
    "to": 96
  }, {
    "from": 170,
    "label": "declares",
    "to": 98
  }, {
    "from": 170,
    "label": "declares",
    "to": 100
  }, {
    "from": 170,
    "label": "declares",
    "to": 112
  }, {
    "from": 170,
    "label": "declares",
    "to": 114
  }, {
    "from": 170,
    "label": "declares",
    "to": 120
  }, {
    "from": 170,
    "label": "declares",
    "to": 145
  }, {
    "from": 170,
    "label": "declares",
    "to": 147
  }, {
    "from": 170,
    "label": "declares",
    "to": 149
  }, {
    "from": 170,
    "label": "declares",
    "to": 151
  }, {
    "from": 170,
    "label": "declares",
    "to": 164
  }, {
    "from": 170,
    "label": "declares",
    "to": 166
  }, {
    "from": 170,
    "label": "declares",
    "to": 168
  }, {
    "from": 1,
    "label": "contains",
    "to": 191
  }, {
    "from": 1,
    "label": "contains",
    "to": 192
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "requires",
    "to": 193
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "requires",
    "to": 193
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "requires",
    "to": 193
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "requires",
    "to": 193
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 192,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "requires",
    "to": 193
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "userguide",
    "type": "module"
  }, {
    "id": 2,
    "text": "function controller ()\r\n\tlocal exported_methods = {\r\n\t\t'anytimes',\r\n\t\t'atleastonce',\r\n\t\t'close',\r\n\t\t'depend',\r\n\t\t'error',\r\n\t\t'label',\r\n\t\t'mock',\r\n\t\t'new',\r\n\t\t'replay',\r\n\t\t'returns',\r\n\t\t'times',\r\n\t\t'verify',\r\n\t}\r\n\tlocal mc = Controller:new()\r\n\tlocal wrapper = {}\r\n\tfor _, method in ipairs( exported_methods ) do\r\n\t\twrapper[ method ] = function (self, ...)\r\n\t\t\treturn mc[ method ]( mc, ... )\r\n\t\tend\r\n\tend\r\n\twrapper.ANYARG  = Argv.ANYARG\r\n\twrapper.ANYARGS = Argv.ANYARGS\r\n\treturn wrapper\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function actions_test ()\r\n\t\t\r\n-- ../src/doc/userguide/section_actions.nw:20\r\nrequire 'lemock'\r\nlocal mc = lemock.controller()\r\nlocal m = mc:mock()\r\n\r\nm.x = 17    -- assignment\r\nr = m.x     -- indexing\r\nm.x(1,2,3)  -- method call\r\nm:x(1,2,3)  -- method call\r\nm(1,2,3)    -- self call\r\n-- ../src/doc/userguide/section_actions.nw:34\r\n\tend",
    "type": "function"
  }, {
    "id": 4,
    "text": "require 'lemock'",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local mc = lemock.controller()",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local m = mc:mock()",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "m.x = 17",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "r = m.x",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "m.x(1,2,3)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "m:x(1,2,3)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "m(1,2,3)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function example_anyargs_test ()\r\n\t\tpackage.loaded.foo = nil\r\n\t\tpackage.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.fetch_data (con)\r\n\t\t\t\tlocal res = con:poll()\r\n\t\t\t\twhile not res do\r\n\t\t\t\t\tcon:sleep( 10 )\r\n\t\t\t\t\tres = con:poll()\r\n\t\t\t\tend\r\n\t\t\t\tcon.lasttime = os.time()\r\n\t\t\t\treturn tonumber( res )\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n-- ../src/doc/userguide/section_anyargs.nw:24\r\nrequire 'lemock'\r\nlocal mc = lemock.controller()\r\nlocal con = mc:mock()\r\n\r\ncon:poll()           ;mc :returns(nil)\r\ncon:sleep(mc.ANYARG)\r\ncon:poll()           ;mc :returns('123.45')\r\ncon.lasttime = mc.ANYARG\r\n\r\nmc:replay()\r\nrequire 'foo'\r\nlocal res = foo.fetch_data(con)\r\nassert( math.abs(res-123.45) < 0.0005 )\r\n\r\nmc:verify()\r\n-- ../src/doc/userguide/section_anyargs.nw:57\r\n\tend",
    "type": "function"
  }, {
    "id": 14,
    "text": "package.loaded.foo = nil",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "package.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.fetch_data (con)\r\n\t\t\t\tlocal res = con:poll()\r\n\t\t\t\twhile not res do\r\n\t\t\t\t\tcon:sleep( 10 )\r\n\t\t\t\t\tres = con:poll()\r\n\t\t\t\tend\r\n\t\t\t\tcon.lasttime = os.time()\r\n\t\t\t\treturn tonumber( res )\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "foo = {}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "function foo.fetch_data (con)\r\n\t\t\t\tlocal res = con:poll()\r\n\t\t\t\twhile not res do\r\n\t\t\t\t\tcon:sleep( 10 )\r\n\t\t\t\t\tres = con:poll()\r\n\t\t\t\tend\r\n\t\t\t\tcon.lasttime = os.time()\r\n\t\t\t\treturn tonumber( res )\r\n\t\t\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 18,
    "text": "local res = con:poll()",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "while not res do\r\n\t\t\t\t\tcon:sleep( 10 )\r\n\t\t\t\t\tres = con:poll()\r\n\t\t\t\tend",
    "type": "statement:while"
  }, {
    "id": 20,
    "text": "con:sleep( 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "res = con:poll()",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "con.lasttime = os.time()",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 24,
    "text": "local con = mc:mock()",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "con:poll()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "mc :returns(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "con:sleep(mc.ANYARG)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "mc :returns('123.45')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "con.lasttime = mc.ANYARG",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "mc:replay()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "require 'foo'",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local res = foo.fetch_data(con)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "assert( math.abs(res-123.45) < 0.0005 )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "mc:verify()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function foo.fetch_data (con)\r\n\t\t\t\tlocal res = con:poll()\r\n\t\t\t\twhile not res do\r\n\t\t\t\t\tcon:sleep( 10 )\r\n\t\t\t\t\tres = con:poll()\r\n\t\t\t\tend\r\n\t\t\t\tcon.lasttime = os.time()\r\n\t\t\t\treturn tonumber( res )\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.fetch_data (con)\r\n\t\t\t\tlocal res = con:poll()\r\n\t\t\t\twhile not res do\r\n\t\t\t\t\tcon:sleep( 10 )\r\n\t\t\t\t\tres = con:poll()\r\n\t\t\t\tend\r\n\t\t\t\tcon.lasttime = os.time()\r\n\t\t\t\treturn tonumber( res )\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function close_test ()\r\n\t\tpackage.loaded.foo = nil\r\n\t\tpackage.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.dump (xio, name, len)\r\n\t\t\t\tlocal f = xio.open( name, 'r' )\r\n\t\t\t\tf:read( len )\r\n\t\t\t\tf:close()\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n-- ../src/doc/userguide/section_close.nw:31\r\nrequire 'lemock'\r\nlocal mc = lemock.controller()\r\nlocal myio = mc:mock()\r\nlocal fs   = mc:mock()\r\n\r\nmyio.open('abc', 'r') ;mc :returns(fs)\r\nmc :label('open')\r\n\r\nfs:read(mc.ANYARG) ;mc :returns('data')\r\nmc :atleastonce() :label('read') :depend('open')\r\n\r\nfs:close() ;mc :returns(true)\r\nmc :depend('open') :close('read')\r\n\r\nmc:replay()\r\nrequire 'foo'\r\nfoo.dump(myio, 'abc', 128)\r\n\r\nmc:verify()\r\n-- ../src/doc/userguide/section_close.nw:64\r\n\tend",
    "type": "function"
  }, {
    "id": 41,
    "text": "package.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.dump (xio, name, len)\r\n\t\t\t\tlocal f = xio.open( name, 'r' )\r\n\t\t\t\tf:read( len )\r\n\t\t\t\tf:close()\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "function foo.dump (xio, name, len)\r\n\t\t\t\tlocal f = xio.open( name, 'r' )\r\n\t\t\t\tf:read( len )\r\n\t\t\t\tf:close()\r\n\t\t\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 43,
    "text": "local f = xio.open( name, 'r' )",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "f:read( len )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "local myio = mc:mock()",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local fs   = mc:mock()",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "myio.open('abc', 'r')",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "mc :returns(fs)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "mc :label('open')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "fs:read(mc.ANYARG)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "mc :returns('data')",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "mc :atleastonce() :label('read') :depend('open')",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "fs:close()",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "mc :returns(true)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "mc :depend('open') :close('read')",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "foo.dump(myio, 'abc', 128)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function foo.dump (xio, name, len)\r\n\t\t\t\tlocal f = xio.open( name, 'r' )\r\n\t\t\t\tf:read( len )\r\n\t\t\t\tf:close()\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.dump (xio, name, len)\r\n\t\t\t\tlocal f = xio.open( name, 'r' )\r\n\t\t\t\tf:read( len )\r\n\t\t\t\tf:close()\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function example_depend_test ()\r\n\t\tpackage.loaded.foo = nil\r\n\t\tpackage.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.draw_square (sq)\r\n\t\t\t\tsq:botright() sq:topright() sq:rightedge()\r\n\t\t\t\tsq:botleft()  sq:topleft()  sq:leftedge()\r\n\t\t\t\tsq:topedge() sq:botedge()\r\n\t\t\t\tsq:fill()\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n-- ../src/doc/userguide/section_label_depend.nw:35\r\nrequire 'lemock'\r\nlocal mc = lemock.controller()\r\nlocal square = mc:mock()\r\n\r\nsquare:topleft()   ;mc :label('tl')\r\nsquare:topright()  ;mc :label('tr')\r\nsquare:botleft()   ;mc :label('bl')\r\nsquare:botright()  ;mc :label('br')\r\nsquare:leftedge()  ;mc :label('edge') :depend('tl', 'bl')\r\nsquare:rightedge() ;mc :label('edge') :depend('tr', 'br')\r\nsquare:topedge()   ;mc :label('edge') :depend('tl', 'tr')\r\nsquare:botedge()   ;mc :label('edge') :depend('bl', 'br')\r\nsquare:fill()      ;mc                :depend('edge')\r\n\r\nmc:replay()\r\nrequire 'foo'\r\nfoo.draw_square( square )\r\n\r\nmc:verify()\r\n-- ../src/doc/userguide/section_label_depend.nw:69\r\n\tend",
    "type": "function"
  }, {
    "id": 64,
    "text": "package.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.draw_square (sq)\r\n\t\t\t\tsq:botright() sq:topright() sq:rightedge()\r\n\t\t\t\tsq:botleft()  sq:topleft()  sq:leftedge()\r\n\t\t\t\tsq:topedge() sq:botedge()\r\n\t\t\t\tsq:fill()\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "function foo.draw_square (sq)\r\n\t\t\t\tsq:botright() sq:topright() sq:rightedge()\r\n\t\t\t\tsq:botleft()  sq:topleft()  sq:leftedge()\r\n\t\t\t\tsq:topedge() sq:botedge()\r\n\t\t\t\tsq:fill()\r\n\t\t\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 66,
    "text": "sq:botright()",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "sq:topright()",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "sq:rightedge()",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "sq:botleft()",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "sq:topleft()",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "sq:leftedge()",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "sq:topedge()",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "sq:botedge()",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "sq:fill()",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "local square = mc:mock()",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "square:topleft()",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "mc :label('tl')",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "square:topright()",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "mc :label('tr')",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "square:botleft()",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "mc :label('bl')",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "square:botright()",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "mc :label('br')",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "square:leftedge()",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "mc :label('edge') :depend('tl', 'bl')",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "square:rightedge()",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "mc :label('edge') :depend('tr', 'br')",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "square:topedge()",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "mc :label('edge') :depend('tl', 'tr')",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "square:botedge()",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "mc :label('edge') :depend('bl', 'br')",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "square:fill()",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "mc                :depend('edge')",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "foo.draw_square( square )",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function foo.draw_square (sq)\r\n\t\t\t\tsq:botright() sq:topright() sq:rightedge()\r\n\t\t\t\tsq:botleft()  sq:topleft()  sq:leftedge()\r\n\t\t\t\tsq:topedge() sq:botedge()\r\n\t\t\t\tsq:fill()\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.draw_square (sq)\r\n\t\t\t\tsq:botright() sq:topright() sq:rightedge()\r\n\t\t\t\tsq:botleft()  sq:topleft()  sq:leftedge()\r\n\t\t\t\tsq:topedge() sq:botedge()\r\n\t\t\t\tsq:fill()\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function overloading_test ()\r\n\t\t\r\n-- ../src/doc/userguide/chapter_tricks.nw:39\r\nrequire 'lemock'\r\nlocal mc = lemock.controller()\r\nlocal m = mc:mock()\r\n\r\ndo\r\nlocal function add (a, b)\r\n    if type(a) == 'number' then\r\n        return m.add_number(a, b)\r\n    else\r\n        return m.add_string(a, b)\r\n    end\r\nend\r\nrawset( m, 'add', add ) -- not recorded\r\nend -- do\r\n\r\nm.add_number(1, 2)         ;mc :returns(3)\r\nm.add_string('foo', 'bar') ;mc :returns('foobar')\r\n\r\nmc:replay()\r\nassert_equal( 3, m.add(1, 2) )\r\nassert_equal( 'foobar', m.add('foo', 'bar') )\r\n\r\nmc:verify()\r\n-- ../src/doc/userguide/chapter_tricks.nw:67\r\n\tend",
    "type": "function"
  }, {
    "id": 101,
    "text": "do\r\nlocal function add (a, b)\r\n    if type(a) == 'number' then\r\n        return m.add_number(a, b)\r\n    else\r\n        return m.add_string(a, b)\r\n    end\r\nend\r\nrawset( m, 'add', add ) -- not recorded\r\nend",
    "type": "statement:do"
  }, {
    "id": 102,
    "text": "local function add (a, b)\r\n    if type(a) == 'number' then\r\n        return m.add_number(a, b)\r\n    else\r\n        return m.add_string(a, b)\r\n    end\r\nend",
    "type": "statement:localfunction"
  }, {
    "id": 103,
    "text": "if type(a) == 'number' then\r\n        return m.add_number(a, b)\r\n    else\r\n        return m.add_string(a, b)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "rawset( m, 'add', add )",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "m.add_number(1, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "mc :returns(3)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "m.add_string('foo', 'bar')",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "mc :returns('foobar')",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert_equal( 3, m.add(1, 2) )",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert_equal( 'foobar', m.add('foo', 'bar') )",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "local function add (a, b)\r\n    if type(a) == 'number' then\r\n        return m.add_number(a, b)\r\n    else\r\n        return m.add_string(a, b)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function returns_error_test ()\r\n\t\t\r\n-- ../src/doc/userguide/section_returns_error.nw:27\r\nrequire 'lemock'\r\nlocal mc = lemock.controller()\r\nlocal m = mc:mock()\r\n\r\nm:foo(17)  ;mc :returns(nil, \"index out of range\")\r\nm:bar(-1)  ;mc :error(\"invalid index\")\r\n-- ../src/doc/userguide/section_returns_error.nw:38\r\n\tend",
    "type": "function"
  }, {
    "id": 115,
    "text": "m:foo(17)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "mc :returns(nil, \"index out of range\")",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "m:bar(-1)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "mc :error(\"invalid index\")",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function example_simple_test ()\r\n\t\tpackage.loaded.foo = nil\r\n\t\tpackage.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tq = require 'luasql.sqlite3'\r\n\t\t\tfunction foo.insert_data()\r\n\t\t\t\tlocal env = q()\r\n\t\t\t\tlocal con = env:connect( '/data/base' )\r\n\t\t\t\tlocal ok, err = pcall( con.execute, con, 'insert foo bar' )\r\n\t\t\t\tcon:close()\r\n\t\t\t\tenv:close()\r\n\t\t\t\treturn ok\r\n\t\t\tend\r\n\t\t\treturn foo\r\n\t\tend\r\n\t\t\r\n-- ../src/doc/userguide/chapter_introduction.nw:40\r\n-- Setup\r\nrequire 'lemock'\r\nlocal mc = lemock.controller()\r\nlocal sqlite3 = mc:mock()\r\nlocal env     = mc:mock()\r\nlocal con     = mc:mock()\r\npackage.loaded.luasql = nil\r\npackage.preload['luasql.sqlite3'] = function ()\r\n    luasql = {}\r\n    luasql.sqlite3 = sqlite3\r\n    return sqlite3\r\nend\r\n\r\n-- Record\r\nsqlite3()                 ;mc :returns(env)\r\nenv:connect('/data/base') ;mc :returns(con)\r\ncon:execute(mc.ANYARGS)   ;mc :error('LuaSQL: no such table')\r\ncon:close()\r\nenv:close()\r\n\r\n-- Replay\r\nmc:replay()\r\nrequire 'foo'\r\nlocal res = foo.insert_data(17)\r\nassert(res==false)\r\n\r\n--Verify\r\nmc:verify()\r\n-- ../src/doc/userguide/chapter_introduction.nw:87\r\n\tend",
    "type": "function"
  }, {
    "id": 121,
    "text": "package.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tq = require 'luasql.sqlite3'\r\n\t\t\tfunction foo.insert_data()\r\n\t\t\t\tlocal env = q()\r\n\t\t\t\tlocal con = env:connect( '/data/base' )\r\n\t\t\t\tlocal ok, err = pcall( con.execute, con, 'insert foo bar' )\r\n\t\t\t\tcon:close()\r\n\t\t\t\tenv:close()\r\n\t\t\t\treturn ok\r\n\t\t\tend\r\n\t\t\treturn foo\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "q = require 'luasql.sqlite3'",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "function foo.insert_data()\r\n\t\t\t\tlocal env = q()\r\n\t\t\t\tlocal con = env:connect( '/data/base' )\r\n\t\t\t\tlocal ok, err = pcall( con.execute, con, 'insert foo bar' )\r\n\t\t\t\tcon:close()\r\n\t\t\t\tenv:close()\r\n\t\t\t\treturn ok\r\n\t\t\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 124,
    "text": "local env = q()",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local con = env:connect( '/data/base' )",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local ok, err = pcall( con.execute, con, 'insert foo bar' )",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "con:close()",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "env:close()",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "local sqlite3 = mc:mock()",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local env     = mc:mock()",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "local con     = mc:mock()",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "package.loaded.luasql = nil",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "package.preload['luasql.sqlite3'] = function ()\r\n    luasql = {}\r\n    luasql.sqlite3 = sqlite3\r\n    return sqlite3\r\nend",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "luasql = {}",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "luasql.sqlite3 = sqlite3",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "sqlite3()",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "mc :returns(env)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "env:connect('/data/base')",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "mc :returns(con)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "con:execute(mc.ANYARGS)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "mc :error('LuaSQL: no such table')",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "local res = foo.insert_data(17)",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "assert(res==false)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function foo.insert_data()\r\n\t\t\t\tlocal env = q()\r\n\t\t\t\tlocal con = env:connect( '/data/base' )\r\n\t\t\t\tlocal ok, err = pcall( con.execute, con, 'insert foo bar' )\r\n\t\t\t\tcon:close()\r\n\t\t\t\tenv:close()\r\n\t\t\t\treturn ok\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function ()\r\n\t\t\tfoo = {}\r\n\t\t\tq = require 'luasql.sqlite3'\r\n\t\t\tfunction foo.insert_data()\r\n\t\t\t\tlocal env = q()\r\n\t\t\t\tlocal con = env:connect( '/data/base' )\r\n\t\t\t\tlocal ok, err = pcall( con.execute, con, 'insert foo bar' )\r\n\t\t\t\tcon:close()\r\n\t\t\t\tenv:close()\r\n\t\t\t\treturn ok\r\n\t\t\tend\r\n\t\t\treturn foo\r\n\t\tend",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function ()\r\n    luasql = {}\r\n    luasql.sqlite3 = sqlite3\r\n    return sqlite3\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function example_times_test ()\r\n\t\tpackage.loaded.foo = nil\r\n\t\tpackage.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.mk_watcher ( con )\r\n\t\t\t\tlocal o = {}\r\n\t\t\t\tfunction o:set ( key, val )\r\n\t\t\t\t\tcon:update( key, val )\r\n\t\t\t\tend\r\n\t\t\t\treturn o\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n-- ../src/doc/userguide/section_times.nw:36\r\nrequire 'lemock'\r\nlocal mc = lemock.controller()\r\nlocal con = mc:mock()\r\n\r\ncon:log(mc.ANYARGS) ;mc                :anytimes()\r\ncon:update('x',3)   ;mc :returns(true) :atleastonce()\r\n\r\nmc:replay()\r\nrequire 'foo'\r\nlocal watcher = foo.mk_watcher( con )\r\nwatcher:set( 'x', 3 )\r\n\r\nmc:verify()\r\n-- ../src/doc/userguide/section_times.nw:65\r\n\tend",
    "type": "function"
  }, {
    "id": 152,
    "text": "package.preload.foo = function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.mk_watcher ( con )\r\n\t\t\t\tlocal o = {}\r\n\t\t\t\tfunction o:set ( key, val )\r\n\t\t\t\t\tcon:update( key, val )\r\n\t\t\t\tend\r\n\t\t\t\treturn o\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "function foo.mk_watcher ( con )\r\n\t\t\t\tlocal o = {}\r\n\t\t\t\tfunction o:set ( key, val )\r\n\t\t\t\t\tcon:update( key, val )\r\n\t\t\t\tend\r\n\t\t\t\treturn o\r\n\t\t\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 154,
    "text": "local o = {}",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "function o:set ( key, val )\r\n\t\t\t\t\tcon:update( key, val )\r\n\t\t\t\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 156,
    "text": "con:update( key, val )",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "con:log(mc.ANYARGS)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "mc                :anytimes()",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "con:update('x',3)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "mc :returns(true) :atleastonce()",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "local watcher = foo.mk_watcher( con )",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "watcher:set( 'x', 3 )",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function foo.mk_watcher ( con )\r\n\t\t\t\tlocal o = {}\r\n\t\t\t\tfunction o:set ( key, val )\r\n\t\t\t\t\tcon:update( key, val )\r\n\t\t\t\tend\r\n\t\t\t\treturn o\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function o:set ( key, val )\r\n\t\t\t\t\tcon:update( key, val )\r\n\t\t\t\tend",
    "type": "function"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "function ()\r\n\t\t\tfoo = {}\r\n\t\t\tfunction foo.mk_watcher ( con )\r\n\t\t\t\tlocal o = {}\r\n\t\t\t\tfunction o:set ( key, val )\r\n\t\t\t\t\tcon:update( key, val )\r\n\t\t\t\tend\r\n\t\t\t\treturn o\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "",
    "type": "function container"
  }, {
    "id": 171,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 172,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 173,
    "text": "add",
    "type": "global function"
  }, {
    "id": 174,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 175,
    "text": "open",
    "type": "global function"
  }, {
    "id": 176,
    "text": "add_number",
    "type": "global function"
  }, {
    "id": 177,
    "text": "open",
    "type": "global function"
  }, {
    "id": 178,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 179,
    "text": "module",
    "type": "global function"
  }, {
    "id": 180,
    "text": "sqlite3",
    "type": "global function"
  }, {
    "id": 181,
    "text": "q",
    "type": "global function"
  }, {
    "id": 182,
    "text": "time",
    "type": "global function"
  }, {
    "id": 183,
    "text": "add_string",
    "type": "global function"
  }, {
    "id": 184,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 185,
    "text": "x",
    "type": "global function"
  }, {
    "id": 186,
    "text": "type",
    "type": "global function"
  }, {
    "id": 187,
    "text": "m",
    "type": "global function"
  }, {
    "id": 188,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 189,
    "text": "require",
    "type": "global function"
  }, {
    "id": 190,
    "text": "",
    "type": "global variable"
  }, {
    "id": 191,
    "text": "",
    "type": "variable container"
  }, {
    "id": 192,
    "text": "",
    "type": "require container"
  }, {
    "id": 193,
    "text": "foo",
    "type": "module"
  } ]
}