{
  "_filename": "action_generic.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lemock/build/unit/action_generic.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 65
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 65
  }, {
    "from": 71,
    "label": "has",
    "to": 65
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 65
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 77
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 65
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 65
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 65
  }, {
    "from": 101,
    "label": "has",
    "to": 65
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 65
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 65
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 65
  }, {
    "from": 108,
    "label": "has",
    "to": 65
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 65
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 65
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 65
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 65
  }, {
    "from": 116,
    "label": "has",
    "to": 65
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 120,
    "label": "has",
    "to": 125
  }, {
    "from": 120,
    "label": "has",
    "to": 65
  }, {
    "from": 120,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 127,
    "label": "has",
    "to": 133
  }, {
    "from": 127,
    "label": "has",
    "to": 134
  }, {
    "from": 127,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 65
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 65
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 65
  }, {
    "from": 143,
    "label": "has",
    "to": 65
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 65
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 65
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 151,
    "label": "has",
    "to": 65
  }, {
    "from": 151,
    "label": "has",
    "to": 65
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 65
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 65
  }, {
    "from": 159,
    "label": "has",
    "to": 65
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 65
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 141
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 144
  }, {
    "from": 167,
    "label": "has",
    "to": 65
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 65
  }, {
    "from": 167,
    "label": "has",
    "to": 65
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 148
  }, {
    "from": 170,
    "label": "has",
    "to": 157
  }, {
    "from": 170,
    "label": "has",
    "to": 65
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 65
  }, {
    "from": 172,
    "label": "has",
    "to": 65
  }, {
    "from": 172,
    "label": "has",
    "to": 65
  }, {
    "from": 172,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 144
  }, {
    "from": 176,
    "label": "has",
    "to": 65
  }, {
    "from": 176,
    "label": "has",
    "to": 168
  }, {
    "from": 176,
    "label": "has",
    "to": 65
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 65
  }, {
    "from": 176,
    "label": "has",
    "to": 65
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 148
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 179,
    "label": "has",
    "to": 65
  }, {
    "from": 179,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 65
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 65
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 156
  }, {
    "from": 187,
    "label": "has",
    "to": 65
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 65
  }, {
    "from": 189,
    "label": "has",
    "to": 65
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 195,
    "label": "has",
    "to": 199
  }, {
    "from": 192,
    "label": "has",
    "to": 200
  }, {
    "from": 192,
    "label": "has",
    "to": 65
  }, {
    "from": 192,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 192,
    "label": "has",
    "to": 65
  }, {
    "from": 192,
    "label": "has",
    "to": 65
  }, {
    "from": 192,
    "label": "has",
    "to": 204
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 205,
    "label": "has",
    "to": 208
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 205,
    "label": "has",
    "to": 65
  }, {
    "from": 205,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 213,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 213,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 218,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 213,
    "label": "has",
    "to": 65
  }, {
    "from": 213,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 216
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 65
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 65
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 231,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 234,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 234,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 234,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 245,
    "label": "has",
    "to": 248
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 249,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 249,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 260,
    "label": "has",
    "to": 263
  }, {
    "from": 260,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 264,
    "label": "has",
    "to": 266
  }, {
    "from": 260,
    "label": "has",
    "to": 267
  }, {
    "from": 260,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 272,
    "label": "has",
    "to": 274
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 275,
    "label": "has",
    "to": 278
  }, {
    "from": 275,
    "label": "has",
    "to": 279
  }, {
    "from": 275,
    "label": "has",
    "to": 280
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 288,
    "label": "has",
    "to": 290
  }, {
    "from": 288,
    "label": "has",
    "to": 291
  }, {
    "from": 288,
    "label": "has",
    "to": 292
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 293,
    "label": "has",
    "to": 295
  }, {
    "from": 293,
    "label": "has",
    "to": 296
  }, {
    "from": 293,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 300,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 302,
    "label": "has",
    "to": 305
  }, {
    "from": 302,
    "label": "has",
    "to": 306
  }, {
    "from": 300,
    "label": "has",
    "to": 307
  }, {
    "from": 308,
    "label": "has",
    "to": 84
  }, {
    "from": 308,
    "label": "has",
    "to": 85
  }, {
    "from": 308,
    "label": "has",
    "to": 65
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 311,
    "label": "has",
    "to": 277
  }, {
    "from": 312,
    "label": "has",
    "to": 304
  }, {
    "from": 71,
    "label": "calls",
    "to": 345
  }, {
    "from": 96,
    "label": "calls",
    "to": 345
  }, {
    "from": 127,
    "label": "calls",
    "to": 345
  }, {
    "from": 159,
    "label": "calls",
    "to": 345
  }, {
    "from": 159,
    "label": "calls",
    "to": 345
  }, {
    "from": 172,
    "label": "calls",
    "to": 345
  }, {
    "from": 172,
    "label": "calls",
    "to": 345
  }, {
    "from": 172,
    "label": "calls",
    "to": 345
  }, {
    "from": 183,
    "label": "calls",
    "to": 345
  }, {
    "from": 189,
    "label": "calls",
    "to": 345
  }, {
    "from": 189,
    "label": "calls",
    "to": 345
  }, {
    "from": 213,
    "label": "calls",
    "to": 346
  }, {
    "from": 300,
    "label": "calls",
    "to": 346
  }, {
    "from": 234,
    "label": "calls",
    "to": 364
  }, {
    "from": 260,
    "label": "calls",
    "to": 364
  }, {
    "from": 260,
    "label": "calls",
    "to": 364
  }, {
    "from": 293,
    "label": "calls",
    "to": 364
  }, {
    "from": 293,
    "label": "calls",
    "to": 364
  }, {
    "from": 293,
    "label": "calls",
    "to": 364
  }, {
    "from": 96,
    "label": "calls",
    "to": 347
  }, {
    "from": 143,
    "label": "calls",
    "to": 348
  }, {
    "from": 167,
    "label": "calls",
    "to": 348
  }, {
    "from": 176,
    "label": "calls",
    "to": 348
  }, {
    "from": 87,
    "label": "calls",
    "to": 74
  }, {
    "from": 90,
    "label": "calls",
    "to": 74
  }, {
    "from": 93,
    "label": "calls",
    "to": 74
  }, {
    "from": 71,
    "label": "calls",
    "to": 350
  }, {
    "from": 159,
    "label": "calls",
    "to": 350
  }, {
    "from": 159,
    "label": "calls",
    "to": 350
  }, {
    "from": 172,
    "label": "calls",
    "to": 350
  }, {
    "from": 172,
    "label": "calls",
    "to": 350
  }, {
    "from": 172,
    "label": "calls",
    "to": 350
  }, {
    "from": 172,
    "label": "calls",
    "to": 350
  }, {
    "from": 183,
    "label": "calls",
    "to": 350
  }, {
    "from": 101,
    "label": "calls",
    "to": 82
  }, {
    "from": 104,
    "label": "calls",
    "to": 82
  }, {
    "from": 106,
    "label": "calls",
    "to": 82
  }, {
    "from": 108,
    "label": "calls",
    "to": 82
  }, {
    "from": 127,
    "label": "calls",
    "to": 351
  }, {
    "from": 127,
    "label": "calls",
    "to": 351
  }, {
    "from": 116,
    "label": "calls",
    "to": 358
  }, {
    "from": 116,
    "label": "calls",
    "to": 358
  }, {
    "from": 71,
    "label": "calls",
    "to": 359
  }, {
    "from": 176,
    "label": "calls",
    "to": 367
  }, {
    "from": 192,
    "label": "calls",
    "to": 367
  }, {
    "from": 313,
    "label": "calls",
    "to": 354
  }, {
    "from": 64,
    "label": "calls",
    "to": 362
  }, {
    "from": 275,
    "label": "calls",
    "to": 365
  }, {
    "from": 300,
    "label": "calls",
    "to": 365
  }, {
    "from": 96,
    "label": "calls",
    "to": 357
  }, {
    "from": 127,
    "label": "calls",
    "to": 357
  }, {
    "from": 205,
    "label": "calls",
    "to": 357
  }, {
    "from": 67,
    "label": "calls",
    "to": 64
  }, {
    "from": 120,
    "label": "calls",
    "to": 64
  }, {
    "from": 205,
    "label": "calls",
    "to": 64
  }, {
    "from": 249,
    "label": "calls",
    "to": 370
  }, {
    "from": 249,
    "label": "calls",
    "to": 370
  }, {
    "from": 272,
    "label": "calls",
    "to": 370
  }, {
    "from": 275,
    "label": "calls",
    "to": 370
  }, {
    "from": 284,
    "label": "calls",
    "to": 370
  }, {
    "from": 288,
    "label": "calls",
    "to": 370
  }, {
    "from": 300,
    "label": "calls",
    "to": 370
  }, {
    "from": 234,
    "label": "calls",
    "to": 361
  }, {
    "from": 234,
    "label": "calls",
    "to": 361
  }, {
    "from": 300,
    "label": "calls",
    "to": 361
  }, {
    "from": 313,
    "label": "calls",
    "to": 352
  }, {
    "from": 313,
    "label": "calls",
    "to": 352
  }, {
    "from": 127,
    "label": "calls",
    "to": 71
  }, {
    "from": 127,
    "label": "calls",
    "to": 71
  }, {
    "from": 172,
    "label": "calls",
    "to": 71
  }, {
    "from": 183,
    "label": "calls",
    "to": 71
  }, {
    "from": 226,
    "label": "calls",
    "to": 71
  }, {
    "from": 234,
    "label": "calls",
    "to": 71
  }, {
    "from": 313,
    "label": "calls",
    "to": 67
  }, {
    "from": 313,
    "label": "calls",
    "to": 67
  }, {
    "from": 313,
    "label": "calls",
    "to": 67
  }, {
    "from": 313,
    "label": "calls",
    "to": 67
  }, {
    "from": 313,
    "label": "calls",
    "to": 67
  }, {
    "from": 313,
    "label": "calls",
    "to": 67
  }, {
    "from": 313,
    "label": "calls",
    "to": 67
  }, {
    "from": 288,
    "label": "calls",
    "to": 67
  }, {
    "from": 151,
    "label": "calls",
    "to": 360
  }, {
    "from": 185,
    "label": "calls",
    "to": 360
  }, {
    "from": 249,
    "label": "calls",
    "to": 356
  }, {
    "from": 269,
    "label": "calls",
    "to": 356
  }, {
    "from": 281,
    "label": "calls",
    "to": 356
  }, {
    "from": 275,
    "label": "calls",
    "to": 353
  }, {
    "from": 300,
    "label": "calls",
    "to": 353
  }, {
    "from": 147,
    "label": "calls",
    "to": 363
  }, {
    "from": 170,
    "label": "calls",
    "to": 363
  }, {
    "from": 179,
    "label": "calls",
    "to": 363
  }, {
    "from": 205,
    "label": "calls",
    "to": 366
  }, {
    "from": 213,
    "label": "calls",
    "to": 226
  }, {
    "from": 228,
    "label": "calls",
    "to": 368
  }, {
    "from": 300,
    "label": "calls",
    "to": 368
  }, {
    "from": 313,
    "label": "calls",
    "to": 369
  }, {
    "from": 245,
    "label": "calls",
    "to": 349
  }, {
    "from": 155,
    "label": "calls",
    "to": 355
  }, {
    "from": 187,
    "label": "calls",
    "to": 355
  }, {
    "from": 1,
    "label": "contains",
    "to": 313
  }, {
    "from": 313,
    "label": "declares",
    "to": 64
  }, {
    "from": 313,
    "label": "declares",
    "to": 67
  }, {
    "from": 313,
    "label": "declares",
    "to": 71
  }, {
    "from": 313,
    "label": "declares",
    "to": 74
  }, {
    "from": 313,
    "label": "declares",
    "to": 82
  }, {
    "from": 313,
    "label": "declares",
    "to": 87
  }, {
    "from": 313,
    "label": "declares",
    "to": 90
  }, {
    "from": 313,
    "label": "declares",
    "to": 93
  }, {
    "from": 313,
    "label": "declares",
    "to": 96
  }, {
    "from": 313,
    "label": "declares",
    "to": 101
  }, {
    "from": 313,
    "label": "declares",
    "to": 104
  }, {
    "from": 313,
    "label": "declares",
    "to": 106
  }, {
    "from": 313,
    "label": "declares",
    "to": 108
  }, {
    "from": 313,
    "label": "declares",
    "to": 112
  }, {
    "from": 313,
    "label": "declares",
    "to": 114
  }, {
    "from": 313,
    "label": "declares",
    "to": 116
  }, {
    "from": 313,
    "label": "declares",
    "to": 120
  }, {
    "from": 313,
    "label": "declares",
    "to": 127
  }, {
    "from": 313,
    "label": "declares",
    "to": 136
  }, {
    "from": 313,
    "label": "declares",
    "to": 139
  }, {
    "from": 313,
    "label": "declares",
    "to": 143
  }, {
    "from": 313,
    "label": "declares",
    "to": 147
  }, {
    "from": 313,
    "label": "declares",
    "to": 151
  }, {
    "from": 313,
    "label": "declares",
    "to": 155
  }, {
    "from": 313,
    "label": "declares",
    "to": 159
  }, {
    "from": 313,
    "label": "declares",
    "to": 162
  }, {
    "from": 313,
    "label": "declares",
    "to": 164
  }, {
    "from": 313,
    "label": "declares",
    "to": 167
  }, {
    "from": 313,
    "label": "declares",
    "to": 170
  }, {
    "from": 313,
    "label": "declares",
    "to": 172
  }, {
    "from": 313,
    "label": "declares",
    "to": 176
  }, {
    "from": 313,
    "label": "declares",
    "to": 179
  }, {
    "from": 313,
    "label": "declares",
    "to": 183
  }, {
    "from": 313,
    "label": "declares",
    "to": 185
  }, {
    "from": 313,
    "label": "declares",
    "to": 187
  }, {
    "from": 313,
    "label": "declares",
    "to": 189
  }, {
    "from": 313,
    "label": "declares",
    "to": 192
  }, {
    "from": 313,
    "label": "declares",
    "to": 205
  }, {
    "from": 313,
    "label": "declares",
    "to": 213
  }, {
    "from": 313,
    "label": "declares",
    "to": 226
  }, {
    "from": 313,
    "label": "declares",
    "to": 228
  }, {
    "from": 313,
    "label": "declares",
    "to": 230
  }, {
    "from": 313,
    "label": "declares",
    "to": 231
  }, {
    "from": 313,
    "label": "declares",
    "to": 234
  }, {
    "from": 313,
    "label": "declares",
    "to": 245
  }, {
    "from": 313,
    "label": "declares",
    "to": 249
  }, {
    "from": 313,
    "label": "declares",
    "to": 260
  }, {
    "from": 313,
    "label": "declares",
    "to": 269
  }, {
    "from": 313,
    "label": "declares",
    "to": 272
  }, {
    "from": 313,
    "label": "declares",
    "to": 275
  }, {
    "from": 313,
    "label": "declares",
    "to": 281
  }, {
    "from": 313,
    "label": "declares",
    "to": 284
  }, {
    "from": 313,
    "label": "declares",
    "to": 288
  }, {
    "from": 313,
    "label": "declares",
    "to": 293
  }, {
    "from": 313,
    "label": "declares",
    "to": 298
  }, {
    "from": 313,
    "label": "declares",
    "to": 300
  }, {
    "from": 313,
    "label": "declares",
    "to": 308
  }, {
    "from": 313,
    "label": "declares",
    "to": 310
  }, {
    "from": 313,
    "label": "declares",
    "to": 311
  }, {
    "from": 313,
    "label": "declares",
    "to": 312
  }, {
    "from": 1,
    "label": "contains",
    "to": 374
  }, {
    "from": 1,
    "label": "contains",
    "to": 375
  }, {
    "from": 374,
    "label": "initializes",
    "to": 376
  }, {
    "from": 374,
    "label": "initializes",
    "to": 377
  }, {
    "from": 374,
    "label": "initializes",
    "to": 378
  }, {
    "from": 374,
    "label": "initializes",
    "to": 379
  }, {
    "from": 374,
    "label": "initializes",
    "to": 380
  }, {
    "from": 374,
    "label": "initializes",
    "to": 381
  }, {
    "from": 374,
    "label": "initializes",
    "to": 382
  }, {
    "from": 374,
    "label": "initializes",
    "to": 383
  }, {
    "from": 374,
    "label": "initializes",
    "to": 384
  }, {
    "from": 384,
    "label": "assigns",
    "to": 385
  }, {
    "from": 374,
    "label": "initializes",
    "to": 386
  }, {
    "from": 386,
    "label": "assigns",
    "to": 387
  }, {
    "from": 374,
    "label": "initializes",
    "to": 388
  }, {
    "from": 388,
    "label": "assigns",
    "to": 389
  }, {
    "from": 374,
    "label": "initializes",
    "to": 390
  }, {
    "from": 374,
    "label": "initializes",
    "to": 391
  }, {
    "from": 391,
    "label": "assigns",
    "to": 392
  }, {
    "from": 374,
    "label": "initializes",
    "to": 393
  }, {
    "from": 393,
    "label": "assigns",
    "to": 394
  }, {
    "from": 374,
    "label": "initializes",
    "to": 395
  }, {
    "from": 395,
    "label": "assigns",
    "to": 396
  }, {
    "from": 374,
    "label": "initializes",
    "to": 397
  }, {
    "from": 397,
    "label": "assigns",
    "to": 398
  }, {
    "from": 374,
    "label": "initializes",
    "to": 399
  }, {
    "from": 374,
    "label": "initializes",
    "to": 400
  }, {
    "from": 400,
    "label": "assigns",
    "to": 401
  }, {
    "from": 374,
    "label": "initializes",
    "to": 402
  }, {
    "from": 402,
    "label": "assigns",
    "to": 403
  }, {
    "from": 374,
    "label": "initializes",
    "to": 404
  }, {
    "from": 374,
    "label": "initializes",
    "to": 405
  }, {
    "from": 405,
    "label": "assigns",
    "to": 406
  }, {
    "from": 374,
    "label": "initializes",
    "to": 407
  }, {
    "from": 407,
    "label": "assigns",
    "to": 408
  }, {
    "from": 374,
    "label": "initializes",
    "to": 409
  }, {
    "from": 409,
    "label": "assigns",
    "to": 410
  }, {
    "from": 374,
    "label": "initializes",
    "to": 411
  }, {
    "from": 411,
    "label": "assigns",
    "to": 412
  }, {
    "from": 374,
    "label": "initializes",
    "to": 413
  }, {
    "from": 413,
    "label": "assigns",
    "to": 414
  }, {
    "from": 374,
    "label": "initializes",
    "to": 415
  }, {
    "from": 375,
    "label": "initializes",
    "to": 373
  }, {
    "from": 393,
    "label": "contains",
    "to": 2
  }, {
    "from": 393,
    "label": "contains",
    "to": 3
  }, {
    "from": 393,
    "label": "contains",
    "to": 4
  }, {
    "from": 393,
    "label": "contains",
    "to": 5
  }, {
    "from": 393,
    "label": "contains",
    "to": 6
  }, {
    "from": 393,
    "label": "contains",
    "to": 7
  }, {
    "from": 393,
    "label": "contains",
    "to": 8
  }, {
    "from": 393,
    "label": "contains",
    "to": 9
  }, {
    "from": 393,
    "label": "contains",
    "to": 10
  }, {
    "from": 393,
    "label": "contains",
    "to": 11
  }, {
    "from": 393,
    "label": "contains",
    "to": 12
  }, {
    "from": 393,
    "label": "contains",
    "to": 13
  }, {
    "from": 393,
    "label": "contains",
    "to": 14
  }, {
    "from": 393,
    "label": "contains",
    "to": 15
  }, {
    "from": 393,
    "label": "contains",
    "to": 16
  }, {
    "from": 393,
    "label": "contains",
    "to": 17
  }, {
    "from": 393,
    "label": "contains",
    "to": 18
  }, {
    "from": 393,
    "label": "contains",
    "to": 19
  }, {
    "from": 393,
    "label": "contains",
    "to": 20
  }, {
    "from": 393,
    "label": "contains",
    "to": 21
  }, {
    "from": 393,
    "label": "contains",
    "to": 22
  }, {
    "from": 393,
    "label": "contains",
    "to": 23
  }, {
    "from": 393,
    "label": "contains",
    "to": 24
  }, {
    "from": 393,
    "label": "contains",
    "to": 25
  }, {
    "from": 393,
    "label": "contains",
    "to": 26
  }, {
    "from": 393,
    "label": "contains",
    "to": 27
  }, {
    "from": 393,
    "label": "contains",
    "to": 28
  }, {
    "from": 393,
    "label": "contains",
    "to": 29
  }, {
    "from": 393,
    "label": "contains",
    "to": 30
  }, {
    "from": 393,
    "label": "contains",
    "to": 31
  }, {
    "from": 393,
    "label": "contains",
    "to": 32
  }, {
    "from": 393,
    "label": "contains",
    "to": 33
  }, {
    "from": 393,
    "label": "contains",
    "to": 34
  }, {
    "from": 393,
    "label": "contains",
    "to": 35
  }, {
    "from": 393,
    "label": "contains",
    "to": 36
  }, {
    "from": 393,
    "label": "contains",
    "to": 37
  }, {
    "from": 393,
    "label": "contains",
    "to": 38
  }, {
    "from": 393,
    "label": "contains",
    "to": 39
  }, {
    "from": 393,
    "label": "contains",
    "to": 40
  }, {
    "from": 393,
    "label": "contains",
    "to": 41
  }, {
    "from": 393,
    "label": "contains",
    "to": 42
  }, {
    "from": 393,
    "label": "contains",
    "to": 43
  }, {
    "from": 393,
    "label": "contains",
    "to": 44
  }, {
    "from": 393,
    "label": "contains",
    "to": 45
  }, {
    "from": 393,
    "label": "contains",
    "to": 46
  }, {
    "from": 393,
    "label": "contains",
    "to": 47
  }, {
    "from": 393,
    "label": "contains",
    "to": 48
  }, {
    "from": 393,
    "label": "contains",
    "to": 49
  }, {
    "from": 393,
    "label": "contains",
    "to": 50
  }, {
    "from": 393,
    "label": "contains",
    "to": 51
  }, {
    "from": 393,
    "label": "contains",
    "to": 52
  }, {
    "from": 393,
    "label": "contains",
    "to": 53
  }, {
    "from": 393,
    "label": "contains",
    "to": 54
  }, {
    "from": 393,
    "label": "contains",
    "to": 55
  }, {
    "from": 393,
    "label": "contains",
    "to": 56
  }, {
    "from": 393,
    "label": "contains",
    "to": 57
  }, {
    "from": 393,
    "label": "contains",
    "to": 58
  }, {
    "from": 393,
    "label": "contains",
    "to": 59
  }, {
    "from": 393,
    "label": "contains",
    "to": 60
  }, {
    "from": 393,
    "label": "contains",
    "to": 61
  }, {
    "from": 393,
    "label": "contains",
    "to": 62
  }, {
    "from": 393,
    "label": "contains",
    "to": 63
  }, {
    "from": 371,
    "label": "contains",
    "to": 87
  }, {
    "from": 372,
    "label": "contains",
    "to": 87
  }, {
    "from": 393,
    "label": "contains",
    "to": 87
  }, {
    "from": 416,
    "label": "contains",
    "to": 87
  }, {
    "from": 371,
    "label": "contains",
    "to": 90
  }, {
    "from": 372,
    "label": "contains",
    "to": 90
  }, {
    "from": 393,
    "label": "contains",
    "to": 90
  }, {
    "from": 416,
    "label": "contains",
    "to": 90
  }, {
    "from": 371,
    "label": "contains",
    "to": 93
  }, {
    "from": 372,
    "label": "contains",
    "to": 93
  }, {
    "from": 393,
    "label": "contains",
    "to": 93
  }, {
    "from": 416,
    "label": "contains",
    "to": 93
  }, {
    "from": 371,
    "label": "contains",
    "to": 96
  }, {
    "from": 372,
    "label": "contains",
    "to": 96
  }, {
    "from": 393,
    "label": "contains",
    "to": 96
  }, {
    "from": 416,
    "label": "contains",
    "to": 96
  }, {
    "from": 371,
    "label": "contains",
    "to": 101
  }, {
    "from": 372,
    "label": "contains",
    "to": 101
  }, {
    "from": 393,
    "label": "contains",
    "to": 101
  }, {
    "from": 416,
    "label": "contains",
    "to": 101
  }, {
    "from": 371,
    "label": "contains",
    "to": 104
  }, {
    "from": 372,
    "label": "contains",
    "to": 104
  }, {
    "from": 393,
    "label": "contains",
    "to": 104
  }, {
    "from": 416,
    "label": "contains",
    "to": 104
  }, {
    "from": 371,
    "label": "contains",
    "to": 106
  }, {
    "from": 372,
    "label": "contains",
    "to": 106
  }, {
    "from": 393,
    "label": "contains",
    "to": 106
  }, {
    "from": 416,
    "label": "contains",
    "to": 106
  }, {
    "from": 371,
    "label": "contains",
    "to": 108
  }, {
    "from": 372,
    "label": "contains",
    "to": 108
  }, {
    "from": 393,
    "label": "contains",
    "to": 108
  }, {
    "from": 416,
    "label": "contains",
    "to": 108
  }, {
    "from": 371,
    "label": "contains",
    "to": 112
  }, {
    "from": 372,
    "label": "contains",
    "to": 112
  }, {
    "from": 393,
    "label": "contains",
    "to": 112
  }, {
    "from": 416,
    "label": "contains",
    "to": 112
  }, {
    "from": 371,
    "label": "contains",
    "to": 114
  }, {
    "from": 372,
    "label": "contains",
    "to": 114
  }, {
    "from": 393,
    "label": "contains",
    "to": 114
  }, {
    "from": 416,
    "label": "contains",
    "to": 114
  }, {
    "from": 371,
    "label": "contains",
    "to": 116
  }, {
    "from": 372,
    "label": "contains",
    "to": 116
  }, {
    "from": 393,
    "label": "contains",
    "to": 116
  }, {
    "from": 416,
    "label": "contains",
    "to": 116
  }, {
    "from": 371,
    "label": "contains",
    "to": 120
  }, {
    "from": 372,
    "label": "contains",
    "to": 120
  }, {
    "from": 393,
    "label": "contains",
    "to": 120
  }, {
    "from": 416,
    "label": "contains",
    "to": 120
  }, {
    "from": 371,
    "label": "contains",
    "to": 127
  }, {
    "from": 372,
    "label": "contains",
    "to": 127
  }, {
    "from": 393,
    "label": "contains",
    "to": 127
  }, {
    "from": 416,
    "label": "contains",
    "to": 127
  }, {
    "from": 371,
    "label": "contains",
    "to": 136
  }, {
    "from": 372,
    "label": "contains",
    "to": 136
  }, {
    "from": 393,
    "label": "contains",
    "to": 136
  }, {
    "from": 416,
    "label": "contains",
    "to": 136
  }, {
    "from": 371,
    "label": "contains",
    "to": 139
  }, {
    "from": 372,
    "label": "contains",
    "to": 139
  }, {
    "from": 393,
    "label": "contains",
    "to": 139
  }, {
    "from": 416,
    "label": "contains",
    "to": 139
  }, {
    "from": 371,
    "label": "contains",
    "to": 143
  }, {
    "from": 372,
    "label": "contains",
    "to": 143
  }, {
    "from": 393,
    "label": "contains",
    "to": 143
  }, {
    "from": 416,
    "label": "contains",
    "to": 143
  }, {
    "from": 371,
    "label": "contains",
    "to": 147
  }, {
    "from": 372,
    "label": "contains",
    "to": 147
  }, {
    "from": 393,
    "label": "contains",
    "to": 147
  }, {
    "from": 416,
    "label": "contains",
    "to": 147
  }, {
    "from": 371,
    "label": "contains",
    "to": 151
  }, {
    "from": 372,
    "label": "contains",
    "to": 151
  }, {
    "from": 393,
    "label": "contains",
    "to": 151
  }, {
    "from": 416,
    "label": "contains",
    "to": 151
  }, {
    "from": 371,
    "label": "contains",
    "to": 155
  }, {
    "from": 372,
    "label": "contains",
    "to": 155
  }, {
    "from": 393,
    "label": "contains",
    "to": 155
  }, {
    "from": 416,
    "label": "contains",
    "to": 155
  }, {
    "from": 371,
    "label": "contains",
    "to": 159
  }, {
    "from": 372,
    "label": "contains",
    "to": 159
  }, {
    "from": 393,
    "label": "contains",
    "to": 159
  }, {
    "from": 416,
    "label": "contains",
    "to": 159
  }, {
    "from": 371,
    "label": "contains",
    "to": 162
  }, {
    "from": 372,
    "label": "contains",
    "to": 162
  }, {
    "from": 393,
    "label": "contains",
    "to": 162
  }, {
    "from": 416,
    "label": "contains",
    "to": 162
  }, {
    "from": 371,
    "label": "contains",
    "to": 164
  }, {
    "from": 372,
    "label": "contains",
    "to": 164
  }, {
    "from": 393,
    "label": "contains",
    "to": 164
  }, {
    "from": 416,
    "label": "contains",
    "to": 164
  }, {
    "from": 371,
    "label": "contains",
    "to": 167
  }, {
    "from": 372,
    "label": "contains",
    "to": 167
  }, {
    "from": 393,
    "label": "contains",
    "to": 167
  }, {
    "from": 416,
    "label": "contains",
    "to": 167
  }, {
    "from": 371,
    "label": "contains",
    "to": 170
  }, {
    "from": 372,
    "label": "contains",
    "to": 170
  }, {
    "from": 393,
    "label": "contains",
    "to": 170
  }, {
    "from": 416,
    "label": "contains",
    "to": 170
  }, {
    "from": 371,
    "label": "contains",
    "to": 172
  }, {
    "from": 372,
    "label": "contains",
    "to": 172
  }, {
    "from": 393,
    "label": "contains",
    "to": 172
  }, {
    "from": 416,
    "label": "contains",
    "to": 172
  }, {
    "from": 371,
    "label": "contains",
    "to": 176
  }, {
    "from": 372,
    "label": "contains",
    "to": 176
  }, {
    "from": 393,
    "label": "contains",
    "to": 176
  }, {
    "from": 416,
    "label": "contains",
    "to": 176
  }, {
    "from": 371,
    "label": "contains",
    "to": 179
  }, {
    "from": 372,
    "label": "contains",
    "to": 179
  }, {
    "from": 393,
    "label": "contains",
    "to": 179
  }, {
    "from": 416,
    "label": "contains",
    "to": 179
  }, {
    "from": 371,
    "label": "contains",
    "to": 183
  }, {
    "from": 372,
    "label": "contains",
    "to": 183
  }, {
    "from": 393,
    "label": "contains",
    "to": 183
  }, {
    "from": 416,
    "label": "contains",
    "to": 183
  }, {
    "from": 371,
    "label": "contains",
    "to": 185
  }, {
    "from": 372,
    "label": "contains",
    "to": 185
  }, {
    "from": 393,
    "label": "contains",
    "to": 185
  }, {
    "from": 416,
    "label": "contains",
    "to": 185
  }, {
    "from": 371,
    "label": "contains",
    "to": 187
  }, {
    "from": 372,
    "label": "contains",
    "to": 187
  }, {
    "from": 393,
    "label": "contains",
    "to": 187
  }, {
    "from": 416,
    "label": "contains",
    "to": 187
  }, {
    "from": 371,
    "label": "contains",
    "to": 189
  }, {
    "from": 372,
    "label": "contains",
    "to": 189
  }, {
    "from": 393,
    "label": "contains",
    "to": 189
  }, {
    "from": 416,
    "label": "contains",
    "to": 189
  }, {
    "from": 393,
    "label": "contains",
    "to": 314
  }, {
    "from": 393,
    "label": "contains",
    "to": 315
  }, {
    "from": 393,
    "label": "contains",
    "to": 316
  }, {
    "from": 393,
    "label": "contains",
    "to": 317
  }, {
    "from": 393,
    "label": "contains",
    "to": 318
  }, {
    "from": 393,
    "label": "contains",
    "to": 319
  }, {
    "from": 393,
    "label": "contains",
    "to": 320
  }, {
    "from": 393,
    "label": "contains",
    "to": 321
  }, {
    "from": 393,
    "label": "contains",
    "to": 322
  }, {
    "from": 393,
    "label": "contains",
    "to": 323
  }, {
    "from": 393,
    "label": "contains",
    "to": 324
  }, {
    "from": 393,
    "label": "contains",
    "to": 325
  }, {
    "from": 393,
    "label": "contains",
    "to": 326
  }, {
    "from": 393,
    "label": "contains",
    "to": 327
  }, {
    "from": 393,
    "label": "contains",
    "to": 328
  }, {
    "from": 393,
    "label": "contains",
    "to": 329
  }, {
    "from": 393,
    "label": "contains",
    "to": 330
  }, {
    "from": 393,
    "label": "contains",
    "to": 331
  }, {
    "from": 393,
    "label": "contains",
    "to": 332
  }, {
    "from": 393,
    "label": "contains",
    "to": 333
  }, {
    "from": 393,
    "label": "contains",
    "to": 334
  }, {
    "from": 393,
    "label": "contains",
    "to": 335
  }, {
    "from": 393,
    "label": "contains",
    "to": 336
  }, {
    "from": 393,
    "label": "contains",
    "to": 337
  }, {
    "from": 393,
    "label": "contains",
    "to": 338
  }, {
    "from": 393,
    "label": "contains",
    "to": 339
  }, {
    "from": 393,
    "label": "contains",
    "to": 340
  }, {
    "from": 393,
    "label": "contains",
    "to": 341
  }, {
    "from": 393,
    "label": "contains",
    "to": 342
  }, {
    "from": 393,
    "label": "contains",
    "to": 343
  }, {
    "from": 393,
    "label": "contains",
    "to": 344
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "action_generic",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Action.generic:add_close (label)\r\n\tadd_to_set( self, 'closelist', label )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function Action.generic:add_depend (d)\r\n\tadd_to_set( self, 'dependlist', d )\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function Action.generic:add_label (label)\r\n\tadd_to_set( self, 'labellist', label )\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function Action.generic:assert_satisfied ()\r\n\tassert( self.replay_count <= self.max_replays, \"lemock internal error\" )\r\n\tif not (\r\nself.min_replays <= self.replay_count\r\n                                  ) then\r\n\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t             , self.replay_count\r\n\t\t             , self.min_replays, self.max_replays\r\n\t\t             , self:tostring()\r\n\t\t       )\r\n\t\t       , 0\r\n\t\t)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function Action.generic:blocks ()\r\n\tif self:is_satisfied() then\r\n\t\treturn function () end\r\n\tend\r\n\treturn elements_of_set( self, 'labellist' )\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function Action.generic:closes ()\r\n\treturn elements_of_set( self, 'closelist' )\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function Action.generic:depends ()\r\n\treturn elements_of_set( self, 'dependlist' )\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function Action.generic:has_label (l)\r\n\tfor x in elements_of_set( self, 'labellist' ) do\r\n\t\tif x == l then return true end\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function Action.generic:is_expected ()\r\n\treturn self.replay_count < self.max_replays\r\n\t   and not self.is_blocked\r\n\t   and not self.is_closed\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function Action.generic:is_satisfied ()\r\n\treturn \r\nself.min_replays <= self.replay_count\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function Action.generic:match (key)\r\n\tif getmetatable(self) ~= getmetatable(key)  then return false end\r\n\tif self.mock ~= key.mock                    then return false end\r\n\treturn self:is_expected()\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function Action.generic:new (mock)\r\n\tlocal a = object( self )\r\n\ta.mock         = mock\r\n\ta.replay_count = 0\r\n\ta.min_replays  = 1\r\n\ta.max_replays  = 1\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function Action.generic:set_times (a, b)\r\n\tmin = a or 1\r\n\tmax = b or min\r\n\tmin, max = tonumber(min), tonumber(max)\r\n\tif (not min) or (not max) or (min >= math.huge)\r\n\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t           , qtostring( min )\r\n\t\t           , qtostring( max )\r\n\t\t           )\r\n\t\t     , 0\r\n\t\t     )\r\n\tend\r\n\tself.min_replays = min\r\n\tself.max_replays = max\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function Action.generic_call:get_returnvalue ()\r\n\tif self.has_returnvalue then\r\n\t\treturn self.returnvalue:unpack()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function Action.generic_call:set_returnvalue (...)\r\n\tself.returnvalue = Argv:new(...)\r\n\tself.has_returnvalue = true\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function Action.generic_call:match (q)\r\n\tif not Action.generic.match( self, q )  then return false end\r\n\tif not self.argv:equal( q.argv )        then return false end\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function Action.generic_call:new (m, ...)\r\n\tlocal a = Action.generic.new( self, m )\r\n\ta.argv   = Argv:new(...)\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function Action.call:match (q)\r\n\tif not Action.generic_call.match( self, q )  then return false end\r\n\tif self.key ~= q.key                         then return false end\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function Action.call:new (m, key, ...)\r\n\tlocal a = Action.generic_call.new( self, m, ... )\r\n\ta.key = key\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function Action.call:tostring ()\r\n\tif self.has_returnvalue then\r\n\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , self.argv:tostring()\r\n\t\t             , self.returnvalue:tostring()\r\n\t\t       )\r\n\telse\r\n\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , self.argv:tostring()\r\n\t\t       )\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function Action.index:get_returnvalue ()\r\n\treturn self.returnvalue\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function Action.index:set_returnvalue (v)\r\n\tself.returnvalue = v\r\n\tself.has_returnvalue = true\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function Action.index:match (q)\r\n\tif not Action.generic.match( self, q )  then return false end\r\n\tif self.key ~= q.key                    then return false end\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function Action.index:new (m, key)\r\n\tlocal a = Action.generic.new( self, m )\r\n\ta.key = key\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function Action.index:tostring ()\r\n\tlocal key = 'index '..tostring( self.key )\r\n\tif self.has_returnvalue then\r\n\t\treturn sfmt( \"index %s => %s\"\r\n\t\t             , tostring( self.key )\r\n\t\t             , qtostring( self.returnvalue )\r\n\t\t       )\r\n\telseif self.is_callable then\r\n\t\treturn sfmt( \"index %s()\"\r\n\t\t             , tostring( self.key )\r\n\t\t       )\r\n\telse\r\n\t\treturn sfmt( \"index %s\"\r\n\t\t             , tostring( self.key )\r\n\t\t       )\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function Action.newindex:match (q)\r\n\tif not Action.generic.match( self, q )  then return false end\r\n\tif self.key ~= q.key                    then return false end\r\n\tif not value_equal( self.val, q.val )\r\n\t   and self.val ~= Argv.ANYARG\r\n\t   and q.val    ~= Argv.ANYARG          then return false end\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function Action.newindex:new (m, key, val)\r\n\tlocal a = Action.generic.new( self, m )\r\n\ta.key    = key\r\n\ta.val    = val\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function Action.newindex:tostring ()\r\n\treturn sfmt( \"newindex %s = %s\"\r\n\t             , tostring(self.key)\r\n\t             , qtostring(self.val)\r\n\t       )\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "function Action.selfcall:match (q)\r\n\treturn Action.generic_call.match( self, q )\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "function Action.selfcall:new (m, ...)\r\n\tlocal a = Action.generic_call.new( self, m, ... )\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "function Action.selfcall:tostring ()\r\n\tif self.has_returnvalue then\r\n\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t             , self.argv:tostring()\r\n\t\t             , self.returnvalue:tostring()\r\n\t\t       )\r\n\telse\r\n\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t             , self.argv:tostring()\r\n\t\t       )\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function Action.generic:add_close (label)\r\n\t\tadd_to_set( self, 'closelist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 34,
    "text": "function Action.generic:add_depend (d)\r\n\t\tadd_to_set( self, 'dependlist', d )\r\n\tend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function Action.generic:add_label (label)\r\n\t\tadd_to_set( self, 'labellist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function Action.generic:assert_satisfied ()\r\n\t\tassert( self.replay_count <= self.max_replays, \"lemock internal error\" )\r\n\t\tif not (\r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:340\r\n                                  ) then\r\n\t\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function Action.generic:blocks ()\r\n\t\tif self:is_satisfied() then\r\n\t\t\treturn function () end\r\n\t\tend\r\n\t\treturn elements_of_set( self, 'labellist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function Action.generic:closes ()\r\n\t\treturn elements_of_set( self, 'closelist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 39,
    "text": "function Action.generic:depends ()\r\n\t\treturn elements_of_set( self, 'dependlist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function Action.generic:has_label (l)\r\n\t\tfor x in elements_of_set( self, 'labellist' ) do\r\n\t\t\tif x == l then return true end\r\n\t\tend\r\n\t\treturn false\r\n\tend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function Action.generic:is_expected ()\r\n\t\treturn self.replay_count < self.max_replays\r\n\t\t   and not self.is_blocked\r\n\t\t   and not self.is_closed\r\n\tend",
    "type": "function"
  }, {
    "id": 42,
    "text": "function Action.generic:is_satisfied ()\r\n\t\treturn \r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:335\r\n\tend",
    "type": "function"
  }, {
    "id": 43,
    "text": "function Action.generic:match (key)\r\n\t\tif getmetatable(self) ~= getmetatable(key)  then return false end\r\n\t\tif self.mock ~= key.mock                    then return false end\r\n\t\treturn self:is_expected()\r\n\tend",
    "type": "function"
  }, {
    "id": 44,
    "text": "function Action.generic:new (mock)\r\n\t\tlocal a = object( self )\r\n\t\ta.mock         = mock\r\n\t\ta.replay_count = 0\r\n\t\ta.min_replays  = 1\r\n\t\ta.max_replays  = 1\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 45,
    "text": "function Action.generic:set_times (a, b)\r\n\t\tmin = a or 1\r\n\t\tmax = b or min\r\n\t\tmin, max = tonumber(min), tonumber(max)\r\n\t\tif (not min) or (not max) or (min >= math.huge)\r\n\t\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )\r\n\t\tend\r\n\t\tself.min_replays = min\r\n\t\tself.max_replays = max\r\n\tend",
    "type": "function"
  }, {
    "id": 46,
    "text": "function Action.generic_call:get_returnvalue ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn self.returnvalue:unpack()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 47,
    "text": "function Action.generic_call:set_returnvalue (...)\r\n\t\tself.returnvalue = Argv:new(...)\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 48,
    "text": "function Action.generic_call:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif not self.argv:equal( q.argv )        then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 49,
    "text": "function Action.generic_call:new (m, ...)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.argv   = Argv:new(...)\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 50,
    "text": "function Action.call:match (q)\r\n\t\tif not Action.generic_call.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                         then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 51,
    "text": "function Action.call:new (m, key, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 52,
    "text": "function Action.call:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 53,
    "text": "function Action.index:get_returnvalue ()\r\n\t\treturn self.returnvalue\r\n\tend",
    "type": "function"
  }, {
    "id": 54,
    "text": "function Action.index:set_returnvalue (v)\r\n\t\tself.returnvalue = v\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 55,
    "text": "function Action.index:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 56,
    "text": "function Action.index:new (m, key)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 57,
    "text": "function Action.index:tostring ()\r\n\t\tlocal key = 'index '..tostring( self.key )\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"index %s => %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t             , qtostring( self.returnvalue )\r\n\t\t\t       )\r\n\t\telseif self.is_callable then\r\n\t\t\treturn sfmt( \"index %s()\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"index %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 58,
    "text": "function Action.newindex:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\tif not value_equal( self.val, q.val )\r\n\t\t   and self.val ~= Argv.ANYARG\r\n\t\t   and q.val    ~= Argv.ANYARG          then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 59,
    "text": "function Action.newindex:new (m, key, val)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key    = key\r\n\t\ta.val    = val\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 60,
    "text": "function Action.newindex:tostring ()\r\n\t\treturn sfmt( \"newindex %s = %s\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , qtostring(self.val)\r\n\t\t       )\r\n\tend",
    "type": "function"
  }, {
    "id": 61,
    "text": "function Action.selfcall:match (q)\r\n\t\treturn Action.generic_call.match( self, q )\r\n\tend",
    "type": "function"
  }, {
    "id": 62,
    "text": "function Action.selfcall:new (m, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 63,
    "text": "function Action.selfcall:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 64,
    "text": "function object (class)\r\n\t\treturn setmetatable( {}, class )\r\n\tend",
    "type": "function"
  }, {
    "id": 65,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function class (parent)\r\n\t\tlocal c = object(parent)\r\n\t\tc.__index = c\r\n\t\treturn c\r\n\tend",
    "type": "function"
  }, {
    "id": 68,
    "text": "local c = object(parent)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "c.__index = c",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function qtostring (v)\r\n\t\tif type(v) == 'string' then\r\n\t\t\treturn sfmt( '%q', v )\r\n\t\telse\r\n\t\t\treturn tostring( v )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 72,
    "text": "if type(v) == 'string' then\r\n\t\t\treturn sfmt( '%q', v )\r\n\t\telse\r\n\t\t\treturn tostring( v )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function add_to_set (o, setname, element)\r\n\t\tif not o[setname] then\r\n\t\t\to[setname] = {}\r\n\t\tend\r\n\t\tlocal l = o[setname]\r\n\t\t\r\n\t\tfor i = 1, #l do\r\n\t\t\tif l[i] == element then return end\r\n\t\tend\r\n\t\tl[#l+1] = element\r\n\tend",
    "type": "function"
  }, {
    "id": 75,
    "text": "if not o[setname] then\r\n\t\t\to[setname] = {}\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "o[setname] = {}",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "local l = o[setname]",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "for i = 1, #l do\r\n\t\t\tif l[i] == element then return end\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 79,
    "text": "if l[i] == element then return end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "l[#l+1] = element",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function elements_of_set (o, setname)\r\n\t\tlocal l = o[setname]\r\n\t\tlocal i = l and #l+1 or 0\r\n\t\treturn function ()\r\n\t\t\ti = i - 1\r\n\t\t\tif i > 0 then return l[i] end\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local i = l and #l+1 or 0",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "i = i - 1",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "if i > 0 then return l[i] end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function Action.generic:add_close (label)\r\n\t\tadd_to_set( self, 'closelist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 88,
    "text": "add_to_set( self, 'closelist', label )",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function Action.generic:add_depend (d)\r\n\t\tadd_to_set( self, 'dependlist', d )\r\n\tend",
    "type": "function"
  }, {
    "id": 91,
    "text": "add_to_set( self, 'dependlist', d )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function Action.generic:add_label (label)\r\n\t\tadd_to_set( self, 'labellist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 94,
    "text": "add_to_set( self, 'labellist', label )",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function Action.generic:assert_satisfied ()\r\n\t\tassert( self.replay_count <= self.max_replays, \"lemock internal error\" )\r\n\t\tif not (\r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:340\r\n                                  ) then\r\n\t\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 97,
    "text": "assert( self.replay_count <= self.max_replays, \"lemock internal error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if not (\r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:340\r\n                                  ) then\r\n\t\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "error( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function Action.generic:blocks ()\r\n\t\tif self:is_satisfied() then\r\n\t\t\treturn function () end\r\n\t\tend\r\n\t\treturn elements_of_set( self, 'labellist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 102,
    "text": "if self:is_satisfied() then\r\n\t\t\treturn function () end\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function Action.generic:closes ()\r\n\t\treturn elements_of_set( self, 'closelist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function Action.generic:depends ()\r\n\t\treturn elements_of_set( self, 'dependlist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function Action.generic:has_label (l)\r\n\t\tfor x in elements_of_set( self, 'labellist' ) do\r\n\t\t\tif x == l then return true end\r\n\t\tend\r\n\t\treturn false\r\n\tend",
    "type": "function"
  }, {
    "id": 109,
    "text": "for x in elements_of_set( self, 'labellist' ) do\r\n\t\t\tif x == l then return true end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 110,
    "text": "if x == l then return true end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function Action.generic:is_expected ()\r\n\t\treturn self.replay_count < self.max_replays\r\n\t\t   and not self.is_blocked\r\n\t\t   and not self.is_closed\r\n\tend",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function Action.generic:is_satisfied ()\r\n\t\treturn \r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:335\r\n\tend",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function Action.generic:match (key)\r\n\t\tif getmetatable(self) ~= getmetatable(key)  then return false end\r\n\t\tif self.mock ~= key.mock                    then return false end\r\n\t\treturn self:is_expected()\r\n\tend",
    "type": "function"
  }, {
    "id": 117,
    "text": "if getmetatable(self) ~= getmetatable(key)  then return false end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "if self.mock ~= key.mock                    then return false end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function Action.generic:new (mock)\r\n\t\tlocal a = object( self )\r\n\t\ta.mock         = mock\r\n\t\ta.replay_count = 0\r\n\t\ta.min_replays  = 1\r\n\t\ta.max_replays  = 1\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 121,
    "text": "local a = object( self )",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "a.mock         = mock",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "a.replay_count = 0",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "a.min_replays  = 1",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "a.max_replays  = 1",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function Action.generic:set_times (a, b)\r\n\t\tmin = a or 1\r\n\t\tmax = b or min\r\n\t\tmin, max = tonumber(min), tonumber(max)\r\n\t\tif (not min) or (not max) or (min >= math.huge)\r\n\t\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )\r\n\t\tend\r\n\t\tself.min_replays = min\r\n\t\tself.max_replays = max\r\n\tend",
    "type": "function"
  }, {
    "id": 128,
    "text": "min = a or 1",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "max = b or min",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "min, max = tonumber(min), tonumber(max)",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "if (not min) or (not max) or (min >= math.huge)\r\n\t\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "error( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "self.min_replays = min",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "self.max_replays = max",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function Action.generic_call:get_returnvalue ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn self.returnvalue:unpack()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 137,
    "text": "if self.has_returnvalue then\r\n\t\t\treturn self.returnvalue:unpack()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function Action.generic_call:set_returnvalue (...)\r\n\t\tself.returnvalue = Argv:new(...)\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 140,
    "text": "self.returnvalue = Argv:new(...)",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "self.has_returnvalue = true",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function Action.generic_call:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif not self.argv:equal( q.argv )        then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 144,
    "text": "if not Action.generic.match( self, q )  then return false end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "if not self.argv:equal( q.argv )        then return false end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function Action.generic_call:new (m, ...)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.argv   = Argv:new(...)\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 148,
    "text": "local a = Action.generic.new( self, m )",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "a.argv   = Argv:new(...)",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function Action.call:match (q)\r\n\t\tif not Action.generic_call.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                         then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 152,
    "text": "if not Action.generic_call.match( self, q )  then return false end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "if self.key ~= q.key                         then return false end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function Action.call:new (m, key, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 156,
    "text": "local a = Action.generic_call.new( self, m, ... )",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "a.key = key",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function Action.call:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 160,
    "text": "if self.has_returnvalue then\r\n\t\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function Action.index:get_returnvalue ()\r\n\t\treturn self.returnvalue\r\n\tend",
    "type": "function"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function Action.index:set_returnvalue (v)\r\n\t\tself.returnvalue = v\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 165,
    "text": "self.returnvalue = v",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function Action.index:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 168,
    "text": "if self.key ~= q.key                    then return false end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function Action.index:new (m, key)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "function Action.index:tostring ()\r\n\t\tlocal key = 'index '..tostring( self.key )\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"index %s => %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t             , qtostring( self.returnvalue )\r\n\t\t\t       )\r\n\t\telseif self.is_callable then\r\n\t\t\treturn sfmt( \"index %s()\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"index %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 173,
    "text": "local key = 'index '..tostring( self.key )",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "if self.has_returnvalue then\r\n\t\t\treturn sfmt( \"index %s => %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t             , qtostring( self.returnvalue )\r\n\t\t\t       )\r\n\t\telseif self.is_callable then\r\n\t\t\treturn sfmt( \"index %s()\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"index %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function Action.newindex:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\tif not value_equal( self.val, q.val )\r\n\t\t   and self.val ~= Argv.ANYARG\r\n\t\t   and q.val    ~= Argv.ANYARG          then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 177,
    "text": "if not value_equal( self.val, q.val )\r\n\t\t   and self.val ~= Argv.ANYARG\r\n\t\t   and q.val    ~= Argv.ANYARG          then return false end",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function Action.newindex:new (m, key, val)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key    = key\r\n\t\ta.val    = val\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 180,
    "text": "a.key    = key",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "a.val    = val",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function Action.newindex:tostring ()\r\n\t\treturn sfmt( \"newindex %s = %s\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , qtostring(self.val)\r\n\t\t       )\r\n\tend",
    "type": "function"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function Action.selfcall:match (q)\r\n\t\treturn Action.generic_call.match( self, q )\r\n\tend",
    "type": "function"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function Action.selfcall:new (m, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function Action.selfcall:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 190,
    "text": "if self.has_returnvalue then\r\n\t\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "function Argv:equal (other)\r\n\t\tlocal a1, n1 = self.v,  self.len\r\n\t\tlocal a2, n2 = other.v, other.len\r\n\t\tif n1-1 <= n2 and a1[n1] == ANYARGS then\r\n\t\t\tn1 = n1-1\r\n\t\t\tn2 = n1\r\n\t\telseif n2-1 <= n1 and a2[n2] == ANYARGS then\r\n\t\t\tn2 = n2-1\r\n\t\t\tn1 = n2\r\n\t\tend\r\n\t\tif n1 ~= n2 then\r\n\t\t\treturn false\r\n\t\tend\r\n\t\tfor i = 1, n1 do\r\n\t\t\tlocal v1, v2 = a1[i], a2[i]\r\n\t\t\tif not value_equal(v1,v2) and v1 ~= ANYARG and v2 ~= ANYARG then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 193,
    "text": "local a1, n1 = self.v,  self.len",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "local a2, n2 = other.v, other.len",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "if n1-1 <= n2 and a1[n1] == ANYARGS then\r\n\t\t\tn1 = n1-1\r\n\t\t\tn2 = n1\r\n\t\telseif n2-1 <= n1 and a2[n2] == ANYARGS then\r\n\t\t\tn2 = n2-1\r\n\t\t\tn1 = n2\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "n1 = n1-1",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "n2 = n1",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "n2 = n2-1",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "n1 = n2",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "if n1 ~= n2 then\r\n\t\t\treturn false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "for i = 1, n1 do\r\n\t\t\tlocal v1, v2 = a1[i], a2[i]\r\n\t\t\tif not value_equal(v1,v2) and v1 ~= ANYARG and v2 ~= ANYARG then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 202,
    "text": "local v1, v2 = a1[i], a2[i]",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "if not value_equal(v1,v2) and v1 ~= ANYARG and v2 ~= ANYARG then\r\n\t\t\t\treturn false\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 205,
    "text": "function Argv:new (...)\r\n\t\tlocal av = object( self )\r\n\t\tav.v = {...}\r\n\t\tav.len = select('#',...)\r\n\t\tfor i = 1, av.len - 1 do\r\n\t\t\tif av.v[i] == Argv.ANYARGS then\r\n\t\t\t\terror( \"ANYARGS not at end.\", 0 )\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn av\r\n\tend",
    "type": "function"
  }, {
    "id": 206,
    "text": "local av = object( self )",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "av.v = {...}",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "av.len = select('#',...)",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "for i = 1, av.len - 1 do\r\n\t\t\tif av.v[i] == Argv.ANYARGS then\r\n\t\t\t\terror( \"ANYARGS not at end.\", 0 )\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 210,
    "text": "if av.v[i] == Argv.ANYARGS then\r\n\t\t\t\terror( \"ANYARGS not at end.\", 0 )\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "error( \"ANYARGS not at end.\", 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function Argv:tostring ()\r\n\t\tlocal res = {}\r\n\t\tlocal function w (v)\r\n\t\t\tres[#res+1] = qtostring( v )\r\n\t\tend\r\n\t\tlocal av, ac = self.v, self.len\r\n\t\tfor i = 1, ac do\r\n\t\t\tif av[i] == Argv.ANYARG then\r\n\t\t\t\tres[#res+1] = 'ANYARG'\r\n\t\t\telseif av[i] == Argv.ANYARGS then\r\n\t\t\t\tres[#res+1] = 'ANYARGS'\r\n\t\t\telse\r\n\t\t\t\tw( av[i] )\r\n\t\t\tend\r\n\t\t\tif i < ac then\r\n\t\t\t\tres[#res+1] = ',' -- can not use qtostring in w()\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn table.concat( res )\r\n\tend",
    "type": "function"
  }, {
    "id": 214,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "local function w (v)\r\n\t\t\tres[#res+1] = qtostring( v )\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 216,
    "text": "res[#res+1] = qtostring( v )",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "local av, ac = self.v, self.len",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "for i = 1, ac do\r\n\t\t\tif av[i] == Argv.ANYARG then\r\n\t\t\t\tres[#res+1] = 'ANYARG'\r\n\t\t\telseif av[i] == Argv.ANYARGS then\r\n\t\t\t\tres[#res+1] = 'ANYARGS'\r\n\t\t\telse\r\n\t\t\t\tw( av[i] )\r\n\t\t\tend\r\n\t\t\tif i < ac then\r\n\t\t\t\tres[#res+1] = ',' -- can not use qtostring in w()\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 219,
    "text": "if av[i] == Argv.ANYARG then\r\n\t\t\t\tres[#res+1] = 'ANYARG'\r\n\t\t\telseif av[i] == Argv.ANYARGS then\r\n\t\t\t\tres[#res+1] = 'ANYARGS'\r\n\t\t\telse\r\n\t\t\t\tw( av[i] )\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "res[#res+1] = 'ANYARG'",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "res[#res+1] = 'ANYARGS'",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "w( av[i] )",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "if i < ac then\r\n\t\t\t\tres[#res+1] = ',' -- can not use qtostring in w()\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "res[#res+1] = ','",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "local function w (v)\r\n\t\t\tres[#res+1] = qtostring( v )\r\n\t\tend",
    "type": "function"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function Argv:unpack ()\r\n\t\treturn unpack( self.v, 1, self.len )\r\n\tend",
    "type": "function"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function A:tostring () return \"<generic action>\" end",
    "type": "function"
  }, {
    "id": 231,
    "text": "function setup ()\r\n\t\ta = A:new()\r\n\tend",
    "type": "function"
  }, {
    "id": 232,
    "text": "a = A:new()",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function add_depend_test ()\r\n\t\tlocal ls = { 0, 'foo', 1/0, a, {} }\r\n\t\tlocal seen = {}\r\n\t\tfor _, l in ipairs( ls ) do\r\n\t\t\tseen[l] = 0\r\n\t\t\ta:add_depend( l )\r\n\t\tend\r\n\t\tfor l in a:depends() do\r\n\t\t\tseen[l] = seen[l] + 1\r\n\t\tend\r\n\t\tfor _, l in ipairs( ls ) do\r\n\t\t\tassert_equal( 1, seen[l], \"Mismatch for \"..qtostring(l) )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 235,
    "text": "local ls = { 0, 'foo', 1/0, a, {} }",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "local seen = {}",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "for _, l in ipairs( ls ) do\r\n\t\t\tseen[l] = 0\r\n\t\t\ta:add_depend( l )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 238,
    "text": "seen[l] = 0",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "a:add_depend( l )",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "for l in a:depends() do\r\n\t\t\tseen[l] = seen[l] + 1\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 241,
    "text": "seen[l] = seen[l] + 1",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "for _, l in ipairs( ls ) do\r\n\t\t\tassert_equal( 1, seen[l], \"Mismatch for \"..qtostring(l) )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 243,
    "text": "assert_equal( 1, seen[l], \"Mismatch for \"..qtostring(l) )",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function dependencies_dont_iterate_on_empty_list_test ()\r\n\t\tfor _ in a:depends() do\r\n\t\t\tfail( \"unexpected dependency\" )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 246,
    "text": "for _ in a:depends() do\r\n\t\t\tfail( \"unexpected dependency\" )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 247,
    "text": "fail( \"unexpected dependency\" )",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 249,
    "text": "function label_test ()\r\n\t\tlocal ls = { 1/0, 0, false, {}, a, \"foo\", true }\r\n\t\tfor i = 1, #ls do\r\n\t\t\tassert_false( a:has_label( ls[i] ))\r\n\t\tend\r\n\t\tfor i = 1, #ls do\r\n\t\t\ta:add_label( ls[i] )\r\n\t\t\tfor j = 1 , #ls do\r\n\t\t\t\tif j <= i then\r\n\t\t\t\t\tassert_true( a:has_label( ls[j] ))\r\n\t\t\t\telse\r\n\t\t\t\t\tassert_false( a:has_label( ls[j] ))\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 250,
    "text": "local ls = { 1/0, 0, false, {}, a, \"foo\", true }",
    "type": "statement:localassign"
  }, {
    "id": 251,
    "text": "for i = 1, #ls do\r\n\t\t\tassert_false( a:has_label( ls[i] ))\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 252,
    "text": "assert_false( a:has_label( ls[i] ))",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "for i = 1, #ls do\r\n\t\t\ta:add_label( ls[i] )\r\n\t\t\tfor j = 1 , #ls do\r\n\t\t\t\tif j <= i then\r\n\t\t\t\t\tassert_true( a:has_label( ls[j] ))\r\n\t\t\t\telse\r\n\t\t\t\t\tassert_false( a:has_label( ls[j] ))\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 254,
    "text": "a:add_label( ls[i] )",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "for j = 1 , #ls do\r\n\t\t\t\tif j <= i then\r\n\t\t\t\t\tassert_true( a:has_label( ls[j] ))\r\n\t\t\t\telse\r\n\t\t\t\t\tassert_false( a:has_label( ls[j] ))\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 256,
    "text": "if j <= i then\r\n\t\t\t\t\tassert_true( a:has_label( ls[j] ))\r\n\t\t\t\telse\r\n\t\t\t\t\tassert_false( a:has_label( ls[j] ))\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "assert_true( a:has_label( ls[j] ))",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "assert_false( a:has_label( ls[j] ))",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "function add_label_twice_test ()\r\n\t\tlocal l = 'foo'\r\n\t\ta:add_label( l )\r\n\t\ta:add_label( l )\r\n\t\tlocal cnt = 0\r\n\t\tfor x in a:blocks() do\r\n\t\t\tassert_equal( l, x )\r\n\t\t\tcnt = cnt + 1\r\n\t\tend\r\n\t\tassert_equal( 1, cnt )\r\n\tend",
    "type": "function"
  }, {
    "id": 261,
    "text": "local l = 'foo'",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "a:add_label( l )",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "local cnt = 0",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "for x in a:blocks() do\r\n\t\t\tassert_equal( l, x )\r\n\t\t\tcnt = cnt + 1\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 265,
    "text": "assert_equal( l, x )",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "cnt = cnt + 1",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "assert_equal( 1, cnt )",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function expect_unreplayed_action_test ()\r\n\t\tassert_true( a:is_expected() )\r\n\tend",
    "type": "function"
  }, {
    "id": 270,
    "text": "assert_true( a:is_expected() )",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 272,
    "text": "function unreplayed_action_is_not_satisfied_test ()\r\n\t\tassert_false( a:is_satisfied() )\r\n\tend",
    "type": "function"
  }, {
    "id": 273,
    "text": "assert_false( a:is_satisfied() )",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 275,
    "text": "function assert_satisfied_unreplayed_action_fails_test ()\r\n\t\tlocal ok, err = pcall( function() a:assert_satisfied() end )\r\n\t\tassert_false( ok, \"unreplayed action was satisfied\" )\r\n\t\tassert_match( \"Wrong replay count 0\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 276,
    "text": "local ok, err = pcall( function() a:assert_satisfied() end )",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "a:assert_satisfied()",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "assert_false( ok, \"unreplayed action was satisfied\" )",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "assert_match( \"Wrong replay count 0\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 281,
    "text": "function match_unreplayed_test ()\r\n\t\tassert_true( a:match( a ))\r\n\tend",
    "type": "function"
  }, {
    "id": 282,
    "text": "assert_true( a:match( a ))",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function match_rejects_replayed_action_test ()\r\n\t\ta.replay_count = 1\r\n\t\tassert_false( a:match( a ))\r\n\tend",
    "type": "function"
  }, {
    "id": 285,
    "text": "a.replay_count = 1",
    "type": "statement:assign"
  }, {
    "id": 286,
    "text": "assert_false( a:match( a ))",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 288,
    "text": "function match_rejects_wrong_action_type_test ()\r\n\t\t-- Fake different type\r\n\t\tlocal B = class( A )\r\n\t\tlocal b = B:new()\r\n\t\tassert_false( a:match( b ))\r\n\tend",
    "type": "function"
  }, {
    "id": 289,
    "text": "local B = class( A )",
    "type": "statement:localassign"
  }, {
    "id": 290,
    "text": "local b = B:new()",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "assert_false( a:match( b ))",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 293,
    "text": "function new_action_has_right_default_values_test ()\r\n\t\tassert_equal( 0, a.replay_count )\r\n\t\tassert_equal( 1, a.min_replays )\r\n\t\tassert_equal( 1, a.max_replays )\r\n\tend",
    "type": "function"
  }, {
    "id": 294,
    "text": "assert_equal( 0, a.replay_count )",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "assert_equal( 1, a.min_replays )",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "assert_equal( 1, a.max_replays )",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "function set_and_get_times_test ()\r\n\tend",
    "type": "function"
  }, {
    "id": 299,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 300,
    "text": "function unrealistic_times_fails_test ()\r\n\t\tlocal ps = { {'foo'}, {8,'bar'}, {-1}, {3,2}, {1/0}, {0/0}, {0,0} }\r\n\t\tfor _, p in ipairs( ps ) do\r\n\t\t\tlocal ok, err = pcall( function() a:set_times( unpack(p) ) end )\r\n\t\t\tassert_false( ok, \"unrealistic times \"..table.concat(p,\", \") )\r\n\t\t\tassert_match( \"Unrealistic time arguments \", err )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 301,
    "text": "local ps = { {'foo'}, {8,'bar'}, {-1}, {3,2}, {1/0}, {0/0}, {0,0} }",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "for _, p in ipairs( ps ) do\r\n\t\t\tlocal ok, err = pcall( function() a:set_times( unpack(p) ) end )\r\n\t\t\tassert_false( ok, \"unrealistic times \"..table.concat(p,\", \") )\r\n\t\t\tassert_match( \"Unrealistic time arguments \", err )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 303,
    "text": "local ok, err = pcall( function() a:set_times( unpack(p) ) end )",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "a:set_times( unpack(p) )",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "assert_false( ok, \"unrealistic times \"..table.concat(p,\", \") )",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "assert_match( \"Unrealistic time arguments \", err )",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 308,
    "text": "function ()\r\n\t\t\ti = i - 1\r\n\t\t\tif i > 0 then return l[i] end\r\n\t\tend",
    "type": "function"
  }, {
    "id": 309,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 310,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 311,
    "text": "function() a:assert_satisfied() end",
    "type": "function"
  }, {
    "id": 312,
    "text": "function() a:set_times( unpack(p) ) end",
    "type": "function"
  }, {
    "id": 313,
    "text": "",
    "type": "function container"
  }, {
    "id": 314,
    "text": "function Action.generic:add_close (label)\r\n\t\tadd_to_set( self, 'closelist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 315,
    "text": "function Action.generic:add_depend (d)\r\n\t\tadd_to_set( self, 'dependlist', d )\r\n\tend",
    "type": "function"
  }, {
    "id": 316,
    "text": "function Action.generic:add_label (label)\r\n\t\tadd_to_set( self, 'labellist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 317,
    "text": "function Action.generic:assert_satisfied ()\r\n\t\tassert( self.replay_count <= self.max_replays, \"lemock internal error\" )\r\n\t\tif not (\r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:340\r\n                                  ) then\r\n\t\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 318,
    "text": "function Action.generic:blocks ()\r\n\t\tif self:is_satisfied() then\r\n\t\t\treturn function () end\r\n\t\tend\r\n\t\treturn elements_of_set( self, 'labellist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 319,
    "text": "function Action.generic:closes ()\r\n\t\treturn elements_of_set( self, 'closelist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 320,
    "text": "function Action.generic:depends ()\r\n\t\treturn elements_of_set( self, 'dependlist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 321,
    "text": "function Action.generic:has_label (l)\r\n\t\tfor x in elements_of_set( self, 'labellist' ) do\r\n\t\t\tif x == l then return true end\r\n\t\tend\r\n\t\treturn false\r\n\tend",
    "type": "function"
  }, {
    "id": 322,
    "text": "function Action.generic:is_expected ()\r\n\t\treturn self.replay_count < self.max_replays\r\n\t\t   and not self.is_blocked\r\n\t\t   and not self.is_closed\r\n\tend",
    "type": "function"
  }, {
    "id": 323,
    "text": "function Action.generic:is_satisfied ()\r\n\t\treturn \r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:335\r\n\tend",
    "type": "function"
  }, {
    "id": 324,
    "text": "function Action.generic:match (key)\r\n\t\tif getmetatable(self) ~= getmetatable(key)  then return false end\r\n\t\tif self.mock ~= key.mock                    then return false end\r\n\t\treturn self:is_expected()\r\n\tend",
    "type": "function"
  }, {
    "id": 325,
    "text": "function Action.generic:new (mock)\r\n\t\tlocal a = object( self )\r\n\t\ta.mock         = mock\r\n\t\ta.replay_count = 0\r\n\t\ta.min_replays  = 1\r\n\t\ta.max_replays  = 1\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 326,
    "text": "function Action.generic:set_times (a, b)\r\n\t\tmin = a or 1\r\n\t\tmax = b or min\r\n\t\tmin, max = tonumber(min), tonumber(max)\r\n\t\tif (not min) or (not max) or (min >= math.huge)\r\n\t\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )\r\n\t\tend\r\n\t\tself.min_replays = min\r\n\t\tself.max_replays = max\r\n\tend",
    "type": "function"
  }, {
    "id": 327,
    "text": "function Action.generic_call:get_returnvalue ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn self.returnvalue:unpack()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 328,
    "text": "function Action.generic_call:set_returnvalue (...)\r\n\t\tself.returnvalue = Argv:new(...)\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 329,
    "text": "function Action.generic_call:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif not self.argv:equal( q.argv )        then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 330,
    "text": "function Action.generic_call:new (m, ...)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.argv   = Argv:new(...)\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 331,
    "text": "function Action.call:match (q)\r\n\t\tif not Action.generic_call.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                         then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 332,
    "text": "function Action.call:new (m, key, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 333,
    "text": "function Action.call:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 334,
    "text": "function Action.index:get_returnvalue ()\r\n\t\treturn self.returnvalue\r\n\tend",
    "type": "function"
  }, {
    "id": 335,
    "text": "function Action.index:set_returnvalue (v)\r\n\t\tself.returnvalue = v\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 336,
    "text": "function Action.index:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 337,
    "text": "function Action.index:new (m, key)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 338,
    "text": "function Action.index:tostring ()\r\n\t\tlocal key = 'index '..tostring( self.key )\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"index %s => %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t             , qtostring( self.returnvalue )\r\n\t\t\t       )\r\n\t\telseif self.is_callable then\r\n\t\t\treturn sfmt( \"index %s()\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"index %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 339,
    "text": "function Action.newindex:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\tif not value_equal( self.val, q.val )\r\n\t\t   and self.val ~= Argv.ANYARG\r\n\t\t   and q.val    ~= Argv.ANYARG          then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 340,
    "text": "function Action.newindex:new (m, key, val)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key    = key\r\n\t\ta.val    = val\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 341,
    "text": "function Action.newindex:tostring ()\r\n\t\treturn sfmt( \"newindex %s = %s\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , qtostring(self.val)\r\n\t\t       )\r\n\tend",
    "type": "function"
  }, {
    "id": 342,
    "text": "function Action.selfcall:match (q)\r\n\t\treturn Action.generic_call.match( self, q )\r\n\tend",
    "type": "function"
  }, {
    "id": 343,
    "text": "function Action.selfcall:new (m, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 344,
    "text": "function Action.selfcall:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 345,
    "text": "sfmt",
    "type": "global function"
  }, {
    "id": 346,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 347,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 348,
    "text": "Action.generic.match",
    "type": "global function"
  }, {
    "id": 349,
    "text": "fail",
    "type": "global function"
  }, {
    "id": 350,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 351,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 352,
    "text": "newproxy",
    "type": "global function"
  }, {
    "id": 353,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 354,
    "text": "module",
    "type": "global function"
  }, {
    "id": 355,
    "text": "Action.generic_call.new",
    "type": "global function"
  }, {
    "id": 356,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 357,
    "text": "error",
    "type": "global function"
  }, {
    "id": 358,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 359,
    "text": "type",
    "type": "global function"
  }, {
    "id": 360,
    "text": "Action.generic_call.match",
    "type": "global function"
  }, {
    "id": 361,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 362,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 363,
    "text": "Action.generic.new",
    "type": "global function"
  }, {
    "id": 364,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 365,
    "text": "assert_match",
    "type": "global function"
  }, {
    "id": 366,
    "text": "select",
    "type": "global function"
  }, {
    "id": 367,
    "text": "value_equal",
    "type": "global function"
  }, {
    "id": 368,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 369,
    "text": "require",
    "type": "global function"
  }, {
    "id": 370,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 371,
    "text": "",
    "type": "global variable"
  }, {
    "id": 372,
    "text": "",
    "type": "global variable"
  }, {
    "id": 373,
    "text": "",
    "type": "global variable"
  }, {
    "id": 374,
    "text": "",
    "type": "variable container"
  }, {
    "id": 375,
    "text": "",
    "type": "require container"
  }, {
    "id": 376,
    "text": "",
    "type": "local variable"
  }, {
    "id": 377,
    "text": "",
    "type": "local variable"
  }, {
    "id": 378,
    "text": "",
    "type": "local variable"
  }, {
    "id": 379,
    "text": "",
    "type": "local variable"
  }, {
    "id": 380,
    "text": "",
    "type": "local variable"
  }, {
    "id": 381,
    "text": "",
    "type": "local variable"
  }, {
    "id": 382,
    "text": "",
    "type": "local variable"
  }, {
    "id": 383,
    "text": "",
    "type": "local variable"
  }, {
    "id": 384,
    "text": "",
    "type": "local variable"
  }, {
    "id": 385,
    "text": "",
    "type": "n/a"
  }, {
    "id": 386,
    "text": "",
    "type": "local variable"
  }, {
    "id": 387,
    "text": "",
    "type": "n/a"
  }, {
    "id": 388,
    "text": "",
    "type": "local variable"
  }, {
    "id": 389,
    "text": "",
    "type": "n/a"
  }, {
    "id": 390,
    "text": "",
    "type": "local variable"
  }, {
    "id": 391,
    "text": "",
    "type": "global variable"
  }, {
    "id": 392,
    "text": "",
    "type": "n/a"
  }, {
    "id": 393,
    "text": "",
    "type": "global variable"
  }, {
    "id": 394,
    "text": "",
    "type": "n/a"
  }, {
    "id": 395,
    "text": "",
    "type": "global variable"
  }, {
    "id": 396,
    "text": "",
    "type": "n/a"
  }, {
    "id": 397,
    "text": "",
    "type": "global variable"
  }, {
    "id": 398,
    "text": "",
    "type": "n/a"
  }, {
    "id": 399,
    "text": "",
    "type": "global variable"
  }, {
    "id": 400,
    "text": "",
    "type": "global variable"
  }, {
    "id": 401,
    "text": "",
    "type": "n/a"
  }, {
    "id": 402,
    "text": "",
    "type": "global variable"
  }, {
    "id": 403,
    "text": "",
    "type": "n/a"
  }, {
    "id": 404,
    "text": "",
    "type": "global variable"
  }, {
    "id": 405,
    "text": "",
    "type": "global variable"
  }, {
    "id": 406,
    "text": "",
    "type": "n/a"
  }, {
    "id": 407,
    "text": "",
    "type": "global variable"
  }, {
    "id": 408,
    "text": "",
    "type": "n/a"
  }, {
    "id": 409,
    "text": "",
    "type": "global variable"
  }, {
    "id": 410,
    "text": "",
    "type": "n/a"
  }, {
    "id": 411,
    "text": "",
    "type": "global variable"
  }, {
    "id": 412,
    "text": "",
    "type": "n/a"
  }, {
    "id": 413,
    "text": "",
    "type": "global variable"
  }, {
    "id": 414,
    "text": "",
    "type": "n/a"
  }, {
    "id": 415,
    "text": "",
    "type": "global variable"
  }, {
    "id": 416,
    "text": "",
    "type": "global variable"
  } ]
}