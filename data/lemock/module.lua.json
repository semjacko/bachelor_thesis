{
  "_filename": "module.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lemock/build/unit/module.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 7,
    "label": "has",
    "to": 17
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 19
  }, {
    "from": 7,
    "label": "has",
    "to": 20
  }, {
    "from": 7,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 14
  }, {
    "from": 22,
    "label": "has",
    "to": 17
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 20
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 23
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 17
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 38
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 17
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 20
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 57
  }, {
    "from": 61,
    "label": "has",
    "to": 38
  }, {
    "from": 61,
    "label": "has",
    "to": 58
  }, {
    "from": 61,
    "label": "has",
    "to": 59
  }, {
    "from": 61,
    "label": "has",
    "to": 17
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 58
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 23
  }, {
    "from": 66,
    "label": "has",
    "to": 38
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 17
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 23
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 20
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 67
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 17
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 63
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 74,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 63
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 74,
    "label": "has",
    "to": 84
  }, {
    "from": 74,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 63
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 74,
    "label": "has",
    "to": 85
  }, {
    "from": 74,
    "label": "has",
    "to": 86
  }, {
    "from": 74,
    "label": "has",
    "to": 20
  }, {
    "from": 74,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 67
  }, {
    "from": 88,
    "label": "has",
    "to": 79
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 77
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 75
  }, {
    "from": 88,
    "label": "has",
    "to": 76
  }, {
    "from": 88,
    "label": "has",
    "to": 17
  }, {
    "from": 88,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 88,
    "label": "has",
    "to": 63
  }, {
    "from": 88,
    "label": "has",
    "to": 82
  }, {
    "from": 88,
    "label": "has",
    "to": 84
  }, {
    "from": 88,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 88,
    "label": "has",
    "to": 63
  }, {
    "from": 88,
    "label": "has",
    "to": 82
  }, {
    "from": 88,
    "label": "has",
    "to": 85
  }, {
    "from": 88,
    "label": "has",
    "to": 86
  }, {
    "from": 88,
    "label": "has",
    "to": 20
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 67
  }, {
    "from": 92,
    "label": "has",
    "to": 79
  }, {
    "from": 92,
    "label": "has",
    "to": 89
  }, {
    "from": 92,
    "label": "has",
    "to": 77
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 75
  }, {
    "from": 92,
    "label": "has",
    "to": 76
  }, {
    "from": 92,
    "label": "has",
    "to": 17
  }, {
    "from": 92,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 92,
    "label": "has",
    "to": 63
  }, {
    "from": 92,
    "label": "has",
    "to": 82
  }, {
    "from": 92,
    "label": "has",
    "to": 84
  }, {
    "from": 92,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 92,
    "label": "has",
    "to": 63
  }, {
    "from": 92,
    "label": "has",
    "to": 82
  }, {
    "from": 92,
    "label": "has",
    "to": 85
  }, {
    "from": 92,
    "label": "has",
    "to": 86
  }, {
    "from": 92,
    "label": "has",
    "to": 20
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 77
  }, {
    "from": 95,
    "label": "has",
    "to": 78
  }, {
    "from": 95,
    "label": "has",
    "to": 75
  }, {
    "from": 95,
    "label": "has",
    "to": 89
  }, {
    "from": 95,
    "label": "has",
    "to": 79
  }, {
    "from": 95,
    "label": "has",
    "to": 89
  }, {
    "from": 95,
    "label": "has",
    "to": 17
  }, {
    "from": 95,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 95,
    "label": "has",
    "to": 63
  }, {
    "from": 95,
    "label": "has",
    "to": 82
  }, {
    "from": 95,
    "label": "has",
    "to": 84
  }, {
    "from": 95,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 95,
    "label": "has",
    "to": 63
  }, {
    "from": 95,
    "label": "has",
    "to": 82
  }, {
    "from": 95,
    "label": "has",
    "to": 85
  }, {
    "from": 95,
    "label": "has",
    "to": 86
  }, {
    "from": 95,
    "label": "has",
    "to": 20
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 57
  }, {
    "from": 97,
    "label": "has",
    "to": 38
  }, {
    "from": 97,
    "label": "has",
    "to": 58
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 17
  }, {
    "from": 97,
    "label": "has",
    "to": 57
  }, {
    "from": 97,
    "label": "has",
    "to": 58
  }, {
    "from": 97,
    "label": "has",
    "to": 20
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 57
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 58
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 17
  }, {
    "from": 101,
    "label": "has",
    "to": 57
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 100,
    "label": "has",
    "to": 105
  }, {
    "from": 100,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 23
  }, {
    "from": 107,
    "label": "has",
    "to": 38
  }, {
    "from": 107,
    "label": "has",
    "to": 39
  }, {
    "from": 107,
    "label": "has",
    "to": 40
  }, {
    "from": 107,
    "label": "has",
    "to": 41
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 17
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 54
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 67
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 98
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 40
  }, {
    "from": 121,
    "label": "has",
    "to": 17
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 63
  }, {
    "from": 121,
    "label": "has",
    "to": 125
  }, {
    "from": 121,
    "label": "has",
    "to": 126
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 128
  }, {
    "from": 121,
    "label": "has",
    "to": 129
  }, {
    "from": 121,
    "label": "has",
    "to": 130
  }, {
    "from": 121,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 17
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 54
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 143,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 149,
    "label": "has",
    "to": 154
  }, {
    "from": 149,
    "label": "has",
    "to": 155
  }, {
    "from": 149,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 17
  }, {
    "from": 157,
    "label": "has",
    "to": 122
  }, {
    "from": 157,
    "label": "has",
    "to": 122
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 20
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 17
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 23
  }, {
    "from": 171,
    "label": "has",
    "to": 25
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 17
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 23
  }, {
    "from": 171,
    "label": "has",
    "to": 25
  }, {
    "from": 171,
    "label": "has",
    "to": 20
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 17
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 150
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 17
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 180,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 17
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 17
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 57
  }, {
    "from": 191,
    "label": "has",
    "to": 17
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 57
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 191,
    "label": "has",
    "to": 20
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 196
  }, {
    "from": 191,
    "label": "has",
    "to": 197
  }, {
    "from": 198,
    "label": "has",
    "to": 150
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 17
  }, {
    "from": 198,
    "label": "has",
    "to": 150
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 20
  }, {
    "from": 198,
    "label": "has",
    "to": 201
  }, {
    "from": 198,
    "label": "has",
    "to": 202
  }, {
    "from": 198,
    "label": "has",
    "to": 150
  }, {
    "from": 198,
    "label": "has",
    "to": 20
  }, {
    "from": 198,
    "label": "has",
    "to": 150
  }, {
    "from": 198,
    "label": "has",
    "to": 20
  }, {
    "from": 198,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 150
  }, {
    "from": 198,
    "label": "has",
    "to": 204
  }, {
    "from": 198,
    "label": "has",
    "to": 205
  }, {
    "from": 198,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 57
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 17
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 210,
    "label": "has",
    "to": 213
  }, {
    "from": 210,
    "label": "has",
    "to": 214
  }, {
    "from": 210,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 216,
    "label": "has",
    "to": 220
  }, {
    "from": 216,
    "label": "has",
    "to": 221
  }, {
    "from": 216,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 20
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 17
  }, {
    "from": 227,
    "label": "has",
    "to": 20
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 150
  }, {
    "from": 229,
    "label": "has",
    "to": 17
  }, {
    "from": 229,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 20
  }, {
    "from": 229,
    "label": "has",
    "to": 224
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 17
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 232,
    "label": "has",
    "to": 235
  }, {
    "from": 232,
    "label": "has",
    "to": 20
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 17
  }, {
    "from": 237,
    "label": "has",
    "to": 234
  }, {
    "from": 237,
    "label": "has",
    "to": 20
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 17
  }, {
    "from": 240,
    "label": "has",
    "to": 234
  }, {
    "from": 240,
    "label": "has",
    "to": 20
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 243,
    "label": "has",
    "to": 246
  }, {
    "from": 243,
    "label": "has",
    "to": 247
  }, {
    "from": 243,
    "label": "has",
    "to": 248
  }, {
    "from": 249,
    "label": "has",
    "to": 233
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 17
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 249,
    "label": "has",
    "to": 252
  }, {
    "from": 249,
    "label": "has",
    "to": 253
  }, {
    "from": 249,
    "label": "has",
    "to": 20
  }, {
    "from": 249,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "has",
    "to": 233
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 17
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 255,
    "label": "has",
    "to": 259
  }, {
    "from": 255,
    "label": "has",
    "to": 260
  }, {
    "from": 255,
    "label": "has",
    "to": 261
  }, {
    "from": 262,
    "label": "has",
    "to": 233
  }, {
    "from": 262,
    "label": "has",
    "to": 256
  }, {
    "from": 262,
    "label": "has",
    "to": 17
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 31
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 267,
    "label": "has",
    "to": 269
  }, {
    "from": 267,
    "label": "has",
    "to": 17
  }, {
    "from": 267,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 268
  }, {
    "from": 267,
    "label": "has",
    "to": 271
  }, {
    "from": 267,
    "label": "has",
    "to": 272
  }, {
    "from": 267,
    "label": "has",
    "to": 273
  }, {
    "from": 274,
    "label": "has",
    "to": 150
  }, {
    "from": 274,
    "label": "has",
    "to": 17
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 274,
    "label": "has",
    "to": 277
  }, {
    "from": 274,
    "label": "has",
    "to": 278
  }, {
    "from": 274,
    "label": "has",
    "to": 279
  }, {
    "from": 280,
    "label": "has",
    "to": 150
  }, {
    "from": 280,
    "label": "has",
    "to": 276
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 280,
    "label": "has",
    "to": 283
  }, {
    "from": 280,
    "label": "has",
    "to": 284
  }, {
    "from": 280,
    "label": "has",
    "to": 285
  }, {
    "from": 286,
    "label": "has",
    "to": 150
  }, {
    "from": 286,
    "label": "has",
    "to": 151
  }, {
    "from": 286,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 284
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 150
  }, {
    "from": 289,
    "label": "has",
    "to": 17
  }, {
    "from": 289,
    "label": "has",
    "to": 150
  }, {
    "from": 289,
    "label": "has",
    "to": 235
  }, {
    "from": 289,
    "label": "has",
    "to": 20
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 291,
    "label": "has",
    "to": 150
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 291,
    "label": "has",
    "to": 17
  }, {
    "from": 291,
    "label": "has",
    "to": 150
  }, {
    "from": 291,
    "label": "has",
    "to": 293
  }, {
    "from": 291,
    "label": "has",
    "to": 20
  }, {
    "from": 291,
    "label": "has",
    "to": 294
  }, {
    "from": 295,
    "label": "has",
    "to": 150
  }, {
    "from": 295,
    "label": "has",
    "to": 292
  }, {
    "from": 295,
    "label": "has",
    "to": 17
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 295,
    "label": "has",
    "to": 264
  }, {
    "from": 295,
    "label": "has",
    "to": 260
  }, {
    "from": 295,
    "label": "has",
    "to": 298
  }, {
    "from": 299,
    "label": "has",
    "to": 150
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 299,
    "label": "has",
    "to": 17
  }, {
    "from": 299,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 122
  }, {
    "from": 299,
    "label": "has",
    "to": 271
  }, {
    "from": 299,
    "label": "has",
    "to": 301
  }, {
    "from": 299,
    "label": "has",
    "to": 302
  }, {
    "from": 303,
    "label": "has",
    "to": 57
  }, {
    "from": 303,
    "label": "has",
    "to": 17
  }, {
    "from": 303,
    "label": "has",
    "to": 57
  }, {
    "from": 303,
    "label": "has",
    "to": 20
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 17
  }, {
    "from": 305,
    "label": "has",
    "to": 57
  }, {
    "from": 305,
    "label": "has",
    "to": 20
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 308,
    "label": "has",
    "to": 57
  }, {
    "from": 308,
    "label": "has",
    "to": 17
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 308,
    "label": "has",
    "to": 264
  }, {
    "from": 308,
    "label": "has",
    "to": 64
  }, {
    "from": 308,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 57
  }, {
    "from": 312,
    "label": "has",
    "to": 17
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 312,
    "label": "has",
    "to": 264
  }, {
    "from": 312,
    "label": "has",
    "to": 315
  }, {
    "from": 312,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 57
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 317,
    "label": "has",
    "to": 17
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 57
  }, {
    "from": 317,
    "label": "has",
    "to": 271
  }, {
    "from": 317,
    "label": "has",
    "to": 320
  }, {
    "from": 317,
    "label": "has",
    "to": 321
  }, {
    "from": 322,
    "label": "has",
    "to": 150
  }, {
    "from": 322,
    "label": "has",
    "to": 17
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 151
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 322,
    "label": "has",
    "to": 325
  }, {
    "from": 322,
    "label": "has",
    "to": 326
  }, {
    "from": 327,
    "label": "has",
    "to": 57
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 327,
    "label": "has",
    "to": 330
  }, {
    "from": 327,
    "label": "has",
    "to": 331
  }, {
    "from": 327,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 150
  }, {
    "from": 333,
    "label": "has",
    "to": 151
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 333,
    "label": "has",
    "to": 336
  }, {
    "from": 333,
    "label": "has",
    "to": 284
  }, {
    "from": 333,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 17
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 338,
    "label": "has",
    "to": 235
  }, {
    "from": 338,
    "label": "has",
    "to": 20
  }, {
    "from": 338,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 342,
    "label": "has",
    "to": 344
  }, {
    "from": 342,
    "label": "has",
    "to": 17
  }, {
    "from": 342,
    "label": "has",
    "to": 345
  }, {
    "from": 342,
    "label": "has",
    "to": 346
  }, {
    "from": 342,
    "label": "has",
    "to": 347
  }, {
    "from": 342,
    "label": "has",
    "to": 348
  }, {
    "from": 342,
    "label": "has",
    "to": 20
  }, {
    "from": 342,
    "label": "has",
    "to": 349
  }, {
    "from": 350,
    "label": "has",
    "to": 343
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 17
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 350,
    "label": "has",
    "to": 264
  }, {
    "from": 350,
    "label": "has",
    "to": 354
  }, {
    "from": 350,
    "label": "has",
    "to": 355
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 356,
    "label": "has",
    "to": 17
  }, {
    "from": 356,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 356,
    "label": "has",
    "to": 264
  }, {
    "from": 356,
    "label": "has",
    "to": 354
  }, {
    "from": 356,
    "label": "has",
    "to": 360
  }, {
    "from": 361,
    "label": "has",
    "to": 362
  }, {
    "from": 361,
    "label": "has",
    "to": 363
  }, {
    "from": 361,
    "label": "has",
    "to": 17
  }, {
    "from": 361,
    "label": "has",
    "to": 364
  }, {
    "from": 364,
    "label": "has",
    "to": 362
  }, {
    "from": 361,
    "label": "has",
    "to": 271
  }, {
    "from": 361,
    "label": "has",
    "to": 365
  }, {
    "from": 361,
    "label": "has",
    "to": 366
  }, {
    "from": 367,
    "label": "has",
    "to": 25
  }, {
    "from": 368,
    "label": "has",
    "to": 46
  }, {
    "from": 369,
    "label": "has",
    "to": 52
  }, {
    "from": 370,
    "label": "has",
    "to": 58
  }, {
    "from": 371,
    "label": "has",
    "to": 79
  }, {
    "from": 372,
    "label": "has",
    "to": 77
  }, {
    "from": 373,
    "label": "has",
    "to": 77
  }, {
    "from": 374,
    "label": "has",
    "to": 77
  }, {
    "from": 375,
    "label": "has",
    "to": 77
  }, {
    "from": 376,
    "label": "has",
    "to": 77
  }, {
    "from": 377,
    "label": "has",
    "to": 77
  }, {
    "from": 378,
    "label": "has",
    "to": 77
  }, {
    "from": 379,
    "label": "has",
    "to": 77
  }, {
    "from": 380,
    "label": "has",
    "to": 57
  }, {
    "from": 380,
    "label": "has",
    "to": 102
  }, {
    "from": 380,
    "label": "has",
    "to": 58
  }, {
    "from": 380,
    "label": "has",
    "to": 103
  }, {
    "from": 380,
    "label": "has",
    "to": 17
  }, {
    "from": 380,
    "label": "has",
    "to": 57
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 382,
    "label": "has",
    "to": 112
  }, {
    "from": 383,
    "label": "has",
    "to": 118
  }, {
    "from": 384,
    "label": "has",
    "to": 122
  }, {
    "from": 385,
    "label": "has",
    "to": 123
  }, {
    "from": 386,
    "label": "has",
    "to": 134
  }, {
    "from": 387,
    "label": "has",
    "to": 140
  }, {
    "from": 388,
    "label": "has",
    "to": 145
  }, {
    "from": 389,
    "label": "has",
    "to": 153
  }, {
    "from": 390,
    "label": "has",
    "to": 167
  }, {
    "from": 391,
    "label": "has",
    "to": 176
  }, {
    "from": 392,
    "label": "has",
    "to": 181
  }, {
    "from": 393,
    "label": "has",
    "to": 17
  }, {
    "from": 394,
    "label": "has",
    "to": 20
  }, {
    "from": 395,
    "label": "has",
    "to": 150
  }, {
    "from": 396,
    "label": "has",
    "to": 212
  }, {
    "from": 397,
    "label": "has",
    "to": 219
  }, {
    "from": 398,
    "label": "has",
    "to": 20
  }, {
    "from": 399,
    "label": "has",
    "to": 20
  }, {
    "from": 400,
    "label": "has",
    "to": 245
  }, {
    "from": 401,
    "label": "has",
    "to": 258
  }, {
    "from": 402,
    "label": "has",
    "to": 31
  }, {
    "from": 403,
    "label": "has",
    "to": 268
  }, {
    "from": 404,
    "label": "has",
    "to": 276
  }, {
    "from": 405,
    "label": "has",
    "to": 282
  }, {
    "from": 406,
    "label": "has",
    "to": 282
  }, {
    "from": 407,
    "label": "has",
    "to": 297
  }, {
    "from": 408,
    "label": "has",
    "to": 122
  }, {
    "from": 409,
    "label": "has",
    "to": 310
  }, {
    "from": 410,
    "label": "has",
    "to": 314
  }, {
    "from": 411,
    "label": "has",
    "to": 57
  }, {
    "from": 412,
    "label": "has",
    "to": 151
  }, {
    "from": 413,
    "label": "has",
    "to": 329
  }, {
    "from": 414,
    "label": "has",
    "to": 335
  }, {
    "from": 415,
    "label": "has",
    "to": 353
  }, {
    "from": 416,
    "label": "has",
    "to": 359
  }, {
    "from": 417,
    "label": "has",
    "to": 362
  }, {
    "from": 161,
    "label": "calls",
    "to": 426
  }, {
    "from": 161,
    "label": "calls",
    "to": 419
  }, {
    "from": 7,
    "label": "calls",
    "to": 430
  }, {
    "from": 7,
    "label": "calls",
    "to": 430
  }, {
    "from": 7,
    "label": "calls",
    "to": 430
  }, {
    "from": 7,
    "label": "calls",
    "to": 430
  }, {
    "from": 66,
    "label": "calls",
    "to": 430
  }, {
    "from": 66,
    "label": "calls",
    "to": 430
  }, {
    "from": 249,
    "label": "calls",
    "to": 430
  }, {
    "from": 249,
    "label": "calls",
    "to": 430
  }, {
    "from": 291,
    "label": "calls",
    "to": 430
  }, {
    "from": 342,
    "label": "calls",
    "to": 430
  }, {
    "from": 342,
    "label": "calls",
    "to": 430
  }, {
    "from": 342,
    "label": "calls",
    "to": 430
  }, {
    "from": 3,
    "label": "calls",
    "to": 2
  }, {
    "from": 191,
    "label": "calls",
    "to": 2
  }, {
    "from": 30,
    "label": "calls",
    "to": 427
  }, {
    "from": 30,
    "label": "calls",
    "to": 427
  }, {
    "from": 30,
    "label": "calls",
    "to": 427
  }, {
    "from": 30,
    "label": "calls",
    "to": 427
  }, {
    "from": 157,
    "label": "calls",
    "to": 427
  }, {
    "from": 157,
    "label": "calls",
    "to": 427
  }, {
    "from": 232,
    "label": "calls",
    "to": 427
  }, {
    "from": 232,
    "label": "calls",
    "to": 427
  }, {
    "from": 237,
    "label": "calls",
    "to": 427
  }, {
    "from": 237,
    "label": "calls",
    "to": 427
  }, {
    "from": 240,
    "label": "calls",
    "to": 427
  }, {
    "from": 240,
    "label": "calls",
    "to": 427
  }, {
    "from": 243,
    "label": "calls",
    "to": 427
  }, {
    "from": 249,
    "label": "calls",
    "to": 427
  }, {
    "from": 249,
    "label": "calls",
    "to": 427
  }, {
    "from": 255,
    "label": "calls",
    "to": 427
  }, {
    "from": 262,
    "label": "calls",
    "to": 427
  }, {
    "from": 262,
    "label": "calls",
    "to": 427
  }, {
    "from": 267,
    "label": "calls",
    "to": 421
  }, {
    "from": 267,
    "label": "calls",
    "to": 421
  }, {
    "from": 232,
    "label": "calls",
    "to": 422
  }, {
    "from": 289,
    "label": "calls",
    "to": 422
  }, {
    "from": 338,
    "label": "calls",
    "to": 422
  }, {
    "from": 338,
    "label": "calls",
    "to": 429
  }, {
    "from": 338,
    "label": "calls",
    "to": 429
  }, {
    "from": 342,
    "label": "calls",
    "to": 429
  }, {
    "from": 342,
    "label": "calls",
    "to": 429
  }, {
    "from": 350,
    "label": "calls",
    "to": 429
  }, {
    "from": 350,
    "label": "calls",
    "to": 429
  }, {
    "from": 356,
    "label": "calls",
    "to": 429
  }, {
    "from": 356,
    "label": "calls",
    "to": 429
  }, {
    "from": 361,
    "label": "calls",
    "to": 429
  }, {
    "from": 361,
    "label": "calls",
    "to": 429
  }, {
    "from": 22,
    "label": "calls",
    "to": 434
  }, {
    "from": 44,
    "label": "calls",
    "to": 434
  }, {
    "from": 50,
    "label": "calls",
    "to": 434
  }, {
    "from": 61,
    "label": "calls",
    "to": 434
  }, {
    "from": 74,
    "label": "calls",
    "to": 434
  }, {
    "from": 74,
    "label": "calls",
    "to": 434
  }, {
    "from": 74,
    "label": "calls",
    "to": 434
  }, {
    "from": 88,
    "label": "calls",
    "to": 434
  }, {
    "from": 88,
    "label": "calls",
    "to": 434
  }, {
    "from": 92,
    "label": "calls",
    "to": 434
  }, {
    "from": 92,
    "label": "calls",
    "to": 434
  }, {
    "from": 95,
    "label": "calls",
    "to": 434
  }, {
    "from": 95,
    "label": "calls",
    "to": 434
  }, {
    "from": 100,
    "label": "calls",
    "to": 434
  }, {
    "from": 110,
    "label": "calls",
    "to": 434
  }, {
    "from": 116,
    "label": "calls",
    "to": 434
  }, {
    "from": 121,
    "label": "calls",
    "to": 434
  }, {
    "from": 121,
    "label": "calls",
    "to": 434
  }, {
    "from": 132,
    "label": "calls",
    "to": 434
  }, {
    "from": 138,
    "label": "calls",
    "to": 434
  }, {
    "from": 143,
    "label": "calls",
    "to": 434
  }, {
    "from": 149,
    "label": "calls",
    "to": 434
  }, {
    "from": 165,
    "label": "calls",
    "to": 434
  }, {
    "from": 174,
    "label": "calls",
    "to": 434
  }, {
    "from": 180,
    "label": "calls",
    "to": 434
  }, {
    "from": 186,
    "label": "calls",
    "to": 434
  }, {
    "from": 198,
    "label": "calls",
    "to": 434
  }, {
    "from": 198,
    "label": "calls",
    "to": 434
  }, {
    "from": 210,
    "label": "calls",
    "to": 434
  }, {
    "from": 216,
    "label": "calls",
    "to": 434
  }, {
    "from": 223,
    "label": "calls",
    "to": 434
  }, {
    "from": 229,
    "label": "calls",
    "to": 434
  }, {
    "from": 243,
    "label": "calls",
    "to": 434
  }, {
    "from": 255,
    "label": "calls",
    "to": 434
  }, {
    "from": 262,
    "label": "calls",
    "to": 434
  }, {
    "from": 267,
    "label": "calls",
    "to": 434
  }, {
    "from": 274,
    "label": "calls",
    "to": 434
  }, {
    "from": 280,
    "label": "calls",
    "to": 434
  }, {
    "from": 286,
    "label": "calls",
    "to": 434
  }, {
    "from": 295,
    "label": "calls",
    "to": 434
  }, {
    "from": 299,
    "label": "calls",
    "to": 434
  }, {
    "from": 308,
    "label": "calls",
    "to": 434
  }, {
    "from": 312,
    "label": "calls",
    "to": 434
  }, {
    "from": 317,
    "label": "calls",
    "to": 434
  }, {
    "from": 322,
    "label": "calls",
    "to": 434
  }, {
    "from": 327,
    "label": "calls",
    "to": 434
  }, {
    "from": 333,
    "label": "calls",
    "to": 434
  }, {
    "from": 350,
    "label": "calls",
    "to": 434
  }, {
    "from": 356,
    "label": "calls",
    "to": 434
  }, {
    "from": 361,
    "label": "calls",
    "to": 434
  }, {
    "from": 149,
    "label": "calls",
    "to": 431
  }, {
    "from": 180,
    "label": "calls",
    "to": 431
  }, {
    "from": 180,
    "label": "calls",
    "to": 431
  }, {
    "from": 121,
    "label": "calls",
    "to": 424
  }, {
    "from": 121,
    "label": "calls",
    "to": 424
  }, {
    "from": 418,
    "label": "calls",
    "to": 425
  }, {
    "from": 7,
    "label": "calls",
    "to": 428
  }, {
    "from": 7,
    "label": "calls",
    "to": 428
  }, {
    "from": 7,
    "label": "calls",
    "to": 428
  }, {
    "from": 7,
    "label": "calls",
    "to": 428
  }, {
    "from": 30,
    "label": "calls",
    "to": 428
  }, {
    "from": 30,
    "label": "calls",
    "to": 428
  }, {
    "from": 22,
    "label": "calls",
    "to": 423
  }, {
    "from": 44,
    "label": "calls",
    "to": 423
  }, {
    "from": 50,
    "label": "calls",
    "to": 423
  }, {
    "from": 61,
    "label": "calls",
    "to": 423
  }, {
    "from": 74,
    "label": "calls",
    "to": 423
  }, {
    "from": 74,
    "label": "calls",
    "to": 423
  }, {
    "from": 74,
    "label": "calls",
    "to": 423
  }, {
    "from": 88,
    "label": "calls",
    "to": 423
  }, {
    "from": 88,
    "label": "calls",
    "to": 423
  }, {
    "from": 92,
    "label": "calls",
    "to": 423
  }, {
    "from": 92,
    "label": "calls",
    "to": 423
  }, {
    "from": 95,
    "label": "calls",
    "to": 423
  }, {
    "from": 95,
    "label": "calls",
    "to": 423
  }, {
    "from": 100,
    "label": "calls",
    "to": 423
  }, {
    "from": 110,
    "label": "calls",
    "to": 423
  }, {
    "from": 116,
    "label": "calls",
    "to": 423
  }, {
    "from": 121,
    "label": "calls",
    "to": 423
  }, {
    "from": 121,
    "label": "calls",
    "to": 423
  }, {
    "from": 132,
    "label": "calls",
    "to": 423
  }, {
    "from": 138,
    "label": "calls",
    "to": 423
  }, {
    "from": 143,
    "label": "calls",
    "to": 423
  }, {
    "from": 149,
    "label": "calls",
    "to": 423
  }, {
    "from": 165,
    "label": "calls",
    "to": 423
  }, {
    "from": 174,
    "label": "calls",
    "to": 423
  }, {
    "from": 180,
    "label": "calls",
    "to": 423
  }, {
    "from": 186,
    "label": "calls",
    "to": 423
  }, {
    "from": 198,
    "label": "calls",
    "to": 423
  }, {
    "from": 198,
    "label": "calls",
    "to": 423
  }, {
    "from": 210,
    "label": "calls",
    "to": 423
  }, {
    "from": 216,
    "label": "calls",
    "to": 423
  }, {
    "from": 223,
    "label": "calls",
    "to": 423
  }, {
    "from": 229,
    "label": "calls",
    "to": 423
  }, {
    "from": 243,
    "label": "calls",
    "to": 423
  }, {
    "from": 255,
    "label": "calls",
    "to": 423
  }, {
    "from": 262,
    "label": "calls",
    "to": 423
  }, {
    "from": 267,
    "label": "calls",
    "to": 423
  }, {
    "from": 274,
    "label": "calls",
    "to": 423
  }, {
    "from": 280,
    "label": "calls",
    "to": 423
  }, {
    "from": 286,
    "label": "calls",
    "to": 423
  }, {
    "from": 295,
    "label": "calls",
    "to": 423
  }, {
    "from": 299,
    "label": "calls",
    "to": 423
  }, {
    "from": 308,
    "label": "calls",
    "to": 423
  }, {
    "from": 312,
    "label": "calls",
    "to": 423
  }, {
    "from": 317,
    "label": "calls",
    "to": 423
  }, {
    "from": 322,
    "label": "calls",
    "to": 423
  }, {
    "from": 327,
    "label": "calls",
    "to": 423
  }, {
    "from": 333,
    "label": "calls",
    "to": 423
  }, {
    "from": 350,
    "label": "calls",
    "to": 423
  }, {
    "from": 356,
    "label": "calls",
    "to": 423
  }, {
    "from": 361,
    "label": "calls",
    "to": 423
  }, {
    "from": 418,
    "label": "calls",
    "to": 433
  }, {
    "from": 418,
    "label": "calls",
    "to": 433
  }, {
    "from": 22,
    "label": "calls",
    "to": 432
  }, {
    "from": 44,
    "label": "calls",
    "to": 432
  }, {
    "from": 50,
    "label": "calls",
    "to": 432
  }, {
    "from": 61,
    "label": "calls",
    "to": 432
  }, {
    "from": 74,
    "label": "calls",
    "to": 432
  }, {
    "from": 74,
    "label": "calls",
    "to": 432
  }, {
    "from": 74,
    "label": "calls",
    "to": 432
  }, {
    "from": 88,
    "label": "calls",
    "to": 432
  }, {
    "from": 88,
    "label": "calls",
    "to": 432
  }, {
    "from": 92,
    "label": "calls",
    "to": 432
  }, {
    "from": 92,
    "label": "calls",
    "to": 432
  }, {
    "from": 95,
    "label": "calls",
    "to": 432
  }, {
    "from": 95,
    "label": "calls",
    "to": 432
  }, {
    "from": 100,
    "label": "calls",
    "to": 432
  }, {
    "from": 110,
    "label": "calls",
    "to": 432
  }, {
    "from": 116,
    "label": "calls",
    "to": 432
  }, {
    "from": 121,
    "label": "calls",
    "to": 432
  }, {
    "from": 121,
    "label": "calls",
    "to": 432
  }, {
    "from": 132,
    "label": "calls",
    "to": 432
  }, {
    "from": 138,
    "label": "calls",
    "to": 432
  }, {
    "from": 143,
    "label": "calls",
    "to": 432
  }, {
    "from": 149,
    "label": "calls",
    "to": 432
  }, {
    "from": 165,
    "label": "calls",
    "to": 432
  }, {
    "from": 174,
    "label": "calls",
    "to": 432
  }, {
    "from": 180,
    "label": "calls",
    "to": 432
  }, {
    "from": 186,
    "label": "calls",
    "to": 432
  }, {
    "from": 198,
    "label": "calls",
    "to": 432
  }, {
    "from": 198,
    "label": "calls",
    "to": 432
  }, {
    "from": 210,
    "label": "calls",
    "to": 432
  }, {
    "from": 216,
    "label": "calls",
    "to": 432
  }, {
    "from": 223,
    "label": "calls",
    "to": 432
  }, {
    "from": 229,
    "label": "calls",
    "to": 432
  }, {
    "from": 243,
    "label": "calls",
    "to": 432
  }, {
    "from": 255,
    "label": "calls",
    "to": 432
  }, {
    "from": 262,
    "label": "calls",
    "to": 432
  }, {
    "from": 267,
    "label": "calls",
    "to": 432
  }, {
    "from": 274,
    "label": "calls",
    "to": 432
  }, {
    "from": 280,
    "label": "calls",
    "to": 432
  }, {
    "from": 286,
    "label": "calls",
    "to": 432
  }, {
    "from": 295,
    "label": "calls",
    "to": 432
  }, {
    "from": 299,
    "label": "calls",
    "to": 432
  }, {
    "from": 308,
    "label": "calls",
    "to": 432
  }, {
    "from": 312,
    "label": "calls",
    "to": 432
  }, {
    "from": 317,
    "label": "calls",
    "to": 432
  }, {
    "from": 322,
    "label": "calls",
    "to": 432
  }, {
    "from": 327,
    "label": "calls",
    "to": 432
  }, {
    "from": 333,
    "label": "calls",
    "to": 432
  }, {
    "from": 350,
    "label": "calls",
    "to": 432
  }, {
    "from": 356,
    "label": "calls",
    "to": 432
  }, {
    "from": 361,
    "label": "calls",
    "to": 432
  }, {
    "from": 161,
    "label": "calls",
    "to": 420
  }, {
    "from": 1,
    "label": "contains",
    "to": 418
  }, {
    "from": 418,
    "label": "declares",
    "to": 3
  }, {
    "from": 418,
    "label": "declares",
    "to": 7
  }, {
    "from": 418,
    "label": "declares",
    "to": 22
  }, {
    "from": 418,
    "label": "declares",
    "to": 30
  }, {
    "from": 418,
    "label": "declares",
    "to": 37
  }, {
    "from": 418,
    "label": "declares",
    "to": 44
  }, {
    "from": 418,
    "label": "declares",
    "to": 50
  }, {
    "from": 418,
    "label": "declares",
    "to": 56
  }, {
    "from": 418,
    "label": "declares",
    "to": 61
  }, {
    "from": 418,
    "label": "declares",
    "to": 66
  }, {
    "from": 418,
    "label": "declares",
    "to": 74
  }, {
    "from": 418,
    "label": "declares",
    "to": 88
  }, {
    "from": 418,
    "label": "declares",
    "to": 92
  }, {
    "from": 418,
    "label": "declares",
    "to": 95
  }, {
    "from": 418,
    "label": "declares",
    "to": 97
  }, {
    "from": 418,
    "label": "declares",
    "to": 100
  }, {
    "from": 418,
    "label": "declares",
    "to": 107
  }, {
    "from": 418,
    "label": "declares",
    "to": 110
  }, {
    "from": 418,
    "label": "declares",
    "to": 116
  }, {
    "from": 418,
    "label": "declares",
    "to": 121
  }, {
    "from": 418,
    "label": "declares",
    "to": 132
  }, {
    "from": 418,
    "label": "declares",
    "to": 138
  }, {
    "from": 418,
    "label": "declares",
    "to": 143
  }, {
    "from": 418,
    "label": "declares",
    "to": 149
  }, {
    "from": 418,
    "label": "declares",
    "to": 157
  }, {
    "from": 418,
    "label": "declares",
    "to": 161
  }, {
    "from": 418,
    "label": "declares",
    "to": 165
  }, {
    "from": 418,
    "label": "declares",
    "to": 171
  }, {
    "from": 418,
    "label": "declares",
    "to": 174
  }, {
    "from": 418,
    "label": "declares",
    "to": 180
  }, {
    "from": 418,
    "label": "declares",
    "to": 186
  }, {
    "from": 418,
    "label": "declares",
    "to": 191
  }, {
    "from": 418,
    "label": "declares",
    "to": 198
  }, {
    "from": 418,
    "label": "declares",
    "to": 207
  }, {
    "from": 418,
    "label": "declares",
    "to": 210
  }, {
    "from": 418,
    "label": "declares",
    "to": 216
  }, {
    "from": 418,
    "label": "declares",
    "to": 223
  }, {
    "from": 418,
    "label": "declares",
    "to": 227
  }, {
    "from": 418,
    "label": "declares",
    "to": 229
  }, {
    "from": 418,
    "label": "declares",
    "to": 232
  }, {
    "from": 418,
    "label": "declares",
    "to": 237
  }, {
    "from": 418,
    "label": "declares",
    "to": 240
  }, {
    "from": 418,
    "label": "declares",
    "to": 243
  }, {
    "from": 418,
    "label": "declares",
    "to": 249
  }, {
    "from": 418,
    "label": "declares",
    "to": 255
  }, {
    "from": 418,
    "label": "declares",
    "to": 262
  }, {
    "from": 418,
    "label": "declares",
    "to": 267
  }, {
    "from": 418,
    "label": "declares",
    "to": 274
  }, {
    "from": 418,
    "label": "declares",
    "to": 280
  }, {
    "from": 418,
    "label": "declares",
    "to": 286
  }, {
    "from": 418,
    "label": "declares",
    "to": 289
  }, {
    "from": 418,
    "label": "declares",
    "to": 291
  }, {
    "from": 418,
    "label": "declares",
    "to": 295
  }, {
    "from": 418,
    "label": "declares",
    "to": 299
  }, {
    "from": 418,
    "label": "declares",
    "to": 303
  }, {
    "from": 418,
    "label": "declares",
    "to": 305
  }, {
    "from": 418,
    "label": "declares",
    "to": 308
  }, {
    "from": 418,
    "label": "declares",
    "to": 312
  }, {
    "from": 418,
    "label": "declares",
    "to": 317
  }, {
    "from": 418,
    "label": "declares",
    "to": 322
  }, {
    "from": 418,
    "label": "declares",
    "to": 327
  }, {
    "from": 418,
    "label": "declares",
    "to": 333
  }, {
    "from": 418,
    "label": "declares",
    "to": 338
  }, {
    "from": 418,
    "label": "declares",
    "to": 342
  }, {
    "from": 418,
    "label": "declares",
    "to": 350
  }, {
    "from": 418,
    "label": "declares",
    "to": 356
  }, {
    "from": 418,
    "label": "declares",
    "to": 361
  }, {
    "from": 418,
    "label": "declares",
    "to": 367
  }, {
    "from": 418,
    "label": "declares",
    "to": 368
  }, {
    "from": 418,
    "label": "declares",
    "to": 369
  }, {
    "from": 418,
    "label": "declares",
    "to": 370
  }, {
    "from": 418,
    "label": "declares",
    "to": 371
  }, {
    "from": 418,
    "label": "declares",
    "to": 372
  }, {
    "from": 418,
    "label": "declares",
    "to": 373
  }, {
    "from": 418,
    "label": "declares",
    "to": 374
  }, {
    "from": 418,
    "label": "declares",
    "to": 375
  }, {
    "from": 418,
    "label": "declares",
    "to": 376
  }, {
    "from": 418,
    "label": "declares",
    "to": 377
  }, {
    "from": 418,
    "label": "declares",
    "to": 378
  }, {
    "from": 418,
    "label": "declares",
    "to": 379
  }, {
    "from": 418,
    "label": "declares",
    "to": 380
  }, {
    "from": 418,
    "label": "declares",
    "to": 382
  }, {
    "from": 418,
    "label": "declares",
    "to": 383
  }, {
    "from": 418,
    "label": "declares",
    "to": 384
  }, {
    "from": 418,
    "label": "declares",
    "to": 385
  }, {
    "from": 418,
    "label": "declares",
    "to": 386
  }, {
    "from": 418,
    "label": "declares",
    "to": 387
  }, {
    "from": 418,
    "label": "declares",
    "to": 388
  }, {
    "from": 418,
    "label": "declares",
    "to": 389
  }, {
    "from": 418,
    "label": "declares",
    "to": 390
  }, {
    "from": 418,
    "label": "declares",
    "to": 391
  }, {
    "from": 418,
    "label": "declares",
    "to": 392
  }, {
    "from": 418,
    "label": "declares",
    "to": 393
  }, {
    "from": 418,
    "label": "declares",
    "to": 394
  }, {
    "from": 418,
    "label": "declares",
    "to": 395
  }, {
    "from": 418,
    "label": "declares",
    "to": 396
  }, {
    "from": 418,
    "label": "declares",
    "to": 397
  }, {
    "from": 418,
    "label": "declares",
    "to": 398
  }, {
    "from": 418,
    "label": "declares",
    "to": 399
  }, {
    "from": 418,
    "label": "declares",
    "to": 400
  }, {
    "from": 418,
    "label": "declares",
    "to": 401
  }, {
    "from": 418,
    "label": "declares",
    "to": 402
  }, {
    "from": 418,
    "label": "declares",
    "to": 403
  }, {
    "from": 418,
    "label": "declares",
    "to": 404
  }, {
    "from": 418,
    "label": "declares",
    "to": 405
  }, {
    "from": 418,
    "label": "declares",
    "to": 406
  }, {
    "from": 418,
    "label": "declares",
    "to": 407
  }, {
    "from": 418,
    "label": "declares",
    "to": 408
  }, {
    "from": 418,
    "label": "declares",
    "to": 409
  }, {
    "from": 418,
    "label": "declares",
    "to": 410
  }, {
    "from": 418,
    "label": "declares",
    "to": 411
  }, {
    "from": 418,
    "label": "declares",
    "to": 412
  }, {
    "from": 418,
    "label": "declares",
    "to": 413
  }, {
    "from": 418,
    "label": "declares",
    "to": 414
  }, {
    "from": 418,
    "label": "declares",
    "to": 415
  }, {
    "from": 418,
    "label": "declares",
    "to": 416
  }, {
    "from": 418,
    "label": "declares",
    "to": 417
  }, {
    "from": 1,
    "label": "contains",
    "to": 436
  }, {
    "from": 1,
    "label": "contains",
    "to": 437
  }, {
    "from": 436,
    "label": "initializes",
    "to": 438
  }, {
    "from": 436,
    "label": "initializes",
    "to": 439
  }, {
    "from": 437,
    "label": "initializes",
    "to": 435
  }, {
    "from": 437,
    "label": "initializes",
    "to": 435
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "module",
    "type": "module"
  }, {
    "id": 2,
    "text": "function controller ()\r\n\tlocal exported_methods = {\r\n\t\t'anytimes',\r\n\t\t'atleastonce',\r\n\t\t'close',\r\n\t\t'depend',\r\n\t\t'error',\r\n\t\t'label',\r\n\t\t'mock',\r\n\t\t'new',\r\n\t\t'replay',\r\n\t\t'returns',\r\n\t\t'times',\r\n\t\t'verify',\r\n\t}\r\n\tlocal mc = Controller:new()\r\n\tlocal wrapper = {}\r\n\tfor _, method in ipairs( exported_methods ) do\r\n\t\twrapper[ method ] = function (self, ...)\r\n\t\t\treturn mc[ method ]( mc, ... )\r\n\t\tend\r\n\tend\r\n\twrapper.ANYARG  = Argv.ANYARG\r\n\twrapper.ANYARGS = Argv.ANYARGS\r\n\treturn wrapper\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function setup ()\r\n\t\tmc = lemock.controller()\r\n\t\tm  = mc:mock()\r\n\tend",
    "type": "function"
  }, {
    "id": 4,
    "text": "mc = lemock.controller()",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "m  = mc:mock()",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function close_test ()\r\n\t\tlocal t\r\n\t\tt = m.foo ;mc:times(0,1/0):returns( 1 ) :label(1)\r\n\t\tt = m.foo ;mc:times(0,1/0):returns( 2 ) :label(2)\r\n\t\tt = m.foo ;mc:times(0,1/0):returns( 3 )\r\n\t\tm.bar(1) ;mc:close(1)\r\n\t\tm.bar(2) ;mc:close(2)\r\n\t\tmc:replay()\r\n\t\tm.bar(1)\r\n\t\tassert_equal( 2, m.foo )\r\n\t\tassert_equal( 2, m.foo )\r\n\t\tassert_equal( 2, m.foo )\r\n\t\tm.bar(2)\r\n\t\tassert_equal( 3, m.foo )\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local t",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "t = m.foo",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "mc:times(0,1/0):returns( 1 ) :label(1)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "mc:times(0,1/0):returns( 2 ) :label(2)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "mc:times(0,1/0):returns( 3 )",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "m.bar(1)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "mc:close(1)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "m.bar(2)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "mc:close(2)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "mc:replay()",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert_equal( 2, m.foo )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert_equal( 3, m.foo )",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "mc:verify()",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function close_unsatisfied_action_fails_test ()\r\n\t\tm.a = 1 ;mc:label(1)\r\n\t\tm.b = 2 ;mc:close(1)\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m.b = 2 end )\r\n\t\tassert_false( ok, \"Undetected close of unsatisfied action\" )\r\n\t\tassert_match( \"Closes unsatisfied action\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 23,
    "text": "m.a = 1",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "mc:label(1)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "m.b = 2",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local ok, err = pcall( function() m.b = 2 end )",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "assert_false( ok, \"Undetected close of unsatisfied action\" )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "assert_match( \"Closes unsatisfied action\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function close_multiple_test ()\r\n\t\tm.foo(1) ;mc:label(1) :times(0,1)\r\n\t\tm.foo(1) ;mc:label(2) :times(0,1)\r\n\t\tm.foo(1)\r\n\t\tm.bar() ;mc:close(1,2)\r\n\t\tmc:replay()\r\n\t\tm.bar()\r\n\t\tm.foo(1)\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 31,
    "text": "m.foo(1)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "mc:label(1) :times(0,1)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "mc:label(2) :times(0,1)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "m.bar()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "mc:close(1,2)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function close_chaining_test ()\r\n\t\tm.a = 1 ;mc:label 'A'\r\n\t\tm.b = 1 ;mc:label 'B'\r\n\t\tm.c = 1 ;mc:close('A'):close('B')\r\n\tend",
    "type": "function"
  }, {
    "id": 38,
    "text": "mc:label 'A'",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "m.b = 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "mc:label 'B'",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "m.c = 1",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "mc:close('A'):close('B')",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function close_in_replay_mode_fails_test ()\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() mc:close( 'foo' ) end )\r\n\t\tassert_false( ok, \"accepted close in replay mode\" )\r\n\t\tassert_match( \"Can not insert close in replay mode\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local ok, err = pcall( function() mc:close( 'foo' ) end )",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "mc:close( 'foo' )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert_false( ok, \"accepted close in replay mode\" )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "assert_match( \"Can not insert close in replay mode\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function close_on_empty_actionlist_fails_test ()\r\n\t\tlocal ok, err = pcall( function() mc:close( 'bar' ) end )\r\n\t\tassert_false( ok, \"accepted close with empty action list\" )\r\n\t\tassert_match( \"No action is recorded yet\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local ok, err = pcall( function() mc:close( 'bar' ) end )",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "mc:close( 'bar' )",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert_false( ok, \"accepted close with empty action list\" )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert_match( \"No action is recorded yet\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function depend_fulfilled_test ()\r\n\t\tm.foo = 1 ;mc:label 'A'\r\n\t\tm.bar = 2 ;mc:depend 'A'\r\n\t\tmc:replay()\r\n\t\tm.foo = 1\r\n\t\tm.bar = 2\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 57,
    "text": "m.foo = 1",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "m.bar = 2",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "mc:depend 'A'",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function depend_unfulfilled_fails_test ()\r\n\t\tm.foo = 1 ;mc:label 'A'\r\n\t\tm.bar = 2 ;mc:depend 'A'\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m.bar = 2 end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action newindex\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local ok, err = pcall( function() m.bar = 2 end )",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "assert_false( ok, \"replayed blocked action\" )",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert_match( \"Unexpected action newindex\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function depend_fulfilled_any_order_test ()\r\n\t\tlocal tmp\r\n\t\tm.a = 1 ;mc:label 'A'\r\n\t\ttmp = m.b ;mc:returns(2):depend 'A'\r\n\t\ttmp = m.b ;mc:returns(3)\r\n\t\tmc:replay()\r\n\t\tassert_equal( 3, m.b, \"replayed wrong b\" )\r\n\t\tm.a = 1\r\n\t\tassert_equal( 2, m.b, \"replayed wrong b\" )\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local tmp",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "tmp = m.b",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "mc:returns(2):depend 'A'",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "mc:returns(3)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert_equal( 3, m.b, \"replayed wrong b\" )",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert_equal( 2, m.b, \"replayed wrong b\" )",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function depend_serial_blocks_test ()\r\n\t\tlocal tmp\r\n\t\ttmp = m:a() ;mc:label 'a'\r\n\t\ttmp = m:c() ;mc:label 'c' :depend 'b'\r\n\t\ttmp = m:b() ;mc:label 'b' :depend 'a'\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() tmp = m:b() end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action\", err )\r\n\t\tlocal ok, err = pcall( function() tmp = m:c() end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action\", err )\r\n\t\tm:a()\r\n\t\tlocal ok, err = pcall( function() tmp = m:c() end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action\", err )\r\n\t\tm:b()\r\n\t\tm:c()\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 75,
    "text": "tmp = m:a()",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "mc:label 'a'",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "tmp = m:c()",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "mc:label 'c' :depend 'b'",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "tmp = m:b()",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "mc:label 'b' :depend 'a'",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "local ok, err = pcall( function() tmp = m:b() end )",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "assert_match( \"Unexpected action\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "local ok, err = pcall( function() tmp = m:c() end )",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "m:a()",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "m:b()",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "m:c()",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function depend_on_many_labels_test ()\r\n\t\tlocal tmp\r\n\t\ttmp = m:b() ;mc:label 'b'\r\n\t\ttmp = m:c() ;mc:label 'c' :depend( 'a', 'b' )\r\n\t\ttmp = m:a() ;mc:label 'a'\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() tmp = m:c() end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action\", err )\r\n\t\tm:a()\r\n\t\tlocal ok, err = pcall( function() tmp = m:c() end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action\", err )\r\n\t\tm:b()\r\n\t\tm:c()\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 89,
    "text": "mc:label 'b'",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "mc:label 'c' :depend( 'a', 'b' )",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function depend_on_many_labels_test2_test ()\r\n\t\t-- swap order, in case whole list is not checked\r\n\t\tlocal tmp\r\n\t\ttmp = m:b() ;mc:label 'b'\r\n\t\ttmp = m:c() ;mc:label 'c' :depend( 'b', 'a' )\r\n\t\ttmp = m:a() ;mc:label 'a'\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() tmp = m:c() end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action\", err )\r\n\t\tm:a()\r\n\t\tlocal ok, err = pcall( function() tmp = m:c() end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action\", err )\r\n\t\tm:b()\r\n\t\tm:c()\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 93,
    "text": "mc:label 'c' :depend( 'b', 'a' )",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function depend_on_many_bloskers_with_same_label_test ()\r\n\t\ttmp = m:c() ;mc:label 'c' :depend 'b'\r\n\t\ttmp = m:a() ;mc:label 'b'\r\n\t\ttmp = m:b() ;mc:label 'b'\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() tmp = m:c() end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action\", err )\r\n\t\tm:a()\r\n\t\tlocal ok, err = pcall( function() tmp = m:c() end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"Unexpected action\", err )\r\n\t\tm:b()\r\n\t\tm:c()\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function depend_ignors_unknown_label_test ()\r\n\t\tm.foo = 1 ;mc:label 'A'\r\n\t\tm.bar = 2 ;mc:depend 'B'\r\n\t\tmc:replay()\r\n\t\tm.foo = 1\r\n\t\tm.bar = 2\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 98,
    "text": "mc:depend 'B'",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function depend_detect_cycle_test ()\r\n\t\tlocal ok, err = pcall( function()\r\n\t\t\tm.foo = 1 ;mc:label 'A' :depend 'B'\r\n\t\t\tm.bar = 2 ;mc:label 'B' :depend 'A'\r\n\t\t\tmc:replay()\r\n\t\t\tm.foo = 1\r\n\t\tend )\r\n\t\tassert_false( ok, \"replayed cyclically blocked action\" )\r\n\t\tassert_match( \"dependency cycle\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 101,
    "text": "local ok, err = pcall( function()\r\n\t\t\tm.foo = 1 ;mc:label 'A' :depend 'B'\r\n\t\t\tm.bar = 2 ;mc:label 'B' :depend 'A'\r\n\t\t\tmc:replay()\r\n\t\t\tm.foo = 1\r\n\t\tend )",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "mc:label 'A' :depend 'B'",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "mc:label 'B' :depend 'A'",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert_false( ok, \"replayed cyclically blocked action\" )",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "assert_match( \"dependency cycle\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function depend_chaining_test ()\r\n\t\tm.a = 1 ;mc:label 'A'\r\n\t\tm.b = 1 ;mc:label 'B'\r\n\t\tm.c = 1 ;mc:depend('A'):depend('B')\r\n\tend",
    "type": "function"
  }, {
    "id": 108,
    "text": "mc:depend('A'):depend('B')",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function depend_in_replay_mode_fails_test ()\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() mc:depend( 'foo' ) end )\r\n\t\tassert_false( ok, \"set dependency in replay mode\" )\r\n\t\tassert_match( \"Can not add dependency in replay mode\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local ok, err = pcall( function() mc:depend( 'foo' ) end )",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "mc:depend( 'foo' )",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert_false( ok, \"set dependency in replay mode\" )",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assert_match( \"Can not add dependency in replay mode\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function depend_on_empty_actionlist_fails_test ()\r\n\t\tlocal ok, err = pcall( function() mc:depend( 'bar' ) end )\r\n\t\tassert_false( ok, \"set dependency with empty action list\" )\r\n\t\tassert_match( \"No action is recorded yet\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 117,
    "text": "local ok, err = pcall( function() mc:depend( 'bar' ) end )",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "mc:depend( 'bar' )",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert_false( ok, \"set dependency with empty action list\" )",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function depend_reports_expected_actions_on_faliure_test ()\r\n\t\tlocal tmp\r\n\t\ttmp = m.foo ;mc:depend 'B'\r\n\t\ttmp = m.bar ;mc:label 'B'\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() tmp = m.foo end )\r\n\t\tassert_false( ok, \"replayed blocked action\" )\r\n\t\tassert_match( \"expected:.*index bar\", err )\r\n\t\tassert_not_match( \"expected:.*index foo\", err )\r\n\t\ttmp = m.bar\r\n\t\tlocal ok, err = pcall( function() tmp = m.bar end )\r\n\t\tassert_false( ok, \"expected:.*replayed blocked action\" )\r\n\t\tassert_not_match( \"expected:.*index bar\", err )\r\n\t\tassert_match( \"index foo\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 122,
    "text": "tmp = m.foo",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "tmp = m.bar",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "local ok, err = pcall( function() tmp = m.foo end )",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "assert_match( \"expected:.*index bar\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "assert_not_match( \"expected:.*index foo\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "local ok, err = pcall( function() tmp = m.bar end )",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "assert_false( ok, \"expected:.*replayed blocked action\" )",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "assert_not_match( \"expected:.*index bar\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert_match( \"index foo\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function label_in_replay_mode_fails_test ()\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() mc:label( 'foo' ) end )\r\n\t\tassert_false( ok, \"set label in replay mode\" )\r\n\t\tassert_match( \"Can not add labels in replay mode\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 133,
    "text": "local ok, err = pcall( function() mc:label( 'foo' ) end )",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "mc:label( 'foo' )",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "assert_false( ok, \"set label in replay mode\" )",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "assert_match( \"Can not add labels in replay mode\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function label_on_empty_actionlist_fails_test ()\r\n\t\tlocal ok, err = pcall( function() mc:label( 'bar' ) end )\r\n\t\tassert_false( ok, \"set label with empty action list\" )\r\n\t\tassert_match( \"No action is recorded yet\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 139,
    "text": "local ok, err = pcall( function() mc:label( 'bar' ) end )",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "mc:label( 'bar' )",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "assert_false( ok, \"set label with empty action list\" )",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function returns_on_empty_list_fails_test ()\r\n\t\tlocal ok, err = pcall( function() mc:returns(nil) end )\r\n\t\tassert_false( ok, \"returns called on nothing\" )\r\n\t\tassert_match( \"No action is recorded yet.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 144,
    "text": "local ok, err = pcall( function() mc:returns(nil) end )",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "mc:returns(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "assert_false( ok, \"returns called on nothing\" )",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "assert_match( \"No action is recorded yet.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function returns_make_call_fail_test ()\r\n\t\tlocal tmp = m.foo ;mc:returns(1)\r\n\t\tlocal ok, err = pcall( function() tmp(2) end )\r\n\t\tassert_false( ok, \"called index with returnvalue\" )\r\n\t\tassert_match( \"Can not call foo. It has a returnvalue.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 150,
    "text": "local tmp = m.foo",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "mc:returns(1)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "local ok, err = pcall( function() tmp(2) end )",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "tmp(2)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "assert_false( ok, \"called index with returnvalue\" )",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "assert_match( \"Can not call foo. It has a returnvalue.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function callable_index_replays_anytimes_test ()\r\n\t\tlocal tmp = m.foo()\r\n\t\tmc:replay()\r\n\t\ttmp = m.foo\r\n\t\ttmp = m.foo\r\n\t\ttmp = m.foo()\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 158,
    "text": "local tmp = m.foo()",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "tmp = m.foo()",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function create_completely_empty_mock_test ()\r\n\t\tfor k, v in pairs( m ) do\r\n\t\t\tfail( \"Mock should be empty but contains \"..tostring(k) )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 162,
    "text": "for k, v in pairs( m ) do\r\n\t\t\tfail( \"Mock should be empty but contains \"..tostring(k) )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 163,
    "text": "fail( \"Mock should be empty but contains \"..tostring(k) )",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "function create_mock_during_replay_fails_test ()\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() mc:mock() end )\r\n\t\tassert_false( ok, \"mock() succeeded\" )\r\n\t\tassert_match( \"New mock during replay.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 166,
    "text": "local ok, err = pcall( function() mc:mock() end )",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "mc:mock()",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "assert_false( ok, \"mock() succeeded\" )",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "assert_match( \"New mock during replay.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function replay_in_any_order_test ()\r\n\t\tm.a = 1\r\n\t\tm.b = 2\r\n\t\tm.c = 3\r\n\t\tmc:replay()\r\n\t\tm.c = 3\r\n\t\tm.a = 1\r\n\t\tm.b = 2\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 172,
    "text": "m.c = 3",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function replaying_unexpected_action_fails_test ()\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m:somethingelse() end )\r\n\t\tassert_false( ok, \"unexpected replay succeeded\" )\r\n\t\tassert_match( \"Unexpected action index somethingelse\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 175,
    "text": "local ok, err = pcall( function() m:somethingelse() end )",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "m:somethingelse()",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "assert_false( ok, \"unexpected replay succeeded\" )",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "assert_match( \"Unexpected action index somethingelse\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function cached_recording_callable_fails_during_replay_test ()\r\n\t\tlocal tmp = m.foo ; tmp()\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() tmp() end )\r\n\t\tassert_false( ok, \"Cached callable not detected\" )\r\n\t\tassert_match( \"client uses cached callable from recording\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 181,
    "text": "tmp()",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "local ok, err = pcall( function() tmp() end )",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "assert_false( ok, \"Cached callable not detected\" )",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "assert_match( \"client uses cached callable from recording\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function replay_twice_fails_test ()\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() mc:replay() end )\r\n\t\tassert_false( ok, \"replay succeeded twice\" )\r\n\t\tassert_match( \"Replay called twice.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 187,
    "text": "local ok, err = pcall( function() mc:replay() end )",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "assert_false( ok, \"replay succeeded twice\" )",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert_match( \"Replay called twice.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function multiple_controllers_test ()\r\n\t\tlocal mc2 = lemock.controller()\r\n\t\tlocal m2  = mc2:mock()\r\n\t\t\r\n\t\t-- m --         -- m2 --\r\n\t\tm.foo = 1\r\n\t\tmc:replay()\r\n\t\t\t\t\t\tm2.bar = 2\r\n\t\tm.foo = 1\r\n\t\t\t\t\t\tmc2:replay()\r\n\t\tmc:verify()\r\n\t\t\t\t\t\tm2.bar = 2\r\n\t\t\t\t\t\tmc2:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 192,
    "text": "local mc2 = lemock.controller()",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "local m2  = mc2:mock()",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "m2.bar = 2",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "mc2:replay()",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "mc2:verify()",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "function times_test ()\r\n\t\tlocal tmp = m.foo ;mc:returns( 2 ):times( 2, 3 )\r\n\t\tmc:replay()\r\n\t\t-- 1\r\n\t\tlocal tmp = m.foo\r\n\t\tlocal ok, err = pcall( function() mc:verify() end )\r\n\t\tassert_false( ok, \"verified unsatisfied action\" )\r\n\t\tassert_match( \"Wrong replay count 1 \", err )\r\n\t\t-- 2\r\n\t\tlocal tmp = m.foo\r\n\t\tmc:verify()\r\n\t\t-- 3\r\n\t\tlocal tmp = m.foo\r\n\t\tmc:verify()\r\n\t\t-- 4\r\n\t\tlocal ok, err = pcall( function() local tmp = m.foo end )\r\n\t\tassert_false( ok, \"replaied finished action\" )\r\n\t\tassert_match( \"Unexpected action index foo\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 199,
    "text": "mc:returns( 2 ):times( 2, 3 )",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "local ok, err = pcall( function() mc:verify() end )",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "assert_false( ok, \"verified unsatisfied action\" )",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "assert_match( \"Wrong replay count 1 \", err )",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "local ok, err = pcall( function() local tmp = m.foo end )",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "assert_false( ok, \"replaied finished action\" )",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "assert_match( \"Unexpected action index foo\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "function times_called_twice_test ()\r\n\t\tm.foo = 1 ;mc:times( 0, math.huge ):times( 1 )\r\n\tend",
    "type": "function"
  }, {
    "id": 208,
    "text": "mc:times( 0, math.huge ):times( 1 )",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function times_in_replay_mode_fails_test ()\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() mc:times(1) end )\r\n\t\tassert_false( ok, \"changed times in replay mode\" )\r\n\t\tassert_match( \"Can not set times in replay mode.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 211,
    "text": "local ok, err = pcall( function() mc:times(1) end )",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "mc:times(1)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "assert_false( ok, \"changed times in replay mode\" )",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "assert_match( \"Can not set times in replay mode.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "function unrealistic_times_fails_with_message_test ()\r\n\t\tm.a = 'a'\r\n\t\tlocal ok, err = pcall( function() mc:times(0) end )\r\n\t\tassert_false( ok, \"accepted unrealistic time arguments\" )\r\n\t\tassert_match( \"Unrealistic time arguments\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 217,
    "text": "m.a = 'a'",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "local ok, err = pcall( function() mc:times(0) end )",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "mc:times(0)",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "assert_false( ok, \"accepted unrealistic time arguments\" )",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "assert_match( \"Unrealistic time arguments\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function verify_during_record_phase_fails_test ()\r\n\t\tlocal ok, err = pcall( function() mc:verify() end )\r\n\t\tassert_false( ok, \"Verify succeeded\" )\r\n\t\tassert_match( \"Verify called during record.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 224,
    "text": "assert_false( ok, \"Verify succeeded\" )",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "assert_match( \"Verify called during record.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function verify_replayed_actionlist_test ()\r\n\t\tmc:replay()\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function verify_unreplyed_actionlist_fails_test ()\r\n\t\tlocal tmp = m.foo\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() mc:verify() end )\r\n\t\tassert_false( ok, \"Verify succeeded\" )\r\n\t\tassert_match( \"Wrong replay count 0 \", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 230,
    "text": "assert_match( \"Wrong replay count 0 \", err )",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 232,
    "text": "function call_test ()\r\n\t\tm.foo(1,2,3)\r\n\t\tmc:replay()\r\n\t\tlocal tmp = m.foo(1,2,3)\r\n\t\tassert_nil( tmp )\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 233,
    "text": "m.foo(1,2,3)",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "local tmp = m.foo(1,2,3)",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "assert_nil( tmp )",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function call_anyarg_test ()\r\n\t\tm.foo(1,mc.ANYARG,3)\r\n\t\tmc:replay()\r\n\t\tlocal tmp = m.foo(1,2,3)\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 238,
    "text": "m.foo(1,mc.ANYARG,3)",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 240,
    "text": "function call_anyargs_test ()\r\n\t\tm.foo(mc.ANYARGS)\r\n\t\tmc:replay()\r\n\t\tlocal tmp = m.foo(1,2,3)\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 241,
    "text": "m.foo(mc.ANYARGS)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function call_anyargs_bad_fails_test ()\r\n\t\tlocal ok, err = pcall( function() m.foo(mc.ANYARGS, 1) end )\r\n\t\tassert_false( ok, \"ANYARGS misused\" )\r\n\t\tassert_match( \"ANYARGS not at end\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 244,
    "text": "local ok, err = pcall( function() m.foo(mc.ANYARGS, 1) end )",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "m.foo(mc.ANYARGS, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "assert_false( ok, \"ANYARGS misused\" )",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "assert_match( \"ANYARGS not at end\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 249,
    "text": "function call_return_test ()\r\n\t\tm.foo(1,2,3) ;mc:returns( 0, 9 )\r\n\t\tmc:replay()\r\n\t\tlocal tmp1, tmp2 = m.foo(1,2,3)\r\n\t\tassert_equal( 0, tmp1 )\r\n\t\tassert_equal( 9, tmp2 )\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 250,
    "text": "mc:returns( 0, 9 )",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "local tmp1, tmp2 = m.foo(1,2,3)",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "assert_equal( 0, tmp1 )",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "assert_equal( 9, tmp2 )",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 255,
    "text": "function call_wrong_name_fails_test ()\r\n\t\tm.foo(1,2,3) ;mc:returns( 0 )\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m:bar(1,2,3) end )\r\n\t\tassert_false( ok, \"replay wrong index\" )\r\n\t\tassert_match( \"Unexpected action index bar\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 256,
    "text": "mc:returns( 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "local ok, err = pcall( function() m:bar(1,2,3) end )",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "m:bar(1,2,3)",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "assert_false( ok, \"replay wrong index\" )",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "assert_match( \"Unexpected action index bar\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 262,
    "text": "function call_wrong_arg_fails_test ()\r\n\t\tm.foo(1,2,3) ;mc:returns( 0 )\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m.foo(1) end )\r\n\t\tassert_false( ok, \"replay succeeded\" )\r\n\t\tassert_match( \"Unexpected action call foo\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 263,
    "text": "local ok, err = pcall( function() m.foo(1) end )",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "assert_false( ok, \"replay succeeded\" )",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "assert_match( \"Unexpected action call foo\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 267,
    "text": "function call_throws_error_test ()\r\n\t\tm.boo('Ba') ;mc:error( \"Call throws error\" )\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m.boo('Ba') end )\r\n\t\tassert_false( ok, \"did not throw error\" )\r\n\t\tassert_match( \"Call throws error\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 268,
    "text": "m.boo('Ba')",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "mc:error( \"Call throws error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "local ok, err = pcall( function() m.boo('Ba') end )",
    "type": "statement:localassign"
  }, {
    "id": 271,
    "text": "assert_false( ok, \"did not throw error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "assert_match( \"Call throws error\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "function error_during_replay_fails_test ()\r\n\t\tlocal tmp = m.foo\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() mc:error(1) end )\r\n\t\tassert_false( ok, \"error() succeeded during replay\" )\r\n\t\tassert_match( \"Error called during replay.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 275,
    "text": "local ok, err = pcall( function() mc:error(1) end )",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "mc:error(1)",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "assert_false( ok, \"error() succeeded during replay\" )",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "assert_match( \"Error called during replay.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 280,
    "text": "function error_twice_fails_test ()\r\n\t\tlocal tmp = m.foo ;mc:error(1)\r\n\t\tlocal ok, err = pcall( function() mc:error(2) end )\r\n\t\tassert_false( ok, \"duplicate error() succeeded\" )\r\n\t\tassert_match( \"Returns and/or Error called twice for same action.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 281,
    "text": "local ok, err = pcall( function() mc:error(2) end )",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "mc:error(2)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "assert_false( ok, \"duplicate error() succeeded\" )",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "assert_match( \"Returns and/or Error called twice for same action.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "function error_plus_returns_fails_test ()\r\n\t\tlocal tmp = m.foo ;mc:returns(1)\r\n\t\tlocal ok, err = pcall( function() mc:error(2) end )\r\n\t\tassert_false( ok, \"both error and returns succeeded\" )\r\n\t\tassert_match( \"Returns and/or Error called twice for same action.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 287,
    "text": "assert_false( ok, \"both error and returns succeeded\" )",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 289,
    "text": "function index_test ()\r\n\t\tlocal tmp = m.foo\r\n\t\tmc:replay()\r\n\t\tlocal tmp = m.foo\r\n\t\tassert_nil( tmp )\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 290,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 291,
    "text": "function index_returns_test ()\r\n\t\tlocal tmp = m.foo ;mc:returns( 1 )\r\n\t\tmc:replay()\r\n\t\tlocal tmp = m.foo\r\n\t\tassert_equal( 1, tmp )\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 292,
    "text": "mc:returns( 1 )",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "assert_equal( 1, tmp )",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 295,
    "text": "function index_wrong_key_fails_test ()\r\n\t\tlocal tmp = m.foo ;mc:returns( 1 )\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() local tmp = m.bar end )\r\n\t\tassert_false( ok, \"replay succeeded\" )\r\n\t\tassert_match( \"Unexpected action index bar\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 296,
    "text": "local ok, err = pcall( function() local tmp = m.bar end )",
    "type": "statement:localassign"
  }, {
    "id": 297,
    "text": "local tmp = m.bar",
    "type": "statement:localassign"
  }, {
    "id": 298,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 299,
    "text": "function index_throws_error_test ()\r\n\t\tlocal tmp = m.foo ;mc:error( \"Index throws error\" )\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() tmp = m.foo end )\r\n\t\tassert_false( ok, \"did not throw error\" )\r\n\t\tassert_match( \"Index throws error\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 300,
    "text": "mc:error( \"Index throws error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "assert_match( \"Index throws error\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 303,
    "text": "function newindex_test ()\r\n\t\tm.foo = 1\r\n\t\tmc:replay()\r\n\t\tm.foo = 1\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 304,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 305,
    "text": "function newindex_anyarg_test ()\r\n\t\tm.foo = mc.ANYARG\r\n\t\tmc:replay()\r\n\t\tm.foo = 1\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 306,
    "text": "m.foo = mc.ANYARG",
    "type": "statement:assign"
  }, {
    "id": 307,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 308,
    "text": "function newindex_wrong_key_fails_test ()\r\n\t\tm.foo = 1\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m.bar = 1 end )\r\n\t\tassert_false( ok, \"replay succeeded\" )\r\n\t\tassert_match( \"Unexpected action newindex\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 309,
    "text": "local ok, err = pcall( function() m.bar = 1 end )",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "m.bar = 1",
    "type": "statement:assign"
  }, {
    "id": 311,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 312,
    "text": "function newindex_wrong_value_fails_test ()\r\n\t\tm.foo = 1\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m.foo = 0 end )\r\n\t\tassert_false( ok, \"replay succeeded\" )\r\n\t\tassert_match( \"Unexpected action newindex foo\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 313,
    "text": "local ok, err = pcall( function() m.foo = 0 end )",
    "type": "statement:localassign"
  }, {
    "id": 314,
    "text": "m.foo = 0",
    "type": "statement:assign"
  }, {
    "id": 315,
    "text": "assert_match( \"Unexpected action newindex foo\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function newindex_throws_error_test ()\r\n\t\tm.foo = 1 ;mc:error( \"newindex throws error\" )\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m.foo = 1 end )\r\n\t\tassert_false( ok, \"did not throw error\" )\r\n\t\tassert_match( \"newindex throws error\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 318,
    "text": "mc:error( \"newindex throws error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "local ok, err = pcall( function() m.foo = 1 end )",
    "type": "statement:localassign"
  }, {
    "id": 320,
    "text": "assert_match( \"newindex throws error\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function returns_during_replay_fails_test ()\r\n\t\tlocal tmp = m.foo\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() mc:returns(1) end )\r\n\t\tassert_false( ok, \"returns() succeeded during replay\" )\r\n\t\tassert_match( \"Returns called during replay.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 323,
    "text": "local ok, err = pcall( function() mc:returns(1) end )",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "assert_false( ok, \"returns() succeeded during replay\" )",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "assert_match( \"Returns called during replay.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 327,
    "text": "function returns_on_nonreturning_action_fails_test ()\r\n\t\tm.foo = 1 -- assignments can't return\r\n\t\tlocal ok, err = pcall( function() mc:returns(0) end )\r\n\t\tassert_false( ok, \"returns() succeeded on non-returning action\" )\r\n\t\tassert_match( \"Previous action can not return anything.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 328,
    "text": "local ok, err = pcall( function() mc:returns(0) end )",
    "type": "statement:localassign"
  }, {
    "id": 329,
    "text": "mc:returns(0)",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "assert_false( ok, \"returns() succeeded on non-returning action\" )",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "assert_match( \"Previous action can not return anything.\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function returns_twice_fails_test ()\r\n\t\tlocal tmp = m.foo ;mc:returns(1)\r\n\t\tlocal ok, err = pcall( function() mc:returns(2) end )\r\n\t\tassert_false( ok, \"duplicate returns() succeeded\" )\r\n\t\tassert_match( \"Returns and/or Error called twice for same action.\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 334,
    "text": "local ok, err = pcall( function() mc:returns(2) end )",
    "type": "statement:localassign"
  }, {
    "id": 335,
    "text": "mc:returns(2)",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "assert_false( ok, \"duplicate returns() succeeded\" )",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "function selfcall_test ()\r\n\t\tm(11)\r\n\t\tmc:replay()\r\n\t\tlocal tmp = m(11)\r\n\t\tassert_nil( tmp )\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 339,
    "text": "m(11)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "local tmp = m(11)",
    "type": "statement:localassign"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function selfcall_returns_test ()\r\n\t\tm(99) ;mc:returns(1,nil,'foo')\r\n\t\tmc:replay()\r\n\t\tlocal a,b,c = m(99)\r\n\t\tassert_equal( 1, a )\r\n\t\tassert_equal( nil, b )\r\n\t\tassert_equal( 'foo', c )\r\n\t\tmc:verify()\r\n\tend",
    "type": "function"
  }, {
    "id": 343,
    "text": "m(99)",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "mc:returns(1,nil,'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "local a,b,c = m(99)",
    "type": "statement:localassign"
  }, {
    "id": 346,
    "text": "assert_equal( 1, a )",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "assert_equal( nil, b )",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "assert_equal( 'foo', c )",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 350,
    "text": "function selfcall_wrong_argument_fails_test ()\r\n\t\tm(99) ;mc:returns('a','b','c')\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m(90) end )\r\n\t\tassert_false( ok, \"replay succeeded\" )\r\n\t\tassert_match( \"Unexpected action selfcall\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 351,
    "text": "mc:returns('a','b','c')",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "local ok, err = pcall( function() m(90) end )",
    "type": "statement:localassign"
  }, {
    "id": 353,
    "text": "m(90)",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "assert_match( \"Unexpected action selfcall\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 356,
    "text": "function selfcall_wrong_number_of_arguments_fails_test ()\r\n\t\tm(1,2,3)\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m(1,2,3,4) end )\r\n\t\tassert_false( ok, \"replay succeeded\" )\r\n\t\tassert_match( \"Unexpected action selfcall\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 357,
    "text": "m(1,2,3)",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "local ok, err = pcall( function() m(1,2,3,4) end )",
    "type": "statement:localassign"
  }, {
    "id": 359,
    "text": "m(1,2,3,4)",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 361,
    "text": "function selfcall_throws_error_test ()\r\n\t\tm('Ba') ;mc:error( \"Selfcall throws error\" )\r\n\t\tmc:replay()\r\n\t\tlocal ok, err = pcall( function() m('Ba') end )\r\n\t\tassert_false( ok, \"did not throw error\" )\r\n\t\tassert_match( \"Selfcall throws error\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 362,
    "text": "m('Ba')",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "mc:error( \"Selfcall throws error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "local ok, err = pcall( function() m('Ba') end )",
    "type": "statement:localassign"
  }, {
    "id": 365,
    "text": "assert_match( \"Selfcall throws error\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 366,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 367,
    "text": "function() m.b = 2 end",
    "type": "function"
  }, {
    "id": 368,
    "text": "function() mc:close( 'foo' ) end",
    "type": "function"
  }, {
    "id": 369,
    "text": "function() mc:close( 'bar' ) end",
    "type": "function"
  }, {
    "id": 370,
    "text": "function() m.bar = 2 end",
    "type": "function"
  }, {
    "id": 371,
    "text": "function() tmp = m:b() end",
    "type": "function"
  }, {
    "id": 372,
    "text": "function() tmp = m:c() end",
    "type": "function"
  }, {
    "id": 373,
    "text": "function() tmp = m:c() end",
    "type": "function"
  }, {
    "id": 374,
    "text": "function() tmp = m:c() end",
    "type": "function"
  }, {
    "id": 375,
    "text": "function() tmp = m:c() end",
    "type": "function"
  }, {
    "id": 376,
    "text": "function() tmp = m:c() end",
    "type": "function"
  }, {
    "id": 377,
    "text": "function() tmp = m:c() end",
    "type": "function"
  }, {
    "id": 378,
    "text": "function() tmp = m:c() end",
    "type": "function"
  }, {
    "id": 379,
    "text": "function() tmp = m:c() end",
    "type": "function"
  }, {
    "id": 380,
    "text": "function()\r\n\t\t\tm.foo = 1 ;mc:label 'A' :depend 'B'\r\n\t\t\tm.bar = 2 ;mc:label 'B' :depend 'A'\r\n\t\t\tmc:replay()\r\n\t\t\tm.foo = 1\r\n\t\tend",
    "type": "function"
  }, {
    "id": 381,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 382,
    "text": "function() mc:depend( 'foo' ) end",
    "type": "function"
  }, {
    "id": 383,
    "text": "function() mc:depend( 'bar' ) end",
    "type": "function"
  }, {
    "id": 384,
    "text": "function() tmp = m.foo end",
    "type": "function"
  }, {
    "id": 385,
    "text": "function() tmp = m.bar end",
    "type": "function"
  }, {
    "id": 386,
    "text": "function() mc:label( 'foo' ) end",
    "type": "function"
  }, {
    "id": 387,
    "text": "function() mc:label( 'bar' ) end",
    "type": "function"
  }, {
    "id": 388,
    "text": "function() mc:returns(nil) end",
    "type": "function"
  }, {
    "id": 389,
    "text": "function() tmp(2) end",
    "type": "function"
  }, {
    "id": 390,
    "text": "function() mc:mock() end",
    "type": "function"
  }, {
    "id": 391,
    "text": "function() m:somethingelse() end",
    "type": "function"
  }, {
    "id": 392,
    "text": "function() tmp() end",
    "type": "function"
  }, {
    "id": 393,
    "text": "function() mc:replay() end",
    "type": "function"
  }, {
    "id": 394,
    "text": "function() mc:verify() end",
    "type": "function"
  }, {
    "id": 395,
    "text": "function() local tmp = m.foo end",
    "type": "function"
  }, {
    "id": 396,
    "text": "function() mc:times(1) end",
    "type": "function"
  }, {
    "id": 397,
    "text": "function() mc:times(0) end",
    "type": "function"
  }, {
    "id": 398,
    "text": "function() mc:verify() end",
    "type": "function"
  }, {
    "id": 399,
    "text": "function() mc:verify() end",
    "type": "function"
  }, {
    "id": 400,
    "text": "function() m.foo(mc.ANYARGS, 1) end",
    "type": "function"
  }, {
    "id": 401,
    "text": "function() m:bar(1,2,3) end",
    "type": "function"
  }, {
    "id": 402,
    "text": "function() m.foo(1) end",
    "type": "function"
  }, {
    "id": 403,
    "text": "function() m.boo('Ba') end",
    "type": "function"
  }, {
    "id": 404,
    "text": "function() mc:error(1) end",
    "type": "function"
  }, {
    "id": 405,
    "text": "function() mc:error(2) end",
    "type": "function"
  }, {
    "id": 406,
    "text": "function() mc:error(2) end",
    "type": "function"
  }, {
    "id": 407,
    "text": "function() local tmp = m.bar end",
    "type": "function"
  }, {
    "id": 408,
    "text": "function() tmp = m.foo end",
    "type": "function"
  }, {
    "id": 409,
    "text": "function() m.bar = 1 end",
    "type": "function"
  }, {
    "id": 410,
    "text": "function() m.foo = 0 end",
    "type": "function"
  }, {
    "id": 411,
    "text": "function() m.foo = 1 end",
    "type": "function"
  }, {
    "id": 412,
    "text": "function() mc:returns(1) end",
    "type": "function"
  }, {
    "id": 413,
    "text": "function() mc:returns(0) end",
    "type": "function"
  }, {
    "id": 414,
    "text": "function() mc:returns(2) end",
    "type": "function"
  }, {
    "id": 415,
    "text": "function() m(90) end",
    "type": "function"
  }, {
    "id": 416,
    "text": "function() m(1,2,3,4) end",
    "type": "function"
  }, {
    "id": 417,
    "text": "function() m('Ba') end",
    "type": "function"
  }, {
    "id": 418,
    "text": "",
    "type": "function container"
  }, {
    "id": 419,
    "text": "fail",
    "type": "global function"
  }, {
    "id": 420,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 421,
    "text": "boo",
    "type": "global function"
  }, {
    "id": 422,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 423,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 424,
    "text": "assert_not_match",
    "type": "global function"
  }, {
    "id": 425,
    "text": "module",
    "type": "global function"
  }, {
    "id": 426,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 427,
    "text": "foo",
    "type": "global function"
  }, {
    "id": 428,
    "text": "bar",
    "type": "global function"
  }, {
    "id": 429,
    "text": "m",
    "type": "global function"
  }, {
    "id": 430,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 431,
    "text": "tmp",
    "type": "global function"
  }, {
    "id": 432,
    "text": "assert_match",
    "type": "global function"
  }, {
    "id": 433,
    "text": "require",
    "type": "global function"
  }, {
    "id": 434,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 435,
    "text": "",
    "type": "global variable"
  }, {
    "id": 436,
    "text": "",
    "type": "variable container"
  }, {
    "id": 437,
    "text": "",
    "type": "require container"
  }, {
    "id": 438,
    "text": "",
    "type": "local variable"
  }, {
    "id": 439,
    "text": "",
    "type": "local variable"
  } ]
}