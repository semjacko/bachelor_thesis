{
  "_filename": "argv.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lemock/build/unit/argv.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 3
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 37,
    "label": "has",
    "to": 3
  }, {
    "from": 37,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 40
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 3
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 56,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 67,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 97,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 109,
    "label": "has",
    "to": 116
  }, {
    "from": 109,
    "label": "has",
    "to": 117
  }, {
    "from": 109,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 105
  }, {
    "from": 13,
    "label": "calls",
    "to": 127
  }, {
    "from": 37,
    "label": "calls",
    "to": 128
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 67,
    "label": "calls",
    "to": 134
  }, {
    "from": 82,
    "label": "calls",
    "to": 134
  }, {
    "from": 82,
    "label": "calls",
    "to": 134
  }, {
    "from": 97,
    "label": "calls",
    "to": 135
  }, {
    "from": 109,
    "label": "calls",
    "to": 139
  }, {
    "from": 109,
    "label": "calls",
    "to": 139
  }, {
    "from": 109,
    "label": "calls",
    "to": 139
  }, {
    "from": 109,
    "label": "calls",
    "to": 139
  }, {
    "from": 109,
    "label": "calls",
    "to": 139
  }, {
    "from": 109,
    "label": "calls",
    "to": 139
  }, {
    "from": 109,
    "label": "calls",
    "to": 139
  }, {
    "from": 109,
    "label": "calls",
    "to": 139
  }, {
    "from": 119,
    "label": "calls",
    "to": 139
  }, {
    "from": 119,
    "label": "calls",
    "to": 139
  }, {
    "from": 119,
    "label": "calls",
    "to": 139
  }, {
    "from": 29,
    "label": "calls",
    "to": 136
  }, {
    "from": 56,
    "label": "calls",
    "to": 133
  }, {
    "from": 13,
    "label": "calls",
    "to": 137
  }, {
    "from": 5,
    "label": "calls",
    "to": 2
  }, {
    "from": 29,
    "label": "calls",
    "to": 2
  }, {
    "from": 97,
    "label": "calls",
    "to": 144
  }, {
    "from": 126,
    "label": "calls",
    "to": 130
  }, {
    "from": 126,
    "label": "calls",
    "to": 130
  }, {
    "from": 2,
    "label": "calls",
    "to": 138
  }, {
    "from": 50,
    "label": "calls",
    "to": 13
  }, {
    "from": 126,
    "label": "calls",
    "to": 5
  }, {
    "from": 37,
    "label": "calls",
    "to": 50
  }, {
    "from": 126,
    "label": "calls",
    "to": 132
  }, {
    "from": 97,
    "label": "calls",
    "to": 131
  }, {
    "from": 97,
    "label": "calls",
    "to": 140
  }, {
    "from": 29,
    "label": "calls",
    "to": 141
  }, {
    "from": 54,
    "label": "calls",
    "to": 141
  }, {
    "from": 16,
    "label": "calls",
    "to": 9
  }, {
    "from": 52,
    "label": "calls",
    "to": 142
  }, {
    "from": 56,
    "label": "calls",
    "to": 142
  }, {
    "from": 56,
    "label": "calls",
    "to": 142
  }, {
    "from": 67,
    "label": "calls",
    "to": 142
  }, {
    "from": 67,
    "label": "calls",
    "to": 142
  }, {
    "from": 67,
    "label": "calls",
    "to": 142
  }, {
    "from": 82,
    "label": "calls",
    "to": 142
  }, {
    "from": 82,
    "label": "calls",
    "to": 142
  }, {
    "from": 97,
    "label": "calls",
    "to": 142
  }, {
    "from": 126,
    "label": "calls",
    "to": 143
  }, {
    "from": 13,
    "label": "calls",
    "to": 129
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 126,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 126,
    "label": "declares",
    "to": 2
  }, {
    "from": 126,
    "label": "declares",
    "to": 5
  }, {
    "from": 126,
    "label": "declares",
    "to": 9
  }, {
    "from": 126,
    "label": "declares",
    "to": 13
  }, {
    "from": 126,
    "label": "declares",
    "to": 16
  }, {
    "from": 126,
    "label": "declares",
    "to": 29
  }, {
    "from": 126,
    "label": "declares",
    "to": 37
  }, {
    "from": 126,
    "label": "declares",
    "to": 50
  }, {
    "from": 126,
    "label": "declares",
    "to": 52
  }, {
    "from": 126,
    "label": "declares",
    "to": 54
  }, {
    "from": 126,
    "label": "declares",
    "to": 56
  }, {
    "from": 126,
    "label": "declares",
    "to": 67
  }, {
    "from": 126,
    "label": "declares",
    "to": 82
  }, {
    "from": 126,
    "label": "declares",
    "to": 92
  }, {
    "from": 126,
    "label": "declares",
    "to": 97
  }, {
    "from": 126,
    "label": "declares",
    "to": 109
  }, {
    "from": 126,
    "label": "declares",
    "to": 119
  }, {
    "from": 126,
    "label": "declares",
    "to": 125
  }, {
    "from": 1,
    "label": "contains",
    "to": 146
  }, {
    "from": 1,
    "label": "contains",
    "to": 147
  }, {
    "from": 146,
    "label": "initializes",
    "to": 148
  }, {
    "from": 146,
    "label": "initializes",
    "to": 149
  }, {
    "from": 146,
    "label": "initializes",
    "to": 150
  }, {
    "from": 146,
    "label": "initializes",
    "to": 151
  }, {
    "from": 146,
    "label": "initializes",
    "to": 152
  }, {
    "from": 146,
    "label": "initializes",
    "to": 153
  }, {
    "from": 146,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 146,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 146,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 146,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 146,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 146,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 146,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "assigns",
    "to": 167
  }, {
    "from": 147,
    "label": "initializes",
    "to": 145
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "argv",
    "type": "module"
  }, {
    "id": 2,
    "text": "function object (class)\r\n\t\treturn setmetatable( {}, class )\r\n\tend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function class (parent)\r\n\t\tlocal c = object(parent)\r\n\t\tc.__index = c\r\n\t\treturn c\r\n\tend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local c = object(parent)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "c.__index = c",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function value_equal (a, b)\r\n\t\tif a == b then return true end\r\n\t\tif a ~= a and b ~= b then return true end -- NaN == NaN\r\n\t\treturn false\r\n\tend",
    "type": "function"
  }, {
    "id": 10,
    "text": "if a == b then return true end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "if a ~= a and b ~= b then return true end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function qtostring (v)\r\n\t\tif type(v) == 'string' then\r\n\t\t\treturn sfmt( '%q', v )\r\n\t\telse\r\n\t\t\treturn tostring( v )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if type(v) == 'string' then\r\n\t\t\treturn sfmt( '%q', v )\r\n\t\telse\r\n\t\t\treturn tostring( v )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function Argv:equal (other)\r\n\t\tlocal a1, n1 = self.v,  self.len\r\n\t\tlocal a2, n2 = other.v, other.len\r\n\t\tif n1-1 <= n2 and a1[n1] == ANYARGS then\r\n\t\t\tn1 = n1-1\r\n\t\t\tn2 = n1\r\n\t\telseif n2-1 <= n1 and a2[n2] == ANYARGS then\r\n\t\t\tn2 = n2-1\r\n\t\t\tn1 = n2\r\n\t\tend\r\n\t\tif n1 ~= n2 then\r\n\t\t\treturn false\r\n\t\tend\r\n\t\tfor i = 1, n1 do\r\n\t\t\tlocal v1, v2 = a1[i], a2[i]\r\n\t\t\tif not value_equal(v1,v2) and v1 ~= ANYARG and v2 ~= ANYARG then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local a1, n1 = self.v,  self.len",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local a2, n2 = other.v, other.len",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if n1-1 <= n2 and a1[n1] == ANYARGS then\r\n\t\t\tn1 = n1-1\r\n\t\t\tn2 = n1\r\n\t\telseif n2-1 <= n1 and a2[n2] == ANYARGS then\r\n\t\t\tn2 = n2-1\r\n\t\t\tn1 = n2\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "n1 = n1-1",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "n2 = n1",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "n2 = n2-1",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "n1 = n2",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if n1 ~= n2 then\r\n\t\t\treturn false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "for i = 1, n1 do\r\n\t\t\tlocal v1, v2 = a1[i], a2[i]\r\n\t\t\tif not value_equal(v1,v2) and v1 ~= ANYARG and v2 ~= ANYARG then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 26,
    "text": "local v1, v2 = a1[i], a2[i]",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if not value_equal(v1,v2) and v1 ~= ANYARG and v2 ~= ANYARG then\r\n\t\t\t\treturn false\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function Argv:new (...)\r\n\t\tlocal av = object( self )\r\n\t\tav.v = {...}\r\n\t\tav.len = select('#',...)\r\n\t\tfor i = 1, av.len - 1 do\r\n\t\t\tif av.v[i] == Argv.ANYARGS then\r\n\t\t\t\terror( \"ANYARGS not at end.\", 0 )\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn av\r\n\tend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local av = object( self )",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "av.v = {...}",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "av.len = select('#',...)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "for i = 1, av.len - 1 do\r\n\t\t\tif av.v[i] == Argv.ANYARGS then\r\n\t\t\t\terror( \"ANYARGS not at end.\", 0 )\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 34,
    "text": "if av.v[i] == Argv.ANYARGS then\r\n\t\t\t\terror( \"ANYARGS not at end.\", 0 )\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "error( \"ANYARGS not at end.\", 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function Argv:tostring ()\r\n\t\tlocal res = {}\r\n\t\tlocal function w (v)\r\n\t\t\tres[#res+1] = qtostring( v )\r\n\t\tend\r\n\t\tlocal av, ac = self.v, self.len\r\n\t\tfor i = 1, ac do\r\n\t\t\tif av[i] == Argv.ANYARG then\r\n\t\t\t\tres[#res+1] = 'ANYARG'\r\n\t\t\telseif av[i] == Argv.ANYARGS then\r\n\t\t\t\tres[#res+1] = 'ANYARGS'\r\n\t\t\telse\r\n\t\t\t\tw( av[i] )\r\n\t\t\tend\r\n\t\t\tif i < ac then\r\n\t\t\t\tres[#res+1] = ',' -- can not use qtostring in w()\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn table.concat( res )\r\n\tend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local function w (v)\r\n\t\t\tres[#res+1] = qtostring( v )\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 40,
    "text": "res[#res+1] = qtostring( v )",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "local av, ac = self.v, self.len",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "for i = 1, ac do\r\n\t\t\tif av[i] == Argv.ANYARG then\r\n\t\t\t\tres[#res+1] = 'ANYARG'\r\n\t\t\telseif av[i] == Argv.ANYARGS then\r\n\t\t\t\tres[#res+1] = 'ANYARGS'\r\n\t\t\telse\r\n\t\t\t\tw( av[i] )\r\n\t\t\tend\r\n\t\t\tif i < ac then\r\n\t\t\t\tres[#res+1] = ',' -- can not use qtostring in w()\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 43,
    "text": "if av[i] == Argv.ANYARG then\r\n\t\t\t\tres[#res+1] = 'ANYARG'\r\n\t\t\telseif av[i] == Argv.ANYARGS then\r\n\t\t\t\tres[#res+1] = 'ANYARGS'\r\n\t\t\telse\r\n\t\t\t\tw( av[i] )\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "res[#res+1] = 'ANYARG'",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "res[#res+1] = 'ANYARGS'",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "w( av[i] )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "if i < ac then\r\n\t\t\t\tres[#res+1] = ',' -- can not use qtostring in w()\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "res[#res+1] = ','",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function w (v)\r\n\t\t\tres[#res+1] = qtostring( v )\r\n\t\tend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function Argv:unpack ()\r\n\t\treturn unpack( self.v, 1, self.len )\r\n\tend",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function p (...) l[#l+1] = { n=select('#',...), ... } end",
    "type": "function"
  }, {
    "id": 55,
    "text": "l[#l+1] = { n=select('#',...), ... }",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "function equal_test ()\r\n\t\tlocal a1, a2, f, op\r\n\t\tfor i = 1, #l do\r\n\t\t\tai = Argv:new( unpack( l[i], 1, l[i].n ))\r\n\t\t\tfor j = 1, #l do\r\n\t\t\t\taj = Argv:new( unpack( l[j], 1, l[j].n ))\r\n\t\t\t\tif i == j then\r\n\t\t\t\t\tf, op = assert_true,  ') ~= ('\r\n\t\t\t\telse\r\n\t\t\t\t\tf, op = assert_false, ') == ('\r\n\t\t\t\tend\r\n\t\t\t\tf( ai:equal(aj), '('..ai:tostring()..op..aj:tostring()..')' )\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local a1, a2, f, op",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "for i = 1, #l do\r\n\t\t\tai = Argv:new( unpack( l[i], 1, l[i].n ))\r\n\t\t\tfor j = 1, #l do\r\n\t\t\t\taj = Argv:new( unpack( l[j], 1, l[j].n ))\r\n\t\t\t\tif i == j then\r\n\t\t\t\t\tf, op = assert_true,  ') ~= ('\r\n\t\t\t\telse\r\n\t\t\t\t\tf, op = assert_false, ') == ('\r\n\t\t\t\tend\r\n\t\t\t\tf( ai:equal(aj), '('..ai:tostring()..op..aj:tostring()..')' )\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 59,
    "text": "ai = Argv:new( unpack( l[i], 1, l[i].n ))",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "for j = 1, #l do\r\n\t\t\t\taj = Argv:new( unpack( l[j], 1, l[j].n ))\r\n\t\t\t\tif i == j then\r\n\t\t\t\t\tf, op = assert_true,  ') ~= ('\r\n\t\t\t\telse\r\n\t\t\t\t\tf, op = assert_false, ') == ('\r\n\t\t\t\tend\r\n\t\t\t\tf( ai:equal(aj), '('..ai:tostring()..op..aj:tostring()..')' )\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 61,
    "text": "aj = Argv:new( unpack( l[j], 1, l[j].n ))",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if i == j then\r\n\t\t\t\t\tf, op = assert_true,  ') ~= ('\r\n\t\t\t\telse\r\n\t\t\t\t\tf, op = assert_false, ') == ('\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "f, op = assert_true,  ') ~= ('",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "f, op = assert_false, ') == ('",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "f( ai:equal(aj), '('..ai:tostring()..op..aj:tostring()..')' )",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function equal_anyargs_test ()\r\n\t\tlocal a, b = {}, {}\r\n\t\ta[1] = Argv:new( Argv.ANYARGS )\r\n\t\ta[2] = Argv:new( 6, Argv.ANYARGS )\r\n\t\ta[3] = Argv:new( 6, 5, Argv.ANYARGS )\r\n\t\tfor i = 1, #l do\r\n\t\t\tb[1] = Argv:new( unpack( l[i], 1, l[i].n ))\r\n\t\t\tb[2] = Argv:new( 6, unpack( l[i], 1, l[i].n ))\r\n\t\t\tb[3] = Argv:new( 6, 5, unpack( l[i], 1, l[i].n ))\r\n\t\t\tfor j = 1, 3 do\r\n\t\t\t\tlocal astr = '('..a[j]:tostring()..')'\r\n\t\t\t\tlocal bstr = '('..b[j]:tostring()..')'\r\n\t\t\t\tassert_true( a[j]:equal(b[j]), astr..' ~= '..bstr )\r\n\t\t\t\tassert_true( b[j]:equal(a[j]), bstr..' ~= '..astr )\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 68,
    "text": "local a, b = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "a[1] = Argv:new( Argv.ANYARGS )",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "a[2] = Argv:new( 6, Argv.ANYARGS )",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "a[3] = Argv:new( 6, 5, Argv.ANYARGS )",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "for i = 1, #l do\r\n\t\t\tb[1] = Argv:new( unpack( l[i], 1, l[i].n ))\r\n\t\t\tb[2] = Argv:new( 6, unpack( l[i], 1, l[i].n ))\r\n\t\t\tb[3] = Argv:new( 6, 5, unpack( l[i], 1, l[i].n ))\r\n\t\t\tfor j = 1, 3 do\r\n\t\t\t\tlocal astr = '('..a[j]:tostring()..')'\r\n\t\t\t\tlocal bstr = '('..b[j]:tostring()..')'\r\n\t\t\t\tassert_true( a[j]:equal(b[j]), astr..' ~= '..bstr )\r\n\t\t\t\tassert_true( b[j]:equal(a[j]), bstr..' ~= '..astr )\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 73,
    "text": "b[1] = Argv:new( unpack( l[i], 1, l[i].n ))",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "b[2] = Argv:new( 6, unpack( l[i], 1, l[i].n ))",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "b[3] = Argv:new( 6, 5, unpack( l[i], 1, l[i].n ))",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "for j = 1, 3 do\r\n\t\t\t\tlocal astr = '('..a[j]:tostring()..')'\r\n\t\t\t\tlocal bstr = '('..b[j]:tostring()..')'\r\n\t\t\t\tassert_true( a[j]:equal(b[j]), astr..' ~= '..bstr )\r\n\t\t\t\tassert_true( b[j]:equal(a[j]), bstr..' ~= '..astr )\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 77,
    "text": "local astr = '('..a[j]:tostring()..')'",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local bstr = '('..b[j]:tostring()..')'",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "assert_true( a[j]:equal(b[j]), astr..' ~= '..bstr )",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert_true( b[j]:equal(a[j]), bstr..' ~= '..astr )",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function equal_anyarg_test ()\r\n\t\tlocal l = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }\r\n\t\tlocal a1 = Argv:new( unpack(l) )\r\n\t\tfor i = 1, 9 do\r\n\t\t\tl[i] = Argv.ANYARG\r\n\t\t\tlocal a2 = Argv:new( unpack(l) )\r\n\t\t\tassert_true( a1:equal(a2) )\r\n\t\t\tassert_true( a2:equal(a1) )\r\n\t\t\tl[i] = i\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local l = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local a1 = Argv:new( unpack(l) )",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "for i = 1, 9 do\r\n\t\t\tl[i] = Argv.ANYARG\r\n\t\t\tlocal a2 = Argv:new( unpack(l) )\r\n\t\t\tassert_true( a1:equal(a2) )\r\n\t\t\tassert_true( a2:equal(a1) )\r\n\t\t\tl[i] = i\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 86,
    "text": "l[i] = Argv.ANYARG",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "local a2 = Argv:new( unpack(l) )",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "assert_true( a1:equal(a2) )",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert_true( a2:equal(a1) )",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "l[i] = i",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function new_test ()\r\n\t\tArgv:new( Argv.ANYARGS )\r\n\t\tArgv:new( 1, Argv.ANYARGS )\r\n\t\tArgv:new( 1, 2, Argv.ANYARGS )\r\n\tend",
    "type": "function"
  }, {
    "id": 93,
    "text": "Argv:new( Argv.ANYARGS )",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "Argv:new( 1, Argv.ANYARGS )",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "Argv:new( 1, 2, Argv.ANYARGS )",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function new_anyargs_with_extra_arguments_fails_test ()\r\n\t\tlocal l = {}\r\n\t\tl['ANYARGS,1']         = { Argv.ANYARGS, 1 }\r\n\t\tl['ANYARGS,ANYARGS'  ] = { Argv.ANYARGS, Argv.ANYARGS }\r\n\t\tl['1,ANYARGS,1']       = { 1, Argv.ANYARGS, 1 }\r\n\t\tl['1,ANYARGS,ANYARGS'] = { 1, Argv.ANYARGS, Argv.ANYARGS }\r\n\t\tfor msg, args in pairs( l ) do\r\n\t\t\tlocal ok, err = pcall( function() Argv:new( unpack(args) ) end )\r\n\t\t\tassert_false( ok, \"Bad ANYARGS accepted for \"..msg )\r\n\t\t\tassert_match( \"ANYARGS not at end\", err )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local l = {}",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "l['ANYARGS,1']         = { Argv.ANYARGS, 1 }",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "l['ANYARGS,ANYARGS'  ] = { Argv.ANYARGS, Argv.ANYARGS }",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "l['1,ANYARGS,1']       = { 1, Argv.ANYARGS, 1 }",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "l['1,ANYARGS,ANYARGS'] = { 1, Argv.ANYARGS, Argv.ANYARGS }",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "for msg, args in pairs( l ) do\r\n\t\t\tlocal ok, err = pcall( function() Argv:new( unpack(args) ) end )\r\n\t\t\tassert_false( ok, \"Bad ANYARGS accepted for \"..msg )\r\n\t\t\tassert_match( \"ANYARGS not at end\", err )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 104,
    "text": "local ok, err = pcall( function() Argv:new( unpack(args) ) end )",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "Argv:new( unpack(args) )",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "assert_false( ok, \"Bad ANYARGS accepted for \"..msg )",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert_match( \"ANYARGS not at end\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function tostring_test ()\r\n\t\tassert_equal( '',              Argv:new()              :tostring() )\r\n\t\tassert_equal( '\"\"',            Argv:new('')            :tostring() )\r\n\t\tassert_equal( 'nil,nil',       Argv:new(nil,nil)       :tostring() )\r\n\t\tassert_equal( '\"false\",false', Argv:new('false',false) :tostring() )\r\n\t\tassert_equal( '1,2,3',         Argv:new(1,2,3)         :tostring() )\r\n\t\tassert_equal( '1,ANYARG,3',    Argv:new(1,Argv.ANYARG,3):tostring() )\r\n\t\tassert_equal( 'ANYARGS',       Argv:new(Argv.ANYARGS)  :tostring() )\r\n\t\tassert_equal( '7,0,ANYARGS',   Argv:new(7,0,Argv.ANYARGS):tostring() )\r\n\tend",
    "type": "function"
  }, {
    "id": 110,
    "text": "assert_equal( '',              Argv:new()              :tostring() )",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert_equal( '\"\"',            Argv:new('')            :tostring() )",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert_equal( 'nil,nil',       Argv:new(nil,nil)       :tostring() )",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert_equal( '\"false\",false', Argv:new('false',false) :tostring() )",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assert_equal( '1,2,3',         Argv:new(1,2,3)         :tostring() )",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "assert_equal( '1,ANYARG,3',    Argv:new(1,Argv.ANYARG,3):tostring() )",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assert_equal( 'ANYARGS',       Argv:new(Argv.ANYARGS)  :tostring() )",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert_equal( '7,0,ANYARGS',   Argv:new(7,0,Argv.ANYARGS):tostring() )",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function unpack_test ()\r\n\t\tlocal a, b, c = Argv:new( false, nil, 7 ):unpack()\r\n\t\tassert_equal( false, a )\r\n\t\tassert_equal( nil,   b )\r\n\t\tassert_equal( 7,     c )\r\n\tend",
    "type": "function"
  }, {
    "id": 120,
    "text": "local a, b, c = Argv:new( false, nil, 7 ):unpack()",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "assert_equal( false, a )",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert_equal( nil,   b )",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "assert_equal( 7,     c )",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function() Argv:new( unpack(args) ) end",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "function container"
  }, {
    "id": 127,
    "text": "sfmt",
    "type": "global function"
  }, {
    "id": 128,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 129,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 130,
    "text": "newproxy",
    "type": "global function"
  }, {
    "id": 131,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 132,
    "text": "module",
    "type": "global function"
  }, {
    "id": 133,
    "text": "f",
    "type": "global function"
  }, {
    "id": 134,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 135,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 136,
    "text": "error",
    "type": "global function"
  }, {
    "id": 137,
    "text": "type",
    "type": "global function"
  }, {
    "id": 138,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 139,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 140,
    "text": "assert_match",
    "type": "global function"
  }, {
    "id": 141,
    "text": "select",
    "type": "global function"
  }, {
    "id": 142,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 143,
    "text": "require",
    "type": "global function"
  }, {
    "id": 144,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 145,
    "text": "",
    "type": "global variable"
  }, {
    "id": 146,
    "text": "",
    "type": "variable container"
  }, {
    "id": 147,
    "text": "",
    "type": "require container"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 160,
    "text": "",
    "type": "global variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "global variable"
  }, {
    "id": 163,
    "text": "",
    "type": "n/a"
  }, {
    "id": 164,
    "text": "",
    "type": "global variable"
  }, {
    "id": 165,
    "text": "",
    "type": "n/a"
  }, {
    "id": 166,
    "text": "",
    "type": "global variable"
  }, {
    "id": 167,
    "text": "",
    "type": "n/a"
  } ]
}