{
  "_filename": "controller.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lemock/build/unit/controller.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 96
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 96
  }, {
    "from": 102,
    "label": "has",
    "to": 96
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 96
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 105,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 108
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 96
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 96
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 118,
    "label": "has",
    "to": 96
  }, {
    "from": 118,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 121
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 125,
    "label": "has",
    "to": 96
  }, {
    "from": 125,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 121
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 131,
    "label": "has",
    "to": 136
  }, {
    "from": 131,
    "label": "has",
    "to": 137
  }, {
    "from": 131,
    "label": "has",
    "to": 96
  }, {
    "from": 131,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 121
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 139,
    "label": "has",
    "to": 96
  }, {
    "from": 139,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 145,
    "label": "has",
    "to": 149
  }, {
    "from": 145,
    "label": "has",
    "to": 96
  }, {
    "from": 145,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 151,
    "label": "has",
    "to": 96
  }, {
    "from": 151,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 156,
    "label": "has",
    "to": 163
  }, {
    "from": 156,
    "label": "has",
    "to": 164
  }, {
    "from": 156,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 121
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 166,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 166,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 166,
    "label": "has",
    "to": 172
  }, {
    "from": 166,
    "label": "has",
    "to": 96
  }, {
    "from": 166,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 96
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 96
  }, {
    "from": 180,
    "label": "has",
    "to": 96
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 181,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 181,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 96
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 187,
    "label": "has",
    "to": 96
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 96
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 197,
    "label": "has",
    "to": 96
  }, {
    "from": 197,
    "label": "has",
    "to": 201
  }, {
    "from": 197,
    "label": "has",
    "to": 96
  }, {
    "from": 197,
    "label": "has",
    "to": 96
  }, {
    "from": 196,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 96
  }, {
    "from": 202,
    "label": "has",
    "to": 96
  }, {
    "from": 196,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 207,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 207,
    "label": "has",
    "to": 212
  }, {
    "from": 205,
    "label": "has",
    "to": 96
  }, {
    "from": 196,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 196,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 196,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 198
  }, {
    "from": 224,
    "label": "has",
    "to": 96
  }, {
    "from": 224,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 224,
    "label": "has",
    "to": 96
  }, {
    "from": 224,
    "label": "has",
    "to": 201
  }, {
    "from": 224,
    "label": "has",
    "to": 96
  }, {
    "from": 224,
    "label": "has",
    "to": 96
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 226,
    "label": "has",
    "to": 96
  }, {
    "from": 226,
    "label": "has",
    "to": 96
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 206
  }, {
    "from": 228,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 207,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 207,
    "label": "has",
    "to": 212
  }, {
    "from": 228,
    "label": "has",
    "to": 96
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 235,
    "label": "has",
    "to": 238
  }, {
    "from": 232,
    "label": "has",
    "to": 239
  }, {
    "from": 240,
    "label": "has",
    "to": 188
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 96
  }, {
    "from": 240,
    "label": "has",
    "to": 243
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 244,
    "label": "has",
    "to": 96
  }, {
    "from": 244,
    "label": "has",
    "to": 247
  }, {
    "from": 244,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 244,
    "label": "has",
    "to": 251
  }, {
    "from": 244,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 244,
    "label": "has",
    "to": 254
  }, {
    "from": 244,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 256,
    "label": "has",
    "to": 259
  }, {
    "from": 256,
    "label": "has",
    "to": 260
  }, {
    "from": 256,
    "label": "has",
    "to": 261
  }, {
    "from": 256,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 152
  }, {
    "from": 263,
    "label": "has",
    "to": 153
  }, {
    "from": 263,
    "label": "has",
    "to": 154
  }, {
    "from": 263,
    "label": "has",
    "to": 96
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 268
  }, {
    "from": 265,
    "label": "has",
    "to": 269
  }, {
    "from": 265,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 163
  }, {
    "from": 265,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 265,
    "label": "has",
    "to": 273
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 274,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 274,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 279,
    "label": "has",
    "to": 96
  }, {
    "from": 279,
    "label": "has",
    "to": 96
  }, {
    "from": 274,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 274,
    "label": "has",
    "to": 284
  }, {
    "from": 285,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 285,
    "label": "has",
    "to": 96
  }, {
    "from": 285,
    "label": "has",
    "to": 96
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 287,
    "label": "has",
    "to": 289
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 290,
    "label": "has",
    "to": 292
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 293,
    "label": "has",
    "to": 295
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 296,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 296,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 96
  }, {
    "from": 301,
    "label": "has",
    "to": 96
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 304,
    "label": "has",
    "to": 96
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 306,
    "label": "has",
    "to": 96
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 308,
    "label": "has",
    "to": 96
  }, {
    "from": 308,
    "label": "has",
    "to": 96
  }, {
    "from": 308,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 96
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 96
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 96
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 316,
    "label": "has",
    "to": 96
  }, {
    "from": 316,
    "label": "has",
    "to": 96
  }, {
    "from": 316,
    "label": "has",
    "to": 319
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 320,
    "label": "has",
    "to": 323
  }, {
    "from": 320,
    "label": "has",
    "to": 324
  }, {
    "from": 320,
    "label": "has",
    "to": 325
  }, {
    "from": 320,
    "label": "has",
    "to": 96
  }, {
    "from": 320,
    "label": "has",
    "to": 326
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 327,
    "label": "has",
    "to": 329
  }, {
    "from": 327,
    "label": "has",
    "to": 330
  }, {
    "from": 327,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 327,
    "label": "has",
    "to": 333
  }, {
    "from": 327,
    "label": "has",
    "to": 334
  }, {
    "from": 327,
    "label": "has",
    "to": 335
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 336,
    "label": "has",
    "to": 96
  }, {
    "from": 336,
    "label": "has",
    "to": 338
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 339,
    "label": "has",
    "to": 341
  }, {
    "from": 339,
    "label": "has",
    "to": 342
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 343,
    "label": "has",
    "to": 96
  }, {
    "from": 343,
    "label": "has",
    "to": 345
  }, {
    "from": 343,
    "label": "has",
    "to": 96
  }, {
    "from": 343,
    "label": "has",
    "to": 96
  }, {
    "from": 343,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 347,
    "label": "has",
    "to": 96
  }, {
    "from": 347,
    "label": "has",
    "to": 350
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 351,
    "label": "has",
    "to": 96
  }, {
    "from": 351,
    "label": "has",
    "to": 353
  }, {
    "from": 351,
    "label": "has",
    "to": 96
  }, {
    "from": 351,
    "label": "has",
    "to": 96
  }, {
    "from": 351,
    "label": "has",
    "to": 354
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 355,
    "label": "has",
    "to": 357
  }, {
    "from": 355,
    "label": "has",
    "to": 96
  }, {
    "from": 355,
    "label": "has",
    "to": 358
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 359,
    "label": "has",
    "to": 96
  }, {
    "from": 359,
    "label": "has",
    "to": 96
  }, {
    "from": 359,
    "label": "has",
    "to": 361
  }, {
    "from": 362,
    "label": "has",
    "to": 96
  }, {
    "from": 362,
    "label": "has",
    "to": 363
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 364,
    "label": "has",
    "to": 341
  }, {
    "from": 364,
    "label": "has",
    "to": 366
  }, {
    "from": 367,
    "label": "has",
    "to": 344
  }, {
    "from": 367,
    "label": "has",
    "to": 96
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 367,
    "label": "has",
    "to": 96
  }, {
    "from": 367,
    "label": "has",
    "to": 96
  }, {
    "from": 367,
    "label": "has",
    "to": 369
  }, {
    "from": 370,
    "label": "has",
    "to": 348
  }, {
    "from": 370,
    "label": "has",
    "to": 357
  }, {
    "from": 370,
    "label": "has",
    "to": 96
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 372,
    "label": "has",
    "to": 96
  }, {
    "from": 372,
    "label": "has",
    "to": 96
  }, {
    "from": 372,
    "label": "has",
    "to": 96
  }, {
    "from": 372,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 344
  }, {
    "from": 376,
    "label": "has",
    "to": 96
  }, {
    "from": 376,
    "label": "has",
    "to": 368
  }, {
    "from": 376,
    "label": "has",
    "to": 96
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 96
  }, {
    "from": 376,
    "label": "has",
    "to": 96
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 379,
    "label": "has",
    "to": 348
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 379,
    "label": "has",
    "to": 381
  }, {
    "from": 379,
    "label": "has",
    "to": 96
  }, {
    "from": 379,
    "label": "has",
    "to": 382
  }, {
    "from": 383,
    "label": "has",
    "to": 96
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 385,
    "label": "has",
    "to": 96
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 387,
    "label": "has",
    "to": 356
  }, {
    "from": 387,
    "label": "has",
    "to": 96
  }, {
    "from": 387,
    "label": "has",
    "to": 388
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 389,
    "label": "has",
    "to": 96
  }, {
    "from": 389,
    "label": "has",
    "to": 96
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 392,
    "label": "has",
    "to": 96
  }, {
    "from": 393,
    "label": "has",
    "to": 394
  }, {
    "from": 393,
    "label": "has",
    "to": 395
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 397,
    "label": "has",
    "to": 398
  }, {
    "from": 396,
    "label": "has",
    "to": 399
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 400,
    "label": "has",
    "to": 402
  }, {
    "from": 402,
    "label": "has",
    "to": 403
  }, {
    "from": 400,
    "label": "has",
    "to": 404
  }, {
    "from": 404,
    "label": "has",
    "to": 405
  }, {
    "from": 404,
    "label": "has",
    "to": 406
  }, {
    "from": 400,
    "label": "has",
    "to": 407
  }, {
    "from": 407,
    "label": "has",
    "to": 408
  }, {
    "from": 400,
    "label": "has",
    "to": 409
  }, {
    "from": 410,
    "label": "has",
    "to": 411
  }, {
    "from": 410,
    "label": "has",
    "to": 412
  }, {
    "from": 410,
    "label": "has",
    "to": 413
  }, {
    "from": 410,
    "label": "has",
    "to": 414
  }, {
    "from": 410,
    "label": "has",
    "to": 415
  }, {
    "from": 416,
    "label": "has",
    "to": 417
  }, {
    "from": 416,
    "label": "has",
    "to": 418
  }, {
    "from": 418,
    "label": "has",
    "to": 419
  }, {
    "from": 418,
    "label": "has",
    "to": 420
  }, {
    "from": 418,
    "label": "has",
    "to": 421
  }, {
    "from": 416,
    "label": "has",
    "to": 422
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 424,
    "label": "has",
    "to": 425
  }, {
    "from": 423,
    "label": "has",
    "to": 426
  }, {
    "from": 423,
    "label": "has",
    "to": 427
  }, {
    "from": 423,
    "label": "has",
    "to": 428
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 429,
    "label": "has",
    "to": 431
  }, {
    "from": 429,
    "label": "has",
    "to": 432
  }, {
    "from": 429,
    "label": "has",
    "to": 433
  }, {
    "from": 429,
    "label": "has",
    "to": 434
  }, {
    "from": 434,
    "label": "has",
    "to": 435
  }, {
    "from": 429,
    "label": "has",
    "to": 436
  }, {
    "from": 429,
    "label": "has",
    "to": 437
  }, {
    "from": 429,
    "label": "has",
    "to": 438
  }, {
    "from": 429,
    "label": "has",
    "to": 439
  }, {
    "from": 429,
    "label": "has",
    "to": 440
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 441,
    "label": "has",
    "to": 443
  }, {
    "from": 441,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 445
  }, {
    "from": 444,
    "label": "has",
    "to": 446
  }, {
    "from": 444,
    "label": "has",
    "to": 96
  }, {
    "from": 441,
    "label": "has",
    "to": 447
  }, {
    "from": 447,
    "label": "has",
    "to": 96
  }, {
    "from": 441,
    "label": "has",
    "to": 448
  }, {
    "from": 448,
    "label": "has",
    "to": 96
  }, {
    "from": 441,
    "label": "has",
    "to": 449
  }, {
    "from": 449,
    "label": "has",
    "to": 96
  }, {
    "from": 441,
    "label": "has",
    "to": 450
  }, {
    "from": 450,
    "label": "has",
    "to": 96
  }, {
    "from": 441,
    "label": "has",
    "to": 451
  }, {
    "from": 441,
    "label": "has",
    "to": 452
  }, {
    "from": 441,
    "label": "has",
    "to": 453
  }, {
    "from": 441,
    "label": "has",
    "to": 454
  }, {
    "from": 441,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 441,
    "label": "has",
    "to": 457
  }, {
    "from": 441,
    "label": "has",
    "to": 458
  }, {
    "from": 441,
    "label": "has",
    "to": 459
  }, {
    "from": 441,
    "label": "has",
    "to": 460
  }, {
    "from": 441,
    "label": "has",
    "to": 461
  }, {
    "from": 441,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 441,
    "label": "has",
    "to": 462
  }, {
    "from": 441,
    "label": "has",
    "to": 458
  }, {
    "from": 441,
    "label": "has",
    "to": 463
  }, {
    "from": 441,
    "label": "has",
    "to": 464
  }, {
    "from": 465,
    "label": "has",
    "to": 445
  }, {
    "from": 465,
    "label": "has",
    "to": 446
  }, {
    "from": 465,
    "label": "has",
    "to": 96
  }, {
    "from": 465,
    "label": "has",
    "to": 466
  }, {
    "from": 467,
    "label": "has",
    "to": 96
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 469,
    "label": "has",
    "to": 96
  }, {
    "from": 469,
    "label": "has",
    "to": 470
  }, {
    "from": 471,
    "label": "has",
    "to": 96
  }, {
    "from": 471,
    "label": "has",
    "to": 472
  }, {
    "from": 473,
    "label": "has",
    "to": 96
  }, {
    "from": 473,
    "label": "has",
    "to": 474
  }, {
    "from": 475,
    "label": "has",
    "to": 476
  }, {
    "from": 475,
    "label": "has",
    "to": 477
  }, {
    "from": 475,
    "label": "has",
    "to": 478
  }, {
    "from": 475,
    "label": "has",
    "to": 479
  }, {
    "from": 480,
    "label": "has",
    "to": 481
  }, {
    "from": 480,
    "label": "has",
    "to": 403
  }, {
    "from": 480,
    "label": "has",
    "to": 482
  }, {
    "from": 480,
    "label": "has",
    "to": 483
  }, {
    "from": 480,
    "label": "has",
    "to": 484
  }, {
    "from": 480,
    "label": "has",
    "to": 485
  }, {
    "from": 480,
    "label": "has",
    "to": 486
  }, {
    "from": 480,
    "label": "has",
    "to": 487
  }, {
    "from": 480,
    "label": "has",
    "to": 488
  }, {
    "from": 489,
    "label": "has",
    "to": 115
  }, {
    "from": 489,
    "label": "has",
    "to": 116
  }, {
    "from": 489,
    "label": "has",
    "to": 96
  }, {
    "from": 489,
    "label": "has",
    "to": 490
  }, {
    "from": 491,
    "label": "has",
    "to": 190
  }, {
    "from": 491,
    "label": "has",
    "to": 96
  }, {
    "from": 491,
    "label": "has",
    "to": 492
  }, {
    "from": 494,
    "label": "has",
    "to": 425
  }, {
    "from": 496,
    "label": "has",
    "to": 456
  }, {
    "from": 497,
    "label": "has",
    "to": 456
  }, {
    "from": 102,
    "label": "calls",
    "to": 499
  }, {
    "from": 244,
    "label": "calls",
    "to": 499
  }, {
    "from": 296,
    "label": "calls",
    "to": 499
  }, {
    "from": 327,
    "label": "calls",
    "to": 499
  }, {
    "from": 359,
    "label": "calls",
    "to": 499
  }, {
    "from": 359,
    "label": "calls",
    "to": 499
  }, {
    "from": 372,
    "label": "calls",
    "to": 499
  }, {
    "from": 372,
    "label": "calls",
    "to": 499
  }, {
    "from": 372,
    "label": "calls",
    "to": 499
  }, {
    "from": 383,
    "label": "calls",
    "to": 499
  }, {
    "from": 389,
    "label": "calls",
    "to": 499
  }, {
    "from": 389,
    "label": "calls",
    "to": 499
  }, {
    "from": 244,
    "label": "calls",
    "to": 500
  }, {
    "from": 166,
    "label": "calls",
    "to": 501
  }, {
    "from": 192,
    "label": "calls",
    "to": 501
  }, {
    "from": 265,
    "label": "calls",
    "to": 501
  }, {
    "from": 265,
    "label": "calls",
    "to": 501
  }, {
    "from": 296,
    "label": "calls",
    "to": 501
  }, {
    "from": 343,
    "label": "calls",
    "to": 502
  }, {
    "from": 367,
    "label": "calls",
    "to": 502
  }, {
    "from": 376,
    "label": "calls",
    "to": 502
  }, {
    "from": 287,
    "label": "calls",
    "to": 105
  }, {
    "from": 290,
    "label": "calls",
    "to": 105
  }, {
    "from": 293,
    "label": "calls",
    "to": 105
  }, {
    "from": 102,
    "label": "calls",
    "to": 504
  }, {
    "from": 359,
    "label": "calls",
    "to": 504
  }, {
    "from": 359,
    "label": "calls",
    "to": 504
  }, {
    "from": 372,
    "label": "calls",
    "to": 504
  }, {
    "from": 372,
    "label": "calls",
    "to": 504
  }, {
    "from": 372,
    "label": "calls",
    "to": 504
  }, {
    "from": 372,
    "label": "calls",
    "to": 504
  }, {
    "from": 383,
    "label": "calls",
    "to": 504
  }, {
    "from": 327,
    "label": "calls",
    "to": 505
  }, {
    "from": 327,
    "label": "calls",
    "to": 505
  }, {
    "from": 400,
    "label": "calls",
    "to": 506
  }, {
    "from": 429,
    "label": "calls",
    "to": 506
  }, {
    "from": 118,
    "label": "calls",
    "to": 517
  }, {
    "from": 125,
    "label": "calls",
    "to": 517
  }, {
    "from": 139,
    "label": "calls",
    "to": 517
  }, {
    "from": 224,
    "label": "calls",
    "to": 517
  }, {
    "from": 226,
    "label": "calls",
    "to": 517
  }, {
    "from": 244,
    "label": "calls",
    "to": 517
  }, {
    "from": 400,
    "label": "calls",
    "to": 517
  }, {
    "from": 400,
    "label": "calls",
    "to": 517
  }, {
    "from": 327,
    "label": "calls",
    "to": 102
  }, {
    "from": 327,
    "label": "calls",
    "to": 102
  }, {
    "from": 372,
    "label": "calls",
    "to": 102
  }, {
    "from": 383,
    "label": "calls",
    "to": 102
  }, {
    "from": 230,
    "label": "calls",
    "to": 230
  }, {
    "from": 196,
    "label": "calls",
    "to": 230
  }, {
    "from": 498,
    "label": "calls",
    "to": 508
  }, {
    "from": 355,
    "label": "calls",
    "to": 509
  }, {
    "from": 387,
    "label": "calls",
    "to": 509
  }, {
    "from": 230,
    "label": "calls",
    "to": 228
  }, {
    "from": 196,
    "label": "calls",
    "to": 228
  }, {
    "from": 400,
    "label": "calls",
    "to": 510
  }, {
    "from": 429,
    "label": "calls",
    "to": 510
  }, {
    "from": 429,
    "label": "calls",
    "to": 510
  }, {
    "from": 429,
    "label": "calls",
    "to": 510
  }, {
    "from": 475,
    "label": "calls",
    "to": 510
  }, {
    "from": 480,
    "label": "calls",
    "to": 510
  }, {
    "from": 480,
    "label": "calls",
    "to": 510
  }, {
    "from": 156,
    "label": "calls",
    "to": 511
  }, {
    "from": 301,
    "label": "calls",
    "to": 113
  }, {
    "from": 304,
    "label": "calls",
    "to": 113
  }, {
    "from": 306,
    "label": "calls",
    "to": 113
  }, {
    "from": 308,
    "label": "calls",
    "to": 113
  }, {
    "from": 244,
    "label": "calls",
    "to": 512
  }, {
    "from": 396,
    "label": "calls",
    "to": 503
  }, {
    "from": 95,
    "label": "calls",
    "to": 519
  }, {
    "from": 498,
    "label": "calls",
    "to": 519
  }, {
    "from": 156,
    "label": "calls",
    "to": 519
  }, {
    "from": 316,
    "label": "calls",
    "to": 514
  }, {
    "from": 316,
    "label": "calls",
    "to": 514
  }, {
    "from": 98,
    "label": "calls",
    "to": 95
  }, {
    "from": 145,
    "label": "calls",
    "to": 95
  }, {
    "from": 151,
    "label": "calls",
    "to": 95
  }, {
    "from": 151,
    "label": "calls",
    "to": 95
  }, {
    "from": 320,
    "label": "calls",
    "to": 95
  }, {
    "from": 441,
    "label": "calls",
    "to": 95
  }, {
    "from": 423,
    "label": "calls",
    "to": 507
  }, {
    "from": 441,
    "label": "calls",
    "to": 507
  }, {
    "from": 441,
    "label": "calls",
    "to": 507
  }, {
    "from": 351,
    "label": "calls",
    "to": 516
  }, {
    "from": 385,
    "label": "calls",
    "to": 516
  }, {
    "from": 423,
    "label": "calls",
    "to": 525
  }, {
    "from": 441,
    "label": "calls",
    "to": 525
  }, {
    "from": 441,
    "label": "calls",
    "to": 525
  }, {
    "from": 475,
    "label": "calls",
    "to": 525
  }, {
    "from": 480,
    "label": "calls",
    "to": 525
  }, {
    "from": 480,
    "label": "calls",
    "to": 525
  }, {
    "from": 224,
    "label": "calls",
    "to": 224
  }, {
    "from": 228,
    "label": "calls",
    "to": 224
  }, {
    "from": 498,
    "label": "calls",
    "to": 98
  }, {
    "from": 498,
    "label": "calls",
    "to": 98
  }, {
    "from": 498,
    "label": "calls",
    "to": 98
  }, {
    "from": 498,
    "label": "calls",
    "to": 98
  }, {
    "from": 498,
    "label": "calls",
    "to": 98
  }, {
    "from": 498,
    "label": "calls",
    "to": 98
  }, {
    "from": 498,
    "label": "calls",
    "to": 98
  }, {
    "from": 441,
    "label": "calls",
    "to": 98
  }, {
    "from": 192,
    "label": "calls",
    "to": 518
  }, {
    "from": 118,
    "label": "calls",
    "to": 513
  }, {
    "from": 125,
    "label": "calls",
    "to": 513
  }, {
    "from": 131,
    "label": "calls",
    "to": 513
  }, {
    "from": 131,
    "label": "calls",
    "to": 513
  }, {
    "from": 139,
    "label": "calls",
    "to": 513
  }, {
    "from": 145,
    "label": "calls",
    "to": 513
  }, {
    "from": 156,
    "label": "calls",
    "to": 513
  }, {
    "from": 166,
    "label": "calls",
    "to": 513
  }, {
    "from": 166,
    "label": "calls",
    "to": 513
  }, {
    "from": 166,
    "label": "calls",
    "to": 513
  }, {
    "from": 174,
    "label": "calls",
    "to": 513
  }, {
    "from": 181,
    "label": "calls",
    "to": 513
  }, {
    "from": 228,
    "label": "calls",
    "to": 513
  }, {
    "from": 232,
    "label": "calls",
    "to": 513
  }, {
    "from": 240,
    "label": "calls",
    "to": 513
  }, {
    "from": 244,
    "label": "calls",
    "to": 513
  }, {
    "from": 256,
    "label": "calls",
    "to": 513
  }, {
    "from": 296,
    "label": "calls",
    "to": 513
  }, {
    "from": 327,
    "label": "calls",
    "to": 513
  }, {
    "from": 423,
    "label": "calls",
    "to": 522
  }, {
    "from": 441,
    "label": "calls",
    "to": 522
  }, {
    "from": 441,
    "label": "calls",
    "to": 522
  }, {
    "from": 230,
    "label": "calls",
    "to": 226
  }, {
    "from": 274,
    "label": "calls",
    "to": 285
  }, {
    "from": 376,
    "label": "calls",
    "to": 523
  }, {
    "from": 102,
    "label": "calls",
    "to": 515
  }, {
    "from": 498,
    "label": "calls",
    "to": 524
  }, {
    "from": 410,
    "label": "calls",
    "to": 521
  }, {
    "from": 410,
    "label": "calls",
    "to": 521
  }, {
    "from": 416,
    "label": "calls",
    "to": 521
  }, {
    "from": 441,
    "label": "calls",
    "to": 521
  }, {
    "from": 480,
    "label": "calls",
    "to": 521
  }, {
    "from": 347,
    "label": "calls",
    "to": 520
  }, {
    "from": 370,
    "label": "calls",
    "to": 520
  }, {
    "from": 379,
    "label": "calls",
    "to": 520
  }, {
    "from": 1,
    "label": "contains",
    "to": 498
  }, {
    "from": 498,
    "label": "declares",
    "to": 95
  }, {
    "from": 498,
    "label": "declares",
    "to": 98
  }, {
    "from": 498,
    "label": "declares",
    "to": 102
  }, {
    "from": 498,
    "label": "declares",
    "to": 105
  }, {
    "from": 498,
    "label": "declares",
    "to": 113
  }, {
    "from": 498,
    "label": "declares",
    "to": 118
  }, {
    "from": 498,
    "label": "declares",
    "to": 125
  }, {
    "from": 498,
    "label": "declares",
    "to": 131
  }, {
    "from": 498,
    "label": "declares",
    "to": 139
  }, {
    "from": 498,
    "label": "declares",
    "to": 145
  }, {
    "from": 498,
    "label": "declares",
    "to": 151
  }, {
    "from": 498,
    "label": "declares",
    "to": 156
  }, {
    "from": 498,
    "label": "declares",
    "to": 166
  }, {
    "from": 498,
    "label": "declares",
    "to": 174
  }, {
    "from": 498,
    "label": "declares",
    "to": 179
  }, {
    "from": 498,
    "label": "declares",
    "to": 180
  }, {
    "from": 498,
    "label": "declares",
    "to": 181
  }, {
    "from": 498,
    "label": "declares",
    "to": 187
  }, {
    "from": 498,
    "label": "declares",
    "to": 192
  }, {
    "from": 498,
    "label": "declares",
    "to": 196
  }, {
    "from": 498,
    "label": "declares",
    "to": 224
  }, {
    "from": 498,
    "label": "declares",
    "to": 226
  }, {
    "from": 498,
    "label": "declares",
    "to": 228
  }, {
    "from": 498,
    "label": "declares",
    "to": 230
  }, {
    "from": 498,
    "label": "declares",
    "to": 232
  }, {
    "from": 498,
    "label": "declares",
    "to": 240
  }, {
    "from": 498,
    "label": "declares",
    "to": 244
  }, {
    "from": 498,
    "label": "declares",
    "to": 256
  }, {
    "from": 498,
    "label": "declares",
    "to": 263
  }, {
    "from": 498,
    "label": "declares",
    "to": 265
  }, {
    "from": 498,
    "label": "declares",
    "to": 274
  }, {
    "from": 498,
    "label": "declares",
    "to": 285
  }, {
    "from": 498,
    "label": "declares",
    "to": 287
  }, {
    "from": 498,
    "label": "declares",
    "to": 290
  }, {
    "from": 498,
    "label": "declares",
    "to": 293
  }, {
    "from": 498,
    "label": "declares",
    "to": 296
  }, {
    "from": 498,
    "label": "declares",
    "to": 301
  }, {
    "from": 498,
    "label": "declares",
    "to": 304
  }, {
    "from": 498,
    "label": "declares",
    "to": 306
  }, {
    "from": 498,
    "label": "declares",
    "to": 308
  }, {
    "from": 498,
    "label": "declares",
    "to": 312
  }, {
    "from": 498,
    "label": "declares",
    "to": 314
  }, {
    "from": 498,
    "label": "declares",
    "to": 316
  }, {
    "from": 498,
    "label": "declares",
    "to": 320
  }, {
    "from": 498,
    "label": "declares",
    "to": 327
  }, {
    "from": 498,
    "label": "declares",
    "to": 336
  }, {
    "from": 498,
    "label": "declares",
    "to": 339
  }, {
    "from": 498,
    "label": "declares",
    "to": 343
  }, {
    "from": 498,
    "label": "declares",
    "to": 347
  }, {
    "from": 498,
    "label": "declares",
    "to": 351
  }, {
    "from": 498,
    "label": "declares",
    "to": 355
  }, {
    "from": 498,
    "label": "declares",
    "to": 359
  }, {
    "from": 498,
    "label": "declares",
    "to": 362
  }, {
    "from": 498,
    "label": "declares",
    "to": 364
  }, {
    "from": 498,
    "label": "declares",
    "to": 367
  }, {
    "from": 498,
    "label": "declares",
    "to": 370
  }, {
    "from": 498,
    "label": "declares",
    "to": 372
  }, {
    "from": 498,
    "label": "declares",
    "to": 376
  }, {
    "from": 498,
    "label": "declares",
    "to": 379
  }, {
    "from": 498,
    "label": "declares",
    "to": 383
  }, {
    "from": 498,
    "label": "declares",
    "to": 385
  }, {
    "from": 498,
    "label": "declares",
    "to": 387
  }, {
    "from": 498,
    "label": "declares",
    "to": 389
  }, {
    "from": 498,
    "label": "declares",
    "to": 392
  }, {
    "from": 498,
    "label": "declares",
    "to": 393
  }, {
    "from": 498,
    "label": "declares",
    "to": 396
  }, {
    "from": 498,
    "label": "declares",
    "to": 400
  }, {
    "from": 498,
    "label": "declares",
    "to": 410
  }, {
    "from": 498,
    "label": "declares",
    "to": 416
  }, {
    "from": 498,
    "label": "declares",
    "to": 423
  }, {
    "from": 498,
    "label": "declares",
    "to": 429
  }, {
    "from": 498,
    "label": "declares",
    "to": 441
  }, {
    "from": 498,
    "label": "declares",
    "to": 465
  }, {
    "from": 498,
    "label": "declares",
    "to": 467
  }, {
    "from": 498,
    "label": "declares",
    "to": 469
  }, {
    "from": 498,
    "label": "declares",
    "to": 471
  }, {
    "from": 498,
    "label": "declares",
    "to": 473
  }, {
    "from": 498,
    "label": "declares",
    "to": 475
  }, {
    "from": 498,
    "label": "declares",
    "to": 480
  }, {
    "from": 498,
    "label": "declares",
    "to": 489
  }, {
    "from": 498,
    "label": "declares",
    "to": 491
  }, {
    "from": 498,
    "label": "declares",
    "to": 493
  }, {
    "from": 498,
    "label": "declares",
    "to": 494
  }, {
    "from": 498,
    "label": "declares",
    "to": 495
  }, {
    "from": 498,
    "label": "declares",
    "to": 496
  }, {
    "from": 498,
    "label": "declares",
    "to": 497
  }, {
    "from": 1,
    "label": "contains",
    "to": 530
  }, {
    "from": 1,
    "label": "contains",
    "to": 531
  }, {
    "from": 530,
    "label": "initializes",
    "to": 532
  }, {
    "from": 530,
    "label": "initializes",
    "to": 533
  }, {
    "from": 530,
    "label": "initializes",
    "to": 534
  }, {
    "from": 530,
    "label": "initializes",
    "to": 535
  }, {
    "from": 530,
    "label": "initializes",
    "to": 536
  }, {
    "from": 530,
    "label": "initializes",
    "to": 537
  }, {
    "from": 530,
    "label": "initializes",
    "to": 538
  }, {
    "from": 538,
    "label": "assigns",
    "to": 539
  }, {
    "from": 530,
    "label": "initializes",
    "to": 540
  }, {
    "from": 530,
    "label": "initializes",
    "to": 541
  }, {
    "from": 530,
    "label": "initializes",
    "to": 542
  }, {
    "from": 542,
    "label": "assigns",
    "to": 543
  }, {
    "from": 530,
    "label": "initializes",
    "to": 544
  }, {
    "from": 530,
    "label": "initializes",
    "to": 545
  }, {
    "from": 545,
    "label": "assigns",
    "to": 546
  }, {
    "from": 530,
    "label": "initializes",
    "to": 547
  }, {
    "from": 547,
    "label": "assigns",
    "to": 548
  }, {
    "from": 530,
    "label": "initializes",
    "to": 549
  }, {
    "from": 549,
    "label": "assigns",
    "to": 550
  }, {
    "from": 530,
    "label": "initializes",
    "to": 551
  }, {
    "from": 551,
    "label": "assigns",
    "to": 552
  }, {
    "from": 530,
    "label": "initializes",
    "to": 553
  }, {
    "from": 553,
    "label": "assigns",
    "to": 554
  }, {
    "from": 530,
    "label": "initializes",
    "to": 555
  }, {
    "from": 530,
    "label": "initializes",
    "to": 556
  }, {
    "from": 556,
    "label": "assigns",
    "to": 557
  }, {
    "from": 530,
    "label": "initializes",
    "to": 558
  }, {
    "from": 558,
    "label": "assigns",
    "to": 559
  }, {
    "from": 530,
    "label": "initializes",
    "to": 560
  }, {
    "from": 530,
    "label": "initializes",
    "to": 561
  }, {
    "from": 561,
    "label": "assigns",
    "to": 562
  }, {
    "from": 530,
    "label": "initializes",
    "to": 563
  }, {
    "from": 563,
    "label": "assigns",
    "to": 564
  }, {
    "from": 530,
    "label": "initializes",
    "to": 565
  }, {
    "from": 531,
    "label": "initializes",
    "to": 528
  }, {
    "from": 549,
    "label": "contains",
    "to": 2
  }, {
    "from": 549,
    "label": "contains",
    "to": 3
  }, {
    "from": 549,
    "label": "contains",
    "to": 4
  }, {
    "from": 549,
    "label": "contains",
    "to": 5
  }, {
    "from": 549,
    "label": "contains",
    "to": 6
  }, {
    "from": 549,
    "label": "contains",
    "to": 7
  }, {
    "from": 549,
    "label": "contains",
    "to": 8
  }, {
    "from": 549,
    "label": "contains",
    "to": 9
  }, {
    "from": 549,
    "label": "contains",
    "to": 10
  }, {
    "from": 549,
    "label": "contains",
    "to": 11
  }, {
    "from": 549,
    "label": "contains",
    "to": 12
  }, {
    "from": 549,
    "label": "contains",
    "to": 13
  }, {
    "from": 549,
    "label": "contains",
    "to": 14
  }, {
    "from": 549,
    "label": "contains",
    "to": 15
  }, {
    "from": 549,
    "label": "contains",
    "to": 16
  }, {
    "from": 549,
    "label": "contains",
    "to": 17
  }, {
    "from": 549,
    "label": "contains",
    "to": 18
  }, {
    "from": 549,
    "label": "contains",
    "to": 19
  }, {
    "from": 549,
    "label": "contains",
    "to": 20
  }, {
    "from": 549,
    "label": "contains",
    "to": 21
  }, {
    "from": 549,
    "label": "contains",
    "to": 22
  }, {
    "from": 549,
    "label": "contains",
    "to": 23
  }, {
    "from": 549,
    "label": "contains",
    "to": 24
  }, {
    "from": 549,
    "label": "contains",
    "to": 25
  }, {
    "from": 549,
    "label": "contains",
    "to": 26
  }, {
    "from": 549,
    "label": "contains",
    "to": 27
  }, {
    "from": 549,
    "label": "contains",
    "to": 28
  }, {
    "from": 549,
    "label": "contains",
    "to": 29
  }, {
    "from": 549,
    "label": "contains",
    "to": 30
  }, {
    "from": 549,
    "label": "contains",
    "to": 31
  }, {
    "from": 549,
    "label": "contains",
    "to": 32
  }, {
    "from": 549,
    "label": "contains",
    "to": 33
  }, {
    "from": 549,
    "label": "contains",
    "to": 34
  }, {
    "from": 549,
    "label": "contains",
    "to": 35
  }, {
    "from": 549,
    "label": "contains",
    "to": 36
  }, {
    "from": 549,
    "label": "contains",
    "to": 37
  }, {
    "from": 549,
    "label": "contains",
    "to": 38
  }, {
    "from": 549,
    "label": "contains",
    "to": 39
  }, {
    "from": 549,
    "label": "contains",
    "to": 40
  }, {
    "from": 549,
    "label": "contains",
    "to": 41
  }, {
    "from": 549,
    "label": "contains",
    "to": 42
  }, {
    "from": 549,
    "label": "contains",
    "to": 43
  }, {
    "from": 549,
    "label": "contains",
    "to": 44
  }, {
    "from": 549,
    "label": "contains",
    "to": 45
  }, {
    "from": 549,
    "label": "contains",
    "to": 46
  }, {
    "from": 549,
    "label": "contains",
    "to": 47
  }, {
    "from": 549,
    "label": "contains",
    "to": 48
  }, {
    "from": 549,
    "label": "contains",
    "to": 49
  }, {
    "from": 549,
    "label": "contains",
    "to": 50
  }, {
    "from": 549,
    "label": "contains",
    "to": 51
  }, {
    "from": 549,
    "label": "contains",
    "to": 52
  }, {
    "from": 549,
    "label": "contains",
    "to": 53
  }, {
    "from": 549,
    "label": "contains",
    "to": 54
  }, {
    "from": 549,
    "label": "contains",
    "to": 55
  }, {
    "from": 549,
    "label": "contains",
    "to": 56
  }, {
    "from": 549,
    "label": "contains",
    "to": 57
  }, {
    "from": 549,
    "label": "contains",
    "to": 58
  }, {
    "from": 549,
    "label": "contains",
    "to": 59
  }, {
    "from": 549,
    "label": "contains",
    "to": 60
  }, {
    "from": 549,
    "label": "contains",
    "to": 61
  }, {
    "from": 549,
    "label": "contains",
    "to": 62
  }, {
    "from": 549,
    "label": "contains",
    "to": 63
  }, {
    "from": 549,
    "label": "contains",
    "to": 64
  }, {
    "from": 549,
    "label": "contains",
    "to": 65
  }, {
    "from": 549,
    "label": "contains",
    "to": 66
  }, {
    "from": 549,
    "label": "contains",
    "to": 67
  }, {
    "from": 549,
    "label": "contains",
    "to": 68
  }, {
    "from": 549,
    "label": "contains",
    "to": 69
  }, {
    "from": 549,
    "label": "contains",
    "to": 70
  }, {
    "from": 549,
    "label": "contains",
    "to": 71
  }, {
    "from": 549,
    "label": "contains",
    "to": 72
  }, {
    "from": 549,
    "label": "contains",
    "to": 73
  }, {
    "from": 549,
    "label": "contains",
    "to": 74
  }, {
    "from": 549,
    "label": "contains",
    "to": 75
  }, {
    "from": 549,
    "label": "contains",
    "to": 76
  }, {
    "from": 549,
    "label": "contains",
    "to": 77
  }, {
    "from": 549,
    "label": "contains",
    "to": 78
  }, {
    "from": 549,
    "label": "contains",
    "to": 79
  }, {
    "from": 549,
    "label": "contains",
    "to": 80
  }, {
    "from": 549,
    "label": "contains",
    "to": 81
  }, {
    "from": 549,
    "label": "contains",
    "to": 82
  }, {
    "from": 549,
    "label": "contains",
    "to": 83
  }, {
    "from": 549,
    "label": "contains",
    "to": 84
  }, {
    "from": 549,
    "label": "contains",
    "to": 85
  }, {
    "from": 549,
    "label": "contains",
    "to": 86
  }, {
    "from": 549,
    "label": "contains",
    "to": 87
  }, {
    "from": 549,
    "label": "contains",
    "to": 88
  }, {
    "from": 549,
    "label": "contains",
    "to": 89
  }, {
    "from": 549,
    "label": "contains",
    "to": 90
  }, {
    "from": 549,
    "label": "contains",
    "to": 91
  }, {
    "from": 549,
    "label": "contains",
    "to": 92
  }, {
    "from": 549,
    "label": "contains",
    "to": 93
  }, {
    "from": 549,
    "label": "contains",
    "to": 94
  }, {
    "from": 526,
    "label": "contains",
    "to": 287
  }, {
    "from": 527,
    "label": "contains",
    "to": 287
  }, {
    "from": 529,
    "label": "contains",
    "to": 287
  }, {
    "from": 549,
    "label": "contains",
    "to": 287
  }, {
    "from": 526,
    "label": "contains",
    "to": 290
  }, {
    "from": 527,
    "label": "contains",
    "to": 290
  }, {
    "from": 529,
    "label": "contains",
    "to": 290
  }, {
    "from": 549,
    "label": "contains",
    "to": 290
  }, {
    "from": 526,
    "label": "contains",
    "to": 293
  }, {
    "from": 527,
    "label": "contains",
    "to": 293
  }, {
    "from": 529,
    "label": "contains",
    "to": 293
  }, {
    "from": 549,
    "label": "contains",
    "to": 293
  }, {
    "from": 526,
    "label": "contains",
    "to": 296
  }, {
    "from": 527,
    "label": "contains",
    "to": 296
  }, {
    "from": 529,
    "label": "contains",
    "to": 296
  }, {
    "from": 549,
    "label": "contains",
    "to": 296
  }, {
    "from": 526,
    "label": "contains",
    "to": 301
  }, {
    "from": 527,
    "label": "contains",
    "to": 301
  }, {
    "from": 529,
    "label": "contains",
    "to": 301
  }, {
    "from": 549,
    "label": "contains",
    "to": 301
  }, {
    "from": 526,
    "label": "contains",
    "to": 304
  }, {
    "from": 527,
    "label": "contains",
    "to": 304
  }, {
    "from": 529,
    "label": "contains",
    "to": 304
  }, {
    "from": 549,
    "label": "contains",
    "to": 304
  }, {
    "from": 526,
    "label": "contains",
    "to": 306
  }, {
    "from": 527,
    "label": "contains",
    "to": 306
  }, {
    "from": 529,
    "label": "contains",
    "to": 306
  }, {
    "from": 549,
    "label": "contains",
    "to": 306
  }, {
    "from": 526,
    "label": "contains",
    "to": 308
  }, {
    "from": 527,
    "label": "contains",
    "to": 308
  }, {
    "from": 529,
    "label": "contains",
    "to": 308
  }, {
    "from": 549,
    "label": "contains",
    "to": 308
  }, {
    "from": 526,
    "label": "contains",
    "to": 312
  }, {
    "from": 527,
    "label": "contains",
    "to": 312
  }, {
    "from": 529,
    "label": "contains",
    "to": 312
  }, {
    "from": 549,
    "label": "contains",
    "to": 312
  }, {
    "from": 526,
    "label": "contains",
    "to": 314
  }, {
    "from": 527,
    "label": "contains",
    "to": 314
  }, {
    "from": 529,
    "label": "contains",
    "to": 314
  }, {
    "from": 549,
    "label": "contains",
    "to": 314
  }, {
    "from": 526,
    "label": "contains",
    "to": 316
  }, {
    "from": 527,
    "label": "contains",
    "to": 316
  }, {
    "from": 529,
    "label": "contains",
    "to": 316
  }, {
    "from": 549,
    "label": "contains",
    "to": 316
  }, {
    "from": 526,
    "label": "contains",
    "to": 320
  }, {
    "from": 527,
    "label": "contains",
    "to": 320
  }, {
    "from": 529,
    "label": "contains",
    "to": 320
  }, {
    "from": 549,
    "label": "contains",
    "to": 320
  }, {
    "from": 526,
    "label": "contains",
    "to": 327
  }, {
    "from": 527,
    "label": "contains",
    "to": 327
  }, {
    "from": 529,
    "label": "contains",
    "to": 327
  }, {
    "from": 549,
    "label": "contains",
    "to": 327
  }, {
    "from": 526,
    "label": "contains",
    "to": 336
  }, {
    "from": 527,
    "label": "contains",
    "to": 336
  }, {
    "from": 529,
    "label": "contains",
    "to": 336
  }, {
    "from": 549,
    "label": "contains",
    "to": 336
  }, {
    "from": 526,
    "label": "contains",
    "to": 339
  }, {
    "from": 527,
    "label": "contains",
    "to": 339
  }, {
    "from": 529,
    "label": "contains",
    "to": 339
  }, {
    "from": 549,
    "label": "contains",
    "to": 339
  }, {
    "from": 526,
    "label": "contains",
    "to": 343
  }, {
    "from": 527,
    "label": "contains",
    "to": 343
  }, {
    "from": 529,
    "label": "contains",
    "to": 343
  }, {
    "from": 549,
    "label": "contains",
    "to": 343
  }, {
    "from": 526,
    "label": "contains",
    "to": 347
  }, {
    "from": 527,
    "label": "contains",
    "to": 347
  }, {
    "from": 529,
    "label": "contains",
    "to": 347
  }, {
    "from": 549,
    "label": "contains",
    "to": 347
  }, {
    "from": 526,
    "label": "contains",
    "to": 351
  }, {
    "from": 527,
    "label": "contains",
    "to": 351
  }, {
    "from": 529,
    "label": "contains",
    "to": 351
  }, {
    "from": 549,
    "label": "contains",
    "to": 351
  }, {
    "from": 526,
    "label": "contains",
    "to": 355
  }, {
    "from": 527,
    "label": "contains",
    "to": 355
  }, {
    "from": 529,
    "label": "contains",
    "to": 355
  }, {
    "from": 549,
    "label": "contains",
    "to": 355
  }, {
    "from": 526,
    "label": "contains",
    "to": 359
  }, {
    "from": 527,
    "label": "contains",
    "to": 359
  }, {
    "from": 529,
    "label": "contains",
    "to": 359
  }, {
    "from": 549,
    "label": "contains",
    "to": 359
  }, {
    "from": 526,
    "label": "contains",
    "to": 362
  }, {
    "from": 527,
    "label": "contains",
    "to": 362
  }, {
    "from": 529,
    "label": "contains",
    "to": 362
  }, {
    "from": 549,
    "label": "contains",
    "to": 362
  }, {
    "from": 526,
    "label": "contains",
    "to": 364
  }, {
    "from": 527,
    "label": "contains",
    "to": 364
  }, {
    "from": 529,
    "label": "contains",
    "to": 364
  }, {
    "from": 549,
    "label": "contains",
    "to": 364
  }, {
    "from": 526,
    "label": "contains",
    "to": 367
  }, {
    "from": 527,
    "label": "contains",
    "to": 367
  }, {
    "from": 529,
    "label": "contains",
    "to": 367
  }, {
    "from": 549,
    "label": "contains",
    "to": 367
  }, {
    "from": 526,
    "label": "contains",
    "to": 370
  }, {
    "from": 527,
    "label": "contains",
    "to": 370
  }, {
    "from": 529,
    "label": "contains",
    "to": 370
  }, {
    "from": 549,
    "label": "contains",
    "to": 370
  }, {
    "from": 526,
    "label": "contains",
    "to": 372
  }, {
    "from": 527,
    "label": "contains",
    "to": 372
  }, {
    "from": 529,
    "label": "contains",
    "to": 372
  }, {
    "from": 549,
    "label": "contains",
    "to": 372
  }, {
    "from": 526,
    "label": "contains",
    "to": 376
  }, {
    "from": 527,
    "label": "contains",
    "to": 376
  }, {
    "from": 529,
    "label": "contains",
    "to": 376
  }, {
    "from": 549,
    "label": "contains",
    "to": 376
  }, {
    "from": 526,
    "label": "contains",
    "to": 379
  }, {
    "from": 527,
    "label": "contains",
    "to": 379
  }, {
    "from": 529,
    "label": "contains",
    "to": 379
  }, {
    "from": 549,
    "label": "contains",
    "to": 379
  }, {
    "from": 526,
    "label": "contains",
    "to": 383
  }, {
    "from": 527,
    "label": "contains",
    "to": 383
  }, {
    "from": 529,
    "label": "contains",
    "to": 383
  }, {
    "from": 549,
    "label": "contains",
    "to": 383
  }, {
    "from": 526,
    "label": "contains",
    "to": 385
  }, {
    "from": 527,
    "label": "contains",
    "to": 385
  }, {
    "from": 529,
    "label": "contains",
    "to": 385
  }, {
    "from": 549,
    "label": "contains",
    "to": 385
  }, {
    "from": 526,
    "label": "contains",
    "to": 387
  }, {
    "from": 527,
    "label": "contains",
    "to": 387
  }, {
    "from": 529,
    "label": "contains",
    "to": 387
  }, {
    "from": 549,
    "label": "contains",
    "to": 387
  }, {
    "from": 526,
    "label": "contains",
    "to": 389
  }, {
    "from": 527,
    "label": "contains",
    "to": 389
  }, {
    "from": 529,
    "label": "contains",
    "to": 389
  }, {
    "from": 549,
    "label": "contains",
    "to": 389
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "controller",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Action.generic:add_close (label)\r\n\tadd_to_set( self, 'closelist', label )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function Action.generic:add_depend (d)\r\n\tadd_to_set( self, 'dependlist', d )\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function Action.generic:add_label (label)\r\n\tadd_to_set( self, 'labellist', label )\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function Action.generic:assert_satisfied ()\r\n\tassert( self.replay_count <= self.max_replays, \"lemock internal error\" )\r\n\tif not (\r\nself.min_replays <= self.replay_count\r\n                                  ) then\r\n\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t             , self.replay_count\r\n\t\t             , self.min_replays, self.max_replays\r\n\t\t             , self:tostring()\r\n\t\t       )\r\n\t\t       , 0\r\n\t\t)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function Action.generic:blocks ()\r\n\tif self:is_satisfied() then\r\n\t\treturn function () end\r\n\tend\r\n\treturn elements_of_set( self, 'labellist' )\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function Action.generic:closes ()\r\n\treturn elements_of_set( self, 'closelist' )\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function Action.generic:depends ()\r\n\treturn elements_of_set( self, 'dependlist' )\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function Action.generic:has_label (l)\r\n\tfor x in elements_of_set( self, 'labellist' ) do\r\n\t\tif x == l then return true end\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function Action.generic:is_expected ()\r\n\treturn self.replay_count < self.max_replays\r\n\t   and not self.is_blocked\r\n\t   and not self.is_closed\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function Action.generic:is_satisfied ()\r\n\treturn \r\nself.min_replays <= self.replay_count\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function Action.generic:match (key)\r\n\tif getmetatable(self) ~= getmetatable(key)  then return false end\r\n\tif self.mock ~= key.mock                    then return false end\r\n\treturn self:is_expected()\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function Action.generic:new (mock)\r\n\tlocal a = object( self )\r\n\ta.mock         = mock\r\n\ta.replay_count = 0\r\n\ta.min_replays  = 1\r\n\ta.max_replays  = 1\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function Action.generic:set_times (a, b)\r\n\tmin = a or 1\r\n\tmax = b or min\r\n\tmin, max = tonumber(min), tonumber(max)\r\n\tif (not min) or (not max) or (min >= math.huge)\r\n\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t           , qtostring( min )\r\n\t\t           , qtostring( max )\r\n\t\t           )\r\n\t\t     , 0\r\n\t\t     )\r\n\tend\r\n\tself.min_replays = min\r\n\tself.max_replays = max\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function Action.generic_call:get_returnvalue ()\r\n\tif self.has_returnvalue then\r\n\t\treturn self.returnvalue:unpack()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function Action.generic_call:set_returnvalue (...)\r\n\tself.returnvalue = Argv:new(...)\r\n\tself.has_returnvalue = true\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function Action.generic_call:match (q)\r\n\tif not Action.generic.match( self, q )  then return false end\r\n\tif not self.argv:equal( q.argv )        then return false end\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function Action.generic_call:new (m, ...)\r\n\tlocal a = Action.generic.new( self, m )\r\n\ta.argv   = Argv:new(...)\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function Action.call:match (q)\r\n\tif not Action.generic_call.match( self, q )  then return false end\r\n\tif self.key ~= q.key                         then return false end\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function Action.call:new (m, key, ...)\r\n\tlocal a = Action.generic_call.new( self, m, ... )\r\n\ta.key = key\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function Action.call:tostring ()\r\n\tif self.has_returnvalue then\r\n\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , self.argv:tostring()\r\n\t\t             , self.returnvalue:tostring()\r\n\t\t       )\r\n\telse\r\n\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , self.argv:tostring()\r\n\t\t       )\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function Action.index:get_returnvalue ()\r\n\treturn self.returnvalue\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function Action.index:set_returnvalue (v)\r\n\tself.returnvalue = v\r\n\tself.has_returnvalue = true\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function Action.index:match (q)\r\n\tif not Action.generic.match( self, q )  then return false end\r\n\tif self.key ~= q.key                    then return false end\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function Action.index:new (m, key)\r\n\tlocal a = Action.generic.new( self, m )\r\n\ta.key = key\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function Action.index:tostring ()\r\n\tlocal key = 'index '..tostring( self.key )\r\n\tif self.has_returnvalue then\r\n\t\treturn sfmt( \"index %s => %s\"\r\n\t\t             , tostring( self.key )\r\n\t\t             , qtostring( self.returnvalue )\r\n\t\t       )\r\n\telseif self.is_callable then\r\n\t\treturn sfmt( \"index %s()\"\r\n\t\t             , tostring( self.key )\r\n\t\t       )\r\n\telse\r\n\t\treturn sfmt( \"index %s\"\r\n\t\t             , tostring( self.key )\r\n\t\t       )\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function Action.newindex:match (q)\r\n\tif not Action.generic.match( self, q )  then return false end\r\n\tif self.key ~= q.key                    then return false end\r\n\tif not value_equal( self.val, q.val )\r\n\t   and self.val ~= Argv.ANYARG\r\n\t   and q.val    ~= Argv.ANYARG          then return false end\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function Action.newindex:new (m, key, val)\r\n\tlocal a = Action.generic.new( self, m )\r\n\ta.key    = key\r\n\ta.val    = val\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function Action.newindex:tostring ()\r\n\treturn sfmt( \"newindex %s = %s\"\r\n\t             , tostring(self.key)\r\n\t             , qtostring(self.val)\r\n\t       )\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "function Action.selfcall:match (q)\r\n\treturn Action.generic_call.match( self, q )\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "function Action.selfcall:new (m, ...)\r\n\tlocal a = Action.generic_call.new( self, m, ... )\r\n\treturn a\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "function Action.selfcall:tostring ()\r\n\tif self.has_returnvalue then\r\n\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t             , self.argv:tostring()\r\n\t\t             , self.returnvalue:tostring()\r\n\t\t       )\r\n\telse\r\n\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t             , self.argv:tostring()\r\n\t\t       )\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function Action.generic:add_close (label)\r\n\t\tadd_to_set( self, 'closelist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 34,
    "text": "function Action.generic:add_depend (d)\r\n\t\tadd_to_set( self, 'dependlist', d )\r\n\tend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function Action.generic:add_label (label)\r\n\t\tadd_to_set( self, 'labellist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function Action.generic:assert_satisfied ()\r\n\t\tassert( self.replay_count <= self.max_replays, \"lemock internal error\" )\r\n\t\tif not (\r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:340\r\n                                  ) then\r\n\t\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function Action.generic:blocks ()\r\n\t\tif self:is_satisfied() then\r\n\t\t\treturn function () end\r\n\t\tend\r\n\t\treturn elements_of_set( self, 'labellist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function Action.generic:closes ()\r\n\t\treturn elements_of_set( self, 'closelist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 39,
    "text": "function Action.generic:depends ()\r\n\t\treturn elements_of_set( self, 'dependlist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function Action.generic:has_label (l)\r\n\t\tfor x in elements_of_set( self, 'labellist' ) do\r\n\t\t\tif x == l then return true end\r\n\t\tend\r\n\t\treturn false\r\n\tend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function Action.generic:is_expected ()\r\n\t\treturn self.replay_count < self.max_replays\r\n\t\t   and not self.is_blocked\r\n\t\t   and not self.is_closed\r\n\tend",
    "type": "function"
  }, {
    "id": 42,
    "text": "function Action.generic:is_satisfied ()\r\n\t\treturn \r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:335\r\n\tend",
    "type": "function"
  }, {
    "id": 43,
    "text": "function Action.generic:match (key)\r\n\t\tif getmetatable(self) ~= getmetatable(key)  then return false end\r\n\t\tif self.mock ~= key.mock                    then return false end\r\n\t\treturn self:is_expected()\r\n\tend",
    "type": "function"
  }, {
    "id": 44,
    "text": "function Action.generic:new (mock)\r\n\t\tlocal a = object( self )\r\n\t\ta.mock         = mock\r\n\t\ta.replay_count = 0\r\n\t\ta.min_replays  = 1\r\n\t\ta.max_replays  = 1\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 45,
    "text": "function Action.generic:set_times (a, b)\r\n\t\tmin = a or 1\r\n\t\tmax = b or min\r\n\t\tmin, max = tonumber(min), tonumber(max)\r\n\t\tif (not min) or (not max) or (min >= math.huge)\r\n\t\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )\r\n\t\tend\r\n\t\tself.min_replays = min\r\n\t\tself.max_replays = max\r\n\tend",
    "type": "function"
  }, {
    "id": 46,
    "text": "function Action.generic_call:get_returnvalue ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn self.returnvalue:unpack()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 47,
    "text": "function Action.generic_call:set_returnvalue (...)\r\n\t\tself.returnvalue = Argv:new(...)\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 48,
    "text": "function Action.generic_call:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif not self.argv:equal( q.argv )        then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 49,
    "text": "function Action.generic_call:new (m, ...)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.argv   = Argv:new(...)\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 50,
    "text": "function Action.call:match (q)\r\n\t\tif not Action.generic_call.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                         then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 51,
    "text": "function Action.call:new (m, key, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 52,
    "text": "function Action.call:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 53,
    "text": "function Action.index:get_returnvalue ()\r\n\t\treturn self.returnvalue\r\n\tend",
    "type": "function"
  }, {
    "id": 54,
    "text": "function Action.index:set_returnvalue (v)\r\n\t\tself.returnvalue = v\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 55,
    "text": "function Action.index:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 56,
    "text": "function Action.index:new (m, key)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 57,
    "text": "function Action.index:tostring ()\r\n\t\tlocal key = 'index '..tostring( self.key )\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"index %s => %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t             , qtostring( self.returnvalue )\r\n\t\t\t       )\r\n\t\telseif self.is_callable then\r\n\t\t\treturn sfmt( \"index %s()\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"index %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 58,
    "text": "function Action.newindex:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\tif not value_equal( self.val, q.val )\r\n\t\t   and self.val ~= Argv.ANYARG\r\n\t\t   and q.val    ~= Argv.ANYARG          then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 59,
    "text": "function Action.newindex:new (m, key, val)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key    = key\r\n\t\ta.val    = val\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 60,
    "text": "function Action.newindex:tostring ()\r\n\t\treturn sfmt( \"newindex %s = %s\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , qtostring(self.val)\r\n\t\t       )\r\n\tend",
    "type": "function"
  }, {
    "id": 61,
    "text": "function Action.selfcall:match (q)\r\n\t\treturn Action.generic_call.match( self, q )\r\n\tend",
    "type": "function"
  }, {
    "id": 62,
    "text": "function Action.selfcall:new (m, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 63,
    "text": "function Action.selfcall:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 64,
    "text": "function Action.generic:add_close (label)\r\n\t\tadd_to_set( self, 'closelist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 65,
    "text": "function Action.generic:add_depend (d)\r\n\t\tadd_to_set( self, 'dependlist', d )\r\n\tend",
    "type": "function"
  }, {
    "id": 66,
    "text": "function Action.generic:add_label (label)\r\n\t\tadd_to_set( self, 'labellist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 67,
    "text": "function Action.generic:assert_satisfied ()\r\n\t\tassert( self.replay_count <= self.max_replays, \"lemock internal error\" )\r\n\t\tif not (\r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:340\r\n                                  ) then\r\n\t\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 68,
    "text": "function Action.generic:blocks ()\r\n\t\tif self:is_satisfied() then\r\n\t\t\treturn function () end\r\n\t\tend\r\n\t\treturn elements_of_set( self, 'labellist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 69,
    "text": "function Action.generic:closes ()\r\n\t\treturn elements_of_set( self, 'closelist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 70,
    "text": "function Action.generic:depends ()\r\n\t\treturn elements_of_set( self, 'dependlist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 71,
    "text": "function Action.generic:has_label (l)\r\n\t\tfor x in elements_of_set( self, 'labellist' ) do\r\n\t\t\tif x == l then return true end\r\n\t\tend\r\n\t\treturn false\r\n\tend",
    "type": "function"
  }, {
    "id": 72,
    "text": "function Action.generic:is_expected ()\r\n\t\treturn self.replay_count < self.max_replays\r\n\t\t   and not self.is_blocked\r\n\t\t   and not self.is_closed\r\n\tend",
    "type": "function"
  }, {
    "id": 73,
    "text": "function Action.generic:is_satisfied ()\r\n\t\treturn \r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:335\r\n\tend",
    "type": "function"
  }, {
    "id": 74,
    "text": "function Action.generic:match (key)\r\n\t\tif getmetatable(self) ~= getmetatable(key)  then return false end\r\n\t\tif self.mock ~= key.mock                    then return false end\r\n\t\treturn self:is_expected()\r\n\tend",
    "type": "function"
  }, {
    "id": 75,
    "text": "function Action.generic:new (mock)\r\n\t\tlocal a = object( self )\r\n\t\ta.mock         = mock\r\n\t\ta.replay_count = 0\r\n\t\ta.min_replays  = 1\r\n\t\ta.max_replays  = 1\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 76,
    "text": "function Action.generic:set_times (a, b)\r\n\t\tmin = a or 1\r\n\t\tmax = b or min\r\n\t\tmin, max = tonumber(min), tonumber(max)\r\n\t\tif (not min) or (not max) or (min >= math.huge)\r\n\t\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )\r\n\t\tend\r\n\t\tself.min_replays = min\r\n\t\tself.max_replays = max\r\n\tend",
    "type": "function"
  }, {
    "id": 77,
    "text": "function Action.generic_call:get_returnvalue ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn self.returnvalue:unpack()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 78,
    "text": "function Action.generic_call:set_returnvalue (...)\r\n\t\tself.returnvalue = Argv:new(...)\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 79,
    "text": "function Action.generic_call:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif not self.argv:equal( q.argv )        then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 80,
    "text": "function Action.generic_call:new (m, ...)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.argv   = Argv:new(...)\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 81,
    "text": "function Action.call:match (q)\r\n\t\tif not Action.generic_call.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                         then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 82,
    "text": "function Action.call:new (m, key, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 83,
    "text": "function Action.call:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 84,
    "text": "function Action.index:get_returnvalue ()\r\n\t\treturn self.returnvalue\r\n\tend",
    "type": "function"
  }, {
    "id": 85,
    "text": "function Action.index:set_returnvalue (v)\r\n\t\tself.returnvalue = v\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 86,
    "text": "function Action.index:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 87,
    "text": "function Action.index:new (m, key)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 88,
    "text": "function Action.index:tostring ()\r\n\t\tlocal key = 'index '..tostring( self.key )\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"index %s => %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t             , qtostring( self.returnvalue )\r\n\t\t\t       )\r\n\t\telseif self.is_callable then\r\n\t\t\treturn sfmt( \"index %s()\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"index %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 89,
    "text": "function Action.newindex:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\tif not value_equal( self.val, q.val )\r\n\t\t   and self.val ~= Argv.ANYARG\r\n\t\t   and q.val    ~= Argv.ANYARG          then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 90,
    "text": "function Action.newindex:new (m, key, val)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key    = key\r\n\t\ta.val    = val\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 91,
    "text": "function Action.newindex:tostring ()\r\n\t\treturn sfmt( \"newindex %s = %s\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , qtostring(self.val)\r\n\t\t       )\r\n\tend",
    "type": "function"
  }, {
    "id": 92,
    "text": "function Action.selfcall:match (q)\r\n\t\treturn Action.generic_call.match( self, q )\r\n\tend",
    "type": "function"
  }, {
    "id": 93,
    "text": "function Action.selfcall:new (m, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 94,
    "text": "function Action.selfcall:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 95,
    "text": "function object (class)\r\n\t\treturn setmetatable( {}, class )\r\n\tend",
    "type": "function"
  }, {
    "id": 96,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function class (parent)\r\n\t\tlocal c = object(parent)\r\n\t\tc.__index = c\r\n\t\treturn c\r\n\tend",
    "type": "function"
  }, {
    "id": 99,
    "text": "local c = object(parent)",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "c.__index = c",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function qtostring (v)\r\n\t\tif type(v) == 'string' then\r\n\t\t\treturn sfmt( '%q', v )\r\n\t\telse\r\n\t\t\treturn tostring( v )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 103,
    "text": "if type(v) == 'string' then\r\n\t\t\treturn sfmt( '%q', v )\r\n\t\telse\r\n\t\t\treturn tostring( v )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function add_to_set (o, setname, element)\r\n\t\tif not o[setname] then\r\n\t\t\to[setname] = {}\r\n\t\tend\r\n\t\tlocal l = o[setname]\r\n\t\t\r\n\t\tfor i = 1, #l do\r\n\t\t\tif l[i] == element then return end\r\n\t\tend\r\n\t\tl[#l+1] = element\r\n\tend",
    "type": "function"
  }, {
    "id": 106,
    "text": "if not o[setname] then\r\n\t\t\to[setname] = {}\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "o[setname] = {}",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "local l = o[setname]",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "for i = 1, #l do\r\n\t\t\tif l[i] == element then return end\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 110,
    "text": "if l[i] == element then return end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "l[#l+1] = element",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function elements_of_set (o, setname)\r\n\t\tlocal l = o[setname]\r\n\t\tlocal i = l and #l+1 or 0\r\n\t\treturn function ()\r\n\t\t\ti = i - 1\r\n\t\t\tif i > 0 then return l[i] end\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 114,
    "text": "local i = l and #l+1 or 0",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "i = i - 1",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "if i > 0 then return l[i] end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function Controller:close (...)\r\n\t\tif not self.is_recording then\r\n\t\t\terror( \"Can not insert close in replay mode.\", 2 )\r\n\t\tend\r\n\t\tlocal action = self:get_last_action()\r\n\t\tfor _, close in ipairs{ ... } do\r\n\t\t\taction:add_close( close )\r\n\t\tend\r\n\t\treturn self -- for chaining\r\n\tend",
    "type": "function"
  }, {
    "id": 119,
    "text": "if not self.is_recording then\r\n\t\t\terror( \"Can not insert close in replay mode.\", 2 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "error( \"Can not insert close in replay mode.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "local action = self:get_last_action()",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "for _, close in ipairs{ ... } do\r\n\t\t\taction:add_close( close )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 123,
    "text": "action:add_close( close )",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function Controller:depend (...)\r\n\t\tif not self.is_recording then\r\n\t\t\terror( \"Can not add dependency in replay mode.\", 2 )\r\n\t\tend\r\n\t\tlocal action = self:get_last_action()\r\n\t\tfor _, dependency in ipairs{ ... } do\r\n\t\t\taction:add_depend( dependency )\r\n\t\tend\r\n\t\treturn self -- for chaining\r\n\tend",
    "type": "function"
  }, {
    "id": 126,
    "text": "if not self.is_recording then\r\n\t\t\terror( \"Can not add dependency in replay mode.\", 2 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "error( \"Can not add dependency in replay mode.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "for _, dependency in ipairs{ ... } do\r\n\t\t\taction:add_depend( dependency )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 129,
    "text": "action:add_depend( dependency )",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function Controller:error (value)\r\n\t\tif not self.is_recording then\r\n\t\t\terror( \"Error called during replay.\", 2 )\r\n\t\tend\r\n\t\tlocal action = self:get_last_action()\r\n\t\tif action.has_returnvalue or action.throws_error then\r\n\t\t\terror( \"Returns and/or Error called twice for same action.\", 2 )\r\n\t\tend\r\n\t\taction.throws_error = true\r\n\t\taction.errorvalue = value\r\n\t\treturn self -- for chaining\r\n\tend",
    "type": "function"
  }, {
    "id": 132,
    "text": "if not self.is_recording then\r\n\t\t\terror( \"Error called during replay.\", 2 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "error( \"Error called during replay.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "if action.has_returnvalue or action.throws_error then\r\n\t\t\terror( \"Returns and/or Error called twice for same action.\", 2 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "error( \"Returns and/or Error called twice for same action.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "action.throws_error = true",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "action.errorvalue = value",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function Controller:label (...)\r\n\tif not self.is_recording then\r\n\t\terror( \"Can not add labels in replay mode.\", 2 )\r\n\tend\r\n\tlocal action = self:get_last_action()\r\n\tfor _, label in ipairs{ ... } do\r\n\t\taction:add_label( label )\r\n\tend\r\n\treturn self -- for chaining\r\n\tend",
    "type": "function"
  }, {
    "id": 140,
    "text": "if not self.is_recording then\r\n\t\terror( \"Can not add labels in replay mode.\", 2 )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "error( \"Can not add labels in replay mode.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "for _, label in ipairs{ ... } do\r\n\t\taction:add_label( label )\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 143,
    "text": "action:add_label( label )",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function Controller:mock ()\r\n\t\tif not self.is_recording then\r\n\t\t\terror( \"New mock during replay.\", 2 )\r\n\t\tend\r\n\t\tlocal m = object( Mock.record )\r\n\t\tmock_controller_map[m] = self\r\n\t\treturn m\r\n\tend",
    "type": "function"
  }, {
    "id": 146,
    "text": "if not self.is_recording then\r\n\t\t\terror( \"New mock during replay.\", 2 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "error( \"New mock during replay.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "local m = object( Mock.record )",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "mock_controller_map[m] = self",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function Controller:new ()\r\n\t\tlocal mc = object( self )\r\n\t\tmc.actionlist   = {}\r\n\t\tmc.is_recording = true\r\n\t\treturn mc\r\n\tend",
    "type": "function"
  }, {
    "id": 152,
    "text": "local mc = object( self )",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "mc.actionlist   = {}",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "mc.is_recording = true",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function Controller:replay ()\r\n\t\tif not self.is_recording then\r\n\t\t\terror( \"Replay called twice.\", 2 )\r\n\t\tend\r\n\t\tself.is_recording = false\r\n\t\tfor m, mc in pairs( mock_controller_map ) do\r\n\t\t\tif mc == self then\r\n\t\t\t\tsetmetatable( m, Mock.replay )\r\n\t\t\tend\r\n\t\tend\r\n\t\tself:update_dependencies()\r\n\t\tself:assert_no_dependency_cycles()\r\n\tend",
    "type": "function"
  }, {
    "id": 157,
    "text": "if not self.is_recording then\r\n\t\t\terror( \"Replay called twice.\", 2 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "error( \"Replay called twice.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "self.is_recording = false",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "for m, mc in pairs( mock_controller_map ) do\r\n\t\t\tif mc == self then\r\n\t\t\t\tsetmetatable( m, Mock.replay )\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 161,
    "text": "if mc == self then\r\n\t\t\t\tsetmetatable( m, Mock.replay )\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "setmetatable( m, Mock.replay )",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "self:update_dependencies()",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "self:assert_no_dependency_cycles()",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function Controller:returns (...)\r\n\t\tif not self.is_recording then\r\n\t\t\terror( \"Returns called during replay.\", 2 )\r\n\t\tend\r\n\t\tlocal action = self:get_last_action()\r\n\t\tassert( not action.is_callable, \"lemock internal error\" )\r\n\t\tif not action.can_return then\r\n\t\t\terror( \"Previous action can not return anything.\", 2 )\r\n\t\tend\r\n\t\tif action.has_returnvalue or action.throws_error then\r\n\t\t\terror( \"Returns and/or Error called twice for same action.\", 2 )\r\n\t\tend\r\n\t\taction:set_returnvalue(...)\r\n\t\treturn self -- for chaining\r\n\tend",
    "type": "function"
  }, {
    "id": 167,
    "text": "if not self.is_recording then\r\n\t\t\terror( \"Returns called during replay.\", 2 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "error( \"Returns called during replay.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "assert( not action.is_callable, \"lemock internal error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "if not action.can_return then\r\n\t\t\terror( \"Previous action can not return anything.\", 2 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "error( \"Previous action can not return anything.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "action:set_returnvalue(...)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function Controller:times (min, max)\r\n\t\tif not self.is_recording then\r\n\t\t\terror( \"Can not set times in replay mode.\", 0 )\r\n\t\tend\r\n\t\tself:get_last_action():set_times( min, max )\r\n\t\treturn self -- for chaining\r\n\tend",
    "type": "function"
  }, {
    "id": 175,
    "text": "if not self.is_recording then\r\n\t\t\terror( \"Can not set times in replay mode.\", 0 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "error( \"Can not set times in replay mode.\", 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "self:get_last_action():set_times( min, max )",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function Controller:anytimes()    return self:times( 0, math.huge ) end",
    "type": "function"
  }, {
    "id": 180,
    "text": "function Controller:atleastonce() return self:times( 1, math.huge ) end",
    "type": "function"
  }, {
    "id": 181,
    "text": "function Controller:verify ()\r\n\t\tif self.is_recording then\r\n\t\t\terror( \"Verify called during record.\", 2 )\r\n\t\tend\r\n\t\tfor a in self:actions() do\r\n\t\t\ta:assert_satisfied()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 182,
    "text": "if self.is_recording then\r\n\t\t\terror( \"Verify called during record.\", 2 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "error( \"Verify called during record.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "for a in self:actions() do\r\n\t\t\ta:assert_satisfied()\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 185,
    "text": "a:assert_satisfied()",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function Controller:actions (q)\r\n\t\tlocal l = self.actionlist\r\n\t\tlocal i = 0\r\n\t\treturn function ()\r\n\t\t\ti = i + 1\r\n\t\t\treturn l[i]\r\n\t\tend\t\t\t\t\r\n\tend",
    "type": "function"
  }, {
    "id": 188,
    "text": "local l = self.actionlist",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "function Controller:add_action (a)\r\n\t\tassert( a ~= nil, \"lemock internal error\" ) -- breaks array property\r\n\t\ttable.insert( self.actionlist, a )\r\n\tend",
    "type": "function"
  }, {
    "id": 193,
    "text": "assert( a ~= nil, \"lemock internal error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "table.insert( self.actionlist, a )",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 196,
    "text": "function Controller:assert_no_dependency_cycles ()\r\n\t\tlocal function is_in_path (label, path)\r\n\t\t\tif not path then return false end -- is root\r\n\t\t\tfor _, l in ipairs( path ) do\r\n\t\t\t\tif l == label then return true end\r\n\t\t\tend\r\n\t\t\tif path.prev then return is_in_path( label, path.prev ) end\r\n\t\t\treturn false\r\n\t\tend\r\n\t\tlocal function can_block (action, node)\r\n\t\t\tfor _, label in ipairs( node ) do\r\n\t\t\t\tif action:has_label( label ) then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend\r\n\t\tlocal function step (action, path)\r\n\t\t\tlocal new_head\r\n\t\t\tfor label in action:depends() do\r\n\t\t\t\tif is_in_path( label, path ) then\r\n\t\t\t\t\terror( \"Detected dependency cycle\", 0 )\r\n\t\t\t\tend\r\n\t\t\t\t-- only create table if needed to reduce garbage\r\n\t\t\t\tif not new_head then new_head = { prev=path } end\r\n\t\t\t\tnew_head[#new_head+1] = label\r\n\t\t\tend\r\n\t\t\treturn new_head\r\n\t\tend\r\n\t\tlocal function search_depth_first (path)\r\n\t\t\tfor action in self:actions() do\r\n\t\t\t\tif can_block( action, path ) then\r\n\t\t\t\t\tlocal new_head = step( action, path )\r\n\t\t\t\t\tif new_head then\r\n\t\t\t\t\t\tsearch_depth_first( new_head )\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor action in self:actions() do\r\n\t\t\tlocal root = step( action, nil )\r\n\t\t\tif root then search_depth_first( root ) end\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 197,
    "text": "local function is_in_path (label, path)\r\n\t\t\tif not path then return false end -- is root\r\n\t\t\tfor _, l in ipairs( path ) do\r\n\t\t\t\tif l == label then return true end\r\n\t\t\tend\r\n\t\t\tif path.prev then return is_in_path( label, path.prev ) end\r\n\t\t\treturn false\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 198,
    "text": "if not path then return false end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "for _, l in ipairs( path ) do\r\n\t\t\t\tif l == label then return true end\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 200,
    "text": "if l == label then return true end",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "if path.prev then return is_in_path( label, path.prev ) end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "local function can_block (action, node)\r\n\t\t\tfor _, label in ipairs( node ) do\r\n\t\t\t\tif action:has_label( label ) then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 203,
    "text": "for _, label in ipairs( node ) do\r\n\t\t\t\tif action:has_label( label ) then return true end\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 204,
    "text": "if action:has_label( label ) then return true end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "local function step (action, path)\r\n\t\t\tlocal new_head\r\n\t\t\tfor label in action:depends() do\r\n\t\t\t\tif is_in_path( label, path ) then\r\n\t\t\t\t\terror( \"Detected dependency cycle\", 0 )\r\n\t\t\t\tend\r\n\t\t\t\t-- only create table if needed to reduce garbage\r\n\t\t\t\tif not new_head then new_head = { prev=path } end\r\n\t\t\t\tnew_head[#new_head+1] = label\r\n\t\t\tend\r\n\t\t\treturn new_head\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 206,
    "text": "local new_head",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "for label in action:depends() do\r\n\t\t\t\tif is_in_path( label, path ) then\r\n\t\t\t\t\terror( \"Detected dependency cycle\", 0 )\r\n\t\t\t\tend\r\n\t\t\t\t-- only create table if needed to reduce garbage\r\n\t\t\t\tif not new_head then new_head = { prev=path } end\r\n\t\t\t\tnew_head[#new_head+1] = label\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 208,
    "text": "if is_in_path( label, path ) then\r\n\t\t\t\t\terror( \"Detected dependency cycle\", 0 )\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "error( \"Detected dependency cycle\", 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "if not new_head then new_head = { prev=path } end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "new_head = { prev=path }",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "new_head[#new_head+1] = label",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "local function search_depth_first (path)\r\n\t\t\tfor action in self:actions() do\r\n\t\t\t\tif can_block( action, path ) then\r\n\t\t\t\t\tlocal new_head = step( action, path )\r\n\t\t\t\t\tif new_head then\r\n\t\t\t\t\t\tsearch_depth_first( new_head )\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 214,
    "text": "for action in self:actions() do\r\n\t\t\t\tif can_block( action, path ) then\r\n\t\t\t\t\tlocal new_head = step( action, path )\r\n\t\t\t\t\tif new_head then\r\n\t\t\t\t\t\tsearch_depth_first( new_head )\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 215,
    "text": "if can_block( action, path ) then\r\n\t\t\t\t\tlocal new_head = step( action, path )\r\n\t\t\t\t\tif new_head then\r\n\t\t\t\t\t\tsearch_depth_first( new_head )\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 216,
    "text": "local new_head = step( action, path )",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "if new_head then\r\n\t\t\t\t\t\tsearch_depth_first( new_head )\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "search_depth_first( new_head )",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "for action in self:actions() do\r\n\t\t\tlocal root = step( action, nil )\r\n\t\t\tif root then search_depth_first( root ) end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 220,
    "text": "local root = step( action, nil )",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "if root then search_depth_first( root ) end",
    "type": "statement:if"
  }, {
    "id": 222,
    "text": "search_depth_first( root )",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "local function is_in_path (label, path)\r\n\t\t\tif not path then return false end -- is root\r\n\t\t\tfor _, l in ipairs( path ) do\r\n\t\t\t\tif l == label then return true end\r\n\t\t\tend\r\n\t\t\tif path.prev then return is_in_path( label, path.prev ) end\r\n\t\t\treturn false\r\n\t\tend",
    "type": "function"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "local function can_block (action, node)\r\n\t\t\tfor _, label in ipairs( node ) do\r\n\t\t\t\tif action:has_label( label ) then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend",
    "type": "function"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "local function step (action, path)\r\n\t\t\tlocal new_head\r\n\t\t\tfor label in action:depends() do\r\n\t\t\t\tif is_in_path( label, path ) then\r\n\t\t\t\t\terror( \"Detected dependency cycle\", 0 )\r\n\t\t\t\tend\r\n\t\t\t\t-- only create table if needed to reduce garbage\r\n\t\t\t\tif not new_head then new_head = { prev=path } end\r\n\t\t\t\tnew_head[#new_head+1] = label\r\n\t\t\tend\r\n\t\t\treturn new_head\r\n\t\tend",
    "type": "function"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "local function search_depth_first (path)\r\n\t\t\tfor action in self:actions() do\r\n\t\t\t\tif can_block( action, path ) then\r\n\t\t\t\t\tlocal new_head = step( action, path )\r\n\t\t\t\t\tif new_head then\r\n\t\t\t\t\t\tsearch_depth_first( new_head )\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 231,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 232,
    "text": "function Controller:close_actions( ... ) -- takes iterator\r\n\t\tfor label in ... do\r\n\t\t\tfor candidate in self:actions() do\r\n\t\t\t\tif candidate:has_label( label ) then\r\n\t\t\t\t\tif not candidate:is_satisfied() then\r\n\t\t\t\t\t\terror( \"Closes unsatisfied action: \"..candidate:tostring(), 0 )\r\n\t\t\t\t\tend\r\n\t\t\t\t\tcandidate.is_closed = true\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 233,
    "text": "for label in ... do\r\n\t\t\tfor candidate in self:actions() do\r\n\t\t\t\tif candidate:has_label( label ) then\r\n\t\t\t\t\tif not candidate:is_satisfied() then\r\n\t\t\t\t\t\terror( \"Closes unsatisfied action: \"..candidate:tostring(), 0 )\r\n\t\t\t\t\tend\r\n\t\t\t\t\tcandidate.is_closed = true\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 234,
    "text": "for candidate in self:actions() do\r\n\t\t\t\tif candidate:has_label( label ) then\r\n\t\t\t\t\tif not candidate:is_satisfied() then\r\n\t\t\t\t\t\terror( \"Closes unsatisfied action: \"..candidate:tostring(), 0 )\r\n\t\t\t\t\tend\r\n\t\t\t\t\tcandidate.is_closed = true\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 235,
    "text": "if candidate:has_label( label ) then\r\n\t\t\t\t\tif not candidate:is_satisfied() then\r\n\t\t\t\t\t\terror( \"Closes unsatisfied action: \"..candidate:tostring(), 0 )\r\n\t\t\t\t\tend\r\n\t\t\t\t\tcandidate.is_closed = true\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "if not candidate:is_satisfied() then\r\n\t\t\t\t\t\terror( \"Closes unsatisfied action: \"..candidate:tostring(), 0 )\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 237,
    "text": "error( \"Closes unsatisfied action: \"..candidate:tostring(), 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "candidate.is_closed = true",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 240,
    "text": "function Controller:get_last_action ()\r\n\t\tlocal l = self.actionlist\r\n\t\tif #l == 0 then\r\n\t\t\terror( \"No action is recorded yet.\", 0 )\r\n\t\tend\r\n\t\treturn l[#l]\r\n\tend",
    "type": "function"
  }, {
    "id": 241,
    "text": "if #l == 0 then\r\n\t\t\terror( \"No action is recorded yet.\", 0 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "error( \"No action is recorded yet.\", 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 244,
    "text": "function Controller:lookup (actual)\r\n\t\tfor action in self:actions() do\r\n\t\t\tif action:match( actual ) then\r\n\t\t\t\treturn action\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n-- ../src/main.nw:111\r\n\tlocal expected = {}\r\n\tfor _, a in ipairs( self.actionlist ) do\r\n\t\tif a:is_expected() and not a.is_callable then\r\n\t\t\texpected[#expected+1] = a:tostring()\r\n\t\tend\r\n\tend\r\n\ttable.sort( expected )\r\n\tif #expected == 0 then\r\n\t\texpected[1] = \"(Nothing)\"\r\n\tend\r\n-- ../src/main.nw:95\r\n\t\terror( sfmt( \"Unexpected action %s, expected:\\n%s\\n\"\r\n\t\t             , actual:tostring()\r\n\t\t             , table.concat(expected,'\\n')\r\n\t\t       )\r\n\t\t       , 0\r\n\t\t)\r\n\tend",
    "type": "function"
  }, {
    "id": 245,
    "text": "for action in self:actions() do\r\n\t\t\tif action:match( actual ) then\r\n\t\t\t\treturn action\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 246,
    "text": "if action:match( actual ) then\r\n\t\t\t\treturn action\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "local expected = {}",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "for _, a in ipairs( self.actionlist ) do\r\n\t\tif a:is_expected() and not a.is_callable then\r\n\t\t\texpected[#expected+1] = a:tostring()\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 249,
    "text": "if a:is_expected() and not a.is_callable then\r\n\t\t\texpected[#expected+1] = a:tostring()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 250,
    "text": "expected[#expected+1] = a:tostring()",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "table.sort( expected )",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "if #expected == 0 then\r\n\t\texpected[1] = \"(Nothing)\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 253,
    "text": "expected[1] = \"(Nothing)\"",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "error( sfmt( \"Unexpected action %s, expected:\\n%s\\n\"\r\n\t\t             , actual:tostring()\r\n\t\t             , table.concat(expected,'\\n')\r\n\t\t       )\r\n\t\t       , 0\r\n\t\t)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function Controller:make_callable (action)\r\n\t\tif action.has_returnvalue then\r\n\t\t\terror( \"Can not call \"..action.key..\". It has a returnvalue.\", 0 )\r\n\t\tend\r\n\t\taction.is_callable = true\r\n\t\taction.min_replays = 0\r\n\t\taction.max_replays = math.huge\r\n\tend",
    "type": "function"
  }, {
    "id": 257,
    "text": "if action.has_returnvalue then\r\n\t\t\terror( \"Can not call \"..action.key..\". It has a returnvalue.\", 0 )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "error( \"Can not call \"..action.key..\". It has a returnvalue.\", 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "action.is_callable = true",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "action.min_replays = 0",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "action.max_replays = math.huge",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function Controller:new ()\r\n\t\tlocal mc = object( self )\r\n\t\tmc.actionlist   = {}\r\n\t\tmc.is_recording = true\r\n\t\treturn mc\r\n\tend",
    "type": "function"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function Controller:replay_action ( action )\r\n\t\tassert( action:is_expected(), \"lemock internal error\" )\r\n\t\tassert( action.replay_count < action.max_replays, \"lemock internal error\" )\r\n\t\tlocal was_satisfied = action:is_satisfied()\r\n\t\taction.replay_count = action.replay_count + 1\r\n\t\tif not was_satisfied and action.labellist and action:is_satisfied() then\r\n\t\t\tself:update_dependencies()\r\n\t\tend\r\n\t\tif action.closelist then\r\n\t\t\tself:close_actions( action:closes() )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 266,
    "text": "assert( action:is_expected(), \"lemock internal error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "assert( action.replay_count < action.max_replays, \"lemock internal error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "local was_satisfied = action:is_satisfied()",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "action.replay_count = action.replay_count + 1",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "if not was_satisfied and action.labellist and action:is_satisfied() then\r\n\t\t\tself:update_dependencies()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 271,
    "text": "if action.closelist then\r\n\t\t\tself:close_actions( action:closes() )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "self:close_actions( action:closes() )",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "function Controller:update_dependencies ()\r\n\t\tlocal blocked = {}\r\n\t\tfor action in self:actions() do\r\n\t\t\tfor label in action:blocks() do\r\n\t\t\t\tblocked[label] = true\r\n\t\t\tend\r\n\t\tend\r\n\t\tlocal function is_blocked (action)\r\n\t\t\tfor label in action:depends() do\r\n\t\t\t\tif blocked[label] then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend\r\n\t\tfor action in self:actions() do\r\n\t\t\taction.is_blocked = is_blocked( action )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 275,
    "text": "local blocked = {}",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "for action in self:actions() do\r\n\t\t\tfor label in action:blocks() do\r\n\t\t\t\tblocked[label] = true\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 277,
    "text": "for label in action:blocks() do\r\n\t\t\t\tblocked[label] = true\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 278,
    "text": "blocked[label] = true",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "local function is_blocked (action)\r\n\t\t\tfor label in action:depends() do\r\n\t\t\t\tif blocked[label] then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 280,
    "text": "for label in action:depends() do\r\n\t\t\t\tif blocked[label] then return true end\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 281,
    "text": "if blocked[label] then return true end",
    "type": "statement:if"
  }, {
    "id": 282,
    "text": "for action in self:actions() do\r\n\t\t\taction.is_blocked = is_blocked( action )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 283,
    "text": "action.is_blocked = is_blocked( action )",
    "type": "statement:assign"
  }, {
    "id": 284,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 285,
    "text": "local function is_blocked (action)\r\n\t\t\tfor label in action:depends() do\r\n\t\t\t\tif blocked[label] then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend",
    "type": "function"
  }, {
    "id": 286,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 287,
    "text": "function Action.generic:add_close (label)\r\n\t\tadd_to_set( self, 'closelist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 288,
    "text": "add_to_set( self, 'closelist', label )",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 290,
    "text": "function Action.generic:add_depend (d)\r\n\t\tadd_to_set( self, 'dependlist', d )\r\n\tend",
    "type": "function"
  }, {
    "id": 291,
    "text": "add_to_set( self, 'dependlist', d )",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 293,
    "text": "function Action.generic:add_label (label)\r\n\t\tadd_to_set( self, 'labellist', label )\r\n\tend",
    "type": "function"
  }, {
    "id": 294,
    "text": "add_to_set( self, 'labellist', label )",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 296,
    "text": "function Action.generic:assert_satisfied ()\r\n\t\tassert( self.replay_count <= self.max_replays, \"lemock internal error\" )\r\n\t\tif not (\r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:340\r\n                                  ) then\r\n\t\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 297,
    "text": "assert( self.replay_count <= self.max_replays, \"lemock internal error\" )",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "if not (\r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:340\r\n                                  ) then\r\n\t\t\terror( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 299,
    "text": "error( sfmt( \"Wrong replay count %d (expected %d..%d) for %s\"\r\n\t\t\t             , self.replay_count\r\n\t\t\t             , self.min_replays, self.max_replays\r\n\t\t\t             , self:tostring()\r\n\t\t\t       )\r\n\t\t\t       , 0\r\n\t\t\t)",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "function Action.generic:blocks ()\r\n\t\tif self:is_satisfied() then\r\n\t\t\treturn function () end\r\n\t\tend\r\n\t\treturn elements_of_set( self, 'labellist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 302,
    "text": "if self:is_satisfied() then\r\n\t\t\treturn function () end\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 303,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 304,
    "text": "function Action.generic:closes ()\r\n\t\treturn elements_of_set( self, 'closelist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 305,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 306,
    "text": "function Action.generic:depends ()\r\n\t\treturn elements_of_set( self, 'dependlist' )\r\n\tend",
    "type": "function"
  }, {
    "id": 307,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 308,
    "text": "function Action.generic:has_label (l)\r\n\t\tfor x in elements_of_set( self, 'labellist' ) do\r\n\t\t\tif x == l then return true end\r\n\t\tend\r\n\t\treturn false\r\n\tend",
    "type": "function"
  }, {
    "id": 309,
    "text": "for x in elements_of_set( self, 'labellist' ) do\r\n\t\t\tif x == l then return true end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 310,
    "text": "if x == l then return true end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 312,
    "text": "function Action.generic:is_expected ()\r\n\t\treturn self.replay_count < self.max_replays\r\n\t\t   and not self.is_blocked\r\n\t\t   and not self.is_closed\r\n\tend",
    "type": "function"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function Action.generic:is_satisfied ()\r\n\t\treturn \r\n-- ../src/main.nw:330\r\n\tself.min_replays <= self.replay_count\r\n\r\n-- ../src/main.nw:335\r\n\tend",
    "type": "function"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "function Action.generic:match (key)\r\n\t\tif getmetatable(self) ~= getmetatable(key)  then return false end\r\n\t\tif self.mock ~= key.mock                    then return false end\r\n\t\treturn self:is_expected()\r\n\tend",
    "type": "function"
  }, {
    "id": 317,
    "text": "if getmetatable(self) ~= getmetatable(key)  then return false end",
    "type": "statement:if"
  }, {
    "id": 318,
    "text": "if self.mock ~= key.mock                    then return false end",
    "type": "statement:if"
  }, {
    "id": 319,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 320,
    "text": "function Action.generic:new (mock)\r\n\t\tlocal a = object( self )\r\n\t\ta.mock         = mock\r\n\t\ta.replay_count = 0\r\n\t\ta.min_replays  = 1\r\n\t\ta.max_replays  = 1\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 321,
    "text": "local a = object( self )",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "a.mock         = mock",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "a.replay_count = 0",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "a.min_replays  = 1",
    "type": "statement:assign"
  }, {
    "id": 325,
    "text": "a.max_replays  = 1",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 327,
    "text": "function Action.generic:set_times (a, b)\r\n\t\tmin = a or 1\r\n\t\tmax = b or min\r\n\t\tmin, max = tonumber(min), tonumber(max)\r\n\t\tif (not min) or (not max) or (min >= math.huge)\r\n\t\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )\r\n\t\tend\r\n\t\tself.min_replays = min\r\n\t\tself.max_replays = max\r\n\tend",
    "type": "function"
  }, {
    "id": 328,
    "text": "min = a or 1",
    "type": "statement:assign"
  }, {
    "id": 329,
    "text": "max = b or min",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "min, max = tonumber(min), tonumber(max)",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "if (not min) or (not max) or (min >= math.huge)\r\n\t\t             or (min ~= min) or (max ~= max) -- NaN\r\n\t\t             or (min < 0) or (max <= 0) or (min > max) then\r\n\t\t\terror( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 332,
    "text": "error( sfmt( \"Unrealistic time arguments (%s, %s)\"\r\n\t\t\t           , qtostring( min )\r\n\t\t\t           , qtostring( max )\r\n\t\t\t           )\r\n\t\t\t     , 0\r\n\t\t\t     )",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "self.min_replays = min",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "self.max_replays = max",
    "type": "statement:assign"
  }, {
    "id": 335,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 336,
    "text": "function Action.generic_call:get_returnvalue ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn self.returnvalue:unpack()\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 337,
    "text": "if self.has_returnvalue then\r\n\t\t\treturn self.returnvalue:unpack()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 338,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 339,
    "text": "function Action.generic_call:set_returnvalue (...)\r\n\t\tself.returnvalue = Argv:new(...)\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 340,
    "text": "self.returnvalue = Argv:new(...)",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "self.has_returnvalue = true",
    "type": "statement:assign"
  }, {
    "id": 342,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 343,
    "text": "function Action.generic_call:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif not self.argv:equal( q.argv )        then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 344,
    "text": "if not Action.generic.match( self, q )  then return false end",
    "type": "statement:if"
  }, {
    "id": 345,
    "text": "if not self.argv:equal( q.argv )        then return false end",
    "type": "statement:if"
  }, {
    "id": 346,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 347,
    "text": "function Action.generic_call:new (m, ...)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.argv   = Argv:new(...)\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 348,
    "text": "local a = Action.generic.new( self, m )",
    "type": "statement:localassign"
  }, {
    "id": 349,
    "text": "a.argv   = Argv:new(...)",
    "type": "statement:assign"
  }, {
    "id": 350,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 351,
    "text": "function Action.call:match (q)\r\n\t\tif not Action.generic_call.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                         then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 352,
    "text": "if not Action.generic_call.match( self, q )  then return false end",
    "type": "statement:if"
  }, {
    "id": 353,
    "text": "if self.key ~= q.key                         then return false end",
    "type": "statement:if"
  }, {
    "id": 354,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 355,
    "text": "function Action.call:new (m, key, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 356,
    "text": "local a = Action.generic_call.new( self, m, ... )",
    "type": "statement:localassign"
  }, {
    "id": 357,
    "text": "a.key = key",
    "type": "statement:assign"
  }, {
    "id": 358,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 359,
    "text": "function Action.call:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 360,
    "text": "if self.has_returnvalue then\r\n\t\t\treturn sfmt( \"call %s(%s) => %s\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"call %s(%s)\"\r\n\t\t\t             , tostring(self.key)\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 361,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 362,
    "text": "function Action.index:get_returnvalue ()\r\n\t\treturn self.returnvalue\r\n\tend",
    "type": "function"
  }, {
    "id": 363,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 364,
    "text": "function Action.index:set_returnvalue (v)\r\n\t\tself.returnvalue = v\r\n\t\tself.has_returnvalue = true\r\n\tend",
    "type": "function"
  }, {
    "id": 365,
    "text": "self.returnvalue = v",
    "type": "statement:assign"
  }, {
    "id": 366,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 367,
    "text": "function Action.index:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 368,
    "text": "if self.key ~= q.key                    then return false end",
    "type": "statement:if"
  }, {
    "id": 369,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 370,
    "text": "function Action.index:new (m, key)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key = key\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "function Action.index:tostring ()\r\n\t\tlocal key = 'index '..tostring( self.key )\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"index %s => %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t             , qtostring( self.returnvalue )\r\n\t\t\t       )\r\n\t\telseif self.is_callable then\r\n\t\t\treturn sfmt( \"index %s()\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"index %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 373,
    "text": "local key = 'index '..tostring( self.key )",
    "type": "statement:localassign"
  }, {
    "id": 374,
    "text": "if self.has_returnvalue then\r\n\t\t\treturn sfmt( \"index %s => %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t             , qtostring( self.returnvalue )\r\n\t\t\t       )\r\n\t\telseif self.is_callable then\r\n\t\t\treturn sfmt( \"index %s()\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"index %s\"\r\n\t\t\t             , tostring( self.key )\r\n\t\t\t       )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "function Action.newindex:match (q)\r\n\t\tif not Action.generic.match( self, q )  then return false end\r\n\t\tif self.key ~= q.key                    then return false end\r\n\t\tif not value_equal( self.val, q.val )\r\n\t\t   and self.val ~= Argv.ANYARG\r\n\t\t   and q.val    ~= Argv.ANYARG          then return false end\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 377,
    "text": "if not value_equal( self.val, q.val )\r\n\t\t   and self.val ~= Argv.ANYARG\r\n\t\t   and q.val    ~= Argv.ANYARG          then return false end",
    "type": "statement:if"
  }, {
    "id": 378,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 379,
    "text": "function Action.newindex:new (m, key, val)\r\n\t\tlocal a = Action.generic.new( self, m )\r\n\t\ta.key    = key\r\n\t\ta.val    = val\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 380,
    "text": "a.key    = key",
    "type": "statement:assign"
  }, {
    "id": 381,
    "text": "a.val    = val",
    "type": "statement:assign"
  }, {
    "id": 382,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 383,
    "text": "function Action.newindex:tostring ()\r\n\t\treturn sfmt( \"newindex %s = %s\"\r\n\t\t             , tostring(self.key)\r\n\t\t             , qtostring(self.val)\r\n\t\t       )\r\n\tend",
    "type": "function"
  }, {
    "id": 384,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 385,
    "text": "function Action.selfcall:match (q)\r\n\t\treturn Action.generic_call.match( self, q )\r\n\tend",
    "type": "function"
  }, {
    "id": 386,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 387,
    "text": "function Action.selfcall:new (m, ...)\r\n\t\tlocal a = Action.generic_call.new( self, m, ... )\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 388,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 389,
    "text": "function Action.selfcall:tostring ()\r\n\t\tif self.has_returnvalue then\r\n\t\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 390,
    "text": "if self.has_returnvalue then\r\n\t\t\treturn sfmt( \"selfcall (%s) => %s\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t             , self.returnvalue:tostring()\r\n\t\t\t       )\r\n\t\telse\r\n\t\t\treturn sfmt( \"selfcall (%s)\"\r\n\t\t\t             , self.argv:tostring()\r\n\t\t\t       )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 391,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 392,
    "text": "function A:tostring () return '<dummy>' end",
    "type": "function"
  }, {
    "id": 393,
    "text": "function setup ()\r\n\t\tmc = Controller:new()\r\n\tend",
    "type": "function"
  }, {
    "id": 394,
    "text": "mc = Controller:new()",
    "type": "statement:assign"
  }, {
    "id": 395,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 396,
    "text": "function actions_dont_iterate_empty_list_test ()\r\n\t\tfor a in mc:actions() do\r\n\t\t\tfail( \"iterates on empty list\" )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 397,
    "text": "for a in mc:actions() do\r\n\t\t\tfail( \"iterates on empty list\" )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 398,
    "text": "fail( \"iterates on empty list\" )",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 400,
    "text": "function actions_iterate_over_entire_list_exactly_once_test ()\r\n\t\tlocal l = { {},{},{} }\r\n\t\tfor _, a in ipairs( l ) do\r\n\t\t\tmc:add_action( a )\r\n\t\tend\r\n\t\tfor a in mc:actions() do\r\n\t\t\tassert_nil( a.check )\r\n\t\t\ta.check = true\r\n\t\tend\r\n\t\tfor _, a in ipairs( l ) do\r\n\t\t\tassert_true( a.check )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 401,
    "text": "local l = { {},{},{} }",
    "type": "statement:localassign"
  }, {
    "id": 402,
    "text": "for _, a in ipairs( l ) do\r\n\t\t\tmc:add_action( a )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 403,
    "text": "mc:add_action( a )",
    "type": "statement:functioncall"
  }, {
    "id": 404,
    "text": "for a in mc:actions() do\r\n\t\t\tassert_nil( a.check )\r\n\t\t\ta.check = true\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 405,
    "text": "assert_nil( a.check )",
    "type": "statement:functioncall"
  }, {
    "id": 406,
    "text": "a.check = true",
    "type": "statement:assign"
  }, {
    "id": 407,
    "text": "for _, a in ipairs( l ) do\r\n\t\t\tassert_true( a.check )\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 408,
    "text": "assert_true( a.check )",
    "type": "statement:functioncall"
  }, {
    "id": 409,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 410,
    "text": "function add_action_at_the_end_test ()\r\n\t\tmc:add_action( 7 )\r\n\t\tmc:add_action( mc )\r\n\t\tassert_equal( 7, mc.actionlist[1] )\r\n\t\tassert_equal( mc, mc.actionlist[2] )\r\n\tend",
    "type": "function"
  }, {
    "id": 411,
    "text": "mc:add_action( 7 )",
    "type": "statement:functioncall"
  }, {
    "id": 412,
    "text": "mc:add_action( mc )",
    "type": "statement:functioncall"
  }, {
    "id": 413,
    "text": "assert_equal( 7, mc.actionlist[1] )",
    "type": "statement:functioncall"
  }, {
    "id": 414,
    "text": "assert_equal( mc, mc.actionlist[2] )",
    "type": "statement:functioncall"
  }, {
    "id": 415,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 416,
    "text": "function get_last_action_returns_last_element_test ()\r\n\t\tlocal l = { 'a', 'foo', 17 }\r\n\t\tfor i = 1, #l do\r\n\t\t\tmc:add_action( l[i] )\r\n\t\t\tlocal res = mc:get_last_action()\r\n\t\t\tassert_equal( l[i], res )\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 417,
    "text": "local l = { 'a', 'foo', 17 }",
    "type": "statement:localassign"
  }, {
    "id": 418,
    "text": "for i = 1, #l do\r\n\t\t\tmc:add_action( l[i] )\r\n\t\t\tlocal res = mc:get_last_action()\r\n\t\t\tassert_equal( l[i], res )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 419,
    "text": "mc:add_action( l[i] )",
    "type": "statement:functioncall"
  }, {
    "id": 420,
    "text": "local res = mc:get_last_action()",
    "type": "statement:localassign"
  }, {
    "id": 421,
    "text": "assert_equal( l[i], res )",
    "type": "statement:functioncall"
  }, {
    "id": 422,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 423,
    "text": "function get_last_action_fails_on_empty_list_test ()\r\n\t\tlocal ok, err = pcall( function() mc:get_last_action() end )\r\n\t\tassert_false( ok, \"Found last action in empty list\" )\r\n\t\tassert_match( \"No action is recorded yet\", err )\r\n\tend",
    "type": "function"
  }, {
    "id": 424,
    "text": "local ok, err = pcall( function() mc:get_last_action() end )",
    "type": "statement:localassign"
  }, {
    "id": 425,
    "text": "mc:get_last_action()",
    "type": "statement:functioncall"
  }, {
    "id": 426,
    "text": "assert_false( ok, \"Found last action in empty list\" )",
    "type": "statement:functioncall"
  }, {
    "id": 427,
    "text": "assert_match( \"No action is recorded yet\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 428,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 429,
    "text": "function label_test ()\r\n\t\tmc:add_action( A:new() )\r\n\t\tmc:label( 'a', 'b' ):label( 'c', 'b' )\r\n\t\tlocal a = mc:get_last_action()\r\n\t\tlocal seen = {}\r\n\t\tfor l in a:blocks() do\r\n\t\t\tseen[l] = true\r\n\t\tend\r\n\t\tassert_true( seen['a'] )\r\n\t\tassert_true( seen['b'] )\r\n\t\tassert_true( seen['c'] )\r\n\t\tassert_nil(  seen['d'] )\r\n\tend",
    "type": "function"
  }, {
    "id": 430,
    "text": "mc:add_action( A:new() )",
    "type": "statement:functioncall"
  }, {
    "id": 431,
    "text": "mc:label( 'a', 'b' ):label( 'c', 'b' )",
    "type": "statement:functioncall"
  }, {
    "id": 432,
    "text": "local a = mc:get_last_action()",
    "type": "statement:localassign"
  }, {
    "id": 433,
    "text": "local seen = {}",
    "type": "statement:localassign"
  }, {
    "id": 434,
    "text": "for l in a:blocks() do\r\n\t\t\tseen[l] = true\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 435,
    "text": "seen[l] = true",
    "type": "statement:assign"
  }, {
    "id": 436,
    "text": "assert_true( seen['a'] )",
    "type": "statement:functioncall"
  }, {
    "id": 437,
    "text": "assert_true( seen['b'] )",
    "type": "statement:functioncall"
  }, {
    "id": 438,
    "text": "assert_true( seen['c'] )",
    "type": "statement:functioncall"
  }, {
    "id": 439,
    "text": "assert_nil(  seen['d'] )",
    "type": "statement:functioncall"
  }, {
    "id": 440,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 441,
    "text": "function lookup_returns_first_matching_action_test ()\r\n\t\tlocal Fake_action\r\n\t\t\r\n-- ../src/misc.nw:12\r\n\tFake_action = class()\r\n\tfunction Fake_action:new (x)\r\n\t\tlocal a = object(Fake_action)\r\n\t\ta.x = x\r\n\t\treturn a\r\n\tend\r\n\tfunction Fake_action:match (q)\r\n\t\treturn self.x < q.x\r\n\tend\r\n\tfunction Fake_action:is_expected ()\r\n\t\treturn true\r\n\tend\r\n\tfunction Fake_action:tostring ()\r\n\t\treturn '<faked action>'\r\n\tend\r\n\tfunction Fake_action:blocks ()\r\n\t\treturn function () end\r\n\tend\r\n\tFake_action.depends = Fake_action.blocks\r\n-- ../src/main.nw:74\r\n\t\tlocal a1 = Fake_action:new(1)\r\n\t\tlocal a2 = Fake_action:new(2)\r\n\t\tlocal a3 = Fake_action:new(1)\r\n\t\tlocal ok, err = pcall( function() mc:lookup( a1 ) end )\r\n\t\tassert_false( ok, \"match in empty list\" )\r\n\t\tassert_match( \"Unexpected action <faked action>\", err )\r\n\t\tmc:add_action( a1 ) mc:add_action( a2 ) mc:add_action( a3 )\r\n\t\tlocal ok, err = pcall( function() mc:lookup( a1 ) end )\r\n\t\tassert_false( ok, \"should not match any action\" )\r\n\t\tassert_match( \"Unexpected action <faked action>\", err )\r\n\t\tassert_equal( a1, mc:lookup( a2 ), \"did not find first match\" )\r\n\tend",
    "type": "function"
  }, {
    "id": 442,
    "text": "local Fake_action",
    "type": "statement:localassign"
  }, {
    "id": 443,
    "text": "Fake_action = class()",
    "type": "statement:assign"
  }, {
    "id": 444,
    "text": "function Fake_action:new (x)\r\n\t\tlocal a = object(Fake_action)\r\n\t\ta.x = x\r\n\t\treturn a\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 445,
    "text": "local a = object(Fake_action)",
    "type": "statement:localassign"
  }, {
    "id": 446,
    "text": "a.x = x",
    "type": "statement:assign"
  }, {
    "id": 447,
    "text": "function Fake_action:match (q)\r\n\t\treturn self.x < q.x\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 448,
    "text": "function Fake_action:is_expected ()\r\n\t\treturn true\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 449,
    "text": "function Fake_action:tostring ()\r\n\t\treturn '<faked action>'\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 450,
    "text": "function Fake_action:blocks ()\r\n\t\treturn function () end\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 451,
    "text": "Fake_action.depends = Fake_action.blocks",
    "type": "statement:assign"
  }, {
    "id": 452,
    "text": "local a1 = Fake_action:new(1)",
    "type": "statement:localassign"
  }, {
    "id": 453,
    "text": "local a2 = Fake_action:new(2)",
    "type": "statement:localassign"
  }, {
    "id": 454,
    "text": "local a3 = Fake_action:new(1)",
    "type": "statement:localassign"
  }, {
    "id": 455,
    "text": "local ok, err = pcall( function() mc:lookup( a1 ) end )",
    "type": "statement:localassign"
  }, {
    "id": 456,
    "text": "mc:lookup( a1 )",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "assert_false( ok, \"match in empty list\" )",
    "type": "statement:functioncall"
  }, {
    "id": 458,
    "text": "assert_match( \"Unexpected action <faked action>\", err )",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "mc:add_action( a1 )",
    "type": "statement:functioncall"
  }, {
    "id": 460,
    "text": "mc:add_action( a2 )",
    "type": "statement:functioncall"
  }, {
    "id": 461,
    "text": "mc:add_action( a3 )",
    "type": "statement:functioncall"
  }, {
    "id": 462,
    "text": "assert_false( ok, \"should not match any action\" )",
    "type": "statement:functioncall"
  }, {
    "id": 463,
    "text": "assert_equal( a1, mc:lookup( a2 ), \"did not find first match\" )",
    "type": "statement:functioncall"
  }, {
    "id": 464,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 465,
    "text": "function Fake_action:new (x)\r\n\t\tlocal a = object(Fake_action)\r\n\t\ta.x = x\r\n\t\treturn a\r\n\tend",
    "type": "function"
  }, {
    "id": 466,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 467,
    "text": "function Fake_action:match (q)\r\n\t\treturn self.x < q.x\r\n\tend",
    "type": "function"
  }, {
    "id": 468,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 469,
    "text": "function Fake_action:is_expected ()\r\n\t\treturn true\r\n\tend",
    "type": "function"
  }, {
    "id": 470,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 471,
    "text": "function Fake_action:tostring ()\r\n\t\treturn '<faked action>'\r\n\tend",
    "type": "function"
  }, {
    "id": 472,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 473,
    "text": "function Fake_action:blocks ()\r\n\t\treturn function () end\r\n\tend",
    "type": "function"
  }, {
    "id": 474,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 475,
    "text": "function replay_test ()\r\n\t\tassert_true( mc.is_recording )\r\n\t\tmc:replay()\r\n\t\tassert_false( mc.is_recording )\r\n\tend",
    "type": "function"
  }, {
    "id": 476,
    "text": "assert_true( mc.is_recording )",
    "type": "statement:functioncall"
  }, {
    "id": 477,
    "text": "mc:replay()",
    "type": "statement:functioncall"
  }, {
    "id": 478,
    "text": "assert_false( mc.is_recording )",
    "type": "statement:functioncall"
  }, {
    "id": 479,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 480,
    "text": "function replay_action_test ()\r\n\t\tlocal a = A:new()\r\n\t\tmc:add_action( a )\r\n\t\tassert_true( a:is_expected() )\r\n\t\tassert_false( a:is_satisfied() )\r\n\t\tmc:replay_action( a )\r\n\t\tassert_false( a:is_expected() )\r\n\t\tassert_true( a:is_satisfied() )\r\n\t\tassert_equal( 1, a.replay_count )\r\n\tend",
    "type": "function"
  }, {
    "id": 481,
    "text": "local a = A:new()",
    "type": "statement:localassign"
  }, {
    "id": 482,
    "text": "assert_true( a:is_expected() )",
    "type": "statement:functioncall"
  }, {
    "id": 483,
    "text": "assert_false( a:is_satisfied() )",
    "type": "statement:functioncall"
  }, {
    "id": 484,
    "text": "mc:replay_action( a )",
    "type": "statement:functioncall"
  }, {
    "id": 485,
    "text": "assert_false( a:is_expected() )",
    "type": "statement:functioncall"
  }, {
    "id": 486,
    "text": "assert_true( a:is_satisfied() )",
    "type": "statement:functioncall"
  }, {
    "id": 487,
    "text": "assert_equal( 1, a.replay_count )",
    "type": "statement:functioncall"
  }, {
    "id": 488,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 489,
    "text": "function ()\r\n\t\t\ti = i - 1\r\n\t\t\tif i > 0 then return l[i] end\r\n\t\tend",
    "type": "function"
  }, {
    "id": 490,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 491,
    "text": "function ()\r\n\t\t\ti = i + 1\r\n\t\t\treturn l[i]\r\n\t\tend",
    "type": "function"
  }, {
    "id": 492,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 493,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 494,
    "text": "function() mc:get_last_action() end",
    "type": "function"
  }, {
    "id": 495,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 496,
    "text": "function() mc:lookup( a1 ) end",
    "type": "function"
  }, {
    "id": 497,
    "text": "function() mc:lookup( a1 ) end",
    "type": "function"
  }, {
    "id": 498,
    "text": "",
    "type": "function container"
  }, {
    "id": 499,
    "text": "sfmt",
    "type": "global function"
  }, {
    "id": 500,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 501,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 502,
    "text": "Action.generic.match",
    "type": "global function"
  }, {
    "id": 503,
    "text": "fail",
    "type": "global function"
  }, {
    "id": 504,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 505,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 506,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 507,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 508,
    "text": "module",
    "type": "global function"
  }, {
    "id": 509,
    "text": "Action.generic_call.new",
    "type": "global function"
  }, {
    "id": 510,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 511,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 512,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 513,
    "text": "error",
    "type": "global function"
  }, {
    "id": 514,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 515,
    "text": "type",
    "type": "global function"
  }, {
    "id": 516,
    "text": "Action.generic_call.match",
    "type": "global function"
  }, {
    "id": 517,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 518,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 519,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 520,
    "text": "Action.generic.new",
    "type": "global function"
  }, {
    "id": 521,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 522,
    "text": "assert_match",
    "type": "global function"
  }, {
    "id": 523,
    "text": "value_equal",
    "type": "global function"
  }, {
    "id": 524,
    "text": "require",
    "type": "global function"
  }, {
    "id": 525,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 526,
    "text": "",
    "type": "global variable"
  }, {
    "id": 527,
    "text": "",
    "type": "global variable"
  }, {
    "id": 528,
    "text": "",
    "type": "global variable"
  }, {
    "id": 529,
    "text": "",
    "type": "global variable"
  }, {
    "id": 530,
    "text": "",
    "type": "variable container"
  }, {
    "id": 531,
    "text": "",
    "type": "require container"
  }, {
    "id": 532,
    "text": "",
    "type": "local variable"
  }, {
    "id": 533,
    "text": "",
    "type": "local variable"
  }, {
    "id": 534,
    "text": "",
    "type": "local variable"
  }, {
    "id": 535,
    "text": "",
    "type": "local variable"
  }, {
    "id": 536,
    "text": "",
    "type": "local variable"
  }, {
    "id": 537,
    "text": "",
    "type": "local variable"
  }, {
    "id": 538,
    "text": "",
    "type": "local variable"
  }, {
    "id": 539,
    "text": "",
    "type": "n/a"
  }, {
    "id": 540,
    "text": "",
    "type": "local variable"
  }, {
    "id": 541,
    "text": "",
    "type": "local variable"
  }, {
    "id": 542,
    "text": "",
    "type": "local variable"
  }, {
    "id": 543,
    "text": "",
    "type": "n/a"
  }, {
    "id": 544,
    "text": "",
    "type": "local variable"
  }, {
    "id": 545,
    "text": "",
    "type": "global variable"
  }, {
    "id": 546,
    "text": "",
    "type": "n/a"
  }, {
    "id": 547,
    "text": "",
    "type": "global variable"
  }, {
    "id": 548,
    "text": "",
    "type": "n/a"
  }, {
    "id": 549,
    "text": "",
    "type": "global variable"
  }, {
    "id": 550,
    "text": "",
    "type": "n/a"
  }, {
    "id": 551,
    "text": "",
    "type": "global variable"
  }, {
    "id": 552,
    "text": "",
    "type": "n/a"
  }, {
    "id": 553,
    "text": "",
    "type": "global variable"
  }, {
    "id": 554,
    "text": "",
    "type": "n/a"
  }, {
    "id": 555,
    "text": "",
    "type": "global variable"
  }, {
    "id": 556,
    "text": "",
    "type": "global variable"
  }, {
    "id": 557,
    "text": "",
    "type": "n/a"
  }, {
    "id": 558,
    "text": "",
    "type": "global variable"
  }, {
    "id": 559,
    "text": "",
    "type": "n/a"
  }, {
    "id": 560,
    "text": "",
    "type": "global variable"
  }, {
    "id": 561,
    "text": "",
    "type": "global variable"
  }, {
    "id": 562,
    "text": "",
    "type": "n/a"
  }, {
    "id": 563,
    "text": "",
    "type": "global variable"
  }, {
    "id": 564,
    "text": "",
    "type": "n/a"
  }, {
    "id": 565,
    "text": "",
    "type": "global variable"
  } ]
}