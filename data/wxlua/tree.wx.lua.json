{
  "_filename": "tree.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/tree.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 8,
    "label": "has",
    "to": 16
  }, {
    "from": 8,
    "label": "has",
    "to": 17
  }, {
    "from": 8,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 8,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 8,
    "label": "has",
    "to": 22
  }, {
    "from": 8,
    "label": "has",
    "to": 23
  }, {
    "from": 8,
    "label": "has",
    "to": 24
  }, {
    "from": 8,
    "label": "has",
    "to": 25
  }, {
    "from": 8,
    "label": "has",
    "to": 26
  }, {
    "from": 8,
    "label": "has",
    "to": 27
  }, {
    "from": 8,
    "label": "has",
    "to": 28
  }, {
    "from": 8,
    "label": "has",
    "to": 29
  }, {
    "from": 8,
    "label": "has",
    "to": 30
  }, {
    "from": 8,
    "label": "has",
    "to": 31
  }, {
    "from": 8,
    "label": "has",
    "to": 32
  }, {
    "from": 8,
    "label": "has",
    "to": 33
  }, {
    "from": 8,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 8,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 8,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 43
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 45
  }, {
    "from": 8,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 43
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 45
  }, {
    "from": 8,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 43
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 45
  }, {
    "from": 8,
    "label": "has",
    "to": 52
  }, {
    "from": 8,
    "label": "has",
    "to": 53
  }, {
    "from": 8,
    "label": "has",
    "to": 54
  }, {
    "from": 8,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 21
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 43
  }, {
    "from": 60,
    "label": "has",
    "to": 44
  }, {
    "from": 60,
    "label": "has",
    "to": 45
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 43
  }, {
    "from": 62,
    "label": "has",
    "to": 47
  }, {
    "from": 62,
    "label": "has",
    "to": 45
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 43
  }, {
    "from": 64,
    "label": "has",
    "to": 49
  }, {
    "from": 64,
    "label": "has",
    "to": 45
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 43
  }, {
    "from": 66,
    "label": "has",
    "to": 51
  }, {
    "from": 66,
    "label": "has",
    "to": 45
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 8,
    "label": "calls",
    "to": 71
  }, {
    "from": 8,
    "label": "calls",
    "to": 70
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 72
  }, {
    "from": 8,
    "label": "calls",
    "to": 72
  }, {
    "from": 8,
    "label": "calls",
    "to": 72
  }, {
    "from": 8,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 78
  }, {
    "from": 8,
    "label": "calls",
    "to": 75
  }, {
    "from": 8,
    "label": "calls",
    "to": 77
  }, {
    "from": 68,
    "label": "calls",
    "to": 79
  }, {
    "from": 68,
    "label": "calls",
    "to": 8
  }, {
    "from": 8,
    "label": "calls",
    "to": 74
  }, {
    "from": 8,
    "label": "calls",
    "to": 74
  }, {
    "from": 8,
    "label": "calls",
    "to": 69
  }, {
    "from": 8,
    "label": "calls",
    "to": 73
  }, {
    "from": 68,
    "label": "calls",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 68
  }, {
    "from": 68,
    "label": "declares",
    "to": 2
  }, {
    "from": 68,
    "label": "declares",
    "to": 8
  }, {
    "from": 68,
    "label": "declares",
    "to": 56
  }, {
    "from": 68,
    "label": "declares",
    "to": 58
  }, {
    "from": 68,
    "label": "declares",
    "to": 60
  }, {
    "from": 68,
    "label": "declares",
    "to": 62
  }, {
    "from": 68,
    "label": "declares",
    "to": 64
  }, {
    "from": 68,
    "label": "declares",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 81,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 82,
    "label": "initializes",
    "to": 80
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 60
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 64
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 66
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tree",
    "type": "module"
  }, {
    "id": 2,
    "text": "function CreateLogString(treeitem_id)\r\n    local value = treeitem_id:GetValue()\r\n    local str = \"wxTreeItemId:GetValue():\"..tostring(value)\r\n    str = str..\" Data: '\"..treedata[value].data..\"'\"\r\n    return str\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local value = treeitem_id:GetValue()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local str = \"wxTreeItemId:GetValue():\"..tostring(value)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "str = str..\" Data: '\"..treedata[value].data..\"'\"",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function main()\r\n    frame = wx.wxFrame( wx.NULL, wx.wxID_ANY, \"wxLua wxTreeCtrl Sample\",\r\n                        wx.wxDefaultPosition, wx.wxSize(450, 400),\r\n                        wx.wxDEFAULT_FRAME_STYLE )\r\n\r\n    -- create the menubar and attach it\r\n    local fileMenu = wx.wxMenu()\r\n    fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")\r\n    local helpMenu = wx.wxMenu()\r\n    helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua wxTreeCtrl Sample\")\r\n\r\n    local menuBar = wx.wxMenuBar()\r\n    menuBar:Append(fileMenu, \"&File\")\r\n    menuBar:Append(helpMenu, \"&Help\")\r\n\r\n    frame:SetMenuBar(menuBar)\r\n\r\n    -- connect the selection event of the exit menu item to an\r\n    -- event handler that closes the window\r\n    frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            frame:Close(true)\r\n        end )\r\n\r\n    -- connect the selection event of the about menu item\r\n    frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the wxLua wxTreeCtrl sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )\r\n\r\n    -- create our treectrl\r\n    tree = wx.wxTreeCtrl( frame, wx.wxID_ANY,\r\n                          wx.wxDefaultPosition, wx.wxSize(-1, 200),\r\n                          wx.wxTR_LINES_AT_ROOT + wx.wxTR_HAS_BUTTONS )\r\n\r\n    -- create our log window\r\n    textCtrl = wx.wxTextCtrl( frame, wx.wxID_ANY, \"\",\r\n                              wx.wxDefaultPosition, wx.wxSize(-1, 200),\r\n                              wx.wxTE_READONLY + wx.wxTE_MULTILINE )\r\n\r\n    rootSizer = wx.wxFlexGridSizer(0, 1, 0, 0)\r\n    rootSizer:AddGrowableCol(0)\r\n    rootSizer:AddGrowableRow(0)\r\n    rootSizer:Add( tree, 0, wx.wxGROW+wx.wxALIGN_CENTER_HORIZONTAL, 0 )\r\n    rootSizer:Add( textCtrl, 0, wx.wxGROW+wx.wxALIGN_CENTER_HORIZONTAL, 0 )\r\n    frame:SetSizer( rootSizer )\r\n    frame:Layout() -- help sizing the windows before being shown\r\n\r\n    -- create a table to store any extra information for each node like this\r\n    -- you don't have to store the id in the table, but it might be useful\r\n    -- treedata[id] = { id=wx.wxTreeCtrlId, data=\"whatever data we want\" }\r\n    treedata = {}\r\n\r\n    local root_id = tree:AddRoot( \"Root\" )\r\n    treedata[root_id:GetValue()] = { id = root_id:GetValue(), data = \"I'm the root item\" }\r\n\r\n    for idx = 0, 10 do\r\n        local parent_id = tree:AppendItem( root_id, \"Parent (\"..idx..\")\" )\r\n        treedata[parent_id:GetValue()] = { id = parent_id:GetValue(), data = \"I'm the data for Parent (\"..idx..\")\" }\r\n        for jdx = 0, 5 do\r\n            local child_id = tree:AppendItem( parent_id, \"Child (\"..idx..\", \"..jdx..\")\" )\r\n            treedata[child_id:GetValue()] = { id = child_id:GetValue(), data = \"I'm the child data for Parent (\"..idx..\", \"..jdx..\")\" }\r\n        end\r\n        if (idx == 2) or (idx == 5) then\r\n            tree:Expand(parent_id)\r\n        end\r\n    end\r\n\r\n    -- connect to some events from the wxTreeCtrl\r\n    tree:Connect( wx.wxEVT_COMMAND_TREE_ITEM_EXPANDING,\r\n        function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item expanding : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end )\r\n    tree:Connect( wx.wxEVT_COMMAND_TREE_ITEM_COLLAPSING,\r\n        function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item collapsing : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end )\r\n    tree:Connect( wx.wxEVT_COMMAND_TREE_ITEM_ACTIVATED,\r\n        function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item activated : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end )\r\n    tree:Connect( wx.wxEVT_COMMAND_TREE_SEL_CHANGED,\r\n        function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item sel changed : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end )\r\n\r\n    tree:Expand(root_id)\r\n    wx.wxGetApp():SetTopWindow(frame)\r\n\r\n    frame:Show(true)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "frame = wx.wxFrame( wx.NULL, wx.wxID_ANY, \"wxLua wxTreeCtrl Sample\",\r\n                        wx.wxDefaultPosition, wx.wxSize(450, 400),\r\n                        wx.wxDEFAULT_FRAME_STYLE )",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local fileMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local helpMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua wxTreeCtrl Sample\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "local menuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "menuBar:Append(fileMenu, \"&File\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "menuBar:Append(helpMenu, \"&Help\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "frame:SetMenuBar(menuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            frame:Close(true)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "frame:Close(true)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the wxLua wxTreeCtrl sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the wxLua wxTreeCtrl sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "tree = wx.wxTreeCtrl( frame, wx.wxID_ANY,\r\n                          wx.wxDefaultPosition, wx.wxSize(-1, 200),\r\n                          wx.wxTR_LINES_AT_ROOT + wx.wxTR_HAS_BUTTONS )",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "textCtrl = wx.wxTextCtrl( frame, wx.wxID_ANY, \"\",\r\n                              wx.wxDefaultPosition, wx.wxSize(-1, 200),\r\n                              wx.wxTE_READONLY + wx.wxTE_MULTILINE )",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "rootSizer = wx.wxFlexGridSizer(0, 1, 0, 0)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "rootSizer:AddGrowableCol(0)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "rootSizer:AddGrowableRow(0)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "rootSizer:Add( tree, 0, wx.wxGROW+wx.wxALIGN_CENTER_HORIZONTAL, 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "rootSizer:Add( textCtrl, 0, wx.wxGROW+wx.wxALIGN_CENTER_HORIZONTAL, 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "frame:SetSizer( rootSizer )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "frame:Layout()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "treedata = {}",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local root_id = tree:AddRoot( \"Root\" )",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "treedata[root_id:GetValue()] = { id = root_id:GetValue(), data = \"I'm the root item\" }",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "for idx = 0, 10 do\r\n        local parent_id = tree:AppendItem( root_id, \"Parent (\"..idx..\")\" )\r\n        treedata[parent_id:GetValue()] = { id = parent_id:GetValue(), data = \"I'm the data for Parent (\"..idx..\")\" }\r\n        for jdx = 0, 5 do\r\n            local child_id = tree:AppendItem( parent_id, \"Child (\"..idx..\", \"..jdx..\")\" )\r\n            treedata[child_id:GetValue()] = { id = child_id:GetValue(), data = \"I'm the child data for Parent (\"..idx..\", \"..jdx..\")\" }\r\n        end\r\n        if (idx == 2) or (idx == 5) then\r\n            tree:Expand(parent_id)\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 35,
    "text": "local parent_id = tree:AppendItem( root_id, \"Parent (\"..idx..\")\" )",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "treedata[parent_id:GetValue()] = { id = parent_id:GetValue(), data = \"I'm the data for Parent (\"..idx..\")\" }",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "for jdx = 0, 5 do\r\n            local child_id = tree:AppendItem( parent_id, \"Child (\"..idx..\", \"..jdx..\")\" )\r\n            treedata[child_id:GetValue()] = { id = child_id:GetValue(), data = \"I'm the child data for Parent (\"..idx..\", \"..jdx..\")\" }\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 38,
    "text": "local child_id = tree:AppendItem( parent_id, \"Child (\"..idx..\", \"..jdx..\")\" )",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "treedata[child_id:GetValue()] = { id = child_id:GetValue(), data = \"I'm the child data for Parent (\"..idx..\", \"..jdx..\")\" }",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if (idx == 2) or (idx == 5) then\r\n            tree:Expand(parent_id)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "tree:Expand(parent_id)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "tree:Connect( wx.wxEVT_COMMAND_TREE_ITEM_EXPANDING,\r\n        function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item expanding : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local item_id = event:GetItem()",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local str = \"Item expanding : \"..CreateLogString(item_id)..\"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "textCtrl:AppendText(str)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "tree:Connect( wx.wxEVT_COMMAND_TREE_ITEM_COLLAPSING,\r\n        function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item collapsing : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local str = \"Item collapsing : \"..CreateLogString(item_id)..\"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "tree:Connect( wx.wxEVT_COMMAND_TREE_ITEM_ACTIVATED,\r\n        function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item activated : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local str = \"Item activated : \"..CreateLogString(item_id)..\"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "tree:Connect( wx.wxEVT_COMMAND_TREE_SEL_CHANGED,\r\n        function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item sel changed : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "local str = \"Item sel changed : \"..CreateLogString(item_id)..\"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "tree:Expand(root_id)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "wx.wxGetApp():SetTopWindow(frame)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "frame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function (event)\r\n            frame:Close(true)\r\n        end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the wxLua wxTreeCtrl sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item expanding : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item collapsing : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item activated : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function( event )\r\n            local item_id = event:GetItem()\r\n            local str = \"Item sel changed : \"..CreateLogString(item_id)..\"\\n\"\r\n            textCtrl:AppendText(str)\r\n        end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "",
    "type": "function container"
  }, {
    "id": 69,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 70,
    "text": "wxTreeCtrl",
    "type": "global function"
  }, {
    "id": 71,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 72,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 73,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 74,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 75,
    "text": "wxTextCtrl",
    "type": "global function"
  }, {
    "id": 76,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 77,
    "text": "wxFlexGridSizer",
    "type": "global function"
  }, {
    "id": 78,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 79,
    "text": "require",
    "type": "global function"
  }, {
    "id": 80,
    "text": "",
    "type": "global variable"
  }, {
    "id": 81,
    "text": "",
    "type": "variable container"
  }, {
    "id": 82,
    "text": "",
    "type": "require container"
  }, {
    "id": 83,
    "text": "",
    "type": "global variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  } ]
}