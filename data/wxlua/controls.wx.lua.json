{
  "_filename": "controls.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/controls.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 30
  }, {
    "from": 20,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 20,
    "label": "has",
    "to": 35
  }, {
    "from": 20,
    "label": "has",
    "to": 36
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 37
  }, {
    "from": 16,
    "label": "has",
    "to": 38
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 12
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 40,
    "label": "has",
    "to": 55
  }, {
    "from": 40,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 40,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 40,
    "label": "has",
    "to": 63
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 65,
    "label": "has",
    "to": 77
  }, {
    "from": 65,
    "label": "has",
    "to": 78
  }, {
    "from": 65,
    "label": "has",
    "to": 79
  }, {
    "from": 65,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 65,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 84,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 84,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 65,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 96,
    "label": "has",
    "to": 102
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 96,
    "label": "has",
    "to": 12
  }, {
    "from": 65,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 65,
    "label": "has",
    "to": 109
  }, {
    "from": 65,
    "label": "has",
    "to": 110
  }, {
    "from": 65,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 65,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 114,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 65,
    "label": "has",
    "to": 121
  }, {
    "from": 65,
    "label": "has",
    "to": 122
  }, {
    "from": 65,
    "label": "has",
    "to": 123
  }, {
    "from": 65,
    "label": "has",
    "to": 124
  }, {
    "from": 65,
    "label": "has",
    "to": 125
  }, {
    "from": 65,
    "label": "has",
    "to": 126
  }, {
    "from": 65,
    "label": "has",
    "to": 127
  }, {
    "from": 65,
    "label": "has",
    "to": 128
  }, {
    "from": 65,
    "label": "has",
    "to": 129
  }, {
    "from": 65,
    "label": "has",
    "to": 130
  }, {
    "from": 65,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 98
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 131,
    "label": "has",
    "to": 102
  }, {
    "from": 131,
    "label": "has",
    "to": 135
  }, {
    "from": 131,
    "label": "has",
    "to": 136
  }, {
    "from": 65,
    "label": "has",
    "to": 137
  }, {
    "from": 65,
    "label": "has",
    "to": 138
  }, {
    "from": 65,
    "label": "has",
    "to": 139
  }, {
    "from": 65,
    "label": "has",
    "to": 140
  }, {
    "from": 65,
    "label": "has",
    "to": 141
  }, {
    "from": 65,
    "label": "has",
    "to": 142
  }, {
    "from": 65,
    "label": "has",
    "to": 143
  }, {
    "from": 65,
    "label": "has",
    "to": 144
  }, {
    "from": 65,
    "label": "has",
    "to": 145
  }, {
    "from": 65,
    "label": "has",
    "to": 146
  }, {
    "from": 65,
    "label": "has",
    "to": 147
  }, {
    "from": 65,
    "label": "has",
    "to": 148
  }, {
    "from": 65,
    "label": "has",
    "to": 149
  }, {
    "from": 65,
    "label": "has",
    "to": 150
  }, {
    "from": 65,
    "label": "has",
    "to": 151
  }, {
    "from": 65,
    "label": "has",
    "to": 152
  }, {
    "from": 65,
    "label": "has",
    "to": 153
  }, {
    "from": 65,
    "label": "has",
    "to": 154
  }, {
    "from": 65,
    "label": "has",
    "to": 155
  }, {
    "from": 65,
    "label": "has",
    "to": 156
  }, {
    "from": 65,
    "label": "has",
    "to": 157
  }, {
    "from": 65,
    "label": "has",
    "to": 158
  }, {
    "from": 65,
    "label": "has",
    "to": 159
  }, {
    "from": 65,
    "label": "has",
    "to": 160
  }, {
    "from": 65,
    "label": "has",
    "to": 161
  }, {
    "from": 65,
    "label": "has",
    "to": 162
  }, {
    "from": 65,
    "label": "has",
    "to": 163
  }, {
    "from": 65,
    "label": "has",
    "to": 164
  }, {
    "from": 65,
    "label": "has",
    "to": 165
  }, {
    "from": 65,
    "label": "has",
    "to": 166
  }, {
    "from": 65,
    "label": "has",
    "to": 167
  }, {
    "from": 65,
    "label": "has",
    "to": 168
  }, {
    "from": 65,
    "label": "has",
    "to": 169
  }, {
    "from": 65,
    "label": "has",
    "to": 170
  }, {
    "from": 65,
    "label": "has",
    "to": 171
  }, {
    "from": 65,
    "label": "has",
    "to": 172
  }, {
    "from": 65,
    "label": "has",
    "to": 173
  }, {
    "from": 65,
    "label": "has",
    "to": 174
  }, {
    "from": 65,
    "label": "has",
    "to": 175
  }, {
    "from": 65,
    "label": "has",
    "to": 176
  }, {
    "from": 65,
    "label": "has",
    "to": 177
  }, {
    "from": 65,
    "label": "has",
    "to": 178
  }, {
    "from": 65,
    "label": "has",
    "to": 179
  }, {
    "from": 65,
    "label": "has",
    "to": 180
  }, {
    "from": 65,
    "label": "has",
    "to": 181
  }, {
    "from": 65,
    "label": "has",
    "to": 182
  }, {
    "from": 65,
    "label": "has",
    "to": 183
  }, {
    "from": 65,
    "label": "has",
    "to": 144
  }, {
    "from": 65,
    "label": "has",
    "to": 184
  }, {
    "from": 65,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 132
  }, {
    "from": 185,
    "label": "has",
    "to": 98
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 144
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 185,
    "label": "has",
    "to": 101
  }, {
    "from": 185,
    "label": "has",
    "to": 102
  }, {
    "from": 185,
    "label": "has",
    "to": 135
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 65,
    "label": "has",
    "to": 189
  }, {
    "from": 65,
    "label": "has",
    "to": 190
  }, {
    "from": 65,
    "label": "has",
    "to": 191
  }, {
    "from": 65,
    "label": "has",
    "to": 192
  }, {
    "from": 65,
    "label": "has",
    "to": 193
  }, {
    "from": 65,
    "label": "has",
    "to": 194
  }, {
    "from": 65,
    "label": "has",
    "to": 195
  }, {
    "from": 65,
    "label": "has",
    "to": 196
  }, {
    "from": 65,
    "label": "has",
    "to": 197
  }, {
    "from": 65,
    "label": "has",
    "to": 198
  }, {
    "from": 65,
    "label": "has",
    "to": 199
  }, {
    "from": 65,
    "label": "has",
    "to": 200
  }, {
    "from": 65,
    "label": "has",
    "to": 201
  }, {
    "from": 65,
    "label": "has",
    "to": 202
  }, {
    "from": 65,
    "label": "has",
    "to": 203
  }, {
    "from": 65,
    "label": "has",
    "to": 204
  }, {
    "from": 65,
    "label": "has",
    "to": 205
  }, {
    "from": 65,
    "label": "has",
    "to": 206
  }, {
    "from": 65,
    "label": "has",
    "to": 207
  }, {
    "from": 65,
    "label": "has",
    "to": 208
  }, {
    "from": 65,
    "label": "has",
    "to": 209
  }, {
    "from": 65,
    "label": "has",
    "to": 210
  }, {
    "from": 65,
    "label": "has",
    "to": 211
  }, {
    "from": 65,
    "label": "has",
    "to": 212
  }, {
    "from": 65,
    "label": "has",
    "to": 213
  }, {
    "from": 65,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 132
  }, {
    "from": 214,
    "label": "has",
    "to": 98
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 214,
    "label": "has",
    "to": 217
  }, {
    "from": 214,
    "label": "has",
    "to": 102
  }, {
    "from": 214,
    "label": "has",
    "to": 135
  }, {
    "from": 214,
    "label": "has",
    "to": 218
  }, {
    "from": 65,
    "label": "has",
    "to": 219
  }, {
    "from": 65,
    "label": "has",
    "to": 220
  }, {
    "from": 65,
    "label": "has",
    "to": 221
  }, {
    "from": 65,
    "label": "has",
    "to": 204
  }, {
    "from": 65,
    "label": "has",
    "to": 222
  }, {
    "from": 65,
    "label": "has",
    "to": 223
  }, {
    "from": 65,
    "label": "has",
    "to": 224
  }, {
    "from": 65,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 225,
    "label": "has",
    "to": 228
  }, {
    "from": 225,
    "label": "has",
    "to": 229
  }, {
    "from": 225,
    "label": "has",
    "to": 230
  }, {
    "from": 225,
    "label": "has",
    "to": 231
  }, {
    "from": 225,
    "label": "has",
    "to": 232
  }, {
    "from": 65,
    "label": "has",
    "to": 233
  }, {
    "from": 65,
    "label": "has",
    "to": 234
  }, {
    "from": 65,
    "label": "has",
    "to": 235
  }, {
    "from": 65,
    "label": "has",
    "to": 236
  }, {
    "from": 65,
    "label": "has",
    "to": 237
  }, {
    "from": 65,
    "label": "has",
    "to": 238
  }, {
    "from": 65,
    "label": "has",
    "to": 239
  }, {
    "from": 65,
    "label": "has",
    "to": 240
  }, {
    "from": 65,
    "label": "has",
    "to": 241
  }, {
    "from": 65,
    "label": "has",
    "to": 242
  }, {
    "from": 65,
    "label": "has",
    "to": 243
  }, {
    "from": 65,
    "label": "has",
    "to": 244
  }, {
    "from": 65,
    "label": "has",
    "to": 144
  }, {
    "from": 65,
    "label": "has",
    "to": 245
  }, {
    "from": 65,
    "label": "has",
    "to": 246
  }, {
    "from": 65,
    "label": "has",
    "to": 144
  }, {
    "from": 65,
    "label": "has",
    "to": 247
  }, {
    "from": 65,
    "label": "has",
    "to": 248
  }, {
    "from": 65,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 105
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 249,
    "label": "has",
    "to": 252
  }, {
    "from": 249,
    "label": "has",
    "to": 253
  }, {
    "from": 249,
    "label": "has",
    "to": 254
  }, {
    "from": 249,
    "label": "has",
    "to": 255
  }, {
    "from": 249,
    "label": "has",
    "to": 256
  }, {
    "from": 249,
    "label": "has",
    "to": 257
  }, {
    "from": 65,
    "label": "has",
    "to": 258
  }, {
    "from": 65,
    "label": "has",
    "to": 259
  }, {
    "from": 65,
    "label": "has",
    "to": 260
  }, {
    "from": 65,
    "label": "has",
    "to": 261
  }, {
    "from": 65,
    "label": "has",
    "to": 12
  }, {
    "from": 65,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 85
  }, {
    "from": 265,
    "label": "has",
    "to": 86
  }, {
    "from": 265,
    "label": "has",
    "to": 87
  }, {
    "from": 265,
    "label": "has",
    "to": 88
  }, {
    "from": 265,
    "label": "has",
    "to": 88
  }, {
    "from": 265,
    "label": "has",
    "to": 89
  }, {
    "from": 265,
    "label": "has",
    "to": 90
  }, {
    "from": 265,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 265,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 267,
    "label": "has",
    "to": 97
  }, {
    "from": 267,
    "label": "has",
    "to": 98
  }, {
    "from": 267,
    "label": "has",
    "to": 99
  }, {
    "from": 267,
    "label": "has",
    "to": 100
  }, {
    "from": 267,
    "label": "has",
    "to": 101
  }, {
    "from": 267,
    "label": "has",
    "to": 102
  }, {
    "from": 267,
    "label": "has",
    "to": 103
  }, {
    "from": 267,
    "label": "has",
    "to": 12
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 105
  }, {
    "from": 269,
    "label": "has",
    "to": 106
  }, {
    "from": 269,
    "label": "has",
    "to": 107
  }, {
    "from": 269,
    "label": "has",
    "to": 108
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 273,
    "label": "has",
    "to": 276
  }, {
    "from": 273,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 271,
    "label": "has",
    "to": 279
  }, {
    "from": 271,
    "label": "has",
    "to": 280
  }, {
    "from": 271,
    "label": "has",
    "to": 281
  }, {
    "from": 271,
    "label": "has",
    "to": 282
  }, {
    "from": 271,
    "label": "has",
    "to": 283
  }, {
    "from": 271,
    "label": "has",
    "to": 284
  }, {
    "from": 271,
    "label": "has",
    "to": 285
  }, {
    "from": 271,
    "label": "has",
    "to": 286
  }, {
    "from": 271,
    "label": "has",
    "to": 287
  }, {
    "from": 271,
    "label": "has",
    "to": 288
  }, {
    "from": 271,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 271,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 271,
    "label": "has",
    "to": 293
  }, {
    "from": 271,
    "label": "has",
    "to": 294
  }, {
    "from": 271,
    "label": "has",
    "to": 295
  }, {
    "from": 271,
    "label": "has",
    "to": 296
  }, {
    "from": 271,
    "label": "has",
    "to": 297
  }, {
    "from": 271,
    "label": "has",
    "to": 298
  }, {
    "from": 271,
    "label": "has",
    "to": 299
  }, {
    "from": 271,
    "label": "has",
    "to": 300
  }, {
    "from": 271,
    "label": "has",
    "to": 301
  }, {
    "from": 271,
    "label": "has",
    "to": 302
  }, {
    "from": 271,
    "label": "has",
    "to": 303
  }, {
    "from": 271,
    "label": "has",
    "to": 304
  }, {
    "from": 271,
    "label": "has",
    "to": 305
  }, {
    "from": 271,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 306,
    "label": "has",
    "to": 311
  }, {
    "from": 306,
    "label": "has",
    "to": 312
  }, {
    "from": 306,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 313,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 271,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 271,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 319,
    "label": "has",
    "to": 322
  }, {
    "from": 319,
    "label": "has",
    "to": 323
  }, {
    "from": 319,
    "label": "has",
    "to": 324
  }, {
    "from": 319,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 327,
    "label": "has",
    "to": 329
  }, {
    "from": 327,
    "label": "has",
    "to": 330
  }, {
    "from": 327,
    "label": "has",
    "to": 331
  }, {
    "from": 327,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 332,
    "label": "has",
    "to": 335
  }, {
    "from": 332,
    "label": "has",
    "to": 336
  }, {
    "from": 332,
    "label": "has",
    "to": 331
  }, {
    "from": 332,
    "label": "has",
    "to": 337
  }, {
    "from": 319,
    "label": "has",
    "to": 338
  }, {
    "from": 319,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 319,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 343,
    "label": "has",
    "to": 347
  }, {
    "from": 343,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 271,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 352,
    "label": "has",
    "to": 274
  }, {
    "from": 271,
    "label": "has",
    "to": 354
  }, {
    "from": 271,
    "label": "has",
    "to": 355
  }, {
    "from": 271,
    "label": "has",
    "to": 356
  }, {
    "from": 271,
    "label": "has",
    "to": 357
  }, {
    "from": 271,
    "label": "has",
    "to": 358
  }, {
    "from": 271,
    "label": "has",
    "to": 359
  }, {
    "from": 359,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 352,
    "label": "has",
    "to": 274
  }, {
    "from": 271,
    "label": "has",
    "to": 360
  }, {
    "from": 271,
    "label": "has",
    "to": 361
  }, {
    "from": 271,
    "label": "has",
    "to": 362
  }, {
    "from": 271,
    "label": "has",
    "to": 363
  }, {
    "from": 271,
    "label": "has",
    "to": 304
  }, {
    "from": 271,
    "label": "has",
    "to": 305
  }, {
    "from": 271,
    "label": "has",
    "to": 364
  }, {
    "from": 271,
    "label": "has",
    "to": 365
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 271,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 12
  }, {
    "from": 271,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 307
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 368,
    "label": "has",
    "to": 370
  }, {
    "from": 368,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 371,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 271,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 271,
    "label": "has",
    "to": 375
  }, {
    "from": 271,
    "label": "has",
    "to": 376
  }, {
    "from": 271,
    "label": "has",
    "to": 377
  }, {
    "from": 271,
    "label": "has",
    "to": 378
  }, {
    "from": 271,
    "label": "has",
    "to": 379
  }, {
    "from": 380,
    "label": "has",
    "to": 320
  }, {
    "from": 380,
    "label": "has",
    "to": 321
  }, {
    "from": 380,
    "label": "has",
    "to": 322
  }, {
    "from": 380,
    "label": "has",
    "to": 323
  }, {
    "from": 380,
    "label": "has",
    "to": 324
  }, {
    "from": 380,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 327,
    "label": "has",
    "to": 329
  }, {
    "from": 327,
    "label": "has",
    "to": 330
  }, {
    "from": 327,
    "label": "has",
    "to": 331
  }, {
    "from": 327,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 332,
    "label": "has",
    "to": 335
  }, {
    "from": 332,
    "label": "has",
    "to": 336
  }, {
    "from": 332,
    "label": "has",
    "to": 331
  }, {
    "from": 332,
    "label": "has",
    "to": 337
  }, {
    "from": 380,
    "label": "has",
    "to": 338
  }, {
    "from": 380,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 380,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 343,
    "label": "has",
    "to": 347
  }, {
    "from": 343,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 382,
    "label": "has",
    "to": 12
  }, {
    "from": 383,
    "label": "has",
    "to": 274
  }, {
    "from": 383,
    "label": "has",
    "to": 275
  }, {
    "from": 383,
    "label": "has",
    "to": 276
  }, {
    "from": 383,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 385,
    "label": "has",
    "to": 290
  }, {
    "from": 386,
    "label": "has",
    "to": 292
  }, {
    "from": 386,
    "label": "has",
    "to": 387
  }, {
    "from": 388,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 352,
    "label": "has",
    "to": 274
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 390,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 352,
    "label": "has",
    "to": 274
  }, {
    "from": 390,
    "label": "has",
    "to": 391
  }, {
    "from": 392,
    "label": "has",
    "to": 12
  }, {
    "from": 65,
    "label": "calls",
    "to": 415
  }, {
    "from": 2,
    "label": "calls",
    "to": 458
  }, {
    "from": 2,
    "label": "calls",
    "to": 458
  }, {
    "from": 2,
    "label": "calls",
    "to": 458
  }, {
    "from": 2,
    "label": "calls",
    "to": 458
  }, {
    "from": 14,
    "label": "calls",
    "to": 458
  }, {
    "from": 14,
    "label": "calls",
    "to": 458
  }, {
    "from": 14,
    "label": "calls",
    "to": 458
  }, {
    "from": 271,
    "label": "calls",
    "to": 458
  }, {
    "from": 271,
    "label": "calls",
    "to": 458
  }, {
    "from": 271,
    "label": "calls",
    "to": 465
  }, {
    "from": 271,
    "label": "calls",
    "to": 465
  }, {
    "from": 65,
    "label": "calls",
    "to": 425
  }, {
    "from": 271,
    "label": "calls",
    "to": 425
  }, {
    "from": 65,
    "label": "calls",
    "to": 416
  }, {
    "from": 265,
    "label": "calls",
    "to": 471
  }, {
    "from": 65,
    "label": "calls",
    "to": 398
  }, {
    "from": 65,
    "label": "calls",
    "to": 402
  }, {
    "from": 271,
    "label": "calls",
    "to": 396
  }, {
    "from": 65,
    "label": "calls",
    "to": 434
  }, {
    "from": 267,
    "label": "calls",
    "to": 441
  }, {
    "from": 65,
    "label": "calls",
    "to": 441
  }, {
    "from": 65,
    "label": "calls",
    "to": 441
  }, {
    "from": 65,
    "label": "calls",
    "to": 441
  }, {
    "from": 65,
    "label": "calls",
    "to": 441
  }, {
    "from": 14,
    "label": "calls",
    "to": 459
  }, {
    "from": 40,
    "label": "calls",
    "to": 459
  }, {
    "from": 271,
    "label": "calls",
    "to": 459
  }, {
    "from": 14,
    "label": "calls",
    "to": 466
  }, {
    "from": 40,
    "label": "calls",
    "to": 14
  }, {
    "from": 14,
    "label": "calls",
    "to": 467
  }, {
    "from": 14,
    "label": "calls",
    "to": 467
  }, {
    "from": 65,
    "label": "calls",
    "to": 395
  }, {
    "from": 393,
    "label": "calls",
    "to": 460
  }, {
    "from": 393,
    "label": "calls",
    "to": 460
  }, {
    "from": 65,
    "label": "calls",
    "to": 403
  }, {
    "from": 271,
    "label": "calls",
    "to": 380
  }, {
    "from": 271,
    "label": "calls",
    "to": 380
  }, {
    "from": 393,
    "label": "calls",
    "to": 409
  }, {
    "from": 65,
    "label": "calls",
    "to": 411
  }, {
    "from": 393,
    "label": "calls",
    "to": 444
  }, {
    "from": 393,
    "label": "calls",
    "to": 444
  }, {
    "from": 65,
    "label": "calls",
    "to": 443
  }, {
    "from": 65,
    "label": "calls",
    "to": 443
  }, {
    "from": 265,
    "label": "calls",
    "to": 406
  }, {
    "from": 267,
    "label": "calls",
    "to": 406
  }, {
    "from": 65,
    "label": "calls",
    "to": 406
  }, {
    "from": 65,
    "label": "calls",
    "to": 406
  }, {
    "from": 65,
    "label": "calls",
    "to": 406
  }, {
    "from": 65,
    "label": "calls",
    "to": 406
  }, {
    "from": 65,
    "label": "calls",
    "to": 406
  }, {
    "from": 65,
    "label": "calls",
    "to": 406
  }, {
    "from": 65,
    "label": "calls",
    "to": 397
  }, {
    "from": 271,
    "label": "calls",
    "to": 397
  }, {
    "from": 271,
    "label": "calls",
    "to": 65
  }, {
    "from": 65,
    "label": "calls",
    "to": 394
  }, {
    "from": 393,
    "label": "calls",
    "to": 271
  }, {
    "from": 265,
    "label": "calls",
    "to": 461
  }, {
    "from": 65,
    "label": "calls",
    "to": 429
  }, {
    "from": 65,
    "label": "calls",
    "to": 407
  }, {
    "from": 271,
    "label": "calls",
    "to": 439
  }, {
    "from": 393,
    "label": "calls",
    "to": 462
  }, {
    "from": 393,
    "label": "calls",
    "to": 462
  }, {
    "from": 393,
    "label": "calls",
    "to": 462
  }, {
    "from": 14,
    "label": "calls",
    "to": 462
  }, {
    "from": 271,
    "label": "calls",
    "to": 462
  }, {
    "from": 271,
    "label": "calls",
    "to": 462
  }, {
    "from": 271,
    "label": "calls",
    "to": 436
  }, {
    "from": 65,
    "label": "calls",
    "to": 432
  }, {
    "from": 65,
    "label": "calls",
    "to": 399
  }, {
    "from": 65,
    "label": "calls",
    "to": 420
  }, {
    "from": 271,
    "label": "calls",
    "to": 420
  }, {
    "from": 271,
    "label": "calls",
    "to": 420
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 65,
    "label": "calls",
    "to": 265
  }, {
    "from": 265,
    "label": "calls",
    "to": 426
  }, {
    "from": 65,
    "label": "calls",
    "to": 421
  }, {
    "from": 14,
    "label": "calls",
    "to": 463
  }, {
    "from": 14,
    "label": "calls",
    "to": 463
  }, {
    "from": 65,
    "label": "calls",
    "to": 449
  }, {
    "from": 65,
    "label": "calls",
    "to": 423
  }, {
    "from": 40,
    "label": "calls",
    "to": 454
  }, {
    "from": 265,
    "label": "calls",
    "to": 263
  }, {
    "from": 65,
    "label": "calls",
    "to": 269
  }, {
    "from": 65,
    "label": "calls",
    "to": 269
  }, {
    "from": 65,
    "label": "calls",
    "to": 269
  }, {
    "from": 65,
    "label": "calls",
    "to": 269
  }, {
    "from": 65,
    "label": "calls",
    "to": 269
  }, {
    "from": 40,
    "label": "calls",
    "to": 469
  }, {
    "from": 65,
    "label": "calls",
    "to": 408
  }, {
    "from": 65,
    "label": "calls",
    "to": 404
  }, {
    "from": 393,
    "label": "calls",
    "to": 474
  }, {
    "from": 393,
    "label": "calls",
    "to": 450
  }, {
    "from": 393,
    "label": "calls",
    "to": 450
  }, {
    "from": 393,
    "label": "calls",
    "to": 450
  }, {
    "from": 393,
    "label": "calls",
    "to": 450
  }, {
    "from": 393,
    "label": "calls",
    "to": 450
  }, {
    "from": 393,
    "label": "calls",
    "to": 450
  }, {
    "from": 393,
    "label": "calls",
    "to": 450
  }, {
    "from": 393,
    "label": "calls",
    "to": 450
  }, {
    "from": 65,
    "label": "calls",
    "to": 457
  }, {
    "from": 393,
    "label": "calls",
    "to": 473
  }, {
    "from": 40,
    "label": "calls",
    "to": 473
  }, {
    "from": 40,
    "label": "calls",
    "to": 470
  }, {
    "from": 271,
    "label": "calls",
    "to": 470
  }, {
    "from": 65,
    "label": "calls",
    "to": 453
  }, {
    "from": 393,
    "label": "calls",
    "to": 464
  }, {
    "from": 271,
    "label": "calls",
    "to": 464
  }, {
    "from": 65,
    "label": "calls",
    "to": 442
  }, {
    "from": 65,
    "label": "calls",
    "to": 435
  }, {
    "from": 65,
    "label": "calls",
    "to": 433
  }, {
    "from": 65,
    "label": "calls",
    "to": 438
  }, {
    "from": 65,
    "label": "calls",
    "to": 438
  }, {
    "from": 14,
    "label": "calls",
    "to": 468
  }, {
    "from": 14,
    "label": "calls",
    "to": 468
  }, {
    "from": 14,
    "label": "calls",
    "to": 468
  }, {
    "from": 40,
    "label": "calls",
    "to": 468
  }, {
    "from": 393,
    "label": "calls",
    "to": 405
  }, {
    "from": 393,
    "label": "calls",
    "to": 405
  }, {
    "from": 393,
    "label": "calls",
    "to": 405
  }, {
    "from": 393,
    "label": "calls",
    "to": 405
  }, {
    "from": 393,
    "label": "calls",
    "to": 405
  }, {
    "from": 393,
    "label": "calls",
    "to": 405
  }, {
    "from": 393,
    "label": "calls",
    "to": 405
  }, {
    "from": 393,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 405
  }, {
    "from": 271,
    "label": "calls",
    "to": 405
  }, {
    "from": 65,
    "label": "calls",
    "to": 446
  }, {
    "from": 65,
    "label": "calls",
    "to": 440
  }, {
    "from": 393,
    "label": "calls",
    "to": 417
  }, {
    "from": 393,
    "label": "calls",
    "to": 417
  }, {
    "from": 393,
    "label": "calls",
    "to": 417
  }, {
    "from": 65,
    "label": "calls",
    "to": 417
  }, {
    "from": 65,
    "label": "calls",
    "to": 418
  }, {
    "from": 65,
    "label": "calls",
    "to": 456
  }, {
    "from": 65,
    "label": "calls",
    "to": 452
  }, {
    "from": 65,
    "label": "calls",
    "to": 448
  }, {
    "from": 65,
    "label": "calls",
    "to": 448
  }, {
    "from": 65,
    "label": "calls",
    "to": 455
  }, {
    "from": 65,
    "label": "calls",
    "to": 427
  }, {
    "from": 65,
    "label": "calls",
    "to": 400
  }, {
    "from": 265,
    "label": "calls",
    "to": 428
  }, {
    "from": 265,
    "label": "calls",
    "to": 428
  }, {
    "from": 65,
    "label": "calls",
    "to": 428
  }, {
    "from": 65,
    "label": "calls",
    "to": 422
  }, {
    "from": 271,
    "label": "calls",
    "to": 401
  }, {
    "from": 65,
    "label": "calls",
    "to": 424
  }, {
    "from": 65,
    "label": "calls",
    "to": 410
  }, {
    "from": 65,
    "label": "calls",
    "to": 413
  }, {
    "from": 271,
    "label": "calls",
    "to": 413
  }, {
    "from": 271,
    "label": "calls",
    "to": 413
  }, {
    "from": 267,
    "label": "calls",
    "to": 430
  }, {
    "from": 65,
    "label": "calls",
    "to": 430
  }, {
    "from": 65,
    "label": "calls",
    "to": 430
  }, {
    "from": 65,
    "label": "calls",
    "to": 430
  }, {
    "from": 65,
    "label": "calls",
    "to": 445
  }, {
    "from": 65,
    "label": "calls",
    "to": 414
  }, {
    "from": 269,
    "label": "calls",
    "to": 267
  }, {
    "from": 269,
    "label": "calls",
    "to": 267
  }, {
    "from": 269,
    "label": "calls",
    "to": 267
  }, {
    "from": 65,
    "label": "calls",
    "to": 267
  }, {
    "from": 65,
    "label": "calls",
    "to": 267
  }, {
    "from": 65,
    "label": "calls",
    "to": 267
  }, {
    "from": 65,
    "label": "calls",
    "to": 412
  }, {
    "from": 65,
    "label": "calls",
    "to": 437
  }, {
    "from": 65,
    "label": "calls",
    "to": 447
  }, {
    "from": 271,
    "label": "calls",
    "to": 472
  }, {
    "from": 271,
    "label": "calls",
    "to": 419
  }, {
    "from": 271,
    "label": "calls",
    "to": 419
  }, {
    "from": 65,
    "label": "calls",
    "to": 431
  }, {
    "from": 40,
    "label": "calls",
    "to": 451
  }, {
    "from": 1,
    "label": "contains",
    "to": 393
  }, {
    "from": 393,
    "label": "declares",
    "to": 2
  }, {
    "from": 393,
    "label": "declares",
    "to": 14
  }, {
    "from": 393,
    "label": "declares",
    "to": 40
  }, {
    "from": 393,
    "label": "declares",
    "to": 65
  }, {
    "from": 393,
    "label": "declares",
    "to": 263
  }, {
    "from": 393,
    "label": "declares",
    "to": 265
  }, {
    "from": 393,
    "label": "declares",
    "to": 267
  }, {
    "from": 393,
    "label": "declares",
    "to": 269
  }, {
    "from": 393,
    "label": "declares",
    "to": 271
  }, {
    "from": 393,
    "label": "declares",
    "to": 380
  }, {
    "from": 393,
    "label": "declares",
    "to": 382
  }, {
    "from": 393,
    "label": "declares",
    "to": 383
  }, {
    "from": 393,
    "label": "declares",
    "to": 385
  }, {
    "from": 393,
    "label": "declares",
    "to": 386
  }, {
    "from": 393,
    "label": "declares",
    "to": 388
  }, {
    "from": 393,
    "label": "declares",
    "to": 390
  }, {
    "from": 393,
    "label": "declares",
    "to": 392
  }, {
    "from": 1,
    "label": "contains",
    "to": 476
  }, {
    "from": 1,
    "label": "contains",
    "to": 477
  }, {
    "from": 476,
    "label": "initializes",
    "to": 478
  }, {
    "from": 478,
    "label": "assigns",
    "to": 479
  }, {
    "from": 476,
    "label": "initializes",
    "to": 480
  }, {
    "from": 476,
    "label": "initializes",
    "to": 481
  }, {
    "from": 476,
    "label": "initializes",
    "to": 482
  }, {
    "from": 476,
    "label": "initializes",
    "to": 483
  }, {
    "from": 483,
    "label": "assigns",
    "to": 484
  }, {
    "from": 476,
    "label": "initializes",
    "to": 485
  }, {
    "from": 485,
    "label": "assigns",
    "to": 486
  }, {
    "from": 476,
    "label": "initializes",
    "to": 487
  }, {
    "from": 487,
    "label": "assigns",
    "to": 488
  }, {
    "from": 476,
    "label": "initializes",
    "to": 489
  }, {
    "from": 489,
    "label": "assigns",
    "to": 490
  }, {
    "from": 476,
    "label": "initializes",
    "to": 491
  }, {
    "from": 491,
    "label": "assigns",
    "to": 492
  }, {
    "from": 476,
    "label": "initializes",
    "to": 493
  }, {
    "from": 493,
    "label": "assigns",
    "to": 494
  }, {
    "from": 476,
    "label": "initializes",
    "to": 495
  }, {
    "from": 495,
    "label": "assigns",
    "to": 496
  }, {
    "from": 476,
    "label": "initializes",
    "to": 497
  }, {
    "from": 476,
    "label": "initializes",
    "to": 498
  }, {
    "from": 476,
    "label": "initializes",
    "to": 499
  }, {
    "from": 476,
    "label": "initializes",
    "to": 500
  }, {
    "from": 476,
    "label": "initializes",
    "to": 501
  }, {
    "from": 476,
    "label": "initializes",
    "to": 502
  }, {
    "from": 476,
    "label": "initializes",
    "to": 503
  }, {
    "from": 476,
    "label": "initializes",
    "to": 504
  }, {
    "from": 476,
    "label": "initializes",
    "to": 505
  }, {
    "from": 476,
    "label": "initializes",
    "to": 506
  }, {
    "from": 476,
    "label": "initializes",
    "to": 507
  }, {
    "from": 476,
    "label": "initializes",
    "to": 508
  }, {
    "from": 476,
    "label": "initializes",
    "to": 509
  }, {
    "from": 476,
    "label": "initializes",
    "to": 510
  }, {
    "from": 476,
    "label": "initializes",
    "to": 511
  }, {
    "from": 476,
    "label": "initializes",
    "to": 512
  }, {
    "from": 476,
    "label": "initializes",
    "to": 513
  }, {
    "from": 476,
    "label": "initializes",
    "to": 514
  }, {
    "from": 476,
    "label": "initializes",
    "to": 515
  }, {
    "from": 476,
    "label": "initializes",
    "to": 516
  }, {
    "from": 476,
    "label": "initializes",
    "to": 517
  }, {
    "from": 476,
    "label": "initializes",
    "to": 518
  }, {
    "from": 476,
    "label": "initializes",
    "to": 519
  }, {
    "from": 476,
    "label": "initializes",
    "to": 520
  }, {
    "from": 476,
    "label": "initializes",
    "to": 521
  }, {
    "from": 476,
    "label": "initializes",
    "to": 522
  }, {
    "from": 476,
    "label": "initializes",
    "to": 523
  }, {
    "from": 476,
    "label": "initializes",
    "to": 524
  }, {
    "from": 476,
    "label": "initializes",
    "to": 525
  }, {
    "from": 476,
    "label": "initializes",
    "to": 526
  }, {
    "from": 476,
    "label": "initializes",
    "to": 527
  }, {
    "from": 476,
    "label": "initializes",
    "to": 528
  }, {
    "from": 476,
    "label": "initializes",
    "to": 529
  }, {
    "from": 476,
    "label": "initializes",
    "to": 530
  }, {
    "from": 476,
    "label": "initializes",
    "to": 531
  }, {
    "from": 476,
    "label": "initializes",
    "to": 532
  }, {
    "from": 476,
    "label": "initializes",
    "to": 533
  }, {
    "from": 476,
    "label": "initializes",
    "to": 534
  }, {
    "from": 476,
    "label": "initializes",
    "to": 535
  }, {
    "from": 476,
    "label": "initializes",
    "to": 536
  }, {
    "from": 476,
    "label": "initializes",
    "to": 537
  }, {
    "from": 476,
    "label": "initializes",
    "to": 538
  }, {
    "from": 476,
    "label": "initializes",
    "to": 539
  }, {
    "from": 476,
    "label": "initializes",
    "to": 540
  }, {
    "from": 476,
    "label": "initializes",
    "to": 541
  }, {
    "from": 476,
    "label": "initializes",
    "to": 542
  }, {
    "from": 476,
    "label": "initializes",
    "to": 543
  }, {
    "from": 476,
    "label": "initializes",
    "to": 544
  }, {
    "from": 476,
    "label": "initializes",
    "to": 545
  }, {
    "from": 545,
    "label": "assigns",
    "to": 546
  }, {
    "from": 476,
    "label": "initializes",
    "to": 547
  }, {
    "from": 547,
    "label": "assigns",
    "to": 548
  }, {
    "from": 476,
    "label": "initializes",
    "to": 549
  }, {
    "from": 549,
    "label": "assigns",
    "to": 550
  }, {
    "from": 476,
    "label": "initializes",
    "to": 551
  }, {
    "from": 551,
    "label": "assigns",
    "to": 552
  }, {
    "from": 476,
    "label": "initializes",
    "to": 553
  }, {
    "from": 553,
    "label": "assigns",
    "to": 554
  }, {
    "from": 476,
    "label": "initializes",
    "to": 555
  }, {
    "from": 555,
    "label": "assigns",
    "to": 556
  }, {
    "from": 476,
    "label": "initializes",
    "to": 557
  }, {
    "from": 557,
    "label": "assigns",
    "to": 558
  }, {
    "from": 476,
    "label": "initializes",
    "to": 559
  }, {
    "from": 559,
    "label": "assigns",
    "to": 560
  }, {
    "from": 477,
    "label": "initializes",
    "to": 475
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 383
  }, {
    "from": 289,
    "label": "hasArgument",
    "to": 385
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 386
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 351,
    "label": "hasArgument",
    "to": 390
  }, {
    "from": 359,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 359,
    "label": "hasArgument",
    "to": 390
  }, {
    "from": 367,
    "label": "hasArgument",
    "to": 392
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "controls",
    "type": "module"
  }, {
    "id": 2,
    "text": "function OnSplitterEvent(event)\r\n    -- asserts if these are called inappropriately\r\n    -- {\"GetSashPosition\", \"GetX\", \"GetY\", \"GetWindowBeingRemoved\"}\r\n    local typ = event:GetEventType()\r\n    local s = \"\"\r\n\r\n    if (typ == wx.wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING) or (typ == wx.wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED) then\r\n        s = s..\"GetSashPosition=\"..tostring(event:GetSashPosition())\r\n    end\r\n    if (typ == wx.wxEVT_COMMAND_SPLITTER_DOUBLECLICKED) then\r\n        s = s..\" GetX=\"..tostring(event:GetX())\r\n        s = s..\" GetY=\"..tostring(event:GetY())\r\n    end\r\n    if (typ == wx.wxEVT_COMMAND_SPLITTER_UNSPLIT) then\r\n        s = s..\" GetWindowBeingRemoved=\"..tostring(event:GetWindowBeingRemoved())\r\n    end\r\n\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local typ = event:GetEventType()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if (typ == wx.wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING) or (typ == wx.wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED) then\r\n        s = s..\"GetSashPosition=\"..tostring(event:GetSashPosition())\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "s = s..\"GetSashPosition=\"..tostring(event:GetSashPosition())",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if (typ == wx.wxEVT_COMMAND_SPLITTER_DOUBLECLICKED) then\r\n        s = s..\" GetX=\"..tostring(event:GetX())\r\n        s = s..\" GetY=\"..tostring(event:GetY())\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "s = s..\" GetX=\"..tostring(event:GetX())",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "s = s..\" GetY=\"..tostring(event:GetY())",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if (typ == wx.wxEVT_COMMAND_SPLITTER_UNSPLIT) then\r\n        s = s..\" GetWindowBeingRemoved=\"..tostring(event:GetWindowBeingRemoved())\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "s = s..\" GetWindowBeingRemoved=\"..tostring(event:GetWindowBeingRemoved())",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function FuncsToString(event, funcTable, evtClassName)\r\n    local t = {}\r\n\r\n    for n = 1, #funcTable do\r\n        local v = event[funcTable[n]](event) -- each item is a function name\r\n\r\n        local s = funcTable[n]..\"=\"\r\n\r\n        local typ_name, typ = wxlua.type(v)\r\n\r\n        if typ == wxlua.WXLUA_TSTRING then\r\n            s = s..\"'\"..tostring(v)..\"'\"\r\n        elseif typ == wxlua.WXLUA_TTABLE then\r\n            s = s..\"(\"..table.concat(v, \",\")..\")\"\r\n        elseif typ <= wxlua.WXLUA_T_MAX then -- the rest of generic lua types\r\n            s = s..tostring(v)\r\n        elseif typ_name == \"wxPoint\" then\r\n            s = s..string.format(\"(%d, %d) \", v:GetX(), v:GetY())\r\n        elseif typ_name == \"wxSize\" then\r\n            s = s..string.format(\"(%d, %d) \", v:GetWidth(), v:GetHeight())\r\n        elseif typ_name == \"wxRect\" then\r\n            s = s..string.format(\"(%d, %d, %d, %d)\", v:GetX(), v:GetY(), v:GetWidth(), v:GetHeight())\r\n        elseif typ_name == \"wxColour\" then\r\n            s = s..v:GetAsString()\r\n            v:delete()\r\n        elseif typ_name == \"wxFont\" then\r\n            s = s..v:GetNativeFontInfoDesc()\r\n            v:delete()\r\n        elseif typ_name == \"wxDateTime\" then\r\n            s = s..v:Format()\r\n        elseif typ_name == \"wxTreeItemId\" then\r\n            local tree = event:GetEventObject():DynamicCast(\"wxTreeCtrl\")\r\n            if v:IsOk() then\r\n                s = s..typ_name..\"(tree:GetItemText='\"..tree:GetItemText(v)..\"')\"\r\n            else\r\n                s = s..typ_name..\"!IsOk\"\r\n            end\r\n        elseif typ_name == \"wxListItem\" then\r\n            s = s..typ_name..\"(GetId='\"..v:GetId()..\"')\"\r\n        elseif typ_name == \"wxWindow\" then\r\n            s = s..typ_name..\"(GetName=\"..v:GetName()..\")\"\r\n        else\r\n            s = s..tostring(v)\r\n            --v:delete()\r\n            -- If we haven't handled it yet, we probably should\r\n            print(\"Unhandled wxLua data type in FuncsToString from \", wxlua.type(event), typ_name, s, evtClassName)\r\n        end\r\n\r\n        table.insert(t, s)\r\n    end\r\n\r\n    return table.concat(t, \", \")\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for n = 1, #funcTable do\r\n        local v = event[funcTable[n]](event) -- each item is a function name\r\n\r\n        local s = funcTable[n]..\"=\"\r\n\r\n        local typ_name, typ = wxlua.type(v)\r\n\r\n        if typ == wxlua.WXLUA_TSTRING then\r\n            s = s..\"'\"..tostring(v)..\"'\"\r\n        elseif typ == wxlua.WXLUA_TTABLE then\r\n            s = s..\"(\"..table.concat(v, \",\")..\")\"\r\n        elseif typ <= wxlua.WXLUA_T_MAX then -- the rest of generic lua types\r\n            s = s..tostring(v)\r\n        elseif typ_name == \"wxPoint\" then\r\n            s = s..string.format(\"(%d, %d) \", v:GetX(), v:GetY())\r\n        elseif typ_name == \"wxSize\" then\r\n            s = s..string.format(\"(%d, %d) \", v:GetWidth(), v:GetHeight())\r\n        elseif typ_name == \"wxRect\" then\r\n            s = s..string.format(\"(%d, %d, %d, %d)\", v:GetX(), v:GetY(), v:GetWidth(), v:GetHeight())\r\n        elseif typ_name == \"wxColour\" then\r\n            s = s..v:GetAsString()\r\n            v:delete()\r\n        elseif typ_name == \"wxFont\" then\r\n            s = s..v:GetNativeFontInfoDesc()\r\n            v:delete()\r\n        elseif typ_name == \"wxDateTime\" then\r\n            s = s..v:Format()\r\n        elseif typ_name == \"wxTreeItemId\" then\r\n            local tree = event:GetEventObject():DynamicCast(\"wxTreeCtrl\")\r\n            if v:IsOk() then\r\n                s = s..typ_name..\"(tree:GetItemText='\"..tree:GetItemText(v)..\"')\"\r\n            else\r\n                s = s..typ_name..\"!IsOk\"\r\n            end\r\n        elseif typ_name == \"wxListItem\" then\r\n            s = s..typ_name..\"(GetId='\"..v:GetId()..\"')\"\r\n        elseif typ_name == \"wxWindow\" then\r\n            s = s..typ_name..\"(GetName=\"..v:GetName()..\")\"\r\n        else\r\n            s = s..tostring(v)\r\n            --v:delete()\r\n            -- If we haven't handled it yet, we probably should\r\n            print(\"Unhandled wxLua data type in FuncsToString from \", wxlua.type(event), typ_name, s, evtClassName)\r\n        end\r\n\r\n        table.insert(t, s)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 17,
    "text": "local v = event[funcTable[n]](event)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local s = funcTable[n]..\"=\"",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local typ_name, typ = wxlua.type(v)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if typ == wxlua.WXLUA_TSTRING then\r\n            s = s..\"'\"..tostring(v)..\"'\"\r\n        elseif typ == wxlua.WXLUA_TTABLE then\r\n            s = s..\"(\"..table.concat(v, \",\")..\")\"\r\n        elseif typ <= wxlua.WXLUA_T_MAX then -- the rest of generic lua types\r\n            s = s..tostring(v)\r\n        elseif typ_name == \"wxPoint\" then\r\n            s = s..string.format(\"(%d, %d) \", v:GetX(), v:GetY())\r\n        elseif typ_name == \"wxSize\" then\r\n            s = s..string.format(\"(%d, %d) \", v:GetWidth(), v:GetHeight())\r\n        elseif typ_name == \"wxRect\" then\r\n            s = s..string.format(\"(%d, %d, %d, %d)\", v:GetX(), v:GetY(), v:GetWidth(), v:GetHeight())\r\n        elseif typ_name == \"wxColour\" then\r\n            s = s..v:GetAsString()\r\n            v:delete()\r\n        elseif typ_name == \"wxFont\" then\r\n            s = s..v:GetNativeFontInfoDesc()\r\n            v:delete()\r\n        elseif typ_name == \"wxDateTime\" then\r\n            s = s..v:Format()\r\n        elseif typ_name == \"wxTreeItemId\" then\r\n            local tree = event:GetEventObject():DynamicCast(\"wxTreeCtrl\")\r\n            if v:IsOk() then\r\n                s = s..typ_name..\"(tree:GetItemText='\"..tree:GetItemText(v)..\"')\"\r\n            else\r\n                s = s..typ_name..\"!IsOk\"\r\n            end\r\n        elseif typ_name == \"wxListItem\" then\r\n            s = s..typ_name..\"(GetId='\"..v:GetId()..\"')\"\r\n        elseif typ_name == \"wxWindow\" then\r\n            s = s..typ_name..\"(GetName=\"..v:GetName()..\")\"\r\n        else\r\n            s = s..tostring(v)\r\n            --v:delete()\r\n            -- If we haven't handled it yet, we probably should\r\n            print(\"Unhandled wxLua data type in FuncsToString from \", wxlua.type(event), typ_name, s, evtClassName)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "s = s..\"'\"..tostring(v)..\"'\"",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "s = s..\"(\"..table.concat(v, \",\")..\")\"",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "s = s..tostring(v)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "s = s..string.format(\"(%d, %d) \", v:GetX(), v:GetY())",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "s = s..string.format(\"(%d, %d) \", v:GetWidth(), v:GetHeight())",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "s = s..string.format(\"(%d, %d, %d, %d)\", v:GetX(), v:GetY(), v:GetWidth(), v:GetHeight())",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "s = s..v:GetAsString()",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "v:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "s = s..v:GetNativeFontInfoDesc()",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "s = s..v:Format()",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "local tree = event:GetEventObject():DynamicCast(\"wxTreeCtrl\")",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if v:IsOk() then\r\n                s = s..typ_name..\"(tree:GetItemText='\"..tree:GetItemText(v)..\"')\"\r\n            else\r\n                s = s..typ_name..\"!IsOk\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "s = s..typ_name..\"(tree:GetItemText='\"..tree:GetItemText(v)..\"')\"",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "s = s..typ_name..\"!IsOk\"",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "s = s..typ_name..\"(GetId='\"..v:GetId()..\"')\"",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "s = s..typ_name..\"(GetName=\"..v:GetName()..\")\"",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "print(\"Unhandled wxLua data type in FuncsToString from \", wxlua.type(event), typ_name, s, evtClassName)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "table.insert(t, s)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function OnEvent(event)\r\n    local skip = true\r\n    local evtClassName = wxlua.typename(wxEVT_TableByType[event:GetEventType()].wxluatype)\r\n    local evtTypeStr   = wxEVT_TableByType[event:GetEventType()].name\r\n\r\n    -- You absolutely must create a wxPaintDC for a wxEVT_PAINT in MSW\r\n    -- to clear the region to be updated, otherwise you'll keep getting them\r\n    -- Note: we always skip this anyway, see skipEVTs, but just to be sure...\r\n    if event:GetEventType() == wx.wxEVT_PAINT then\r\n        local dc = wx.wxPaintDC(event:GetEventObject():DynamicCast(\"wxWindow\"))\r\n        dc:delete()\r\n    end\r\n\r\n    -- during shutdown, we nil textCtrl since events are sent and we don't want them anymore\r\n    if (not textCtrl) or ignoreEVTs[evtTypeStr] or ignoreControls[event:GetId()] then\r\n        event:Skip(skip)\r\n        return\r\n    end\r\n\r\n    --print(evtClassName, wxEVT_TableByType[event:GetEventType()].name)\r\n\r\n    -- try to figure out where this came from using the GetEventObject()\r\n    local obj_str = \"nil\"\r\n    if event:GetEventObject() then\r\n        local classInfo = event:GetEventObject():GetClassInfo()\r\n        if classInfo then\r\n            obj_str = classInfo:GetClassName()\r\n        else\r\n            obj_str = \"No wxClassInfo\"\r\n        end\r\n    end\r\n\r\n    local s = string.format(\"%s %s(%s) GetEventObject=%s\", wx.wxNow(), evtClassName, evtTypeStr, obj_str)\r\n\r\n    -- Gather up all the info from the functions for the event and it's base classes\r\n    while wxEvent_GetFuncs[evtClassName] do\r\n        if type(wxEvent_GetFuncs[evtClassName]) == \"table\" then\r\n            s = s..\"\\n\\t\"..evtClassName..\" - \"..FuncsToString(event, wxEvent_GetFuncs[evtClassName], evtClassName)\r\n        else\r\n            s = s..\"\\n\\t\"..evtClassName..\" - \"..wxEvent_GetFuncs[evtClassName](event)\r\n        end\r\n        evtClassName = wxCLASS_TableByName[evtClassName].baseclassName\r\n    end\r\n\r\n    -- for debugging, this means we need to add it to the wxEvent_GetFuncs table\r\n    if evtClassName ~= \"wxObject\" then\r\n        print(\"Unhandled wxEventXXX type in OnEvent:\", evtClassName)\r\n    end\r\n\r\n    textCtrl:AppendText(s..\"\\n\\n\")\r\n\r\n    event:Skip(skip)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local skip = true",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local evtClassName = wxlua.typename(wxEVT_TableByType[event:GetEventType()].wxluatype)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local evtTypeStr   = wxEVT_TableByType[event:GetEventType()].name",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if event:GetEventType() == wx.wxEVT_PAINT then\r\n        local dc = wx.wxPaintDC(event:GetEventObject():DynamicCast(\"wxWindow\"))\r\n        dc:delete()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local dc = wx.wxPaintDC(event:GetEventObject():DynamicCast(\"wxWindow\"))",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "dc:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "if (not textCtrl) or ignoreEVTs[evtTypeStr] or ignoreControls[event:GetId()] then\r\n        event:Skip(skip)\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "event:Skip(skip)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local obj_str = \"nil\"",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if event:GetEventObject() then\r\n        local classInfo = event:GetEventObject():GetClassInfo()\r\n        if classInfo then\r\n            obj_str = classInfo:GetClassName()\r\n        else\r\n            obj_str = \"No wxClassInfo\"\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "local classInfo = event:GetEventObject():GetClassInfo()",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if classInfo then\r\n            obj_str = classInfo:GetClassName()\r\n        else\r\n            obj_str = \"No wxClassInfo\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "obj_str = classInfo:GetClassName()",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "obj_str = \"No wxClassInfo\"",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local s = string.format(\"%s %s(%s) GetEventObject=%s\", wx.wxNow(), evtClassName, evtTypeStr, obj_str)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "while wxEvent_GetFuncs[evtClassName] do\r\n        if type(wxEvent_GetFuncs[evtClassName]) == \"table\" then\r\n            s = s..\"\\n\\t\"..evtClassName..\" - \"..FuncsToString(event, wxEvent_GetFuncs[evtClassName], evtClassName)\r\n        else\r\n            s = s..\"\\n\\t\"..evtClassName..\" - \"..wxEvent_GetFuncs[evtClassName](event)\r\n        end\r\n        evtClassName = wxCLASS_TableByName[evtClassName].baseclassName\r\n    end",
    "type": "statement:while"
  }, {
    "id": 57,
    "text": "if type(wxEvent_GetFuncs[evtClassName]) == \"table\" then\r\n            s = s..\"\\n\\t\"..evtClassName..\" - \"..FuncsToString(event, wxEvent_GetFuncs[evtClassName], evtClassName)\r\n        else\r\n            s = s..\"\\n\\t\"..evtClassName..\" - \"..wxEvent_GetFuncs[evtClassName](event)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "s = s..\"\\n\\t\"..evtClassName..\" - \"..FuncsToString(event, wxEvent_GetFuncs[evtClassName], evtClassName)",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "s = s..\"\\n\\t\"..evtClassName..\" - \"..wxEvent_GetFuncs[evtClassName](event)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "evtClassName = wxCLASS_TableByName[evtClassName].baseclassName",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if evtClassName ~= \"wxObject\" then\r\n        print(\"Unhandled wxEventXXX type in OnEvent:\", evtClassName)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "print(\"Unhandled wxEventXXX type in OnEvent:\", evtClassName)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "textCtrl:AppendText(s..\"\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function CreateControlsWindow(parent)\r\n\r\n    local scrollWin = wx.wxScrolledWindow(parent, ID_PARENT_SCROLLEDWINDOW,\r\n                                    wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                    wx.wxHSCROLL + wx.wxVSCROLL)\r\n\r\n    -- Give the scrollwindow enough size so sizer works when calling Fit()\r\n    scrollWin:SetScrollbars(15, 15, 400, 1000, 0, 0, false)\r\n\r\n    -- try to slightly change the background colour, doesn't work in GTK\r\n    if false then\r\n        local c = scrollWin:GetBackgroundColour()\r\n        local d = 20\r\n        if (c:Red() >= 255-d) and (c:Green() >= 255-d) and (c:Blue() >= 255-d) then\r\n            d = -d\r\n        end\r\n\r\n        local c2 = wx.wxColour(c:Red()+d, c:Green()+d, c:Blue()+d)\r\n        scrollWin:SetBackgroundColour(c2)\r\n        c:delete()\r\n        c2:delete()\r\n    end\r\n\r\n    local flexSizer = wx.wxFlexGridSizer(50, 2, 5, 5)\r\n    flexSizer:AddGrowableCol(1)\r\n\r\n    local control = nil -- not used outside of this function\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    -- Connect ALL events to the window\r\n    local function ConnectEvents(control)\r\n        -- Note this is the same as doing this, but we connect all of them\r\n        -- win:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_BUTTON_CLICKED, OnCommandEvent)\r\n\r\n        for i = 1, #wxEVT_Array do\r\n            if not skipEVTs[wxEVT_Array[i].name] then\r\n                control:Connect(wx.wxID_ANY, wxEVT_Array[i].eventType, OnEvent)\r\n            end\r\n        end\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    local function AddControl(txt, control, real_control)\r\n        local statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, txt)\r\n\r\n        flexSizer:Add(statText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5)\r\n        flexSizer:Add(control, 0, wx.wxALIGN_LEFT+wx.wxALL, 5)\r\n\r\n        flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 0, wx.wxEXPAND+wx.wxALL, 5)\r\n        flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 0, wx.wxEXPAND+wx.wxALL, 5)\r\n\r\n        ConnectEvents(real_control or control) -- connect to the real control\r\n\r\n        local a = string.find(txt, \"\\n\", 1, 1)\r\n        if a then txt = string.sub(txt, 1, a-1) end\r\n\r\n        if real_control and real_control:IsKindOf(wx.wxClassInfo.FindClass(\"wxWindow\")) then\r\n            controlTable[real_control:GetId()] = txt\r\n        else\r\n            controlTable[control:GetId()] = txt\r\n        end\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    local function CreateBookPage(parent, num)\r\n        local p = wx.wxPanel(parent, wx.wxID_ANY)\r\n        local s = wx.wxBoxSizer(wx.wxVERTICAL)\r\n        local t = wx.wxStaticText(p, wx.wxID_ANY, \"Window \"..num)\r\n        s:Add(t, 0, wx.wxCENTER, 5)\r\n        s:SetMinSize(200,200) -- force it to be some reasonable size\r\n        p:SetSizer(s)\r\n\r\n        p:SetBackgroundColour(colorList[num]) -- make them easy to find\r\n\r\n        return p\r\n    end\r\n\r\n    local function SetupBook(control)\r\n        -- Note we can't just use a static text here since it does not obey\r\n        -- any set size, set min size calls and always shrinks to the\r\n        -- size that just fits the text\r\n\r\n        control:SetImageList(imageList)\r\n        control:AddPage(CreateBookPage(control, 1), \"Page 1\", true, 0)\r\n        control:AddPage(CreateBookPage(control, 2), \"Page 2\", false, 1)\r\n        control:AddPage(CreateBookPage(control, 3), \"Page 3\", false, 2)\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    local path = nil\r\n    local paths = {\"throbber.gif\", \"../art/throbber.gif\", \"../../art/throbber.gif\", \"../../../art/throbber.gif\"}\r\n    for n = 1, #paths do\r\n        if wx.wxFileExists(paths[n]) then path = paths[n]; break; end\r\n    end\r\n\r\n    if wx.wxAnimation and path then\r\n        local ani = wx.wxAnimation() -- note cannot load from constuctor in GTK\r\n        ani:LoadFile(path)\r\n\r\n        control = wx.wxAnimationCtrl(scrollWin, ID_ANIMATIONCTRL, ani,\r\n                                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n        control:Play()\r\n        ani:delete()\r\n    else\r\n        control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxAnimation is missing or unable to load [../art/]throbber.gif\")\r\n    end\r\n    AddControl(\"wxAnimationCtrl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxBitmapButton(scrollWin, ID_BITMAPBUTTON, bmp,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxBitmapButton\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxBitmapComboBox(scrollWin, ID_BITMAPCOMBOBOX, \"wxBitmapComboBox\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         {\"Item 1\", \"Item 2\", \"Item 3 text is long to check default size\"},\r\n                                         wx.wxTE_PROCESS_ENTER) -- generates event when enter is pressed\r\n    control:Append(\"Appended w/ bitmap\", bmp)\r\n    control:Insert(\"Inserted at 0 w/ bitmap\", bmp, 0)\r\n    control:SetItemBitmap(2, bmp)\r\n    AddControl(\"wxBitmapComboBox\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxButton(scrollWin, ID_BUTTON, \"wxButton\",\r\n                          wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxButton\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    do\r\n    -- Note: the wxCalendar control needs some help since it is made up of\r\n    -- separate controls, put in on a panel first and that way the sizer that\r\n    -- lays out all of these windows doesn't have a problem\r\n    local p = wx.wxPanel(scrollWin, wx.wxID_ANY)\r\n    local s = wx.wxBoxSizer(wx.wxVERTICAL)\r\n\r\n    control = wx.wxCalendarCtrl(p, ID_CALENDARCTRL, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxCAL_SHOW_HOLIDAYS+wx.wxCAL_BORDER_SQUARE)\r\n    s:Add(control, 1, wx.wxEXPAND, 5)\r\n    p:SetSizer(s)\r\n    s:SetSizeHints(p)\r\n    AddControl(\"wxCalendarCtrl\", p, control)\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxCheckBox(scrollWin, ID_CHECKBOX, \"wxCheckBox\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxCheckBox\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxCheckListBox(scrollWin, ID_CHECKLISTBOX,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         {\"Item 1\", \"Item 2\", \"Item 3\"})\r\n    AddControl(\"wxCheckListBox\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxChoice(scrollWin, ID_CHOICE,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         {\"Item 1\", \"Item 2\", \"Item 3\"})\r\n    AddControl(\"wxChoice\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxChoicebook(scrollWin, ID_CHOICEBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    SetupBook(control)\r\n    AddControl(\"wxChoicebook\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxCollapsiblePane(scrollWin, ID_COLLAPSIBLEPANE, \"wxCollapsiblePane\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxCollapsiblePane\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxComboBox(scrollWin, ID_COMBOBOX, \"wxComboBox\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         {\"Item 1\", \"Item 2\", \"Item 3 text is long to check default size\"},\r\n                                         wx.wxTE_PROCESS_ENTER) -- generates event when enter is pressed\r\n    control:Append(\"Appended item\")\r\n    control:Insert(\"Inserted at 0\", 0)\r\n    AddControl(\"wxComboBox\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxControl(scrollWin, ID_CONTROL,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxSUNKEN_BORDER)\r\n    AddControl(\"wxControl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKERCTRL, wx.wxGetCwd(), \"I'm the message parameter\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_USE_TEXTCTRL)\r\n    AddControl(\"wxDirPickerCtrl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKERCTRL, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_USE_TEXTCTRL)\r\n    AddControl(\"wxFilePickerCtrl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKERCTRL, wx.wxITALIC_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_USEFONT_FOR_LABEL)\r\n    AddControl(\"wxFontPickerCtrl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxGauge(scrollWin, ID_GAUGE, 100,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    control:SetValue(30)\r\n    AddControl(\"wxGauge\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxGenericDirCtrl(scrollWin, ID_GENERICDIRCTRL, wx.wxDirDialogDefaultFolderStr,\r\n                            wx.wxDefaultPosition, wx.wxSize(200,200))\r\n    AddControl(\"wxGenericDirCtrl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxGrid(scrollWin, ID_GRID,\r\n                            wx.wxDefaultPosition, wx.wxSize(200,200))\r\n    control:CreateGrid(10, 20)\r\n    AddControl(\"wxGrid\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"TODO - wxHtml windows\")\r\n    AddControl(\"wxHtml\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxHyperlinkCtrl(scrollWin, ID_HYPERLINKCTRL,\r\n                            \"Goto wxlua.sourceforge.net\", \"http://wxlua.sourceforge.net\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxHyperlinkCtrl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxListBox(scrollWin, ID_LISTBOX,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            {\"Item 1\", \"Item 2\", \"Item 3\"},\r\n                            wx.wxLB_EXTENDED)\r\n    AddControl(\"wxListBox\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxListCtrl(scrollWin, ID_LISTCTRL,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, 200),\r\n                            wx.wxLC_REPORT)\r\n    control:InsertColumn(0, \"Col 1\")\r\n    control:InsertColumn(1, \"Col 2\")\r\n    control:InsertItem(0, \"Item 1\")\r\n    control:InsertItem(1, \"Item 2\")\r\n    control:InsertItem(2, \"Item 3\")\r\n    AddControl(\"wxListCtrl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxListView is a wxListCtrl with a couple of methods added\")\r\n    AddControl(\"wxListView\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxListbook(scrollWin, ID_LISTBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxSize(200,200))\r\n    SetupBook(control)\r\n    AddControl(\"wxListbook\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    -- wxMediaCtrl\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    do\r\n    -- Note: The wxNotebook in GTK will not draw it's tabs correctly if placed\r\n    -- directly on the scrolled window, put it in a panel first.\r\n    local p = wx.wxPanel(scrollWin, wx.wxID_ANY)\r\n    local s = wx.wxBoxSizer(wx.wxVERTICAL)\r\n\r\n    control = wx.wxNotebook(p, ID_NOTEBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxSize(200,200))\r\n    SetupBook(control)\r\n\r\n    s:Add(control, 1, wx.wxEXPAND)\r\n    s:SetMinSize(200,200)\r\n    p:SetSizer(s)\r\n    s:SetSizeHints(p)\r\n    AddControl(\"wxNotebook\", p, control)\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxPanel(scrollWin, ID_PANEL,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxSUNKEN_BORDER)\r\n    AddControl(\"wxPanel\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxRadioBox(scrollWin, ID_RADIOBOX, \"wxRadioBox\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            {\"Item 1\", \"Item 2\", \"Item 3\"}, 1,\r\n                            wx.wxSUNKEN_BORDER)\r\n    AddControl(\"wxRadioBox\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxRadioButton(scrollWin, ID_RADIOBUTTON, \"wxRadioButton\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxRadioButton\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxSashLayoutWindow must have a top level window as parent\")\r\n    AddControl(\"wxSashLayoutWindow\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxSashWindow must have a top level window as parent\")\r\n    AddControl(\"wxSashWindow\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxScrollBar(scrollWin, ID_SCROLLBAR,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, -1))\r\n    control:SetScrollbar(10, 10, 100, 20)\r\n    AddControl(\"wxScrollBar\\n range=100\\n thumb=10\\n pageSize=20\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxScrolledWindow(scrollWin, ID_SCROLLEDWINDOW,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, 200))\r\n    control:SetScrollbars(10, 10, 100, 100)\r\n    control:SetBackgroundColour(colorList[1])\r\n    wx.wxButton(control, wx.wxID_ANY, \"Child button of wxScrolledWindow\", wx.wxPoint(50, 50))\r\n    AddControl(\"wxScrolledWindow\\n pixelsPerUnit=10\\n noUnits=100\", control)\r\n    flexSizer:SetItemMinSize(control, 200, 200)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxSlider(scrollWin, ID_SLIDER, 10, 0, 100,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, -1))\r\n    AddControl(\"wxSlider\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxSpinButton(scrollWin, ID_SPINBUTTON,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxSpinButton\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxSpinCtrl(scrollWin, ID_SPINCTRL, \"wxSpinCtrl\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxSpinCtrl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    do\r\n    -- Note: putting the splitter window directly on the scrolled window\r\n    -- and in it's sizer makes the sash undraggable, put it in a panel first\r\n    local p = wx.wxPanel(scrollWin, wx.wxID_ANY)\r\n    local s = wx.wxBoxSizer(wx.wxVERTICAL)\r\n\r\n    control = wx.wxSplitterWindow(p, ID_SPLITTERWINDOW,\r\n                            wx.wxDefaultPosition, wx.wxSize(300, 200))\r\n    control:SplitVertically(CreateBookPage(control, 1),\r\n                            CreateBookPage(control, 2),\r\n                            100)\r\n    s:SetMinSize(300, 200)\r\n    p:SetSizer(s)\r\n    s:SetSizeHints(p)\r\n\r\n    AddControl(\"wxSplitterWindow\", p, control)\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxStaticBitmap(scrollWin, ID_STATICBITMAP, bmp,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxStaticBitmap\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxStaticBox(scrollWin, ID_STATICBOX, \"wxStaticBox\",\r\n                            wx.wxDefaultPosition, wx.wxSize(200, 100))\r\n    control:SetBackgroundColour(colorList[1])\r\n    AddControl(\"wxStaticBox\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxStaticLine(scrollWin, ID_STATICLINE,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, -1))\r\n    AddControl(\"wxStaticLine\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    do\r\n    local p = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"See taskbar for icon\")\r\n    taskbarIcon = wx.wxTaskBarIcon()\r\n    local icon = wx.wxIcon()\r\n    icon:CopyFromBitmap(bmp)\r\n    taskbarIcon:SetIcon(icon, \"Tooltop for wxTaskBarIcon from controls.wx.lua\")\r\n    icon:delete()\r\n    AddControl(\"wxTaskBarIcon\", p, taskbarIcon)\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxTextCtrl(scrollWin, ID_TEXTCTRL, \"wxTextCtrl\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxTE_PROCESS_ENTER)\r\n    AddControl(\"wxTextCtrl\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxToggleButton(scrollWin, ID_TOGGLEBUTTON, \"wxToggleButton\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    AddControl(\"wxToggleButton\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxToolBar(scrollWin, ID_TOOLBAR,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n    control:AddTool(wx.wxID_ANY, \"A tool 1\", bmp, \"Help for a tool 1\", wx.wxITEM_NORMAL)\r\n    control:AddTool(wx.wxID_ANY, \"A tool 2\", bmp, \"Help for a tool 2\", wx.wxITEM_NORMAL)\r\n    control:AddSeparator()\r\n    control:AddCheckTool(wx.wxID_ANY, \"A check tool 1\", bmp, wx.wxNullBitmap, \"Short help for checktool 1\", \"Long help for checktool \")\r\n    control:AddCheckTool(wx.wxID_ANY, \"A check tool 2\", bmp, wx.wxNullBitmap, \"Short help for checktool 2\", \"Long help for checktool 2\")\r\n    AddControl(\"wxToolBar\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxToolbook(scrollWin, ID_TOOLBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxSize(200,200))\r\n    SetupBook(control)\r\n    AddControl(\"wxToolbook\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxTreebook(scrollWin, ID_TREEBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxSize(200,200))\r\n    SetupBook(control)\r\n    -- Now add special pages for the treebook\r\n    control:AddSubPage(CreateBookPage(control, 4), \"Subpage 1\", false, 3)\r\n    AddControl(\"wxTreebook\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    do\r\n    control = wx.wxTreeCtrl(scrollWin, ID_TREECTRL,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, 200),\r\n                            wx.wxTR_HAS_BUTTONS+wx.wxTR_MULTIPLE)\r\n    control:SetImageList(imageList)\r\n    local item = control:AddRoot(\"Root Note\", 0)\r\n    control:AppendItem(item, \"Item 1\", 1)\r\n    control:AppendItem(item, \"Item 2\")\r\n    item = control:AppendItem(item, \"Item 3\", 2)\r\n    item = control:AppendItem(item, \"Item 3:1\")\r\n    item = control:AppendItem(item, \"Item 3:2\", 3)\r\n\r\n    AddControl(\"wxTreeCtrl\", control)\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    control = wx.wxWindow(scrollWin, ID_WINDOW,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxSUNKEN_BORDER)\r\n    AddControl(\"wxWindow\", control)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    scrollWin:SetSizer(flexSizer)\r\n    flexSizer:Fit(scrollWin)\r\n\r\n    return scrollWin\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local scrollWin = wx.wxScrolledWindow(parent, ID_PARENT_SCROLLEDWINDOW,\r\n                                    wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                    wx.wxHSCROLL + wx.wxVSCROLL)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "scrollWin:SetScrollbars(15, 15, 400, 1000, 0, 0, false)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "if false then\r\n        local c = scrollWin:GetBackgroundColour()\r\n        local d = 20\r\n        if (c:Red() >= 255-d) and (c:Green() >= 255-d) and (c:Blue() >= 255-d) then\r\n            d = -d\r\n        end\r\n\r\n        local c2 = wx.wxColour(c:Red()+d, c:Green()+d, c:Blue()+d)\r\n        scrollWin:SetBackgroundColour(c2)\r\n        c:delete()\r\n        c2:delete()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local c = scrollWin:GetBackgroundColour()",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local d = 20",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if (c:Red() >= 255-d) and (c:Green() >= 255-d) and (c:Blue() >= 255-d) then\r\n            d = -d\r\n        end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "d = -d",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "local c2 = wx.wxColour(c:Red()+d, c:Green()+d, c:Blue()+d)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "scrollWin:SetBackgroundColour(c2)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "c:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "c2:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "local flexSizer = wx.wxFlexGridSizer(50, 2, 5, 5)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "flexSizer:AddGrowableCol(1)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "local control = nil",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local function ConnectEvents(control)\r\n        -- Note this is the same as doing this, but we connect all of them\r\n        -- win:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_BUTTON_CLICKED, OnCommandEvent)\r\n\r\n        for i = 1, #wxEVT_Array do\r\n            if not skipEVTs[wxEVT_Array[i].name] then\r\n                control:Connect(wx.wxID_ANY, wxEVT_Array[i].eventType, OnEvent)\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 81,
    "text": "for i = 1, #wxEVT_Array do\r\n            if not skipEVTs[wxEVT_Array[i].name] then\r\n                control:Connect(wx.wxID_ANY, wxEVT_Array[i].eventType, OnEvent)\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 82,
    "text": "if not skipEVTs[wxEVT_Array[i].name] then\r\n                control:Connect(wx.wxID_ANY, wxEVT_Array[i].eventType, OnEvent)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "control:Connect(wx.wxID_ANY, wxEVT_Array[i].eventType, OnEvent)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "local function AddControl(txt, control, real_control)\r\n        local statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, txt)\r\n\r\n        flexSizer:Add(statText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5)\r\n        flexSizer:Add(control, 0, wx.wxALIGN_LEFT+wx.wxALL, 5)\r\n\r\n        flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 0, wx.wxEXPAND+wx.wxALL, 5)\r\n        flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 0, wx.wxEXPAND+wx.wxALL, 5)\r\n\r\n        ConnectEvents(real_control or control) -- connect to the real control\r\n\r\n        local a = string.find(txt, \"\\n\", 1, 1)\r\n        if a then txt = string.sub(txt, 1, a-1) end\r\n\r\n        if real_control and real_control:IsKindOf(wx.wxClassInfo.FindClass(\"wxWindow\")) then\r\n            controlTable[real_control:GetId()] = txt\r\n        else\r\n            controlTable[control:GetId()] = txt\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 85,
    "text": "local statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, txt)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "flexSizer:Add(statText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "flexSizer:Add(control, 0, wx.wxALIGN_LEFT+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 0, wx.wxEXPAND+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "ConnectEvents(real_control or control)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local a = string.find(txt, \"\\n\", 1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if a then txt = string.sub(txt, 1, a-1) end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "txt = string.sub(txt, 1, a-1)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "if real_control and real_control:IsKindOf(wx.wxClassInfo.FindClass(\"wxWindow\")) then\r\n            controlTable[real_control:GetId()] = txt\r\n        else\r\n            controlTable[control:GetId()] = txt\r\n        end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "controlTable[real_control:GetId()] = txt",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "controlTable[control:GetId()] = txt",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "local function CreateBookPage(parent, num)\r\n        local p = wx.wxPanel(parent, wx.wxID_ANY)\r\n        local s = wx.wxBoxSizer(wx.wxVERTICAL)\r\n        local t = wx.wxStaticText(p, wx.wxID_ANY, \"Window \"..num)\r\n        s:Add(t, 0, wx.wxCENTER, 5)\r\n        s:SetMinSize(200,200) -- force it to be some reasonable size\r\n        p:SetSizer(s)\r\n\r\n        p:SetBackgroundColour(colorList[num]) -- make them easy to find\r\n\r\n        return p\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 97,
    "text": "local p = wx.wxPanel(parent, wx.wxID_ANY)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local s = wx.wxBoxSizer(wx.wxVERTICAL)",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local t = wx.wxStaticText(p, wx.wxID_ANY, \"Window \"..num)",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "s:Add(t, 0, wx.wxCENTER, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "s:SetMinSize(200,200)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "p:SetSizer(s)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "p:SetBackgroundColour(colorList[num])",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "local function SetupBook(control)\r\n        -- Note we can't just use a static text here since it does not obey\r\n        -- any set size, set min size calls and always shrinks to the\r\n        -- size that just fits the text\r\n\r\n        control:SetImageList(imageList)\r\n        control:AddPage(CreateBookPage(control, 1), \"Page 1\", true, 0)\r\n        control:AddPage(CreateBookPage(control, 2), \"Page 2\", false, 1)\r\n        control:AddPage(CreateBookPage(control, 3), \"Page 3\", false, 2)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 105,
    "text": "control:SetImageList(imageList)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "control:AddPage(CreateBookPage(control, 1), \"Page 1\", true, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "control:AddPage(CreateBookPage(control, 2), \"Page 2\", false, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "control:AddPage(CreateBookPage(control, 3), \"Page 3\", false, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "local path = nil",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "local paths = {\"throbber.gif\", \"../art/throbber.gif\", \"../../art/throbber.gif\", \"../../../art/throbber.gif\"}",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "for n = 1, #paths do\r\n        if wx.wxFileExists(paths[n]) then path = paths[n]; break; end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 112,
    "text": "if wx.wxFileExists(paths[n]) then path = paths[n]; break; end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "path = paths[n]",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "if wx.wxAnimation and path then\r\n        local ani = wx.wxAnimation() -- note cannot load from constuctor in GTK\r\n        ani:LoadFile(path)\r\n\r\n        control = wx.wxAnimationCtrl(scrollWin, ID_ANIMATIONCTRL, ani,\r\n                                            wx.wxDefaultPosition, wx.wxDefaultSize)\r\n        control:Play()\r\n        ani:delete()\r\n    else\r\n        control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxAnimation is missing or unable to load [../art/]throbber.gif\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "local ani = wx.wxAnimation()",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "ani:LoadFile(path)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "control = wx.wxAnimationCtrl(scrollWin, ID_ANIMATIONCTRL, ani,\r\n                                            wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "control:Play()",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "ani:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxAnimation is missing or unable to load [../art/]throbber.gif\")",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "AddControl(\"wxAnimationCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "control = wx.wxBitmapButton(scrollWin, ID_BITMAPBUTTON, bmp,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "AddControl(\"wxBitmapButton\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "control = wx.wxBitmapComboBox(scrollWin, ID_BITMAPCOMBOBOX, \"wxBitmapComboBox\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         {\"Item 1\", \"Item 2\", \"Item 3 text is long to check default size\"},\r\n                                         wx.wxTE_PROCESS_ENTER)",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "control:Append(\"Appended w/ bitmap\", bmp)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "control:Insert(\"Inserted at 0 w/ bitmap\", bmp, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "control:SetItemBitmap(2, bmp)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "AddControl(\"wxBitmapComboBox\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "control = wx.wxButton(scrollWin, ID_BUTTON, \"wxButton\",\r\n                          wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "AddControl(\"wxButton\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "do\r\n    -- Note: the wxCalendar control needs some help since it is made up of\r\n    -- separate controls, put in on a panel first and that way the sizer that\r\n    -- lays out all of these windows doesn't have a problem\r\n    local p = wx.wxPanel(scrollWin, wx.wxID_ANY)\r\n    local s = wx.wxBoxSizer(wx.wxVERTICAL)\r\n\r\n    control = wx.wxCalendarCtrl(p, ID_CALENDARCTRL, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxCAL_SHOW_HOLIDAYS+wx.wxCAL_BORDER_SQUARE)\r\n    s:Add(control, 1, wx.wxEXPAND, 5)\r\n    p:SetSizer(s)\r\n    s:SetSizeHints(p)\r\n    AddControl(\"wxCalendarCtrl\", p, control)\r\n    end",
    "type": "statement:do"
  }, {
    "id": 132,
    "text": "local p = wx.wxPanel(scrollWin, wx.wxID_ANY)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "control = wx.wxCalendarCtrl(p, ID_CALENDARCTRL, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxCAL_SHOW_HOLIDAYS+wx.wxCAL_BORDER_SQUARE)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "s:Add(control, 1, wx.wxEXPAND, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "s:SetSizeHints(p)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "AddControl(\"wxCalendarCtrl\", p, control)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "control = wx.wxCheckBox(scrollWin, ID_CHECKBOX, \"wxCheckBox\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "AddControl(\"wxCheckBox\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "control = wx.wxCheckListBox(scrollWin, ID_CHECKLISTBOX,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         {\"Item 1\", \"Item 2\", \"Item 3\"})",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "AddControl(\"wxCheckListBox\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "control = wx.wxChoice(scrollWin, ID_CHOICE,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         {\"Item 1\", \"Item 2\", \"Item 3\"})",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "AddControl(\"wxChoice\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "control = wx.wxChoicebook(scrollWin, ID_CHOICEBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "SetupBook(control)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "AddControl(\"wxChoicebook\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "control = wx.wxCollapsiblePane(scrollWin, ID_COLLAPSIBLEPANE, \"wxCollapsiblePane\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "AddControl(\"wxCollapsiblePane\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "control = wx.wxComboBox(scrollWin, ID_COMBOBOX, \"wxComboBox\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         {\"Item 1\", \"Item 2\", \"Item 3 text is long to check default size\"},\r\n                                         wx.wxTE_PROCESS_ENTER)",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "control:Append(\"Appended item\")",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "control:Insert(\"Inserted at 0\", 0)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "AddControl(\"wxComboBox\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "control = wx.wxControl(scrollWin, ID_CONTROL,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxSUNKEN_BORDER)",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "AddControl(\"wxControl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "control = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKERCTRL, wx.wxGetCwd(), \"I'm the message parameter\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_USE_TEXTCTRL)",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "AddControl(\"wxDirPickerCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "control = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKERCTRL, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_USE_TEXTCTRL)",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "AddControl(\"wxFilePickerCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "control = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKERCTRL, wx.wxITALIC_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_USEFONT_FOR_LABEL)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "AddControl(\"wxFontPickerCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "control = wx.wxGauge(scrollWin, ID_GAUGE, 100,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "control:SetValue(30)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "AddControl(\"wxGauge\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "control = wx.wxGenericDirCtrl(scrollWin, ID_GENERICDIRCTRL, wx.wxDirDialogDefaultFolderStr,\r\n                            wx.wxDefaultPosition, wx.wxSize(200,200))",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "AddControl(\"wxGenericDirCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "control = wx.wxGrid(scrollWin, ID_GRID,\r\n                            wx.wxDefaultPosition, wx.wxSize(200,200))",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "control:CreateGrid(10, 20)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "AddControl(\"wxGrid\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"TODO - wxHtml windows\")",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "AddControl(\"wxHtml\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "control = wx.wxHyperlinkCtrl(scrollWin, ID_HYPERLINKCTRL,\r\n                            \"Goto wxlua.sourceforge.net\", \"http://wxlua.sourceforge.net\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "AddControl(\"wxHyperlinkCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "control = wx.wxListBox(scrollWin, ID_LISTBOX,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            {\"Item 1\", \"Item 2\", \"Item 3\"},\r\n                            wx.wxLB_EXTENDED)",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "AddControl(\"wxListBox\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "control = wx.wxListCtrl(scrollWin, ID_LISTCTRL,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, 200),\r\n                            wx.wxLC_REPORT)",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "control:InsertColumn(0, \"Col 1\")",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "control:InsertColumn(1, \"Col 2\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "control:InsertItem(0, \"Item 1\")",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "control:InsertItem(1, \"Item 2\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "control:InsertItem(2, \"Item 3\")",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "AddControl(\"wxListCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxListView is a wxListCtrl with a couple of methods added\")",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "AddControl(\"wxListView\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "control = wx.wxListbook(scrollWin, ID_LISTBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxSize(200,200))",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "AddControl(\"wxListbook\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "do\r\n    -- Note: The wxNotebook in GTK will not draw it's tabs correctly if placed\r\n    -- directly on the scrolled window, put it in a panel first.\r\n    local p = wx.wxPanel(scrollWin, wx.wxID_ANY)\r\n    local s = wx.wxBoxSizer(wx.wxVERTICAL)\r\n\r\n    control = wx.wxNotebook(p, ID_NOTEBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxSize(200,200))\r\n    SetupBook(control)\r\n\r\n    s:Add(control, 1, wx.wxEXPAND)\r\n    s:SetMinSize(200,200)\r\n    p:SetSizer(s)\r\n    s:SetSizeHints(p)\r\n    AddControl(\"wxNotebook\", p, control)\r\n    end",
    "type": "statement:do"
  }, {
    "id": 186,
    "text": "control = wx.wxNotebook(p, ID_NOTEBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxSize(200,200))",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "s:Add(control, 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "AddControl(\"wxNotebook\", p, control)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "control = wx.wxPanel(scrollWin, ID_PANEL,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxSUNKEN_BORDER)",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "AddControl(\"wxPanel\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "control = wx.wxRadioBox(scrollWin, ID_RADIOBOX, \"wxRadioBox\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            {\"Item 1\", \"Item 2\", \"Item 3\"}, 1,\r\n                            wx.wxSUNKEN_BORDER)",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "AddControl(\"wxRadioBox\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "control = wx.wxRadioButton(scrollWin, ID_RADIOBUTTON, \"wxRadioButton\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "AddControl(\"wxRadioButton\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxSashLayoutWindow must have a top level window as parent\")",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "AddControl(\"wxSashLayoutWindow\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "control = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxSashWindow must have a top level window as parent\")",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "AddControl(\"wxSashWindow\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "control = wx.wxScrollBar(scrollWin, ID_SCROLLBAR,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, -1))",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "control:SetScrollbar(10, 10, 100, 20)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "AddControl(\"wxScrollBar\\n range=100\\n thumb=10\\n pageSize=20\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "control = wx.wxScrolledWindow(scrollWin, ID_SCROLLEDWINDOW,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, 200))",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "control:SetScrollbars(10, 10, 100, 100)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "control:SetBackgroundColour(colorList[1])",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "wx.wxButton(control, wx.wxID_ANY, \"Child button of wxScrolledWindow\", wx.wxPoint(50, 50))",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "AddControl(\"wxScrolledWindow\\n pixelsPerUnit=10\\n noUnits=100\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "flexSizer:SetItemMinSize(control, 200, 200)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "control = wx.wxSlider(scrollWin, ID_SLIDER, 10, 0, 100,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, -1))",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "AddControl(\"wxSlider\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "control = wx.wxSpinButton(scrollWin, ID_SPINBUTTON,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "AddControl(\"wxSpinButton\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "control = wx.wxSpinCtrl(scrollWin, ID_SPINCTRL, \"wxSpinCtrl\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "AddControl(\"wxSpinCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "do\r\n    -- Note: putting the splitter window directly on the scrolled window\r\n    -- and in it's sizer makes the sash undraggable, put it in a panel first\r\n    local p = wx.wxPanel(scrollWin, wx.wxID_ANY)\r\n    local s = wx.wxBoxSizer(wx.wxVERTICAL)\r\n\r\n    control = wx.wxSplitterWindow(p, ID_SPLITTERWINDOW,\r\n                            wx.wxDefaultPosition, wx.wxSize(300, 200))\r\n    control:SplitVertically(CreateBookPage(control, 1),\r\n                            CreateBookPage(control, 2),\r\n                            100)\r\n    s:SetMinSize(300, 200)\r\n    p:SetSizer(s)\r\n    s:SetSizeHints(p)\r\n\r\n    AddControl(\"wxSplitterWindow\", p, control)\r\n    end",
    "type": "statement:do"
  }, {
    "id": 215,
    "text": "control = wx.wxSplitterWindow(p, ID_SPLITTERWINDOW,\r\n                            wx.wxDefaultPosition, wx.wxSize(300, 200))",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "control:SplitVertically(CreateBookPage(control, 1),\r\n                            CreateBookPage(control, 2),\r\n                            100)",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "s:SetMinSize(300, 200)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "AddControl(\"wxSplitterWindow\", p, control)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "control = wx.wxStaticBitmap(scrollWin, ID_STATICBITMAP, bmp,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "AddControl(\"wxStaticBitmap\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "control = wx.wxStaticBox(scrollWin, ID_STATICBOX, \"wxStaticBox\",\r\n                            wx.wxDefaultPosition, wx.wxSize(200, 100))",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "AddControl(\"wxStaticBox\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "control = wx.wxStaticLine(scrollWin, ID_STATICLINE,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, -1))",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "AddControl(\"wxStaticLine\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "do\r\n    local p = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"See taskbar for icon\")\r\n    taskbarIcon = wx.wxTaskBarIcon()\r\n    local icon = wx.wxIcon()\r\n    icon:CopyFromBitmap(bmp)\r\n    taskbarIcon:SetIcon(icon, \"Tooltop for wxTaskBarIcon from controls.wx.lua\")\r\n    icon:delete()\r\n    AddControl(\"wxTaskBarIcon\", p, taskbarIcon)\r\n    end",
    "type": "statement:do"
  }, {
    "id": 226,
    "text": "local p = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"See taskbar for icon\")",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "taskbarIcon = wx.wxTaskBarIcon()",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "local icon = wx.wxIcon()",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "icon:CopyFromBitmap(bmp)",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "taskbarIcon:SetIcon(icon, \"Tooltop for wxTaskBarIcon from controls.wx.lua\")",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "icon:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "AddControl(\"wxTaskBarIcon\", p, taskbarIcon)",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "control = wx.wxTextCtrl(scrollWin, ID_TEXTCTRL, \"wxTextCtrl\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxTE_PROCESS_ENTER)",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "AddControl(\"wxTextCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "control = wx.wxToggleButton(scrollWin, ID_TOGGLEBUTTON, \"wxToggleButton\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "AddControl(\"wxToggleButton\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "control = wx.wxToolBar(scrollWin, ID_TOOLBAR,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "control:AddTool(wx.wxID_ANY, \"A tool 1\", bmp, \"Help for a tool 1\", wx.wxITEM_NORMAL)",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "control:AddTool(wx.wxID_ANY, \"A tool 2\", bmp, \"Help for a tool 2\", wx.wxITEM_NORMAL)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "control:AddSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "control:AddCheckTool(wx.wxID_ANY, \"A check tool 1\", bmp, wx.wxNullBitmap, \"Short help for checktool 1\", \"Long help for checktool \")",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "control:AddCheckTool(wx.wxID_ANY, \"A check tool 2\", bmp, wx.wxNullBitmap, \"Short help for checktool 2\", \"Long help for checktool 2\")",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "AddControl(\"wxToolBar\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "control = wx.wxToolbook(scrollWin, ID_TOOLBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxSize(200,200))",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "AddControl(\"wxToolbook\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "control = wx.wxTreebook(scrollWin, ID_TREEBOOK,\r\n                                         wx.wxDefaultPosition, wx.wxSize(200,200))",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "control:AddSubPage(CreateBookPage(control, 4), \"Subpage 1\", false, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "AddControl(\"wxTreebook\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "do\r\n    control = wx.wxTreeCtrl(scrollWin, ID_TREECTRL,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, 200),\r\n                            wx.wxTR_HAS_BUTTONS+wx.wxTR_MULTIPLE)\r\n    control:SetImageList(imageList)\r\n    local item = control:AddRoot(\"Root Note\", 0)\r\n    control:AppendItem(item, \"Item 1\", 1)\r\n    control:AppendItem(item, \"Item 2\")\r\n    item = control:AppendItem(item, \"Item 3\", 2)\r\n    item = control:AppendItem(item, \"Item 3:1\")\r\n    item = control:AppendItem(item, \"Item 3:2\", 3)\r\n\r\n    AddControl(\"wxTreeCtrl\", control)\r\n    end",
    "type": "statement:do"
  }, {
    "id": 250,
    "text": "control = wx.wxTreeCtrl(scrollWin, ID_TREECTRL,\r\n                            wx.wxDefaultPosition, wx.wxSize(200, 200),\r\n                            wx.wxTR_HAS_BUTTONS+wx.wxTR_MULTIPLE)",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "local item = control:AddRoot(\"Root Note\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "control:AppendItem(item, \"Item 1\", 1)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "control:AppendItem(item, \"Item 2\")",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "item = control:AppendItem(item, \"Item 3\", 2)",
    "type": "statement:assign"
  }, {
    "id": 255,
    "text": "item = control:AppendItem(item, \"Item 3:1\")",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "item = control:AppendItem(item, \"Item 3:2\", 3)",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "AddControl(\"wxTreeCtrl\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "control = wx.wxWindow(scrollWin, ID_WINDOW,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxSUNKEN_BORDER)",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "AddControl(\"wxWindow\", control)",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "scrollWin:SetSizer(flexSizer)",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "flexSizer:Fit(scrollWin)",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "local function ConnectEvents(control)\r\n        -- Note this is the same as doing this, but we connect all of them\r\n        -- win:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_BUTTON_CLICKED, OnCommandEvent)\r\n\r\n        for i = 1, #wxEVT_Array do\r\n            if not skipEVTs[wxEVT_Array[i].name] then\r\n                control:Connect(wx.wxID_ANY, wxEVT_Array[i].eventType, OnEvent)\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "local function AddControl(txt, control, real_control)\r\n        local statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, txt)\r\n\r\n        flexSizer:Add(statText, 0, wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5)\r\n        flexSizer:Add(control, 0, wx.wxALIGN_LEFT+wx.wxALL, 5)\r\n\r\n        flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 0, wx.wxEXPAND+wx.wxALL, 5)\r\n        flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 0, wx.wxEXPAND+wx.wxALL, 5)\r\n\r\n        ConnectEvents(real_control or control) -- connect to the real control\r\n\r\n        local a = string.find(txt, \"\\n\", 1, 1)\r\n        if a then txt = string.sub(txt, 1, a-1) end\r\n\r\n        if real_control and real_control:IsKindOf(wx.wxClassInfo.FindClass(\"wxWindow\")) then\r\n            controlTable[real_control:GetId()] = txt\r\n        else\r\n            controlTable[control:GetId()] = txt\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 267,
    "text": "local function CreateBookPage(parent, num)\r\n        local p = wx.wxPanel(parent, wx.wxID_ANY)\r\n        local s = wx.wxBoxSizer(wx.wxVERTICAL)\r\n        local t = wx.wxStaticText(p, wx.wxID_ANY, \"Window \"..num)\r\n        s:Add(t, 0, wx.wxCENTER, 5)\r\n        s:SetMinSize(200,200) -- force it to be some reasonable size\r\n        p:SetSizer(s)\r\n\r\n        p:SetBackgroundColour(colorList[num]) -- make them easy to find\r\n\r\n        return p\r\n    end",
    "type": "function"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "local function SetupBook(control)\r\n        -- Note we can't just use a static text here since it does not obey\r\n        -- any set size, set min size calls and always shrinks to the\r\n        -- size that just fits the text\r\n\r\n        control:SetImageList(imageList)\r\n        control:AddPage(CreateBookPage(control, 1), \"Page 1\", true, 0)\r\n        control:AddPage(CreateBookPage(control, 2), \"Page 2\", false, 1)\r\n        control:AddPage(CreateBookPage(control, 3), \"Page 3\", false, 2)\r\n    end",
    "type": "function"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function main()\r\n\r\n    frame = wx.wxFrame( wx.NULL,              -- no parent needed for toplevel windows\r\n                        wx.wxID_ANY,          -- don't need a wxWindow ID\r\n                        \"wxLua Controls Demo\",-- caption on the frame\r\n                        wx.wxDefaultPosition, -- let system place the frame\r\n                        wx.wxSize(550, 450),  -- set the size of the frame\r\n                        wx.wxDEFAULT_FRAME_STYLE ) -- use default frame styles\r\n\r\n    frame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n            function(event)\r\n                event:Skip();\r\n                textCtrl = nil -- stop processing events\r\n                imageList:delete()\r\n                if taskbarIcon then\r\n                    --if taskbarIcon:IsIconInstalled() then\r\n                    --    taskbarIcon:RemoveIcon()\r\n                    --end\r\n\r\n                    taskbarIcon:delete() -- must delete() it for program to exit in MSW\r\n                end\r\n            end)\r\n\r\n    local fileMenu = wx.wxMenu()\r\n    fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")\r\n\r\n    local helpMenu = wx.wxMenu()\r\n    helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Controls Application\")\r\n\r\n    local menuBar = wx.wxMenuBar()\r\n    menuBar:Append(fileMenu, \"&File\")\r\n    menuBar:Append(helpMenu, \"&Help\")\r\n    frame:SetMenuBar(menuBar)\r\n\r\n    frame:CreateStatusBar(1)\r\n    frame:SetStatusText(\"Welcome to wxLua.\")\r\n\r\n    -- connect the selection event of the exit menu item to an\r\n    -- event handler that closes the window\r\n    frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) frame:Close(true) end )\r\n\r\n    -- connect the selection event of the about menu item\r\n    frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Controls wxLua sample.\\n'..\r\n                            'Check or uncheck events you want shown.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )\r\n\r\n    -- -----------------------------------------------------------------------\r\n    splitter = wx.wxSplitterWindow(frame, wx.wxID_ANY)\r\n    splitter:SetMinimumPaneSize(50) -- don't let it unsplit\r\n    splitter:SetSashGravity(.8)\r\n\r\n    splitter2 = wx.wxSplitterWindow(splitter, wx.wxID_ANY)\r\n    splitter2:SetMinimumPaneSize(50) -- don't let it unsplit\r\n    splitter2:SetSashGravity(.1)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    noteBook = wx.wxNotebook(splitter2, wx.wxID_ANY)\r\n\r\n    -- -----------------------------------------------------------------------\r\n    eventListCtrl = wx.wxListCtrl(noteBook, ID_EVENT_LISTCTRL,\r\n                                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                  wx.wxLC_REPORT)\r\n    eventListCtrl:SetImageList(listImageList, wx.wxIMAGE_LIST_SMALL)\r\n    eventListCtrl:InsertColumn(0, \"wxEvent Class\")\r\n    eventListCtrl:InsertColumn(1, \"wxEventType\")\r\n\r\n    -- Add all the initial items and find the best fitting col widths\r\n    local li = 0\r\n    local col_widths = {200, 300}\r\n    for n = 1, #wxEVT_List do\r\n        local img = 1\r\n        if     skipEVTs[wxEVT_List[n][2]]   then img = 2\r\n        elseif ignoreEVTs[wxEVT_List[n][2]] then img = 0 end\r\n\r\n        li = eventListCtrl:InsertItem(li, wxEVT_List[n][1], img)\r\n        eventListCtrl:SetItem(li, 1, wxEVT_List[n][2])\r\n\r\n        for i = 1, #col_widths do\r\n            local w = eventListCtrl:GetTextExtent(wxEVT_List[n][i])\r\n            if w > col_widths[i] + 16 then w = col_widths[i] + 16 end\r\n        end\r\n    end\r\n    for i = 1, #col_widths do\r\n        eventListCtrl:SetColumnWidth(i-1, col_widths[i])\r\n    end\r\n\r\n    -- Handle selecting or deselecting events\r\n    function OnCheckListCtrl(event)\r\n        local listCtrl = event:GetEventObject():DynamicCast(\"wxListCtrl\")\r\n        local win_id = event:GetId()\r\n        event:Skip(false)\r\n        local ignored_count = 0\r\n        local sel = {}\r\n\r\n        -- Find all the selected items\r\n        for n = 1, listCtrl:GetItemCount() do\r\n            local s = listCtrl:GetItemState(n-1, wx.wxLIST_STATE_SELECTED)\r\n            if s ~= 0 then\r\n                local litem = wx.wxListItem()\r\n                litem:SetId(n-1)\r\n                litem:SetMask(wx.wxLIST_MASK_IMAGE)\r\n                listCtrl:GetItem(litem)\r\n                if litem:GetImage() < 2 then -- skipEVTs\r\n                    if litem:GetImage() == 0 then\r\n                        ignored_count = ignored_count + 1\r\n                    end\r\n\r\n                    litem:SetMask(wx.wxLIST_MASK_TEXT)\r\n                    litem:SetColumn(1)\r\n                    listCtrl:GetItem(litem)\r\n                    table.insert(sel, {n-1, litem:GetText()})\r\n                end\r\n            end\r\n        end\r\n\r\n        local img = 0\r\n        if (#sel) < 2*ignored_count then img = 1 end\r\n\r\n        for n = 1, #sel do\r\n            listCtrl:SetItemImage(sel[n][1], img)\r\n\r\n            if win_id == ID_EVENT_LISTCTRL then\r\n                if img == 0 then\r\n                    ignoreEVTs[sel[n][2]] = true\r\n                else\r\n                    ignoreEVTs[sel[n][2]] = nil\r\n                end\r\n            elseif win_id == ID_CONTROL_LISTCTRL then\r\n                print(sel[n][2], type(sel[n][2]))\r\n                if img == 0 then\r\n                    ignoreControls[tonumber(sel[n][2])] = true\r\n                else\r\n                    ignoreControls[tonumber(sel[n][2])] = nil\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    eventListCtrl:Connect(wx.wxEVT_COMMAND_LIST_KEY_DOWN,\r\n            function(event)\r\n                if event:GetKeyCode() == wx.WXK_SPACE then\r\n                    OnCheckListCtrl(event)\r\n                else\r\n                    event:Skip()\r\n                end\r\n            end)\r\n    eventListCtrl:Connect(wx.wxEVT_COMMAND_LIST_ITEM_ACTIVATED, OnCheckListCtrl)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    controlListCtrl = wx.wxListCtrl(noteBook, ID_CONTROL_LISTCTRL,\r\n                                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                  wx.wxLC_REPORT)\r\n    controlListCtrl:SetImageList(listImageList, wx.wxIMAGE_LIST_SMALL)\r\n    controlListCtrl:InsertColumn(0, \"wxWindow Class\")\r\n    controlListCtrl:InsertColumn(1, \"wxWindowID\")\r\n\r\n    -- We add the items after creating all the controls\r\n\r\n    controlListCtrl:Connect(wx.wxEVT_COMMAND_LIST_KEY_DOWN,\r\n            function(event)\r\n                if event:GetKeyCode() == wx.WXK_SPACE then\r\n                    OnCheckListCtrl(event)\r\n                else\r\n                    event:Skip()\r\n                end\r\n            end)\r\n    controlListCtrl:Connect(wx.wxEVT_COMMAND_LIST_ITEM_ACTIVATED, OnCheckListCtrl)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    noteBook:AddPage(eventListCtrl, \"wxEvents\")\r\n    noteBook:AddPage(controlListCtrl, \"wxWindows\")\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    controlsWin = CreateControlsWindow(splitter2)\r\n\r\n    -- Add all the initial items and find the best fitting col widths\r\n    local li = 0\r\n    local col_widths = {200, 300}\r\n    local cTable = {}\r\n    for k, v in pairs(controlTable) do table.insert(cTable, { k, v }) end\r\n    table.sort(cTable, function(t1, t2) return t1[2] > t2[2] end)\r\n    for n = 1, #cTable do\r\n        local img = 1\r\n\r\n        li = controlListCtrl:InsertItem(li, cTable[n][2], img)\r\n        controlListCtrl:SetItem(li, 1, tostring(cTable[n][1]))\r\n\r\n        for i = 1, #col_widths do\r\n            local w = controlListCtrl:GetTextExtent(tostring(cTable[n][i]))\r\n            if w > col_widths[i] + 16 then w = col_widths[i] + 16 end\r\n        end\r\n    end\r\n    for i = 1, #col_widths do\r\n        controlListCtrl:SetColumnWidth(i-1, col_widths[i])\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    textCtrl = wx.wxTextCtrl(splitter, wx.wxID_ANY, \"\",\r\n                             wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                             wx.wxTE_MULTILINE+wx.wxTE_DONTWRAP)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    splitter:SplitHorizontally(splitter2, textCtrl, 300)\r\n    splitter2:SplitVertically(noteBook, controlsWin, 300)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    frame:Show(true) -- show the frame window\r\nend",
    "type": "function"
  }, {
    "id": 272,
    "text": "frame = wx.wxFrame( wx.NULL,              -- no parent needed for toplevel windows\r\n                        wx.wxID_ANY,          -- don't need a wxWindow ID\r\n                        \"wxLua Controls Demo\",-- caption on the frame\r\n                        wx.wxDefaultPosition, -- let system place the frame\r\n                        wx.wxSize(550, 450),  -- set the size of the frame\r\n                        wx.wxDEFAULT_FRAME_STYLE )",
    "type": "statement:assign"
  }, {
    "id": 273,
    "text": "frame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n            function(event)\r\n                event:Skip();\r\n                textCtrl = nil -- stop processing events\r\n                imageList:delete()\r\n                if taskbarIcon then\r\n                    --if taskbarIcon:IsIconInstalled() then\r\n                    --    taskbarIcon:RemoveIcon()\r\n                    --end\r\n\r\n                    taskbarIcon:delete() -- must delete() it for program to exit in MSW\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "event:Skip()",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "textCtrl = nil",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "imageList:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "if taskbarIcon then\r\n                    --if taskbarIcon:IsIconInstalled() then\r\n                    --    taskbarIcon:RemoveIcon()\r\n                    --end\r\n\r\n                    taskbarIcon:delete() -- must delete() it for program to exit in MSW\r\n                end",
    "type": "statement:if"
  }, {
    "id": 278,
    "text": "taskbarIcon:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "local fileMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "local helpMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Controls Application\")",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "local menuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 284,
    "text": "menuBar:Append(fileMenu, \"&File\")",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "menuBar:Append(helpMenu, \"&Help\")",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "frame:SetMenuBar(menuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "frame:CreateStatusBar(1)",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "frame:SetStatusText(\"Welcome to wxLua.\")",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) frame:Close(true) end )",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "frame:Close(true)",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Controls wxLua sample.\\n'..\r\n                            'Check or uncheck events you want shown.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the Controls wxLua sample.\\n'..\r\n                            'Check or uncheck events you want shown.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "splitter = wx.wxSplitterWindow(frame, wx.wxID_ANY)",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "splitter:SetMinimumPaneSize(50)",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "splitter:SetSashGravity(.8)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "splitter2 = wx.wxSplitterWindow(splitter, wx.wxID_ANY)",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "splitter2:SetMinimumPaneSize(50)",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "splitter2:SetSashGravity(.1)",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "noteBook = wx.wxNotebook(splitter2, wx.wxID_ANY)",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "eventListCtrl = wx.wxListCtrl(noteBook, ID_EVENT_LISTCTRL,\r\n                                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                  wx.wxLC_REPORT)",
    "type": "statement:assign"
  }, {
    "id": 301,
    "text": "eventListCtrl:SetImageList(listImageList, wx.wxIMAGE_LIST_SMALL)",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "eventListCtrl:InsertColumn(0, \"wxEvent Class\")",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "eventListCtrl:InsertColumn(1, \"wxEventType\")",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "local li = 0",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "local col_widths = {200, 300}",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "for n = 1, #wxEVT_List do\r\n        local img = 1\r\n        if     skipEVTs[wxEVT_List[n][2]]   then img = 2\r\n        elseif ignoreEVTs[wxEVT_List[n][2]] then img = 0 end\r\n\r\n        li = eventListCtrl:InsertItem(li, wxEVT_List[n][1], img)\r\n        eventListCtrl:SetItem(li, 1, wxEVT_List[n][2])\r\n\r\n        for i = 1, #col_widths do\r\n            local w = eventListCtrl:GetTextExtent(wxEVT_List[n][i])\r\n            if w > col_widths[i] + 16 then w = col_widths[i] + 16 end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 307,
    "text": "local img = 1",
    "type": "statement:localassign"
  }, {
    "id": 308,
    "text": "if     skipEVTs[wxEVT_List[n][2]]   then img = 2\r\n        elseif ignoreEVTs[wxEVT_List[n][2]] then img = 0 end",
    "type": "statement:if"
  }, {
    "id": 309,
    "text": "img = 2",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "img = 0",
    "type": "statement:assign"
  }, {
    "id": 311,
    "text": "li = eventListCtrl:InsertItem(li, wxEVT_List[n][1], img)",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "eventListCtrl:SetItem(li, 1, wxEVT_List[n][2])",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "for i = 1, #col_widths do\r\n            local w = eventListCtrl:GetTextExtent(wxEVT_List[n][i])\r\n            if w > col_widths[i] + 16 then w = col_widths[i] + 16 end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 314,
    "text": "local w = eventListCtrl:GetTextExtent(wxEVT_List[n][i])",
    "type": "statement:localassign"
  }, {
    "id": 315,
    "text": "if w > col_widths[i] + 16 then w = col_widths[i] + 16 end",
    "type": "statement:if"
  }, {
    "id": 316,
    "text": "w = col_widths[i] + 16",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "for i = 1, #col_widths do\r\n        eventListCtrl:SetColumnWidth(i-1, col_widths[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 318,
    "text": "eventListCtrl:SetColumnWidth(i-1, col_widths[i])",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "function OnCheckListCtrl(event)\r\n        local listCtrl = event:GetEventObject():DynamicCast(\"wxListCtrl\")\r\n        local win_id = event:GetId()\r\n        event:Skip(false)\r\n        local ignored_count = 0\r\n        local sel = {}\r\n\r\n        -- Find all the selected items\r\n        for n = 1, listCtrl:GetItemCount() do\r\n            local s = listCtrl:GetItemState(n-1, wx.wxLIST_STATE_SELECTED)\r\n            if s ~= 0 then\r\n                local litem = wx.wxListItem()\r\n                litem:SetId(n-1)\r\n                litem:SetMask(wx.wxLIST_MASK_IMAGE)\r\n                listCtrl:GetItem(litem)\r\n                if litem:GetImage() < 2 then -- skipEVTs\r\n                    if litem:GetImage() == 0 then\r\n                        ignored_count = ignored_count + 1\r\n                    end\r\n\r\n                    litem:SetMask(wx.wxLIST_MASK_TEXT)\r\n                    litem:SetColumn(1)\r\n                    listCtrl:GetItem(litem)\r\n                    table.insert(sel, {n-1, litem:GetText()})\r\n                end\r\n            end\r\n        end\r\n\r\n        local img = 0\r\n        if (#sel) < 2*ignored_count then img = 1 end\r\n\r\n        for n = 1, #sel do\r\n            listCtrl:SetItemImage(sel[n][1], img)\r\n\r\n            if win_id == ID_EVENT_LISTCTRL then\r\n                if img == 0 then\r\n                    ignoreEVTs[sel[n][2]] = true\r\n                else\r\n                    ignoreEVTs[sel[n][2]] = nil\r\n                end\r\n            elseif win_id == ID_CONTROL_LISTCTRL then\r\n                print(sel[n][2], type(sel[n][2]))\r\n                if img == 0 then\r\n                    ignoreControls[tonumber(sel[n][2])] = true\r\n                else\r\n                    ignoreControls[tonumber(sel[n][2])] = nil\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 320,
    "text": "local listCtrl = event:GetEventObject():DynamicCast(\"wxListCtrl\")",
    "type": "statement:localassign"
  }, {
    "id": 321,
    "text": "local win_id = event:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "event:Skip(false)",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "local ignored_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "local sel = {}",
    "type": "statement:localassign"
  }, {
    "id": 325,
    "text": "for n = 1, listCtrl:GetItemCount() do\r\n            local s = listCtrl:GetItemState(n-1, wx.wxLIST_STATE_SELECTED)\r\n            if s ~= 0 then\r\n                local litem = wx.wxListItem()\r\n                litem:SetId(n-1)\r\n                litem:SetMask(wx.wxLIST_MASK_IMAGE)\r\n                listCtrl:GetItem(litem)\r\n                if litem:GetImage() < 2 then -- skipEVTs\r\n                    if litem:GetImage() == 0 then\r\n                        ignored_count = ignored_count + 1\r\n                    end\r\n\r\n                    litem:SetMask(wx.wxLIST_MASK_TEXT)\r\n                    litem:SetColumn(1)\r\n                    listCtrl:GetItem(litem)\r\n                    table.insert(sel, {n-1, litem:GetText()})\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 326,
    "text": "local s = listCtrl:GetItemState(n-1, wx.wxLIST_STATE_SELECTED)",
    "type": "statement:localassign"
  }, {
    "id": 327,
    "text": "if s ~= 0 then\r\n                local litem = wx.wxListItem()\r\n                litem:SetId(n-1)\r\n                litem:SetMask(wx.wxLIST_MASK_IMAGE)\r\n                listCtrl:GetItem(litem)\r\n                if litem:GetImage() < 2 then -- skipEVTs\r\n                    if litem:GetImage() == 0 then\r\n                        ignored_count = ignored_count + 1\r\n                    end\r\n\r\n                    litem:SetMask(wx.wxLIST_MASK_TEXT)\r\n                    litem:SetColumn(1)\r\n                    listCtrl:GetItem(litem)\r\n                    table.insert(sel, {n-1, litem:GetText()})\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 328,
    "text": "local litem = wx.wxListItem()",
    "type": "statement:localassign"
  }, {
    "id": 329,
    "text": "litem:SetId(n-1)",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "litem:SetMask(wx.wxLIST_MASK_IMAGE)",
    "type": "statement:functioncall"
  }, {
    "id": 331,
    "text": "listCtrl:GetItem(litem)",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "if litem:GetImage() < 2 then -- skipEVTs\r\n                    if litem:GetImage() == 0 then\r\n                        ignored_count = ignored_count + 1\r\n                    end\r\n\r\n                    litem:SetMask(wx.wxLIST_MASK_TEXT)\r\n                    litem:SetColumn(1)\r\n                    listCtrl:GetItem(litem)\r\n                    table.insert(sel, {n-1, litem:GetText()})\r\n                end",
    "type": "statement:if"
  }, {
    "id": 333,
    "text": "if litem:GetImage() == 0 then\r\n                        ignored_count = ignored_count + 1\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 334,
    "text": "ignored_count = ignored_count + 1",
    "type": "statement:assign"
  }, {
    "id": 335,
    "text": "litem:SetMask(wx.wxLIST_MASK_TEXT)",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "litem:SetColumn(1)",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "table.insert(sel, {n-1, litem:GetText()})",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "local img = 0",
    "type": "statement:localassign"
  }, {
    "id": 339,
    "text": "if (#sel) < 2*ignored_count then img = 1 end",
    "type": "statement:if"
  }, {
    "id": 340,
    "text": "img = 1",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "for n = 1, #sel do\r\n            listCtrl:SetItemImage(sel[n][1], img)\r\n\r\n            if win_id == ID_EVENT_LISTCTRL then\r\n                if img == 0 then\r\n                    ignoreEVTs[sel[n][2]] = true\r\n                else\r\n                    ignoreEVTs[sel[n][2]] = nil\r\n                end\r\n            elseif win_id == ID_CONTROL_LISTCTRL then\r\n                print(sel[n][2], type(sel[n][2]))\r\n                if img == 0 then\r\n                    ignoreControls[tonumber(sel[n][2])] = true\r\n                else\r\n                    ignoreControls[tonumber(sel[n][2])] = nil\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 342,
    "text": "listCtrl:SetItemImage(sel[n][1], img)",
    "type": "statement:functioncall"
  }, {
    "id": 343,
    "text": "if win_id == ID_EVENT_LISTCTRL then\r\n                if img == 0 then\r\n                    ignoreEVTs[sel[n][2]] = true\r\n                else\r\n                    ignoreEVTs[sel[n][2]] = nil\r\n                end\r\n            elseif win_id == ID_CONTROL_LISTCTRL then\r\n                print(sel[n][2], type(sel[n][2]))\r\n                if img == 0 then\r\n                    ignoreControls[tonumber(sel[n][2])] = true\r\n                else\r\n                    ignoreControls[tonumber(sel[n][2])] = nil\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "if img == 0 then\r\n                    ignoreEVTs[sel[n][2]] = true\r\n                else\r\n                    ignoreEVTs[sel[n][2]] = nil\r\n                end",
    "type": "statement:if"
  }, {
    "id": 345,
    "text": "ignoreEVTs[sel[n][2]] = true",
    "type": "statement:assign"
  }, {
    "id": 346,
    "text": "ignoreEVTs[sel[n][2]] = nil",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "print(sel[n][2], type(sel[n][2]))",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "if img == 0 then\r\n                    ignoreControls[tonumber(sel[n][2])] = true\r\n                else\r\n                    ignoreControls[tonumber(sel[n][2])] = nil\r\n                end",
    "type": "statement:if"
  }, {
    "id": 349,
    "text": "ignoreControls[tonumber(sel[n][2])] = true",
    "type": "statement:assign"
  }, {
    "id": 350,
    "text": "ignoreControls[tonumber(sel[n][2])] = nil",
    "type": "statement:assign"
  }, {
    "id": 351,
    "text": "eventListCtrl:Connect(wx.wxEVT_COMMAND_LIST_KEY_DOWN,\r\n            function(event)\r\n                if event:GetKeyCode() == wx.WXK_SPACE then\r\n                    OnCheckListCtrl(event)\r\n                else\r\n                    event:Skip()\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "if event:GetKeyCode() == wx.WXK_SPACE then\r\n                    OnCheckListCtrl(event)\r\n                else\r\n                    event:Skip()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 353,
    "text": "OnCheckListCtrl(event)",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "eventListCtrl:Connect(wx.wxEVT_COMMAND_LIST_ITEM_ACTIVATED, OnCheckListCtrl)",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "controlListCtrl = wx.wxListCtrl(noteBook, ID_CONTROL_LISTCTRL,\r\n                                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                  wx.wxLC_REPORT)",
    "type": "statement:assign"
  }, {
    "id": 356,
    "text": "controlListCtrl:SetImageList(listImageList, wx.wxIMAGE_LIST_SMALL)",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "controlListCtrl:InsertColumn(0, \"wxWindow Class\")",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "controlListCtrl:InsertColumn(1, \"wxWindowID\")",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "controlListCtrl:Connect(wx.wxEVT_COMMAND_LIST_KEY_DOWN,\r\n            function(event)\r\n                if event:GetKeyCode() == wx.WXK_SPACE then\r\n                    OnCheckListCtrl(event)\r\n                else\r\n                    event:Skip()\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "controlListCtrl:Connect(wx.wxEVT_COMMAND_LIST_ITEM_ACTIVATED, OnCheckListCtrl)",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "noteBook:AddPage(eventListCtrl, \"wxEvents\")",
    "type": "statement:functioncall"
  }, {
    "id": 362,
    "text": "noteBook:AddPage(controlListCtrl, \"wxWindows\")",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "controlsWin = CreateControlsWindow(splitter2)",
    "type": "statement:assign"
  }, {
    "id": 364,
    "text": "local cTable = {}",
    "type": "statement:localassign"
  }, {
    "id": 365,
    "text": "for k, v in pairs(controlTable) do table.insert(cTable, { k, v }) end",
    "type": "statement:genericfor"
  }, {
    "id": 366,
    "text": "table.insert(cTable, { k, v })",
    "type": "statement:functioncall"
  }, {
    "id": 367,
    "text": "table.sort(cTable, function(t1, t2) return t1[2] > t2[2] end)",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "for n = 1, #cTable do\r\n        local img = 1\r\n\r\n        li = controlListCtrl:InsertItem(li, cTable[n][2], img)\r\n        controlListCtrl:SetItem(li, 1, tostring(cTable[n][1]))\r\n\r\n        for i = 1, #col_widths do\r\n            local w = controlListCtrl:GetTextExtent(tostring(cTable[n][i]))\r\n            if w > col_widths[i] + 16 then w = col_widths[i] + 16 end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 369,
    "text": "li = controlListCtrl:InsertItem(li, cTable[n][2], img)",
    "type": "statement:assign"
  }, {
    "id": 370,
    "text": "controlListCtrl:SetItem(li, 1, tostring(cTable[n][1]))",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "for i = 1, #col_widths do\r\n            local w = controlListCtrl:GetTextExtent(tostring(cTable[n][i]))\r\n            if w > col_widths[i] + 16 then w = col_widths[i] + 16 end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 372,
    "text": "local w = controlListCtrl:GetTextExtent(tostring(cTable[n][i]))",
    "type": "statement:localassign"
  }, {
    "id": 373,
    "text": "for i = 1, #col_widths do\r\n        controlListCtrl:SetColumnWidth(i-1, col_widths[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 374,
    "text": "controlListCtrl:SetColumnWidth(i-1, col_widths[i])",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "textCtrl = wx.wxTextCtrl(splitter, wx.wxID_ANY, \"\",\r\n                             wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                             wx.wxTE_MULTILINE+wx.wxTE_DONTWRAP)",
    "type": "statement:assign"
  }, {
    "id": 376,
    "text": "splitter:SplitHorizontally(splitter2, textCtrl, 300)",
    "type": "statement:functioncall"
  }, {
    "id": 377,
    "text": "splitter2:SplitVertically(noteBook, controlsWin, 300)",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "frame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 380,
    "text": "function OnCheckListCtrl(event)\r\n        local listCtrl = event:GetEventObject():DynamicCast(\"wxListCtrl\")\r\n        local win_id = event:GetId()\r\n        event:Skip(false)\r\n        local ignored_count = 0\r\n        local sel = {}\r\n\r\n        -- Find all the selected items\r\n        for n = 1, listCtrl:GetItemCount() do\r\n            local s = listCtrl:GetItemState(n-1, wx.wxLIST_STATE_SELECTED)\r\n            if s ~= 0 then\r\n                local litem = wx.wxListItem()\r\n                litem:SetId(n-1)\r\n                litem:SetMask(wx.wxLIST_MASK_IMAGE)\r\n                listCtrl:GetItem(litem)\r\n                if litem:GetImage() < 2 then -- skipEVTs\r\n                    if litem:GetImage() == 0 then\r\n                        ignored_count = ignored_count + 1\r\n                    end\r\n\r\n                    litem:SetMask(wx.wxLIST_MASK_TEXT)\r\n                    litem:SetColumn(1)\r\n                    listCtrl:GetItem(litem)\r\n                    table.insert(sel, {n-1, litem:GetText()})\r\n                end\r\n            end\r\n        end\r\n\r\n        local img = 0\r\n        if (#sel) < 2*ignored_count then img = 1 end\r\n\r\n        for n = 1, #sel do\r\n            listCtrl:SetItemImage(sel[n][1], img)\r\n\r\n            if win_id == ID_EVENT_LISTCTRL then\r\n                if img == 0 then\r\n                    ignoreEVTs[sel[n][2]] = true\r\n                else\r\n                    ignoreEVTs[sel[n][2]] = nil\r\n                end\r\n            elseif win_id == ID_CONTROL_LISTCTRL then\r\n                print(sel[n][2], type(sel[n][2]))\r\n                if img == 0 then\r\n                    ignoreControls[tonumber(sel[n][2])] = true\r\n                else\r\n                    ignoreControls[tonumber(sel[n][2])] = nil\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 381,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 382,
    "text": "function(t1, t2) return t1[1] > t2[1] end",
    "type": "function"
  }, {
    "id": 383,
    "text": "function(event)\r\n                event:Skip();\r\n                textCtrl = nil -- stop processing events\r\n                imageList:delete()\r\n                if taskbarIcon then\r\n                    --if taskbarIcon:IsIconInstalled() then\r\n                    --    taskbarIcon:RemoveIcon()\r\n                    --end\r\n\r\n                    taskbarIcon:delete() -- must delete() it for program to exit in MSW\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 384,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 385,
    "text": "function (event) frame:Close(true) end",
    "type": "function"
  }, {
    "id": 386,
    "text": "function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Controls wxLua sample.\\n'..\r\n                            'Check or uncheck events you want shown.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end",
    "type": "function"
  }, {
    "id": 387,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 388,
    "text": "function(event)\r\n                if event:GetKeyCode() == wx.WXK_SPACE then\r\n                    OnCheckListCtrl(event)\r\n                else\r\n                    event:Skip()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 389,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 390,
    "text": "function(event)\r\n                if event:GetKeyCode() == wx.WXK_SPACE then\r\n                    OnCheckListCtrl(event)\r\n                else\r\n                    event:Skip()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 391,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 392,
    "text": "function(t1, t2) return t1[2] > t2[2] end",
    "type": "function"
  }, {
    "id": 393,
    "text": "",
    "type": "function container"
  }, {
    "id": 394,
    "text": "wxAnimationCtrl",
    "type": "global function"
  }, {
    "id": 395,
    "text": "wxToolBar",
    "type": "global function"
  }, {
    "id": 396,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 397,
    "text": "wxNotebook",
    "type": "global function"
  }, {
    "id": 398,
    "text": "wxSpinCtrl",
    "type": "global function"
  }, {
    "id": 399,
    "text": "wxRadioBox",
    "type": "global function"
  }, {
    "id": 400,
    "text": "wxTreeCtrl",
    "type": "global function"
  }, {
    "id": 401,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 402,
    "text": "wxHyperlinkCtrl",
    "type": "global function"
  }, {
    "id": 403,
    "text": "wxWindow",
    "type": "global function"
  }, {
    "id": 404,
    "text": "wxIcon",
    "type": "global function"
  }, {
    "id": 405,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 406,
    "text": "wxStaticText",
    "type": "global function"
  }, {
    "id": 407,
    "text": "wxControl",
    "type": "global function"
  }, {
    "id": 408,
    "text": "wxGenericDirCtrl",
    "type": "global function"
  }, {
    "id": 409,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 410,
    "text": "wxCheckBox",
    "type": "global function"
  }, {
    "id": 411,
    "text": "wxTreebook",
    "type": "global function"
  }, {
    "id": 412,
    "text": "wxRadioButton",
    "type": "global function"
  }, {
    "id": 413,
    "text": "wxSplitterWindow",
    "type": "global function"
  }, {
    "id": 414,
    "text": "wxChoice",
    "type": "global function"
  }, {
    "id": 415,
    "text": "wxCheckListBox",
    "type": "global function"
  }, {
    "id": 416,
    "text": "wxCalendarCtrl",
    "type": "global function"
  }, {
    "id": 417,
    "text": "wxColour",
    "type": "global function"
  }, {
    "id": 418,
    "text": "wxToggleButton",
    "type": "global function"
  }, {
    "id": 419,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 420,
    "text": "wxListCtrl",
    "type": "global function"
  }, {
    "id": 421,
    "text": "wxSlider",
    "type": "global function"
  }, {
    "id": 422,
    "text": "wxAnimation",
    "type": "global function"
  }, {
    "id": 423,
    "text": "wxComboBox",
    "type": "global function"
  }, {
    "id": 424,
    "text": "wxBitmapButton",
    "type": "global function"
  }, {
    "id": 425,
    "text": "wxTextCtrl",
    "type": "global function"
  }, {
    "id": 426,
    "text": "wxClassInfo.FindClass",
    "type": "global function"
  }, {
    "id": 427,
    "text": "wxStaticBox",
    "type": "global function"
  }, {
    "id": 428,
    "text": "wxStaticLine",
    "type": "global function"
  }, {
    "id": 429,
    "text": "wxFontPickerCtrl",
    "type": "global function"
  }, {
    "id": 430,
    "text": "wxBoxSizer",
    "type": "global function"
  }, {
    "id": 431,
    "text": "wxScrollBar",
    "type": "global function"
  }, {
    "id": 432,
    "text": "wxToolbook",
    "type": "global function"
  }, {
    "id": 433,
    "text": "wxGrid",
    "type": "global function"
  }, {
    "id": 434,
    "text": "wxBitmapComboBox",
    "type": "global function"
  }, {
    "id": 435,
    "text": "wxListBox",
    "type": "global function"
  }, {
    "id": 436,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 437,
    "text": "wxFilePickerCtrl",
    "type": "global function"
  }, {
    "id": 438,
    "text": "wxScrolledWindow",
    "type": "global function"
  }, {
    "id": 439,
    "text": "wxListItem",
    "type": "global function"
  }, {
    "id": 440,
    "text": "wxPoint",
    "type": "global function"
  }, {
    "id": 441,
    "text": "wxPanel",
    "type": "global function"
  }, {
    "id": 442,
    "text": "wxChoicebook",
    "type": "global function"
  }, {
    "id": 443,
    "text": "wxGetCwd",
    "type": "global function"
  }, {
    "id": 444,
    "text": "wxImageList",
    "type": "global function"
  }, {
    "id": 445,
    "text": "wxFileExists",
    "type": "global function"
  }, {
    "id": 446,
    "text": "wxDirPickerCtrl",
    "type": "global function"
  }, {
    "id": 447,
    "text": "wxGauge",
    "type": "global function"
  }, {
    "id": 448,
    "text": "wxButton",
    "type": "global function"
  }, {
    "id": 449,
    "text": "wxSpinButton",
    "type": "global function"
  }, {
    "id": 450,
    "text": "wxArtProvider.GetBitmap",
    "type": "global function"
  }, {
    "id": 451,
    "text": "wxPaintDC",
    "type": "global function"
  }, {
    "id": 452,
    "text": "wxCollapsiblePane",
    "type": "global function"
  }, {
    "id": 453,
    "text": "wxTaskBarIcon",
    "type": "global function"
  }, {
    "id": 454,
    "text": "wxNow",
    "type": "global function"
  }, {
    "id": 455,
    "text": "wxListbook",
    "type": "global function"
  }, {
    "id": 456,
    "text": "wxFlexGridSizer",
    "type": "global function"
  }, {
    "id": 457,
    "text": "wxStaticBitmap",
    "type": "global function"
  }, {
    "id": 458,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 459,
    "text": "print",
    "type": "global function"
  }, {
    "id": 460,
    "text": "GetBindings",
    "type": "global function"
  }, {
    "id": 461,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 462,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 463,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 464,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 465,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 466,
    "text": "event[funcTable[n]]",
    "type": "global function"
  }, {
    "id": 467,
    "text": "type",
    "type": "global function"
  }, {
    "id": 468,
    "text": "format",
    "type": "global function"
  }, {
    "id": 469,
    "text": "wxEvent_GetFuncs[evtClassName]",
    "type": "global function"
  }, {
    "id": 470,
    "text": "type",
    "type": "global function"
  }, {
    "id": 471,
    "text": "find",
    "type": "global function"
  }, {
    "id": 472,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 473,
    "text": "typename",
    "type": "global function"
  }, {
    "id": 474,
    "text": "require",
    "type": "global function"
  }, {
    "id": 475,
    "text": "",
    "type": "global variable"
  }, {
    "id": 476,
    "text": "",
    "type": "variable container"
  }, {
    "id": 477,
    "text": "",
    "type": "require container"
  }, {
    "id": 478,
    "text": "",
    "type": "global variable"
  }, {
    "id": 479,
    "text": "",
    "type": "n/a"
  }, {
    "id": 480,
    "text": "",
    "type": "global variable"
  }, {
    "id": 481,
    "text": "",
    "type": "global variable"
  }, {
    "id": 482,
    "text": "",
    "type": "global variable"
  }, {
    "id": 483,
    "text": "",
    "type": "global variable"
  }, {
    "id": 484,
    "text": "",
    "type": "n/a"
  }, {
    "id": 485,
    "text": "",
    "type": "global variable"
  }, {
    "id": 486,
    "text": "",
    "type": "n/a"
  }, {
    "id": 487,
    "text": "",
    "type": "global variable"
  }, {
    "id": 488,
    "text": "",
    "type": "n/a"
  }, {
    "id": 489,
    "text": "",
    "type": "global variable"
  }, {
    "id": 490,
    "text": "",
    "type": "n/a"
  }, {
    "id": 491,
    "text": "",
    "type": "global variable"
  }, {
    "id": 492,
    "text": "",
    "type": "n/a"
  }, {
    "id": 493,
    "text": "",
    "type": "global variable"
  }, {
    "id": 494,
    "text": "",
    "type": "n/a"
  }, {
    "id": 495,
    "text": "",
    "type": "global variable"
  }, {
    "id": 496,
    "text": "",
    "type": "n/a"
  }, {
    "id": 497,
    "text": "",
    "type": "global variable"
  }, {
    "id": 498,
    "text": "",
    "type": "global variable"
  }, {
    "id": 499,
    "text": "",
    "type": "global variable"
  }, {
    "id": 500,
    "text": "",
    "type": "global variable"
  }, {
    "id": 501,
    "text": "",
    "type": "global variable"
  }, {
    "id": 502,
    "text": "",
    "type": "global variable"
  }, {
    "id": 503,
    "text": "",
    "type": "global variable"
  }, {
    "id": 504,
    "text": "",
    "type": "global variable"
  }, {
    "id": 505,
    "text": "",
    "type": "global variable"
  }, {
    "id": 506,
    "text": "",
    "type": "global variable"
  }, {
    "id": 507,
    "text": "",
    "type": "global variable"
  }, {
    "id": 508,
    "text": "",
    "type": "global variable"
  }, {
    "id": 509,
    "text": "",
    "type": "global variable"
  }, {
    "id": 510,
    "text": "",
    "type": "global variable"
  }, {
    "id": 511,
    "text": "",
    "type": "global variable"
  }, {
    "id": 512,
    "text": "",
    "type": "global variable"
  }, {
    "id": 513,
    "text": "",
    "type": "global variable"
  }, {
    "id": 514,
    "text": "",
    "type": "global variable"
  }, {
    "id": 515,
    "text": "",
    "type": "global variable"
  }, {
    "id": 516,
    "text": "",
    "type": "global variable"
  }, {
    "id": 517,
    "text": "",
    "type": "global variable"
  }, {
    "id": 518,
    "text": "",
    "type": "global variable"
  }, {
    "id": 519,
    "text": "",
    "type": "global variable"
  }, {
    "id": 520,
    "text": "",
    "type": "global variable"
  }, {
    "id": 521,
    "text": "",
    "type": "global variable"
  }, {
    "id": 522,
    "text": "",
    "type": "global variable"
  }, {
    "id": 523,
    "text": "",
    "type": "global variable"
  }, {
    "id": 524,
    "text": "",
    "type": "global variable"
  }, {
    "id": 525,
    "text": "",
    "type": "global variable"
  }, {
    "id": 526,
    "text": "",
    "type": "global variable"
  }, {
    "id": 527,
    "text": "",
    "type": "global variable"
  }, {
    "id": 528,
    "text": "",
    "type": "global variable"
  }, {
    "id": 529,
    "text": "",
    "type": "global variable"
  }, {
    "id": 530,
    "text": "",
    "type": "global variable"
  }, {
    "id": 531,
    "text": "",
    "type": "global variable"
  }, {
    "id": 532,
    "text": "",
    "type": "global variable"
  }, {
    "id": 533,
    "text": "",
    "type": "global variable"
  }, {
    "id": 534,
    "text": "",
    "type": "global variable"
  }, {
    "id": 535,
    "text": "",
    "type": "global variable"
  }, {
    "id": 536,
    "text": "",
    "type": "global variable"
  }, {
    "id": 537,
    "text": "",
    "type": "global variable"
  }, {
    "id": 538,
    "text": "",
    "type": "global variable"
  }, {
    "id": 539,
    "text": "",
    "type": "global variable"
  }, {
    "id": 540,
    "text": "",
    "type": "global variable"
  }, {
    "id": 541,
    "text": "",
    "type": "global variable"
  }, {
    "id": 542,
    "text": "",
    "type": "global variable"
  }, {
    "id": 543,
    "text": "",
    "type": "global variable"
  }, {
    "id": 544,
    "text": "",
    "type": "global variable"
  }, {
    "id": 545,
    "text": "",
    "type": "global variable"
  }, {
    "id": 546,
    "text": "",
    "type": "n/a"
  }, {
    "id": 547,
    "text": "",
    "type": "global variable"
  }, {
    "id": 548,
    "text": "",
    "type": "n/a"
  }, {
    "id": 549,
    "text": "",
    "type": "global variable"
  }, {
    "id": 550,
    "text": "",
    "type": "n/a"
  }, {
    "id": 551,
    "text": "",
    "type": "global variable"
  }, {
    "id": 552,
    "text": "",
    "type": "n/a"
  }, {
    "id": 553,
    "text": "",
    "type": "global variable"
  }, {
    "id": 554,
    "text": "",
    "type": "n/a"
  }, {
    "id": 555,
    "text": "",
    "type": "global variable"
  }, {
    "id": 556,
    "text": "",
    "type": "n/a"
  }, {
    "id": 557,
    "text": "",
    "type": "global variable"
  }, {
    "id": 558,
    "text": "",
    "type": "n/a"
  }, {
    "id": 559,
    "text": "",
    "type": "global variable"
  }, {
    "id": 560,
    "text": "",
    "type": "n/a"
  } ]
}