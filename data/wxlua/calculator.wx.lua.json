{
  "_filename": "calculator.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/calculator.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 5
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 33,
    "label": "has",
    "to": 45
  }, {
    "from": 27,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 47,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 29
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 11
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 45
  }, {
    "from": 57,
    "label": "has",
    "to": 65
  }, {
    "from": 57,
    "label": "has",
    "to": 66
  }, {
    "from": 57,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 74,
    "label": "has",
    "to": 11
  }, {
    "from": 74,
    "label": "has",
    "to": 84
  }, {
    "from": 74,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 74,
    "label": "has",
    "to": 11
  }, {
    "from": 74,
    "label": "has",
    "to": 87
  }, {
    "from": 74,
    "label": "has",
    "to": 88
  }, {
    "from": 74,
    "label": "has",
    "to": 89
  }, {
    "from": 74,
    "label": "has",
    "to": 90
  }, {
    "from": 74,
    "label": "has",
    "to": 91
  }, {
    "from": 74,
    "label": "has",
    "to": 92
  }, {
    "from": 74,
    "label": "has",
    "to": 93
  }, {
    "from": 74,
    "label": "has",
    "to": 94
  }, {
    "from": 74,
    "label": "has",
    "to": 95
  }, {
    "from": 74,
    "label": "has",
    "to": 96
  }, {
    "from": 74,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 72
  }, {
    "from": 74,
    "label": "has",
    "to": 11
  }, {
    "from": 74,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 72
  }, {
    "from": 74,
    "label": "has",
    "to": 11
  }, {
    "from": 74,
    "label": "has",
    "to": 23
  }, {
    "from": 74,
    "label": "has",
    "to": 101
  }, {
    "from": 74,
    "label": "has",
    "to": 102
  }, {
    "from": 74,
    "label": "has",
    "to": 103
  }, {
    "from": 74,
    "label": "has",
    "to": 104
  }, {
    "from": 74,
    "label": "has",
    "to": 105
  }, {
    "from": 74,
    "label": "has",
    "to": 106
  }, {
    "from": 74,
    "label": "has",
    "to": 107
  }, {
    "from": 74,
    "label": "has",
    "to": 108
  }, {
    "from": 74,
    "label": "has",
    "to": 109
  }, {
    "from": 74,
    "label": "has",
    "to": 110
  }, {
    "from": 74,
    "label": "has",
    "to": 111
  }, {
    "from": 74,
    "label": "has",
    "to": 112
  }, {
    "from": 74,
    "label": "has",
    "to": 113
  }, {
    "from": 74,
    "label": "has",
    "to": 114
  }, {
    "from": 74,
    "label": "has",
    "to": 115
  }, {
    "from": 74,
    "label": "has",
    "to": 116
  }, {
    "from": 74,
    "label": "has",
    "to": 117
  }, {
    "from": 74,
    "label": "has",
    "to": 118
  }, {
    "from": 74,
    "label": "has",
    "to": 25
  }, {
    "from": 74,
    "label": "has",
    "to": 119
  }, {
    "from": 74,
    "label": "has",
    "to": 120
  }, {
    "from": 74,
    "label": "has",
    "to": 121
  }, {
    "from": 74,
    "label": "has",
    "to": 122
  }, {
    "from": 74,
    "label": "has",
    "to": 123
  }, {
    "from": 74,
    "label": "has",
    "to": 124
  }, {
    "from": 74,
    "label": "has",
    "to": 125
  }, {
    "from": 74,
    "label": "has",
    "to": 126
  }, {
    "from": 74,
    "label": "has",
    "to": 127
  }, {
    "from": 74,
    "label": "has",
    "to": 128
  }, {
    "from": 74,
    "label": "has",
    "to": 129
  }, {
    "from": 74,
    "label": "has",
    "to": 130
  }, {
    "from": 74,
    "label": "has",
    "to": 131
  }, {
    "from": 74,
    "label": "has",
    "to": 132
  }, {
    "from": 74,
    "label": "has",
    "to": 133
  }, {
    "from": 74,
    "label": "has",
    "to": 134
  }, {
    "from": 74,
    "label": "has",
    "to": 135
  }, {
    "from": 74,
    "label": "has",
    "to": 136
  }, {
    "from": 74,
    "label": "has",
    "to": 137
  }, {
    "from": 74,
    "label": "has",
    "to": 138
  }, {
    "from": 74,
    "label": "has",
    "to": 139
  }, {
    "from": 74,
    "label": "has",
    "to": 140
  }, {
    "from": 74,
    "label": "has",
    "to": 141
  }, {
    "from": 74,
    "label": "has",
    "to": 142
  }, {
    "from": 74,
    "label": "calls",
    "to": 146
  }, {
    "from": 2,
    "label": "calls",
    "to": 151
  }, {
    "from": 2,
    "label": "calls",
    "to": 154
  }, {
    "from": 27,
    "label": "calls",
    "to": 153
  }, {
    "from": 57,
    "label": "calls",
    "to": 153
  }, {
    "from": 27,
    "label": "calls",
    "to": 157
  }, {
    "from": 57,
    "label": "calls",
    "to": 157
  }, {
    "from": 57,
    "label": "calls",
    "to": 157
  }, {
    "from": 20,
    "label": "calls",
    "to": 158
  }, {
    "from": 20,
    "label": "calls",
    "to": 158
  }, {
    "from": 27,
    "label": "calls",
    "to": 158
  }, {
    "from": 143,
    "label": "calls",
    "to": 74
  }, {
    "from": 20,
    "label": "calls",
    "to": 155
  }, {
    "from": 2,
    "label": "calls",
    "to": 155
  }, {
    "from": 2,
    "label": "calls",
    "to": 20
  }, {
    "from": 68,
    "label": "calls",
    "to": 145
  }, {
    "from": 74,
    "label": "calls",
    "to": 145
  }, {
    "from": 74,
    "label": "calls",
    "to": 145
  }, {
    "from": 74,
    "label": "calls",
    "to": 145
  }, {
    "from": 74,
    "label": "calls",
    "to": 145
  }, {
    "from": 57,
    "label": "calls",
    "to": 47
  }, {
    "from": 74,
    "label": "calls",
    "to": 2
  }, {
    "from": 74,
    "label": "calls",
    "to": 150
  }, {
    "from": 74,
    "label": "calls",
    "to": 148
  }, {
    "from": 74,
    "label": "calls",
    "to": 144
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 74,
    "label": "calls",
    "to": 161
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 159
  }, {
    "from": 74,
    "label": "calls",
    "to": 149
  }, {
    "from": 27,
    "label": "calls",
    "to": 156
  }, {
    "from": 27,
    "label": "calls",
    "to": 156
  }, {
    "from": 27,
    "label": "calls",
    "to": 156
  }, {
    "from": 143,
    "label": "calls",
    "to": 160
  }, {
    "from": 74,
    "label": "calls",
    "to": 152
  }, {
    "from": 143,
    "label": "calls",
    "to": 147
  }, {
    "from": 1,
    "label": "contains",
    "to": 143
  }, {
    "from": 143,
    "label": "declares",
    "to": 2
  }, {
    "from": 143,
    "label": "declares",
    "to": 20
  }, {
    "from": 143,
    "label": "declares",
    "to": 22
  }, {
    "from": 143,
    "label": "declares",
    "to": 27
  }, {
    "from": 143,
    "label": "declares",
    "to": 47
  }, {
    "from": 143,
    "label": "declares",
    "to": 57
  }, {
    "from": 143,
    "label": "declares",
    "to": 68
  }, {
    "from": 143,
    "label": "declares",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 163
  }, {
    "from": 1,
    "label": "contains",
    "to": 164
  }, {
    "from": 163,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 166,
    "label": "assigns",
    "to": 167
  }, {
    "from": 166,
    "label": "assigns",
    "to": 168
  }, {
    "from": 166,
    "label": "assigns",
    "to": 169
  }, {
    "from": 166,
    "label": "assigns",
    "to": 170
  }, {
    "from": 166,
    "label": "assigns",
    "to": 171
  }, {
    "from": 166,
    "label": "assigns",
    "to": 172
  }, {
    "from": 166,
    "label": "assigns",
    "to": 173
  }, {
    "from": 166,
    "label": "assigns",
    "to": 174
  }, {
    "from": 166,
    "label": "assigns",
    "to": 175
  }, {
    "from": 166,
    "label": "assigns",
    "to": 176
  }, {
    "from": 166,
    "label": "assigns",
    "to": 177
  }, {
    "from": 166,
    "label": "assigns",
    "to": 178
  }, {
    "from": 166,
    "label": "assigns",
    "to": 179
  }, {
    "from": 166,
    "label": "assigns",
    "to": 180
  }, {
    "from": 166,
    "label": "assigns",
    "to": 181
  }, {
    "from": 166,
    "label": "assigns",
    "to": 182
  }, {
    "from": 166,
    "label": "assigns",
    "to": 183
  }, {
    "from": 166,
    "label": "assigns",
    "to": 184
  }, {
    "from": 166,
    "label": "assigns",
    "to": 185
  }, {
    "from": 166,
    "label": "assigns",
    "to": 186
  }, {
    "from": 166,
    "label": "assigns",
    "to": 187
  }, {
    "from": 163,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 163,
    "label": "initializes",
    "to": 190
  }, {
    "from": 163,
    "label": "initializes",
    "to": 191
  }, {
    "from": 163,
    "label": "initializes",
    "to": 192
  }, {
    "from": 163,
    "label": "initializes",
    "to": 193
  }, {
    "from": 163,
    "label": "initializes",
    "to": 194
  }, {
    "from": 163,
    "label": "initializes",
    "to": 195
  }, {
    "from": 164,
    "label": "initializes",
    "to": 162
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "calculator",
    "type": "module"
  }, {
    "id": 2,
    "text": "function GetExePath()\r\n    local function findLast(filePath) -- find index of last / or \\ in string\r\n        local lastOffset = nil\r\n        local offset = nil\r\n        repeat\r\n            offset = string.find(filePath, \"\\\\\") or string.find(filePath, \"/\")\r\n\r\n            if offset then\r\n                lastOffset = (lastOffset or 0) + offset\r\n                filePath = string.sub(filePath, offset + 1)\r\n            end\r\n        until not offset\r\n\r\n        return lastOffset\r\n    end\r\n\r\n    local filePath = debug.getinfo(1, \"S\").source\r\n\r\n    if string.byte(filePath) == string.byte('@') then\r\n        local offset = findLast(filePath)\r\n        if offset ~= nil then\r\n            -- remove the @ at the front up to just before the path separator\r\n            filePath = string.sub(filePath, 2, offset - 1)\r\n        else\r\n            filePath = \".\"\r\n        end\r\n    else\r\n        filePath = wx.wxGetCwd()\r\n    end\r\n\r\n    return filePath\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function findLast(filePath) -- find index of last / or \\ in string\r\n        local lastOffset = nil\r\n        local offset = nil\r\n        repeat\r\n            offset = string.find(filePath, \"\\\\\") or string.find(filePath, \"/\")\r\n\r\n            if offset then\r\n                lastOffset = (lastOffset or 0) + offset\r\n                filePath = string.sub(filePath, offset + 1)\r\n            end\r\n        until not offset\r\n\r\n        return lastOffset\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 4,
    "text": "local lastOffset = nil",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local offset = nil",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "repeat\r\n            offset = string.find(filePath, \"\\\\\") or string.find(filePath, \"/\")\r\n\r\n            if offset then\r\n                lastOffset = (lastOffset or 0) + offset\r\n                filePath = string.sub(filePath, offset + 1)\r\n            end\r\n        until not offset",
    "type": "statement:repeat"
  }, {
    "id": 7,
    "text": "offset = string.find(filePath, \"\\\\\") or string.find(filePath, \"/\")",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "if offset then\r\n                lastOffset = (lastOffset or 0) + offset\r\n                filePath = string.sub(filePath, offset + 1)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "lastOffset = (lastOffset or 0) + offset",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "filePath = string.sub(filePath, offset + 1)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "local filePath = debug.getinfo(1, \"S\").source",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if string.byte(filePath) == string.byte('@') then\r\n        local offset = findLast(filePath)\r\n        if offset ~= nil then\r\n            -- remove the @ at the front up to just before the path separator\r\n            filePath = string.sub(filePath, 2, offset - 1)\r\n        else\r\n            filePath = \".\"\r\n        end\r\n    else\r\n        filePath = wx.wxGetCwd()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "local offset = findLast(filePath)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if offset ~= nil then\r\n            -- remove the @ at the front up to just before the path separator\r\n            filePath = string.sub(filePath, 2, offset - 1)\r\n        else\r\n            filePath = \".\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "filePath = string.sub(filePath, 2, offset - 1)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "filePath = \".\"",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "filePath = wx.wxGetCwd()",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function findLast(filePath) -- find index of last / or \\ in string\r\n        local lastOffset = nil\r\n        local offset = nil\r\n        repeat\r\n            offset = string.find(filePath, \"\\\\\") or string.find(filePath, \"/\")\r\n\r\n            if offset then\r\n                lastOffset = (lastOffset or 0) + offset\r\n                filePath = string.sub(filePath, offset + 1)\r\n            end\r\n        until not offset\r\n\r\n        return lastOffset\r\n    end",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function OnClear(event)\r\n    txtDisplay:SetLabel(\"0\")\r\n    lastNumber      = 0\r\n    lastOperationId = ID_PLUS\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "txtDisplay:SetLabel(\"0\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "lastNumber      = 0",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "lastOperationId = ID_PLUS",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function OnNumber(event)\r\n    local numberId      = event:GetId()\r\n    local displayString = txtDisplay:GetLabel()\r\n\r\n    if (displayString == \"0\") or (tonumber(displayString) == nil) or clearDisplay then\r\n        displayString = \"\"\r\n    end\r\n    clearDisplay = nil\r\n\r\n    -- Limit string length to 12 chars\r\n    if string.len(displayString) < 12 then\r\n        if numberId == ID_DECIMAL then\r\n            if not string.find(displayString, \".\", 1, 1) then\r\n                -- If the first pressed char is \".\" then we want \"0.\"\r\n                if string.len(displayString) == 0 then\r\n                    displayString = displayString..\"0.\"\r\n                else\r\n                    displayString = displayString..\".\"\r\n                end\r\n            end\r\n        else\r\n            -- map button window ids to numeric values\r\n            local idTable = { [ID_0] = 0, [ID_1] = 1, [ID_2] = 2, [ID_3] = 3,\r\n                              [ID_4] = 4, [ID_5] = 5, [ID_6] = 6, [ID_7] = 7,\r\n                              [ID_8] = 8, [ID_9] = 9 }\r\n\r\n            local num = idTable[numberId]\r\n\r\n            -- If first character entered is 0 we reject it\r\n            if (num == 0) and (string.len(displayString) == 0) then\r\n                displayString = \"0\"\r\n            elseif displayString == \"\" then\r\n                displayString = num\r\n            else\r\n                displayString = displayString..num\r\n            end\r\n        end\r\n\r\n        txtDisplay:SetLabel(tostring(displayString))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local numberId      = event:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local displayString = txtDisplay:GetLabel()",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if (displayString == \"0\") or (tonumber(displayString) == nil) or clearDisplay then\r\n        displayString = \"\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "displayString = \"\"",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "clearDisplay = nil",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if string.len(displayString) < 12 then\r\n        if numberId == ID_DECIMAL then\r\n            if not string.find(displayString, \".\", 1, 1) then\r\n                -- If the first pressed char is \".\" then we want \"0.\"\r\n                if string.len(displayString) == 0 then\r\n                    displayString = displayString..\"0.\"\r\n                else\r\n                    displayString = displayString..\".\"\r\n                end\r\n            end\r\n        else\r\n            -- map button window ids to numeric values\r\n            local idTable = { [ID_0] = 0, [ID_1] = 1, [ID_2] = 2, [ID_3] = 3,\r\n                              [ID_4] = 4, [ID_5] = 5, [ID_6] = 6, [ID_7] = 7,\r\n                              [ID_8] = 8, [ID_9] = 9 }\r\n\r\n            local num = idTable[numberId]\r\n\r\n            -- If first character entered is 0 we reject it\r\n            if (num == 0) and (string.len(displayString) == 0) then\r\n                displayString = \"0\"\r\n            elseif displayString == \"\" then\r\n                displayString = num\r\n            else\r\n                displayString = displayString..num\r\n            end\r\n        end\r\n\r\n        txtDisplay:SetLabel(tostring(displayString))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "if numberId == ID_DECIMAL then\r\n            if not string.find(displayString, \".\", 1, 1) then\r\n                -- If the first pressed char is \".\" then we want \"0.\"\r\n                if string.len(displayString) == 0 then\r\n                    displayString = displayString..\"0.\"\r\n                else\r\n                    displayString = displayString..\".\"\r\n                end\r\n            end\r\n        else\r\n            -- map button window ids to numeric values\r\n            local idTable = { [ID_0] = 0, [ID_1] = 1, [ID_2] = 2, [ID_3] = 3,\r\n                              [ID_4] = 4, [ID_5] = 5, [ID_6] = 6, [ID_7] = 7,\r\n                              [ID_8] = 8, [ID_9] = 9 }\r\n\r\n            local num = idTable[numberId]\r\n\r\n            -- If first character entered is 0 we reject it\r\n            if (num == 0) and (string.len(displayString) == 0) then\r\n                displayString = \"0\"\r\n            elseif displayString == \"\" then\r\n                displayString = num\r\n            else\r\n                displayString = displayString..num\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if not string.find(displayString, \".\", 1, 1) then\r\n                -- If the first pressed char is \".\" then we want \"0.\"\r\n                if string.len(displayString) == 0 then\r\n                    displayString = displayString..\"0.\"\r\n                else\r\n                    displayString = displayString..\".\"\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if string.len(displayString) == 0 then\r\n                    displayString = displayString..\"0.\"\r\n                else\r\n                    displayString = displayString..\".\"\r\n                end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "displayString = displayString..\"0.\"",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "displayString = displayString..\".\"",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "local idTable = { [ID_0] = 0, [ID_1] = 1, [ID_2] = 2, [ID_3] = 3,\r\n                              [ID_4] = 4, [ID_5] = 5, [ID_6] = 6, [ID_7] = 7,\r\n                              [ID_8] = 8, [ID_9] = 9 }",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local num = idTable[numberId]",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if (num == 0) and (string.len(displayString) == 0) then\r\n                displayString = \"0\"\r\n            elseif displayString == \"\" then\r\n                displayString = num\r\n            else\r\n                displayString = displayString..num\r\n            end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "displayString = \"0\"",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "displayString = num",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "displayString = displayString..num",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "txtDisplay:SetLabel(tostring(displayString))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function DoOperation(a, b, operationId)\r\n    local result = a\r\n    if operationId == ID_PLUS then\r\n        result =  b + a\r\n    elseif operationId == ID_MINUS then\r\n        result =  b - a\r\n    elseif operationId == ID_MULTIPLY then\r\n        result = b * a\r\n    elseif operationId == ID_DIVIDE then\r\n        if a == 0 then\r\n            result = \"Divide by zero error\"\r\n        else\r\n            result = b / a\r\n        end\r\n    end\r\n    return result\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local result = a",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if operationId == ID_PLUS then\r\n        result =  b + a\r\n    elseif operationId == ID_MINUS then\r\n        result =  b - a\r\n    elseif operationId == ID_MULTIPLY then\r\n        result = b * a\r\n    elseif operationId == ID_DIVIDE then\r\n        if a == 0 then\r\n            result = \"Divide by zero error\"\r\n        else\r\n            result = b / a\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "result =  b + a",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "result =  b - a",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "result = b * a",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if a == 0 then\r\n            result = \"Divide by zero error\"\r\n        else\r\n            result = b / a\r\n        end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "result = \"Divide by zero error\"",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "result = b / a",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function OnOperator(event)\r\n    -- Get display content\r\n    local displayString = txtDisplay:GetLabel()\r\n    local currentNumber = tonumber(displayString)\r\n\r\n    -- if error message was shown, zero output and ignore operator\r\n    if ((currentNumber == nil) or (lastNumber == nil)) then\r\n        lastNumber = 0\r\n        return\r\n    end\r\n\r\n    -- Get the required lastOperationId\r\n    local operationId = event:GetId()\r\n\r\n    displayString = DoOperation(currentNumber, lastNumber, lastOperationId)\r\n    lastNumber    = tonumber(displayString)\r\n\r\n    if (lastOperationId ~= ID_EQUALS) or (operationId == ID_EQUALS) then\r\n        txtDisplay:SetLabel(tostring(displayString))\r\n    end\r\n    clearDisplay  = 1\r\n    lastOperationId = operationId\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local currentNumber = tonumber(displayString)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if ((currentNumber == nil) or (lastNumber == nil)) then\r\n        lastNumber = 0\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "lastNumber = 0",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "local operationId = event:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "displayString = DoOperation(currentNumber, lastNumber, lastOperationId)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "lastNumber    = tonumber(displayString)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if (lastOperationId ~= ID_EQUALS) or (operationId == ID_EQUALS) then\r\n        txtDisplay:SetLabel(tostring(displayString))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "clearDisplay  = 1",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "lastOperationId = operationId",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function OnQuit(event)\r\n    event:Skip()\r\n    wx.wxMessageBox(\"wxLua calculator sample based on the calc sample written by Marco Ghislanzoni.\\n\"..\r\n                    wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                    \"wxLua Calculator\",\r\n                    wx.wxOK + wx.wxICON_INFORMATION, dialog)\r\n\r\n    dialog:Show(false)\r\n    dialog:Destroy()\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "event:Skip()",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "wx.wxMessageBox(\"wxLua calculator sample based on the calc sample written by Marco Ghislanzoni.\\n\"..\r\n                    wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                    \"wxLua Calculator\",\r\n                    wx.wxOK + wx.wxICON_INFORMATION, dialog)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "dialog:Show(false)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "dialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function main()\r\n    -- xml style resources (if present)\r\n    xmlResource = wx.wxXmlResource()\r\n    xmlResource:InitAllHandlers()\r\n    local xrcFilename = GetExePath()..\"/calculator.xrc\"\r\n\r\n    -- try to load the resource and ask for path to it if not found\r\n    while not xmlResource:Load(xrcFilename) do\r\n        -- must unload the file before we try again\r\n        xmlResource:Unload(xrcFilename)\r\n\r\n        wx.wxMessageBox(\"Error loading xrc resources, please choose the path to 'calculator.xrc'.\",\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)\r\n        local fileDialog = wx.wxFileDialog(wx.NULL,\r\n                                           \"Open 'calculator.xrc' resource file\",\r\n                                           \"\",\r\n                                           \"calculator.xrc\",\r\n                                           \"XRC files (*.xrc)|*.xrc|All files (*)|*\",\r\n                                            wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n\r\n        if fileDialog:ShowModal() == wx.wxID_OK then\r\n            xrcFilename = fileDialog:GetPath()\r\n        else\r\n            return -- quit program\r\n        end\r\n    end\r\n\r\n    dialog = wx.wxDialog()\r\n    if not xmlResource:LoadDialog(dialog, wx.NULL, \"Calculator\") then\r\n        wx.wxMessageBox(\"Error loading xrc resources!\",\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)\r\n        return -- quit program\r\n    end\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- This is a little awkward, but it's how it's done in C++ too\r\n    bitmap = wx.wxBitmap(xpmdata)\r\n    icon = wx.wxIcon()\r\n    icon:CopyFromBitmap(bitmap)\r\n    dialog:SetIcon(icon)\r\n    bitmap:delete()\r\n    icon:delete()\r\n\r\n    bestSize = dialog:GetBestSize()\r\n    dialog:SetSize(bestSize:GetWidth()/2, bestSize:GetHeight())\r\n    dialog:SetSizeHints(bestSize:GetWidth()/2, bestSize:GetHeight())\r\n\r\n    -- initialize the txtDisplay and verify that it's ok\r\n    txtDisplay = dialog:FindWindow(xmlResource.GetXRCID(\"ID_TEXT\"))\r\n    if not txtDisplay then\r\n        wx.wxMessageBox('Unable to find window \"ID_TEXT\" in the dialog',\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)\r\n        dialog:Destroy()\r\n        return\r\n    end\r\n    if not txtDisplay:DynamicCast(\"wxStaticText\") then\r\n        wx.wxMessageBox('window \"ID_TEXT\" is not a \"wxStaticText\" or is not derived from it\"',\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)\r\n        dialog:Destroy()\r\n        return\r\n    end\r\n    txtDisplay:SetLabel(\"0\")\r\n\r\n    -- init global wxWindow ID values\r\n    ID_0        = xmlResource.GetXRCID(\"ID_0\")\r\n    ID_1        = xmlResource.GetXRCID(\"ID_1\")\r\n    ID_2        = xmlResource.GetXRCID(\"ID_2\")\r\n    ID_3        = xmlResource.GetXRCID(\"ID_3\")\r\n    ID_4        = xmlResource.GetXRCID(\"ID_4\")\r\n    ID_5        = xmlResource.GetXRCID(\"ID_5\")\r\n    ID_6        = xmlResource.GetXRCID(\"ID_6\")\r\n    ID_7        = xmlResource.GetXRCID(\"ID_7\")\r\n    ID_8        = xmlResource.GetXRCID(\"ID_8\")\r\n    ID_9        = xmlResource.GetXRCID(\"ID_9\")\r\n    ID_DECIMAL  = xmlResource.GetXRCID(\"ID_DECIMAL\")\r\n    ID_EQUALS   = xmlResource.GetXRCID(\"ID_EQUALS\")\r\n    ID_PLUS     = xmlResource.GetXRCID(\"ID_PLUS\")\r\n    ID_MINUS    = xmlResource.GetXRCID(\"ID_MINUS\")\r\n    ID_MULTIPLY = xmlResource.GetXRCID(\"ID_MULTIPLY\")\r\n    ID_DIVIDE   = xmlResource.GetXRCID(\"ID_DIVIDE\")\r\n    ID_OFF      = xmlResource.GetXRCID(\"ID_OFF\")\r\n    ID_CLEAR    = xmlResource.GetXRCID(\"ID_CLEAR\")\r\n\r\n    lastOperationId = ID_PLUS\r\n\r\n    dialog:Connect(ID_0,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_1,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_2,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_3,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_4,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_5,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_6,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_7,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_8,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_9,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_DECIMAL,  wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)\r\n    dialog:Connect(ID_EQUALS,   wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)\r\n    dialog:Connect(ID_PLUS,     wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)\r\n    dialog:Connect(ID_MINUS,    wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)\r\n    dialog:Connect(ID_MULTIPLY, wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)\r\n    dialog:Connect(ID_DIVIDE,   wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)\r\n    dialog:Connect(ID_OFF,      wx.wxEVT_COMMAND_BUTTON_CLICKED, OnQuit)\r\n    dialog:Connect(ID_CLEAR,    wx.wxEVT_COMMAND_BUTTON_CLICKED, OnClear)\r\n\r\n    dialog:Connect(wx.wxEVT_CLOSE_WINDOW, OnQuit)\r\n\r\n    accelTable = wx.wxAcceleratorTable({\r\n        { wx.wxACCEL_NORMAL, string.byte('0'),       ID_0        },\r\n        { wx.wxACCEL_NORMAL, string.byte('1'),       ID_1        },\r\n        { wx.wxACCEL_NORMAL, string.byte('2'),       ID_2        },\r\n        { wx.wxACCEL_NORMAL, string.byte('3'),       ID_3        },\r\n        { wx.wxACCEL_NORMAL, string.byte('4'),       ID_4        },\r\n        { wx.wxACCEL_NORMAL, string.byte('5'),       ID_5        },\r\n        { wx.wxACCEL_NORMAL, string.byte('6'),       ID_6        },\r\n        { wx.wxACCEL_NORMAL, string.byte('7'),       ID_7        },\r\n        { wx.wxACCEL_NORMAL, string.byte('8'),       ID_8        },\r\n        { wx.wxACCEL_NORMAL, string.byte('9'),       ID_9        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD0,         ID_0        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD1,         ID_1        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD2,         ID_2        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD3,         ID_3        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD4,         ID_4        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD5,         ID_5        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD6,         ID_6        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD7,         ID_7        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD8,         ID_8        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD9,         ID_9        },\r\n        { wx.wxACCEL_NORMAL, string.byte('.'),       ID_DECIMAL  },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_DECIMAL,  ID_DECIMAL  },\r\n        { wx.wxACCEL_NORMAL, string.byte('='),       ID_EQUALS   },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_ENTER,    ID_EQUALS   },\r\n        { wx.wxACCEL_NORMAL, 13,                     ID_EQUALS   },\r\n        { wx.wxACCEL_NORMAL, string.byte('+'),       ID_PLUS     },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_ADD,      ID_PLUS     },\r\n        { wx.wxACCEL_NORMAL, string.byte('-'),       ID_MINUS    },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_SUBTRACT, ID_MINUS    },\r\n        { wx.wxACCEL_NORMAL, string.byte('*'),       ID_MULTIPLY },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_MULTIPLY, ID_MULTIPLY },\r\n        { wx.wxACCEL_NORMAL, string.byte('/'),       ID_DIVIDE   },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_DIVIDE,   ID_DIVIDE   },\r\n        { wx.wxACCEL_NORMAL, string.byte('C'),       ID_CLEAR    },\r\n        { wx.wxACCEL_NORMAL, string.byte('c'),       ID_CLEAR    },\r\n        { wx.wxACCEL_NORMAL, wx.WXK_ESCAPE,          ID_OFF      }\r\n    })\r\n\r\n    dialog:SetAcceleratorTable(accelTable)\r\n    dialog:Centre()\r\n    dialog:Show(true)\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "xmlResource = wx.wxXmlResource()",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "xmlResource:InitAllHandlers()",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "local xrcFilename = GetExePath()..\"/calculator.xrc\"",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "while not xmlResource:Load(xrcFilename) do\r\n        -- must unload the file before we try again\r\n        xmlResource:Unload(xrcFilename)\r\n\r\n        wx.wxMessageBox(\"Error loading xrc resources, please choose the path to 'calculator.xrc'.\",\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)\r\n        local fileDialog = wx.wxFileDialog(wx.NULL,\r\n                                           \"Open 'calculator.xrc' resource file\",\r\n                                           \"\",\r\n                                           \"calculator.xrc\",\r\n                                           \"XRC files (*.xrc)|*.xrc|All files (*)|*\",\r\n                                            wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n\r\n        if fileDialog:ShowModal() == wx.wxID_OK then\r\n            xrcFilename = fileDialog:GetPath()\r\n        else\r\n            return -- quit program\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 79,
    "text": "xmlResource:Unload(xrcFilename)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "wx.wxMessageBox(\"Error loading xrc resources, please choose the path to 'calculator.xrc'.\",\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "local fileDialog = wx.wxFileDialog(wx.NULL,\r\n                                           \"Open 'calculator.xrc' resource file\",\r\n                                           \"\",\r\n                                           \"calculator.xrc\",\r\n                                           \"XRC files (*.xrc)|*.xrc|All files (*)|*\",\r\n                                            wx.wxOPEN + wx.wxFILE_MUST_EXIST)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if fileDialog:ShowModal() == wx.wxID_OK then\r\n            xrcFilename = fileDialog:GetPath()\r\n        else\r\n            return -- quit program\r\n        end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "xrcFilename = fileDialog:GetPath()",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "dialog = wx.wxDialog()",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "if not xmlResource:LoadDialog(dialog, wx.NULL, \"Calculator\") then\r\n        wx.wxMessageBox(\"Error loading xrc resources!\",\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)\r\n        return -- quit program\r\n    end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "wx.wxMessageBox(\"Error loading xrc resources!\",\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "bitmap = wx.wxBitmap(xpmdata)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "icon = wx.wxIcon()",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "icon:CopyFromBitmap(bitmap)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "dialog:SetIcon(icon)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "bitmap:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "icon:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "bestSize = dialog:GetBestSize()",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "dialog:SetSize(bestSize:GetWidth()/2, bestSize:GetHeight())",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "dialog:SetSizeHints(bestSize:GetWidth()/2, bestSize:GetHeight())",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "txtDisplay = dialog:FindWindow(xmlResource.GetXRCID(\"ID_TEXT\"))",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if not txtDisplay then\r\n        wx.wxMessageBox('Unable to find window \"ID_TEXT\" in the dialog',\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)\r\n        dialog:Destroy()\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "wx.wxMessageBox('Unable to find window \"ID_TEXT\" in the dialog',\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "if not txtDisplay:DynamicCast(\"wxStaticText\") then\r\n        wx.wxMessageBox('window \"ID_TEXT\" is not a \"wxStaticText\" or is not derived from it\"',\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)\r\n        dialog:Destroy()\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "wx.wxMessageBox('window \"ID_TEXT\" is not a \"wxStaticText\" or is not derived from it\"',\r\n                        \"Calculator\",\r\n                        wx.wxOK + wx.wxICON_EXCLAMATION,\r\n                        wx.NULL)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "ID_0        = xmlResource.GetXRCID(\"ID_0\")",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "ID_1        = xmlResource.GetXRCID(\"ID_1\")",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "ID_2        = xmlResource.GetXRCID(\"ID_2\")",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "ID_3        = xmlResource.GetXRCID(\"ID_3\")",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "ID_4        = xmlResource.GetXRCID(\"ID_4\")",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "ID_5        = xmlResource.GetXRCID(\"ID_5\")",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "ID_6        = xmlResource.GetXRCID(\"ID_6\")",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "ID_7        = xmlResource.GetXRCID(\"ID_7\")",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "ID_8        = xmlResource.GetXRCID(\"ID_8\")",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "ID_9        = xmlResource.GetXRCID(\"ID_9\")",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "ID_DECIMAL  = xmlResource.GetXRCID(\"ID_DECIMAL\")",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "ID_EQUALS   = xmlResource.GetXRCID(\"ID_EQUALS\")",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "ID_PLUS     = xmlResource.GetXRCID(\"ID_PLUS\")",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "ID_MINUS    = xmlResource.GetXRCID(\"ID_MINUS\")",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "ID_MULTIPLY = xmlResource.GetXRCID(\"ID_MULTIPLY\")",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "ID_DIVIDE   = xmlResource.GetXRCID(\"ID_DIVIDE\")",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "ID_OFF      = xmlResource.GetXRCID(\"ID_OFF\")",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "ID_CLEAR    = xmlResource.GetXRCID(\"ID_CLEAR\")",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "dialog:Connect(ID_0,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "dialog:Connect(ID_1,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "dialog:Connect(ID_2,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "dialog:Connect(ID_3,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "dialog:Connect(ID_4,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "dialog:Connect(ID_5,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "dialog:Connect(ID_6,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "dialog:Connect(ID_7,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "dialog:Connect(ID_8,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "dialog:Connect(ID_9,        wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "dialog:Connect(ID_DECIMAL,  wx.wxEVT_COMMAND_BUTTON_CLICKED, OnNumber)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "dialog:Connect(ID_EQUALS,   wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "dialog:Connect(ID_PLUS,     wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "dialog:Connect(ID_MINUS,    wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "dialog:Connect(ID_MULTIPLY, wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "dialog:Connect(ID_DIVIDE,   wx.wxEVT_COMMAND_BUTTON_CLICKED, OnOperator)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "dialog:Connect(ID_OFF,      wx.wxEVT_COMMAND_BUTTON_CLICKED, OnQuit)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "dialog:Connect(ID_CLEAR,    wx.wxEVT_COMMAND_BUTTON_CLICKED, OnClear)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "dialog:Connect(wx.wxEVT_CLOSE_WINDOW, OnQuit)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "accelTable = wx.wxAcceleratorTable({\r\n        { wx.wxACCEL_NORMAL, string.byte('0'),       ID_0        },\r\n        { wx.wxACCEL_NORMAL, string.byte('1'),       ID_1        },\r\n        { wx.wxACCEL_NORMAL, string.byte('2'),       ID_2        },\r\n        { wx.wxACCEL_NORMAL, string.byte('3'),       ID_3        },\r\n        { wx.wxACCEL_NORMAL, string.byte('4'),       ID_4        },\r\n        { wx.wxACCEL_NORMAL, string.byte('5'),       ID_5        },\r\n        { wx.wxACCEL_NORMAL, string.byte('6'),       ID_6        },\r\n        { wx.wxACCEL_NORMAL, string.byte('7'),       ID_7        },\r\n        { wx.wxACCEL_NORMAL, string.byte('8'),       ID_8        },\r\n        { wx.wxACCEL_NORMAL, string.byte('9'),       ID_9        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD0,         ID_0        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD1,         ID_1        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD2,         ID_2        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD3,         ID_3        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD4,         ID_4        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD5,         ID_5        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD6,         ID_6        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD7,         ID_7        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD8,         ID_8        },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD9,         ID_9        },\r\n        { wx.wxACCEL_NORMAL, string.byte('.'),       ID_DECIMAL  },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_DECIMAL,  ID_DECIMAL  },\r\n        { wx.wxACCEL_NORMAL, string.byte('='),       ID_EQUALS   },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_ENTER,    ID_EQUALS   },\r\n        { wx.wxACCEL_NORMAL, 13,                     ID_EQUALS   },\r\n        { wx.wxACCEL_NORMAL, string.byte('+'),       ID_PLUS     },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_ADD,      ID_PLUS     },\r\n        { wx.wxACCEL_NORMAL, string.byte('-'),       ID_MINUS    },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_SUBTRACT, ID_MINUS    },\r\n        { wx.wxACCEL_NORMAL, string.byte('*'),       ID_MULTIPLY },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_MULTIPLY, ID_MULTIPLY },\r\n        { wx.wxACCEL_NORMAL, string.byte('/'),       ID_DIVIDE   },\r\n        { wx.wxACCEL_NORMAL, wx.VXK_NUMPAD_DIVIDE,   ID_DIVIDE   },\r\n        { wx.wxACCEL_NORMAL, string.byte('C'),       ID_CLEAR    },\r\n        { wx.wxACCEL_NORMAL, string.byte('c'),       ID_CLEAR    },\r\n        { wx.wxACCEL_NORMAL, wx.WXK_ESCAPE,          ID_OFF      }\r\n    })",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "dialog:SetAcceleratorTable(accelTable)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "dialog:Centre()",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "dialog:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "",
    "type": "function container"
  }, {
    "id": 144,
    "text": "wxDialog",
    "type": "global function"
  }, {
    "id": 145,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 146,
    "text": "wxIcon",
    "type": "global function"
  }, {
    "id": 147,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 148,
    "text": "wxFileDialog",
    "type": "global function"
  }, {
    "id": 149,
    "text": "wxBitmap",
    "type": "global function"
  }, {
    "id": 150,
    "text": "wxAcceleratorTable",
    "type": "global function"
  }, {
    "id": 151,
    "text": "wxGetCwd",
    "type": "global function"
  }, {
    "id": 152,
    "text": "wxXmlResource",
    "type": "global function"
  }, {
    "id": 153,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 154,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 155,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 156,
    "text": "len",
    "type": "global function"
  }, {
    "id": 157,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 158,
    "text": "find",
    "type": "global function"
  }, {
    "id": 159,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 160,
    "text": "require",
    "type": "global function"
  }, {
    "id": 161,
    "text": "GetXRCID",
    "type": "global function"
  }, {
    "id": 162,
    "text": "",
    "type": "global variable"
  }, {
    "id": 163,
    "text": "",
    "type": "variable container"
  }, {
    "id": 164,
    "text": "",
    "type": "require container"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 167,
    "text": "",
    "type": "string"
  }, {
    "id": 168,
    "text": "",
    "type": "string"
  }, {
    "id": 169,
    "text": "",
    "type": "string"
  }, {
    "id": 170,
    "text": "",
    "type": "string"
  }, {
    "id": 171,
    "text": "",
    "type": "string"
  }, {
    "id": 172,
    "text": "",
    "type": "string"
  }, {
    "id": 173,
    "text": "",
    "type": "string"
  }, {
    "id": 174,
    "text": "",
    "type": "string"
  }, {
    "id": 175,
    "text": "",
    "type": "string"
  }, {
    "id": 176,
    "text": "",
    "type": "string"
  }, {
    "id": 177,
    "text": "",
    "type": "string"
  }, {
    "id": 178,
    "text": "",
    "type": "string"
  }, {
    "id": 179,
    "text": "",
    "type": "string"
  }, {
    "id": 180,
    "text": "",
    "type": "string"
  }, {
    "id": 181,
    "text": "",
    "type": "string"
  }, {
    "id": 182,
    "text": "",
    "type": "string"
  }, {
    "id": 183,
    "text": "",
    "type": "string"
  }, {
    "id": 184,
    "text": "",
    "type": "string"
  }, {
    "id": 185,
    "text": "",
    "type": "string"
  }, {
    "id": 186,
    "text": "",
    "type": "string"
  }, {
    "id": 187,
    "text": "",
    "type": "string"
  }, {
    "id": 188,
    "text": "",
    "type": "global variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "global variable"
  }, {
    "id": 191,
    "text": "",
    "type": "global variable"
  }, {
    "id": 192,
    "text": "",
    "type": "global variable"
  }, {
    "id": 193,
    "text": "",
    "type": "global variable"
  }, {
    "id": 194,
    "text": "",
    "type": "global variable"
  }, {
    "id": 195,
    "text": "",
    "type": "global variable"
  } ]
}