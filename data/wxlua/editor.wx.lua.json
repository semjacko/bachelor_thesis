{
  "_filename": "editor.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/editor.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 27,
    "label": "has",
    "to": 38
  }, {
    "from": 27,
    "label": "has",
    "to": 39
  }, {
    "from": 19,
    "label": "has",
    "to": 40
  }, {
    "from": 19,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 20
  }, {
    "from": 42,
    "label": "has",
    "to": 21
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 42,
    "label": "has",
    "to": 40
  }, {
    "from": 42,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 71,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 71,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 4
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 4
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 99
  }, {
    "from": 89,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 111,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 111,
    "label": "has",
    "to": 120
  }, {
    "from": 111,
    "label": "has",
    "to": 121
  }, {
    "from": 111,
    "label": "has",
    "to": 122
  }, {
    "from": 111,
    "label": "has",
    "to": 123
  }, {
    "from": 111,
    "label": "has",
    "to": 124
  }, {
    "from": 111,
    "label": "has",
    "to": 125
  }, {
    "from": 111,
    "label": "has",
    "to": 126
  }, {
    "from": 111,
    "label": "has",
    "to": 127
  }, {
    "from": 111,
    "label": "has",
    "to": 128
  }, {
    "from": 111,
    "label": "has",
    "to": 129
  }, {
    "from": 111,
    "label": "has",
    "to": 130
  }, {
    "from": 111,
    "label": "has",
    "to": 131
  }, {
    "from": 111,
    "label": "has",
    "to": 132
  }, {
    "from": 111,
    "label": "has",
    "to": 133
  }, {
    "from": 111,
    "label": "has",
    "to": 134
  }, {
    "from": 111,
    "label": "has",
    "to": 135
  }, {
    "from": 111,
    "label": "has",
    "to": 136
  }, {
    "from": 111,
    "label": "has",
    "to": 137
  }, {
    "from": 111,
    "label": "has",
    "to": 138
  }, {
    "from": 111,
    "label": "has",
    "to": 139
  }, {
    "from": 111,
    "label": "has",
    "to": 140
  }, {
    "from": 111,
    "label": "has",
    "to": 141
  }, {
    "from": 111,
    "label": "has",
    "to": 142
  }, {
    "from": 111,
    "label": "has",
    "to": 143
  }, {
    "from": 111,
    "label": "has",
    "to": 144
  }, {
    "from": 111,
    "label": "has",
    "to": 145
  }, {
    "from": 111,
    "label": "has",
    "to": 146
  }, {
    "from": 111,
    "label": "has",
    "to": 147
  }, {
    "from": 111,
    "label": "has",
    "to": 148
  }, {
    "from": 111,
    "label": "has",
    "to": 149
  }, {
    "from": 111,
    "label": "has",
    "to": 150
  }, {
    "from": 111,
    "label": "has",
    "to": 151
  }, {
    "from": 111,
    "label": "has",
    "to": 152
  }, {
    "from": 111,
    "label": "has",
    "to": 153
  }, {
    "from": 111,
    "label": "has",
    "to": 154
  }, {
    "from": 111,
    "label": "has",
    "to": 155
  }, {
    "from": 111,
    "label": "has",
    "to": 156
  }, {
    "from": 111,
    "label": "has",
    "to": 157
  }, {
    "from": 111,
    "label": "has",
    "to": 158
  }, {
    "from": 111,
    "label": "has",
    "to": 159
  }, {
    "from": 111,
    "label": "has",
    "to": 160
  }, {
    "from": 111,
    "label": "has",
    "to": 161
  }, {
    "from": 111,
    "label": "has",
    "to": 162
  }, {
    "from": 111,
    "label": "has",
    "to": 163
  }, {
    "from": 111,
    "label": "has",
    "to": 164
  }, {
    "from": 111,
    "label": "has",
    "to": 165
  }, {
    "from": 111,
    "label": "has",
    "to": 166
  }, {
    "from": 111,
    "label": "has",
    "to": 167
  }, {
    "from": 111,
    "label": "has",
    "to": 168
  }, {
    "from": 111,
    "label": "has",
    "to": 169
  }, {
    "from": 111,
    "label": "has",
    "to": 170
  }, {
    "from": 111,
    "label": "has",
    "to": 171
  }, {
    "from": 111,
    "label": "has",
    "to": 172
  }, {
    "from": 111,
    "label": "has",
    "to": 173
  }, {
    "from": 111,
    "label": "has",
    "to": 174
  }, {
    "from": 111,
    "label": "has",
    "to": 175
  }, {
    "from": 111,
    "label": "has",
    "to": 176
  }, {
    "from": 111,
    "label": "has",
    "to": 177
  }, {
    "from": 111,
    "label": "has",
    "to": 178
  }, {
    "from": 111,
    "label": "has",
    "to": 179
  }, {
    "from": 111,
    "label": "has",
    "to": 180
  }, {
    "from": 111,
    "label": "has",
    "to": 181
  }, {
    "from": 111,
    "label": "has",
    "to": 182
  }, {
    "from": 111,
    "label": "has",
    "to": 183
  }, {
    "from": 111,
    "label": "has",
    "to": 184
  }, {
    "from": 111,
    "label": "has",
    "to": 185
  }, {
    "from": 111,
    "label": "has",
    "to": 186
  }, {
    "from": 111,
    "label": "has",
    "to": 187
  }, {
    "from": 111,
    "label": "has",
    "to": 188
  }, {
    "from": 111,
    "label": "has",
    "to": 189
  }, {
    "from": 111,
    "label": "has",
    "to": 190
  }, {
    "from": 111,
    "label": "has",
    "to": 191
  }, {
    "from": 111,
    "label": "has",
    "to": 192
  }, {
    "from": 111,
    "label": "has",
    "to": 193
  }, {
    "from": 111,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 111,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 75
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 213
  }, {
    "from": 206,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 111,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 207
  }, {
    "from": 219,
    "label": "has",
    "to": 213
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 111,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 111,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 111,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 69
  }, {
    "from": 111,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 4
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 68
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 111,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 232,
    "label": "has",
    "to": 235
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 232,
    "label": "has",
    "to": 237
  }, {
    "from": 232,
    "label": "has",
    "to": 238
  }, {
    "from": 232,
    "label": "has",
    "to": 239
  }, {
    "from": 232,
    "label": "has",
    "to": 240
  }, {
    "from": 232,
    "label": "has",
    "to": 241
  }, {
    "from": 111,
    "label": "has",
    "to": 4
  }, {
    "from": 111,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 4
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 246,
    "label": "has",
    "to": 249
  }, {
    "from": 246,
    "label": "has",
    "to": 250
  }, {
    "from": 246,
    "label": "has",
    "to": 251
  }, {
    "from": 246,
    "label": "has",
    "to": 252
  }, {
    "from": 246,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 253,
    "label": "has",
    "to": 257
  }, {
    "from": 253,
    "label": "has",
    "to": 258
  }, {
    "from": 246,
    "label": "has",
    "to": 259
  }, {
    "from": 246,
    "label": "has",
    "to": 260
  }, {
    "from": 246,
    "label": "has",
    "to": 261
  }, {
    "from": 245,
    "label": "has",
    "to": 262
  }, {
    "from": 245,
    "label": "has",
    "to": 263
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 264,
    "label": "has",
    "to": 266
  }, {
    "from": 264,
    "label": "has",
    "to": 267
  }, {
    "from": 264,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 271
  }, {
    "from": 264,
    "label": "has",
    "to": 4
  }, {
    "from": 264,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 275,
    "label": "has",
    "to": 277
  }, {
    "from": 273,
    "label": "has",
    "to": 278
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 280,
    "label": "has",
    "to": 283
  }, {
    "from": 279,
    "label": "has",
    "to": 284
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 285,
    "label": "has",
    "to": 287
  }, {
    "from": 285,
    "label": "has",
    "to": 288
  }, {
    "from": 285,
    "label": "has",
    "to": 289
  }, {
    "from": 285,
    "label": "has",
    "to": 290
  }, {
    "from": 285,
    "label": "has",
    "to": 291
  }, {
    "from": 285,
    "label": "has",
    "to": 292
  }, {
    "from": 285,
    "label": "has",
    "to": 293
  }, {
    "from": 285,
    "label": "has",
    "to": 294
  }, {
    "from": 285,
    "label": "has",
    "to": 295
  }, {
    "from": 285,
    "label": "has",
    "to": 296
  }, {
    "from": 285,
    "label": "has",
    "to": 297
  }, {
    "from": 285,
    "label": "has",
    "to": 298
  }, {
    "from": 285,
    "label": "has",
    "to": 296
  }, {
    "from": 285,
    "label": "has",
    "to": 299
  }, {
    "from": 285,
    "label": "has",
    "to": 300
  }, {
    "from": 285,
    "label": "has",
    "to": 301
  }, {
    "from": 285,
    "label": "has",
    "to": 302
  }, {
    "from": 285,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 303,
    "label": "has",
    "to": 4
  }, {
    "from": 303,
    "label": "has",
    "to": 4
  }, {
    "from": 285,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 283
  }, {
    "from": 308,
    "label": "has",
    "to": 281
  }, {
    "from": 308,
    "label": "has",
    "to": 228
  }, {
    "from": 285,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 312
  }, {
    "from": 310,
    "label": "has",
    "to": 313
  }, {
    "from": 310,
    "label": "has",
    "to": 314
  }, {
    "from": 285,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 315,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 314
  }, {
    "from": 285,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 285,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 316
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 285,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 319
  }, {
    "from": 285,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 285,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 285,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 325
  }, {
    "from": 328,
    "label": "has",
    "to": 228
  }, {
    "from": 285,
    "label": "has",
    "to": 330
  }, {
    "from": 331,
    "label": "has",
    "to": 304
  }, {
    "from": 331,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 331,
    "label": "has",
    "to": 4
  }, {
    "from": 331,
    "label": "has",
    "to": 4
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 333,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 338,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 57
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 342,
    "label": "has",
    "to": 4
  }, {
    "from": 342,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 347,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 347,
    "label": "has",
    "to": 4
  }, {
    "from": 347,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 347,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 347,
    "label": "has",
    "to": 357
  }, {
    "from": 347,
    "label": "has",
    "to": 358
  }, {
    "from": 347,
    "label": "has",
    "to": 359
  }, {
    "from": 347,
    "label": "has",
    "to": 360
  }, {
    "from": 347,
    "label": "has",
    "to": 361
  }, {
    "from": 347,
    "label": "has",
    "to": 362
  }, {
    "from": 347,
    "label": "has",
    "to": 363
  }, {
    "from": 347,
    "label": "has",
    "to": 91
  }, {
    "from": 347,
    "label": "has",
    "to": 364
  }, {
    "from": 347,
    "label": "has",
    "to": 365
  }, {
    "from": 347,
    "label": "has",
    "to": 366
  }, {
    "from": 347,
    "label": "has",
    "to": 367
  }, {
    "from": 347,
    "label": "has",
    "to": 262
  }, {
    "from": 347,
    "label": "has",
    "to": 4
  }, {
    "from": 347,
    "label": "has",
    "to": 368
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 369,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 369,
    "label": "has",
    "to": 374
  }, {
    "from": 369,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 377,
    "label": "has",
    "to": 379
  }, {
    "from": 377,
    "label": "has",
    "to": 380
  }, {
    "from": 377,
    "label": "has",
    "to": 381
  }, {
    "from": 377,
    "label": "has",
    "to": 382
  }, {
    "from": 382,
    "label": "has",
    "to": 383
  }, {
    "from": 382,
    "label": "has",
    "to": 384
  }, {
    "from": 382,
    "label": "has",
    "to": 352
  }, {
    "from": 382,
    "label": "has",
    "to": 363
  }, {
    "from": 382,
    "label": "has",
    "to": 91
  }, {
    "from": 382,
    "label": "has",
    "to": 364
  }, {
    "from": 382,
    "label": "has",
    "to": 365
  }, {
    "from": 382,
    "label": "has",
    "to": 385
  }, {
    "from": 382,
    "label": "has",
    "to": 367
  }, {
    "from": 382,
    "label": "has",
    "to": 386
  }, {
    "from": 376,
    "label": "has",
    "to": 4
  }, {
    "from": 376,
    "label": "has",
    "to": 4
  }, {
    "from": 376,
    "label": "has",
    "to": 4
  }, {
    "from": 376,
    "label": "has",
    "to": 387
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 390
  }, {
    "from": 388,
    "label": "has",
    "to": 391
  }, {
    "from": 388,
    "label": "has",
    "to": 392
  }, {
    "from": 388,
    "label": "has",
    "to": 393
  }, {
    "from": 388,
    "label": "has",
    "to": 394
  }, {
    "from": 394,
    "label": "has",
    "to": 395
  }, {
    "from": 394,
    "label": "has",
    "to": 396
  }, {
    "from": 396,
    "label": "has",
    "to": 359
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 388,
    "label": "has",
    "to": 374
  }, {
    "from": 388,
    "label": "has",
    "to": 4
  }, {
    "from": 388,
    "label": "has",
    "to": 398
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 400,
    "label": "has",
    "to": 402
  }, {
    "from": 400,
    "label": "has",
    "to": 403
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 399,
    "label": "has",
    "to": 405
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 406,
    "label": "has",
    "to": 408
  }, {
    "from": 406,
    "label": "has",
    "to": 409
  }, {
    "from": 406,
    "label": "has",
    "to": 410
  }, {
    "from": 410,
    "label": "has",
    "to": 411
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 411,
    "label": "has",
    "to": 413
  }, {
    "from": 411,
    "label": "has",
    "to": 414
  }, {
    "from": 411,
    "label": "has",
    "to": 415
  }, {
    "from": 411,
    "label": "has",
    "to": 416
  }, {
    "from": 416,
    "label": "has",
    "to": 417
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 406,
    "label": "has",
    "to": 418
  }, {
    "from": 406,
    "label": "has",
    "to": 419
  }, {
    "from": 406,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 421
  }, {
    "from": 420,
    "label": "has",
    "to": 422
  }, {
    "from": 406,
    "label": "has",
    "to": 423
  }, {
    "from": 406,
    "label": "has",
    "to": 424
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 425,
    "label": "has",
    "to": 389
  }, {
    "from": 425,
    "label": "has",
    "to": 427
  }, {
    "from": 425,
    "label": "has",
    "to": 402
  }, {
    "from": 425,
    "label": "has",
    "to": 428
  }, {
    "from": 425,
    "label": "has",
    "to": 429
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 429,
    "label": "has",
    "to": 431
  }, {
    "from": 431,
    "label": "has",
    "to": 432
  }, {
    "from": 431,
    "label": "has",
    "to": 433
  }, {
    "from": 429,
    "label": "has",
    "to": 434
  }, {
    "from": 429,
    "label": "has",
    "to": 435
  }, {
    "from": 435,
    "label": "has",
    "to": 436
  }, {
    "from": 429,
    "label": "has",
    "to": 437
  }, {
    "from": 429,
    "label": "has",
    "to": 438
  }, {
    "from": 429,
    "label": "has",
    "to": 439
  }, {
    "from": 429,
    "label": "has",
    "to": 440
  }, {
    "from": 440,
    "label": "has",
    "to": 404
  }, {
    "from": 425,
    "label": "has",
    "to": 4
  }, {
    "from": 425,
    "label": "has",
    "to": 441
  }, {
    "from": 442,
    "label": "has",
    "to": 443
  }, {
    "from": 443,
    "label": "has",
    "to": 444
  }, {
    "from": 443,
    "label": "has",
    "to": 240
  }, {
    "from": 442,
    "label": "has",
    "to": 4
  }, {
    "from": 442,
    "label": "has",
    "to": 4
  }, {
    "from": 442,
    "label": "has",
    "to": 445
  }, {
    "from": 446,
    "label": "has",
    "to": 447
  }, {
    "from": 446,
    "label": "has",
    "to": 448
  }, {
    "from": 446,
    "label": "has",
    "to": 449
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 450,
    "label": "has",
    "to": 447
  }, {
    "from": 450,
    "label": "has",
    "to": 452
  }, {
    "from": 450,
    "label": "has",
    "to": 4
  }, {
    "from": 450,
    "label": "has",
    "to": 453
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 453,
    "label": "has",
    "to": 455
  }, {
    "from": 453,
    "label": "has",
    "to": 456
  }, {
    "from": 453,
    "label": "has",
    "to": 457
  }, {
    "from": 453,
    "label": "has",
    "to": 458
  }, {
    "from": 453,
    "label": "has",
    "to": 459
  }, {
    "from": 450,
    "label": "has",
    "to": 460
  }, {
    "from": 461,
    "label": "has",
    "to": 447
  }, {
    "from": 461,
    "label": "has",
    "to": 262
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 461,
    "label": "has",
    "to": 463
  }, {
    "from": 463,
    "label": "has",
    "to": 464
  }, {
    "from": 463,
    "label": "has",
    "to": 465
  }, {
    "from": 463,
    "label": "has",
    "to": 466
  }, {
    "from": 463,
    "label": "has",
    "to": 467
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 467,
    "label": "has",
    "to": 469
  }, {
    "from": 463,
    "label": "has",
    "to": 470
  }, {
    "from": 470,
    "label": "has",
    "to": 471
  }, {
    "from": 471,
    "label": "has",
    "to": 472
  }, {
    "from": 471,
    "label": "has",
    "to": 473
  }, {
    "from": 463,
    "label": "has",
    "to": 474
  }, {
    "from": 461,
    "label": "has",
    "to": 475
  }, {
    "from": 461,
    "label": "has",
    "to": 476
  }, {
    "from": 461,
    "label": "has",
    "to": 477
  }, {
    "from": 477,
    "label": "has",
    "to": 478
  }, {
    "from": 461,
    "label": "has",
    "to": 479
  }, {
    "from": 479,
    "label": "has",
    "to": 464
  }, {
    "from": 479,
    "label": "has",
    "to": 465
  }, {
    "from": 479,
    "label": "has",
    "to": 466
  }, {
    "from": 479,
    "label": "has",
    "to": 480
  }, {
    "from": 480,
    "label": "has",
    "to": 481
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 482,
    "label": "has",
    "to": 483
  }, {
    "from": 480,
    "label": "has",
    "to": 484
  }, {
    "from": 484,
    "label": "has",
    "to": 485
  }, {
    "from": 480,
    "label": "has",
    "to": 486
  }, {
    "from": 486,
    "label": "has",
    "to": 483
  }, {
    "from": 461,
    "label": "has",
    "to": 487
  }, {
    "from": 461,
    "label": "has",
    "to": 488
  }, {
    "from": 489,
    "label": "has",
    "to": 447
  }, {
    "from": 489,
    "label": "has",
    "to": 490
  }, {
    "from": 490,
    "label": "has",
    "to": 491
  }, {
    "from": 489,
    "label": "has",
    "to": 492
  }, {
    "from": 489,
    "label": "has",
    "to": 493
  }, {
    "from": 489,
    "label": "has",
    "to": 494
  }, {
    "from": 494,
    "label": "has",
    "to": 495
  }, {
    "from": 489,
    "label": "has",
    "to": 496
  }, {
    "from": 497,
    "label": "has",
    "to": 498
  }, {
    "from": 497,
    "label": "has",
    "to": 499
  }, {
    "from": 499,
    "label": "has",
    "to": 500
  }, {
    "from": 497,
    "label": "has",
    "to": 501
  }, {
    "from": 501,
    "label": "has",
    "to": 502
  }, {
    "from": 497,
    "label": "has",
    "to": 503
  }, {
    "from": 503,
    "label": "has",
    "to": 504
  }, {
    "from": 497,
    "label": "has",
    "to": 505
  }, {
    "from": 497,
    "label": "has",
    "to": 506
  }, {
    "from": 507,
    "label": "has",
    "to": 508
  }, {
    "from": 507,
    "label": "has",
    "to": 509
  }, {
    "from": 507,
    "label": "has",
    "to": 510
  }, {
    "from": 507,
    "label": "has",
    "to": 511
  }, {
    "from": 507,
    "label": "has",
    "to": 512
  }, {
    "from": 512,
    "label": "has",
    "to": 513
  }, {
    "from": 512,
    "label": "has",
    "to": 514
  }, {
    "from": 512,
    "label": "has",
    "to": 515
  }, {
    "from": 512,
    "label": "has",
    "to": 516
  }, {
    "from": 507,
    "label": "has",
    "to": 517
  }, {
    "from": 517,
    "label": "has",
    "to": 518
  }, {
    "from": 507,
    "label": "has",
    "to": 519
  }, {
    "from": 507,
    "label": "has",
    "to": 520
  }, {
    "from": 507,
    "label": "has",
    "to": 4
  }, {
    "from": 507,
    "label": "has",
    "to": 521
  }, {
    "from": 522,
    "label": "has",
    "to": 4
  }, {
    "from": 522,
    "label": "has",
    "to": 523
  }, {
    "from": 524,
    "label": "has",
    "to": 447
  }, {
    "from": 524,
    "label": "has",
    "to": 525
  }, {
    "from": 525,
    "label": "has",
    "to": 526
  }, {
    "from": 525,
    "label": "has",
    "to": 527
  }, {
    "from": 525,
    "label": "has",
    "to": 528
  }, {
    "from": 528,
    "label": "has",
    "to": 529
  }, {
    "from": 528,
    "label": "has",
    "to": 530
  }, {
    "from": 524,
    "label": "has",
    "to": 531
  }, {
    "from": 532,
    "label": "has",
    "to": 533
  }, {
    "from": 533,
    "label": "has",
    "to": 447
  }, {
    "from": 533,
    "label": "has",
    "to": 534
  }, {
    "from": 533,
    "label": "has",
    "to": 535
  }, {
    "from": 533,
    "label": "has",
    "to": 536
  }, {
    "from": 533,
    "label": "has",
    "to": 537
  }, {
    "from": 533,
    "label": "has",
    "to": 538
  }, {
    "from": 533,
    "label": "has",
    "to": 539
  }, {
    "from": 539,
    "label": "has",
    "to": 540
  }, {
    "from": 539,
    "label": "has",
    "to": 541
  }, {
    "from": 539,
    "label": "has",
    "to": 542
  }, {
    "from": 533,
    "label": "has",
    "to": 543
  }, {
    "from": 543,
    "label": "has",
    "to": 544
  }, {
    "from": 543,
    "label": "has",
    "to": 545
  }, {
    "from": 543,
    "label": "has",
    "to": 530
  }, {
    "from": 543,
    "label": "has",
    "to": 546
  }, {
    "from": 543,
    "label": "has",
    "to": 547
  }, {
    "from": 543,
    "label": "has",
    "to": 548
  }, {
    "from": 543,
    "label": "has",
    "to": 549
  }, {
    "from": 532,
    "label": "has",
    "to": 550
  }, {
    "from": 551,
    "label": "has",
    "to": 552
  }, {
    "from": 552,
    "label": "has",
    "to": 553
  }, {
    "from": 552,
    "label": "has",
    "to": 447
  }, {
    "from": 552,
    "label": "has",
    "to": 554
  }, {
    "from": 552,
    "label": "has",
    "to": 555
  }, {
    "from": 552,
    "label": "has",
    "to": 556
  }, {
    "from": 556,
    "label": "has",
    "to": 536
  }, {
    "from": 556,
    "label": "has",
    "to": 538
  }, {
    "from": 556,
    "label": "has",
    "to": 557
  }, {
    "from": 557,
    "label": "has",
    "to": 558
  }, {
    "from": 557,
    "label": "has",
    "to": 559
  }, {
    "from": 559,
    "label": "has",
    "to": 560
  }, {
    "from": 559,
    "label": "has",
    "to": 561
  }, {
    "from": 559,
    "label": "has",
    "to": 562
  }, {
    "from": 559,
    "label": "has",
    "to": 563
  }, {
    "from": 559,
    "label": "has",
    "to": 542
  }, {
    "from": 557,
    "label": "has",
    "to": 564
  }, {
    "from": 556,
    "label": "has",
    "to": 565
  }, {
    "from": 565,
    "label": "has",
    "to": 566
  }, {
    "from": 565,
    "label": "has",
    "to": 567
  }, {
    "from": 565,
    "label": "has",
    "to": 568
  }, {
    "from": 565,
    "label": "has",
    "to": 544
  }, {
    "from": 556,
    "label": "has",
    "to": 569
  }, {
    "from": 551,
    "label": "has",
    "to": 570
  }, {
    "from": 571,
    "label": "has",
    "to": 572
  }, {
    "from": 571,
    "label": "has",
    "to": 573
  }, {
    "from": 571,
    "label": "has",
    "to": 574
  }, {
    "from": 571,
    "label": "has",
    "to": 575
  }, {
    "from": 571,
    "label": "has",
    "to": 576
  }, {
    "from": 571,
    "label": "has",
    "to": 577
  }, {
    "from": 571,
    "label": "has",
    "to": 578
  }, {
    "from": 571,
    "label": "has",
    "to": 579
  }, {
    "from": 571,
    "label": "has",
    "to": 580
  }, {
    "from": 571,
    "label": "has",
    "to": 581
  }, {
    "from": 581,
    "label": "has",
    "to": 582
  }, {
    "from": 571,
    "label": "has",
    "to": 583
  }, {
    "from": 571,
    "label": "has",
    "to": 584
  }, {
    "from": 571,
    "label": "has",
    "to": 585
  }, {
    "from": 571,
    "label": "has",
    "to": 586
  }, {
    "from": 571,
    "label": "has",
    "to": 587
  }, {
    "from": 587,
    "label": "has",
    "to": 588
  }, {
    "from": 571,
    "label": "has",
    "to": 589
  }, {
    "from": 571,
    "label": "has",
    "to": 590
  }, {
    "from": 571,
    "label": "has",
    "to": 591
  }, {
    "from": 571,
    "label": "has",
    "to": 592
  }, {
    "from": 571,
    "label": "has",
    "to": 593
  }, {
    "from": 571,
    "label": "has",
    "to": 594
  }, {
    "from": 594,
    "label": "has",
    "to": 595
  }, {
    "from": 594,
    "label": "has",
    "to": 596
  }, {
    "from": 571,
    "label": "has",
    "to": 597
  }, {
    "from": 571,
    "label": "has",
    "to": 598
  }, {
    "from": 571,
    "label": "has",
    "to": 599
  }, {
    "from": 571,
    "label": "has",
    "to": 600
  }, {
    "from": 571,
    "label": "has",
    "to": 601
  }, {
    "from": 601,
    "label": "has",
    "to": 602
  }, {
    "from": 601,
    "label": "has",
    "to": 603
  }, {
    "from": 571,
    "label": "has",
    "to": 604
  }, {
    "from": 571,
    "label": "has",
    "to": 605
  }, {
    "from": 571,
    "label": "has",
    "to": 606
  }, {
    "from": 571,
    "label": "has",
    "to": 607
  }, {
    "from": 571,
    "label": "has",
    "to": 608
  }, {
    "from": 571,
    "label": "has",
    "to": 609
  }, {
    "from": 571,
    "label": "has",
    "to": 610
  }, {
    "from": 571,
    "label": "has",
    "to": 611
  }, {
    "from": 571,
    "label": "has",
    "to": 612
  }, {
    "from": 571,
    "label": "has",
    "to": 613
  }, {
    "from": 571,
    "label": "has",
    "to": 614
  }, {
    "from": 571,
    "label": "has",
    "to": 615
  }, {
    "from": 571,
    "label": "has",
    "to": 616
  }, {
    "from": 571,
    "label": "has",
    "to": 617
  }, {
    "from": 571,
    "label": "has",
    "to": 618
  }, {
    "from": 571,
    "label": "has",
    "to": 619
  }, {
    "from": 571,
    "label": "has",
    "to": 620
  }, {
    "from": 571,
    "label": "has",
    "to": 621
  }, {
    "from": 571,
    "label": "has",
    "to": 622
  }, {
    "from": 571,
    "label": "has",
    "to": 623
  }, {
    "from": 571,
    "label": "has",
    "to": 624
  }, {
    "from": 571,
    "label": "has",
    "to": 625
  }, {
    "from": 571,
    "label": "has",
    "to": 626
  }, {
    "from": 571,
    "label": "has",
    "to": 627
  }, {
    "from": 571,
    "label": "has",
    "to": 628
  }, {
    "from": 571,
    "label": "has",
    "to": 629
  }, {
    "from": 571,
    "label": "has",
    "to": 630
  }, {
    "from": 571,
    "label": "has",
    "to": 631
  }, {
    "from": 571,
    "label": "has",
    "to": 632
  }, {
    "from": 571,
    "label": "has",
    "to": 633
  }, {
    "from": 571,
    "label": "has",
    "to": 634
  }, {
    "from": 634,
    "label": "has",
    "to": 635
  }, {
    "from": 634,
    "label": "has",
    "to": 4
  }, {
    "from": 634,
    "label": "has",
    "to": 636
  }, {
    "from": 636,
    "label": "has",
    "to": 637
  }, {
    "from": 637,
    "label": "has",
    "to": 638
  }, {
    "from": 634,
    "label": "has",
    "to": 639
  }, {
    "from": 634,
    "label": "has",
    "to": 640
  }, {
    "from": 640,
    "label": "has",
    "to": 641
  }, {
    "from": 571,
    "label": "has",
    "to": 642
  }, {
    "from": 642,
    "label": "has",
    "to": 643
  }, {
    "from": 642,
    "label": "has",
    "to": 644
  }, {
    "from": 642,
    "label": "has",
    "to": 645
  }, {
    "from": 642,
    "label": "has",
    "to": 646
  }, {
    "from": 642,
    "label": "has",
    "to": 647
  }, {
    "from": 642,
    "label": "has",
    "to": 648
  }, {
    "from": 642,
    "label": "has",
    "to": 649
  }, {
    "from": 642,
    "label": "has",
    "to": 650
  }, {
    "from": 650,
    "label": "has",
    "to": 651
  }, {
    "from": 650,
    "label": "has",
    "to": 652
  }, {
    "from": 642,
    "label": "has",
    "to": 4
  }, {
    "from": 571,
    "label": "has",
    "to": 653
  }, {
    "from": 653,
    "label": "has",
    "to": 654
  }, {
    "from": 653,
    "label": "has",
    "to": 569
  }, {
    "from": 571,
    "label": "has",
    "to": 655
  }, {
    "from": 655,
    "label": "has",
    "to": 654
  }, {
    "from": 655,
    "label": "has",
    "to": 228
  }, {
    "from": 655,
    "label": "has",
    "to": 656
  }, {
    "from": 656,
    "label": "has",
    "to": 657
  }, {
    "from": 656,
    "label": "has",
    "to": 658
  }, {
    "from": 656,
    "label": "has",
    "to": 659
  }, {
    "from": 656,
    "label": "has",
    "to": 660
  }, {
    "from": 571,
    "label": "has",
    "to": 661
  }, {
    "from": 661,
    "label": "has",
    "to": 662
  }, {
    "from": 662,
    "label": "has",
    "to": 654
  }, {
    "from": 662,
    "label": "has",
    "to": 228
  }, {
    "from": 662,
    "label": "has",
    "to": 663
  }, {
    "from": 571,
    "label": "has",
    "to": 664
  }, {
    "from": 664,
    "label": "has",
    "to": 654
  }, {
    "from": 664,
    "label": "has",
    "to": 228
  }, {
    "from": 664,
    "label": "has",
    "to": 665
  }, {
    "from": 664,
    "label": "has",
    "to": 666
  }, {
    "from": 571,
    "label": "has",
    "to": 4
  }, {
    "from": 571,
    "label": "has",
    "to": 667
  }, {
    "from": 668,
    "label": "has",
    "to": 635
  }, {
    "from": 668,
    "label": "has",
    "to": 4
  }, {
    "from": 668,
    "label": "has",
    "to": 636
  }, {
    "from": 636,
    "label": "has",
    "to": 637
  }, {
    "from": 637,
    "label": "has",
    "to": 638
  }, {
    "from": 668,
    "label": "has",
    "to": 639
  }, {
    "from": 668,
    "label": "has",
    "to": 640
  }, {
    "from": 640,
    "label": "has",
    "to": 641
  }, {
    "from": 668,
    "label": "has",
    "to": 669
  }, {
    "from": 670,
    "label": "has",
    "to": 643
  }, {
    "from": 670,
    "label": "has",
    "to": 644
  }, {
    "from": 670,
    "label": "has",
    "to": 645
  }, {
    "from": 670,
    "label": "has",
    "to": 646
  }, {
    "from": 670,
    "label": "has",
    "to": 647
  }, {
    "from": 670,
    "label": "has",
    "to": 648
  }, {
    "from": 670,
    "label": "has",
    "to": 649
  }, {
    "from": 670,
    "label": "has",
    "to": 650
  }, {
    "from": 650,
    "label": "has",
    "to": 651
  }, {
    "from": 650,
    "label": "has",
    "to": 652
  }, {
    "from": 670,
    "label": "has",
    "to": 4
  }, {
    "from": 670,
    "label": "has",
    "to": 671
  }, {
    "from": 672,
    "label": "has",
    "to": 673
  }, {
    "from": 672,
    "label": "has",
    "to": 674
  }, {
    "from": 672,
    "label": "has",
    "to": 675
  }, {
    "from": 672,
    "label": "has",
    "to": 676
  }, {
    "from": 677,
    "label": "has",
    "to": 678
  }, {
    "from": 678,
    "label": "has",
    "to": 679
  }, {
    "from": 678,
    "label": "has",
    "to": 680
  }, {
    "from": 677,
    "label": "has",
    "to": 681
  }, {
    "from": 682,
    "label": "has",
    "to": 683
  }, {
    "from": 683,
    "label": "has",
    "to": 684
  }, {
    "from": 682,
    "label": "has",
    "to": 4
  }, {
    "from": 682,
    "label": "has",
    "to": 685
  }, {
    "from": 686,
    "label": "has",
    "to": 687
  }, {
    "from": 686,
    "label": "has",
    "to": 688
  }, {
    "from": 688,
    "label": "has",
    "to": 689
  }, {
    "from": 686,
    "label": "has",
    "to": 389
  }, {
    "from": 686,
    "label": "has",
    "to": 690
  }, {
    "from": 686,
    "label": "has",
    "to": 691
  }, {
    "from": 691,
    "label": "has",
    "to": 692
  }, {
    "from": 691,
    "label": "has",
    "to": 693
  }, {
    "from": 693,
    "label": "has",
    "to": 694
  }, {
    "from": 691,
    "label": "has",
    "to": 695
  }, {
    "from": 691,
    "label": "has",
    "to": 696
  }, {
    "from": 696,
    "label": "has",
    "to": 697
  }, {
    "from": 686,
    "label": "has",
    "to": 698
  }, {
    "from": 699,
    "label": "has",
    "to": 700
  }, {
    "from": 700,
    "label": "has",
    "to": 679
  }, {
    "from": 700,
    "label": "has",
    "to": 361
  }, {
    "from": 699,
    "label": "has",
    "to": 701
  }, {
    "from": 702,
    "label": "has",
    "to": 703
  }, {
    "from": 703,
    "label": "has",
    "to": 704
  }, {
    "from": 703,
    "label": "has",
    "to": 705
  }, {
    "from": 702,
    "label": "has",
    "to": 706
  }, {
    "from": 706,
    "label": "has",
    "to": 707
  }, {
    "from": 702,
    "label": "has",
    "to": 708
  }, {
    "from": 702,
    "label": "has",
    "to": 709
  }, {
    "from": 702,
    "label": "has",
    "to": 710
  }, {
    "from": 702,
    "label": "has",
    "to": 711
  }, {
    "from": 702,
    "label": "has",
    "to": 712
  }, {
    "from": 713,
    "label": "has",
    "to": 714
  }, {
    "from": 713,
    "label": "has",
    "to": 715
  }, {
    "from": 713,
    "label": "has",
    "to": 716
  }, {
    "from": 713,
    "label": "has",
    "to": 717
  }, {
    "from": 713,
    "label": "has",
    "to": 718
  }, {
    "from": 718,
    "label": "has",
    "to": 719
  }, {
    "from": 713,
    "label": "has",
    "to": 720
  }, {
    "from": 720,
    "label": "has",
    "to": 721
  }, {
    "from": 720,
    "label": "has",
    "to": 722
  }, {
    "from": 720,
    "label": "has",
    "to": 723
  }, {
    "from": 713,
    "label": "has",
    "to": 4
  }, {
    "from": 713,
    "label": "has",
    "to": 724
  }, {
    "from": 725,
    "label": "has",
    "to": 91
  }, {
    "from": 725,
    "label": "has",
    "to": 726
  }, {
    "from": 726,
    "label": "has",
    "to": 727
  }, {
    "from": 726,
    "label": "has",
    "to": 728
  }, {
    "from": 728,
    "label": "has",
    "to": 729
  }, {
    "from": 728,
    "label": "has",
    "to": 730
  }, {
    "from": 730,
    "label": "has",
    "to": 731
  }, {
    "from": 728,
    "label": "has",
    "to": 732
  }, {
    "from": 726,
    "label": "has",
    "to": 733
  }, {
    "from": 733,
    "label": "has",
    "to": 734
  }, {
    "from": 725,
    "label": "has",
    "to": 4
  }, {
    "from": 725,
    "label": "has",
    "to": 4
  }, {
    "from": 725,
    "label": "has",
    "to": 735
  }, {
    "from": 736,
    "label": "has",
    "to": 737
  }, {
    "from": 736,
    "label": "has",
    "to": 738
  }, {
    "from": 738,
    "label": "has",
    "to": 739
  }, {
    "from": 736,
    "label": "has",
    "to": 740
  }, {
    "from": 741,
    "label": "has",
    "to": 742
  }, {
    "from": 742,
    "label": "has",
    "to": 743
  }, {
    "from": 742,
    "label": "has",
    "to": 744
  }, {
    "from": 742,
    "label": "has",
    "to": 745
  }, {
    "from": 742,
    "label": "has",
    "to": 746
  }, {
    "from": 742,
    "label": "has",
    "to": 747
  }, {
    "from": 742,
    "label": "has",
    "to": 748
  }, {
    "from": 741,
    "label": "has",
    "to": 749
  }, {
    "from": 741,
    "label": "has",
    "to": 750
  }, {
    "from": 741,
    "label": "has",
    "to": 751
  }, {
    "from": 751,
    "label": "has",
    "to": 752
  }, {
    "from": 751,
    "label": "has",
    "to": 753
  }, {
    "from": 751,
    "label": "has",
    "to": 754
  }, {
    "from": 751,
    "label": "has",
    "to": 755
  }, {
    "from": 751,
    "label": "has",
    "to": 714
  }, {
    "from": 751,
    "label": "has",
    "to": 756
  }, {
    "from": 751,
    "label": "has",
    "to": 757
  }, {
    "from": 751,
    "label": "has",
    "to": 758
  }, {
    "from": 751,
    "label": "has",
    "to": 759
  }, {
    "from": 759,
    "label": "has",
    "to": 760
  }, {
    "from": 759,
    "label": "has",
    "to": 761
  }, {
    "from": 751,
    "label": "has",
    "to": 762
  }, {
    "from": 762,
    "label": "has",
    "to": 763
  }, {
    "from": 751,
    "label": "has",
    "to": 764
  }, {
    "from": 751,
    "label": "has",
    "to": 765
  }, {
    "from": 751,
    "label": "has",
    "to": 766
  }, {
    "from": 766,
    "label": "has",
    "to": 767
  }, {
    "from": 766,
    "label": "has",
    "to": 768
  }, {
    "from": 741,
    "label": "has",
    "to": 769
  }, {
    "from": 769,
    "label": "has",
    "to": 770
  }, {
    "from": 769,
    "label": "has",
    "to": 771
  }, {
    "from": 769,
    "label": "has",
    "to": 772
  }, {
    "from": 741,
    "label": "has",
    "to": 773
  }, {
    "from": 773,
    "label": "has",
    "to": 774
  }, {
    "from": 773,
    "label": "has",
    "to": 775
  }, {
    "from": 775,
    "label": "has",
    "to": 776
  }, {
    "from": 776,
    "label": "has",
    "to": 777
  }, {
    "from": 773,
    "label": "has",
    "to": 4
  }, {
    "from": 741,
    "label": "has",
    "to": 778
  }, {
    "from": 778,
    "label": "has",
    "to": 779
  }, {
    "from": 778,
    "label": "has",
    "to": 4
  }, {
    "from": 778,
    "label": "has",
    "to": 780
  }, {
    "from": 778,
    "label": "has",
    "to": 781
  }, {
    "from": 778,
    "label": "has",
    "to": 782
  }, {
    "from": 782,
    "label": "has",
    "to": 783
  }, {
    "from": 782,
    "label": "has",
    "to": 784
  }, {
    "from": 784,
    "label": "has",
    "to": 785
  }, {
    "from": 778,
    "label": "has",
    "to": 786
  }, {
    "from": 786,
    "label": "has",
    "to": 787
  }, {
    "from": 778,
    "label": "has",
    "to": 788
  }, {
    "from": 778,
    "label": "has",
    "to": 789
  }, {
    "from": 778,
    "label": "has",
    "to": 790
  }, {
    "from": 790,
    "label": "has",
    "to": 401
  }, {
    "from": 790,
    "label": "has",
    "to": 791
  }, {
    "from": 790,
    "label": "has",
    "to": 792
  }, {
    "from": 790,
    "label": "has",
    "to": 793
  }, {
    "from": 790,
    "label": "has",
    "to": 794
  }, {
    "from": 794,
    "label": "has",
    "to": 795
  }, {
    "from": 794,
    "label": "has",
    "to": 796
  }, {
    "from": 794,
    "label": "has",
    "to": 797
  }, {
    "from": 794,
    "label": "has",
    "to": 798
  }, {
    "from": 794,
    "label": "has",
    "to": 495
  }, {
    "from": 794,
    "label": "has",
    "to": 799
  }, {
    "from": 778,
    "label": "has",
    "to": 800
  }, {
    "from": 800,
    "label": "has",
    "to": 801
  }, {
    "from": 801,
    "label": "has",
    "to": 802
  }, {
    "from": 801,
    "label": "has",
    "to": 803
  }, {
    "from": 803,
    "label": "has",
    "to": 804
  }, {
    "from": 803,
    "label": "has",
    "to": 805
  }, {
    "from": 805,
    "label": "has",
    "to": 798
  }, {
    "from": 805,
    "label": "has",
    "to": 495
  }, {
    "from": 805,
    "label": "has",
    "to": 806
  }, {
    "from": 805,
    "label": "has",
    "to": 799
  }, {
    "from": 801,
    "label": "has",
    "to": 374
  }, {
    "from": 800,
    "label": "has",
    "to": 807
  }, {
    "from": 807,
    "label": "has",
    "to": 808
  }, {
    "from": 778,
    "label": "has",
    "to": 809
  }, {
    "from": 809,
    "label": "has",
    "to": 749
  }, {
    "from": 809,
    "label": "has",
    "to": 325
  }, {
    "from": 809,
    "label": "has",
    "to": 810
  }, {
    "from": 809,
    "label": "has",
    "to": 811
  }, {
    "from": 741,
    "label": "has",
    "to": 812
  }, {
    "from": 812,
    "label": "has",
    "to": 813
  }, {
    "from": 741,
    "label": "has",
    "to": 814
  }, {
    "from": 814,
    "label": "has",
    "to": 815
  }, {
    "from": 741,
    "label": "has",
    "to": 816
  }, {
    "from": 816,
    "label": "has",
    "to": 817
  }, {
    "from": 816,
    "label": "has",
    "to": 818
  }, {
    "from": 818,
    "label": "has",
    "to": 772
  }, {
    "from": 816,
    "label": "has",
    "to": 819
  }, {
    "from": 816,
    "label": "has",
    "to": 820
  }, {
    "from": 741,
    "label": "has",
    "to": 821
  }, {
    "from": 821,
    "label": "has",
    "to": 822
  }, {
    "from": 822,
    "label": "has",
    "to": 823
  }, {
    "from": 741,
    "label": "has",
    "to": 824
  }, {
    "from": 741,
    "label": "has",
    "to": 825
  }, {
    "from": 825,
    "label": "has",
    "to": 772
  }, {
    "from": 825,
    "label": "has",
    "to": 826
  }, {
    "from": 741,
    "label": "has",
    "to": 4
  }, {
    "from": 741,
    "label": "has",
    "to": 4
  }, {
    "from": 741,
    "label": "has",
    "to": 827
  }, {
    "from": 828,
    "label": "has",
    "to": 774
  }, {
    "from": 828,
    "label": "has",
    "to": 775
  }, {
    "from": 775,
    "label": "has",
    "to": 776
  }, {
    "from": 776,
    "label": "has",
    "to": 777
  }, {
    "from": 828,
    "label": "has",
    "to": 4
  }, {
    "from": 828,
    "label": "has",
    "to": 829
  }, {
    "from": 830,
    "label": "has",
    "to": 831
  }, {
    "from": 831,
    "label": "has",
    "to": 832
  }, {
    "from": 831,
    "label": "has",
    "to": 745
  }, {
    "from": 831,
    "label": "has",
    "to": 833
  }, {
    "from": 830,
    "label": "has",
    "to": 834
  }, {
    "from": 835,
    "label": "has",
    "to": 708
  }, {
    "from": 835,
    "label": "has",
    "to": 836
  }, {
    "from": 835,
    "label": "has",
    "to": 710
  }, {
    "from": 835,
    "label": "has",
    "to": 837
  }, {
    "from": 838,
    "label": "has",
    "to": 839
  }, {
    "from": 838,
    "label": "has",
    "to": 840
  }, {
    "from": 838,
    "label": "has",
    "to": 841
  }, {
    "from": 838,
    "label": "has",
    "to": 842
  }, {
    "from": 838,
    "label": "has",
    "to": 843
  }, {
    "from": 838,
    "label": "has",
    "to": 844
  }, {
    "from": 838,
    "label": "has",
    "to": 845
  }, {
    "from": 838,
    "label": "has",
    "to": 846
  }, {
    "from": 838,
    "label": "has",
    "to": 847
  }, {
    "from": 838,
    "label": "has",
    "to": 848
  }, {
    "from": 838,
    "label": "has",
    "to": 849
  }, {
    "from": 838,
    "label": "has",
    "to": 850
  }, {
    "from": 838,
    "label": "has",
    "to": 851
  }, {
    "from": 838,
    "label": "has",
    "to": 852
  }, {
    "from": 838,
    "label": "has",
    "to": 853
  }, {
    "from": 838,
    "label": "has",
    "to": 854
  }, {
    "from": 838,
    "label": "has",
    "to": 855
  }, {
    "from": 838,
    "label": "has",
    "to": 856
  }, {
    "from": 838,
    "label": "has",
    "to": 857
  }, {
    "from": 858,
    "label": "has",
    "to": 859
  }, {
    "from": 858,
    "label": "has",
    "to": 860
  }, {
    "from": 860,
    "label": "has",
    "to": 861
  }, {
    "from": 860,
    "label": "has",
    "to": 862
  }, {
    "from": 858,
    "label": "has",
    "to": 4
  }, {
    "from": 858,
    "label": "has",
    "to": 863
  }, {
    "from": 863,
    "label": "has",
    "to": 744
  }, {
    "from": 863,
    "label": "has",
    "to": 745
  }, {
    "from": 863,
    "label": "has",
    "to": 864
  }, {
    "from": 863,
    "label": "has",
    "to": 748
  }, {
    "from": 858,
    "label": "has",
    "to": 749
  }, {
    "from": 858,
    "label": "has",
    "to": 865
  }, {
    "from": 858,
    "label": "has",
    "to": 866
  }, {
    "from": 858,
    "label": "has",
    "to": 228
  }, {
    "from": 858,
    "label": "has",
    "to": 867
  }, {
    "from": 858,
    "label": "has",
    "to": 868
  }, {
    "from": 869,
    "label": "has",
    "to": 870
  }, {
    "from": 870,
    "label": "has",
    "to": 871
  }, {
    "from": 869,
    "label": "has",
    "to": 228
  }, {
    "from": 869,
    "label": "has",
    "to": 872
  }, {
    "from": 873,
    "label": "has",
    "to": 195
  }, {
    "from": 873,
    "label": "has",
    "to": 196
  }, {
    "from": 873,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 873,
    "label": "has",
    "to": 874
  }, {
    "from": 875,
    "label": "has",
    "to": 205
  }, {
    "from": 875,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 75
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 213
  }, {
    "from": 206,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 875,
    "label": "has",
    "to": 876
  }, {
    "from": 877,
    "label": "has",
    "to": 207
  }, {
    "from": 877,
    "label": "has",
    "to": 213
  }, {
    "from": 877,
    "label": "has",
    "to": 220
  }, {
    "from": 877,
    "label": "has",
    "to": 221
  }, {
    "from": 877,
    "label": "has",
    "to": 878
  }, {
    "from": 879,
    "label": "has",
    "to": 223
  }, {
    "from": 879,
    "label": "has",
    "to": 880
  }, {
    "from": 881,
    "label": "has",
    "to": 225
  }, {
    "from": 881,
    "label": "has",
    "to": 882
  }, {
    "from": 883,
    "label": "has",
    "to": 69
  }, {
    "from": 883,
    "label": "has",
    "to": 884
  }, {
    "from": 885,
    "label": "has",
    "to": 228
  }, {
    "from": 885,
    "label": "has",
    "to": 229
  }, {
    "from": 885,
    "label": "has",
    "to": 4
  }, {
    "from": 885,
    "label": "has",
    "to": 230
  }, {
    "from": 885,
    "label": "has",
    "to": 68
  }, {
    "from": 885,
    "label": "has",
    "to": 231
  }, {
    "from": 885,
    "label": "has",
    "to": 886
  }, {
    "from": 887,
    "label": "has",
    "to": 309
  }, {
    "from": 887,
    "label": "has",
    "to": 283
  }, {
    "from": 887,
    "label": "has",
    "to": 281
  }, {
    "from": 887,
    "label": "has",
    "to": 228
  }, {
    "from": 887,
    "label": "has",
    "to": 888
  }, {
    "from": 889,
    "label": "has",
    "to": 311
  }, {
    "from": 889,
    "label": "has",
    "to": 312
  }, {
    "from": 889,
    "label": "has",
    "to": 313
  }, {
    "from": 889,
    "label": "has",
    "to": 314
  }, {
    "from": 889,
    "label": "has",
    "to": 890
  }, {
    "from": 891,
    "label": "has",
    "to": 316
  }, {
    "from": 891,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 314
  }, {
    "from": 891,
    "label": "has",
    "to": 892
  }, {
    "from": 893,
    "label": "has",
    "to": 319
  }, {
    "from": 893,
    "label": "has",
    "to": 894
  }, {
    "from": 895,
    "label": "has",
    "to": 316
  }, {
    "from": 895,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 895,
    "label": "has",
    "to": 896
  }, {
    "from": 897,
    "label": "has",
    "to": 319
  }, {
    "from": 897,
    "label": "has",
    "to": 898
  }, {
    "from": 899,
    "label": "has",
    "to": 325
  }, {
    "from": 899,
    "label": "has",
    "to": 900
  }, {
    "from": 901,
    "label": "has",
    "to": 327
  }, {
    "from": 901,
    "label": "has",
    "to": 902
  }, {
    "from": 903,
    "label": "has",
    "to": 329
  }, {
    "from": 903,
    "label": "has",
    "to": 325
  }, {
    "from": 903,
    "label": "has",
    "to": 228
  }, {
    "from": 903,
    "label": "has",
    "to": 904
  }, {
    "from": 905,
    "label": "has",
    "to": 906
  }, {
    "from": 905,
    "label": "has",
    "to": 389
  }, {
    "from": 905,
    "label": "has",
    "to": 907
  }, {
    "from": 905,
    "label": "has",
    "to": 404
  }, {
    "from": 905,
    "label": "has",
    "to": 908
  }, {
    "from": 909,
    "label": "has",
    "to": 447
  }, {
    "from": 909,
    "label": "has",
    "to": 910
  }, {
    "from": 910,
    "label": "has",
    "to": 91
  }, {
    "from": 910,
    "label": "has",
    "to": 911
  }, {
    "from": 911,
    "label": "has",
    "to": 912
  }, {
    "from": 909,
    "label": "has",
    "to": 913
  }, {
    "from": 914,
    "label": "has",
    "to": 447
  }, {
    "from": 914,
    "label": "has",
    "to": 915
  }, {
    "from": 914,
    "label": "has",
    "to": 916
  }, {
    "from": 917,
    "label": "has",
    "to": 447
  }, {
    "from": 917,
    "label": "has",
    "to": 448
  }, {
    "from": 917,
    "label": "has",
    "to": 918
  }, {
    "from": 919,
    "label": "has",
    "to": 920
  }, {
    "from": 919,
    "label": "has",
    "to": 921
  }, {
    "from": 922,
    "label": "has",
    "to": 923
  }, {
    "from": 922,
    "label": "has",
    "to": 924
  }, {
    "from": 924,
    "label": "has",
    "to": 925
  }, {
    "from": 925,
    "label": "has",
    "to": 926
  }, {
    "from": 922,
    "label": "has",
    "to": 927
  }, {
    "from": 922,
    "label": "has",
    "to": 928
  }, {
    "from": 929,
    "label": "has",
    "to": 447
  }, {
    "from": 929,
    "label": "has",
    "to": 930
  }, {
    "from": 929,
    "label": "has",
    "to": 931
  }, {
    "from": 931,
    "label": "has",
    "to": 932
  }, {
    "from": 929,
    "label": "has",
    "to": 933
  }, {
    "from": 934,
    "label": "has",
    "to": 935
  }, {
    "from": 934,
    "label": "has",
    "to": 936
  }, {
    "from": 937,
    "label": "has",
    "to": 938
  }, {
    "from": 937,
    "label": "has",
    "to": 4
  }, {
    "from": 937,
    "label": "has",
    "to": 939
  }, {
    "from": 937,
    "label": "has",
    "to": 867
  }, {
    "from": 937,
    "label": "has",
    "to": 940
  }, {
    "from": 941,
    "label": "has",
    "to": 447
  }, {
    "from": 941,
    "label": "has",
    "to": 942
  }, {
    "from": 941,
    "label": "has",
    "to": 943
  }, {
    "from": 944,
    "label": "has",
    "to": 447
  }, {
    "from": 944,
    "label": "has",
    "to": 945
  }, {
    "from": 944,
    "label": "has",
    "to": 946
  }, {
    "from": 947,
    "label": "has",
    "to": 447
  }, {
    "from": 947,
    "label": "has",
    "to": 948
  }, {
    "from": 947,
    "label": "has",
    "to": 949
  }, {
    "from": 950,
    "label": "has",
    "to": 447
  }, {
    "from": 950,
    "label": "has",
    "to": 951
  }, {
    "from": 950,
    "label": "has",
    "to": 4
  }, {
    "from": 950,
    "label": "has",
    "to": 207
  }, {
    "from": 950,
    "label": "has",
    "to": 213
  }, {
    "from": 950,
    "label": "has",
    "to": 952
  }, {
    "from": 952,
    "label": "has",
    "to": 215
  }, {
    "from": 952,
    "label": "has",
    "to": 953
  }, {
    "from": 953,
    "label": "has",
    "to": 954
  }, {
    "from": 953,
    "label": "has",
    "to": 955
  }, {
    "from": 953,
    "label": "has",
    "to": 956
  }, {
    "from": 956,
    "label": "has",
    "to": 957
  }, {
    "from": 950,
    "label": "has",
    "to": 958
  }, {
    "from": 959,
    "label": "has",
    "to": 960
  }, {
    "from": 959,
    "label": "has",
    "to": 961
  }, {
    "from": 962,
    "label": "has",
    "to": 447
  }, {
    "from": 962,
    "label": "has",
    "to": 963
  }, {
    "from": 962,
    "label": "has",
    "to": 964
  }, {
    "from": 964,
    "label": "has",
    "to": 965
  }, {
    "from": 964,
    "label": "has",
    "to": 966
  }, {
    "from": 962,
    "label": "has",
    "to": 967
  }, {
    "from": 967,
    "label": "has",
    "to": 968
  }, {
    "from": 968,
    "label": "has",
    "to": 969
  }, {
    "from": 968,
    "label": "has",
    "to": 970
  }, {
    "from": 967,
    "label": "has",
    "to": 971
  }, {
    "from": 962,
    "label": "has",
    "to": 972
  }, {
    "from": 962,
    "label": "has",
    "to": 973
  }, {
    "from": 974,
    "label": "has",
    "to": 200
  }, {
    "from": 974,
    "label": "has",
    "to": 975
  }, {
    "from": 976,
    "label": "has",
    "to": 654
  }, {
    "from": 976,
    "label": "has",
    "to": 569
  }, {
    "from": 976,
    "label": "has",
    "to": 977
  }, {
    "from": 978,
    "label": "has",
    "to": 654
  }, {
    "from": 978,
    "label": "has",
    "to": 228
  }, {
    "from": 978,
    "label": "has",
    "to": 656
  }, {
    "from": 656,
    "label": "has",
    "to": 657
  }, {
    "from": 656,
    "label": "has",
    "to": 658
  }, {
    "from": 656,
    "label": "has",
    "to": 659
  }, {
    "from": 656,
    "label": "has",
    "to": 660
  }, {
    "from": 978,
    "label": "has",
    "to": 979
  }, {
    "from": 980,
    "label": "has",
    "to": 654
  }, {
    "from": 980,
    "label": "has",
    "to": 228
  }, {
    "from": 980,
    "label": "has",
    "to": 663
  }, {
    "from": 980,
    "label": "has",
    "to": 981
  }, {
    "from": 982,
    "label": "has",
    "to": 654
  }, {
    "from": 982,
    "label": "has",
    "to": 228
  }, {
    "from": 982,
    "label": "has",
    "to": 665
  }, {
    "from": 982,
    "label": "has",
    "to": 666
  }, {
    "from": 982,
    "label": "has",
    "to": 983
  }, {
    "from": 984,
    "label": "has",
    "to": 985
  }, {
    "from": 984,
    "label": "has",
    "to": 986
  }, {
    "from": 984,
    "label": "has",
    "to": 987
  }, {
    "from": 988,
    "label": "has",
    "to": 985
  }, {
    "from": 988,
    "label": "has",
    "to": 989
  }, {
    "from": 988,
    "label": "has",
    "to": 990
  }, {
    "from": 991,
    "label": "has",
    "to": 569
  }, {
    "from": 992,
    "label": "has",
    "to": 993
  }, {
    "from": 994,
    "label": "has",
    "to": 995
  }, {
    "from": 996,
    "label": "has",
    "to": 993
  }, {
    "from": 997,
    "label": "has",
    "to": 447
  }, {
    "from": 997,
    "label": "has",
    "to": 998
  }, {
    "from": 997,
    "label": "has",
    "to": 999
  }, {
    "from": 997,
    "label": "has",
    "to": 1000
  }, {
    "from": 997,
    "label": "has",
    "to": 1001
  }, {
    "from": 1001,
    "label": "has",
    "to": 1002
  }, {
    "from": 997,
    "label": "has",
    "to": 1003
  }, {
    "from": 1004,
    "label": "has",
    "to": 447
  }, {
    "from": 1004,
    "label": "has",
    "to": 963
  }, {
    "from": 1004,
    "label": "has",
    "to": 1005
  }, {
    "from": 1005,
    "label": "has",
    "to": 971
  }, {
    "from": 1004,
    "label": "has",
    "to": 1006
  }, {
    "from": 1006,
    "label": "has",
    "to": 1007
  }, {
    "from": 1006,
    "label": "has",
    "to": 972
  }, {
    "from": 1004,
    "label": "has",
    "to": 1008
  }, {
    "from": 1009,
    "label": "has",
    "to": 447
  }, {
    "from": 1009,
    "label": "has",
    "to": 1010
  }, {
    "from": 1009,
    "label": "has",
    "to": 198
  }, {
    "from": 1009,
    "label": "has",
    "to": 1011
  }, {
    "from": 1012,
    "label": "has",
    "to": 447
  }, {
    "from": 1012,
    "label": "has",
    "to": 1013
  }, {
    "from": 1012,
    "label": "has",
    "to": 1014
  }, {
    "from": 1015,
    "label": "has",
    "to": 447
  }, {
    "from": 1015,
    "label": "has",
    "to": 1016
  }, {
    "from": 1015,
    "label": "has",
    "to": 4
  }, {
    "from": 1015,
    "label": "has",
    "to": 1017
  }, {
    "from": 1015,
    "label": "has",
    "to": 4
  }, {
    "from": 1015,
    "label": "has",
    "to": 91
  }, {
    "from": 1015,
    "label": "has",
    "to": 1018
  }, {
    "from": 1015,
    "label": "has",
    "to": 1019
  }, {
    "from": 1015,
    "label": "has",
    "to": 1020
  }, {
    "from": 1015,
    "label": "has",
    "to": 1021
  }, {
    "from": 1015,
    "label": "has",
    "to": 1022
  }, {
    "from": 1022,
    "label": "has",
    "to": 1023
  }, {
    "from": 1022,
    "label": "has",
    "to": 1024
  }, {
    "from": 1015,
    "label": "has",
    "to": 1025
  }, {
    "from": 1026,
    "label": "has",
    "to": 447
  }, {
    "from": 1026,
    "label": "has",
    "to": 1027
  }, {
    "from": 1026,
    "label": "has",
    "to": 1028
  }, {
    "from": 1029,
    "label": "has",
    "to": 752
  }, {
    "from": 1029,
    "label": "has",
    "to": 750
  }, {
    "from": 1029,
    "label": "has",
    "to": 1030
  }, {
    "from": 1030,
    "label": "has",
    "to": 1031
  }, {
    "from": 1029,
    "label": "has",
    "to": 1032
  }, {
    "from": 1032,
    "label": "has",
    "to": 1033
  }, {
    "from": 1032,
    "label": "has",
    "to": 1034
  }, {
    "from": 1029,
    "label": "has",
    "to": 1035
  }, {
    "from": 1029,
    "label": "has",
    "to": 1036
  }, {
    "from": 1037,
    "label": "has",
    "to": 447
  }, {
    "from": 1037,
    "label": "has",
    "to": 1027
  }, {
    "from": 1037,
    "label": "has",
    "to": 1038
  }, {
    "from": 1039,
    "label": "has",
    "to": 752
  }, {
    "from": 1039,
    "label": "has",
    "to": 753
  }, {
    "from": 1039,
    "label": "has",
    "to": 754
  }, {
    "from": 1039,
    "label": "has",
    "to": 755
  }, {
    "from": 1039,
    "label": "has",
    "to": 714
  }, {
    "from": 1039,
    "label": "has",
    "to": 756
  }, {
    "from": 1039,
    "label": "has",
    "to": 757
  }, {
    "from": 1039,
    "label": "has",
    "to": 758
  }, {
    "from": 1039,
    "label": "has",
    "to": 759
  }, {
    "from": 759,
    "label": "has",
    "to": 760
  }, {
    "from": 759,
    "label": "has",
    "to": 761
  }, {
    "from": 1039,
    "label": "has",
    "to": 762
  }, {
    "from": 762,
    "label": "has",
    "to": 763
  }, {
    "from": 1039,
    "label": "has",
    "to": 764
  }, {
    "from": 1039,
    "label": "has",
    "to": 765
  }, {
    "from": 1039,
    "label": "has",
    "to": 766
  }, {
    "from": 766,
    "label": "has",
    "to": 767
  }, {
    "from": 766,
    "label": "has",
    "to": 768
  }, {
    "from": 1039,
    "label": "has",
    "to": 1040
  }, {
    "from": 1041,
    "label": "has",
    "to": 770
  }, {
    "from": 1041,
    "label": "has",
    "to": 771
  }, {
    "from": 1041,
    "label": "has",
    "to": 772
  }, {
    "from": 1041,
    "label": "has",
    "to": 1042
  }, {
    "from": 1043,
    "label": "has",
    "to": 779
  }, {
    "from": 1043,
    "label": "has",
    "to": 4
  }, {
    "from": 1043,
    "label": "has",
    "to": 780
  }, {
    "from": 1043,
    "label": "has",
    "to": 781
  }, {
    "from": 1043,
    "label": "has",
    "to": 782
  }, {
    "from": 782,
    "label": "has",
    "to": 783
  }, {
    "from": 782,
    "label": "has",
    "to": 784
  }, {
    "from": 784,
    "label": "has",
    "to": 785
  }, {
    "from": 1043,
    "label": "has",
    "to": 786
  }, {
    "from": 786,
    "label": "has",
    "to": 787
  }, {
    "from": 1043,
    "label": "has",
    "to": 788
  }, {
    "from": 1043,
    "label": "has",
    "to": 789
  }, {
    "from": 1043,
    "label": "has",
    "to": 790
  }, {
    "from": 790,
    "label": "has",
    "to": 401
  }, {
    "from": 790,
    "label": "has",
    "to": 791
  }, {
    "from": 790,
    "label": "has",
    "to": 792
  }, {
    "from": 790,
    "label": "has",
    "to": 793
  }, {
    "from": 790,
    "label": "has",
    "to": 794
  }, {
    "from": 794,
    "label": "has",
    "to": 795
  }, {
    "from": 794,
    "label": "has",
    "to": 796
  }, {
    "from": 794,
    "label": "has",
    "to": 797
  }, {
    "from": 794,
    "label": "has",
    "to": 798
  }, {
    "from": 794,
    "label": "has",
    "to": 495
  }, {
    "from": 794,
    "label": "has",
    "to": 799
  }, {
    "from": 1043,
    "label": "has",
    "to": 800
  }, {
    "from": 800,
    "label": "has",
    "to": 801
  }, {
    "from": 801,
    "label": "has",
    "to": 802
  }, {
    "from": 801,
    "label": "has",
    "to": 803
  }, {
    "from": 803,
    "label": "has",
    "to": 804
  }, {
    "from": 803,
    "label": "has",
    "to": 805
  }, {
    "from": 805,
    "label": "has",
    "to": 798
  }, {
    "from": 805,
    "label": "has",
    "to": 495
  }, {
    "from": 805,
    "label": "has",
    "to": 806
  }, {
    "from": 805,
    "label": "has",
    "to": 799
  }, {
    "from": 801,
    "label": "has",
    "to": 374
  }, {
    "from": 800,
    "label": "has",
    "to": 807
  }, {
    "from": 807,
    "label": "has",
    "to": 808
  }, {
    "from": 1043,
    "label": "has",
    "to": 809
  }, {
    "from": 809,
    "label": "has",
    "to": 749
  }, {
    "from": 809,
    "label": "has",
    "to": 325
  }, {
    "from": 809,
    "label": "has",
    "to": 810
  }, {
    "from": 809,
    "label": "has",
    "to": 811
  }, {
    "from": 1043,
    "label": "has",
    "to": 1044
  }, {
    "from": 1045,
    "label": "has",
    "to": 813
  }, {
    "from": 1045,
    "label": "has",
    "to": 1046
  }, {
    "from": 1047,
    "label": "has",
    "to": 815
  }, {
    "from": 1047,
    "label": "has",
    "to": 1048
  }, {
    "from": 1049,
    "label": "has",
    "to": 817
  }, {
    "from": 1049,
    "label": "has",
    "to": 818
  }, {
    "from": 818,
    "label": "has",
    "to": 772
  }, {
    "from": 1049,
    "label": "has",
    "to": 819
  }, {
    "from": 1049,
    "label": "has",
    "to": 820
  }, {
    "from": 1049,
    "label": "has",
    "to": 1050
  }, {
    "from": 1051,
    "label": "has",
    "to": 822
  }, {
    "from": 822,
    "label": "has",
    "to": 823
  }, {
    "from": 1051,
    "label": "has",
    "to": 1052
  }, {
    "from": 1053,
    "label": "has",
    "to": 1054
  }, {
    "from": 1054,
    "label": "has",
    "to": 1055
  }, {
    "from": 1053,
    "label": "has",
    "to": 1056
  }, {
    "from": 1056,
    "label": "has",
    "to": 749
  }, {
    "from": 1056,
    "label": "has",
    "to": 1057
  }, {
    "from": 1053,
    "label": "has",
    "to": 1058
  }, {
    "from": 1058,
    "label": "has",
    "to": 749
  }, {
    "from": 1058,
    "label": "has",
    "to": 1059
  }, {
    "from": 1053,
    "label": "has",
    "to": 1060
  }, {
    "from": 1060,
    "label": "has",
    "to": 743
  }, {
    "from": 1060,
    "label": "has",
    "to": 1061
  }, {
    "from": 1060,
    "label": "has",
    "to": 1062
  }, {
    "from": 1060,
    "label": "has",
    "to": 1063
  }, {
    "from": 1063,
    "label": "has",
    "to": 1064
  }, {
    "from": 1064,
    "label": "has",
    "to": 1065
  }, {
    "from": 1064,
    "label": "has",
    "to": 1066
  }, {
    "from": 1066,
    "label": "has",
    "to": 1067
  }, {
    "from": 1066,
    "label": "has",
    "to": 1068
  }, {
    "from": 1063,
    "label": "has",
    "to": 1069
  }, {
    "from": 1053,
    "label": "has",
    "to": 228
  }, {
    "from": 1053,
    "label": "has",
    "to": 1070
  }, {
    "from": 1071,
    "label": "has",
    "to": 447
  }, {
    "from": 1071,
    "label": "has",
    "to": 1016
  }, {
    "from": 1071,
    "label": "has",
    "to": 4
  }, {
    "from": 1071,
    "label": "has",
    "to": 1069
  }, {
    "from": 1071,
    "label": "has",
    "to": 1072
  }, {
    "from": 1071,
    "label": "has",
    "to": 1073
  }, {
    "from": 1073,
    "label": "has",
    "to": 1074
  }, {
    "from": 1071,
    "label": "has",
    "to": 1075
  }, {
    "from": 1075,
    "label": "has",
    "to": 1076
  }, {
    "from": 1075,
    "label": "has",
    "to": 1077
  }, {
    "from": 1075,
    "label": "has",
    "to": 1078
  }, {
    "from": 1075,
    "label": "has",
    "to": 1079
  }, {
    "from": 1079,
    "label": "has",
    "to": 772
  }, {
    "from": 1071,
    "label": "has",
    "to": 1035
  }, {
    "from": 1071,
    "label": "has",
    "to": 1080
  }, {
    "from": 1081,
    "label": "has",
    "to": 447
  }, {
    "from": 1081,
    "label": "has",
    "to": 1027
  }, {
    "from": 1081,
    "label": "has",
    "to": 1082
  }, {
    "from": 1083,
    "label": "has",
    "to": 817
  }, {
    "from": 1083,
    "label": "has",
    "to": 1084
  }, {
    "from": 1084,
    "label": "has",
    "to": 1085
  }, {
    "from": 1083,
    "label": "has",
    "to": 819
  }, {
    "from": 1083,
    "label": "has",
    "to": 820
  }, {
    "from": 1083,
    "label": "has",
    "to": 749
  }, {
    "from": 1083,
    "label": "has",
    "to": 1086
  }, {
    "from": 1083,
    "label": "has",
    "to": 1087
  }, {
    "from": 1088,
    "label": "has",
    "to": 447
  }, {
    "from": 1088,
    "label": "has",
    "to": 1089
  }, {
    "from": 1088,
    "label": "has",
    "to": 1090
  }, {
    "from": 1091,
    "label": "has",
    "to": 817
  }, {
    "from": 1091,
    "label": "has",
    "to": 1092
  }, {
    "from": 1092,
    "label": "has",
    "to": 1093
  }, {
    "from": 1092,
    "label": "has",
    "to": 811
  }, {
    "from": 1091,
    "label": "has",
    "to": 1094
  }, {
    "from": 1095,
    "label": "has",
    "to": 447
  }, {
    "from": 1095,
    "label": "has",
    "to": 1096
  }, {
    "from": 1095,
    "label": "has",
    "to": 1097
  }, {
    "from": 1098,
    "label": "has",
    "to": 817
  }, {
    "from": 1098,
    "label": "has",
    "to": 1099
  }, {
    "from": 1099,
    "label": "has",
    "to": 1100
  }, {
    "from": 1099,
    "label": "has",
    "to": 811
  }, {
    "from": 1098,
    "label": "has",
    "to": 1101
  }, {
    "from": 1102,
    "label": "has",
    "to": 447
  }, {
    "from": 1102,
    "label": "has",
    "to": 1096
  }, {
    "from": 1102,
    "label": "has",
    "to": 1103
  }, {
    "from": 1104,
    "label": "has",
    "to": 817
  }, {
    "from": 1104,
    "label": "has",
    "to": 1105
  }, {
    "from": 1105,
    "label": "has",
    "to": 1106
  }, {
    "from": 1105,
    "label": "has",
    "to": 811
  }, {
    "from": 1104,
    "label": "has",
    "to": 1107
  }, {
    "from": 1108,
    "label": "has",
    "to": 1109
  }, {
    "from": 1108,
    "label": "has",
    "to": 1110
  }, {
    "from": 1111,
    "label": "has",
    "to": 817
  }, {
    "from": 1111,
    "label": "has",
    "to": 1112
  }, {
    "from": 1112,
    "label": "has",
    "to": 810
  }, {
    "from": 1112,
    "label": "has",
    "to": 811
  }, {
    "from": 1111,
    "label": "has",
    "to": 1113
  }, {
    "from": 1114,
    "label": "has",
    "to": 1109
  }, {
    "from": 1114,
    "label": "has",
    "to": 1115
  }, {
    "from": 1116,
    "label": "has",
    "to": 1117
  }, {
    "from": 1117,
    "label": "has",
    "to": 1118
  }, {
    "from": 1116,
    "label": "has",
    "to": 1119
  }, {
    "from": 1120,
    "label": "has",
    "to": 1121
  }, {
    "from": 1120,
    "label": "has",
    "to": 1122
  }, {
    "from": 1123,
    "label": "has",
    "to": 1124
  }, {
    "from": 1124,
    "label": "has",
    "to": 1125
  }, {
    "from": 1123,
    "label": "has",
    "to": 1126
  }, {
    "from": 1127,
    "label": "has",
    "to": 1109
  }, {
    "from": 1127,
    "label": "has",
    "to": 1128
  }, {
    "from": 1129,
    "label": "has",
    "to": 1130
  }, {
    "from": 1130,
    "label": "has",
    "to": 1131
  }, {
    "from": 1129,
    "label": "has",
    "to": 1132
  }, {
    "from": 1133,
    "label": "has",
    "to": 1109
  }, {
    "from": 1133,
    "label": "has",
    "to": 1134
  }, {
    "from": 1135,
    "label": "has",
    "to": 1136
  }, {
    "from": 1136,
    "label": "has",
    "to": 1137
  }, {
    "from": 1136,
    "label": "has",
    "to": 704
  }, {
    "from": 1136,
    "label": "has",
    "to": 705
  }, {
    "from": 1135,
    "label": "has",
    "to": 1138
  }, {
    "from": 1139,
    "label": "has",
    "to": 1140
  }, {
    "from": 1141,
    "label": "has",
    "to": 1142
  }, {
    "from": 1141,
    "label": "has",
    "to": 1143
  }, {
    "from": 71,
    "label": "calls",
    "to": 2
  }, {
    "from": 71,
    "label": "calls",
    "to": 2
  }, {
    "from": 507,
    "label": "calls",
    "to": 2
  }, {
    "from": 507,
    "label": "calls",
    "to": 2
  }, {
    "from": 532,
    "label": "calls",
    "to": 2
  }, {
    "from": 532,
    "label": "calls",
    "to": 2
  }, {
    "from": 532,
    "label": "calls",
    "to": 2
  }, {
    "from": 571,
    "label": "calls",
    "to": 2
  }, {
    "from": 1144,
    "label": "calls",
    "to": 2
  }, {
    "from": 828,
    "label": "calls",
    "to": 1207
  }, {
    "from": 828,
    "label": "calls",
    "to": 1207
  }, {
    "from": 741,
    "label": "calls",
    "to": 1207
  }, {
    "from": 741,
    "label": "calls",
    "to": 1207
  }, {
    "from": 347,
    "label": "calls",
    "to": 342
  }, {
    "from": 71,
    "label": "calls",
    "to": 1185
  }, {
    "from": 71,
    "label": "calls",
    "to": 1185
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1185
  }, {
    "from": 682,
    "label": "calls",
    "to": 1185
  }, {
    "from": 713,
    "label": "calls",
    "to": 1185
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1185
  }, {
    "from": 741,
    "label": "calls",
    "to": 1185
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1185
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1185
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 16
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1170
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1170
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1170
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1170
  }, {
    "from": 838,
    "label": "calls",
    "to": 1157
  }, {
    "from": 264,
    "label": "calls",
    "to": 1202
  }, {
    "from": 264,
    "label": "calls",
    "to": 1202
  }, {
    "from": 264,
    "label": "calls",
    "to": 1202
  }, {
    "from": 741,
    "label": "calls",
    "to": 677
  }, {
    "from": 1144,
    "label": "calls",
    "to": 677
  }, {
    "from": 1144,
    "label": "calls",
    "to": 677
  }, {
    "from": 285,
    "label": "calls",
    "to": 1146
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1146
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1161
  }, {
    "from": 668,
    "label": "calls",
    "to": 1186
  }, {
    "from": 338,
    "label": "calls",
    "to": 111
  }, {
    "from": 347,
    "label": "calls",
    "to": 111
  }, {
    "from": 1144,
    "label": "calls",
    "to": 111
  }, {
    "from": 1144,
    "label": "calls",
    "to": 111
  }, {
    "from": 532,
    "label": "calls",
    "to": 507
  }, {
    "from": 551,
    "label": "calls",
    "to": 507
  }, {
    "from": 111,
    "label": "calls",
    "to": 686
  }, {
    "from": 1144,
    "label": "calls",
    "to": 686
  }, {
    "from": 285,
    "label": "calls",
    "to": 19
  }, {
    "from": 1144,
    "label": "calls",
    "to": 19
  }, {
    "from": 376,
    "label": "calls",
    "to": 388
  }, {
    "from": 1144,
    "label": "calls",
    "to": 388
  }, {
    "from": 725,
    "label": "calls",
    "to": 388
  }, {
    "from": 532,
    "label": "calls",
    "to": 489
  }, {
    "from": 63,
    "label": "calls",
    "to": 71
  }, {
    "from": 111,
    "label": "calls",
    "to": 71
  }, {
    "from": 741,
    "label": "calls",
    "to": 1174
  }, {
    "from": 571,
    "label": "calls",
    "to": 1152
  }, {
    "from": 571,
    "label": "calls",
    "to": 1152
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1148
  }, {
    "from": 425,
    "label": "calls",
    "to": 1180
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1187
  }, {
    "from": 741,
    "label": "calls",
    "to": 1187
  }, {
    "from": 376,
    "label": "calls",
    "to": 1200
  }, {
    "from": 1144,
    "label": "calls",
    "to": 399
  }, {
    "from": 111,
    "label": "calls",
    "to": 1153
  }, {
    "from": 741,
    "label": "calls",
    "to": 699
  }, {
    "from": 1144,
    "label": "calls",
    "to": 699
  }, {
    "from": 1144,
    "label": "calls",
    "to": 699
  }, {
    "from": 1144,
    "label": "calls",
    "to": 699
  }, {
    "from": 1144,
    "label": "calls",
    "to": 699
  }, {
    "from": 1144,
    "label": "calls",
    "to": 699
  }, {
    "from": 741,
    "label": "calls",
    "to": 1177
  }, {
    "from": 741,
    "label": "calls",
    "to": 830
  }, {
    "from": 741,
    "label": "calls",
    "to": 830
  }, {
    "from": 741,
    "label": "calls",
    "to": 830
  }, {
    "from": 1144,
    "label": "calls",
    "to": 830
  }, {
    "from": 243,
    "label": "calls",
    "to": 1189
  }, {
    "from": 264,
    "label": "calls",
    "to": 1189
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1189
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1189
  }, {
    "from": 741,
    "label": "calls",
    "to": 1189
  }, {
    "from": 741,
    "label": "calls",
    "to": 1189
  }, {
    "from": 285,
    "label": "calls",
    "to": 1162
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1162
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1162
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1162
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1162
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1162
  }, {
    "from": 63,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 446,
    "label": "calls",
    "to": 56
  }, {
    "from": 450,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 461,
    "label": "calls",
    "to": 56
  }, {
    "from": 489,
    "label": "calls",
    "to": 56
  }, {
    "from": 524,
    "label": "calls",
    "to": 56
  }, {
    "from": 532,
    "label": "calls",
    "to": 56
  }, {
    "from": 551,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 741,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 1144,
    "label": "calls",
    "to": 56
  }, {
    "from": 111,
    "label": "calls",
    "to": 5
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1167
  }, {
    "from": 285,
    "label": "calls",
    "to": 1172
  }, {
    "from": 245,
    "label": "calls",
    "to": 1190
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1190
  }, {
    "from": 668,
    "label": "calls",
    "to": 1190
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1190
  }, {
    "from": 741,
    "label": "calls",
    "to": 1190
  }, {
    "from": 668,
    "label": "calls",
    "to": 1191
  }, {
    "from": 668,
    "label": "calls",
    "to": 1191
  }, {
    "from": 111,
    "label": "calls",
    "to": 1164
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1194
  }, {
    "from": 111,
    "label": "calls",
    "to": 1194
  }, {
    "from": 571,
    "label": "calls",
    "to": 1147
  }, {
    "from": 838,
    "label": "calls",
    "to": 1147
  }, {
    "from": 571,
    "label": "calls",
    "to": 1149
  }, {
    "from": 1144,
    "label": "calls",
    "to": 406
  }, {
    "from": 285,
    "label": "calls",
    "to": 1151
  }, {
    "from": 838,
    "label": "calls",
    "to": 1151
  }, {
    "from": 285,
    "label": "calls",
    "to": 1163
  }, {
    "from": 1144,
    "label": "calls",
    "to": 442
  }, {
    "from": 858,
    "label": "calls",
    "to": 442
  }, {
    "from": 111,
    "label": "calls",
    "to": 104
  }, {
    "from": 111,
    "label": "calls",
    "to": 104
  }, {
    "from": 347,
    "label": "calls",
    "to": 104
  }, {
    "from": 376,
    "label": "calls",
    "to": 104
  }, {
    "from": 285,
    "label": "calls",
    "to": 42
  }, {
    "from": 858,
    "label": "calls",
    "to": 42
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 111,
    "label": "calls",
    "to": 1160
  }, {
    "from": 245,
    "label": "calls",
    "to": 1192
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1192
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1192
  }, {
    "from": 63,
    "label": "calls",
    "to": 89
  }, {
    "from": 111,
    "label": "calls",
    "to": 89
  }, {
    "from": 285,
    "label": "calls",
    "to": 273
  }, {
    "from": 285,
    "label": "calls",
    "to": 273
  }, {
    "from": 741,
    "label": "calls",
    "to": 273
  }, {
    "from": 111,
    "label": "calls",
    "to": 461
  }, {
    "from": 1144,
    "label": "calls",
    "to": 461
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1182
  }, {
    "from": 461,
    "label": "calls",
    "to": 1193
  }, {
    "from": 461,
    "label": "calls",
    "to": 1193
  }, {
    "from": 571,
    "label": "calls",
    "to": 1165
  }, {
    "from": 571,
    "label": "calls",
    "to": 1165
  }, {
    "from": 713,
    "label": "calls",
    "to": 702
  }, {
    "from": 713,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 741,
    "label": "calls",
    "to": 702
  }, {
    "from": 741,
    "label": "calls",
    "to": 702
  }, {
    "from": 741,
    "label": "calls",
    "to": 702
  }, {
    "from": 741,
    "label": "calls",
    "to": 702
  }, {
    "from": 741,
    "label": "calls",
    "to": 702
  }, {
    "from": 741,
    "label": "calls",
    "to": 702
  }, {
    "from": 741,
    "label": "calls",
    "to": 702
  }, {
    "from": 741,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 1144,
    "label": "calls",
    "to": 702
  }, {
    "from": 89,
    "label": "calls",
    "to": 347
  }, {
    "from": 369,
    "label": "calls",
    "to": 347
  }, {
    "from": 741,
    "label": "calls",
    "to": 347
  }, {
    "from": 1144,
    "label": "calls",
    "to": 347
  }, {
    "from": 347,
    "label": "calls",
    "to": 243
  }, {
    "from": 388,
    "label": "calls",
    "to": 243
  }, {
    "from": 741,
    "label": "calls",
    "to": 828
  }, {
    "from": 111,
    "label": "calls",
    "to": 1176
  }, {
    "from": 111,
    "label": "calls",
    "to": 1176
  }, {
    "from": 1144,
    "label": "calls",
    "to": 736
  }, {
    "from": 1144,
    "label": "calls",
    "to": 736
  }, {
    "from": 285,
    "label": "calls",
    "to": 331
  }, {
    "from": 285,
    "label": "calls",
    "to": 331
  }, {
    "from": 19,
    "label": "calls",
    "to": 1175
  }, {
    "from": 89,
    "label": "calls",
    "to": 84
  }, {
    "from": 347,
    "label": "calls",
    "to": 84
  }, {
    "from": 376,
    "label": "calls",
    "to": 84
  }, {
    "from": 571,
    "label": "calls",
    "to": 1166
  }, {
    "from": 741,
    "label": "calls",
    "to": 1145
  }, {
    "from": 1144,
    "label": "calls",
    "to": 63
  }, {
    "from": 406,
    "label": "calls",
    "to": 63
  }, {
    "from": 741,
    "label": "calls",
    "to": 63
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1171
  }, {
    "from": 285,
    "label": "calls",
    "to": 1171
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1154
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1154
  }, {
    "from": 1144,
    "label": "calls",
    "to": 425
  }, {
    "from": 442,
    "label": "calls",
    "to": 425
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1208
  }, {
    "from": 245,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1197
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1179
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1206
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1206
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1206
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1206
  }, {
    "from": 84,
    "label": "calls",
    "to": 1156
  }, {
    "from": 347,
    "label": "calls",
    "to": 1156
  }, {
    "from": 347,
    "label": "calls",
    "to": 1156
  }, {
    "from": 376,
    "label": "calls",
    "to": 1156
  }, {
    "from": 388,
    "label": "calls",
    "to": 1156
  }, {
    "from": 1144,
    "label": "calls",
    "to": 285
  }, {
    "from": 741,
    "label": "calls",
    "to": 1201
  }, {
    "from": 741,
    "label": "calls",
    "to": 1201
  }, {
    "from": 713,
    "label": "calls",
    "to": 835
  }, {
    "from": 89,
    "label": "calls",
    "to": 1150
  }, {
    "from": 89,
    "label": "calls",
    "to": 1150
  }, {
    "from": 369,
    "label": "calls",
    "to": 1150
  }, {
    "from": 376,
    "label": "calls",
    "to": 1150
  }, {
    "from": 725,
    "label": "calls",
    "to": 1150
  }, {
    "from": 1144,
    "label": "calls",
    "to": 376
  }, {
    "from": 388,
    "label": "calls",
    "to": 376
  }, {
    "from": 399,
    "label": "calls",
    "to": 376
  }, {
    "from": 425,
    "label": "calls",
    "to": 376
  }, {
    "from": 725,
    "label": "calls",
    "to": 376
  }, {
    "from": 1144,
    "label": "calls",
    "to": 713
  }, {
    "from": 1144,
    "label": "calls",
    "to": 713
  }, {
    "from": 1144,
    "label": "calls",
    "to": 713
  }, {
    "from": 1144,
    "label": "calls",
    "to": 264
  }, {
    "from": 1144,
    "label": "calls",
    "to": 725
  }, {
    "from": 245,
    "label": "calls",
    "to": 1204
  }, {
    "from": 342,
    "label": "calls",
    "to": 1204
  }, {
    "from": 399,
    "label": "calls",
    "to": 1204
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1204
  }, {
    "from": 406,
    "label": "calls",
    "to": 1204
  }, {
    "from": 442,
    "label": "calls",
    "to": 1204
  }, {
    "from": 677,
    "label": "calls",
    "to": 1204
  }, {
    "from": 699,
    "label": "calls",
    "to": 1204
  }, {
    "from": 828,
    "label": "calls",
    "to": 1204
  }, {
    "from": 741,
    "label": "calls",
    "to": 1204
  }, {
    "from": 532,
    "label": "calls",
    "to": 497
  }, {
    "from": 551,
    "label": "calls",
    "to": 497
  }, {
    "from": 347,
    "label": "calls",
    "to": 1205
  }, {
    "from": 376,
    "label": "calls",
    "to": 1205
  }, {
    "from": 670,
    "label": "calls",
    "to": 668
  }, {
    "from": 670,
    "label": "calls",
    "to": 668
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1183
  }, {
    "from": 571,
    "label": "calls",
    "to": 1184
  }, {
    "from": 713,
    "label": "calls",
    "to": 1196
  }, {
    "from": 571,
    "label": "calls",
    "to": 1178
  }, {
    "from": 571,
    "label": "calls",
    "to": 1178
  }, {
    "from": 571,
    "label": "calls",
    "to": 1178
  }, {
    "from": 571,
    "label": "calls",
    "to": 1178
  }, {
    "from": 838,
    "label": "calls",
    "to": 1178
  }, {
    "from": 571,
    "label": "calls",
    "to": 551
  }, {
    "from": 571,
    "label": "calls",
    "to": 551
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1195
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1195
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1173
  }, {
    "from": 838,
    "label": "calls",
    "to": 1168
  }, {
    "from": 571,
    "label": "calls",
    "to": 571
  }, {
    "from": 672,
    "label": "calls",
    "to": 571
  }, {
    "from": 571,
    "label": "calls",
    "to": 1155
  }, {
    "from": 571,
    "label": "calls",
    "to": 1155
  }, {
    "from": 571,
    "label": "calls",
    "to": 1155
  }, {
    "from": 571,
    "label": "calls",
    "to": 1155
  }, {
    "from": 571,
    "label": "calls",
    "to": 1169
  }, {
    "from": 571,
    "label": "calls",
    "to": 1169
  }, {
    "from": 571,
    "label": "calls",
    "to": 1169
  }, {
    "from": 571,
    "label": "calls",
    "to": 1169
  }, {
    "from": 571,
    "label": "calls",
    "to": 1169
  }, {
    "from": 571,
    "label": "calls",
    "to": 1169
  }, {
    "from": 838,
    "label": "calls",
    "to": 1169
  }, {
    "from": 369,
    "label": "calls",
    "to": 1159
  }, {
    "from": 388,
    "label": "calls",
    "to": 1159
  }, {
    "from": 741,
    "label": "calls",
    "to": 1159
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1158
  }, {
    "from": 243,
    "label": "calls",
    "to": 1199
  }, {
    "from": 1144,
    "label": "calls",
    "to": 741
  }, {
    "from": 376,
    "label": "calls",
    "to": 1188
  }, {
    "from": 571,
    "label": "calls",
    "to": 670
  }, {
    "from": 571,
    "label": "calls",
    "to": 670
  }, {
    "from": 571,
    "label": "calls",
    "to": 670
  }, {
    "from": 571,
    "label": "calls",
    "to": 670
  }, {
    "from": 741,
    "label": "calls",
    "to": 333
  }, {
    "from": 1144,
    "label": "calls",
    "to": 279
  }, {
    "from": 858,
    "label": "calls",
    "to": 279
  }, {
    "from": 461,
    "label": "calls",
    "to": 1203
  }, {
    "from": 461,
    "label": "calls",
    "to": 1203
  }, {
    "from": 461,
    "label": "calls",
    "to": 1203
  }, {
    "from": 461,
    "label": "calls",
    "to": 1203
  }, {
    "from": 84,
    "label": "calls",
    "to": 1198
  }, {
    "from": 89,
    "label": "calls",
    "to": 1198
  }, {
    "from": 243,
    "label": "calls",
    "to": 1198
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1198
  }, {
    "from": 522,
    "label": "calls",
    "to": 1198
  }, {
    "from": 532,
    "label": "calls",
    "to": 1198
  }, {
    "from": 551,
    "label": "calls",
    "to": 1198
  }, {
    "from": 551,
    "label": "calls",
    "to": 1198
  }, {
    "from": 668,
    "label": "calls",
    "to": 1198
  }, {
    "from": 686,
    "label": "calls",
    "to": 682
  }, {
    "from": 713,
    "label": "calls",
    "to": 682
  }, {
    "from": 741,
    "label": "calls",
    "to": 682
  }, {
    "from": 741,
    "label": "calls",
    "to": 682
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1181
  }, {
    "from": 338,
    "label": "calls",
    "to": 245
  }, {
    "from": 347,
    "label": "calls",
    "to": 245
  }, {
    "from": 388,
    "label": "calls",
    "to": 245
  }, {
    "from": 1144,
    "label": "calls",
    "to": 245
  }, {
    "from": 1144,
    "label": "calls",
    "to": 245
  }, {
    "from": 1,
    "label": "contains",
    "to": 1144
  }, {
    "from": 1144,
    "label": "declares",
    "to": 2
  }, {
    "from": 1144,
    "label": "declares",
    "to": 5
  }, {
    "from": 1144,
    "label": "declares",
    "to": 16
  }, {
    "from": 1144,
    "label": "declares",
    "to": 19
  }, {
    "from": 1144,
    "label": "declares",
    "to": 42
  }, {
    "from": 1144,
    "label": "declares",
    "to": 56
  }, {
    "from": 1144,
    "label": "declares",
    "to": 63
  }, {
    "from": 1144,
    "label": "declares",
    "to": 71
  }, {
    "from": 1144,
    "label": "declares",
    "to": 84
  }, {
    "from": 1144,
    "label": "declares",
    "to": 89
  }, {
    "from": 1144,
    "label": "declares",
    "to": 104
  }, {
    "from": 1144,
    "label": "declares",
    "to": 111
  }, {
    "from": 1144,
    "label": "declares",
    "to": 243
  }, {
    "from": 1144,
    "label": "declares",
    "to": 245
  }, {
    "from": 1144,
    "label": "declares",
    "to": 264
  }, {
    "from": 1144,
    "label": "declares",
    "to": 273
  }, {
    "from": 1144,
    "label": "declares",
    "to": 279
  }, {
    "from": 1144,
    "label": "declares",
    "to": 285
  }, {
    "from": 1144,
    "label": "declares",
    "to": 331
  }, {
    "from": 1144,
    "label": "declares",
    "to": 333
  }, {
    "from": 1144,
    "label": "declares",
    "to": 338
  }, {
    "from": 1144,
    "label": "declares",
    "to": 342
  }, {
    "from": 1144,
    "label": "declares",
    "to": 347
  }, {
    "from": 1144,
    "label": "declares",
    "to": 369
  }, {
    "from": 1144,
    "label": "declares",
    "to": 376
  }, {
    "from": 1144,
    "label": "declares",
    "to": 388
  }, {
    "from": 1144,
    "label": "declares",
    "to": 399
  }, {
    "from": 1144,
    "label": "declares",
    "to": 406
  }, {
    "from": 1144,
    "label": "declares",
    "to": 425
  }, {
    "from": 1144,
    "label": "declares",
    "to": 442
  }, {
    "from": 1144,
    "label": "declares",
    "to": 446
  }, {
    "from": 1144,
    "label": "declares",
    "to": 450
  }, {
    "from": 1144,
    "label": "declares",
    "to": 461
  }, {
    "from": 1144,
    "label": "declares",
    "to": 489
  }, {
    "from": 1144,
    "label": "declares",
    "to": 497
  }, {
    "from": 1144,
    "label": "declares",
    "to": 507
  }, {
    "from": 1144,
    "label": "declares",
    "to": 522
  }, {
    "from": 1144,
    "label": "declares",
    "to": 524
  }, {
    "from": 1144,
    "label": "declares",
    "to": 532
  }, {
    "from": 1144,
    "label": "declares",
    "to": 551
  }, {
    "from": 1144,
    "label": "declares",
    "to": 571
  }, {
    "from": 1144,
    "label": "declares",
    "to": 668
  }, {
    "from": 1144,
    "label": "declares",
    "to": 670
  }, {
    "from": 1144,
    "label": "declares",
    "to": 672
  }, {
    "from": 1144,
    "label": "declares",
    "to": 677
  }, {
    "from": 1144,
    "label": "declares",
    "to": 682
  }, {
    "from": 1144,
    "label": "declares",
    "to": 686
  }, {
    "from": 1144,
    "label": "declares",
    "to": 699
  }, {
    "from": 1144,
    "label": "declares",
    "to": 702
  }, {
    "from": 1144,
    "label": "declares",
    "to": 713
  }, {
    "from": 1144,
    "label": "declares",
    "to": 725
  }, {
    "from": 1144,
    "label": "declares",
    "to": 736
  }, {
    "from": 1144,
    "label": "declares",
    "to": 741
  }, {
    "from": 1144,
    "label": "declares",
    "to": 828
  }, {
    "from": 1144,
    "label": "declares",
    "to": 830
  }, {
    "from": 1144,
    "label": "declares",
    "to": 835
  }, {
    "from": 1144,
    "label": "declares",
    "to": 838
  }, {
    "from": 1144,
    "label": "declares",
    "to": 858
  }, {
    "from": 1144,
    "label": "declares",
    "to": 869
  }, {
    "from": 1144,
    "label": "declares",
    "to": 873
  }, {
    "from": 1144,
    "label": "declares",
    "to": 875
  }, {
    "from": 1144,
    "label": "declares",
    "to": 877
  }, {
    "from": 1144,
    "label": "declares",
    "to": 879
  }, {
    "from": 1144,
    "label": "declares",
    "to": 881
  }, {
    "from": 1144,
    "label": "declares",
    "to": 883
  }, {
    "from": 1144,
    "label": "declares",
    "to": 885
  }, {
    "from": 1144,
    "label": "declares",
    "to": 887
  }, {
    "from": 1144,
    "label": "declares",
    "to": 889
  }, {
    "from": 1144,
    "label": "declares",
    "to": 891
  }, {
    "from": 1144,
    "label": "declares",
    "to": 893
  }, {
    "from": 1144,
    "label": "declares",
    "to": 895
  }, {
    "from": 1144,
    "label": "declares",
    "to": 897
  }, {
    "from": 1144,
    "label": "declares",
    "to": 899
  }, {
    "from": 1144,
    "label": "declares",
    "to": 901
  }, {
    "from": 1144,
    "label": "declares",
    "to": 903
  }, {
    "from": 1144,
    "label": "declares",
    "to": 905
  }, {
    "from": 1144,
    "label": "declares",
    "to": 909
  }, {
    "from": 1144,
    "label": "declares",
    "to": 914
  }, {
    "from": 1144,
    "label": "declares",
    "to": 917
  }, {
    "from": 1144,
    "label": "declares",
    "to": 919
  }, {
    "from": 1144,
    "label": "declares",
    "to": 922
  }, {
    "from": 1144,
    "label": "declares",
    "to": 929
  }, {
    "from": 1144,
    "label": "declares",
    "to": 934
  }, {
    "from": 1144,
    "label": "declares",
    "to": 937
  }, {
    "from": 1144,
    "label": "declares",
    "to": 941
  }, {
    "from": 1144,
    "label": "declares",
    "to": 944
  }, {
    "from": 1144,
    "label": "declares",
    "to": 947
  }, {
    "from": 1144,
    "label": "declares",
    "to": 950
  }, {
    "from": 1144,
    "label": "declares",
    "to": 959
  }, {
    "from": 1144,
    "label": "declares",
    "to": 962
  }, {
    "from": 1144,
    "label": "declares",
    "to": 974
  }, {
    "from": 1144,
    "label": "declares",
    "to": 976
  }, {
    "from": 1144,
    "label": "declares",
    "to": 978
  }, {
    "from": 1144,
    "label": "declares",
    "to": 980
  }, {
    "from": 1144,
    "label": "declares",
    "to": 982
  }, {
    "from": 1144,
    "label": "declares",
    "to": 984
  }, {
    "from": 1144,
    "label": "declares",
    "to": 988
  }, {
    "from": 1144,
    "label": "declares",
    "to": 991
  }, {
    "from": 1144,
    "label": "declares",
    "to": 992
  }, {
    "from": 1144,
    "label": "declares",
    "to": 994
  }, {
    "from": 1144,
    "label": "declares",
    "to": 996
  }, {
    "from": 1144,
    "label": "declares",
    "to": 997
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1004
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1009
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1012
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1015
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1026
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1029
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1037
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1039
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1041
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1043
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1045
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1047
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1049
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1051
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1053
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1071
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1081
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1083
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1088
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1091
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1095
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1098
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1102
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1104
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1108
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1111
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1114
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1116
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1120
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1123
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1127
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1129
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1133
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1135
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1139
  }, {
    "from": 1144,
    "label": "declares",
    "to": 1141
  }, {
    "from": 1,
    "label": "contains",
    "to": 1210
  }, {
    "from": 1,
    "label": "contains",
    "to": 1211
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1212
  }, {
    "from": 1212,
    "label": "assigns",
    "to": 1213
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1214
  }, {
    "from": 1214,
    "label": "assigns",
    "to": 1215
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1216
  }, {
    "from": 1216,
    "label": "assigns",
    "to": 1217
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1218
  }, {
    "from": 1218,
    "label": "assigns",
    "to": 1219
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1220
  }, {
    "from": 1220,
    "label": "assigns",
    "to": 1221
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1222
  }, {
    "from": 1222,
    "label": "assigns",
    "to": 1223
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1224
  }, {
    "from": 1224,
    "label": "assigns",
    "to": 1225
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1226
  }, {
    "from": 1226,
    "label": "assigns",
    "to": 1227
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1228
  }, {
    "from": 1228,
    "label": "assigns",
    "to": 1229
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1230
  }, {
    "from": 1230,
    "label": "assigns",
    "to": 1231
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1232
  }, {
    "from": 1232,
    "label": "assigns",
    "to": 1233
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1234
  }, {
    "from": 1234,
    "label": "assigns",
    "to": 1235
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1236
  }, {
    "from": 1236,
    "label": "assigns",
    "to": 1237
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1238
  }, {
    "from": 1238,
    "label": "assigns",
    "to": 1239
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1240
  }, {
    "from": 1240,
    "label": "assigns",
    "to": 1241
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1242
  }, {
    "from": 1242,
    "label": "assigns",
    "to": 1243
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1244
  }, {
    "from": 1244,
    "label": "assigns",
    "to": 1245
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1246
  }, {
    "from": 1246,
    "label": "assigns",
    "to": 1247
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1248
  }, {
    "from": 1248,
    "label": "assigns",
    "to": 1249
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1250
  }, {
    "from": 1250,
    "label": "assigns",
    "to": 1251
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1252
  }, {
    "from": 1252,
    "label": "assigns",
    "to": 1253
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1254
  }, {
    "from": 1254,
    "label": "assigns",
    "to": 1255
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1256
  }, {
    "from": 1256,
    "label": "assigns",
    "to": 1257
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1258
  }, {
    "from": 1258,
    "label": "assigns",
    "to": 1259
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1260
  }, {
    "from": 1260,
    "label": "assigns",
    "to": 1261
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1262
  }, {
    "from": 1262,
    "label": "assigns",
    "to": 1263
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1264
  }, {
    "from": 1264,
    "label": "assigns",
    "to": 1265
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1266
  }, {
    "from": 1266,
    "label": "assigns",
    "to": 1267
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1268
  }, {
    "from": 1268,
    "label": "assigns",
    "to": 1269
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1270
  }, {
    "from": 1270,
    "label": "assigns",
    "to": 1271
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1272
  }, {
    "from": 1272,
    "label": "assigns",
    "to": 1273
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1274
  }, {
    "from": 1274,
    "label": "assigns",
    "to": 1275
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1276
  }, {
    "from": 1276,
    "label": "assigns",
    "to": 1277
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1278
  }, {
    "from": 1278,
    "label": "assigns",
    "to": 1279
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1280
  }, {
    "from": 1280,
    "label": "assigns",
    "to": 1281
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1282
  }, {
    "from": 1282,
    "label": "assigns",
    "to": 1283
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1284
  }, {
    "from": 1284,
    "label": "assigns",
    "to": 1285
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1286
  }, {
    "from": 1286,
    "label": "assigns",
    "to": 1287
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1288
  }, {
    "from": 1288,
    "label": "assigns",
    "to": 1289
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1290
  }, {
    "from": 1290,
    "label": "assigns",
    "to": 1291
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1292
  }, {
    "from": 1292,
    "label": "assigns",
    "to": 1293
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1294
  }, {
    "from": 1294,
    "label": "assigns",
    "to": 1295
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1296
  }, {
    "from": 1296,
    "label": "assigns",
    "to": 1297
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1298
  }, {
    "from": 1298,
    "label": "assigns",
    "to": 1299
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1300
  }, {
    "from": 1300,
    "label": "assigns",
    "to": 1301
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1302
  }, {
    "from": 1302,
    "label": "assigns",
    "to": 1303
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1304
  }, {
    "from": 1304,
    "label": "assigns",
    "to": 1305
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1306
  }, {
    "from": 1306,
    "label": "assigns",
    "to": 1307
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1308
  }, {
    "from": 1308,
    "label": "assigns",
    "to": 1309
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1310
  }, {
    "from": 1310,
    "label": "assigns",
    "to": 1311
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1312
  }, {
    "from": 1312,
    "label": "assigns",
    "to": 1313
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1314
  }, {
    "from": 1314,
    "label": "assigns",
    "to": 1315
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1316
  }, {
    "from": 1316,
    "label": "assigns",
    "to": 1317
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1318
  }, {
    "from": 1318,
    "label": "assigns",
    "to": 1319
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1320
  }, {
    "from": 1320,
    "label": "assigns",
    "to": 1321
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1322
  }, {
    "from": 1322,
    "label": "assigns",
    "to": 1323
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1324
  }, {
    "from": 1324,
    "label": "assigns",
    "to": 1325
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1326
  }, {
    "from": 1326,
    "label": "assigns",
    "to": 1327
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1328
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1329
  }, {
    "from": 1329,
    "label": "assigns",
    "to": 1330
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1331
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1332
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1333
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1334
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1335
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1336
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1337
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1338
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1339
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1340
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1341
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1342
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1343
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1344
  }, {
    "from": 1344,
    "label": "assigns",
    "to": 1345
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1346
  }, {
    "from": 1346,
    "label": "assigns",
    "to": 1347
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1348
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1349
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1350
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1351
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1352
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1353
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1354
  }, {
    "from": 1354,
    "label": "assigns",
    "to": 1355
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1356
  }, {
    "from": 1356,
    "label": "assigns",
    "to": 1357
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1358
  }, {
    "from": 1358,
    "label": "assigns",
    "to": 1359
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1360
  }, {
    "from": 1360,
    "label": "assigns",
    "to": 1361
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1362
  }, {
    "from": 1362,
    "label": "assigns",
    "to": 1363
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1364
  }, {
    "from": 1364,
    "label": "assigns",
    "to": 1365
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1366
  }, {
    "from": 1366,
    "label": "assigns",
    "to": 1367
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1368
  }, {
    "from": 1368,
    "label": "assigns",
    "to": 1369
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1370
  }, {
    "from": 1370,
    "label": "assigns",
    "to": 1371
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1372
  }, {
    "from": 1372,
    "label": "assigns",
    "to": 1373
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1374
  }, {
    "from": 1374,
    "label": "assigns",
    "to": 1375
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1376
  }, {
    "from": 1376,
    "label": "assigns",
    "to": 1377
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1378
  }, {
    "from": 1378,
    "label": "assigns",
    "to": 1379
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1380
  }, {
    "from": 1380,
    "label": "assigns",
    "to": 1381
  }, {
    "from": 1210,
    "label": "initializes",
    "to": 1382
  }, {
    "from": 1382,
    "label": "assigns",
    "to": 1383
  }, {
    "from": 1211,
    "label": "initializes",
    "to": 1209
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 873
  }, {
    "from": 204,
    "label": "hasArgument",
    "to": 875
  }, {
    "from": 219,
    "label": "hasArgument",
    "to": 877
  }, {
    "from": 222,
    "label": "hasArgument",
    "to": 879
  }, {
    "from": 224,
    "label": "hasArgument",
    "to": 881
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 883
  }, {
    "from": 227,
    "label": "hasArgument",
    "to": 885
  }, {
    "from": 308,
    "label": "hasArgument",
    "to": 887
  }, {
    "from": 310,
    "label": "hasArgument",
    "to": 889
  }, {
    "from": 315,
    "label": "hasArgument",
    "to": 891
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 893
  }, {
    "from": 318,
    "label": "hasArgument",
    "to": 897
  }, {
    "from": 320,
    "label": "hasArgument",
    "to": 895
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 893
  }, {
    "from": 323,
    "label": "hasArgument",
    "to": 897
  }, {
    "from": 324,
    "label": "hasArgument",
    "to": 899
  }, {
    "from": 326,
    "label": "hasArgument",
    "to": 901
  }, {
    "from": 328,
    "label": "hasArgument",
    "to": 903
  }, {
    "from": 653,
    "label": "hasArgument",
    "to": 976
  }, {
    "from": 655,
    "label": "hasArgument",
    "to": 978
  }, {
    "from": 662,
    "label": "hasArgument",
    "to": 980
  }, {
    "from": 664,
    "label": "hasArgument",
    "to": 982
  }, {
    "from": 751,
    "label": "hasArgument",
    "to": 1039
  }, {
    "from": 769,
    "label": "hasArgument",
    "to": 1041
  }, {
    "from": 778,
    "label": "hasArgument",
    "to": 1043
  }, {
    "from": 812,
    "label": "hasArgument",
    "to": 1045
  }, {
    "from": 814,
    "label": "hasArgument",
    "to": 1047
  }, {
    "from": 816,
    "label": "hasArgument",
    "to": 1049
  }, {
    "from": 821,
    "label": "hasArgument",
    "to": 1051
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "editor",
    "type": "module"
  }, {
    "id": 2,
    "text": "function iff(cond, a, b) if cond then return a else return b end end",
    "type": "function"
  }, {
    "id": 3,
    "text": "if cond then return a else return b end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "function HasBit(value, num)\r\n    for n = 32, 0, -1 do\r\n        local b = 2^n\r\n        local num_b = num - b\r\n        local value_b = value - b\r\n        if num_b >= 0 then\r\n            num = num_b\r\n        else\r\n            return true -- already tested bits in num\r\n        end\r\n        if value_b >= 0 then\r\n            value = value_b\r\n        end\r\n        if (num_b >= 0) and (value_b < 0) then\r\n            return false\r\n        end\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "for n = 32, 0, -1 do\r\n        local b = 2^n\r\n        local num_b = num - b\r\n        local value_b = value - b\r\n        if num_b >= 0 then\r\n            num = num_b\r\n        else\r\n            return true -- already tested bits in num\r\n        end\r\n        if value_b >= 0 then\r\n            value = value_b\r\n        end\r\n        if (num_b >= 0) and (value_b < 0) then\r\n            return false\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 7,
    "text": "local b = 2^n",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local num_b = num - b",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local value_b = value - b",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if num_b >= 0 then\r\n            num = num_b\r\n        else\r\n            return true -- already tested bits in num\r\n        end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "num = num_b",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if value_b >= 0 then\r\n            value = value_b\r\n        end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "value = value_b",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if (num_b >= 0) and (value_b < 0) then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function NewID()\r\n    ID_IDCOUNTER = ID_IDCOUNTER + 1\r\n    return ID_IDCOUNTER\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "ID_IDCOUNTER = ID_IDCOUNTER + 1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function ConfigRestoreFramePosition(window, windowName)\r\n    local path = config:GetPath()\r\n    config:SetPath(\"/\"..windowName)\r\n\r\n    local _, s = config:Read(\"s\", -1)\r\n    local _, x = config:Read(\"x\", 0)\r\n    local _, y = config:Read(\"y\", 0)\r\n    local _, w = config:Read(\"w\", 0)\r\n    local _, h = config:Read(\"h\", 0)\r\n\r\n    if (s ~= -1) and (s ~= 2) then\r\n        local clientX, clientY, clientWidth, clientHeight\r\n        clientX, clientY, clientWidth, clientHeight = wx.wxClientDisplayRect()\r\n\r\n        if x < clientX then x = clientX end\r\n        if y < clientY then y = clientY end\r\n\r\n        if w > clientWidth  then w = clientWidth end\r\n        if h > clientHeight then h = clientHeight end\r\n\r\n        window:SetSize(x, y, w, h)\r\n    elseif s == 1 then\r\n        window:Maximize(true)\r\n    end\r\n\r\n    config:SetPath(path)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local path = config:GetPath()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "config:SetPath(\"/\"..windowName)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local _, s = config:Read(\"s\", -1)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local _, x = config:Read(\"x\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local _, y = config:Read(\"y\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local _, w = config:Read(\"w\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local _, h = config:Read(\"h\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if (s ~= -1) and (s ~= 2) then\r\n        local clientX, clientY, clientWidth, clientHeight\r\n        clientX, clientY, clientWidth, clientHeight = wx.wxClientDisplayRect()\r\n\r\n        if x < clientX then x = clientX end\r\n        if y < clientY then y = clientY end\r\n\r\n        if w > clientWidth  then w = clientWidth end\r\n        if h > clientHeight then h = clientHeight end\r\n\r\n        window:SetSize(x, y, w, h)\r\n    elseif s == 1 then\r\n        window:Maximize(true)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local clientX, clientY, clientWidth, clientHeight",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "clientX, clientY, clientWidth, clientHeight = wx.wxClientDisplayRect()",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if x < clientX then x = clientX end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "x = clientX",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if y < clientY then y = clientY end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "y = clientY",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if w > clientWidth  then w = clientWidth end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "w = clientWidth",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if h > clientHeight then h = clientHeight end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "h = clientHeight",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "window:SetSize(x, y, w, h)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "window:Maximize(true)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "config:SetPath(path)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function ConfigSaveFramePosition(window, windowName)\r\n    local path = config:GetPath()\r\n    config:SetPath(\"/\"..windowName)\r\n\r\n    local s    = 0\r\n    local w, h = window:GetSizeWH()\r\n    local x, y = window:GetPositionXY()\r\n\r\n    if window:IsMaximized() then\r\n        s = 1\r\n    elseif window:IsIconized() then\r\n        s = 2\r\n    end\r\n\r\n    config:Write(\"s\", s)\r\n\r\n    if s == 0 then\r\n        config:Write(\"x\", x)\r\n        config:Write(\"y\", y)\r\n        config:Write(\"w\", w)\r\n        config:Write(\"h\", h)\r\n    end\r\n\r\n    config:SetPath(path)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local s    = 0",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local w, h = window:GetSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local x, y = window:GetPositionXY()",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if window:IsMaximized() then\r\n        s = 1\r\n    elseif window:IsIconized() then\r\n        s = 2\r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "s = 1",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "s = 2",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "config:Write(\"s\", s)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "if s == 0 then\r\n        config:Write(\"x\", x)\r\n        config:Write(\"y\", y)\r\n        config:Write(\"w\", w)\r\n        config:Write(\"h\", h)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "config:Write(\"x\", x)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "config:Write(\"y\", y)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "config:Write(\"w\", w)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "config:Write(\"h\", h)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function GetEditor(selection)\r\n    local editor = nil\r\n    if selection == nil then\r\n        selection = notebook:GetSelection()\r\n    end\r\n    if (selection >= 0) and (selection < notebook:GetPageCount()) then\r\n        editor = notebook:GetPage(selection):DynamicCast(\"wxStyledTextCtrl\")\r\n    end\r\n    return editor\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local editor = nil",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if selection == nil then\r\n        selection = notebook:GetSelection()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "selection = notebook:GetSelection()",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if (selection >= 0) and (selection < notebook:GetPageCount()) then\r\n        editor = notebook:GetPage(selection):DynamicCast(\"wxStyledTextCtrl\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "editor = notebook:GetPage(selection):DynamicCast(\"wxStyledTextCtrl\")",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function SetEditorSelection(selection)\r\n    local editor = GetEditor(selection)\r\n    if editor then\r\n        editor:SetFocus()\r\n        editor:SetSTCFocus(true)\r\n        IsFileAlteredOnDisk(editor)\r\n    end\r\n    UpdateStatusText(editor) -- update even if nil\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local editor = GetEditor(selection)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if editor then\r\n        editor:SetFocus()\r\n        editor:SetSTCFocus(true)\r\n        IsFileAlteredOnDisk(editor)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "editor:SetFocus()",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "editor:SetSTCFocus(true)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "IsFileAlteredOnDisk(editor)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "UpdateStatusText(editor)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function UpdateStatusText(editor)\r\n    local texts = { \"\", \"\", \"\" }\r\n    if frame and editor then\r\n        local pos  = editor:GetCurrentPos()\r\n        local line = editor:LineFromPosition(pos)\r\n        local col  = 1 + pos - editor:PositionFromLine(line)\r\n\r\n        texts = { iff(editor:GetOvertype(), \"OVR\", \"INS\"),\r\n                  iff(editor:GetReadOnly(), \"R/O\", \"R/W\"),\r\n                  \"Ln \"..tostring(line + 1)..\" Col \"..tostring(col) }\r\n    end\r\n\r\n    if frame then\r\n        for n = 1, 3 do\r\n            if (texts[n] ~= statusTextTable[n]) then\r\n                frame:SetStatusText(texts[n], n)\r\n                statusTextTable[n] = texts[n]\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local texts = { \"\", \"\", \"\" }",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if frame and editor then\r\n        local pos  = editor:GetCurrentPos()\r\n        local line = editor:LineFromPosition(pos)\r\n        local col  = 1 + pos - editor:PositionFromLine(line)\r\n\r\n        texts = { iff(editor:GetOvertype(), \"OVR\", \"INS\"),\r\n                  iff(editor:GetReadOnly(), \"R/O\", \"R/W\"),\r\n                  \"Ln \"..tostring(line + 1)..\" Col \"..tostring(col) }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local pos  = editor:GetCurrentPos()",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local line = editor:LineFromPosition(pos)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local col  = 1 + pos - editor:PositionFromLine(line)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "texts = { iff(editor:GetOvertype(), \"OVR\", \"INS\"),\r\n                  iff(editor:GetReadOnly(), \"R/O\", \"R/W\"),\r\n                  \"Ln \"..tostring(line + 1)..\" Col \"..tostring(col) }",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if frame then\r\n        for n = 1, 3 do\r\n            if (texts[n] ~= statusTextTable[n]) then\r\n                frame:SetStatusText(texts[n], n)\r\n                statusTextTable[n] = texts[n]\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "for n = 1, 3 do\r\n            if (texts[n] ~= statusTextTable[n]) then\r\n                frame:SetStatusText(texts[n], n)\r\n                statusTextTable[n] = texts[n]\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 80,
    "text": "if (texts[n] ~= statusTextTable[n]) then\r\n                frame:SetStatusText(texts[n], n)\r\n                statusTextTable[n] = texts[n]\r\n            end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "frame:SetStatusText(texts[n], n)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "statusTextTable[n] = texts[n]",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function GetFileModTime(filePath)\r\n    if filePath and (string.len(filePath) > 0) then\r\n        local fn = wx.wxFileName(filePath)\r\n        if fn:FileExists() then\r\n            return fn:GetModificationTime()\r\n        end\r\n    end\r\n\r\n    return nil\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "if filePath and (string.len(filePath) > 0) then\r\n        local fn = wx.wxFileName(filePath)\r\n        if fn:FileExists() then\r\n            return fn:GetModificationTime()\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "local fn = wx.wxFileName(filePath)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "if fn:FileExists() then\r\n            return fn:GetModificationTime()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function IsFileAlteredOnDisk(editor)\r\n    if not editor then return end\r\n\r\n    local id = editor:GetId()\r\n    if openDocuments[id] then\r\n        local filePath   = openDocuments[id].filePath\r\n        local fileName   = openDocuments[id].fileName\r\n        local oldModTime = openDocuments[id].modTime\r\n\r\n        if filePath and (string.len(filePath) > 0) and oldModTime and oldModTime:IsValid() then\r\n            local modTime = GetFileModTime(filePath)\r\n            if modTime == nil then\r\n                openDocuments[id].modTime = nil\r\n                wx.wxMessageBox(fileName..\" is no longer on the disk.\",\r\n                                \"wxLua Message\",\r\n                                wx.wxOK + wx.wxCENTRE, frame)\r\n            elseif modTime:IsValid() and oldModTime:IsEarlierThan(modTime) then\r\n                local ret = wx.wxMessageBox(fileName..\" has been modified on disk.\\nDo you want to reload it?\",\r\n                                            \"wxLua Message\",\r\n                                            wx.wxYES_NO + wx.wxCENTRE, frame)\r\n                if ret ~= wx.wxYES or LoadFile(filePath, editor, true) then\r\n                    openDocuments[id].modTime = nil\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "if not editor then return end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "local id = editor:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if openDocuments[id] then\r\n        local filePath   = openDocuments[id].filePath\r\n        local fileName   = openDocuments[id].fileName\r\n        local oldModTime = openDocuments[id].modTime\r\n\r\n        if filePath and (string.len(filePath) > 0) and oldModTime and oldModTime:IsValid() then\r\n            local modTime = GetFileModTime(filePath)\r\n            if modTime == nil then\r\n                openDocuments[id].modTime = nil\r\n                wx.wxMessageBox(fileName..\" is no longer on the disk.\",\r\n                                \"wxLua Message\",\r\n                                wx.wxOK + wx.wxCENTRE, frame)\r\n            elseif modTime:IsValid() and oldModTime:IsEarlierThan(modTime) then\r\n                local ret = wx.wxMessageBox(fileName..\" has been modified on disk.\\nDo you want to reload it?\",\r\n                                            \"wxLua Message\",\r\n                                            wx.wxYES_NO + wx.wxCENTRE, frame)\r\n                if ret ~= wx.wxYES or LoadFile(filePath, editor, true) then\r\n                    openDocuments[id].modTime = nil\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "local filePath   = openDocuments[id].filePath",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local fileName   = openDocuments[id].fileName",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local oldModTime = openDocuments[id].modTime",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if filePath and (string.len(filePath) > 0) and oldModTime and oldModTime:IsValid() then\r\n            local modTime = GetFileModTime(filePath)\r\n            if modTime == nil then\r\n                openDocuments[id].modTime = nil\r\n                wx.wxMessageBox(fileName..\" is no longer on the disk.\",\r\n                                \"wxLua Message\",\r\n                                wx.wxOK + wx.wxCENTRE, frame)\r\n            elseif modTime:IsValid() and oldModTime:IsEarlierThan(modTime) then\r\n                local ret = wx.wxMessageBox(fileName..\" has been modified on disk.\\nDo you want to reload it?\",\r\n                                            \"wxLua Message\",\r\n                                            wx.wxYES_NO + wx.wxCENTRE, frame)\r\n                if ret ~= wx.wxYES or LoadFile(filePath, editor, true) then\r\n                    openDocuments[id].modTime = nil\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "local modTime = GetFileModTime(filePath)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if modTime == nil then\r\n                openDocuments[id].modTime = nil\r\n                wx.wxMessageBox(fileName..\" is no longer on the disk.\",\r\n                                \"wxLua Message\",\r\n                                wx.wxOK + wx.wxCENTRE, frame)\r\n            elseif modTime:IsValid() and oldModTime:IsEarlierThan(modTime) then\r\n                local ret = wx.wxMessageBox(fileName..\" has been modified on disk.\\nDo you want to reload it?\",\r\n                                            \"wxLua Message\",\r\n                                            wx.wxYES_NO + wx.wxCENTRE, frame)\r\n                if ret ~= wx.wxYES or LoadFile(filePath, editor, true) then\r\n                    openDocuments[id].modTime = nil\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "openDocuments[id].modTime = nil",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "wx.wxMessageBox(fileName..\" is no longer on the disk.\",\r\n                                \"wxLua Message\",\r\n                                wx.wxOK + wx.wxCENTRE, frame)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local ret = wx.wxMessageBox(fileName..\" has been modified on disk.\\nDo you want to reload it?\",\r\n                                            \"wxLua Message\",\r\n                                            wx.wxYES_NO + wx.wxCENTRE, frame)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if ret ~= wx.wxYES or LoadFile(filePath, editor, true) then\r\n                    openDocuments[id].modTime = nil\r\n                end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function SetDocumentModified(id, modified)\r\n    local pageText = openDocuments[id].fileName or \"untitled.lua\"\r\n\r\n    if modified then\r\n        pageText = \"* \"..pageText\r\n    end\r\n\r\n    openDocuments[id].isModified = modified\r\n    notebook:SetPageText(openDocuments[id].index, pageText)\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local pageText = openDocuments[id].fileName or \"untitled.lua\"",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if modified then\r\n        pageText = \"* \"..pageText\r\n    end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "pageText = \"* \"..pageText",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "openDocuments[id].isModified = modified",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "notebook:SetPageText(openDocuments[id].index, pageText)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function CreateEditor(name)\r\n    local editor = wxstc.wxStyledTextCtrl(notebook, editorID,\r\n                                          wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                          wx.wxSUNKEN_BORDER)\r\n\r\n    editorID = editorID + 1 -- increment so they're always unique\r\n\r\n    editor:SetBufferedDraw(true)\r\n    editor:StyleClearAll()\r\n\r\n    editor:SetFont(font)\r\n    editor:StyleSetFont(wxstc.wxSTC_STYLE_DEFAULT, font)\r\n    for i = 0, 32 do\r\n        editor:StyleSetFont(i, font)\r\n    end\r\n\r\n    editor:StyleSetForeground(0,  wx.wxColour(128, 128, 128)) -- White space\r\n    editor:StyleSetForeground(1,  wx.wxColour(0,   127, 0))   -- Block Comment\r\n    editor:StyleSetFont(1, fontItalic)\r\n    --editor:StyleSetUnderline(1, false)\r\n    editor:StyleSetForeground(2,  wx.wxColour(0,   127, 0))   -- Line Comment\r\n    editor:StyleSetFont(2, fontItalic)                        -- Doc. Comment\r\n    --editor:StyleSetUnderline(2, false)\r\n    editor:StyleSetForeground(3,  wx.wxColour(127, 127, 127)) -- Number\r\n    editor:StyleSetForeground(4,  wx.wxColour(0,   127, 127)) -- Keyword\r\n    editor:StyleSetForeground(5,  wx.wxColour(0,   0,   127)) -- Double quoted string\r\n    editor:StyleSetBold(5,  true)\r\n    --editor:StyleSetUnderline(5, false)\r\n    editor:StyleSetForeground(6,  wx.wxColour(127, 0,   127)) -- Single quoted string\r\n    editor:StyleSetForeground(7,  wx.wxColour(127, 0,   127)) -- not used\r\n    editor:StyleSetForeground(8,  wx.wxColour(0,   127, 127)) -- Literal strings\r\n    editor:StyleSetForeground(9,  wx.wxColour(127, 127, 0))  -- Preprocessor\r\n    editor:StyleSetForeground(10, wx.wxColour(0,   0,   0))   -- Operators\r\n    --editor:StyleSetBold(10, true)\r\n    editor:StyleSetForeground(11, wx.wxColour(0,   0,   0))   -- Identifiers\r\n    editor:StyleSetForeground(12, wx.wxColour(0,   0,   0))   -- Unterminated strings\r\n    editor:StyleSetBackground(12, wx.wxColour(224, 192, 224))\r\n    editor:StyleSetBold(12, true)\r\n    editor:StyleSetEOLFilled(12, true)\r\n\r\n    editor:StyleSetForeground(13, wx.wxColour(0,   0,  95))   -- Keyword 2 highlighting styles\r\n    editor:StyleSetForeground(14, wx.wxColour(0,   95, 0))    -- Keyword 3\r\n    editor:StyleSetForeground(15, wx.wxColour(127, 0,  0))    -- Keyword 4\r\n    editor:StyleSetForeground(16, wx.wxColour(127, 0,  95))   -- Keyword 5\r\n    editor:StyleSetForeground(17, wx.wxColour(35,  95, 175))  -- Keyword 6\r\n    editor:StyleSetForeground(18, wx.wxColour(0,   127, 127)) -- Keyword 7\r\n    editor:StyleSetBackground(18, wx.wxColour(240, 255, 255)) -- Keyword 8\r\n\r\n    editor:StyleSetForeground(19, wx.wxColour(0,   127, 127))\r\n    editor:StyleSetBackground(19, wx.wxColour(224, 255, 255))\r\n    editor:StyleSetForeground(20, wx.wxColour(0,   127, 127))\r\n    editor:StyleSetBackground(20, wx.wxColour(192, 255, 255))\r\n    editor:StyleSetForeground(21, wx.wxColour(0,   127, 127))\r\n    editor:StyleSetBackground(21, wx.wxColour(176, 255, 255))\r\n    editor:StyleSetForeground(22, wx.wxColour(0,   127, 127))\r\n    editor:StyleSetBackground(22, wx.wxColour(160, 255, 255))\r\n    editor:StyleSetForeground(23, wx.wxColour(0,   127, 127))\r\n    editor:StyleSetBackground(23, wx.wxColour(144, 255, 255))\r\n    editor:StyleSetForeground(24, wx.wxColour(0,   127, 127))\r\n    editor:StyleSetBackground(24, wx.wxColour(128, 155, 255))\r\n\r\n    editor:StyleSetForeground(32, wx.wxColour(224, 192, 224))  -- Line number\r\n    editor:StyleSetBackground(33, wx.wxColour(192, 192, 192))  -- Brace highlight\r\n    editor:StyleSetForeground(34, wx.wxColour(0,   0,   255))\r\n    editor:StyleSetBold(34, true)                              -- Brace incomplete highlight\r\n    editor:StyleSetForeground(35, wx.wxColour(255, 0,   0))\r\n    editor:StyleSetBold(35, true)                              -- Indentation guides\r\n    editor:StyleSetForeground(37, wx.wxColour(192, 192, 192))\r\n    editor:StyleSetBackground(37, wx.wxColour(255, 255, 255))\r\n\r\n    editor:SetUseTabs(false)\r\n    editor:SetTabWidth(4)\r\n    editor:SetIndent(4)\r\n    editor:SetIndentationGuides(true)\r\n\r\n    editor:SetVisiblePolicy(wxstc.wxSTC_VISIBLE_SLOP, 3)\r\n    --editor:SetXCaretPolicy(wxstc.wxSTC_CARET_SLOP, 10)\r\n    --editor:SetYCaretPolicy(wxstc.wxSTC_CARET_SLOP, 3)\r\n\r\n    editor:SetMarginWidth(0, editor:TextWidth(32, \"99999_\")) -- line # margin\r\n\r\n    editor:SetMarginWidth(1, 16) -- marker margin\r\n    editor:SetMarginType(1, wxstc.wxSTC_MARGIN_SYMBOL)\r\n    editor:SetMarginSensitive(1, true)\r\n\r\n    editor:MarkerDefine(BREAKPOINT_MARKER,   wxstc.wxSTC_MARK_ROUNDRECT, wx.wxWHITE, wx.wxRED)\r\n    editor:MarkerDefine(CURRENT_LINE_MARKER, wxstc.wxSTC_MARK_ARROW,     wx.wxBLACK, wx.wxGREEN)\r\n\r\n    editor:SetMarginWidth(2, 16) -- fold margin\r\n    editor:SetMarginType(2, wxstc.wxSTC_MARGIN_SYMBOL)\r\n    editor:SetMarginMask(2, wxstc.wxSTC_MASK_FOLDERS)\r\n    editor:SetMarginSensitive(2, true)\r\n\r\n    editor:SetFoldFlags(wxstc.wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED +\r\n                        wxstc.wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED)\r\n\r\n    editor:SetProperty(\"fold\", \"1\")\r\n    editor:SetProperty(\"fold.compact\", \"1\")\r\n    editor:SetProperty(\"fold.comment\", \"1\")\r\n\r\n    local grey = wx.wxColour(128, 128, 128)\r\n    editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDEROPEN,    wxstc.wxSTC_MARK_BOXMINUS, wx.wxWHITE, grey)\r\n    editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDER,        wxstc.wxSTC_MARK_BOXPLUS,  wx.wxWHITE, grey)\r\n    editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDERSUB,     wxstc.wxSTC_MARK_VLINE,    wx.wxWHITE, grey)\r\n    editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDERTAIL,    wxstc.wxSTC_MARK_LCORNER,  wx.wxWHITE, grey)\r\n    editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDEREND,     wxstc.wxSTC_MARK_BOXPLUSCONNECTED,  wx.wxWHITE, grey)\r\n    editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDEROPENMID, wxstc.wxSTC_MARK_BOXMINUSCONNECTED, wx.wxWHITE, grey)\r\n    editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDERMIDTAIL, wxstc.wxSTC_MARK_TCORNER,  wx.wxWHITE, grey)\r\n    grey:delete()\r\n\r\n    editor:Connect(wxstc.wxEVT_STC_MARGINCLICK,\r\n            function (event)\r\n                local line = editor:LineFromPosition(event:GetPosition())\r\n                local margin = event:GetMargin()\r\n                if margin == 1 then\r\n                    ToggleDebugMarker(editor, line)\r\n                elseif margin == 2 then\r\n                    if wx.wxGetKeyState(wx.WXK_SHIFT) and wx.wxGetKeyState(wx.WXK_CONTROL) then\r\n                        FoldSome()\r\n                    else\r\n                        local level = editor:GetFoldLevel(line)\r\n                        if HasBit(level, wxstc.wxSTC_FOLDLEVELHEADERFLAG) then\r\n                            editor:ToggleFold(line)\r\n                        end\r\n                    end\r\n                end\r\n            end)\r\n\r\n    editor:Connect(wxstc.wxEVT_STC_CHARADDED,\r\n            function (event)\r\n                -- auto-indent\r\n                local ch = event:GetKey()\r\n                if (ch == char_CR) or (ch == char_LF) then\r\n                    local pos = editor:GetCurrentPos()\r\n                    local line = editor:LineFromPosition(pos)\r\n\r\n                    if (line > 0) and (editor:LineLength(line) == 0) then\r\n                        local indent = editor:GetLineIndentation(line - 1)\r\n                        if indent > 0 then\r\n                            editor:SetLineIndentation(line, indent)\r\n                            editor:GotoPos(pos + indent)\r\n                        end\r\n                    end\r\n                elseif autoCompleteEnable then -- code completion prompt\r\n                    local pos = editor:GetCurrentPos()\r\n                    local start_pos = editor:WordStartPosition(pos, true)\r\n                    -- must have \"wx.X\" otherwise too many items\r\n                    if (pos - start_pos > 0) and (start_pos > 2) then\r\n                        local range = editor:GetTextRange(start_pos-3, start_pos)\r\n                        if range == \"wx.\" then\r\n                            local commandEvent = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                                                                   ID_AUTOCOMPLETE)\r\n                            wx.wxPostEvent(frame, commandEvent)\r\n                        end\r\n                    end\r\n                end\r\n            end)\r\n\r\n    editor:Connect(wxstc.wxEVT_STC_USERLISTSELECTION,\r\n            function (event)\r\n                local pos = editor:GetCurrentPos()\r\n                local start_pos = editor:WordStartPosition(pos, true)\r\n                editor:SetSelection(start_pos, pos)\r\n                editor:ReplaceSelection(event:GetText())\r\n            end)\r\n\r\n    editor:Connect(wxstc.wxEVT_STC_SAVEPOINTREACHED,\r\n            function (event)\r\n                SetDocumentModified(editor:GetId(), false)\r\n            end)\r\n\r\n    editor:Connect(wxstc.wxEVT_STC_SAVEPOINTLEFT,\r\n            function (event)\r\n                SetDocumentModified(editor:GetId(), true)\r\n            end)\r\n\r\n    editor:Connect(wxstc.wxEVT_STC_UPDATEUI,\r\n            function (event)\r\n                UpdateStatusText(editor)\r\n            end)\r\n\r\n    editor:Connect(wx.wxEVT_SET_FOCUS,\r\n            function (event)\r\n                event:Skip()\r\n                if in_evt_focus or exitingProgram then return end\r\n                in_evt_focus = true\r\n                IsFileAlteredOnDisk(editor)\r\n                in_evt_focus = false\r\n            end)\r\n\r\n    if notebook:AddPage(editor, name, true) then\r\n        local id            = editor:GetId()\r\n        local document      = {}\r\n        document.editor     = editor\r\n        document.index      = notebook:GetSelection()\r\n        document.fileName   = nil\r\n        document.filePath   = nil\r\n        document.modTime    = nil\r\n        document.isModified = false\r\n        openDocuments[id]   = document\r\n    end\r\n\r\n    return editor\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "local editor = wxstc.wxStyledTextCtrl(notebook, editorID,\r\n                                          wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                          wx.wxSUNKEN_BORDER)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "editorID = editorID + 1",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "editor:SetBufferedDraw(true)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "editor:StyleClearAll()",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "editor:SetFont(font)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "editor:StyleSetFont(wxstc.wxSTC_STYLE_DEFAULT, font)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "for i = 0, 32 do\r\n        editor:StyleSetFont(i, font)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 119,
    "text": "editor:StyleSetFont(i, font)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "editor:StyleSetForeground(0,  wx.wxColour(128, 128, 128))",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "editor:StyleSetForeground(1,  wx.wxColour(0,   127, 0))",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "editor:StyleSetFont(1, fontItalic)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "editor:StyleSetForeground(2,  wx.wxColour(0,   127, 0))",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "editor:StyleSetFont(2, fontItalic)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "editor:StyleSetForeground(3,  wx.wxColour(127, 127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "editor:StyleSetForeground(4,  wx.wxColour(0,   127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "editor:StyleSetForeground(5,  wx.wxColour(0,   0,   127))",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "editor:StyleSetBold(5,  true)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "editor:StyleSetForeground(6,  wx.wxColour(127, 0,   127))",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "editor:StyleSetForeground(7,  wx.wxColour(127, 0,   127))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "editor:StyleSetForeground(8,  wx.wxColour(0,   127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "editor:StyleSetForeground(9,  wx.wxColour(127, 127, 0))",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "editor:StyleSetForeground(10, wx.wxColour(0,   0,   0))",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "editor:StyleSetForeground(11, wx.wxColour(0,   0,   0))",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "editor:StyleSetForeground(12, wx.wxColour(0,   0,   0))",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "editor:StyleSetBackground(12, wx.wxColour(224, 192, 224))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "editor:StyleSetBold(12, true)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "editor:StyleSetEOLFilled(12, true)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "editor:StyleSetForeground(13, wx.wxColour(0,   0,  95))",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "editor:StyleSetForeground(14, wx.wxColour(0,   95, 0))",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "editor:StyleSetForeground(15, wx.wxColour(127, 0,  0))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "editor:StyleSetForeground(16, wx.wxColour(127, 0,  95))",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "editor:StyleSetForeground(17, wx.wxColour(35,  95, 175))",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "editor:StyleSetForeground(18, wx.wxColour(0,   127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "editor:StyleSetBackground(18, wx.wxColour(240, 255, 255))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "editor:StyleSetForeground(19, wx.wxColour(0,   127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "editor:StyleSetBackground(19, wx.wxColour(224, 255, 255))",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "editor:StyleSetForeground(20, wx.wxColour(0,   127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "editor:StyleSetBackground(20, wx.wxColour(192, 255, 255))",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "editor:StyleSetForeground(21, wx.wxColour(0,   127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "editor:StyleSetBackground(21, wx.wxColour(176, 255, 255))",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "editor:StyleSetForeground(22, wx.wxColour(0,   127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "editor:StyleSetBackground(22, wx.wxColour(160, 255, 255))",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "editor:StyleSetForeground(23, wx.wxColour(0,   127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "editor:StyleSetBackground(23, wx.wxColour(144, 255, 255))",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "editor:StyleSetForeground(24, wx.wxColour(0,   127, 127))",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "editor:StyleSetBackground(24, wx.wxColour(128, 155, 255))",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "editor:StyleSetForeground(32, wx.wxColour(224, 192, 224))",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "editor:StyleSetBackground(33, wx.wxColour(192, 192, 192))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "editor:StyleSetForeground(34, wx.wxColour(0,   0,   255))",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "editor:StyleSetBold(34, true)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "editor:StyleSetForeground(35, wx.wxColour(255, 0,   0))",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "editor:StyleSetBold(35, true)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "editor:StyleSetForeground(37, wx.wxColour(192, 192, 192))",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "editor:StyleSetBackground(37, wx.wxColour(255, 255, 255))",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "editor:SetUseTabs(false)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "editor:SetTabWidth(4)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "editor:SetIndent(4)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "editor:SetIndentationGuides(true)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "editor:SetVisiblePolicy(wxstc.wxSTC_VISIBLE_SLOP, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "editor:SetMarginWidth(0, editor:TextWidth(32, \"99999_\"))",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "editor:SetMarginWidth(1, 16)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "editor:SetMarginType(1, wxstc.wxSTC_MARGIN_SYMBOL)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "editor:SetMarginSensitive(1, true)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "editor:MarkerDefine(BREAKPOINT_MARKER,   wxstc.wxSTC_MARK_ROUNDRECT, wx.wxWHITE, wx.wxRED)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "editor:MarkerDefine(CURRENT_LINE_MARKER, wxstc.wxSTC_MARK_ARROW,     wx.wxBLACK, wx.wxGREEN)",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "editor:SetMarginWidth(2, 16)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "editor:SetMarginType(2, wxstc.wxSTC_MARGIN_SYMBOL)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "editor:SetMarginMask(2, wxstc.wxSTC_MASK_FOLDERS)",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "editor:SetMarginSensitive(2, true)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "editor:SetFoldFlags(wxstc.wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED +\r\n                        wxstc.wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "editor:SetProperty(\"fold\", \"1\")",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "editor:SetProperty(\"fold.compact\", \"1\")",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "editor:SetProperty(\"fold.comment\", \"1\")",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "local grey = wx.wxColour(128, 128, 128)",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDEROPEN,    wxstc.wxSTC_MARK_BOXMINUS, wx.wxWHITE, grey)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDER,        wxstc.wxSTC_MARK_BOXPLUS,  wx.wxWHITE, grey)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDERSUB,     wxstc.wxSTC_MARK_VLINE,    wx.wxWHITE, grey)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDERTAIL,    wxstc.wxSTC_MARK_LCORNER,  wx.wxWHITE, grey)",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDEREND,     wxstc.wxSTC_MARK_BOXPLUSCONNECTED,  wx.wxWHITE, grey)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDEROPENMID, wxstc.wxSTC_MARK_BOXMINUSCONNECTED, wx.wxWHITE, grey)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "editor:MarkerDefine(wxstc.wxSTC_MARKNUM_FOLDERMIDTAIL, wxstc.wxSTC_MARK_TCORNER,  wx.wxWHITE, grey)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "grey:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "editor:Connect(wxstc.wxEVT_STC_MARGINCLICK,\r\n            function (event)\r\n                local line = editor:LineFromPosition(event:GetPosition())\r\n                local margin = event:GetMargin()\r\n                if margin == 1 then\r\n                    ToggleDebugMarker(editor, line)\r\n                elseif margin == 2 then\r\n                    if wx.wxGetKeyState(wx.WXK_SHIFT) and wx.wxGetKeyState(wx.WXK_CONTROL) then\r\n                        FoldSome()\r\n                    else\r\n                        local level = editor:GetFoldLevel(line)\r\n                        if HasBit(level, wxstc.wxSTC_FOLDLEVELHEADERFLAG) then\r\n                            editor:ToggleFold(line)\r\n                        end\r\n                    end\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "local line = editor:LineFromPosition(event:GetPosition())",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "local margin = event:GetMargin()",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "if margin == 1 then\r\n                    ToggleDebugMarker(editor, line)\r\n                elseif margin == 2 then\r\n                    if wx.wxGetKeyState(wx.WXK_SHIFT) and wx.wxGetKeyState(wx.WXK_CONTROL) then\r\n                        FoldSome()\r\n                    else\r\n                        local level = editor:GetFoldLevel(line)\r\n                        if HasBit(level, wxstc.wxSTC_FOLDLEVELHEADERFLAG) then\r\n                            editor:ToggleFold(line)\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "ToggleDebugMarker(editor, line)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "if wx.wxGetKeyState(wx.WXK_SHIFT) and wx.wxGetKeyState(wx.WXK_CONTROL) then\r\n                        FoldSome()\r\n                    else\r\n                        local level = editor:GetFoldLevel(line)\r\n                        if HasBit(level, wxstc.wxSTC_FOLDLEVELHEADERFLAG) then\r\n                            editor:ToggleFold(line)\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "FoldSome()",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "local level = editor:GetFoldLevel(line)",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "if HasBit(level, wxstc.wxSTC_FOLDLEVELHEADERFLAG) then\r\n                            editor:ToggleFold(line)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "editor:ToggleFold(line)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "editor:Connect(wxstc.wxEVT_STC_CHARADDED,\r\n            function (event)\r\n                -- auto-indent\r\n                local ch = event:GetKey()\r\n                if (ch == char_CR) or (ch == char_LF) then\r\n                    local pos = editor:GetCurrentPos()\r\n                    local line = editor:LineFromPosition(pos)\r\n\r\n                    if (line > 0) and (editor:LineLength(line) == 0) then\r\n                        local indent = editor:GetLineIndentation(line - 1)\r\n                        if indent > 0 then\r\n                            editor:SetLineIndentation(line, indent)\r\n                            editor:GotoPos(pos + indent)\r\n                        end\r\n                    end\r\n                elseif autoCompleteEnable then -- code completion prompt\r\n                    local pos = editor:GetCurrentPos()\r\n                    local start_pos = editor:WordStartPosition(pos, true)\r\n                    -- must have \"wx.X\" otherwise too many items\r\n                    if (pos - start_pos > 0) and (start_pos > 2) then\r\n                        local range = editor:GetTextRange(start_pos-3, start_pos)\r\n                        if range == \"wx.\" then\r\n                            local commandEvent = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                                                                   ID_AUTOCOMPLETE)\r\n                            wx.wxPostEvent(frame, commandEvent)\r\n                        end\r\n                    end\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "local ch = event:GetKey()",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "if (ch == char_CR) or (ch == char_LF) then\r\n                    local pos = editor:GetCurrentPos()\r\n                    local line = editor:LineFromPosition(pos)\r\n\r\n                    if (line > 0) and (editor:LineLength(line) == 0) then\r\n                        local indent = editor:GetLineIndentation(line - 1)\r\n                        if indent > 0 then\r\n                            editor:SetLineIndentation(line, indent)\r\n                            editor:GotoPos(pos + indent)\r\n                        end\r\n                    end\r\n                elseif autoCompleteEnable then -- code completion prompt\r\n                    local pos = editor:GetCurrentPos()\r\n                    local start_pos = editor:WordStartPosition(pos, true)\r\n                    -- must have \"wx.X\" otherwise too many items\r\n                    if (pos - start_pos > 0) and (start_pos > 2) then\r\n                        local range = editor:GetTextRange(start_pos-3, start_pos)\r\n                        if range == \"wx.\" then\r\n                            local commandEvent = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                                                                   ID_AUTOCOMPLETE)\r\n                            wx.wxPostEvent(frame, commandEvent)\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "local pos = editor:GetCurrentPos()",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "if (line > 0) and (editor:LineLength(line) == 0) then\r\n                        local indent = editor:GetLineIndentation(line - 1)\r\n                        if indent > 0 then\r\n                            editor:SetLineIndentation(line, indent)\r\n                            editor:GotoPos(pos + indent)\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "local indent = editor:GetLineIndentation(line - 1)",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "if indent > 0 then\r\n                            editor:SetLineIndentation(line, indent)\r\n                            editor:GotoPos(pos + indent)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "editor:SetLineIndentation(line, indent)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "editor:GotoPos(pos + indent)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "local start_pos = editor:WordStartPosition(pos, true)",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "if (pos - start_pos > 0) and (start_pos > 2) then\r\n                        local range = editor:GetTextRange(start_pos-3, start_pos)\r\n                        if range == \"wx.\" then\r\n                            local commandEvent = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                                                                   ID_AUTOCOMPLETE)\r\n                            wx.wxPostEvent(frame, commandEvent)\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "local range = editor:GetTextRange(start_pos-3, start_pos)",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "if range == \"wx.\" then\r\n                            local commandEvent = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                                                                   ID_AUTOCOMPLETE)\r\n                            wx.wxPostEvent(frame, commandEvent)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "local commandEvent = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                                                                   ID_AUTOCOMPLETE)",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "wx.wxPostEvent(frame, commandEvent)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "editor:Connect(wxstc.wxEVT_STC_USERLISTSELECTION,\r\n            function (event)\r\n                local pos = editor:GetCurrentPos()\r\n                local start_pos = editor:WordStartPosition(pos, true)\r\n                editor:SetSelection(start_pos, pos)\r\n                editor:ReplaceSelection(event:GetText())\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "editor:SetSelection(start_pos, pos)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "editor:ReplaceSelection(event:GetText())",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "editor:Connect(wxstc.wxEVT_STC_SAVEPOINTREACHED,\r\n            function (event)\r\n                SetDocumentModified(editor:GetId(), false)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "SetDocumentModified(editor:GetId(), false)",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "editor:Connect(wxstc.wxEVT_STC_SAVEPOINTLEFT,\r\n            function (event)\r\n                SetDocumentModified(editor:GetId(), true)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "SetDocumentModified(editor:GetId(), true)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "editor:Connect(wxstc.wxEVT_STC_UPDATEUI,\r\n            function (event)\r\n                UpdateStatusText(editor)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "editor:Connect(wx.wxEVT_SET_FOCUS,\r\n            function (event)\r\n                event:Skip()\r\n                if in_evt_focus or exitingProgram then return end\r\n                in_evt_focus = true\r\n                IsFileAlteredOnDisk(editor)\r\n                in_evt_focus = false\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "event:Skip()",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "if in_evt_focus or exitingProgram then return end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "in_evt_focus = true",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "in_evt_focus = false",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "if notebook:AddPage(editor, name, true) then\r\n        local id            = editor:GetId()\r\n        local document      = {}\r\n        document.editor     = editor\r\n        document.index      = notebook:GetSelection()\r\n        document.fileName   = nil\r\n        document.filePath   = nil\r\n        document.modTime    = nil\r\n        document.isModified = false\r\n        openDocuments[id]   = document\r\n    end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "local id            = editor:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "local document      = {}",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "document.editor     = editor",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "document.index      = notebook:GetSelection()",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "document.fileName   = nil",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "document.filePath   = nil",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "document.modTime    = nil",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "document.isModified = false",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "openDocuments[id]   = document",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function IsLuaFile(filePath)\r\n    return filePath and (string.len(filePath) > 4) and\r\n           (string.lower(string.sub(filePath, -4)) == \".lua\")\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function SetupKeywords(editor, useLuaParser)\r\n    if useLuaParser then\r\n        editor:SetLexer(wxstc.wxSTC_LEX_LUA)\r\n\r\n        -- Note: these keywords are shamelessly ripped from scite 1.68\r\n        editor:SetKeyWords(0,\r\n            [[and break do else elseif end false for function if\r\n            in local nil not or repeat return then true until while]])\r\n        editor:SetKeyWords(1,\r\n            [[_VERSION assert collectgarbage dofile error gcinfo loadfile loadstring\r\n            print rawget rawset require tonumber tostring type unpack]])\r\n        editor:SetKeyWords(2,\r\n            [[_G getfenv getmetatable ipairs loadlib next pairs pcall\r\n            rawequal setfenv setmetatable xpcall\r\n            string table math coroutine io os debug\r\n            load module select]])\r\n        editor:SetKeyWords(3,\r\n            [[string.byte string.char string.dump string.find string.len\r\n            string.lower string.rep string.sub string.upper string.format string.gfind string.gsub\r\n            table.concat table.foreach table.foreachi table.getn table.sort table.insert table.remove table.setn\r\n            math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp\r\n            math.floor math.frexp math.ldexp math.log math.log10 math.max math.min math.mod\r\n            math.pi math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan\r\n            string.gmatch string.match string.reverse table.maxn\r\n            math.cosh math.fmod math.modf math.sinh math.tanh math.huge]])\r\n        editor:SetKeyWords(4,\r\n            [[coroutine.create coroutine.resume coroutine.status\r\n            coroutine.wrap coroutine.yield\r\n            io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type io.write\r\n            io.stdin io.stdout io.stderr\r\n            os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename\r\n            os.setlocale os.time os.tmpname\r\n            coroutine.running package.cpath package.loaded package.loadlib package.path\r\n            package.preload package.seeall io.popen\r\n            debug.debug debug.getfenv debug.gethook debug.getinfo debug.getlocal\r\n            debug.getmetatable debug.getregistry debug.getupvalue debug.setfenv\r\n            debug.sethook debug.setlocal debug.setmetatable debug.setupvalue debug.traceback]])\r\n\r\n        -- Get the items in the global \"wx\" table for autocompletion\r\n        if not wxkeywords then\r\n            local keyword_table = {}\r\n            for index, value in pairs(wx) do\r\n                table.insert(keyword_table, \"wx.\"..index..\" \")\r\n            end\r\n\r\n            table.sort(keyword_table)\r\n            wxkeywords = table.concat(keyword_table)\r\n        end\r\n\r\n        editor:SetKeyWords(5, wxkeywords)\r\n    else\r\n        editor:SetLexer(wxstc.wxSTC_LEX_NULL)\r\n        editor:SetKeyWords(0, \"\")\r\n    end\r\n\r\n    editor:Colourise(0, -1)\r\nend",
    "type": "function"
  }, {
    "id": 246,
    "text": "if useLuaParser then\r\n        editor:SetLexer(wxstc.wxSTC_LEX_LUA)\r\n\r\n        -- Note: these keywords are shamelessly ripped from scite 1.68\r\n        editor:SetKeyWords(0,\r\n            [[and break do else elseif end false for function if\r\n            in local nil not or repeat return then true until while]])\r\n        editor:SetKeyWords(1,\r\n            [[_VERSION assert collectgarbage dofile error gcinfo loadfile loadstring\r\n            print rawget rawset require tonumber tostring type unpack]])\r\n        editor:SetKeyWords(2,\r\n            [[_G getfenv getmetatable ipairs loadlib next pairs pcall\r\n            rawequal setfenv setmetatable xpcall\r\n            string table math coroutine io os debug\r\n            load module select]])\r\n        editor:SetKeyWords(3,\r\n            [[string.byte string.char string.dump string.find string.len\r\n            string.lower string.rep string.sub string.upper string.format string.gfind string.gsub\r\n            table.concat table.foreach table.foreachi table.getn table.sort table.insert table.remove table.setn\r\n            math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp\r\n            math.floor math.frexp math.ldexp math.log math.log10 math.max math.min math.mod\r\n            math.pi math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan\r\n            string.gmatch string.match string.reverse table.maxn\r\n            math.cosh math.fmod math.modf math.sinh math.tanh math.huge]])\r\n        editor:SetKeyWords(4,\r\n            [[coroutine.create coroutine.resume coroutine.status\r\n            coroutine.wrap coroutine.yield\r\n            io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type io.write\r\n            io.stdin io.stdout io.stderr\r\n            os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename\r\n            os.setlocale os.time os.tmpname\r\n            coroutine.running package.cpath package.loaded package.loadlib package.path\r\n            package.preload package.seeall io.popen\r\n            debug.debug debug.getfenv debug.gethook debug.getinfo debug.getlocal\r\n            debug.getmetatable debug.getregistry debug.getupvalue debug.setfenv\r\n            debug.sethook debug.setlocal debug.setmetatable debug.setupvalue debug.traceback]])\r\n\r\n        -- Get the items in the global \"wx\" table for autocompletion\r\n        if not wxkeywords then\r\n            local keyword_table = {}\r\n            for index, value in pairs(wx) do\r\n                table.insert(keyword_table, \"wx.\"..index..\" \")\r\n            end\r\n\r\n            table.sort(keyword_table)\r\n            wxkeywords = table.concat(keyword_table)\r\n        end\r\n\r\n        editor:SetKeyWords(5, wxkeywords)\r\n    else\r\n        editor:SetLexer(wxstc.wxSTC_LEX_NULL)\r\n        editor:SetKeyWords(0, \"\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "editor:SetLexer(wxstc.wxSTC_LEX_LUA)",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "editor:SetKeyWords(0,\r\n            [[and break do else elseif end false for function if\r\n            in local nil not or repeat return then true until while]])",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "editor:SetKeyWords(1,\r\n            [[_VERSION assert collectgarbage dofile error gcinfo loadfile loadstring\r\n            print rawget rawset require tonumber tostring type unpack]])",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "editor:SetKeyWords(2,\r\n            [[_G getfenv getmetatable ipairs loadlib next pairs pcall\r\n            rawequal setfenv setmetatable xpcall\r\n            string table math coroutine io os debug\r\n            load module select]])",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "editor:SetKeyWords(3,\r\n            [[string.byte string.char string.dump string.find string.len\r\n            string.lower string.rep string.sub string.upper string.format string.gfind string.gsub\r\n            table.concat table.foreach table.foreachi table.getn table.sort table.insert table.remove table.setn\r\n            math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp\r\n            math.floor math.frexp math.ldexp math.log math.log10 math.max math.min math.mod\r\n            math.pi math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan\r\n            string.gmatch string.match string.reverse table.maxn\r\n            math.cosh math.fmod math.modf math.sinh math.tanh math.huge]])",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "editor:SetKeyWords(4,\r\n            [[coroutine.create coroutine.resume coroutine.status\r\n            coroutine.wrap coroutine.yield\r\n            io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type io.write\r\n            io.stdin io.stdout io.stderr\r\n            os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename\r\n            os.setlocale os.time os.tmpname\r\n            coroutine.running package.cpath package.loaded package.loadlib package.path\r\n            package.preload package.seeall io.popen\r\n            debug.debug debug.getfenv debug.gethook debug.getinfo debug.getlocal\r\n            debug.getmetatable debug.getregistry debug.getupvalue debug.setfenv\r\n            debug.sethook debug.setlocal debug.setmetatable debug.setupvalue debug.traceback]])",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "if not wxkeywords then\r\n            local keyword_table = {}\r\n            for index, value in pairs(wx) do\r\n                table.insert(keyword_table, \"wx.\"..index..\" \")\r\n            end\r\n\r\n            table.sort(keyword_table)\r\n            wxkeywords = table.concat(keyword_table)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 254,
    "text": "local keyword_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "for index, value in pairs(wx) do\r\n                table.insert(keyword_table, \"wx.\"..index..\" \")\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 256,
    "text": "table.insert(keyword_table, \"wx.\"..index..\" \")",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "table.sort(keyword_table)",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "wxkeywords = table.concat(keyword_table)",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "editor:SetKeyWords(5, wxkeywords)",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "editor:SetLexer(wxstc.wxSTC_LEX_NULL)",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "editor:SetKeyWords(0, \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "editor:Colourise(0, -1)",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 264,
    "text": "function CreateAutoCompList(key_) -- much faster than iterating the wx. table\r\n    local key = \"wx.\"..key_;\r\n    local a, b = string.find(wxkeywords, key, 1, 1)\r\n    local key_list = \"\"\r\n\r\n    while a do\r\n        local c, d = string.find(wxkeywords, \" \", b, 1)\r\n        key_list = key_list..string.sub(wxkeywords, a+3, c or -1)\r\n        a, b = string.find(wxkeywords, key, d, 1)\r\n    end\r\n\r\n    return key_list\r\nend",
    "type": "function"
  }, {
    "id": 265,
    "text": "local key = \"wx.\"..key_",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "local a, b = string.find(wxkeywords, key, 1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "local key_list = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "while a do\r\n        local c, d = string.find(wxkeywords, \" \", b, 1)\r\n        key_list = key_list..string.sub(wxkeywords, a+3, c or -1)\r\n        a, b = string.find(wxkeywords, key, d, 1)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 269,
    "text": "local c, d = string.find(wxkeywords, \" \", b, 1)",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "key_list = key_list..string.sub(wxkeywords, a+3, c or -1)",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "a, b = string.find(wxkeywords, key, d, 1)",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function ProcessWatches()\r\n    if watchListCtrl and debuggerServer then\r\n        for idx = 0, watchListCtrl:GetItemCount() - 1 do\r\n            local expression = watchListCtrl:GetItemText(idx)\r\n            debuggerServer:EvaluateExpr(idx, expression)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 274,
    "text": "if watchListCtrl and debuggerServer then\r\n        for idx = 0, watchListCtrl:GetItemCount() - 1 do\r\n            local expression = watchListCtrl:GetItemText(idx)\r\n            debuggerServer:EvaluateExpr(idx, expression)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 275,
    "text": "for idx = 0, watchListCtrl:GetItemCount() - 1 do\r\n            local expression = watchListCtrl:GetItemText(idx)\r\n            debuggerServer:EvaluateExpr(idx, expression)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 276,
    "text": "local expression = watchListCtrl:GetItemText(idx)",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "debuggerServer:EvaluateExpr(idx, expression)",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 279,
    "text": "function CloseWatchWindow()\r\n    if watchWindow then\r\n        watchListCtrl = nil\r\n        watchWindow:Destroy()\r\n        watchWindow = nil\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 280,
    "text": "if watchWindow then\r\n        watchListCtrl = nil\r\n        watchWindow:Destroy()\r\n        watchWindow = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "watchListCtrl = nil",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "watchWindow:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "watchWindow = nil",
    "type": "statement:assign"
  }, {
    "id": 284,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 285,
    "text": "function CreateWatchWindow()\r\n    local width = 180\r\n    watchWindow = wx.wxFrame(frame, wx.wxID_ANY, \"wxLua Watch Window\",\r\n                             wx.wxDefaultPosition, wx.wxSize(width, 160))\r\n\r\n    local watchMenu = wx.wxMenu{\r\n            { ID_ADDWATCH,      \"&Add Watch\"        },\r\n            { ID_EDITWATCH,     \"&Edit Watch\\tF2\"   },\r\n            { ID_REMOVEWATCH,   \"&Remove Watch\"     },\r\n            { ID_EVALUATEWATCH, \"Evaluate &Watches\" }}\r\n\r\n    local watchMenuBar = wx.wxMenuBar()\r\n    watchMenuBar:Append(watchMenu, \"&Watches\")\r\n    watchWindow:SetMenuBar(watchMenuBar)\r\n\r\n    watchListCtrl = wx.wxListCtrl(watchWindow, ID_WATCH_LISTCTRL,\r\n                                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                  wx.wxLC_REPORT + wx.wxLC_EDIT_LABELS)\r\n\r\n    local info = wx.wxListItem()\r\n    info:SetMask(wx.wxLIST_MASK_TEXT + wx.wxLIST_MASK_WIDTH)\r\n    info:SetText(\"Expression\")\r\n    info:SetWidth(width / 2)\r\n    watchListCtrl:InsertColumn(0, info)\r\n\r\n    info:SetText(\"Value\")\r\n    info:SetWidth(width / 2)\r\n    watchListCtrl:InsertColumn(1, info)\r\n\r\n    watchWindow:CentreOnParent()\r\n    ConfigRestoreFramePosition(watchWindow, \"WatchWindow\")\r\n    watchWindow:Show(true)\r\n\r\n    local function FindSelectedWatchItem()\r\n        local count = watchListCtrl:GetSelectedItemCount()\r\n        if count > 0 then\r\n            for idx = 0, watchListCtrl:GetItemCount() - 1 do\r\n                if watchListCtrl:GetItemState(idx, wx.wxLIST_STATE_FOCUSED) ~= 0 then\r\n                    return idx\r\n                end\r\n            end\r\n        end\r\n        return -1\r\n    end\r\n\r\n    watchWindow:Connect( wx.wxEVT_CLOSE_WINDOW,\r\n            function (event)\r\n                ConfigSaveFramePosition(watchWindow, \"WatchWindow\")\r\n                watchWindow = nil\r\n                watchListCtrl = nil\r\n                event:Skip()\r\n            end)\r\n\r\n    watchWindow:Connect(ID_ADDWATCH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local row = watchListCtrl:InsertItem(watchListCtrl:GetItemCount(), \"Expr\")\r\n                watchListCtrl:SetItem(row, 0, \"Expr\")\r\n                watchListCtrl:SetItem(row, 1, \"Value\")\r\n                watchListCtrl:EditLabel(row)\r\n            end)\r\n\r\n    watchWindow:Connect(ID_EDITWATCH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local row = FindSelectedWatchItem()\r\n                if row >= 0 then\r\n                    watchListCtrl:EditLabel(row)\r\n                end\r\n            end)\r\n    watchWindow:Connect(ID_EDITWATCH, wx.wxEVT_UPDATE_UI,\r\n            function (event)\r\n                event:Enable(watchListCtrl:GetSelectedItemCount() > 0)\r\n            end)\r\n\r\n    watchWindow:Connect(ID_REMOVEWATCH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local row = FindSelectedWatchItem()\r\n                if row >= 0 then\r\n                    watchListCtrl:DeleteItem(row)\r\n                end\r\n            end)\r\n    watchWindow:Connect(ID_REMOVEWATCH, wx.wxEVT_UPDATE_UI,\r\n            function (event)\r\n                event:Enable(watchListCtrl:GetSelectedItemCount() > 0)\r\n            end)\r\n\r\n    watchWindow:Connect(ID_EVALUATEWATCH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                ProcessWatches()\r\n            end)\r\n    watchWindow:Connect(ID_EVALUATEWATCH, wx.wxEVT_UPDATE_UI,\r\n            function (event)\r\n                event:Enable(watchListCtrl:GetItemCount() > 0)\r\n            end)\r\n\r\n    watchListCtrl:Connect(wx.wxEVT_COMMAND_LIST_END_LABEL_EDIT,\r\n            function (event)\r\n                watchListCtrl:SetItem(event:GetIndex(), 0, event:GetText())\r\n                ProcessWatches()\r\n                event:Skip()\r\n            end)\r\nend",
    "type": "function"
  }, {
    "id": 286,
    "text": "local width = 180",
    "type": "statement:localassign"
  }, {
    "id": 287,
    "text": "watchWindow = wx.wxFrame(frame, wx.wxID_ANY, \"wxLua Watch Window\",\r\n                             wx.wxDefaultPosition, wx.wxSize(width, 160))",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "local watchMenu = wx.wxMenu{\r\n            { ID_ADDWATCH,      \"&Add Watch\"        },\r\n            { ID_EDITWATCH,     \"&Edit Watch\\tF2\"   },\r\n            { ID_REMOVEWATCH,   \"&Remove Watch\"     },\r\n            { ID_EVALUATEWATCH, \"Evaluate &Watches\" }}",
    "type": "statement:localassign"
  }, {
    "id": 289,
    "text": "local watchMenuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 290,
    "text": "watchMenuBar:Append(watchMenu, \"&Watches\")",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "watchWindow:SetMenuBar(watchMenuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "watchListCtrl = wx.wxListCtrl(watchWindow, ID_WATCH_LISTCTRL,\r\n                                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                  wx.wxLC_REPORT + wx.wxLC_EDIT_LABELS)",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "local info = wx.wxListItem()",
    "type": "statement:localassign"
  }, {
    "id": 294,
    "text": "info:SetMask(wx.wxLIST_MASK_TEXT + wx.wxLIST_MASK_WIDTH)",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "info:SetText(\"Expression\")",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "info:SetWidth(width / 2)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "watchListCtrl:InsertColumn(0, info)",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "info:SetText(\"Value\")",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "watchListCtrl:InsertColumn(1, info)",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "watchWindow:CentreOnParent()",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "ConfigRestoreFramePosition(watchWindow, \"WatchWindow\")",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "watchWindow:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "local function FindSelectedWatchItem()\r\n        local count = watchListCtrl:GetSelectedItemCount()\r\n        if count > 0 then\r\n            for idx = 0, watchListCtrl:GetItemCount() - 1 do\r\n                if watchListCtrl:GetItemState(idx, wx.wxLIST_STATE_FOCUSED) ~= 0 then\r\n                    return idx\r\n                end\r\n            end\r\n        end\r\n        return -1\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 304,
    "text": "local count = watchListCtrl:GetSelectedItemCount()",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "if count > 0 then\r\n            for idx = 0, watchListCtrl:GetItemCount() - 1 do\r\n                if watchListCtrl:GetItemState(idx, wx.wxLIST_STATE_FOCUSED) ~= 0 then\r\n                    return idx\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 306,
    "text": "for idx = 0, watchListCtrl:GetItemCount() - 1 do\r\n                if watchListCtrl:GetItemState(idx, wx.wxLIST_STATE_FOCUSED) ~= 0 then\r\n                    return idx\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 307,
    "text": "if watchListCtrl:GetItemState(idx, wx.wxLIST_STATE_FOCUSED) ~= 0 then\r\n                    return idx\r\n                end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "watchWindow:Connect( wx.wxEVT_CLOSE_WINDOW,\r\n            function (event)\r\n                ConfigSaveFramePosition(watchWindow, \"WatchWindow\")\r\n                watchWindow = nil\r\n                watchListCtrl = nil\r\n                event:Skip()\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "ConfigSaveFramePosition(watchWindow, \"WatchWindow\")",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "watchWindow:Connect(ID_ADDWATCH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local row = watchListCtrl:InsertItem(watchListCtrl:GetItemCount(), \"Expr\")\r\n                watchListCtrl:SetItem(row, 0, \"Expr\")\r\n                watchListCtrl:SetItem(row, 1, \"Value\")\r\n                watchListCtrl:EditLabel(row)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "local row = watchListCtrl:InsertItem(watchListCtrl:GetItemCount(), \"Expr\")",
    "type": "statement:localassign"
  }, {
    "id": 312,
    "text": "watchListCtrl:SetItem(row, 0, \"Expr\")",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "watchListCtrl:SetItem(row, 1, \"Value\")",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "watchListCtrl:EditLabel(row)",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "watchWindow:Connect(ID_EDITWATCH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local row = FindSelectedWatchItem()\r\n                if row >= 0 then\r\n                    watchListCtrl:EditLabel(row)\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "local row = FindSelectedWatchItem()",
    "type": "statement:localassign"
  }, {
    "id": 317,
    "text": "if row >= 0 then\r\n                    watchListCtrl:EditLabel(row)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 318,
    "text": "watchWindow:Connect(ID_EDITWATCH, wx.wxEVT_UPDATE_UI,\r\n            function (event)\r\n                event:Enable(watchListCtrl:GetSelectedItemCount() > 0)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "event:Enable(watchListCtrl:GetSelectedItemCount() > 0)",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "watchWindow:Connect(ID_REMOVEWATCH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local row = FindSelectedWatchItem()\r\n                if row >= 0 then\r\n                    watchListCtrl:DeleteItem(row)\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "if row >= 0 then\r\n                    watchListCtrl:DeleteItem(row)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 322,
    "text": "watchListCtrl:DeleteItem(row)",
    "type": "statement:functioncall"
  }, {
    "id": 323,
    "text": "watchWindow:Connect(ID_REMOVEWATCH, wx.wxEVT_UPDATE_UI,\r\n            function (event)\r\n                event:Enable(watchListCtrl:GetSelectedItemCount() > 0)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 324,
    "text": "watchWindow:Connect(ID_EVALUATEWATCH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                ProcessWatches()\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "ProcessWatches()",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "watchWindow:Connect(ID_EVALUATEWATCH, wx.wxEVT_UPDATE_UI,\r\n            function (event)\r\n                event:Enable(watchListCtrl:GetItemCount() > 0)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "event:Enable(watchListCtrl:GetItemCount() > 0)",
    "type": "statement:functioncall"
  }, {
    "id": 328,
    "text": "watchListCtrl:Connect(wx.wxEVT_COMMAND_LIST_END_LABEL_EDIT,\r\n            function (event)\r\n                watchListCtrl:SetItem(event:GetIndex(), 0, event:GetText())\r\n                ProcessWatches()\r\n                event:Skip()\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "watchListCtrl:SetItem(event:GetIndex(), 0, event:GetText())",
    "type": "statement:functioncall"
  }, {
    "id": 330,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 331,
    "text": "local function FindSelectedWatchItem()\r\n        local count = watchListCtrl:GetSelectedItemCount()\r\n        if count > 0 then\r\n            for idx = 0, watchListCtrl:GetItemCount() - 1 do\r\n                if watchListCtrl:GetItemState(idx, wx.wxLIST_STATE_FOCUSED) ~= 0 then\r\n                    return idx\r\n                end\r\n            end\r\n        end\r\n        return -1\r\n    end",
    "type": "function"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function UpdateUIMenuItems()\r\n    if frame and frame:GetMenuBar() then\r\n        for n = 0, frame:GetMenuBar():GetMenuCount()-1 do\r\n            frame:GetMenuBar():GetMenu(n):UpdateUI()\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 334,
    "text": "if frame and frame:GetMenuBar() then\r\n        for n = 0, frame:GetMenuBar():GetMenuCount()-1 do\r\n            frame:GetMenuBar():GetMenu(n):UpdateUI()\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "for n = 0, frame:GetMenuBar():GetMenuCount()-1 do\r\n            frame:GetMenuBar():GetMenu(n):UpdateUI()\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 336,
    "text": "frame:GetMenuBar():GetMenu(n):UpdateUI()",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "function NewFile(event)\r\n    local editor = CreateEditor(\"untitled.lua\")\r\n    SetupKeywords(editor, true)\r\nend",
    "type": "function"
  }, {
    "id": 339,
    "text": "local editor = CreateEditor(\"untitled.lua\")",
    "type": "statement:localassign"
  }, {
    "id": 340,
    "text": "SetupKeywords(editor, true)",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function FindDocumentToReuse()\r\n    local editor = nil\r\n    for id, document in pairs(openDocuments) do\r\n        if (document.editor:GetLength() == 0) and\r\n           (not document.isModified) and (not document.filePath) and\r\n           not (document.editor:GetReadOnly() == true) then\r\n            editor = document.editor\r\n            break\r\n        end\r\n    end\r\n    return editor\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "for id, document in pairs(openDocuments) do\r\n        if (document.editor:GetLength() == 0) and\r\n           (not document.isModified) and (not document.filePath) and\r\n           not (document.editor:GetReadOnly() == true) then\r\n            editor = document.editor\r\n            break\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 344,
    "text": "if (document.editor:GetLength() == 0) and\r\n           (not document.isModified) and (not document.filePath) and\r\n           not (document.editor:GetReadOnly() == true) then\r\n            editor = document.editor\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 345,
    "text": "editor = document.editor",
    "type": "statement:assign"
  }, {
    "id": 346,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 347,
    "text": "function LoadFile(filePath, editor, file_must_exist)\r\n    local file_text = \"\"\r\n    local handle = io.open(filePath, \"rb\")\r\n    if handle then\r\n        file_text = handle:read(\"*a\")\r\n        handle:close()\r\n    elseif file_must_exist then\r\n        return nil\r\n    end\r\n\r\n    if not editor then\r\n        editor = FindDocumentToReuse()\r\n    end\r\n    if not editor then\r\n        editor = CreateEditor(wx.wxFileName(filePath):GetFullName() or \"untitled.lua\")\r\n     end\r\n\r\n    editor:Clear()\r\n    editor:ClearAll()\r\n    SetupKeywords(editor, IsLuaFile(filePath))\r\n    editor:MarkerDeleteAll(BREAKPOINT_MARKER)\r\n    editor:MarkerDeleteAll(CURRENT_LINE_MARKER)\r\n    editor:AppendText(file_text)\r\n    editor:EmptyUndoBuffer()\r\n    local id = editor:GetId()\r\n    openDocuments[id].filePath = filePath\r\n    openDocuments[id].fileName = wx.wxFileName(filePath):GetFullName()\r\n    openDocuments[id].modTime = GetFileModTime(filePath)\r\n    SetDocumentModified(id, false)\r\n    editor:Colourise(0, -1)\r\n\r\n    return editor\r\nend",
    "type": "function"
  }, {
    "id": 348,
    "text": "local file_text = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 349,
    "text": "local handle = io.open(filePath, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "if handle then\r\n        file_text = handle:read(\"*a\")\r\n        handle:close()\r\n    elseif file_must_exist then\r\n        return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 351,
    "text": "file_text = handle:read(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 352,
    "text": "handle:close()",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "if not editor then\r\n        editor = FindDocumentToReuse()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 354,
    "text": "editor = FindDocumentToReuse()",
    "type": "statement:assign"
  }, {
    "id": 355,
    "text": "if not editor then\r\n        editor = CreateEditor(wx.wxFileName(filePath):GetFullName() or \"untitled.lua\")\r\n     end",
    "type": "statement:if"
  }, {
    "id": 356,
    "text": "editor = CreateEditor(wx.wxFileName(filePath):GetFullName() or \"untitled.lua\")",
    "type": "statement:assign"
  }, {
    "id": 357,
    "text": "editor:Clear()",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "editor:ClearAll()",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "SetupKeywords(editor, IsLuaFile(filePath))",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "editor:MarkerDeleteAll(BREAKPOINT_MARKER)",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "editor:MarkerDeleteAll(CURRENT_LINE_MARKER)",
    "type": "statement:functioncall"
  }, {
    "id": 362,
    "text": "editor:AppendText(file_text)",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "editor:EmptyUndoBuffer()",
    "type": "statement:functioncall"
  }, {
    "id": 364,
    "text": "openDocuments[id].filePath = filePath",
    "type": "statement:assign"
  }, {
    "id": 365,
    "text": "openDocuments[id].fileName = wx.wxFileName(filePath):GetFullName()",
    "type": "statement:assign"
  }, {
    "id": 366,
    "text": "openDocuments[id].modTime = GetFileModTime(filePath)",
    "type": "statement:assign"
  }, {
    "id": 367,
    "text": "SetDocumentModified(id, false)",
    "type": "statement:functioncall"
  }, {
    "id": 368,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 369,
    "text": "function OpenFile(event)\r\n    local fileDialog = wx.wxFileDialog(frame, \"Open file\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n    if fileDialog:ShowModal() == wx.wxID_OK then\r\n        if not LoadFile(fileDialog:GetPath(), nil, true) then\r\n            wx.wxMessageBox(\"Unable to load file '\"..fileDialog:GetPath()..\"'.\",\r\n                            \"wxLua Error\",\r\n                            wx.wxOK + wx.wxCENTRE, frame)\r\n        end\r\n    end\r\n    fileDialog:Destroy()\r\nend",
    "type": "function"
  }, {
    "id": 370,
    "text": "local fileDialog = wx.wxFileDialog(frame, \"Open file\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)",
    "type": "statement:localassign"
  }, {
    "id": 371,
    "text": "if fileDialog:ShowModal() == wx.wxID_OK then\r\n        if not LoadFile(fileDialog:GetPath(), nil, true) then\r\n            wx.wxMessageBox(\"Unable to load file '\"..fileDialog:GetPath()..\"'.\",\r\n                            \"wxLua Error\",\r\n                            wx.wxOK + wx.wxCENTRE, frame)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 372,
    "text": "if not LoadFile(fileDialog:GetPath(), nil, true) then\r\n            wx.wxMessageBox(\"Unable to load file '\"..fileDialog:GetPath()..\"'.\",\r\n                            \"wxLua Error\",\r\n                            wx.wxOK + wx.wxCENTRE, frame)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 373,
    "text": "wx.wxMessageBox(\"Unable to load file '\"..fileDialog:GetPath()..\"'.\",\r\n                            \"wxLua Error\",\r\n                            wx.wxOK + wx.wxCENTRE, frame)",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "fileDialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "function SaveFile(editor, filePath)\r\n    if not filePath then\r\n        return SaveFileAs(editor)\r\n    else\r\n        local backPath = filePath..\".bak\"\r\n        os.remove(backPath)\r\n        os.rename(filePath, backPath)\r\n\r\n        local handle = io.open(filePath, \"wb\")\r\n        if handle then\r\n            local st = editor:GetText()\r\n            handle:write(st)\r\n            handle:close()\r\n            editor:EmptyUndoBuffer()\r\n            local id = editor:GetId()\r\n            openDocuments[id].filePath = filePath\r\n            openDocuments[id].fileName = wx.wxFileName(filePath):GetFullName()\r\n            openDocuments[id].modTime  = GetFileModTime(filePath)\r\n            SetDocumentModified(id, false)\r\n            return true\r\n        else\r\n            wx.wxMessageBox(\"Unable to save file '\"..filePath..\"'.\",\r\n                            \"wxLua Error Saving\",\r\n                            wx.wxOK + wx.wxCENTRE, frame)\r\n        end\r\n    end\r\n\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 377,
    "text": "if not filePath then\r\n        return SaveFileAs(editor)\r\n    else\r\n        local backPath = filePath..\".bak\"\r\n        os.remove(backPath)\r\n        os.rename(filePath, backPath)\r\n\r\n        local handle = io.open(filePath, \"wb\")\r\n        if handle then\r\n            local st = editor:GetText()\r\n            handle:write(st)\r\n            handle:close()\r\n            editor:EmptyUndoBuffer()\r\n            local id = editor:GetId()\r\n            openDocuments[id].filePath = filePath\r\n            openDocuments[id].fileName = wx.wxFileName(filePath):GetFullName()\r\n            openDocuments[id].modTime  = GetFileModTime(filePath)\r\n            SetDocumentModified(id, false)\r\n            return true\r\n        else\r\n            wx.wxMessageBox(\"Unable to save file '\"..filePath..\"'.\",\r\n                            \"wxLua Error Saving\",\r\n                            wx.wxOK + wx.wxCENTRE, frame)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 378,
    "text": "local backPath = filePath..\".bak\"",
    "type": "statement:localassign"
  }, {
    "id": 379,
    "text": "os.remove(backPath)",
    "type": "statement:functioncall"
  }, {
    "id": 380,
    "text": "os.rename(filePath, backPath)",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "local handle = io.open(filePath, \"wb\")",
    "type": "statement:localassign"
  }, {
    "id": 382,
    "text": "if handle then\r\n            local st = editor:GetText()\r\n            handle:write(st)\r\n            handle:close()\r\n            editor:EmptyUndoBuffer()\r\n            local id = editor:GetId()\r\n            openDocuments[id].filePath = filePath\r\n            openDocuments[id].fileName = wx.wxFileName(filePath):GetFullName()\r\n            openDocuments[id].modTime  = GetFileModTime(filePath)\r\n            SetDocumentModified(id, false)\r\n            return true\r\n        else\r\n            wx.wxMessageBox(\"Unable to save file '\"..filePath..\"'.\",\r\n                            \"wxLua Error Saving\",\r\n                            wx.wxOK + wx.wxCENTRE, frame)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 383,
    "text": "local st = editor:GetText()",
    "type": "statement:localassign"
  }, {
    "id": 384,
    "text": "handle:write(st)",
    "type": "statement:functioncall"
  }, {
    "id": 385,
    "text": "openDocuments[id].modTime  = GetFileModTime(filePath)",
    "type": "statement:assign"
  }, {
    "id": 386,
    "text": "wx.wxMessageBox(\"Unable to save file '\"..filePath..\"'.\",\r\n                            \"wxLua Error Saving\",\r\n                            wx.wxOK + wx.wxCENTRE, frame)",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 388,
    "text": "function SaveFileAs(editor)\r\n    local id       = editor:GetId()\r\n    local saved    = false\r\n    local fn       = wx.wxFileName(openDocuments[id].filePath or \"\")\r\n    fn:Normalize() -- want absolute path for dialog\r\n\r\n    local fileDialog = wx.wxFileDialog(frame, \"Save file as\",\r\n                                       fn:GetPath(),\r\n                                       fn:GetFullName(),\r\n                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                       wx.wxSAVE)\r\n\r\n    if fileDialog:ShowModal() == wx.wxID_OK then\r\n        local filePath = fileDialog:GetPath()\r\n\r\n        if SaveFile(editor, filePath) then\r\n            SetupKeywords(editor, IsLuaFile(filePath))\r\n            saved = true\r\n        end\r\n    end\r\n\r\n    fileDialog:Destroy()\r\n    return saved\r\nend",
    "type": "function"
  }, {
    "id": 389,
    "text": "local id       = editor:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 390,
    "text": "local saved    = false",
    "type": "statement:localassign"
  }, {
    "id": 391,
    "text": "local fn       = wx.wxFileName(openDocuments[id].filePath or \"\")",
    "type": "statement:localassign"
  }, {
    "id": 392,
    "text": "fn:Normalize()",
    "type": "statement:functioncall"
  }, {
    "id": 393,
    "text": "local fileDialog = wx.wxFileDialog(frame, \"Save file as\",\r\n                                       fn:GetPath(),\r\n                                       fn:GetFullName(),\r\n                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                       wx.wxSAVE)",
    "type": "statement:localassign"
  }, {
    "id": 394,
    "text": "if fileDialog:ShowModal() == wx.wxID_OK then\r\n        local filePath = fileDialog:GetPath()\r\n\r\n        if SaveFile(editor, filePath) then\r\n            SetupKeywords(editor, IsLuaFile(filePath))\r\n            saved = true\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 395,
    "text": "local filePath = fileDialog:GetPath()",
    "type": "statement:localassign"
  }, {
    "id": 396,
    "text": "if SaveFile(editor, filePath) then\r\n            SetupKeywords(editor, IsLuaFile(filePath))\r\n            saved = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 397,
    "text": "saved = true",
    "type": "statement:assign"
  }, {
    "id": 398,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 399,
    "text": "function SaveAll()\r\n    for id, document in pairs(openDocuments) do\r\n        local editor   = document.editor\r\n        local filePath = document.filePath\r\n\r\n        if document.isModified then\r\n            SaveFile(editor, filePath) -- will call SaveFileAs if necessary\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 400,
    "text": "for id, document in pairs(openDocuments) do\r\n        local editor   = document.editor\r\n        local filePath = document.filePath\r\n\r\n        if document.isModified then\r\n            SaveFile(editor, filePath) -- will call SaveFileAs if necessary\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 401,
    "text": "local editor   = document.editor",
    "type": "statement:localassign"
  }, {
    "id": 402,
    "text": "local filePath = document.filePath",
    "type": "statement:localassign"
  }, {
    "id": 403,
    "text": "if document.isModified then\r\n            SaveFile(editor, filePath) -- will call SaveFileAs if necessary\r\n        end",
    "type": "statement:if"
  }, {
    "id": 404,
    "text": "SaveFile(editor, filePath)",
    "type": "statement:functioncall"
  }, {
    "id": 405,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 406,
    "text": "function RemovePage(index)\r\n    local  prevIndex = nil\r\n    local  nextIndex = nil\r\n    local newOpenDocuments = {}\r\n\r\n    for id, document in pairs(openDocuments) do\r\n        if document.index < index then\r\n            newOpenDocuments[id] = document\r\n            prevIndex = document.index\r\n        elseif document.index == index then\r\n            document.editor:Destroy()\r\n        elseif document.index > index then\r\n            document.index = document.index - 1\r\n            if nextIndex == nil then\r\n                nextIndex = document.index\r\n            end\r\n            newOpenDocuments[id] = document\r\n        end\r\n    end\r\n\r\n    notebook:RemovePage(index)\r\n    openDocuments = newOpenDocuments\r\n\r\n    if nextIndex then\r\n        notebook:SetSelection(nextIndex)\r\n    elseif prevIndex then\r\n        notebook:SetSelection(prevIndex)\r\n    end\r\n\r\n    SetEditorSelection(nil) -- will use notebook GetSelection to update\r\nend",
    "type": "function"
  }, {
    "id": 407,
    "text": "local  prevIndex = nil",
    "type": "statement:localassign"
  }, {
    "id": 408,
    "text": "local  nextIndex = nil",
    "type": "statement:localassign"
  }, {
    "id": 409,
    "text": "local newOpenDocuments = {}",
    "type": "statement:localassign"
  }, {
    "id": 410,
    "text": "for id, document in pairs(openDocuments) do\r\n        if document.index < index then\r\n            newOpenDocuments[id] = document\r\n            prevIndex = document.index\r\n        elseif document.index == index then\r\n            document.editor:Destroy()\r\n        elseif document.index > index then\r\n            document.index = document.index - 1\r\n            if nextIndex == nil then\r\n                nextIndex = document.index\r\n            end\r\n            newOpenDocuments[id] = document\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 411,
    "text": "if document.index < index then\r\n            newOpenDocuments[id] = document\r\n            prevIndex = document.index\r\n        elseif document.index == index then\r\n            document.editor:Destroy()\r\n        elseif document.index > index then\r\n            document.index = document.index - 1\r\n            if nextIndex == nil then\r\n                nextIndex = document.index\r\n            end\r\n            newOpenDocuments[id] = document\r\n        end",
    "type": "statement:if"
  }, {
    "id": 412,
    "text": "newOpenDocuments[id] = document",
    "type": "statement:assign"
  }, {
    "id": 413,
    "text": "prevIndex = document.index",
    "type": "statement:assign"
  }, {
    "id": 414,
    "text": "document.editor:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 415,
    "text": "document.index = document.index - 1",
    "type": "statement:assign"
  }, {
    "id": 416,
    "text": "if nextIndex == nil then\r\n                nextIndex = document.index\r\n            end",
    "type": "statement:if"
  }, {
    "id": 417,
    "text": "nextIndex = document.index",
    "type": "statement:assign"
  }, {
    "id": 418,
    "text": "notebook:RemovePage(index)",
    "type": "statement:functioncall"
  }, {
    "id": 419,
    "text": "openDocuments = newOpenDocuments",
    "type": "statement:assign"
  }, {
    "id": 420,
    "text": "if nextIndex then\r\n        notebook:SetSelection(nextIndex)\r\n    elseif prevIndex then\r\n        notebook:SetSelection(prevIndex)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 421,
    "text": "notebook:SetSelection(nextIndex)",
    "type": "statement:functioncall"
  }, {
    "id": 422,
    "text": "notebook:SetSelection(prevIndex)",
    "type": "statement:functioncall"
  }, {
    "id": 423,
    "text": "SetEditorSelection(nil)",
    "type": "statement:functioncall"
  }, {
    "id": 424,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 425,
    "text": "function SaveModifiedDialog(editor, allow_cancel)\r\n    local result   = wx.wxID_NO\r\n    local id       = editor:GetId()\r\n    local document = openDocuments[id]\r\n    local filePath = document.filePath\r\n    local fileName = document.fileName\r\n    if document.isModified then\r\n        local message\r\n        if fileName then\r\n            message = \"Save changes to '\"..fileName..\"' before exiting?\"\r\n        else\r\n            message = \"Save changes to 'untitled' before exiting?\"\r\n        end\r\n        local dlg_styles = wx.wxYES_NO + wx.wxCENTRE + wx.wxICON_QUESTION\r\n        if allow_cancel then dlg_styles = dlg_styles + wx.wxCANCEL end\r\n        local dialog = wx.wxMessageDialog(frame, message,\r\n                                          \"Save Changes?\",\r\n                                          dlg_styles)\r\n        result = dialog:ShowModal()\r\n        dialog:Destroy()\r\n        if result == wx.wxID_YES then\r\n            SaveFile(editor, filePath)\r\n        end\r\n    end\r\n\r\n    return result\r\nend",
    "type": "function"
  }, {
    "id": 426,
    "text": "local result   = wx.wxID_NO",
    "type": "statement:localassign"
  }, {
    "id": 427,
    "text": "local document = openDocuments[id]",
    "type": "statement:localassign"
  }, {
    "id": 428,
    "text": "local fileName = document.fileName",
    "type": "statement:localassign"
  }, {
    "id": 429,
    "text": "if document.isModified then\r\n        local message\r\n        if fileName then\r\n            message = \"Save changes to '\"..fileName..\"' before exiting?\"\r\n        else\r\n            message = \"Save changes to 'untitled' before exiting?\"\r\n        end\r\n        local dlg_styles = wx.wxYES_NO + wx.wxCENTRE + wx.wxICON_QUESTION\r\n        if allow_cancel then dlg_styles = dlg_styles + wx.wxCANCEL end\r\n        local dialog = wx.wxMessageDialog(frame, message,\r\n                                          \"Save Changes?\",\r\n                                          dlg_styles)\r\n        result = dialog:ShowModal()\r\n        dialog:Destroy()\r\n        if result == wx.wxID_YES then\r\n            SaveFile(editor, filePath)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 430,
    "text": "local message",
    "type": "statement:localassign"
  }, {
    "id": 431,
    "text": "if fileName then\r\n            message = \"Save changes to '\"..fileName..\"' before exiting?\"\r\n        else\r\n            message = \"Save changes to 'untitled' before exiting?\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 432,
    "text": "message = \"Save changes to '\"..fileName..\"' before exiting?\"",
    "type": "statement:assign"
  }, {
    "id": 433,
    "text": "message = \"Save changes to 'untitled' before exiting?\"",
    "type": "statement:assign"
  }, {
    "id": 434,
    "text": "local dlg_styles = wx.wxYES_NO + wx.wxCENTRE + wx.wxICON_QUESTION",
    "type": "statement:localassign"
  }, {
    "id": 435,
    "text": "if allow_cancel then dlg_styles = dlg_styles + wx.wxCANCEL end",
    "type": "statement:if"
  }, {
    "id": 436,
    "text": "dlg_styles = dlg_styles + wx.wxCANCEL",
    "type": "statement:assign"
  }, {
    "id": 437,
    "text": "local dialog = wx.wxMessageDialog(frame, message,\r\n                                          \"Save Changes?\",\r\n                                          dlg_styles)",
    "type": "statement:localassign"
  }, {
    "id": 438,
    "text": "result = dialog:ShowModal()",
    "type": "statement:assign"
  }, {
    "id": 439,
    "text": "dialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 440,
    "text": "if result == wx.wxID_YES then\r\n            SaveFile(editor, filePath)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 441,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 442,
    "text": "function SaveOnExit(allow_cancel)\r\n    for id, document in pairs(openDocuments) do\r\n        if (SaveModifiedDialog(document.editor, allow_cancel) == wx.wxID_CANCEL) then\r\n            return false\r\n        end\r\n\r\n        document.isModified = false\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 443,
    "text": "for id, document in pairs(openDocuments) do\r\n        if (SaveModifiedDialog(document.editor, allow_cancel) == wx.wxID_CANCEL) then\r\n            return false\r\n        end\r\n\r\n        document.isModified = false\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 444,
    "text": "if (SaveModifiedDialog(document.editor, allow_cancel) == wx.wxID_CANCEL) then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 445,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 446,
    "text": "function OnUpdateUIEditMenu(event) -- enable if there is a valid focused editor\r\n    local editor = GetEditor()\r\n    event:Enable(editor ~= nil)\r\nend",
    "type": "function"
  }, {
    "id": 447,
    "text": "local editor = GetEditor()",
    "type": "statement:localassign"
  }, {
    "id": 448,
    "text": "event:Enable(editor ~= nil)",
    "type": "statement:functioncall"
  }, {
    "id": 449,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 450,
    "text": "function OnEditMenu(event)\r\n    local menu_id = event:GetId()\r\n    local editor = GetEditor()\r\n    if editor == nil then return end\r\n\r\n    if     menu_id == ID_CUT       then editor:Cut()\r\n    elseif menu_id == ID_COPY      then editor:Copy()\r\n    elseif menu_id == ID_PASTE     then editor:Paste()\r\n    elseif menu_id == ID_SELECTALL then editor:SelectAll()\r\n    elseif menu_id == ID_UNDO      then editor:Undo()\r\n    elseif menu_id == ID_REDO      then editor:Redo()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 451,
    "text": "local menu_id = event:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 452,
    "text": "if editor == nil then return end",
    "type": "statement:if"
  }, {
    "id": 453,
    "text": "if     menu_id == ID_CUT       then editor:Cut()\r\n    elseif menu_id == ID_COPY      then editor:Copy()\r\n    elseif menu_id == ID_PASTE     then editor:Paste()\r\n    elseif menu_id == ID_SELECTALL then editor:SelectAll()\r\n    elseif menu_id == ID_UNDO      then editor:Undo()\r\n    elseif menu_id == ID_REDO      then editor:Redo()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 454,
    "text": "editor:Cut()",
    "type": "statement:functioncall"
  }, {
    "id": 455,
    "text": "editor:Copy()",
    "type": "statement:functioncall"
  }, {
    "id": 456,
    "text": "editor:Paste()",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "editor:SelectAll()",
    "type": "statement:functioncall"
  }, {
    "id": 458,
    "text": "editor:Undo()",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "editor:Redo()",
    "type": "statement:functioncall"
  }, {
    "id": 460,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 461,
    "text": "function FoldSome()\r\n    local editor = GetEditor()\r\n    editor:Colourise(0, -1)       -- update doc's folding info\r\n    local visible, baseFound, expanded, folded\r\n    for ln = 2, editor.LineCount - 1 do\r\n        local foldRaw = editor:GetFoldLevel(ln)\r\n        local foldLvl = math.mod(foldRaw, 4096)\r\n        local foldHdr = math.mod(math.floor(foldRaw / 8192), 2) == 1\r\n        if not baseFound and (foldLvl ==  wxstc.wxSTC_FOLDLEVELBASE) then\r\n            baseFound = true\r\n            visible = editor:GetLineVisible(ln)\r\n        end\r\n        if foldHdr then\r\n            if editor:GetFoldExpanded(ln) then\r\n                expanded = true\r\n            else\r\n                folded = true\r\n            end\r\n        end\r\n        if expanded and folded and baseFound then break end\r\n    end\r\n    local show = not visible or (not baseFound and expanded) or (expanded and folded)\r\n    local hide = visible and folded\r\n\r\n    if show then\r\n        editor:ShowLines(1, editor.LineCount-1)\r\n    end\r\n\r\n    for ln = 1, editor.LineCount - 1 do\r\n        local foldRaw = editor:GetFoldLevel(ln)\r\n        local foldLvl = math.mod(foldRaw, 4096)\r\n        local foldHdr = math.mod(math.floor(foldRaw / 8192), 2) == 1\r\n        if show then\r\n            if foldHdr then\r\n                if not editor:GetFoldExpanded(ln) then editor:ToggleFold(ln) end\r\n            end\r\n        elseif hide and (foldLvl == wxstc.wxSTC_FOLDLEVELBASE) then\r\n            if not foldHdr then\r\n                editor:HideLines(ln, ln)\r\n            end\r\n        elseif foldHdr then\r\n            if editor:GetFoldExpanded(ln) then\r\n                editor:ToggleFold(ln)\r\n            end\r\n        end\r\n    end\r\n    editor:EnsureCaretVisible()\r\nend",
    "type": "function"
  }, {
    "id": 462,
    "text": "local visible, baseFound, expanded, folded",
    "type": "statement:localassign"
  }, {
    "id": 463,
    "text": "for ln = 2, editor.LineCount - 1 do\r\n        local foldRaw = editor:GetFoldLevel(ln)\r\n        local foldLvl = math.mod(foldRaw, 4096)\r\n        local foldHdr = math.mod(math.floor(foldRaw / 8192), 2) == 1\r\n        if not baseFound and (foldLvl ==  wxstc.wxSTC_FOLDLEVELBASE) then\r\n            baseFound = true\r\n            visible = editor:GetLineVisible(ln)\r\n        end\r\n        if foldHdr then\r\n            if editor:GetFoldExpanded(ln) then\r\n                expanded = true\r\n            else\r\n                folded = true\r\n            end\r\n        end\r\n        if expanded and folded and baseFound then break end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 464,
    "text": "local foldRaw = editor:GetFoldLevel(ln)",
    "type": "statement:localassign"
  }, {
    "id": 465,
    "text": "local foldLvl = math.mod(foldRaw, 4096)",
    "type": "statement:localassign"
  }, {
    "id": 466,
    "text": "local foldHdr = math.mod(math.floor(foldRaw / 8192), 2) == 1",
    "type": "statement:localassign"
  }, {
    "id": 467,
    "text": "if not baseFound and (foldLvl ==  wxstc.wxSTC_FOLDLEVELBASE) then\r\n            baseFound = true\r\n            visible = editor:GetLineVisible(ln)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 468,
    "text": "baseFound = true",
    "type": "statement:assign"
  }, {
    "id": 469,
    "text": "visible = editor:GetLineVisible(ln)",
    "type": "statement:assign"
  }, {
    "id": 470,
    "text": "if foldHdr then\r\n            if editor:GetFoldExpanded(ln) then\r\n                expanded = true\r\n            else\r\n                folded = true\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 471,
    "text": "if editor:GetFoldExpanded(ln) then\r\n                expanded = true\r\n            else\r\n                folded = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 472,
    "text": "expanded = true",
    "type": "statement:assign"
  }, {
    "id": 473,
    "text": "folded = true",
    "type": "statement:assign"
  }, {
    "id": 474,
    "text": "if expanded and folded and baseFound then break end",
    "type": "statement:if"
  }, {
    "id": 475,
    "text": "local show = not visible or (not baseFound and expanded) or (expanded and folded)",
    "type": "statement:localassign"
  }, {
    "id": 476,
    "text": "local hide = visible and folded",
    "type": "statement:localassign"
  }, {
    "id": 477,
    "text": "if show then\r\n        editor:ShowLines(1, editor.LineCount-1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 478,
    "text": "editor:ShowLines(1, editor.LineCount-1)",
    "type": "statement:functioncall"
  }, {
    "id": 479,
    "text": "for ln = 1, editor.LineCount - 1 do\r\n        local foldRaw = editor:GetFoldLevel(ln)\r\n        local foldLvl = math.mod(foldRaw, 4096)\r\n        local foldHdr = math.mod(math.floor(foldRaw / 8192), 2) == 1\r\n        if show then\r\n            if foldHdr then\r\n                if not editor:GetFoldExpanded(ln) then editor:ToggleFold(ln) end\r\n            end\r\n        elseif hide and (foldLvl == wxstc.wxSTC_FOLDLEVELBASE) then\r\n            if not foldHdr then\r\n                editor:HideLines(ln, ln)\r\n            end\r\n        elseif foldHdr then\r\n            if editor:GetFoldExpanded(ln) then\r\n                editor:ToggleFold(ln)\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 480,
    "text": "if show then\r\n            if foldHdr then\r\n                if not editor:GetFoldExpanded(ln) then editor:ToggleFold(ln) end\r\n            end\r\n        elseif hide and (foldLvl == wxstc.wxSTC_FOLDLEVELBASE) then\r\n            if not foldHdr then\r\n                editor:HideLines(ln, ln)\r\n            end\r\n        elseif foldHdr then\r\n            if editor:GetFoldExpanded(ln) then\r\n                editor:ToggleFold(ln)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 481,
    "text": "if foldHdr then\r\n                if not editor:GetFoldExpanded(ln) then editor:ToggleFold(ln) end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 482,
    "text": "if not editor:GetFoldExpanded(ln) then editor:ToggleFold(ln) end",
    "type": "statement:if"
  }, {
    "id": 483,
    "text": "editor:ToggleFold(ln)",
    "type": "statement:functioncall"
  }, {
    "id": 484,
    "text": "if not foldHdr then\r\n                editor:HideLines(ln, ln)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 485,
    "text": "editor:HideLines(ln, ln)",
    "type": "statement:functioncall"
  }, {
    "id": 486,
    "text": "if editor:GetFoldExpanded(ln) then\r\n                editor:ToggleFold(ln)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 487,
    "text": "editor:EnsureCaretVisible()",
    "type": "statement:functioncall"
  }, {
    "id": 488,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 489,
    "text": "function EnsureRangeVisible(posStart, posEnd)\r\n    local editor = GetEditor()\r\n    if posStart > posEnd then\r\n        posStart, posEnd = posEnd, posStart\r\n    end\r\n\r\n    local lineStart = editor:LineFromPosition(posStart)\r\n    local lineEnd   = editor:LineFromPosition(posEnd)\r\n    for line = lineStart, lineEnd do\r\n        editor:EnsureVisibleEnforcePolicy(line)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 490,
    "text": "if posStart > posEnd then\r\n        posStart, posEnd = posEnd, posStart\r\n    end",
    "type": "statement:if"
  }, {
    "id": 491,
    "text": "posStart, posEnd = posEnd, posStart",
    "type": "statement:assign"
  }, {
    "id": 492,
    "text": "local lineStart = editor:LineFromPosition(posStart)",
    "type": "statement:localassign"
  }, {
    "id": 493,
    "text": "local lineEnd   = editor:LineFromPosition(posEnd)",
    "type": "statement:localassign"
  }, {
    "id": 494,
    "text": "for line = lineStart, lineEnd do\r\n        editor:EnsureVisibleEnforcePolicy(line)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 495,
    "text": "editor:EnsureVisibleEnforcePolicy(line)",
    "type": "statement:functioncall"
  }, {
    "id": 496,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 497,
    "text": "function SetSearchFlags(editor)\r\n    local flags = 0\r\n    if findReplace.fWholeWord   then flags = wxstc.wxSTC_FIND_WHOLEWORD end\r\n    if findReplace.fMatchCase   then flags = flags + wxstc.wxSTC_FIND_MATCHCASE end\r\n    if findReplace.fRegularExpr then flags = flags + wxstc.wxSTC_FIND_REGEXP end\r\n    editor:SetSearchFlags(flags)\r\nend",
    "type": "function"
  }, {
    "id": 498,
    "text": "local flags = 0",
    "type": "statement:localassign"
  }, {
    "id": 499,
    "text": "if findReplace.fWholeWord   then flags = wxstc.wxSTC_FIND_WHOLEWORD end",
    "type": "statement:if"
  }, {
    "id": 500,
    "text": "flags = wxstc.wxSTC_FIND_WHOLEWORD",
    "type": "statement:assign"
  }, {
    "id": 501,
    "text": "if findReplace.fMatchCase   then flags = flags + wxstc.wxSTC_FIND_MATCHCASE end",
    "type": "statement:if"
  }, {
    "id": 502,
    "text": "flags = flags + wxstc.wxSTC_FIND_MATCHCASE",
    "type": "statement:assign"
  }, {
    "id": 503,
    "text": "if findReplace.fRegularExpr then flags = flags + wxstc.wxSTC_FIND_REGEXP end",
    "type": "statement:if"
  }, {
    "id": 504,
    "text": "flags = flags + wxstc.wxSTC_FIND_REGEXP",
    "type": "statement:assign"
  }, {
    "id": 505,
    "text": "editor:SetSearchFlags(flags)",
    "type": "statement:functioncall"
  }, {
    "id": 506,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 507,
    "text": "function SetTarget(editor, fDown, fInclude)\r\n    local selStart = editor:GetSelectionStart()\r\n    local selEnd =  editor:GetSelectionEnd()\r\n    local len = editor:GetLength()\r\n    local s, e\r\n    if fDown then\r\n        e= len\r\n        s = iff(fInclude, selStart, selEnd +1)\r\n    else\r\n        s = 0\r\n        e = iff(fInclude, selEnd, selStart-1)\r\n    end\r\n    if not fDown and not fInclude then s, e = e, s end\r\n    editor:SetTargetStart(s)\r\n    editor:SetTargetEnd(e)\r\n    return e\r\nend",
    "type": "function"
  }, {
    "id": 508,
    "text": "local selStart = editor:GetSelectionStart()",
    "type": "statement:localassign"
  }, {
    "id": 509,
    "text": "local selEnd =  editor:GetSelectionEnd()",
    "type": "statement:localassign"
  }, {
    "id": 510,
    "text": "local len = editor:GetLength()",
    "type": "statement:localassign"
  }, {
    "id": 511,
    "text": "local s, e",
    "type": "statement:localassign"
  }, {
    "id": 512,
    "text": "if fDown then\r\n        e= len\r\n        s = iff(fInclude, selStart, selEnd +1)\r\n    else\r\n        s = 0\r\n        e = iff(fInclude, selEnd, selStart-1)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 513,
    "text": "e= len",
    "type": "statement:assign"
  }, {
    "id": 514,
    "text": "s = iff(fInclude, selStart, selEnd +1)",
    "type": "statement:assign"
  }, {
    "id": 515,
    "text": "s = 0",
    "type": "statement:assign"
  }, {
    "id": 516,
    "text": "e = iff(fInclude, selEnd, selStart-1)",
    "type": "statement:assign"
  }, {
    "id": 517,
    "text": "if not fDown and not fInclude then s, e = e, s end",
    "type": "statement:if"
  }, {
    "id": 518,
    "text": "s, e = e, s",
    "type": "statement:assign"
  }, {
    "id": 519,
    "text": "editor:SetTargetStart(s)",
    "type": "statement:functioncall"
  }, {
    "id": 520,
    "text": "editor:SetTargetEnd(e)",
    "type": "statement:functioncall"
  }, {
    "id": 521,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 522,
    "text": "function findReplace:HasText()\r\n    return (findReplace.findText ~= nil) and (string.len(findReplace.findText) > 0)\r\nend",
    "type": "function"
  }, {
    "id": 523,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 524,
    "text": "function findReplace:GetSelectedString()\r\n    local editor = GetEditor()\r\n    if editor then\r\n        local startSel = editor:GetSelectionStart()\r\n        local endSel   = editor:GetSelectionEnd()\r\n        if (startSel ~= endSel) and (editor:LineFromPosition(startSel) == editor:LineFromPosition(endSel)) then\r\n            findReplace.findText = editor:GetSelectedText()\r\n            findReplace.foundString = true\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 525,
    "text": "if editor then\r\n        local startSel = editor:GetSelectionStart()\r\n        local endSel   = editor:GetSelectionEnd()\r\n        if (startSel ~= endSel) and (editor:LineFromPosition(startSel) == editor:LineFromPosition(endSel)) then\r\n            findReplace.findText = editor:GetSelectedText()\r\n            findReplace.foundString = true\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 526,
    "text": "local startSel = editor:GetSelectionStart()",
    "type": "statement:localassign"
  }, {
    "id": 527,
    "text": "local endSel   = editor:GetSelectionEnd()",
    "type": "statement:localassign"
  }, {
    "id": 528,
    "text": "if (startSel ~= endSel) and (editor:LineFromPosition(startSel) == editor:LineFromPosition(endSel)) then\r\n            findReplace.findText = editor:GetSelectedText()\r\n            findReplace.foundString = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 529,
    "text": "findReplace.findText = editor:GetSelectedText()",
    "type": "statement:assign"
  }, {
    "id": 530,
    "text": "findReplace.foundString = true",
    "type": "statement:assign"
  }, {
    "id": 531,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 532,
    "text": "function findReplace:FindString(reverse)\r\n    if findReplace:HasText() then\r\n        local editor = GetEditor()\r\n        local fDown = iff(reverse, not findReplace.fDown, findReplace.fDown)\r\n        local lenFind = string.len(findReplace.findText)\r\n        SetSearchFlags(editor)\r\n        SetTarget(editor, fDown)\r\n        local posFind = editor:SearchInTarget(findReplace.findText)\r\n        if (posFind == -1) and findReplace.fWrap then\r\n            editor:SetTargetStart(iff(fDown, 0, editor:GetLength()))\r\n            editor:SetTargetEnd(iff(fDown, editor:GetLength(), 0))\r\n            posFind = editor:SearchInTarget(findReplace.findText)\r\n        end\r\n        if posFind == -1 then\r\n            findReplace.foundString = false\r\n            frame:SetStatusText(\"Find text not found.\")\r\n        else\r\n            findReplace.foundString = true\r\n            local start  = editor:GetTargetStart()\r\n            local finish = editor:GetTargetEnd()\r\n            EnsureRangeVisible(start, finish)\r\n            editor:SetSelection(start, finish)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 533,
    "text": "if findReplace:HasText() then\r\n        local editor = GetEditor()\r\n        local fDown = iff(reverse, not findReplace.fDown, findReplace.fDown)\r\n        local lenFind = string.len(findReplace.findText)\r\n        SetSearchFlags(editor)\r\n        SetTarget(editor, fDown)\r\n        local posFind = editor:SearchInTarget(findReplace.findText)\r\n        if (posFind == -1) and findReplace.fWrap then\r\n            editor:SetTargetStart(iff(fDown, 0, editor:GetLength()))\r\n            editor:SetTargetEnd(iff(fDown, editor:GetLength(), 0))\r\n            posFind = editor:SearchInTarget(findReplace.findText)\r\n        end\r\n        if posFind == -1 then\r\n            findReplace.foundString = false\r\n            frame:SetStatusText(\"Find text not found.\")\r\n        else\r\n            findReplace.foundString = true\r\n            local start  = editor:GetTargetStart()\r\n            local finish = editor:GetTargetEnd()\r\n            EnsureRangeVisible(start, finish)\r\n            editor:SetSelection(start, finish)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 534,
    "text": "local fDown = iff(reverse, not findReplace.fDown, findReplace.fDown)",
    "type": "statement:localassign"
  }, {
    "id": 535,
    "text": "local lenFind = string.len(findReplace.findText)",
    "type": "statement:localassign"
  }, {
    "id": 536,
    "text": "SetSearchFlags(editor)",
    "type": "statement:functioncall"
  }, {
    "id": 537,
    "text": "SetTarget(editor, fDown)",
    "type": "statement:functioncall"
  }, {
    "id": 538,
    "text": "local posFind = editor:SearchInTarget(findReplace.findText)",
    "type": "statement:localassign"
  }, {
    "id": 539,
    "text": "if (posFind == -1) and findReplace.fWrap then\r\n            editor:SetTargetStart(iff(fDown, 0, editor:GetLength()))\r\n            editor:SetTargetEnd(iff(fDown, editor:GetLength(), 0))\r\n            posFind = editor:SearchInTarget(findReplace.findText)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 540,
    "text": "editor:SetTargetStart(iff(fDown, 0, editor:GetLength()))",
    "type": "statement:functioncall"
  }, {
    "id": 541,
    "text": "editor:SetTargetEnd(iff(fDown, editor:GetLength(), 0))",
    "type": "statement:functioncall"
  }, {
    "id": 542,
    "text": "posFind = editor:SearchInTarget(findReplace.findText)",
    "type": "statement:assign"
  }, {
    "id": 543,
    "text": "if posFind == -1 then\r\n            findReplace.foundString = false\r\n            frame:SetStatusText(\"Find text not found.\")\r\n        else\r\n            findReplace.foundString = true\r\n            local start  = editor:GetTargetStart()\r\n            local finish = editor:GetTargetEnd()\r\n            EnsureRangeVisible(start, finish)\r\n            editor:SetSelection(start, finish)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 544,
    "text": "findReplace.foundString = false",
    "type": "statement:assign"
  }, {
    "id": 545,
    "text": "frame:SetStatusText(\"Find text not found.\")",
    "type": "statement:functioncall"
  }, {
    "id": 546,
    "text": "local start  = editor:GetTargetStart()",
    "type": "statement:localassign"
  }, {
    "id": 547,
    "text": "local finish = editor:GetTargetEnd()",
    "type": "statement:localassign"
  }, {
    "id": 548,
    "text": "EnsureRangeVisible(start, finish)",
    "type": "statement:functioncall"
  }, {
    "id": 549,
    "text": "editor:SetSelection(start, finish)",
    "type": "statement:functioncall"
  }, {
    "id": 550,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 551,
    "text": "function ReplaceString(fReplaceAll)\r\n    if findReplace:HasText() then\r\n        local replaceLen = string.len(findReplace.replaceText)\r\n        local editor = GetEditor()\r\n        local findLen = string.len(findReplace.findText)\r\n        local endTarget  = SetTarget(editor, findReplace.fDown, fReplaceAll)\r\n        if fReplaceAll then\r\n            SetSearchFlags(editor)\r\n            local posFind = editor:SearchInTarget(findReplace.findText)\r\n            if (posFind ~= -1)  then\r\n                editor:BeginUndoAction()\r\n                while posFind ~= -1 do\r\n                    editor:ReplaceTarget(findReplace.replaceText)\r\n                    editor:SetTargetStart(posFind + replaceLen)\r\n                    endTarget = endTarget + replaceLen - findLen\r\n                    editor:SetTargetEnd(endTarget)\r\n                    posFind = editor:SearchInTarget(findReplace.findText)\r\n                end\r\n                editor:EndUndoAction()\r\n            end\r\n        else\r\n            if findReplace.foundString then\r\n                local start  = editor:GetSelectionStart()\r\n                editor:ReplaceSelection(findReplace.replaceText)\r\n                editor:SetSelection(start, start + replaceLen)\r\n                findReplace.foundString = false\r\n            end\r\n            findReplace:FindString()\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 552,
    "text": "if findReplace:HasText() then\r\n        local replaceLen = string.len(findReplace.replaceText)\r\n        local editor = GetEditor()\r\n        local findLen = string.len(findReplace.findText)\r\n        local endTarget  = SetTarget(editor, findReplace.fDown, fReplaceAll)\r\n        if fReplaceAll then\r\n            SetSearchFlags(editor)\r\n            local posFind = editor:SearchInTarget(findReplace.findText)\r\n            if (posFind ~= -1)  then\r\n                editor:BeginUndoAction()\r\n                while posFind ~= -1 do\r\n                    editor:ReplaceTarget(findReplace.replaceText)\r\n                    editor:SetTargetStart(posFind + replaceLen)\r\n                    endTarget = endTarget + replaceLen - findLen\r\n                    editor:SetTargetEnd(endTarget)\r\n                    posFind = editor:SearchInTarget(findReplace.findText)\r\n                end\r\n                editor:EndUndoAction()\r\n            end\r\n        else\r\n            if findReplace.foundString then\r\n                local start  = editor:GetSelectionStart()\r\n                editor:ReplaceSelection(findReplace.replaceText)\r\n                editor:SetSelection(start, start + replaceLen)\r\n                findReplace.foundString = false\r\n            end\r\n            findReplace:FindString()\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 553,
    "text": "local replaceLen = string.len(findReplace.replaceText)",
    "type": "statement:localassign"
  }, {
    "id": 554,
    "text": "local findLen = string.len(findReplace.findText)",
    "type": "statement:localassign"
  }, {
    "id": 555,
    "text": "local endTarget  = SetTarget(editor, findReplace.fDown, fReplaceAll)",
    "type": "statement:localassign"
  }, {
    "id": 556,
    "text": "if fReplaceAll then\r\n            SetSearchFlags(editor)\r\n            local posFind = editor:SearchInTarget(findReplace.findText)\r\n            if (posFind ~= -1)  then\r\n                editor:BeginUndoAction()\r\n                while posFind ~= -1 do\r\n                    editor:ReplaceTarget(findReplace.replaceText)\r\n                    editor:SetTargetStart(posFind + replaceLen)\r\n                    endTarget = endTarget + replaceLen - findLen\r\n                    editor:SetTargetEnd(endTarget)\r\n                    posFind = editor:SearchInTarget(findReplace.findText)\r\n                end\r\n                editor:EndUndoAction()\r\n            end\r\n        else\r\n            if findReplace.foundString then\r\n                local start  = editor:GetSelectionStart()\r\n                editor:ReplaceSelection(findReplace.replaceText)\r\n                editor:SetSelection(start, start + replaceLen)\r\n                findReplace.foundString = false\r\n            end\r\n            findReplace:FindString()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 557,
    "text": "if (posFind ~= -1)  then\r\n                editor:BeginUndoAction()\r\n                while posFind ~= -1 do\r\n                    editor:ReplaceTarget(findReplace.replaceText)\r\n                    editor:SetTargetStart(posFind + replaceLen)\r\n                    endTarget = endTarget + replaceLen - findLen\r\n                    editor:SetTargetEnd(endTarget)\r\n                    posFind = editor:SearchInTarget(findReplace.findText)\r\n                end\r\n                editor:EndUndoAction()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 558,
    "text": "editor:BeginUndoAction()",
    "type": "statement:functioncall"
  }, {
    "id": 559,
    "text": "while posFind ~= -1 do\r\n                    editor:ReplaceTarget(findReplace.replaceText)\r\n                    editor:SetTargetStart(posFind + replaceLen)\r\n                    endTarget = endTarget + replaceLen - findLen\r\n                    editor:SetTargetEnd(endTarget)\r\n                    posFind = editor:SearchInTarget(findReplace.findText)\r\n                end",
    "type": "statement:while"
  }, {
    "id": 560,
    "text": "editor:ReplaceTarget(findReplace.replaceText)",
    "type": "statement:functioncall"
  }, {
    "id": 561,
    "text": "editor:SetTargetStart(posFind + replaceLen)",
    "type": "statement:functioncall"
  }, {
    "id": 562,
    "text": "endTarget = endTarget + replaceLen - findLen",
    "type": "statement:assign"
  }, {
    "id": 563,
    "text": "editor:SetTargetEnd(endTarget)",
    "type": "statement:functioncall"
  }, {
    "id": 564,
    "text": "editor:EndUndoAction()",
    "type": "statement:functioncall"
  }, {
    "id": 565,
    "text": "if findReplace.foundString then\r\n                local start  = editor:GetSelectionStart()\r\n                editor:ReplaceSelection(findReplace.replaceText)\r\n                editor:SetSelection(start, start + replaceLen)\r\n                findReplace.foundString = false\r\n            end",
    "type": "statement:if"
  }, {
    "id": 566,
    "text": "local start  = editor:GetSelectionStart()",
    "type": "statement:localassign"
  }, {
    "id": 567,
    "text": "editor:ReplaceSelection(findReplace.replaceText)",
    "type": "statement:functioncall"
  }, {
    "id": 568,
    "text": "editor:SetSelection(start, start + replaceLen)",
    "type": "statement:functioncall"
  }, {
    "id": 569,
    "text": "findReplace:FindString()",
    "type": "statement:functioncall"
  }, {
    "id": 570,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 571,
    "text": "function CreateFindReplaceDialog(replace)\r\n    local ID_FIND_NEXT   = 1\r\n    local ID_REPLACE     = 2\r\n    local ID_REPLACE_ALL = 3\r\n    findReplace.replace  = replace\r\n\r\n    local findDialog = wx.wxDialog(frame, wx.wxID_ANY, \"Find\",  wx.wxDefaultPosition, wx.wxDefaultSize)\r\n\r\n    -- Create right hand buttons and sizer\r\n    local findButton = wx.wxButton(findDialog, ID_FIND_NEXT, \"&Find Next\")\r\n    findButton:SetDefault()\r\n    local replaceButton =  wx.wxButton(findDialog, ID_REPLACE, \"&Replace\")\r\n    local replaceAllButton = nil\r\n    if (replace) then\r\n        replaceAllButton =  wx.wxButton(findDialog, ID_REPLACE_ALL, \"Replace &All\")\r\n    end\r\n    local cancelButton =  wx.wxButton(findDialog, wx.wxID_CANCEL, \"Cancel\")\r\n\r\n    local buttonsSizer = wx.wxBoxSizer(wx.wxVERTICAL)\r\n    buttonsSizer:Add(findButton,    0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)\r\n    buttonsSizer:Add(replaceButton, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)\r\n    if replace then\r\n        buttonsSizer:Add(replaceAllButton, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)\r\n    end\r\n    buttonsSizer:Add(cancelButton, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER,  3)\r\n\r\n    -- Create find/replace text entry sizer\r\n    local findStatText  = wx.wxStaticText( findDialog, wx.wxID_ANY, \"Find: \")\r\n    local findTextCombo = wx.wxComboBox(findDialog, wx.wxID_ANY, findReplace.findText,  wx.wxDefaultPosition, wx.wxDefaultSize, findReplace.findTextArray, wx.wxCB_DROPDOWN)\r\n    findTextCombo:SetFocus()\r\n\r\n    local replaceStatText, replaceTextCombo\r\n    if (replace) then\r\n        replaceStatText  = wx.wxStaticText( findDialog, wx.wxID_ANY, \"Replace: \")\r\n        replaceTextCombo = wx.wxComboBox(findDialog, wx.wxID_ANY, findReplace.replaceText,  wx.wxDefaultPosition, wx.wxDefaultSize,  findReplace.replaceTextArray)\r\n    end\r\n\r\n    local findReplaceSizer = wx.wxFlexGridSizer(2, 2, 0, 0)\r\n    findReplaceSizer:AddGrowableCol(1)\r\n    findReplaceSizer:Add(findStatText,  0, wx.wxALL + wx.wxALIGN_LEFT, 0)\r\n    findReplaceSizer:Add(findTextCombo, 1, wx.wxALL + wx.wxGROW + wx.wxCENTER, 0)\r\n\r\n    if (replace) then\r\n        findReplaceSizer:Add(replaceStatText,  0, wx.wxTOP + wx.wxALIGN_CENTER, 5)\r\n        findReplaceSizer:Add(replaceTextCombo, 1, wx.wxTOP + wx.wxGROW + wx.wxCENTER, 5)\r\n    end\r\n\r\n    -- Create find/replace option checkboxes\r\n    local wholeWordCheckBox  = wx.wxCheckBox(findDialog, wx.wxID_ANY, \"Match &whole word\")\r\n    local matchCaseCheckBox  = wx.wxCheckBox(findDialog, wx.wxID_ANY, \"Match &case\")\r\n    local wrapAroundCheckBox = wx.wxCheckBox(findDialog, wx.wxID_ANY, \"Wrap ar&ound\")\r\n    local regexCheckBox      = wx.wxCheckBox(findDialog, wx.wxID_ANY, \"Regular &expression\")\r\n    wholeWordCheckBox:SetValue(findReplace.fWholeWord)\r\n    matchCaseCheckBox:SetValue(findReplace.fMatchCase)\r\n    wrapAroundCheckBox:SetValue(findReplace.fWrap)\r\n    regexCheckBox:SetValue(findReplace.fRegularExpr)\r\n\r\n    local optionSizer = wx.wxBoxSizer(wx.wxVERTICAL, findDialog)\r\n    optionSizer:Add(wholeWordCheckBox,  0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)\r\n    optionSizer:Add(matchCaseCheckBox,  0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)\r\n    optionSizer:Add(wrapAroundCheckBox, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)\r\n    optionSizer:Add(regexCheckBox,      0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)\r\n    local optionsSizer = wx.wxStaticBoxSizer(wx.wxVERTICAL, findDialog, \"Options\" );\r\n    optionsSizer:Add(optionSizer, 0, 0, 5)\r\n\r\n    -- Create scope radiobox\r\n    local scopeRadioBox = wx.wxRadioBox(findDialog, wx.wxID_ANY, \"Scope\", wx.wxDefaultPosition, wx.wxDefaultSize,  {\"&Up\", \"&Down\"}, 1, wx.wxRA_SPECIFY_COLS)\r\n    scopeRadioBox:SetSelection(iff(findReplace.fDown, 1, 0))\r\n    local scopeSizer = wx.wxBoxSizer(wx.wxVERTICAL, findDialog );\r\n    scopeSizer:Add(scopeRadioBox, 0, 0, 0)\r\n\r\n    -- Add all the sizers to the dialog\r\n    local optionScopeSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)\r\n    optionScopeSizer:Add(optionsSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 5)\r\n    optionScopeSizer:Add(scopeSizer,   0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 5)\r\n\r\n    local leftSizer = wx.wxBoxSizer(wx.wxVERTICAL)\r\n    leftSizer:Add(findReplaceSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 0)\r\n    leftSizer:Add(optionScopeSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 0)\r\n\r\n    local mainSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)\r\n    mainSizer:Add(leftSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 10)\r\n    mainSizer:Add(buttonsSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 10)\r\n    mainSizer:SetSizeHints( findDialog )\r\n    findDialog:SetSizer(mainSizer)\r\n\r\n    local function PrependToArray(t, s)\r\n        if string.len(s) == 0 then return end\r\n        for i, v in ipairs(t) do\r\n            if v == s then\r\n                table.remove(t, i) -- remove old copy\r\n                break\r\n            end\r\n        end\r\n        table.insert(t, 1, s)\r\n        if #t > 15 then table.remove(t, #t) end -- keep reasonable length\r\n    end\r\n\r\n    local function TransferDataFromWindow()\r\n        findReplace.fWholeWord   = wholeWordCheckBox:GetValue()\r\n        findReplace.fMatchCase   = matchCaseCheckBox:GetValue()\r\n        findReplace.fWrap        = wrapAroundCheckBox:GetValue()\r\n        findReplace.fDown        = scopeRadioBox:GetSelection() == 1\r\n        findReplace.fRegularExpr = regexCheckBox:GetValue()\r\n        findReplace.findText     = findTextCombo:GetValue()\r\n        PrependToArray(findReplace.findTextArray, findReplace.findText)\r\n        if findReplace.replace then\r\n            findReplace.replaceText = replaceTextCombo:GetValue()\r\n            PrependToArray(findReplace.replaceTextArray, findReplace.replaceText)\r\n        end\r\n        return true\r\n    end\r\n\r\n    findDialog:Connect(ID_FIND_NEXT, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function(event)\r\n            TransferDataFromWindow()\r\n            findReplace:FindString()\r\n        end)\r\n\r\n    findDialog:Connect(ID_REPLACE, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function(event)\r\n            TransferDataFromWindow()\r\n            event:Skip()\r\n            if findReplace.replace then\r\n                ReplaceString()\r\n            else\r\n                findReplace.dialog:Destroy()\r\n                findReplace.dialog = CreateFindReplaceDialog(true)\r\n                findReplace.dialog:Show(true)\r\n            end\r\n        end)\r\n\r\n    if replace then\r\n        findDialog:Connect(ID_REPLACE_ALL, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n            function(event)\r\n                TransferDataFromWindow()\r\n                event:Skip()\r\n                ReplaceString(true)\r\n            end)\r\n    end\r\n\r\n    findDialog:Connect(wx.wxID_ANY, wx.wxEVT_CLOSE_WINDOW,\r\n        function (event)\r\n            TransferDataFromWindow()\r\n            event:Skip()\r\n            findDialog:Show(false)\r\n            findDialog:Destroy()\r\n        end)\r\n\r\n    return findDialog\r\nend",
    "type": "function"
  }, {
    "id": 572,
    "text": "local ID_FIND_NEXT   = 1",
    "type": "statement:localassign"
  }, {
    "id": 573,
    "text": "local ID_REPLACE     = 2",
    "type": "statement:localassign"
  }, {
    "id": 574,
    "text": "local ID_REPLACE_ALL = 3",
    "type": "statement:localassign"
  }, {
    "id": 575,
    "text": "findReplace.replace  = replace",
    "type": "statement:assign"
  }, {
    "id": 576,
    "text": "local findDialog = wx.wxDialog(frame, wx.wxID_ANY, \"Find\",  wx.wxDefaultPosition, wx.wxDefaultSize)",
    "type": "statement:localassign"
  }, {
    "id": 577,
    "text": "local findButton = wx.wxButton(findDialog, ID_FIND_NEXT, \"&Find Next\")",
    "type": "statement:localassign"
  }, {
    "id": 578,
    "text": "findButton:SetDefault()",
    "type": "statement:functioncall"
  }, {
    "id": 579,
    "text": "local replaceButton =  wx.wxButton(findDialog, ID_REPLACE, \"&Replace\")",
    "type": "statement:localassign"
  }, {
    "id": 580,
    "text": "local replaceAllButton = nil",
    "type": "statement:localassign"
  }, {
    "id": 581,
    "text": "if (replace) then\r\n        replaceAllButton =  wx.wxButton(findDialog, ID_REPLACE_ALL, \"Replace &All\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 582,
    "text": "replaceAllButton =  wx.wxButton(findDialog, ID_REPLACE_ALL, \"Replace &All\")",
    "type": "statement:assign"
  }, {
    "id": 583,
    "text": "local cancelButton =  wx.wxButton(findDialog, wx.wxID_CANCEL, \"Cancel\")",
    "type": "statement:localassign"
  }, {
    "id": 584,
    "text": "local buttonsSizer = wx.wxBoxSizer(wx.wxVERTICAL)",
    "type": "statement:localassign"
  }, {
    "id": 585,
    "text": "buttonsSizer:Add(findButton,    0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 586,
    "text": "buttonsSizer:Add(replaceButton, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 587,
    "text": "if replace then\r\n        buttonsSizer:Add(replaceAllButton, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 588,
    "text": "buttonsSizer:Add(replaceAllButton, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 589,
    "text": "buttonsSizer:Add(cancelButton, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER,  3)",
    "type": "statement:functioncall"
  }, {
    "id": 590,
    "text": "local findStatText  = wx.wxStaticText( findDialog, wx.wxID_ANY, \"Find: \")",
    "type": "statement:localassign"
  }, {
    "id": 591,
    "text": "local findTextCombo = wx.wxComboBox(findDialog, wx.wxID_ANY, findReplace.findText,  wx.wxDefaultPosition, wx.wxDefaultSize, findReplace.findTextArray, wx.wxCB_DROPDOWN)",
    "type": "statement:localassign"
  }, {
    "id": 592,
    "text": "findTextCombo:SetFocus()",
    "type": "statement:functioncall"
  }, {
    "id": 593,
    "text": "local replaceStatText, replaceTextCombo",
    "type": "statement:localassign"
  }, {
    "id": 594,
    "text": "if (replace) then\r\n        replaceStatText  = wx.wxStaticText( findDialog, wx.wxID_ANY, \"Replace: \")\r\n        replaceTextCombo = wx.wxComboBox(findDialog, wx.wxID_ANY, findReplace.replaceText,  wx.wxDefaultPosition, wx.wxDefaultSize,  findReplace.replaceTextArray)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 595,
    "text": "replaceStatText  = wx.wxStaticText( findDialog, wx.wxID_ANY, \"Replace: \")",
    "type": "statement:assign"
  }, {
    "id": 596,
    "text": "replaceTextCombo = wx.wxComboBox(findDialog, wx.wxID_ANY, findReplace.replaceText,  wx.wxDefaultPosition, wx.wxDefaultSize,  findReplace.replaceTextArray)",
    "type": "statement:assign"
  }, {
    "id": 597,
    "text": "local findReplaceSizer = wx.wxFlexGridSizer(2, 2, 0, 0)",
    "type": "statement:localassign"
  }, {
    "id": 598,
    "text": "findReplaceSizer:AddGrowableCol(1)",
    "type": "statement:functioncall"
  }, {
    "id": 599,
    "text": "findReplaceSizer:Add(findStatText,  0, wx.wxALL + wx.wxALIGN_LEFT, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 600,
    "text": "findReplaceSizer:Add(findTextCombo, 1, wx.wxALL + wx.wxGROW + wx.wxCENTER, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 601,
    "text": "if (replace) then\r\n        findReplaceSizer:Add(replaceStatText,  0, wx.wxTOP + wx.wxALIGN_CENTER, 5)\r\n        findReplaceSizer:Add(replaceTextCombo, 1, wx.wxTOP + wx.wxGROW + wx.wxCENTER, 5)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 602,
    "text": "findReplaceSizer:Add(replaceStatText,  0, wx.wxTOP + wx.wxALIGN_CENTER, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 603,
    "text": "findReplaceSizer:Add(replaceTextCombo, 1, wx.wxTOP + wx.wxGROW + wx.wxCENTER, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 604,
    "text": "local wholeWordCheckBox  = wx.wxCheckBox(findDialog, wx.wxID_ANY, \"Match &whole word\")",
    "type": "statement:localassign"
  }, {
    "id": 605,
    "text": "local matchCaseCheckBox  = wx.wxCheckBox(findDialog, wx.wxID_ANY, \"Match &case\")",
    "type": "statement:localassign"
  }, {
    "id": 606,
    "text": "local wrapAroundCheckBox = wx.wxCheckBox(findDialog, wx.wxID_ANY, \"Wrap ar&ound\")",
    "type": "statement:localassign"
  }, {
    "id": 607,
    "text": "local regexCheckBox      = wx.wxCheckBox(findDialog, wx.wxID_ANY, \"Regular &expression\")",
    "type": "statement:localassign"
  }, {
    "id": 608,
    "text": "wholeWordCheckBox:SetValue(findReplace.fWholeWord)",
    "type": "statement:functioncall"
  }, {
    "id": 609,
    "text": "matchCaseCheckBox:SetValue(findReplace.fMatchCase)",
    "type": "statement:functioncall"
  }, {
    "id": 610,
    "text": "wrapAroundCheckBox:SetValue(findReplace.fWrap)",
    "type": "statement:functioncall"
  }, {
    "id": 611,
    "text": "regexCheckBox:SetValue(findReplace.fRegularExpr)",
    "type": "statement:functioncall"
  }, {
    "id": 612,
    "text": "local optionSizer = wx.wxBoxSizer(wx.wxVERTICAL, findDialog)",
    "type": "statement:localassign"
  }, {
    "id": 613,
    "text": "optionSizer:Add(wholeWordCheckBox,  0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 614,
    "text": "optionSizer:Add(matchCaseCheckBox,  0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 615,
    "text": "optionSizer:Add(wrapAroundCheckBox, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 616,
    "text": "optionSizer:Add(regexCheckBox,      0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 617,
    "text": "local optionsSizer = wx.wxStaticBoxSizer(wx.wxVERTICAL, findDialog, \"Options\" )",
    "type": "statement:localassign"
  }, {
    "id": 618,
    "text": "optionsSizer:Add(optionSizer, 0, 0, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 619,
    "text": "local scopeRadioBox = wx.wxRadioBox(findDialog, wx.wxID_ANY, \"Scope\", wx.wxDefaultPosition, wx.wxDefaultSize,  {\"&Up\", \"&Down\"}, 1, wx.wxRA_SPECIFY_COLS)",
    "type": "statement:localassign"
  }, {
    "id": 620,
    "text": "scopeRadioBox:SetSelection(iff(findReplace.fDown, 1, 0))",
    "type": "statement:functioncall"
  }, {
    "id": 621,
    "text": "local scopeSizer = wx.wxBoxSizer(wx.wxVERTICAL, findDialog )",
    "type": "statement:localassign"
  }, {
    "id": 622,
    "text": "scopeSizer:Add(scopeRadioBox, 0, 0, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 623,
    "text": "local optionScopeSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)",
    "type": "statement:localassign"
  }, {
    "id": 624,
    "text": "optionScopeSizer:Add(optionsSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 625,
    "text": "optionScopeSizer:Add(scopeSizer,   0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 626,
    "text": "local leftSizer = wx.wxBoxSizer(wx.wxVERTICAL)",
    "type": "statement:localassign"
  }, {
    "id": 627,
    "text": "leftSizer:Add(findReplaceSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 628,
    "text": "leftSizer:Add(optionScopeSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 629,
    "text": "local mainSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)",
    "type": "statement:localassign"
  }, {
    "id": 630,
    "text": "mainSizer:Add(leftSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 10)",
    "type": "statement:functioncall"
  }, {
    "id": 631,
    "text": "mainSizer:Add(buttonsSizer, 0, wx.wxALL + wx.wxGROW + wx.wxCENTER, 10)",
    "type": "statement:functioncall"
  }, {
    "id": 632,
    "text": "mainSizer:SetSizeHints( findDialog )",
    "type": "statement:functioncall"
  }, {
    "id": 633,
    "text": "findDialog:SetSizer(mainSizer)",
    "type": "statement:functioncall"
  }, {
    "id": 634,
    "text": "local function PrependToArray(t, s)\r\n        if string.len(s) == 0 then return end\r\n        for i, v in ipairs(t) do\r\n            if v == s then\r\n                table.remove(t, i) -- remove old copy\r\n                break\r\n            end\r\n        end\r\n        table.insert(t, 1, s)\r\n        if #t > 15 then table.remove(t, #t) end -- keep reasonable length\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 635,
    "text": "if string.len(s) == 0 then return end",
    "type": "statement:if"
  }, {
    "id": 636,
    "text": "for i, v in ipairs(t) do\r\n            if v == s then\r\n                table.remove(t, i) -- remove old copy\r\n                break\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 637,
    "text": "if v == s then\r\n                table.remove(t, i) -- remove old copy\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 638,
    "text": "table.remove(t, i)",
    "type": "statement:functioncall"
  }, {
    "id": 639,
    "text": "table.insert(t, 1, s)",
    "type": "statement:functioncall"
  }, {
    "id": 640,
    "text": "if #t > 15 then table.remove(t, #t) end",
    "type": "statement:if"
  }, {
    "id": 641,
    "text": "table.remove(t, #t)",
    "type": "statement:functioncall"
  }, {
    "id": 642,
    "text": "local function TransferDataFromWindow()\r\n        findReplace.fWholeWord   = wholeWordCheckBox:GetValue()\r\n        findReplace.fMatchCase   = matchCaseCheckBox:GetValue()\r\n        findReplace.fWrap        = wrapAroundCheckBox:GetValue()\r\n        findReplace.fDown        = scopeRadioBox:GetSelection() == 1\r\n        findReplace.fRegularExpr = regexCheckBox:GetValue()\r\n        findReplace.findText     = findTextCombo:GetValue()\r\n        PrependToArray(findReplace.findTextArray, findReplace.findText)\r\n        if findReplace.replace then\r\n            findReplace.replaceText = replaceTextCombo:GetValue()\r\n            PrependToArray(findReplace.replaceTextArray, findReplace.replaceText)\r\n        end\r\n        return true\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 643,
    "text": "findReplace.fWholeWord   = wholeWordCheckBox:GetValue()",
    "type": "statement:assign"
  }, {
    "id": 644,
    "text": "findReplace.fMatchCase   = matchCaseCheckBox:GetValue()",
    "type": "statement:assign"
  }, {
    "id": 645,
    "text": "findReplace.fWrap        = wrapAroundCheckBox:GetValue()",
    "type": "statement:assign"
  }, {
    "id": 646,
    "text": "findReplace.fDown        = scopeRadioBox:GetSelection() == 1",
    "type": "statement:assign"
  }, {
    "id": 647,
    "text": "findReplace.fRegularExpr = regexCheckBox:GetValue()",
    "type": "statement:assign"
  }, {
    "id": 648,
    "text": "findReplace.findText     = findTextCombo:GetValue()",
    "type": "statement:assign"
  }, {
    "id": 649,
    "text": "PrependToArray(findReplace.findTextArray, findReplace.findText)",
    "type": "statement:functioncall"
  }, {
    "id": 650,
    "text": "if findReplace.replace then\r\n            findReplace.replaceText = replaceTextCombo:GetValue()\r\n            PrependToArray(findReplace.replaceTextArray, findReplace.replaceText)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 651,
    "text": "findReplace.replaceText = replaceTextCombo:GetValue()",
    "type": "statement:assign"
  }, {
    "id": 652,
    "text": "PrependToArray(findReplace.replaceTextArray, findReplace.replaceText)",
    "type": "statement:functioncall"
  }, {
    "id": 653,
    "text": "findDialog:Connect(ID_FIND_NEXT, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function(event)\r\n            TransferDataFromWindow()\r\n            findReplace:FindString()\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 654,
    "text": "TransferDataFromWindow()",
    "type": "statement:functioncall"
  }, {
    "id": 655,
    "text": "findDialog:Connect(ID_REPLACE, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function(event)\r\n            TransferDataFromWindow()\r\n            event:Skip()\r\n            if findReplace.replace then\r\n                ReplaceString()\r\n            else\r\n                findReplace.dialog:Destroy()\r\n                findReplace.dialog = CreateFindReplaceDialog(true)\r\n                findReplace.dialog:Show(true)\r\n            end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 656,
    "text": "if findReplace.replace then\r\n                ReplaceString()\r\n            else\r\n                findReplace.dialog:Destroy()\r\n                findReplace.dialog = CreateFindReplaceDialog(true)\r\n                findReplace.dialog:Show(true)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 657,
    "text": "ReplaceString()",
    "type": "statement:functioncall"
  }, {
    "id": 658,
    "text": "findReplace.dialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 659,
    "text": "findReplace.dialog = CreateFindReplaceDialog(true)",
    "type": "statement:assign"
  }, {
    "id": 660,
    "text": "findReplace.dialog:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 661,
    "text": "if replace then\r\n        findDialog:Connect(ID_REPLACE_ALL, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n            function(event)\r\n                TransferDataFromWindow()\r\n                event:Skip()\r\n                ReplaceString(true)\r\n            end)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 662,
    "text": "findDialog:Connect(ID_REPLACE_ALL, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n            function(event)\r\n                TransferDataFromWindow()\r\n                event:Skip()\r\n                ReplaceString(true)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 663,
    "text": "ReplaceString(true)",
    "type": "statement:functioncall"
  }, {
    "id": 664,
    "text": "findDialog:Connect(wx.wxID_ANY, wx.wxEVT_CLOSE_WINDOW,\r\n        function (event)\r\n            TransferDataFromWindow()\r\n            event:Skip()\r\n            findDialog:Show(false)\r\n            findDialog:Destroy()\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 665,
    "text": "findDialog:Show(false)",
    "type": "statement:functioncall"
  }, {
    "id": 666,
    "text": "findDialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 667,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 668,
    "text": "local function PrependToArray(t, s)\r\n        if string.len(s) == 0 then return end\r\n        for i, v in ipairs(t) do\r\n            if v == s then\r\n                table.remove(t, i) -- remove old copy\r\n                break\r\n            end\r\n        end\r\n        table.insert(t, 1, s)\r\n        if #t > 15 then table.remove(t, #t) end -- keep reasonable length\r\n    end",
    "type": "function"
  }, {
    "id": 669,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 670,
    "text": "local function TransferDataFromWindow()\r\n        findReplace.fWholeWord   = wholeWordCheckBox:GetValue()\r\n        findReplace.fMatchCase   = matchCaseCheckBox:GetValue()\r\n        findReplace.fWrap        = wrapAroundCheckBox:GetValue()\r\n        findReplace.fDown        = scopeRadioBox:GetSelection() == 1\r\n        findReplace.fRegularExpr = regexCheckBox:GetValue()\r\n        findReplace.findText     = findTextCombo:GetValue()\r\n        PrependToArray(findReplace.findTextArray, findReplace.findText)\r\n        if findReplace.replace then\r\n            findReplace.replaceText = replaceTextCombo:GetValue()\r\n            PrependToArray(findReplace.replaceTextArray, findReplace.replaceText)\r\n        end\r\n        return true\r\n    end",
    "type": "function"
  }, {
    "id": 671,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 672,
    "text": "function findReplace:Show(replace)\r\n    self.dialog = nil\r\n    self.dialog = CreateFindReplaceDialog(replace)\r\n    self.dialog:Show(true)\r\nend",
    "type": "function"
  }, {
    "id": 673,
    "text": "self.dialog = nil",
    "type": "statement:assign"
  }, {
    "id": 674,
    "text": "self.dialog = CreateFindReplaceDialog(replace)",
    "type": "statement:assign"
  }, {
    "id": 675,
    "text": "self.dialog:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 676,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 677,
    "text": "function SetAllEditorsReadOnly(enable)\r\n    for id, document in pairs(openDocuments) do\r\n        local editor = document.editor\r\n        editor:SetReadOnly(enable)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 678,
    "text": "for id, document in pairs(openDocuments) do\r\n        local editor = document.editor\r\n        editor:SetReadOnly(enable)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 679,
    "text": "local editor = document.editor",
    "type": "statement:localassign"
  }, {
    "id": 680,
    "text": "editor:SetReadOnly(enable)",
    "type": "statement:functioncall"
  }, {
    "id": 681,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 682,
    "text": "function MakeDebugFileName(editor, filePath)\r\n    if not filePath then\r\n        filePath = \"file\"..tostring(editor)\r\n    end\r\n    return filePath\r\nend",
    "type": "function"
  }, {
    "id": 683,
    "text": "if not filePath then\r\n        filePath = \"file\"..tostring(editor)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 684,
    "text": "filePath = \"file\"..tostring(editor)",
    "type": "statement:assign"
  }, {
    "id": 685,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 686,
    "text": "function ToggleDebugMarker(editor, line)\r\n    local markers = editor:MarkerGet(line)\r\n    if markers >= CURRENT_LINE_MARKER_VALUE then\r\n        markers = markers - CURRENT_LINE_MARKER_VALUE\r\n    end\r\n    local id       = editor:GetId()\r\n    local filePath = MakeDebugFileName(editor, openDocuments[id].filePath)\r\n    if markers >= BREAKPOINT_MARKER_VALUE then\r\n        editor:MarkerDelete(line, BREAKPOINT_MARKER)\r\n        if debuggerServer then\r\n            debuggerServer:RemoveBreakPoint(filePath, line)\r\n        end\r\n    else\r\n        editor:MarkerAdd(line, BREAKPOINT_MARKER)\r\n        if debuggerServer then\r\n            debuggerServer:AddBreakPoint(filePath, line)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 687,
    "text": "local markers = editor:MarkerGet(line)",
    "type": "statement:localassign"
  }, {
    "id": 688,
    "text": "if markers >= CURRENT_LINE_MARKER_VALUE then\r\n        markers = markers - CURRENT_LINE_MARKER_VALUE\r\n    end",
    "type": "statement:if"
  }, {
    "id": 689,
    "text": "markers = markers - CURRENT_LINE_MARKER_VALUE",
    "type": "statement:assign"
  }, {
    "id": 690,
    "text": "local filePath = MakeDebugFileName(editor, openDocuments[id].filePath)",
    "type": "statement:localassign"
  }, {
    "id": 691,
    "text": "if markers >= BREAKPOINT_MARKER_VALUE then\r\n        editor:MarkerDelete(line, BREAKPOINT_MARKER)\r\n        if debuggerServer then\r\n            debuggerServer:RemoveBreakPoint(filePath, line)\r\n        end\r\n    else\r\n        editor:MarkerAdd(line, BREAKPOINT_MARKER)\r\n        if debuggerServer then\r\n            debuggerServer:AddBreakPoint(filePath, line)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 692,
    "text": "editor:MarkerDelete(line, BREAKPOINT_MARKER)",
    "type": "statement:functioncall"
  }, {
    "id": 693,
    "text": "if debuggerServer then\r\n            debuggerServer:RemoveBreakPoint(filePath, line)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 694,
    "text": "debuggerServer:RemoveBreakPoint(filePath, line)",
    "type": "statement:functioncall"
  }, {
    "id": 695,
    "text": "editor:MarkerAdd(line, BREAKPOINT_MARKER)",
    "type": "statement:functioncall"
  }, {
    "id": 696,
    "text": "if debuggerServer then\r\n            debuggerServer:AddBreakPoint(filePath, line)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 697,
    "text": "debuggerServer:AddBreakPoint(filePath, line)",
    "type": "statement:functioncall"
  }, {
    "id": 698,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 699,
    "text": "function ClearAllCurrentLineMarkers()\r\n    for id, document in pairs(openDocuments) do\r\n        local editor = document.editor\r\n        editor:MarkerDeleteAll(CURRENT_LINE_MARKER)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 700,
    "text": "for id, document in pairs(openDocuments) do\r\n        local editor = document.editor\r\n        editor:MarkerDeleteAll(CURRENT_LINE_MARKER)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 701,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 702,
    "text": "function DisplayOutput(message, dont_add_marker)\r\n    if splitter:IsSplit() == false then\r\n        local w, h = frame:GetClientSizeWH()\r\n        splitter:SplitHorizontally(notebook, errorLog, (2 * h) / 3)\r\n    end\r\n    if not dont_add_marker then\r\n        errorLog:MarkerAdd(errorLog:GetLineCount()-1, CURRENT_LINE_MARKER)\r\n    end\r\n    errorLog:SetReadOnly(false)\r\n    errorLog:AppendText(message)\r\n    errorLog:SetReadOnly(true)\r\n    errorLog:GotoPos(errorLog:GetLength())\r\nend",
    "type": "function"
  }, {
    "id": 703,
    "text": "if splitter:IsSplit() == false then\r\n        local w, h = frame:GetClientSizeWH()\r\n        splitter:SplitHorizontally(notebook, errorLog, (2 * h) / 3)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 704,
    "text": "local w, h = frame:GetClientSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 705,
    "text": "splitter:SplitHorizontally(notebook, errorLog, (2 * h) / 3)",
    "type": "statement:functioncall"
  }, {
    "id": 706,
    "text": "if not dont_add_marker then\r\n        errorLog:MarkerAdd(errorLog:GetLineCount()-1, CURRENT_LINE_MARKER)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 707,
    "text": "errorLog:MarkerAdd(errorLog:GetLineCount()-1, CURRENT_LINE_MARKER)",
    "type": "statement:functioncall"
  }, {
    "id": 708,
    "text": "errorLog:SetReadOnly(false)",
    "type": "statement:functioncall"
  }, {
    "id": 709,
    "text": "errorLog:AppendText(message)",
    "type": "statement:functioncall"
  }, {
    "id": 710,
    "text": "errorLog:SetReadOnly(true)",
    "type": "statement:functioncall"
  }, {
    "id": 711,
    "text": "errorLog:GotoPos(errorLog:GetLength())",
    "type": "statement:functioncall"
  }, {
    "id": 712,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 713,
    "text": "function CompileProgram(editor)\r\n    local editorText = editor:GetText()\r\n    local id         = editor:GetId()\r\n    local filePath   = MakeDebugFileName(editor, openDocuments[id].filePath)\r\n    local ret, errMsg, line_num = wxlua.CompileLuaScript(editorText, filePath)\r\n    if menuBar:IsChecked(ID_CLEAROUTPUT) then\r\n        ClearOutput()\r\n    end\r\n\r\n    if line_num > -1 then\r\n        DisplayOutput(\"Compilation error on line number :\"..tostring(line_num)..\"\\n\"..errMsg..\"\\n\\n\")\r\n        editor:GotoLine(line_num-1)\r\n    else\r\n        DisplayOutput(\"Compilation successful!\\n\\n\")\r\n    end\r\n\r\n    return line_num == -1 -- return true if it compiled ok\r\nend",
    "type": "function"
  }, {
    "id": 714,
    "text": "local editorText = editor:GetText()",
    "type": "statement:localassign"
  }, {
    "id": 715,
    "text": "local id         = editor:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 716,
    "text": "local filePath   = MakeDebugFileName(editor, openDocuments[id].filePath)",
    "type": "statement:localassign"
  }, {
    "id": 717,
    "text": "local ret, errMsg, line_num = wxlua.CompileLuaScript(editorText, filePath)",
    "type": "statement:localassign"
  }, {
    "id": 718,
    "text": "if menuBar:IsChecked(ID_CLEAROUTPUT) then\r\n        ClearOutput()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 719,
    "text": "ClearOutput()",
    "type": "statement:functioncall"
  }, {
    "id": 720,
    "text": "if line_num > -1 then\r\n        DisplayOutput(\"Compilation error on line number :\"..tostring(line_num)..\"\\n\"..errMsg..\"\\n\\n\")\r\n        editor:GotoLine(line_num-1)\r\n    else\r\n        DisplayOutput(\"Compilation successful!\\n\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 721,
    "text": "DisplayOutput(\"Compilation error on line number :\"..tostring(line_num)..\"\\n\"..errMsg..\"\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 722,
    "text": "editor:GotoLine(line_num-1)",
    "type": "statement:functioncall"
  }, {
    "id": 723,
    "text": "DisplayOutput(\"Compilation successful!\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 724,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 725,
    "text": "function SaveIfModified(editor)\r\n    local id = editor:GetId()\r\n    if openDocuments[id].isModified then\r\n        local saved = false\r\n        if not openDocuments[id].filePath then\r\n            local ret = wx.wxMessageBox(\"You must save the program before running it.\\nPress cancel to abort running.\",\r\n                                         \"Save file?\",  wx.wxOK + wx.wxCANCEL + wx.wxCENTRE, frame)\r\n            if ret == wx.wxOK then\r\n                saved = SaveFileAs(editor)\r\n            end\r\n        else\r\n            saved = SaveFile(editor, openDocuments[id].filePath)\r\n        end\r\n\r\n        if saved then\r\n            openDocuments[id].isModified = false\r\n        else\r\n            return false -- not saved\r\n        end\r\n    end\r\n\r\n    return true -- saved\r\nend",
    "type": "function"
  }, {
    "id": 726,
    "text": "if openDocuments[id].isModified then\r\n        local saved = false\r\n        if not openDocuments[id].filePath then\r\n            local ret = wx.wxMessageBox(\"You must save the program before running it.\\nPress cancel to abort running.\",\r\n                                         \"Save file?\",  wx.wxOK + wx.wxCANCEL + wx.wxCENTRE, frame)\r\n            if ret == wx.wxOK then\r\n                saved = SaveFileAs(editor)\r\n            end\r\n        else\r\n            saved = SaveFile(editor, openDocuments[id].filePath)\r\n        end\r\n\r\n        if saved then\r\n            openDocuments[id].isModified = false\r\n        else\r\n            return false -- not saved\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 727,
    "text": "local saved = false",
    "type": "statement:localassign"
  }, {
    "id": 728,
    "text": "if not openDocuments[id].filePath then\r\n            local ret = wx.wxMessageBox(\"You must save the program before running it.\\nPress cancel to abort running.\",\r\n                                         \"Save file?\",  wx.wxOK + wx.wxCANCEL + wx.wxCENTRE, frame)\r\n            if ret == wx.wxOK then\r\n                saved = SaveFileAs(editor)\r\n            end\r\n        else\r\n            saved = SaveFile(editor, openDocuments[id].filePath)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 729,
    "text": "local ret = wx.wxMessageBox(\"You must save the program before running it.\\nPress cancel to abort running.\",\r\n                                         \"Save file?\",  wx.wxOK + wx.wxCANCEL + wx.wxCENTRE, frame)",
    "type": "statement:localassign"
  }, {
    "id": 730,
    "text": "if ret == wx.wxOK then\r\n                saved = SaveFileAs(editor)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 731,
    "text": "saved = SaveFileAs(editor)",
    "type": "statement:assign"
  }, {
    "id": 732,
    "text": "saved = SaveFile(editor, openDocuments[id].filePath)",
    "type": "statement:assign"
  }, {
    "id": 733,
    "text": "if saved then\r\n            openDocuments[id].isModified = false\r\n        else\r\n            return false -- not saved\r\n        end",
    "type": "statement:if"
  }, {
    "id": 734,
    "text": "openDocuments[id].isModified = false",
    "type": "statement:assign"
  }, {
    "id": 735,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 736,
    "text": "function NextDebuggerPort()\r\n    -- limit the number if ports we use, for people who need to open\r\n    -- their firewall\r\n    debuggerPortNumber = debuggerPortNumber + 1\r\n    if (debuggerPortNumber > 1559) then\r\n        debuggerPortNumber = 1551\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 737,
    "text": "debuggerPortNumber = debuggerPortNumber + 1",
    "type": "statement:assign"
  }, {
    "id": 738,
    "text": "if (debuggerPortNumber > 1559) then\r\n        debuggerPortNumber = 1551\r\n    end",
    "type": "statement:if"
  }, {
    "id": 739,
    "text": "debuggerPortNumber = 1551",
    "type": "statement:assign"
  }, {
    "id": 740,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 741,
    "text": "function CreateDebuggerServer()\r\n    if (debuggerServer) then\r\n        -- we just delete it here, but this shouldn't happen\r\n        debugger_destroy = 0\r\n        local ds = debuggerServer\r\n        debuggerServer = nil\r\n        ds:Reset()\r\n        ds:StopServer()\r\n        ds:delete()\r\n    end\r\n\r\n    debuggee_running = false\r\n    debuggerServer = wxlua.wxLuaDebuggerServer(debuggerPortNumber)\r\n\r\n    debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_DEBUGGEE_CONNECTED,\r\n        function (event)\r\n            local ok = false\r\n            -- FIXME why would you want to run all the notebook pages?\r\n            --for id, document in pairs(openDocuments) do\r\n                local editor     = GetEditor() -- MUST use document.editor userdata!\r\n                local document   = openDocuments[editor:GetId()]\r\n                local editor     = document.editor\r\n                local editorText = editor:GetText()\r\n                local filePath   = MakeDebugFileName(editor, document.filePath)\r\n                ok = debuggerServer:Run(filePath, editorText)\r\n\r\n                local nextLine = editor:MarkerNext(0, BREAKPOINT_MARKER_VALUE)\r\n                while ok and (nextLine ~= -1) do\r\n                    ok = debuggerServer:AddBreakPoint(filePath, nextLine)\r\n                    nextLine = editor:MarkerNext(nextLine + 1, BREAKPOINT_MARKER_VALUE)\r\n                end\r\n            --end\r\n\r\n            if ok then\r\n                ok = debuggerServer:Step()\r\n            end\r\n            debuggee_running = ok\r\n\r\n            UpdateUIMenuItems()\r\n\r\n            if ok then\r\n                DisplayOutput(\"Client connected ok.\\n\")\r\n            else\r\n                DisplayOutput(\"Error connecting to client.\\n\")\r\n            end\r\n        end)\r\n\r\n    debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_DEBUGGEE_DISCONNECTED,\r\n        function (event)\r\n            DisplayOutput(\"Debug server disconnected.\\n\")\r\n            DisplayOutput(event:GetMessage()..\"\\n\\n\")\r\n            DestroyDebuggerServer()\r\n        end)\r\n\r\n    local function DebuggerIgnoreFile(fileName)\r\n        local ignoreFlag = false\r\n        for idx, ignoreFile in pairs(ignoredFilesList) do\r\n            if string.upper(ignoreFile) == string.upper(fileName) then\r\n                ignoreFlag = true\r\n            end\r\n        end\r\n        return ignoreFlag\r\n    end\r\n\r\n    debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_BREAK,\r\n        function (event)\r\n            if exitingProgram then return end\r\n            local line = event:GetLineNumber()\r\n            local eventFileName = event:GetFileName()\r\n\r\n            if string.sub(eventFileName, 1, 1) == '@' then -- FIXME what is this?\r\n                eventFileName = string.sub(eventFileName, 2, -1)\r\n                if wx.wxIsAbsolutePath(eventFileName) == false then\r\n                    eventFileName = wx.wxGetCwd()..\"/\"..eventFileName\r\n                end\r\n            end\r\n            if wx.__WXMSW__ then\r\n                eventFileName = wx.wxUnix2DosFilename(eventFileName)\r\n            end\r\n            local fileFound = false\r\n            DisplayOutput(\"At Breakpoint line: \"..tostring(line)..\" file: \"..eventFileName..\"\\n\")\r\n            for id, document in pairs(openDocuments) do\r\n                local editor   = document.editor\r\n                local filePath = MakeDebugFileName(editor, document.filePath)\r\n                -- for running in cygwin, use same type of separators\r\n                filePath = string.gsub(filePath, \"\\\\\", \"/\")\r\n                local eventFileName_ = string.gsub(eventFileName, \"\\\\\", \"/\")\r\n                if string.upper(filePath) == string.upper(eventFileName_) then\r\n                    local selection = document.index\r\n                    notebook:SetSelection(selection)\r\n                    SetEditorSelection(selection)\r\n                    editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                    editor:EnsureVisibleEnforcePolicy(line)\r\n                    fileFound = true\r\n                    break\r\n                end\r\n            end\r\n            -- if don't ignore file and its not in the notebook, ask to load\r\n            if not DebuggerIgnoreFile(eventFileName) then\r\n                if not fileFound then\r\n                    local fileDialog = wx.wxFileDialog(frame,\r\n                                                       \"Select file for debugging\",\r\n                                                       \"\",\r\n                                                       eventFileName,\r\n                                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n                    if fileDialog:ShowModal() == wx.wxID_OK then\r\n                        local editor = LoadFile(fileDialog:GetPath(), nil, true)\r\n                        if editor then\r\n                            editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                            editor:EnsureVisibleEnforcePolicy(line)\r\n                            editor:SetReadOnly(true)\r\n                            fileFound = true\r\n                        end\r\n                    end\r\n                    fileDialog:Destroy()\r\n                end\r\n                if not fileFound then -- they canceled opening the file\r\n                    table.insert(ignoredFilesList, eventFileName)\r\n                end\r\n            end\r\n\r\n            if fileFound then\r\n                debuggee_running = false\r\n                ProcessWatches()\r\n            elseif debuggerServer then\r\n                debuggerServer:Continue()\r\n                debuggee_running = true\r\n            end\r\n        end)\r\n\r\n    debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_PRINT,\r\n        function (event)\r\n            DisplayOutput(event:GetMessage()..\"\\n\")\r\n        end)\r\n\r\n    debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_ERROR,\r\n        function (event)\r\n            DisplayOutput(\"wxLua ERROR: \"..event:GetMessage()..\"\\n\\n\")\r\n        end)\r\n\r\n    debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_EXIT,\r\n        function (event)\r\n            ClearAllCurrentLineMarkers()\r\n\r\n            if debuggerServer then\r\n                DestroyDebuggerServer()\r\n            end\r\n            SetAllEditorsReadOnly(false)\r\n            ignoredFilesList = {}\r\n        end)\r\n\r\n    debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_EVALUATE_EXPR,\r\n        function (event)\r\n            if watchListCtrl then\r\n                watchListCtrl:SetItem(event:GetReference(),\r\n                                      1,\r\n                                      event:GetMessage())\r\n            end\r\n        end)\r\n\r\n    local ok = debuggerServer:StartServer()\r\n    if not ok then\r\n        DestroyDebuggerServer()\r\n        DisplayOutput(\"Error starting the debug server.\\n\")\r\n        return nil\r\n    end\r\n\r\n    return debuggerServer\r\nend",
    "type": "function"
  }, {
    "id": 742,
    "text": "if (debuggerServer) then\r\n        -- we just delete it here, but this shouldn't happen\r\n        debugger_destroy = 0\r\n        local ds = debuggerServer\r\n        debuggerServer = nil\r\n        ds:Reset()\r\n        ds:StopServer()\r\n        ds:delete()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 743,
    "text": "debugger_destroy = 0",
    "type": "statement:assign"
  }, {
    "id": 744,
    "text": "local ds = debuggerServer",
    "type": "statement:localassign"
  }, {
    "id": 745,
    "text": "debuggerServer = nil",
    "type": "statement:assign"
  }, {
    "id": 746,
    "text": "ds:Reset()",
    "type": "statement:functioncall"
  }, {
    "id": 747,
    "text": "ds:StopServer()",
    "type": "statement:functioncall"
  }, {
    "id": 748,
    "text": "ds:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 749,
    "text": "debuggee_running = false",
    "type": "statement:assign"
  }, {
    "id": 750,
    "text": "debuggerServer = wxlua.wxLuaDebuggerServer(debuggerPortNumber)",
    "type": "statement:assign"
  }, {
    "id": 751,
    "text": "debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_DEBUGGEE_CONNECTED,\r\n        function (event)\r\n            local ok = false\r\n            -- FIXME why would you want to run all the notebook pages?\r\n            --for id, document in pairs(openDocuments) do\r\n                local editor     = GetEditor() -- MUST use document.editor userdata!\r\n                local document   = openDocuments[editor:GetId()]\r\n                local editor     = document.editor\r\n                local editorText = editor:GetText()\r\n                local filePath   = MakeDebugFileName(editor, document.filePath)\r\n                ok = debuggerServer:Run(filePath, editorText)\r\n\r\n                local nextLine = editor:MarkerNext(0, BREAKPOINT_MARKER_VALUE)\r\n                while ok and (nextLine ~= -1) do\r\n                    ok = debuggerServer:AddBreakPoint(filePath, nextLine)\r\n                    nextLine = editor:MarkerNext(nextLine + 1, BREAKPOINT_MARKER_VALUE)\r\n                end\r\n            --end\r\n\r\n            if ok then\r\n                ok = debuggerServer:Step()\r\n            end\r\n            debuggee_running = ok\r\n\r\n            UpdateUIMenuItems()\r\n\r\n            if ok then\r\n                DisplayOutput(\"Client connected ok.\\n\")\r\n            else\r\n                DisplayOutput(\"Error connecting to client.\\n\")\r\n            end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 752,
    "text": "local ok = false",
    "type": "statement:localassign"
  }, {
    "id": 753,
    "text": "local editor     = GetEditor()",
    "type": "statement:localassign"
  }, {
    "id": 754,
    "text": "local document   = openDocuments[editor:GetId()]",
    "type": "statement:localassign"
  }, {
    "id": 755,
    "text": "local editor     = document.editor",
    "type": "statement:localassign"
  }, {
    "id": 756,
    "text": "local filePath   = MakeDebugFileName(editor, document.filePath)",
    "type": "statement:localassign"
  }, {
    "id": 757,
    "text": "ok = debuggerServer:Run(filePath, editorText)",
    "type": "statement:assign"
  }, {
    "id": 758,
    "text": "local nextLine = editor:MarkerNext(0, BREAKPOINT_MARKER_VALUE)",
    "type": "statement:localassign"
  }, {
    "id": 759,
    "text": "while ok and (nextLine ~= -1) do\r\n                    ok = debuggerServer:AddBreakPoint(filePath, nextLine)\r\n                    nextLine = editor:MarkerNext(nextLine + 1, BREAKPOINT_MARKER_VALUE)\r\n                end",
    "type": "statement:while"
  }, {
    "id": 760,
    "text": "ok = debuggerServer:AddBreakPoint(filePath, nextLine)",
    "type": "statement:assign"
  }, {
    "id": 761,
    "text": "nextLine = editor:MarkerNext(nextLine + 1, BREAKPOINT_MARKER_VALUE)",
    "type": "statement:assign"
  }, {
    "id": 762,
    "text": "if ok then\r\n                ok = debuggerServer:Step()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 763,
    "text": "ok = debuggerServer:Step()",
    "type": "statement:assign"
  }, {
    "id": 764,
    "text": "debuggee_running = ok",
    "type": "statement:assign"
  }, {
    "id": 765,
    "text": "UpdateUIMenuItems()",
    "type": "statement:functioncall"
  }, {
    "id": 766,
    "text": "if ok then\r\n                DisplayOutput(\"Client connected ok.\\n\")\r\n            else\r\n                DisplayOutput(\"Error connecting to client.\\n\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 767,
    "text": "DisplayOutput(\"Client connected ok.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 768,
    "text": "DisplayOutput(\"Error connecting to client.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 769,
    "text": "debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_DEBUGGEE_DISCONNECTED,\r\n        function (event)\r\n            DisplayOutput(\"Debug server disconnected.\\n\")\r\n            DisplayOutput(event:GetMessage()..\"\\n\\n\")\r\n            DestroyDebuggerServer()\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 770,
    "text": "DisplayOutput(\"Debug server disconnected.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 771,
    "text": "DisplayOutput(event:GetMessage()..\"\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 772,
    "text": "DestroyDebuggerServer()",
    "type": "statement:functioncall"
  }, {
    "id": 773,
    "text": "local function DebuggerIgnoreFile(fileName)\r\n        local ignoreFlag = false\r\n        for idx, ignoreFile in pairs(ignoredFilesList) do\r\n            if string.upper(ignoreFile) == string.upper(fileName) then\r\n                ignoreFlag = true\r\n            end\r\n        end\r\n        return ignoreFlag\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 774,
    "text": "local ignoreFlag = false",
    "type": "statement:localassign"
  }, {
    "id": 775,
    "text": "for idx, ignoreFile in pairs(ignoredFilesList) do\r\n            if string.upper(ignoreFile) == string.upper(fileName) then\r\n                ignoreFlag = true\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 776,
    "text": "if string.upper(ignoreFile) == string.upper(fileName) then\r\n                ignoreFlag = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 777,
    "text": "ignoreFlag = true",
    "type": "statement:assign"
  }, {
    "id": 778,
    "text": "debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_BREAK,\r\n        function (event)\r\n            if exitingProgram then return end\r\n            local line = event:GetLineNumber()\r\n            local eventFileName = event:GetFileName()\r\n\r\n            if string.sub(eventFileName, 1, 1) == '@' then -- FIXME what is this?\r\n                eventFileName = string.sub(eventFileName, 2, -1)\r\n                if wx.wxIsAbsolutePath(eventFileName) == false then\r\n                    eventFileName = wx.wxGetCwd()..\"/\"..eventFileName\r\n                end\r\n            end\r\n            if wx.__WXMSW__ then\r\n                eventFileName = wx.wxUnix2DosFilename(eventFileName)\r\n            end\r\n            local fileFound = false\r\n            DisplayOutput(\"At Breakpoint line: \"..tostring(line)..\" file: \"..eventFileName..\"\\n\")\r\n            for id, document in pairs(openDocuments) do\r\n                local editor   = document.editor\r\n                local filePath = MakeDebugFileName(editor, document.filePath)\r\n                -- for running in cygwin, use same type of separators\r\n                filePath = string.gsub(filePath, \"\\\\\", \"/\")\r\n                local eventFileName_ = string.gsub(eventFileName, \"\\\\\", \"/\")\r\n                if string.upper(filePath) == string.upper(eventFileName_) then\r\n                    local selection = document.index\r\n                    notebook:SetSelection(selection)\r\n                    SetEditorSelection(selection)\r\n                    editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                    editor:EnsureVisibleEnforcePolicy(line)\r\n                    fileFound = true\r\n                    break\r\n                end\r\n            end\r\n            -- if don't ignore file and its not in the notebook, ask to load\r\n            if not DebuggerIgnoreFile(eventFileName) then\r\n                if not fileFound then\r\n                    local fileDialog = wx.wxFileDialog(frame,\r\n                                                       \"Select file for debugging\",\r\n                                                       \"\",\r\n                                                       eventFileName,\r\n                                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n                    if fileDialog:ShowModal() == wx.wxID_OK then\r\n                        local editor = LoadFile(fileDialog:GetPath(), nil, true)\r\n                        if editor then\r\n                            editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                            editor:EnsureVisibleEnforcePolicy(line)\r\n                            editor:SetReadOnly(true)\r\n                            fileFound = true\r\n                        end\r\n                    end\r\n                    fileDialog:Destroy()\r\n                end\r\n                if not fileFound then -- they canceled opening the file\r\n                    table.insert(ignoredFilesList, eventFileName)\r\n                end\r\n            end\r\n\r\n            if fileFound then\r\n                debuggee_running = false\r\n                ProcessWatches()\r\n            elseif debuggerServer then\r\n                debuggerServer:Continue()\r\n                debuggee_running = true\r\n            end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 779,
    "text": "if exitingProgram then return end",
    "type": "statement:if"
  }, {
    "id": 780,
    "text": "local line = event:GetLineNumber()",
    "type": "statement:localassign"
  }, {
    "id": 781,
    "text": "local eventFileName = event:GetFileName()",
    "type": "statement:localassign"
  }, {
    "id": 782,
    "text": "if string.sub(eventFileName, 1, 1) == '@' then -- FIXME what is this?\r\n                eventFileName = string.sub(eventFileName, 2, -1)\r\n                if wx.wxIsAbsolutePath(eventFileName) == false then\r\n                    eventFileName = wx.wxGetCwd()..\"/\"..eventFileName\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 783,
    "text": "eventFileName = string.sub(eventFileName, 2, -1)",
    "type": "statement:assign"
  }, {
    "id": 784,
    "text": "if wx.wxIsAbsolutePath(eventFileName) == false then\r\n                    eventFileName = wx.wxGetCwd()..\"/\"..eventFileName\r\n                end",
    "type": "statement:if"
  }, {
    "id": 785,
    "text": "eventFileName = wx.wxGetCwd()..\"/\"..eventFileName",
    "type": "statement:assign"
  }, {
    "id": 786,
    "text": "if wx.__WXMSW__ then\r\n                eventFileName = wx.wxUnix2DosFilename(eventFileName)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 787,
    "text": "eventFileName = wx.wxUnix2DosFilename(eventFileName)",
    "type": "statement:assign"
  }, {
    "id": 788,
    "text": "local fileFound = false",
    "type": "statement:localassign"
  }, {
    "id": 789,
    "text": "DisplayOutput(\"At Breakpoint line: \"..tostring(line)..\" file: \"..eventFileName..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 790,
    "text": "for id, document in pairs(openDocuments) do\r\n                local editor   = document.editor\r\n                local filePath = MakeDebugFileName(editor, document.filePath)\r\n                -- for running in cygwin, use same type of separators\r\n                filePath = string.gsub(filePath, \"\\\\\", \"/\")\r\n                local eventFileName_ = string.gsub(eventFileName, \"\\\\\", \"/\")\r\n                if string.upper(filePath) == string.upper(eventFileName_) then\r\n                    local selection = document.index\r\n                    notebook:SetSelection(selection)\r\n                    SetEditorSelection(selection)\r\n                    editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                    editor:EnsureVisibleEnforcePolicy(line)\r\n                    fileFound = true\r\n                    break\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 791,
    "text": "local filePath = MakeDebugFileName(editor, document.filePath)",
    "type": "statement:localassign"
  }, {
    "id": 792,
    "text": "filePath = string.gsub(filePath, \"\\\\\", \"/\")",
    "type": "statement:assign"
  }, {
    "id": 793,
    "text": "local eventFileName_ = string.gsub(eventFileName, \"\\\\\", \"/\")",
    "type": "statement:localassign"
  }, {
    "id": 794,
    "text": "if string.upper(filePath) == string.upper(eventFileName_) then\r\n                    local selection = document.index\r\n                    notebook:SetSelection(selection)\r\n                    SetEditorSelection(selection)\r\n                    editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                    editor:EnsureVisibleEnforcePolicy(line)\r\n                    fileFound = true\r\n                    break\r\n                end",
    "type": "statement:if"
  }, {
    "id": 795,
    "text": "local selection = document.index",
    "type": "statement:localassign"
  }, {
    "id": 796,
    "text": "notebook:SetSelection(selection)",
    "type": "statement:functioncall"
  }, {
    "id": 797,
    "text": "SetEditorSelection(selection)",
    "type": "statement:functioncall"
  }, {
    "id": 798,
    "text": "editor:MarkerAdd(line, CURRENT_LINE_MARKER)",
    "type": "statement:functioncall"
  }, {
    "id": 799,
    "text": "fileFound = true",
    "type": "statement:assign"
  }, {
    "id": 800,
    "text": "if not DebuggerIgnoreFile(eventFileName) then\r\n                if not fileFound then\r\n                    local fileDialog = wx.wxFileDialog(frame,\r\n                                                       \"Select file for debugging\",\r\n                                                       \"\",\r\n                                                       eventFileName,\r\n                                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n                    if fileDialog:ShowModal() == wx.wxID_OK then\r\n                        local editor = LoadFile(fileDialog:GetPath(), nil, true)\r\n                        if editor then\r\n                            editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                            editor:EnsureVisibleEnforcePolicy(line)\r\n                            editor:SetReadOnly(true)\r\n                            fileFound = true\r\n                        end\r\n                    end\r\n                    fileDialog:Destroy()\r\n                end\r\n                if not fileFound then -- they canceled opening the file\r\n                    table.insert(ignoredFilesList, eventFileName)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 801,
    "text": "if not fileFound then\r\n                    local fileDialog = wx.wxFileDialog(frame,\r\n                                                       \"Select file for debugging\",\r\n                                                       \"\",\r\n                                                       eventFileName,\r\n                                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n                    if fileDialog:ShowModal() == wx.wxID_OK then\r\n                        local editor = LoadFile(fileDialog:GetPath(), nil, true)\r\n                        if editor then\r\n                            editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                            editor:EnsureVisibleEnforcePolicy(line)\r\n                            editor:SetReadOnly(true)\r\n                            fileFound = true\r\n                        end\r\n                    end\r\n                    fileDialog:Destroy()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 802,
    "text": "local fileDialog = wx.wxFileDialog(frame,\r\n                                                       \"Select file for debugging\",\r\n                                                       \"\",\r\n                                                       eventFileName,\r\n                                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)",
    "type": "statement:localassign"
  }, {
    "id": 803,
    "text": "if fileDialog:ShowModal() == wx.wxID_OK then\r\n                        local editor = LoadFile(fileDialog:GetPath(), nil, true)\r\n                        if editor then\r\n                            editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                            editor:EnsureVisibleEnforcePolicy(line)\r\n                            editor:SetReadOnly(true)\r\n                            fileFound = true\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 804,
    "text": "local editor = LoadFile(fileDialog:GetPath(), nil, true)",
    "type": "statement:localassign"
  }, {
    "id": 805,
    "text": "if editor then\r\n                            editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                            editor:EnsureVisibleEnforcePolicy(line)\r\n                            editor:SetReadOnly(true)\r\n                            fileFound = true\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 806,
    "text": "editor:SetReadOnly(true)",
    "type": "statement:functioncall"
  }, {
    "id": 807,
    "text": "if not fileFound then -- they canceled opening the file\r\n                    table.insert(ignoredFilesList, eventFileName)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 808,
    "text": "table.insert(ignoredFilesList, eventFileName)",
    "type": "statement:functioncall"
  }, {
    "id": 809,
    "text": "if fileFound then\r\n                debuggee_running = false\r\n                ProcessWatches()\r\n            elseif debuggerServer then\r\n                debuggerServer:Continue()\r\n                debuggee_running = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 810,
    "text": "debuggerServer:Continue()",
    "type": "statement:functioncall"
  }, {
    "id": 811,
    "text": "debuggee_running = true",
    "type": "statement:assign"
  }, {
    "id": 812,
    "text": "debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_PRINT,\r\n        function (event)\r\n            DisplayOutput(event:GetMessage()..\"\\n\")\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 813,
    "text": "DisplayOutput(event:GetMessage()..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 814,
    "text": "debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_ERROR,\r\n        function (event)\r\n            DisplayOutput(\"wxLua ERROR: \"..event:GetMessage()..\"\\n\\n\")\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 815,
    "text": "DisplayOutput(\"wxLua ERROR: \"..event:GetMessage()..\"\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 816,
    "text": "debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_EXIT,\r\n        function (event)\r\n            ClearAllCurrentLineMarkers()\r\n\r\n            if debuggerServer then\r\n                DestroyDebuggerServer()\r\n            end\r\n            SetAllEditorsReadOnly(false)\r\n            ignoredFilesList = {}\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 817,
    "text": "ClearAllCurrentLineMarkers()",
    "type": "statement:functioncall"
  }, {
    "id": 818,
    "text": "if debuggerServer then\r\n                DestroyDebuggerServer()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 819,
    "text": "SetAllEditorsReadOnly(false)",
    "type": "statement:functioncall"
  }, {
    "id": 820,
    "text": "ignoredFilesList = {}",
    "type": "statement:assign"
  }, {
    "id": 821,
    "text": "debuggerServer:Connect(wxlua.wxEVT_WXLUA_DEBUGGER_EVALUATE_EXPR,\r\n        function (event)\r\n            if watchListCtrl then\r\n                watchListCtrl:SetItem(event:GetReference(),\r\n                                      1,\r\n                                      event:GetMessage())\r\n            end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 822,
    "text": "if watchListCtrl then\r\n                watchListCtrl:SetItem(event:GetReference(),\r\n                                      1,\r\n                                      event:GetMessage())\r\n            end",
    "type": "statement:if"
  }, {
    "id": 823,
    "text": "watchListCtrl:SetItem(event:GetReference(),\r\n                                      1,\r\n                                      event:GetMessage())",
    "type": "statement:functioncall"
  }, {
    "id": 824,
    "text": "local ok = debuggerServer:StartServer()",
    "type": "statement:localassign"
  }, {
    "id": 825,
    "text": "if not ok then\r\n        DestroyDebuggerServer()\r\n        DisplayOutput(\"Error starting the debug server.\\n\")\r\n        return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 826,
    "text": "DisplayOutput(\"Error starting the debug server.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 827,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 828,
    "text": "local function DebuggerIgnoreFile(fileName)\r\n        local ignoreFlag = false\r\n        for idx, ignoreFile in pairs(ignoredFilesList) do\r\n            if string.upper(ignoreFile) == string.upper(fileName) then\r\n                ignoreFlag = true\r\n            end\r\n        end\r\n        return ignoreFlag\r\n    end",
    "type": "function"
  }, {
    "id": 829,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 830,
    "text": "function DestroyDebuggerServer()\r\n    -- nil debuggerServer so it won't be used and set flag to destroy it in idle\r\n    if (debuggerServer) then\r\n        debuggerServer_ = debuggerServer\r\n        debuggerServer = nil\r\n        debugger_destroy = 1 -- set > 0 to initiate deletion in idle\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 831,
    "text": "if (debuggerServer) then\r\n        debuggerServer_ = debuggerServer\r\n        debuggerServer = nil\r\n        debugger_destroy = 1 -- set > 0 to initiate deletion in idle\r\n    end",
    "type": "statement:if"
  }, {
    "id": 832,
    "text": "debuggerServer_ = debuggerServer",
    "type": "statement:assign"
  }, {
    "id": 833,
    "text": "debugger_destroy = 1",
    "type": "statement:assign"
  }, {
    "id": 834,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 835,
    "text": "function ClearOutput(event)\r\n    errorLog:SetReadOnly(false)\r\n    errorLog:ClearAll()\r\n    errorLog:SetReadOnly(true)\r\nend",
    "type": "function"
  }, {
    "id": 836,
    "text": "errorLog:ClearAll()",
    "type": "statement:functioncall"
  }, {
    "id": 837,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 838,
    "text": "function DisplayAbout(event)\r\n    local page = [[\r\n        <html>\r\n        <body bgcolor = \"#FFFFFF\">\r\n        <table cellspacing = 4 cellpadding = 4 width = \"100%\">\r\n          <tr>\r\n            <td bgcolor = \"#202020\">\r\n            <center>\r\n                <font size = +2 color = \"#FFFFFF\"><br><b>]]..\r\n                    wxlua.wxLUA_VERSION_STRING..[[</b></font><br>\r\n                <font size = +1 color = \"#FFFFFF\">built with</font><br>\r\n                <font size = +2 color = \"#FFFFFF\"><b>]]..\r\n                    wx.wxVERSION_STRING..[[</b></font>\r\n            </center>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td bgcolor = \"#DCDCDC\">\r\n            <b>Copyright (C) 2002-2005 Lomtick Software</b>\r\n            <p>\r\n            <font size=-1>\r\n              <table cellpadding = 0 cellspacing = 0 width = \"100%\">\r\n                <tr>\r\n                  <td width = \"65%\">\r\n                    J. Winwood (luascript@thersgb.net)<br>\r\n                    John Labenski<p>\r\n                  </td>\r\n                  <td valign = top>\r\n                    <img src = \"memory:wxLua\">\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            <font size = 1>\r\n                Licenced under wxWindows Library Licence, Version 3.\r\n            </font>\r\n            </font>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n        </body>\r\n        </html>\r\n    ]]\r\n\r\n    local dlg = wx.wxDialog(frame, wx.wxID_ANY, \"About wxLua IDE\")\r\n\r\n    local html = wx.wxLuaHtmlWindow(dlg, wx.wxID_ANY,\r\n                                    wx.wxDefaultPosition, wx.wxSize(360, 150),\r\n                                    wx.wxHW_SCROLLBAR_NEVER)\r\n    local line = wx.wxStaticLine(dlg, wx.wxID_ANY)\r\n    local button = wx.wxButton(dlg, wx.wxID_OK, \"OK\")\r\n\r\n    button:SetDefault()\r\n\r\n    html:SetBorders(0)\r\n    html:SetPage(page)\r\n    html:SetSize(html:GetInternalRepresentation():GetWidth(),\r\n                 html:GetInternalRepresentation():GetHeight())\r\n\r\n    local topsizer = wx.wxBoxSizer(wx.wxVERTICAL)\r\n    topsizer:Add(html, 1, wx.wxALL, 10)\r\n    topsizer:Add(line, 0, wx.wxEXPAND + wx.wxLEFT + wx.wxRIGHT, 10)\r\n    topsizer:Add(button, 0, wx.wxALL + wx.wxALIGN_RIGHT, 10)\r\n\r\n    dlg:SetAutoLayout(true)\r\n    dlg:SetSizer(topsizer)\r\n    topsizer:Fit(dlg)\r\n\r\n    dlg:ShowModal()\r\n    dlg:Destroy()\r\nend",
    "type": "function"
  }, {
    "id": 839,
    "text": "local page = [[\r\n        <html>\r\n        <body bgcolor = \"#FFFFFF\">\r\n        <table cellspacing = 4 cellpadding = 4 width = \"100%\">\r\n          <tr>\r\n            <td bgcolor = \"#202020\">\r\n            <center>\r\n                <font size = +2 color = \"#FFFFFF\"><br><b>]]..\r\n                    wxlua.wxLUA_VERSION_STRING..[[</b></font><br>\r\n                <font size = +1 color = \"#FFFFFF\">built with</font><br>\r\n                <font size = +2 color = \"#FFFFFF\"><b>]]..\r\n                    wx.wxVERSION_STRING..[[</b></font>\r\n            </center>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td bgcolor = \"#DCDCDC\">\r\n            <b>Copyright (C) 2002-2005 Lomtick Software</b>\r\n            <p>\r\n            <font size=-1>\r\n              <table cellpadding = 0 cellspacing = 0 width = \"100%\">\r\n                <tr>\r\n                  <td width = \"65%\">\r\n                    J. Winwood (luascript@thersgb.net)<br>\r\n                    John Labenski<p>\r\n                  </td>\r\n                  <td valign = top>\r\n                    <img src = \"memory:wxLua\">\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            <font size = 1>\r\n                Licenced under wxWindows Library Licence, Version 3.\r\n            </font>\r\n            </font>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n        </body>\r\n        </html>\r\n    ]]",
    "type": "statement:localassign"
  }, {
    "id": 840,
    "text": "local dlg = wx.wxDialog(frame, wx.wxID_ANY, \"About wxLua IDE\")",
    "type": "statement:localassign"
  }, {
    "id": 841,
    "text": "local html = wx.wxLuaHtmlWindow(dlg, wx.wxID_ANY,\r\n                                    wx.wxDefaultPosition, wx.wxSize(360, 150),\r\n                                    wx.wxHW_SCROLLBAR_NEVER)",
    "type": "statement:localassign"
  }, {
    "id": 842,
    "text": "local line = wx.wxStaticLine(dlg, wx.wxID_ANY)",
    "type": "statement:localassign"
  }, {
    "id": 843,
    "text": "local button = wx.wxButton(dlg, wx.wxID_OK, \"OK\")",
    "type": "statement:localassign"
  }, {
    "id": 844,
    "text": "button:SetDefault()",
    "type": "statement:functioncall"
  }, {
    "id": 845,
    "text": "html:SetBorders(0)",
    "type": "statement:functioncall"
  }, {
    "id": 846,
    "text": "html:SetPage(page)",
    "type": "statement:functioncall"
  }, {
    "id": 847,
    "text": "html:SetSize(html:GetInternalRepresentation():GetWidth(),\r\n                 html:GetInternalRepresentation():GetHeight())",
    "type": "statement:functioncall"
  }, {
    "id": 848,
    "text": "local topsizer = wx.wxBoxSizer(wx.wxVERTICAL)",
    "type": "statement:localassign"
  }, {
    "id": 849,
    "text": "topsizer:Add(html, 1, wx.wxALL, 10)",
    "type": "statement:functioncall"
  }, {
    "id": 850,
    "text": "topsizer:Add(line, 0, wx.wxEXPAND + wx.wxLEFT + wx.wxRIGHT, 10)",
    "type": "statement:functioncall"
  }, {
    "id": 851,
    "text": "topsizer:Add(button, 0, wx.wxALL + wx.wxALIGN_RIGHT, 10)",
    "type": "statement:functioncall"
  }, {
    "id": 852,
    "text": "dlg:SetAutoLayout(true)",
    "type": "statement:functioncall"
  }, {
    "id": 853,
    "text": "dlg:SetSizer(topsizer)",
    "type": "statement:functioncall"
  }, {
    "id": 854,
    "text": "topsizer:Fit(dlg)",
    "type": "statement:functioncall"
  }, {
    "id": 855,
    "text": "dlg:ShowModal()",
    "type": "statement:functioncall"
  }, {
    "id": 856,
    "text": "dlg:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 857,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 858,
    "text": "function CloseWindow(event)\r\n    exitingProgram = true -- don't handle focus events\r\n\r\n    if not SaveOnExit(event:CanVeto()) then\r\n        event:Veto()\r\n        exitingProgram = false\r\n        return\r\n    end\r\n\r\n    if debuggerServer then\r\n        local ds = debuggerServer\r\n        debuggerServer = nil\r\n        --ds:Reset()\r\n        ds:KillDebuggee()\r\n        ds:delete()\r\n    end\r\n    debuggee_running = false\r\n\r\n    ConfigSaveFramePosition(frame, \"MainFrame\")\r\n    config:delete() -- always delete the config\r\n    event:Skip()\r\n    CloseWatchWindow()\r\nend",
    "type": "function"
  }, {
    "id": 859,
    "text": "exitingProgram = true",
    "type": "statement:assign"
  }, {
    "id": 860,
    "text": "if not SaveOnExit(event:CanVeto()) then\r\n        event:Veto()\r\n        exitingProgram = false\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 861,
    "text": "event:Veto()",
    "type": "statement:functioncall"
  }, {
    "id": 862,
    "text": "exitingProgram = false",
    "type": "statement:assign"
  }, {
    "id": 863,
    "text": "if debuggerServer then\r\n        local ds = debuggerServer\r\n        debuggerServer = nil\r\n        --ds:Reset()\r\n        ds:KillDebuggee()\r\n        ds:delete()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 864,
    "text": "ds:KillDebuggee()",
    "type": "statement:functioncall"
  }, {
    "id": 865,
    "text": "ConfigSaveFramePosition(frame, \"MainFrame\")",
    "type": "statement:functioncall"
  }, {
    "id": 866,
    "text": "config:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 867,
    "text": "CloseWatchWindow()",
    "type": "statement:functioncall"
  }, {
    "id": 868,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 869,
    "text": "function (event)\r\n            if not exitingProgram then\r\n                SetEditorSelection(event:GetSelection())\r\n            end\r\n            event:Skip() -- skip to let page change\r\n        end",
    "type": "function"
  }, {
    "id": 870,
    "text": "if not exitingProgram then\r\n                SetEditorSelection(event:GetSelection())\r\n            end",
    "type": "statement:if"
  }, {
    "id": 871,
    "text": "SetEditorSelection(event:GetSelection())",
    "type": "statement:functioncall"
  }, {
    "id": 872,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 873,
    "text": "function (event)\r\n                local line = editor:LineFromPosition(event:GetPosition())\r\n                local margin = event:GetMargin()\r\n                if margin == 1 then\r\n                    ToggleDebugMarker(editor, line)\r\n                elseif margin == 2 then\r\n                    if wx.wxGetKeyState(wx.WXK_SHIFT) and wx.wxGetKeyState(wx.WXK_CONTROL) then\r\n                        FoldSome()\r\n                    else\r\n                        local level = editor:GetFoldLevel(line)\r\n                        if HasBit(level, wxstc.wxSTC_FOLDLEVELHEADERFLAG) then\r\n                            editor:ToggleFold(line)\r\n                        end\r\n                    end\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 874,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 875,
    "text": "function (event)\r\n                -- auto-indent\r\n                local ch = event:GetKey()\r\n                if (ch == char_CR) or (ch == char_LF) then\r\n                    local pos = editor:GetCurrentPos()\r\n                    local line = editor:LineFromPosition(pos)\r\n\r\n                    if (line > 0) and (editor:LineLength(line) == 0) then\r\n                        local indent = editor:GetLineIndentation(line - 1)\r\n                        if indent > 0 then\r\n                            editor:SetLineIndentation(line, indent)\r\n                            editor:GotoPos(pos + indent)\r\n                        end\r\n                    end\r\n                elseif autoCompleteEnable then -- code completion prompt\r\n                    local pos = editor:GetCurrentPos()\r\n                    local start_pos = editor:WordStartPosition(pos, true)\r\n                    -- must have \"wx.X\" otherwise too many items\r\n                    if (pos - start_pos > 0) and (start_pos > 2) then\r\n                        local range = editor:GetTextRange(start_pos-3, start_pos)\r\n                        if range == \"wx.\" then\r\n                            local commandEvent = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                                                                   ID_AUTOCOMPLETE)\r\n                            wx.wxPostEvent(frame, commandEvent)\r\n                        end\r\n                    end\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 876,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 877,
    "text": "function (event)\r\n                local pos = editor:GetCurrentPos()\r\n                local start_pos = editor:WordStartPosition(pos, true)\r\n                editor:SetSelection(start_pos, pos)\r\n                editor:ReplaceSelection(event:GetText())\r\n            end",
    "type": "function"
  }, {
    "id": 878,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 879,
    "text": "function (event)\r\n                SetDocumentModified(editor:GetId(), false)\r\n            end",
    "type": "function"
  }, {
    "id": 880,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 881,
    "text": "function (event)\r\n                SetDocumentModified(editor:GetId(), true)\r\n            end",
    "type": "function"
  }, {
    "id": 882,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 883,
    "text": "function (event)\r\n                UpdateStatusText(editor)\r\n            end",
    "type": "function"
  }, {
    "id": 884,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 885,
    "text": "function (event)\r\n                event:Skip()\r\n                if in_evt_focus or exitingProgram then return end\r\n                in_evt_focus = true\r\n                IsFileAlteredOnDisk(editor)\r\n                in_evt_focus = false\r\n            end",
    "type": "function"
  }, {
    "id": 886,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 887,
    "text": "function (event)\r\n                ConfigSaveFramePosition(watchWindow, \"WatchWindow\")\r\n                watchWindow = nil\r\n                watchListCtrl = nil\r\n                event:Skip()\r\n            end",
    "type": "function"
  }, {
    "id": 888,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 889,
    "text": "function (event)\r\n                local row = watchListCtrl:InsertItem(watchListCtrl:GetItemCount(), \"Expr\")\r\n                watchListCtrl:SetItem(row, 0, \"Expr\")\r\n                watchListCtrl:SetItem(row, 1, \"Value\")\r\n                watchListCtrl:EditLabel(row)\r\n            end",
    "type": "function"
  }, {
    "id": 890,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 891,
    "text": "function (event)\r\n                local row = FindSelectedWatchItem()\r\n                if row >= 0 then\r\n                    watchListCtrl:EditLabel(row)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 892,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 893,
    "text": "function (event)\r\n                event:Enable(watchListCtrl:GetSelectedItemCount() > 0)\r\n            end",
    "type": "function"
  }, {
    "id": 894,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 895,
    "text": "function (event)\r\n                local row = FindSelectedWatchItem()\r\n                if row >= 0 then\r\n                    watchListCtrl:DeleteItem(row)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 896,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 897,
    "text": "function (event)\r\n                event:Enable(watchListCtrl:GetSelectedItemCount() > 0)\r\n            end",
    "type": "function"
  }, {
    "id": 898,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 899,
    "text": "function (event)\r\n                ProcessWatches()\r\n            end",
    "type": "function"
  }, {
    "id": 900,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 901,
    "text": "function (event)\r\n                event:Enable(watchListCtrl:GetItemCount() > 0)\r\n            end",
    "type": "function"
  }, {
    "id": 902,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 903,
    "text": "function (event)\r\n                watchListCtrl:SetItem(event:GetIndex(), 0, event:GetText())\r\n                ProcessWatches()\r\n                event:Skip()\r\n            end",
    "type": "function"
  }, {
    "id": 904,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 905,
    "text": "function (event)\r\n            local editor   = GetEditor()\r\n            local id       = editor:GetId()\r\n            local filePath = openDocuments[id].filePath\r\n            SaveFile(editor, filePath)\r\n        end",
    "type": "function"
  }, {
    "id": 906,
    "text": "local editor   = GetEditor()",
    "type": "statement:localassign"
  }, {
    "id": 907,
    "text": "local filePath = openDocuments[id].filePath",
    "type": "statement:localassign"
  }, {
    "id": 908,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 909,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            if editor then\r\n                local id = editor:GetId()\r\n                if openDocuments[id] then\r\n                    event:Enable(openDocuments[id].isModified)\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 910,
    "text": "if editor then\r\n                local id = editor:GetId()\r\n                if openDocuments[id] then\r\n                    event:Enable(openDocuments[id].isModified)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 911,
    "text": "if openDocuments[id] then\r\n                    event:Enable(openDocuments[id].isModified)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 912,
    "text": "event:Enable(openDocuments[id].isModified)",
    "type": "statement:functioncall"
  }, {
    "id": 913,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 914,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            SaveFileAs(editor)\r\n        end",
    "type": "function"
  }, {
    "id": 915,
    "text": "SaveFileAs(editor)",
    "type": "statement:functioncall"
  }, {
    "id": 916,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 917,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            event:Enable(editor ~= nil)\r\n        end",
    "type": "function"
  }, {
    "id": 918,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 919,
    "text": "function (event)\r\n            SaveAll()\r\n        end",
    "type": "function"
  }, {
    "id": 920,
    "text": "SaveAll()",
    "type": "statement:functioncall"
  }, {
    "id": 921,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 922,
    "text": "function (event)\r\n            local atLeastOneModifiedDocument = false\r\n            for id, document in pairs(openDocuments) do\r\n                if document.isModified then\r\n                    atLeastOneModifiedDocument = true\r\n                    break\r\n                end\r\n            end\r\n            event:Enable(atLeastOneModifiedDocument)\r\n        end",
    "type": "function"
  }, {
    "id": 923,
    "text": "local atLeastOneModifiedDocument = false",
    "type": "statement:localassign"
  }, {
    "id": 924,
    "text": "for id, document in pairs(openDocuments) do\r\n                if document.isModified then\r\n                    atLeastOneModifiedDocument = true\r\n                    break\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 925,
    "text": "if document.isModified then\r\n                    atLeastOneModifiedDocument = true\r\n                    break\r\n                end",
    "type": "statement:if"
  }, {
    "id": 926,
    "text": "atLeastOneModifiedDocument = true",
    "type": "statement:assign"
  }, {
    "id": 927,
    "text": "event:Enable(atLeastOneModifiedDocument)",
    "type": "statement:functioncall"
  }, {
    "id": 928,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 929,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            local id     = editor:GetId()\r\n            if SaveModifiedDialog(editor, true) ~= wx.wxID_CANCEL then\r\n                RemovePage(openDocuments[id].index)\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 930,
    "text": "local id     = editor:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 931,
    "text": "if SaveModifiedDialog(editor, true) ~= wx.wxID_CANCEL then\r\n                RemovePage(openDocuments[id].index)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 932,
    "text": "RemovePage(openDocuments[id].index)",
    "type": "statement:functioncall"
  }, {
    "id": 933,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 934,
    "text": "function (event)\r\n            event:Enable((GetEditor() ~= nil) and (debuggerServer == nil))\r\n        end",
    "type": "function"
  }, {
    "id": 935,
    "text": "event:Enable((GetEditor() ~= nil) and (debuggerServer == nil))",
    "type": "statement:functioncall"
  }, {
    "id": 936,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 937,
    "text": "function (event)\r\n            if not SaveOnExit(true) then return end\r\n            frame:Close() -- will handle wxEVT_CLOSE_WINDOW\r\n            CloseWatchWindow()\r\n        end",
    "type": "function"
  }, {
    "id": 938,
    "text": "if not SaveOnExit(true) then return end",
    "type": "statement:if"
  }, {
    "id": 939,
    "text": "frame:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 940,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 941,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            -- buggy GTK clipboard runs eventloop and can generate asserts\r\n            event:Enable(editor and (wx.__WXGTK__ or editor:CanPaste()))\r\n        end",
    "type": "function"
  }, {
    "id": 942,
    "text": "event:Enable(editor and (wx.__WXGTK__ or editor:CanPaste()))",
    "type": "statement:functioncall"
  }, {
    "id": 943,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 944,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            event:Enable(editor and editor:CanUndo())\r\n        end",
    "type": "function"
  }, {
    "id": 945,
    "text": "event:Enable(editor and editor:CanUndo())",
    "type": "statement:functioncall"
  }, {
    "id": 946,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 947,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            event:Enable(editor and editor:CanRedo())\r\n        end",
    "type": "function"
  }, {
    "id": 948,
    "text": "event:Enable(editor and editor:CanRedo())",
    "type": "statement:functioncall"
  }, {
    "id": 949,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 950,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            if (editor == nil) then return end\r\n            local pos = editor:GetCurrentPos()\r\n            local start_pos = editor:WordStartPosition(pos, true)\r\n            -- must have \"wx.XX\" otherwise too many items\r\n            if (pos - start_pos > 2) and (start_pos > 2) then\r\n                local range = editor:GetTextRange(start_pos-3, start_pos)\r\n                if range == \"wx.\" then\r\n                    local key = editor:GetTextRange(start_pos, pos)\r\n                    local userList = CreateAutoCompList(key)\r\n                    if userList and string.len(userList) > 0 then\r\n                        editor:UserListShow(1, userList)\r\n                    end\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 951,
    "text": "if (editor == nil) then return end",
    "type": "statement:if"
  }, {
    "id": 952,
    "text": "if (pos - start_pos > 2) and (start_pos > 2) then\r\n                local range = editor:GetTextRange(start_pos-3, start_pos)\r\n                if range == \"wx.\" then\r\n                    local key = editor:GetTextRange(start_pos, pos)\r\n                    local userList = CreateAutoCompList(key)\r\n                    if userList and string.len(userList) > 0 then\r\n                        editor:UserListShow(1, userList)\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 953,
    "text": "if range == \"wx.\" then\r\n                    local key = editor:GetTextRange(start_pos, pos)\r\n                    local userList = CreateAutoCompList(key)\r\n                    if userList and string.len(userList) > 0 then\r\n                        editor:UserListShow(1, userList)\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 954,
    "text": "local key = editor:GetTextRange(start_pos, pos)",
    "type": "statement:localassign"
  }, {
    "id": 955,
    "text": "local userList = CreateAutoCompList(key)",
    "type": "statement:localassign"
  }, {
    "id": 956,
    "text": "if userList and string.len(userList) > 0 then\r\n                        editor:UserListShow(1, userList)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 957,
    "text": "editor:UserListShow(1, userList)",
    "type": "statement:functioncall"
  }, {
    "id": 958,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 959,
    "text": "function (event)\r\n            autoCompleteEnable = event:IsChecked()\r\n        end",
    "type": "function"
  }, {
    "id": 960,
    "text": "autoCompleteEnable = event:IsChecked()",
    "type": "statement:assign"
  }, {
    "id": 961,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 962,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            local buf = {}\r\n            if editor:GetSelectionStart() == editor:GetSelectionEnd() then\r\n                local lineNumber = editor:GetCurrentLine()\r\n                editor:SetSelection(editor:PositionFromLine(lineNumber), editor:GetLineEndPosition(lineNumber))\r\n            end\r\n            for line in string.gmatch(editor:GetSelectedText()..'\\n', \"(.-)\\r?\\n\") do\r\n                if string.sub(line,1,2) == '--' then\r\n                    line = string.sub(line,3)\r\n                else\r\n                    line = '--'..line\r\n                end\r\n                table.insert(buf, line)\r\n            end\r\n            editor:ReplaceSelection(table.concat(buf,\"\\n\"))\r\n        end",
    "type": "function"
  }, {
    "id": 963,
    "text": "local buf = {}",
    "type": "statement:localassign"
  }, {
    "id": 964,
    "text": "if editor:GetSelectionStart() == editor:GetSelectionEnd() then\r\n                local lineNumber = editor:GetCurrentLine()\r\n                editor:SetSelection(editor:PositionFromLine(lineNumber), editor:GetLineEndPosition(lineNumber))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 965,
    "text": "local lineNumber = editor:GetCurrentLine()",
    "type": "statement:localassign"
  }, {
    "id": 966,
    "text": "editor:SetSelection(editor:PositionFromLine(lineNumber), editor:GetLineEndPosition(lineNumber))",
    "type": "statement:functioncall"
  }, {
    "id": 967,
    "text": "for line in string.gmatch(editor:GetSelectedText()..'\\n', \"(.-)\\r?\\n\") do\r\n                if string.sub(line,1,2) == '--' then\r\n                    line = string.sub(line,3)\r\n                else\r\n                    line = '--'..line\r\n                end\r\n                table.insert(buf, line)\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 968,
    "text": "if string.sub(line,1,2) == '--' then\r\n                    line = string.sub(line,3)\r\n                else\r\n                    line = '--'..line\r\n                end",
    "type": "statement:if"
  }, {
    "id": 969,
    "text": "line = string.sub(line,3)",
    "type": "statement:assign"
  }, {
    "id": 970,
    "text": "line = '--'..line",
    "type": "statement:assign"
  }, {
    "id": 971,
    "text": "table.insert(buf, line)",
    "type": "statement:functioncall"
  }, {
    "id": 972,
    "text": "editor:ReplaceSelection(table.concat(buf,\"\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 973,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 974,
    "text": "function (event)\r\n            FoldSome()\r\n        end",
    "type": "function"
  }, {
    "id": 975,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 976,
    "text": "function(event)\r\n            TransferDataFromWindow()\r\n            findReplace:FindString()\r\n        end",
    "type": "function"
  }, {
    "id": 977,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 978,
    "text": "function(event)\r\n            TransferDataFromWindow()\r\n            event:Skip()\r\n            if findReplace.replace then\r\n                ReplaceString()\r\n            else\r\n                findReplace.dialog:Destroy()\r\n                findReplace.dialog = CreateFindReplaceDialog(true)\r\n                findReplace.dialog:Show(true)\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 979,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 980,
    "text": "function(event)\r\n                TransferDataFromWindow()\r\n                event:Skip()\r\n                ReplaceString(true)\r\n            end",
    "type": "function"
  }, {
    "id": 981,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 982,
    "text": "function (event)\r\n            TransferDataFromWindow()\r\n            event:Skip()\r\n            findDialog:Show(false)\r\n            findDialog:Destroy()\r\n        end",
    "type": "function"
  }, {
    "id": 983,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 984,
    "text": "function (event)\r\n            findReplace:GetSelectedString()\r\n            findReplace:Show(false)\r\n        end",
    "type": "function"
  }, {
    "id": 985,
    "text": "findReplace:GetSelectedString()",
    "type": "statement:functioncall"
  }, {
    "id": 986,
    "text": "findReplace:Show(false)",
    "type": "statement:functioncall"
  }, {
    "id": 987,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 988,
    "text": "function (event)\r\n            findReplace:GetSelectedString()\r\n            findReplace:Show(true)\r\n        end",
    "type": "function"
  }, {
    "id": 989,
    "text": "findReplace:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 990,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 991,
    "text": "function (event) findReplace:FindString() end",
    "type": "function"
  }, {
    "id": 992,
    "text": "function (event) findReplace:HasText() end",
    "type": "function"
  }, {
    "id": 993,
    "text": "findReplace:HasText()",
    "type": "statement:functioncall"
  }, {
    "id": 994,
    "text": "function (event) findReplace:FindString(true) end",
    "type": "function"
  }, {
    "id": 995,
    "text": "findReplace:FindString(true)",
    "type": "statement:functioncall"
  }, {
    "id": 996,
    "text": "function (event) findReplace:HasText() end",
    "type": "function"
  }, {
    "id": 997,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            local linecur = editor:LineFromPosition(editor:GetCurrentPos())\r\n            local linemax = editor:LineFromPosition(editor:GetLength()) + 1\r\n            local linenum = wx.wxGetNumberFromUser( \"Enter line number\",\r\n                                                    \"1 .. \"..tostring(linemax),\r\n                                                    \"Goto Line\",\r\n                                                    linecur, 1, linemax,\r\n                                                    frame)\r\n            if linenum > 0 then\r\n                editor:GotoLine(linenum-1)\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 998,
    "text": "local linecur = editor:LineFromPosition(editor:GetCurrentPos())",
    "type": "statement:localassign"
  }, {
    "id": 999,
    "text": "local linemax = editor:LineFromPosition(editor:GetLength()) + 1",
    "type": "statement:localassign"
  }, {
    "id": 1000,
    "text": "local linenum = wx.wxGetNumberFromUser( \"Enter line number\",\r\n                                                    \"1 .. \"..tostring(linemax),\r\n                                                    \"Goto Line\",\r\n                                                    linecur, 1, linemax,\r\n                                                    frame)",
    "type": "statement:localassign"
  }, {
    "id": 1001,
    "text": "if linenum > 0 then\r\n                editor:GotoLine(linenum-1)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1002,
    "text": "editor:GotoLine(linenum-1)",
    "type": "statement:functioncall"
  }, {
    "id": 1003,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1004,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            local buf = {}\r\n            for line in string.gmatch(editor:GetSelectedText()..'\\n', \"(.-)\\r?\\n\") do\r\n                table.insert(buf, line)\r\n            end\r\n            if #buf > 0 then\r\n                table.sort(buf)\r\n                editor:ReplaceSelection(table.concat(buf,\"\\n\"))\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1005,
    "text": "for line in string.gmatch(editor:GetSelectedText()..'\\n', \"(.-)\\r?\\n\") do\r\n                table.insert(buf, line)\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 1006,
    "text": "if #buf > 0 then\r\n                table.sort(buf)\r\n                editor:ReplaceSelection(table.concat(buf,\"\\n\"))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1007,
    "text": "table.sort(buf)",
    "type": "statement:functioncall"
  }, {
    "id": 1008,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1009,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            local line = editor:LineFromPosition(editor:GetCurrentPos())\r\n            ToggleDebugMarker(editor, line)\r\n        end",
    "type": "function"
  }, {
    "id": 1010,
    "text": "local line = editor:LineFromPosition(editor:GetCurrentPos())",
    "type": "statement:localassign"
  }, {
    "id": 1011,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1012,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            CompileProgram(editor)\r\n        end",
    "type": "function"
  }, {
    "id": 1013,
    "text": "CompileProgram(editor)",
    "type": "statement:functioncall"
  }, {
    "id": 1014,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1015,
    "text": "function (event)\r\n            -- FIXME - I don't understand why you would would want to run *all* the notebook pages?\r\n--[[\r\n            local fileList = {}\r\n            SaveAll()\r\n            for id, document in pairs(openDocuments) do\r\n                local filePath = document.filePath\r\n                if filePath == nil then\r\n                    return\r\n                end\r\n                table.insert(fileList, ' \"'..filePath..'\"')\r\n            end\r\n            local cmd = '\"'..programName..'\" '..table.concat(fileList)\r\n]]\r\n            local editor = GetEditor();\r\n            -- test compile it before we run it, if successful then ask to save\r\n            if not CompileProgram(editor) then\r\n                return\r\n            end\r\n            if not SaveIfModified(editor) then\r\n                return\r\n            end\r\n\r\n            local id = editor:GetId();\r\n            local console = iff(menuBar:IsChecked(ID_USECONSOLE), \" -c \", \"\")\r\n            local cmd = '\"'..programName..'\" '..console..openDocuments[id].filePath\r\n\r\n            DisplayOutput(\"Running program: \"..cmd..\"\\n\")\r\n            local pid = wx.wxExecute(cmd, wx.wxEXEC_ASYNC)\r\n\r\n            if pid == -1 then\r\n                DisplayOutput(\"Unknown ERROR Running program!\\n\", true)\r\n            else\r\n                DisplayOutput(\"Process id is: \"..tostring(pid)..\"\\n\", true)\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1016,
    "text": "if not CompileProgram(editor) then\r\n                return\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1017,
    "text": "if not SaveIfModified(editor) then\r\n                return\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1018,
    "text": "local console = iff(menuBar:IsChecked(ID_USECONSOLE), \" -c \", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 1019,
    "text": "local cmd = '\"'..programName..'\" '..console..openDocuments[id].filePath",
    "type": "statement:localassign"
  }, {
    "id": 1020,
    "text": "DisplayOutput(\"Running program: \"..cmd..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 1021,
    "text": "local pid = wx.wxExecute(cmd, wx.wxEXEC_ASYNC)",
    "type": "statement:localassign"
  }, {
    "id": 1022,
    "text": "if pid == -1 then\r\n                DisplayOutput(\"Unknown ERROR Running program!\\n\", true)\r\n            else\r\n                DisplayOutput(\"Process id is: \"..tostring(pid)..\"\\n\", true)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1023,
    "text": "DisplayOutput(\"Unknown ERROR Running program!\\n\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 1024,
    "text": "DisplayOutput(\"Process id is: \"..tostring(pid)..\"\\n\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 1025,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1026,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            event:Enable((debuggerServer == nil) and (editor ~= nil))\r\n        end",
    "type": "function"
  }, {
    "id": 1027,
    "text": "event:Enable((debuggerServer == nil) and (editor ~= nil))",
    "type": "statement:functioncall"
  }, {
    "id": 1028,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1029,
    "text": "function (event)\r\n            local ok = false\r\n            debuggerServer = wxlua.wxLuaDebuggerServer(debuggerPortNumber)\r\n            if debuggerServer then\r\n                ok = debuggerServer:StartServer()\r\n            end\r\n            if ok then\r\n                DisplayOutput(\"Waiting for client connect. Start client with wxLua -d\"..wx.wxGetHostName()..\":\"..debuggerPortNumber..\"\\n\")\r\n            else\r\n                DisplayOutput(\"Unable to create debugger server.\\n\")\r\n            end\r\n            NextDebuggerPort()\r\n        end",
    "type": "function"
  }, {
    "id": 1030,
    "text": "if debuggerServer then\r\n                ok = debuggerServer:StartServer()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1031,
    "text": "ok = debuggerServer:StartServer()",
    "type": "statement:assign"
  }, {
    "id": 1032,
    "text": "if ok then\r\n                DisplayOutput(\"Waiting for client connect. Start client with wxLua -d\"..wx.wxGetHostName()..\":\"..debuggerPortNumber..\"\\n\")\r\n            else\r\n                DisplayOutput(\"Unable to create debugger server.\\n\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1033,
    "text": "DisplayOutput(\"Waiting for client connect. Start client with wxLua -d\"..wx.wxGetHostName()..\":\"..debuggerPortNumber..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 1034,
    "text": "DisplayOutput(\"Unable to create debugger server.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 1035,
    "text": "NextDebuggerPort()",
    "type": "statement:functioncall"
  }, {
    "id": 1036,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1037,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            event:Enable((debuggerServer == nil) and (editor ~= nil))\r\n        end",
    "type": "function"
  }, {
    "id": 1038,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1039,
    "text": "function (event)\r\n            local ok = false\r\n            -- FIXME why would you want to run all the notebook pages?\r\n            --for id, document in pairs(openDocuments) do\r\n                local editor     = GetEditor() -- MUST use document.editor userdata!\r\n                local document   = openDocuments[editor:GetId()]\r\n                local editor     = document.editor\r\n                local editorText = editor:GetText()\r\n                local filePath   = MakeDebugFileName(editor, document.filePath)\r\n                ok = debuggerServer:Run(filePath, editorText)\r\n\r\n                local nextLine = editor:MarkerNext(0, BREAKPOINT_MARKER_VALUE)\r\n                while ok and (nextLine ~= -1) do\r\n                    ok = debuggerServer:AddBreakPoint(filePath, nextLine)\r\n                    nextLine = editor:MarkerNext(nextLine + 1, BREAKPOINT_MARKER_VALUE)\r\n                end\r\n            --end\r\n\r\n            if ok then\r\n                ok = debuggerServer:Step()\r\n            end\r\n            debuggee_running = ok\r\n\r\n            UpdateUIMenuItems()\r\n\r\n            if ok then\r\n                DisplayOutput(\"Client connected ok.\\n\")\r\n            else\r\n                DisplayOutput(\"Error connecting to client.\\n\")\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1040,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1041,
    "text": "function (event)\r\n            DisplayOutput(\"Debug server disconnected.\\n\")\r\n            DisplayOutput(event:GetMessage()..\"\\n\\n\")\r\n            DestroyDebuggerServer()\r\n        end",
    "type": "function"
  }, {
    "id": 1042,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1043,
    "text": "function (event)\r\n            if exitingProgram then return end\r\n            local line = event:GetLineNumber()\r\n            local eventFileName = event:GetFileName()\r\n\r\n            if string.sub(eventFileName, 1, 1) == '@' then -- FIXME what is this?\r\n                eventFileName = string.sub(eventFileName, 2, -1)\r\n                if wx.wxIsAbsolutePath(eventFileName) == false then\r\n                    eventFileName = wx.wxGetCwd()..\"/\"..eventFileName\r\n                end\r\n            end\r\n            if wx.__WXMSW__ then\r\n                eventFileName = wx.wxUnix2DosFilename(eventFileName)\r\n            end\r\n            local fileFound = false\r\n            DisplayOutput(\"At Breakpoint line: \"..tostring(line)..\" file: \"..eventFileName..\"\\n\")\r\n            for id, document in pairs(openDocuments) do\r\n                local editor   = document.editor\r\n                local filePath = MakeDebugFileName(editor, document.filePath)\r\n                -- for running in cygwin, use same type of separators\r\n                filePath = string.gsub(filePath, \"\\\\\", \"/\")\r\n                local eventFileName_ = string.gsub(eventFileName, \"\\\\\", \"/\")\r\n                if string.upper(filePath) == string.upper(eventFileName_) then\r\n                    local selection = document.index\r\n                    notebook:SetSelection(selection)\r\n                    SetEditorSelection(selection)\r\n                    editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                    editor:EnsureVisibleEnforcePolicy(line)\r\n                    fileFound = true\r\n                    break\r\n                end\r\n            end\r\n            -- if don't ignore file and its not in the notebook, ask to load\r\n            if not DebuggerIgnoreFile(eventFileName) then\r\n                if not fileFound then\r\n                    local fileDialog = wx.wxFileDialog(frame,\r\n                                                       \"Select file for debugging\",\r\n                                                       \"\",\r\n                                                       eventFileName,\r\n                                                       \"Lua files (*.lua)|*.lua|Text files (*.txt)|*.txt|All files (*)|*\",\r\n                                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n                    if fileDialog:ShowModal() == wx.wxID_OK then\r\n                        local editor = LoadFile(fileDialog:GetPath(), nil, true)\r\n                        if editor then\r\n                            editor:MarkerAdd(line, CURRENT_LINE_MARKER)\r\n                            editor:EnsureVisibleEnforcePolicy(line)\r\n                            editor:SetReadOnly(true)\r\n                            fileFound = true\r\n                        end\r\n                    end\r\n                    fileDialog:Destroy()\r\n                end\r\n                if not fileFound then -- they canceled opening the file\r\n                    table.insert(ignoredFilesList, eventFileName)\r\n                end\r\n            end\r\n\r\n            if fileFound then\r\n                debuggee_running = false\r\n                ProcessWatches()\r\n            elseif debuggerServer then\r\n                debuggerServer:Continue()\r\n                debuggee_running = true\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1044,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1045,
    "text": "function (event)\r\n            DisplayOutput(event:GetMessage()..\"\\n\")\r\n        end",
    "type": "function"
  }, {
    "id": 1046,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1047,
    "text": "function (event)\r\n            DisplayOutput(\"wxLua ERROR: \"..event:GetMessage()..\"\\n\\n\")\r\n        end",
    "type": "function"
  }, {
    "id": 1048,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1049,
    "text": "function (event)\r\n            ClearAllCurrentLineMarkers()\r\n\r\n            if debuggerServer then\r\n                DestroyDebuggerServer()\r\n            end\r\n            SetAllEditorsReadOnly(false)\r\n            ignoredFilesList = {}\r\n        end",
    "type": "function"
  }, {
    "id": 1050,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1051,
    "text": "function (event)\r\n            if watchListCtrl then\r\n                watchListCtrl:SetItem(event:GetReference(),\r\n                                      1,\r\n                                      event:GetMessage())\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1052,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1053,
    "text": "function(event)\r\n\r\n            if (debugger_destroy > 0) then\r\n                debugger_destroy = debugger_destroy + 1\r\n            end\r\n\r\n            if (debugger_destroy == 5) then\r\n                -- stop the server and let it end gracefully\r\n                debuggee_running = false\r\n                debuggerServer_:StopServer()\r\n            end\r\n            if (debugger_destroy == 10) then\r\n                -- delete the server and let it die gracefully\r\n                debuggee_running = false\r\n                debuggerServer_:delete()\r\n            end\r\n            if (debugger_destroy > 15) then\r\n                -- finally, kill the debugee process if it still exists\r\n                debugger_destroy = 0;\r\n                local ds = debuggerServer_\r\n                debuggerServer_ = nil\r\n\r\n                if (debuggee_pid > 0) then\r\n                    if wx.wxProcess.Exists(debuggee_pid) then\r\n                        local ret = wx.wxProcess.Kill(debuggee_pid, wx.wxSIGKILL, wx.wxKILL_CHILDREN)\r\n                        if (ret ~= wx.wxKILL_OK) then\r\n                            DisplayOutput(\"Unable to kill debuggee process \"..debuggee_pid..\", code \"..tostring(ret)..\".\\n\")\r\n                        else\r\n                            DisplayOutput(\"Killed debuggee process \"..debuggee_pid..\".\\n\")\r\n                        end\r\n                    end\r\n                    debuggee_pid = 0\r\n                end\r\n            end\r\n            event:Skip()\r\n        end",
    "type": "function"
  }, {
    "id": 1054,
    "text": "if (debugger_destroy > 0) then\r\n                debugger_destroy = debugger_destroy + 1\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1055,
    "text": "debugger_destroy = debugger_destroy + 1",
    "type": "statement:assign"
  }, {
    "id": 1056,
    "text": "if (debugger_destroy == 5) then\r\n                -- stop the server and let it end gracefully\r\n                debuggee_running = false\r\n                debuggerServer_:StopServer()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1057,
    "text": "debuggerServer_:StopServer()",
    "type": "statement:functioncall"
  }, {
    "id": 1058,
    "text": "if (debugger_destroy == 10) then\r\n                -- delete the server and let it die gracefully\r\n                debuggee_running = false\r\n                debuggerServer_:delete()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1059,
    "text": "debuggerServer_:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1060,
    "text": "if (debugger_destroy > 15) then\r\n                -- finally, kill the debugee process if it still exists\r\n                debugger_destroy = 0;\r\n                local ds = debuggerServer_\r\n                debuggerServer_ = nil\r\n\r\n                if (debuggee_pid > 0) then\r\n                    if wx.wxProcess.Exists(debuggee_pid) then\r\n                        local ret = wx.wxProcess.Kill(debuggee_pid, wx.wxSIGKILL, wx.wxKILL_CHILDREN)\r\n                        if (ret ~= wx.wxKILL_OK) then\r\n                            DisplayOutput(\"Unable to kill debuggee process \"..debuggee_pid..\", code \"..tostring(ret)..\".\\n\")\r\n                        else\r\n                            DisplayOutput(\"Killed debuggee process \"..debuggee_pid..\".\\n\")\r\n                        end\r\n                    end\r\n                    debuggee_pid = 0\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1061,
    "text": "local ds = debuggerServer_",
    "type": "statement:localassign"
  }, {
    "id": 1062,
    "text": "debuggerServer_ = nil",
    "type": "statement:assign"
  }, {
    "id": 1063,
    "text": "if (debuggee_pid > 0) then\r\n                    if wx.wxProcess.Exists(debuggee_pid) then\r\n                        local ret = wx.wxProcess.Kill(debuggee_pid, wx.wxSIGKILL, wx.wxKILL_CHILDREN)\r\n                        if (ret ~= wx.wxKILL_OK) then\r\n                            DisplayOutput(\"Unable to kill debuggee process \"..debuggee_pid..\", code \"..tostring(ret)..\".\\n\")\r\n                        else\r\n                            DisplayOutput(\"Killed debuggee process \"..debuggee_pid..\".\\n\")\r\n                        end\r\n                    end\r\n                    debuggee_pid = 0\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1064,
    "text": "if wx.wxProcess.Exists(debuggee_pid) then\r\n                        local ret = wx.wxProcess.Kill(debuggee_pid, wx.wxSIGKILL, wx.wxKILL_CHILDREN)\r\n                        if (ret ~= wx.wxKILL_OK) then\r\n                            DisplayOutput(\"Unable to kill debuggee process \"..debuggee_pid..\", code \"..tostring(ret)..\".\\n\")\r\n                        else\r\n                            DisplayOutput(\"Killed debuggee process \"..debuggee_pid..\".\\n\")\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 1065,
    "text": "local ret = wx.wxProcess.Kill(debuggee_pid, wx.wxSIGKILL, wx.wxKILL_CHILDREN)",
    "type": "statement:localassign"
  }, {
    "id": 1066,
    "text": "if (ret ~= wx.wxKILL_OK) then\r\n                            DisplayOutput(\"Unable to kill debuggee process \"..debuggee_pid..\", code \"..tostring(ret)..\".\\n\")\r\n                        else\r\n                            DisplayOutput(\"Killed debuggee process \"..debuggee_pid..\".\\n\")\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 1067,
    "text": "DisplayOutput(\"Unable to kill debuggee process \"..debuggee_pid..\", code \"..tostring(ret)..\".\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 1068,
    "text": "DisplayOutput(\"Killed debuggee process \"..debuggee_pid..\".\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 1069,
    "text": "debuggee_pid = 0",
    "type": "statement:assign"
  }, {
    "id": 1070,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1071,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            -- test compile it before we run it\r\n            if not CompileProgram(editor) then\r\n                return\r\n            end\r\n\r\n            debuggee_pid = 0\r\n            debuggerServer = CreateDebuggerServer()\r\n            if debuggerServer then\r\n                debuggee_pid = debuggerServer:StartClient()\r\n            end\r\n\r\n            if debuggerServer and (debuggee_pid > 0) then\r\n                SetAllEditorsReadOnly(true)\r\n                DisplayOutput(\"Waiting for client connection, process \"..tostring(debuggee_pid)..\".\\n\")\r\n            else\r\n                DisplayOutput(\"Unable to start debuggee process.\\n\")\r\n                if debuggerServer then\r\n                    DestroyDebuggerServer()\r\n                end\r\n            end\r\n\r\n            NextDebuggerPort()\r\n        end",
    "type": "function"
  }, {
    "id": 1072,
    "text": "debuggerServer = CreateDebuggerServer()",
    "type": "statement:assign"
  }, {
    "id": 1073,
    "text": "if debuggerServer then\r\n                debuggee_pid = debuggerServer:StartClient()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1074,
    "text": "debuggee_pid = debuggerServer:StartClient()",
    "type": "statement:assign"
  }, {
    "id": 1075,
    "text": "if debuggerServer and (debuggee_pid > 0) then\r\n                SetAllEditorsReadOnly(true)\r\n                DisplayOutput(\"Waiting for client connection, process \"..tostring(debuggee_pid)..\".\\n\")\r\n            else\r\n                DisplayOutput(\"Unable to start debuggee process.\\n\")\r\n                if debuggerServer then\r\n                    DestroyDebuggerServer()\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1076,
    "text": "SetAllEditorsReadOnly(true)",
    "type": "statement:functioncall"
  }, {
    "id": 1077,
    "text": "DisplayOutput(\"Waiting for client connection, process \"..tostring(debuggee_pid)..\".\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 1078,
    "text": "DisplayOutput(\"Unable to start debuggee process.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 1079,
    "text": "if debuggerServer then\r\n                    DestroyDebuggerServer()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1080,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1081,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            event:Enable((debuggerServer == nil) and (editor ~= nil))\r\n        end",
    "type": "function"
  }, {
    "id": 1082,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1083,
    "text": "function (event)\r\n            ClearAllCurrentLineMarkers()\r\n\r\n            if debuggerServer then\r\n                debuggerServer:Reset();\r\n                --DestroyDebuggerServer()\r\n            end\r\n            SetAllEditorsReadOnly(false)\r\n            ignoredFilesList = {}\r\n            debuggee_running = false\r\n            DisplayOutput(\"\\nDebuggee client stopped.\\n\\n\")\r\n        end",
    "type": "function"
  }, {
    "id": 1084,
    "text": "if debuggerServer then\r\n                debuggerServer:Reset();\r\n                --DestroyDebuggerServer()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1085,
    "text": "debuggerServer:Reset()",
    "type": "statement:functioncall"
  }, {
    "id": 1086,
    "text": "DisplayOutput(\"\\nDebuggee client stopped.\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 1087,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1088,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            event:Enable((debuggerServer ~= nil) and (editor ~= nil))\r\n        end",
    "type": "function"
  }, {
    "id": 1089,
    "text": "event:Enable((debuggerServer ~= nil) and (editor ~= nil))",
    "type": "statement:functioncall"
  }, {
    "id": 1090,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1091,
    "text": "function (event)\r\n            ClearAllCurrentLineMarkers()\r\n\r\n            if debuggerServer then\r\n                debuggerServer:Step()\r\n                debuggee_running = true\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1092,
    "text": "if debuggerServer then\r\n                debuggerServer:Step()\r\n                debuggee_running = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1093,
    "text": "debuggerServer:Step()",
    "type": "statement:functioncall"
  }, {
    "id": 1094,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1095,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            event:Enable((debuggerServer ~= nil) and (not debuggee_running) and (editor ~= nil))\r\n        end",
    "type": "function"
  }, {
    "id": 1096,
    "text": "event:Enable((debuggerServer ~= nil) and (not debuggee_running) and (editor ~= nil))",
    "type": "statement:functioncall"
  }, {
    "id": 1097,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1098,
    "text": "function (event)\r\n            ClearAllCurrentLineMarkers()\r\n\r\n            if debuggerServer then\r\n                debuggerServer:StepOver()\r\n                debuggee_running = true\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1099,
    "text": "if debuggerServer then\r\n                debuggerServer:StepOver()\r\n                debuggee_running = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1100,
    "text": "debuggerServer:StepOver()",
    "type": "statement:functioncall"
  }, {
    "id": 1101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1102,
    "text": "function (event)\r\n            local editor = GetEditor()\r\n            event:Enable((debuggerServer ~= nil) and (not debuggee_running) and (editor ~= nil))\r\n        end",
    "type": "function"
  }, {
    "id": 1103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1104,
    "text": "function (event)\r\n            ClearAllCurrentLineMarkers()\r\n\r\n            if debuggerServer then\r\n                debuggerServer:StepOut()\r\n                debuggee_running = true\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1105,
    "text": "if debuggerServer then\r\n                debuggerServer:StepOut()\r\n                debuggee_running = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1106,
    "text": "debuggerServer:StepOut()",
    "type": "statement:functioncall"
  }, {
    "id": 1107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1108,
    "text": "function (event)\r\n            event:Enable((debuggerServer ~= nil) and (not debuggee_running))\r\n        end",
    "type": "function"
  }, {
    "id": 1109,
    "text": "event:Enable((debuggerServer ~= nil) and (not debuggee_running))",
    "type": "statement:functioncall"
  }, {
    "id": 1110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1111,
    "text": "function (event)\r\n            ClearAllCurrentLineMarkers()\r\n\r\n            if debuggerServer then\r\n                debuggerServer:Continue()\r\n                debuggee_running = true\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1112,
    "text": "if debuggerServer then\r\n                debuggerServer:Continue()\r\n                debuggee_running = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1114,
    "text": "function (event)\r\n            event:Enable((debuggerServer ~= nil) and (not debuggee_running))\r\n        end",
    "type": "function"
  }, {
    "id": 1115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1116,
    "text": "function (event)\r\n            if debuggerServer then\r\n                debuggerServer:Break()\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1117,
    "text": "if debuggerServer then\r\n                debuggerServer:Break()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1118,
    "text": "debuggerServer:Break()",
    "type": "statement:functioncall"
  }, {
    "id": 1119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1120,
    "text": "function (event)\r\n            event:Enable((debuggerServer ~= nil) and debuggee_running)\r\n        end",
    "type": "function"
  }, {
    "id": 1121,
    "text": "event:Enable((debuggerServer ~= nil) and debuggee_running)",
    "type": "statement:functioncall"
  }, {
    "id": 1122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1123,
    "text": "function (event)\r\n            if debuggerServer then\r\n                debuggerServer:DisplayStackDialog(frame)\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1124,
    "text": "if debuggerServer then\r\n                debuggerServer:DisplayStackDialog(frame)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1125,
    "text": "debuggerServer:DisplayStackDialog(frame)",
    "type": "statement:functioncall"
  }, {
    "id": 1126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1127,
    "text": "function (event)\r\n            event:Enable((debuggerServer ~= nil) and (not debuggee_running))\r\n        end",
    "type": "function"
  }, {
    "id": 1128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1129,
    "text": "function (event)\r\n            if not watchWindow then\r\n                CreateWatchWindow()\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1130,
    "text": "if not watchWindow then\r\n                CreateWatchWindow()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1131,
    "text": "CreateWatchWindow()",
    "type": "statement:functioncall"
  }, {
    "id": 1132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1133,
    "text": "function (event)\r\n            event:Enable((debuggerServer ~= nil) and (not debuggee_running))\r\n        end",
    "type": "function"
  }, {
    "id": 1134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1135,
    "text": "function (event)\r\n            if splitter:IsSplit() then\r\n                splitter:Unsplit()\r\n            else\r\n                local w, h = frame:GetClientSizeWH()\r\n                splitter:SplitHorizontally(notebook, errorLog, (2 * h) / 3)\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 1136,
    "text": "if splitter:IsSplit() then\r\n                splitter:Unsplit()\r\n            else\r\n                local w, h = frame:GetClientSizeWH()\r\n                splitter:SplitHorizontally(notebook, errorLog, (2 * h) / 3)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1137,
    "text": "splitter:Unsplit()",
    "type": "statement:functioncall"
  }, {
    "id": 1138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1139,
    "text": "function(event)\r\n        end",
    "type": "function"
  }, {
    "id": 1140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1141,
    "text": "function(event)\r\n            event:Enable(debuggerServer == nil)\r\n        end",
    "type": "function"
  }, {
    "id": 1142,
    "text": "event:Enable(debuggerServer == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 1143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1144,
    "text": "",
    "type": "function container"
  }, {
    "id": 1145,
    "text": "wxIsAbsolutePath",
    "type": "global function"
  }, {
    "id": 1146,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 1147,
    "text": "wxDialog",
    "type": "global function"
  }, {
    "id": 1148,
    "text": "wxNotebook",
    "type": "global function"
  }, {
    "id": 1149,
    "text": "wxRadioBox",
    "type": "global function"
  }, {
    "id": 1150,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 1151,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 1152,
    "text": "wxStaticText",
    "type": "global function"
  }, {
    "id": 1153,
    "text": "wxCommandEvent",
    "type": "global function"
  }, {
    "id": 1154,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 1155,
    "text": "wxCheckBox",
    "type": "global function"
  }, {
    "id": 1156,
    "text": "wxFileName",
    "type": "global function"
  }, {
    "id": 1157,
    "text": "wxLuaHtmlWindow",
    "type": "global function"
  }, {
    "id": 1158,
    "text": "wxSplitterWindow",
    "type": "global function"
  }, {
    "id": 1159,
    "text": "wxFileDialog",
    "type": "global function"
  }, {
    "id": 1160,
    "text": "wxColour",
    "type": "global function"
  }, {
    "id": 1161,
    "text": "wxExecute",
    "type": "global function"
  }, {
    "id": 1162,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 1163,
    "text": "wxListCtrl",
    "type": "global function"
  }, {
    "id": 1164,
    "text": "wxPostEvent",
    "type": "global function"
  }, {
    "id": 1165,
    "text": "wxComboBox",
    "type": "global function"
  }, {
    "id": 1166,
    "text": "wxStaticBoxSizer",
    "type": "global function"
  }, {
    "id": 1167,
    "text": "wxProcess.Exists",
    "type": "global function"
  }, {
    "id": 1168,
    "text": "wxStaticLine",
    "type": "global function"
  }, {
    "id": 1169,
    "text": "wxBoxSizer",
    "type": "global function"
  }, {
    "id": 1170,
    "text": "wxFont",
    "type": "global function"
  }, {
    "id": 1171,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 1172,
    "text": "wxListItem",
    "type": "global function"
  }, {
    "id": 1173,
    "text": "wxGetNumberFromUser",
    "type": "global function"
  }, {
    "id": 1174,
    "text": "wxGetCwd",
    "type": "global function"
  }, {
    "id": 1175,
    "text": "wxClientDisplayRect",
    "type": "global function"
  }, {
    "id": 1176,
    "text": "wxGetKeyState",
    "type": "global function"
  }, {
    "id": 1177,
    "text": "wxUnix2DosFilename",
    "type": "global function"
  }, {
    "id": 1178,
    "text": "wxButton",
    "type": "global function"
  }, {
    "id": 1179,
    "text": "wxArtProvider.GetBitmap",
    "type": "global function"
  }, {
    "id": 1180,
    "text": "wxMessageDialog",
    "type": "global function"
  }, {
    "id": 1181,
    "text": "wxGetHostName",
    "type": "global function"
  }, {
    "id": 1182,
    "text": "wxFileConfig",
    "type": "global function"
  }, {
    "id": 1183,
    "text": "wxProcess.Kill",
    "type": "global function"
  }, {
    "id": 1184,
    "text": "wxFlexGridSizer",
    "type": "global function"
  }, {
    "id": 1185,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 1186,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 1187,
    "text": "wxLuaDebuggerServer",
    "type": "global function"
  }, {
    "id": 1188,
    "text": "rename",
    "type": "global function"
  }, {
    "id": 1189,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 1190,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 1191,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 1192,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 1193,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 1194,
    "text": "wxStyledTextCtrl",
    "type": "global function"
  }, {
    "id": 1195,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 1196,
    "text": "CompileLuaScript",
    "type": "global function"
  }, {
    "id": 1197,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 1198,
    "text": "len",
    "type": "global function"
  }, {
    "id": 1199,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 1200,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 1201,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 1202,
    "text": "find",
    "type": "global function"
  }, {
    "id": 1203,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 1204,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 1205,
    "text": "open",
    "type": "global function"
  }, {
    "id": 1206,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 1207,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 1208,
    "text": "require",
    "type": "global function"
  }, {
    "id": 1209,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1210,
    "text": "",
    "type": "variable container"
  }, {
    "id": 1211,
    "text": "",
    "type": "require container"
  }, {
    "id": 1212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1213,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1215,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1217,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1219,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1221,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1223,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1227,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1228,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1229,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1230,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1231,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1232,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1233,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1234,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1235,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1236,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1237,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1238,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1239,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1240,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1241,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1242,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1243,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1244,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1245,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1246,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1247,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1248,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1249,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1250,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1251,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1252,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1253,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1254,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1255,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1256,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1257,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1258,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1259,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1260,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1261,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1262,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1263,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1264,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1265,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1266,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1267,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1268,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1269,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1270,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1271,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1272,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1273,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1274,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1275,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1276,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1277,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1278,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1279,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1280,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1281,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1282,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1283,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1284,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1285,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1286,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1287,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1288,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1289,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1290,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1291,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1292,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1293,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1294,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1295,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1296,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1297,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1298,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1299,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1300,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1301,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1302,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1303,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1304,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1305,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1306,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1307,
    "text": "",
    "type": "number"
  }, {
    "id": 1308,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1309,
    "text": "",
    "type": "number"
  }, {
    "id": 1310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1311,
    "text": "",
    "type": "number"
  }, {
    "id": 1312,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1313,
    "text": "",
    "type": "number"
  }, {
    "id": 1314,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1316,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1318,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1320,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1322,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 1325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1326,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1328,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1329,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1330,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1331,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1332,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1333,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1334,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1335,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1336,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1337,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1338,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1339,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1340,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1341,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1342,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1343,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1344,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1345,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1346,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1347,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1348,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1349,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1350,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1351,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1352,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1353,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1354,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1355,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1356,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1357,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1358,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1359,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1360,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1361,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1362,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1363,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1364,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1365,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1366,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1367,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1368,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1369,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1370,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1371,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1372,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1373,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1374,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1375,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1376,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1377,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1378,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1379,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1380,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1381,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1382,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1383,
    "text": "",
    "type": "n/a"
  } ]
}