{
  "_filename": "media.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/media.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 7,
    "label": "has",
    "to": 21
  }, {
    "from": 7,
    "label": "has",
    "to": 22
  }, {
    "from": 7,
    "label": "has",
    "to": 23
  }, {
    "from": 7,
    "label": "has",
    "to": 24
  }, {
    "from": 7,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 26,
    "label": "has",
    "to": 37
  }, {
    "from": 26,
    "label": "has",
    "to": 38
  }, {
    "from": 26,
    "label": "has",
    "to": 39
  }, {
    "from": 26,
    "label": "has",
    "to": 40
  }, {
    "from": 26,
    "label": "has",
    "to": 41
  }, {
    "from": 26,
    "label": "has",
    "to": 42
  }, {
    "from": 26,
    "label": "has",
    "to": 43
  }, {
    "from": 26,
    "label": "has",
    "to": 44
  }, {
    "from": 26,
    "label": "has",
    "to": 45
  }, {
    "from": 26,
    "label": "has",
    "to": 46
  }, {
    "from": 26,
    "label": "has",
    "to": 47
  }, {
    "from": 26,
    "label": "has",
    "to": 48
  }, {
    "from": 26,
    "label": "has",
    "to": 49
  }, {
    "from": 26,
    "label": "has",
    "to": 50
  }, {
    "from": 26,
    "label": "has",
    "to": 51
  }, {
    "from": 26,
    "label": "has",
    "to": 52
  }, {
    "from": 26,
    "label": "has",
    "to": 53
  }, {
    "from": 26,
    "label": "has",
    "to": 54
  }, {
    "from": 26,
    "label": "has",
    "to": 55
  }, {
    "from": 26,
    "label": "has",
    "to": 56
  }, {
    "from": 26,
    "label": "has",
    "to": 57
  }, {
    "from": 26,
    "label": "has",
    "to": 58
  }, {
    "from": 26,
    "label": "has",
    "to": 59
  }, {
    "from": 26,
    "label": "has",
    "to": 60
  }, {
    "from": 26,
    "label": "has",
    "to": 61
  }, {
    "from": 26,
    "label": "has",
    "to": 62
  }, {
    "from": 26,
    "label": "has",
    "to": 63
  }, {
    "from": 26,
    "label": "has",
    "to": 64
  }, {
    "from": 26,
    "label": "has",
    "to": 65
  }, {
    "from": 26,
    "label": "has",
    "to": 66
  }, {
    "from": 26,
    "label": "has",
    "to": 67
  }, {
    "from": 26,
    "label": "has",
    "to": 68
  }, {
    "from": 26,
    "label": "has",
    "to": 69
  }, {
    "from": 26,
    "label": "has",
    "to": 70
  }, {
    "from": 26,
    "label": "has",
    "to": 71
  }, {
    "from": 26,
    "label": "has",
    "to": 72
  }, {
    "from": 26,
    "label": "has",
    "to": 73
  }, {
    "from": 26,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 26,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 26,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 26,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 26,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 26,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 87
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 97
  }, {
    "from": 26,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 73
  }, {
    "from": 26,
    "label": "has",
    "to": 99
  }, {
    "from": 26,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 100,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 100,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 26,
    "label": "has",
    "to": 112
  }, {
    "from": 26,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 119,
    "label": "has",
    "to": 125
  }, {
    "from": 119,
    "label": "has",
    "to": 126
  }, {
    "from": 119,
    "label": "has",
    "to": 127
  }, {
    "from": 119,
    "label": "has",
    "to": 128
  }, {
    "from": 113,
    "label": "has",
    "to": 129
  }, {
    "from": 113,
    "label": "has",
    "to": 73
  }, {
    "from": 26,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 26,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 26,
    "label": "has",
    "to": 134
  }, {
    "from": 26,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 29
  }, {
    "from": 136,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 75
  }, {
    "from": 138,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 79
  }, {
    "from": 140,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 83
  }, {
    "from": 142,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 87
  }, {
    "from": 144,
    "label": "has",
    "to": 88
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 90
  }, {
    "from": 147,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 87
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 147,
    "label": "has",
    "to": 97
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 73
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 101
  }, {
    "from": 151,
    "label": "has",
    "to": 102
  }, {
    "from": 151,
    "label": "has",
    "to": 103
  }, {
    "from": 151,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 151,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 151,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 114
  }, {
    "from": 153,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 119,
    "label": "has",
    "to": 125
  }, {
    "from": 119,
    "label": "has",
    "to": 126
  }, {
    "from": 119,
    "label": "has",
    "to": 127
  }, {
    "from": 119,
    "label": "has",
    "to": 128
  }, {
    "from": 153,
    "label": "has",
    "to": 129
  }, {
    "from": 153,
    "label": "has",
    "to": 73
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 131
  }, {
    "from": 156,
    "label": "has",
    "to": 133
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 26,
    "label": "calls",
    "to": 167
  }, {
    "from": 26,
    "label": "calls",
    "to": 167
  }, {
    "from": 2,
    "label": "calls",
    "to": 175
  }, {
    "from": 26,
    "label": "calls",
    "to": 175
  }, {
    "from": 26,
    "label": "calls",
    "to": 175
  }, {
    "from": 26,
    "label": "calls",
    "to": 175
  }, {
    "from": 26,
    "label": "calls",
    "to": 175
  }, {
    "from": 26,
    "label": "calls",
    "to": 175
  }, {
    "from": 26,
    "label": "calls",
    "to": 175
  }, {
    "from": 26,
    "label": "calls",
    "to": 175
  }, {
    "from": 26,
    "label": "calls",
    "to": 170
  }, {
    "from": 26,
    "label": "calls",
    "to": 162
  }, {
    "from": 26,
    "label": "calls",
    "to": 162
  }, {
    "from": 26,
    "label": "calls",
    "to": 7
  }, {
    "from": 26,
    "label": "calls",
    "to": 7
  }, {
    "from": 26,
    "label": "calls",
    "to": 7
  }, {
    "from": 2,
    "label": "calls",
    "to": 174
  }, {
    "from": 2,
    "label": "calls",
    "to": 174
  }, {
    "from": 26,
    "label": "calls",
    "to": 161
  }, {
    "from": 26,
    "label": "calls",
    "to": 171
  }, {
    "from": 26,
    "label": "calls",
    "to": 171
  }, {
    "from": 26,
    "label": "calls",
    "to": 171
  }, {
    "from": 158,
    "label": "calls",
    "to": 26
  }, {
    "from": 26,
    "label": "calls",
    "to": 159
  }, {
    "from": 26,
    "label": "calls",
    "to": 172
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 160
  }, {
    "from": 26,
    "label": "calls",
    "to": 165
  }, {
    "from": 26,
    "label": "calls",
    "to": 169
  }, {
    "from": 26,
    "label": "calls",
    "to": 168
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 26,
    "label": "calls",
    "to": 163
  }, {
    "from": 26,
    "label": "calls",
    "to": 173
  }, {
    "from": 26,
    "label": "calls",
    "to": 173
  }, {
    "from": 26,
    "label": "calls",
    "to": 173
  }, {
    "from": 26,
    "label": "calls",
    "to": 166
  }, {
    "from": 26,
    "label": "calls",
    "to": 166
  }, {
    "from": 158,
    "label": "calls",
    "to": 176
  }, {
    "from": 158,
    "label": "calls",
    "to": 164
  }, {
    "from": 1,
    "label": "contains",
    "to": 158
  }, {
    "from": 158,
    "label": "declares",
    "to": 2
  }, {
    "from": 158,
    "label": "declares",
    "to": 7
  }, {
    "from": 158,
    "label": "declares",
    "to": 26
  }, {
    "from": 158,
    "label": "declares",
    "to": 136
  }, {
    "from": 158,
    "label": "declares",
    "to": 138
  }, {
    "from": 158,
    "label": "declares",
    "to": 140
  }, {
    "from": 158,
    "label": "declares",
    "to": 142
  }, {
    "from": 158,
    "label": "declares",
    "to": 144
  }, {
    "from": 158,
    "label": "declares",
    "to": 146
  }, {
    "from": 158,
    "label": "declares",
    "to": 147
  }, {
    "from": 158,
    "label": "declares",
    "to": 149
  }, {
    "from": 158,
    "label": "declares",
    "to": 151
  }, {
    "from": 158,
    "label": "declares",
    "to": 153
  }, {
    "from": 158,
    "label": "declares",
    "to": 155
  }, {
    "from": 158,
    "label": "declares",
    "to": 156
  }, {
    "from": 1,
    "label": "contains",
    "to": 178
  }, {
    "from": 1,
    "label": "contains",
    "to": 179
  }, {
    "from": 178,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 178,
    "label": "initializes",
    "to": 182
  }, {
    "from": 178,
    "label": "initializes",
    "to": 183
  }, {
    "from": 178,
    "label": "initializes",
    "to": 184
  }, {
    "from": 178,
    "label": "initializes",
    "to": 185
  }, {
    "from": 178,
    "label": "initializes",
    "to": 186
  }, {
    "from": 178,
    "label": "initializes",
    "to": 187
  }, {
    "from": 178,
    "label": "initializes",
    "to": 188
  }, {
    "from": 178,
    "label": "initializes",
    "to": 189
  }, {
    "from": 178,
    "label": "initializes",
    "to": 190
  }, {
    "from": 178,
    "label": "initializes",
    "to": 191
  }, {
    "from": 178,
    "label": "initializes",
    "to": 192
  }, {
    "from": 178,
    "label": "initializes",
    "to": 193
  }, {
    "from": 178,
    "label": "initializes",
    "to": 194
  }, {
    "from": 178,
    "label": "initializes",
    "to": 195
  }, {
    "from": 178,
    "label": "initializes",
    "to": 196
  }, {
    "from": 178,
    "label": "initializes",
    "to": 197
  }, {
    "from": 178,
    "label": "initializes",
    "to": 198
  }, {
    "from": 179,
    "label": "initializes",
    "to": 177
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 136
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 138
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 140
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 142
  }, {
    "from": 86,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 89,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 147
  }, {
    "from": 98,
    "label": "hasArgument",
    "to": 149
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 151
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 132,
    "label": "hasArgument",
    "to": 156
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "media",
    "type": "module"
  }, {
    "id": 2,
    "text": "function msToMMSS(ms)\r\n    local m = math.floor(ms/(60*1000))\r\n    local s = math.floor((ms - m*60*1000)/1000)\r\n    return string.format(\"%02d:%02d\", m, s)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local m = math.floor(ms/(60*1000))",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local s = math.floor((ms - m*60*1000)/1000)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function UpdateButtons()\r\n    local play_ok  = false\r\n    local pause_ok = false\r\n    local stop_ok  = false\r\n\r\n    local state = mediaCtrl:GetState()\r\n\r\n    if not loadedMedia then state = -1 end -- not valid to do anything\r\n\r\n    if state == wx.wxMEDIASTATE_PLAYING then\r\n        play_ok  = false\r\n        pause_ok = true\r\n        stop_ok  = true\r\n    elseif state == wx.wxMEDIASTATE_PAUSED then\r\n        play_ok  = true\r\n        pause_ok = false\r\n        stop_ok  = true\r\n    else --if state == wx.wxMEDIASTATE_STOPPED then\r\n        play_ok  = true\r\n        pause_ok = false\r\n        stop_ok  = false\r\n    end\r\n\r\n    playButton:Enable(play_ok)\r\n    pauseButton:Enable(pause_ok)\r\n    stopButton:Enable(stop_ok)\r\n\r\n    volumeSlider:SetValue(mediaCtrl:GetVolume()*slider_range)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local play_ok  = false",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local pause_ok = false",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local stop_ok  = false",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local state = mediaCtrl:GetState()",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not loadedMedia then state = -1 end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "state = -1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if state == wx.wxMEDIASTATE_PLAYING then\r\n        play_ok  = false\r\n        pause_ok = true\r\n        stop_ok  = true\r\n    elseif state == wx.wxMEDIASTATE_PAUSED then\r\n        play_ok  = true\r\n        pause_ok = false\r\n        stop_ok  = true\r\n    else --if state == wx.wxMEDIASTATE_STOPPED then\r\n        play_ok  = true\r\n        pause_ok = false\r\n        stop_ok  = false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "play_ok  = false",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "pause_ok = true",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "stop_ok  = true",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "play_ok  = true",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "pause_ok = false",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "stop_ok  = false",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "playButton:Enable(play_ok)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "pauseButton:Enable(pause_ok)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "stopButton:Enable(stop_ok)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "volumeSlider:SetValue(mediaCtrl:GetVolume()*slider_range)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function main()\r\n\r\n    -- create the wxFrame window\r\n    frame = wx.wxFrame( wx.NULL,              -- no parent for toplevel windows\r\n                        wx.wxID_ANY,          -- don't need a wxWindow ID\r\n                        \"wxLua Media Demo\",   -- caption on the frame\r\n                        wx.wxDefaultPosition, -- let system place the frame\r\n                        wx.wxSize(450, 450),  -- set the size of the frame\r\n                        wx.wxDEFAULT_FRAME_STYLE ) -- use default frame styles\r\n\r\n    frame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n            function (event)\r\n                event:Skip()\r\n                if timer then\r\n                    timer:Stop() -- always stop before exiting or deleting it\r\n                    timer:delete()\r\n                    timer = nil\r\n                end\r\n            end)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    -- create a simple file menu\r\n    local fileMenu = wx.wxMenu()\r\n    fileMenu:Append(ID_LOADFILE, \"Load media...\\tCtrl+O\", \"Load a file to play...\")\r\n    fileMenu:AppendSeparator()\r\n    fileMenu:Append(wx.wxID_EXIT, \"E&xit\\tCtrl+Q\", \"Quit the program\")\r\n\r\n    -- create a simple help menu\r\n    local helpMenu = wx.wxMenu()\r\n    helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Media Application\")\r\n\r\n    -- create a menu bar and append the file and help menus\r\n    local menuBar = wx.wxMenuBar()\r\n    menuBar:Append(fileMenu, \"&File\")\r\n    menuBar:Append(helpMenu, \"&Help\")\r\n\r\n    -- attach the menu bar into the frame\r\n    frame:SetMenuBar(menuBar)\r\n\r\n    -- create a simple status bar\r\n    frame:CreateStatusBar(1)\r\n    frame:SetStatusText(\"Welcome to wxLua.\")\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    panel = wx.wxPanel(frame, wx.wxID_ANY)\r\n\r\n    mediaCtrl = wx.wxMediaCtrl(panel, wx.wxID_ANY, \"\",\r\n                               wx.wxDefaultPosition, wx.wxSize(200, 200))\r\n\r\n    playButton   = wx.wxButton(panel, ID_PLAY,  \"Play\")\r\n    pauseButton  = wx.wxButton(panel, ID_PAUSE, \"Pause\")\r\n    stopButton   = wx.wxButton(panel, ID_STOP,  \"Stop\")\r\n    volumeSlider = wx.wxSlider(panel, ID_VOLUME,  slider_range, 0, slider_range)\r\n\r\n    buttonSizer = wx.wxFlexGridSizer(1, 5, 5, 5)\r\n    buttonSizer:AddGrowableCol(4)\r\n    buttonSizer:Add(playButton, 0, 0)\r\n    buttonSizer:Add(pauseButton, 0, 0)\r\n    buttonSizer:Add(stopButton, 0, 0)\r\n    buttonSizer:Add(wx.wxStaticText(panel, wx.wxID_ANY, \"Volume : \"), 0, wx.wxALIGN_CENTER_VERTICAL)\r\n    buttonSizer:Add(volumeSlider, 1, wx.wxEXPAND)\r\n\r\n    posSlider = wx.wxSlider(panel, ID_POSITON, 0, 0, slider_range)\r\n    posText   = wx.wxStaticText(panel, ID_POSTEXT, \"Position 00:00/00:00 \")\r\n    posSizer = wx.wxFlexGridSizer(1, 5, 5, 5)\r\n    posSizer:AddGrowableCol(1)\r\n    posSizer:Add(posText, 0, wx.wxALIGN_CENTER_VERTICAL)\r\n    posSizer:Add(posSlider, 1, wx.wxEXPAND)\r\n\r\n    mainSizer = wx.wxFlexGridSizer(2, 1, 5, 5)\r\n    mainSizer:AddGrowableRow(0)\r\n    mainSizer:AddGrowableCol(0)\r\n    mainSizer:Add(mediaCtrl, 1, wx.wxEXPAND, 0)\r\n    mainSizer:Add(buttonSizer, 0, wx.wxEXPAND, 0)\r\n    mainSizer:Add(posSizer, 0, wx.wxEXPAND, 0)\r\n\r\n    panel:SetSizer(mainSizer)\r\n    mainSizer:SetSizeHints(frame)\r\n\r\n    UpdateButtons()\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    panel:Connect(ID_PLAY, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n            function (event)\r\n                local ok = mediaCtrl:Play()\r\n\r\n                if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to play %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end\r\n            end )\r\n    panel:Connect(ID_PAUSE, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n            function (event)\r\n                local ok = mediaCtrl:Pause()\r\n\r\n                if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to pause %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end\r\n            end )\r\n    panel:Connect(ID_STOP, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n            function (event)\r\n                local ok = mediaCtrl:Stop()\r\n\r\n                if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to stop %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end\r\n            end )\r\n\r\n    panel:Connect(ID_VOLUME, wx.wxEVT_SCROLL_THUMBRELEASE,\r\n            function (event)\r\n                local pos = event:GetPosition()\r\n                mediaCtrl:SetVolume(pos/slider_range)\r\n            end )\r\n\r\n    panel:Connect(ID_POSITON, wx.wxEVT_SCROLL_THUMBTRACK,\r\n            function (event) settingPos = true end)\r\n\r\n    panel:Connect(ID_POSITON, wx.wxEVT_SCROLL_THUMBRELEASE,\r\n            function (event)\r\n                if loadedMedia then\r\n                    local pos = event:GetPosition()\r\n                    local len = mediaCtrl:Length()\r\n                    local ok = mediaCtrl:Seek(len*pos/slider_range)\r\n                    if ok == wx.wxInvalidOffset then\r\n                        wx.wxMessageBox(string.format(\"Unable to seek in %s: Unsupported format?\", fileName),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    end\r\n                end\r\n\r\n                settingPos = false\r\n            end )\r\n\r\n    mediaCtrl:Connect(wx.wxEVT_MEDIA_STATECHANGED,\r\n            function (event)\r\n                UpdateButtons()\r\n            end)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    timer = wx.wxTimer(panel)\r\n    panel:Connect(wx.wxEVT_TIMER,\r\n            function (event)\r\n                local len = 1 -- avoid /0\r\n                local pos = 0\r\n                local str = \"Position 00:00/00:00\"\r\n\r\n                if loadedMedia then\r\n                    len = mediaCtrl:Length()\r\n                    pos = mediaCtrl:Tell()\r\n                    str = string.format(\"Position %s/%s\", msToMMSS(pos), msToMMSS(len))\r\n                end\r\n\r\n                if not settingPos then\r\n                    posSlider:SetValue(slider_range*pos/len)\r\n                end\r\n\r\n                if posText:GetLabel() ~= str then\r\n                    posText:SetLabel(str)\r\n                end\r\n            end)\r\n\r\n    timer:Start(300)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    frame:Connect(ID_LOADFILE, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local dlg = wx.wxFileDialog(frame, \"Choose a media file\",\r\n                                            wx.wxGetCwd(), \"\", \"All Files (*)|*|MP3 Music Files (*.mp3)|*.mp3|MPG Video Files (*.mpg)|*.mpg|AVI Movie Files (*.avi)|*.avi\",\r\n                                            wx.wxFD_OPEN + wx.wxFD_FILE_MUST_EXIST + wx.wxFD_CHANGE_DIR )\r\n                if dlg:ShowModal() == wx.wxID_OK then\r\n                    local filepath = dlg:GetPath()\r\n                    loadedMedia = false\r\n                    fileName = \"\"\r\n\r\n                    if not mediaCtrl:Load(filepath) then\r\n                        wx.wxMessageBox(string.format(\"Unable to load %s: Unsupported format?\", filepath),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    else\r\n                        posSlider:SetValue(0)\r\n                        loadedMedia = true\r\n                        fileName = dlg:GetFilename()\r\n                        local ms = mediaCtrl:Length()\r\n                        local s = mediaCtrl:GetBestSize()\r\n                        frame:SetStatusText(string.format(\"Loaded: '%s' Length %s Size %dx%d\", fileName, msToMMSS(ms), s:GetWidth(), s:GetHeight()))\r\n                        mediaCtrl:SetInitialSize()\r\n                        panel:GetSizer():Layout()\r\n                    end\r\n                end\r\n                dlg:Destroy()\r\n                UpdateButtons()\r\n            end )\r\n\r\n    -- connect the selection event of the exit menu item to an\r\n    -- event handler that closes the window\r\n    frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event) frame:Close(true) end )\r\n\r\n    -- connect the selection event of the about menu item\r\n    frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Media wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua Media\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )\r\n\r\n    -- show the frame window\r\n    frame:Show(true)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "frame = wx.wxFrame( wx.NULL,              -- no parent for toplevel windows\r\n                        wx.wxID_ANY,          -- don't need a wxWindow ID\r\n                        \"wxLua Media Demo\",   -- caption on the frame\r\n                        wx.wxDefaultPosition, -- let system place the frame\r\n                        wx.wxSize(450, 450),  -- set the size of the frame\r\n                        wx.wxDEFAULT_FRAME_STYLE )",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "frame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n            function (event)\r\n                event:Skip()\r\n                if timer then\r\n                    timer:Stop() -- always stop before exiting or deleting it\r\n                    timer:delete()\r\n                    timer = nil\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "event:Skip()",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "if timer then\r\n                    timer:Stop() -- always stop before exiting or deleting it\r\n                    timer:delete()\r\n                    timer = nil\r\n                end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "timer:Stop()",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "timer:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "timer = nil",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "local fileMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "fileMenu:Append(ID_LOADFILE, \"Load media...\\tCtrl+O\", \"Load a file to play...\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "fileMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "fileMenu:Append(wx.wxID_EXIT, \"E&xit\\tCtrl+Q\", \"Quit the program\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local helpMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Media Application\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "local menuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "menuBar:Append(fileMenu, \"&File\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "menuBar:Append(helpMenu, \"&Help\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "frame:SetMenuBar(menuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "frame:CreateStatusBar(1)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "frame:SetStatusText(\"Welcome to wxLua.\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "panel = wx.wxPanel(frame, wx.wxID_ANY)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "mediaCtrl = wx.wxMediaCtrl(panel, wx.wxID_ANY, \"\",\r\n                               wx.wxDefaultPosition, wx.wxSize(200, 200))",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "playButton   = wx.wxButton(panel, ID_PLAY,  \"Play\")",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "pauseButton  = wx.wxButton(panel, ID_PAUSE, \"Pause\")",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "stopButton   = wx.wxButton(panel, ID_STOP,  \"Stop\")",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "volumeSlider = wx.wxSlider(panel, ID_VOLUME,  slider_range, 0, slider_range)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "buttonSizer = wx.wxFlexGridSizer(1, 5, 5, 5)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "buttonSizer:AddGrowableCol(4)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "buttonSizer:Add(playButton, 0, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "buttonSizer:Add(pauseButton, 0, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "buttonSizer:Add(stopButton, 0, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "buttonSizer:Add(wx.wxStaticText(panel, wx.wxID_ANY, \"Volume : \"), 0, wx.wxALIGN_CENTER_VERTICAL)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "buttonSizer:Add(volumeSlider, 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "posSlider = wx.wxSlider(panel, ID_POSITON, 0, 0, slider_range)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "posText   = wx.wxStaticText(panel, ID_POSTEXT, \"Position 00:00/00:00 \")",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "posSizer = wx.wxFlexGridSizer(1, 5, 5, 5)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "posSizer:AddGrowableCol(1)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "posSizer:Add(posText, 0, wx.wxALIGN_CENTER_VERTICAL)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "posSizer:Add(posSlider, 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "mainSizer = wx.wxFlexGridSizer(2, 1, 5, 5)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "mainSizer:AddGrowableRow(0)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "mainSizer:AddGrowableCol(0)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "mainSizer:Add(mediaCtrl, 1, wx.wxEXPAND, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "mainSizer:Add(buttonSizer, 0, wx.wxEXPAND, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "mainSizer:Add(posSizer, 0, wx.wxEXPAND, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "panel:SetSizer(mainSizer)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "mainSizer:SetSizeHints(frame)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "UpdateButtons()",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "panel:Connect(ID_PLAY, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n            function (event)\r\n                local ok = mediaCtrl:Play()\r\n\r\n                if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to play %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "local ok = mediaCtrl:Play()",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to play %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "wx.wxMessageBox(string.format(\"Unable to play %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "panel:Connect(ID_PAUSE, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n            function (event)\r\n                local ok = mediaCtrl:Pause()\r\n\r\n                if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to pause %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "local ok = mediaCtrl:Pause()",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to pause %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "wx.wxMessageBox(string.format(\"Unable to pause %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "panel:Connect(ID_STOP, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n            function (event)\r\n                local ok = mediaCtrl:Stop()\r\n\r\n                if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to stop %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "local ok = mediaCtrl:Stop()",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to stop %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "wx.wxMessageBox(string.format(\"Unable to stop %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "panel:Connect(ID_VOLUME, wx.wxEVT_SCROLL_THUMBRELEASE,\r\n            function (event)\r\n                local pos = event:GetPosition()\r\n                mediaCtrl:SetVolume(pos/slider_range)\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "local pos = event:GetPosition()",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "mediaCtrl:SetVolume(pos/slider_range)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "panel:Connect(ID_POSITON, wx.wxEVT_SCROLL_THUMBTRACK,\r\n            function (event) settingPos = true end)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "settingPos = true",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "panel:Connect(ID_POSITON, wx.wxEVT_SCROLL_THUMBRELEASE,\r\n            function (event)\r\n                if loadedMedia then\r\n                    local pos = event:GetPosition()\r\n                    local len = mediaCtrl:Length()\r\n                    local ok = mediaCtrl:Seek(len*pos/slider_range)\r\n                    if ok == wx.wxInvalidOffset then\r\n                        wx.wxMessageBox(string.format(\"Unable to seek in %s: Unsupported format?\", fileName),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    end\r\n                end\r\n\r\n                settingPos = false\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "if loadedMedia then\r\n                    local pos = event:GetPosition()\r\n                    local len = mediaCtrl:Length()\r\n                    local ok = mediaCtrl:Seek(len*pos/slider_range)\r\n                    if ok == wx.wxInvalidOffset then\r\n                        wx.wxMessageBox(string.format(\"Unable to seek in %s: Unsupported format?\", fileName),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "local len = mediaCtrl:Length()",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local ok = mediaCtrl:Seek(len*pos/slider_range)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if ok == wx.wxInvalidOffset then\r\n                        wx.wxMessageBox(string.format(\"Unable to seek in %s: Unsupported format?\", fileName),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "wx.wxMessageBox(string.format(\"Unable to seek in %s: Unsupported format?\", fileName),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "settingPos = false",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "mediaCtrl:Connect(wx.wxEVT_MEDIA_STATECHANGED,\r\n            function (event)\r\n                UpdateButtons()\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "timer = wx.wxTimer(panel)",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "panel:Connect(wx.wxEVT_TIMER,\r\n            function (event)\r\n                local len = 1 -- avoid /0\r\n                local pos = 0\r\n                local str = \"Position 00:00/00:00\"\r\n\r\n                if loadedMedia then\r\n                    len = mediaCtrl:Length()\r\n                    pos = mediaCtrl:Tell()\r\n                    str = string.format(\"Position %s/%s\", msToMMSS(pos), msToMMSS(len))\r\n                end\r\n\r\n                if not settingPos then\r\n                    posSlider:SetValue(slider_range*pos/len)\r\n                end\r\n\r\n                if posText:GetLabel() ~= str then\r\n                    posText:SetLabel(str)\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local len = 1",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local pos = 0",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local str = \"Position 00:00/00:00\"",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "if loadedMedia then\r\n                    len = mediaCtrl:Length()\r\n                    pos = mediaCtrl:Tell()\r\n                    str = string.format(\"Position %s/%s\", msToMMSS(pos), msToMMSS(len))\r\n                end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "len = mediaCtrl:Length()",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "pos = mediaCtrl:Tell()",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "str = string.format(\"Position %s/%s\", msToMMSS(pos), msToMMSS(len))",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "if not settingPos then\r\n                    posSlider:SetValue(slider_range*pos/len)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "posSlider:SetValue(slider_range*pos/len)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "if posText:GetLabel() ~= str then\r\n                    posText:SetLabel(str)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "posText:SetLabel(str)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "timer:Start(300)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "frame:Connect(ID_LOADFILE, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local dlg = wx.wxFileDialog(frame, \"Choose a media file\",\r\n                                            wx.wxGetCwd(), \"\", \"All Files (*)|*|MP3 Music Files (*.mp3)|*.mp3|MPG Video Files (*.mpg)|*.mpg|AVI Movie Files (*.avi)|*.avi\",\r\n                                            wx.wxFD_OPEN + wx.wxFD_FILE_MUST_EXIST + wx.wxFD_CHANGE_DIR )\r\n                if dlg:ShowModal() == wx.wxID_OK then\r\n                    local filepath = dlg:GetPath()\r\n                    loadedMedia = false\r\n                    fileName = \"\"\r\n\r\n                    if not mediaCtrl:Load(filepath) then\r\n                        wx.wxMessageBox(string.format(\"Unable to load %s: Unsupported format?\", filepath),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    else\r\n                        posSlider:SetValue(0)\r\n                        loadedMedia = true\r\n                        fileName = dlg:GetFilename()\r\n                        local ms = mediaCtrl:Length()\r\n                        local s = mediaCtrl:GetBestSize()\r\n                        frame:SetStatusText(string.format(\"Loaded: '%s' Length %s Size %dx%d\", fileName, msToMMSS(ms), s:GetWidth(), s:GetHeight()))\r\n                        mediaCtrl:SetInitialSize()\r\n                        panel:GetSizer():Layout()\r\n                    end\r\n                end\r\n                dlg:Destroy()\r\n                UpdateButtons()\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "local dlg = wx.wxFileDialog(frame, \"Choose a media file\",\r\n                                            wx.wxGetCwd(), \"\", \"All Files (*)|*|MP3 Music Files (*.mp3)|*.mp3|MPG Video Files (*.mpg)|*.mpg|AVI Movie Files (*.avi)|*.avi\",\r\n                                            wx.wxFD_OPEN + wx.wxFD_FILE_MUST_EXIST + wx.wxFD_CHANGE_DIR )",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "if dlg:ShowModal() == wx.wxID_OK then\r\n                    local filepath = dlg:GetPath()\r\n                    loadedMedia = false\r\n                    fileName = \"\"\r\n\r\n                    if not mediaCtrl:Load(filepath) then\r\n                        wx.wxMessageBox(string.format(\"Unable to load %s: Unsupported format?\", filepath),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    else\r\n                        posSlider:SetValue(0)\r\n                        loadedMedia = true\r\n                        fileName = dlg:GetFilename()\r\n                        local ms = mediaCtrl:Length()\r\n                        local s = mediaCtrl:GetBestSize()\r\n                        frame:SetStatusText(string.format(\"Loaded: '%s' Length %s Size %dx%d\", fileName, msToMMSS(ms), s:GetWidth(), s:GetHeight()))\r\n                        mediaCtrl:SetInitialSize()\r\n                        panel:GetSizer():Layout()\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "local filepath = dlg:GetPath()",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "loadedMedia = false",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "fileName = \"\"",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if not mediaCtrl:Load(filepath) then\r\n                        wx.wxMessageBox(string.format(\"Unable to load %s: Unsupported format?\", filepath),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    else\r\n                        posSlider:SetValue(0)\r\n                        loadedMedia = true\r\n                        fileName = dlg:GetFilename()\r\n                        local ms = mediaCtrl:Length()\r\n                        local s = mediaCtrl:GetBestSize()\r\n                        frame:SetStatusText(string.format(\"Loaded: '%s' Length %s Size %dx%d\", fileName, msToMMSS(ms), s:GetWidth(), s:GetHeight()))\r\n                        mediaCtrl:SetInitialSize()\r\n                        panel:GetSizer():Layout()\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "wx.wxMessageBox(string.format(\"Unable to load %s: Unsupported format?\", filepath),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "posSlider:SetValue(0)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "loadedMedia = true",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "fileName = dlg:GetFilename()",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "local ms = mediaCtrl:Length()",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local s = mediaCtrl:GetBestSize()",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "frame:SetStatusText(string.format(\"Loaded: '%s' Length %s Size %dx%d\", fileName, msToMMSS(ms), s:GetWidth(), s:GetHeight()))",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "mediaCtrl:SetInitialSize()",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "panel:GetSizer():Layout()",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "dlg:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event) frame:Close(true) end )",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "frame:Close(true)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Media wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua Media\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the Media wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua Media\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "frame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function (event)\r\n                event:Skip()\r\n                if timer then\r\n                    timer:Stop() -- always stop before exiting or deleting it\r\n                    timer:delete()\r\n                    timer = nil\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function (event)\r\n                local ok = mediaCtrl:Play()\r\n\r\n                if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to play %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function (event)\r\n                local ok = mediaCtrl:Pause()\r\n\r\n                if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to pause %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function (event)\r\n                local ok = mediaCtrl:Stop()\r\n\r\n                if not ok then\r\n                    wx.wxMessageBox(string.format(\"Unable to stop %s: Unsupported format?\", fileName),\r\n                                    \"wxLua Media Demo\",\r\n                                    wx.wxICON_ERROR + wx.wxOK)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function (event)\r\n                local pos = event:GetPosition()\r\n                mediaCtrl:SetVolume(pos/slider_range)\r\n            end",
    "type": "function"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function (event) settingPos = true end",
    "type": "function"
  }, {
    "id": 147,
    "text": "function (event)\r\n                if loadedMedia then\r\n                    local pos = event:GetPosition()\r\n                    local len = mediaCtrl:Length()\r\n                    local ok = mediaCtrl:Seek(len*pos/slider_range)\r\n                    if ok == wx.wxInvalidOffset then\r\n                        wx.wxMessageBox(string.format(\"Unable to seek in %s: Unsupported format?\", fileName),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    end\r\n                end\r\n\r\n                settingPos = false\r\n            end",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function (event)\r\n                UpdateButtons()\r\n            end",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function (event)\r\n                local len = 1 -- avoid /0\r\n                local pos = 0\r\n                local str = \"Position 00:00/00:00\"\r\n\r\n                if loadedMedia then\r\n                    len = mediaCtrl:Length()\r\n                    pos = mediaCtrl:Tell()\r\n                    str = string.format(\"Position %s/%s\", msToMMSS(pos), msToMMSS(len))\r\n                end\r\n\r\n                if not settingPos then\r\n                    posSlider:SetValue(slider_range*pos/len)\r\n                end\r\n\r\n                if posText:GetLabel() ~= str then\r\n                    posText:SetLabel(str)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function (event)\r\n                local dlg = wx.wxFileDialog(frame, \"Choose a media file\",\r\n                                            wx.wxGetCwd(), \"\", \"All Files (*)|*|MP3 Music Files (*.mp3)|*.mp3|MPG Video Files (*.mpg)|*.mpg|AVI Movie Files (*.avi)|*.avi\",\r\n                                            wx.wxFD_OPEN + wx.wxFD_FILE_MUST_EXIST + wx.wxFD_CHANGE_DIR )\r\n                if dlg:ShowModal() == wx.wxID_OK then\r\n                    local filepath = dlg:GetPath()\r\n                    loadedMedia = false\r\n                    fileName = \"\"\r\n\r\n                    if not mediaCtrl:Load(filepath) then\r\n                        wx.wxMessageBox(string.format(\"Unable to load %s: Unsupported format?\", filepath),\r\n                                        \"wxLua Media Demo\",\r\n                                        wx.wxICON_ERROR + wx.wxOK)\r\n                    else\r\n                        posSlider:SetValue(0)\r\n                        loadedMedia = true\r\n                        fileName = dlg:GetFilename()\r\n                        local ms = mediaCtrl:Length()\r\n                        local s = mediaCtrl:GetBestSize()\r\n                        frame:SetStatusText(string.format(\"Loaded: '%s' Length %s Size %dx%d\", fileName, msToMMSS(ms), s:GetWidth(), s:GetHeight()))\r\n                        mediaCtrl:SetInitialSize()\r\n                        panel:GetSizer():Layout()\r\n                    end\r\n                end\r\n                dlg:Destroy()\r\n                UpdateButtons()\r\n            end",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function (event) frame:Close(true) end",
    "type": "function"
  }, {
    "id": 156,
    "text": "function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Media wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua Media\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end",
    "type": "function"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "",
    "type": "function container"
  }, {
    "id": 159,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 160,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 161,
    "text": "wxTimer",
    "type": "global function"
  }, {
    "id": 162,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 163,
    "text": "wxStaticText",
    "type": "global function"
  }, {
    "id": 164,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 165,
    "text": "wxFileDialog",
    "type": "global function"
  }, {
    "id": 166,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 167,
    "text": "wxSlider",
    "type": "global function"
  }, {
    "id": 168,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 169,
    "text": "wxPanel",
    "type": "global function"
  }, {
    "id": 170,
    "text": "wxGetCwd",
    "type": "global function"
  }, {
    "id": 171,
    "text": "wxButton",
    "type": "global function"
  }, {
    "id": 172,
    "text": "wxMediaCtrl",
    "type": "global function"
  }, {
    "id": 173,
    "text": "wxFlexGridSizer",
    "type": "global function"
  }, {
    "id": 174,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 175,
    "text": "format",
    "type": "global function"
  }, {
    "id": 176,
    "text": "require",
    "type": "global function"
  }, {
    "id": 177,
    "text": "",
    "type": "global variable"
  }, {
    "id": 178,
    "text": "",
    "type": "variable container"
  }, {
    "id": 179,
    "text": "",
    "type": "require container"
  }, {
    "id": 180,
    "text": "",
    "type": "global variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "global variable"
  }, {
    "id": 183,
    "text": "",
    "type": "global variable"
  }, {
    "id": 184,
    "text": "",
    "type": "global variable"
  }, {
    "id": 185,
    "text": "",
    "type": "global variable"
  }, {
    "id": 186,
    "text": "",
    "type": "global variable"
  }, {
    "id": 187,
    "text": "",
    "type": "global variable"
  }, {
    "id": 188,
    "text": "",
    "type": "global variable"
  }, {
    "id": 189,
    "text": "",
    "type": "global variable"
  }, {
    "id": 190,
    "text": "",
    "type": "global variable"
  }, {
    "id": 191,
    "text": "",
    "type": "global variable"
  }, {
    "id": 192,
    "text": "",
    "type": "global variable"
  }, {
    "id": 193,
    "text": "",
    "type": "global variable"
  }, {
    "id": 194,
    "text": "",
    "type": "global variable"
  }, {
    "id": 195,
    "text": "",
    "type": "global variable"
  }, {
    "id": 196,
    "text": "",
    "type": "global variable"
  }, {
    "id": 197,
    "text": "",
    "type": "global variable"
  }, {
    "id": 198,
    "text": "",
    "type": "global variable"
  } ]
}