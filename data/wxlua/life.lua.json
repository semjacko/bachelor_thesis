{
  "_filename": "life.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/wxlua/modules/lua/test/life.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 18,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 11
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 42,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "calls",
    "to": 42
  }, {
    "from": 42,
    "label": "calls",
    "to": 36
  }, {
    "from": 42,
    "label": "calls",
    "to": 36
  }, {
    "from": 28,
    "label": "calls",
    "to": 60
  }, {
    "from": 42,
    "label": "calls",
    "to": 60
  }, {
    "from": 42,
    "label": "calls",
    "to": 60
  }, {
    "from": 42,
    "label": "calls",
    "to": 60
  }, {
    "from": 36,
    "label": "calls",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 59,
    "label": "declares",
    "to": 2
  }, {
    "from": 59,
    "label": "declares",
    "to": 5
  }, {
    "from": 59,
    "label": "declares",
    "to": 13
  }, {
    "from": 59,
    "label": "declares",
    "to": 18
  }, {
    "from": 59,
    "label": "declares",
    "to": 28
  }, {
    "from": 59,
    "label": "declares",
    "to": 36
  }, {
    "from": 59,
    "label": "declares",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 1,
    "label": "contains",
    "to": 62
  }, {
    "from": 61,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 61,
    "label": "initializes",
    "to": 65
  }, {
    "from": 61,
    "label": "initializes",
    "to": 66
  }, {
    "from": 61,
    "label": "initializes",
    "to": 67
  }, {
    "from": 61,
    "label": "initializes",
    "to": 68
  }, {
    "from": 61,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 61,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 61,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 61,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 61,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 61,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "life",
    "type": "module"
  }, {
    "id": 2,
    "text": "function delay() -- NOTE: SYSTEM-DEPENDENT, adjust as necessary\r\n  for i=1,10000 do end\r\n  -- local i=os.clock()+1 while(os.clock()<i) do end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "for i=1,10000 do end",
    "type": "statement:numericfor"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function ARRAY2D(w,h)\r\n  local t = {w=w,h=h}\r\n  for y=1,h do\r\n    t[y] = {}\r\n    for x=1,w do\r\n      t[y][x]=0\r\n    end\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local t = {w=w,h=h}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for y=1,h do\r\n    t[y] = {}\r\n    for x=1,w do\r\n      t[y][x]=0\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 8,
    "text": "t[y] = {}",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "for x=1,w do\r\n      t[y][x]=0\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 10,
    "text": "t[y][x]=0",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function _CELLS:spawn(shape,left,top)\r\n  for y=0,shape.h-1 do\r\n    for x=0,shape.w-1 do\r\n      self[top+y][left+x] = shape[y*shape.w+x+1]\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "for y=0,shape.h-1 do\r\n    for x=0,shape.w-1 do\r\n      self[top+y][left+x] = shape[y*shape.w+x+1]\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 15,
    "text": "for x=0,shape.w-1 do\r\n      self[top+y][left+x] = shape[y*shape.w+x+1]\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 16,
    "text": "self[top+y][left+x] = shape[y*shape.w+x+1]",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function _CELLS:evolve(next)\r\n  local ym1,y,yp1,yi=self.h-1,self.h,1,self.h\r\n  while yi > 0 do\r\n    local xm1,x,xp1,xi=self.w-1,self.w,1,self.w\r\n    while xi > 0 do\r\n      local sum = self[ym1][xm1] + self[ym1][x] + self[ym1][xp1] +\r\n                  self[y][xm1] + self[y][xp1] +\r\n                  self[yp1][xm1] + self[yp1][x] + self[yp1][xp1]\r\n      next[y][x] = ((sum==2) and self[y][x]) or ((sum==3) and 1) or 0\r\n      xm1,x,xp1,xi = x,xp1,xp1+1,xi-1\r\n    end\r\n    ym1,y,yp1,yi = y,yp1,yp1+1,yi-1\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local ym1,y,yp1,yi=self.h-1,self.h,1,self.h",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "while yi > 0 do\r\n    local xm1,x,xp1,xi=self.w-1,self.w,1,self.w\r\n    while xi > 0 do\r\n      local sum = self[ym1][xm1] + self[ym1][x] + self[ym1][xp1] +\r\n                  self[y][xm1] + self[y][xp1] +\r\n                  self[yp1][xm1] + self[yp1][x] + self[yp1][xp1]\r\n      next[y][x] = ((sum==2) and self[y][x]) or ((sum==3) and 1) or 0\r\n      xm1,x,xp1,xi = x,xp1,xp1+1,xi-1\r\n    end\r\n    ym1,y,yp1,yi = y,yp1,yp1+1,yi-1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 21,
    "text": "local xm1,x,xp1,xi=self.w-1,self.w,1,self.w",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "while xi > 0 do\r\n      local sum = self[ym1][xm1] + self[ym1][x] + self[ym1][xp1] +\r\n                  self[y][xm1] + self[y][xp1] +\r\n                  self[yp1][xm1] + self[yp1][x] + self[yp1][xp1]\r\n      next[y][x] = ((sum==2) and self[y][x]) or ((sum==3) and 1) or 0\r\n      xm1,x,xp1,xi = x,xp1,xp1+1,xi-1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 23,
    "text": "local sum = self[ym1][xm1] + self[ym1][x] + self[ym1][xp1] +\r\n                  self[y][xm1] + self[y][xp1] +\r\n                  self[yp1][xm1] + self[yp1][x] + self[yp1][xp1]",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "next[y][x] = ((sum==2) and self[y][x]) or ((sum==3) and 1) or 0",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "xm1,x,xp1,xi = x,xp1,xp1+1,xi-1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "ym1,y,yp1,yi = y,yp1,yp1+1,yi-1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function _CELLS:draw()\r\n  local out=\"\" -- accumulate to reduce flicker\r\n  for y=1,self.h do\r\n   for x=1,self.w do\r\n      out=out..(((self[y][x]>0) and ALIVE) or DEAD)\r\n    end\r\n    out=out..\"\\n\"\r\n  end\r\n  write(out)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local out=\"\"",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for y=1,self.h do\r\n   for x=1,self.w do\r\n      out=out..(((self[y][x]>0) and ALIVE) or DEAD)\r\n    end\r\n    out=out..\"\\n\"\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 31,
    "text": "for x=1,self.w do\r\n      out=out..(((self[y][x]>0) and ALIVE) or DEAD)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 32,
    "text": "out=out..(((self[y][x]>0) and ALIVE) or DEAD)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "out=out..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "write(out)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function CELLS(w,h)\r\n  local c = ARRAY2D(w,h)\r\n  c.spawn = _CELLS.spawn\r\n  c.evolve = _CELLS.evolve\r\n  c.draw = _CELLS.draw\r\n  return c\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local c = ARRAY2D(w,h)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "c.spawn = _CELLS.spawn",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "c.evolve = _CELLS.evolve",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "c.draw = _CELLS.draw",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function LIFE(w,h)\r\n  -- create two arrays\r\n  local thisgen = CELLS(w,h)\r\n  local nextgen = CELLS(w,h)\r\n\r\n  -- create some life\r\n  -- about 1000 generations of fun, then a glider steady-state\r\n  thisgen:spawn(GLIDER,5,4)\r\n  thisgen:spawn(EXPLODE,25,10)\r\n  thisgen:spawn(FISH,4,12)\r\n\r\n  -- run until break\r\n  local gen=1\r\n  write(\"\\027[2J\")\t-- ANSI clear screen\r\n  while 1 do\r\n    thisgen:evolve(nextgen)\r\n    thisgen,nextgen = nextgen,thisgen\r\n    write(\"\\027[H\")\t-- ANSI home cursor\r\n    thisgen:draw()\r\n    write(\"Life - generation \",gen,\"\\n\")\r\n    gen=gen+1\r\n    if gen>2000 then break end\r\n    --delay()\t\t-- no delay\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local thisgen = CELLS(w,h)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local nextgen = CELLS(w,h)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "thisgen:spawn(GLIDER,5,4)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "thisgen:spawn(EXPLODE,25,10)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "thisgen:spawn(FISH,4,12)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local gen=1",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "write(\"\\027[2J\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "while 1 do\r\n    thisgen:evolve(nextgen)\r\n    thisgen,nextgen = nextgen,thisgen\r\n    write(\"\\027[H\")\t-- ANSI home cursor\r\n    thisgen:draw()\r\n    write(\"Life - generation \",gen,\"\\n\")\r\n    gen=gen+1\r\n    if gen>2000 then break end\r\n    --delay()\t\t-- no delay\r\n  end",
    "type": "statement:while"
  }, {
    "id": 51,
    "text": "thisgen:evolve(nextgen)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "thisgen,nextgen = nextgen,thisgen",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "write(\"\\027[H\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "thisgen:draw()",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "write(\"Life - generation \",gen,\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "gen=gen+1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if gen>2000 then break end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "",
    "type": "function container"
  }, {
    "id": 60,
    "text": "write",
    "type": "global function"
  }, {
    "id": 61,
    "text": "",
    "type": "variable container"
  }, {
    "id": 62,
    "text": "",
    "type": "require container"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "n/a"
  }, {
    "id": 65,
    "text": "",
    "type": "global variable"
  }, {
    "id": 66,
    "text": "",
    "type": "global variable"
  }, {
    "id": 67,
    "text": "",
    "type": "global variable"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "global variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  }, {
    "id": 71,
    "text": "",
    "type": "global variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "global variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "global variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  } ]
}