{
  "_filename": "coroutine.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/coroutine.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 63
  }, {
    "from": 2,
    "label": "calls",
    "to": 63
  }, {
    "from": 2,
    "label": "calls",
    "to": 63
  }, {
    "from": 29,
    "label": "calls",
    "to": 62
  }, {
    "from": 29,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 47,
    "label": "calls",
    "to": 59
  }, {
    "from": 29,
    "label": "calls",
    "to": 53
  }, {
    "from": 47,
    "label": "calls",
    "to": 48
  }, {
    "from": 47,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 47,
    "label": "calls",
    "to": 58
  }, {
    "from": 2,
    "label": "calls",
    "to": 60
  }, {
    "from": 47,
    "label": "calls",
    "to": 57
  }, {
    "from": 2,
    "label": "calls",
    "to": 67
  }, {
    "from": 2,
    "label": "calls",
    "to": 49
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 47,
    "label": "calls",
    "to": 54
  }, {
    "from": 47,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 2,
    "label": "calls",
    "to": 66
  }, {
    "from": 2,
    "label": "calls",
    "to": 66
  }, {
    "from": 2,
    "label": "calls",
    "to": 66
  }, {
    "from": 47,
    "label": "calls",
    "to": 69
  }, {
    "from": 47,
    "label": "calls",
    "to": 65
  }, {
    "from": 47,
    "label": "calls",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 47,
    "label": "declares",
    "to": 2
  }, {
    "from": 47,
    "label": "declares",
    "to": 26
  }, {
    "from": 47,
    "label": "declares",
    "to": 29
  }, {
    "from": 47,
    "label": "declares",
    "to": 34
  }, {
    "from": 47,
    "label": "declares",
    "to": 36
  }, {
    "from": 47,
    "label": "declares",
    "to": 38
  }, {
    "from": 47,
    "label": "declares",
    "to": 41
  }, {
    "from": 1,
    "label": "declares",
    "to": 60
  }, {
    "from": 1,
    "label": "declares",
    "to": 62
  }, {
    "from": 1,
    "label": "declares",
    "to": 64
  }, {
    "from": 1,
    "label": "declares",
    "to": 65
  }, {
    "from": 1,
    "label": "declares",
    "to": 67
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 71,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 71,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 71,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 71,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 71,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 71,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 71,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 71,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 71,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 72,
    "label": "initializes",
    "to": 70
  }, {
    "from": 16,
    "label": "hasArgument",
    "to": 34
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "coroutine",
    "type": "module"
  }, {
    "id": 2,
    "text": "function ProgressWindow:new(parent, workCoroutine, caption, initialLabel)\r\n\r\n    -- simple little sanity test to ensure that we can call binding functions\r\n    -- fails on r:SetX if wx bindings aren't installed correctly for the coroutine\r\n    local r = wx.wxRect(1,2,3,4)\r\n    r:SetX(1)\r\n\r\n    local o = { }\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n\r\n    -- Check input parameters\r\n    assert(type(workCoroutine) == \"thread\")\r\n    assert(type(caption) == \"string\")\r\n    assert(type(initialLabel) == \"string\")\r\n\r\n    -- Create dialog\r\n    o.dialog = wx.wxDialog(parent, wx.wxID_ANY, caption,\r\n                           wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                           wx.wxDEFAULT_DIALOG_STYLE)\r\n\r\n    o.label = wx.wxTextCtrl(o.dialog, wx.wxID_ANY, \"\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxTE_MULTILINE + wx.wxTE_READONLY)\r\n    local mainSizer = wx.wxBoxSizer(wx.wxVERTICAL)\r\n    mainSizer:Add(o.label, 1, wx.wxGROW)\r\n    o.dialog:SetSizer(mainSizer)\r\n\r\n    -- Handle idle events: run the coroutine's next \"step\"\r\n    o.dialog:Connect(wx.wxEVT_IDLE,\r\n            function (event)\r\n                if coroutine.status(workCoroutine) ~= \"dead\" then\r\n                    local s, msg = coroutine.resume(workCoroutine)\r\n                    if not msg then\r\n                        o.dialog:Close()\r\n                    else\r\n                        o:setStatus(msg)\r\n                    end\r\n                    event:RequestMore()\r\n                    event:Skip()\r\n                end\r\n            end)\r\n\r\n    -- Voil√†\r\n    return o\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local r = wx.wxRect(1,2,3,4)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "r:SetX(1)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local o = { }",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "setmetatable(o, self)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "self.__index = self",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "assert(type(workCoroutine) == \"thread\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "assert(type(caption) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert(type(initialLabel) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "o.dialog = wx.wxDialog(parent, wx.wxID_ANY, caption,\r\n                           wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                           wx.wxDEFAULT_DIALOG_STYLE)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "o.label = wx.wxTextCtrl(o.dialog, wx.wxID_ANY, \"\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxTE_MULTILINE + wx.wxTE_READONLY)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "local mainSizer = wx.wxBoxSizer(wx.wxVERTICAL)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "mainSizer:Add(o.label, 1, wx.wxGROW)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "o.dialog:SetSizer(mainSizer)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "o.dialog:Connect(wx.wxEVT_IDLE,\r\n            function (event)\r\n                if coroutine.status(workCoroutine) ~= \"dead\" then\r\n                    local s, msg = coroutine.resume(workCoroutine)\r\n                    if not msg then\r\n                        o.dialog:Close()\r\n                    else\r\n                        o:setStatus(msg)\r\n                    end\r\n                    event:RequestMore()\r\n                    event:Skip()\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "if coroutine.status(workCoroutine) ~= \"dead\" then\r\n                    local s, msg = coroutine.resume(workCoroutine)\r\n                    if not msg then\r\n                        o.dialog:Close()\r\n                    else\r\n                        o:setStatus(msg)\r\n                    end\r\n                    event:RequestMore()\r\n                    event:Skip()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "local s, msg = coroutine.resume(workCoroutine)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if not msg then\r\n                        o.dialog:Close()\r\n                    else\r\n                        o:setStatus(msg)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "o.dialog:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "o:setStatus(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "event:RequestMore()",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "event:Skip()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function ProgressWindow:setStatus(label)\r\n    self.label:AppendText(\"\\n\"..label)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "self.label:AppendText(\"\\n\"..label)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function workFunc()\r\n                for i = 1, 10 do\r\n                    coroutine.yield(\"Performing step \"..tostring(i)..\"/10\")\r\n                    wx.wxSleep(1)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 30,
    "text": "for i = 1, 10 do\r\n                    coroutine.yield(\"Performing step \"..tostring(i)..\"/10\")\r\n                    wx.wxSleep(1)\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 31,
    "text": "coroutine.yield(\"Performing step \"..tostring(i)..\"/10\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "wx.wxSleep(1)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function (event)\r\n                if coroutine.status(workCoroutine) ~= \"dead\" then\r\n                    local s, msg = coroutine.resume(workCoroutine)\r\n                    if not msg then\r\n                        o.dialog:Close()\r\n                    else\r\n                        o:setStatus(msg)\r\n                    end\r\n                    event:RequestMore()\r\n                    event:Skip()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function (event) frame:Close(true) end",
    "type": "function"
  }, {
    "id": 37,
    "text": "frame:Close(true)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Coroutine wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end",
    "type": "function"
  }, {
    "id": 39,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the Coroutine wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function (event)\r\n            local function workFunc()\r\n                for i = 1, 10 do\r\n                    coroutine.yield(\"Performing step \"..tostring(i)..\"/10\")\r\n                    wx.wxSleep(1)\r\n                end\r\n            end\r\n\r\n            local workCoroutine = coroutine.create(workFunc)\r\n\r\n            local wndProgress =\r\n                ProgressWindow:new(frame, workCoroutine,\r\n                                   \"Performing some long operation\",\r\n                                   \"Performing step 1/many\")\r\n            wndProgress.dialog:ShowModal(true)\r\n\r\n            wndProgress.dialog:Destroy()\r\n        end",
    "type": "function"
  }, {
    "id": 42,
    "text": "local workCoroutine = coroutine.create(workFunc)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local wndProgress =\r\n                ProgressWindow:new(frame, workCoroutine,\r\n                                   \"Performing some long operation\",\r\n                                   \"Performing step 1/many\")",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "wndProgress.dialog:ShowModal(true)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "wndProgress.dialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "",
    "type": "function container"
  }, {
    "id": 48,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 49,
    "text": "wxDialog",
    "type": "global function"
  }, {
    "id": 50,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 51,
    "text": "wxRect",
    "type": "global function"
  }, {
    "id": 52,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 53,
    "text": "wxSleep",
    "type": "global function"
  }, {
    "id": 54,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 55,
    "text": "wxTextCtrl",
    "type": "global function"
  }, {
    "id": 56,
    "text": "wxBoxSizer",
    "type": "global function"
  }, {
    "id": 57,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 58,
    "text": "wxPanel",
    "type": "global function"
  }, {
    "id": 59,
    "text": "wxButton",
    "type": "global function"
  }, {
    "id": 60,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 61,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 62,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 63,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 64,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 65,
    "text": "create",
    "type": "global function"
  }, {
    "id": 66,
    "text": "type",
    "type": "global function"
  }, {
    "id": 67,
    "text": "status",
    "type": "global function"
  }, {
    "id": 68,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 69,
    "text": "require",
    "type": "global function"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "variable container"
  }, {
    "id": 72,
    "text": "",
    "type": "require container"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "global variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "global variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "global variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  } ]
}