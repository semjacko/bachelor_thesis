{
  "_filename": "gridtable.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/gridtable.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 15
  }, {
    "from": 5,
    "label": "has",
    "to": 16
  }, {
    "from": 5,
    "label": "has",
    "to": 17
  }, {
    "from": 5,
    "label": "has",
    "to": 18
  }, {
    "from": 5,
    "label": "has",
    "to": 19
  }, {
    "from": 5,
    "label": "has",
    "to": 20
  }, {
    "from": 5,
    "label": "has",
    "to": 21
  }, {
    "from": 5,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 32,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 30
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 34
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 34
  }, {
    "from": 46,
    "label": "has",
    "to": 3
  }, {
    "from": 46,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 30
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 34
  }, {
    "from": 5,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 34
  }, {
    "from": 5,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 23
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 3
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 3
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 3
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 29
  }, {
    "from": 64,
    "label": "has",
    "to": 3
  }, {
    "from": 64,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 30
  }, {
    "from": 65,
    "label": "has",
    "to": 31
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 30
  }, {
    "from": 67,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 33,
    "label": "has",
    "to": 40
  }, {
    "from": 67,
    "label": "has",
    "to": 3
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 42
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 30
  }, {
    "from": 73,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 34
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 34
  }, {
    "from": 75,
    "label": "has",
    "to": 3
  }, {
    "from": 75,
    "label": "has",
    "to": 3
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 30
  }, {
    "from": 77,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 34
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 34
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 3
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 5,
    "label": "calls",
    "to": 64
  }, {
    "from": 5,
    "label": "calls",
    "to": 99
  }, {
    "from": 5,
    "label": "calls",
    "to": 99
  }, {
    "from": 5,
    "label": "calls",
    "to": 99
  }, {
    "from": 5,
    "label": "calls",
    "to": 99
  }, {
    "from": 89,
    "label": "calls",
    "to": 95
  }, {
    "from": 89,
    "label": "calls",
    "to": 92
  }, {
    "from": 89,
    "label": "calls",
    "to": 5
  }, {
    "from": 89,
    "label": "calls",
    "to": 97
  }, {
    "from": 89,
    "label": "calls",
    "to": 101
  }, {
    "from": 5,
    "label": "calls",
    "to": 100
  }, {
    "from": 5,
    "label": "calls",
    "to": 100
  }, {
    "from": 5,
    "label": "calls",
    "to": 100
  }, {
    "from": 5,
    "label": "calls",
    "to": 100
  }, {
    "from": 5,
    "label": "calls",
    "to": 100
  }, {
    "from": 89,
    "label": "calls",
    "to": 94
  }, {
    "from": 89,
    "label": "calls",
    "to": 94
  }, {
    "from": 89,
    "label": "calls",
    "to": 98
  }, {
    "from": 89,
    "label": "calls",
    "to": 91
  }, {
    "from": 89,
    "label": "calls",
    "to": 96
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 89,
    "label": "calls",
    "to": 90
  }, {
    "from": 89,
    "label": "calls",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 89
  }, {
    "from": 89,
    "label": "declares",
    "to": 2
  }, {
    "from": 89,
    "label": "declares",
    "to": 4
  }, {
    "from": 89,
    "label": "declares",
    "to": 5
  }, {
    "from": 89,
    "label": "declares",
    "to": 56
  }, {
    "from": 89,
    "label": "declares",
    "to": 58
  }, {
    "from": 89,
    "label": "declares",
    "to": 60
  }, {
    "from": 89,
    "label": "declares",
    "to": 62
  }, {
    "from": 89,
    "label": "declares",
    "to": 64
  }, {
    "from": 89,
    "label": "declares",
    "to": 65
  }, {
    "from": 89,
    "label": "declares",
    "to": 67
  }, {
    "from": 89,
    "label": "declares",
    "to": 69
  }, {
    "from": 89,
    "label": "declares",
    "to": 71
  }, {
    "from": 89,
    "label": "declares",
    "to": 73
  }, {
    "from": 89,
    "label": "declares",
    "to": 75
  }, {
    "from": 89,
    "label": "declares",
    "to": 77
  }, {
    "from": 89,
    "label": "declares",
    "to": 79
  }, {
    "from": 89,
    "label": "declares",
    "to": 81
  }, {
    "from": 89,
    "label": "declares",
    "to": 83
  }, {
    "from": 89,
    "label": "declares",
    "to": 86
  }, {
    "from": 1,
    "label": "contains",
    "to": 103
  }, {
    "from": 1,
    "label": "contains",
    "to": 104
  }, {
    "from": 103,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 103,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 103,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 103,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 103,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 103,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 103,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 103,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 104,
    "label": "initializes",
    "to": 102
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "gridtable",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function _(s) return s end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "local function _T(s) return s end",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function connectvirtuals(gridtable)\r\n    --enum Columns\r\n    --{\r\n    local Col_Id = 0\r\n    local Col_Summary = 1\r\n    local Col_Severity = 2\r\n    local Col_Priority = 3\r\n    local Col_Platform = 4\r\n    local Col_Opened = 5\r\n    local Col_Max = 6\r\n    --};\r\n\r\n    --enum Severity\r\n    --{\r\n    local Sev_Wish = 0\r\n    local Sev_Minor = 1\r\n    local Sev_Normal = 2\r\n    local Sev_Major = 3\r\n    local Sev_Critical = 4\r\n    local Sev_Max = 5\r\n    --};\r\n\r\n    local --[[static const wxString]] severities =\r\n    {\r\n        _T(\"wishlist\"),\r\n        _T(\"minor\"),\r\n        _T(\"normal\"),\r\n        _T(\"major\"),\r\n        _T(\"critical\"),\r\n    };\r\n\r\n    local --[[static struct BugsGridData\r\n    {\r\n        int id;\r\n        wxChar summary[80];\r\n        Severity severity;\r\n        int prio;\r\n        wxChar platform[12];\r\n        bool opened;\r\n    }]] gs_dataBugsGrid =\r\n    {\r\n        { id=18, summary=_T(\"foo doesn't work\"), severity=Sev_Major, prio=1, platform=_T(\"wxMSW\"), opened=true },\r\n        { id=27, summary=_T(\"bar crashes\"), severity=Sev_Critical, prio=1, platform=_T(\"all\"), opened=false },\r\n        { id=45, summary=_T(\"printing is slow\"), severity=Sev_Minor, prio=3, platform=_T(\"wxMSW\"), opened=true },\r\n        { id=68, summary=_T(\"Rectangle() fails\"), severity=Sev_Normal, prio=1, platform=_T(\"wxMSW\"), opened=false },\r\n    };\r\n\r\n    --[[static const wxChar *headers[Col_Max] = ]]\r\n    local headers =\r\n    {\r\n        _T(\"Id\"),\r\n        _T(\"Summary\"),\r\n        _T(\"Severity\"),\r\n        _T(\"Priority\"),\r\n        _T(\"Platform\"),\r\n        _T(\"Opened?\"),\r\n    };\r\n\r\n\r\n    --wxString BugsGridTable::GetTypeName(int WXUNUSED(row), int col)\r\n    gridtable.GetTypeName = function( self, row, col )\r\n        if col == Col_Id or col == Col_Priority then\r\n            return wx.wxGRID_VALUE_NUMBER\r\n        elseif col == Col_Severity or col == Col_Summary then\r\n            return string.format(_T(\"%s:80\"), wx.wxGRID_VALUE_STRING)\r\n        elseif col == Col_Platform then\r\n            return string.format(_T(\"%s:all,MSW,GTK,other\"), wx.wxGRID_VALUE_CHOICE)\r\n        elseif col == Col_Opened then\r\n            return wx.wxGRID_VALUE_BOOL\r\n        end\r\n        return wx.wxEmptyString\r\n    end\r\n\r\n    --int BugsGridTable::GetNumberRows()\r\n    gridtable.GetNumberRows = function( self )\r\n        return #gs_dataBugsGrid\r\n    end\r\n\r\n    --int BugsGridTable::GetNumberCols()\r\n    gridtable.GetNumberCols = function( self )\r\n        return Col_Max\r\n    end\r\n\r\n    --bool BugsGridTable::IsEmptyCell( int WXUNUSED(row), int WXUNUSED(col) )\r\n    gridtable.IsEmptyCell = function( self, row, col )\r\n        return false\r\n    end\r\n\r\n    --wxString BugsGridTable::GetValue( int row, int col )\r\n    gridtable.GetValue = function( self, row, col )\r\n        local function iff(cond, A, B) if cond then return A else return B end end\r\n\r\n        local gd = gs_dataBugsGrid[row+1]\r\n        if col == Col_Id then\r\n            return string.format(_T(\"%d\"), gd.id);\r\n        elseif col == Col_Priority then\r\n            return string.format(_T(\"%d\"), gd.prio);\r\n        elseif col == Col_Opened then\r\n            return iff(gd.opened, _T(\"1\"), _T(\"0\"))\r\n        elseif col == Col_Severity then\r\n            return severities[gd.severity+1];\r\n        elseif col == Col_Summary then\r\n            return gd.summary;\r\n        elseif col == Col_Platform then\r\n            return gd.platform;\r\n        end\r\n        return wx.wxEmptyString;\r\n    end\r\n\r\n    --void BugsGridTable::SetValue( int row, int col, const wxString& value )\r\n    gridtable.SetValue = function( self, row, col, value )\r\n        local gd = gs_dataBugsGrid[row+1]\r\n        if col == Col_Id or col == Col_Priority or col == Col_Opened then\r\n            error(_T(\"unexpected column\"))\r\n        elseif col == Col_Severity then\r\n            for n=1,#severities do\r\n                if severities[n] == value then\r\n                    gd.severity = n-1\r\n                    return\r\n                end\r\n            end\r\n            --Invalid severity value\r\n            gd.severity = Sev_Normal\r\n        elseif col == Col_Summary then\r\n            gd.summary = value\r\n        elseif col == Col_Platform then\r\n            gd.platform = value\r\n        end\r\n    end\r\n\r\n    --bool\r\n    --BugsGridTable::CanGetValueAs(int WXUNUSED(row),\r\n    --                             int col,\r\n    --                             const wxString& typeName)\r\n    gridtable.CanGetValueAs = function( self, row, col, typeName )\r\n        if typeName == wx.wxGRID_VALUE_STRING then\r\n            return true\r\n        elseif typeName == wx.wxGRID_VALUE_BOOL then\r\n            return col == Col_Opened\r\n        elseif typeName == wx.wxGRID_VALUE_NUMBER then\r\n            return col == Col_Id or col == Col_Priority or col == Col_Severity\r\n        else\r\n            return false\r\n        end\r\n    end\r\n\r\n    --bool BugsGridTable::CanSetValueAs( int row, int col, const wxString& typeName )\r\n    gridtable.CanSetValueAs = function( self, row, col, typeName )\r\n        return self:CanGetValueAs(row, col, typeName)\r\n    end\r\n\r\n    --long BugsGridTable::GetValueAsLong( int row, int col )\r\n    gridtable.GetValueAsLong = function( self, row, col )\r\n        local gd = gs_dataBugsGrid[row+1]\r\n\r\n        if col == Col_Id then\r\n            return gd.id;\r\n        elseif col == Col_Priority then\r\n            return gd.prio;\r\n        elseif col == Col_Severity then\r\n            return gd.severity;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n            return -1;\r\n        end\r\n    end\r\n\r\n    --bool BugsGridTable::GetValueAsBool( int row, int col )\r\n    gridtable.GetValueAsBool = function( self, row, col )\r\n        if col == Col_Opened then\r\n            return gs_dataBugsGrid[row+1].opened;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n            return false;\r\n        end\r\n    end\r\n\r\n    --void BugsGridTable::SetValueAsLong( int row, int col, long value )\r\n    gridtable.SetValueAsLong = function( self, row, col, value )\r\n        local gd = gs_dataBugsGrid[row+1]\r\n\r\n        if col == Col_Priority then\r\n            gd.prio = value;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n        end\r\n    end\r\n\r\n    --void BugsGridTable::SetValueAsBool( int row, int col, bool value )\r\n    gridtable.SetValueAsBool = function( self, row, col, value )\r\n        if col == Col_Opened then\r\n            gs_dataBugsGrid[row+1].opened = value;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n        end\r\n    end\r\n\r\n    --wxString BugsGridTable::GetColLabelValue( int col )\r\n    gridtable.GetColLabelValue = function( self, col )\r\n        return headers[col+1];\r\n    end\r\n\r\n--~     gridtable.GetAttr = function(self,row,col,kind )\r\n--~         --[[\r\n--~         %enum wxGridCellAttr::wxAttrKind\r\n--~         Any\r\n--~         Default\r\n--~         Cell\r\n--~         Row\r\n--~         Col\r\n--~         Merged\r\n--~         --]]\r\n--~         local attr=wx.wxGridCellAttr()\r\n--~         if row==0 and col==0 then\r\n--~             attr:SetTextColour(wx.wxRED)\r\n--~         elseif row==0 and col==1 then\r\n--~             attr:SetBackgroundColour(wx.wxCYAN)\r\n--~         elseif row==0 and col==2 then\r\n--~             attr:SetReadOnly(true)\r\n--~         end\r\n--~         return attr\r\n--~     end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local Col_Id = 0",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local Col_Summary = 1",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local Col_Severity = 2",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local Col_Priority = 3",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local Col_Platform = 4",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local Col_Opened = 5",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local Col_Max = 6",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local Sev_Wish = 0",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local Sev_Minor = 1",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local Sev_Normal = 2",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local Sev_Major = 3",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local Sev_Critical = 4",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local Sev_Max = 5",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local --[[static const wxString]] severities =\r\n    {\r\n        _T(\"wishlist\"),\r\n        _T(\"minor\"),\r\n        _T(\"normal\"),\r\n        _T(\"major\"),\r\n        _T(\"critical\"),\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local --[[static struct BugsGridData\r\n    {\r\n        int id;\r\n        wxChar summary[80];\r\n        Severity severity;\r\n        int prio;\r\n        wxChar platform[12];\r\n        bool opened;\r\n    }]] gs_dataBugsGrid =\r\n    {\r\n        { id=18, summary=_T(\"foo doesn't work\"), severity=Sev_Major, prio=1, platform=_T(\"wxMSW\"), opened=true },\r\n        { id=27, summary=_T(\"bar crashes\"), severity=Sev_Critical, prio=1, platform=_T(\"all\"), opened=false },\r\n        { id=45, summary=_T(\"printing is slow\"), severity=Sev_Minor, prio=3, platform=_T(\"wxMSW\"), opened=true },\r\n        { id=68, summary=_T(\"Rectangle() fails\"), severity=Sev_Normal, prio=1, platform=_T(\"wxMSW\"), opened=false },\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local headers =\r\n    {\r\n        _T(\"Id\"),\r\n        _T(\"Summary\"),\r\n        _T(\"Severity\"),\r\n        _T(\"Priority\"),\r\n        _T(\"Platform\"),\r\n        _T(\"Opened?\"),\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "gridtable.GetTypeName = function( self, row, col )\r\n        if col == Col_Id or col == Col_Priority then\r\n            return wx.wxGRID_VALUE_NUMBER\r\n        elseif col == Col_Severity or col == Col_Summary then\r\n            return string.format(_T(\"%s:80\"), wx.wxGRID_VALUE_STRING)\r\n        elseif col == Col_Platform then\r\n            return string.format(_T(\"%s:all,MSW,GTK,other\"), wx.wxGRID_VALUE_CHOICE)\r\n        elseif col == Col_Opened then\r\n            return wx.wxGRID_VALUE_BOOL\r\n        end\r\n        return wx.wxEmptyString\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if col == Col_Id or col == Col_Priority then\r\n            return wx.wxGRID_VALUE_NUMBER\r\n        elseif col == Col_Severity or col == Col_Summary then\r\n            return string.format(_T(\"%s:80\"), wx.wxGRID_VALUE_STRING)\r\n        elseif col == Col_Platform then\r\n            return string.format(_T(\"%s:all,MSW,GTK,other\"), wx.wxGRID_VALUE_CHOICE)\r\n        elseif col == Col_Opened then\r\n            return wx.wxGRID_VALUE_BOOL\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "gridtable.GetNumberRows = function( self )\r\n        return #gs_dataBugsGrid\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "gridtable.GetNumberCols = function( self )\r\n        return Col_Max\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "gridtable.IsEmptyCell = function( self, row, col )\r\n        return false\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "gridtable.GetValue = function( self, row, col )\r\n        local function iff(cond, A, B) if cond then return A else return B end end\r\n\r\n        local gd = gs_dataBugsGrid[row+1]\r\n        if col == Col_Id then\r\n            return string.format(_T(\"%d\"), gd.id);\r\n        elseif col == Col_Priority then\r\n            return string.format(_T(\"%d\"), gd.prio);\r\n        elseif col == Col_Opened then\r\n            return iff(gd.opened, _T(\"1\"), _T(\"0\"))\r\n        elseif col == Col_Severity then\r\n            return severities[gd.severity+1];\r\n        elseif col == Col_Summary then\r\n            return gd.summary;\r\n        elseif col == Col_Platform then\r\n            return gd.platform;\r\n        end\r\n        return wx.wxEmptyString;\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local function iff(cond, A, B) if cond then return A else return B end end",
    "type": "statement:localfunction"
  }, {
    "id": 29,
    "text": "if cond then return A else return B end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local gd = gs_dataBugsGrid[row+1]",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if col == Col_Id then\r\n            return string.format(_T(\"%d\"), gd.id);\r\n        elseif col == Col_Priority then\r\n            return string.format(_T(\"%d\"), gd.prio);\r\n        elseif col == Col_Opened then\r\n            return iff(gd.opened, _T(\"1\"), _T(\"0\"))\r\n        elseif col == Col_Severity then\r\n            return severities[gd.severity+1];\r\n        elseif col == Col_Summary then\r\n            return gd.summary;\r\n        elseif col == Col_Platform then\r\n            return gd.platform;\r\n        end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "gridtable.SetValue = function( self, row, col, value )\r\n        local gd = gs_dataBugsGrid[row+1]\r\n        if col == Col_Id or col == Col_Priority or col == Col_Opened then\r\n            error(_T(\"unexpected column\"))\r\n        elseif col == Col_Severity then\r\n            for n=1,#severities do\r\n                if severities[n] == value then\r\n                    gd.severity = n-1\r\n                    return\r\n                end\r\n            end\r\n            --Invalid severity value\r\n            gd.severity = Sev_Normal\r\n        elseif col == Col_Summary then\r\n            gd.summary = value\r\n        elseif col == Col_Platform then\r\n            gd.platform = value\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if col == Col_Id or col == Col_Priority or col == Col_Opened then\r\n            error(_T(\"unexpected column\"))\r\n        elseif col == Col_Severity then\r\n            for n=1,#severities do\r\n                if severities[n] == value then\r\n                    gd.severity = n-1\r\n                    return\r\n                end\r\n            end\r\n            --Invalid severity value\r\n            gd.severity = Sev_Normal\r\n        elseif col == Col_Summary then\r\n            gd.summary = value\r\n        elseif col == Col_Platform then\r\n            gd.platform = value\r\n        end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "error(_T(\"unexpected column\"))",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "for n=1,#severities do\r\n                if severities[n] == value then\r\n                    gd.severity = n-1\r\n                    return\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 36,
    "text": "if severities[n] == value then\r\n                    gd.severity = n-1\r\n                    return\r\n                end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "gd.severity = n-1",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "gd.severity = Sev_Normal",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "gd.summary = value",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "gd.platform = value",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "gridtable.CanGetValueAs = function( self, row, col, typeName )\r\n        if typeName == wx.wxGRID_VALUE_STRING then\r\n            return true\r\n        elseif typeName == wx.wxGRID_VALUE_BOOL then\r\n            return col == Col_Opened\r\n        elseif typeName == wx.wxGRID_VALUE_NUMBER then\r\n            return col == Col_Id or col == Col_Priority or col == Col_Severity\r\n        else\r\n            return false\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if typeName == wx.wxGRID_VALUE_STRING then\r\n            return true\r\n        elseif typeName == wx.wxGRID_VALUE_BOOL then\r\n            return col == Col_Opened\r\n        elseif typeName == wx.wxGRID_VALUE_NUMBER then\r\n            return col == Col_Id or col == Col_Priority or col == Col_Severity\r\n        else\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "gridtable.CanSetValueAs = function( self, row, col, typeName )\r\n        return self:CanGetValueAs(row, col, typeName)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "gridtable.GetValueAsLong = function( self, row, col )\r\n        local gd = gs_dataBugsGrid[row+1]\r\n\r\n        if col == Col_Id then\r\n            return gd.id;\r\n        elseif col == Col_Priority then\r\n            return gd.prio;\r\n        elseif col == Col_Severity then\r\n            return gd.severity;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n            return -1;\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if col == Col_Id then\r\n            return gd.id;\r\n        elseif col == Col_Priority then\r\n            return gd.prio;\r\n        elseif col == Col_Severity then\r\n            return gd.severity;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n            return -1;\r\n        end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "gridtable.GetValueAsBool = function( self, row, col )\r\n        if col == Col_Opened then\r\n            return gs_dataBugsGrid[row+1].opened;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n            return false;\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if col == Col_Opened then\r\n            return gs_dataBugsGrid[row+1].opened;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n            return false;\r\n        end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "gridtable.SetValueAsLong = function( self, row, col, value )\r\n        local gd = gs_dataBugsGrid[row+1]\r\n\r\n        if col == Col_Priority then\r\n            gd.prio = value;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if col == Col_Priority then\r\n            gd.prio = value;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n        end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "gd.prio = value",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "gridtable.SetValueAsBool = function( self, row, col, value )\r\n        if col == Col_Opened then\r\n            gs_dataBugsGrid[row+1].opened = value;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n        end\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if col == Col_Opened then\r\n            gs_dataBugsGrid[row+1].opened = value;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n        end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "gs_dataBugsGrid[row+1].opened = value",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "gridtable.GetColLabelValue = function( self, col )\r\n        return headers[col+1];\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function( self, row, col )\r\n        if col == Col_Id or col == Col_Priority then\r\n            return wx.wxGRID_VALUE_NUMBER\r\n        elseif col == Col_Severity or col == Col_Summary then\r\n            return string.format(_T(\"%s:80\"), wx.wxGRID_VALUE_STRING)\r\n        elseif col == Col_Platform then\r\n            return string.format(_T(\"%s:all,MSW,GTK,other\"), wx.wxGRID_VALUE_CHOICE)\r\n        elseif col == Col_Opened then\r\n            return wx.wxGRID_VALUE_BOOL\r\n        end\r\n        return wx.wxEmptyString\r\n    end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function( self )\r\n        return #gs_dataBugsGrid\r\n    end",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function( self )\r\n        return Col_Max\r\n    end",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function( self, row, col )\r\n        return false\r\n    end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "local function iff(cond, A, B) if cond then return A else return B end end",
    "type": "function"
  }, {
    "id": 65,
    "text": "function( self, row, col )\r\n        local function iff(cond, A, B) if cond then return A else return B end end\r\n\r\n        local gd = gs_dataBugsGrid[row+1]\r\n        if col == Col_Id then\r\n            return string.format(_T(\"%d\"), gd.id);\r\n        elseif col == Col_Priority then\r\n            return string.format(_T(\"%d\"), gd.prio);\r\n        elseif col == Col_Opened then\r\n            return iff(gd.opened, _T(\"1\"), _T(\"0\"))\r\n        elseif col == Col_Severity then\r\n            return severities[gd.severity+1];\r\n        elseif col == Col_Summary then\r\n            return gd.summary;\r\n        elseif col == Col_Platform then\r\n            return gd.platform;\r\n        end\r\n        return wx.wxEmptyString;\r\n    end",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function( self, row, col, value )\r\n        local gd = gs_dataBugsGrid[row+1]\r\n        if col == Col_Id or col == Col_Priority or col == Col_Opened then\r\n            error(_T(\"unexpected column\"))\r\n        elseif col == Col_Severity then\r\n            for n=1,#severities do\r\n                if severities[n] == value then\r\n                    gd.severity = n-1\r\n                    return\r\n                end\r\n            end\r\n            --Invalid severity value\r\n            gd.severity = Sev_Normal\r\n        elseif col == Col_Summary then\r\n            gd.summary = value\r\n        elseif col == Col_Platform then\r\n            gd.platform = value\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function( self, row, col, typeName )\r\n        if typeName == wx.wxGRID_VALUE_STRING then\r\n            return true\r\n        elseif typeName == wx.wxGRID_VALUE_BOOL then\r\n            return col == Col_Opened\r\n        elseif typeName == wx.wxGRID_VALUE_NUMBER then\r\n            return col == Col_Id or col == Col_Priority or col == Col_Severity\r\n        else\r\n            return false\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function( self, row, col, typeName )\r\n        return self:CanGetValueAs(row, col, typeName)\r\n    end",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function( self, row, col )\r\n        local gd = gs_dataBugsGrid[row+1]\r\n\r\n        if col == Col_Id then\r\n            return gd.id;\r\n        elseif col == Col_Priority then\r\n            return gd.prio;\r\n        elseif col == Col_Severity then\r\n            return gd.severity;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n            return -1;\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function( self, row, col )\r\n        if col == Col_Opened then\r\n            return gs_dataBugsGrid[row+1].opened;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n            return false;\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function( self, row, col, value )\r\n        local gd = gs_dataBugsGrid[row+1]\r\n\r\n        if col == Col_Priority then\r\n            gd.prio = value;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function( self, row, col, value )\r\n        if col == Col_Opened then\r\n            gs_dataBugsGrid[row+1].opened = value;\r\n        else\r\n            error(_T(\"unexpected column\"));\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function( self, col )\r\n        return headers[col+1];\r\n    end",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function (event)\r\n        frame:Close()\r\n    end",
    "type": "function"
  }, {
    "id": 84,
    "text": "frame:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function (event)\r\n        wx.wxMessageBox('This is the \"About\" dialog of the wxGrid wxLua sample.\\n'..\r\n                        wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                        \"About wxLua\",\r\n                        wx.wxOK + wx.wxICON_INFORMATION,\r\n                        frame )\r\n    end",
    "type": "function"
  }, {
    "id": 87,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the wxGrid wxLua sample.\\n'..\r\n                        wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                        \"About wxLua\",\r\n                        wx.wxOK + wx.wxICON_INFORMATION,\r\n                        frame )",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "",
    "type": "function container"
  }, {
    "id": 90,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 91,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 92,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 93,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 94,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 95,
    "text": "wxLuaGridTableBase",
    "type": "global function"
  }, {
    "id": 96,
    "text": "wxGrid",
    "type": "global function"
  }, {
    "id": 97,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 98,
    "text": "wxPoint",
    "type": "global function"
  }, {
    "id": 99,
    "text": "format",
    "type": "global function"
  }, {
    "id": 100,
    "text": "error",
    "type": "global function"
  }, {
    "id": 101,
    "text": "require",
    "type": "global function"
  }, {
    "id": 102,
    "text": "",
    "type": "global variable"
  }, {
    "id": 103,
    "text": "",
    "type": "variable container"
  }, {
    "id": 104,
    "text": "",
    "type": "require container"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "global variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "global variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  } ]
}