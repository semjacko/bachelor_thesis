{
  "_filename": "wxluasudoku.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/wxluasudoku.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 18,
    "label": "has",
    "to": 28
  }, {
    "from": 18,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 21
  }, {
    "from": 30,
    "label": "has",
    "to": 22
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 38,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 38,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 40
  }, {
    "from": 54,
    "label": "has",
    "to": 41
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 64,
    "label": "has",
    "to": 4
  }, {
    "from": 64,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 77,
    "label": "has",
    "to": 86
  }, {
    "from": 77,
    "label": "has",
    "to": 4
  }, {
    "from": 77,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 86
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 101,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 112
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 113
  }, {
    "from": 96,
    "label": "has",
    "to": 114
  }, {
    "from": 96,
    "label": "has",
    "to": 115
  }, {
    "from": 96,
    "label": "has",
    "to": 4
  }, {
    "from": 96,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 4
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 117,
    "label": "has",
    "to": 4
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 129,
    "label": "has",
    "to": 133
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 135
  }, {
    "from": 127,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 125,
    "label": "has",
    "to": 138
  }, {
    "from": 125,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 142,
    "label": "has",
    "to": 135
  }, {
    "from": 142,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 135
  }, {
    "from": 140,
    "label": "has",
    "to": 4
  }, {
    "from": 140,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 128
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 153,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 153,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 153,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 128
  }, {
    "from": 152,
    "label": "has",
    "to": 135
  }, {
    "from": 152,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 150,
    "label": "has",
    "to": 138
  }, {
    "from": 150,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 4
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 4
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 4
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 4
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 4
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 4
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 4
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 4
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 4
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 4
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 4
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 4
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 4
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 194,
    "label": "has",
    "to": 197
  }, {
    "from": 194,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 194,
    "label": "has",
    "to": 200
  }, {
    "from": 194,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 201,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 201,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 194,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 214,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 214,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 194,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 4
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 4
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 232,
    "label": "has",
    "to": 235
  }, {
    "from": 236,
    "label": "has",
    "to": 4
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 233
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 242,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 242,
    "label": "has",
    "to": 250
  }, {
    "from": 242,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 217
  }, {
    "from": 252,
    "label": "has",
    "to": 218
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 221
  }, {
    "from": 253,
    "label": "has",
    "to": 222
  }, {
    "from": 251,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 225
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 238,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 257,
    "label": "has",
    "to": 4
  }, {
    "from": 257,
    "label": "has",
    "to": 4
  }, {
    "from": 257,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 260,
    "label": "has",
    "to": 269
  }, {
    "from": 270,
    "label": "has",
    "to": 4
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 272,
    "label": "has",
    "to": 4
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 274,
    "label": "has",
    "to": 276
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 277,
    "label": "has",
    "to": 279
  }, {
    "from": 280,
    "label": "has",
    "to": 4
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 282,
    "label": "has",
    "to": 284
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 285,
    "label": "has",
    "to": 287
  }, {
    "from": 285,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 285,
    "label": "has",
    "to": 4
  }, {
    "from": 285,
    "label": "has",
    "to": 292
  }, {
    "from": 293,
    "label": "has",
    "to": 286
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 294,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 283
  }, {
    "from": 293,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 286
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 295
  }, {
    "from": 299,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 283
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "has",
    "to": 286
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 283
  }, {
    "from": 301,
    "label": "has",
    "to": 305
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 306,
    "label": "has",
    "to": 309
  }, {
    "from": 306,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 233
  }, {
    "from": 310,
    "label": "has",
    "to": 243
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 312
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 312,
    "label": "has",
    "to": 315
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 312,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 312,
    "label": "has",
    "to": 319
  }, {
    "from": 312,
    "label": "has",
    "to": 320
  }, {
    "from": 312,
    "label": "has",
    "to": 321
  }, {
    "from": 306,
    "label": "has",
    "to": 4
  }, {
    "from": 306,
    "label": "has",
    "to": 322
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 323,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 326
  }, {
    "from": 323,
    "label": "has",
    "to": 327
  }, {
    "from": 323,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 323,
    "label": "has",
    "to": 4
  }, {
    "from": 323,
    "label": "has",
    "to": 331
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 233
  }, {
    "from": 333,
    "label": "has",
    "to": 324
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 334,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 337,
    "label": "has",
    "to": 330
  }, {
    "from": 333,
    "label": "has",
    "to": 338
  }, {
    "from": 332,
    "label": "has",
    "to": 339
  }, {
    "from": 332,
    "label": "has",
    "to": 340
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 341,
    "label": "has",
    "to": 344
  }, {
    "from": 341,
    "label": "has",
    "to": 345
  }, {
    "from": 341,
    "label": "has",
    "to": 346
  }, {
    "from": 341,
    "label": "has",
    "to": 347
  }, {
    "from": 341,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 350,
    "label": "has",
    "to": 353
  }, {
    "from": 341,
    "label": "has",
    "to": 354
  }, {
    "from": 354,
    "label": "has",
    "to": 233
  }, {
    "from": 354,
    "label": "has",
    "to": 243
  }, {
    "from": 354,
    "label": "has",
    "to": 311
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 354,
    "label": "has",
    "to": 356
  }, {
    "from": 354,
    "label": "has",
    "to": 12
  }, {
    "from": 354,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 360
  }, {
    "from": 358,
    "label": "has",
    "to": 14
  }, {
    "from": 354,
    "label": "has",
    "to": 361
  }, {
    "from": 354,
    "label": "has",
    "to": 362
  }, {
    "from": 354,
    "label": "has",
    "to": 363
  }, {
    "from": 354,
    "label": "has",
    "to": 364
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 364,
    "label": "has",
    "to": 366
  }, {
    "from": 364,
    "label": "has",
    "to": 367
  }, {
    "from": 364,
    "label": "has",
    "to": 368
  }, {
    "from": 364,
    "label": "has",
    "to": 369
  }, {
    "from": 364,
    "label": "has",
    "to": 370
  }, {
    "from": 364,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 372,
    "label": "has",
    "to": 376
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 378,
    "label": "has",
    "to": 379
  }, {
    "from": 376,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 381,
    "label": "has",
    "to": 383
  }, {
    "from": 364,
    "label": "has",
    "to": 384
  }, {
    "from": 364,
    "label": "has",
    "to": 385
  }, {
    "from": 364,
    "label": "has",
    "to": 386
  }, {
    "from": 364,
    "label": "has",
    "to": 387
  }, {
    "from": 354,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 390
  }, {
    "from": 388,
    "label": "has",
    "to": 391
  }, {
    "from": 354,
    "label": "has",
    "to": 392
  }, {
    "from": 392,
    "label": "has",
    "to": 393
  }, {
    "from": 392,
    "label": "has",
    "to": 394
  }, {
    "from": 392,
    "label": "has",
    "to": 395
  }, {
    "from": 354,
    "label": "has",
    "to": 396
  }, {
    "from": 396,
    "label": "has",
    "to": 397
  }, {
    "from": 396,
    "label": "has",
    "to": 398
  }, {
    "from": 396,
    "label": "has",
    "to": 399
  }, {
    "from": 341,
    "label": "has",
    "to": 4
  }, {
    "from": 341,
    "label": "has",
    "to": 400
  }, {
    "from": 401,
    "label": "has",
    "to": 349
  }, {
    "from": 401,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 350,
    "label": "has",
    "to": 353
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 403,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 405,
    "label": "has",
    "to": 407
  }, {
    "from": 407,
    "label": "has",
    "to": 408
  }, {
    "from": 403,
    "label": "has",
    "to": 409
  }, {
    "from": 403,
    "label": "has",
    "to": 410
  }, {
    "from": 403,
    "label": "has",
    "to": 345
  }, {
    "from": 403,
    "label": "has",
    "to": 411
  }, {
    "from": 403,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 403,
    "label": "has",
    "to": 414
  }, {
    "from": 403,
    "label": "has",
    "to": 415
  }, {
    "from": 403,
    "label": "has",
    "to": 416
  }, {
    "from": 403,
    "label": "has",
    "to": 417
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 403,
    "label": "has",
    "to": 419
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 419,
    "label": "has",
    "to": 421
  }, {
    "from": 419,
    "label": "has",
    "to": 422
  }, {
    "from": 419,
    "label": "has",
    "to": 423
  }, {
    "from": 419,
    "label": "has",
    "to": 424
  }, {
    "from": 419,
    "label": "has",
    "to": 425
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 426,
    "label": "has",
    "to": 427
  }, {
    "from": 419,
    "label": "has",
    "to": 428
  }, {
    "from": 428,
    "label": "has",
    "to": 429
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 429,
    "label": "has",
    "to": 431
  }, {
    "from": 428,
    "label": "has",
    "to": 432
  }, {
    "from": 432,
    "label": "has",
    "to": 433
  }, {
    "from": 432,
    "label": "has",
    "to": 434
  }, {
    "from": 419,
    "label": "has",
    "to": 435
  }, {
    "from": 435,
    "label": "has",
    "to": 436
  }, {
    "from": 436,
    "label": "has",
    "to": 437
  }, {
    "from": 435,
    "label": "has",
    "to": 438
  }, {
    "from": 435,
    "label": "has",
    "to": 439
  }, {
    "from": 435,
    "label": "has",
    "to": 440
  }, {
    "from": 440,
    "label": "has",
    "to": 441
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 440,
    "label": "has",
    "to": 443
  }, {
    "from": 419,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 445
  }, {
    "from": 445,
    "label": "has",
    "to": 446
  }, {
    "from": 444,
    "label": "has",
    "to": 447
  }, {
    "from": 444,
    "label": "has",
    "to": 448
  }, {
    "from": 444,
    "label": "has",
    "to": 449
  }, {
    "from": 449,
    "label": "has",
    "to": 441
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 449,
    "label": "has",
    "to": 443
  }, {
    "from": 403,
    "label": "has",
    "to": 450
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 450,
    "label": "has",
    "to": 452
  }, {
    "from": 450,
    "label": "has",
    "to": 453
  }, {
    "from": 450,
    "label": "has",
    "to": 454
  }, {
    "from": 450,
    "label": "has",
    "to": 455
  }, {
    "from": 450,
    "label": "has",
    "to": 456
  }, {
    "from": 456,
    "label": "has",
    "to": 457
  }, {
    "from": 457,
    "label": "has",
    "to": 458
  }, {
    "from": 450,
    "label": "has",
    "to": 459
  }, {
    "from": 450,
    "label": "has",
    "to": 460
  }, {
    "from": 450,
    "label": "has",
    "to": 461
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 450,
    "label": "has",
    "to": 464
  }, {
    "from": 450,
    "label": "has",
    "to": 465
  }, {
    "from": 450,
    "label": "has",
    "to": 466
  }, {
    "from": 466,
    "label": "has",
    "to": 467
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 450,
    "label": "has",
    "to": 4
  }, {
    "from": 403,
    "label": "has",
    "to": 469
  }, {
    "from": 403,
    "label": "has",
    "to": 470
  }, {
    "from": 403,
    "label": "has",
    "to": 471
  }, {
    "from": 403,
    "label": "has",
    "to": 4
  }, {
    "from": 403,
    "label": "has",
    "to": 472
  }, {
    "from": 473,
    "label": "has",
    "to": 420
  }, {
    "from": 473,
    "label": "has",
    "to": 421
  }, {
    "from": 473,
    "label": "has",
    "to": 422
  }, {
    "from": 473,
    "label": "has",
    "to": 423
  }, {
    "from": 473,
    "label": "has",
    "to": 424
  }, {
    "from": 473,
    "label": "has",
    "to": 425
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 426,
    "label": "has",
    "to": 427
  }, {
    "from": 473,
    "label": "has",
    "to": 428
  }, {
    "from": 428,
    "label": "has",
    "to": 429
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 429,
    "label": "has",
    "to": 431
  }, {
    "from": 428,
    "label": "has",
    "to": 432
  }, {
    "from": 432,
    "label": "has",
    "to": 433
  }, {
    "from": 432,
    "label": "has",
    "to": 434
  }, {
    "from": 473,
    "label": "has",
    "to": 435
  }, {
    "from": 435,
    "label": "has",
    "to": 436
  }, {
    "from": 436,
    "label": "has",
    "to": 437
  }, {
    "from": 435,
    "label": "has",
    "to": 438
  }, {
    "from": 435,
    "label": "has",
    "to": 439
  }, {
    "from": 435,
    "label": "has",
    "to": 440
  }, {
    "from": 440,
    "label": "has",
    "to": 441
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 440,
    "label": "has",
    "to": 443
  }, {
    "from": 473,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 445
  }, {
    "from": 445,
    "label": "has",
    "to": 446
  }, {
    "from": 444,
    "label": "has",
    "to": 447
  }, {
    "from": 444,
    "label": "has",
    "to": 448
  }, {
    "from": 444,
    "label": "has",
    "to": 449
  }, {
    "from": 449,
    "label": "has",
    "to": 441
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 449,
    "label": "has",
    "to": 443
  }, {
    "from": 473,
    "label": "has",
    "to": 474
  }, {
    "from": 475,
    "label": "has",
    "to": 451
  }, {
    "from": 475,
    "label": "has",
    "to": 452
  }, {
    "from": 475,
    "label": "has",
    "to": 453
  }, {
    "from": 475,
    "label": "has",
    "to": 454
  }, {
    "from": 475,
    "label": "has",
    "to": 455
  }, {
    "from": 475,
    "label": "has",
    "to": 456
  }, {
    "from": 456,
    "label": "has",
    "to": 457
  }, {
    "from": 457,
    "label": "has",
    "to": 458
  }, {
    "from": 475,
    "label": "has",
    "to": 459
  }, {
    "from": 475,
    "label": "has",
    "to": 460
  }, {
    "from": 475,
    "label": "has",
    "to": 461
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 475,
    "label": "has",
    "to": 464
  }, {
    "from": 475,
    "label": "has",
    "to": 465
  }, {
    "from": 475,
    "label": "has",
    "to": 466
  }, {
    "from": 466,
    "label": "has",
    "to": 467
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 475,
    "label": "has",
    "to": 4
  }, {
    "from": 475,
    "label": "has",
    "to": 476
  }, {
    "from": 477,
    "label": "has",
    "to": 478
  }, {
    "from": 477,
    "label": "has",
    "to": 479
  }, {
    "from": 479,
    "label": "has",
    "to": 480
  }, {
    "from": 480,
    "label": "has",
    "to": 481
  }, {
    "from": 477,
    "label": "has",
    "to": 482
  }, {
    "from": 477,
    "label": "has",
    "to": 4
  }, {
    "from": 477,
    "label": "has",
    "to": 483
  }, {
    "from": 477,
    "label": "has",
    "to": 345
  }, {
    "from": 477,
    "label": "has",
    "to": 484
  }, {
    "from": 484,
    "label": "has",
    "to": 485
  }, {
    "from": 485,
    "label": "has",
    "to": 486
  }, {
    "from": 486,
    "label": "has",
    "to": 487
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 487,
    "label": "has",
    "to": 489
  }, {
    "from": 489,
    "label": "has",
    "to": 490
  }, {
    "from": 487,
    "label": "has",
    "to": 491
  }, {
    "from": 491,
    "label": "has",
    "to": 492
  }, {
    "from": 491,
    "label": "has",
    "to": 493
  }, {
    "from": 477,
    "label": "has",
    "to": 494
  }, {
    "from": 494,
    "label": "has",
    "to": 495
  }, {
    "from": 494,
    "label": "has",
    "to": 496
  }, {
    "from": 494,
    "label": "has",
    "to": 497
  }, {
    "from": 477,
    "label": "has",
    "to": 498
  }, {
    "from": 498,
    "label": "has",
    "to": 499
  }, {
    "from": 498,
    "label": "has",
    "to": 500
  }, {
    "from": 498,
    "label": "has",
    "to": 501
  }, {
    "from": 477,
    "label": "has",
    "to": 502
  }, {
    "from": 502,
    "label": "has",
    "to": 503
  }, {
    "from": 502,
    "label": "has",
    "to": 504
  }, {
    "from": 502,
    "label": "has",
    "to": 505
  }, {
    "from": 477,
    "label": "has",
    "to": 506
  }, {
    "from": 506,
    "label": "has",
    "to": 507
  }, {
    "from": 506,
    "label": "has",
    "to": 508
  }, {
    "from": 506,
    "label": "has",
    "to": 509
  }, {
    "from": 477,
    "label": "has",
    "to": 510
  }, {
    "from": 510,
    "label": "has",
    "to": 511
  }, {
    "from": 510,
    "label": "has",
    "to": 512
  }, {
    "from": 510,
    "label": "has",
    "to": 513
  }, {
    "from": 477,
    "label": "has",
    "to": 514
  }, {
    "from": 514,
    "label": "has",
    "to": 515
  }, {
    "from": 514,
    "label": "has",
    "to": 516
  }, {
    "from": 514,
    "label": "has",
    "to": 517
  }, {
    "from": 477,
    "label": "has",
    "to": 518
  }, {
    "from": 519,
    "label": "has",
    "to": 485
  }, {
    "from": 485,
    "label": "has",
    "to": 486
  }, {
    "from": 486,
    "label": "has",
    "to": 487
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 487,
    "label": "has",
    "to": 489
  }, {
    "from": 489,
    "label": "has",
    "to": 490
  }, {
    "from": 487,
    "label": "has",
    "to": 491
  }, {
    "from": 491,
    "label": "has",
    "to": 492
  }, {
    "from": 491,
    "label": "has",
    "to": 493
  }, {
    "from": 519,
    "label": "has",
    "to": 520
  }, {
    "from": 521,
    "label": "has",
    "to": 91
  }, {
    "from": 521,
    "label": "has",
    "to": 522
  }, {
    "from": 521,
    "label": "has",
    "to": 523
  }, {
    "from": 523,
    "label": "has",
    "to": 524
  }, {
    "from": 524,
    "label": "has",
    "to": 525
  }, {
    "from": 525,
    "label": "has",
    "to": 526
  }, {
    "from": 525,
    "label": "has",
    "to": 12
  }, {
    "from": 525,
    "label": "has",
    "to": 527
  }, {
    "from": 525,
    "label": "has",
    "to": 528
  }, {
    "from": 528,
    "label": "has",
    "to": 14
  }, {
    "from": 528,
    "label": "has",
    "to": 529
  }, {
    "from": 525,
    "label": "has",
    "to": 530
  }, {
    "from": 530,
    "label": "has",
    "to": 295
  }, {
    "from": 530,
    "label": "has",
    "to": 234
  }, {
    "from": 530,
    "label": "has",
    "to": 531
  }, {
    "from": 530,
    "label": "has",
    "to": 532
  }, {
    "from": 521,
    "label": "has",
    "to": 533
  }, {
    "from": 533,
    "label": "has",
    "to": 534
  }, {
    "from": 521,
    "label": "has",
    "to": 4
  }, {
    "from": 521,
    "label": "has",
    "to": 535
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 536,
    "label": "has",
    "to": 538
  }, {
    "from": 539,
    "label": "has",
    "to": 540
  }, {
    "from": 539,
    "label": "has",
    "to": 541
  }, {
    "from": 542,
    "label": "has",
    "to": 91
  }, {
    "from": 542,
    "label": "has",
    "to": 522
  }, {
    "from": 542,
    "label": "has",
    "to": 543
  }, {
    "from": 543,
    "label": "has",
    "to": 544
  }, {
    "from": 543,
    "label": "has",
    "to": 545
  }, {
    "from": 543,
    "label": "has",
    "to": 546
  }, {
    "from": 546,
    "label": "has",
    "to": 547
  }, {
    "from": 546,
    "label": "has",
    "to": 548
  }, {
    "from": 543,
    "label": "has",
    "to": 324
  }, {
    "from": 543,
    "label": "has",
    "to": 549
  }, {
    "from": 549,
    "label": "has",
    "to": 550
  }, {
    "from": 543,
    "label": "has",
    "to": 551
  }, {
    "from": 551,
    "label": "has",
    "to": 552
  }, {
    "from": 552,
    "label": "has",
    "to": 553
  }, {
    "from": 552,
    "label": "has",
    "to": 554
  }, {
    "from": 551,
    "label": "has",
    "to": 555
  }, {
    "from": 555,
    "label": "has",
    "to": 556
  }, {
    "from": 555,
    "label": "has",
    "to": 557
  }, {
    "from": 557,
    "label": "has",
    "to": 558
  }, {
    "from": 543,
    "label": "has",
    "to": 559
  }, {
    "from": 559,
    "label": "has",
    "to": 560
  }, {
    "from": 560,
    "label": "has",
    "to": 561
  }, {
    "from": 560,
    "label": "has",
    "to": 562
  }, {
    "from": 560,
    "label": "has",
    "to": 531
  }, {
    "from": 560,
    "label": "has",
    "to": 532
  }, {
    "from": 542,
    "label": "has",
    "to": 533
  }, {
    "from": 533,
    "label": "has",
    "to": 534
  }, {
    "from": 542,
    "label": "has",
    "to": 4
  }, {
    "from": 542,
    "label": "has",
    "to": 563
  }, {
    "from": 564,
    "label": "has",
    "to": 91
  }, {
    "from": 564,
    "label": "has",
    "to": 522
  }, {
    "from": 564,
    "label": "has",
    "to": 565
  }, {
    "from": 565,
    "label": "has",
    "to": 566
  }, {
    "from": 565,
    "label": "has",
    "to": 324
  }, {
    "from": 565,
    "label": "has",
    "to": 549
  }, {
    "from": 549,
    "label": "has",
    "to": 550
  }, {
    "from": 565,
    "label": "has",
    "to": 567
  }, {
    "from": 567,
    "label": "has",
    "to": 568
  }, {
    "from": 568,
    "label": "has",
    "to": 569
  }, {
    "from": 569,
    "label": "has",
    "to": 556
  }, {
    "from": 569,
    "label": "has",
    "to": 570
  }, {
    "from": 570,
    "label": "has",
    "to": 558
  }, {
    "from": 565,
    "label": "has",
    "to": 559
  }, {
    "from": 559,
    "label": "has",
    "to": 560
  }, {
    "from": 560,
    "label": "has",
    "to": 561
  }, {
    "from": 560,
    "label": "has",
    "to": 562
  }, {
    "from": 560,
    "label": "has",
    "to": 531
  }, {
    "from": 560,
    "label": "has",
    "to": 532
  }, {
    "from": 564,
    "label": "has",
    "to": 533
  }, {
    "from": 533,
    "label": "has",
    "to": 534
  }, {
    "from": 564,
    "label": "has",
    "to": 4
  }, {
    "from": 564,
    "label": "has",
    "to": 571
  }, {
    "from": 572,
    "label": "has",
    "to": 573
  }, {
    "from": 572,
    "label": "has",
    "to": 574
  }, {
    "from": 572,
    "label": "has",
    "to": 575
  }, {
    "from": 572,
    "label": "has",
    "to": 576
  }, {
    "from": 572,
    "label": "has",
    "to": 577
  }, {
    "from": 572,
    "label": "has",
    "to": 12
  }, {
    "from": 572,
    "label": "has",
    "to": 578
  }, {
    "from": 578,
    "label": "has",
    "to": 579
  }, {
    "from": 579,
    "label": "has",
    "to": 580
  }, {
    "from": 578,
    "label": "has",
    "to": 4
  }, {
    "from": 572,
    "label": "has",
    "to": 581
  }, {
    "from": 581,
    "label": "has",
    "to": 582
  }, {
    "from": 581,
    "label": "has",
    "to": 583
  }, {
    "from": 581,
    "label": "has",
    "to": 584
  }, {
    "from": 581,
    "label": "has",
    "to": 585
  }, {
    "from": 581,
    "label": "has",
    "to": 586
  }, {
    "from": 581,
    "label": "has",
    "to": 587
  }, {
    "from": 581,
    "label": "has",
    "to": 588
  }, {
    "from": 581,
    "label": "has",
    "to": 589
  }, {
    "from": 581,
    "label": "has",
    "to": 14
  }, {
    "from": 572,
    "label": "has",
    "to": 533
  }, {
    "from": 533,
    "label": "has",
    "to": 534
  }, {
    "from": 572,
    "label": "has",
    "to": 4
  }, {
    "from": 572,
    "label": "has",
    "to": 590
  }, {
    "from": 591,
    "label": "has",
    "to": 579
  }, {
    "from": 579,
    "label": "has",
    "to": 580
  }, {
    "from": 591,
    "label": "has",
    "to": 4
  }, {
    "from": 591,
    "label": "has",
    "to": 592
  }, {
    "from": 593,
    "label": "has",
    "to": 113
  }, {
    "from": 593,
    "label": "has",
    "to": 594
  }, {
    "from": 593,
    "label": "has",
    "to": 595
  }, {
    "from": 593,
    "label": "has",
    "to": 596
  }, {
    "from": 593,
    "label": "has",
    "to": 597
  }, {
    "from": 593,
    "label": "has",
    "to": 598
  }, {
    "from": 593,
    "label": "has",
    "to": 599
  }, {
    "from": 599,
    "label": "has",
    "to": 600
  }, {
    "from": 593,
    "label": "has",
    "to": 601
  }, {
    "from": 593,
    "label": "has",
    "to": 602
  }, {
    "from": 593,
    "label": "has",
    "to": 603
  }, {
    "from": 593,
    "label": "has",
    "to": 604
  }, {
    "from": 593,
    "label": "has",
    "to": 605
  }, {
    "from": 593,
    "label": "has",
    "to": 4
  }, {
    "from": 593,
    "label": "has",
    "to": 606
  }, {
    "from": 607,
    "label": "has",
    "to": 608
  }, {
    "from": 607,
    "label": "has",
    "to": 609
  }, {
    "from": 607,
    "label": "has",
    "to": 610
  }, {
    "from": 610,
    "label": "has",
    "to": 611
  }, {
    "from": 607,
    "label": "has",
    "to": 4
  }, {
    "from": 607,
    "label": "has",
    "to": 612
  }, {
    "from": 612,
    "label": "has",
    "to": 613
  }, {
    "from": 613,
    "label": "has",
    "to": 614
  }, {
    "from": 613,
    "label": "has",
    "to": 615
  }, {
    "from": 613,
    "label": "has",
    "to": 616
  }, {
    "from": 613,
    "label": "has",
    "to": 617
  }, {
    "from": 613,
    "label": "has",
    "to": 618
  }, {
    "from": 618,
    "label": "has",
    "to": 619
  }, {
    "from": 619,
    "label": "has",
    "to": 620
  }, {
    "from": 619,
    "label": "has",
    "to": 621
  }, {
    "from": 619,
    "label": "has",
    "to": 622
  }, {
    "from": 619,
    "label": "has",
    "to": 623
  }, {
    "from": 619,
    "label": "has",
    "to": 624
  }, {
    "from": 619,
    "label": "has",
    "to": 625
  }, {
    "from": 619,
    "label": "has",
    "to": 626
  }, {
    "from": 626,
    "label": "has",
    "to": 627
  }, {
    "from": 626,
    "label": "has",
    "to": 628
  }, {
    "from": 628,
    "label": "has",
    "to": 629
  }, {
    "from": 628,
    "label": "has",
    "to": 630
  }, {
    "from": 612,
    "label": "has",
    "to": 631
  }, {
    "from": 607,
    "label": "has",
    "to": 4
  }, {
    "from": 607,
    "label": "has",
    "to": 4
  }, {
    "from": 607,
    "label": "has",
    "to": 629
  }, {
    "from": 607,
    "label": "has",
    "to": 632
  }, {
    "from": 607,
    "label": "has",
    "to": 4
  }, {
    "from": 607,
    "label": "has",
    "to": 633
  }, {
    "from": 634,
    "label": "has",
    "to": 635
  }, {
    "from": 634,
    "label": "has",
    "to": 636
  }, {
    "from": 634,
    "label": "has",
    "to": 4
  }, {
    "from": 634,
    "label": "has",
    "to": 637
  }, {
    "from": 634,
    "label": "has",
    "to": 638
  }, {
    "from": 634,
    "label": "has",
    "to": 4
  }, {
    "from": 634,
    "label": "has",
    "to": 639
  }, {
    "from": 634,
    "label": "has",
    "to": 4
  }, {
    "from": 634,
    "label": "has",
    "to": 4
  }, {
    "from": 634,
    "label": "has",
    "to": 640
  }, {
    "from": 641,
    "label": "has",
    "to": 642
  }, {
    "from": 642,
    "label": "has",
    "to": 643
  }, {
    "from": 641,
    "label": "has",
    "to": 4
  }, {
    "from": 641,
    "label": "has",
    "to": 4
  }, {
    "from": 641,
    "label": "has",
    "to": 644
  }, {
    "from": 645,
    "label": "has",
    "to": 646
  }, {
    "from": 645,
    "label": "has",
    "to": 12
  }, {
    "from": 645,
    "label": "has",
    "to": 647
  }, {
    "from": 645,
    "label": "has",
    "to": 648
  }, {
    "from": 645,
    "label": "has",
    "to": 649
  }, {
    "from": 645,
    "label": "has",
    "to": 650
  }, {
    "from": 650,
    "label": "has",
    "to": 631
  }, {
    "from": 650,
    "label": "has",
    "to": 14
  }, {
    "from": 650,
    "label": "has",
    "to": 651
  }, {
    "from": 651,
    "label": "has",
    "to": 652
  }, {
    "from": 650,
    "label": "has",
    "to": 653
  }, {
    "from": 650,
    "label": "has",
    "to": 233
  }, {
    "from": 650,
    "label": "has",
    "to": 654
  }, {
    "from": 654,
    "label": "has",
    "to": 562
  }, {
    "from": 654,
    "label": "has",
    "to": 531
  }, {
    "from": 654,
    "label": "has",
    "to": 655
  }, {
    "from": 654,
    "label": "has",
    "to": 656
  }, {
    "from": 654,
    "label": "has",
    "to": 657
  }, {
    "from": 657,
    "label": "has",
    "to": 658
  }, {
    "from": 654,
    "label": "has",
    "to": 659
  }, {
    "from": 659,
    "label": "has",
    "to": 660
  }, {
    "from": 660,
    "label": "has",
    "to": 661
  }, {
    "from": 660,
    "label": "has",
    "to": 662
  }, {
    "from": 660,
    "label": "has",
    "to": 663
  }, {
    "from": 659,
    "label": "has",
    "to": 664
  }, {
    "from": 659,
    "label": "has",
    "to": 657
  }, {
    "from": 657,
    "label": "has",
    "to": 658
  }, {
    "from": 654,
    "label": "has",
    "to": 665
  }, {
    "from": 665,
    "label": "has",
    "to": 666
  }, {
    "from": 665,
    "label": "has",
    "to": 667
  }, {
    "from": 665,
    "label": "has",
    "to": 668
  }, {
    "from": 665,
    "label": "has",
    "to": 669
  }, {
    "from": 669,
    "label": "has",
    "to": 670
  }, {
    "from": 665,
    "label": "has",
    "to": 671
  }, {
    "from": 665,
    "label": "has",
    "to": 672
  }, {
    "from": 672,
    "label": "has",
    "to": 673
  }, {
    "from": 672,
    "label": "has",
    "to": 674
  }, {
    "from": 665,
    "label": "has",
    "to": 675
  }, {
    "from": 675,
    "label": "has",
    "to": 676
  }, {
    "from": 665,
    "label": "has",
    "to": 677
  }, {
    "from": 645,
    "label": "has",
    "to": 4
  }, {
    "from": 645,
    "label": "has",
    "to": 4
  }, {
    "from": 645,
    "label": "has",
    "to": 678
  }, {
    "from": 679,
    "label": "has",
    "to": 680
  }, {
    "from": 679,
    "label": "has",
    "to": 4
  }, {
    "from": 679,
    "label": "has",
    "to": 681
  }, {
    "from": 681,
    "label": "has",
    "to": 682
  }, {
    "from": 679,
    "label": "has",
    "to": 683
  }, {
    "from": 679,
    "label": "has",
    "to": 684
  }, {
    "from": 679,
    "label": "has",
    "to": 685
  }, {
    "from": 679,
    "label": "has",
    "to": 12
  }, {
    "from": 679,
    "label": "has",
    "to": 686
  }, {
    "from": 679,
    "label": "has",
    "to": 687
  }, {
    "from": 679,
    "label": "has",
    "to": 688
  }, {
    "from": 688,
    "label": "has",
    "to": 689
  }, {
    "from": 679,
    "label": "has",
    "to": 690
  }, {
    "from": 679,
    "label": "has",
    "to": 691
  }, {
    "from": 691,
    "label": "has",
    "to": 692
  }, {
    "from": 691,
    "label": "has",
    "to": 693
  }, {
    "from": 693,
    "label": "has",
    "to": 694
  }, {
    "from": 693,
    "label": "has",
    "to": 695
  }, {
    "from": 693,
    "label": "has",
    "to": 696
  }, {
    "from": 693,
    "label": "has",
    "to": 697
  }, {
    "from": 693,
    "label": "has",
    "to": 688
  }, {
    "from": 688,
    "label": "has",
    "to": 689
  }, {
    "from": 693,
    "label": "has",
    "to": 692
  }, {
    "from": 693,
    "label": "has",
    "to": 698
  }, {
    "from": 693,
    "label": "has",
    "to": 699
  }, {
    "from": 693,
    "label": "has",
    "to": 698
  }, {
    "from": 691,
    "label": "has",
    "to": 700
  }, {
    "from": 691,
    "label": "has",
    "to": 14
  }, {
    "from": 691,
    "label": "has",
    "to": 701
  }, {
    "from": 701,
    "label": "has",
    "to": 702
  }, {
    "from": 691,
    "label": "has",
    "to": 703
  }, {
    "from": 703,
    "label": "has",
    "to": 704
  }, {
    "from": 703,
    "label": "has",
    "to": 705
  }, {
    "from": 703,
    "label": "has",
    "to": 706
  }, {
    "from": 703,
    "label": "has",
    "to": 707
  }, {
    "from": 703,
    "label": "has",
    "to": 708
  }, {
    "from": 708,
    "label": "has",
    "to": 709
  }, {
    "from": 708,
    "label": "has",
    "to": 710
  }, {
    "from": 708,
    "label": "has",
    "to": 711
  }, {
    "from": 708,
    "label": "has",
    "to": 712
  }, {
    "from": 712,
    "label": "has",
    "to": 709
  }, {
    "from": 712,
    "label": "has",
    "to": 709
  }, {
    "from": 712,
    "label": "has",
    "to": 713
  }, {
    "from": 712,
    "label": "has",
    "to": 664
  }, {
    "from": 703,
    "label": "has",
    "to": 709
  }, {
    "from": 703,
    "label": "has",
    "to": 713
  }, {
    "from": 703,
    "label": "has",
    "to": 664
  }, {
    "from": 679,
    "label": "has",
    "to": 4
  }, {
    "from": 679,
    "label": "has",
    "to": 4
  }, {
    "from": 679,
    "label": "has",
    "to": 4
  }, {
    "from": 679,
    "label": "has",
    "to": 4
  }, {
    "from": 679,
    "label": "has",
    "to": 714
  }, {
    "from": 715,
    "label": "has",
    "to": 716
  }, {
    "from": 716,
    "label": "has",
    "to": 717
  }, {
    "from": 715,
    "label": "has",
    "to": 718
  }, {
    "from": 715,
    "label": "has",
    "to": 4
  }, {
    "from": 715,
    "label": "has",
    "to": 719
  }, {
    "from": 720,
    "label": "has",
    "to": 721
  }, {
    "from": 720,
    "label": "has",
    "to": 722
  }, {
    "from": 720,
    "label": "has",
    "to": 723
  }, {
    "from": 720,
    "label": "has",
    "to": 4
  }, {
    "from": 720,
    "label": "has",
    "to": 724
  }, {
    "from": 725,
    "label": "has",
    "to": 726
  }, {
    "from": 726,
    "label": "has",
    "to": 727
  }, {
    "from": 727,
    "label": "has",
    "to": 728
  }, {
    "from": 728,
    "label": "has",
    "to": 729
  }, {
    "from": 728,
    "label": "has",
    "to": 730
  }, {
    "from": 730,
    "label": "has",
    "to": 731
  }, {
    "from": 730,
    "label": "has",
    "to": 732
  }, {
    "from": 730,
    "label": "has",
    "to": 733
  }, {
    "from": 730,
    "label": "has",
    "to": 734
  }, {
    "from": 730,
    "label": "has",
    "to": 735
  }, {
    "from": 730,
    "label": "has",
    "to": 736
  }, {
    "from": 730,
    "label": "has",
    "to": 737
  }, {
    "from": 730,
    "label": "has",
    "to": 738
  }, {
    "from": 728,
    "label": "has",
    "to": 739
  }, {
    "from": 726,
    "label": "has",
    "to": 740
  }, {
    "from": 726,
    "label": "has",
    "to": 741
  }, {
    "from": 741,
    "label": "has",
    "to": 742
  }, {
    "from": 726,
    "label": "has",
    "to": 743
  }, {
    "from": 726,
    "label": "has",
    "to": 744
  }, {
    "from": 726,
    "label": "has",
    "to": 745
  }, {
    "from": 726,
    "label": "has",
    "to": 746
  }, {
    "from": 726,
    "label": "has",
    "to": 747
  }, {
    "from": 726,
    "label": "has",
    "to": 733
  }, {
    "from": 726,
    "label": "has",
    "to": 731
  }, {
    "from": 726,
    "label": "has",
    "to": 732
  }, {
    "from": 726,
    "label": "has",
    "to": 4
  }, {
    "from": 725,
    "label": "has",
    "to": 748
  }, {
    "from": 748,
    "label": "has",
    "to": 749
  }, {
    "from": 748,
    "label": "has",
    "to": 750
  }, {
    "from": 725,
    "label": "has",
    "to": 751
  }, {
    "from": 725,
    "label": "has",
    "to": 4
  }, {
    "from": 725,
    "label": "has",
    "to": 752
  }, {
    "from": 753,
    "label": "has",
    "to": 727
  }, {
    "from": 727,
    "label": "has",
    "to": 728
  }, {
    "from": 728,
    "label": "has",
    "to": 729
  }, {
    "from": 728,
    "label": "has",
    "to": 730
  }, {
    "from": 730,
    "label": "has",
    "to": 731
  }, {
    "from": 730,
    "label": "has",
    "to": 732
  }, {
    "from": 730,
    "label": "has",
    "to": 733
  }, {
    "from": 730,
    "label": "has",
    "to": 734
  }, {
    "from": 730,
    "label": "has",
    "to": 735
  }, {
    "from": 730,
    "label": "has",
    "to": 736
  }, {
    "from": 730,
    "label": "has",
    "to": 737
  }, {
    "from": 730,
    "label": "has",
    "to": 738
  }, {
    "from": 728,
    "label": "has",
    "to": 739
  }, {
    "from": 753,
    "label": "has",
    "to": 740
  }, {
    "from": 753,
    "label": "has",
    "to": 741
  }, {
    "from": 741,
    "label": "has",
    "to": 742
  }, {
    "from": 753,
    "label": "has",
    "to": 743
  }, {
    "from": 753,
    "label": "has",
    "to": 744
  }, {
    "from": 753,
    "label": "has",
    "to": 745
  }, {
    "from": 753,
    "label": "has",
    "to": 746
  }, {
    "from": 753,
    "label": "has",
    "to": 747
  }, {
    "from": 753,
    "label": "has",
    "to": 733
  }, {
    "from": 753,
    "label": "has",
    "to": 731
  }, {
    "from": 753,
    "label": "has",
    "to": 732
  }, {
    "from": 753,
    "label": "has",
    "to": 4
  }, {
    "from": 753,
    "label": "has",
    "to": 754
  }, {
    "from": 755,
    "label": "has",
    "to": 728
  }, {
    "from": 728,
    "label": "has",
    "to": 729
  }, {
    "from": 728,
    "label": "has",
    "to": 730
  }, {
    "from": 730,
    "label": "has",
    "to": 731
  }, {
    "from": 730,
    "label": "has",
    "to": 732
  }, {
    "from": 730,
    "label": "has",
    "to": 733
  }, {
    "from": 730,
    "label": "has",
    "to": 734
  }, {
    "from": 730,
    "label": "has",
    "to": 735
  }, {
    "from": 730,
    "label": "has",
    "to": 736
  }, {
    "from": 730,
    "label": "has",
    "to": 737
  }, {
    "from": 730,
    "label": "has",
    "to": 738
  }, {
    "from": 728,
    "label": "has",
    "to": 739
  }, {
    "from": 755,
    "label": "has",
    "to": 756
  }, {
    "from": 757,
    "label": "has",
    "to": 4
  }, {
    "from": 757,
    "label": "has",
    "to": 758
  }, {
    "from": 759,
    "label": "has",
    "to": 760
  }, {
    "from": 759,
    "label": "has",
    "to": 761
  }, {
    "from": 761,
    "label": "has",
    "to": 762
  }, {
    "from": 761,
    "label": "has",
    "to": 763
  }, {
    "from": 759,
    "label": "has",
    "to": 764
  }, {
    "from": 759,
    "label": "has",
    "to": 765
  }, {
    "from": 759,
    "label": "has",
    "to": 766
  }, {
    "from": 759,
    "label": "has",
    "to": 767
  }, {
    "from": 759,
    "label": "has",
    "to": 768
  }, {
    "from": 759,
    "label": "has",
    "to": 769
  }, {
    "from": 759,
    "label": "has",
    "to": 4
  }, {
    "from": 759,
    "label": "has",
    "to": 770
  }, {
    "from": 771,
    "label": "has",
    "to": 772
  }, {
    "from": 771,
    "label": "has",
    "to": 773
  }, {
    "from": 771,
    "label": "has",
    "to": 774
  }, {
    "from": 774,
    "label": "has",
    "to": 775
  }, {
    "from": 774,
    "label": "has",
    "to": 776
  }, {
    "from": 774,
    "label": "has",
    "to": 777
  }, {
    "from": 771,
    "label": "has",
    "to": 723
  }, {
    "from": 771,
    "label": "has",
    "to": 778
  }, {
    "from": 779,
    "label": "has",
    "to": 780
  }, {
    "from": 779,
    "label": "has",
    "to": 781
  }, {
    "from": 779,
    "label": "has",
    "to": 782
  }, {
    "from": 782,
    "label": "has",
    "to": 783
  }, {
    "from": 783,
    "label": "has",
    "to": 784
  }, {
    "from": 783,
    "label": "has",
    "to": 785
  }, {
    "from": 782,
    "label": "has",
    "to": 786
  }, {
    "from": 779,
    "label": "has",
    "to": 787
  }, {
    "from": 779,
    "label": "has",
    "to": 788
  }, {
    "from": 779,
    "label": "has",
    "to": 789
  }, {
    "from": 779,
    "label": "has",
    "to": 790
  }, {
    "from": 779,
    "label": "has",
    "to": 791
  }, {
    "from": 779,
    "label": "has",
    "to": 792
  }, {
    "from": 779,
    "label": "has",
    "to": 793
  }, {
    "from": 779,
    "label": "has",
    "to": 794
  }, {
    "from": 779,
    "label": "has",
    "to": 795
  }, {
    "from": 779,
    "label": "has",
    "to": 796
  }, {
    "from": 779,
    "label": "has",
    "to": 797
  }, {
    "from": 797,
    "label": "has",
    "to": 798
  }, {
    "from": 797,
    "label": "has",
    "to": 799
  }, {
    "from": 799,
    "label": "has",
    "to": 800
  }, {
    "from": 797,
    "label": "has",
    "to": 801
  }, {
    "from": 797,
    "label": "has",
    "to": 802
  }, {
    "from": 797,
    "label": "has",
    "to": 803
  }, {
    "from": 797,
    "label": "has",
    "to": 804
  }, {
    "from": 797,
    "label": "has",
    "to": 805
  }, {
    "from": 805,
    "label": "has",
    "to": 806
  }, {
    "from": 797,
    "label": "has",
    "to": 807
  }, {
    "from": 807,
    "label": "has",
    "to": 808
  }, {
    "from": 808,
    "label": "has",
    "to": 809
  }, {
    "from": 808,
    "label": "has",
    "to": 810
  }, {
    "from": 808,
    "label": "has",
    "to": 811
  }, {
    "from": 808,
    "label": "has",
    "to": 812
  }, {
    "from": 808,
    "label": "has",
    "to": 809
  }, {
    "from": 808,
    "label": "has",
    "to": 801
  }, {
    "from": 808,
    "label": "has",
    "to": 813
  }, {
    "from": 808,
    "label": "has",
    "to": 814
  }, {
    "from": 797,
    "label": "has",
    "to": 815
  }, {
    "from": 797,
    "label": "has",
    "to": 816
  }, {
    "from": 797,
    "label": "has",
    "to": 817
  }, {
    "from": 817,
    "label": "has",
    "to": 818
  }, {
    "from": 817,
    "label": "has",
    "to": 819
  }, {
    "from": 797,
    "label": "has",
    "to": 820
  }, {
    "from": 820,
    "label": "has",
    "to": 821
  }, {
    "from": 820,
    "label": "has",
    "to": 345
  }, {
    "from": 820,
    "label": "has",
    "to": 822
  }, {
    "from": 822,
    "label": "has",
    "to": 823
  }, {
    "from": 822,
    "label": "has",
    "to": 4
  }, {
    "from": 822,
    "label": "has",
    "to": 824
  }, {
    "from": 822,
    "label": "has",
    "to": 825
  }, {
    "from": 822,
    "label": "has",
    "to": 826
  }, {
    "from": 826,
    "label": "has",
    "to": 827
  }, {
    "from": 827,
    "label": "has",
    "to": 828
  }, {
    "from": 827,
    "label": "has",
    "to": 829
  }, {
    "from": 829,
    "label": "has",
    "to": 830
  }, {
    "from": 829,
    "label": "has",
    "to": 831
  }, {
    "from": 822,
    "label": "has",
    "to": 832
  }, {
    "from": 820,
    "label": "has",
    "to": 833
  }, {
    "from": 833,
    "label": "has",
    "to": 834
  }, {
    "from": 820,
    "label": "has",
    "to": 835
  }, {
    "from": 835,
    "label": "has",
    "to": 836
  }, {
    "from": 820,
    "label": "has",
    "to": 837
  }, {
    "from": 837,
    "label": "has",
    "to": 838
  }, {
    "from": 820,
    "label": "has",
    "to": 839
  }, {
    "from": 839,
    "label": "has",
    "to": 840
  }, {
    "from": 820,
    "label": "has",
    "to": 841
  }, {
    "from": 841,
    "label": "has",
    "to": 842
  }, {
    "from": 820,
    "label": "has",
    "to": 843
  }, {
    "from": 843,
    "label": "has",
    "to": 844
  }, {
    "from": 779,
    "label": "has",
    "to": 845
  }, {
    "from": 779,
    "label": "has",
    "to": 846
  }, {
    "from": 846,
    "label": "has",
    "to": 847
  }, {
    "from": 779,
    "label": "has",
    "to": 848
  }, {
    "from": 848,
    "label": "has",
    "to": 849
  }, {
    "from": 779,
    "label": "has",
    "to": 850
  }, {
    "from": 779,
    "label": "has",
    "to": 851
  }, {
    "from": 851,
    "label": "has",
    "to": 852
  }, {
    "from": 851,
    "label": "has",
    "to": 853
  }, {
    "from": 851,
    "label": "has",
    "to": 854
  }, {
    "from": 851,
    "label": "has",
    "to": 855
  }, {
    "from": 855,
    "label": "has",
    "to": 856
  }, {
    "from": 855,
    "label": "has",
    "to": 825
  }, {
    "from": 855,
    "label": "has",
    "to": 832
  }, {
    "from": 855,
    "label": "has",
    "to": 853
  }, {
    "from": 779,
    "label": "has",
    "to": 857
  }, {
    "from": 857,
    "label": "has",
    "to": 858
  }, {
    "from": 857,
    "label": "has",
    "to": 859
  }, {
    "from": 859,
    "label": "has",
    "to": 860
  }, {
    "from": 857,
    "label": "has",
    "to": 861
  }, {
    "from": 857,
    "label": "has",
    "to": 862
  }, {
    "from": 857,
    "label": "has",
    "to": 863
  }, {
    "from": 779,
    "label": "has",
    "to": 864
  }, {
    "from": 865,
    "label": "has",
    "to": 823
  }, {
    "from": 865,
    "label": "has",
    "to": 4
  }, {
    "from": 865,
    "label": "has",
    "to": 824
  }, {
    "from": 865,
    "label": "has",
    "to": 825
  }, {
    "from": 865,
    "label": "has",
    "to": 826
  }, {
    "from": 826,
    "label": "has",
    "to": 827
  }, {
    "from": 827,
    "label": "has",
    "to": 828
  }, {
    "from": 827,
    "label": "has",
    "to": 829
  }, {
    "from": 829,
    "label": "has",
    "to": 830
  }, {
    "from": 829,
    "label": "has",
    "to": 831
  }, {
    "from": 865,
    "label": "has",
    "to": 832
  }, {
    "from": 865,
    "label": "has",
    "to": 866
  }, {
    "from": 867,
    "label": "has",
    "to": 868
  }, {
    "from": 867,
    "label": "has",
    "to": 796
  }, {
    "from": 867,
    "label": "has",
    "to": 869
  }, {
    "from": 869,
    "label": "has",
    "to": 870
  }, {
    "from": 869,
    "label": "has",
    "to": 871
  }, {
    "from": 871,
    "label": "has",
    "to": 872
  }, {
    "from": 872,
    "label": "has",
    "to": 873
  }, {
    "from": 871,
    "label": "has",
    "to": 874
  }, {
    "from": 871,
    "label": "has",
    "to": 875
  }, {
    "from": 871,
    "label": "has",
    "to": 876
  }, {
    "from": 871,
    "label": "has",
    "to": 877
  }, {
    "from": 871,
    "label": "has",
    "to": 878
  }, {
    "from": 871,
    "label": "has",
    "to": 879
  }, {
    "from": 879,
    "label": "has",
    "to": 880
  }, {
    "from": 880,
    "label": "has",
    "to": 881
  }, {
    "from": 880,
    "label": "has",
    "to": 882
  }, {
    "from": 879,
    "label": "has",
    "to": 883
  }, {
    "from": 883,
    "label": "has",
    "to": 884
  }, {
    "from": 883,
    "label": "has",
    "to": 885
  }, {
    "from": 885,
    "label": "has",
    "to": 886
  }, {
    "from": 885,
    "label": "has",
    "to": 887
  }, {
    "from": 883,
    "label": "has",
    "to": 888
  }, {
    "from": 869,
    "label": "has",
    "to": 889
  }, {
    "from": 869,
    "label": "has",
    "to": 890
  }, {
    "from": 869,
    "label": "has",
    "to": 891
  }, {
    "from": 869,
    "label": "has",
    "to": 892
  }, {
    "from": 869,
    "label": "has",
    "to": 893
  }, {
    "from": 869,
    "label": "has",
    "to": 894
  }, {
    "from": 867,
    "label": "has",
    "to": 4
  }, {
    "from": 867,
    "label": "has",
    "to": 895
  }, {
    "from": 896,
    "label": "has",
    "to": 897
  }, {
    "from": 896,
    "label": "has",
    "to": 898
  }, {
    "from": 898,
    "label": "has",
    "to": 4
  }, {
    "from": 896,
    "label": "has",
    "to": 899
  }, {
    "from": 899,
    "label": "has",
    "to": 900
  }, {
    "from": 899,
    "label": "has",
    "to": 901
  }, {
    "from": 899,
    "label": "has",
    "to": 902
  }, {
    "from": 899,
    "label": "has",
    "to": 903
  }, {
    "from": 899,
    "label": "has",
    "to": 904
  }, {
    "from": 899,
    "label": "has",
    "to": 905
  }, {
    "from": 899,
    "label": "has",
    "to": 906
  }, {
    "from": 899,
    "label": "has",
    "to": 907
  }, {
    "from": 899,
    "label": "has",
    "to": 908
  }, {
    "from": 899,
    "label": "has",
    "to": 909
  }, {
    "from": 899,
    "label": "has",
    "to": 910
  }, {
    "from": 899,
    "label": "has",
    "to": 911
  }, {
    "from": 899,
    "label": "has",
    "to": 912
  }, {
    "from": 899,
    "label": "has",
    "to": 913
  }, {
    "from": 899,
    "label": "has",
    "to": 914
  }, {
    "from": 899,
    "label": "has",
    "to": 915
  }, {
    "from": 899,
    "label": "has",
    "to": 916
  }, {
    "from": 899,
    "label": "has",
    "to": 917
  }, {
    "from": 899,
    "label": "has",
    "to": 918
  }, {
    "from": 899,
    "label": "has",
    "to": 919
  }, {
    "from": 899,
    "label": "has",
    "to": 920
  }, {
    "from": 899,
    "label": "has",
    "to": 921
  }, {
    "from": 899,
    "label": "has",
    "to": 922
  }, {
    "from": 899,
    "label": "has",
    "to": 923
  }, {
    "from": 899,
    "label": "has",
    "to": 924
  }, {
    "from": 899,
    "label": "has",
    "to": 925
  }, {
    "from": 899,
    "label": "has",
    "to": 926
  }, {
    "from": 899,
    "label": "has",
    "to": 927
  }, {
    "from": 927,
    "label": "has",
    "to": 928
  }, {
    "from": 899,
    "label": "has",
    "to": 929
  }, {
    "from": 929,
    "label": "has",
    "to": 930
  }, {
    "from": 899,
    "label": "has",
    "to": 931
  }, {
    "from": 899,
    "label": "has",
    "to": 932
  }, {
    "from": 899,
    "label": "has",
    "to": 933
  }, {
    "from": 899,
    "label": "has",
    "to": 934
  }, {
    "from": 934,
    "label": "has",
    "to": 4
  }, {
    "from": 899,
    "label": "has",
    "to": 935
  }, {
    "from": 935,
    "label": "has",
    "to": 4
  }, {
    "from": 899,
    "label": "has",
    "to": 936
  }, {
    "from": 899,
    "label": "has",
    "to": 937
  }, {
    "from": 899,
    "label": "has",
    "to": 938
  }, {
    "from": 938,
    "label": "has",
    "to": 939
  }, {
    "from": 939,
    "label": "has",
    "to": 940
  }, {
    "from": 939,
    "label": "has",
    "to": 941
  }, {
    "from": 939,
    "label": "has",
    "to": 942
  }, {
    "from": 939,
    "label": "has",
    "to": 295
  }, {
    "from": 939,
    "label": "has",
    "to": 943
  }, {
    "from": 899,
    "label": "has",
    "to": 944
  }, {
    "from": 899,
    "label": "has",
    "to": 945
  }, {
    "from": 899,
    "label": "has",
    "to": 946
  }, {
    "from": 899,
    "label": "has",
    "to": 947
  }, {
    "from": 899,
    "label": "has",
    "to": 948
  }, {
    "from": 899,
    "label": "has",
    "to": 949
  }, {
    "from": 949,
    "label": "has",
    "to": 950
  }, {
    "from": 949,
    "label": "has",
    "to": 825
  }, {
    "from": 949,
    "label": "has",
    "to": 832
  }, {
    "from": 949,
    "label": "has",
    "to": 951
  }, {
    "from": 949,
    "label": "has",
    "to": 952
  }, {
    "from": 899,
    "label": "has",
    "to": 4
  }, {
    "from": 896,
    "label": "has",
    "to": 953
  }, {
    "from": 954,
    "label": "has",
    "to": 4
  }, {
    "from": 955,
    "label": "has",
    "to": 4
  }, {
    "from": 956,
    "label": "has",
    "to": 4
  }, {
    "from": 957,
    "label": "has",
    "to": 900
  }, {
    "from": 957,
    "label": "has",
    "to": 901
  }, {
    "from": 957,
    "label": "has",
    "to": 902
  }, {
    "from": 957,
    "label": "has",
    "to": 903
  }, {
    "from": 957,
    "label": "has",
    "to": 904
  }, {
    "from": 957,
    "label": "has",
    "to": 905
  }, {
    "from": 957,
    "label": "has",
    "to": 906
  }, {
    "from": 957,
    "label": "has",
    "to": 907
  }, {
    "from": 957,
    "label": "has",
    "to": 908
  }, {
    "from": 957,
    "label": "has",
    "to": 909
  }, {
    "from": 957,
    "label": "has",
    "to": 910
  }, {
    "from": 957,
    "label": "has",
    "to": 911
  }, {
    "from": 957,
    "label": "has",
    "to": 912
  }, {
    "from": 957,
    "label": "has",
    "to": 913
  }, {
    "from": 957,
    "label": "has",
    "to": 914
  }, {
    "from": 957,
    "label": "has",
    "to": 915
  }, {
    "from": 957,
    "label": "has",
    "to": 916
  }, {
    "from": 957,
    "label": "has",
    "to": 917
  }, {
    "from": 957,
    "label": "has",
    "to": 918
  }, {
    "from": 957,
    "label": "has",
    "to": 919
  }, {
    "from": 957,
    "label": "has",
    "to": 920
  }, {
    "from": 957,
    "label": "has",
    "to": 921
  }, {
    "from": 957,
    "label": "has",
    "to": 922
  }, {
    "from": 957,
    "label": "has",
    "to": 923
  }, {
    "from": 957,
    "label": "has",
    "to": 924
  }, {
    "from": 957,
    "label": "has",
    "to": 925
  }, {
    "from": 957,
    "label": "has",
    "to": 926
  }, {
    "from": 957,
    "label": "has",
    "to": 927
  }, {
    "from": 927,
    "label": "has",
    "to": 928
  }, {
    "from": 957,
    "label": "has",
    "to": 929
  }, {
    "from": 929,
    "label": "has",
    "to": 930
  }, {
    "from": 957,
    "label": "has",
    "to": 931
  }, {
    "from": 957,
    "label": "has",
    "to": 932
  }, {
    "from": 957,
    "label": "has",
    "to": 933
  }, {
    "from": 957,
    "label": "has",
    "to": 934
  }, {
    "from": 934,
    "label": "has",
    "to": 4
  }, {
    "from": 957,
    "label": "has",
    "to": 935
  }, {
    "from": 935,
    "label": "has",
    "to": 4
  }, {
    "from": 957,
    "label": "has",
    "to": 936
  }, {
    "from": 957,
    "label": "has",
    "to": 937
  }, {
    "from": 957,
    "label": "has",
    "to": 938
  }, {
    "from": 938,
    "label": "has",
    "to": 939
  }, {
    "from": 939,
    "label": "has",
    "to": 940
  }, {
    "from": 939,
    "label": "has",
    "to": 941
  }, {
    "from": 939,
    "label": "has",
    "to": 942
  }, {
    "from": 939,
    "label": "has",
    "to": 295
  }, {
    "from": 939,
    "label": "has",
    "to": 943
  }, {
    "from": 957,
    "label": "has",
    "to": 944
  }, {
    "from": 957,
    "label": "has",
    "to": 945
  }, {
    "from": 957,
    "label": "has",
    "to": 946
  }, {
    "from": 957,
    "label": "has",
    "to": 947
  }, {
    "from": 957,
    "label": "has",
    "to": 948
  }, {
    "from": 957,
    "label": "has",
    "to": 949
  }, {
    "from": 949,
    "label": "has",
    "to": 950
  }, {
    "from": 949,
    "label": "has",
    "to": 825
  }, {
    "from": 949,
    "label": "has",
    "to": 832
  }, {
    "from": 949,
    "label": "has",
    "to": 951
  }, {
    "from": 949,
    "label": "has",
    "to": 952
  }, {
    "from": 957,
    "label": "has",
    "to": 4
  }, {
    "from": 957,
    "label": "has",
    "to": 958
  }, {
    "from": 959,
    "label": "has",
    "to": 960
  }, {
    "from": 959,
    "label": "has",
    "to": 961
  }, {
    "from": 959,
    "label": "has",
    "to": 962
  }, {
    "from": 959,
    "label": "has",
    "to": 963
  }, {
    "from": 959,
    "label": "has",
    "to": 964
  }, {
    "from": 964,
    "label": "has",
    "to": 965
  }, {
    "from": 965,
    "label": "has",
    "to": 966
  }, {
    "from": 964,
    "label": "has",
    "to": 967
  }, {
    "from": 959,
    "label": "has",
    "to": 968
  }, {
    "from": 969,
    "label": "has",
    "to": 970
  }, {
    "from": 969,
    "label": "has",
    "to": 971
  }, {
    "from": 969,
    "label": "has",
    "to": 963
  }, {
    "from": 969,
    "label": "has",
    "to": 972
  }, {
    "from": 969,
    "label": "has",
    "to": 973
  }, {
    "from": 969,
    "label": "has",
    "to": 974
  }, {
    "from": 969,
    "label": "has",
    "to": 975
  }, {
    "from": 969,
    "label": "has",
    "to": 976
  }, {
    "from": 976,
    "label": "has",
    "to": 977
  }, {
    "from": 976,
    "label": "has",
    "to": 978
  }, {
    "from": 976,
    "label": "has",
    "to": 979
  }, {
    "from": 979,
    "label": "has",
    "to": 980
  }, {
    "from": 979,
    "label": "has",
    "to": 981
  }, {
    "from": 976,
    "label": "has",
    "to": 982
  }, {
    "from": 976,
    "label": "has",
    "to": 983
  }, {
    "from": 976,
    "label": "has",
    "to": 984
  }, {
    "from": 969,
    "label": "has",
    "to": 985
  }, {
    "from": 986,
    "label": "has",
    "to": 987
  }, {
    "from": 986,
    "label": "has",
    "to": 988
  }, {
    "from": 986,
    "label": "has",
    "to": 989
  }, {
    "from": 986,
    "label": "has",
    "to": 990
  }, {
    "from": 986,
    "label": "has",
    "to": 991
  }, {
    "from": 986,
    "label": "has",
    "to": 992
  }, {
    "from": 993,
    "label": "has",
    "to": 994
  }, {
    "from": 993,
    "label": "has",
    "to": 995
  }, {
    "from": 993,
    "label": "has",
    "to": 996
  }, {
    "from": 993,
    "label": "has",
    "to": 997
  }, {
    "from": 993,
    "label": "has",
    "to": 998
  }, {
    "from": 993,
    "label": "has",
    "to": 999
  }, {
    "from": 1000,
    "label": "has",
    "to": 1001
  }, {
    "from": 1000,
    "label": "has",
    "to": 1002
  }, {
    "from": 1000,
    "label": "has",
    "to": 1003
  }, {
    "from": 1003,
    "label": "has",
    "to": 1004
  }, {
    "from": 1000,
    "label": "has",
    "to": 1005
  }, {
    "from": 1005,
    "label": "has",
    "to": 1006
  }, {
    "from": 1000,
    "label": "has",
    "to": 1007
  }, {
    "from": 1008,
    "label": "has",
    "to": 981
  }, {
    "from": 1008,
    "label": "has",
    "to": 1009
  }, {
    "from": 1008,
    "label": "has",
    "to": 4
  }, {
    "from": 1008,
    "label": "has",
    "to": 1010
  }, {
    "from": 1008,
    "label": "has",
    "to": 1011
  }, {
    "from": 1011,
    "label": "has",
    "to": 1012
  }, {
    "from": 1008,
    "label": "has",
    "to": 4
  }, {
    "from": 1008,
    "label": "has",
    "to": 1013
  }, {
    "from": 1014,
    "label": "has",
    "to": 981
  }, {
    "from": 1014,
    "label": "has",
    "to": 1009
  }, {
    "from": 1014,
    "label": "has",
    "to": 4
  }, {
    "from": 1014,
    "label": "has",
    "to": 1010
  }, {
    "from": 1014,
    "label": "has",
    "to": 1015
  }, {
    "from": 1015,
    "label": "has",
    "to": 1012
  }, {
    "from": 1014,
    "label": "has",
    "to": 1016
  }, {
    "from": 1016,
    "label": "has",
    "to": 1012
  }, {
    "from": 1014,
    "label": "has",
    "to": 4
  }, {
    "from": 1014,
    "label": "has",
    "to": 1017
  }, {
    "from": 1017,
    "label": "has",
    "to": 1018
  }, {
    "from": 1014,
    "label": "has",
    "to": 4
  }, {
    "from": 1014,
    "label": "has",
    "to": 1019
  }, {
    "from": 1014,
    "label": "has",
    "to": 1020
  }, {
    "from": 1020,
    "label": "has",
    "to": 1021
  }, {
    "from": 1020,
    "label": "has",
    "to": 1022
  }, {
    "from": 1020,
    "label": "has",
    "to": 1023
  }, {
    "from": 1020,
    "label": "has",
    "to": 1024
  }, {
    "from": 1024,
    "label": "has",
    "to": 1025
  }, {
    "from": 1014,
    "label": "has",
    "to": 4
  }, {
    "from": 1014,
    "label": "has",
    "to": 4
  }, {
    "from": 1014,
    "label": "has",
    "to": 4
  }, {
    "from": 1014,
    "label": "has",
    "to": 1026
  }, {
    "from": 1014,
    "label": "has",
    "to": 1027
  }, {
    "from": 1014,
    "label": "has",
    "to": 1028
  }, {
    "from": 1028,
    "label": "has",
    "to": 1029
  }, {
    "from": 1014,
    "label": "has",
    "to": 1030
  }, {
    "from": 1014,
    "label": "has",
    "to": 4
  }, {
    "from": 1014,
    "label": "has",
    "to": 1031
  }, {
    "from": 1014,
    "label": "has",
    "to": 1032
  }, {
    "from": 1014,
    "label": "has",
    "to": 1033
  }, {
    "from": 1033,
    "label": "has",
    "to": 1034
  }, {
    "from": 1033,
    "label": "has",
    "to": 1035
  }, {
    "from": 1014,
    "label": "has",
    "to": 1036
  }, {
    "from": 1036,
    "label": "has",
    "to": 1037
  }, {
    "from": 1037,
    "label": "has",
    "to": 1038
  }, {
    "from": 1037,
    "label": "has",
    "to": 1039
  }, {
    "from": 1036,
    "label": "has",
    "to": 1040
  }, {
    "from": 1014,
    "label": "has",
    "to": 1041
  }, {
    "from": 1042,
    "label": "has",
    "to": 1043
  }, {
    "from": 1042,
    "label": "has",
    "to": 1044
  }, {
    "from": 1042,
    "label": "has",
    "to": 4
  }, {
    "from": 1042,
    "label": "has",
    "to": 1045
  }, {
    "from": 1042,
    "label": "has",
    "to": 1046
  }, {
    "from": 1042,
    "label": "has",
    "to": 1047
  }, {
    "from": 1042,
    "label": "has",
    "to": 1048
  }, {
    "from": 1048,
    "label": "has",
    "to": 1049
  }, {
    "from": 1048,
    "label": "has",
    "to": 1050
  }, {
    "from": 1048,
    "label": "has",
    "to": 1051
  }, {
    "from": 1042,
    "label": "has",
    "to": 4
  }, {
    "from": 1042,
    "label": "has",
    "to": 4
  }, {
    "from": 1042,
    "label": "has",
    "to": 1052
  }, {
    "from": 1053,
    "label": "has",
    "to": 981
  }, {
    "from": 1053,
    "label": "has",
    "to": 772
  }, {
    "from": 1053,
    "label": "has",
    "to": 1054
  }, {
    "from": 1053,
    "label": "has",
    "to": 1055
  }, {
    "from": 1055,
    "label": "has",
    "to": 1056
  }, {
    "from": 1055,
    "label": "has",
    "to": 1057
  }, {
    "from": 1053,
    "label": "has",
    "to": 1058
  }, {
    "from": 1053,
    "label": "has",
    "to": 1059
  }, {
    "from": 1059,
    "label": "has",
    "to": 1060
  }, {
    "from": 1059,
    "label": "has",
    "to": 1061
  }, {
    "from": 1061,
    "label": "has",
    "to": 1062
  }, {
    "from": 1061,
    "label": "has",
    "to": 1063
  }, {
    "from": 1053,
    "label": "has",
    "to": 1064
  }, {
    "from": 1065,
    "label": "has",
    "to": 981
  }, {
    "from": 1065,
    "label": "has",
    "to": 772
  }, {
    "from": 1065,
    "label": "has",
    "to": 1054
  }, {
    "from": 1065,
    "label": "has",
    "to": 1066
  }, {
    "from": 1065,
    "label": "has",
    "to": 1067
  }, {
    "from": 1065,
    "label": "has",
    "to": 4
  }, {
    "from": 1065,
    "label": "has",
    "to": 1068
  }, {
    "from": 1068,
    "label": "has",
    "to": 1069
  }, {
    "from": 1069,
    "label": "has",
    "to": 1070
  }, {
    "from": 1068,
    "label": "has",
    "to": 1056
  }, {
    "from": 1068,
    "label": "has",
    "to": 1057
  }, {
    "from": 1065,
    "label": "has",
    "to": 4
  }, {
    "from": 1065,
    "label": "has",
    "to": 1071
  }, {
    "from": 1065,
    "label": "has",
    "to": 1072
  }, {
    "from": 1065,
    "label": "has",
    "to": 1073
  }, {
    "from": 1065,
    "label": "has",
    "to": 4
  }, {
    "from": 1065,
    "label": "has",
    "to": 1074
  }, {
    "from": 1065,
    "label": "has",
    "to": 1075
  }, {
    "from": 1065,
    "label": "has",
    "to": 1076
  }, {
    "from": 1065,
    "label": "has",
    "to": 1077
  }, {
    "from": 1077,
    "label": "has",
    "to": 772
  }, {
    "from": 1077,
    "label": "has",
    "to": 1056
  }, {
    "from": 1077,
    "label": "has",
    "to": 1078
  }, {
    "from": 1065,
    "label": "has",
    "to": 1079
  }, {
    "from": 1079,
    "label": "has",
    "to": 1080
  }, {
    "from": 1080,
    "label": "has",
    "to": 1081
  }, {
    "from": 1080,
    "label": "has",
    "to": 1082
  }, {
    "from": 1079,
    "label": "has",
    "to": 981
  }, {
    "from": 1065,
    "label": "has",
    "to": 1083
  }, {
    "from": 1084,
    "label": "has",
    "to": 1085
  }, {
    "from": 1085,
    "label": "has",
    "to": 1081
  }, {
    "from": 1085,
    "label": "has",
    "to": 1086
  }, {
    "from": 1085,
    "label": "has",
    "to": 1087
  }, {
    "from": 1084,
    "label": "has",
    "to": 1088
  }, {
    "from": 1089,
    "label": "has",
    "to": 1090
  }, {
    "from": 1089,
    "label": "has",
    "to": 4
  }, {
    "from": 1089,
    "label": "has",
    "to": 1091
  }, {
    "from": 1089,
    "label": "has",
    "to": 1092
  }, {
    "from": 1089,
    "label": "has",
    "to": 1093
  }, {
    "from": 1089,
    "label": "has",
    "to": 1094
  }, {
    "from": 1095,
    "label": "has",
    "to": 1096
  }, {
    "from": 1096,
    "label": "has",
    "to": 1097
  }, {
    "from": 1097,
    "label": "has",
    "to": 199
  }, {
    "from": 1097,
    "label": "has",
    "to": 1098
  }, {
    "from": 1095,
    "label": "has",
    "to": 4
  }, {
    "from": 1095,
    "label": "has",
    "to": 1099
  }, {
    "from": 1095,
    "label": "has",
    "to": 4
  }, {
    "from": 1095,
    "label": "has",
    "to": 1071
  }, {
    "from": 1095,
    "label": "has",
    "to": 233
  }, {
    "from": 1095,
    "label": "has",
    "to": 1100
  }, {
    "from": 1095,
    "label": "has",
    "to": 1101
  }, {
    "from": 1101,
    "label": "has",
    "to": 1102
  }, {
    "from": 1102,
    "label": "has",
    "to": 1103
  }, {
    "from": 1103,
    "label": "has",
    "to": 1104
  }, {
    "from": 1103,
    "label": "has",
    "to": 1105
  }, {
    "from": 1102,
    "label": "has",
    "to": 1106
  }, {
    "from": 1102,
    "label": "has",
    "to": 1107
  }, {
    "from": 1101,
    "label": "has",
    "to": 1108
  }, {
    "from": 1101,
    "label": "has",
    "to": 1109
  }, {
    "from": 1109,
    "label": "has",
    "to": 1110
  }, {
    "from": 1109,
    "label": "has",
    "to": 1111
  }, {
    "from": 1109,
    "label": "has",
    "to": 1112
  }, {
    "from": 1095,
    "label": "has",
    "to": 1113
  }, {
    "from": 1095,
    "label": "has",
    "to": 1114
  }, {
    "from": 1115,
    "label": "has",
    "to": 4
  }, {
    "from": 1115,
    "label": "has",
    "to": 1116
  }, {
    "from": 1117,
    "label": "has",
    "to": 1118
  }, {
    "from": 1117,
    "label": "has",
    "to": 1119
  }, {
    "from": 1117,
    "label": "has",
    "to": 1120
  }, {
    "from": 1117,
    "label": "has",
    "to": 1121
  }, {
    "from": 1117,
    "label": "has",
    "to": 1039
  }, {
    "from": 1117,
    "label": "has",
    "to": 1122
  }, {
    "from": 1123,
    "label": "has",
    "to": 4
  }, {
    "from": 1123,
    "label": "has",
    "to": 1124
  }, {
    "from": 1125,
    "label": "has",
    "to": 1126
  }, {
    "from": 1125,
    "label": "has",
    "to": 1127
  }, {
    "from": 1128,
    "label": "has",
    "to": 1129
  }, {
    "from": 1129,
    "label": "has",
    "to": 1130
  }, {
    "from": 1128,
    "label": "has",
    "to": 1131
  }, {
    "from": 1131,
    "label": "has",
    "to": 1132
  }, {
    "from": 1131,
    "label": "has",
    "to": 1133
  }, {
    "from": 1131,
    "label": "has",
    "to": 1134
  }, {
    "from": 1131,
    "label": "has",
    "to": 1135
  }, {
    "from": 1131,
    "label": "has",
    "to": 1136
  }, {
    "from": 1128,
    "label": "has",
    "to": 1121
  }, {
    "from": 1128,
    "label": "has",
    "to": 1137
  }, {
    "from": 1128,
    "label": "has",
    "to": 1039
  }, {
    "from": 1128,
    "label": "has",
    "to": 1138
  }, {
    "from": 1139,
    "label": "has",
    "to": 1140
  }, {
    "from": 1139,
    "label": "has",
    "to": 1141
  }, {
    "from": 1141,
    "label": "has",
    "to": 1142
  }, {
    "from": 1139,
    "label": "has",
    "to": 4
  }, {
    "from": 1139,
    "label": "has",
    "to": 4
  }, {
    "from": 1139,
    "label": "has",
    "to": 1143
  }, {
    "from": 1144,
    "label": "has",
    "to": 1145
  }, {
    "from": 1145,
    "label": "has",
    "to": 1146
  }, {
    "from": 1146,
    "label": "has",
    "to": 1147
  }, {
    "from": 1144,
    "label": "has",
    "to": 1113
  }, {
    "from": 1144,
    "label": "has",
    "to": 1148
  }, {
    "from": 1149,
    "label": "has",
    "to": 1150
  }, {
    "from": 1149,
    "label": "has",
    "to": 1151
  }, {
    "from": 1151,
    "label": "has",
    "to": 1152
  }, {
    "from": 1149,
    "label": "has",
    "to": 1153
  }, {
    "from": 1154,
    "label": "has",
    "to": 1155
  }, {
    "from": 1154,
    "label": "has",
    "to": 1156
  }, {
    "from": 1154,
    "label": "has",
    "to": 1157
  }, {
    "from": 1157,
    "label": "has",
    "to": 1158
  }, {
    "from": 1157,
    "label": "has",
    "to": 1159
  }, {
    "from": 1159,
    "label": "has",
    "to": 1160
  }, {
    "from": 1157,
    "label": "has",
    "to": 1107
  }, {
    "from": 1157,
    "label": "has",
    "to": 1161
  }, {
    "from": 1161,
    "label": "has",
    "to": 1162
  }, {
    "from": 1161,
    "label": "has",
    "to": 1163
  }, {
    "from": 1163,
    "label": "has",
    "to": 1164
  }, {
    "from": 1163,
    "label": "has",
    "to": 1165
  }, {
    "from": 1161,
    "label": "has",
    "to": 1166
  }, {
    "from": 1157,
    "label": "has",
    "to": 1167
  }, {
    "from": 1167,
    "label": "has",
    "to": 1168
  }, {
    "from": 1154,
    "label": "has",
    "to": 4
  }, {
    "from": 1154,
    "label": "has",
    "to": 1169
  }, {
    "from": 1169,
    "label": "has",
    "to": 1170
  }, {
    "from": 1169,
    "label": "has",
    "to": 1171
  }, {
    "from": 1154,
    "label": "has",
    "to": 1039
  }, {
    "from": 1154,
    "label": "has",
    "to": 1172
  }, {
    "from": 1173,
    "label": "has",
    "to": 1174
  }, {
    "from": 1173,
    "label": "has",
    "to": 1175
  }, {
    "from": 1173,
    "label": "has",
    "to": 4
  }, {
    "from": 1173,
    "label": "has",
    "to": 1176
  }, {
    "from": 1173,
    "label": "has",
    "to": 1177
  }, {
    "from": 1173,
    "label": "has",
    "to": 1178
  }, {
    "from": 1173,
    "label": "has",
    "to": 1179
  }, {
    "from": 1173,
    "label": "has",
    "to": 1180
  }, {
    "from": 1173,
    "label": "has",
    "to": 1181
  }, {
    "from": 1173,
    "label": "has",
    "to": 1182
  }, {
    "from": 1173,
    "label": "has",
    "to": 1183
  }, {
    "from": 1183,
    "label": "has",
    "to": 1184
  }, {
    "from": 1183,
    "label": "has",
    "to": 4
  }, {
    "from": 1183,
    "label": "has",
    "to": 1185
  }, {
    "from": 1183,
    "label": "has",
    "to": 1186
  }, {
    "from": 1183,
    "label": "has",
    "to": 4
  }, {
    "from": 1183,
    "label": "has",
    "to": 1187
  }, {
    "from": 1187,
    "label": "has",
    "to": 1188
  }, {
    "from": 1187,
    "label": "has",
    "to": 1189
  }, {
    "from": 1183,
    "label": "has",
    "to": 1190
  }, {
    "from": 1183,
    "label": "has",
    "to": 1191
  }, {
    "from": 1183,
    "label": "has",
    "to": 4
  }, {
    "from": 1173,
    "label": "has",
    "to": 1192
  }, {
    "from": 1173,
    "label": "has",
    "to": 1193
  }, {
    "from": 1173,
    "label": "has",
    "to": 1194
  }, {
    "from": 1173,
    "label": "has",
    "to": 4
  }, {
    "from": 1173,
    "label": "has",
    "to": 1195
  }, {
    "from": 1173,
    "label": "has",
    "to": 1196
  }, {
    "from": 1173,
    "label": "has",
    "to": 1197
  }, {
    "from": 1173,
    "label": "has",
    "to": 1198
  }, {
    "from": 1173,
    "label": "has",
    "to": 1199
  }, {
    "from": 1173,
    "label": "has",
    "to": 1200
  }, {
    "from": 1200,
    "label": "has",
    "to": 1201
  }, {
    "from": 1200,
    "label": "has",
    "to": 1202
  }, {
    "from": 1200,
    "label": "has",
    "to": 1203
  }, {
    "from": 1200,
    "label": "has",
    "to": 1204
  }, {
    "from": 1200,
    "label": "has",
    "to": 1205
  }, {
    "from": 1200,
    "label": "has",
    "to": 1184
  }, {
    "from": 1200,
    "label": "has",
    "to": 4
  }, {
    "from": 1200,
    "label": "has",
    "to": 1187
  }, {
    "from": 1187,
    "label": "has",
    "to": 1188
  }, {
    "from": 1187,
    "label": "has",
    "to": 1189
  }, {
    "from": 1200,
    "label": "has",
    "to": 1206
  }, {
    "from": 1200,
    "label": "has",
    "to": 1207
  }, {
    "from": 1200,
    "label": "has",
    "to": 4
  }, {
    "from": 1173,
    "label": "has",
    "to": 1208
  }, {
    "from": 1208,
    "label": "has",
    "to": 1185
  }, {
    "from": 1208,
    "label": "has",
    "to": 1186
  }, {
    "from": 1208,
    "label": "has",
    "to": 4
  }, {
    "from": 1208,
    "label": "has",
    "to": 4
  }, {
    "from": 1173,
    "label": "has",
    "to": 1209
  }, {
    "from": 1173,
    "label": "has",
    "to": 1210
  }, {
    "from": 1210,
    "label": "has",
    "to": 1211
  }, {
    "from": 1210,
    "label": "has",
    "to": 1212
  }, {
    "from": 1210,
    "label": "has",
    "to": 1213
  }, {
    "from": 1210,
    "label": "has",
    "to": 1214
  }, {
    "from": 1210,
    "label": "has",
    "to": 1215
  }, {
    "from": 1210,
    "label": "has",
    "to": 1216
  }, {
    "from": 1210,
    "label": "has",
    "to": 1217
  }, {
    "from": 1210,
    "label": "has",
    "to": 1218
  }, {
    "from": 1210,
    "label": "has",
    "to": 1219
  }, {
    "from": 1210,
    "label": "has",
    "to": 1220
  }, {
    "from": 1210,
    "label": "has",
    "to": 1221
  }, {
    "from": 1210,
    "label": "has",
    "to": 1222
  }, {
    "from": 1222,
    "label": "has",
    "to": 1223
  }, {
    "from": 1210,
    "label": "has",
    "to": 1224
  }, {
    "from": 1210,
    "label": "has",
    "to": 1225
  }, {
    "from": 1210,
    "label": "has",
    "to": 1193
  }, {
    "from": 1210,
    "label": "has",
    "to": 1226
  }, {
    "from": 1226,
    "label": "has",
    "to": 1227
  }, {
    "from": 1227,
    "label": "has",
    "to": 1228
  }, {
    "from": 1227,
    "label": "has",
    "to": 1229
  }, {
    "from": 1227,
    "label": "has",
    "to": 1230
  }, {
    "from": 1226,
    "label": "has",
    "to": 1231
  }, {
    "from": 1226,
    "label": "has",
    "to": 1232
  }, {
    "from": 1232,
    "label": "has",
    "to": 1233
  }, {
    "from": 1173,
    "label": "has",
    "to": 1234
  }, {
    "from": 1235,
    "label": "has",
    "to": 1184
  }, {
    "from": 1235,
    "label": "has",
    "to": 4
  }, {
    "from": 1235,
    "label": "has",
    "to": 1185
  }, {
    "from": 1235,
    "label": "has",
    "to": 1186
  }, {
    "from": 1235,
    "label": "has",
    "to": 4
  }, {
    "from": 1235,
    "label": "has",
    "to": 1187
  }, {
    "from": 1187,
    "label": "has",
    "to": 1188
  }, {
    "from": 1187,
    "label": "has",
    "to": 1189
  }, {
    "from": 1235,
    "label": "has",
    "to": 1190
  }, {
    "from": 1235,
    "label": "has",
    "to": 1191
  }, {
    "from": 1235,
    "label": "has",
    "to": 4
  }, {
    "from": 1235,
    "label": "has",
    "to": 1236
  }, {
    "from": 1237,
    "label": "has",
    "to": 1201
  }, {
    "from": 1237,
    "label": "has",
    "to": 1202
  }, {
    "from": 1237,
    "label": "has",
    "to": 1203
  }, {
    "from": 1237,
    "label": "has",
    "to": 1204
  }, {
    "from": 1237,
    "label": "has",
    "to": 1205
  }, {
    "from": 1237,
    "label": "has",
    "to": 1184
  }, {
    "from": 1237,
    "label": "has",
    "to": 4
  }, {
    "from": 1237,
    "label": "has",
    "to": 1187
  }, {
    "from": 1187,
    "label": "has",
    "to": 1188
  }, {
    "from": 1187,
    "label": "has",
    "to": 1189
  }, {
    "from": 1237,
    "label": "has",
    "to": 1206
  }, {
    "from": 1237,
    "label": "has",
    "to": 1207
  }, {
    "from": 1237,
    "label": "has",
    "to": 4
  }, {
    "from": 1237,
    "label": "has",
    "to": 1238
  }, {
    "from": 1239,
    "label": "has",
    "to": 1185
  }, {
    "from": 1239,
    "label": "has",
    "to": 1186
  }, {
    "from": 1239,
    "label": "has",
    "to": 4
  }, {
    "from": 1239,
    "label": "has",
    "to": 4
  }, {
    "from": 1239,
    "label": "has",
    "to": 1240
  }, {
    "from": 1241,
    "label": "has",
    "to": 1242
  }, {
    "from": 1241,
    "label": "has",
    "to": 1243
  }, {
    "from": 1243,
    "label": "has",
    "to": 1244
  }, {
    "from": 1243,
    "label": "has",
    "to": 1245
  }, {
    "from": 1243,
    "label": "has",
    "to": 1246
  }, {
    "from": 1243,
    "label": "has",
    "to": 1247
  }, {
    "from": 1243,
    "label": "has",
    "to": 1248
  }, {
    "from": 1243,
    "label": "has",
    "to": 1249
  }, {
    "from": 1249,
    "label": "has",
    "to": 1250
  }, {
    "from": 1249,
    "label": "has",
    "to": 1251
  }, {
    "from": 1249,
    "label": "has",
    "to": 1252
  }, {
    "from": 1252,
    "label": "has",
    "to": 1253
  }, {
    "from": 1252,
    "label": "has",
    "to": 1254
  }, {
    "from": 1254,
    "label": "has",
    "to": 1255
  }, {
    "from": 1252,
    "label": "has",
    "to": 1166
  }, {
    "from": 1249,
    "label": "has",
    "to": 1256
  }, {
    "from": 1241,
    "label": "has",
    "to": 1257
  }, {
    "from": 1241,
    "label": "has",
    "to": 1258
  }, {
    "from": 1259,
    "label": "has",
    "to": 1260
  }, {
    "from": 1259,
    "label": "has",
    "to": 1261
  }, {
    "from": 1259,
    "label": "has",
    "to": 1262
  }, {
    "from": 1262,
    "label": "has",
    "to": 1244
  }, {
    "from": 1262,
    "label": "has",
    "to": 1245
  }, {
    "from": 1262,
    "label": "has",
    "to": 1246
  }, {
    "from": 1262,
    "label": "has",
    "to": 1247
  }, {
    "from": 1262,
    "label": "has",
    "to": 1263
  }, {
    "from": 1262,
    "label": "has",
    "to": 1264
  }, {
    "from": 1264,
    "label": "has",
    "to": 1250
  }, {
    "from": 1264,
    "label": "has",
    "to": 1265
  }, {
    "from": 1259,
    "label": "has",
    "to": 1257
  }, {
    "from": 1259,
    "label": "has",
    "to": 4
  }, {
    "from": 1259,
    "label": "has",
    "to": 1266
  }, {
    "from": 1267,
    "label": "has",
    "to": 1268
  }, {
    "from": 1268,
    "label": "has",
    "to": 1269
  }, {
    "from": 1268,
    "label": "has",
    "to": 1106
  }, {
    "from": 1267,
    "label": "has",
    "to": 1270
  }, {
    "from": 1271,
    "label": "has",
    "to": 1272
  }, {
    "from": 1272,
    "label": "has",
    "to": 1137
  }, {
    "from": 1272,
    "label": "has",
    "to": 1106
  }, {
    "from": 1271,
    "label": "has",
    "to": 1273
  }, {
    "from": 1274,
    "label": "has",
    "to": 704
  }, {
    "from": 1274,
    "label": "has",
    "to": 1275
  }, {
    "from": 1274,
    "label": "has",
    "to": 1276
  }, {
    "from": 1276,
    "label": "has",
    "to": 1277
  }, {
    "from": 1277,
    "label": "has",
    "to": 1278
  }, {
    "from": 1278,
    "label": "has",
    "to": 1279
  }, {
    "from": 1278,
    "label": "has",
    "to": 1280
  }, {
    "from": 1278,
    "label": "has",
    "to": 1281
  }, {
    "from": 1281,
    "label": "has",
    "to": 1282
  }, {
    "from": 1276,
    "label": "has",
    "to": 1283
  }, {
    "from": 1276,
    "label": "has",
    "to": 1284
  }, {
    "from": 1284,
    "label": "has",
    "to": 1285
  }, {
    "from": 1284,
    "label": "has",
    "to": 1286
  }, {
    "from": 1284,
    "label": "has",
    "to": 1287
  }, {
    "from": 1284,
    "label": "has",
    "to": 1288
  }, {
    "from": 1288,
    "label": "has",
    "to": 1289
  }, {
    "from": 1284,
    "label": "has",
    "to": 1290
  }, {
    "from": 1290,
    "label": "has",
    "to": 1291
  }, {
    "from": 1290,
    "label": "has",
    "to": 1292
  }, {
    "from": 1284,
    "label": "has",
    "to": 1293
  }, {
    "from": 1284,
    "label": "has",
    "to": 1294
  }, {
    "from": 1294,
    "label": "has",
    "to": 1295
  }, {
    "from": 1294,
    "label": "has",
    "to": 1296
  }, {
    "from": 1296,
    "label": "has",
    "to": 1297
  }, {
    "from": 1294,
    "label": "has",
    "to": 1298
  }, {
    "from": 1294,
    "label": "has",
    "to": 1299
  }, {
    "from": 1274,
    "label": "has",
    "to": 4
  }, {
    "from": 1274,
    "label": "has",
    "to": 4
  }, {
    "from": 1274,
    "label": "has",
    "to": 4
  }, {
    "from": 1274,
    "label": "has",
    "to": 4
  }, {
    "from": 1274,
    "label": "has",
    "to": 4
  }, {
    "from": 1274,
    "label": "has",
    "to": 1300
  }, {
    "from": 1301,
    "label": "has",
    "to": 90
  }, {
    "from": 1301,
    "label": "has",
    "to": 1302
  }, {
    "from": 1301,
    "label": "has",
    "to": 1303
  }, {
    "from": 1303,
    "label": "has",
    "to": 1304
  }, {
    "from": 1301,
    "label": "has",
    "to": 4
  }, {
    "from": 1301,
    "label": "has",
    "to": 1177
  }, {
    "from": 1301,
    "label": "has",
    "to": 1178
  }, {
    "from": 1301,
    "label": "has",
    "to": 1179
  }, {
    "from": 1301,
    "label": "has",
    "to": 1180
  }, {
    "from": 1301,
    "label": "has",
    "to": 1181
  }, {
    "from": 1301,
    "label": "has",
    "to": 1305
  }, {
    "from": 1305,
    "label": "has",
    "to": 1184
  }, {
    "from": 1305,
    "label": "has",
    "to": 4
  }, {
    "from": 1305,
    "label": "has",
    "to": 1185
  }, {
    "from": 1305,
    "label": "has",
    "to": 1306
  }, {
    "from": 1305,
    "label": "has",
    "to": 4
  }, {
    "from": 1305,
    "label": "has",
    "to": 1187
  }, {
    "from": 1187,
    "label": "has",
    "to": 1188
  }, {
    "from": 1187,
    "label": "has",
    "to": 1189
  }, {
    "from": 1305,
    "label": "has",
    "to": 1307
  }, {
    "from": 1305,
    "label": "has",
    "to": 1191
  }, {
    "from": 1305,
    "label": "has",
    "to": 4
  }, {
    "from": 1301,
    "label": "has",
    "to": 1308
  }, {
    "from": 1301,
    "label": "has",
    "to": 1309
  }, {
    "from": 1309,
    "label": "has",
    "to": 1216
  }, {
    "from": 1309,
    "label": "has",
    "to": 1217
  }, {
    "from": 1309,
    "label": "has",
    "to": 1218
  }, {
    "from": 1309,
    "label": "has",
    "to": 1219
  }, {
    "from": 1309,
    "label": "has",
    "to": 1220
  }, {
    "from": 1309,
    "label": "has",
    "to": 1310
  }, {
    "from": 1309,
    "label": "has",
    "to": 1311
  }, {
    "from": 1309,
    "label": "has",
    "to": 1193
  }, {
    "from": 1309,
    "label": "has",
    "to": 1312
  }, {
    "from": 1312,
    "label": "has",
    "to": 1313
  }, {
    "from": 1312,
    "label": "has",
    "to": 1314
  }, {
    "from": 1312,
    "label": "has",
    "to": 1168
  }, {
    "from": 1312,
    "label": "has",
    "to": 1315
  }, {
    "from": 1312,
    "label": "has",
    "to": 1168
  }, {
    "from": 1301,
    "label": "has",
    "to": 4
  }, {
    "from": 1301,
    "label": "has",
    "to": 4
  }, {
    "from": 1301,
    "label": "has",
    "to": 4
  }, {
    "from": 1301,
    "label": "has",
    "to": 4
  }, {
    "from": 1301,
    "label": "has",
    "to": 1316
  }, {
    "from": 1317,
    "label": "has",
    "to": 1184
  }, {
    "from": 1317,
    "label": "has",
    "to": 4
  }, {
    "from": 1317,
    "label": "has",
    "to": 1185
  }, {
    "from": 1317,
    "label": "has",
    "to": 1306
  }, {
    "from": 1317,
    "label": "has",
    "to": 4
  }, {
    "from": 1317,
    "label": "has",
    "to": 1187
  }, {
    "from": 1187,
    "label": "has",
    "to": 1188
  }, {
    "from": 1187,
    "label": "has",
    "to": 1189
  }, {
    "from": 1317,
    "label": "has",
    "to": 1307
  }, {
    "from": 1317,
    "label": "has",
    "to": 1191
  }, {
    "from": 1317,
    "label": "has",
    "to": 4
  }, {
    "from": 1317,
    "label": "has",
    "to": 1318
  }, {
    "from": 1319,
    "label": "has",
    "to": 1320
  }, {
    "from": 1319,
    "label": "has",
    "to": 1321
  }, {
    "from": 1319,
    "label": "has",
    "to": 1322
  }, {
    "from": 1319,
    "label": "has",
    "to": 1323
  }, {
    "from": 1323,
    "label": "has",
    "to": 1112
  }, {
    "from": 1323,
    "label": "has",
    "to": 1324
  }, {
    "from": 1319,
    "label": "has",
    "to": 1325
  }, {
    "from": 1319,
    "label": "has",
    "to": 1326
  }, {
    "from": 1319,
    "label": "has",
    "to": 1327
  }, {
    "from": 1328,
    "label": "has",
    "to": 1329
  }, {
    "from": 1328,
    "label": "has",
    "to": 1330
  }, {
    "from": 1330,
    "label": "has",
    "to": 1331
  }, {
    "from": 1330,
    "label": "has",
    "to": 1332
  }, {
    "from": 1328,
    "label": "has",
    "to": 1333
  }, {
    "from": 1328,
    "label": "has",
    "to": 1177
  }, {
    "from": 1328,
    "label": "has",
    "to": 1178
  }, {
    "from": 1328,
    "label": "has",
    "to": 1179
  }, {
    "from": 1328,
    "label": "has",
    "to": 1180
  }, {
    "from": 1328,
    "label": "has",
    "to": 1181
  }, {
    "from": 1328,
    "label": "has",
    "to": 1305
  }, {
    "from": 1305,
    "label": "has",
    "to": 1184
  }, {
    "from": 1305,
    "label": "has",
    "to": 4
  }, {
    "from": 1305,
    "label": "has",
    "to": 1185
  }, {
    "from": 1305,
    "label": "has",
    "to": 1306
  }, {
    "from": 1305,
    "label": "has",
    "to": 4
  }, {
    "from": 1305,
    "label": "has",
    "to": 1187
  }, {
    "from": 1187,
    "label": "has",
    "to": 1188
  }, {
    "from": 1187,
    "label": "has",
    "to": 1189
  }, {
    "from": 1305,
    "label": "has",
    "to": 1307
  }, {
    "from": 1305,
    "label": "has",
    "to": 1191
  }, {
    "from": 1305,
    "label": "has",
    "to": 4
  }, {
    "from": 1328,
    "label": "has",
    "to": 1334
  }, {
    "from": 1328,
    "label": "has",
    "to": 1193
  }, {
    "from": 1328,
    "label": "has",
    "to": 1335
  }, {
    "from": 1335,
    "label": "has",
    "to": 1336
  }, {
    "from": 1336,
    "label": "has",
    "to": 1337
  }, {
    "from": 1335,
    "label": "has",
    "to": 1112
  }, {
    "from": 1328,
    "label": "has",
    "to": 4
  }, {
    "from": 1328,
    "label": "has",
    "to": 1338
  }, {
    "from": 1339,
    "label": "has",
    "to": 1184
  }, {
    "from": 1339,
    "label": "has",
    "to": 4
  }, {
    "from": 1339,
    "label": "has",
    "to": 1185
  }, {
    "from": 1339,
    "label": "has",
    "to": 1306
  }, {
    "from": 1339,
    "label": "has",
    "to": 4
  }, {
    "from": 1339,
    "label": "has",
    "to": 1187
  }, {
    "from": 1187,
    "label": "has",
    "to": 1188
  }, {
    "from": 1187,
    "label": "has",
    "to": 1189
  }, {
    "from": 1339,
    "label": "has",
    "to": 1307
  }, {
    "from": 1339,
    "label": "has",
    "to": 1191
  }, {
    "from": 1339,
    "label": "has",
    "to": 4
  }, {
    "from": 1339,
    "label": "has",
    "to": 1340
  }, {
    "from": 1341,
    "label": "has",
    "to": 1342
  }, {
    "from": 1341,
    "label": "has",
    "to": 1308
  }, {
    "from": 1341,
    "label": "has",
    "to": 1343
  }, {
    "from": 1343,
    "label": "has",
    "to": 1344
  }, {
    "from": 1341,
    "label": "has",
    "to": 1345
  }, {
    "from": 1345,
    "label": "has",
    "to": 1119
  }, {
    "from": 1345,
    "label": "has",
    "to": 1346
  }, {
    "from": 1346,
    "label": "has",
    "to": 1347
  }, {
    "from": 1341,
    "label": "has",
    "to": 4
  }, {
    "from": 1341,
    "label": "has",
    "to": 1039
  }, {
    "from": 1341,
    "label": "has",
    "to": 1348
  }, {
    "from": 1349,
    "label": "has",
    "to": 1350
  }, {
    "from": 1350,
    "label": "has",
    "to": 1351
  }, {
    "from": 1349,
    "label": "has",
    "to": 791
  }, {
    "from": 1349,
    "label": "has",
    "to": 1352
  }, {
    "from": 1349,
    "label": "has",
    "to": 1353
  }, {
    "from": 1349,
    "label": "has",
    "to": 1354
  }, {
    "from": 1354,
    "label": "has",
    "to": 1355
  }, {
    "from": 1354,
    "label": "has",
    "to": 1356
  }, {
    "from": 1354,
    "label": "has",
    "to": 1357
  }, {
    "from": 1354,
    "label": "has",
    "to": 1358
  }, {
    "from": 1358,
    "label": "has",
    "to": 1359
  }, {
    "from": 1349,
    "label": "has",
    "to": 86
  }, {
    "from": 1349,
    "label": "has",
    "to": 1360
  }, {
    "from": 1360,
    "label": "has",
    "to": 1361
  }, {
    "from": 1361,
    "label": "has",
    "to": 1362
  }, {
    "from": 1361,
    "label": "has",
    "to": 1363
  }, {
    "from": 1361,
    "label": "has",
    "to": 1364
  }, {
    "from": 1361,
    "label": "has",
    "to": 1365
  }, {
    "from": 1361,
    "label": "has",
    "to": 1366
  }, {
    "from": 1349,
    "label": "has",
    "to": 1367
  }, {
    "from": 1349,
    "label": "has",
    "to": 1368
  }, {
    "from": 1349,
    "label": "has",
    "to": 1369
  }, {
    "from": 1369,
    "label": "has",
    "to": 1370
  }, {
    "from": 1349,
    "label": "has",
    "to": 1113
  }, {
    "from": 1349,
    "label": "has",
    "to": 1371
  }, {
    "from": 1372,
    "label": "has",
    "to": 1373
  }, {
    "from": 1372,
    "label": "has",
    "to": 1374
  }, {
    "from": 1372,
    "label": "has",
    "to": 1375
  }, {
    "from": 1372,
    "label": "has",
    "to": 1376
  }, {
    "from": 1372,
    "label": "has",
    "to": 1377
  }, {
    "from": 1372,
    "label": "has",
    "to": 1378
  }, {
    "from": 1372,
    "label": "has",
    "to": 1379
  }, {
    "from": 1372,
    "label": "has",
    "to": 1380
  }, {
    "from": 1381,
    "label": "has",
    "to": 1382
  }, {
    "from": 1381,
    "label": "has",
    "to": 1383
  }, {
    "from": 1381,
    "label": "has",
    "to": 1384
  }, {
    "from": 1381,
    "label": "has",
    "to": 1385
  }, {
    "from": 1381,
    "label": "has",
    "to": 1386
  }, {
    "from": 1381,
    "label": "has",
    "to": 1387
  }, {
    "from": 1381,
    "label": "has",
    "to": 1388
  }, {
    "from": 1381,
    "label": "has",
    "to": 1389
  }, {
    "from": 1381,
    "label": "has",
    "to": 1390
  }, {
    "from": 1390,
    "label": "has",
    "to": 1391
  }, {
    "from": 1381,
    "label": "has",
    "to": 1392
  }, {
    "from": 1381,
    "label": "has",
    "to": 1393
  }, {
    "from": 1381,
    "label": "has",
    "to": 1394
  }, {
    "from": 1381,
    "label": "has",
    "to": 1395
  }, {
    "from": 1381,
    "label": "has",
    "to": 1396
  }, {
    "from": 1381,
    "label": "has",
    "to": 1397
  }, {
    "from": 1381,
    "label": "has",
    "to": 1398
  }, {
    "from": 1381,
    "label": "has",
    "to": 1399
  }, {
    "from": 1381,
    "label": "has",
    "to": 1400
  }, {
    "from": 1381,
    "label": "has",
    "to": 1401
  }, {
    "from": 1381,
    "label": "has",
    "to": 1402
  }, {
    "from": 1381,
    "label": "has",
    "to": 1403
  }, {
    "from": 1381,
    "label": "has",
    "to": 1404
  }, {
    "from": 1381,
    "label": "has",
    "to": 1405
  }, {
    "from": 1381,
    "label": "has",
    "to": 1406
  }, {
    "from": 1381,
    "label": "has",
    "to": 1407
  }, {
    "from": 1381,
    "label": "has",
    "to": 1408
  }, {
    "from": 1381,
    "label": "has",
    "to": 1409
  }, {
    "from": 1381,
    "label": "has",
    "to": 1410
  }, {
    "from": 1381,
    "label": "has",
    "to": 1411
  }, {
    "from": 1381,
    "label": "has",
    "to": 1412
  }, {
    "from": 1381,
    "label": "has",
    "to": 1413
  }, {
    "from": 1381,
    "label": "has",
    "to": 1414
  }, {
    "from": 1414,
    "label": "has",
    "to": 772
  }, {
    "from": 1414,
    "label": "has",
    "to": 1415
  }, {
    "from": 1414,
    "label": "has",
    "to": 776
  }, {
    "from": 1414,
    "label": "has",
    "to": 773
  }, {
    "from": 1414,
    "label": "has",
    "to": 1416
  }, {
    "from": 1416,
    "label": "has",
    "to": 1417
  }, {
    "from": 1416,
    "label": "has",
    "to": 1418
  }, {
    "from": 1416,
    "label": "has",
    "to": 1419
  }, {
    "from": 1419,
    "label": "has",
    "to": 1420
  }, {
    "from": 1419,
    "label": "has",
    "to": 1421
  }, {
    "from": 1419,
    "label": "has",
    "to": 1422
  }, {
    "from": 1419,
    "label": "has",
    "to": 1423
  }, {
    "from": 1419,
    "label": "has",
    "to": 1424
  }, {
    "from": 1416,
    "label": "has",
    "to": 1425
  }, {
    "from": 1414,
    "label": "has",
    "to": 1426
  }, {
    "from": 1414,
    "label": "has",
    "to": 1427
  }, {
    "from": 1427,
    "label": "has",
    "to": 1428
  }, {
    "from": 1414,
    "label": "has",
    "to": 1429
  }, {
    "from": 1414,
    "label": "has",
    "to": 788
  }, {
    "from": 1414,
    "label": "has",
    "to": 790
  }, {
    "from": 1414,
    "label": "has",
    "to": 789
  }, {
    "from": 1414,
    "label": "has",
    "to": 1430
  }, {
    "from": 1414,
    "label": "has",
    "to": 1431
  }, {
    "from": 1414,
    "label": "has",
    "to": 1432
  }, {
    "from": 1432,
    "label": "has",
    "to": 1433
  }, {
    "from": 1414,
    "label": "has",
    "to": 1421
  }, {
    "from": 1414,
    "label": "has",
    "to": 1434
  }, {
    "from": 1414,
    "label": "has",
    "to": 1435
  }, {
    "from": 1414,
    "label": "has",
    "to": 821
  }, {
    "from": 1414,
    "label": "has",
    "to": 1436
  }, {
    "from": 1436,
    "label": "has",
    "to": 1437
  }, {
    "from": 1436,
    "label": "has",
    "to": 1438
  }, {
    "from": 1436,
    "label": "has",
    "to": 825
  }, {
    "from": 1436,
    "label": "has",
    "to": 832
  }, {
    "from": 1436,
    "label": "has",
    "to": 1439
  }, {
    "from": 1439,
    "label": "has",
    "to": 1440
  }, {
    "from": 1439,
    "label": "has",
    "to": 1441
  }, {
    "from": 1414,
    "label": "has",
    "to": 1442
  }, {
    "from": 1414,
    "label": "has",
    "to": 1443
  }, {
    "from": 1414,
    "label": "has",
    "to": 1444
  }, {
    "from": 1414,
    "label": "has",
    "to": 1445
  }, {
    "from": 1414,
    "label": "has",
    "to": 1446
  }, {
    "from": 1414,
    "label": "has",
    "to": 1447
  }, {
    "from": 1414,
    "label": "has",
    "to": 1448
  }, {
    "from": 1414,
    "label": "has",
    "to": 825
  }, {
    "from": 1414,
    "label": "has",
    "to": 832
  }, {
    "from": 1414,
    "label": "has",
    "to": 853
  }, {
    "from": 1414,
    "label": "has",
    "to": 1449
  }, {
    "from": 1449,
    "label": "has",
    "to": 1450
  }, {
    "from": 1449,
    "label": "has",
    "to": 1451
  }, {
    "from": 1414,
    "label": "has",
    "to": 1452
  }, {
    "from": 1414,
    "label": "has",
    "to": 1453
  }, {
    "from": 1414,
    "label": "has",
    "to": 1454
  }, {
    "from": 1454,
    "label": "has",
    "to": 1455
  }, {
    "from": 1414,
    "label": "has",
    "to": 1421
  }, {
    "from": 1414,
    "label": "has",
    "to": 1456
  }, {
    "from": 1414,
    "label": "has",
    "to": 1457
  }, {
    "from": 1414,
    "label": "has",
    "to": 1458
  }, {
    "from": 1414,
    "label": "has",
    "to": 723
  }, {
    "from": 1381,
    "label": "has",
    "to": 1459
  }, {
    "from": 1459,
    "label": "has",
    "to": 1460
  }, {
    "from": 1459,
    "label": "has",
    "to": 1461
  }, {
    "from": 1459,
    "label": "has",
    "to": 1462
  }, {
    "from": 1459,
    "label": "has",
    "to": 1463
  }, {
    "from": 1381,
    "label": "has",
    "to": 1464
  }, {
    "from": 1464,
    "label": "has",
    "to": 1415
  }, {
    "from": 1464,
    "label": "has",
    "to": 1465
  }, {
    "from": 1464,
    "label": "has",
    "to": 1466
  }, {
    "from": 1464,
    "label": "has",
    "to": 1467
  }, {
    "from": 1467,
    "label": "has",
    "to": 1468
  }, {
    "from": 1467,
    "label": "has",
    "to": 1469
  }, {
    "from": 1467,
    "label": "has",
    "to": 1470
  }, {
    "from": 1467,
    "label": "has",
    "to": 1471
  }, {
    "from": 1464,
    "label": "has",
    "to": 1463
  }, {
    "from": 1381,
    "label": "has",
    "to": 1472
  }, {
    "from": 1472,
    "label": "has",
    "to": 1415
  }, {
    "from": 1472,
    "label": "has",
    "to": 1473
  }, {
    "from": 1472,
    "label": "has",
    "to": 1474
  }, {
    "from": 1472,
    "label": "has",
    "to": 1475
  }, {
    "from": 1475,
    "label": "has",
    "to": 1476
  }, {
    "from": 1475,
    "label": "has",
    "to": 1477
  }, {
    "from": 1475,
    "label": "has",
    "to": 1478
  }, {
    "from": 1475,
    "label": "has",
    "to": 1479
  }, {
    "from": 1472,
    "label": "has",
    "to": 1463
  }, {
    "from": 1381,
    "label": "has",
    "to": 1480
  }, {
    "from": 1480,
    "label": "has",
    "to": 1415
  }, {
    "from": 1480,
    "label": "has",
    "to": 1481
  }, {
    "from": 1480,
    "label": "has",
    "to": 1482
  }, {
    "from": 1482,
    "label": "has",
    "to": 1483
  }, {
    "from": 1483,
    "label": "has",
    "to": 1484
  }, {
    "from": 1483,
    "label": "has",
    "to": 1485
  }, {
    "from": 1482,
    "label": "has",
    "to": 1486
  }, {
    "from": 1482,
    "label": "has",
    "to": 1487
  }, {
    "from": 1482,
    "label": "has",
    "to": 1488
  }, {
    "from": 1482,
    "label": "has",
    "to": 1489
  }, {
    "from": 1482,
    "label": "has",
    "to": 1476
  }, {
    "from": 1482,
    "label": "has",
    "to": 1490
  }, {
    "from": 1482,
    "label": "has",
    "to": 1491
  }, {
    "from": 1491,
    "label": "has",
    "to": 1468
  }, {
    "from": 1491,
    "label": "has",
    "to": 1492
  }, {
    "from": 1491,
    "label": "has",
    "to": 1468
  }, {
    "from": 1491,
    "label": "has",
    "to": 1493
  }, {
    "from": 1480,
    "label": "has",
    "to": 1462
  }, {
    "from": 1480,
    "label": "has",
    "to": 1470
  }, {
    "from": 1480,
    "label": "has",
    "to": 1463
  }, {
    "from": 1381,
    "label": "has",
    "to": 1494
  }, {
    "from": 1494,
    "label": "has",
    "to": 1495
  }, {
    "from": 1495,
    "label": "has",
    "to": 1496
  }, {
    "from": 1495,
    "label": "has",
    "to": 1497
  }, {
    "from": 1494,
    "label": "has",
    "to": 1498
  }, {
    "from": 1494,
    "label": "has",
    "to": 1499
  }, {
    "from": 1494,
    "label": "has",
    "to": 1500
  }, {
    "from": 1494,
    "label": "has",
    "to": 1501
  }, {
    "from": 1494,
    "label": "has",
    "to": 1502
  }, {
    "from": 1494,
    "label": "has",
    "to": 1503
  }, {
    "from": 1494,
    "label": "has",
    "to": 1504
  }, {
    "from": 1504,
    "label": "has",
    "to": 1505
  }, {
    "from": 1505,
    "label": "has",
    "to": 1506
  }, {
    "from": 1505,
    "label": "has",
    "to": 1507
  }, {
    "from": 1494,
    "label": "has",
    "to": 1508
  }, {
    "from": 1494,
    "label": "has",
    "to": 1509
  }, {
    "from": 1494,
    "label": "has",
    "to": 1370
  }, {
    "from": 1381,
    "label": "has",
    "to": 1510
  }, {
    "from": 1510,
    "label": "has",
    "to": 1511
  }, {
    "from": 1511,
    "label": "has",
    "to": 1484
  }, {
    "from": 1511,
    "label": "has",
    "to": 1512
  }, {
    "from": 1512,
    "label": "has",
    "to": 1513
  }, {
    "from": 1381,
    "label": "has",
    "to": 4
  }, {
    "from": 1381,
    "label": "has",
    "to": 1514
  }, {
    "from": 1515,
    "label": "has",
    "to": 1417
  }, {
    "from": 1515,
    "label": "has",
    "to": 1418
  }, {
    "from": 1515,
    "label": "has",
    "to": 1419
  }, {
    "from": 1419,
    "label": "has",
    "to": 1420
  }, {
    "from": 1419,
    "label": "has",
    "to": 1421
  }, {
    "from": 1419,
    "label": "has",
    "to": 1422
  }, {
    "from": 1419,
    "label": "has",
    "to": 1423
  }, {
    "from": 1419,
    "label": "has",
    "to": 1424
  }, {
    "from": 1515,
    "label": "has",
    "to": 1425
  }, {
    "from": 1515,
    "label": "has",
    "to": 1516
  }, {
    "from": 1517,
    "label": "has",
    "to": 1437
  }, {
    "from": 1517,
    "label": "has",
    "to": 1438
  }, {
    "from": 1517,
    "label": "has",
    "to": 825
  }, {
    "from": 1517,
    "label": "has",
    "to": 832
  }, {
    "from": 1517,
    "label": "has",
    "to": 1439
  }, {
    "from": 1439,
    "label": "has",
    "to": 1440
  }, {
    "from": 1439,
    "label": "has",
    "to": 1441
  }, {
    "from": 1517,
    "label": "has",
    "to": 1518
  }, {
    "from": 1519,
    "label": "has",
    "to": 1495
  }, {
    "from": 1495,
    "label": "has",
    "to": 1496
  }, {
    "from": 1495,
    "label": "has",
    "to": 1497
  }, {
    "from": 1519,
    "label": "has",
    "to": 1498
  }, {
    "from": 1519,
    "label": "has",
    "to": 1499
  }, {
    "from": 1519,
    "label": "has",
    "to": 1500
  }, {
    "from": 1519,
    "label": "has",
    "to": 1501
  }, {
    "from": 1519,
    "label": "has",
    "to": 1502
  }, {
    "from": 1519,
    "label": "has",
    "to": 1503
  }, {
    "from": 1519,
    "label": "has",
    "to": 1504
  }, {
    "from": 1504,
    "label": "has",
    "to": 1505
  }, {
    "from": 1505,
    "label": "has",
    "to": 1506
  }, {
    "from": 1505,
    "label": "has",
    "to": 1507
  }, {
    "from": 1519,
    "label": "has",
    "to": 1508
  }, {
    "from": 1519,
    "label": "has",
    "to": 1509
  }, {
    "from": 1519,
    "label": "has",
    "to": 1370
  }, {
    "from": 1519,
    "label": "has",
    "to": 1520
  }, {
    "from": 1521,
    "label": "has",
    "to": 1511
  }, {
    "from": 1511,
    "label": "has",
    "to": 1484
  }, {
    "from": 1511,
    "label": "has",
    "to": 1512
  }, {
    "from": 1512,
    "label": "has",
    "to": 1513
  }, {
    "from": 1521,
    "label": "has",
    "to": 1522
  }, {
    "from": 1523,
    "label": "has",
    "to": 1524
  }, {
    "from": 1524,
    "label": "has",
    "to": 1525
  }, {
    "from": 1523,
    "label": "has",
    "to": 1526
  }, {
    "from": 1527,
    "label": "has",
    "to": 1528
  }, {
    "from": 1528,
    "label": "has",
    "to": 1529
  }, {
    "from": 1527,
    "label": "has",
    "to": 4
  }, {
    "from": 1527,
    "label": "has",
    "to": 4
  }, {
    "from": 1527,
    "label": "has",
    "to": 1530
  }, {
    "from": 1531,
    "label": "has",
    "to": 1382
  }, {
    "from": 1531,
    "label": "has",
    "to": 1532
  }, {
    "from": 1531,
    "label": "has",
    "to": 1533
  }, {
    "from": 1531,
    "label": "has",
    "to": 1534
  }, {
    "from": 1531,
    "label": "has",
    "to": 1395
  }, {
    "from": 1531,
    "label": "has",
    "to": 1535
  }, {
    "from": 1531,
    "label": "has",
    "to": 1536
  }, {
    "from": 1531,
    "label": "has",
    "to": 1413
  }, {
    "from": 1531,
    "label": "has",
    "to": 1537
  }, {
    "from": 1537,
    "label": "has",
    "to": 1538
  }, {
    "from": 1531,
    "label": "has",
    "to": 1539
  }, {
    "from": 1539,
    "label": "has",
    "to": 1540
  }, {
    "from": 1539,
    "label": "has",
    "to": 1541
  }, {
    "from": 1539,
    "label": "has",
    "to": 1542
  }, {
    "from": 1539,
    "label": "has",
    "to": 1543
  }, {
    "from": 1543,
    "label": "has",
    "to": 1544
  }, {
    "from": 1543,
    "label": "has",
    "to": 1545
  }, {
    "from": 1543,
    "label": "has",
    "to": 1546
  }, {
    "from": 1543,
    "label": "has",
    "to": 1547
  }, {
    "from": 1531,
    "label": "has",
    "to": 1548
  }, {
    "from": 1548,
    "label": "has",
    "to": 1549
  }, {
    "from": 1549,
    "label": "has",
    "to": 1550
  }, {
    "from": 1548,
    "label": "has",
    "to": 1039
  }, {
    "from": 1531,
    "label": "has",
    "to": 1551
  }, {
    "from": 1531,
    "label": "has",
    "to": 4
  }, {
    "from": 1531,
    "label": "has",
    "to": 1552
  }, {
    "from": 1553,
    "label": "has",
    "to": 1549
  }, {
    "from": 1549,
    "label": "has",
    "to": 1550
  }, {
    "from": 1553,
    "label": "has",
    "to": 1039
  }, {
    "from": 1553,
    "label": "has",
    "to": 1554
  }, {
    "from": 1555,
    "label": "has",
    "to": 1556
  }, {
    "from": 1557,
    "label": "has",
    "to": 1382
  }, {
    "from": 1557,
    "label": "has",
    "to": 1532
  }, {
    "from": 1557,
    "label": "has",
    "to": 1533
  }, {
    "from": 1557,
    "label": "has",
    "to": 1558
  }, {
    "from": 1557,
    "label": "has",
    "to": 1395
  }, {
    "from": 1557,
    "label": "has",
    "to": 1535
  }, {
    "from": 1557,
    "label": "has",
    "to": 1536
  }, {
    "from": 1557,
    "label": "has",
    "to": 1413
  }, {
    "from": 1557,
    "label": "has",
    "to": 1537
  }, {
    "from": 1537,
    "label": "has",
    "to": 1538
  }, {
    "from": 1557,
    "label": "has",
    "to": 1559
  }, {
    "from": 1559,
    "label": "has",
    "to": 1540
  }, {
    "from": 1559,
    "label": "has",
    "to": 1541
  }, {
    "from": 1559,
    "label": "has",
    "to": 1542
  }, {
    "from": 1559,
    "label": "has",
    "to": 1560
  }, {
    "from": 1560,
    "label": "has",
    "to": 1544
  }, {
    "from": 1560,
    "label": "has",
    "to": 1545
  }, {
    "from": 1560,
    "label": "has",
    "to": 1546
  }, {
    "from": 1560,
    "label": "has",
    "to": 1547
  }, {
    "from": 1557,
    "label": "has",
    "to": 1561
  }, {
    "from": 1561,
    "label": "has",
    "to": 1549
  }, {
    "from": 1549,
    "label": "has",
    "to": 1550
  }, {
    "from": 1561,
    "label": "has",
    "to": 1039
  }, {
    "from": 1557,
    "label": "has",
    "to": 1562
  }, {
    "from": 1557,
    "label": "has",
    "to": 4
  }, {
    "from": 1557,
    "label": "has",
    "to": 1563
  }, {
    "from": 1564,
    "label": "has",
    "to": 1549
  }, {
    "from": 1549,
    "label": "has",
    "to": 1550
  }, {
    "from": 1564,
    "label": "has",
    "to": 1039
  }, {
    "from": 1564,
    "label": "has",
    "to": 1565
  }, {
    "from": 1566,
    "label": "has",
    "to": 1567
  }, {
    "from": 1568,
    "label": "has",
    "to": 1569
  }, {
    "from": 1568,
    "label": "has",
    "to": 1570
  }, {
    "from": 1568,
    "label": "has",
    "to": 1571
  }, {
    "from": 1568,
    "label": "has",
    "to": 1572
  }, {
    "from": 1568,
    "label": "has",
    "to": 1573
  }, {
    "from": 1568,
    "label": "has",
    "to": 1574
  }, {
    "from": 1568,
    "label": "has",
    "to": 1575
  }, {
    "from": 1568,
    "label": "has",
    "to": 1576
  }, {
    "from": 1568,
    "label": "has",
    "to": 1577
  }, {
    "from": 1568,
    "label": "has",
    "to": 1578
  }, {
    "from": 1568,
    "label": "has",
    "to": 1579
  }, {
    "from": 1568,
    "label": "has",
    "to": 1580
  }, {
    "from": 1568,
    "label": "has",
    "to": 1581
  }, {
    "from": 1568,
    "label": "has",
    "to": 1395
  }, {
    "from": 1568,
    "label": "has",
    "to": 1582
  }, {
    "from": 1568,
    "label": "has",
    "to": 1583
  }, {
    "from": 1568,
    "label": "has",
    "to": 1584
  }, {
    "from": 1568,
    "label": "has",
    "to": 1585
  }, {
    "from": 1568,
    "label": "has",
    "to": 1586
  }, {
    "from": 1568,
    "label": "has",
    "to": 1587
  }, {
    "from": 1568,
    "label": "has",
    "to": 1588
  }, {
    "from": 1568,
    "label": "has",
    "to": 1589
  }, {
    "from": 1568,
    "label": "has",
    "to": 1590
  }, {
    "from": 1568,
    "label": "has",
    "to": 1413
  }, {
    "from": 1568,
    "label": "has",
    "to": 1591
  }, {
    "from": 1568,
    "label": "has",
    "to": 1592
  }, {
    "from": 1592,
    "label": "has",
    "to": 1593
  }, {
    "from": 1593,
    "label": "has",
    "to": 1594
  }, {
    "from": 1568,
    "label": "has",
    "to": 1595
  }, {
    "from": 1595,
    "label": "has",
    "to": 1596
  }, {
    "from": 1596,
    "label": "has",
    "to": 1594
  }, {
    "from": 1596,
    "label": "has",
    "to": 1597
  }, {
    "from": 1595,
    "label": "has",
    "to": 981
  }, {
    "from": 1568,
    "label": "has",
    "to": 1598
  }, {
    "from": 1598,
    "label": "has",
    "to": 1599
  }, {
    "from": 1599,
    "label": "has",
    "to": 1597
  }, {
    "from": 1598,
    "label": "has",
    "to": 981
  }, {
    "from": 1568,
    "label": "has",
    "to": 1600
  }, {
    "from": 1568,
    "label": "has",
    "to": 1601
  }, {
    "from": 1602,
    "label": "has",
    "to": 1603
  }, {
    "from": 1603,
    "label": "has",
    "to": 1604
  }, {
    "from": 1602,
    "label": "has",
    "to": 1605
  }, {
    "from": 1602,
    "label": "has",
    "to": 4
  }, {
    "from": 1602,
    "label": "has",
    "to": 1606
  }, {
    "from": 1602,
    "label": "has",
    "to": 1607
  }, {
    "from": 1602,
    "label": "has",
    "to": 1608
  }, {
    "from": 1602,
    "label": "has",
    "to": 1609
  }, {
    "from": 1602,
    "label": "has",
    "to": 1610
  }, {
    "from": 1602,
    "label": "has",
    "to": 4
  }, {
    "from": 1602,
    "label": "has",
    "to": 1611
  }, {
    "from": 1611,
    "label": "has",
    "to": 1612
  }, {
    "from": 1611,
    "label": "has",
    "to": 1613
  }, {
    "from": 1611,
    "label": "has",
    "to": 1614
  }, {
    "from": 1602,
    "label": "has",
    "to": 4
  }, {
    "from": 1602,
    "label": "has",
    "to": 1615
  }, {
    "from": 1615,
    "label": "has",
    "to": 1616
  }, {
    "from": 1615,
    "label": "has",
    "to": 1617
  }, {
    "from": 1602,
    "label": "has",
    "to": 1618
  }, {
    "from": 1619,
    "label": "has",
    "to": 1603
  }, {
    "from": 1603,
    "label": "has",
    "to": 1604
  }, {
    "from": 1619,
    "label": "has",
    "to": 1620
  }, {
    "from": 1620,
    "label": "has",
    "to": 1621
  }, {
    "from": 1620,
    "label": "has",
    "to": 1622
  }, {
    "from": 1620,
    "label": "has",
    "to": 1623
  }, {
    "from": 1620,
    "label": "has",
    "to": 1624
  }, {
    "from": 1624,
    "label": "has",
    "to": 1625
  }, {
    "from": 1624,
    "label": "has",
    "to": 1626
  }, {
    "from": 1624,
    "label": "has",
    "to": 1627
  }, {
    "from": 1624,
    "label": "has",
    "to": 1628
  }, {
    "from": 1624,
    "label": "has",
    "to": 1629
  }, {
    "from": 1624,
    "label": "has",
    "to": 1630
  }, {
    "from": 1630,
    "label": "has",
    "to": 1631
  }, {
    "from": 1630,
    "label": "has",
    "to": 1632
  }, {
    "from": 1632,
    "label": "has",
    "to": 1633
  }, {
    "from": 1630,
    "label": "has",
    "to": 1634
  }, {
    "from": 1634,
    "label": "has",
    "to": 1635
  }, {
    "from": 1630,
    "label": "has",
    "to": 1636
  }, {
    "from": 1636,
    "label": "has",
    "to": 1637
  }, {
    "from": 1630,
    "label": "has",
    "to": 1638
  }, {
    "from": 1638,
    "label": "has",
    "to": 1639
  }, {
    "from": 1630,
    "label": "has",
    "to": 1640
  }, {
    "from": 1630,
    "label": "has",
    "to": 1641
  }, {
    "from": 1620,
    "label": "has",
    "to": 1642
  }, {
    "from": 1619,
    "label": "has",
    "to": 1643
  }, {
    "from": 1643,
    "label": "has",
    "to": 1644
  }, {
    "from": 1644,
    "label": "has",
    "to": 1506
  }, {
    "from": 1644,
    "label": "has",
    "to": 1507
  }, {
    "from": 1619,
    "label": "has",
    "to": 1645
  }, {
    "from": 1619,
    "label": "has",
    "to": 1646
  }, {
    "from": 1646,
    "label": "has",
    "to": 1647
  }, {
    "from": 1646,
    "label": "has",
    "to": 1648
  }, {
    "from": 1646,
    "label": "has",
    "to": 1649
  }, {
    "from": 1619,
    "label": "has",
    "to": 1650
  }, {
    "from": 1619,
    "label": "has",
    "to": 1651
  }, {
    "from": 1651,
    "label": "has",
    "to": 1652
  }, {
    "from": 1651,
    "label": "has",
    "to": 1653
  }, {
    "from": 1651,
    "label": "has",
    "to": 1649
  }, {
    "from": 1619,
    "label": "has",
    "to": 1654
  }, {
    "from": 1619,
    "label": "has",
    "to": 1655
  }, {
    "from": 1655,
    "label": "has",
    "to": 1656
  }, {
    "from": 1655,
    "label": "has",
    "to": 1657
  }, {
    "from": 1655,
    "label": "has",
    "to": 1649
  }, {
    "from": 1619,
    "label": "has",
    "to": 1502
  }, {
    "from": 1619,
    "label": "has",
    "to": 1503
  }, {
    "from": 1619,
    "label": "has",
    "to": 1508
  }, {
    "from": 1619,
    "label": "has",
    "to": 1509
  }, {
    "from": 1619,
    "label": "has",
    "to": 1039
  }, {
    "from": 1619,
    "label": "has",
    "to": 1370
  }, {
    "from": 1619,
    "label": "has",
    "to": 1658
  }, {
    "from": 1659,
    "label": "has",
    "to": 1660
  }, {
    "from": 1659,
    "label": "has",
    "to": 1661
  }, {
    "from": 1661,
    "label": "has",
    "to": 1662
  }, {
    "from": 1662,
    "label": "has",
    "to": 1663
  }, {
    "from": 1663,
    "label": "has",
    "to": 1664
  }, {
    "from": 1663,
    "label": "has",
    "to": 1665
  }, {
    "from": 1663,
    "label": "has",
    "to": 1666
  }, {
    "from": 1663,
    "label": "has",
    "to": 1667
  }, {
    "from": 1663,
    "label": "has",
    "to": 1668
  }, {
    "from": 1663,
    "label": "has",
    "to": 1669
  }, {
    "from": 1663,
    "label": "has",
    "to": 1670
  }, {
    "from": 1663,
    "label": "has",
    "to": 1671
  }, {
    "from": 1663,
    "label": "has",
    "to": 1672
  }, {
    "from": 1663,
    "label": "has",
    "to": 1673
  }, {
    "from": 1662,
    "label": "has",
    "to": 1674
  }, {
    "from": 1661,
    "label": "has",
    "to": 4
  }, {
    "from": 1661,
    "label": "has",
    "to": 4
  }, {
    "from": 1661,
    "label": "has",
    "to": 4
  }, {
    "from": 1661,
    "label": "has",
    "to": 4
  }, {
    "from": 1659,
    "label": "has",
    "to": 1675
  }, {
    "from": 1675,
    "label": "has",
    "to": 1676
  }, {
    "from": 1676,
    "label": "has",
    "to": 1677
  }, {
    "from": 1677,
    "label": "has",
    "to": 1664
  }, {
    "from": 1677,
    "label": "has",
    "to": 1678
  }, {
    "from": 1677,
    "label": "has",
    "to": 1679
  }, {
    "from": 1677,
    "label": "has",
    "to": 1680
  }, {
    "from": 1677,
    "label": "has",
    "to": 1681
  }, {
    "from": 1677,
    "label": "has",
    "to": 1682
  }, {
    "from": 1677,
    "label": "has",
    "to": 1683
  }, {
    "from": 1677,
    "label": "has",
    "to": 1684
  }, {
    "from": 1684,
    "label": "has",
    "to": 1685
  }, {
    "from": 1677,
    "label": "has",
    "to": 1686
  }, {
    "from": 1677,
    "label": "has",
    "to": 1687
  }, {
    "from": 1677,
    "label": "has",
    "to": 1688
  }, {
    "from": 1677,
    "label": "has",
    "to": 1689
  }, {
    "from": 1677,
    "label": "has",
    "to": 1690
  }, {
    "from": 1677,
    "label": "has",
    "to": 1691
  }, {
    "from": 1677,
    "label": "has",
    "to": 1692
  }, {
    "from": 1677,
    "label": "has",
    "to": 1693
  }, {
    "from": 1677,
    "label": "has",
    "to": 1694
  }, {
    "from": 1694,
    "label": "has",
    "to": 1695
  }, {
    "from": 1694,
    "label": "has",
    "to": 1696
  }, {
    "from": 1694,
    "label": "has",
    "to": 1697
  }, {
    "from": 1694,
    "label": "has",
    "to": 1698
  }, {
    "from": 1694,
    "label": "has",
    "to": 1699
  }, {
    "from": 1676,
    "label": "has",
    "to": 1700
  }, {
    "from": 1675,
    "label": "has",
    "to": 4
  }, {
    "from": 1675,
    "label": "has",
    "to": 4
  }, {
    "from": 1659,
    "label": "has",
    "to": 1701
  }, {
    "from": 1701,
    "label": "has",
    "to": 1702
  }, {
    "from": 1701,
    "label": "has",
    "to": 1703
  }, {
    "from": 1703,
    "label": "has",
    "to": 1704
  }, {
    "from": 1701,
    "label": "has",
    "to": 1705
  }, {
    "from": 1705,
    "label": "has",
    "to": 1706
  }, {
    "from": 1701,
    "label": "has",
    "to": 1707
  }, {
    "from": 1707,
    "label": "has",
    "to": 1708
  }, {
    "from": 1701,
    "label": "has",
    "to": 1709
  }, {
    "from": 1701,
    "label": "has",
    "to": 1710
  }, {
    "from": 1701,
    "label": "has",
    "to": 1711
  }, {
    "from": 1659,
    "label": "has",
    "to": 1712
  }, {
    "from": 1659,
    "label": "has",
    "to": 1713
  }, {
    "from": 1659,
    "label": "has",
    "to": 1714
  }, {
    "from": 1659,
    "label": "has",
    "to": 1715
  }, {
    "from": 1659,
    "label": "has",
    "to": 1716
  }, {
    "from": 1659,
    "label": "has",
    "to": 1717
  }, {
    "from": 1659,
    "label": "has",
    "to": 1718
  }, {
    "from": 1659,
    "label": "has",
    "to": 1719
  }, {
    "from": 1659,
    "label": "has",
    "to": 1720
  }, {
    "from": 1659,
    "label": "has",
    "to": 1721
  }, {
    "from": 1659,
    "label": "has",
    "to": 1722
  }, {
    "from": 1659,
    "label": "has",
    "to": 1723
  }, {
    "from": 1659,
    "label": "has",
    "to": 1724
  }, {
    "from": 1659,
    "label": "has",
    "to": 1725
  }, {
    "from": 1659,
    "label": "has",
    "to": 1726
  }, {
    "from": 1659,
    "label": "has",
    "to": 1727
  }, {
    "from": 1727,
    "label": "has",
    "to": 1728
  }, {
    "from": 1728,
    "label": "has",
    "to": 1729
  }, {
    "from": 1729,
    "label": "has",
    "to": 1730
  }, {
    "from": 1729,
    "label": "has",
    "to": 1731
  }, {
    "from": 1728,
    "label": "has",
    "to": 1732
  }, {
    "from": 1659,
    "label": "has",
    "to": 1733
  }, {
    "from": 1659,
    "label": "has",
    "to": 1734
  }, {
    "from": 1659,
    "label": "has",
    "to": 1735
  }, {
    "from": 1659,
    "label": "has",
    "to": 1736
  }, {
    "from": 1659,
    "label": "has",
    "to": 1737
  }, {
    "from": 1659,
    "label": "has",
    "to": 1738
  }, {
    "from": 1659,
    "label": "has",
    "to": 1739
  }, {
    "from": 1659,
    "label": "has",
    "to": 1740
  }, {
    "from": 1659,
    "label": "has",
    "to": 1741
  }, {
    "from": 1659,
    "label": "has",
    "to": 1742
  }, {
    "from": 1659,
    "label": "has",
    "to": 1743
  }, {
    "from": 1659,
    "label": "has",
    "to": 1744
  }, {
    "from": 1659,
    "label": "has",
    "to": 1745
  }, {
    "from": 1659,
    "label": "has",
    "to": 1746
  }, {
    "from": 1659,
    "label": "has",
    "to": 1747
  }, {
    "from": 1659,
    "label": "has",
    "to": 1748
  }, {
    "from": 1659,
    "label": "has",
    "to": 1749
  }, {
    "from": 1659,
    "label": "has",
    "to": 1750
  }, {
    "from": 1659,
    "label": "has",
    "to": 1751
  }, {
    "from": 1659,
    "label": "has",
    "to": 1752
  }, {
    "from": 1659,
    "label": "has",
    "to": 1753
  }, {
    "from": 1659,
    "label": "has",
    "to": 1754
  }, {
    "from": 1659,
    "label": "has",
    "to": 1755
  }, {
    "from": 1659,
    "label": "has",
    "to": 1756
  }, {
    "from": 1659,
    "label": "has",
    "to": 1757
  }, {
    "from": 1758,
    "label": "has",
    "to": 1662
  }, {
    "from": 1662,
    "label": "has",
    "to": 1663
  }, {
    "from": 1663,
    "label": "has",
    "to": 1664
  }, {
    "from": 1663,
    "label": "has",
    "to": 1665
  }, {
    "from": 1663,
    "label": "has",
    "to": 1666
  }, {
    "from": 1663,
    "label": "has",
    "to": 1667
  }, {
    "from": 1663,
    "label": "has",
    "to": 1668
  }, {
    "from": 1663,
    "label": "has",
    "to": 1669
  }, {
    "from": 1663,
    "label": "has",
    "to": 1670
  }, {
    "from": 1663,
    "label": "has",
    "to": 1671
  }, {
    "from": 1663,
    "label": "has",
    "to": 1672
  }, {
    "from": 1663,
    "label": "has",
    "to": 1673
  }, {
    "from": 1662,
    "label": "has",
    "to": 1674
  }, {
    "from": 1758,
    "label": "has",
    "to": 4
  }, {
    "from": 1758,
    "label": "has",
    "to": 4
  }, {
    "from": 1758,
    "label": "has",
    "to": 4
  }, {
    "from": 1758,
    "label": "has",
    "to": 4
  }, {
    "from": 1758,
    "label": "has",
    "to": 1759
  }, {
    "from": 1760,
    "label": "has",
    "to": 1676
  }, {
    "from": 1676,
    "label": "has",
    "to": 1677
  }, {
    "from": 1677,
    "label": "has",
    "to": 1664
  }, {
    "from": 1677,
    "label": "has",
    "to": 1678
  }, {
    "from": 1677,
    "label": "has",
    "to": 1679
  }, {
    "from": 1677,
    "label": "has",
    "to": 1680
  }, {
    "from": 1677,
    "label": "has",
    "to": 1681
  }, {
    "from": 1677,
    "label": "has",
    "to": 1682
  }, {
    "from": 1677,
    "label": "has",
    "to": 1683
  }, {
    "from": 1677,
    "label": "has",
    "to": 1684
  }, {
    "from": 1684,
    "label": "has",
    "to": 1685
  }, {
    "from": 1677,
    "label": "has",
    "to": 1686
  }, {
    "from": 1677,
    "label": "has",
    "to": 1687
  }, {
    "from": 1677,
    "label": "has",
    "to": 1688
  }, {
    "from": 1677,
    "label": "has",
    "to": 1689
  }, {
    "from": 1677,
    "label": "has",
    "to": 1690
  }, {
    "from": 1677,
    "label": "has",
    "to": 1691
  }, {
    "from": 1677,
    "label": "has",
    "to": 1692
  }, {
    "from": 1677,
    "label": "has",
    "to": 1693
  }, {
    "from": 1677,
    "label": "has",
    "to": 1694
  }, {
    "from": 1694,
    "label": "has",
    "to": 1695
  }, {
    "from": 1694,
    "label": "has",
    "to": 1696
  }, {
    "from": 1694,
    "label": "has",
    "to": 1697
  }, {
    "from": 1694,
    "label": "has",
    "to": 1698
  }, {
    "from": 1694,
    "label": "has",
    "to": 1699
  }, {
    "from": 1676,
    "label": "has",
    "to": 1700
  }, {
    "from": 1760,
    "label": "has",
    "to": 4
  }, {
    "from": 1760,
    "label": "has",
    "to": 4
  }, {
    "from": 1760,
    "label": "has",
    "to": 1761
  }, {
    "from": 1762,
    "label": "has",
    "to": 1728
  }, {
    "from": 1728,
    "label": "has",
    "to": 1729
  }, {
    "from": 1729,
    "label": "has",
    "to": 1730
  }, {
    "from": 1729,
    "label": "has",
    "to": 1731
  }, {
    "from": 1728,
    "label": "has",
    "to": 1732
  }, {
    "from": 1762,
    "label": "has",
    "to": 1763
  }, {
    "from": 1764,
    "label": "has",
    "to": 1765
  }, {
    "from": 1764,
    "label": "has",
    "to": 1766
  }, {
    "from": 1764,
    "label": "has",
    "to": 1767
  }, {
    "from": 1767,
    "label": "has",
    "to": 1768
  }, {
    "from": 1764,
    "label": "has",
    "to": 1769
  }, {
    "from": 1764,
    "label": "has",
    "to": 1770
  }, {
    "from": 1764,
    "label": "has",
    "to": 1771
  }, {
    "from": 1764,
    "label": "has",
    "to": 1772
  }, {
    "from": 1772,
    "label": "has",
    "to": 1773
  }, {
    "from": 1772,
    "label": "has",
    "to": 1774
  }, {
    "from": 1764,
    "label": "has",
    "to": 1775
  }, {
    "from": 1764,
    "label": "has",
    "to": 1776
  }, {
    "from": 1764,
    "label": "has",
    "to": 1777
  }, {
    "from": 1778,
    "label": "has",
    "to": 1779
  }, {
    "from": 1780,
    "label": "has",
    "to": 1781
  }, {
    "from": 1782,
    "label": "has",
    "to": 1783
  }, {
    "from": 1784,
    "label": "has",
    "to": 1785
  }, {
    "from": 1786,
    "label": "has",
    "to": 1787
  }, {
    "from": 1788,
    "label": "has",
    "to": 1789
  }, {
    "from": 1790,
    "label": "has",
    "to": 1791
  }, {
    "from": 1792,
    "label": "has",
    "to": 1793
  }, {
    "from": 1794,
    "label": "has",
    "to": 1795
  }, {
    "from": 1796,
    "label": "has",
    "to": 1797
  }, {
    "from": 1798,
    "label": "has",
    "to": 1799
  }, {
    "from": 1798,
    "label": "has",
    "to": 1800
  }, {
    "from": 1800,
    "label": "has",
    "to": 1801
  }, {
    "from": 1800,
    "label": "has",
    "to": 1802
  }, {
    "from": 1798,
    "label": "has",
    "to": 1803
  }, {
    "from": 1804,
    "label": "has",
    "to": 1805
  }, {
    "from": 1806,
    "label": "has",
    "to": 1807
  }, {
    "from": 1808,
    "label": "has",
    "to": 1809
  }, {
    "from": 1810,
    "label": "has",
    "to": 1811
  }, {
    "from": 1812,
    "label": "has",
    "to": 1813
  }, {
    "from": 1814,
    "label": "has",
    "to": 1815
  }, {
    "from": 1814,
    "label": "has",
    "to": 1039
  }, {
    "from": 1814,
    "label": "has",
    "to": 1816
  }, {
    "from": 1817,
    "label": "has",
    "to": 1818
  }, {
    "from": 1818,
    "label": "has",
    "to": 1166
  }, {
    "from": 1818,
    "label": "has",
    "to": 1819
  }, {
    "from": 1819,
    "label": "has",
    "to": 1820
  }, {
    "from": 1819,
    "label": "has",
    "to": 1821
  }, {
    "from": 1817,
    "label": "has",
    "to": 1822
  }, {
    "from": 1817,
    "label": "has",
    "to": 1823
  }, {
    "from": 1824,
    "label": "has",
    "to": 1825
  }, {
    "from": 1824,
    "label": "has",
    "to": 1826
  }, {
    "from": 1824,
    "label": "has",
    "to": 1827
  }, {
    "from": 1824,
    "label": "has",
    "to": 1828
  }, {
    "from": 1824,
    "label": "has",
    "to": 1829
  }, {
    "from": 1824,
    "label": "has",
    "to": 1830
  }, {
    "from": 1831,
    "label": "has",
    "to": 1832
  }, {
    "from": 1831,
    "label": "has",
    "to": 1833
  }, {
    "from": 1833,
    "label": "has",
    "to": 1834
  }, {
    "from": 1831,
    "label": "has",
    "to": 1835
  }, {
    "from": 1831,
    "label": "has",
    "to": 1836
  }, {
    "from": 1831,
    "label": "has",
    "to": 1826
  }, {
    "from": 1831,
    "label": "has",
    "to": 1827
  }, {
    "from": 1831,
    "label": "has",
    "to": 1828
  }, {
    "from": 1831,
    "label": "has",
    "to": 1837
  }, {
    "from": 1831,
    "label": "has",
    "to": 1838
  }, {
    "from": 1839,
    "label": "has",
    "to": 1840
  }, {
    "from": 1839,
    "label": "has",
    "to": 1826
  }, {
    "from": 1839,
    "label": "has",
    "to": 1827
  }, {
    "from": 1839,
    "label": "has",
    "to": 1828
  }, {
    "from": 1839,
    "label": "has",
    "to": 1841
  }, {
    "from": 1839,
    "label": "has",
    "to": 1842
  }, {
    "from": 1843,
    "label": "has",
    "to": 1844
  }, {
    "from": 1844,
    "label": "has",
    "to": 1845
  }, {
    "from": 1843,
    "label": "has",
    "to": 1822
  }, {
    "from": 1843,
    "label": "has",
    "to": 1846
  }, {
    "from": 1847,
    "label": "has",
    "to": 1848
  }, {
    "from": 1848,
    "label": "has",
    "to": 1849
  }, {
    "from": 1847,
    "label": "has",
    "to": 1822
  }, {
    "from": 1847,
    "label": "has",
    "to": 1850
  }, {
    "from": 1851,
    "label": "has",
    "to": 1852
  }, {
    "from": 1851,
    "label": "has",
    "to": 1508
  }, {
    "from": 1851,
    "label": "has",
    "to": 1853
  }, {
    "from": 1851,
    "label": "has",
    "to": 1370
  }, {
    "from": 1851,
    "label": "has",
    "to": 1854
  }, {
    "from": 1855,
    "label": "has",
    "to": 1856
  }, {
    "from": 1855,
    "label": "has",
    "to": 1857
  }, {
    "from": 1857,
    "label": "has",
    "to": 1858
  }, {
    "from": 1857,
    "label": "has",
    "to": 1859
  }, {
    "from": 1859,
    "label": "has",
    "to": 1860
  }, {
    "from": 1857,
    "label": "has",
    "to": 1039
  }, {
    "from": 1855,
    "label": "has",
    "to": 1861
  }, {
    "from": 1862,
    "label": "has",
    "to": 1863
  }, {
    "from": 1862,
    "label": "has",
    "to": 1864
  }, {
    "from": 1864,
    "label": "has",
    "to": 1858
  }, {
    "from": 1864,
    "label": "has",
    "to": 1865
  }, {
    "from": 1865,
    "label": "has",
    "to": 1860
  }, {
    "from": 1865,
    "label": "has",
    "to": 1866
  }, {
    "from": 1866,
    "label": "has",
    "to": 1867
  }, {
    "from": 1864,
    "label": "has",
    "to": 1039
  }, {
    "from": 1862,
    "label": "has",
    "to": 1868
  }, {
    "from": 1869,
    "label": "has",
    "to": 1870
  }, {
    "from": 1869,
    "label": "has",
    "to": 1871
  }, {
    "from": 1871,
    "label": "has",
    "to": 1872
  }, {
    "from": 1871,
    "label": "has",
    "to": 1873
  }, {
    "from": 1873,
    "label": "has",
    "to": 1860
  }, {
    "from": 1873,
    "label": "has",
    "to": 1874
  }, {
    "from": 1874,
    "label": "has",
    "to": 1875
  }, {
    "from": 1871,
    "label": "has",
    "to": 1039
  }, {
    "from": 1869,
    "label": "has",
    "to": 1876
  }, {
    "from": 1877,
    "label": "has",
    "to": 1878
  }, {
    "from": 1877,
    "label": "has",
    "to": 1879
  }, {
    "from": 1877,
    "label": "has",
    "to": 1880
  }, {
    "from": 1877,
    "label": "has",
    "to": 1881
  }, {
    "from": 1877,
    "label": "has",
    "to": 1039
  }, {
    "from": 1877,
    "label": "has",
    "to": 1882
  }, {
    "from": 1883,
    "label": "has",
    "to": 1878
  }, {
    "from": 1883,
    "label": "has",
    "to": 1884
  }, {
    "from": 1883,
    "label": "has",
    "to": 1885
  }, {
    "from": 1883,
    "label": "has",
    "to": 1886
  }, {
    "from": 1883,
    "label": "has",
    "to": 1039
  }, {
    "from": 1883,
    "label": "has",
    "to": 1887
  }, {
    "from": 1888,
    "label": "has",
    "to": 1889
  }, {
    "from": 1888,
    "label": "has",
    "to": 1890
  }, {
    "from": 1890,
    "label": "has",
    "to": 1298
  }, {
    "from": 1888,
    "label": "has",
    "to": 1891
  }, {
    "from": 1892,
    "label": "has",
    "to": 1893
  }, {
    "from": 1893,
    "label": "has",
    "to": 1889
  }, {
    "from": 1893,
    "label": "has",
    "to": 1894
  }, {
    "from": 1894,
    "label": "has",
    "to": 1298
  }, {
    "from": 1892,
    "label": "has",
    "to": 1895
  }, {
    "from": 1895,
    "label": "has",
    "to": 1896
  }, {
    "from": 1892,
    "label": "has",
    "to": 1897
  }, {
    "from": 1898,
    "label": "has",
    "to": 1878
  }, {
    "from": 1898,
    "label": "has",
    "to": 1899
  }, {
    "from": 1898,
    "label": "has",
    "to": 1900
  }, {
    "from": 1898,
    "label": "has",
    "to": 1901
  }, {
    "from": 1898,
    "label": "has",
    "to": 1039
  }, {
    "from": 1898,
    "label": "has",
    "to": 1902
  }, {
    "from": 1903,
    "label": "has",
    "to": 1878
  }, {
    "from": 1903,
    "label": "has",
    "to": 1904
  }, {
    "from": 1903,
    "label": "has",
    "to": 1905
  }, {
    "from": 1903,
    "label": "has",
    "to": 1906
  }, {
    "from": 1903,
    "label": "has",
    "to": 1039
  }, {
    "from": 1903,
    "label": "has",
    "to": 1907
  }, {
    "from": 1908,
    "label": "has",
    "to": 1320
  }, {
    "from": 1908,
    "label": "has",
    "to": 1909
  }, {
    "from": 1908,
    "label": "has",
    "to": 1910
  }, {
    "from": 1910,
    "label": "has",
    "to": 1112
  }, {
    "from": 1908,
    "label": "has",
    "to": 1911
  }, {
    "from": 1912,
    "label": "has",
    "to": 1320
  }, {
    "from": 1912,
    "label": "has",
    "to": 1913
  }, {
    "from": 1912,
    "label": "has",
    "to": 1910
  }, {
    "from": 1910,
    "label": "has",
    "to": 1112
  }, {
    "from": 1912,
    "label": "has",
    "to": 1914
  }, {
    "from": 1915,
    "label": "has",
    "to": 1320
  }, {
    "from": 1915,
    "label": "has",
    "to": 1916
  }, {
    "from": 1915,
    "label": "has",
    "to": 1910
  }, {
    "from": 1910,
    "label": "has",
    "to": 1112
  }, {
    "from": 1915,
    "label": "has",
    "to": 1917
  }, {
    "from": 1918,
    "label": "has",
    "to": 1320
  }, {
    "from": 1918,
    "label": "has",
    "to": 1919
  }, {
    "from": 1918,
    "label": "has",
    "to": 1910
  }, {
    "from": 1910,
    "label": "has",
    "to": 1112
  }, {
    "from": 1918,
    "label": "has",
    "to": 1920
  }, {
    "from": 1921,
    "label": "has",
    "to": 1922
  }, {
    "from": 1923,
    "label": "has",
    "to": 1924
  }, {
    "from": 1925,
    "label": "has",
    "to": 1926
  }, {
    "from": 1925,
    "label": "has",
    "to": 1927
  }, {
    "from": 1928,
    "label": "has",
    "to": 1929
  }, {
    "from": 1928,
    "label": "has",
    "to": 1930
  }, {
    "from": 1928,
    "label": "has",
    "to": 1931
  }, {
    "from": 1931,
    "label": "has",
    "to": 1932
  }, {
    "from": 1931,
    "label": "has",
    "to": 1933
  }, {
    "from": 1931,
    "label": "has",
    "to": 1934
  }, {
    "from": 1928,
    "label": "has",
    "to": 1935
  }, {
    "from": 1936,
    "label": "has",
    "to": 1937
  }, {
    "from": 1936,
    "label": "has",
    "to": 1938
  }, {
    "from": 1938,
    "label": "has",
    "to": 1939
  }, {
    "from": 1936,
    "label": "has",
    "to": 4
  }, {
    "from": 1936,
    "label": "has",
    "to": 1940
  }, {
    "from": 1941,
    "label": "has",
    "to": 1942
  }, {
    "from": 1941,
    "label": "has",
    "to": 1943
  }, {
    "from": 1941,
    "label": "has",
    "to": 1944
  }, {
    "from": 1941,
    "label": "has",
    "to": 1945
  }, {
    "from": 1946,
    "label": "has",
    "to": 1947
  }, {
    "from": 1947,
    "label": "has",
    "to": 1948
  }, {
    "from": 1946,
    "label": "has",
    "to": 4
  }, {
    "from": 1946,
    "label": "has",
    "to": 1949
  }, {
    "from": 1950,
    "label": "has",
    "to": 1352
  }, {
    "from": 1950,
    "label": "has",
    "to": 1951
  }, {
    "from": 1950,
    "label": "has",
    "to": 1952
  }, {
    "from": 1950,
    "label": "has",
    "to": 1953
  }, {
    "from": 1950,
    "label": "has",
    "to": 1954
  }, {
    "from": 1950,
    "label": "has",
    "to": 1955
  }, {
    "from": 1950,
    "label": "has",
    "to": 1956
  }, {
    "from": 1950,
    "label": "has",
    "to": 1957
  }, {
    "from": 1950,
    "label": "has",
    "to": 1958
  }, {
    "from": 1950,
    "label": "has",
    "to": 1959
  }, {
    "from": 1950,
    "label": "has",
    "to": 1960
  }, {
    "from": 1950,
    "label": "has",
    "to": 1961
  }, {
    "from": 1961,
    "label": "has",
    "to": 1962
  }, {
    "from": 1961,
    "label": "has",
    "to": 1963
  }, {
    "from": 1961,
    "label": "has",
    "to": 1964
  }, {
    "from": 1961,
    "label": "has",
    "to": 4
  }, {
    "from": 1950,
    "label": "has",
    "to": 1965
  }, {
    "from": 1950,
    "label": "has",
    "to": 1966
  }, {
    "from": 1950,
    "label": "has",
    "to": 1967
  }, {
    "from": 1950,
    "label": "has",
    "to": 1968
  }, {
    "from": 1950,
    "label": "has",
    "to": 1969
  }, {
    "from": 1950,
    "label": "has",
    "to": 1970
  }, {
    "from": 1950,
    "label": "has",
    "to": 1971
  }, {
    "from": 1950,
    "label": "has",
    "to": 1972
  }, {
    "from": 1950,
    "label": "has",
    "to": 1973
  }, {
    "from": 1950,
    "label": "has",
    "to": 1974
  }, {
    "from": 1950,
    "label": "has",
    "to": 1971
  }, {
    "from": 1950,
    "label": "has",
    "to": 1975
  }, {
    "from": 1950,
    "label": "has",
    "to": 1976
  }, {
    "from": 1950,
    "label": "has",
    "to": 1977
  }, {
    "from": 1950,
    "label": "has",
    "to": 1978
  }, {
    "from": 1950,
    "label": "has",
    "to": 1979
  }, {
    "from": 1950,
    "label": "has",
    "to": 1978
  }, {
    "from": 1950,
    "label": "has",
    "to": 1980
  }, {
    "from": 1950,
    "label": "has",
    "to": 1981
  }, {
    "from": 1950,
    "label": "has",
    "to": 1978
  }, {
    "from": 1950,
    "label": "has",
    "to": 1982
  }, {
    "from": 1950,
    "label": "has",
    "to": 1978
  }, {
    "from": 1950,
    "label": "has",
    "to": 1983
  }, {
    "from": 1950,
    "label": "has",
    "to": 1984
  }, {
    "from": 1950,
    "label": "has",
    "to": 1985
  }, {
    "from": 1950,
    "label": "has",
    "to": 1986
  }, {
    "from": 1950,
    "label": "has",
    "to": 1987
  }, {
    "from": 1950,
    "label": "has",
    "to": 1988
  }, {
    "from": 1950,
    "label": "has",
    "to": 1989
  }, {
    "from": 1950,
    "label": "has",
    "to": 1990
  }, {
    "from": 1950,
    "label": "has",
    "to": 1991
  }, {
    "from": 1950,
    "label": "has",
    "to": 1992
  }, {
    "from": 1950,
    "label": "has",
    "to": 1993
  }, {
    "from": 1950,
    "label": "has",
    "to": 1994
  }, {
    "from": 1950,
    "label": "has",
    "to": 1995
  }, {
    "from": 1950,
    "label": "has",
    "to": 1996
  }, {
    "from": 1950,
    "label": "has",
    "to": 1997
  }, {
    "from": 1950,
    "label": "has",
    "to": 1998
  }, {
    "from": 1950,
    "label": "has",
    "to": 1997
  }, {
    "from": 1950,
    "label": "has",
    "to": 1999
  }, {
    "from": 1950,
    "label": "has",
    "to": 2000
  }, {
    "from": 1950,
    "label": "has",
    "to": 2001
  }, {
    "from": 1950,
    "label": "has",
    "to": 2002
  }, {
    "from": 1950,
    "label": "has",
    "to": 2003
  }, {
    "from": 1950,
    "label": "has",
    "to": 1997
  }, {
    "from": 1950,
    "label": "has",
    "to": 2004
  }, {
    "from": 1950,
    "label": "has",
    "to": 2005
  }, {
    "from": 1950,
    "label": "has",
    "to": 2006
  }, {
    "from": 1950,
    "label": "has",
    "to": 2007
  }, {
    "from": 1950,
    "label": "has",
    "to": 2008
  }, {
    "from": 1950,
    "label": "has",
    "to": 2009
  }, {
    "from": 1950,
    "label": "has",
    "to": 2010
  }, {
    "from": 1950,
    "label": "has",
    "to": 2011
  }, {
    "from": 1950,
    "label": "has",
    "to": 2012
  }, {
    "from": 1950,
    "label": "has",
    "to": 2013
  }, {
    "from": 1950,
    "label": "has",
    "to": 2014
  }, {
    "from": 1950,
    "label": "has",
    "to": 2015
  }, {
    "from": 1950,
    "label": "has",
    "to": 2016
  }, {
    "from": 1950,
    "label": "has",
    "to": 2017
  }, {
    "from": 1950,
    "label": "has",
    "to": 2018
  }, {
    "from": 1950,
    "label": "has",
    "to": 2017
  }, {
    "from": 1950,
    "label": "has",
    "to": 2019
  }, {
    "from": 1950,
    "label": "has",
    "to": 2020
  }, {
    "from": 1950,
    "label": "has",
    "to": 2021
  }, {
    "from": 1950,
    "label": "has",
    "to": 2022
  }, {
    "from": 1950,
    "label": "has",
    "to": 2023
  }, {
    "from": 1950,
    "label": "has",
    "to": 2024
  }, {
    "from": 1950,
    "label": "has",
    "to": 2025
  }, {
    "from": 1950,
    "label": "has",
    "to": 2026
  }, {
    "from": 1950,
    "label": "has",
    "to": 2027
  }, {
    "from": 1950,
    "label": "has",
    "to": 2028
  }, {
    "from": 1950,
    "label": "has",
    "to": 2029
  }, {
    "from": 1950,
    "label": "has",
    "to": 2017
  }, {
    "from": 1950,
    "label": "has",
    "to": 2030
  }, {
    "from": 1950,
    "label": "has",
    "to": 2031
  }, {
    "from": 1950,
    "label": "has",
    "to": 2032
  }, {
    "from": 1950,
    "label": "has",
    "to": 2033
  }, {
    "from": 1950,
    "label": "has",
    "to": 2017
  }, {
    "from": 1950,
    "label": "has",
    "to": 2034
  }, {
    "from": 1950,
    "label": "has",
    "to": 2035
  }, {
    "from": 1950,
    "label": "has",
    "to": 2036
  }, {
    "from": 1950,
    "label": "has",
    "to": 2037
  }, {
    "from": 1950,
    "label": "has",
    "to": 2038
  }, {
    "from": 1950,
    "label": "has",
    "to": 2039
  }, {
    "from": 1950,
    "label": "has",
    "to": 2040
  }, {
    "from": 1950,
    "label": "has",
    "to": 2041
  }, {
    "from": 1950,
    "label": "has",
    "to": 2042
  }, {
    "from": 1950,
    "label": "has",
    "to": 2043
  }, {
    "from": 1950,
    "label": "has",
    "to": 2044
  }, {
    "from": 1950,
    "label": "has",
    "to": 2045
  }, {
    "from": 1950,
    "label": "has",
    "to": 2046
  }, {
    "from": 1950,
    "label": "has",
    "to": 2047
  }, {
    "from": 1950,
    "label": "has",
    "to": 2048
  }, {
    "from": 1950,
    "label": "has",
    "to": 2049
  }, {
    "from": 1950,
    "label": "has",
    "to": 2050
  }, {
    "from": 1950,
    "label": "has",
    "to": 2051
  }, {
    "from": 1950,
    "label": "has",
    "to": 2052
  }, {
    "from": 1950,
    "label": "has",
    "to": 2053
  }, {
    "from": 1950,
    "label": "has",
    "to": 2054
  }, {
    "from": 1950,
    "label": "has",
    "to": 2055
  }, {
    "from": 1950,
    "label": "has",
    "to": 2056
  }, {
    "from": 1950,
    "label": "has",
    "to": 2057
  }, {
    "from": 1950,
    "label": "has",
    "to": 2055
  }, {
    "from": 1950,
    "label": "has",
    "to": 2058
  }, {
    "from": 1950,
    "label": "has",
    "to": 2059
  }, {
    "from": 1950,
    "label": "has",
    "to": 2060
  }, {
    "from": 1950,
    "label": "has",
    "to": 2061
  }, {
    "from": 1950,
    "label": "has",
    "to": 2062
  }, {
    "from": 1950,
    "label": "has",
    "to": 2063
  }, {
    "from": 1950,
    "label": "has",
    "to": 2064
  }, {
    "from": 1950,
    "label": "has",
    "to": 2065
  }, {
    "from": 1950,
    "label": "has",
    "to": 2066
  }, {
    "from": 1950,
    "label": "has",
    "to": 113
  }, {
    "from": 1950,
    "label": "has",
    "to": 115
  }, {
    "from": 1950,
    "label": "has",
    "to": 1119
  }, {
    "from": 1950,
    "label": "has",
    "to": 2067
  }, {
    "from": 1950,
    "label": "has",
    "to": 2068
  }, {
    "from": 1950,
    "label": "has",
    "to": 2069
  }, {
    "from": 1950,
    "label": "has",
    "to": 2070
  }, {
    "from": 1950,
    "label": "has",
    "to": 2071
  }, {
    "from": 1950,
    "label": "has",
    "to": 2072
  }, {
    "from": 2072,
    "label": "has",
    "to": 2073
  }, {
    "from": 2072,
    "label": "has",
    "to": 2074
  }, {
    "from": 2072,
    "label": "has",
    "to": 2075
  }, {
    "from": 1950,
    "label": "has",
    "to": 2076
  }, {
    "from": 1950,
    "label": "has",
    "to": 2077
  }, {
    "from": 1950,
    "label": "has",
    "to": 2078
  }, {
    "from": 1950,
    "label": "has",
    "to": 2079
  }, {
    "from": 2079,
    "label": "has",
    "to": 1508
  }, {
    "from": 2079,
    "label": "has",
    "to": 1509
  }, {
    "from": 2079,
    "label": "has",
    "to": 1370
  }, {
    "from": 2079,
    "label": "has",
    "to": 2080
  }, {
    "from": 1950,
    "label": "has",
    "to": 2081
  }, {
    "from": 2081,
    "label": "has",
    "to": 2080
  }, {
    "from": 2081,
    "label": "has",
    "to": 2082
  }, {
    "from": 1950,
    "label": "has",
    "to": 2083
  }, {
    "from": 1950,
    "label": "has",
    "to": 2084
  }, {
    "from": 1950,
    "label": "has",
    "to": 2085
  }, {
    "from": 1950,
    "label": "has",
    "to": 1368
  }, {
    "from": 1950,
    "label": "has",
    "to": 2086
  }, {
    "from": 1950,
    "label": "has",
    "to": 2087
  }, {
    "from": 1950,
    "label": "has",
    "to": 2088
  }, {
    "from": 1950,
    "label": "has",
    "to": 2089
  }, {
    "from": 2090,
    "label": "has",
    "to": 1962
  }, {
    "from": 2090,
    "label": "has",
    "to": 1963
  }, {
    "from": 2090,
    "label": "has",
    "to": 1964
  }, {
    "from": 2090,
    "label": "has",
    "to": 4
  }, {
    "from": 2090,
    "label": "has",
    "to": 2091
  }, {
    "from": 2092,
    "label": "has",
    "to": 2093
  }, {
    "from": 2092,
    "label": "has",
    "to": 2094
  }, {
    "from": 2092,
    "label": "has",
    "to": 2095
  }, {
    "from": 2095,
    "label": "has",
    "to": 2096
  }, {
    "from": 2095,
    "label": "has",
    "to": 2097
  }, {
    "from": 2097,
    "label": "has",
    "to": 2098
  }, {
    "from": 2097,
    "label": "has",
    "to": 2099
  }, {
    "from": 2097,
    "label": "has",
    "to": 2100
  }, {
    "from": 2092,
    "label": "has",
    "to": 2101
  }, {
    "from": 2092,
    "label": "has",
    "to": 2102
  }, {
    "from": 2103,
    "label": "has",
    "to": 2096
  }, {
    "from": 2103,
    "label": "has",
    "to": 2097
  }, {
    "from": 2097,
    "label": "has",
    "to": 2098
  }, {
    "from": 2097,
    "label": "has",
    "to": 2099
  }, {
    "from": 2097,
    "label": "has",
    "to": 2100
  }, {
    "from": 2103,
    "label": "has",
    "to": 2104
  }, {
    "from": 2105,
    "label": "has",
    "to": 2106
  }, {
    "from": 2105,
    "label": "has",
    "to": 2107
  }, {
    "from": 2107,
    "label": "has",
    "to": 2108
  }, {
    "from": 2107,
    "label": "has",
    "to": 2109
  }, {
    "from": 2107,
    "label": "has",
    "to": 4
  }, {
    "from": 2107,
    "label": "has",
    "to": 2110
  }, {
    "from": 2107,
    "label": "has",
    "to": 2111
  }, {
    "from": 2107,
    "label": "has",
    "to": 4
  }, {
    "from": 2107,
    "label": "has",
    "to": 4
  }, {
    "from": 2105,
    "label": "has",
    "to": 2112
  }, {
    "from": 2112,
    "label": "has",
    "to": 2113
  }, {
    "from": 2105,
    "label": "has",
    "to": 2114
  }, {
    "from": 2115,
    "label": "has",
    "to": 2108
  }, {
    "from": 2115,
    "label": "has",
    "to": 2109
  }, {
    "from": 2115,
    "label": "has",
    "to": 4
  }, {
    "from": 2115,
    "label": "has",
    "to": 2110
  }, {
    "from": 2115,
    "label": "has",
    "to": 2111
  }, {
    "from": 2115,
    "label": "has",
    "to": 4
  }, {
    "from": 2115,
    "label": "has",
    "to": 4
  }, {
    "from": 2115,
    "label": "has",
    "to": 2116
  }, {
    "from": 2118,
    "label": "has",
    "to": 980
  }, {
    "from": 2118,
    "label": "has",
    "to": 981
  }, {
    "from": 2118,
    "label": "has",
    "to": 2119
  }, {
    "from": 2120,
    "label": "has",
    "to": 772
  }, {
    "from": 2120,
    "label": "has",
    "to": 1056
  }, {
    "from": 2120,
    "label": "has",
    "to": 1078
  }, {
    "from": 2120,
    "label": "has",
    "to": 2121
  }, {
    "from": 2122,
    "label": "has",
    "to": 1080
  }, {
    "from": 1080,
    "label": "has",
    "to": 1081
  }, {
    "from": 1080,
    "label": "has",
    "to": 1082
  }, {
    "from": 2122,
    "label": "has",
    "to": 981
  }, {
    "from": 2122,
    "label": "has",
    "to": 2123
  }, {
    "from": 2124,
    "label": "has",
    "to": 772
  }, {
    "from": 2124,
    "label": "has",
    "to": 1415
  }, {
    "from": 2124,
    "label": "has",
    "to": 776
  }, {
    "from": 2124,
    "label": "has",
    "to": 773
  }, {
    "from": 2124,
    "label": "has",
    "to": 1416
  }, {
    "from": 1416,
    "label": "has",
    "to": 1417
  }, {
    "from": 1416,
    "label": "has",
    "to": 1418
  }, {
    "from": 1416,
    "label": "has",
    "to": 1419
  }, {
    "from": 1419,
    "label": "has",
    "to": 1420
  }, {
    "from": 1419,
    "label": "has",
    "to": 1421
  }, {
    "from": 1419,
    "label": "has",
    "to": 1422
  }, {
    "from": 1419,
    "label": "has",
    "to": 1423
  }, {
    "from": 1419,
    "label": "has",
    "to": 1424
  }, {
    "from": 1416,
    "label": "has",
    "to": 1425
  }, {
    "from": 2124,
    "label": "has",
    "to": 1426
  }, {
    "from": 2124,
    "label": "has",
    "to": 1427
  }, {
    "from": 1427,
    "label": "has",
    "to": 1428
  }, {
    "from": 2124,
    "label": "has",
    "to": 1429
  }, {
    "from": 2124,
    "label": "has",
    "to": 788
  }, {
    "from": 2124,
    "label": "has",
    "to": 790
  }, {
    "from": 2124,
    "label": "has",
    "to": 789
  }, {
    "from": 2124,
    "label": "has",
    "to": 1430
  }, {
    "from": 2124,
    "label": "has",
    "to": 1431
  }, {
    "from": 2124,
    "label": "has",
    "to": 1432
  }, {
    "from": 1432,
    "label": "has",
    "to": 1433
  }, {
    "from": 2124,
    "label": "has",
    "to": 1421
  }, {
    "from": 2124,
    "label": "has",
    "to": 1434
  }, {
    "from": 2124,
    "label": "has",
    "to": 1435
  }, {
    "from": 2124,
    "label": "has",
    "to": 821
  }, {
    "from": 2124,
    "label": "has",
    "to": 1436
  }, {
    "from": 1436,
    "label": "has",
    "to": 1437
  }, {
    "from": 1436,
    "label": "has",
    "to": 1438
  }, {
    "from": 1436,
    "label": "has",
    "to": 825
  }, {
    "from": 1436,
    "label": "has",
    "to": 832
  }, {
    "from": 1436,
    "label": "has",
    "to": 1439
  }, {
    "from": 1439,
    "label": "has",
    "to": 1440
  }, {
    "from": 1439,
    "label": "has",
    "to": 1441
  }, {
    "from": 2124,
    "label": "has",
    "to": 1442
  }, {
    "from": 2124,
    "label": "has",
    "to": 1443
  }, {
    "from": 2124,
    "label": "has",
    "to": 1444
  }, {
    "from": 2124,
    "label": "has",
    "to": 1445
  }, {
    "from": 2124,
    "label": "has",
    "to": 1446
  }, {
    "from": 2124,
    "label": "has",
    "to": 1447
  }, {
    "from": 2124,
    "label": "has",
    "to": 1448
  }, {
    "from": 2124,
    "label": "has",
    "to": 825
  }, {
    "from": 2124,
    "label": "has",
    "to": 832
  }, {
    "from": 2124,
    "label": "has",
    "to": 853
  }, {
    "from": 2124,
    "label": "has",
    "to": 1449
  }, {
    "from": 1449,
    "label": "has",
    "to": 1450
  }, {
    "from": 1449,
    "label": "has",
    "to": 1451
  }, {
    "from": 2124,
    "label": "has",
    "to": 1452
  }, {
    "from": 2124,
    "label": "has",
    "to": 1453
  }, {
    "from": 2124,
    "label": "has",
    "to": 1454
  }, {
    "from": 1454,
    "label": "has",
    "to": 1455
  }, {
    "from": 2124,
    "label": "has",
    "to": 1421
  }, {
    "from": 2124,
    "label": "has",
    "to": 1456
  }, {
    "from": 2124,
    "label": "has",
    "to": 1457
  }, {
    "from": 2124,
    "label": "has",
    "to": 1458
  }, {
    "from": 2124,
    "label": "has",
    "to": 723
  }, {
    "from": 2124,
    "label": "has",
    "to": 2125
  }, {
    "from": 2126,
    "label": "has",
    "to": 1460
  }, {
    "from": 2126,
    "label": "has",
    "to": 1461
  }, {
    "from": 2126,
    "label": "has",
    "to": 1462
  }, {
    "from": 2126,
    "label": "has",
    "to": 1463
  }, {
    "from": 2126,
    "label": "has",
    "to": 2127
  }, {
    "from": 2128,
    "label": "has",
    "to": 1415
  }, {
    "from": 2128,
    "label": "has",
    "to": 1465
  }, {
    "from": 2128,
    "label": "has",
    "to": 1466
  }, {
    "from": 2128,
    "label": "has",
    "to": 1467
  }, {
    "from": 1467,
    "label": "has",
    "to": 1468
  }, {
    "from": 1467,
    "label": "has",
    "to": 1469
  }, {
    "from": 1467,
    "label": "has",
    "to": 1470
  }, {
    "from": 1467,
    "label": "has",
    "to": 1471
  }, {
    "from": 2128,
    "label": "has",
    "to": 1463
  }, {
    "from": 2128,
    "label": "has",
    "to": 2129
  }, {
    "from": 2130,
    "label": "has",
    "to": 1415
  }, {
    "from": 2130,
    "label": "has",
    "to": 1473
  }, {
    "from": 2130,
    "label": "has",
    "to": 1474
  }, {
    "from": 2130,
    "label": "has",
    "to": 1475
  }, {
    "from": 1475,
    "label": "has",
    "to": 1476
  }, {
    "from": 1475,
    "label": "has",
    "to": 1477
  }, {
    "from": 1475,
    "label": "has",
    "to": 1478
  }, {
    "from": 1475,
    "label": "has",
    "to": 1479
  }, {
    "from": 2130,
    "label": "has",
    "to": 1463
  }, {
    "from": 2130,
    "label": "has",
    "to": 2131
  }, {
    "from": 2132,
    "label": "has",
    "to": 1415
  }, {
    "from": 2132,
    "label": "has",
    "to": 1481
  }, {
    "from": 2132,
    "label": "has",
    "to": 1482
  }, {
    "from": 1482,
    "label": "has",
    "to": 1483
  }, {
    "from": 1483,
    "label": "has",
    "to": 1484
  }, {
    "from": 1483,
    "label": "has",
    "to": 1485
  }, {
    "from": 1482,
    "label": "has",
    "to": 1486
  }, {
    "from": 1482,
    "label": "has",
    "to": 1487
  }, {
    "from": 1482,
    "label": "has",
    "to": 1488
  }, {
    "from": 1482,
    "label": "has",
    "to": 1489
  }, {
    "from": 1482,
    "label": "has",
    "to": 1476
  }, {
    "from": 1482,
    "label": "has",
    "to": 1490
  }, {
    "from": 1482,
    "label": "has",
    "to": 1491
  }, {
    "from": 1491,
    "label": "has",
    "to": 1468
  }, {
    "from": 1491,
    "label": "has",
    "to": 1492
  }, {
    "from": 1491,
    "label": "has",
    "to": 1468
  }, {
    "from": 1491,
    "label": "has",
    "to": 1493
  }, {
    "from": 2132,
    "label": "has",
    "to": 1462
  }, {
    "from": 2132,
    "label": "has",
    "to": 1470
  }, {
    "from": 2132,
    "label": "has",
    "to": 1463
  }, {
    "from": 2132,
    "label": "has",
    "to": 2133
  }, {
    "from": 2134,
    "label": "has",
    "to": 1540
  }, {
    "from": 2134,
    "label": "has",
    "to": 1541
  }, {
    "from": 2134,
    "label": "has",
    "to": 1542
  }, {
    "from": 2134,
    "label": "has",
    "to": 1543
  }, {
    "from": 1543,
    "label": "has",
    "to": 1544
  }, {
    "from": 1543,
    "label": "has",
    "to": 1545
  }, {
    "from": 1543,
    "label": "has",
    "to": 1546
  }, {
    "from": 1543,
    "label": "has",
    "to": 1547
  }, {
    "from": 2134,
    "label": "has",
    "to": 2135
  }, {
    "from": 2136,
    "label": "has",
    "to": 1540
  }, {
    "from": 2136,
    "label": "has",
    "to": 1541
  }, {
    "from": 2136,
    "label": "has",
    "to": 1542
  }, {
    "from": 2136,
    "label": "has",
    "to": 1560
  }, {
    "from": 1560,
    "label": "has",
    "to": 1544
  }, {
    "from": 1560,
    "label": "has",
    "to": 1545
  }, {
    "from": 1560,
    "label": "has",
    "to": 1546
  }, {
    "from": 1560,
    "label": "has",
    "to": 1547
  }, {
    "from": 2136,
    "label": "has",
    "to": 2137
  }, {
    "from": 2138,
    "label": "has",
    "to": 1593
  }, {
    "from": 1593,
    "label": "has",
    "to": 1594
  }, {
    "from": 2138,
    "label": "has",
    "to": 2139
  }, {
    "from": 2140,
    "label": "has",
    "to": 1596
  }, {
    "from": 1596,
    "label": "has",
    "to": 1594
  }, {
    "from": 1596,
    "label": "has",
    "to": 1597
  }, {
    "from": 2140,
    "label": "has",
    "to": 981
  }, {
    "from": 2140,
    "label": "has",
    "to": 2141
  }, {
    "from": 2142,
    "label": "has",
    "to": 1599
  }, {
    "from": 1599,
    "label": "has",
    "to": 1597
  }, {
    "from": 2142,
    "label": "has",
    "to": 981
  }, {
    "from": 2142,
    "label": "has",
    "to": 2143
  }, {
    "from": 2144,
    "label": "has",
    "to": 1508
  }, {
    "from": 2144,
    "label": "has",
    "to": 1509
  }, {
    "from": 2144,
    "label": "has",
    "to": 1370
  }, {
    "from": 2144,
    "label": "has",
    "to": 2080
  }, {
    "from": 2144,
    "label": "has",
    "to": 2145
  }, {
    "from": 2146,
    "label": "has",
    "to": 2080
  }, {
    "from": 2146,
    "label": "has",
    "to": 2082
  }, {
    "from": 2146,
    "label": "has",
    "to": 2147
  }, {
    "from": 607,
    "label": "calls",
    "to": 2
  }, {
    "from": 607,
    "label": "calls",
    "to": 2
  }, {
    "from": 607,
    "label": "calls",
    "to": 2
  }, {
    "from": 753,
    "label": "calls",
    "to": 2
  }, {
    "from": 753,
    "label": "calls",
    "to": 2
  }, {
    "from": 896,
    "label": "calls",
    "to": 2
  }, {
    "from": 1000,
    "label": "calls",
    "to": 2
  }, {
    "from": 1014,
    "label": "calls",
    "to": 2
  }, {
    "from": 1053,
    "label": "calls",
    "to": 2
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2
  }, {
    "from": 1328,
    "label": "calls",
    "to": 2
  }, {
    "from": 192,
    "label": "calls",
    "to": 230
  }, {
    "from": 238,
    "label": "calls",
    "to": 230
  }, {
    "from": 641,
    "label": "calls",
    "to": 230
  }, {
    "from": 641,
    "label": "calls",
    "to": 230
  }, {
    "from": 779,
    "label": "calls",
    "to": 230
  }, {
    "from": 779,
    "label": "calls",
    "to": 230
  }, {
    "from": 1095,
    "label": "calls",
    "to": 230
  }, {
    "from": 1095,
    "label": "calls",
    "to": 230
  }, {
    "from": 1139,
    "label": "calls",
    "to": 230
  }, {
    "from": 1139,
    "label": "calls",
    "to": 230
  }, {
    "from": 1274,
    "label": "calls",
    "to": 230
  }, {
    "from": 1274,
    "label": "calls",
    "to": 230
  }, {
    "from": 753,
    "label": "calls",
    "to": 755
  }, {
    "from": 753,
    "label": "calls",
    "to": 755
  }, {
    "from": 1531,
    "label": "calls",
    "to": 2168
  }, {
    "from": 1557,
    "label": "calls",
    "to": 2168
  }, {
    "from": 54,
    "label": "calls",
    "to": 2201
  }, {
    "from": 54,
    "label": "calls",
    "to": 2201
  }, {
    "from": 38,
    "label": "calls",
    "to": 2201
  }, {
    "from": 125,
    "label": "calls",
    "to": 2201
  }, {
    "from": 140,
    "label": "calls",
    "to": 2201
  }, {
    "from": 779,
    "label": "calls",
    "to": 2201
  }, {
    "from": 779,
    "label": "calls",
    "to": 2201
  }, {
    "from": 1139,
    "label": "calls",
    "to": 2201
  }, {
    "from": 1139,
    "label": "calls",
    "to": 2201
  }, {
    "from": 1149,
    "label": "calls",
    "to": 1117
  }, {
    "from": 1173,
    "label": "calls",
    "to": 1117
  }, {
    "from": 1173,
    "label": "calls",
    "to": 1117
  }, {
    "from": 1241,
    "label": "calls",
    "to": 1117
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1128
  }, {
    "from": 1319,
    "label": "calls",
    "to": 1128
  }, {
    "from": 1328,
    "label": "calls",
    "to": 1128
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1128
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1128
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1128
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1128
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1128
  }, {
    "from": 88,
    "label": "calls",
    "to": 238
  }, {
    "from": 593,
    "label": "calls",
    "to": 238
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2181
  }, {
    "from": 779,
    "label": "calls",
    "to": 1123
  }, {
    "from": 779,
    "label": "calls",
    "to": 1123
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1123
  }, {
    "from": 1139,
    "label": "calls",
    "to": 1123
  }, {
    "from": 1139,
    "label": "calls",
    "to": 1123
  }, {
    "from": 1259,
    "label": "calls",
    "to": 1123
  }, {
    "from": 1319,
    "label": "calls",
    "to": 1123
  }, {
    "from": 1328,
    "label": "calls",
    "to": 1123
  }, {
    "from": 1349,
    "label": "calls",
    "to": 1123
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1123
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1123
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1123
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1123
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1123
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1123
  }, {
    "from": 2090,
    "label": "calls",
    "to": 2189
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2176
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1758
  }, {
    "from": 285,
    "label": "calls",
    "to": 2202
  }, {
    "from": 473,
    "label": "calls",
    "to": 2202
  }, {
    "from": 1173,
    "label": "calls",
    "to": 679
  }, {
    "from": 38,
    "label": "calls",
    "to": 2203
  }, {
    "from": 38,
    "label": "calls",
    "to": 2203
  }, {
    "from": 125,
    "label": "calls",
    "to": 2203
  }, {
    "from": 150,
    "label": "calls",
    "to": 2203
  }, {
    "from": 2105,
    "label": "calls",
    "to": 2203
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2203
  }, {
    "from": 88,
    "label": "calls",
    "to": 260
  }, {
    "from": 1301,
    "label": "calls",
    "to": 260
  }, {
    "from": 679,
    "label": "calls",
    "to": 1237
  }, {
    "from": 1173,
    "label": "calls",
    "to": 1237
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2153
  }, {
    "from": 896,
    "label": "calls",
    "to": 955
  }, {
    "from": 896,
    "label": "calls",
    "to": 955
  }, {
    "from": 896,
    "label": "calls",
    "to": 955
  }, {
    "from": 896,
    "label": "calls",
    "to": 955
  }, {
    "from": 896,
    "label": "calls",
    "to": 955
  }, {
    "from": 759,
    "label": "calls",
    "to": 2156
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2156
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2204
  }, {
    "from": 125,
    "label": "calls",
    "to": 2204
  }, {
    "from": 125,
    "label": "calls",
    "to": 2204
  }, {
    "from": 140,
    "label": "calls",
    "to": 2204
  }, {
    "from": 140,
    "label": "calls",
    "to": 2204
  }, {
    "from": 150,
    "label": "calls",
    "to": 2204
  }, {
    "from": 150,
    "label": "calls",
    "to": 2204
  }, {
    "from": 757,
    "label": "calls",
    "to": 2204
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1271
  }, {
    "from": 1014,
    "label": "calls",
    "to": 1095
  }, {
    "from": 1089,
    "label": "calls",
    "to": 1095
  }, {
    "from": 2105,
    "label": "calls",
    "to": 2115
  }, {
    "from": 64,
    "label": "calls",
    "to": 64
  }, {
    "from": 591,
    "label": "calls",
    "to": 64
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2188
  }, {
    "from": 645,
    "label": "calls",
    "to": 2228
  }, {
    "from": 679,
    "label": "calls",
    "to": 2228
  }, {
    "from": 679,
    "label": "calls",
    "to": 2228
  }, {
    "from": 150,
    "label": "calls",
    "to": 270
  }, {
    "from": 521,
    "label": "calls",
    "to": 270
  }, {
    "from": 542,
    "label": "calls",
    "to": 270
  }, {
    "from": 564,
    "label": "calls",
    "to": 270
  }, {
    "from": 572,
    "label": "calls",
    "to": 521
  }, {
    "from": 2148,
    "label": "calls",
    "to": 521
  }, {
    "from": 572,
    "label": "calls",
    "to": 539
  }, {
    "from": 2148,
    "label": "calls",
    "to": 539
  }, {
    "from": 30,
    "label": "calls",
    "to": 16
  }, {
    "from": 194,
    "label": "calls",
    "to": 16
  }, {
    "from": 194,
    "label": "calls",
    "to": 16
  }, {
    "from": 194,
    "label": "calls",
    "to": 16
  }, {
    "from": 285,
    "label": "calls",
    "to": 16
  }, {
    "from": 521,
    "label": "calls",
    "to": 16
  }, {
    "from": 542,
    "label": "calls",
    "to": 16
  }, {
    "from": 564,
    "label": "calls",
    "to": 16
  }, {
    "from": 572,
    "label": "calls",
    "to": 16
  }, {
    "from": 1154,
    "label": "calls",
    "to": 16
  }, {
    "from": 1241,
    "label": "calls",
    "to": 16
  }, {
    "from": 1274,
    "label": "calls",
    "to": 16
  }, {
    "from": 1274,
    "label": "calls",
    "to": 16
  }, {
    "from": 1053,
    "label": "calls",
    "to": 1089
  }, {
    "from": 1065,
    "label": "calls",
    "to": 1089
  }, {
    "from": 1065,
    "label": "calls",
    "to": 1089
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2206
  }, {
    "from": 2148,
    "label": "calls",
    "to": 993
  }, {
    "from": 779,
    "label": "calls",
    "to": 2163
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2163
  }, {
    "from": 64,
    "label": "calls",
    "to": 2208
  }, {
    "from": 64,
    "label": "calls",
    "to": 2208
  }, {
    "from": 96,
    "label": "calls",
    "to": 2208
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2208
  }, {
    "from": 473,
    "label": "calls",
    "to": 2208
  }, {
    "from": 473,
    "label": "calls",
    "to": 2208
  }, {
    "from": 542,
    "label": "calls",
    "to": 2208
  }, {
    "from": 564,
    "label": "calls",
    "to": 2208
  }, {
    "from": 1117,
    "label": "calls",
    "to": 2208
  }, {
    "from": 1128,
    "label": "calls",
    "to": 2208
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2208
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2208
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2208
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2208
  }, {
    "from": 679,
    "label": "calls",
    "to": 2209
  }, {
    "from": 679,
    "label": "calls",
    "to": 2209
  }, {
    "from": 679,
    "label": "calls",
    "to": 2209
  }, {
    "from": 679,
    "label": "calls",
    "to": 2209
  }, {
    "from": 1128,
    "label": "calls",
    "to": 2209
  }, {
    "from": 1341,
    "label": "calls",
    "to": 2209
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2183
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2183
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2151
  }, {
    "from": 634,
    "label": "calls",
    "to": 641
  }, {
    "from": 679,
    "label": "calls",
    "to": 641
  }, {
    "from": 679,
    "label": "calls",
    "to": 641
  }, {
    "from": 1241,
    "label": "calls",
    "to": 1154
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1154
  }, {
    "from": 18,
    "label": "calls",
    "to": 2226
  }, {
    "from": 30,
    "label": "calls",
    "to": 2226
  }, {
    "from": 30,
    "label": "calls",
    "to": 2226
  }, {
    "from": 54,
    "label": "calls",
    "to": 2226
  }, {
    "from": 38,
    "label": "calls",
    "to": 2226
  }, {
    "from": 56,
    "label": "calls",
    "to": 2226
  }, {
    "from": 64,
    "label": "calls",
    "to": 2226
  }, {
    "from": 64,
    "label": "calls",
    "to": 2226
  }, {
    "from": 64,
    "label": "calls",
    "to": 2226
  }, {
    "from": 1095,
    "label": "calls",
    "to": 2226
  }, {
    "from": 519,
    "label": "calls",
    "to": 2210
  }, {
    "from": 260,
    "label": "calls",
    "to": 11
  }, {
    "from": 260,
    "label": "calls",
    "to": 11
  }, {
    "from": 260,
    "label": "calls",
    "to": 11
  }, {
    "from": 403,
    "label": "calls",
    "to": 11
  }, {
    "from": 542,
    "label": "calls",
    "to": 11
  }, {
    "from": 564,
    "label": "calls",
    "to": 11
  }, {
    "from": 1095,
    "label": "calls",
    "to": 11
  }, {
    "from": 1128,
    "label": "calls",
    "to": 11
  }, {
    "from": 1271,
    "label": "calls",
    "to": 11
  }, {
    "from": 1301,
    "label": "calls",
    "to": 11
  }, {
    "from": 1319,
    "label": "calls",
    "to": 11
  }, {
    "from": 1341,
    "label": "calls",
    "to": 11
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2211
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2211
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2211
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2211
  }, {
    "from": 645,
    "label": "calls",
    "to": 2211
  }, {
    "from": 867,
    "label": "calls",
    "to": 2211
  }, {
    "from": 867,
    "label": "calls",
    "to": 2211
  }, {
    "from": 1065,
    "label": "calls",
    "to": 2186
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2186
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2186
  }, {
    "from": 1349,
    "label": "calls",
    "to": 1144
  }, {
    "from": 1381,
    "label": "calls",
    "to": 1144
  }, {
    "from": 1619,
    "label": "calls",
    "to": 1144
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1144
  }, {
    "from": 1950,
    "label": "calls",
    "to": 1144
  }, {
    "from": 725,
    "label": "calls",
    "to": 753
  }, {
    "from": 725,
    "label": "calls",
    "to": 753
  }, {
    "from": 725,
    "label": "calls",
    "to": 753
  }, {
    "from": 720,
    "label": "calls",
    "to": 725
  }, {
    "from": 896,
    "label": "calls",
    "to": 725
  }, {
    "from": 125,
    "label": "calls",
    "to": 192
  }, {
    "from": 140,
    "label": "calls",
    "to": 192
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1814
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1814
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1814
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2196
  }, {
    "from": 1381,
    "label": "calls",
    "to": 1517
  }, {
    "from": 1381,
    "label": "calls",
    "to": 1517
  }, {
    "from": 1381,
    "label": "calls",
    "to": 1517
  }, {
    "from": 1381,
    "label": "calls",
    "to": 1517
  }, {
    "from": 1381,
    "label": "calls",
    "to": 1517
  }, {
    "from": 1381,
    "label": "calls",
    "to": 1517
  }, {
    "from": 2148,
    "label": "calls",
    "to": 969
  }, {
    "from": 1154,
    "label": "calls",
    "to": 1941
  }, {
    "from": 1154,
    "label": "calls",
    "to": 1941
  }, {
    "from": 1154,
    "label": "calls",
    "to": 1941
  }, {
    "from": 1154,
    "label": "calls",
    "to": 1941
  }, {
    "from": 1301,
    "label": "calls",
    "to": 1941
  }, {
    "from": 1301,
    "label": "calls",
    "to": 1941
  }, {
    "from": 1531,
    "label": "calls",
    "to": 1941
  }, {
    "from": 1557,
    "label": "calls",
    "to": 1941
  }, {
    "from": 1762,
    "label": "calls",
    "to": 1941
  }, {
    "from": 1814,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1941
  }, {
    "from": 341,
    "label": "calls",
    "to": 2231
  }, {
    "from": 403,
    "label": "calls",
    "to": 2231
  }, {
    "from": 473,
    "label": "calls",
    "to": 2231
  }, {
    "from": 477,
    "label": "calls",
    "to": 2231
  }, {
    "from": 519,
    "label": "calls",
    "to": 2231
  }, {
    "from": 779,
    "label": "calls",
    "to": 2231
  }, {
    "from": 865,
    "label": "calls",
    "to": 2231
  }, {
    "from": 1014,
    "label": "calls",
    "to": 2231
  }, {
    "from": 1014,
    "label": "calls",
    "to": 2231
  }, {
    "from": 1014,
    "label": "calls",
    "to": 2231
  }, {
    "from": 645,
    "label": "calls",
    "to": 1235
  }, {
    "from": 96,
    "label": "calls",
    "to": 2213
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2185
  }, {
    "from": 1259,
    "label": "calls",
    "to": 117
  }, {
    "from": 403,
    "label": "calls",
    "to": 306
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2158
  }, {
    "from": 1619,
    "label": "calls",
    "to": 5
  }, {
    "from": 1760,
    "label": "calls",
    "to": 5
  }, {
    "from": 1762,
    "label": "calls",
    "to": 5
  }, {
    "from": 634,
    "label": "calls",
    "to": 593
  }, {
    "from": 634,
    "label": "calls",
    "to": 593
  }, {
    "from": 679,
    "label": "calls",
    "to": 593
  }, {
    "from": 679,
    "label": "calls",
    "to": 593
  }, {
    "from": 1328,
    "label": "calls",
    "to": 593
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1241
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2200
  }, {
    "from": 1241,
    "label": "calls",
    "to": 2165
  }, {
    "from": 1259,
    "label": "calls",
    "to": 2165
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2193
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2193
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2193
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2193
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2193
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2193
  }, {
    "from": 969,
    "label": "calls",
    "to": 2173
  }, {
    "from": 896,
    "label": "calls",
    "to": 956
  }, {
    "from": 896,
    "label": "calls",
    "to": 956
  }, {
    "from": 896,
    "label": "calls",
    "to": 956
  }, {
    "from": 896,
    "label": "calls",
    "to": 956
  }, {
    "from": 896,
    "label": "calls",
    "to": 956
  }, {
    "from": 645,
    "label": "calls",
    "to": 2214
  }, {
    "from": 679,
    "label": "calls",
    "to": 2214
  }, {
    "from": 125,
    "label": "calls",
    "to": 228
  }, {
    "from": 140,
    "label": "calls",
    "to": 228
  }, {
    "from": 150,
    "label": "calls",
    "to": 228
  }, {
    "from": 521,
    "label": "calls",
    "to": 228
  }, {
    "from": 542,
    "label": "calls",
    "to": 228
  }, {
    "from": 564,
    "label": "calls",
    "to": 228
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2215
  }, {
    "from": 969,
    "label": "calls",
    "to": 2199
  }, {
    "from": 189,
    "label": "calls",
    "to": 177
  }, {
    "from": 257,
    "label": "calls",
    "to": 177
  }, {
    "from": 323,
    "label": "calls",
    "to": 177
  }, {
    "from": 959,
    "label": "calls",
    "to": 2169
  }, {
    "from": 1381,
    "label": "calls",
    "to": 1515
  }, {
    "from": 1381,
    "label": "calls",
    "to": 1515
  }, {
    "from": 986,
    "label": "calls",
    "to": 2174
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2154
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2175
  }, {
    "from": 779,
    "label": "calls",
    "to": 2216
  }, {
    "from": 1095,
    "label": "calls",
    "to": 2216
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2216
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2172
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2172
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2172
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2172
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2172
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2172
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2172
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2172
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2172
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1319
  }, {
    "from": 306,
    "label": "calls",
    "to": 272
  }, {
    "from": 341,
    "label": "calls",
    "to": 272
  }, {
    "from": 403,
    "label": "calls",
    "to": 272
  }, {
    "from": 607,
    "label": "calls",
    "to": 272
  }, {
    "from": 779,
    "label": "calls",
    "to": 272
  }, {
    "from": 1531,
    "label": "calls",
    "to": 1523
  }, {
    "from": 1531,
    "label": "calls",
    "to": 1523
  }, {
    "from": 1557,
    "label": "calls",
    "to": 1523
  }, {
    "from": 1557,
    "label": "calls",
    "to": 1523
  }, {
    "from": 1274,
    "label": "calls",
    "to": 1328
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1328
  }, {
    "from": 993,
    "label": "calls",
    "to": 2191
  }, {
    "from": 88,
    "label": "calls",
    "to": 332
  }, {
    "from": 521,
    "label": "calls",
    "to": 332
  }, {
    "from": 542,
    "label": "calls",
    "to": 332
  }, {
    "from": 564,
    "label": "calls",
    "to": 332
  }, {
    "from": 593,
    "label": "calls",
    "to": 332
  }, {
    "from": 117,
    "label": "calls",
    "to": 2217
  }, {
    "from": 1602,
    "label": "calls",
    "to": 1659
  }, {
    "from": 1619,
    "label": "calls",
    "to": 1659
  }, {
    "from": 1154,
    "label": "calls",
    "to": 1301
  }, {
    "from": 1173,
    "label": "calls",
    "to": 1301
  }, {
    "from": 1241,
    "label": "calls",
    "to": 1301
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1301
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1301
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1301
  }, {
    "from": 959,
    "label": "calls",
    "to": 2178
  }, {
    "from": 969,
    "label": "calls",
    "to": 2178
  }, {
    "from": 969,
    "label": "calls",
    "to": 2178
  }, {
    "from": 96,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1095,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1758,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1758,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1758,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2218
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2218
  }, {
    "from": 896,
    "label": "calls",
    "to": 2182
  }, {
    "from": 896,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2182
  }, {
    "from": 1602,
    "label": "calls",
    "to": 2198
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2198
  }, {
    "from": 865,
    "label": "calls",
    "to": 2164
  }, {
    "from": 779,
    "label": "calls",
    "to": 2164
  }, {
    "from": 779,
    "label": "calls",
    "to": 2164
  }, {
    "from": 896,
    "label": "calls",
    "to": 2164
  }, {
    "from": 1517,
    "label": "calls",
    "to": 2164
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2164
  }, {
    "from": 96,
    "label": "calls",
    "to": 77
  }, {
    "from": 593,
    "label": "calls",
    "to": 77
  }, {
    "from": 645,
    "label": "calls",
    "to": 77
  }, {
    "from": 679,
    "label": "calls",
    "to": 77
  }, {
    "from": 1149,
    "label": "calls",
    "to": 77
  }, {
    "from": 1950,
    "label": "calls",
    "to": 77
  }, {
    "from": 1950,
    "label": "calls",
    "to": 77
  }, {
    "from": 2148,
    "label": "calls",
    "to": 77
  }, {
    "from": 779,
    "label": "calls",
    "to": 1139
  }, {
    "from": 1065,
    "label": "calls",
    "to": 1139
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2150
  }, {
    "from": 477,
    "label": "calls",
    "to": 403
  }, {
    "from": 1349,
    "label": "calls",
    "to": 403
  }, {
    "from": 1349,
    "label": "calls",
    "to": 403
  }, {
    "from": 2148,
    "label": "calls",
    "to": 403
  }, {
    "from": 1301,
    "label": "calls",
    "to": 634
  }, {
    "from": 1095,
    "label": "calls",
    "to": 2227
  }, {
    "from": 645,
    "label": "calls",
    "to": 2225
  }, {
    "from": 679,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1328,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1328,
    "label": "calls",
    "to": 2225
  }, {
    "from": 1328,
    "label": "calls",
    "to": 2225
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2225
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2225
  }, {
    "from": 96,
    "label": "calls",
    "to": 93
  }, {
    "from": 607,
    "label": "calls",
    "to": 93
  }, {
    "from": 607,
    "label": "calls",
    "to": 93
  }, {
    "from": 1950,
    "label": "calls",
    "to": 93
  }, {
    "from": 1950,
    "label": "calls",
    "to": 93
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2187
  }, {
    "from": 1531,
    "label": "calls",
    "to": 2187
  }, {
    "from": 1557,
    "label": "calls",
    "to": 2187
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2187
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2187
  }, {
    "from": 572,
    "label": "calls",
    "to": 564
  }, {
    "from": 2148,
    "label": "calls",
    "to": 564
  }, {
    "from": 2148,
    "label": "calls",
    "to": 179
  }, {
    "from": 194,
    "label": "calls",
    "to": 179
  }, {
    "from": 238,
    "label": "calls",
    "to": 179
  }, {
    "from": 306,
    "label": "calls",
    "to": 179
  }, {
    "from": 332,
    "label": "calls",
    "to": 179
  }, {
    "from": 341,
    "label": "calls",
    "to": 179
  }, {
    "from": 757,
    "label": "calls",
    "to": 179
  }, {
    "from": 341,
    "label": "calls",
    "to": 8
  }, {
    "from": 341,
    "label": "calls",
    "to": 8
  }, {
    "from": 341,
    "label": "calls",
    "to": 8
  }, {
    "from": 1602,
    "label": "calls",
    "to": 8
  }, {
    "from": 1619,
    "label": "calls",
    "to": 8
  }, {
    "from": 1619,
    "label": "calls",
    "to": 8
  }, {
    "from": 1619,
    "label": "calls",
    "to": 8
  }, {
    "from": 1760,
    "label": "calls",
    "to": 8
  }, {
    "from": 1762,
    "label": "calls",
    "to": 8
  }, {
    "from": 572,
    "label": "calls",
    "to": 536
  }, {
    "from": 2148,
    "label": "calls",
    "to": 536
  }, {
    "from": 2148,
    "label": "calls",
    "to": 169
  }, {
    "from": 232,
    "label": "calls",
    "to": 169
  }, {
    "from": 238,
    "label": "calls",
    "to": 169
  }, {
    "from": 306,
    "label": "calls",
    "to": 169
  }, {
    "from": 332,
    "label": "calls",
    "to": 169
  }, {
    "from": 341,
    "label": "calls",
    "to": 169
  }, {
    "from": 645,
    "label": "calls",
    "to": 169
  }, {
    "from": 1095,
    "label": "calls",
    "to": 169
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1341
  }, {
    "from": 1053,
    "label": "calls",
    "to": 1084
  }, {
    "from": 1065,
    "label": "calls",
    "to": 1084
  }, {
    "from": 1042,
    "label": "calls",
    "to": 2157
  }, {
    "from": 959,
    "label": "calls",
    "to": 2155
  }, {
    "from": 969,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1149,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1154,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1154,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1241,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1241,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1259,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1274,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1274,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1319,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1328,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1341,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2155
  }, {
    "from": 1602,
    "label": "calls",
    "to": 2155
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2155
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2155
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2155
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2155
  }, {
    "from": 280,
    "label": "calls",
    "to": 282
  }, {
    "from": 607,
    "label": "calls",
    "to": 282
  }, {
    "from": 341,
    "label": "calls",
    "to": 401
  }, {
    "from": 341,
    "label": "calls",
    "to": 401
  }, {
    "from": 341,
    "label": "calls",
    "to": 401
  }, {
    "from": 341,
    "label": "calls",
    "to": 401
  }, {
    "from": 341,
    "label": "calls",
    "to": 401
  }, {
    "from": 341,
    "label": "calls",
    "to": 401
  }, {
    "from": 341,
    "label": "calls",
    "to": 401
  }, {
    "from": 341,
    "label": "calls",
    "to": 401
  }, {
    "from": 341,
    "label": "calls",
    "to": 401
  }, {
    "from": 2148,
    "label": "calls",
    "to": 959
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 93,
    "label": "calls",
    "to": 88
  }, {
    "from": 1095,
    "label": "calls",
    "to": 88
  }, {
    "from": 1274,
    "label": "calls",
    "to": 88
  }, {
    "from": 1274,
    "label": "calls",
    "to": 88
  }, {
    "from": 1349,
    "label": "calls",
    "to": 88
  }, {
    "from": 593,
    "label": "calls",
    "to": 572
  }, {
    "from": 1319,
    "label": "calls",
    "to": 572
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2179
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2179
  }, {
    "from": 1531,
    "label": "calls",
    "to": 2179
  }, {
    "from": 1557,
    "label": "calls",
    "to": 2179
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2179
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2179
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2179
  }, {
    "from": 564,
    "label": "calls",
    "to": 183
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1950
  }, {
    "from": 38,
    "label": "calls",
    "to": 38
  }, {
    "from": 2103,
    "label": "calls",
    "to": 2205
  }, {
    "from": 2103,
    "label": "calls",
    "to": 2205
  }, {
    "from": 759,
    "label": "calls",
    "to": 757
  }, {
    "from": 779,
    "label": "calls",
    "to": 757
  }, {
    "from": 1381,
    "label": "calls",
    "to": 757
  }, {
    "from": 1619,
    "label": "calls",
    "to": 757
  }, {
    "from": 572,
    "label": "calls",
    "to": 591
  }, {
    "from": 572,
    "label": "calls",
    "to": 591
  }, {
    "from": 572,
    "label": "calls",
    "to": 591
  }, {
    "from": 572,
    "label": "calls",
    "to": 591
  }, {
    "from": 1065,
    "label": "calls",
    "to": 2177
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1762
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1760
  }, {
    "from": 1659,
    "label": "calls",
    "to": 1760
  }, {
    "from": 521,
    "label": "calls",
    "to": 285
  }, {
    "from": 542,
    "label": "calls",
    "to": 285
  }, {
    "from": 564,
    "label": "calls",
    "to": 285
  }, {
    "from": 607,
    "label": "calls",
    "to": 285
  }, {
    "from": 645,
    "label": "calls",
    "to": 285
  }, {
    "from": 645,
    "label": "calls",
    "to": 285
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1149
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2160
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2160
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2160
  }, {
    "from": 959,
    "label": "calls",
    "to": 2162
  }, {
    "from": 969,
    "label": "calls",
    "to": 2162
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1259
  }, {
    "from": 725,
    "label": "calls",
    "to": 2159
  }, {
    "from": 969,
    "label": "calls",
    "to": 2159
  }, {
    "from": 1065,
    "label": "calls",
    "to": 2159
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2159
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2159
  }, {
    "from": 1531,
    "label": "calls",
    "to": 2159
  }, {
    "from": 1557,
    "label": "calls",
    "to": 2159
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2159
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2159
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2159
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2159
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2159
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2159
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2159
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2159
  }, {
    "from": 332,
    "label": "calls",
    "to": 477
  }, {
    "from": 56,
    "label": "calls",
    "to": 56
  }, {
    "from": 64,
    "label": "calls",
    "to": 56
  }, {
    "from": 64,
    "label": "calls",
    "to": 56
  }, {
    "from": 64,
    "label": "calls",
    "to": 56
  }, {
    "from": 403,
    "label": "calls",
    "to": 56
  }, {
    "from": 593,
    "label": "calls",
    "to": 56
  }, {
    "from": 607,
    "label": "calls",
    "to": 56
  }, {
    "from": 607,
    "label": "calls",
    "to": 56
  }, {
    "from": 607,
    "label": "calls",
    "to": 56
  }, {
    "from": 679,
    "label": "calls",
    "to": 56
  }, {
    "from": 679,
    "label": "calls",
    "to": 56
  }, {
    "from": 1095,
    "label": "calls",
    "to": 56
  }, {
    "from": 1173,
    "label": "calls",
    "to": 56
  }, {
    "from": 1173,
    "label": "calls",
    "to": 56
  }, {
    "from": 1274,
    "label": "calls",
    "to": 56
  }, {
    "from": 1319,
    "label": "calls",
    "to": 56
  }, {
    "from": 1328,
    "label": "calls",
    "to": 56
  }, {
    "from": 1328,
    "label": "calls",
    "to": 56
  }, {
    "from": 2148,
    "label": "calls",
    "to": 56
  }, {
    "from": 2148,
    "label": "calls",
    "to": 56
  }, {
    "from": 2148,
    "label": "calls",
    "to": 56
  }, {
    "from": 2148,
    "label": "calls",
    "to": 56
  }, {
    "from": 16,
    "label": "calls",
    "to": 2220
  }, {
    "from": 475,
    "label": "calls",
    "to": 473
  }, {
    "from": 475,
    "label": "calls",
    "to": 473
  }, {
    "from": 475,
    "label": "calls",
    "to": 473
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2219
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2219
  }, {
    "from": 341,
    "label": "calls",
    "to": 2232
  }, {
    "from": 341,
    "label": "calls",
    "to": 2232
  }, {
    "from": 341,
    "label": "calls",
    "to": 2232
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2221
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2221
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2190
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2222
  }, {
    "from": 1758,
    "label": "calls",
    "to": 2222
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2222
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 2148,
    "label": "calls",
    "to": 715
  }, {
    "from": 536,
    "label": "calls",
    "to": 542
  }, {
    "from": 539,
    "label": "calls",
    "to": 542
  }, {
    "from": 959,
    "label": "calls",
    "to": 896
  }, {
    "from": 969,
    "label": "calls",
    "to": 896
  }, {
    "from": 969,
    "label": "calls",
    "to": 896
  }, {
    "from": 403,
    "label": "calls",
    "to": 341
  }, {
    "from": 1241,
    "label": "calls",
    "to": 96
  }, {
    "from": 38,
    "label": "calls",
    "to": 2224
  }, {
    "from": 96,
    "label": "calls",
    "to": 2224
  }, {
    "from": 96,
    "label": "calls",
    "to": 2224
  }, {
    "from": 96,
    "label": "calls",
    "to": 2224
  }, {
    "from": 96,
    "label": "calls",
    "to": 2224
  }, {
    "from": 96,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1319,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1328,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1328,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1372,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1602,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1758,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1760,
    "label": "calls",
    "to": 2224
  }, {
    "from": 2105,
    "label": "calls",
    "to": 2224
  }, {
    "from": 2105,
    "label": "calls",
    "to": 2224
  }, {
    "from": 2105,
    "label": "calls",
    "to": 2224
  }, {
    "from": 1950,
    "label": "calls",
    "to": 1764
  }, {
    "from": 1568,
    "label": "calls",
    "to": 2152
  }, {
    "from": 1381,
    "label": "calls",
    "to": 720
  }, {
    "from": 1619,
    "label": "calls",
    "to": 720
  }, {
    "from": 2148,
    "label": "calls",
    "to": 720
  }, {
    "from": 1950,
    "label": "calls",
    "to": 720
  }, {
    "from": 1950,
    "label": "calls",
    "to": 720
  }, {
    "from": 1053,
    "label": "calls",
    "to": 1042
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2090
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2090
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2090
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2090
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2090
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2090
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2090
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2090
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1764,
    "label": "calls",
    "to": 2171
  }, {
    "from": 1950,
    "label": "calls",
    "to": 1619
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1602
  }, {
    "from": 1950,
    "label": "calls",
    "to": 1602
  }, {
    "from": 403,
    "label": "calls",
    "to": 475
  }, {
    "from": 403,
    "label": "calls",
    "to": 475
  }, {
    "from": 403,
    "label": "calls",
    "to": 475
  }, {
    "from": 332,
    "label": "calls",
    "to": 277
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 1950,
    "label": "calls",
    "to": 2194
  }, {
    "from": 607,
    "label": "calls",
    "to": 1239
  }, {
    "from": 1936,
    "label": "calls",
    "to": 2223
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 477,
    "label": "calls",
    "to": 519
  }, {
    "from": 779,
    "label": "calls",
    "to": 867
  }, {
    "from": 232,
    "label": "calls",
    "to": 194
  }, {
    "from": 521,
    "label": "calls",
    "to": 194
  }, {
    "from": 1095,
    "label": "calls",
    "to": 194
  }, {
    "from": 1095,
    "label": "calls",
    "to": 194
  }, {
    "from": 38,
    "label": "calls",
    "to": 54
  }, {
    "from": 38,
    "label": "calls",
    "to": 54
  }, {
    "from": 38,
    "label": "calls",
    "to": 54
  }, {
    "from": 645,
    "label": "calls",
    "to": 257
  }, {
    "from": 645,
    "label": "calls",
    "to": 257
  }, {
    "from": 1014,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1117,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1128,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1154,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1267,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1271,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1341,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1531,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1557,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1619,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1814,
    "label": "calls",
    "to": 1349
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1349
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1349
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1349
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1349
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1349
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1349
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1349
  }, {
    "from": 1619,
    "label": "calls",
    "to": 2234
  }, {
    "from": 542,
    "label": "calls",
    "to": 232
  }, {
    "from": 564,
    "label": "calls",
    "to": 232
  }, {
    "from": 645,
    "label": "calls",
    "to": 232
  }, {
    "from": 645,
    "label": "calls",
    "to": 232
  }, {
    "from": 645,
    "label": "calls",
    "to": 232
  }, {
    "from": 679,
    "label": "calls",
    "to": 232
  }, {
    "from": 679,
    "label": "calls",
    "to": 232
  }, {
    "from": 679,
    "label": "calls",
    "to": 232
  }, {
    "from": 1274,
    "label": "calls",
    "to": 232
  }, {
    "from": 2148,
    "label": "calls",
    "to": 986
  }, {
    "from": 725,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 779,
    "label": "calls",
    "to": 1946
  }, {
    "from": 867,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1008,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1014,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1014,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1053,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1065,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1154,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1349,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1349,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1349,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1531,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1557,
    "label": "calls",
    "to": 1946
  }, {
    "from": 1762,
    "label": "calls",
    "to": 1946
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1946
  }, {
    "from": 593,
    "label": "calls",
    "to": 607
  }, {
    "from": 607,
    "label": "calls",
    "to": 607
  }, {
    "from": 1274,
    "label": "calls",
    "to": 1274
  }, {
    "from": 1349,
    "label": "calls",
    "to": 1125
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2184
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2197
  }, {
    "from": 1531,
    "label": "calls",
    "to": 1527
  }, {
    "from": 1531,
    "label": "calls",
    "to": 1527
  }, {
    "from": 1557,
    "label": "calls",
    "to": 1527
  }, {
    "from": 1557,
    "label": "calls",
    "to": 1527
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2167
  }, {
    "from": 1173,
    "label": "calls",
    "to": 2167
  }, {
    "from": 1301,
    "label": "calls",
    "to": 2167
  }, {
    "from": 1328,
    "label": "calls",
    "to": 2167
  }, {
    "from": 1154,
    "label": "calls",
    "to": 1115
  }, {
    "from": 1241,
    "label": "calls",
    "to": 1115
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1115
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1115
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1115
  }, {
    "from": 1568,
    "label": "calls",
    "to": 1557
  }, {
    "from": 1568,
    "label": "calls",
    "to": 1531
  }, {
    "from": 986,
    "label": "calls",
    "to": 2166
  }, {
    "from": 11,
    "label": "calls",
    "to": 2229
  }, {
    "from": 38,
    "label": "calls",
    "to": 2229
  }, {
    "from": 56,
    "label": "calls",
    "to": 2229
  }, {
    "from": 64,
    "label": "calls",
    "to": 2229
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2229
  }, {
    "from": 260,
    "label": "calls",
    "to": 2229
  }, {
    "from": 260,
    "label": "calls",
    "to": 2229
  }, {
    "from": 260,
    "label": "calls",
    "to": 2229
  }, {
    "from": 260,
    "label": "calls",
    "to": 2229
  }, {
    "from": 260,
    "label": "calls",
    "to": 2229
  }, {
    "from": 260,
    "label": "calls",
    "to": 2229
  }, {
    "from": 306,
    "label": "calls",
    "to": 2229
  }, {
    "from": 341,
    "label": "calls",
    "to": 2229
  }, {
    "from": 341,
    "label": "calls",
    "to": 2229
  }, {
    "from": 341,
    "label": "calls",
    "to": 2229
  }, {
    "from": 473,
    "label": "calls",
    "to": 2229
  }, {
    "from": 473,
    "label": "calls",
    "to": 2229
  }, {
    "from": 475,
    "label": "calls",
    "to": 2229
  }, {
    "from": 475,
    "label": "calls",
    "to": 2229
  }, {
    "from": 475,
    "label": "calls",
    "to": 2229
  }, {
    "from": 475,
    "label": "calls",
    "to": 2229
  }, {
    "from": 475,
    "label": "calls",
    "to": 2229
  }, {
    "from": 475,
    "label": "calls",
    "to": 2229
  }, {
    "from": 519,
    "label": "calls",
    "to": 2229
  }, {
    "from": 519,
    "label": "calls",
    "to": 2229
  }, {
    "from": 521,
    "label": "calls",
    "to": 2229
  }, {
    "from": 542,
    "label": "calls",
    "to": 2229
  }, {
    "from": 564,
    "label": "calls",
    "to": 2229
  }, {
    "from": 1154,
    "label": "calls",
    "to": 2229
  }, {
    "from": 2105,
    "label": "calls",
    "to": 2229
  }, {
    "from": 720,
    "label": "calls",
    "to": 2180
  }, {
    "from": 117,
    "label": "calls",
    "to": 2230
  }, {
    "from": 1173,
    "label": "calls",
    "to": 645
  }, {
    "from": 1014,
    "label": "calls",
    "to": 1000
  }, {
    "from": 1014,
    "label": "calls",
    "to": 1000
  }, {
    "from": 1014,
    "label": "calls",
    "to": 1000
  }, {
    "from": 1014,
    "label": "calls",
    "to": 1000
  }, {
    "from": 1053,
    "label": "calls",
    "to": 1000
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1173
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2161
  }, {
    "from": 1095,
    "label": "calls",
    "to": 1372
  }, {
    "from": 1144,
    "label": "calls",
    "to": 1372
  }, {
    "from": 1349,
    "label": "calls",
    "to": 1372
  }, {
    "from": 2092,
    "label": "calls",
    "to": 2207
  }, {
    "from": 2105,
    "label": "calls",
    "to": 2207
  }, {
    "from": 1619,
    "label": "calls",
    "to": 1936
  }, {
    "from": 1619,
    "label": "calls",
    "to": 1936
  }, {
    "from": 1619,
    "label": "calls",
    "to": 1936
  }, {
    "from": 194,
    "label": "calls",
    "to": 175
  }, {
    "from": 194,
    "label": "calls",
    "to": 175
  }, {
    "from": 236,
    "label": "calls",
    "to": 175
  }, {
    "from": 238,
    "label": "calls",
    "to": 175
  }, {
    "from": 1095,
    "label": "calls",
    "to": 175
  }, {
    "from": 1241,
    "label": "calls",
    "to": 2170
  }, {
    "from": 1259,
    "label": "calls",
    "to": 2170
  }, {
    "from": 779,
    "label": "calls",
    "to": 865
  }, {
    "from": 779,
    "label": "calls",
    "to": 865
  }, {
    "from": 779,
    "label": "calls",
    "to": 865
  }, {
    "from": 779,
    "label": "calls",
    "to": 865
  }, {
    "from": 779,
    "label": "calls",
    "to": 865
  }, {
    "from": 779,
    "label": "calls",
    "to": 865
  }, {
    "from": 779,
    "label": "calls",
    "to": 2192
  }, {
    "from": 117,
    "label": "calls",
    "to": 140
  }, {
    "from": 2148,
    "label": "calls",
    "to": 140
  }, {
    "from": 771,
    "label": "calls",
    "to": 779
  }, {
    "from": 896,
    "label": "calls",
    "to": 779
  }, {
    "from": 96,
    "label": "calls",
    "to": 2212
  }, {
    "from": 125,
    "label": "calls",
    "to": 2233
  }, {
    "from": 125,
    "label": "calls",
    "to": 2233
  }, {
    "from": 150,
    "label": "calls",
    "to": 2233
  }, {
    "from": 150,
    "label": "calls",
    "to": 2233
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1568
  }, {
    "from": 2148,
    "label": "calls",
    "to": 1267
  }, {
    "from": 2148,
    "label": "calls",
    "to": 181
  }, {
    "from": 301,
    "label": "calls",
    "to": 181
  }, {
    "from": 1950,
    "label": "calls",
    "to": 759
  }, {
    "from": 1568,
    "label": "calls",
    "to": 1381
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2149
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2149
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2149
  }, {
    "from": 177,
    "label": "calls",
    "to": 167
  }, {
    "from": 2148,
    "label": "calls",
    "to": 167
  }, {
    "from": 2148,
    "label": "calls",
    "to": 167
  }, {
    "from": 192,
    "label": "calls",
    "to": 167
  }, {
    "from": 194,
    "label": "calls",
    "to": 167
  }, {
    "from": 228,
    "label": "calls",
    "to": 167
  }, {
    "from": 270,
    "label": "calls",
    "to": 167
  }, {
    "from": 274,
    "label": "calls",
    "to": 167
  }, {
    "from": 280,
    "label": "calls",
    "to": 167
  }, {
    "from": 293,
    "label": "calls",
    "to": 167
  }, {
    "from": 298,
    "label": "calls",
    "to": 167
  }, {
    "from": 521,
    "label": "calls",
    "to": 167
  }, {
    "from": 542,
    "label": "calls",
    "to": 167
  }, {
    "from": 564,
    "label": "calls",
    "to": 167
  }, {
    "from": 896,
    "label": "calls",
    "to": 167
  }, {
    "from": 2148,
    "label": "calls",
    "to": 2235
  }, {
    "from": 228,
    "label": "calls",
    "to": 236
  }, {
    "from": 285,
    "label": "calls",
    "to": 236
  }, {
    "from": 332,
    "label": "calls",
    "to": 236
  }, {
    "from": 607,
    "label": "calls",
    "to": 236
  }, {
    "from": 779,
    "label": "calls",
    "to": 236
  }, {
    "from": 1095,
    "label": "calls",
    "to": 236
  }, {
    "from": 1139,
    "label": "calls",
    "to": 236
  }, {
    "from": 1139,
    "label": "calls",
    "to": 236
  }, {
    "from": 1274,
    "label": "calls",
    "to": 236
  }, {
    "from": 771,
    "label": "calls",
    "to": 2195
  }, {
    "from": 1381,
    "label": "calls",
    "to": 2195
  }, {
    "from": 1,
    "label": "contains",
    "to": 2148
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2
  }, {
    "from": 2148,
    "label": "declares",
    "to": 5
  }, {
    "from": 2148,
    "label": "declares",
    "to": 8
  }, {
    "from": 2148,
    "label": "declares",
    "to": 11
  }, {
    "from": 2148,
    "label": "declares",
    "to": 16
  }, {
    "from": 2148,
    "label": "declares",
    "to": 18
  }, {
    "from": 2148,
    "label": "declares",
    "to": 30
  }, {
    "from": 2148,
    "label": "declares",
    "to": 38
  }, {
    "from": 2148,
    "label": "declares",
    "to": 54
  }, {
    "from": 2148,
    "label": "declares",
    "to": 56
  }, {
    "from": 2148,
    "label": "declares",
    "to": 64
  }, {
    "from": 2148,
    "label": "declares",
    "to": 77
  }, {
    "from": 2148,
    "label": "declares",
    "to": 88
  }, {
    "from": 2148,
    "label": "declares",
    "to": 93
  }, {
    "from": 2148,
    "label": "declares",
    "to": 96
  }, {
    "from": 2148,
    "label": "declares",
    "to": 117
  }, {
    "from": 2148,
    "label": "declares",
    "to": 125
  }, {
    "from": 2148,
    "label": "declares",
    "to": 140
  }, {
    "from": 2148,
    "label": "declares",
    "to": 150
  }, {
    "from": 2148,
    "label": "declares",
    "to": 167
  }, {
    "from": 2148,
    "label": "declares",
    "to": 169
  }, {
    "from": 2148,
    "label": "declares",
    "to": 171
  }, {
    "from": 2148,
    "label": "declares",
    "to": 173
  }, {
    "from": 2148,
    "label": "declares",
    "to": 175
  }, {
    "from": 2148,
    "label": "declares",
    "to": 177
  }, {
    "from": 2148,
    "label": "declares",
    "to": 179
  }, {
    "from": 2148,
    "label": "declares",
    "to": 181
  }, {
    "from": 2148,
    "label": "declares",
    "to": 183
  }, {
    "from": 2148,
    "label": "declares",
    "to": 185
  }, {
    "from": 2148,
    "label": "declares",
    "to": 187
  }, {
    "from": 2148,
    "label": "declares",
    "to": 189
  }, {
    "from": 2148,
    "label": "declares",
    "to": 192
  }, {
    "from": 2148,
    "label": "declares",
    "to": 194
  }, {
    "from": 2148,
    "label": "declares",
    "to": 228
  }, {
    "from": 2148,
    "label": "declares",
    "to": 230
  }, {
    "from": 2148,
    "label": "declares",
    "to": 232
  }, {
    "from": 2148,
    "label": "declares",
    "to": 236
  }, {
    "from": 2148,
    "label": "declares",
    "to": 238
  }, {
    "from": 2148,
    "label": "declares",
    "to": 257
  }, {
    "from": 2148,
    "label": "declares",
    "to": 260
  }, {
    "from": 2148,
    "label": "declares",
    "to": 270
  }, {
    "from": 2148,
    "label": "declares",
    "to": 272
  }, {
    "from": 2148,
    "label": "declares",
    "to": 274
  }, {
    "from": 2148,
    "label": "declares",
    "to": 277
  }, {
    "from": 2148,
    "label": "declares",
    "to": 280
  }, {
    "from": 2148,
    "label": "declares",
    "to": 282
  }, {
    "from": 2148,
    "label": "declares",
    "to": 285
  }, {
    "from": 2148,
    "label": "declares",
    "to": 293
  }, {
    "from": 2148,
    "label": "declares",
    "to": 298
  }, {
    "from": 2148,
    "label": "declares",
    "to": 301
  }, {
    "from": 2148,
    "label": "declares",
    "to": 306
  }, {
    "from": 2148,
    "label": "declares",
    "to": 323
  }, {
    "from": 2148,
    "label": "declares",
    "to": 332
  }, {
    "from": 2148,
    "label": "declares",
    "to": 341
  }, {
    "from": 2148,
    "label": "declares",
    "to": 401
  }, {
    "from": 2148,
    "label": "declares",
    "to": 403
  }, {
    "from": 2148,
    "label": "declares",
    "to": 473
  }, {
    "from": 2148,
    "label": "declares",
    "to": 475
  }, {
    "from": 2148,
    "label": "declares",
    "to": 477
  }, {
    "from": 2148,
    "label": "declares",
    "to": 519
  }, {
    "from": 2148,
    "label": "declares",
    "to": 521
  }, {
    "from": 2148,
    "label": "declares",
    "to": 536
  }, {
    "from": 2148,
    "label": "declares",
    "to": 539
  }, {
    "from": 2148,
    "label": "declares",
    "to": 542
  }, {
    "from": 2148,
    "label": "declares",
    "to": 564
  }, {
    "from": 2148,
    "label": "declares",
    "to": 572
  }, {
    "from": 2148,
    "label": "declares",
    "to": 591
  }, {
    "from": 2148,
    "label": "declares",
    "to": 593
  }, {
    "from": 2148,
    "label": "declares",
    "to": 607
  }, {
    "from": 2148,
    "label": "declares",
    "to": 634
  }, {
    "from": 2148,
    "label": "declares",
    "to": 641
  }, {
    "from": 2148,
    "label": "declares",
    "to": 645
  }, {
    "from": 2148,
    "label": "declares",
    "to": 679
  }, {
    "from": 2148,
    "label": "declares",
    "to": 715
  }, {
    "from": 2148,
    "label": "declares",
    "to": 720
  }, {
    "from": 2148,
    "label": "declares",
    "to": 725
  }, {
    "from": 2148,
    "label": "declares",
    "to": 753
  }, {
    "from": 2148,
    "label": "declares",
    "to": 755
  }, {
    "from": 2148,
    "label": "declares",
    "to": 757
  }, {
    "from": 2148,
    "label": "declares",
    "to": 759
  }, {
    "from": 2148,
    "label": "declares",
    "to": 771
  }, {
    "from": 2148,
    "label": "declares",
    "to": 779
  }, {
    "from": 2148,
    "label": "declares",
    "to": 865
  }, {
    "from": 2148,
    "label": "declares",
    "to": 867
  }, {
    "from": 2148,
    "label": "declares",
    "to": 896
  }, {
    "from": 2148,
    "label": "declares",
    "to": 954
  }, {
    "from": 2148,
    "label": "declares",
    "to": 955
  }, {
    "from": 2148,
    "label": "declares",
    "to": 956
  }, {
    "from": 2148,
    "label": "declares",
    "to": 957
  }, {
    "from": 2148,
    "label": "declares",
    "to": 959
  }, {
    "from": 2148,
    "label": "declares",
    "to": 969
  }, {
    "from": 2148,
    "label": "declares",
    "to": 986
  }, {
    "from": 2148,
    "label": "declares",
    "to": 993
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1000
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1008
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1014
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1042
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1053
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1065
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1084
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1089
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1095
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1115
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1117
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1123
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1125
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1128
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1139
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1144
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1149
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1154
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1173
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1235
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1237
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1239
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1241
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1259
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1267
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1271
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1274
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1301
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1317
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1319
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1328
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1339
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1341
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1349
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1372
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1381
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1515
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1517
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1519
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1521
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1523
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1527
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1531
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1553
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1555
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1557
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1564
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1566
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1568
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1602
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1619
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1659
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1758
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1760
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1762
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1764
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1778
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1780
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1782
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1784
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1786
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1788
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1790
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1792
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1794
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1796
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1798
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1804
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1806
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1808
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1810
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1812
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1814
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1817
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1824
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1831
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1839
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1843
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1847
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1851
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1855
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1862
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1869
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1877
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1883
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1888
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1892
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1898
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1903
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1908
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1912
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1915
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1918
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1921
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1923
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1925
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1928
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1936
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1941
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1946
  }, {
    "from": 2148,
    "label": "declares",
    "to": 1950
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2090
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2092
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2103
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2105
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2115
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2117
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2118
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2120
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2122
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2124
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2126
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2128
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2130
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2132
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2134
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2136
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2138
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2140
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2142
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2144
  }, {
    "from": 2148,
    "label": "declares",
    "to": 2146
  }, {
    "from": 1,
    "label": "contains",
    "to": 2237
  }, {
    "from": 1,
    "label": "contains",
    "to": 2238
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2239
  }, {
    "from": 2239,
    "label": "assigns",
    "to": 2240
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2241
  }, {
    "from": 2241,
    "label": "assigns",
    "to": 2242
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2243
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2244
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2245
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2246
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2247
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2248
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2249
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2250
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2251
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2252
  }, {
    "from": 2252,
    "label": "assigns",
    "to": 2253
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2254
  }, {
    "from": 2254,
    "label": "assigns",
    "to": 2255
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2256
  }, {
    "from": 2256,
    "label": "assigns",
    "to": 2257
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2258
  }, {
    "from": 2258,
    "label": "assigns",
    "to": 2259
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2260
  }, {
    "from": 2260,
    "label": "assigns",
    "to": 2261
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2262
  }, {
    "from": 2262,
    "label": "assigns",
    "to": 2263
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2264
  }, {
    "from": 2264,
    "label": "assigns",
    "to": 2265
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2266
  }, {
    "from": 2266,
    "label": "assigns",
    "to": 2267
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2268
  }, {
    "from": 2268,
    "label": "assigns",
    "to": 2269
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2270
  }, {
    "from": 2270,
    "label": "assigns",
    "to": 2271
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2272
  }, {
    "from": 2272,
    "label": "assigns",
    "to": 2273
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2274
  }, {
    "from": 2274,
    "label": "assigns",
    "to": 2275
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2276
  }, {
    "from": 2276,
    "label": "assigns",
    "to": 2277
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2278
  }, {
    "from": 2278,
    "label": "assigns",
    "to": 2279
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2280
  }, {
    "from": 2280,
    "label": "assigns",
    "to": 2281
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2282
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2283
  }, {
    "from": 2283,
    "label": "assigns",
    "to": 2284
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2285
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2286
  }, {
    "from": 2286,
    "label": "assigns",
    "to": 2287
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2288
  }, {
    "from": 2288,
    "label": "assigns",
    "to": 2289
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2290
  }, {
    "from": 2290,
    "label": "assigns",
    "to": 2291
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2292
  }, {
    "from": 2292,
    "label": "assigns",
    "to": 2293
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2294
  }, {
    "from": 2294,
    "label": "assigns",
    "to": 2295
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2296
  }, {
    "from": 2296,
    "label": "assigns",
    "to": 2297
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2298
  }, {
    "from": 2298,
    "label": "assigns",
    "to": 2299
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2300
  }, {
    "from": 2300,
    "label": "assigns",
    "to": 2301
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2302
  }, {
    "from": 2302,
    "label": "assigns",
    "to": 2303
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2304
  }, {
    "from": 2304,
    "label": "assigns",
    "to": 2305
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2306
  }, {
    "from": 2306,
    "label": "assigns",
    "to": 2307
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2308
  }, {
    "from": 2308,
    "label": "assigns",
    "to": 2309
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2310
  }, {
    "from": 2310,
    "label": "assigns",
    "to": 2311
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2312
  }, {
    "from": 2312,
    "label": "assigns",
    "to": 2313
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2314
  }, {
    "from": 2314,
    "label": "assigns",
    "to": 2315
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2316
  }, {
    "from": 2316,
    "label": "assigns",
    "to": 2317
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2318
  }, {
    "from": 2318,
    "label": "assigns",
    "to": 2319
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2320
  }, {
    "from": 2320,
    "label": "assigns",
    "to": 2321
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2322
  }, {
    "from": 2322,
    "label": "assigns",
    "to": 2323
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2324
  }, {
    "from": 2324,
    "label": "assigns",
    "to": 2325
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2326
  }, {
    "from": 2326,
    "label": "assigns",
    "to": 2327
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2328
  }, {
    "from": 2328,
    "label": "assigns",
    "to": 2329
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2330
  }, {
    "from": 2330,
    "label": "assigns",
    "to": 2331
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2332
  }, {
    "from": 2332,
    "label": "assigns",
    "to": 2333
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2334
  }, {
    "from": 2334,
    "label": "assigns",
    "to": 2335
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2336
  }, {
    "from": 2336,
    "label": "assigns",
    "to": 2337
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2338
  }, {
    "from": 2338,
    "label": "assigns",
    "to": 2339
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2340
  }, {
    "from": 2340,
    "label": "assigns",
    "to": 2341
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2342
  }, {
    "from": 2342,
    "label": "assigns",
    "to": 2343
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2344
  }, {
    "from": 2344,
    "label": "assigns",
    "to": 2345
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2346
  }, {
    "from": 2346,
    "label": "assigns",
    "to": 2347
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2348
  }, {
    "from": 2348,
    "label": "assigns",
    "to": 2349
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2350
  }, {
    "from": 2350,
    "label": "assigns",
    "to": 2351
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2352
  }, {
    "from": 2352,
    "label": "assigns",
    "to": 2353
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2354
  }, {
    "from": 2354,
    "label": "assigns",
    "to": 2355
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2356
  }, {
    "from": 2356,
    "label": "assigns",
    "to": 2357
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2358
  }, {
    "from": 2358,
    "label": "assigns",
    "to": 2359
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2360
  }, {
    "from": 2360,
    "label": "assigns",
    "to": 2361
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2362
  }, {
    "from": 2362,
    "label": "assigns",
    "to": 2363
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2364
  }, {
    "from": 2364,
    "label": "assigns",
    "to": 2365
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2366
  }, {
    "from": 2366,
    "label": "assigns",
    "to": 2367
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2368
  }, {
    "from": 2368,
    "label": "assigns",
    "to": 2369
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2370
  }, {
    "from": 2370,
    "label": "assigns",
    "to": 2371
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2372
  }, {
    "from": 2372,
    "label": "assigns",
    "to": 2373
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2374
  }, {
    "from": 2374,
    "label": "assigns",
    "to": 2375
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2376
  }, {
    "from": 2376,
    "label": "assigns",
    "to": 2377
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2378
  }, {
    "from": 2378,
    "label": "assigns",
    "to": 2379
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2380
  }, {
    "from": 2380,
    "label": "assigns",
    "to": 2381
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2382
  }, {
    "from": 2382,
    "label": "assigns",
    "to": 2383
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2384
  }, {
    "from": 2384,
    "label": "assigns",
    "to": 2385
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2386
  }, {
    "from": 2386,
    "label": "assigns",
    "to": 2387
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2388
  }, {
    "from": 2388,
    "label": "assigns",
    "to": 2389
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2390
  }, {
    "from": 2390,
    "label": "assigns",
    "to": 2391
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2392
  }, {
    "from": 2392,
    "label": "assigns",
    "to": 2393
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2394
  }, {
    "from": 2394,
    "label": "assigns",
    "to": 2395
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2396
  }, {
    "from": 2396,
    "label": "assigns",
    "to": 2397
  }, {
    "from": 2237,
    "label": "initializes",
    "to": 2398
  }, {
    "from": 2398,
    "label": "assigns",
    "to": 2399
  }, {
    "from": 2238,
    "label": "initializes",
    "to": 2236
  }, {
    "from": 764,
    "label": "hasArgument",
    "to": 2117
  }, {
    "from": 979,
    "label": "hasArgument",
    "to": 2118
  }, {
    "from": 1077,
    "label": "hasArgument",
    "to": 2120
  }, {
    "from": 1079,
    "label": "hasArgument",
    "to": 2122
  }, {
    "from": 1414,
    "label": "hasArgument",
    "to": 1515
  }, {
    "from": 1414,
    "label": "hasArgument",
    "to": 1517
  }, {
    "from": 1414,
    "label": "hasArgument",
    "to": 2124
  }, {
    "from": 1459,
    "label": "hasArgument",
    "to": 2126
  }, {
    "from": 1464,
    "label": "hasArgument",
    "to": 2128
  }, {
    "from": 1472,
    "label": "hasArgument",
    "to": 2130
  }, {
    "from": 1480,
    "label": "hasArgument",
    "to": 2132
  }, {
    "from": 1539,
    "label": "hasArgument",
    "to": 2134
  }, {
    "from": 1559,
    "label": "hasArgument",
    "to": 2136
  }, {
    "from": 1592,
    "label": "hasArgument",
    "to": 2138
  }, {
    "from": 1595,
    "label": "hasArgument",
    "to": 2140
  }, {
    "from": 1598,
    "label": "hasArgument",
    "to": 2142
  }, {
    "from": 2079,
    "label": "hasArgument",
    "to": 2144
  }, {
    "from": 2081,
    "label": "hasArgument",
    "to": 2146
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "wxluasudoku",
    "type": "module"
  }, {
    "id": 2,
    "text": "function iff(cond, A, B) if cond then return A else return B end end",
    "type": "function"
  }, {
    "id": 3,
    "text": "if cond then return A else return B end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "function inttobool(n)\r\n    if (n == nil) or (n == 0) then return false end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if (n == nil) or (n == 0) then return false end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function booltoint(n)\r\n    if (n == nil) or (n == false) then return 0 end\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if (n == nil) or (n == false) then return 0 end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function TableCount(atable)\r\n    local count = 0\r\n    for k, v in pairs(atable) do count = count + 1 end\r\n    return count\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for k, v in pairs(atable) do count = count + 1 end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function TableIsEmpty(atable)\r\n    return next(atable) == nil\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function TableSetValue(value, atable, ...)\r\n    if type(atable) ~= \"table\" then atable = {} end\r\n    local t = atable -- t moves up levels through atable\r\n    local args = {...}\r\n    for n = 1, #args-1 do\r\n        local a = args[n]\r\n        if not t[a] then t[a] = {} end\r\n        t = t[a]\r\n    end\r\n    t[args[#args]] = value\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "if type(atable) ~= \"table\" then atable = {} end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "atable = {}",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local t = atable",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for n = 1, #args-1 do\r\n        local a = args[n]\r\n        if not t[a] then t[a] = {} end\r\n        t = t[a]\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 24,
    "text": "local a = args[n]",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if not t[a] then t[a] = {} end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "t[a] = {}",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "t = t[a]",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "t[args[#args]] = value",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function TableRemoveValue(atable, only_if_empty, ...)\r\n    if type(atable) ~= \"table\" then return end\r\n    local t = atable -- t moves up levels through atable\r\n    local args = {...}\r\n    for n = 1, #args-1 do\r\n        t = t[args[n]]\r\n        if not t then return end -- already gone\r\n    end\r\n    if (not only_if_empty) or ((type(t[args[#args]]) == \"table\") and TableIsEmpty(t[args[#args]])) then\r\n        t[args[#args]] = nil\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if type(atable) ~= \"table\" then return end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "for n = 1, #args-1 do\r\n        t = t[args[n]]\r\n        if not t then return end -- already gone\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 33,
    "text": "t = t[args[n]]",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if not t then return end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if (not only_if_empty) or ((type(t[args[#args]]) == \"table\") and TableIsEmpty(t[args[#args]])) then\r\n        t[args[#args]] = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "t[args[#args]] = nil",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function TableDump(atable, prefix, tablelevel)\r\n    local function print_val(v)\r\n        local t = type(v)\r\n        if t == \"number\" then\r\n            return tostring(v)\r\n        elseif t == \"string\" then\r\n            return \"\\\"\"..v..\"\\\"\"\r\n        end\r\n        return \"'\"..tostring(v)..\"'\"\r\n    end\r\n\r\n    prefix = prefix or \"\"\r\n    if tablelevel == nil then\r\n        tablelevel = \"\"\r\n        print(prefix..\"-Dumping Table \"..tostring(atable))\r\n    end\r\n\r\n    prefix = prefix..\"  \"\r\n    local n = 0\r\n\r\n    for k, v in pairs(atable) do\r\n        n = n + 1\r\n\r\n        print(string.format(\"%s %d: %s[%s] = %s\", prefix, n, tablelevel, print_val(k), print_val(v)))\r\n\r\n        if type(v) == \"table\" then\r\n            TableDump(v, prefix..\"  \", tablelevel..\"[\"..print_val(k)..\"]\")\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local function print_val(v)\r\n        local t = type(v)\r\n        if t == \"number\" then\r\n            return tostring(v)\r\n        elseif t == \"string\" then\r\n            return \"\\\"\"..v..\"\\\"\"\r\n        end\r\n        return \"'\"..tostring(v)..\"'\"\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 40,
    "text": "local t = type(v)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if t == \"number\" then\r\n            return tostring(v)\r\n        elseif t == \"string\" then\r\n            return \"\\\"\"..v..\"\\\"\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "prefix = prefix or \"\"",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if tablelevel == nil then\r\n        tablelevel = \"\"\r\n        print(prefix..\"-Dumping Table \"..tostring(atable))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "tablelevel = \"\"",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "print(prefix..\"-Dumping Table \"..tostring(atable))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "prefix = prefix..\"  \"",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local n = 0",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "for k, v in pairs(atable) do\r\n        n = n + 1\r\n\r\n        print(string.format(\"%s %d: %s[%s] = %s\", prefix, n, tablelevel, print_val(k), print_val(v)))\r\n\r\n        if type(v) == \"table\" then\r\n            TableDump(v, prefix..\"  \", tablelevel..\"[\"..print_val(k)..\"]\")\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "print(string.format(\"%s %d: %s[%s] = %s\", prefix, n, tablelevel, print_val(k), print_val(v)))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "if type(v) == \"table\" then\r\n            TableDump(v, prefix..\"  \", tablelevel..\"[\"..print_val(k)..\"]\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "TableDump(v, prefix..\"  \", tablelevel..\"[\"..print_val(k)..\"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function print_val(v)\r\n        local t = type(v)\r\n        if t == \"number\" then\r\n            return tostring(v)\r\n        elseif t == \"string\" then\r\n            return \"\\\"\"..v..\"\\\"\"\r\n        end\r\n        return \"'\"..tostring(v)..\"'\"\r\n    end",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function TableCopy(atable)\r\n    if not atable then return nil end\r\n    local newtable = {}\r\n    for k, v in pairs(atable) do\r\n        if type(v) == \"table\" then\r\n            newtable[k] = TableCopy(v)\r\n        else\r\n            newtable[k] = v\r\n        end\r\n    end\r\n    return newtable\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "if not atable then return nil end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "local newtable = {}",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "for k, v in pairs(atable) do\r\n        if type(v) == \"table\" then\r\n            newtable[k] = TableCopy(v)\r\n        else\r\n            newtable[k] = v\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "if type(v) == \"table\" then\r\n            newtable[k] = TableCopy(v)\r\n        else\r\n            newtable[k] = v\r\n        end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "newtable[k] = TableCopy(v)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "newtable[k] = v",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function TableMerge(new_table, original_table)\r\n    new_table       = new_table or {}\r\n    local out_table = TableCopy(original_table or {})\r\n\r\n    for k, v in pairs(new_table) do\r\n        if type(v) == \"table\" then\r\n            if out_table[k] and (type(out_table[k]) == \"table\") then\r\n                out_table[k] = TableMerge(v, out_table[k])\r\n            elseif out_table[k] then\r\n                local ov = out_table[k]\r\n                out_table[k] = TableCopy(v)\r\n                table.insert(out_table[k], ov)\r\n            else\r\n                out_table[k] = TableCopy(v)\r\n            end\r\n        elseif out_table[k] and (type(out_table[k]) == \"table\") then\r\n            table.insert(out_table[k], v)\r\n        else\r\n            out_table[k] = v\r\n        end\r\n    end\r\n\r\n    return out_table\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "new_table       = new_table or {}",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local out_table = TableCopy(original_table or {})",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "for k, v in pairs(new_table) do\r\n        if type(v) == \"table\" then\r\n            if out_table[k] and (type(out_table[k]) == \"table\") then\r\n                out_table[k] = TableMerge(v, out_table[k])\r\n            elseif out_table[k] then\r\n                local ov = out_table[k]\r\n                out_table[k] = TableCopy(v)\r\n                table.insert(out_table[k], ov)\r\n            else\r\n                out_table[k] = TableCopy(v)\r\n            end\r\n        elseif out_table[k] and (type(out_table[k]) == \"table\") then\r\n            table.insert(out_table[k], v)\r\n        else\r\n            out_table[k] = v\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 68,
    "text": "if type(v) == \"table\" then\r\n            if out_table[k] and (type(out_table[k]) == \"table\") then\r\n                out_table[k] = TableMerge(v, out_table[k])\r\n            elseif out_table[k] then\r\n                local ov = out_table[k]\r\n                out_table[k] = TableCopy(v)\r\n                table.insert(out_table[k], ov)\r\n            else\r\n                out_table[k] = TableCopy(v)\r\n            end\r\n        elseif out_table[k] and (type(out_table[k]) == \"table\") then\r\n            table.insert(out_table[k], v)\r\n        else\r\n            out_table[k] = v\r\n        end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "if out_table[k] and (type(out_table[k]) == \"table\") then\r\n                out_table[k] = TableMerge(v, out_table[k])\r\n            elseif out_table[k] then\r\n                local ov = out_table[k]\r\n                out_table[k] = TableCopy(v)\r\n                table.insert(out_table[k], ov)\r\n            else\r\n                out_table[k] = TableCopy(v)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "out_table[k] = TableMerge(v, out_table[k])",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "local ov = out_table[k]",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "out_table[k] = TableCopy(v)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "table.insert(out_table[k], ov)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "table.insert(out_table[k], v)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "out_table[k] = v",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function sudoku.CreateTable()\r\n    local sudokuTable =\r\n    {\r\n        values       = {}, -- array (1-81) of values[cell#] = value (0 means unset)\r\n        row_values   = {}, -- array (1-9) of values[row#][value] = { cell1, cell2... }\r\n        col_values   = {}, -- array (1-9) of values[col#][value] = { cell1, cell2... }\r\n        block_values = {}, -- array (1-9) of values[block#][value] = { cell1, cell2... }\r\n        possible     = {}, -- possible values per cell, possible[cell# 1-81] = { val1, val2... }\r\n        invalid      = {}, -- array (1-81) of known invalid[cell#] = true/nil\r\n        flags        = {}  -- extra flags for puzzle, eg. ELIMINATE_NAKED_PAIRS\r\n    }\r\n\r\n    for i = 1, 81 do\r\n        sudokuTable.values[i] = 0    -- initialize to unknown\r\n        sudokuTable.possible[i] = {} -- initialize to empty\r\n    end\r\n    for i = 1, 9 do\r\n        sudokuTable.row_values[i]   = {}\r\n        sudokuTable.col_values[i]   = {}\r\n        sudokuTable.block_values[i] = {}\r\n    end\r\n\r\n    sudoku.UpdateTable(sudokuTable)\r\n\r\n    return sudokuTable\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "local sudokuTable =\r\n    {\r\n        values       = {}, -- array (1-81) of values[cell#] = value (0 means unset)\r\n        row_values   = {}, -- array (1-9) of values[row#][value] = { cell1, cell2... }\r\n        col_values   = {}, -- array (1-9) of values[col#][value] = { cell1, cell2... }\r\n        block_values = {}, -- array (1-9) of values[block#][value] = { cell1, cell2... }\r\n        possible     = {}, -- possible values per cell, possible[cell# 1-81] = { val1, val2... }\r\n        invalid      = {}, -- array (1-81) of known invalid[cell#] = true/nil\r\n        flags        = {}  -- extra flags for puzzle, eg. ELIMINATE_NAKED_PAIRS\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "for i = 1, 81 do\r\n        sudokuTable.values[i] = 0    -- initialize to unknown\r\n        sudokuTable.possible[i] = {} -- initialize to empty\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 80,
    "text": "sudokuTable.values[i] = 0",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "sudokuTable.possible[i] = {}",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "for i = 1, 9 do\r\n        sudokuTable.row_values[i]   = {}\r\n        sudokuTable.col_values[i]   = {}\r\n        sudokuTable.block_values[i] = {}\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 83,
    "text": "sudokuTable.row_values[i]   = {}",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "sudokuTable.col_values[i]   = {}",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "sudokuTable.block_values[i] = {}",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "sudoku.UpdateTable(sudokuTable)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function sudoku.UpdateTable(sudokuTable)\r\n    sudoku.CalcRowColBlockValues(sudokuTable)\r\n    sudoku.CalcInvalidCells(sudokuTable)\r\n    sudoku.CalcAllPossible(sudokuTable)\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "sudoku.CalcRowColBlockValues(sudokuTable)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "sudoku.CalcInvalidCells(sudokuTable)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "sudoku.CalcAllPossible(sudokuTable)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function sudoku.SetValues(sudokuTable, values)\r\n    sudokuTable.values = values\r\n    sudoku.UpdateTable(sudokuTable)\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "sudokuTable.values = values",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function sudoku.Open(fileName)\r\n    local values      = {}\r\n    local value_count = 0 -- number of cols in line\r\n    local row_count   = 0 -- number of rows read\r\n    local line_n      = 0 -- actual line number in file\r\n    for line in io.lines(fileName) do\r\n        line_n = line_n + 1\r\n        local col_count = 0\r\n        for k, v in string.gmatch(line, \"%d\") do\r\n            k = tonumber(k)\r\n            if (k >= 0) and (k <= 9) then\r\n                table.insert(values, k)\r\n                col_count = col_count + 1\r\n                value_count = value_count + 1\r\n            else\r\n                return nil, string.format(\"Error loading sudoku file : '%s' invalid number '%d' on line %d.\", fileName, k, line_n)\r\n            end\r\n        end\r\n\r\n        if col_count == 9 then\r\n            row_count = row_count + 1\r\n        elseif (col_count ~= 0) and (col_count ~= 9) then\r\n            return nil, string.format(\"Error loading sudoku file : '%s' on line %d.\\nExpecting 9 columns, found %d.\", fileName, line_n, col_count)\r\n        end\r\n    end\r\n\r\n    if line_n == 0 then\r\n        return nil, string.format(\"Error opening sudoku file : '%s'.\", fileName)\r\n    elseif row_count ~= 9 then\r\n        return nil, string.format(\"Error loading sudoku file : '%s', expected 9 rows, found %d.\", fileName, row_count)\r\n    elseif value_count ~= 81 then\r\n        return nil, string.format(\"Error loading sudoku file : '%s', expected 81 numbers, found %d.\", fileName, value_count)\r\n    end\r\n\r\n    local s = sudoku.CreateTable()\r\n    s.flags[sudoku.FILENAME] = fileName\r\n    sudoku.SetValues(s, values)\r\n\r\n    return s, \"\"\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local values      = {}",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local value_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local row_count   = 0",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local line_n      = 0",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "for line in io.lines(fileName) do\r\n        line_n = line_n + 1\r\n        local col_count = 0\r\n        for k, v in string.gmatch(line, \"%d\") do\r\n            k = tonumber(k)\r\n            if (k >= 0) and (k <= 9) then\r\n                table.insert(values, k)\r\n                col_count = col_count + 1\r\n                value_count = value_count + 1\r\n            else\r\n                return nil, string.format(\"Error loading sudoku file : '%s' invalid number '%d' on line %d.\", fileName, k, line_n)\r\n            end\r\n        end\r\n\r\n        if col_count == 9 then\r\n            row_count = row_count + 1\r\n        elseif (col_count ~= 0) and (col_count ~= 9) then\r\n            return nil, string.format(\"Error loading sudoku file : '%s' on line %d.\\nExpecting 9 columns, found %d.\", fileName, line_n, col_count)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 102,
    "text": "line_n = line_n + 1",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "local col_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "for k, v in string.gmatch(line, \"%d\") do\r\n            k = tonumber(k)\r\n            if (k >= 0) and (k <= 9) then\r\n                table.insert(values, k)\r\n                col_count = col_count + 1\r\n                value_count = value_count + 1\r\n            else\r\n                return nil, string.format(\"Error loading sudoku file : '%s' invalid number '%d' on line %d.\", fileName, k, line_n)\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 105,
    "text": "k = tonumber(k)",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "if (k >= 0) and (k <= 9) then\r\n                table.insert(values, k)\r\n                col_count = col_count + 1\r\n                value_count = value_count + 1\r\n            else\r\n                return nil, string.format(\"Error loading sudoku file : '%s' invalid number '%d' on line %d.\", fileName, k, line_n)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "table.insert(values, k)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "col_count = col_count + 1",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "value_count = value_count + 1",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "if col_count == 9 then\r\n            row_count = row_count + 1\r\n        elseif (col_count ~= 0) and (col_count ~= 9) then\r\n            return nil, string.format(\"Error loading sudoku file : '%s' on line %d.\\nExpecting 9 columns, found %d.\", fileName, line_n, col_count)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "row_count = row_count + 1",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "if line_n == 0 then\r\n        return nil, string.format(\"Error opening sudoku file : '%s'.\", fileName)\r\n    elseif row_count ~= 9 then\r\n        return nil, string.format(\"Error loading sudoku file : '%s', expected 9 rows, found %d.\", fileName, row_count)\r\n    elseif value_count ~= 81 then\r\n        return nil, string.format(\"Error loading sudoku file : '%s', expected 81 numbers, found %d.\", fileName, value_count)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "local s = sudoku.CreateTable()",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "s.flags[sudoku.FILENAME] = fileName",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "sudoku.SetValues(s, values)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function sudoku.Save(sudokuTable, fileName)\r\n    local f = io.open(fileName, \"w+\")\r\n    if not f then return false end\r\n\r\n    local str = sudoku.ToString(sudokuTable)\r\n    f:write(str)\r\n    io.close(f)\r\n\r\n    sudokuTable.flags[sudoku.FILENAME] = fileName\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "local f = io.open(fileName, \"w+\")",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if not f then return false end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "local str = sudoku.ToString(sudokuTable)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "f:write(str)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "io.close(f)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "sudokuTable.flags[sudoku.FILENAME] = fileName",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function sudoku.PrintGrid(sudokuTable)\r\n    local str = string.rep(\"-\", 13)..\"\\n\"\r\n    for r = 1, 9 do\r\n        str = str..\"|\"\r\n        for c = 1, 9 do\r\n            local v = \" \"\r\n            if sudoku.HasValue(sudokuTable, r, c) then\r\n                v = tostring(sudoku.GetValue(sudokuTable, r, c))\r\n            end\r\n            str = str..v\r\n            if math.fmod(c, 3) == 0 then str = str..\"|\" end\r\n        end\r\n        str = str..\"\\n\"\r\n        if math.fmod(r, 3) == 0 then str = str..string.rep(\"-\", 13)..\"\\n\" end\r\n    end\r\n\r\n    print(str)\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local str = string.rep(\"-\", 13)..\"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "for r = 1, 9 do\r\n        str = str..\"|\"\r\n        for c = 1, 9 do\r\n            local v = \" \"\r\n            if sudoku.HasValue(sudokuTable, r, c) then\r\n                v = tostring(sudoku.GetValue(sudokuTable, r, c))\r\n            end\r\n            str = str..v\r\n            if math.fmod(c, 3) == 0 then str = str..\"|\" end\r\n        end\r\n        str = str..\"\\n\"\r\n        if math.fmod(r, 3) == 0 then str = str..string.rep(\"-\", 13)..\"\\n\" end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 128,
    "text": "str = str..\"|\"",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "for c = 1, 9 do\r\n            local v = \" \"\r\n            if sudoku.HasValue(sudokuTable, r, c) then\r\n                v = tostring(sudoku.GetValue(sudokuTable, r, c))\r\n            end\r\n            str = str..v\r\n            if math.fmod(c, 3) == 0 then str = str..\"|\" end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 130,
    "text": "local v = \" \"",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if sudoku.HasValue(sudokuTable, r, c) then\r\n                v = tostring(sudoku.GetValue(sudokuTable, r, c))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "v = tostring(sudoku.GetValue(sudokuTable, r, c))",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "str = str..v",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "if math.fmod(c, 3) == 0 then str = str..\"|\" end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "str = str..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "if math.fmod(r, 3) == 0 then str = str..string.rep(\"-\", 13)..\"\\n\" end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "str = str..string.rep(\"-\", 13)..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "print(str)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function sudoku.ToString(sudokuTable)\r\n    local str = \"\"\r\n    for r = 1, 9 do\r\n        for c = 1, 9 do\r\n            local v = \"0\"\r\n            if sudoku.HasValue(sudokuTable, r, c) then\r\n                v = tostring(sudoku.GetValue(sudokuTable, r, c))\r\n            end\r\n            str = str..v..\",\"\r\n            if math.fmod(c, 3) == 0 then str = str..\" \" end\r\n        end\r\n        str = str..\"\\n\"\r\n        if (r < 9) and (math.fmod(r, 3) == 0) then str = str..\"\\n\" end\r\n    end\r\n\r\n    return str\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "local str = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "for r = 1, 9 do\r\n        for c = 1, 9 do\r\n            local v = \"0\"\r\n            if sudoku.HasValue(sudokuTable, r, c) then\r\n                v = tostring(sudoku.GetValue(sudokuTable, r, c))\r\n            end\r\n            str = str..v..\",\"\r\n            if math.fmod(c, 3) == 0 then str = str..\" \" end\r\n        end\r\n        str = str..\"\\n\"\r\n        if (r < 9) and (math.fmod(r, 3) == 0) then str = str..\"\\n\" end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 143,
    "text": "for c = 1, 9 do\r\n            local v = \"0\"\r\n            if sudoku.HasValue(sudokuTable, r, c) then\r\n                v = tostring(sudoku.GetValue(sudokuTable, r, c))\r\n            end\r\n            str = str..v..\",\"\r\n            if math.fmod(c, 3) == 0 then str = str..\" \" end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 144,
    "text": "local v = \"0\"",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "str = str..v..\",\"",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "if math.fmod(c, 3) == 0 then str = str..\" \" end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "str = str..\" \"",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "if (r < 9) and (math.fmod(r, 3) == 0) then str = str..\"\\n\" end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function sudoku.PrintPossible(sudokuTable)\r\n    local str = string.rep(\"-\", 103)..\"\\n\"\r\n    for r = 1, 9 do\r\n        str = str..\"|\"\r\n        for c = 1, 9 do\r\n            local has_value = sudoku.HasValue(sudokuTable, r, c)\r\n            if has_value then str = str..\"<\" else str = str..\"[\" end\r\n            local p = sudoku.GetPossible(sudokuTable, r, c)\r\n            for i = 1, 9 do\r\n                str = str..(p[i] or \" \")\r\n            end\r\n            if has_value then str = str..\">\" else str = str..\"]\" end\r\n            if math.fmod(c, 3) == 0 then str = str..\"|\" end\r\n        end\r\n        str = str..\"\\n\"\r\n        if math.fmod(r, 3) == 0 then str = str..string.rep(\"-\", 103)..\"\\n\" end\r\n    end\r\n\r\n    print(str)\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "local str = string.rep(\"-\", 103)..\"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "for r = 1, 9 do\r\n        str = str..\"|\"\r\n        for c = 1, 9 do\r\n            local has_value = sudoku.HasValue(sudokuTable, r, c)\r\n            if has_value then str = str..\"<\" else str = str..\"[\" end\r\n            local p = sudoku.GetPossible(sudokuTable, r, c)\r\n            for i = 1, 9 do\r\n                str = str..(p[i] or \" \")\r\n            end\r\n            if has_value then str = str..\">\" else str = str..\"]\" end\r\n            if math.fmod(c, 3) == 0 then str = str..\"|\" end\r\n        end\r\n        str = str..\"\\n\"\r\n        if math.fmod(r, 3) == 0 then str = str..string.rep(\"-\", 103)..\"\\n\" end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 153,
    "text": "for c = 1, 9 do\r\n            local has_value = sudoku.HasValue(sudokuTable, r, c)\r\n            if has_value then str = str..\"<\" else str = str..\"[\" end\r\n            local p = sudoku.GetPossible(sudokuTable, r, c)\r\n            for i = 1, 9 do\r\n                str = str..(p[i] or \" \")\r\n            end\r\n            if has_value then str = str..\">\" else str = str..\"]\" end\r\n            if math.fmod(c, 3) == 0 then str = str..\"|\" end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 154,
    "text": "local has_value = sudoku.HasValue(sudokuTable, r, c)",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "if has_value then str = str..\"<\" else str = str..\"[\" end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "str = str..\"<\"",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "str = str..\"[\"",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "local p = sudoku.GetPossible(sudokuTable, r, c)",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "for i = 1, 9 do\r\n                str = str..(p[i] or \" \")\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 160,
    "text": "str = str..(p[i] or \" \")",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "if has_value then str = str..\">\" else str = str..\"]\" end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "str = str..\">\"",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "str = str..\"]\"",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "if math.fmod(r, 3) == 0 then str = str..string.rep(\"-\", 103)..\"\\n\" end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "str = str..string.rep(\"-\", 103)..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function sudoku.RowColToCell(row, col)\r\n    return (row-1)*9 + col\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function sudoku.CellToRowCol(cell)\r\n    return sudoku.CellToRowTable[cell], sudoku.CellToColTable[cell]\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function sudoku.CellToRow(cell)\r\n    return sudoku.CellToRowTable[cell]\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function sudoku.CellToCol(cell)\r\n    return sudoku.CellToColTable[cell]\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function sudoku.IsValidValueN(value)\r\n    return (value >= 1) and (value <= 9)\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function sudoku.RowColToBlock(row, col)\r\n    return sudoku.CellToBlockTable[sudoku.RowColToCell(row, col)]\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function sudoku.CellToBlock(cell)\r\n    return sudoku.CellToBlockTable[cell]\r\nend",
    "type": "function"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function sudoku.BlockToCell(block)\r\n    return sudoku.BlockToCellTable[block]\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function sudoku.BlockToRowCol(block)\r\n    return sudoku.BlockToRowTable[block], sudoku.BlockToColTable[block]\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function sudoku.BlockToRow(block)\r\n    return sudoku.BlockToRowTable[block]\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function sudoku.BlockToCol(block)\r\n    return sudoku.BlockToColTable[block]\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function sudoku.RowColToBlockRowCol(row, col)\r\n    local block = sudoku.RowColToBlock(row, col)\r\n    return sudoku.BlockToRowTable[block], sudoku.BlockToColTable[block]\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "local block = sudoku.RowColToBlock(row, col)",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "function sudoku.GetValue(sudokuTable, row, col)\r\n    return sudoku.GetCellValue(sudokuTable, sudoku.RowColToCell(row, col))\r\nend",
    "type": "function"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "function sudoku.SetValue(sudokuTable, row, col, value)\r\n    local cell      = sudoku.RowColToCell(row, col)\r\n    local block     = sudoku.CellToBlock(cell)\r\n    local old_value = sudokuTable.values[cell]\r\n\r\n    if not sudoku.IsValidValueN(value) then value = 0 end\r\n    sudokuTable.values[cell] = value\r\n\r\n    --remove the old_value from the row, col, block values\r\n    if sudoku.IsValidValueN(old_value) then\r\n        if sudokuTable.row_values[row] and sudokuTable.row_values[row][old_value] then\r\n            sudokuTable.row_values[row][old_value][cell] = nil\r\n            if TableIsEmpty(sudokuTable.row_values[row][old_value]) then sudokuTable.row_values[row][old_value] = nil end\r\n        end\r\n        if sudokuTable.col_values[col] and sudokuTable.col_values[col][old_value] then\r\n            sudokuTable.col_values[col][old_value][cell] = nil\r\n            if TableIsEmpty(sudokuTable.col_values[col][old_value]) then sudokuTable.col_values[col][old_value] = nil end\r\n        end\r\n        if sudokuTable.block_values[block] and sudokuTable.block_values[block][old_value] then\r\n            sudokuTable.block_values[block][old_value][cell] = nil\r\n            if TableIsEmpty(sudokuTable.block_values[block][old_value]) then sudokuTable.block_values[block][old_value] = nil end\r\n        end\r\n    end\r\n    --add new value to the row, col, block values\r\n    if value ~= 0 then\r\n        if not sudokuTable.row_values[row] then\r\n            sudokuTable.row_values[row] = {[value] = {[cell] = cell}}\r\n        elseif not sudokuTable.row_values[row][value] then\r\n            sudokuTable.row_values[row][value] = {[cell] = cell}\r\n        else\r\n            sudokuTable.row_values[row][value][cell] = cell\r\n        end\r\n\r\n        if not sudokuTable.col_values[col] then\r\n            sudokuTable.col_values[col] = {[value] = {[cell] = cell}}\r\n        elseif not sudokuTable.col_values[col][value] then\r\n            sudokuTable.col_values[col][value] = {[cell] = cell}\r\n        else\r\n            sudokuTable.col_values[col][value][cell] = cell\r\n        end\r\n\r\n        if not sudokuTable.block_values[block] then\r\n            sudokuTable.block_values[block] = {[value] = {[cell] = cell}}\r\n        elseif not sudokuTable.block_values[block][value] then\r\n            sudokuTable.block_values[block][value] = {[cell] = cell}\r\n        else\r\n            sudokuTable.block_values[block][value][cell] = cell\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 195,
    "text": "local cell      = sudoku.RowColToCell(row, col)",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "local block     = sudoku.CellToBlock(cell)",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "local old_value = sudokuTable.values[cell]",
    "type": "statement:localassign"
  }, {
    "id": 198,
    "text": "if not sudoku.IsValidValueN(value) then value = 0 end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "value = 0",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "sudokuTable.values[cell] = value",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "if sudoku.IsValidValueN(old_value) then\r\n        if sudokuTable.row_values[row] and sudokuTable.row_values[row][old_value] then\r\n            sudokuTable.row_values[row][old_value][cell] = nil\r\n            if TableIsEmpty(sudokuTable.row_values[row][old_value]) then sudokuTable.row_values[row][old_value] = nil end\r\n        end\r\n        if sudokuTable.col_values[col] and sudokuTable.col_values[col][old_value] then\r\n            sudokuTable.col_values[col][old_value][cell] = nil\r\n            if TableIsEmpty(sudokuTable.col_values[col][old_value]) then sudokuTable.col_values[col][old_value] = nil end\r\n        end\r\n        if sudokuTable.block_values[block] and sudokuTable.block_values[block][old_value] then\r\n            sudokuTable.block_values[block][old_value][cell] = nil\r\n            if TableIsEmpty(sudokuTable.block_values[block][old_value]) then sudokuTable.block_values[block][old_value] = nil end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "if sudokuTable.row_values[row] and sudokuTable.row_values[row][old_value] then\r\n            sudokuTable.row_values[row][old_value][cell] = nil\r\n            if TableIsEmpty(sudokuTable.row_values[row][old_value]) then sudokuTable.row_values[row][old_value] = nil end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "sudokuTable.row_values[row][old_value][cell] = nil",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "if TableIsEmpty(sudokuTable.row_values[row][old_value]) then sudokuTable.row_values[row][old_value] = nil end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "sudokuTable.row_values[row][old_value] = nil",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "if sudokuTable.col_values[col] and sudokuTable.col_values[col][old_value] then\r\n            sudokuTable.col_values[col][old_value][cell] = nil\r\n            if TableIsEmpty(sudokuTable.col_values[col][old_value]) then sudokuTable.col_values[col][old_value] = nil end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "sudokuTable.col_values[col][old_value][cell] = nil",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "if TableIsEmpty(sudokuTable.col_values[col][old_value]) then sudokuTable.col_values[col][old_value] = nil end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "sudokuTable.col_values[col][old_value] = nil",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "if sudokuTable.block_values[block] and sudokuTable.block_values[block][old_value] then\r\n            sudokuTable.block_values[block][old_value][cell] = nil\r\n            if TableIsEmpty(sudokuTable.block_values[block][old_value]) then sudokuTable.block_values[block][old_value] = nil end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "sudokuTable.block_values[block][old_value][cell] = nil",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "if TableIsEmpty(sudokuTable.block_values[block][old_value]) then sudokuTable.block_values[block][old_value] = nil end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "sudokuTable.block_values[block][old_value] = nil",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "if value ~= 0 then\r\n        if not sudokuTable.row_values[row] then\r\n            sudokuTable.row_values[row] = {[value] = {[cell] = cell}}\r\n        elseif not sudokuTable.row_values[row][value] then\r\n            sudokuTable.row_values[row][value] = {[cell] = cell}\r\n        else\r\n            sudokuTable.row_values[row][value][cell] = cell\r\n        end\r\n\r\n        if not sudokuTable.col_values[col] then\r\n            sudokuTable.col_values[col] = {[value] = {[cell] = cell}}\r\n        elseif not sudokuTable.col_values[col][value] then\r\n            sudokuTable.col_values[col][value] = {[cell] = cell}\r\n        else\r\n            sudokuTable.col_values[col][value][cell] = cell\r\n        end\r\n\r\n        if not sudokuTable.block_values[block] then\r\n            sudokuTable.block_values[block] = {[value] = {[cell] = cell}}\r\n        elseif not sudokuTable.block_values[block][value] then\r\n            sudokuTable.block_values[block][value] = {[cell] = cell}\r\n        else\r\n            sudokuTable.block_values[block][value][cell] = cell\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "if not sudokuTable.row_values[row] then\r\n            sudokuTable.row_values[row] = {[value] = {[cell] = cell}}\r\n        elseif not sudokuTable.row_values[row][value] then\r\n            sudokuTable.row_values[row][value] = {[cell] = cell}\r\n        else\r\n            sudokuTable.row_values[row][value][cell] = cell\r\n        end",
    "type": "statement:if"
  }, {
    "id": 216,
    "text": "sudokuTable.row_values[row] = {[value] = {[cell] = cell}}",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "sudokuTable.row_values[row][value] = {[cell] = cell}",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "sudokuTable.row_values[row][value][cell] = cell",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "if not sudokuTable.col_values[col] then\r\n            sudokuTable.col_values[col] = {[value] = {[cell] = cell}}\r\n        elseif not sudokuTable.col_values[col][value] then\r\n            sudokuTable.col_values[col][value] = {[cell] = cell}\r\n        else\r\n            sudokuTable.col_values[col][value][cell] = cell\r\n        end",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "sudokuTable.col_values[col] = {[value] = {[cell] = cell}}",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "sudokuTable.col_values[col][value] = {[cell] = cell}",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "sudokuTable.col_values[col][value][cell] = cell",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "if not sudokuTable.block_values[block] then\r\n            sudokuTable.block_values[block] = {[value] = {[cell] = cell}}\r\n        elseif not sudokuTable.block_values[block][value] then\r\n            sudokuTable.block_values[block][value] = {[cell] = cell}\r\n        else\r\n            sudokuTable.block_values[block][value][cell] = cell\r\n        end",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "sudokuTable.block_values[block] = {[value] = {[cell] = cell}}",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "sudokuTable.block_values[block][value] = {[cell] = cell}",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "sudokuTable.block_values[block][value][cell] = cell",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "function sudoku.HasValue(sudokuTable, row, col)\r\n    return sudoku.HasCellValue(sudokuTable, sudoku.RowColToCell(row, col))\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function sudoku.GetCellValue(sudokuTable, cell)\r\n    return sudokuTable.values[cell]\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 232,
    "text": "function sudoku.SetCellValue(sudokuTable, cell, value)\r\n    local row, col = sudoku.CellToRowCol(cell)\r\n    sudoku.SetValue(sudokuTable, row, col, value)\r\nend",
    "type": "function"
  }, {
    "id": 233,
    "text": "local row, col = sudoku.CellToRowCol(cell)",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "sudoku.SetValue(sudokuTable, row, col, value)",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 236,
    "text": "function sudoku.HasCellValue(sudokuTable, cell)\r\n    return sudoku.IsValidValueN(sudokuTable.values[cell])\r\nend",
    "type": "function"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "function sudoku.CalcRowColBlockValues(sudokuTable)\r\n    sudokuTable.row_values   = {}\r\n    sudokuTable.col_values   = {}\r\n    sudokuTable.block_values = {}\r\n\r\n    for cell = 1, 81 do\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n        local block    = sudoku.CellToBlock(cell)\r\n\r\n        if not sudokuTable.row_values[row] then sudokuTable.row_values[row] = {} end\r\n        if not sudokuTable.col_values[col] then sudokuTable.col_values[col] = {} end\r\n        if not sudokuTable.block_values[block] then sudokuTable.block_values[block] = {} end\r\n\r\n        local value = sudoku.GetCellValue(sudokuTable, cell)\r\n\r\n        if sudoku.IsValidValueN(value) then\r\n            if not sudokuTable.row_values[row][value] then\r\n                sudokuTable.row_values[row][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.row_values[row][value][cell] = cell\r\n            end\r\n            if not sudokuTable.col_values[col][value] then\r\n                sudokuTable.col_values[col][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.col_values[col][value][cell] = cell\r\n            end\r\n            if not sudokuTable.block_values[block][value] then\r\n                sudokuTable.block_values[block][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.block_values[block][value][cell] =  cell\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 239,
    "text": "sudokuTable.row_values   = {}",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "sudokuTable.col_values   = {}",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "sudokuTable.block_values = {}",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "for cell = 1, 81 do\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n        local block    = sudoku.CellToBlock(cell)\r\n\r\n        if not sudokuTable.row_values[row] then sudokuTable.row_values[row] = {} end\r\n        if not sudokuTable.col_values[col] then sudokuTable.col_values[col] = {} end\r\n        if not sudokuTable.block_values[block] then sudokuTable.block_values[block] = {} end\r\n\r\n        local value = sudoku.GetCellValue(sudokuTable, cell)\r\n\r\n        if sudoku.IsValidValueN(value) then\r\n            if not sudokuTable.row_values[row][value] then\r\n                sudokuTable.row_values[row][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.row_values[row][value][cell] = cell\r\n            end\r\n            if not sudokuTable.col_values[col][value] then\r\n                sudokuTable.col_values[col][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.col_values[col][value][cell] = cell\r\n            end\r\n            if not sudokuTable.block_values[block][value] then\r\n                sudokuTable.block_values[block][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.block_values[block][value][cell] =  cell\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 243,
    "text": "local block    = sudoku.CellToBlock(cell)",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "if not sudokuTable.row_values[row] then sudokuTable.row_values[row] = {} end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "sudokuTable.row_values[row] = {}",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "if not sudokuTable.col_values[col] then sudokuTable.col_values[col] = {} end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "sudokuTable.col_values[col] = {}",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "if not sudokuTable.block_values[block] then sudokuTable.block_values[block] = {} end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "sudokuTable.block_values[block] = {}",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "local value = sudoku.GetCellValue(sudokuTable, cell)",
    "type": "statement:localassign"
  }, {
    "id": 251,
    "text": "if sudoku.IsValidValueN(value) then\r\n            if not sudokuTable.row_values[row][value] then\r\n                sudokuTable.row_values[row][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.row_values[row][value][cell] = cell\r\n            end\r\n            if not sudokuTable.col_values[col][value] then\r\n                sudokuTable.col_values[col][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.col_values[col][value][cell] = cell\r\n            end\r\n            if not sudokuTable.block_values[block][value] then\r\n                sudokuTable.block_values[block][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.block_values[block][value][cell] =  cell\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "if not sudokuTable.row_values[row][value] then\r\n                sudokuTable.row_values[row][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.row_values[row][value][cell] = cell\r\n            end",
    "type": "statement:if"
  }, {
    "id": 253,
    "text": "if not sudokuTable.col_values[col][value] then\r\n                sudokuTable.col_values[col][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.col_values[col][value][cell] = cell\r\n            end",
    "type": "statement:if"
  }, {
    "id": 254,
    "text": "if not sudokuTable.block_values[block][value] then\r\n                sudokuTable.block_values[block][value] = {[cell] = cell}\r\n            else\r\n                sudokuTable.block_values[block][value][cell] =  cell\r\n            end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "sudokuTable.block_values[block][value][cell] =  cell",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 257,
    "text": "function sudoku.IsValidValue(sudokuTable, row, col, value)\r\n    if sudokuTable.row_values[row][value] or\r\n       sudokuTable.col_values[col][value] or\r\n       sudokuTable.block_values[sudoku.RowColToBlock(row, col)][value] then\r\n        return false\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 258,
    "text": "if sudokuTable.row_values[row][value] or\r\n       sudokuTable.col_values[col][value] or\r\n       sudokuTable.block_values[sudoku.RowColToBlock(row, col)][value] then\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "function sudoku.CalcInvalidCells(sudokuTable)\r\n    sudokuTable.invalid = {} -- reset to all good\r\n\r\n    for n = 1, 9 do\r\n        for i, cell_table in pairs(sudokuTable.row_values[n]) do\r\n            if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end\r\n        end\r\n        for i, cell_table in pairs(sudokuTable.col_values[n]) do\r\n            if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end\r\n        end\r\n        for i, cell_table in pairs(sudokuTable.block_values[n]) do\r\n            if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 261,
    "text": "sudokuTable.invalid = {}",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "for n = 1, 9 do\r\n        for i, cell_table in pairs(sudokuTable.row_values[n]) do\r\n            if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end\r\n        end\r\n        for i, cell_table in pairs(sudokuTable.col_values[n]) do\r\n            if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end\r\n        end\r\n        for i, cell_table in pairs(sudokuTable.block_values[n]) do\r\n            if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 263,
    "text": "for i, cell_table in pairs(sudokuTable.row_values[n]) do\r\n            if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 264,
    "text": "if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 266,
    "text": "sudokuTable.invalid[cell] = true",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "for i, cell_table in pairs(sudokuTable.col_values[n]) do\r\n            if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 268,
    "text": "for i, cell_table in pairs(sudokuTable.block_values[n]) do\r\n            if TableCount(cell_table) > 1 then\r\n                for j, cell in pairs(cell_table) do\r\n                    sudokuTable.invalid[cell] = true\r\n                end\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 269,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 270,
    "text": "function sudoku.GetPossible(sudokuTable, row, col)\r\n    return sudokuTable.possible[sudoku.RowColToCell(row, col)]\r\nend",
    "type": "function"
  }, {
    "id": 271,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 272,
    "text": "function sudoku.GetCellPossible(sudokuTable, cell)\r\n    return sudokuTable.possible[cell]\r\nend",
    "type": "function"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "function sudoku.SetPossible(sudokuTable, row, col, possibleTable)\r\n    sudokuTable.possible[sudoku.RowColToCell(row, col)] = possibleTable\r\nend",
    "type": "function"
  }, {
    "id": 275,
    "text": "sudokuTable.possible[sudoku.RowColToCell(row, col)] = possibleTable",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 277,
    "text": "function sudoku.SetCellPossible(sudokuTable, cell, possibleTable)\r\n    sudokuTable.possible[cell] = possibleTable\r\nend",
    "type": "function"
  }, {
    "id": 278,
    "text": "sudokuTable.possible[cell] = possibleTable",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 280,
    "text": "function sudoku.RemovePossible(sudokuTable, row, col, value)\r\n    return sudoku.RemoveCellPossible(sudokuTable, sudoku.RowColToCell(row, col), value)\r\nend",
    "type": "function"
  }, {
    "id": 281,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 282,
    "text": "function sudoku.RemoveCellPossible(sudokuTable, cell, value)\r\n    sudokuTable.possible[cell][value] = nil\r\nend",
    "type": "function"
  }, {
    "id": 283,
    "text": "sudokuTable.possible[cell][value] = nil",
    "type": "statement:assign"
  }, {
    "id": 284,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 285,
    "text": "function sudoku.RemovePossibleAll(sudokuTable, cell, value, exceptTable, break_if_empty)\r\n    exceptTable = exceptTable or {}\r\n    break_if_empty = break_if_empty or false\r\n\r\n    for i, c in ipairs(sudoku.cellToRowColBlockCellsArray[cell]) do\r\n        if (not exceptTable[c]) and sudokuTable.possible[c][value] then\r\n            sudokuTable.possible[c][value] = nil\r\n            if break_if_empty and (not sudoku.HasCellValue(sudokuTable, c)) and TableIsEmpty(sudokuTable.possible[c]) then\r\n                return\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 286,
    "text": "exceptTable = exceptTable or {}",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "break_if_empty = break_if_empty or false",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "for i, c in ipairs(sudoku.cellToRowColBlockCellsArray[cell]) do\r\n        if (not exceptTable[c]) and sudokuTable.possible[c][value] then\r\n            sudokuTable.possible[c][value] = nil\r\n            if break_if_empty and (not sudoku.HasCellValue(sudokuTable, c)) and TableIsEmpty(sudokuTable.possible[c]) then\r\n                return\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 289,
    "text": "if (not exceptTable[c]) and sudokuTable.possible[c][value] then\r\n            sudokuTable.possible[c][value] = nil\r\n            if break_if_empty and (not sudoku.HasCellValue(sudokuTable, c)) and TableIsEmpty(sudokuTable.possible[c]) then\r\n                return\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 290,
    "text": "sudokuTable.possible[c][value] = nil",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "if break_if_empty and (not sudoku.HasCellValue(sudokuTable, c)) and TableIsEmpty(sudokuTable.possible[c]) then\r\n                return\r\n            end",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 293,
    "text": "function sudoku.RemovePossibleRow(sudokuTable, row, value, exceptTable)\r\n    exceptTable = exceptTable or {}\r\n    for col = 1, 9 do\r\n        local cell = sudoku.RowColToCell(row, col)\r\n        if (not exceptTable[cell]) and sudokuTable.possible[cell][value] then\r\n            sudokuTable.possible[cell][value] = nil\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 294,
    "text": "for col = 1, 9 do\r\n        local cell = sudoku.RowColToCell(row, col)\r\n        if (not exceptTable[cell]) and sudokuTable.possible[cell][value] then\r\n            sudokuTable.possible[cell][value] = nil\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 295,
    "text": "local cell = sudoku.RowColToCell(row, col)",
    "type": "statement:localassign"
  }, {
    "id": 296,
    "text": "if (not exceptTable[cell]) and sudokuTable.possible[cell][value] then\r\n            sudokuTable.possible[cell][value] = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "function sudoku.RemovePossibleCol(sudokuTable, col, value, exceptTable)\r\n    exceptTable = exceptTable or {}\r\n    for row = 1, 9 do\r\n        local cell = sudoku.RowColToCell(row, col)\r\n        if (not exceptTable[cell]) and sudokuTable.possible[cell][value] then\r\n            sudokuTable.possible[cell][value] = nil\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 299,
    "text": "for row = 1, 9 do\r\n        local cell = sudoku.RowColToCell(row, col)\r\n        if (not exceptTable[cell]) and sudokuTable.possible[cell][value] then\r\n            sudokuTable.possible[cell][value] = nil\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "function sudoku.RemovePossibleBlock(sudokuTable, block, value, exceptTable)\r\n    exceptTable = exceptTable or {}\r\n    local block_cell = sudoku.BlockToCell(block)\r\n    for n = 1, 9 do\r\n        local cell = n + block_cell + sudoku.LinearBlockCellTable[n]\r\n        if (not exceptTable[cell]) and sudokuTable.possible[cell][value] then\r\n            sudokuTable.possible[cell][value] = nil\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 302,
    "text": "local block_cell = sudoku.BlockToCell(block)",
    "type": "statement:localassign"
  }, {
    "id": 303,
    "text": "for n = 1, 9 do\r\n        local cell = n + block_cell + sudoku.LinearBlockCellTable[n]\r\n        if (not exceptTable[cell]) and sudokuTable.possible[cell][value] then\r\n            sudokuTable.possible[cell][value] = nil\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 304,
    "text": "local cell = n + block_cell + sudoku.LinearBlockCellTable[n]",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 306,
    "text": "function sudoku.FindPossibleCountRowColBlock(sudokuTable)\r\n    local row_possible   = {}\r\n    local col_possible   = {}\r\n    local block_possible = {}\r\n\r\n    for cell = 1, 81 do\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n        local block    = sudoku.CellToBlock(cell)\r\n        local cell_possible = sudoku.GetCellPossible(sudokuTable, cell)\r\n\r\n        for pvalue, is_possible in pairs(cell_possible) do\r\n            if not row_possible[row]     then row_possible[row] = {} end\r\n            if not col_possible[col]     then col_possible[col] = {} end\r\n            if not block_possible[block] then block_possible[block] = {} end\r\n\r\n            row_possible[row][pvalue]     = (row_possible[row][pvalue] or 0) + 1\r\n            col_possible[col][pvalue]     = (col_possible[col][pvalue] or 0) + 1\r\n            block_possible[block][pvalue] = (block_possible[block][pvalue] or 0) + 1\r\n        end\r\n    end\r\n\r\n    return row_possible, col_possible, block_possible\r\nend",
    "type": "function"
  }, {
    "id": 307,
    "text": "local row_possible   = {}",
    "type": "statement:localassign"
  }, {
    "id": 308,
    "text": "local col_possible   = {}",
    "type": "statement:localassign"
  }, {
    "id": 309,
    "text": "local block_possible = {}",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "for cell = 1, 81 do\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n        local block    = sudoku.CellToBlock(cell)\r\n        local cell_possible = sudoku.GetCellPossible(sudokuTable, cell)\r\n\r\n        for pvalue, is_possible in pairs(cell_possible) do\r\n            if not row_possible[row]     then row_possible[row] = {} end\r\n            if not col_possible[col]     then col_possible[col] = {} end\r\n            if not block_possible[block] then block_possible[block] = {} end\r\n\r\n            row_possible[row][pvalue]     = (row_possible[row][pvalue] or 0) + 1\r\n            col_possible[col][pvalue]     = (col_possible[col][pvalue] or 0) + 1\r\n            block_possible[block][pvalue] = (block_possible[block][pvalue] or 0) + 1\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 311,
    "text": "local cell_possible = sudoku.GetCellPossible(sudokuTable, cell)",
    "type": "statement:localassign"
  }, {
    "id": 312,
    "text": "for pvalue, is_possible in pairs(cell_possible) do\r\n            if not row_possible[row]     then row_possible[row] = {} end\r\n            if not col_possible[col]     then col_possible[col] = {} end\r\n            if not block_possible[block] then block_possible[block] = {} end\r\n\r\n            row_possible[row][pvalue]     = (row_possible[row][pvalue] or 0) + 1\r\n            col_possible[col][pvalue]     = (col_possible[col][pvalue] or 0) + 1\r\n            block_possible[block][pvalue] = (block_possible[block][pvalue] or 0) + 1\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 313,
    "text": "if not row_possible[row]     then row_possible[row] = {} end",
    "type": "statement:if"
  }, {
    "id": 314,
    "text": "row_possible[row] = {}",
    "type": "statement:assign"
  }, {
    "id": 315,
    "text": "if not col_possible[col]     then col_possible[col] = {} end",
    "type": "statement:if"
  }, {
    "id": 316,
    "text": "col_possible[col] = {}",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "if not block_possible[block] then block_possible[block] = {} end",
    "type": "statement:if"
  }, {
    "id": 318,
    "text": "block_possible[block] = {}",
    "type": "statement:assign"
  }, {
    "id": 319,
    "text": "row_possible[row][pvalue]     = (row_possible[row][pvalue] or 0) + 1",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "col_possible[col][pvalue]     = (col_possible[col][pvalue] or 0) + 1",
    "type": "statement:assign"
  }, {
    "id": 321,
    "text": "block_possible[block][pvalue] = (block_possible[block][pvalue] or 0) + 1",
    "type": "statement:assign"
  }, {
    "id": 322,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 323,
    "text": "function sudoku.FindPossibleCell(sudokuTable, row, col)\r\n    local possible = {}\r\n\r\n    -- gather up all the set values in row, col, and block\r\n    local rowValues   = sudokuTable.row_values[row]\r\n    local colValues   = sudokuTable.col_values[col]\r\n    local blockValues = sudokuTable.block_values[sudoku.RowColToBlock(row, col)]\r\n    -- remove the set values from the possible values\r\n    for v = 1, 9 do\r\n        if (rowValues[v] == nil) and (colValues[v] == nil) and (blockValues[v] == nil) then\r\n            possible[v] = v\r\n        end\r\n    end\r\n\r\n    return possible\r\nend",
    "type": "function"
  }, {
    "id": 324,
    "text": "local possible = {}",
    "type": "statement:localassign"
  }, {
    "id": 325,
    "text": "local rowValues   = sudokuTable.row_values[row]",
    "type": "statement:localassign"
  }, {
    "id": 326,
    "text": "local colValues   = sudokuTable.col_values[col]",
    "type": "statement:localassign"
  }, {
    "id": 327,
    "text": "local blockValues = sudokuTable.block_values[sudoku.RowColToBlock(row, col)]",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "for v = 1, 9 do\r\n        if (rowValues[v] == nil) and (colValues[v] == nil) and (blockValues[v] == nil) then\r\n            possible[v] = v\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 329,
    "text": "if (rowValues[v] == nil) and (colValues[v] == nil) and (blockValues[v] == nil) then\r\n            possible[v] = v\r\n        end",
    "type": "statement:if"
  }, {
    "id": 330,
    "text": "possible[v] = v",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 332,
    "text": "function sudoku.CalcAllPossible(sudokuTable)\r\n    for cell = 1, 81 do\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n        local possible = {}\r\n\r\n        if not sudoku.HasCellValue(sudokuTable, cell) then\r\n            local block = sudoku.CellToBlock(cell)\r\n\r\n            for v = 1, 9 do\r\n                if (sudokuTable.row_values[row][v] == nil) and\r\n                   (sudokuTable.col_values[col][v] == nil) and\r\n                   (sudokuTable.block_values[block][v] == nil) then\r\n                    possible[v] = v\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n        sudoku.SetCellPossible(sudokuTable, cell, possible)\r\n    end\r\n\r\n    -- this function checks flags to see if it should run\r\n    sudoku.RemovePossibleGroups(sudokuTable)\r\nend",
    "type": "function"
  }, {
    "id": 333,
    "text": "for cell = 1, 81 do\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n        local possible = {}\r\n\r\n        if not sudoku.HasCellValue(sudokuTable, cell) then\r\n            local block = sudoku.CellToBlock(cell)\r\n\r\n            for v = 1, 9 do\r\n                if (sudokuTable.row_values[row][v] == nil) and\r\n                   (sudokuTable.col_values[col][v] == nil) and\r\n                   (sudokuTable.block_values[block][v] == nil) then\r\n                    possible[v] = v\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n        sudoku.SetCellPossible(sudokuTable, cell, possible)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 334,
    "text": "if not sudoku.HasCellValue(sudokuTable, cell) then\r\n            local block = sudoku.CellToBlock(cell)\r\n\r\n            for v = 1, 9 do\r\n                if (sudokuTable.row_values[row][v] == nil) and\r\n                   (sudokuTable.col_values[col][v] == nil) and\r\n                   (sudokuTable.block_values[block][v] == nil) then\r\n                    possible[v] = v\r\n                end\r\n            end\r\n\r\n        end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "local block = sudoku.CellToBlock(cell)",
    "type": "statement:localassign"
  }, {
    "id": 336,
    "text": "for v = 1, 9 do\r\n                if (sudokuTable.row_values[row][v] == nil) and\r\n                   (sudokuTable.col_values[col][v] == nil) and\r\n                   (sudokuTable.block_values[block][v] == nil) then\r\n                    possible[v] = v\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 337,
    "text": "if (sudokuTable.row_values[row][v] == nil) and\r\n                   (sudokuTable.col_values[col][v] == nil) and\r\n                   (sudokuTable.block_values[block][v] == nil) then\r\n                    possible[v] = v\r\n                end",
    "type": "statement:if"
  }, {
    "id": 338,
    "text": "sudoku.SetCellPossible(sudokuTable, cell, possible)",
    "type": "statement:functioncall"
  }, {
    "id": 339,
    "text": "sudoku.RemovePossibleGroups(sudokuTable)",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 341,
    "text": "function sudoku.FindAllPossibleGroups(sudokuTable)\r\n    local possible_pairs    = {rows = {}, cols = {}, blocks = {}}\r\n    local possible_triplets = {rows = {}, cols = {}, blocks = {}}\r\n    local possible_quads    = {rows = {}, cols = {}, blocks = {}}\r\n    local char0 = string.byte(\"0\")\r\n\r\n    local cache_key_flags = 1*booltoint(sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_PAIRS]) +\r\n                            2*booltoint(sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_TRIPLETS]) +\r\n                            4*booltoint(sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_QUADS])\r\n\r\n    local cache_keys = { 10^1, 10^2, 10^3, 10^4, 10^5, 10^6, 10^7, 10^8, 10^9 }\r\n\r\n    local function add_possible(atable, rcb_key, key, cell)\r\n        local a = atable[rcb_key]\r\n        if not a then\r\n            atable[rcb_key] = { [key] = {cell} }\r\n        elseif not a[key] then\r\n            a[key] = {cell}\r\n        else\r\n            a[key][#a[key]+1] = cell\r\n        end\r\n    end\r\n\r\n    for cell = 1, 81 do\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n        local block    = sudoku.CellToBlock(cell)\r\n\r\n        local cell_possible = sudoku.GetCellPossible(sudokuTable, cell)\r\n        local cell_possible_table = {}\r\n        local cache_key = cache_key_flags\r\n\r\n        -- convert key, value table to indexed table and a key for the cache\r\n        local count = 0\r\n        for n = 1, 9 do\r\n            if cell_possible[n] then\r\n                cell_possible_table[#cell_possible_table+1] = char0+n\r\n                cache_key = cache_key + cache_keys[n]\r\n                count = count + 1\r\n            end\r\n        end\r\n\r\n        local possible_pairs_keys    = {}\r\n        local possible_triplets_keys = {}\r\n        local possible_quads_keys    = {}\r\n\r\n        -- either use the cached key table or create a new key table for the possible\r\n        -- Note: cache cuts time for 100 calls to this fn w/ empty puzzle from 8 to 1 sec\r\n\r\n        if (count > 1) and sudoku.FindAllPossibleGroups_Cache[cache_key] then\r\n            possible_pairs_keys    = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_pairs\r\n            possible_triplets_keys = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_triplets\r\n            possible_quads_keys    = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_quads\r\n        elseif (count > 1) then\r\n\r\n            local elim_pairs    = (count == 2) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_PAIRS]\r\n            local elim_triplets = (count == 3) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_TRIPLETS]\r\n            local elim_quads    = (count == 4) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_QUADS]\r\n\r\n            for i = 1, count do\r\n                for j = i+1, count do\r\n                    local pkey = string.char(cell_possible_table[i], cell_possible_table[j])\r\n                    if elim_pairs then\r\n                        possible_pairs_keys[#possible_pairs_keys+1] = pkey\r\n                    end\r\n\r\n                    for k = j+1, count do\r\n                        local tkey = pkey..string.char(cell_possible_table[k])\r\n                        if elim_triplets then\r\n                            possible_triplets_keys[#possible_triplets_keys+1] = tkey\r\n                        end\r\n\r\n                        if elim_quads then\r\n                            for l = k+1, count do\r\n                                local qkey = tkey..string.char(cell_possible_table[l])\r\n                                possible_quads_keys[#possible_quads_keys+1] = qkey\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key] = {}\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key].possible_pairs    = possible_pairs_keys\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key].possible_triplets = possible_triplets_keys\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key].possible_quads    = possible_quads_keys\r\n        end\r\n\r\n        for k, key in pairs(possible_pairs_keys) do\r\n            add_possible(possible_pairs.rows,   row,   key, cell)\r\n            add_possible(possible_pairs.cols,   col,   key, cell)\r\n            add_possible(possible_pairs.blocks, block, key, cell)\r\n        end\r\n        for k, key in pairs(possible_triplets_keys) do\r\n            add_possible(possible_triplets.rows,   row,   key, cell)\r\n            add_possible(possible_triplets.cols,   col,   key, cell)\r\n            add_possible(possible_triplets.blocks, block, key, cell)\r\n        end\r\n        for k, key in pairs(possible_quads_keys) do\r\n            add_possible(possible_quads.rows,   row,   key, cell)\r\n            add_possible(possible_quads.cols,   col,   key, cell)\r\n            add_possible(possible_quads.blocks, block, key, cell)\r\n        end\r\n    end\r\n\r\n    return possible_pairs, possible_triplets, possible_quads\r\nend",
    "type": "function"
  }, {
    "id": 342,
    "text": "local possible_pairs    = {rows = {}, cols = {}, blocks = {}}",
    "type": "statement:localassign"
  }, {
    "id": 343,
    "text": "local possible_triplets = {rows = {}, cols = {}, blocks = {}}",
    "type": "statement:localassign"
  }, {
    "id": 344,
    "text": "local possible_quads    = {rows = {}, cols = {}, blocks = {}}",
    "type": "statement:localassign"
  }, {
    "id": 345,
    "text": "local char0 = string.byte(\"0\")",
    "type": "statement:localassign"
  }, {
    "id": 346,
    "text": "local cache_key_flags = 1*booltoint(sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_PAIRS]) +\r\n                            2*booltoint(sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_TRIPLETS]) +\r\n                            4*booltoint(sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_QUADS])",
    "type": "statement:localassign"
  }, {
    "id": 347,
    "text": "local cache_keys = { 10^1, 10^2, 10^3, 10^4, 10^5, 10^6, 10^7, 10^8, 10^9 }",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "local function add_possible(atable, rcb_key, key, cell)\r\n        local a = atable[rcb_key]\r\n        if not a then\r\n            atable[rcb_key] = { [key] = {cell} }\r\n        elseif not a[key] then\r\n            a[key] = {cell}\r\n        else\r\n            a[key][#a[key]+1] = cell\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 349,
    "text": "local a = atable[rcb_key]",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "if not a then\r\n            atable[rcb_key] = { [key] = {cell} }\r\n        elseif not a[key] then\r\n            a[key] = {cell}\r\n        else\r\n            a[key][#a[key]+1] = cell\r\n        end",
    "type": "statement:if"
  }, {
    "id": 351,
    "text": "atable[rcb_key] = { [key] = {cell} }",
    "type": "statement:assign"
  }, {
    "id": 352,
    "text": "a[key] = {cell}",
    "type": "statement:assign"
  }, {
    "id": 353,
    "text": "a[key][#a[key]+1] = cell",
    "type": "statement:assign"
  }, {
    "id": 354,
    "text": "for cell = 1, 81 do\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n        local block    = sudoku.CellToBlock(cell)\r\n\r\n        local cell_possible = sudoku.GetCellPossible(sudokuTable, cell)\r\n        local cell_possible_table = {}\r\n        local cache_key = cache_key_flags\r\n\r\n        -- convert key, value table to indexed table and a key for the cache\r\n        local count = 0\r\n        for n = 1, 9 do\r\n            if cell_possible[n] then\r\n                cell_possible_table[#cell_possible_table+1] = char0+n\r\n                cache_key = cache_key + cache_keys[n]\r\n                count = count + 1\r\n            end\r\n        end\r\n\r\n        local possible_pairs_keys    = {}\r\n        local possible_triplets_keys = {}\r\n        local possible_quads_keys    = {}\r\n\r\n        -- either use the cached key table or create a new key table for the possible\r\n        -- Note: cache cuts time for 100 calls to this fn w/ empty puzzle from 8 to 1 sec\r\n\r\n        if (count > 1) and sudoku.FindAllPossibleGroups_Cache[cache_key] then\r\n            possible_pairs_keys    = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_pairs\r\n            possible_triplets_keys = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_triplets\r\n            possible_quads_keys    = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_quads\r\n        elseif (count > 1) then\r\n\r\n            local elim_pairs    = (count == 2) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_PAIRS]\r\n            local elim_triplets = (count == 3) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_TRIPLETS]\r\n            local elim_quads    = (count == 4) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_QUADS]\r\n\r\n            for i = 1, count do\r\n                for j = i+1, count do\r\n                    local pkey = string.char(cell_possible_table[i], cell_possible_table[j])\r\n                    if elim_pairs then\r\n                        possible_pairs_keys[#possible_pairs_keys+1] = pkey\r\n                    end\r\n\r\n                    for k = j+1, count do\r\n                        local tkey = pkey..string.char(cell_possible_table[k])\r\n                        if elim_triplets then\r\n                            possible_triplets_keys[#possible_triplets_keys+1] = tkey\r\n                        end\r\n\r\n                        if elim_quads then\r\n                            for l = k+1, count do\r\n                                local qkey = tkey..string.char(cell_possible_table[l])\r\n                                possible_quads_keys[#possible_quads_keys+1] = qkey\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key] = {}\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key].possible_pairs    = possible_pairs_keys\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key].possible_triplets = possible_triplets_keys\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key].possible_quads    = possible_quads_keys\r\n        end\r\n\r\n        for k, key in pairs(possible_pairs_keys) do\r\n            add_possible(possible_pairs.rows,   row,   key, cell)\r\n            add_possible(possible_pairs.cols,   col,   key, cell)\r\n            add_possible(possible_pairs.blocks, block, key, cell)\r\n        end\r\n        for k, key in pairs(possible_triplets_keys) do\r\n            add_possible(possible_triplets.rows,   row,   key, cell)\r\n            add_possible(possible_triplets.cols,   col,   key, cell)\r\n            add_possible(possible_triplets.blocks, block, key, cell)\r\n        end\r\n        for k, key in pairs(possible_quads_keys) do\r\n            add_possible(possible_quads.rows,   row,   key, cell)\r\n            add_possible(possible_quads.cols,   col,   key, cell)\r\n            add_possible(possible_quads.blocks, block, key, cell)\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 355,
    "text": "local cell_possible_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 356,
    "text": "local cache_key = cache_key_flags",
    "type": "statement:localassign"
  }, {
    "id": 357,
    "text": "for n = 1, 9 do\r\n            if cell_possible[n] then\r\n                cell_possible_table[#cell_possible_table+1] = char0+n\r\n                cache_key = cache_key + cache_keys[n]\r\n                count = count + 1\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 358,
    "text": "if cell_possible[n] then\r\n                cell_possible_table[#cell_possible_table+1] = char0+n\r\n                cache_key = cache_key + cache_keys[n]\r\n                count = count + 1\r\n            end",
    "type": "statement:if"
  }, {
    "id": 359,
    "text": "cell_possible_table[#cell_possible_table+1] = char0+n",
    "type": "statement:assign"
  }, {
    "id": 360,
    "text": "cache_key = cache_key + cache_keys[n]",
    "type": "statement:assign"
  }, {
    "id": 361,
    "text": "local possible_pairs_keys    = {}",
    "type": "statement:localassign"
  }, {
    "id": 362,
    "text": "local possible_triplets_keys = {}",
    "type": "statement:localassign"
  }, {
    "id": 363,
    "text": "local possible_quads_keys    = {}",
    "type": "statement:localassign"
  }, {
    "id": 364,
    "text": "if (count > 1) and sudoku.FindAllPossibleGroups_Cache[cache_key] then\r\n            possible_pairs_keys    = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_pairs\r\n            possible_triplets_keys = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_triplets\r\n            possible_quads_keys    = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_quads\r\n        elseif (count > 1) then\r\n\r\n            local elim_pairs    = (count == 2) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_PAIRS]\r\n            local elim_triplets = (count == 3) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_TRIPLETS]\r\n            local elim_quads    = (count == 4) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_QUADS]\r\n\r\n            for i = 1, count do\r\n                for j = i+1, count do\r\n                    local pkey = string.char(cell_possible_table[i], cell_possible_table[j])\r\n                    if elim_pairs then\r\n                        possible_pairs_keys[#possible_pairs_keys+1] = pkey\r\n                    end\r\n\r\n                    for k = j+1, count do\r\n                        local tkey = pkey..string.char(cell_possible_table[k])\r\n                        if elim_triplets then\r\n                            possible_triplets_keys[#possible_triplets_keys+1] = tkey\r\n                        end\r\n\r\n                        if elim_quads then\r\n                            for l = k+1, count do\r\n                                local qkey = tkey..string.char(cell_possible_table[l])\r\n                                possible_quads_keys[#possible_quads_keys+1] = qkey\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key] = {}\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key].possible_pairs    = possible_pairs_keys\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key].possible_triplets = possible_triplets_keys\r\n            sudoku.FindAllPossibleGroups_Cache[cache_key].possible_quads    = possible_quads_keys\r\n        end",
    "type": "statement:if"
  }, {
    "id": 365,
    "text": "possible_pairs_keys    = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_pairs",
    "type": "statement:assign"
  }, {
    "id": 366,
    "text": "possible_triplets_keys = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_triplets",
    "type": "statement:assign"
  }, {
    "id": 367,
    "text": "possible_quads_keys    = sudoku.FindAllPossibleGroups_Cache[cache_key].possible_quads",
    "type": "statement:assign"
  }, {
    "id": 368,
    "text": "local elim_pairs    = (count == 2) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_PAIRS]",
    "type": "statement:localassign"
  }, {
    "id": 369,
    "text": "local elim_triplets = (count == 3) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_TRIPLETS]",
    "type": "statement:localassign"
  }, {
    "id": 370,
    "text": "local elim_quads    = (count == 4) or sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_QUADS]",
    "type": "statement:localassign"
  }, {
    "id": 371,
    "text": "for i = 1, count do\r\n                for j = i+1, count do\r\n                    local pkey = string.char(cell_possible_table[i], cell_possible_table[j])\r\n                    if elim_pairs then\r\n                        possible_pairs_keys[#possible_pairs_keys+1] = pkey\r\n                    end\r\n\r\n                    for k = j+1, count do\r\n                        local tkey = pkey..string.char(cell_possible_table[k])\r\n                        if elim_triplets then\r\n                            possible_triplets_keys[#possible_triplets_keys+1] = tkey\r\n                        end\r\n\r\n                        if elim_quads then\r\n                            for l = k+1, count do\r\n                                local qkey = tkey..string.char(cell_possible_table[l])\r\n                                possible_quads_keys[#possible_quads_keys+1] = qkey\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 372,
    "text": "for j = i+1, count do\r\n                    local pkey = string.char(cell_possible_table[i], cell_possible_table[j])\r\n                    if elim_pairs then\r\n                        possible_pairs_keys[#possible_pairs_keys+1] = pkey\r\n                    end\r\n\r\n                    for k = j+1, count do\r\n                        local tkey = pkey..string.char(cell_possible_table[k])\r\n                        if elim_triplets then\r\n                            possible_triplets_keys[#possible_triplets_keys+1] = tkey\r\n                        end\r\n\r\n                        if elim_quads then\r\n                            for l = k+1, count do\r\n                                local qkey = tkey..string.char(cell_possible_table[l])\r\n                                possible_quads_keys[#possible_quads_keys+1] = qkey\r\n                            end\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 373,
    "text": "local pkey = string.char(cell_possible_table[i], cell_possible_table[j])",
    "type": "statement:localassign"
  }, {
    "id": 374,
    "text": "if elim_pairs then\r\n                        possible_pairs_keys[#possible_pairs_keys+1] = pkey\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 375,
    "text": "possible_pairs_keys[#possible_pairs_keys+1] = pkey",
    "type": "statement:assign"
  }, {
    "id": 376,
    "text": "for k = j+1, count do\r\n                        local tkey = pkey..string.char(cell_possible_table[k])\r\n                        if elim_triplets then\r\n                            possible_triplets_keys[#possible_triplets_keys+1] = tkey\r\n                        end\r\n\r\n                        if elim_quads then\r\n                            for l = k+1, count do\r\n                                local qkey = tkey..string.char(cell_possible_table[l])\r\n                                possible_quads_keys[#possible_quads_keys+1] = qkey\r\n                            end\r\n                        end\r\n                    end",
    "type": "statement:numericfor"
  }, {
    "id": 377,
    "text": "local tkey = pkey..string.char(cell_possible_table[k])",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "if elim_triplets then\r\n                            possible_triplets_keys[#possible_triplets_keys+1] = tkey\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 379,
    "text": "possible_triplets_keys[#possible_triplets_keys+1] = tkey",
    "type": "statement:assign"
  }, {
    "id": 380,
    "text": "if elim_quads then\r\n                            for l = k+1, count do\r\n                                local qkey = tkey..string.char(cell_possible_table[l])\r\n                                possible_quads_keys[#possible_quads_keys+1] = qkey\r\n                            end\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 381,
    "text": "for l = k+1, count do\r\n                                local qkey = tkey..string.char(cell_possible_table[l])\r\n                                possible_quads_keys[#possible_quads_keys+1] = qkey\r\n                            end",
    "type": "statement:numericfor"
  }, {
    "id": 382,
    "text": "local qkey = tkey..string.char(cell_possible_table[l])",
    "type": "statement:localassign"
  }, {
    "id": 383,
    "text": "possible_quads_keys[#possible_quads_keys+1] = qkey",
    "type": "statement:assign"
  }, {
    "id": 384,
    "text": "sudoku.FindAllPossibleGroups_Cache[cache_key] = {}",
    "type": "statement:assign"
  }, {
    "id": 385,
    "text": "sudoku.FindAllPossibleGroups_Cache[cache_key].possible_pairs    = possible_pairs_keys",
    "type": "statement:assign"
  }, {
    "id": 386,
    "text": "sudoku.FindAllPossibleGroups_Cache[cache_key].possible_triplets = possible_triplets_keys",
    "type": "statement:assign"
  }, {
    "id": 387,
    "text": "sudoku.FindAllPossibleGroups_Cache[cache_key].possible_quads    = possible_quads_keys",
    "type": "statement:assign"
  }, {
    "id": 388,
    "text": "for k, key in pairs(possible_pairs_keys) do\r\n            add_possible(possible_pairs.rows,   row,   key, cell)\r\n            add_possible(possible_pairs.cols,   col,   key, cell)\r\n            add_possible(possible_pairs.blocks, block, key, cell)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 389,
    "text": "add_possible(possible_pairs.rows,   row,   key, cell)",
    "type": "statement:functioncall"
  }, {
    "id": 390,
    "text": "add_possible(possible_pairs.cols,   col,   key, cell)",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "add_possible(possible_pairs.blocks, block, key, cell)",
    "type": "statement:functioncall"
  }, {
    "id": 392,
    "text": "for k, key in pairs(possible_triplets_keys) do\r\n            add_possible(possible_triplets.rows,   row,   key, cell)\r\n            add_possible(possible_triplets.cols,   col,   key, cell)\r\n            add_possible(possible_triplets.blocks, block, key, cell)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 393,
    "text": "add_possible(possible_triplets.rows,   row,   key, cell)",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "add_possible(possible_triplets.cols,   col,   key, cell)",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "add_possible(possible_triplets.blocks, block, key, cell)",
    "type": "statement:functioncall"
  }, {
    "id": 396,
    "text": "for k, key in pairs(possible_quads_keys) do\r\n            add_possible(possible_quads.rows,   row,   key, cell)\r\n            add_possible(possible_quads.cols,   col,   key, cell)\r\n            add_possible(possible_quads.blocks, block, key, cell)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 397,
    "text": "add_possible(possible_quads.rows,   row,   key, cell)",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "add_possible(possible_quads.cols,   col,   key, cell)",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "add_possible(possible_quads.blocks, block, key, cell)",
    "type": "statement:functioncall"
  }, {
    "id": 400,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 401,
    "text": "local function add_possible(atable, rcb_key, key, cell)\r\n        local a = atable[rcb_key]\r\n        if not a then\r\n            atable[rcb_key] = { [key] = {cell} }\r\n        elseif not a[key] then\r\n            a[key] = {cell}\r\n        else\r\n            a[key][#a[key]+1] = cell\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 402,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 403,
    "text": "function sudoku.FindAllNakedHiddenGroups(sudokuTable, find_all)\r\n    local flags = sudokuTable.flags\r\n\r\n    if find_all == true then\r\n        sudokuTable.flags = TableCopy(flags) -- unref the table\r\n        -- turn all ELIMINATE_XXX on\r\n        for n = sudoku.ELIMINATE_FLAG_MIN, sudoku.ELIMINATE_FLAG_MAX do\r\n            sudokuTable.flags[n] = true\r\n        end\r\n    end\r\n\r\n    local row_possible,   col_possible,      block_possible = sudoku.FindPossibleCountRowColBlock(sudokuTable)\r\n    local possible_pairs, possible_triplets, possible_quads = sudoku.FindAllPossibleGroups(sudokuTable)\r\n    local char0 = string.byte(\"0\")\r\n    local all_groups = { [2] = 36, [3] = 84, [4] = 126 } -- eg. 9!/(2! * (9-2)!)\r\n\r\n    if find_all == true then\r\n        sudokuTable.flags = flags -- put the flags back to how they were\r\n    end\r\n\r\n    local naked =\r\n    {\r\n        pairs    = {rows = {}, cols = {}, blocks = {}, cells = {}},\r\n        triplets = {rows = {}, cols = {}, blocks = {}, cells = {}},\r\n        quads    = {rows = {}, cols = {}, blocks = {}, cells = {}}\r\n    }\r\n    local hidden =\r\n    {\r\n        pairs    = {rows = {}, cols = {}, blocks = {}, cells = {}},\r\n        triplets = {rows = {}, cols = {}, blocks = {}, cells = {}},\r\n        quads    = {rows = {}, cols = {}, blocks = {}, cells = {}}\r\n    }\r\n\r\n    -- cache all the cell possible value counts\r\n    local cell_possible_count = {}\r\n    for n = 1, 81 do\r\n        cell_possible_count[n] = TableCount(sudoku.GetCellPossible(sudokuTable, n) or {})\r\n    end\r\n\r\n    local function dofind(rcb_table, num, key, cell_table_, rcb, rcb_possible)\r\n        local naked_cell_table  = {}\r\n        local naked_cell_count  = 0\r\n        local hidden_cell_table = {}\r\n        local hidden_cell_count = 0\r\n        local is_hidden = true\r\n\r\n        -- can only be exactly as many nums in key as in rcb for hidden\r\n        for n = 1, num do\r\n            if rcb_possible[string.byte(key, n)-char0] ~= num then\r\n                is_hidden = false\r\n                break\r\n            end\r\n        end\r\n\r\n        for n, cell in ipairs(cell_table_) do\r\n            if cell_possible_count[cell] == num then\r\n                naked_cell_table[#naked_cell_table+1] = cell\r\n                naked_cell_count = naked_cell_count + 1\r\n            end\r\n\r\n            if is_hidden then\r\n                hidden_cell_table[#hidden_cell_table+1] = cell\r\n                hidden_cell_count = hidden_cell_count + 1\r\n            end\r\n        end\r\n\r\n        -- has to be at least the same cell_count as num, if more then error, but...\r\n        if (naked_cell_count >= num) then\r\n            if not rcb_table.naked_table[rcb] then rcb_table.naked_table[rcb] = {} end\r\n            rcb_table.naked_table[rcb][key] = naked_cell_table\r\n\r\n            local cell_table = rcb_table.naked_table_base.cells\r\n            for n, cell in pairs(naked_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end\r\n        end\r\n        -- has to be at least the same cell_count as num, if more then error, but...\r\n        if is_hidden and (hidden_cell_count >= num) then\r\n            if not rcb_table.hidden_table[rcb] then rcb_table.hidden_table[rcb] = {} end\r\n            rcb_table.hidden_table[rcb][key] = hidden_cell_table\r\n\r\n            local cell_table = rcb_table.hidden_table_base.cells\r\n            for n, cell in pairs(hidden_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end\r\n        end\r\n    end\r\n\r\n    local function find(naked_table, hidden_table, possible_table, num)\r\n        local rcb_table = {}\r\n        rcb_table.naked_table_base  = naked_table\r\n        rcb_table.hidden_table_base = hidden_table\r\n\r\n        rcb_table.naked_table  = naked_table.rows\r\n        rcb_table.hidden_table = hidden_table.rows\r\n        for row, key_table in pairs(possible_table.rows) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, row, row_possible[row])\r\n            end\r\n        end\r\n\r\n        rcb_table.naked_table  = naked_table.cols\r\n        rcb_table.hidden_table = hidden_table.cols\r\n        for col, key_table in pairs(possible_table.cols) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, col, col_possible[col])\r\n            end\r\n        end\r\n\r\n        rcb_table.naked_table  = naked_table.blocks\r\n        rcb_table.hidden_table = hidden_table.blocks\r\n        for block, key_table in pairs(possible_table.blocks) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, block, block_possible[block])\r\n            end\r\n        end\r\n\r\n        return naked_table, hidden_table\r\n    end\r\n\r\n    naked.pairs,    hidden.pairs    = find(naked.pairs,    hidden.pairs,    possible_pairs,    2)\r\n    naked.triplets, hidden.triplets = find(naked.triplets, hidden.triplets, possible_triplets, 3)\r\n    naked.quads,    hidden.quads    = find(naked.quads,    hidden.quads,    possible_quads,    4)\r\n\r\n    return naked, hidden\r\nend",
    "type": "function"
  }, {
    "id": 404,
    "text": "local flags = sudokuTable.flags",
    "type": "statement:localassign"
  }, {
    "id": 405,
    "text": "if find_all == true then\r\n        sudokuTable.flags = TableCopy(flags) -- unref the table\r\n        -- turn all ELIMINATE_XXX on\r\n        for n = sudoku.ELIMINATE_FLAG_MIN, sudoku.ELIMINATE_FLAG_MAX do\r\n            sudokuTable.flags[n] = true\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 406,
    "text": "sudokuTable.flags = TableCopy(flags)",
    "type": "statement:assign"
  }, {
    "id": 407,
    "text": "for n = sudoku.ELIMINATE_FLAG_MIN, sudoku.ELIMINATE_FLAG_MAX do\r\n            sudokuTable.flags[n] = true\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 408,
    "text": "sudokuTable.flags[n] = true",
    "type": "statement:assign"
  }, {
    "id": 409,
    "text": "local row_possible,   col_possible,      block_possible = sudoku.FindPossibleCountRowColBlock(sudokuTable)",
    "type": "statement:localassign"
  }, {
    "id": 410,
    "text": "local possible_pairs, possible_triplets, possible_quads = sudoku.FindAllPossibleGroups(sudokuTable)",
    "type": "statement:localassign"
  }, {
    "id": 411,
    "text": "local all_groups = { [2] = 36, [3] = 84, [4] = 126 }",
    "type": "statement:localassign"
  }, {
    "id": 412,
    "text": "if find_all == true then\r\n        sudokuTable.flags = flags -- put the flags back to how they were\r\n    end",
    "type": "statement:if"
  }, {
    "id": 413,
    "text": "sudokuTable.flags = flags",
    "type": "statement:assign"
  }, {
    "id": 414,
    "text": "local naked =\r\n    {\r\n        pairs    = {rows = {}, cols = {}, blocks = {}, cells = {}},\r\n        triplets = {rows = {}, cols = {}, blocks = {}, cells = {}},\r\n        quads    = {rows = {}, cols = {}, blocks = {}, cells = {}}\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 415,
    "text": "local hidden =\r\n    {\r\n        pairs    = {rows = {}, cols = {}, blocks = {}, cells = {}},\r\n        triplets = {rows = {}, cols = {}, blocks = {}, cells = {}},\r\n        quads    = {rows = {}, cols = {}, blocks = {}, cells = {}}\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 416,
    "text": "local cell_possible_count = {}",
    "type": "statement:localassign"
  }, {
    "id": 417,
    "text": "for n = 1, 81 do\r\n        cell_possible_count[n] = TableCount(sudoku.GetCellPossible(sudokuTable, n) or {})\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 418,
    "text": "cell_possible_count[n] = TableCount(sudoku.GetCellPossible(sudokuTable, n) or {})",
    "type": "statement:assign"
  }, {
    "id": 419,
    "text": "local function dofind(rcb_table, num, key, cell_table_, rcb, rcb_possible)\r\n        local naked_cell_table  = {}\r\n        local naked_cell_count  = 0\r\n        local hidden_cell_table = {}\r\n        local hidden_cell_count = 0\r\n        local is_hidden = true\r\n\r\n        -- can only be exactly as many nums in key as in rcb for hidden\r\n        for n = 1, num do\r\n            if rcb_possible[string.byte(key, n)-char0] ~= num then\r\n                is_hidden = false\r\n                break\r\n            end\r\n        end\r\n\r\n        for n, cell in ipairs(cell_table_) do\r\n            if cell_possible_count[cell] == num then\r\n                naked_cell_table[#naked_cell_table+1] = cell\r\n                naked_cell_count = naked_cell_count + 1\r\n            end\r\n\r\n            if is_hidden then\r\n                hidden_cell_table[#hidden_cell_table+1] = cell\r\n                hidden_cell_count = hidden_cell_count + 1\r\n            end\r\n        end\r\n\r\n        -- has to be at least the same cell_count as num, if more then error, but...\r\n        if (naked_cell_count >= num) then\r\n            if not rcb_table.naked_table[rcb] then rcb_table.naked_table[rcb] = {} end\r\n            rcb_table.naked_table[rcb][key] = naked_cell_table\r\n\r\n            local cell_table = rcb_table.naked_table_base.cells\r\n            for n, cell in pairs(naked_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end\r\n        end\r\n        -- has to be at least the same cell_count as num, if more then error, but...\r\n        if is_hidden and (hidden_cell_count >= num) then\r\n            if not rcb_table.hidden_table[rcb] then rcb_table.hidden_table[rcb] = {} end\r\n            rcb_table.hidden_table[rcb][key] = hidden_cell_table\r\n\r\n            local cell_table = rcb_table.hidden_table_base.cells\r\n            for n, cell in pairs(hidden_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 420,
    "text": "local naked_cell_table  = {}",
    "type": "statement:localassign"
  }, {
    "id": 421,
    "text": "local naked_cell_count  = 0",
    "type": "statement:localassign"
  }, {
    "id": 422,
    "text": "local hidden_cell_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 423,
    "text": "local hidden_cell_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 424,
    "text": "local is_hidden = true",
    "type": "statement:localassign"
  }, {
    "id": 425,
    "text": "for n = 1, num do\r\n            if rcb_possible[string.byte(key, n)-char0] ~= num then\r\n                is_hidden = false\r\n                break\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 426,
    "text": "if rcb_possible[string.byte(key, n)-char0] ~= num then\r\n                is_hidden = false\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 427,
    "text": "is_hidden = false",
    "type": "statement:assign"
  }, {
    "id": 428,
    "text": "for n, cell in ipairs(cell_table_) do\r\n            if cell_possible_count[cell] == num then\r\n                naked_cell_table[#naked_cell_table+1] = cell\r\n                naked_cell_count = naked_cell_count + 1\r\n            end\r\n\r\n            if is_hidden then\r\n                hidden_cell_table[#hidden_cell_table+1] = cell\r\n                hidden_cell_count = hidden_cell_count + 1\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 429,
    "text": "if cell_possible_count[cell] == num then\r\n                naked_cell_table[#naked_cell_table+1] = cell\r\n                naked_cell_count = naked_cell_count + 1\r\n            end",
    "type": "statement:if"
  }, {
    "id": 430,
    "text": "naked_cell_table[#naked_cell_table+1] = cell",
    "type": "statement:assign"
  }, {
    "id": 431,
    "text": "naked_cell_count = naked_cell_count + 1",
    "type": "statement:assign"
  }, {
    "id": 432,
    "text": "if is_hidden then\r\n                hidden_cell_table[#hidden_cell_table+1] = cell\r\n                hidden_cell_count = hidden_cell_count + 1\r\n            end",
    "type": "statement:if"
  }, {
    "id": 433,
    "text": "hidden_cell_table[#hidden_cell_table+1] = cell",
    "type": "statement:assign"
  }, {
    "id": 434,
    "text": "hidden_cell_count = hidden_cell_count + 1",
    "type": "statement:assign"
  }, {
    "id": 435,
    "text": "if (naked_cell_count >= num) then\r\n            if not rcb_table.naked_table[rcb] then rcb_table.naked_table[rcb] = {} end\r\n            rcb_table.naked_table[rcb][key] = naked_cell_table\r\n\r\n            local cell_table = rcb_table.naked_table_base.cells\r\n            for n, cell in pairs(naked_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 436,
    "text": "if not rcb_table.naked_table[rcb] then rcb_table.naked_table[rcb] = {} end",
    "type": "statement:if"
  }, {
    "id": 437,
    "text": "rcb_table.naked_table[rcb] = {}",
    "type": "statement:assign"
  }, {
    "id": 438,
    "text": "rcb_table.naked_table[rcb][key] = naked_cell_table",
    "type": "statement:assign"
  }, {
    "id": 439,
    "text": "local cell_table = rcb_table.naked_table_base.cells",
    "type": "statement:localassign"
  }, {
    "id": 440,
    "text": "for n, cell in pairs(naked_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 441,
    "text": "if not cell_table[cell] then cell_table[cell] = {} end",
    "type": "statement:if"
  }, {
    "id": 442,
    "text": "cell_table[cell] = {}",
    "type": "statement:assign"
  }, {
    "id": 443,
    "text": "table.insert(cell_table[cell], key)",
    "type": "statement:functioncall"
  }, {
    "id": 444,
    "text": "if is_hidden and (hidden_cell_count >= num) then\r\n            if not rcb_table.hidden_table[rcb] then rcb_table.hidden_table[rcb] = {} end\r\n            rcb_table.hidden_table[rcb][key] = hidden_cell_table\r\n\r\n            local cell_table = rcb_table.hidden_table_base.cells\r\n            for n, cell in pairs(hidden_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 445,
    "text": "if not rcb_table.hidden_table[rcb] then rcb_table.hidden_table[rcb] = {} end",
    "type": "statement:if"
  }, {
    "id": 446,
    "text": "rcb_table.hidden_table[rcb] = {}",
    "type": "statement:assign"
  }, {
    "id": 447,
    "text": "rcb_table.hidden_table[rcb][key] = hidden_cell_table",
    "type": "statement:assign"
  }, {
    "id": 448,
    "text": "local cell_table = rcb_table.hidden_table_base.cells",
    "type": "statement:localassign"
  }, {
    "id": 449,
    "text": "for n, cell in pairs(hidden_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 450,
    "text": "local function find(naked_table, hidden_table, possible_table, num)\r\n        local rcb_table = {}\r\n        rcb_table.naked_table_base  = naked_table\r\n        rcb_table.hidden_table_base = hidden_table\r\n\r\n        rcb_table.naked_table  = naked_table.rows\r\n        rcb_table.hidden_table = hidden_table.rows\r\n        for row, key_table in pairs(possible_table.rows) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, row, row_possible[row])\r\n            end\r\n        end\r\n\r\n        rcb_table.naked_table  = naked_table.cols\r\n        rcb_table.hidden_table = hidden_table.cols\r\n        for col, key_table in pairs(possible_table.cols) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, col, col_possible[col])\r\n            end\r\n        end\r\n\r\n        rcb_table.naked_table  = naked_table.blocks\r\n        rcb_table.hidden_table = hidden_table.blocks\r\n        for block, key_table in pairs(possible_table.blocks) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, block, block_possible[block])\r\n            end\r\n        end\r\n\r\n        return naked_table, hidden_table\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 451,
    "text": "local rcb_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 452,
    "text": "rcb_table.naked_table_base  = naked_table",
    "type": "statement:assign"
  }, {
    "id": 453,
    "text": "rcb_table.hidden_table_base = hidden_table",
    "type": "statement:assign"
  }, {
    "id": 454,
    "text": "rcb_table.naked_table  = naked_table.rows",
    "type": "statement:assign"
  }, {
    "id": 455,
    "text": "rcb_table.hidden_table = hidden_table.rows",
    "type": "statement:assign"
  }, {
    "id": 456,
    "text": "for row, key_table in pairs(possible_table.rows) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, row, row_possible[row])\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 457,
    "text": "for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, row, row_possible[row])\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 458,
    "text": "dofind(rcb_table, num, key, cell_table, row, row_possible[row])",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "rcb_table.naked_table  = naked_table.cols",
    "type": "statement:assign"
  }, {
    "id": 460,
    "text": "rcb_table.hidden_table = hidden_table.cols",
    "type": "statement:assign"
  }, {
    "id": 461,
    "text": "for col, key_table in pairs(possible_table.cols) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, col, col_possible[col])\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 462,
    "text": "for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, col, col_possible[col])\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 463,
    "text": "dofind(rcb_table, num, key, cell_table, col, col_possible[col])",
    "type": "statement:functioncall"
  }, {
    "id": 464,
    "text": "rcb_table.naked_table  = naked_table.blocks",
    "type": "statement:assign"
  }, {
    "id": 465,
    "text": "rcb_table.hidden_table = hidden_table.blocks",
    "type": "statement:assign"
  }, {
    "id": 466,
    "text": "for block, key_table in pairs(possible_table.blocks) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, block, block_possible[block])\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 467,
    "text": "for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, block, block_possible[block])\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 468,
    "text": "dofind(rcb_table, num, key, cell_table, block, block_possible[block])",
    "type": "statement:functioncall"
  }, {
    "id": 469,
    "text": "naked.pairs,    hidden.pairs    = find(naked.pairs,    hidden.pairs,    possible_pairs,    2)",
    "type": "statement:assign"
  }, {
    "id": 470,
    "text": "naked.triplets, hidden.triplets = find(naked.triplets, hidden.triplets, possible_triplets, 3)",
    "type": "statement:assign"
  }, {
    "id": 471,
    "text": "naked.quads,    hidden.quads    = find(naked.quads,    hidden.quads,    possible_quads,    4)",
    "type": "statement:assign"
  }, {
    "id": 472,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 473,
    "text": "local function dofind(rcb_table, num, key, cell_table_, rcb, rcb_possible)\r\n        local naked_cell_table  = {}\r\n        local naked_cell_count  = 0\r\n        local hidden_cell_table = {}\r\n        local hidden_cell_count = 0\r\n        local is_hidden = true\r\n\r\n        -- can only be exactly as many nums in key as in rcb for hidden\r\n        for n = 1, num do\r\n            if rcb_possible[string.byte(key, n)-char0] ~= num then\r\n                is_hidden = false\r\n                break\r\n            end\r\n        end\r\n\r\n        for n, cell in ipairs(cell_table_) do\r\n            if cell_possible_count[cell] == num then\r\n                naked_cell_table[#naked_cell_table+1] = cell\r\n                naked_cell_count = naked_cell_count + 1\r\n            end\r\n\r\n            if is_hidden then\r\n                hidden_cell_table[#hidden_cell_table+1] = cell\r\n                hidden_cell_count = hidden_cell_count + 1\r\n            end\r\n        end\r\n\r\n        -- has to be at least the same cell_count as num, if more then error, but...\r\n        if (naked_cell_count >= num) then\r\n            if not rcb_table.naked_table[rcb] then rcb_table.naked_table[rcb] = {} end\r\n            rcb_table.naked_table[rcb][key] = naked_cell_table\r\n\r\n            local cell_table = rcb_table.naked_table_base.cells\r\n            for n, cell in pairs(naked_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end\r\n        end\r\n        -- has to be at least the same cell_count as num, if more then error, but...\r\n        if is_hidden and (hidden_cell_count >= num) then\r\n            if not rcb_table.hidden_table[rcb] then rcb_table.hidden_table[rcb] = {} end\r\n            rcb_table.hidden_table[rcb][key] = hidden_cell_table\r\n\r\n            local cell_table = rcb_table.hidden_table_base.cells\r\n            for n, cell in pairs(hidden_cell_table) do\r\n                if not cell_table[cell] then cell_table[cell] = {} end\r\n                table.insert(cell_table[cell], key)\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 474,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 475,
    "text": "local function find(naked_table, hidden_table, possible_table, num)\r\n        local rcb_table = {}\r\n        rcb_table.naked_table_base  = naked_table\r\n        rcb_table.hidden_table_base = hidden_table\r\n\r\n        rcb_table.naked_table  = naked_table.rows\r\n        rcb_table.hidden_table = hidden_table.rows\r\n        for row, key_table in pairs(possible_table.rows) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, row, row_possible[row])\r\n            end\r\n        end\r\n\r\n        rcb_table.naked_table  = naked_table.cols\r\n        rcb_table.hidden_table = hidden_table.cols\r\n        for col, key_table in pairs(possible_table.cols) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, col, col_possible[col])\r\n            end\r\n        end\r\n\r\n        rcb_table.naked_table  = naked_table.blocks\r\n        rcb_table.hidden_table = hidden_table.blocks\r\n        for block, key_table in pairs(possible_table.blocks) do\r\n            for key, cell_table in pairs(key_table) do\r\n                dofind(rcb_table, num, key, cell_table, block, block_possible[block])\r\n            end\r\n        end\r\n\r\n        return naked_table, hidden_table\r\n    end",
    "type": "function"
  }, {
    "id": 476,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 477,
    "text": "function sudoku.RemovePossibleGroups(sudokuTable)\r\n    -- must have at least one flag set\r\n    local has_elim_flags = false\r\n    for n = sudoku.ELIMINATE_FLAG_MIN, sudoku.ELIMINATE_FLAG_MAX do\r\n        if sudokuTable.flags[n] == true then\r\n            has_elim_flags = true\r\n            break\r\n        end\r\n    end\r\n    if has_elim_flags == false then\r\n        return\r\n    end\r\n\r\n    local naked, hidden = sudoku.FindAllNakedHiddenGroups(sudokuTable, false)\r\n    local char0 = string.byte(\"0\")\r\n\r\n    local function clear_possible(group_table, num, remove_fn)\r\n        for n = 1, 9 do\r\n            if group_table[n] then\r\n                for key, cell_table in pairs(group_table[n]) do\r\n\r\n                    local exceptTable = {}\r\n                    for k, v in pairs(cell_table) do\r\n                        exceptTable[v] = v\r\n                    end\r\n\r\n                    for k = 1, num do\r\n                        local val = string.byte(key, k)-char0\r\n                        remove_fn(sudokuTable, n, val, exceptTable)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    if (sudokuTable.flags[sudoku.ELIMINATE_NAKED_PAIRS] == true) then\r\n        clear_possible(naked.pairs.rows,   2, sudoku.RemovePossibleRow)\r\n        clear_possible(naked.pairs.cols,   2, sudoku.RemovePossibleCol)\r\n        clear_possible(naked.pairs.blocks, 2, sudoku.RemovePossibleBlock)\r\n    end\r\n    if (sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_PAIRS] == true) then\r\n        clear_possible(hidden.pairs.rows,   2, sudoku.RemovePossibleRow)\r\n        clear_possible(hidden.pairs.cols,   2, sudoku.RemovePossibleCol)\r\n        clear_possible(hidden.pairs.blocks, 2, sudoku.RemovePossibleBlock)\r\n    end\r\n\r\n    if (sudokuTable.flags[sudoku.ELIMINATE_NAKED_TRIPLETS] == true) then\r\n        clear_possible(naked.triplets.rows,   3, sudoku.RemovePossibleRow)\r\n        clear_possible(naked.triplets.cols,   3, sudoku.RemovePossibleCol)\r\n        clear_possible(naked.triplets.blocks, 3, sudoku.RemovePossibleBlock)\r\n    end\r\n    if (sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_TRIPLETS] == true) then\r\n        clear_possible(hidden.triplets.rows,   3, sudoku.RemovePossibleRow)\r\n        clear_possible(hidden.triplets.cols,   3, sudoku.RemovePossibleCol)\r\n        clear_possible(hidden.triplets.blocks, 3, sudoku.RemovePossibleBlock)\r\n    end\r\n\r\n    if (sudokuTable.flags[sudoku.ELIMINATE_NAKED_QUADS] == true) then\r\n        clear_possible(naked.quads.rows,   4, sudoku.RemovePossibleRow)\r\n        clear_possible(naked.quads.cols,   4, sudoku.RemovePossibleCol)\r\n        clear_possible(naked.quads.blocks, 4, sudoku.RemovePossibleBlock)\r\n    end\r\n    if (sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_QUADS] == true) then\r\n        clear_possible(hidden.quads.rows,   4, sudoku.RemovePossibleRow)\r\n        clear_possible(hidden.quads.cols,   4, sudoku.RemovePossibleCol)\r\n        clear_possible(hidden.quads.blocks, 4, sudoku.RemovePossibleBlock)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 478,
    "text": "local has_elim_flags = false",
    "type": "statement:localassign"
  }, {
    "id": 479,
    "text": "for n = sudoku.ELIMINATE_FLAG_MIN, sudoku.ELIMINATE_FLAG_MAX do\r\n        if sudokuTable.flags[n] == true then\r\n            has_elim_flags = true\r\n            break\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 480,
    "text": "if sudokuTable.flags[n] == true then\r\n            has_elim_flags = true\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 481,
    "text": "has_elim_flags = true",
    "type": "statement:assign"
  }, {
    "id": 482,
    "text": "if has_elim_flags == false then\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 483,
    "text": "local naked, hidden = sudoku.FindAllNakedHiddenGroups(sudokuTable, false)",
    "type": "statement:localassign"
  }, {
    "id": 484,
    "text": "local function clear_possible(group_table, num, remove_fn)\r\n        for n = 1, 9 do\r\n            if group_table[n] then\r\n                for key, cell_table in pairs(group_table[n]) do\r\n\r\n                    local exceptTable = {}\r\n                    for k, v in pairs(cell_table) do\r\n                        exceptTable[v] = v\r\n                    end\r\n\r\n                    for k = 1, num do\r\n                        local val = string.byte(key, k)-char0\r\n                        remove_fn(sudokuTable, n, val, exceptTable)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 485,
    "text": "for n = 1, 9 do\r\n            if group_table[n] then\r\n                for key, cell_table in pairs(group_table[n]) do\r\n\r\n                    local exceptTable = {}\r\n                    for k, v in pairs(cell_table) do\r\n                        exceptTable[v] = v\r\n                    end\r\n\r\n                    for k = 1, num do\r\n                        local val = string.byte(key, k)-char0\r\n                        remove_fn(sudokuTable, n, val, exceptTable)\r\n                    end\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 486,
    "text": "if group_table[n] then\r\n                for key, cell_table in pairs(group_table[n]) do\r\n\r\n                    local exceptTable = {}\r\n                    for k, v in pairs(cell_table) do\r\n                        exceptTable[v] = v\r\n                    end\r\n\r\n                    for k = 1, num do\r\n                        local val = string.byte(key, k)-char0\r\n                        remove_fn(sudokuTable, n, val, exceptTable)\r\n                    end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 487,
    "text": "for key, cell_table in pairs(group_table[n]) do\r\n\r\n                    local exceptTable = {}\r\n                    for k, v in pairs(cell_table) do\r\n                        exceptTable[v] = v\r\n                    end\r\n\r\n                    for k = 1, num do\r\n                        local val = string.byte(key, k)-char0\r\n                        remove_fn(sudokuTable, n, val, exceptTable)\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 488,
    "text": "local exceptTable = {}",
    "type": "statement:localassign"
  }, {
    "id": 489,
    "text": "for k, v in pairs(cell_table) do\r\n                        exceptTable[v] = v\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 490,
    "text": "exceptTable[v] = v",
    "type": "statement:assign"
  }, {
    "id": 491,
    "text": "for k = 1, num do\r\n                        local val = string.byte(key, k)-char0\r\n                        remove_fn(sudokuTable, n, val, exceptTable)\r\n                    end",
    "type": "statement:numericfor"
  }, {
    "id": 492,
    "text": "local val = string.byte(key, k)-char0",
    "type": "statement:localassign"
  }, {
    "id": 493,
    "text": "remove_fn(sudokuTable, n, val, exceptTable)",
    "type": "statement:functioncall"
  }, {
    "id": 494,
    "text": "if (sudokuTable.flags[sudoku.ELIMINATE_NAKED_PAIRS] == true) then\r\n        clear_possible(naked.pairs.rows,   2, sudoku.RemovePossibleRow)\r\n        clear_possible(naked.pairs.cols,   2, sudoku.RemovePossibleCol)\r\n        clear_possible(naked.pairs.blocks, 2, sudoku.RemovePossibleBlock)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 495,
    "text": "clear_possible(naked.pairs.rows,   2, sudoku.RemovePossibleRow)",
    "type": "statement:functioncall"
  }, {
    "id": 496,
    "text": "clear_possible(naked.pairs.cols,   2, sudoku.RemovePossibleCol)",
    "type": "statement:functioncall"
  }, {
    "id": 497,
    "text": "clear_possible(naked.pairs.blocks, 2, sudoku.RemovePossibleBlock)",
    "type": "statement:functioncall"
  }, {
    "id": 498,
    "text": "if (sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_PAIRS] == true) then\r\n        clear_possible(hidden.pairs.rows,   2, sudoku.RemovePossibleRow)\r\n        clear_possible(hidden.pairs.cols,   2, sudoku.RemovePossibleCol)\r\n        clear_possible(hidden.pairs.blocks, 2, sudoku.RemovePossibleBlock)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 499,
    "text": "clear_possible(hidden.pairs.rows,   2, sudoku.RemovePossibleRow)",
    "type": "statement:functioncall"
  }, {
    "id": 500,
    "text": "clear_possible(hidden.pairs.cols,   2, sudoku.RemovePossibleCol)",
    "type": "statement:functioncall"
  }, {
    "id": 501,
    "text": "clear_possible(hidden.pairs.blocks, 2, sudoku.RemovePossibleBlock)",
    "type": "statement:functioncall"
  }, {
    "id": 502,
    "text": "if (sudokuTable.flags[sudoku.ELIMINATE_NAKED_TRIPLETS] == true) then\r\n        clear_possible(naked.triplets.rows,   3, sudoku.RemovePossibleRow)\r\n        clear_possible(naked.triplets.cols,   3, sudoku.RemovePossibleCol)\r\n        clear_possible(naked.triplets.blocks, 3, sudoku.RemovePossibleBlock)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 503,
    "text": "clear_possible(naked.triplets.rows,   3, sudoku.RemovePossibleRow)",
    "type": "statement:functioncall"
  }, {
    "id": 504,
    "text": "clear_possible(naked.triplets.cols,   3, sudoku.RemovePossibleCol)",
    "type": "statement:functioncall"
  }, {
    "id": 505,
    "text": "clear_possible(naked.triplets.blocks, 3, sudoku.RemovePossibleBlock)",
    "type": "statement:functioncall"
  }, {
    "id": 506,
    "text": "if (sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_TRIPLETS] == true) then\r\n        clear_possible(hidden.triplets.rows,   3, sudoku.RemovePossibleRow)\r\n        clear_possible(hidden.triplets.cols,   3, sudoku.RemovePossibleCol)\r\n        clear_possible(hidden.triplets.blocks, 3, sudoku.RemovePossibleBlock)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 507,
    "text": "clear_possible(hidden.triplets.rows,   3, sudoku.RemovePossibleRow)",
    "type": "statement:functioncall"
  }, {
    "id": 508,
    "text": "clear_possible(hidden.triplets.cols,   3, sudoku.RemovePossibleCol)",
    "type": "statement:functioncall"
  }, {
    "id": 509,
    "text": "clear_possible(hidden.triplets.blocks, 3, sudoku.RemovePossibleBlock)",
    "type": "statement:functioncall"
  }, {
    "id": 510,
    "text": "if (sudokuTable.flags[sudoku.ELIMINATE_NAKED_QUADS] == true) then\r\n        clear_possible(naked.quads.rows,   4, sudoku.RemovePossibleRow)\r\n        clear_possible(naked.quads.cols,   4, sudoku.RemovePossibleCol)\r\n        clear_possible(naked.quads.blocks, 4, sudoku.RemovePossibleBlock)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 511,
    "text": "clear_possible(naked.quads.rows,   4, sudoku.RemovePossibleRow)",
    "type": "statement:functioncall"
  }, {
    "id": 512,
    "text": "clear_possible(naked.quads.cols,   4, sudoku.RemovePossibleCol)",
    "type": "statement:functioncall"
  }, {
    "id": 513,
    "text": "clear_possible(naked.quads.blocks, 4, sudoku.RemovePossibleBlock)",
    "type": "statement:functioncall"
  }, {
    "id": 514,
    "text": "if (sudokuTable.flags[sudoku.ELIMINATE_HIDDEN_QUADS] == true) then\r\n        clear_possible(hidden.quads.rows,   4, sudoku.RemovePossibleRow)\r\n        clear_possible(hidden.quads.cols,   4, sudoku.RemovePossibleCol)\r\n        clear_possible(hidden.quads.blocks, 4, sudoku.RemovePossibleBlock)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 515,
    "text": "clear_possible(hidden.quads.rows,   4, sudoku.RemovePossibleRow)",
    "type": "statement:functioncall"
  }, {
    "id": 516,
    "text": "clear_possible(hidden.quads.cols,   4, sudoku.RemovePossibleCol)",
    "type": "statement:functioncall"
  }, {
    "id": 517,
    "text": "clear_possible(hidden.quads.blocks, 4, sudoku.RemovePossibleBlock)",
    "type": "statement:functioncall"
  }, {
    "id": 518,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 519,
    "text": "local function clear_possible(group_table, num, remove_fn)\r\n        for n = 1, 9 do\r\n            if group_table[n] then\r\n                for key, cell_table in pairs(group_table[n]) do\r\n\r\n                    local exceptTable = {}\r\n                    for k, v in pairs(cell_table) do\r\n                        exceptTable[v] = v\r\n                    end\r\n\r\n                    for k = 1, num do\r\n                        local val = string.byte(key, k)-char0\r\n                        remove_fn(sudokuTable, n, val, exceptTable)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 520,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 521,
    "text": "function sudoku.SolveScanSingles(sudokuTable)\r\n    sudoku.CalcAllPossible(sudokuTable)\r\n    local changed_cells = {}\r\n\r\n    for row = 1, 9 do\r\n        for col = 1, 9 do\r\n            if not sudoku.HasValue(sudokuTable, row, col) then\r\n                local possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                local count = 0\r\n                local value = nil\r\n                for pvalue, is_possible in pairs(possible) do -- count possible values\r\n                    count = count + 1\r\n                    value = pvalue\r\n                end\r\n                if count == 1 then\r\n                    local cell = sudoku.RowColToCell(row, col)\r\n                    sudoku.SetValue(sudokuTable, row, col, value)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                    changed_cells[cell] = value\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    if TableIsEmpty(changed_cells) then changed_cells = nil end -- reset if not used\r\n\r\n    return changed_cells\r\nend",
    "type": "function"
  }, {
    "id": 522,
    "text": "local changed_cells = {}",
    "type": "statement:localassign"
  }, {
    "id": 523,
    "text": "for row = 1, 9 do\r\n        for col = 1, 9 do\r\n            if not sudoku.HasValue(sudokuTable, row, col) then\r\n                local possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                local count = 0\r\n                local value = nil\r\n                for pvalue, is_possible in pairs(possible) do -- count possible values\r\n                    count = count + 1\r\n                    value = pvalue\r\n                end\r\n                if count == 1 then\r\n                    local cell = sudoku.RowColToCell(row, col)\r\n                    sudoku.SetValue(sudokuTable, row, col, value)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                    changed_cells[cell] = value\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 524,
    "text": "for col = 1, 9 do\r\n            if not sudoku.HasValue(sudokuTable, row, col) then\r\n                local possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                local count = 0\r\n                local value = nil\r\n                for pvalue, is_possible in pairs(possible) do -- count possible values\r\n                    count = count + 1\r\n                    value = pvalue\r\n                end\r\n                if count == 1 then\r\n                    local cell = sudoku.RowColToCell(row, col)\r\n                    sudoku.SetValue(sudokuTable, row, col, value)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                    changed_cells[cell] = value\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 525,
    "text": "if not sudoku.HasValue(sudokuTable, row, col) then\r\n                local possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                local count = 0\r\n                local value = nil\r\n                for pvalue, is_possible in pairs(possible) do -- count possible values\r\n                    count = count + 1\r\n                    value = pvalue\r\n                end\r\n                if count == 1 then\r\n                    local cell = sudoku.RowColToCell(row, col)\r\n                    sudoku.SetValue(sudokuTable, row, col, value)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                    changed_cells[cell] = value\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 526,
    "text": "local possible = sudoku.GetPossible(sudokuTable, row, col)",
    "type": "statement:localassign"
  }, {
    "id": 527,
    "text": "local value = nil",
    "type": "statement:localassign"
  }, {
    "id": 528,
    "text": "for pvalue, is_possible in pairs(possible) do -- count possible values\r\n                    count = count + 1\r\n                    value = pvalue\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 529,
    "text": "value = pvalue",
    "type": "statement:assign"
  }, {
    "id": 530,
    "text": "if count == 1 then\r\n                    local cell = sudoku.RowColToCell(row, col)\r\n                    sudoku.SetValue(sudokuTable, row, col, value)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                    changed_cells[cell] = value\r\n                end",
    "type": "statement:if"
  }, {
    "id": 531,
    "text": "sudoku.RemovePossibleAll(sudokuTable, cell, value)",
    "type": "statement:functioncall"
  }, {
    "id": 532,
    "text": "changed_cells[cell] = value",
    "type": "statement:assign"
  }, {
    "id": 533,
    "text": "if TableIsEmpty(changed_cells) then changed_cells = nil end",
    "type": "statement:if"
  }, {
    "id": 534,
    "text": "changed_cells = nil",
    "type": "statement:assign"
  }, {
    "id": 535,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 536,
    "text": "function sudoku.SolveScanRows(sudokuTable)\r\n    sudoku.SolveScanRowsCols(sudokuTable, true)\r\nend",
    "type": "function"
  }, {
    "id": 537,
    "text": "sudoku.SolveScanRowsCols(sudokuTable, true)",
    "type": "statement:functioncall"
  }, {
    "id": 538,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 539,
    "text": "function sudoku.SolveScanCols(sudokuTable)\r\n    sudoku.SolveScanRowsCols(sudokuTable, false)\r\nend",
    "type": "function"
  }, {
    "id": 540,
    "text": "sudoku.SolveScanRowsCols(sudokuTable, false)",
    "type": "statement:functioncall"
  }, {
    "id": 541,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 542,
    "text": "function sudoku.SolveScanRowsCols(sudokuTable, scan_rows)\r\n    sudoku.CalcAllPossible(sudokuTable)\r\n    local changed_cells = {}\r\n\r\n    for row_col1 = 1, 9 do\r\n        local row = nil -- set row or col depending on scan_rows\r\n        local col = nil\r\n        if scan_rows then row = row_col1 else col = row_col1 end\r\n\r\n        local possible = {} -- all the possible values along the row or col\r\n        for i = 1, 9 do possible[i] = {} end\r\n\r\n        -- fill possible[pvalue] = { cell1, cell2... } along row or col\r\n        for row_col2 = 1, 9 do\r\n            if scan_rows then col = row_col2 else row = row_col2 end\r\n\r\n            if not sudoku.HasValue(sudokuTable, row, col) then\r\n                local cell_possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                for pvalue, is_possible in pairs(cell_possible) do\r\n                    table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                end\r\n            end\r\n        end\r\n\r\n        -- iterate through the values and if only one possibility set it\r\n        for value = 1, 9 do\r\n            if TableCount(possible[value]) == 1 then\r\n                local cell = possible[value][1]\r\n                sudoku.SetCellValue(sudokuTable, cell, value)\r\n                sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                changed_cells[cell] = value\r\n            end\r\n        end\r\n    end\r\n\r\n    if TableIsEmpty(changed_cells) then changed_cells = nil end -- reset if not used\r\n\r\n    return changed_cells\r\nend",
    "type": "function"
  }, {
    "id": 543,
    "text": "for row_col1 = 1, 9 do\r\n        local row = nil -- set row or col depending on scan_rows\r\n        local col = nil\r\n        if scan_rows then row = row_col1 else col = row_col1 end\r\n\r\n        local possible = {} -- all the possible values along the row or col\r\n        for i = 1, 9 do possible[i] = {} end\r\n\r\n        -- fill possible[pvalue] = { cell1, cell2... } along row or col\r\n        for row_col2 = 1, 9 do\r\n            if scan_rows then col = row_col2 else row = row_col2 end\r\n\r\n            if not sudoku.HasValue(sudokuTable, row, col) then\r\n                local cell_possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                for pvalue, is_possible in pairs(cell_possible) do\r\n                    table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                end\r\n            end\r\n        end\r\n\r\n        -- iterate through the values and if only one possibility set it\r\n        for value = 1, 9 do\r\n            if TableCount(possible[value]) == 1 then\r\n                local cell = possible[value][1]\r\n                sudoku.SetCellValue(sudokuTable, cell, value)\r\n                sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                changed_cells[cell] = value\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 544,
    "text": "local row = nil",
    "type": "statement:localassign"
  }, {
    "id": 545,
    "text": "local col = nil",
    "type": "statement:localassign"
  }, {
    "id": 546,
    "text": "if scan_rows then row = row_col1 else col = row_col1 end",
    "type": "statement:if"
  }, {
    "id": 547,
    "text": "row = row_col1",
    "type": "statement:assign"
  }, {
    "id": 548,
    "text": "col = row_col1",
    "type": "statement:assign"
  }, {
    "id": 549,
    "text": "for i = 1, 9 do possible[i] = {} end",
    "type": "statement:numericfor"
  }, {
    "id": 550,
    "text": "possible[i] = {}",
    "type": "statement:assign"
  }, {
    "id": 551,
    "text": "for row_col2 = 1, 9 do\r\n            if scan_rows then col = row_col2 else row = row_col2 end\r\n\r\n            if not sudoku.HasValue(sudokuTable, row, col) then\r\n                local cell_possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                for pvalue, is_possible in pairs(cell_possible) do\r\n                    table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 552,
    "text": "if scan_rows then col = row_col2 else row = row_col2 end",
    "type": "statement:if"
  }, {
    "id": 553,
    "text": "col = row_col2",
    "type": "statement:assign"
  }, {
    "id": 554,
    "text": "row = row_col2",
    "type": "statement:assign"
  }, {
    "id": 555,
    "text": "if not sudoku.HasValue(sudokuTable, row, col) then\r\n                local cell_possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                for pvalue, is_possible in pairs(cell_possible) do\r\n                    table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 556,
    "text": "local cell_possible = sudoku.GetPossible(sudokuTable, row, col)",
    "type": "statement:localassign"
  }, {
    "id": 557,
    "text": "for pvalue, is_possible in pairs(cell_possible) do\r\n                    table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 558,
    "text": "table.insert(possible[pvalue], sudoku.RowColToCell(row, col))",
    "type": "statement:functioncall"
  }, {
    "id": 559,
    "text": "for value = 1, 9 do\r\n            if TableCount(possible[value]) == 1 then\r\n                local cell = possible[value][1]\r\n                sudoku.SetCellValue(sudokuTable, cell, value)\r\n                sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                changed_cells[cell] = value\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 560,
    "text": "if TableCount(possible[value]) == 1 then\r\n                local cell = possible[value][1]\r\n                sudoku.SetCellValue(sudokuTable, cell, value)\r\n                sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                changed_cells[cell] = value\r\n            end",
    "type": "statement:if"
  }, {
    "id": 561,
    "text": "local cell = possible[value][1]",
    "type": "statement:localassign"
  }, {
    "id": 562,
    "text": "sudoku.SetCellValue(sudokuTable, cell, value)",
    "type": "statement:functioncall"
  }, {
    "id": 563,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 564,
    "text": "function sudoku.SolveScanBlocks(sudokuTable)\r\n    sudoku.CalcAllPossible(sudokuTable)\r\n    local changed_cells = {}\r\n\r\n    for block = 1, 9 do\r\n        local block_row, block_col = sudoku.BlockToRowCol(block)\r\n\r\n        local possible = {}\r\n        for i = 1, 9 do possible[i] = {} end\r\n\r\n        -- fill possible[pvalue] = { cell1, cell2... } for whole block\r\n        for row = block_row, block_row+2 do\r\n            for col = block_col, block_col+2 do\r\n                if not sudoku.HasValue(sudokuTable, row, col) then\r\n                    local cell_possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                    for pvalue, is_possible in pairs(cell_possible) do\r\n                        table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- iterate through the values and if only one possibility set it\r\n        for value = 1, 9 do\r\n            if TableCount(possible[value]) == 1 then\r\n                local cell = possible[value][1]\r\n                sudoku.SetCellValue(sudokuTable, cell, value)\r\n                sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                changed_cells[cell] = value\r\n            end\r\n        end\r\n    end\r\n\r\n    if TableIsEmpty(changed_cells) then changed_cells = nil end -- reset if not used\r\n\r\n    return changed_cells\r\nend",
    "type": "function"
  }, {
    "id": 565,
    "text": "for block = 1, 9 do\r\n        local block_row, block_col = sudoku.BlockToRowCol(block)\r\n\r\n        local possible = {}\r\n        for i = 1, 9 do possible[i] = {} end\r\n\r\n        -- fill possible[pvalue] = { cell1, cell2... } for whole block\r\n        for row = block_row, block_row+2 do\r\n            for col = block_col, block_col+2 do\r\n                if not sudoku.HasValue(sudokuTable, row, col) then\r\n                    local cell_possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                    for pvalue, is_possible in pairs(cell_possible) do\r\n                        table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                    end\r\n                end\r\n            end\r\n        end\r\n\r\n        -- iterate through the values and if only one possibility set it\r\n        for value = 1, 9 do\r\n            if TableCount(possible[value]) == 1 then\r\n                local cell = possible[value][1]\r\n                sudoku.SetCellValue(sudokuTable, cell, value)\r\n                sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n                changed_cells[cell] = value\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 566,
    "text": "local block_row, block_col = sudoku.BlockToRowCol(block)",
    "type": "statement:localassign"
  }, {
    "id": 567,
    "text": "for row = block_row, block_row+2 do\r\n            for col = block_col, block_col+2 do\r\n                if not sudoku.HasValue(sudokuTable, row, col) then\r\n                    local cell_possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                    for pvalue, is_possible in pairs(cell_possible) do\r\n                        table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                    end\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 568,
    "text": "for col = block_col, block_col+2 do\r\n                if not sudoku.HasValue(sudokuTable, row, col) then\r\n                    local cell_possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                    for pvalue, is_possible in pairs(cell_possible) do\r\n                        table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                    end\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 569,
    "text": "if not sudoku.HasValue(sudokuTable, row, col) then\r\n                    local cell_possible = sudoku.GetPossible(sudokuTable, row, col)\r\n                    for pvalue, is_possible in pairs(cell_possible) do\r\n                        table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 570,
    "text": "for pvalue, is_possible in pairs(cell_possible) do\r\n                        table.insert(possible[pvalue], sudoku.RowColToCell(row, col))\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 571,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 572,
    "text": "function sudoku.SolveScan(sudokuTable)\r\n    local changed_single = {}\r\n    local changed_rows   = {}\r\n    local changed_cols   = {}\r\n    local changed_blocks = {}\r\n    local changed_cells  = {} -- total cells changed\r\n    local count = 0\r\n\r\n    local function add_changed(changed_table, changed_cells)\r\n        if changed_table then\r\n            changed_cells = TableMerge(changed_table, changed_cells)\r\n        end\r\n        return changed_cells\r\n    end\r\n\r\n    while (count < 10000) and (changed_single or changed_rows or changed_cols or changed_blocks) do\r\n        changed_single = sudoku.SolveScanSingles(sudokuTable)\r\n        changed_rows   = sudoku.SolveScanRows(sudokuTable)\r\n        changed_cols   = sudoku.SolveScanCols(sudokuTable)\r\n        changed_blocks = sudoku.SolveScanBlocks(sudokuTable)\r\n\r\n        changed_cells = add_changed(changed_single, changed_cells)\r\n        changed_cells = add_changed(changed_rows,   changed_cells)\r\n        changed_cells = add_changed(changed_cols,   changed_cells)\r\n        changed_cells = add_changed(changed_blocks, changed_cells)\r\n\r\n        count = count + 1\r\n    end\r\n\r\n    if TableIsEmpty(changed_cells) then changed_cells = nil end -- nothing done\r\n\r\n    return count, changed_cells\r\nend",
    "type": "function"
  }, {
    "id": 573,
    "text": "local changed_single = {}",
    "type": "statement:localassign"
  }, {
    "id": 574,
    "text": "local changed_rows   = {}",
    "type": "statement:localassign"
  }, {
    "id": 575,
    "text": "local changed_cols   = {}",
    "type": "statement:localassign"
  }, {
    "id": 576,
    "text": "local changed_blocks = {}",
    "type": "statement:localassign"
  }, {
    "id": 577,
    "text": "local changed_cells  = {}",
    "type": "statement:localassign"
  }, {
    "id": 578,
    "text": "local function add_changed(changed_table, changed_cells)\r\n        if changed_table then\r\n            changed_cells = TableMerge(changed_table, changed_cells)\r\n        end\r\n        return changed_cells\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 579,
    "text": "if changed_table then\r\n            changed_cells = TableMerge(changed_table, changed_cells)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 580,
    "text": "changed_cells = TableMerge(changed_table, changed_cells)",
    "type": "statement:assign"
  }, {
    "id": 581,
    "text": "while (count < 10000) and (changed_single or changed_rows or changed_cols or changed_blocks) do\r\n        changed_single = sudoku.SolveScanSingles(sudokuTable)\r\n        changed_rows   = sudoku.SolveScanRows(sudokuTable)\r\n        changed_cols   = sudoku.SolveScanCols(sudokuTable)\r\n        changed_blocks = sudoku.SolveScanBlocks(sudokuTable)\r\n\r\n        changed_cells = add_changed(changed_single, changed_cells)\r\n        changed_cells = add_changed(changed_rows,   changed_cells)\r\n        changed_cells = add_changed(changed_cols,   changed_cells)\r\n        changed_cells = add_changed(changed_blocks, changed_cells)\r\n\r\n        count = count + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 582,
    "text": "changed_single = sudoku.SolveScanSingles(sudokuTable)",
    "type": "statement:assign"
  }, {
    "id": 583,
    "text": "changed_rows   = sudoku.SolveScanRows(sudokuTable)",
    "type": "statement:assign"
  }, {
    "id": 584,
    "text": "changed_cols   = sudoku.SolveScanCols(sudokuTable)",
    "type": "statement:assign"
  }, {
    "id": 585,
    "text": "changed_blocks = sudoku.SolveScanBlocks(sudokuTable)",
    "type": "statement:assign"
  }, {
    "id": 586,
    "text": "changed_cells = add_changed(changed_single, changed_cells)",
    "type": "statement:assign"
  }, {
    "id": 587,
    "text": "changed_cells = add_changed(changed_rows,   changed_cells)",
    "type": "statement:assign"
  }, {
    "id": 588,
    "text": "changed_cells = add_changed(changed_cols,   changed_cells)",
    "type": "statement:assign"
  }, {
    "id": 589,
    "text": "changed_cells = add_changed(changed_blocks, changed_cells)",
    "type": "statement:assign"
  }, {
    "id": 590,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 591,
    "text": "local function add_changed(changed_table, changed_cells)\r\n        if changed_table then\r\n            changed_cells = TableMerge(changed_table, changed_cells)\r\n        end\r\n        return changed_cells\r\n    end",
    "type": "function"
  }, {
    "id": 592,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 593,
    "text": "function sudoku.SolveBruteForce(sudokuTable, backwards)\r\n    -- first time through find possible to limit choices, subsequent calls ok\r\n    local s = sudoku.CreateTable()\r\n\r\n    -- finding all the possibilities is slow, but at least do solve scan\r\n    --s.flags[sudoku.ELIMINATE_NAKED_PAIRS]     = true\r\n    --s.flags[sudoku.ELIMINATE_HIDDEN_PAIRS]    = true\r\n    --s.flags[sudoku.ELIMINATE_NAKED_TRIPLETS]  = true\r\n    --s.flags[sudoku.ELIMINATE_HIDDEN_TRIPLETS] = true\r\n    --s.flags[sudoku.ELIMINATE_NAKED_QUADS]     = true\r\n    --s.flags[sudoku.ELIMINATE_HIDDEN_QUADS]    = true\r\n\r\n    s.values = TableCopy(sudokuTable.values)\r\n    sudoku.CalcRowColBlockValues(s)\r\n    sudoku.CalcAllPossible(s)\r\n    sudoku.SolveScan(s)\r\n\r\n    -- table consists of guesses[cell] = #num\r\n    -- guesses.current is current guess #\r\n    local guesses = { current = 0 }\r\n    for n = 1, 81 do guesses[n] = 0 end\r\n    -- we don't need these for this and they just slow TableCopy down\r\n    --  they're recreated at the end using UpdateTable\r\n    s.row_values   = nil\r\n    s.col_values   = nil\r\n    s.block_values = nil\r\n    s.invalid      = nil\r\n    s.flags        = nil\r\n\r\n    return sudoku.DoSolveBruteForce(sudokuTable, backwards, s, guesses, 1)\r\nend",
    "type": "function"
  }, {
    "id": 594,
    "text": "s.values = TableCopy(sudokuTable.values)",
    "type": "statement:assign"
  }, {
    "id": 595,
    "text": "sudoku.CalcRowColBlockValues(s)",
    "type": "statement:functioncall"
  }, {
    "id": 596,
    "text": "sudoku.CalcAllPossible(s)",
    "type": "statement:functioncall"
  }, {
    "id": 597,
    "text": "sudoku.SolveScan(s)",
    "type": "statement:functioncall"
  }, {
    "id": 598,
    "text": "local guesses = { current = 0 }",
    "type": "statement:localassign"
  }, {
    "id": 599,
    "text": "for n = 1, 81 do guesses[n] = 0 end",
    "type": "statement:numericfor"
  }, {
    "id": 600,
    "text": "guesses[n] = 0",
    "type": "statement:assign"
  }, {
    "id": 601,
    "text": "s.row_values   = nil",
    "type": "statement:assign"
  }, {
    "id": 602,
    "text": "s.col_values   = nil",
    "type": "statement:assign"
  }, {
    "id": 603,
    "text": "s.block_values = nil",
    "type": "statement:assign"
  }, {
    "id": 604,
    "text": "s.invalid      = nil",
    "type": "statement:assign"
  }, {
    "id": 605,
    "text": "s.flags        = nil",
    "type": "statement:assign"
  }, {
    "id": 606,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 607,
    "text": "function sudoku.DoSolveBruteForce(sudokuTable, backwards, simpleTable, guesses, cell)\r\n    local s = simpleTable\r\n    local g, empty_possible\r\n\r\n    if sudoku.SolveBruteForceHook then\r\n        if not sudoku.SolveBruteForceHook(guesses, cell) then\r\n            return nil, guesses, cell\r\n        end\r\n    end\r\n\r\n    while cell <= 81 do\r\n        if not sudoku.HasCellValue(s, cell) then\r\n            local possible = sudoku.GetCellPossible(s, cell)\r\n\r\n            --for k, v in pairs(possible) do -- use for loop to ensure direction\r\n            \r\n            local start_n = iff(backwards, 9,  1)\r\n            local end_n   = iff(backwards, 1,  9)\r\n            local dir_n   = iff(backwards, -1, 1)\r\n            \r\n            for n = start_n, end_n, dir_n do\r\n                if possible[n] then\r\n                    -- try a number and remove it as a possibility\r\n                    sudoku.RemoveCellPossible(s, cell, n)\r\n\r\n                    -- start a new table and test out this guess\r\n                    local s1 = TableCopy(s)\r\n                    -- don't use SetValue since we only care about possible\r\n                    s1.values[cell] = n --sudoku.SetValue(s1, row, col, n)\r\n                    sudoku.RemovePossibleAll(s1, cell, n, nil, true)\r\n\r\n                    guesses[cell]   = guesses[cell] + 1\r\n                    guesses.current = guesses.current + 1\r\n\r\n                    -- check for nil return from RemovePossibleAll for break_if_empty\r\n                    if s1 then\r\n                        s1, g = sudoku.DoSolveBruteForce(sudokuTable, backwards, s1, guesses, cell+1)\r\n                        -- if s1 then success! we're all done\r\n                        if s1 then\r\n                            -- copy all original data back and just set the values\r\n                            local s2 = TableCopy(sudokuTable)\r\n                            sudoku.SetValues(s2, s1.values)\r\n                            return s2, g\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n\r\n            return nil, guesses -- tried all values for cell with no solution\r\n        end\r\n\r\n        cell = cell + 1\r\n    end\r\n\r\n    local s2 = TableCopy(sudokuTable)\r\n    sudoku.SetValues(s2, s.values)\r\n    return s2, guesses\r\nend",
    "type": "function"
  }, {
    "id": 608,
    "text": "local s = simpleTable",
    "type": "statement:localassign"
  }, {
    "id": 609,
    "text": "local g, empty_possible",
    "type": "statement:localassign"
  }, {
    "id": 610,
    "text": "if sudoku.SolveBruteForceHook then\r\n        if not sudoku.SolveBruteForceHook(guesses, cell) then\r\n            return nil, guesses, cell\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 611,
    "text": "if not sudoku.SolveBruteForceHook(guesses, cell) then\r\n            return nil, guesses, cell\r\n        end",
    "type": "statement:if"
  }, {
    "id": 612,
    "text": "while cell <= 81 do\r\n        if not sudoku.HasCellValue(s, cell) then\r\n            local possible = sudoku.GetCellPossible(s, cell)\r\n\r\n            --for k, v in pairs(possible) do -- use for loop to ensure direction\r\n            \r\n            local start_n = iff(backwards, 9,  1)\r\n            local end_n   = iff(backwards, 1,  9)\r\n            local dir_n   = iff(backwards, -1, 1)\r\n            \r\n            for n = start_n, end_n, dir_n do\r\n                if possible[n] then\r\n                    -- try a number and remove it as a possibility\r\n                    sudoku.RemoveCellPossible(s, cell, n)\r\n\r\n                    -- start a new table and test out this guess\r\n                    local s1 = TableCopy(s)\r\n                    -- don't use SetValue since we only care about possible\r\n                    s1.values[cell] = n --sudoku.SetValue(s1, row, col, n)\r\n                    sudoku.RemovePossibleAll(s1, cell, n, nil, true)\r\n\r\n                    guesses[cell]   = guesses[cell] + 1\r\n                    guesses.current = guesses.current + 1\r\n\r\n                    -- check for nil return from RemovePossibleAll for break_if_empty\r\n                    if s1 then\r\n                        s1, g = sudoku.DoSolveBruteForce(sudokuTable, backwards, s1, guesses, cell+1)\r\n                        -- if s1 then success! we're all done\r\n                        if s1 then\r\n                            -- copy all original data back and just set the values\r\n                            local s2 = TableCopy(sudokuTable)\r\n                            sudoku.SetValues(s2, s1.values)\r\n                            return s2, g\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n\r\n            return nil, guesses -- tried all values for cell with no solution\r\n        end\r\n\r\n        cell = cell + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 613,
    "text": "if not sudoku.HasCellValue(s, cell) then\r\n            local possible = sudoku.GetCellPossible(s, cell)\r\n\r\n            --for k, v in pairs(possible) do -- use for loop to ensure direction\r\n            \r\n            local start_n = iff(backwards, 9,  1)\r\n            local end_n   = iff(backwards, 1,  9)\r\n            local dir_n   = iff(backwards, -1, 1)\r\n            \r\n            for n = start_n, end_n, dir_n do\r\n                if possible[n] then\r\n                    -- try a number and remove it as a possibility\r\n                    sudoku.RemoveCellPossible(s, cell, n)\r\n\r\n                    -- start a new table and test out this guess\r\n                    local s1 = TableCopy(s)\r\n                    -- don't use SetValue since we only care about possible\r\n                    s1.values[cell] = n --sudoku.SetValue(s1, row, col, n)\r\n                    sudoku.RemovePossibleAll(s1, cell, n, nil, true)\r\n\r\n                    guesses[cell]   = guesses[cell] + 1\r\n                    guesses.current = guesses.current + 1\r\n\r\n                    -- check for nil return from RemovePossibleAll for break_if_empty\r\n                    if s1 then\r\n                        s1, g = sudoku.DoSolveBruteForce(sudokuTable, backwards, s1, guesses, cell+1)\r\n                        -- if s1 then success! we're all done\r\n                        if s1 then\r\n                            -- copy all original data back and just set the values\r\n                            local s2 = TableCopy(sudokuTable)\r\n                            sudoku.SetValues(s2, s1.values)\r\n                            return s2, g\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n\r\n            return nil, guesses -- tried all values for cell with no solution\r\n        end",
    "type": "statement:if"
  }, {
    "id": 614,
    "text": "local possible = sudoku.GetCellPossible(s, cell)",
    "type": "statement:localassign"
  }, {
    "id": 615,
    "text": "local start_n = iff(backwards, 9,  1)",
    "type": "statement:localassign"
  }, {
    "id": 616,
    "text": "local end_n   = iff(backwards, 1,  9)",
    "type": "statement:localassign"
  }, {
    "id": 617,
    "text": "local dir_n   = iff(backwards, -1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 618,
    "text": "for n = start_n, end_n, dir_n do\r\n                if possible[n] then\r\n                    -- try a number and remove it as a possibility\r\n                    sudoku.RemoveCellPossible(s, cell, n)\r\n\r\n                    -- start a new table and test out this guess\r\n                    local s1 = TableCopy(s)\r\n                    -- don't use SetValue since we only care about possible\r\n                    s1.values[cell] = n --sudoku.SetValue(s1, row, col, n)\r\n                    sudoku.RemovePossibleAll(s1, cell, n, nil, true)\r\n\r\n                    guesses[cell]   = guesses[cell] + 1\r\n                    guesses.current = guesses.current + 1\r\n\r\n                    -- check for nil return from RemovePossibleAll for break_if_empty\r\n                    if s1 then\r\n                        s1, g = sudoku.DoSolveBruteForce(sudokuTable, backwards, s1, guesses, cell+1)\r\n                        -- if s1 then success! we're all done\r\n                        if s1 then\r\n                            -- copy all original data back and just set the values\r\n                            local s2 = TableCopy(sudokuTable)\r\n                            sudoku.SetValues(s2, s1.values)\r\n                            return s2, g\r\n                        end\r\n                    end\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 619,
    "text": "if possible[n] then\r\n                    -- try a number and remove it as a possibility\r\n                    sudoku.RemoveCellPossible(s, cell, n)\r\n\r\n                    -- start a new table and test out this guess\r\n                    local s1 = TableCopy(s)\r\n                    -- don't use SetValue since we only care about possible\r\n                    s1.values[cell] = n --sudoku.SetValue(s1, row, col, n)\r\n                    sudoku.RemovePossibleAll(s1, cell, n, nil, true)\r\n\r\n                    guesses[cell]   = guesses[cell] + 1\r\n                    guesses.current = guesses.current + 1\r\n\r\n                    -- check for nil return from RemovePossibleAll for break_if_empty\r\n                    if s1 then\r\n                        s1, g = sudoku.DoSolveBruteForce(sudokuTable, backwards, s1, guesses, cell+1)\r\n                        -- if s1 then success! we're all done\r\n                        if s1 then\r\n                            -- copy all original data back and just set the values\r\n                            local s2 = TableCopy(sudokuTable)\r\n                            sudoku.SetValues(s2, s1.values)\r\n                            return s2, g\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 620,
    "text": "sudoku.RemoveCellPossible(s, cell, n)",
    "type": "statement:functioncall"
  }, {
    "id": 621,
    "text": "local s1 = TableCopy(s)",
    "type": "statement:localassign"
  }, {
    "id": 622,
    "text": "s1.values[cell] = n",
    "type": "statement:assign"
  }, {
    "id": 623,
    "text": "sudoku.RemovePossibleAll(s1, cell, n, nil, true)",
    "type": "statement:functioncall"
  }, {
    "id": 624,
    "text": "guesses[cell]   = guesses[cell] + 1",
    "type": "statement:assign"
  }, {
    "id": 625,
    "text": "guesses.current = guesses.current + 1",
    "type": "statement:assign"
  }, {
    "id": 626,
    "text": "if s1 then\r\n                        s1, g = sudoku.DoSolveBruteForce(sudokuTable, backwards, s1, guesses, cell+1)\r\n                        -- if s1 then success! we're all done\r\n                        if s1 then\r\n                            -- copy all original data back and just set the values\r\n                            local s2 = TableCopy(sudokuTable)\r\n                            sudoku.SetValues(s2, s1.values)\r\n                            return s2, g\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 627,
    "text": "s1, g = sudoku.DoSolveBruteForce(sudokuTable, backwards, s1, guesses, cell+1)",
    "type": "statement:assign"
  }, {
    "id": 628,
    "text": "if s1 then\r\n                            -- copy all original data back and just set the values\r\n                            local s2 = TableCopy(sudokuTable)\r\n                            sudoku.SetValues(s2, s1.values)\r\n                            return s2, g\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 629,
    "text": "local s2 = TableCopy(sudokuTable)",
    "type": "statement:localassign"
  }, {
    "id": 630,
    "text": "sudoku.SetValues(s2, s1.values)",
    "type": "statement:functioncall"
  }, {
    "id": 631,
    "text": "cell = cell + 1",
    "type": "statement:assign"
  }, {
    "id": 632,
    "text": "sudoku.SetValues(s2, s.values)",
    "type": "statement:functioncall"
  }, {
    "id": 633,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 634,
    "text": "function sudoku.IsUniquePuzzle(sudokuTable)\r\n\r\n    local s1, g1 = sudoku.SolveBruteForce(sudokuTable, false)\r\n    if not s1 then return nil end\r\n\r\n    local s2, g2 = sudoku.SolveBruteForce(sudokuTable, true)\r\n    if not s2 then return nil end\r\n\r\n    if not sudoku.IsSamePuzzle(s1, s2) then return s1, s2 end\r\n\r\n    return s1\r\nend",
    "type": "function"
  }, {
    "id": 635,
    "text": "local s1, g1 = sudoku.SolveBruteForce(sudokuTable, false)",
    "type": "statement:localassign"
  }, {
    "id": 636,
    "text": "if not s1 then return nil end",
    "type": "statement:if"
  }, {
    "id": 637,
    "text": "local s2, g2 = sudoku.SolveBruteForce(sudokuTable, true)",
    "type": "statement:localassign"
  }, {
    "id": 638,
    "text": "if not s2 then return nil end",
    "type": "statement:if"
  }, {
    "id": 639,
    "text": "if not sudoku.IsSamePuzzle(s1, s2) then return s1, s2 end",
    "type": "statement:if"
  }, {
    "id": 640,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 641,
    "text": "function sudoku.IsSamePuzzle(s1, s2)\r\n    for cell = 1, 81 do\r\n        if sudoku.GetCellValue(s1, cell) ~= sudoku.GetCellValue(s2, cell) then\r\n            return false\r\n        end\r\n    end\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 642,
    "text": "for cell = 1, 81 do\r\n        if sudoku.GetCellValue(s1, cell) ~= sudoku.GetCellValue(s2, cell) then\r\n            return false\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 643,
    "text": "if sudoku.GetCellValue(s1, cell) ~= sudoku.GetCellValue(s2, cell) then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 644,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 645,
    "text": "function sudoku.GeneratePuzzle()\r\n    local cell = 0\r\n    local count = 0\r\n    local stuck = {} -- count how many times we've backtracked stuck[cell/9] = count\r\n\r\n    math.randomseed(os.time())\r\n    local sudokuTable = sudoku.CreateTable()\r\n\r\n    while cell < 81 do\r\n        cell = cell + 1\r\n        count = count + 1\r\n\r\n        if sudoku.GeneratePuzzleHook then\r\n            if not sudoku.GeneratePuzzleHook(count, cell) then\r\n                return nil, count\r\n            end\r\n        end\r\n\r\n        local value = math.random(9)\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n\r\n        if sudoku.IsValidValue(sudokuTable, row, col, value) then\r\n            sudoku.SetCellValue(sudokuTable, cell, value)\r\n            sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n        else\r\n            -- try other values starting at value+1 and wrapping around\r\n            local set_value = false\r\n            local i = value + 1\r\n            if i > 9 then i = 1 end\r\n            while i ~= value do\r\n                if sudoku.IsValidValue(sudokuTable, row, col, i) then\r\n                    sudoku.SetCellValue(sudokuTable, cell, i)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, i)\r\n                    set_value = true\r\n                    break\r\n                end\r\n                i = i + 1\r\n                if i > 9 then i = 1 end\r\n            end\r\n\r\n            -- whoops, go back a row or more and start over just to be sure\r\n            if not set_value then\r\n                local block = math.floor(cell/9) + 1\r\n                stuck[block] = (stuck[block] or 0) + 1\r\n                local goback = 9\r\n\r\n                if stuck[block] and (stuck[block] > 5) then\r\n                    goback = 2 * stuck[block] + 1\r\n                end\r\n\r\n                local cell_start = cell - goback\r\n                if cell_start < 1 then\r\n                    cell_start = 1\r\n                elseif cell_start < 10 then\r\n                    stuck = {} -- really start all over\r\n                end\r\n\r\n                for i = cell_start, cell do\r\n                    sudoku.SetCellValue(sudokuTable, i, 0)\r\n                end\r\n\r\n                cell = cell_start - 1\r\n            end\r\n        end\r\n    end\r\n\r\n    return sudokuTable, count\r\nend",
    "type": "function"
  }, {
    "id": 646,
    "text": "local cell = 0",
    "type": "statement:localassign"
  }, {
    "id": 647,
    "text": "local stuck = {}",
    "type": "statement:localassign"
  }, {
    "id": 648,
    "text": "math.randomseed(os.time())",
    "type": "statement:functioncall"
  }, {
    "id": 649,
    "text": "local sudokuTable = sudoku.CreateTable()",
    "type": "statement:localassign"
  }, {
    "id": 650,
    "text": "while cell < 81 do\r\n        cell = cell + 1\r\n        count = count + 1\r\n\r\n        if sudoku.GeneratePuzzleHook then\r\n            if not sudoku.GeneratePuzzleHook(count, cell) then\r\n                return nil, count\r\n            end\r\n        end\r\n\r\n        local value = math.random(9)\r\n        local row, col = sudoku.CellToRowCol(cell)\r\n\r\n        if sudoku.IsValidValue(sudokuTable, row, col, value) then\r\n            sudoku.SetCellValue(sudokuTable, cell, value)\r\n            sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n        else\r\n            -- try other values starting at value+1 and wrapping around\r\n            local set_value = false\r\n            local i = value + 1\r\n            if i > 9 then i = 1 end\r\n            while i ~= value do\r\n                if sudoku.IsValidValue(sudokuTable, row, col, i) then\r\n                    sudoku.SetCellValue(sudokuTable, cell, i)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, i)\r\n                    set_value = true\r\n                    break\r\n                end\r\n                i = i + 1\r\n                if i > 9 then i = 1 end\r\n            end\r\n\r\n            -- whoops, go back a row or more and start over just to be sure\r\n            if not set_value then\r\n                local block = math.floor(cell/9) + 1\r\n                stuck[block] = (stuck[block] or 0) + 1\r\n                local goback = 9\r\n\r\n                if stuck[block] and (stuck[block] > 5) then\r\n                    goback = 2 * stuck[block] + 1\r\n                end\r\n\r\n                local cell_start = cell - goback\r\n                if cell_start < 1 then\r\n                    cell_start = 1\r\n                elseif cell_start < 10 then\r\n                    stuck = {} -- really start all over\r\n                end\r\n\r\n                for i = cell_start, cell do\r\n                    sudoku.SetCellValue(sudokuTable, i, 0)\r\n                end\r\n\r\n                cell = cell_start - 1\r\n            end\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 651,
    "text": "if sudoku.GeneratePuzzleHook then\r\n            if not sudoku.GeneratePuzzleHook(count, cell) then\r\n                return nil, count\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 652,
    "text": "if not sudoku.GeneratePuzzleHook(count, cell) then\r\n                return nil, count\r\n            end",
    "type": "statement:if"
  }, {
    "id": 653,
    "text": "local value = math.random(9)",
    "type": "statement:localassign"
  }, {
    "id": 654,
    "text": "if sudoku.IsValidValue(sudokuTable, row, col, value) then\r\n            sudoku.SetCellValue(sudokuTable, cell, value)\r\n            sudoku.RemovePossibleAll(sudokuTable, cell, value)\r\n        else\r\n            -- try other values starting at value+1 and wrapping around\r\n            local set_value = false\r\n            local i = value + 1\r\n            if i > 9 then i = 1 end\r\n            while i ~= value do\r\n                if sudoku.IsValidValue(sudokuTable, row, col, i) then\r\n                    sudoku.SetCellValue(sudokuTable, cell, i)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, i)\r\n                    set_value = true\r\n                    break\r\n                end\r\n                i = i + 1\r\n                if i > 9 then i = 1 end\r\n            end\r\n\r\n            -- whoops, go back a row or more and start over just to be sure\r\n            if not set_value then\r\n                local block = math.floor(cell/9) + 1\r\n                stuck[block] = (stuck[block] or 0) + 1\r\n                local goback = 9\r\n\r\n                if stuck[block] and (stuck[block] > 5) then\r\n                    goback = 2 * stuck[block] + 1\r\n                end\r\n\r\n                local cell_start = cell - goback\r\n                if cell_start < 1 then\r\n                    cell_start = 1\r\n                elseif cell_start < 10 then\r\n                    stuck = {} -- really start all over\r\n                end\r\n\r\n                for i = cell_start, cell do\r\n                    sudoku.SetCellValue(sudokuTable, i, 0)\r\n                end\r\n\r\n                cell = cell_start - 1\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 655,
    "text": "local set_value = false",
    "type": "statement:localassign"
  }, {
    "id": 656,
    "text": "local i = value + 1",
    "type": "statement:localassign"
  }, {
    "id": 657,
    "text": "if i > 9 then i = 1 end",
    "type": "statement:if"
  }, {
    "id": 658,
    "text": "i = 1",
    "type": "statement:assign"
  }, {
    "id": 659,
    "text": "while i ~= value do\r\n                if sudoku.IsValidValue(sudokuTable, row, col, i) then\r\n                    sudoku.SetCellValue(sudokuTable, cell, i)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, i)\r\n                    set_value = true\r\n                    break\r\n                end\r\n                i = i + 1\r\n                if i > 9 then i = 1 end\r\n            end",
    "type": "statement:while"
  }, {
    "id": 660,
    "text": "if sudoku.IsValidValue(sudokuTable, row, col, i) then\r\n                    sudoku.SetCellValue(sudokuTable, cell, i)\r\n                    sudoku.RemovePossibleAll(sudokuTable, cell, i)\r\n                    set_value = true\r\n                    break\r\n                end",
    "type": "statement:if"
  }, {
    "id": 661,
    "text": "sudoku.SetCellValue(sudokuTable, cell, i)",
    "type": "statement:functioncall"
  }, {
    "id": 662,
    "text": "sudoku.RemovePossibleAll(sudokuTable, cell, i)",
    "type": "statement:functioncall"
  }, {
    "id": 663,
    "text": "set_value = true",
    "type": "statement:assign"
  }, {
    "id": 664,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 665,
    "text": "if not set_value then\r\n                local block = math.floor(cell/9) + 1\r\n                stuck[block] = (stuck[block] or 0) + 1\r\n                local goback = 9\r\n\r\n                if stuck[block] and (stuck[block] > 5) then\r\n                    goback = 2 * stuck[block] + 1\r\n                end\r\n\r\n                local cell_start = cell - goback\r\n                if cell_start < 1 then\r\n                    cell_start = 1\r\n                elseif cell_start < 10 then\r\n                    stuck = {} -- really start all over\r\n                end\r\n\r\n                for i = cell_start, cell do\r\n                    sudoku.SetCellValue(sudokuTable, i, 0)\r\n                end\r\n\r\n                cell = cell_start - 1\r\n            end",
    "type": "statement:if"
  }, {
    "id": 666,
    "text": "local block = math.floor(cell/9) + 1",
    "type": "statement:localassign"
  }, {
    "id": 667,
    "text": "stuck[block] = (stuck[block] or 0) + 1",
    "type": "statement:assign"
  }, {
    "id": 668,
    "text": "local goback = 9",
    "type": "statement:localassign"
  }, {
    "id": 669,
    "text": "if stuck[block] and (stuck[block] > 5) then\r\n                    goback = 2 * stuck[block] + 1\r\n                end",
    "type": "statement:if"
  }, {
    "id": 670,
    "text": "goback = 2 * stuck[block] + 1",
    "type": "statement:assign"
  }, {
    "id": 671,
    "text": "local cell_start = cell - goback",
    "type": "statement:localassign"
  }, {
    "id": 672,
    "text": "if cell_start < 1 then\r\n                    cell_start = 1\r\n                elseif cell_start < 10 then\r\n                    stuck = {} -- really start all over\r\n                end",
    "type": "statement:if"
  }, {
    "id": 673,
    "text": "cell_start = 1",
    "type": "statement:assign"
  }, {
    "id": 674,
    "text": "stuck = {}",
    "type": "statement:assign"
  }, {
    "id": 675,
    "text": "for i = cell_start, cell do\r\n                    sudoku.SetCellValue(sudokuTable, i, 0)\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 676,
    "text": "sudoku.SetCellValue(sudokuTable, i, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 677,
    "text": "cell = cell_start - 1",
    "type": "statement:assign"
  }, {
    "id": 678,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 679,
    "text": "function sudoku.GeneratePuzzleDifficulty(sudokuTable, num_cells_to_keep, ensure_unique)\r\n    if num_cells_to_keep < 1 then\r\n        return sudoku.CreateTable()\r\n    end\r\n\r\n    if ensure_unique == nil then ensure_unique = true end\r\n    math.randomseed(os.time()+1)\r\n    local trial = 1\r\n    local i = 0\r\n    local count = 0\r\n    local soln = TableCopy(sudokuTable)\r\n    local cellTable = {}\r\n    for n = 1, 81 do cellTable[n] = n end\r\n\r\n    local cell_count, cell_n, cell\r\n\r\n    while i < 81 - num_cells_to_keep do\r\n        cell_count = #cellTable\r\n\r\n        -- restart this function if we run out of cells to try\r\n        if (cell_count == 0) or (cell_count + i < num_cells_to_keep) then\r\n            trial = trial + 1\r\n            i = 0\r\n            count = 0\r\n            cellTable = {}\r\n            for n = 1, 81 do cellTable[n] = n end\r\n            cell_count = #cellTable\r\n            cell_n = math.random(cell_count)\r\n        elseif cell_count == 1 then\r\n            cell_n = 1\r\n        else\r\n            cell_n = math.random(cell_count)\r\n        end\r\n\r\n        cell = cellTable[cell_n]\r\n        count = count + 1\r\n\r\n        if sudoku.GeneratePuzzleDifficultyHook then\r\n            if not sudoku.GeneratePuzzleDifficultyHook(count, i, cell, cell_count, trial) then\r\n                return nil, count\r\n            end\r\n        end\r\n\r\n        if ensure_unique == true then\r\n            -- test if soln going forward is same as soln backwards and original\r\n            local s = TableCopy(sudokuTable)\r\n            sudoku.SetCellValue(s, cell, 0)\r\n            local soln1 = sudoku.SolveBruteForce(s, false)\r\n            if not soln1 then return nil, count end\r\n\r\n            if not sudoku.IsSamePuzzle(soln, soln1) then\r\n                table.remove(cellTable, cell_n)\r\n            else\r\n                local soln2 = sudoku.SolveBruteForce(s, true)\r\n                if not soln2 then return nil, count end\r\n\r\n                if not sudoku.IsSamePuzzle(soln, soln2) then\r\n                    table.remove(cellTable, cell_n)\r\n                else\r\n                    table.remove(cellTable, cell_n)\r\n                    sudoku.SetCellValue(sudokuTable, cell, 0)\r\n                    i = i + 1\r\n                end\r\n            end\r\n        else\r\n            table.remove(cellTable, cell_n)\r\n            sudoku.SetCellValue(sudokuTable, cell, 0)\r\n            i = i + 1\r\n        end\r\n    end\r\n\r\n    return sudokuTable, count\r\nend",
    "type": "function"
  }, {
    "id": 680,
    "text": "if num_cells_to_keep < 1 then\r\n        return sudoku.CreateTable()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 681,
    "text": "if ensure_unique == nil then ensure_unique = true end",
    "type": "statement:if"
  }, {
    "id": 682,
    "text": "ensure_unique = true",
    "type": "statement:assign"
  }, {
    "id": 683,
    "text": "math.randomseed(os.time()+1)",
    "type": "statement:functioncall"
  }, {
    "id": 684,
    "text": "local trial = 1",
    "type": "statement:localassign"
  }, {
    "id": 685,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 686,
    "text": "local soln = TableCopy(sudokuTable)",
    "type": "statement:localassign"
  }, {
    "id": 687,
    "text": "local cellTable = {}",
    "type": "statement:localassign"
  }, {
    "id": 688,
    "text": "for n = 1, 81 do cellTable[n] = n end",
    "type": "statement:numericfor"
  }, {
    "id": 689,
    "text": "cellTable[n] = n",
    "type": "statement:assign"
  }, {
    "id": 690,
    "text": "local cell_count, cell_n, cell",
    "type": "statement:localassign"
  }, {
    "id": 691,
    "text": "while i < 81 - num_cells_to_keep do\r\n        cell_count = #cellTable\r\n\r\n        -- restart this function if we run out of cells to try\r\n        if (cell_count == 0) or (cell_count + i < num_cells_to_keep) then\r\n            trial = trial + 1\r\n            i = 0\r\n            count = 0\r\n            cellTable = {}\r\n            for n = 1, 81 do cellTable[n] = n end\r\n            cell_count = #cellTable\r\n            cell_n = math.random(cell_count)\r\n        elseif cell_count == 1 then\r\n            cell_n = 1\r\n        else\r\n            cell_n = math.random(cell_count)\r\n        end\r\n\r\n        cell = cellTable[cell_n]\r\n        count = count + 1\r\n\r\n        if sudoku.GeneratePuzzleDifficultyHook then\r\n            if not sudoku.GeneratePuzzleDifficultyHook(count, i, cell, cell_count, trial) then\r\n                return nil, count\r\n            end\r\n        end\r\n\r\n        if ensure_unique == true then\r\n            -- test if soln going forward is same as soln backwards and original\r\n            local s = TableCopy(sudokuTable)\r\n            sudoku.SetCellValue(s, cell, 0)\r\n            local soln1 = sudoku.SolveBruteForce(s, false)\r\n            if not soln1 then return nil, count end\r\n\r\n            if not sudoku.IsSamePuzzle(soln, soln1) then\r\n                table.remove(cellTable, cell_n)\r\n            else\r\n                local soln2 = sudoku.SolveBruteForce(s, true)\r\n                if not soln2 then return nil, count end\r\n\r\n                if not sudoku.IsSamePuzzle(soln, soln2) then\r\n                    table.remove(cellTable, cell_n)\r\n                else\r\n                    table.remove(cellTable, cell_n)\r\n                    sudoku.SetCellValue(sudokuTable, cell, 0)\r\n                    i = i + 1\r\n                end\r\n            end\r\n        else\r\n            table.remove(cellTable, cell_n)\r\n            sudoku.SetCellValue(sudokuTable, cell, 0)\r\n            i = i + 1\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 692,
    "text": "cell_count = #cellTable",
    "type": "statement:assign"
  }, {
    "id": 693,
    "text": "if (cell_count == 0) or (cell_count + i < num_cells_to_keep) then\r\n            trial = trial + 1\r\n            i = 0\r\n            count = 0\r\n            cellTable = {}\r\n            for n = 1, 81 do cellTable[n] = n end\r\n            cell_count = #cellTable\r\n            cell_n = math.random(cell_count)\r\n        elseif cell_count == 1 then\r\n            cell_n = 1\r\n        else\r\n            cell_n = math.random(cell_count)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 694,
    "text": "trial = trial + 1",
    "type": "statement:assign"
  }, {
    "id": 695,
    "text": "i = 0",
    "type": "statement:assign"
  }, {
    "id": 696,
    "text": "count = 0",
    "type": "statement:assign"
  }, {
    "id": 697,
    "text": "cellTable = {}",
    "type": "statement:assign"
  }, {
    "id": 698,
    "text": "cell_n = math.random(cell_count)",
    "type": "statement:assign"
  }, {
    "id": 699,
    "text": "cell_n = 1",
    "type": "statement:assign"
  }, {
    "id": 700,
    "text": "cell = cellTable[cell_n]",
    "type": "statement:assign"
  }, {
    "id": 701,
    "text": "if sudoku.GeneratePuzzleDifficultyHook then\r\n            if not sudoku.GeneratePuzzleDifficultyHook(count, i, cell, cell_count, trial) then\r\n                return nil, count\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 702,
    "text": "if not sudoku.GeneratePuzzleDifficultyHook(count, i, cell, cell_count, trial) then\r\n                return nil, count\r\n            end",
    "type": "statement:if"
  }, {
    "id": 703,
    "text": "if ensure_unique == true then\r\n            -- test if soln going forward is same as soln backwards and original\r\n            local s = TableCopy(sudokuTable)\r\n            sudoku.SetCellValue(s, cell, 0)\r\n            local soln1 = sudoku.SolveBruteForce(s, false)\r\n            if not soln1 then return nil, count end\r\n\r\n            if not sudoku.IsSamePuzzle(soln, soln1) then\r\n                table.remove(cellTable, cell_n)\r\n            else\r\n                local soln2 = sudoku.SolveBruteForce(s, true)\r\n                if not soln2 then return nil, count end\r\n\r\n                if not sudoku.IsSamePuzzle(soln, soln2) then\r\n                    table.remove(cellTable, cell_n)\r\n                else\r\n                    table.remove(cellTable, cell_n)\r\n                    sudoku.SetCellValue(sudokuTable, cell, 0)\r\n                    i = i + 1\r\n                end\r\n            end\r\n        else\r\n            table.remove(cellTable, cell_n)\r\n            sudoku.SetCellValue(sudokuTable, cell, 0)\r\n            i = i + 1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 704,
    "text": "local s = TableCopy(sudokuTable)",
    "type": "statement:localassign"
  }, {
    "id": 705,
    "text": "sudoku.SetCellValue(s, cell, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 706,
    "text": "local soln1 = sudoku.SolveBruteForce(s, false)",
    "type": "statement:localassign"
  }, {
    "id": 707,
    "text": "if not soln1 then return nil, count end",
    "type": "statement:if"
  }, {
    "id": 708,
    "text": "if not sudoku.IsSamePuzzle(soln, soln1) then\r\n                table.remove(cellTable, cell_n)\r\n            else\r\n                local soln2 = sudoku.SolveBruteForce(s, true)\r\n                if not soln2 then return nil, count end\r\n\r\n                if not sudoku.IsSamePuzzle(soln, soln2) then\r\n                    table.remove(cellTable, cell_n)\r\n                else\r\n                    table.remove(cellTable, cell_n)\r\n                    sudoku.SetCellValue(sudokuTable, cell, 0)\r\n                    i = i + 1\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 709,
    "text": "table.remove(cellTable, cell_n)",
    "type": "statement:functioncall"
  }, {
    "id": 710,
    "text": "local soln2 = sudoku.SolveBruteForce(s, true)",
    "type": "statement:localassign"
  }, {
    "id": 711,
    "text": "if not soln2 then return nil, count end",
    "type": "statement:if"
  }, {
    "id": 712,
    "text": "if not sudoku.IsSamePuzzle(soln, soln2) then\r\n                    table.remove(cellTable, cell_n)\r\n                else\r\n                    table.remove(cellTable, cell_n)\r\n                    sudoku.SetCellValue(sudokuTable, cell, 0)\r\n                    i = i + 1\r\n                end",
    "type": "statement:if"
  }, {
    "id": 713,
    "text": "sudoku.SetCellValue(sudokuTable, cell, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 714,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 715,
    "text": "function NewID()\r\n    if not sudokuGUI_ID_New then sudokuGUI_ID_New = wx.wxID_HIGHEST end\r\n    sudokuGUI_ID_New = sudokuGUI_ID_New + 1\r\n    return sudokuGUI_ID_New\r\nend",
    "type": "function"
  }, {
    "id": 716,
    "text": "if not sudokuGUI_ID_New then sudokuGUI_ID_New = wx.wxID_HIGHEST end",
    "type": "statement:if"
  }, {
    "id": 717,
    "text": "sudokuGUI_ID_New = wx.wxID_HIGHEST",
    "type": "statement:assign"
  }, {
    "id": 718,
    "text": "sudokuGUI_ID_New = sudokuGUI_ID_New + 1",
    "type": "statement:assign"
  }, {
    "id": 719,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 720,
    "text": "function sudokuGUI.GetCellBestSize(cell_width, cell_height)\r\n    local dc = wx.wxClientDC(sudokuGUI.frame)\r\n\r\n    local size = sudokuGUI.DoGetCellBestSize(dc, cell_width, cell_height,\r\n                        sudokuGUI.valueFont, sudokuGUI.possibleFont,\r\n                        sudokuGUI.valueFont_cache, sudokuGUI.possibleFont_cache)\r\n\r\n    dc:delete() -- ALWAYS delete() any wxDCs created when done\r\n    return size\r\nend",
    "type": "function"
  }, {
    "id": 721,
    "text": "local dc = wx.wxClientDC(sudokuGUI.frame)",
    "type": "statement:localassign"
  }, {
    "id": 722,
    "text": "local size = sudokuGUI.DoGetCellBestSize(dc, cell_width, cell_height,\r\n                        sudokuGUI.valueFont, sudokuGUI.possibleFont,\r\n                        sudokuGUI.valueFont_cache, sudokuGUI.possibleFont_cache)",
    "type": "statement:localassign"
  }, {
    "id": 723,
    "text": "dc:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 724,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 725,
    "text": "function sudokuGUI.DoGetCellBestSize(dc, cell_width, cell_height,\r\n                                     valueFont, possibleFont,\r\n                                     valueFont_cache, possibleFont_cache) -- cache are optional\r\n\r\n    local function GetBestFontSize(dc, width, height, fontTable, font_cache)\r\n\r\n        local function DoGetBestFontSize(step, largest)\r\n            for s = fontTable.size, largest, step do\r\n                fontTable.size = s\r\n\r\n                if font_cache[fontTable.size] then\r\n                    fontTable.width  = font_cache[fontTable.size].width\r\n                    fontTable.height = font_cache[fontTable.size].height\r\n                else\r\n                    fontTable.wxfont:SetPointSize(fontTable.size)\r\n                    dc:SetFont(fontTable.wxfont)\r\n                    fontTable.width, fontTable.height = dc:GetTextExtent(\"5\")\r\n\r\n                    font_cache[fontTable.size] = {}\r\n                    font_cache[fontTable.size].width  = fontTable.width\r\n                    font_cache[fontTable.size].height = fontTable.height\r\n                end\r\n\r\n                if (fontTable.height > height) or (fontTable.width > width) then\r\n                    break\r\n                end\r\n            end\r\n        end\r\n\r\n        fontTable.size = 2\r\n        if not font_cache then font_cache = {} end -- use local font cache\r\n\r\n        -- skip font sizes by 4 to get a rough estimate of the size\r\n        DoGetBestFontSize(4, 1000)\r\n        local largest = fontTable.size\r\n        fontTable.size = iff(fontTable.size-3 > 1, fontTable.size-3, 2)\r\n        -- get the best size to use\r\n        DoGetBestFontSize(1, largest)\r\n\r\n        -- use next smaller value that actually fits\r\n        fontTable.size = iff(fontTable.size-1 > 1, fontTable.size-1, 2)\r\n        fontTable.wxfont:SetPointSize(fontTable.size)\r\n        fontTable.width  = font_cache[fontTable.size].width\r\n        fontTable.height = font_cache[fontTable.size].height\r\n\r\n        return fontTable\r\n    end\r\n\r\n    if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_POSSIBLE_LINE) then\r\n        possibleFont = GetBestFontSize(dc, (cell_width-2)/10, (cell_height-2), possibleFont, possibleFont_cache)\r\n    else\r\n        possibleFont = GetBestFontSize(dc, (cell_width-2)/3, (cell_height-2)/3, possibleFont, possibleFont_cache)\r\n    end\r\n\r\n    valueFont = GetBestFontSize(dc, cell_width-4, cell_height-4, valueFont, valueFont_cache)\r\n\r\n    return wx.wxSize(valueFont.height+4, valueFont.height+4)\r\nend",
    "type": "function"
  }, {
    "id": 726,
    "text": "local function GetBestFontSize(dc, width, height, fontTable, font_cache)\r\n\r\n        local function DoGetBestFontSize(step, largest)\r\n            for s = fontTable.size, largest, step do\r\n                fontTable.size = s\r\n\r\n                if font_cache[fontTable.size] then\r\n                    fontTable.width  = font_cache[fontTable.size].width\r\n                    fontTable.height = font_cache[fontTable.size].height\r\n                else\r\n                    fontTable.wxfont:SetPointSize(fontTable.size)\r\n                    dc:SetFont(fontTable.wxfont)\r\n                    fontTable.width, fontTable.height = dc:GetTextExtent(\"5\")\r\n\r\n                    font_cache[fontTable.size] = {}\r\n                    font_cache[fontTable.size].width  = fontTable.width\r\n                    font_cache[fontTable.size].height = fontTable.height\r\n                end\r\n\r\n                if (fontTable.height > height) or (fontTable.width > width) then\r\n                    break\r\n                end\r\n            end\r\n        end\r\n\r\n        fontTable.size = 2\r\n        if not font_cache then font_cache = {} end -- use local font cache\r\n\r\n        -- skip font sizes by 4 to get a rough estimate of the size\r\n        DoGetBestFontSize(4, 1000)\r\n        local largest = fontTable.size\r\n        fontTable.size = iff(fontTable.size-3 > 1, fontTable.size-3, 2)\r\n        -- get the best size to use\r\n        DoGetBestFontSize(1, largest)\r\n\r\n        -- use next smaller value that actually fits\r\n        fontTable.size = iff(fontTable.size-1 > 1, fontTable.size-1, 2)\r\n        fontTable.wxfont:SetPointSize(fontTable.size)\r\n        fontTable.width  = font_cache[fontTable.size].width\r\n        fontTable.height = font_cache[fontTable.size].height\r\n\r\n        return fontTable\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 727,
    "text": "local function DoGetBestFontSize(step, largest)\r\n            for s = fontTable.size, largest, step do\r\n                fontTable.size = s\r\n\r\n                if font_cache[fontTable.size] then\r\n                    fontTable.width  = font_cache[fontTable.size].width\r\n                    fontTable.height = font_cache[fontTable.size].height\r\n                else\r\n                    fontTable.wxfont:SetPointSize(fontTable.size)\r\n                    dc:SetFont(fontTable.wxfont)\r\n                    fontTable.width, fontTable.height = dc:GetTextExtent(\"5\")\r\n\r\n                    font_cache[fontTable.size] = {}\r\n                    font_cache[fontTable.size].width  = fontTable.width\r\n                    font_cache[fontTable.size].height = fontTable.height\r\n                end\r\n\r\n                if (fontTable.height > height) or (fontTable.width > width) then\r\n                    break\r\n                end\r\n            end\r\n        end",
    "type": "statement:localfunction"
  }, {
    "id": 728,
    "text": "for s = fontTable.size, largest, step do\r\n                fontTable.size = s\r\n\r\n                if font_cache[fontTable.size] then\r\n                    fontTable.width  = font_cache[fontTable.size].width\r\n                    fontTable.height = font_cache[fontTable.size].height\r\n                else\r\n                    fontTable.wxfont:SetPointSize(fontTable.size)\r\n                    dc:SetFont(fontTable.wxfont)\r\n                    fontTable.width, fontTable.height = dc:GetTextExtent(\"5\")\r\n\r\n                    font_cache[fontTable.size] = {}\r\n                    font_cache[fontTable.size].width  = fontTable.width\r\n                    font_cache[fontTable.size].height = fontTable.height\r\n                end\r\n\r\n                if (fontTable.height > height) or (fontTable.width > width) then\r\n                    break\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 729,
    "text": "fontTable.size = s",
    "type": "statement:assign"
  }, {
    "id": 730,
    "text": "if font_cache[fontTable.size] then\r\n                    fontTable.width  = font_cache[fontTable.size].width\r\n                    fontTable.height = font_cache[fontTable.size].height\r\n                else\r\n                    fontTable.wxfont:SetPointSize(fontTable.size)\r\n                    dc:SetFont(fontTable.wxfont)\r\n                    fontTable.width, fontTable.height = dc:GetTextExtent(\"5\")\r\n\r\n                    font_cache[fontTable.size] = {}\r\n                    font_cache[fontTable.size].width  = fontTable.width\r\n                    font_cache[fontTable.size].height = fontTable.height\r\n                end",
    "type": "statement:if"
  }, {
    "id": 731,
    "text": "fontTable.width  = font_cache[fontTable.size].width",
    "type": "statement:assign"
  }, {
    "id": 732,
    "text": "fontTable.height = font_cache[fontTable.size].height",
    "type": "statement:assign"
  }, {
    "id": 733,
    "text": "fontTable.wxfont:SetPointSize(fontTable.size)",
    "type": "statement:functioncall"
  }, {
    "id": 734,
    "text": "dc:SetFont(fontTable.wxfont)",
    "type": "statement:functioncall"
  }, {
    "id": 735,
    "text": "fontTable.width, fontTable.height = dc:GetTextExtent(\"5\")",
    "type": "statement:assign"
  }, {
    "id": 736,
    "text": "font_cache[fontTable.size] = {}",
    "type": "statement:assign"
  }, {
    "id": 737,
    "text": "font_cache[fontTable.size].width  = fontTable.width",
    "type": "statement:assign"
  }, {
    "id": 738,
    "text": "font_cache[fontTable.size].height = fontTable.height",
    "type": "statement:assign"
  }, {
    "id": 739,
    "text": "if (fontTable.height > height) or (fontTable.width > width) then\r\n                    break\r\n                end",
    "type": "statement:if"
  }, {
    "id": 740,
    "text": "fontTable.size = 2",
    "type": "statement:assign"
  }, {
    "id": 741,
    "text": "if not font_cache then font_cache = {} end",
    "type": "statement:if"
  }, {
    "id": 742,
    "text": "font_cache = {}",
    "type": "statement:assign"
  }, {
    "id": 743,
    "text": "DoGetBestFontSize(4, 1000)",
    "type": "statement:functioncall"
  }, {
    "id": 744,
    "text": "local largest = fontTable.size",
    "type": "statement:localassign"
  }, {
    "id": 745,
    "text": "fontTable.size = iff(fontTable.size-3 > 1, fontTable.size-3, 2)",
    "type": "statement:assign"
  }, {
    "id": 746,
    "text": "DoGetBestFontSize(1, largest)",
    "type": "statement:functioncall"
  }, {
    "id": 747,
    "text": "fontTable.size = iff(fontTable.size-1 > 1, fontTable.size-1, 2)",
    "type": "statement:assign"
  }, {
    "id": 748,
    "text": "if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_POSSIBLE_LINE) then\r\n        possibleFont = GetBestFontSize(dc, (cell_width-2)/10, (cell_height-2), possibleFont, possibleFont_cache)\r\n    else\r\n        possibleFont = GetBestFontSize(dc, (cell_width-2)/3, (cell_height-2)/3, possibleFont, possibleFont_cache)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 749,
    "text": "possibleFont = GetBestFontSize(dc, (cell_width-2)/10, (cell_height-2), possibleFont, possibleFont_cache)",
    "type": "statement:assign"
  }, {
    "id": 750,
    "text": "possibleFont = GetBestFontSize(dc, (cell_width-2)/3, (cell_height-2)/3, possibleFont, possibleFont_cache)",
    "type": "statement:assign"
  }, {
    "id": 751,
    "text": "valueFont = GetBestFontSize(dc, cell_width-4, cell_height-4, valueFont, valueFont_cache)",
    "type": "statement:assign"
  }, {
    "id": 752,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 753,
    "text": "local function GetBestFontSize(dc, width, height, fontTable, font_cache)\r\n\r\n        local function DoGetBestFontSize(step, largest)\r\n            for s = fontTable.size, largest, step do\r\n                fontTable.size = s\r\n\r\n                if font_cache[fontTable.size] then\r\n                    fontTable.width  = font_cache[fontTable.size].width\r\n                    fontTable.height = font_cache[fontTable.size].height\r\n                else\r\n                    fontTable.wxfont:SetPointSize(fontTable.size)\r\n                    dc:SetFont(fontTable.wxfont)\r\n                    fontTable.width, fontTable.height = dc:GetTextExtent(\"5\")\r\n\r\n                    font_cache[fontTable.size] = {}\r\n                    font_cache[fontTable.size].width  = fontTable.width\r\n                    font_cache[fontTable.size].height = fontTable.height\r\n                end\r\n\r\n                if (fontTable.height > height) or (fontTable.width > width) then\r\n                    break\r\n                end\r\n            end\r\n        end\r\n\r\n        fontTable.size = 2\r\n        if not font_cache then font_cache = {} end -- use local font cache\r\n\r\n        -- skip font sizes by 4 to get a rough estimate of the size\r\n        DoGetBestFontSize(4, 1000)\r\n        local largest = fontTable.size\r\n        fontTable.size = iff(fontTable.size-3 > 1, fontTable.size-3, 2)\r\n        -- get the best size to use\r\n        DoGetBestFontSize(1, largest)\r\n\r\n        -- use next smaller value that actually fits\r\n        fontTable.size = iff(fontTable.size-1 > 1, fontTable.size-1, 2)\r\n        fontTable.wxfont:SetPointSize(fontTable.size)\r\n        fontTable.width  = font_cache[fontTable.size].width\r\n        fontTable.height = font_cache[fontTable.size].height\r\n\r\n        return fontTable\r\n    end",
    "type": "function"
  }, {
    "id": 754,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 755,
    "text": "local function DoGetBestFontSize(step, largest)\r\n            for s = fontTable.size, largest, step do\r\n                fontTable.size = s\r\n\r\n                if font_cache[fontTable.size] then\r\n                    fontTable.width  = font_cache[fontTable.size].width\r\n                    fontTable.height = font_cache[fontTable.size].height\r\n                else\r\n                    fontTable.wxfont:SetPointSize(fontTable.size)\r\n                    dc:SetFont(fontTable.wxfont)\r\n                    fontTable.width, fontTable.height = dc:GetTextExtent(\"5\")\r\n\r\n                    font_cache[fontTable.size] = {}\r\n                    font_cache[fontTable.size].width  = fontTable.width\r\n                    font_cache[fontTable.size].height = fontTable.height\r\n                end\r\n\r\n                if (fontTable.height > height) or (fontTable.width > width) then\r\n                    break\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 756,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 757,
    "text": "function sudokuGUI.IsOddBlockCell(cell)\r\n    return math.fmod(sudoku.CellToBlock(cell), 2) ~= 0\r\nend",
    "type": "function"
  }, {
    "id": 758,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 759,
    "text": "function sudokuGUI.CreateCellWindow(parent, winID, size)\r\n    local win = wx.wxWindow(parent, winID,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxWANTS_CHARS+wx.wxSIMPLE_BORDER) --wxSUNKEN_BORDER)\r\n\r\n    -- set the background colour to reduce flicker\r\n    if sudokuGUI.IsOddBlockCell(winID) then\r\n        win:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n    else\r\n        win:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n    end\r\n\r\n    win:Connect(wx.wxEVT_ERASE_BACKGROUND, function(event) end)\r\n    win:Connect(wx.wxEVT_PAINT,       sudokuGUI.OnPaintCellWindow)\r\n    win:Connect(wx.wxEVT_KEY_DOWN,    sudokuGUI.OnKeyDownCellWindow )\r\n    win:Connect(wx.wxEVT_KEY_UP,      sudokuGUI.OnKeyUpCellWindow )\r\n    win:Connect(wx.wxEVT_LEFT_DOWN,   sudokuGUI.OnLeftClickCellWindow )\r\n    win:Connect(wx.wxEVT_LEFT_DCLICK, sudokuGUI.OnLeftDClickCellWindow )\r\n    return win\r\nend",
    "type": "function"
  }, {
    "id": 760,
    "text": "local win = wx.wxWindow(parent, winID,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            wx.wxWANTS_CHARS+wx.wxSIMPLE_BORDER)",
    "type": "statement:localassign"
  }, {
    "id": 761,
    "text": "if sudokuGUI.IsOddBlockCell(winID) then\r\n        win:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n    else\r\n        win:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 762,
    "text": "win:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 763,
    "text": "win:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 764,
    "text": "win:Connect(wx.wxEVT_ERASE_BACKGROUND, function(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 765,
    "text": "win:Connect(wx.wxEVT_PAINT,       sudokuGUI.OnPaintCellWindow)",
    "type": "statement:functioncall"
  }, {
    "id": 766,
    "text": "win:Connect(wx.wxEVT_KEY_DOWN,    sudokuGUI.OnKeyDownCellWindow )",
    "type": "statement:functioncall"
  }, {
    "id": 767,
    "text": "win:Connect(wx.wxEVT_KEY_UP,      sudokuGUI.OnKeyUpCellWindow )",
    "type": "statement:functioncall"
  }, {
    "id": 768,
    "text": "win:Connect(wx.wxEVT_LEFT_DOWN,   sudokuGUI.OnLeftClickCellWindow )",
    "type": "statement:functioncall"
  }, {
    "id": 769,
    "text": "win:Connect(wx.wxEVT_LEFT_DCLICK, sudokuGUI.OnLeftDClickCellWindow )",
    "type": "statement:functioncall"
  }, {
    "id": 770,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 771,
    "text": "function sudokuGUI.OnPaintCellWindow(event)\r\n    local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n\r\n    -- ALWAYS create a wxPaintDC in a wxEVT_PAINT handler, even if unused\r\n    local dc = wx.wxPaintDC(win)\r\n    if not sudokuGUI.block_refresh then\r\n        local cell = win:GetId()\r\n        local width, height = win:GetClientSizeWH()\r\n        sudokuGUI.PaintCell(dc, cell, width, height, sudokuGUI.valueFont, sudokuGUI.possibleFont)\r\n    end\r\n    dc:delete() -- ALWAYS delete() any wxDCs created when done\r\nend",
    "type": "function"
  }, {
    "id": 772,
    "text": "local win = event:GetEventObject():DynamicCast(\"wxWindow\")",
    "type": "statement:localassign"
  }, {
    "id": 773,
    "text": "local dc = wx.wxPaintDC(win)",
    "type": "statement:localassign"
  }, {
    "id": 774,
    "text": "if not sudokuGUI.block_refresh then\r\n        local cell = win:GetId()\r\n        local width, height = win:GetClientSizeWH()\r\n        sudokuGUI.PaintCell(dc, cell, width, height, sudokuGUI.valueFont, sudokuGUI.possibleFont)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 775,
    "text": "local cell = win:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 776,
    "text": "local width, height = win:GetClientSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 777,
    "text": "sudokuGUI.PaintCell(dc, cell, width, height, sudokuGUI.valueFont, sudokuGUI.possibleFont)",
    "type": "statement:functioncall"
  }, {
    "id": 778,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 779,
    "text": "function sudokuGUI.PaintCell(dc, cell, width, height, valueFont, possibleFont)\r\n    -- clear the window before drawing\r\n    dc:SetPen(wx.wxTRANSPARENT_PEN)\r\n    local bgColour\r\n    if sudokuGUI.focused_cell_id ~= cell then\r\n        if sudokuGUI.IsOddBlockCell(cell) then\r\n            bgColour = sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR]\r\n        else\r\n            bgColour = sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR]\r\n        end\r\n    else\r\n        bgColour = sudokuGUI.Colours[sudokuGUI.FOCUS_CELL_COLOUR]\r\n    end\r\n    local brush = wx.wxBrush(bgColour, wx.wxSOLID)\r\n    dc:SetBrush(brush)\r\n    dc:DrawRectangle(0, 0, width, height)\r\n    brush:delete()\r\n\r\n    local sudokuTable = sudokuGUI.GetCurrentTable()\r\n    local value_str, is_init = sudokuGUI.GetCellValueString(cell)\r\n    local has_cell_value = string.len(value_str) ~= 0\r\n\r\n    -- Draw the possible values\r\n    local show_possible      = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_POSSIBLE)\r\n    local show_possible_user = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE)\r\n    local show_possible_line = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_POSSIBLE_LINE)\r\n\r\n    if (show_possible or show_possible_user) and (not has_cell_value) then\r\n        local possible = sudoku.GetCellPossible(sudokuTable, cell)\r\n        if show_possible_user then\r\n            possible = sudokuGUI.pencilMarks[cell]\r\n        end\r\n\r\n        dc:SetTextForeground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n        dc:SetFont(possibleFont.wxfont)\r\n\r\n        -- find the positions of each possible value\r\n        local pos = sudokuGUI.CalcPossiblePositions(width, height, possibleFont)\r\n\r\n        local show_possible_user_all = false\r\n        if show_possible_user and (cell == sudokuGUI.focused_cell_id) then\r\n            show_possible_user_all = wx.wxGetKeyState(wx.WXK_SHIFT)\r\n        end\r\n\r\n        -- draw each one separately, even for line to ensure monospace\r\n        for i = 1, 9 do\r\n            if possible and possible[i] then\r\n                dc:DrawText(tostring(i), pos[i].x, pos[i].y)\r\n            elseif show_possible_user_all then\r\n                dc:SetBackgroundMode(wx.wxSOLID)\r\n                dc:SetTextForeground(bgColour)\r\n                dc:SetTextBackground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n                dc:DrawText(tostring(i), pos[i].x, pos[i].y)\r\n                dc:SetTextForeground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n                dc:SetTextBackground(bgColour)\r\n                dc:SetBackgroundMode(wx.wxTRANSPARENT)\r\n            end\r\n        end\r\n\r\n        local nakedTable  = sudokuGUI.possNakedTable\r\n        local hiddenTable = sudokuGUI.possHiddenTable\r\n        if show_possible_user then\r\n            nakedTable  = sudokuGUI.pencilMarksNakedTable\r\n            hiddenTable = sudokuGUI.pencilMarksHiddenTable\r\n        end\r\n\r\n        if nakedTable and hiddenTable then\r\n            dc:SetBrush(wx.wxTRANSPARENT_BRUSH)\r\n            local char0 = string.byte(\"0\")\r\n\r\n            local function draw_nakedhidden(colourID, num, key_table, hidden)\r\n                if (not key_table) or (#key_table < 1) then return end\r\n\r\n                local pen = wx.wxPen(sudokuGUI.Colours[colourID], 1, wx.wxSOLID)\r\n                dc:SetPen(pen)\r\n\r\n                for k = 1, #key_table do\r\n                    for n = 1, num do\r\n                        local val = string.byte(key_table[k], n)-char0\r\n                        if hidden ~= true then\r\n                            dc:DrawRectangle(pos[val].x, pos[val].y,\r\n                                             possibleFont.width, possibleFont.height)\r\n                        else\r\n                            dc:DrawRoundedRectangle(pos[val].x, pos[val].y,\r\n                                                    possibleFont.width, possibleFont.height,\r\n                                                    20)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                pen:delete()\r\n            end\r\n\r\n            -- draw pair marker last so it's on top of the others\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENQUADS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_QUADS_COLOUR, 4, hiddenTable.quads.cells[cell], true)\r\n            end\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDQUADS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_QUADS_COLOUR, 4, nakedTable.quads.cells[cell])\r\n            end\r\n\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENTRIPLETS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_TRIPLETS_COLOUR, 3, hiddenTable.triplets.cells[cell], true)\r\n            end\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDTRIPLETS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_TRIPLETS_COLOUR, 3, nakedTable.triplets.cells[cell])\r\n            end\r\n\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENPAIRS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_PAIRS_COLOUR, 2, hiddenTable.pairs.cells[cell], true)\r\n            end\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDPAIRS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_PAIRS_COLOUR, 2, nakedTable.pairs.cells[cell])\r\n            end\r\n        end\r\n    end\r\n\r\n    -- mark invalid cells, always mark invalid if creating\r\n    local show_errors = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_ERRORS)\r\n    if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_CREATE) then show_errors = true end\r\n    if show_errors then show_errors = sudokuGUI.GetCurrentTable().invalid[cell] end\r\n\r\n    local show_mistakes = sudokuGUI.sudokuSolnTable and sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES)\r\n\r\n    if show_errors then\r\n        dc:SetPen(wx.wxPen(sudokuGUI.Colours[sudokuGUI.INVALID_VALUE_COLOUR], 1, wx.wxSOLID))\r\n        dc:DrawLine(0, 0, width, height)\r\n        dc:DrawLine(width, 0, 0, height)\r\n    elseif show_mistakes then\r\n        if sudoku.HasCellValue(sudokuTable, cell) and\r\n            (sudoku.GetCellValue(sudokuGUI.sudokuSolnTable, cell) ~=\r\n             sudoku.GetCellValue(sudokuTable, cell)) then\r\n            local pen = wx.wxPen(sudokuGUI.Colours[sudokuGUI.INVALID_VALUE_COLOUR], 1, wx.wxSOLID)\r\n            dc:SetPen(pen)\r\n            pen:delete()\r\n            dc:DrawLine(0, 0, width, height)\r\n        end\r\n    end\r\n\r\n    -- Draw the set value, if any\r\n    if has_cell_value then\r\n        local fgColour = sudokuGUI.Colours[sudokuGUI.VALUE_COLOUR]\r\n        if is_init then\r\n            fgColour = sudokuGUI.Colours[sudokuGUI.INIT_VALUE_COLOUR]\r\n        end\r\n\r\n        dc:SetTextForeground(fgColour)\r\n\r\n        dc:SetFont(valueFont.wxfont)\r\n        dc:DrawText(value_str, width/2  - valueFont.width/2,\r\n                               height/2 - valueFont.height/2)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 780,
    "text": "dc:SetPen(wx.wxTRANSPARENT_PEN)",
    "type": "statement:functioncall"
  }, {
    "id": 781,
    "text": "local bgColour",
    "type": "statement:localassign"
  }, {
    "id": 782,
    "text": "if sudokuGUI.focused_cell_id ~= cell then\r\n        if sudokuGUI.IsOddBlockCell(cell) then\r\n            bgColour = sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR]\r\n        else\r\n            bgColour = sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR]\r\n        end\r\n    else\r\n        bgColour = sudokuGUI.Colours[sudokuGUI.FOCUS_CELL_COLOUR]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 783,
    "text": "if sudokuGUI.IsOddBlockCell(cell) then\r\n            bgColour = sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR]\r\n        else\r\n            bgColour = sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 784,
    "text": "bgColour = sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR]",
    "type": "statement:assign"
  }, {
    "id": 785,
    "text": "bgColour = sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR]",
    "type": "statement:assign"
  }, {
    "id": 786,
    "text": "bgColour = sudokuGUI.Colours[sudokuGUI.FOCUS_CELL_COLOUR]",
    "type": "statement:assign"
  }, {
    "id": 787,
    "text": "local brush = wx.wxBrush(bgColour, wx.wxSOLID)",
    "type": "statement:localassign"
  }, {
    "id": 788,
    "text": "dc:SetBrush(brush)",
    "type": "statement:functioncall"
  }, {
    "id": 789,
    "text": "dc:DrawRectangle(0, 0, width, height)",
    "type": "statement:functioncall"
  }, {
    "id": 790,
    "text": "brush:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 791,
    "text": "local sudokuTable = sudokuGUI.GetCurrentTable()",
    "type": "statement:localassign"
  }, {
    "id": 792,
    "text": "local value_str, is_init = sudokuGUI.GetCellValueString(cell)",
    "type": "statement:localassign"
  }, {
    "id": 793,
    "text": "local has_cell_value = string.len(value_str) ~= 0",
    "type": "statement:localassign"
  }, {
    "id": 794,
    "text": "local show_possible      = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_POSSIBLE)",
    "type": "statement:localassign"
  }, {
    "id": 795,
    "text": "local show_possible_user = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE)",
    "type": "statement:localassign"
  }, {
    "id": 796,
    "text": "local show_possible_line = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_POSSIBLE_LINE)",
    "type": "statement:localassign"
  }, {
    "id": 797,
    "text": "if (show_possible or show_possible_user) and (not has_cell_value) then\r\n        local possible = sudoku.GetCellPossible(sudokuTable, cell)\r\n        if show_possible_user then\r\n            possible = sudokuGUI.pencilMarks[cell]\r\n        end\r\n\r\n        dc:SetTextForeground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n        dc:SetFont(possibleFont.wxfont)\r\n\r\n        -- find the positions of each possible value\r\n        local pos = sudokuGUI.CalcPossiblePositions(width, height, possibleFont)\r\n\r\n        local show_possible_user_all = false\r\n        if show_possible_user and (cell == sudokuGUI.focused_cell_id) then\r\n            show_possible_user_all = wx.wxGetKeyState(wx.WXK_SHIFT)\r\n        end\r\n\r\n        -- draw each one separately, even for line to ensure monospace\r\n        for i = 1, 9 do\r\n            if possible and possible[i] then\r\n                dc:DrawText(tostring(i), pos[i].x, pos[i].y)\r\n            elseif show_possible_user_all then\r\n                dc:SetBackgroundMode(wx.wxSOLID)\r\n                dc:SetTextForeground(bgColour)\r\n                dc:SetTextBackground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n                dc:DrawText(tostring(i), pos[i].x, pos[i].y)\r\n                dc:SetTextForeground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n                dc:SetTextBackground(bgColour)\r\n                dc:SetBackgroundMode(wx.wxTRANSPARENT)\r\n            end\r\n        end\r\n\r\n        local nakedTable  = sudokuGUI.possNakedTable\r\n        local hiddenTable = sudokuGUI.possHiddenTable\r\n        if show_possible_user then\r\n            nakedTable  = sudokuGUI.pencilMarksNakedTable\r\n            hiddenTable = sudokuGUI.pencilMarksHiddenTable\r\n        end\r\n\r\n        if nakedTable and hiddenTable then\r\n            dc:SetBrush(wx.wxTRANSPARENT_BRUSH)\r\n            local char0 = string.byte(\"0\")\r\n\r\n            local function draw_nakedhidden(colourID, num, key_table, hidden)\r\n                if (not key_table) or (#key_table < 1) then return end\r\n\r\n                local pen = wx.wxPen(sudokuGUI.Colours[colourID], 1, wx.wxSOLID)\r\n                dc:SetPen(pen)\r\n\r\n                for k = 1, #key_table do\r\n                    for n = 1, num do\r\n                        local val = string.byte(key_table[k], n)-char0\r\n                        if hidden ~= true then\r\n                            dc:DrawRectangle(pos[val].x, pos[val].y,\r\n                                             possibleFont.width, possibleFont.height)\r\n                        else\r\n                            dc:DrawRoundedRectangle(pos[val].x, pos[val].y,\r\n                                                    possibleFont.width, possibleFont.height,\r\n                                                    20)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                pen:delete()\r\n            end\r\n\r\n            -- draw pair marker last so it's on top of the others\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENQUADS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_QUADS_COLOUR, 4, hiddenTable.quads.cells[cell], true)\r\n            end\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDQUADS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_QUADS_COLOUR, 4, nakedTable.quads.cells[cell])\r\n            end\r\n\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENTRIPLETS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_TRIPLETS_COLOUR, 3, hiddenTable.triplets.cells[cell], true)\r\n            end\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDTRIPLETS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_TRIPLETS_COLOUR, 3, nakedTable.triplets.cells[cell])\r\n            end\r\n\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENPAIRS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_PAIRS_COLOUR, 2, hiddenTable.pairs.cells[cell], true)\r\n            end\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDPAIRS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_PAIRS_COLOUR, 2, nakedTable.pairs.cells[cell])\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 798,
    "text": "local possible = sudoku.GetCellPossible(sudokuTable, cell)",
    "type": "statement:localassign"
  }, {
    "id": 799,
    "text": "if show_possible_user then\r\n            possible = sudokuGUI.pencilMarks[cell]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 800,
    "text": "possible = sudokuGUI.pencilMarks[cell]",
    "type": "statement:assign"
  }, {
    "id": 801,
    "text": "dc:SetTextForeground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 802,
    "text": "dc:SetFont(possibleFont.wxfont)",
    "type": "statement:functioncall"
  }, {
    "id": 803,
    "text": "local pos = sudokuGUI.CalcPossiblePositions(width, height, possibleFont)",
    "type": "statement:localassign"
  }, {
    "id": 804,
    "text": "local show_possible_user_all = false",
    "type": "statement:localassign"
  }, {
    "id": 805,
    "text": "if show_possible_user and (cell == sudokuGUI.focused_cell_id) then\r\n            show_possible_user_all = wx.wxGetKeyState(wx.WXK_SHIFT)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 806,
    "text": "show_possible_user_all = wx.wxGetKeyState(wx.WXK_SHIFT)",
    "type": "statement:assign"
  }, {
    "id": 807,
    "text": "for i = 1, 9 do\r\n            if possible and possible[i] then\r\n                dc:DrawText(tostring(i), pos[i].x, pos[i].y)\r\n            elseif show_possible_user_all then\r\n                dc:SetBackgroundMode(wx.wxSOLID)\r\n                dc:SetTextForeground(bgColour)\r\n                dc:SetTextBackground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n                dc:DrawText(tostring(i), pos[i].x, pos[i].y)\r\n                dc:SetTextForeground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n                dc:SetTextBackground(bgColour)\r\n                dc:SetBackgroundMode(wx.wxTRANSPARENT)\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 808,
    "text": "if possible and possible[i] then\r\n                dc:DrawText(tostring(i), pos[i].x, pos[i].y)\r\n            elseif show_possible_user_all then\r\n                dc:SetBackgroundMode(wx.wxSOLID)\r\n                dc:SetTextForeground(bgColour)\r\n                dc:SetTextBackground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n                dc:DrawText(tostring(i), pos[i].x, pos[i].y)\r\n                dc:SetTextForeground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n                dc:SetTextBackground(bgColour)\r\n                dc:SetBackgroundMode(wx.wxTRANSPARENT)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 809,
    "text": "dc:DrawText(tostring(i), pos[i].x, pos[i].y)",
    "type": "statement:functioncall"
  }, {
    "id": 810,
    "text": "dc:SetBackgroundMode(wx.wxSOLID)",
    "type": "statement:functioncall"
  }, {
    "id": 811,
    "text": "dc:SetTextForeground(bgColour)",
    "type": "statement:functioncall"
  }, {
    "id": 812,
    "text": "dc:SetTextBackground(sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 813,
    "text": "dc:SetTextBackground(bgColour)",
    "type": "statement:functioncall"
  }, {
    "id": 814,
    "text": "dc:SetBackgroundMode(wx.wxTRANSPARENT)",
    "type": "statement:functioncall"
  }, {
    "id": 815,
    "text": "local nakedTable  = sudokuGUI.possNakedTable",
    "type": "statement:localassign"
  }, {
    "id": 816,
    "text": "local hiddenTable = sudokuGUI.possHiddenTable",
    "type": "statement:localassign"
  }, {
    "id": 817,
    "text": "if show_possible_user then\r\n            nakedTable  = sudokuGUI.pencilMarksNakedTable\r\n            hiddenTable = sudokuGUI.pencilMarksHiddenTable\r\n        end",
    "type": "statement:if"
  }, {
    "id": 818,
    "text": "nakedTable  = sudokuGUI.pencilMarksNakedTable",
    "type": "statement:assign"
  }, {
    "id": 819,
    "text": "hiddenTable = sudokuGUI.pencilMarksHiddenTable",
    "type": "statement:assign"
  }, {
    "id": 820,
    "text": "if nakedTable and hiddenTable then\r\n            dc:SetBrush(wx.wxTRANSPARENT_BRUSH)\r\n            local char0 = string.byte(\"0\")\r\n\r\n            local function draw_nakedhidden(colourID, num, key_table, hidden)\r\n                if (not key_table) or (#key_table < 1) then return end\r\n\r\n                local pen = wx.wxPen(sudokuGUI.Colours[colourID], 1, wx.wxSOLID)\r\n                dc:SetPen(pen)\r\n\r\n                for k = 1, #key_table do\r\n                    for n = 1, num do\r\n                        local val = string.byte(key_table[k], n)-char0\r\n                        if hidden ~= true then\r\n                            dc:DrawRectangle(pos[val].x, pos[val].y,\r\n                                             possibleFont.width, possibleFont.height)\r\n                        else\r\n                            dc:DrawRoundedRectangle(pos[val].x, pos[val].y,\r\n                                                    possibleFont.width, possibleFont.height,\r\n                                                    20)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                pen:delete()\r\n            end\r\n\r\n            -- draw pair marker last so it's on top of the others\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENQUADS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_QUADS_COLOUR, 4, hiddenTable.quads.cells[cell], true)\r\n            end\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDQUADS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_QUADS_COLOUR, 4, nakedTable.quads.cells[cell])\r\n            end\r\n\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENTRIPLETS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_TRIPLETS_COLOUR, 3, hiddenTable.triplets.cells[cell], true)\r\n            end\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDTRIPLETS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_TRIPLETS_COLOUR, 3, nakedTable.triplets.cells[cell])\r\n            end\r\n\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENPAIRS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_PAIRS_COLOUR, 2, hiddenTable.pairs.cells[cell], true)\r\n            end\r\n            if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDPAIRS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_PAIRS_COLOUR, 2, nakedTable.pairs.cells[cell])\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 821,
    "text": "dc:SetBrush(wx.wxTRANSPARENT_BRUSH)",
    "type": "statement:functioncall"
  }, {
    "id": 822,
    "text": "local function draw_nakedhidden(colourID, num, key_table, hidden)\r\n                if (not key_table) or (#key_table < 1) then return end\r\n\r\n                local pen = wx.wxPen(sudokuGUI.Colours[colourID], 1, wx.wxSOLID)\r\n                dc:SetPen(pen)\r\n\r\n                for k = 1, #key_table do\r\n                    for n = 1, num do\r\n                        local val = string.byte(key_table[k], n)-char0\r\n                        if hidden ~= true then\r\n                            dc:DrawRectangle(pos[val].x, pos[val].y,\r\n                                             possibleFont.width, possibleFont.height)\r\n                        else\r\n                            dc:DrawRoundedRectangle(pos[val].x, pos[val].y,\r\n                                                    possibleFont.width, possibleFont.height,\r\n                                                    20)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                pen:delete()\r\n            end",
    "type": "statement:localfunction"
  }, {
    "id": 823,
    "text": "if (not key_table) or (#key_table < 1) then return end",
    "type": "statement:if"
  }, {
    "id": 824,
    "text": "local pen = wx.wxPen(sudokuGUI.Colours[colourID], 1, wx.wxSOLID)",
    "type": "statement:localassign"
  }, {
    "id": 825,
    "text": "dc:SetPen(pen)",
    "type": "statement:functioncall"
  }, {
    "id": 826,
    "text": "for k = 1, #key_table do\r\n                    for n = 1, num do\r\n                        local val = string.byte(key_table[k], n)-char0\r\n                        if hidden ~= true then\r\n                            dc:DrawRectangle(pos[val].x, pos[val].y,\r\n                                             possibleFont.width, possibleFont.height)\r\n                        else\r\n                            dc:DrawRoundedRectangle(pos[val].x, pos[val].y,\r\n                                                    possibleFont.width, possibleFont.height,\r\n                                                    20)\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 827,
    "text": "for n = 1, num do\r\n                        local val = string.byte(key_table[k], n)-char0\r\n                        if hidden ~= true then\r\n                            dc:DrawRectangle(pos[val].x, pos[val].y,\r\n                                             possibleFont.width, possibleFont.height)\r\n                        else\r\n                            dc:DrawRoundedRectangle(pos[val].x, pos[val].y,\r\n                                                    possibleFont.width, possibleFont.height,\r\n                                                    20)\r\n                        end\r\n                    end",
    "type": "statement:numericfor"
  }, {
    "id": 828,
    "text": "local val = string.byte(key_table[k], n)-char0",
    "type": "statement:localassign"
  }, {
    "id": 829,
    "text": "if hidden ~= true then\r\n                            dc:DrawRectangle(pos[val].x, pos[val].y,\r\n                                             possibleFont.width, possibleFont.height)\r\n                        else\r\n                            dc:DrawRoundedRectangle(pos[val].x, pos[val].y,\r\n                                                    possibleFont.width, possibleFont.height,\r\n                                                    20)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 830,
    "text": "dc:DrawRectangle(pos[val].x, pos[val].y,\r\n                                             possibleFont.width, possibleFont.height)",
    "type": "statement:functioncall"
  }, {
    "id": 831,
    "text": "dc:DrawRoundedRectangle(pos[val].x, pos[val].y,\r\n                                                    possibleFont.width, possibleFont.height,\r\n                                                    20)",
    "type": "statement:functioncall"
  }, {
    "id": 832,
    "text": "pen:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 833,
    "text": "if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENQUADS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_QUADS_COLOUR, 4, hiddenTable.quads.cells[cell], true)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 834,
    "text": "draw_nakedhidden(sudokuGUI.HIDDEN_QUADS_COLOUR, 4, hiddenTable.quads.cells[cell], true)",
    "type": "statement:functioncall"
  }, {
    "id": 835,
    "text": "if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDQUADS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_QUADS_COLOUR, 4, nakedTable.quads.cells[cell])\r\n            end",
    "type": "statement:if"
  }, {
    "id": 836,
    "text": "draw_nakedhidden(sudokuGUI.NAKED_QUADS_COLOUR, 4, nakedTable.quads.cells[cell])",
    "type": "statement:functioncall"
  }, {
    "id": 837,
    "text": "if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENTRIPLETS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_TRIPLETS_COLOUR, 3, hiddenTable.triplets.cells[cell], true)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 838,
    "text": "draw_nakedhidden(sudokuGUI.HIDDEN_TRIPLETS_COLOUR, 3, hiddenTable.triplets.cells[cell], true)",
    "type": "statement:functioncall"
  }, {
    "id": 839,
    "text": "if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDTRIPLETS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_TRIPLETS_COLOUR, 3, nakedTable.triplets.cells[cell])\r\n            end",
    "type": "statement:if"
  }, {
    "id": 840,
    "text": "draw_nakedhidden(sudokuGUI.NAKED_TRIPLETS_COLOUR, 3, nakedTable.triplets.cells[cell])",
    "type": "statement:functioncall"
  }, {
    "id": 841,
    "text": "if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_HIDDENPAIRS) then\r\n                draw_nakedhidden(sudokuGUI.HIDDEN_PAIRS_COLOUR, 2, hiddenTable.pairs.cells[cell], true)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 842,
    "text": "draw_nakedhidden(sudokuGUI.HIDDEN_PAIRS_COLOUR, 2, hiddenTable.pairs.cells[cell], true)",
    "type": "statement:functioncall"
  }, {
    "id": 843,
    "text": "if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_NAKEDPAIRS) then\r\n                draw_nakedhidden(sudokuGUI.NAKED_PAIRS_COLOUR, 2, nakedTable.pairs.cells[cell])\r\n            end",
    "type": "statement:if"
  }, {
    "id": 844,
    "text": "draw_nakedhidden(sudokuGUI.NAKED_PAIRS_COLOUR, 2, nakedTable.pairs.cells[cell])",
    "type": "statement:functioncall"
  }, {
    "id": 845,
    "text": "local show_errors = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_ERRORS)",
    "type": "statement:localassign"
  }, {
    "id": 846,
    "text": "if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_CREATE) then show_errors = true end",
    "type": "statement:if"
  }, {
    "id": 847,
    "text": "show_errors = true",
    "type": "statement:assign"
  }, {
    "id": 848,
    "text": "if show_errors then show_errors = sudokuGUI.GetCurrentTable().invalid[cell] end",
    "type": "statement:if"
  }, {
    "id": 849,
    "text": "show_errors = sudokuGUI.GetCurrentTable().invalid[cell]",
    "type": "statement:assign"
  }, {
    "id": 850,
    "text": "local show_mistakes = sudokuGUI.sudokuSolnTable and sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES)",
    "type": "statement:localassign"
  }, {
    "id": 851,
    "text": "if show_errors then\r\n        dc:SetPen(wx.wxPen(sudokuGUI.Colours[sudokuGUI.INVALID_VALUE_COLOUR], 1, wx.wxSOLID))\r\n        dc:DrawLine(0, 0, width, height)\r\n        dc:DrawLine(width, 0, 0, height)\r\n    elseif show_mistakes then\r\n        if sudoku.HasCellValue(sudokuTable, cell) and\r\n            (sudoku.GetCellValue(sudokuGUI.sudokuSolnTable, cell) ~=\r\n             sudoku.GetCellValue(sudokuTable, cell)) then\r\n            local pen = wx.wxPen(sudokuGUI.Colours[sudokuGUI.INVALID_VALUE_COLOUR], 1, wx.wxSOLID)\r\n            dc:SetPen(pen)\r\n            pen:delete()\r\n            dc:DrawLine(0, 0, width, height)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 852,
    "text": "dc:SetPen(wx.wxPen(sudokuGUI.Colours[sudokuGUI.INVALID_VALUE_COLOUR], 1, wx.wxSOLID))",
    "type": "statement:functioncall"
  }, {
    "id": 853,
    "text": "dc:DrawLine(0, 0, width, height)",
    "type": "statement:functioncall"
  }, {
    "id": 854,
    "text": "dc:DrawLine(width, 0, 0, height)",
    "type": "statement:functioncall"
  }, {
    "id": 855,
    "text": "if sudoku.HasCellValue(sudokuTable, cell) and\r\n            (sudoku.GetCellValue(sudokuGUI.sudokuSolnTable, cell) ~=\r\n             sudoku.GetCellValue(sudokuTable, cell)) then\r\n            local pen = wx.wxPen(sudokuGUI.Colours[sudokuGUI.INVALID_VALUE_COLOUR], 1, wx.wxSOLID)\r\n            dc:SetPen(pen)\r\n            pen:delete()\r\n            dc:DrawLine(0, 0, width, height)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 856,
    "text": "local pen = wx.wxPen(sudokuGUI.Colours[sudokuGUI.INVALID_VALUE_COLOUR], 1, wx.wxSOLID)",
    "type": "statement:localassign"
  }, {
    "id": 857,
    "text": "if has_cell_value then\r\n        local fgColour = sudokuGUI.Colours[sudokuGUI.VALUE_COLOUR]\r\n        if is_init then\r\n            fgColour = sudokuGUI.Colours[sudokuGUI.INIT_VALUE_COLOUR]\r\n        end\r\n\r\n        dc:SetTextForeground(fgColour)\r\n\r\n        dc:SetFont(valueFont.wxfont)\r\n        dc:DrawText(value_str, width/2  - valueFont.width/2,\r\n                               height/2 - valueFont.height/2)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 858,
    "text": "local fgColour = sudokuGUI.Colours[sudokuGUI.VALUE_COLOUR]",
    "type": "statement:localassign"
  }, {
    "id": 859,
    "text": "if is_init then\r\n            fgColour = sudokuGUI.Colours[sudokuGUI.INIT_VALUE_COLOUR]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 860,
    "text": "fgColour = sudokuGUI.Colours[sudokuGUI.INIT_VALUE_COLOUR]",
    "type": "statement:assign"
  }, {
    "id": 861,
    "text": "dc:SetTextForeground(fgColour)",
    "type": "statement:functioncall"
  }, {
    "id": 862,
    "text": "dc:SetFont(valueFont.wxfont)",
    "type": "statement:functioncall"
  }, {
    "id": 863,
    "text": "dc:DrawText(value_str, width/2  - valueFont.width/2,\r\n                               height/2 - valueFont.height/2)",
    "type": "statement:functioncall"
  }, {
    "id": 864,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 865,
    "text": "local function draw_nakedhidden(colourID, num, key_table, hidden)\r\n                if (not key_table) or (#key_table < 1) then return end\r\n\r\n                local pen = wx.wxPen(sudokuGUI.Colours[colourID], 1, wx.wxSOLID)\r\n                dc:SetPen(pen)\r\n\r\n                for k = 1, #key_table do\r\n                    for n = 1, num do\r\n                        local val = string.byte(key_table[k], n)-char0\r\n                        if hidden ~= true then\r\n                            dc:DrawRectangle(pos[val].x, pos[val].y,\r\n                                             possibleFont.width, possibleFont.height)\r\n                        else\r\n                            dc:DrawRoundedRectangle(pos[val].x, pos[val].y,\r\n                                                    possibleFont.width, possibleFont.height,\r\n                                                    20)\r\n                        end\r\n                    end\r\n                end\r\n\r\n                pen:delete()\r\n            end",
    "type": "function"
  }, {
    "id": 866,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 867,
    "text": "function sudokuGUI.CalcPossiblePositions(width, height, possibleFont)\r\n    local pos = {}\r\n    local show_possible_line = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_POSSIBLE_LINE)\r\n\r\n    if (sudokuGUI.possiblePosCache.pos and\r\n        (sudokuGUI.possiblePosCache.cell_width  == width) and\r\n        (sudokuGUI.possiblePosCache.cell_height == height) and\r\n        (sudokuGUI.possiblePosCache.width  == possibleFont.width) and\r\n        (sudokuGUI.possiblePosCache.height == possibleFont.height) and\r\n        (sudokuGUI.possiblePosCache.line   == show_possible_line)) then\r\n        pos = sudokuGUI.possiblePosCache.pos\r\n    else\r\n        if show_possible_line then\r\n            for i = 1, 9 do\r\n                pos[i] = { x = (1+ (i-1)*possibleFont.width), y = 1 }\r\n            end\r\n        else\r\n            local c = 0\r\n            local horiz_space = (width  - 3*possibleFont.width)/4\r\n            local vert_space  = (height - 3*possibleFont.height)/4\r\n            local h_space = horiz_space\r\n            local v_space = vert_space\r\n\r\n            for j = 1, 3 do\r\n                -- try to center it a little better\r\n                if (j == 1) and (vert_space - math.floor(vert_space) > .3) then\r\n                    v_space = vert_space+1\r\n                else\r\n                    v_space = vert_space\r\n                end\r\n\r\n                for i = 1, 3 do\r\n                    c = c + 1\r\n                    if (i == 1) and (horiz_space - math.floor(horiz_space) > .3) then\r\n                        h_space = horiz_space+1\r\n                    else\r\n                        h_space = horiz_space\r\n                    end\r\n                    pos[c] = { x = i*h_space + (i-1)*possibleFont.width,\r\n                               y = j*v_space + (j-1)*possibleFont.height }\r\n                end\r\n            end\r\n        end\r\n\r\n        -- cache these values for next cell\r\n        sudokuGUI.possiblePosCache.pos         = pos\r\n        sudokuGUI.possiblePosCache.cell_width  = width\r\n        sudokuGUI.possiblePosCache.cell_height = height\r\n        sudokuGUI.possiblePosCache.width       = possibleFont.width\r\n        sudokuGUI.possiblePosCache.height      = possibleFont.height\r\n        sudokuGUI.possiblePosCache.line        = show_possible_line\r\n    end\r\n\r\n    return pos\r\nend",
    "type": "function"
  }, {
    "id": 868,
    "text": "local pos = {}",
    "type": "statement:localassign"
  }, {
    "id": 869,
    "text": "if (sudokuGUI.possiblePosCache.pos and\r\n        (sudokuGUI.possiblePosCache.cell_width  == width) and\r\n        (sudokuGUI.possiblePosCache.cell_height == height) and\r\n        (sudokuGUI.possiblePosCache.width  == possibleFont.width) and\r\n        (sudokuGUI.possiblePosCache.height == possibleFont.height) and\r\n        (sudokuGUI.possiblePosCache.line   == show_possible_line)) then\r\n        pos = sudokuGUI.possiblePosCache.pos\r\n    else\r\n        if show_possible_line then\r\n            for i = 1, 9 do\r\n                pos[i] = { x = (1+ (i-1)*possibleFont.width), y = 1 }\r\n            end\r\n        else\r\n            local c = 0\r\n            local horiz_space = (width  - 3*possibleFont.width)/4\r\n            local vert_space  = (height - 3*possibleFont.height)/4\r\n            local h_space = horiz_space\r\n            local v_space = vert_space\r\n\r\n            for j = 1, 3 do\r\n                -- try to center it a little better\r\n                if (j == 1) and (vert_space - math.floor(vert_space) > .3) then\r\n                    v_space = vert_space+1\r\n                else\r\n                    v_space = vert_space\r\n                end\r\n\r\n                for i = 1, 3 do\r\n                    c = c + 1\r\n                    if (i == 1) and (horiz_space - math.floor(horiz_space) > .3) then\r\n                        h_space = horiz_space+1\r\n                    else\r\n                        h_space = horiz_space\r\n                    end\r\n                    pos[c] = { x = i*h_space + (i-1)*possibleFont.width,\r\n                               y = j*v_space + (j-1)*possibleFont.height }\r\n                end\r\n            end\r\n        end\r\n\r\n        -- cache these values for next cell\r\n        sudokuGUI.possiblePosCache.pos         = pos\r\n        sudokuGUI.possiblePosCache.cell_width  = width\r\n        sudokuGUI.possiblePosCache.cell_height = height\r\n        sudokuGUI.possiblePosCache.width       = possibleFont.width\r\n        sudokuGUI.possiblePosCache.height      = possibleFont.height\r\n        sudokuGUI.possiblePosCache.line        = show_possible_line\r\n    end",
    "type": "statement:if"
  }, {
    "id": 870,
    "text": "pos = sudokuGUI.possiblePosCache.pos",
    "type": "statement:assign"
  }, {
    "id": 871,
    "text": "if show_possible_line then\r\n            for i = 1, 9 do\r\n                pos[i] = { x = (1+ (i-1)*possibleFont.width), y = 1 }\r\n            end\r\n        else\r\n            local c = 0\r\n            local horiz_space = (width  - 3*possibleFont.width)/4\r\n            local vert_space  = (height - 3*possibleFont.height)/4\r\n            local h_space = horiz_space\r\n            local v_space = vert_space\r\n\r\n            for j = 1, 3 do\r\n                -- try to center it a little better\r\n                if (j == 1) and (vert_space - math.floor(vert_space) > .3) then\r\n                    v_space = vert_space+1\r\n                else\r\n                    v_space = vert_space\r\n                end\r\n\r\n                for i = 1, 3 do\r\n                    c = c + 1\r\n                    if (i == 1) and (horiz_space - math.floor(horiz_space) > .3) then\r\n                        h_space = horiz_space+1\r\n                    else\r\n                        h_space = horiz_space\r\n                    end\r\n                    pos[c] = { x = i*h_space + (i-1)*possibleFont.width,\r\n                               y = j*v_space + (j-1)*possibleFont.height }\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 872,
    "text": "for i = 1, 9 do\r\n                pos[i] = { x = (1+ (i-1)*possibleFont.width), y = 1 }\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 873,
    "text": "pos[i] = { x = (1+ (i-1)*possibleFont.width), y = 1 }",
    "type": "statement:assign"
  }, {
    "id": 874,
    "text": "local c = 0",
    "type": "statement:localassign"
  }, {
    "id": 875,
    "text": "local horiz_space = (width  - 3*possibleFont.width)/4",
    "type": "statement:localassign"
  }, {
    "id": 876,
    "text": "local vert_space  = (height - 3*possibleFont.height)/4",
    "type": "statement:localassign"
  }, {
    "id": 877,
    "text": "local h_space = horiz_space",
    "type": "statement:localassign"
  }, {
    "id": 878,
    "text": "local v_space = vert_space",
    "type": "statement:localassign"
  }, {
    "id": 879,
    "text": "for j = 1, 3 do\r\n                -- try to center it a little better\r\n                if (j == 1) and (vert_space - math.floor(vert_space) > .3) then\r\n                    v_space = vert_space+1\r\n                else\r\n                    v_space = vert_space\r\n                end\r\n\r\n                for i = 1, 3 do\r\n                    c = c + 1\r\n                    if (i == 1) and (horiz_space - math.floor(horiz_space) > .3) then\r\n                        h_space = horiz_space+1\r\n                    else\r\n                        h_space = horiz_space\r\n                    end\r\n                    pos[c] = { x = i*h_space + (i-1)*possibleFont.width,\r\n                               y = j*v_space + (j-1)*possibleFont.height }\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 880,
    "text": "if (j == 1) and (vert_space - math.floor(vert_space) > .3) then\r\n                    v_space = vert_space+1\r\n                else\r\n                    v_space = vert_space\r\n                end",
    "type": "statement:if"
  }, {
    "id": 881,
    "text": "v_space = vert_space+1",
    "type": "statement:assign"
  }, {
    "id": 882,
    "text": "v_space = vert_space",
    "type": "statement:assign"
  }, {
    "id": 883,
    "text": "for i = 1, 3 do\r\n                    c = c + 1\r\n                    if (i == 1) and (horiz_space - math.floor(horiz_space) > .3) then\r\n                        h_space = horiz_space+1\r\n                    else\r\n                        h_space = horiz_space\r\n                    end\r\n                    pos[c] = { x = i*h_space + (i-1)*possibleFont.width,\r\n                               y = j*v_space + (j-1)*possibleFont.height }\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 884,
    "text": "c = c + 1",
    "type": "statement:assign"
  }, {
    "id": 885,
    "text": "if (i == 1) and (horiz_space - math.floor(horiz_space) > .3) then\r\n                        h_space = horiz_space+1\r\n                    else\r\n                        h_space = horiz_space\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 886,
    "text": "h_space = horiz_space+1",
    "type": "statement:assign"
  }, {
    "id": 887,
    "text": "h_space = horiz_space",
    "type": "statement:assign"
  }, {
    "id": 888,
    "text": "pos[c] = { x = i*h_space + (i-1)*possibleFont.width,\r\n                               y = j*v_space + (j-1)*possibleFont.height }",
    "type": "statement:assign"
  }, {
    "id": 889,
    "text": "sudokuGUI.possiblePosCache.pos         = pos",
    "type": "statement:assign"
  }, {
    "id": 890,
    "text": "sudokuGUI.possiblePosCache.cell_width  = width",
    "type": "statement:assign"
  }, {
    "id": 891,
    "text": "sudokuGUI.possiblePosCache.cell_height = height",
    "type": "statement:assign"
  }, {
    "id": 892,
    "text": "sudokuGUI.possiblePosCache.width       = possibleFont.width",
    "type": "statement:assign"
  }, {
    "id": 893,
    "text": "sudokuGUI.possiblePosCache.height      = possibleFont.height",
    "type": "statement:assign"
  }, {
    "id": 894,
    "text": "sudokuGUI.possiblePosCache.line        = show_possible_line",
    "type": "statement:assign"
  }, {
    "id": 895,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 896,
    "text": "function sudokuGUI.ConnectPrintEvents(printOut)\r\n    printOut:SetPageInfo(1, 1, 1, 1)\r\n    printOut.HasPage = function(self, pageNum) return pageNum == 1 end\r\n    --printOut.GetPageInfo = function(self) return 1, 1, 1, 1 end\r\n\r\n    printOut.OnPrintPage = function(self, pageNum)\r\n        local dc = self:GetDC()\r\n\r\n        local ppiScr_width, ppiScr_height = self:GetPPIScreen()\r\n        local ppiPrn_width, ppiPrn_height = self:GetPPIPrinter()\r\n        local ppi_scale_x = ppiPrn_width/ppiScr_width\r\n        local ppi_scale_y = ppiPrn_height/ppiScr_height\r\n\r\n        -- Get the size of DC in pixels and the number of pixels in the page\r\n        local dc_width, dc_height = dc:GetSize()\r\n        local pagepix_width, pagepix_height = self:GetPageSizePixels()\r\n\r\n        local dc_pagepix_scale_x = dc_width/pagepix_width\r\n        local dc_pagepix_scale_y = dc_height/pagepix_height\r\n\r\n        -- If printer pageWidth == current DC width, then this doesn't\r\n        -- change. But w might be the preview bitmap width, so scale down.\r\n        local dc_scale_x = ppi_scale_x * dc_pagepix_scale_x\r\n        local dc_scale_y = ppi_scale_y * dc_pagepix_scale_y\r\n\r\n        -- calculate the pixels / mm (25.4 mm = 1 inch)\r\n        local ppmm_x = ppiScr_width / 25.4\r\n        local ppmm_y = ppiScr_height / 25.4\r\n\r\n        -- Adjust the page size for the pixels / mm scaling factor\r\n        local pageMM_width, pageMM_height = self:GetPageSizeMM()\r\n        local pagerect_x, pagerect_y = 0, 0\r\n        local pagerect_w, pagerect_h = pageMM_width * ppmm_x, pageMM_height * ppmm_y\r\n\r\n        -- get margins informations and convert to printer pixels\r\n        local topLeft     = sudokuGUI.pageSetupData:GetMarginTopLeft()\r\n        local bottomRight = sudokuGUI.pageSetupData:GetMarginBottomRight()\r\n\r\n        local top    = topLeft:GetY()     * ppmm_y\r\n        local bottom = bottomRight:GetY() * ppmm_y\r\n        local left   = topLeft:GetX()     * ppmm_x\r\n        local right  = bottomRight:GetX() * ppmm_x\r\n\r\n        local printrect_x, printrect_y = left, top\r\n        local printrect_w, printrect_h = pagerect_w-(left+right), pagerect_h-(top+bottom)\r\n\r\n        dc:SetUserScale(dc_scale_x, dc_scale_y);\r\n\r\n        local cell_width  = (printrect_w)/11\r\n        local cell_height = (printrect_h)/11\r\n        if cell_width < cell_height then cell_height = cell_width end\r\n        if cell_width > cell_height then cell_width  = cell_height end\r\n\r\n        -- calculate font sizes for the printout, copy font since we'll recalc the size\r\n        local valueFont    = { wxfont = wx.wxFont(sudokuGUI.valueFont.wxfont),    size = 8, width = 0, height = 0 }\r\n        local possibleFont = { wxfont = wx.wxFont(sudokuGUI.possibleFont.wxfont), size = 6, width = 0, height = 0 }\r\n        sudokuGUI.DoGetCellBestSize(dc, cell_width, cell_height,\r\n                                    valueFont, possibleFont)\r\n\r\n        local function RowOrigin(row) return printrect_x + row*cell_height + row end\r\n        local function ColOrigin(col) return printrect_y + col*cell_width + col end\r\n\r\n        local old_focused_cell_id = sudokuGUI.focused_cell_id -- clear focus\r\n        sudokuGUI.focused_cell_id = 0\r\n\r\n        for row = 1, 9 do\r\n            for col = 1, 9 do\r\n                local x = ColOrigin(col)\r\n                local y = RowOrigin(row)\r\n                dc:SetDeviceOrigin(x*dc_scale_x, y*dc_scale_x)\r\n                local cell = sudoku.RowColToCell(row, col)\r\n                sudokuGUI.PaintCell(dc, cell, cell_width, cell_height, valueFont, possibleFont)\r\n            end\r\n        end\r\n\r\n        valueFont.wxfont:delete()\r\n        possibleFont.wxfont:delete()\r\n\r\n        sudokuGUI.focused_cell_id = old_focused_cell_id -- restore focus\r\n\r\n        dc:SetDeviceOrigin(0, 0)\r\n        local borders = { [1]=true, [4]=true, [7]=true, [10]=true }\r\n        for i = 1, 10 do\r\n            local pen = wx.wxPen(wx.wxBLACK, iff(borders[i], 4, 2), wx.wxSOLID)\r\n            dc:SetPen(pen)\r\n            pen:delete()\r\n            dc:DrawLine(ColOrigin(1), RowOrigin(i), ColOrigin(10), RowOrigin(i))\r\n            dc:DrawLine(ColOrigin(i), RowOrigin(1), ColOrigin(i),  RowOrigin(10))\r\n        end\r\n\r\n        return true\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 897,
    "text": "printOut:SetPageInfo(1, 1, 1, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 898,
    "text": "printOut.HasPage = function(self, pageNum) return pageNum == 1 end",
    "type": "statement:assign"
  }, {
    "id": 899,
    "text": "printOut.OnPrintPage = function(self, pageNum)\r\n        local dc = self:GetDC()\r\n\r\n        local ppiScr_width, ppiScr_height = self:GetPPIScreen()\r\n        local ppiPrn_width, ppiPrn_height = self:GetPPIPrinter()\r\n        local ppi_scale_x = ppiPrn_width/ppiScr_width\r\n        local ppi_scale_y = ppiPrn_height/ppiScr_height\r\n\r\n        -- Get the size of DC in pixels and the number of pixels in the page\r\n        local dc_width, dc_height = dc:GetSize()\r\n        local pagepix_width, pagepix_height = self:GetPageSizePixels()\r\n\r\n        local dc_pagepix_scale_x = dc_width/pagepix_width\r\n        local dc_pagepix_scale_y = dc_height/pagepix_height\r\n\r\n        -- If printer pageWidth == current DC width, then this doesn't\r\n        -- change. But w might be the preview bitmap width, so scale down.\r\n        local dc_scale_x = ppi_scale_x * dc_pagepix_scale_x\r\n        local dc_scale_y = ppi_scale_y * dc_pagepix_scale_y\r\n\r\n        -- calculate the pixels / mm (25.4 mm = 1 inch)\r\n        local ppmm_x = ppiScr_width / 25.4\r\n        local ppmm_y = ppiScr_height / 25.4\r\n\r\n        -- Adjust the page size for the pixels / mm scaling factor\r\n        local pageMM_width, pageMM_height = self:GetPageSizeMM()\r\n        local pagerect_x, pagerect_y = 0, 0\r\n        local pagerect_w, pagerect_h = pageMM_width * ppmm_x, pageMM_height * ppmm_y\r\n\r\n        -- get margins informations and convert to printer pixels\r\n        local topLeft     = sudokuGUI.pageSetupData:GetMarginTopLeft()\r\n        local bottomRight = sudokuGUI.pageSetupData:GetMarginBottomRight()\r\n\r\n        local top    = topLeft:GetY()     * ppmm_y\r\n        local bottom = bottomRight:GetY() * ppmm_y\r\n        local left   = topLeft:GetX()     * ppmm_x\r\n        local right  = bottomRight:GetX() * ppmm_x\r\n\r\n        local printrect_x, printrect_y = left, top\r\n        local printrect_w, printrect_h = pagerect_w-(left+right), pagerect_h-(top+bottom)\r\n\r\n        dc:SetUserScale(dc_scale_x, dc_scale_y);\r\n\r\n        local cell_width  = (printrect_w)/11\r\n        local cell_height = (printrect_h)/11\r\n        if cell_width < cell_height then cell_height = cell_width end\r\n        if cell_width > cell_height then cell_width  = cell_height end\r\n\r\n        -- calculate font sizes for the printout, copy font since we'll recalc the size\r\n        local valueFont    = { wxfont = wx.wxFont(sudokuGUI.valueFont.wxfont),    size = 8, width = 0, height = 0 }\r\n        local possibleFont = { wxfont = wx.wxFont(sudokuGUI.possibleFont.wxfont), size = 6, width = 0, height = 0 }\r\n        sudokuGUI.DoGetCellBestSize(dc, cell_width, cell_height,\r\n                                    valueFont, possibleFont)\r\n\r\n        local function RowOrigin(row) return printrect_x + row*cell_height + row end\r\n        local function ColOrigin(col) return printrect_y + col*cell_width + col end\r\n\r\n        local old_focused_cell_id = sudokuGUI.focused_cell_id -- clear focus\r\n        sudokuGUI.focused_cell_id = 0\r\n\r\n        for row = 1, 9 do\r\n            for col = 1, 9 do\r\n                local x = ColOrigin(col)\r\n                local y = RowOrigin(row)\r\n                dc:SetDeviceOrigin(x*dc_scale_x, y*dc_scale_x)\r\n                local cell = sudoku.RowColToCell(row, col)\r\n                sudokuGUI.PaintCell(dc, cell, cell_width, cell_height, valueFont, possibleFont)\r\n            end\r\n        end\r\n\r\n        valueFont.wxfont:delete()\r\n        possibleFont.wxfont:delete()\r\n\r\n        sudokuGUI.focused_cell_id = old_focused_cell_id -- restore focus\r\n\r\n        dc:SetDeviceOrigin(0, 0)\r\n        local borders = { [1]=true, [4]=true, [7]=true, [10]=true }\r\n        for i = 1, 10 do\r\n            local pen = wx.wxPen(wx.wxBLACK, iff(borders[i], 4, 2), wx.wxSOLID)\r\n            dc:SetPen(pen)\r\n            pen:delete()\r\n            dc:DrawLine(ColOrigin(1), RowOrigin(i), ColOrigin(10), RowOrigin(i))\r\n            dc:DrawLine(ColOrigin(i), RowOrigin(1), ColOrigin(i),  RowOrigin(10))\r\n        end\r\n\r\n        return true\r\n   end",
    "type": "statement:assign"
  }, {
    "id": 900,
    "text": "local dc = self:GetDC()",
    "type": "statement:localassign"
  }, {
    "id": 901,
    "text": "local ppiScr_width, ppiScr_height = self:GetPPIScreen()",
    "type": "statement:localassign"
  }, {
    "id": 902,
    "text": "local ppiPrn_width, ppiPrn_height = self:GetPPIPrinter()",
    "type": "statement:localassign"
  }, {
    "id": 903,
    "text": "local ppi_scale_x = ppiPrn_width/ppiScr_width",
    "type": "statement:localassign"
  }, {
    "id": 904,
    "text": "local ppi_scale_y = ppiPrn_height/ppiScr_height",
    "type": "statement:localassign"
  }, {
    "id": 905,
    "text": "local dc_width, dc_height = dc:GetSize()",
    "type": "statement:localassign"
  }, {
    "id": 906,
    "text": "local pagepix_width, pagepix_height = self:GetPageSizePixels()",
    "type": "statement:localassign"
  }, {
    "id": 907,
    "text": "local dc_pagepix_scale_x = dc_width/pagepix_width",
    "type": "statement:localassign"
  }, {
    "id": 908,
    "text": "local dc_pagepix_scale_y = dc_height/pagepix_height",
    "type": "statement:localassign"
  }, {
    "id": 909,
    "text": "local dc_scale_x = ppi_scale_x * dc_pagepix_scale_x",
    "type": "statement:localassign"
  }, {
    "id": 910,
    "text": "local dc_scale_y = ppi_scale_y * dc_pagepix_scale_y",
    "type": "statement:localassign"
  }, {
    "id": 911,
    "text": "local ppmm_x = ppiScr_width / 25.4",
    "type": "statement:localassign"
  }, {
    "id": 912,
    "text": "local ppmm_y = ppiScr_height / 25.4",
    "type": "statement:localassign"
  }, {
    "id": 913,
    "text": "local pageMM_width, pageMM_height = self:GetPageSizeMM()",
    "type": "statement:localassign"
  }, {
    "id": 914,
    "text": "local pagerect_x, pagerect_y = 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 915,
    "text": "local pagerect_w, pagerect_h = pageMM_width * ppmm_x, pageMM_height * ppmm_y",
    "type": "statement:localassign"
  }, {
    "id": 916,
    "text": "local topLeft     = sudokuGUI.pageSetupData:GetMarginTopLeft()",
    "type": "statement:localassign"
  }, {
    "id": 917,
    "text": "local bottomRight = sudokuGUI.pageSetupData:GetMarginBottomRight()",
    "type": "statement:localassign"
  }, {
    "id": 918,
    "text": "local top    = topLeft:GetY()     * ppmm_y",
    "type": "statement:localassign"
  }, {
    "id": 919,
    "text": "local bottom = bottomRight:GetY() * ppmm_y",
    "type": "statement:localassign"
  }, {
    "id": 920,
    "text": "local left   = topLeft:GetX()     * ppmm_x",
    "type": "statement:localassign"
  }, {
    "id": 921,
    "text": "local right  = bottomRight:GetX() * ppmm_x",
    "type": "statement:localassign"
  }, {
    "id": 922,
    "text": "local printrect_x, printrect_y = left, top",
    "type": "statement:localassign"
  }, {
    "id": 923,
    "text": "local printrect_w, printrect_h = pagerect_w-(left+right), pagerect_h-(top+bottom)",
    "type": "statement:localassign"
  }, {
    "id": 924,
    "text": "dc:SetUserScale(dc_scale_x, dc_scale_y)",
    "type": "statement:functioncall"
  }, {
    "id": 925,
    "text": "local cell_width  = (printrect_w)/11",
    "type": "statement:localassign"
  }, {
    "id": 926,
    "text": "local cell_height = (printrect_h)/11",
    "type": "statement:localassign"
  }, {
    "id": 927,
    "text": "if cell_width < cell_height then cell_height = cell_width end",
    "type": "statement:if"
  }, {
    "id": 928,
    "text": "cell_height = cell_width",
    "type": "statement:assign"
  }, {
    "id": 929,
    "text": "if cell_width > cell_height then cell_width  = cell_height end",
    "type": "statement:if"
  }, {
    "id": 930,
    "text": "cell_width  = cell_height",
    "type": "statement:assign"
  }, {
    "id": 931,
    "text": "local valueFont    = { wxfont = wx.wxFont(sudokuGUI.valueFont.wxfont),    size = 8, width = 0, height = 0 }",
    "type": "statement:localassign"
  }, {
    "id": 932,
    "text": "local possibleFont = { wxfont = wx.wxFont(sudokuGUI.possibleFont.wxfont), size = 6, width = 0, height = 0 }",
    "type": "statement:localassign"
  }, {
    "id": 933,
    "text": "sudokuGUI.DoGetCellBestSize(dc, cell_width, cell_height,\r\n                                    valueFont, possibleFont)",
    "type": "statement:functioncall"
  }, {
    "id": 934,
    "text": "local function RowOrigin(row) return printrect_x + row*cell_height + row end",
    "type": "statement:localfunction"
  }, {
    "id": 935,
    "text": "local function ColOrigin(col) return printrect_y + col*cell_width + col end",
    "type": "statement:localfunction"
  }, {
    "id": 936,
    "text": "local old_focused_cell_id = sudokuGUI.focused_cell_id",
    "type": "statement:localassign"
  }, {
    "id": 937,
    "text": "sudokuGUI.focused_cell_id = 0",
    "type": "statement:assign"
  }, {
    "id": 938,
    "text": "for row = 1, 9 do\r\n            for col = 1, 9 do\r\n                local x = ColOrigin(col)\r\n                local y = RowOrigin(row)\r\n                dc:SetDeviceOrigin(x*dc_scale_x, y*dc_scale_x)\r\n                local cell = sudoku.RowColToCell(row, col)\r\n                sudokuGUI.PaintCell(dc, cell, cell_width, cell_height, valueFont, possibleFont)\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 939,
    "text": "for col = 1, 9 do\r\n                local x = ColOrigin(col)\r\n                local y = RowOrigin(row)\r\n                dc:SetDeviceOrigin(x*dc_scale_x, y*dc_scale_x)\r\n                local cell = sudoku.RowColToCell(row, col)\r\n                sudokuGUI.PaintCell(dc, cell, cell_width, cell_height, valueFont, possibleFont)\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 940,
    "text": "local x = ColOrigin(col)",
    "type": "statement:localassign"
  }, {
    "id": 941,
    "text": "local y = RowOrigin(row)",
    "type": "statement:localassign"
  }, {
    "id": 942,
    "text": "dc:SetDeviceOrigin(x*dc_scale_x, y*dc_scale_x)",
    "type": "statement:functioncall"
  }, {
    "id": 943,
    "text": "sudokuGUI.PaintCell(dc, cell, cell_width, cell_height, valueFont, possibleFont)",
    "type": "statement:functioncall"
  }, {
    "id": 944,
    "text": "valueFont.wxfont:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 945,
    "text": "possibleFont.wxfont:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 946,
    "text": "sudokuGUI.focused_cell_id = old_focused_cell_id",
    "type": "statement:assign"
  }, {
    "id": 947,
    "text": "dc:SetDeviceOrigin(0, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 948,
    "text": "local borders = { [1]=true, [4]=true, [7]=true, [10]=true }",
    "type": "statement:localassign"
  }, {
    "id": 949,
    "text": "for i = 1, 10 do\r\n            local pen = wx.wxPen(wx.wxBLACK, iff(borders[i], 4, 2), wx.wxSOLID)\r\n            dc:SetPen(pen)\r\n            pen:delete()\r\n            dc:DrawLine(ColOrigin(1), RowOrigin(i), ColOrigin(10), RowOrigin(i))\r\n            dc:DrawLine(ColOrigin(i), RowOrigin(1), ColOrigin(i),  RowOrigin(10))\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 950,
    "text": "local pen = wx.wxPen(wx.wxBLACK, iff(borders[i], 4, 2), wx.wxSOLID)",
    "type": "statement:localassign"
  }, {
    "id": 951,
    "text": "dc:DrawLine(ColOrigin(1), RowOrigin(i), ColOrigin(10), RowOrigin(i))",
    "type": "statement:functioncall"
  }, {
    "id": 952,
    "text": "dc:DrawLine(ColOrigin(i), RowOrigin(1), ColOrigin(i),  RowOrigin(10))",
    "type": "statement:functioncall"
  }, {
    "id": 953,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 954,
    "text": "function(self, pageNum) return pageNum == 1 end",
    "type": "function"
  }, {
    "id": 955,
    "text": "local function RowOrigin(row) return printrect_x + row*cell_height + row end",
    "type": "function"
  }, {
    "id": 956,
    "text": "local function ColOrigin(col) return printrect_y + col*cell_width + col end",
    "type": "function"
  }, {
    "id": 957,
    "text": "function(self, pageNum)\r\n        local dc = self:GetDC()\r\n\r\n        local ppiScr_width, ppiScr_height = self:GetPPIScreen()\r\n        local ppiPrn_width, ppiPrn_height = self:GetPPIPrinter()\r\n        local ppi_scale_x = ppiPrn_width/ppiScr_width\r\n        local ppi_scale_y = ppiPrn_height/ppiScr_height\r\n\r\n        -- Get the size of DC in pixels and the number of pixels in the page\r\n        local dc_width, dc_height = dc:GetSize()\r\n        local pagepix_width, pagepix_height = self:GetPageSizePixels()\r\n\r\n        local dc_pagepix_scale_x = dc_width/pagepix_width\r\n        local dc_pagepix_scale_y = dc_height/pagepix_height\r\n\r\n        -- If printer pageWidth == current DC width, then this doesn't\r\n        -- change. But w might be the preview bitmap width, so scale down.\r\n        local dc_scale_x = ppi_scale_x * dc_pagepix_scale_x\r\n        local dc_scale_y = ppi_scale_y * dc_pagepix_scale_y\r\n\r\n        -- calculate the pixels / mm (25.4 mm = 1 inch)\r\n        local ppmm_x = ppiScr_width / 25.4\r\n        local ppmm_y = ppiScr_height / 25.4\r\n\r\n        -- Adjust the page size for the pixels / mm scaling factor\r\n        local pageMM_width, pageMM_height = self:GetPageSizeMM()\r\n        local pagerect_x, pagerect_y = 0, 0\r\n        local pagerect_w, pagerect_h = pageMM_width * ppmm_x, pageMM_height * ppmm_y\r\n\r\n        -- get margins informations and convert to printer pixels\r\n        local topLeft     = sudokuGUI.pageSetupData:GetMarginTopLeft()\r\n        local bottomRight = sudokuGUI.pageSetupData:GetMarginBottomRight()\r\n\r\n        local top    = topLeft:GetY()     * ppmm_y\r\n        local bottom = bottomRight:GetY() * ppmm_y\r\n        local left   = topLeft:GetX()     * ppmm_x\r\n        local right  = bottomRight:GetX() * ppmm_x\r\n\r\n        local printrect_x, printrect_y = left, top\r\n        local printrect_w, printrect_h = pagerect_w-(left+right), pagerect_h-(top+bottom)\r\n\r\n        dc:SetUserScale(dc_scale_x, dc_scale_y);\r\n\r\n        local cell_width  = (printrect_w)/11\r\n        local cell_height = (printrect_h)/11\r\n        if cell_width < cell_height then cell_height = cell_width end\r\n        if cell_width > cell_height then cell_width  = cell_height end\r\n\r\n        -- calculate font sizes for the printout, copy font since we'll recalc the size\r\n        local valueFont    = { wxfont = wx.wxFont(sudokuGUI.valueFont.wxfont),    size = 8, width = 0, height = 0 }\r\n        local possibleFont = { wxfont = wx.wxFont(sudokuGUI.possibleFont.wxfont), size = 6, width = 0, height = 0 }\r\n        sudokuGUI.DoGetCellBestSize(dc, cell_width, cell_height,\r\n                                    valueFont, possibleFont)\r\n\r\n        local function RowOrigin(row) return printrect_x + row*cell_height + row end\r\n        local function ColOrigin(col) return printrect_y + col*cell_width + col end\r\n\r\n        local old_focused_cell_id = sudokuGUI.focused_cell_id -- clear focus\r\n        sudokuGUI.focused_cell_id = 0\r\n\r\n        for row = 1, 9 do\r\n            for col = 1, 9 do\r\n                local x = ColOrigin(col)\r\n                local y = RowOrigin(row)\r\n                dc:SetDeviceOrigin(x*dc_scale_x, y*dc_scale_x)\r\n                local cell = sudoku.RowColToCell(row, col)\r\n                sudokuGUI.PaintCell(dc, cell, cell_width, cell_height, valueFont, possibleFont)\r\n            end\r\n        end\r\n\r\n        valueFont.wxfont:delete()\r\n        possibleFont.wxfont:delete()\r\n\r\n        sudokuGUI.focused_cell_id = old_focused_cell_id -- restore focus\r\n\r\n        dc:SetDeviceOrigin(0, 0)\r\n        local borders = { [1]=true, [4]=true, [7]=true, [10]=true }\r\n        for i = 1, 10 do\r\n            local pen = wx.wxPen(wx.wxBLACK, iff(borders[i], 4, 2), wx.wxSOLID)\r\n            dc:SetPen(pen)\r\n            pen:delete()\r\n            dc:DrawLine(ColOrigin(1), RowOrigin(i), ColOrigin(10), RowOrigin(i))\r\n            dc:DrawLine(ColOrigin(i), RowOrigin(1), ColOrigin(i),  RowOrigin(10))\r\n        end\r\n\r\n        return true\r\n   end",
    "type": "function"
  }, {
    "id": 958,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 959,
    "text": "function sudokuGUI.Print()\r\n    local printDialogData = wx.wxPrintDialogData(sudokuGUI.printData)\r\n    local printer = wx.wxPrinter(printDialogData)\r\n\r\n    local luaPrintout = wx.wxLuaPrintout(\"wxLuaSudoku Printout\")\r\n    sudokuGUI.ConnectPrintEvents(luaPrintout)\r\n\r\n    if printer:Print(sudokuGUI.frame, luaPrintout, true) == false then\r\n        if printer:GetLastError() == wx.wxPRINTER_ERROR then\r\n            wx.wxMessageBox(\"There was a problem printing.\\n\"..\r\n                            \"Perhaps your current printer is not setup correctly?\",\r\n                            \"wxLuaSudoku Printout\",\r\n                            wx.wxOK, sudokuGUI.frame)\r\n        end\r\n    else\r\n        sudokuGUI.printData = printer:GetPrintDialogData():GetPrintData():Copy()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 960,
    "text": "local printDialogData = wx.wxPrintDialogData(sudokuGUI.printData)",
    "type": "statement:localassign"
  }, {
    "id": 961,
    "text": "local printer = wx.wxPrinter(printDialogData)",
    "type": "statement:localassign"
  }, {
    "id": 962,
    "text": "local luaPrintout = wx.wxLuaPrintout(\"wxLuaSudoku Printout\")",
    "type": "statement:localassign"
  }, {
    "id": 963,
    "text": "sudokuGUI.ConnectPrintEvents(luaPrintout)",
    "type": "statement:functioncall"
  }, {
    "id": 964,
    "text": "if printer:Print(sudokuGUI.frame, luaPrintout, true) == false then\r\n        if printer:GetLastError() == wx.wxPRINTER_ERROR then\r\n            wx.wxMessageBox(\"There was a problem printing.\\n\"..\r\n                            \"Perhaps your current printer is not setup correctly?\",\r\n                            \"wxLuaSudoku Printout\",\r\n                            wx.wxOK, sudokuGUI.frame)\r\n        end\r\n    else\r\n        sudokuGUI.printData = printer:GetPrintDialogData():GetPrintData():Copy()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 965,
    "text": "if printer:GetLastError() == wx.wxPRINTER_ERROR then\r\n            wx.wxMessageBox(\"There was a problem printing.\\n\"..\r\n                            \"Perhaps your current printer is not setup correctly?\",\r\n                            \"wxLuaSudoku Printout\",\r\n                            wx.wxOK, sudokuGUI.frame)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 966,
    "text": "wx.wxMessageBox(\"There was a problem printing.\\n\"..\r\n                            \"Perhaps your current printer is not setup correctly?\",\r\n                            \"wxLuaSudoku Printout\",\r\n                            wx.wxOK, sudokuGUI.frame)",
    "type": "statement:functioncall"
  }, {
    "id": 967,
    "text": "sudokuGUI.printData = printer:GetPrintDialogData():GetPrintData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 968,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 969,
    "text": "function sudokuGUI.PrintPreview()\r\n    luaPrintout      = wx.wxLuaPrintout(\"wxLuaSudoku Print Preview\")\r\n    luaPrintPrintout = wx.wxLuaPrintout(\"wxLuaSudoku Printout\")\r\n    sudokuGUI.ConnectPrintEvents(luaPrintout)\r\n    sudokuGUI.ConnectPrintEvents(luaPrintPrintout)\r\n\r\n    local printDialogData = wx.wxPrintDialogData(sudokuGUI.printData):GetPrintData()\r\n    local preview         = wx.wxPrintPreview(luaPrintout, luaPrintPrintout, printDialogData)\r\n\r\n    local result = preview:Ok()\r\n    if result == false then\r\n        wx.wxMessageBox(\"There was a problem previewing.\\n\"..\r\n                        \"Perhaps your current printer is not setup correctly?\",\r\n                        \"wxLuaSudoku print preview error\",\r\n                        wx.wxOK, sudokuGUI.frame)\r\n    else\r\n        local previewFrame = wx.wxPreviewFrame(preview, sudokuGUI.frame,\r\n                                               \"wxLuaSudoku print preview\",\r\n                                               wx.wxDefaultPosition, wx.wxSize(600, 600))\r\n\r\n        previewFrame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n                function (event)\r\n                    previewFrame:Destroy()\r\n                    event:Skip()\r\n                end )\r\n\r\n        previewFrame:Centre(wx.wxBOTH)\r\n        previewFrame:Initialize()\r\n        previewFrame:Show(true)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 970,
    "text": "luaPrintout      = wx.wxLuaPrintout(\"wxLuaSudoku Print Preview\")",
    "type": "statement:assign"
  }, {
    "id": 971,
    "text": "luaPrintPrintout = wx.wxLuaPrintout(\"wxLuaSudoku Printout\")",
    "type": "statement:assign"
  }, {
    "id": 972,
    "text": "sudokuGUI.ConnectPrintEvents(luaPrintPrintout)",
    "type": "statement:functioncall"
  }, {
    "id": 973,
    "text": "local printDialogData = wx.wxPrintDialogData(sudokuGUI.printData):GetPrintData()",
    "type": "statement:localassign"
  }, {
    "id": 974,
    "text": "local preview         = wx.wxPrintPreview(luaPrintout, luaPrintPrintout, printDialogData)",
    "type": "statement:localassign"
  }, {
    "id": 975,
    "text": "local result = preview:Ok()",
    "type": "statement:localassign"
  }, {
    "id": 976,
    "text": "if result == false then\r\n        wx.wxMessageBox(\"There was a problem previewing.\\n\"..\r\n                        \"Perhaps your current printer is not setup correctly?\",\r\n                        \"wxLuaSudoku print preview error\",\r\n                        wx.wxOK, sudokuGUI.frame)\r\n    else\r\n        local previewFrame = wx.wxPreviewFrame(preview, sudokuGUI.frame,\r\n                                               \"wxLuaSudoku print preview\",\r\n                                               wx.wxDefaultPosition, wx.wxSize(600, 600))\r\n\r\n        previewFrame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n                function (event)\r\n                    previewFrame:Destroy()\r\n                    event:Skip()\r\n                end )\r\n\r\n        previewFrame:Centre(wx.wxBOTH)\r\n        previewFrame:Initialize()\r\n        previewFrame:Show(true)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 977,
    "text": "wx.wxMessageBox(\"There was a problem previewing.\\n\"..\r\n                        \"Perhaps your current printer is not setup correctly?\",\r\n                        \"wxLuaSudoku print preview error\",\r\n                        wx.wxOK, sudokuGUI.frame)",
    "type": "statement:functioncall"
  }, {
    "id": 978,
    "text": "local previewFrame = wx.wxPreviewFrame(preview, sudokuGUI.frame,\r\n                                               \"wxLuaSudoku print preview\",\r\n                                               wx.wxDefaultPosition, wx.wxSize(600, 600))",
    "type": "statement:localassign"
  }, {
    "id": 979,
    "text": "previewFrame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n                function (event)\r\n                    previewFrame:Destroy()\r\n                    event:Skip()\r\n                end )",
    "type": "statement:functioncall"
  }, {
    "id": 980,
    "text": "previewFrame:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 981,
    "text": "event:Skip()",
    "type": "statement:functioncall"
  }, {
    "id": 982,
    "text": "previewFrame:Centre(wx.wxBOTH)",
    "type": "statement:functioncall"
  }, {
    "id": 983,
    "text": "previewFrame:Initialize()",
    "type": "statement:functioncall"
  }, {
    "id": 984,
    "text": "previewFrame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 985,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 986,
    "text": "function sudokuGUI.PrintSetup() -- FIXME DEPRICATED IN WXWIDGETS?\r\n    local printDialogData = wx.wxPrintDialogDataFromPrintData(sudokuGUI.printData)\r\n    local printerDialog   = wx.wxPrintDialog(sudokuGUI.frame, printDialogData)\r\n    printerDialog:GetPrintDialogData():SetSetupDialog(true)\r\n    printerDialog:ShowModal()\r\n    sudokuGUI.printData = printerDialog:GetPrintDialogData():GetPrintData():Copy()\r\n\t--printerDialog:Destroy()\r\nend",
    "type": "function"
  }, {
    "id": 987,
    "text": "local printDialogData = wx.wxPrintDialogDataFromPrintData(sudokuGUI.printData)",
    "type": "statement:localassign"
  }, {
    "id": 988,
    "text": "local printerDialog   = wx.wxPrintDialog(sudokuGUI.frame, printDialogData)",
    "type": "statement:localassign"
  }, {
    "id": 989,
    "text": "printerDialog:GetPrintDialogData():SetSetupDialog(true)",
    "type": "statement:functioncall"
  }, {
    "id": 990,
    "text": "printerDialog:ShowModal()",
    "type": "statement:functioncall"
  }, {
    "id": 991,
    "text": "sudokuGUI.printData = printerDialog:GetPrintDialogData():GetPrintData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 992,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 993,
    "text": "function sudokuGUI.PageSetup()\r\n    sudokuGUI.printData = sudokuGUI.pageSetupData:GetPrintData():Copy()\r\n    local pageSetupDialog = wx.wxPageSetupDialog(sudokuGUI.frame, sudokuGUI.pageSetupData)\r\n    pageSetupDialog:ShowModal()\r\n    sudokuGUI.printData     = pageSetupDialog:GetPageSetupDialogData():GetPrintData():Copy()\r\n    sudokuGUI.pageSetupData = pageSetupDialog:GetPageSetupDialogData():Copy()\r\n\t--pageSetupDialog:Destroy()\r\nend",
    "type": "function"
  }, {
    "id": 994,
    "text": "sudokuGUI.printData = sudokuGUI.pageSetupData:GetPrintData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 995,
    "text": "local pageSetupDialog = wx.wxPageSetupDialog(sudokuGUI.frame, sudokuGUI.pageSetupData)",
    "type": "statement:localassign"
  }, {
    "id": 996,
    "text": "pageSetupDialog:ShowModal()",
    "type": "statement:functioncall"
  }, {
    "id": 997,
    "text": "sudokuGUI.printData     = pageSetupDialog:GetPageSetupDialogData():GetPrintData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 998,
    "text": "sudokuGUI.pageSetupData = pageSetupDialog:GetPageSetupDialogData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 999,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1000,
    "text": "function sudokuGUI.SetFocusWindow(cell)\r\n    local last_id = sudokuGUI.focused_cell_id\r\n    sudokuGUI.focused_cell_id = iff((cell>=1) and (cell<=81), cell, 0)\r\n\r\n    if sudokuGUI.cellWindows[last_id] then\r\n        sudokuGUI.cellWindows[last_id]:Refresh()\r\n    end\r\n    if sudokuGUI.cellWindows[cell] then\r\n        sudokuGUI.cellWindows[cell]:Refresh()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1001,
    "text": "local last_id = sudokuGUI.focused_cell_id",
    "type": "statement:localassign"
  }, {
    "id": 1002,
    "text": "sudokuGUI.focused_cell_id = iff((cell>=1) and (cell<=81), cell, 0)",
    "type": "statement:assign"
  }, {
    "id": 1003,
    "text": "if sudokuGUI.cellWindows[last_id] then\r\n        sudokuGUI.cellWindows[last_id]:Refresh()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1004,
    "text": "sudokuGUI.cellWindows[last_id]:Refresh()",
    "type": "statement:functioncall"
  }, {
    "id": 1005,
    "text": "if sudokuGUI.cellWindows[cell] then\r\n        sudokuGUI.cellWindows[cell]:Refresh()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1006,
    "text": "sudokuGUI.cellWindows[cell]:Refresh()",
    "type": "statement:functioncall"
  }, {
    "id": 1007,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1008,
    "text": "function sudokuGUI.OnKeyUpCellWindow(event)\r\n    event:Skip()\r\n    -- we don't care who actually got this event, just use the \"focused cell\"\r\n    if (sudokuGUI.focused_cell_id < 1) then return end\r\n\r\n    local key = event:GetKeyCode()\r\n\r\n    if (sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) == true) and\r\n        (key == wx.WXK_SHIFT) then\r\n        sudokuGUI.cellWindows[sudokuGUI.focused_cell_id]:Refresh(false)\r\n        return\r\n    end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 1009,
    "text": "if (sudokuGUI.focused_cell_id < 1) then return end",
    "type": "statement:if"
  }, {
    "id": 1010,
    "text": "local key = event:GetKeyCode()",
    "type": "statement:localassign"
  }, {
    "id": 1011,
    "text": "if (sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) == true) and\r\n        (key == wx.WXK_SHIFT) then\r\n        sudokuGUI.cellWindows[sudokuGUI.focused_cell_id]:Refresh(false)\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1012,
    "text": "sudokuGUI.cellWindows[sudokuGUI.focused_cell_id]:Refresh(false)",
    "type": "statement:functioncall"
  }, {
    "id": 1013,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1014,
    "text": "function sudokuGUI.OnKeyDownCellWindow(event)\r\n    event:Skip()\r\n    -- we don't care who actually got this event, just use the \"focused cell\"\r\n    if (sudokuGUI.focused_cell_id < 1) then return end\r\n\r\n    local key = event:GetKeyCode()\r\n\r\n    if (sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) == true) and\r\n        (key == wx.WXK_SHIFT) then\r\n        sudokuGUI.cellWindows[sudokuGUI.focused_cell_id]:Refresh(false)\r\n    end\r\n\r\n    if event:HasModifiers() or event:AltDown() or event:ControlDown() then\r\n        sudokuGUI.cellWindows[sudokuGUI.focused_cell_id]:Refresh(false)\r\n        return\r\n    end\r\n    -- clear the current focused window\r\n    if (key == wx.WXK_ESCAPE) then\r\n        sudokuGUI.SetFocusWindow(0)\r\n        return\r\n    end\r\n\r\n    -- the cursor keys move the focus cell\r\n    local movefocus =\r\n    {\r\n        [wx.WXK_LEFT]       = -1, [wx.WXK_NUMPAD_LEFT]  = -1,\r\n        [wx.WXK_UP]         = -9, [wx.WXK_NUMPAD_UP]    = -9,\r\n        [wx.WXK_RIGHT]      = 1,  [wx.WXK_NUMPAD_RIGHT] = 1,\r\n        [wx.WXK_DOWN]       = 9,  [wx.WXK_NUMPAD_DOWN]  = 9,\r\n\r\n        [wx.WXK_PAGEUP]     = -9, [wx.WXK_PRIOR] = -9,\r\n        [wx.WXK_PAGEDOWN]   = 9,  [wx.WXK_NEXT]  = 9,\r\n\r\n        [wx.WXK_NUMPAD_HOME]     = -10,\r\n        [wx.WXK_NUMPAD_PAGEUP]   = -8, [wx.WXK_NUMPAD_PRIOR] = -8,\r\n        [wx.WXK_NUMPAD_END]      = 8,\r\n        [wx.WXK_NUMPAD_PAGEDOWN] = 10, [wx.WXK_NUMPAD_NEXT]  = 10,\r\n\r\n        [wx.WXK_TAB]          = 1,\r\n        [wx.WXK_RETURN]       = 1,\r\n        [wx.WXK_NUMPAD_ENTER] = 1\r\n    }\r\n\r\n    if (key == wx.WXK_HOME) then\r\n        sudokuGUI.SetFocusWindow(1)\r\n        return\r\n    elseif (key == wx.WXK_END) then\r\n        sudokuGUI.SetFocusWindow(81)\r\n        return\r\n    elseif movefocus[key] then\r\n        local cell = sudokuGUI.focused_cell_id + movefocus[key]\r\n        if (cell >= 1) and (cell <= 81) then\r\n            sudokuGUI.SetFocusWindow(cell)\r\n        end\r\n        return\r\n    end\r\n\r\n    -- translate number pad keys to numbers\r\n    local numpad =\r\n    {\r\n        [wx.WXK_NUMPAD0] = 0,\r\n        [wx.WXK_NUMPAD1] = 1,\r\n        [wx.WXK_NUMPAD2] = 2,\r\n        [wx.WXK_NUMPAD3] = 3,\r\n        [wx.WXK_NUMPAD4] = 4,\r\n        [wx.WXK_NUMPAD5] = 5,\r\n        [wx.WXK_NUMPAD6] = 6,\r\n        [wx.WXK_NUMPAD7] = 7,\r\n        [wx.WXK_NUMPAD8] = 8,\r\n        [wx.WXK_NUMPAD9] = 9,\r\n\r\n        [wx.WXK_DELETE]         = 0,\r\n        [wx.WXK_BACK]           = 0,\r\n        [wx.WXK_SPACE]          = 0,\r\n        [wx.WXK_NUMPAD_INSERT]  = 0,\r\n        [wx.WXK_NUMPAD_DECIMAL] = 0,\r\n        [wx.WXK_NUMPAD_DELETE]  = 0,\r\n    }\r\n\r\n    local zero = string.byte(\"0\")\r\n    if numpad[key] then key = zero + numpad[key] end\r\n\r\n    if (key < 32) or (key > 127) then return end -- normal ASCII key\r\n\r\n    local one  = string.byte(\"1\")\r\n    local nine = string.byte(\"9\")\r\n\r\n    if (key >= one) and (key <= nine) then\r\n        key = key - one + 1\r\n    else\r\n        key = 0\r\n    end\r\n\r\n    if event:ShiftDown() and sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) then\r\n        if (key >= 1) and (key <= 9) then\r\n            sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][key] = iff(sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][key], nil, key)\r\n            sudokuGUI.UpdateTable()\r\n        end\r\n    else\r\n        sudokuGUI.SetCellValue(sudokuGUI.focused_cell_id, key)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1015,
    "text": "if (sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) == true) and\r\n        (key == wx.WXK_SHIFT) then\r\n        sudokuGUI.cellWindows[sudokuGUI.focused_cell_id]:Refresh(false)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1016,
    "text": "if event:HasModifiers() or event:AltDown() or event:ControlDown() then\r\n        sudokuGUI.cellWindows[sudokuGUI.focused_cell_id]:Refresh(false)\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1017,
    "text": "if (key == wx.WXK_ESCAPE) then\r\n        sudokuGUI.SetFocusWindow(0)\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1018,
    "text": "sudokuGUI.SetFocusWindow(0)",
    "type": "statement:functioncall"
  }, {
    "id": 1019,
    "text": "local movefocus =\r\n    {\r\n        [wx.WXK_LEFT]       = -1, [wx.WXK_NUMPAD_LEFT]  = -1,\r\n        [wx.WXK_UP]         = -9, [wx.WXK_NUMPAD_UP]    = -9,\r\n        [wx.WXK_RIGHT]      = 1,  [wx.WXK_NUMPAD_RIGHT] = 1,\r\n        [wx.WXK_DOWN]       = 9,  [wx.WXK_NUMPAD_DOWN]  = 9,\r\n\r\n        [wx.WXK_PAGEUP]     = -9, [wx.WXK_PRIOR] = -9,\r\n        [wx.WXK_PAGEDOWN]   = 9,  [wx.WXK_NEXT]  = 9,\r\n\r\n        [wx.WXK_NUMPAD_HOME]     = -10,\r\n        [wx.WXK_NUMPAD_PAGEUP]   = -8, [wx.WXK_NUMPAD_PRIOR] = -8,\r\n        [wx.WXK_NUMPAD_END]      = 8,\r\n        [wx.WXK_NUMPAD_PAGEDOWN] = 10, [wx.WXK_NUMPAD_NEXT]  = 10,\r\n\r\n        [wx.WXK_TAB]          = 1,\r\n        [wx.WXK_RETURN]       = 1,\r\n        [wx.WXK_NUMPAD_ENTER] = 1\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 1020,
    "text": "if (key == wx.WXK_HOME) then\r\n        sudokuGUI.SetFocusWindow(1)\r\n        return\r\n    elseif (key == wx.WXK_END) then\r\n        sudokuGUI.SetFocusWindow(81)\r\n        return\r\n    elseif movefocus[key] then\r\n        local cell = sudokuGUI.focused_cell_id + movefocus[key]\r\n        if (cell >= 1) and (cell <= 81) then\r\n            sudokuGUI.SetFocusWindow(cell)\r\n        end\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1021,
    "text": "sudokuGUI.SetFocusWindow(1)",
    "type": "statement:functioncall"
  }, {
    "id": 1022,
    "text": "sudokuGUI.SetFocusWindow(81)",
    "type": "statement:functioncall"
  }, {
    "id": 1023,
    "text": "local cell = sudokuGUI.focused_cell_id + movefocus[key]",
    "type": "statement:localassign"
  }, {
    "id": 1024,
    "text": "if (cell >= 1) and (cell <= 81) then\r\n            sudokuGUI.SetFocusWindow(cell)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1025,
    "text": "sudokuGUI.SetFocusWindow(cell)",
    "type": "statement:functioncall"
  }, {
    "id": 1026,
    "text": "local numpad =\r\n    {\r\n        [wx.WXK_NUMPAD0] = 0,\r\n        [wx.WXK_NUMPAD1] = 1,\r\n        [wx.WXK_NUMPAD2] = 2,\r\n        [wx.WXK_NUMPAD3] = 3,\r\n        [wx.WXK_NUMPAD4] = 4,\r\n        [wx.WXK_NUMPAD5] = 5,\r\n        [wx.WXK_NUMPAD6] = 6,\r\n        [wx.WXK_NUMPAD7] = 7,\r\n        [wx.WXK_NUMPAD8] = 8,\r\n        [wx.WXK_NUMPAD9] = 9,\r\n\r\n        [wx.WXK_DELETE]         = 0,\r\n        [wx.WXK_BACK]           = 0,\r\n        [wx.WXK_SPACE]          = 0,\r\n        [wx.WXK_NUMPAD_INSERT]  = 0,\r\n        [wx.WXK_NUMPAD_DECIMAL] = 0,\r\n        [wx.WXK_NUMPAD_DELETE]  = 0,\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 1027,
    "text": "local zero = string.byte(\"0\")",
    "type": "statement:localassign"
  }, {
    "id": 1028,
    "text": "if numpad[key] then key = zero + numpad[key] end",
    "type": "statement:if"
  }, {
    "id": 1029,
    "text": "key = zero + numpad[key]",
    "type": "statement:assign"
  }, {
    "id": 1030,
    "text": "if (key < 32) or (key > 127) then return end",
    "type": "statement:if"
  }, {
    "id": 1031,
    "text": "local one  = string.byte(\"1\")",
    "type": "statement:localassign"
  }, {
    "id": 1032,
    "text": "local nine = string.byte(\"9\")",
    "type": "statement:localassign"
  }, {
    "id": 1033,
    "text": "if (key >= one) and (key <= nine) then\r\n        key = key - one + 1\r\n    else\r\n        key = 0\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1034,
    "text": "key = key - one + 1",
    "type": "statement:assign"
  }, {
    "id": 1035,
    "text": "key = 0",
    "type": "statement:assign"
  }, {
    "id": 1036,
    "text": "if event:ShiftDown() and sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) then\r\n        if (key >= 1) and (key <= 9) then\r\n            sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][key] = iff(sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][key], nil, key)\r\n            sudokuGUI.UpdateTable()\r\n        end\r\n    else\r\n        sudokuGUI.SetCellValue(sudokuGUI.focused_cell_id, key)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1037,
    "text": "if (key >= 1) and (key <= 9) then\r\n            sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][key] = iff(sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][key], nil, key)\r\n            sudokuGUI.UpdateTable()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1038,
    "text": "sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][key] = iff(sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][key], nil, key)",
    "type": "statement:assign"
  }, {
    "id": 1039,
    "text": "sudokuGUI.UpdateTable()",
    "type": "statement:functioncall"
  }, {
    "id": 1040,
    "text": "sudokuGUI.SetCellValue(sudokuGUI.focused_cell_id, key)",
    "type": "statement:functioncall"
  }, {
    "id": 1041,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1042,
    "text": "function sudokuGUI.HitTestPossibleValue(mx, my)\r\n    local cell = sudokuGUI.focused_cell_id\r\n    if (cell < 1) or (cell > 81) then return nil end\r\n\r\n    local w = sudokuGUI.possiblePosCache.width\r\n    local h = sudokuGUI.possiblePosCache.height\r\n    local rect = wx.wxRect(0, 0, w, h)\r\n\r\n    for n = 1, 9 do\r\n        rect.X = sudokuGUI.possiblePosCache.pos[n].x\r\n        rect.Y = sudokuGUI.possiblePosCache.pos[n].y\r\n        if rect:Inside(mx, my) then\r\n            return n\r\n        end\r\n    end\r\n\r\n    return nil\r\nend",
    "type": "function"
  }, {
    "id": 1043,
    "text": "local cell = sudokuGUI.focused_cell_id",
    "type": "statement:localassign"
  }, {
    "id": 1044,
    "text": "if (cell < 1) or (cell > 81) then return nil end",
    "type": "statement:if"
  }, {
    "id": 1045,
    "text": "local w = sudokuGUI.possiblePosCache.width",
    "type": "statement:localassign"
  }, {
    "id": 1046,
    "text": "local h = sudokuGUI.possiblePosCache.height",
    "type": "statement:localassign"
  }, {
    "id": 1047,
    "text": "local rect = wx.wxRect(0, 0, w, h)",
    "type": "statement:localassign"
  }, {
    "id": 1048,
    "text": "for n = 1, 9 do\r\n        rect.X = sudokuGUI.possiblePosCache.pos[n].x\r\n        rect.Y = sudokuGUI.possiblePosCache.pos[n].y\r\n        if rect:Inside(mx, my) then\r\n            return n\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1049,
    "text": "rect.X = sudokuGUI.possiblePosCache.pos[n].x",
    "type": "statement:assign"
  }, {
    "id": 1050,
    "text": "rect.Y = sudokuGUI.possiblePosCache.pos[n].y",
    "type": "statement:assign"
  }, {
    "id": 1051,
    "text": "if rect:Inside(mx, my) then\r\n            return n\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1052,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1053,
    "text": "function sudokuGUI.OnLeftClickCellWindow(event)\r\n    event:Skip()\r\n\r\n    local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n    local winId = win:GetId()\r\n\r\n    if sudokuGUI.cellTextCtrl then\r\n        sudokuGUI.SaveCellTextCtrlValue()\r\n        sudokuGUI.DestroyCellTextCtrl()\r\n    end\r\n\r\n    sudokuGUI.SetFocusWindow(winId)\r\n\r\n    if event:ShiftDown() and sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) then\r\n        local p = sudokuGUI.HitTestPossibleValue(event:GetX(), event:GetY())\r\n        if p then\r\n            sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][p] = iff(sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][p], nil, p)\r\n            sudokuGUI.cellWindows[winId]:Refresh(false)\r\n        end\r\n    end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 1054,
    "text": "local winId = win:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 1055,
    "text": "if sudokuGUI.cellTextCtrl then\r\n        sudokuGUI.SaveCellTextCtrlValue()\r\n        sudokuGUI.DestroyCellTextCtrl()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1056,
    "text": "sudokuGUI.SaveCellTextCtrlValue()",
    "type": "statement:functioncall"
  }, {
    "id": 1057,
    "text": "sudokuGUI.DestroyCellTextCtrl()",
    "type": "statement:functioncall"
  }, {
    "id": 1058,
    "text": "sudokuGUI.SetFocusWindow(winId)",
    "type": "statement:functioncall"
  }, {
    "id": 1059,
    "text": "if event:ShiftDown() and sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) then\r\n        local p = sudokuGUI.HitTestPossibleValue(event:GetX(), event:GetY())\r\n        if p then\r\n            sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][p] = iff(sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][p], nil, p)\r\n            sudokuGUI.cellWindows[winId]:Refresh(false)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1060,
    "text": "local p = sudokuGUI.HitTestPossibleValue(event:GetX(), event:GetY())",
    "type": "statement:localassign"
  }, {
    "id": 1061,
    "text": "if p then\r\n            sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][p] = iff(sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][p], nil, p)\r\n            sudokuGUI.cellWindows[winId]:Refresh(false)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1062,
    "text": "sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][p] = iff(sudokuGUI.pencilMarks[sudokuGUI.focused_cell_id][p], nil, p)",
    "type": "statement:assign"
  }, {
    "id": 1063,
    "text": "sudokuGUI.cellWindows[winId]:Refresh(false)",
    "type": "statement:functioncall"
  }, {
    "id": 1064,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1065,
    "text": "function sudokuGUI.OnLeftDClickCellWindow(event)\r\n    event:Skip()\r\n    local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n    local winId = win:GetId()\r\n    local winWidth, winHeight = win:GetSizeWH()\r\n\r\n    if event:ShiftDown() then return end\r\n\r\n    if sudokuGUI.cellTextCtrl then\r\n        if sudokuGUI.cellTextCtrl:GetId() == winId then\r\n            sudokuGUI.cellTextCtrl:Show(true)\r\n            return\r\n        end\r\n        sudokuGUI.SaveCellTextCtrlValue()\r\n        sudokuGUI.DestroyCellTextCtrl()\r\n    end\r\n\r\n    local is_creating = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_CREATE)\r\n    local value, is_init = sudokuGUI.GetCellValueString(winId)\r\n    if is_init and (not is_creating) then return end\r\n\r\n    sudokuGUI.cellTextCtrl = wx.wxTextCtrl(win, winId, value,\r\n                            wx.wxPoint(0, 0), wx.wxSize(winWidth, winHeight),\r\n                            wx.wxTE_PROCESS_ENTER+wx.wxTE_CENTRE)\r\n    sudokuGUI.cellTextCtrl:SetFont(sudokuGUI.valueFont.wxfont)\r\n    sudokuGUI.cellTextCtrl:SetMaxLength(1)\r\n    --local valid = wx.wxTextValidator(wx.wxFILTER_INCLUDE_LIST)\r\n    --valid:SetIncludeList(\r\n    --cellTextCtrl:SetValidator(valid)\r\n\r\n    sudokuGUI.cellTextCtrl:Connect(winId, wx.wxEVT_COMMAND_TEXT_ENTER,\r\n            function (event)\r\n                local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n                sudokuGUI.SaveCellTextCtrlValue()\r\n                win:Show(false) -- just hide it, we'll destroy it later\r\n            end)\r\n\r\n    sudokuGUI.cellTextCtrl:Connect(wx.wxEVT_CHAR,\r\n            function (event)\r\n                if (event:GetKeyCode() == wx.WXK_ESCAPE) then\r\n                    sudokuGUI.cellTextCtrl:Show(false)\r\n                    sudokuGUI.cellTextCtrl:SetValue(\"\")\r\n                end\r\n                event:Skip()\r\n            end)\r\nend",
    "type": "function"
  }, {
    "id": 1066,
    "text": "local winWidth, winHeight = win:GetSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 1067,
    "text": "if event:ShiftDown() then return end",
    "type": "statement:if"
  }, {
    "id": 1068,
    "text": "if sudokuGUI.cellTextCtrl then\r\n        if sudokuGUI.cellTextCtrl:GetId() == winId then\r\n            sudokuGUI.cellTextCtrl:Show(true)\r\n            return\r\n        end\r\n        sudokuGUI.SaveCellTextCtrlValue()\r\n        sudokuGUI.DestroyCellTextCtrl()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1069,
    "text": "if sudokuGUI.cellTextCtrl:GetId() == winId then\r\n            sudokuGUI.cellTextCtrl:Show(true)\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1070,
    "text": "sudokuGUI.cellTextCtrl:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 1071,
    "text": "local is_creating = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_CREATE)",
    "type": "statement:localassign"
  }, {
    "id": 1072,
    "text": "local value, is_init = sudokuGUI.GetCellValueString(winId)",
    "type": "statement:localassign"
  }, {
    "id": 1073,
    "text": "if is_init and (not is_creating) then return end",
    "type": "statement:if"
  }, {
    "id": 1074,
    "text": "sudokuGUI.cellTextCtrl = wx.wxTextCtrl(win, winId, value,\r\n                            wx.wxPoint(0, 0), wx.wxSize(winWidth, winHeight),\r\n                            wx.wxTE_PROCESS_ENTER+wx.wxTE_CENTRE)",
    "type": "statement:assign"
  }, {
    "id": 1075,
    "text": "sudokuGUI.cellTextCtrl:SetFont(sudokuGUI.valueFont.wxfont)",
    "type": "statement:functioncall"
  }, {
    "id": 1076,
    "text": "sudokuGUI.cellTextCtrl:SetMaxLength(1)",
    "type": "statement:functioncall"
  }, {
    "id": 1077,
    "text": "sudokuGUI.cellTextCtrl:Connect(winId, wx.wxEVT_COMMAND_TEXT_ENTER,\r\n            function (event)\r\n                local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n                sudokuGUI.SaveCellTextCtrlValue()\r\n                win:Show(false) -- just hide it, we'll destroy it later\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 1078,
    "text": "win:Show(false)",
    "type": "statement:functioncall"
  }, {
    "id": 1079,
    "text": "sudokuGUI.cellTextCtrl:Connect(wx.wxEVT_CHAR,\r\n            function (event)\r\n                if (event:GetKeyCode() == wx.WXK_ESCAPE) then\r\n                    sudokuGUI.cellTextCtrl:Show(false)\r\n                    sudokuGUI.cellTextCtrl:SetValue(\"\")\r\n                end\r\n                event:Skip()\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 1080,
    "text": "if (event:GetKeyCode() == wx.WXK_ESCAPE) then\r\n                    sudokuGUI.cellTextCtrl:Show(false)\r\n                    sudokuGUI.cellTextCtrl:SetValue(\"\")\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1081,
    "text": "sudokuGUI.cellTextCtrl:Show(false)",
    "type": "statement:functioncall"
  }, {
    "id": 1082,
    "text": "sudokuGUI.cellTextCtrl:SetValue(\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 1083,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1084,
    "text": "function sudokuGUI.DestroyCellTextCtrl()\r\n    if sudokuGUI.cellTextCtrl then\r\n        sudokuGUI.cellTextCtrl:Show(false)\r\n        sudokuGUI.cellTextCtrl:Destroy()\r\n        sudokuGUI.cellTextCtrl = nil\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1085,
    "text": "if sudokuGUI.cellTextCtrl then\r\n        sudokuGUI.cellTextCtrl:Show(false)\r\n        sudokuGUI.cellTextCtrl:Destroy()\r\n        sudokuGUI.cellTextCtrl = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1086,
    "text": "sudokuGUI.cellTextCtrl:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 1087,
    "text": "sudokuGUI.cellTextCtrl = nil",
    "type": "statement:assign"
  }, {
    "id": 1088,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1089,
    "text": "function sudokuGUI.SaveCellTextCtrlValue()\r\n    if not sudokuGUI.cellTextCtrl then return end\r\n    local value = sudokuGUI.cellTextCtrl:GetValue()\r\n    local cell = sudokuGUI.cellTextCtrl:GetId()\r\n    sudokuGUI.SetCellValue(cell, value)\r\nend",
    "type": "function"
  }, {
    "id": 1090,
    "text": "if not sudokuGUI.cellTextCtrl then return end",
    "type": "statement:if"
  }, {
    "id": 1091,
    "text": "local value = sudokuGUI.cellTextCtrl:GetValue()",
    "type": "statement:localassign"
  }, {
    "id": 1092,
    "text": "local cell = sudokuGUI.cellTextCtrl:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 1093,
    "text": "sudokuGUI.SetCellValue(cell, value)",
    "type": "statement:functioncall"
  }, {
    "id": 1094,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1095,
    "text": "function sudokuGUI.SetCellValue(cell, value)\r\n    -- fix the value to something reasonable\r\n    if type(value) == \"string\" then\r\n        if (value == \"\") or (value == \" \") or (value == \"0\") then\r\n            value = 0\r\n        elseif (string.len(value) ~= 1) or (not string.find(\"123456789\", value)) then\r\n            return\r\n        else\r\n            value = tonumber(value)\r\n        end\r\n    end\r\n\r\n    -- if value is still bad, just exit\r\n    if not ((value == 0) or sudoku.IsValidValueN(value)) then return end\r\n\r\n    local is_creating = sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_CREATE)\r\n    local row, col = sudoku.CellToRowCol(cell)\r\n    local is_init = sudoku.HasCellValue(sudokuGUI.sudokuTables[1], cell)\r\n\r\n    if is_creating then\r\n        if sudoku.GetCellValue(sudokuGUI.sudokuTables[1], cell) ~= value then\r\n            -- add the value to all the tables since it's an init value\r\n            for n = 1, TableCount(sudokuGUI.sudokuTables) do\r\n                sudoku.SetValue(sudokuGUI.sudokuTables[n], row, col, value)\r\n                sudoku.UpdateTable(sudokuGUI.sudokuTables[n])\r\n            end\r\n            -- refresh all in case it's invalid also if not at 1st table update possible\r\n            sudokuGUI.UpdateTable(true)\r\n            sudokuGUI.sudokuSolnTable = nil -- don't know anymore\r\n        end\r\n    else\r\n        local s = sudokuGUI.GetCurrentTable()\r\n        if (not is_init) and (sudoku.GetCellValue(s, cell) ~= value) then\r\n            local s = TableCopy(s)\r\n            sudoku.SetValue(s, row, col, value)\r\n            sudokuGUI.AddTable(s)\r\n        end\r\n    end\r\n\r\n    sudokuGUI.UpdateGUI()\r\nend",
    "type": "function"
  }, {
    "id": 1096,
    "text": "if type(value) == \"string\" then\r\n        if (value == \"\") or (value == \" \") or (value == \"0\") then\r\n            value = 0\r\n        elseif (string.len(value) ~= 1) or (not string.find(\"123456789\", value)) then\r\n            return\r\n        else\r\n            value = tonumber(value)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1097,
    "text": "if (value == \"\") or (value == \" \") or (value == \"0\") then\r\n            value = 0\r\n        elseif (string.len(value) ~= 1) or (not string.find(\"123456789\", value)) then\r\n            return\r\n        else\r\n            value = tonumber(value)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1098,
    "text": "value = tonumber(value)",
    "type": "statement:assign"
  }, {
    "id": 1099,
    "text": "if not ((value == 0) or sudoku.IsValidValueN(value)) then return end",
    "type": "statement:if"
  }, {
    "id": 1100,
    "text": "local is_init = sudoku.HasCellValue(sudokuGUI.sudokuTables[1], cell)",
    "type": "statement:localassign"
  }, {
    "id": 1101,
    "text": "if is_creating then\r\n        if sudoku.GetCellValue(sudokuGUI.sudokuTables[1], cell) ~= value then\r\n            -- add the value to all the tables since it's an init value\r\n            for n = 1, TableCount(sudokuGUI.sudokuTables) do\r\n                sudoku.SetValue(sudokuGUI.sudokuTables[n], row, col, value)\r\n                sudoku.UpdateTable(sudokuGUI.sudokuTables[n])\r\n            end\r\n            -- refresh all in case it's invalid also if not at 1st table update possible\r\n            sudokuGUI.UpdateTable(true)\r\n            sudokuGUI.sudokuSolnTable = nil -- don't know anymore\r\n        end\r\n    else\r\n        local s = sudokuGUI.GetCurrentTable()\r\n        if (not is_init) and (sudoku.GetCellValue(s, cell) ~= value) then\r\n            local s = TableCopy(s)\r\n            sudoku.SetValue(s, row, col, value)\r\n            sudokuGUI.AddTable(s)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1102,
    "text": "if sudoku.GetCellValue(sudokuGUI.sudokuTables[1], cell) ~= value then\r\n            -- add the value to all the tables since it's an init value\r\n            for n = 1, TableCount(sudokuGUI.sudokuTables) do\r\n                sudoku.SetValue(sudokuGUI.sudokuTables[n], row, col, value)\r\n                sudoku.UpdateTable(sudokuGUI.sudokuTables[n])\r\n            end\r\n            -- refresh all in case it's invalid also if not at 1st table update possible\r\n            sudokuGUI.UpdateTable(true)\r\n            sudokuGUI.sudokuSolnTable = nil -- don't know anymore\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1103,
    "text": "for n = 1, TableCount(sudokuGUI.sudokuTables) do\r\n                sudoku.SetValue(sudokuGUI.sudokuTables[n], row, col, value)\r\n                sudoku.UpdateTable(sudokuGUI.sudokuTables[n])\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 1104,
    "text": "sudoku.SetValue(sudokuGUI.sudokuTables[n], row, col, value)",
    "type": "statement:functioncall"
  }, {
    "id": 1105,
    "text": "sudoku.UpdateTable(sudokuGUI.sudokuTables[n])",
    "type": "statement:functioncall"
  }, {
    "id": 1106,
    "text": "sudokuGUI.UpdateTable(true)",
    "type": "statement:functioncall"
  }, {
    "id": 1107,
    "text": "sudokuGUI.sudokuSolnTable = nil",
    "type": "statement:assign"
  }, {
    "id": 1108,
    "text": "local s = sudokuGUI.GetCurrentTable()",
    "type": "statement:localassign"
  }, {
    "id": 1109,
    "text": "if (not is_init) and (sudoku.GetCellValue(s, cell) ~= value) then\r\n            local s = TableCopy(s)\r\n            sudoku.SetValue(s, row, col, value)\r\n            sudokuGUI.AddTable(s)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1110,
    "text": "local s = TableCopy(s)",
    "type": "statement:localassign"
  }, {
    "id": 1111,
    "text": "sudoku.SetValue(s, row, col, value)",
    "type": "statement:functioncall"
  }, {
    "id": 1112,
    "text": "sudokuGUI.AddTable(s)",
    "type": "statement:functioncall"
  }, {
    "id": 1113,
    "text": "sudokuGUI.UpdateGUI()",
    "type": "statement:functioncall"
  }, {
    "id": 1114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1115,
    "text": "function sudokuGUI.GetInitTable()\r\n    return sudokuGUI.sudokuTables[1]\r\nend",
    "type": "function"
  }, {
    "id": 1116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1117,
    "text": "function sudokuGUI.SetInitTable(sudokuTable, solnTable)\r\n    sudokuGUI.sudokuSolnTable = solnTable\r\n    sudokuGUI.sudokuTables_pos = 1\r\n    sudokuGUI.sudokuTables = {}\r\n    table.insert(sudokuGUI.sudokuTables, sudokuTable)\r\n    sudokuGUI.UpdateTable() -- resets possible and refreshes too\r\nend",
    "type": "function"
  }, {
    "id": 1118,
    "text": "sudokuGUI.sudokuSolnTable = solnTable",
    "type": "statement:assign"
  }, {
    "id": 1119,
    "text": "sudokuGUI.sudokuTables_pos = 1",
    "type": "statement:assign"
  }, {
    "id": 1120,
    "text": "sudokuGUI.sudokuTables = {}",
    "type": "statement:assign"
  }, {
    "id": 1121,
    "text": "table.insert(sudokuGUI.sudokuTables, sudokuTable)",
    "type": "statement:functioncall"
  }, {
    "id": 1122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1123,
    "text": "function sudokuGUI.GetCurrentTable()\r\n    return sudokuGUI.sudokuTables[sudokuGUI.sudokuTables_pos]\r\nend",
    "type": "function"
  }, {
    "id": 1124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1125,
    "text": "function sudokuGUI.SetCurrentTable(sudokuTable)\r\n    sudokuGUI.sudokuTables[sudokuGUI.sudokuTables_pos] = sudokuTable\r\nend",
    "type": "function"
  }, {
    "id": 1126,
    "text": "sudokuGUI.sudokuTables[sudokuGUI.sudokuTables_pos] = sudokuTable",
    "type": "statement:assign"
  }, {
    "id": 1127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1128,
    "text": "function sudokuGUI.AddTable(sudokuTable)\r\n    while TableCount(sudokuGUI.sudokuTables) > sudokuGUI.sudokuTables_pos do\r\n        table.remove(sudokuGUI.sudokuTables)\r\n    end\r\n\r\n    -- clear calculated values to save memory\r\n    for n = 2, sudokuGUI.sudokuTables_pos do\r\n        sudokuGUI.sudokuTables[n].row_values   = {}\r\n        sudokuGUI.sudokuTables[n].col_values   = {}\r\n        sudokuGUI.sudokuTables[n].block_values = {}\r\n        sudokuGUI.sudokuTables[n].possible = {}\r\n        sudokuGUI.sudokuTables[n].invalid  = {}\r\n    end\r\n\r\n    table.insert(sudokuGUI.sudokuTables, sudokuTable)\r\n    sudokuGUI.sudokuTables_pos = sudokuGUI.sudokuTables_pos + 1\r\n\r\n    sudokuGUI.UpdateTable()\r\nend",
    "type": "function"
  }, {
    "id": 1129,
    "text": "while TableCount(sudokuGUI.sudokuTables) > sudokuGUI.sudokuTables_pos do\r\n        table.remove(sudokuGUI.sudokuTables)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 1130,
    "text": "table.remove(sudokuGUI.sudokuTables)",
    "type": "statement:functioncall"
  }, {
    "id": 1131,
    "text": "for n = 2, sudokuGUI.sudokuTables_pos do\r\n        sudokuGUI.sudokuTables[n].row_values   = {}\r\n        sudokuGUI.sudokuTables[n].col_values   = {}\r\n        sudokuGUI.sudokuTables[n].block_values = {}\r\n        sudokuGUI.sudokuTables[n].possible = {}\r\n        sudokuGUI.sudokuTables[n].invalid  = {}\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1132,
    "text": "sudokuGUI.sudokuTables[n].row_values   = {}",
    "type": "statement:assign"
  }, {
    "id": 1133,
    "text": "sudokuGUI.sudokuTables[n].col_values   = {}",
    "type": "statement:assign"
  }, {
    "id": 1134,
    "text": "sudokuGUI.sudokuTables[n].block_values = {}",
    "type": "statement:assign"
  }, {
    "id": 1135,
    "text": "sudokuGUI.sudokuTables[n].possible = {}",
    "type": "statement:assign"
  }, {
    "id": 1136,
    "text": "sudokuGUI.sudokuTables[n].invalid  = {}",
    "type": "statement:assign"
  }, {
    "id": 1137,
    "text": "sudokuGUI.sudokuTables_pos = sudokuGUI.sudokuTables_pos + 1",
    "type": "statement:assign"
  }, {
    "id": 1138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1139,
    "text": "function sudokuGUI.GetCellValueString(cell)\r\n    local value = \"\"\r\n\r\n    if sudoku.HasCellValue(sudokuGUI.sudokuTables[1], cell) then\r\n        return tostring(sudoku.GetCellValue(sudokuGUI.sudokuTables[1], cell)), true\r\n    elseif sudoku.HasCellValue(sudokuGUI.GetCurrentTable(), cell) then\r\n        value = tostring(sudoku.GetCellValue(sudokuGUI.GetCurrentTable(), cell))\r\n    end\r\n\r\n    return value, false\r\nend",
    "type": "function"
  }, {
    "id": 1140,
    "text": "local value = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 1141,
    "text": "if sudoku.HasCellValue(sudokuGUI.sudokuTables[1], cell) then\r\n        return tostring(sudoku.GetCellValue(sudokuGUI.sudokuTables[1], cell)), true\r\n    elseif sudoku.HasCellValue(sudokuGUI.GetCurrentTable(), cell) then\r\n        value = tostring(sudoku.GetCellValue(sudokuGUI.GetCurrentTable(), cell))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1142,
    "text": "value = tostring(sudoku.GetCellValue(sudokuGUI.GetCurrentTable(), cell))",
    "type": "statement:assign"
  }, {
    "id": 1143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1144,
    "text": "function sudokuGUI.Refresh()\r\n    for i = 1, 81 do\r\n        if sudokuGUI.cellWindows[i] then\r\n            sudokuGUI.cellWindows[i]:Refresh(false)\r\n        end\r\n    end\r\n\r\n    sudokuGUI.UpdateGUI()\r\nend",
    "type": "function"
  }, {
    "id": 1145,
    "text": "for i = 1, 81 do\r\n        if sudokuGUI.cellWindows[i] then\r\n            sudokuGUI.cellWindows[i]:Refresh(false)\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1146,
    "text": "if sudokuGUI.cellWindows[i] then\r\n            sudokuGUI.cellWindows[i]:Refresh(false)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1147,
    "text": "sudokuGUI.cellWindows[i]:Refresh(false)",
    "type": "statement:functioncall"
  }, {
    "id": 1148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1149,
    "text": "function sudokuGUI.NewPuzzle()\r\n    local ret = wx.wxMessageBox(\"Clear all the values in the current puzzle and start anew?\\n\"..\r\n                                \"Use 'Create' to enter the initial values.\",\r\n                                \"wxLuaSudoku - New puzzle?\",\r\n                                wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                sudokuGUI.frame )\r\n\r\n    if ret == wx.wxOK then\r\n        sudokuGUI.SetInitTable(sudoku.CreateTable(), nil)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1150,
    "text": "local ret = wx.wxMessageBox(\"Clear all the values in the current puzzle and start anew?\\n\"..\r\n                                \"Use 'Create' to enter the initial values.\",\r\n                                \"wxLuaSudoku - New puzzle?\",\r\n                                wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1151,
    "text": "if ret == wx.wxOK then\r\n        sudokuGUI.SetInitTable(sudoku.CreateTable(), nil)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1152,
    "text": "sudokuGUI.SetInitTable(sudoku.CreateTable(), nil)",
    "type": "statement:functioncall"
  }, {
    "id": 1153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1154,
    "text": "function sudokuGUI.CreatePuzzle(init)\r\n    local enableIds =\r\n    {\r\n        sudokuGUI.ID_GENERATE,\r\n        sudokuGUI.ID_OPEN,\r\n        sudokuGUI.ID_SAVEAS,\r\n\r\n        sudokuGUI.ID_RESET,\r\n        sudokuGUI.ID_UNDO,\r\n        sudokuGUI.ID_REDO,\r\n\r\n        sudokuGUI.ID_SOLVE_SCANSINGLES,\r\n        sudokuGUI.ID_SOLVE_SCANROWS,\r\n        sudokuGUI.ID_SOLVE_SCANCOLS,\r\n        sudokuGUI.ID_SOLVE_SCANBLOCKS,\r\n        sudokuGUI.ID_SOLVE_SCANNING,\r\n        sudokuGUI.ID_SOLVE_BRUTEFORCE\r\n    }\r\n\r\n    sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, init)\r\n\r\n    if init then\r\n        local ret = wx.wxMessageBox(\r\n            \"Enter values in the cells to initialize the puzzle with.\\n\"..\r\n            \"Previous cell values will be overwritten.\\n\"..\r\n            \"Don't forget to uncheck 'Create' before playing.\",\r\n            \"wxLuaSudoku - Initialize puzzle?\",\r\n            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n            sudokuGUI.frame )\r\n\r\n        if ret == wx.wxCANCEL then\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, false)\r\n            return\r\n        end\r\n    else\r\n        sudokuGUI.sudokuSolnTable = nil -- reset to unknown\r\n\r\n        if not TableIsEmpty(sudokuGUI.sudokuTables[1].invalid) then\r\n            -- try to make them correct the puzzle\r\n            local ret = wx.wxMessageBox(\r\n                \"The initial puzzle you've created has invalid values.\\n\"..\r\n                \"Press 'Ok' to correct them before continuing.\\n\"..\r\n                \"If you press 'Cancel' showing mistakes will be disabled and \"..\r\n                \"don't blame me if things don't work out for you.\",\r\n                \"wxLuaSudoku - Invalid initial puzzle!\",\r\n                wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                sudokuGUI.frame )\r\n\r\n            if ret == wx.wxOK then\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, true)\r\n                init = true\r\n            end\r\n        else --if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n            sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n        end\r\n\r\n        if (not sudokuGUI.sudokuSolnTable) and sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n        end\r\n    end\r\n\r\n    for n, id in pairs(enableIds) do\r\n        sudokuGUI.frame:GetMenuBar():Enable(id, not init)\r\n        sudokuGUI.frame:GetToolBar():EnableTool(id, not init)\r\n    end\r\n\r\n    sudokuGUI.UpdateTable()\r\nend",
    "type": "function"
  }, {
    "id": 1155,
    "text": "local enableIds =\r\n    {\r\n        sudokuGUI.ID_GENERATE,\r\n        sudokuGUI.ID_OPEN,\r\n        sudokuGUI.ID_SAVEAS,\r\n\r\n        sudokuGUI.ID_RESET,\r\n        sudokuGUI.ID_UNDO,\r\n        sudokuGUI.ID_REDO,\r\n\r\n        sudokuGUI.ID_SOLVE_SCANSINGLES,\r\n        sudokuGUI.ID_SOLVE_SCANROWS,\r\n        sudokuGUI.ID_SOLVE_SCANCOLS,\r\n        sudokuGUI.ID_SOLVE_SCANBLOCKS,\r\n        sudokuGUI.ID_SOLVE_SCANNING,\r\n        sudokuGUI.ID_SOLVE_BRUTEFORCE\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 1156,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, init)",
    "type": "statement:functioncall"
  }, {
    "id": 1157,
    "text": "if init then\r\n        local ret = wx.wxMessageBox(\r\n            \"Enter values in the cells to initialize the puzzle with.\\n\"..\r\n            \"Previous cell values will be overwritten.\\n\"..\r\n            \"Don't forget to uncheck 'Create' before playing.\",\r\n            \"wxLuaSudoku - Initialize puzzle?\",\r\n            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n            sudokuGUI.frame )\r\n\r\n        if ret == wx.wxCANCEL then\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, false)\r\n            return\r\n        end\r\n    else\r\n        sudokuGUI.sudokuSolnTable = nil -- reset to unknown\r\n\r\n        if not TableIsEmpty(sudokuGUI.sudokuTables[1].invalid) then\r\n            -- try to make them correct the puzzle\r\n            local ret = wx.wxMessageBox(\r\n                \"The initial puzzle you've created has invalid values.\\n\"..\r\n                \"Press 'Ok' to correct them before continuing.\\n\"..\r\n                \"If you press 'Cancel' showing mistakes will be disabled and \"..\r\n                \"don't blame me if things don't work out for you.\",\r\n                \"wxLuaSudoku - Invalid initial puzzle!\",\r\n                wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                sudokuGUI.frame )\r\n\r\n            if ret == wx.wxOK then\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, true)\r\n                init = true\r\n            end\r\n        else --if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n            sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n        end\r\n\r\n        if (not sudokuGUI.sudokuSolnTable) and sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1158,
    "text": "local ret = wx.wxMessageBox(\r\n            \"Enter values in the cells to initialize the puzzle with.\\n\"..\r\n            \"Previous cell values will be overwritten.\\n\"..\r\n            \"Don't forget to uncheck 'Create' before playing.\",\r\n            \"wxLuaSudoku - Initialize puzzle?\",\r\n            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n            sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1159,
    "text": "if ret == wx.wxCANCEL then\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, false)\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1160,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, false)",
    "type": "statement:functioncall"
  }, {
    "id": 1161,
    "text": "if not TableIsEmpty(sudokuGUI.sudokuTables[1].invalid) then\r\n            -- try to make them correct the puzzle\r\n            local ret = wx.wxMessageBox(\r\n                \"The initial puzzle you've created has invalid values.\\n\"..\r\n                \"Press 'Ok' to correct them before continuing.\\n\"..\r\n                \"If you press 'Cancel' showing mistakes will be disabled and \"..\r\n                \"don't blame me if things don't work out for you.\",\r\n                \"wxLuaSudoku - Invalid initial puzzle!\",\r\n                wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                sudokuGUI.frame )\r\n\r\n            if ret == wx.wxOK then\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, true)\r\n                init = true\r\n            end\r\n        else --if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n            sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1162,
    "text": "local ret = wx.wxMessageBox(\r\n                \"The initial puzzle you've created has invalid values.\\n\"..\r\n                \"Press 'Ok' to correct them before continuing.\\n\"..\r\n                \"If you press 'Cancel' showing mistakes will be disabled and \"..\r\n                \"don't blame me if things don't work out for you.\",\r\n                \"wxLuaSudoku - Invalid initial puzzle!\",\r\n                wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1163,
    "text": "if ret == wx.wxOK then\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, true)\r\n                init = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1164,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_CREATE, true)",
    "type": "statement:functioncall"
  }, {
    "id": 1165,
    "text": "init = true",
    "type": "statement:assign"
  }, {
    "id": 1166,
    "text": "sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())",
    "type": "statement:assign"
  }, {
    "id": 1167,
    "text": "if (not sudokuGUI.sudokuSolnTable) and sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1168,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)",
    "type": "statement:functioncall"
  }, {
    "id": 1169,
    "text": "for n, id in pairs(enableIds) do\r\n        sudokuGUI.frame:GetMenuBar():Enable(id, not init)\r\n        sudokuGUI.frame:GetToolBar():EnableTool(id, not init)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 1170,
    "text": "sudokuGUI.frame:GetMenuBar():Enable(id, not init)",
    "type": "statement:functioncall"
  }, {
    "id": 1171,
    "text": "sudokuGUI.frame:GetToolBar():EnableTool(id, not init)",
    "type": "statement:functioncall"
  }, {
    "id": 1172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1173,
    "text": "function sudokuGUI.GeneratePuzzle()\r\n    local keep = wx.wxGetNumberFromUser(\"Set the difficulty of the new puzzle by clearing cells.\\n\"..\r\n                                        \"Note: The minimum number of cells to show for a unique puzzle is 17.\",\r\n                                        \"Number of cell values to show\",\r\n                                        \"wxLuaSudoku - Generate puzzle?\",\r\n                                        sudokuGUI.difficulty, 1, 81,\r\n                                        sudokuGUI.frame)\r\n    if keep < 1 then return end -- canceled\r\n\r\n    sudokuGUI.difficulty = keep\r\n\r\n    local solve_progress = 0\r\n    local start_time     = os.time()\r\n    local last_time      = start_time\r\n    local solve_ok       = true\r\n    local msg_idx        = 1\r\n\r\n    local progressDialog = wx.wxProgressDialog(\"wxLuaSudoku - Generating...\",\r\n                           string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[1], 0, 0),\r\n                           1000, sudokuGUI.frame,\r\n                           wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)\r\n\r\n    -- define handler function here so it'll work w/o gui\r\n    function sudoku.GeneratePuzzleHook(count, cell)\r\n        if solve_ok == false then return false end -- canceled\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if solve_progress%10 ~= 0 then return true end\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], count, cell)\r\n        solve_ok = progressDialog:Update(solve_progress, msg)\r\n        return solve_ok\r\n    end\r\n\r\n    local s, count = sudoku.GeneratePuzzle()\r\n    progressDialog:Destroy()\r\n    if not s then return end\r\n\r\n    -- have complete puzzle, now remove cells\r\n\r\n    local diff_count = 0\r\n    local diff_i     = 0\r\n    local diff_cell  = 0\r\n    local diff_open  = 0\r\n    local diff_trial = 0\r\n\r\n    -- define handler function here so it'll work w/o gui\r\n    function sudoku.GeneratePuzzleDifficultyHook(count, i, cell, open_cells, trial)\r\n        diff_count     = count\r\n        diff_i         = i\r\n        diff_cell      = cell\r\n        diff_open      = open_cells\r\n        diff_trial     = trial\r\n        if solve_ok == false then return false end -- canceled\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nTrial %d, Iteration # %d, current cell %d, cells to go %d, available cells %d \", sudokuGUI.sayings[msg_idx], trial, count, cell, 81-keep-i, open_cells)\r\n        solve_ok = progressDialog:Update(i, msg)\r\n        return solve_ok\r\n    end\r\n\r\n    -- hook into brute force solver to update the generate puzzle progress dialog\r\n    function sudoku.SolveBruteForceHook(guesses, cell)\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if solve_progress%10 ~= 0 then return true end\r\n        return sudoku.GeneratePuzzleDifficultyHook(diff_count, diff_i, diff_cell, diff_open, diff_trial)\r\n    end\r\n\r\n    local ensure_unique = true\r\n\r\n    while 1 do\r\n        diff_count = 0\r\n        diff_i     = 0\r\n        diff_cell  = 0\r\n        diff_open  = 0\r\n        diff_trial = 0\r\n\r\n        solve_progress = 0\r\n        start_time     = os.time()\r\n        last_time      = start_time\r\n        solve_ok       = true\r\n        msg_idx        = 1\r\n\r\n        local caption = \"wxLuaSudoku - Ensuring unique solution...\"\r\n        if ensure_unique == false then\r\n            caption = \"wxLuaSudoku - Removing values randomly...\"\r\n        end\r\n\r\n        progressDialog = wx.wxProgressDialog(caption,\r\n                            string.format(\"%s\\nTrial %d, Iteration # %d, current cell %d, cells to go %d, available cells %d \", sudokuGUI.sayings[msg_idx], 0, count, 0, 81, 0),\r\n                            81 - sudokuGUI.difficulty + 1, sudokuGUI.frame,\r\n                            wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)\r\n\r\n        local s1 = sudoku.GeneratePuzzleDifficulty(TableCopy(s), sudokuGUI.difficulty, ensure_unique)\r\n        progressDialog:Destroy()\r\n\r\n        if s1 then\r\n            if ensure_unique then\r\n                sudokuGUI.SetInitTable(s1, TableCopy(s))\r\n            else\r\n                -- verify the puzzle anyway to let them know the status\r\n                local s2 = sudokuGUI.VerifyUniquePuzzle(s1)\r\n                sudokuGUI.SetInitTable(s1, s2)\r\n            end\r\n            break\r\n        else\r\n            local ret = wx.wxMessageBox(\"The puzzle was not fully generated. \"..\r\n                                        \"Press 'Ok' to randomly remove cell values which may or may not \"..\r\n                                        \"yield a unique puzzle or 'Cancel' to abort\",\r\n                                        \"wxLuaSudoku - Unfinished generation\",\r\n                                        wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                                        sudokuGUI.frame)\r\n\r\n            if ret == wx.wxOK then\r\n                ensure_unique = false\r\n            else\r\n                break\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1174,
    "text": "local keep = wx.wxGetNumberFromUser(\"Set the difficulty of the new puzzle by clearing cells.\\n\"..\r\n                                        \"Note: The minimum number of cells to show for a unique puzzle is 17.\",\r\n                                        \"Number of cell values to show\",\r\n                                        \"wxLuaSudoku - Generate puzzle?\",\r\n                                        sudokuGUI.difficulty, 1, 81,\r\n                                        sudokuGUI.frame)",
    "type": "statement:localassign"
  }, {
    "id": 1175,
    "text": "if keep < 1 then return end",
    "type": "statement:if"
  }, {
    "id": 1176,
    "text": "sudokuGUI.difficulty = keep",
    "type": "statement:assign"
  }, {
    "id": 1177,
    "text": "local solve_progress = 0",
    "type": "statement:localassign"
  }, {
    "id": 1178,
    "text": "local start_time     = os.time()",
    "type": "statement:localassign"
  }, {
    "id": 1179,
    "text": "local last_time      = start_time",
    "type": "statement:localassign"
  }, {
    "id": 1180,
    "text": "local solve_ok       = true",
    "type": "statement:localassign"
  }, {
    "id": 1181,
    "text": "local msg_idx        = 1",
    "type": "statement:localassign"
  }, {
    "id": 1182,
    "text": "local progressDialog = wx.wxProgressDialog(\"wxLuaSudoku - Generating...\",\r\n                           string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[1], 0, 0),\r\n                           1000, sudokuGUI.frame,\r\n                           wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)",
    "type": "statement:localassign"
  }, {
    "id": 1183,
    "text": "function sudoku.GeneratePuzzleHook(count, cell)\r\n        if solve_ok == false then return false end -- canceled\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if solve_progress%10 ~= 0 then return true end\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], count, cell)\r\n        solve_ok = progressDialog:Update(solve_progress, msg)\r\n        return solve_ok\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1184,
    "text": "if solve_ok == false then return false end",
    "type": "statement:if"
  }, {
    "id": 1185,
    "text": "solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)",
    "type": "statement:assign"
  }, {
    "id": 1186,
    "text": "if solve_progress%10 ~= 0 then return true end",
    "type": "statement:if"
  }, {
    "id": 1187,
    "text": "if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1188,
    "text": "msg_idx = msg_idx + 1",
    "type": "statement:assign"
  }, {
    "id": 1189,
    "text": "last_time = os.time()",
    "type": "statement:assign"
  }, {
    "id": 1190,
    "text": "local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], count, cell)",
    "type": "statement:localassign"
  }, {
    "id": 1191,
    "text": "solve_ok = progressDialog:Update(solve_progress, msg)",
    "type": "statement:assign"
  }, {
    "id": 1192,
    "text": "local s, count = sudoku.GeneratePuzzle()",
    "type": "statement:localassign"
  }, {
    "id": 1193,
    "text": "progressDialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 1194,
    "text": "if not s then return end",
    "type": "statement:if"
  }, {
    "id": 1195,
    "text": "local diff_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 1196,
    "text": "local diff_i     = 0",
    "type": "statement:localassign"
  }, {
    "id": 1197,
    "text": "local diff_cell  = 0",
    "type": "statement:localassign"
  }, {
    "id": 1198,
    "text": "local diff_open  = 0",
    "type": "statement:localassign"
  }, {
    "id": 1199,
    "text": "local diff_trial = 0",
    "type": "statement:localassign"
  }, {
    "id": 1200,
    "text": "function sudoku.GeneratePuzzleDifficultyHook(count, i, cell, open_cells, trial)\r\n        diff_count     = count\r\n        diff_i         = i\r\n        diff_cell      = cell\r\n        diff_open      = open_cells\r\n        diff_trial     = trial\r\n        if solve_ok == false then return false end -- canceled\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nTrial %d, Iteration # %d, current cell %d, cells to go %d, available cells %d \", sudokuGUI.sayings[msg_idx], trial, count, cell, 81-keep-i, open_cells)\r\n        solve_ok = progressDialog:Update(i, msg)\r\n        return solve_ok\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1201,
    "text": "diff_count     = count",
    "type": "statement:assign"
  }, {
    "id": 1202,
    "text": "diff_i         = i",
    "type": "statement:assign"
  }, {
    "id": 1203,
    "text": "diff_cell      = cell",
    "type": "statement:assign"
  }, {
    "id": 1204,
    "text": "diff_open      = open_cells",
    "type": "statement:assign"
  }, {
    "id": 1205,
    "text": "diff_trial     = trial",
    "type": "statement:assign"
  }, {
    "id": 1206,
    "text": "local msg = string.format(\"%s\\nTrial %d, Iteration # %d, current cell %d, cells to go %d, available cells %d \", sudokuGUI.sayings[msg_idx], trial, count, cell, 81-keep-i, open_cells)",
    "type": "statement:localassign"
  }, {
    "id": 1207,
    "text": "solve_ok = progressDialog:Update(i, msg)",
    "type": "statement:assign"
  }, {
    "id": 1208,
    "text": "function sudoku.SolveBruteForceHook(guesses, cell)\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if solve_progress%10 ~= 0 then return true end\r\n        return sudoku.GeneratePuzzleDifficultyHook(diff_count, diff_i, diff_cell, diff_open, diff_trial)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1209,
    "text": "local ensure_unique = true",
    "type": "statement:localassign"
  }, {
    "id": 1210,
    "text": "while 1 do\r\n        diff_count = 0\r\n        diff_i     = 0\r\n        diff_cell  = 0\r\n        diff_open  = 0\r\n        diff_trial = 0\r\n\r\n        solve_progress = 0\r\n        start_time     = os.time()\r\n        last_time      = start_time\r\n        solve_ok       = true\r\n        msg_idx        = 1\r\n\r\n        local caption = \"wxLuaSudoku - Ensuring unique solution...\"\r\n        if ensure_unique == false then\r\n            caption = \"wxLuaSudoku - Removing values randomly...\"\r\n        end\r\n\r\n        progressDialog = wx.wxProgressDialog(caption,\r\n                            string.format(\"%s\\nTrial %d, Iteration # %d, current cell %d, cells to go %d, available cells %d \", sudokuGUI.sayings[msg_idx], 0, count, 0, 81, 0),\r\n                            81 - sudokuGUI.difficulty + 1, sudokuGUI.frame,\r\n                            wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)\r\n\r\n        local s1 = sudoku.GeneratePuzzleDifficulty(TableCopy(s), sudokuGUI.difficulty, ensure_unique)\r\n        progressDialog:Destroy()\r\n\r\n        if s1 then\r\n            if ensure_unique then\r\n                sudokuGUI.SetInitTable(s1, TableCopy(s))\r\n            else\r\n                -- verify the puzzle anyway to let them know the status\r\n                local s2 = sudokuGUI.VerifyUniquePuzzle(s1)\r\n                sudokuGUI.SetInitTable(s1, s2)\r\n            end\r\n            break\r\n        else\r\n            local ret = wx.wxMessageBox(\"The puzzle was not fully generated. \"..\r\n                                        \"Press 'Ok' to randomly remove cell values which may or may not \"..\r\n                                        \"yield a unique puzzle or 'Cancel' to abort\",\r\n                                        \"wxLuaSudoku - Unfinished generation\",\r\n                                        wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                                        sudokuGUI.frame)\r\n\r\n            if ret == wx.wxOK then\r\n                ensure_unique = false\r\n            else\r\n                break\r\n            end\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 1211,
    "text": "diff_count = 0",
    "type": "statement:assign"
  }, {
    "id": 1212,
    "text": "diff_i     = 0",
    "type": "statement:assign"
  }, {
    "id": 1213,
    "text": "diff_cell  = 0",
    "type": "statement:assign"
  }, {
    "id": 1214,
    "text": "diff_open  = 0",
    "type": "statement:assign"
  }, {
    "id": 1215,
    "text": "diff_trial = 0",
    "type": "statement:assign"
  }, {
    "id": 1216,
    "text": "solve_progress = 0",
    "type": "statement:assign"
  }, {
    "id": 1217,
    "text": "start_time     = os.time()",
    "type": "statement:assign"
  }, {
    "id": 1218,
    "text": "last_time      = start_time",
    "type": "statement:assign"
  }, {
    "id": 1219,
    "text": "solve_ok       = true",
    "type": "statement:assign"
  }, {
    "id": 1220,
    "text": "msg_idx        = 1",
    "type": "statement:assign"
  }, {
    "id": 1221,
    "text": "local caption = \"wxLuaSudoku - Ensuring unique solution...\"",
    "type": "statement:localassign"
  }, {
    "id": 1222,
    "text": "if ensure_unique == false then\r\n            caption = \"wxLuaSudoku - Removing values randomly...\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1223,
    "text": "caption = \"wxLuaSudoku - Removing values randomly...\"",
    "type": "statement:assign"
  }, {
    "id": 1224,
    "text": "progressDialog = wx.wxProgressDialog(caption,\r\n                            string.format(\"%s\\nTrial %d, Iteration # %d, current cell %d, cells to go %d, available cells %d \", sudokuGUI.sayings[msg_idx], 0, count, 0, 81, 0),\r\n                            81 - sudokuGUI.difficulty + 1, sudokuGUI.frame,\r\n                            wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)",
    "type": "statement:assign"
  }, {
    "id": 1225,
    "text": "local s1 = sudoku.GeneratePuzzleDifficulty(TableCopy(s), sudokuGUI.difficulty, ensure_unique)",
    "type": "statement:localassign"
  }, {
    "id": 1226,
    "text": "if s1 then\r\n            if ensure_unique then\r\n                sudokuGUI.SetInitTable(s1, TableCopy(s))\r\n            else\r\n                -- verify the puzzle anyway to let them know the status\r\n                local s2 = sudokuGUI.VerifyUniquePuzzle(s1)\r\n                sudokuGUI.SetInitTable(s1, s2)\r\n            end\r\n            break\r\n        else\r\n            local ret = wx.wxMessageBox(\"The puzzle was not fully generated. \"..\r\n                                        \"Press 'Ok' to randomly remove cell values which may or may not \"..\r\n                                        \"yield a unique puzzle or 'Cancel' to abort\",\r\n                                        \"wxLuaSudoku - Unfinished generation\",\r\n                                        wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                                        sudokuGUI.frame)\r\n\r\n            if ret == wx.wxOK then\r\n                ensure_unique = false\r\n            else\r\n                break\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1227,
    "text": "if ensure_unique then\r\n                sudokuGUI.SetInitTable(s1, TableCopy(s))\r\n            else\r\n                -- verify the puzzle anyway to let them know the status\r\n                local s2 = sudokuGUI.VerifyUniquePuzzle(s1)\r\n                sudokuGUI.SetInitTable(s1, s2)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1228,
    "text": "sudokuGUI.SetInitTable(s1, TableCopy(s))",
    "type": "statement:functioncall"
  }, {
    "id": 1229,
    "text": "local s2 = sudokuGUI.VerifyUniquePuzzle(s1)",
    "type": "statement:localassign"
  }, {
    "id": 1230,
    "text": "sudokuGUI.SetInitTable(s1, s2)",
    "type": "statement:functioncall"
  }, {
    "id": 1231,
    "text": "local ret = wx.wxMessageBox(\"The puzzle was not fully generated. \"..\r\n                                        \"Press 'Ok' to randomly remove cell values which may or may not \"..\r\n                                        \"yield a unique puzzle or 'Cancel' to abort\",\r\n                                        \"wxLuaSudoku - Unfinished generation\",\r\n                                        wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                                        sudokuGUI.frame)",
    "type": "statement:localassign"
  }, {
    "id": 1232,
    "text": "if ret == wx.wxOK then\r\n                ensure_unique = false\r\n            else\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1233,
    "text": "ensure_unique = false",
    "type": "statement:assign"
  }, {
    "id": 1234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1235,
    "text": "function sudoku.GeneratePuzzleHook(count, cell)\r\n        if solve_ok == false then return false end -- canceled\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if solve_progress%10 ~= 0 then return true end\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], count, cell)\r\n        solve_ok = progressDialog:Update(solve_progress, msg)\r\n        return solve_ok\r\n    end",
    "type": "function"
  }, {
    "id": 1236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1237,
    "text": "function sudoku.GeneratePuzzleDifficultyHook(count, i, cell, open_cells, trial)\r\n        diff_count     = count\r\n        diff_i         = i\r\n        diff_cell      = cell\r\n        diff_open      = open_cells\r\n        diff_trial     = trial\r\n        if solve_ok == false then return false end -- canceled\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nTrial %d, Iteration # %d, current cell %d, cells to go %d, available cells %d \", sudokuGUI.sayings[msg_idx], trial, count, cell, 81-keep-i, open_cells)\r\n        solve_ok = progressDialog:Update(i, msg)\r\n        return solve_ok\r\n    end",
    "type": "function"
  }, {
    "id": 1238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1239,
    "text": "function sudoku.SolveBruteForceHook(guesses, cell)\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if solve_progress%10 ~= 0 then return true end\r\n        return sudoku.GeneratePuzzleDifficultyHook(diff_count, diff_i, diff_cell, diff_open, diff_trial)\r\n    end",
    "type": "function"
  }, {
    "id": 1240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1241,
    "text": "function sudokuGUI.OpenPuzzle()\r\n    local fileDialog = wx.wxFileDialog(sudokuGUI.frame, \"Open file\",\r\n                                       sudokuGUI.filePath, sudokuGUI.fileName,\r\n                                       \"wxLuaSudoku files (*.sudoku)|*.sudoku|All files (*)|*\",\r\n                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n    if fileDialog:ShowModal() == wx.wxID_OK then\r\n        local fileName = fileDialog:GetPath()\r\n        local fn = wx.wxFileName(fileName)\r\n        sudokuGUI.filePath = fn:GetPath()\r\n        sudokuGUI.fileName = fn:GetFullName()\r\n\r\n        local s, msg = sudoku.Open(fileName)\r\n        if s then\r\n            sudokuGUI.frame:SetTitle(\"wxLuaSudoku - \"..sudokuGUI.fileName)\r\n\r\n            sudokuGUI.SetInitTable(s, nil)\r\n\r\n            if not TableIsEmpty(sudokuGUI.sudokuTables[1].invalid) then\r\n                -- make them correct the puzzle\r\n                local ret = wx.wxMessageBox(\r\n                    \"The puzzle you've opened has invalid values.\\n\"..\r\n                    \"Press 'Ok' to correct them using 'Create' before continuing \"..\r\n                    \"otherwise 'Cancel' to ignore them.\",\r\n                    \"wxLuaSudoku - Invalid puzzle\",\r\n                    wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                    sudokuGUI.frame )\r\n\r\n                if ret == wx.wxOK then\r\n                    sudokuGUI.CreatePuzzle(true)\r\n                end\r\n            else --if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n                sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n            end\r\n        else\r\n            wx.wxMessageBox( msg,\r\n                             \"wxLuaSudoku - Open file error\",\r\n                             wx.wxOK + wx.wxICON_ERROR,\r\n                             sudokuGUI.frame )\r\n        end\r\n    end\r\n    fileDialog:Destroy()\r\nend",
    "type": "function"
  }, {
    "id": 1242,
    "text": "local fileDialog = wx.wxFileDialog(sudokuGUI.frame, \"Open file\",\r\n                                       sudokuGUI.filePath, sudokuGUI.fileName,\r\n                                       \"wxLuaSudoku files (*.sudoku)|*.sudoku|All files (*)|*\",\r\n                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)",
    "type": "statement:localassign"
  }, {
    "id": 1243,
    "text": "if fileDialog:ShowModal() == wx.wxID_OK then\r\n        local fileName = fileDialog:GetPath()\r\n        local fn = wx.wxFileName(fileName)\r\n        sudokuGUI.filePath = fn:GetPath()\r\n        sudokuGUI.fileName = fn:GetFullName()\r\n\r\n        local s, msg = sudoku.Open(fileName)\r\n        if s then\r\n            sudokuGUI.frame:SetTitle(\"wxLuaSudoku - \"..sudokuGUI.fileName)\r\n\r\n            sudokuGUI.SetInitTable(s, nil)\r\n\r\n            if not TableIsEmpty(sudokuGUI.sudokuTables[1].invalid) then\r\n                -- make them correct the puzzle\r\n                local ret = wx.wxMessageBox(\r\n                    \"The puzzle you've opened has invalid values.\\n\"..\r\n                    \"Press 'Ok' to correct them using 'Create' before continuing \"..\r\n                    \"otherwise 'Cancel' to ignore them.\",\r\n                    \"wxLuaSudoku - Invalid puzzle\",\r\n                    wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                    sudokuGUI.frame )\r\n\r\n                if ret == wx.wxOK then\r\n                    sudokuGUI.CreatePuzzle(true)\r\n                end\r\n            else --if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n                sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n            end\r\n        else\r\n            wx.wxMessageBox( msg,\r\n                             \"wxLuaSudoku - Open file error\",\r\n                             wx.wxOK + wx.wxICON_ERROR,\r\n                             sudokuGUI.frame )\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1244,
    "text": "local fileName = fileDialog:GetPath()",
    "type": "statement:localassign"
  }, {
    "id": 1245,
    "text": "local fn = wx.wxFileName(fileName)",
    "type": "statement:localassign"
  }, {
    "id": 1246,
    "text": "sudokuGUI.filePath = fn:GetPath()",
    "type": "statement:assign"
  }, {
    "id": 1247,
    "text": "sudokuGUI.fileName = fn:GetFullName()",
    "type": "statement:assign"
  }, {
    "id": 1248,
    "text": "local s, msg = sudoku.Open(fileName)",
    "type": "statement:localassign"
  }, {
    "id": 1249,
    "text": "if s then\r\n            sudokuGUI.frame:SetTitle(\"wxLuaSudoku - \"..sudokuGUI.fileName)\r\n\r\n            sudokuGUI.SetInitTable(s, nil)\r\n\r\n            if not TableIsEmpty(sudokuGUI.sudokuTables[1].invalid) then\r\n                -- make them correct the puzzle\r\n                local ret = wx.wxMessageBox(\r\n                    \"The puzzle you've opened has invalid values.\\n\"..\r\n                    \"Press 'Ok' to correct them using 'Create' before continuing \"..\r\n                    \"otherwise 'Cancel' to ignore them.\",\r\n                    \"wxLuaSudoku - Invalid puzzle\",\r\n                    wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                    sudokuGUI.frame )\r\n\r\n                if ret == wx.wxOK then\r\n                    sudokuGUI.CreatePuzzle(true)\r\n                end\r\n            else --if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n                sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n            end\r\n        else\r\n            wx.wxMessageBox( msg,\r\n                             \"wxLuaSudoku - Open file error\",\r\n                             wx.wxOK + wx.wxICON_ERROR,\r\n                             sudokuGUI.frame )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1250,
    "text": "sudokuGUI.frame:SetTitle(\"wxLuaSudoku - \"..sudokuGUI.fileName)",
    "type": "statement:functioncall"
  }, {
    "id": 1251,
    "text": "sudokuGUI.SetInitTable(s, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 1252,
    "text": "if not TableIsEmpty(sudokuGUI.sudokuTables[1].invalid) then\r\n                -- make them correct the puzzle\r\n                local ret = wx.wxMessageBox(\r\n                    \"The puzzle you've opened has invalid values.\\n\"..\r\n                    \"Press 'Ok' to correct them using 'Create' before continuing \"..\r\n                    \"otherwise 'Cancel' to ignore them.\",\r\n                    \"wxLuaSudoku - Invalid puzzle\",\r\n                    wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                    sudokuGUI.frame )\r\n\r\n                if ret == wx.wxOK then\r\n                    sudokuGUI.CreatePuzzle(true)\r\n                end\r\n            else --if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_MISTAKES) then\r\n                sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1253,
    "text": "local ret = wx.wxMessageBox(\r\n                    \"The puzzle you've opened has invalid values.\\n\"..\r\n                    \"Press 'Ok' to correct them using 'Create' before continuing \"..\r\n                    \"otherwise 'Cancel' to ignore them.\",\r\n                    \"wxLuaSudoku - Invalid puzzle\",\r\n                    wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                    sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1254,
    "text": "if ret == wx.wxOK then\r\n                    sudokuGUI.CreatePuzzle(true)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1255,
    "text": "sudokuGUI.CreatePuzzle(true)",
    "type": "statement:functioncall"
  }, {
    "id": 1256,
    "text": "wx.wxMessageBox( msg,\r\n                             \"wxLuaSudoku - Open file error\",\r\n                             wx.wxOK + wx.wxICON_ERROR,\r\n                             sudokuGUI.frame )",
    "type": "statement:functioncall"
  }, {
    "id": 1257,
    "text": "fileDialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 1258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1259,
    "text": "function sudokuGUI.SaveAsPuzzle()\r\n    local fileDialog = wx.wxFileDialog(sudokuGUI.frame, \"Save puzzle\",\r\n                                       sudokuGUI.filePath, sudokuGUI.fileName,\r\n                                       \"wxLuaSudoku files (*.sudoku)|*.sudoku|All files (*)|*\",\r\n                                       wx.wxSAVE + wx.wxOVERWRITE_PROMPT)\r\n    local result = false\r\n    if fileDialog:ShowModal() == wx.wxID_OK then\r\n        local fileName = fileDialog:GetPath()\r\n        local fn = wx.wxFileName(fileName)\r\n        sudokuGUI.filePath = fn:GetPath()\r\n        sudokuGUI.fileName = fn:GetFullName()\r\n\r\n        result = sudoku.Save(sudokuGUI.GetCurrentTable(), fileName)\r\n        if result then\r\n            sudokuGUI.frame:SetTitle(\"wxLuaSudoku - \"..sudokuGUI.fileName)\r\n        else\r\n            wx.wxMessageBox( \"Unable to save file\\n'\"..fileName..\"'\",\r\n                             \"wxLuaSudoku - Save file error\",\r\n                             wx.wxOK + wx.wxICON_ERROR,\r\n                             sudokuGUI.frame )\r\n\r\n        end\r\n    end\r\n    fileDialog:Destroy()\r\n    return result\r\nend",
    "type": "function"
  }, {
    "id": 1260,
    "text": "local fileDialog = wx.wxFileDialog(sudokuGUI.frame, \"Save puzzle\",\r\n                                       sudokuGUI.filePath, sudokuGUI.fileName,\r\n                                       \"wxLuaSudoku files (*.sudoku)|*.sudoku|All files (*)|*\",\r\n                                       wx.wxSAVE + wx.wxOVERWRITE_PROMPT)",
    "type": "statement:localassign"
  }, {
    "id": 1261,
    "text": "local result = false",
    "type": "statement:localassign"
  }, {
    "id": 1262,
    "text": "if fileDialog:ShowModal() == wx.wxID_OK then\r\n        local fileName = fileDialog:GetPath()\r\n        local fn = wx.wxFileName(fileName)\r\n        sudokuGUI.filePath = fn:GetPath()\r\n        sudokuGUI.fileName = fn:GetFullName()\r\n\r\n        result = sudoku.Save(sudokuGUI.GetCurrentTable(), fileName)\r\n        if result then\r\n            sudokuGUI.frame:SetTitle(\"wxLuaSudoku - \"..sudokuGUI.fileName)\r\n        else\r\n            wx.wxMessageBox( \"Unable to save file\\n'\"..fileName..\"'\",\r\n                             \"wxLuaSudoku - Save file error\",\r\n                             wx.wxOK + wx.wxICON_ERROR,\r\n                             sudokuGUI.frame )\r\n\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1263,
    "text": "result = sudoku.Save(sudokuGUI.GetCurrentTable(), fileName)",
    "type": "statement:assign"
  }, {
    "id": 1264,
    "text": "if result then\r\n            sudokuGUI.frame:SetTitle(\"wxLuaSudoku - \"..sudokuGUI.fileName)\r\n        else\r\n            wx.wxMessageBox( \"Unable to save file\\n'\"..fileName..\"'\",\r\n                             \"wxLuaSudoku - Save file error\",\r\n                             wx.wxOK + wx.wxICON_ERROR,\r\n                             sudokuGUI.frame )\r\n\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1265,
    "text": "wx.wxMessageBox( \"Unable to save file\\n'\"..fileName..\"'\",\r\n                             \"wxLuaSudoku - Save file error\",\r\n                             wx.wxOK + wx.wxICON_ERROR,\r\n                             sudokuGUI.frame )",
    "type": "statement:functioncall"
  }, {
    "id": 1266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1267,
    "text": "function sudokuGUI.Undo()\r\n    if sudokuGUI.sudokuTables_pos > 1 then\r\n        sudokuGUI.sudokuTables_pos = sudokuGUI.sudokuTables_pos - 1\r\n        sudokuGUI.UpdateTable(true)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1268,
    "text": "if sudokuGUI.sudokuTables_pos > 1 then\r\n        sudokuGUI.sudokuTables_pos = sudokuGUI.sudokuTables_pos - 1\r\n        sudokuGUI.UpdateTable(true)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1269,
    "text": "sudokuGUI.sudokuTables_pos = sudokuGUI.sudokuTables_pos - 1",
    "type": "statement:assign"
  }, {
    "id": 1270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1271,
    "text": "function sudokuGUI.Redo()\r\n    if sudokuGUI.sudokuTables_pos < TableCount(sudokuGUI.sudokuTables) then\r\n        sudokuGUI.sudokuTables_pos = sudokuGUI.sudokuTables_pos + 1\r\n        sudokuGUI.UpdateTable(true)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1272,
    "text": "if sudokuGUI.sudokuTables_pos < TableCount(sudokuGUI.sudokuTables) then\r\n        sudokuGUI.sudokuTables_pos = sudokuGUI.sudokuTables_pos + 1\r\n        sudokuGUI.UpdateTable(true)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1274,
    "text": "function sudokuGUI.FixInvalid(sudokuTable, show_dialog)\r\n    local s = TableCopy(sudokuTable)\r\n    local solnTable = sudokuGUI.sudokuSolnTable\r\n    if solnTable and TableIsEmpty(solnTable.invalid) then\r\n        for cell = 1, 81 do\r\n            if sudoku.HasCellValue(s, cell) then\r\n                local current_value = sudoku.GetCellValue(s, cell)\r\n                local correct_value = sudoku.GetCellValue(solnTable, cell)\r\n                if current_value ~= correct_value then\r\n                    sudoku.SetCellValue(s, cell, correct_value)\r\n                end\r\n            end\r\n        end\r\n        sudoku.UpdateTable(s)\r\n        return s\r\n    else\r\n        if show_dialog then\r\n            local msg = \"The initial puzzle must be solved first.\\n\"..\r\n                        \"Would you like me to try to solve it?\"\r\n            local flags = wx.wxYES_NO\r\n\r\n            local invalid = true\r\n            if solnTable and not TableIsEmpty(solnTable.invalid) then\r\n                invalid = true\r\n            end\r\n            if invalid then\r\n                msg = \"The initial puzzle has invalid values.\\n\"..\r\n                      \"Please correct them first using Create.\"\r\n                flags = wx.wxOK\r\n            end\r\n            local ret = wx.wxMessageBox(msg,\r\n                                        \"wxLuaSudoku - Invalid puzzle\",\r\n                                        flags + wx.wxICON_INFORMATION,\r\n                                        sudokuGUI.frame )\r\n\r\n            if not invalid and (ret == wx.wxOK) then\r\n                s = sudokuGUI.SolveBruteForce(sudokuGUI.sudokuTables[1])\r\n                if not s then\r\n                    wx.wxMessageBox(\"Unable to solve or or solving was aborted, giving up.\",\r\n                                    \"wxLuaSudoku - Invalid puzzle\",\r\n                                    wx.wxOK + wx.wxICON_INFORMATION,\r\n                                    sudokuGUI.frame )\r\n                    return nil\r\n                end\r\n                sudokuGUI.sudokuSolnTable = s\r\n                sudoku.UpdateTable(sudokuGUI.sudokuSolnTable)\r\n                return sudokuGUI.FixInvalid(sudokuTable, show_dialog)\r\n            else\r\n                return nil\r\n            end\r\n        else\r\n            return nil\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1275,
    "text": "local solnTable = sudokuGUI.sudokuSolnTable",
    "type": "statement:localassign"
  }, {
    "id": 1276,
    "text": "if solnTable and TableIsEmpty(solnTable.invalid) then\r\n        for cell = 1, 81 do\r\n            if sudoku.HasCellValue(s, cell) then\r\n                local current_value = sudoku.GetCellValue(s, cell)\r\n                local correct_value = sudoku.GetCellValue(solnTable, cell)\r\n                if current_value ~= correct_value then\r\n                    sudoku.SetCellValue(s, cell, correct_value)\r\n                end\r\n            end\r\n        end\r\n        sudoku.UpdateTable(s)\r\n        return s\r\n    else\r\n        if show_dialog then\r\n            local msg = \"The initial puzzle must be solved first.\\n\"..\r\n                        \"Would you like me to try to solve it?\"\r\n            local flags = wx.wxYES_NO\r\n\r\n            local invalid = true\r\n            if solnTable and not TableIsEmpty(solnTable.invalid) then\r\n                invalid = true\r\n            end\r\n            if invalid then\r\n                msg = \"The initial puzzle has invalid values.\\n\"..\r\n                      \"Please correct them first using Create.\"\r\n                flags = wx.wxOK\r\n            end\r\n            local ret = wx.wxMessageBox(msg,\r\n                                        \"wxLuaSudoku - Invalid puzzle\",\r\n                                        flags + wx.wxICON_INFORMATION,\r\n                                        sudokuGUI.frame )\r\n\r\n            if not invalid and (ret == wx.wxOK) then\r\n                s = sudokuGUI.SolveBruteForce(sudokuGUI.sudokuTables[1])\r\n                if not s then\r\n                    wx.wxMessageBox(\"Unable to solve or or solving was aborted, giving up.\",\r\n                                    \"wxLuaSudoku - Invalid puzzle\",\r\n                                    wx.wxOK + wx.wxICON_INFORMATION,\r\n                                    sudokuGUI.frame )\r\n                    return nil\r\n                end\r\n                sudokuGUI.sudokuSolnTable = s\r\n                sudoku.UpdateTable(sudokuGUI.sudokuSolnTable)\r\n                return sudokuGUI.FixInvalid(sudokuTable, show_dialog)\r\n            else\r\n                return nil\r\n            end\r\n        else\r\n            return nil\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1277,
    "text": "for cell = 1, 81 do\r\n            if sudoku.HasCellValue(s, cell) then\r\n                local current_value = sudoku.GetCellValue(s, cell)\r\n                local correct_value = sudoku.GetCellValue(solnTable, cell)\r\n                if current_value ~= correct_value then\r\n                    sudoku.SetCellValue(s, cell, correct_value)\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 1278,
    "text": "if sudoku.HasCellValue(s, cell) then\r\n                local current_value = sudoku.GetCellValue(s, cell)\r\n                local correct_value = sudoku.GetCellValue(solnTable, cell)\r\n                if current_value ~= correct_value then\r\n                    sudoku.SetCellValue(s, cell, correct_value)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1279,
    "text": "local current_value = sudoku.GetCellValue(s, cell)",
    "type": "statement:localassign"
  }, {
    "id": 1280,
    "text": "local correct_value = sudoku.GetCellValue(solnTable, cell)",
    "type": "statement:localassign"
  }, {
    "id": 1281,
    "text": "if current_value ~= correct_value then\r\n                    sudoku.SetCellValue(s, cell, correct_value)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1282,
    "text": "sudoku.SetCellValue(s, cell, correct_value)",
    "type": "statement:functioncall"
  }, {
    "id": 1283,
    "text": "sudoku.UpdateTable(s)",
    "type": "statement:functioncall"
  }, {
    "id": 1284,
    "text": "if show_dialog then\r\n            local msg = \"The initial puzzle must be solved first.\\n\"..\r\n                        \"Would you like me to try to solve it?\"\r\n            local flags = wx.wxYES_NO\r\n\r\n            local invalid = true\r\n            if solnTable and not TableIsEmpty(solnTable.invalid) then\r\n                invalid = true\r\n            end\r\n            if invalid then\r\n                msg = \"The initial puzzle has invalid values.\\n\"..\r\n                      \"Please correct them first using Create.\"\r\n                flags = wx.wxOK\r\n            end\r\n            local ret = wx.wxMessageBox(msg,\r\n                                        \"wxLuaSudoku - Invalid puzzle\",\r\n                                        flags + wx.wxICON_INFORMATION,\r\n                                        sudokuGUI.frame )\r\n\r\n            if not invalid and (ret == wx.wxOK) then\r\n                s = sudokuGUI.SolveBruteForce(sudokuGUI.sudokuTables[1])\r\n                if not s then\r\n                    wx.wxMessageBox(\"Unable to solve or or solving was aborted, giving up.\",\r\n                                    \"wxLuaSudoku - Invalid puzzle\",\r\n                                    wx.wxOK + wx.wxICON_INFORMATION,\r\n                                    sudokuGUI.frame )\r\n                    return nil\r\n                end\r\n                sudokuGUI.sudokuSolnTable = s\r\n                sudoku.UpdateTable(sudokuGUI.sudokuSolnTable)\r\n                return sudokuGUI.FixInvalid(sudokuTable, show_dialog)\r\n            else\r\n                return nil\r\n            end\r\n        else\r\n            return nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1285,
    "text": "local msg = \"The initial puzzle must be solved first.\\n\"..\r\n                        \"Would you like me to try to solve it?\"",
    "type": "statement:localassign"
  }, {
    "id": 1286,
    "text": "local flags = wx.wxYES_NO",
    "type": "statement:localassign"
  }, {
    "id": 1287,
    "text": "local invalid = true",
    "type": "statement:localassign"
  }, {
    "id": 1288,
    "text": "if solnTable and not TableIsEmpty(solnTable.invalid) then\r\n                invalid = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1289,
    "text": "invalid = true",
    "type": "statement:assign"
  }, {
    "id": 1290,
    "text": "if invalid then\r\n                msg = \"The initial puzzle has invalid values.\\n\"..\r\n                      \"Please correct them first using Create.\"\r\n                flags = wx.wxOK\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1291,
    "text": "msg = \"The initial puzzle has invalid values.\\n\"..\r\n                      \"Please correct them first using Create.\"",
    "type": "statement:assign"
  }, {
    "id": 1292,
    "text": "flags = wx.wxOK",
    "type": "statement:assign"
  }, {
    "id": 1293,
    "text": "local ret = wx.wxMessageBox(msg,\r\n                                        \"wxLuaSudoku - Invalid puzzle\",\r\n                                        flags + wx.wxICON_INFORMATION,\r\n                                        sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1294,
    "text": "if not invalid and (ret == wx.wxOK) then\r\n                s = sudokuGUI.SolveBruteForce(sudokuGUI.sudokuTables[1])\r\n                if not s then\r\n                    wx.wxMessageBox(\"Unable to solve or or solving was aborted, giving up.\",\r\n                                    \"wxLuaSudoku - Invalid puzzle\",\r\n                                    wx.wxOK + wx.wxICON_INFORMATION,\r\n                                    sudokuGUI.frame )\r\n                    return nil\r\n                end\r\n                sudokuGUI.sudokuSolnTable = s\r\n                sudoku.UpdateTable(sudokuGUI.sudokuSolnTable)\r\n                return sudokuGUI.FixInvalid(sudokuTable, show_dialog)\r\n            else\r\n                return nil\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1295,
    "text": "s = sudokuGUI.SolveBruteForce(sudokuGUI.sudokuTables[1])",
    "type": "statement:assign"
  }, {
    "id": 1296,
    "text": "if not s then\r\n                    wx.wxMessageBox(\"Unable to solve or or solving was aborted, giving up.\",\r\n                                    \"wxLuaSudoku - Invalid puzzle\",\r\n                                    wx.wxOK + wx.wxICON_INFORMATION,\r\n                                    sudokuGUI.frame )\r\n                    return nil\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1297,
    "text": "wx.wxMessageBox(\"Unable to solve or or solving was aborted, giving up.\",\r\n                                    \"wxLuaSudoku - Invalid puzzle\",\r\n                                    wx.wxOK + wx.wxICON_INFORMATION,\r\n                                    sudokuGUI.frame )",
    "type": "statement:functioncall"
  }, {
    "id": 1298,
    "text": "sudokuGUI.sudokuSolnTable = s",
    "type": "statement:assign"
  }, {
    "id": 1299,
    "text": "sudoku.UpdateTable(sudokuGUI.sudokuSolnTable)",
    "type": "statement:functioncall"
  }, {
    "id": 1300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1301,
    "text": "function sudokuGUI.VerifyUniquePuzzle(sudokuTable)\r\n    sudoku.CalcInvalidCells(sudokuTable)\r\n    local invalid_count = TableCount(sudokuTable.invalid)\r\n\r\n    if invalid_count > 0 then\r\n        local ret = wx.wxMessageBox(\r\n                string.format(\"The initial values of the puzzle are invalid.\\n\"..\r\n                              \"There are %d cells with duplicate values.\\n\"..\r\n                              \"Please select Create and fix them before trying to solve.\\n\", invalid_count),\r\n                              \"wxLuaSudoku - Invalid puzzle\",\r\n                              wx.wxOK + wx.wxICON_ERROR,\r\n                              sudokuGUI.frame )\r\n        return\r\n    end\r\n\r\n    local solve_progress = 0\r\n    local start_time     = os.time()\r\n    local last_time      = start_time\r\n    local solve_ok       = true\r\n    local msg_idx        = 1\r\n\r\n    -- define handler function here so it'll work w/o gui\r\n    function sudoku.SolveBruteForceHook(guesses, cell)\r\n        if solve_ok == false then return false end -- canceled\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if (solve_progress-1)%10 ~= 0 then return true end\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], guesses.current, cell)\r\n        solve_ok = progressDialog:Update(solve_progress, msg)\r\n        return solve_ok\r\n    end\r\n\r\n    local ret = wx.wxOK\r\n    while ret == wx.wxOK do\r\n        solve_progress = 0\r\n        start_time     = os.time()\r\n        last_time      = start_time\r\n        solve_ok       = true\r\n        msg_idx        = 1\r\n\r\n        progressDialog = wx.wxProgressDialog(\"wxLuaSudoku - Verifying puzzle...\",\r\n                            string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[1], 0, 0),\r\n                            1000, sudokuGUI.frame,\r\n                            wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)\r\n\r\n        local s1, s2 = sudoku.IsUniquePuzzle(sudokuTable)\r\n        progressDialog:Destroy()\r\n\r\n        if s1 and (s2 == nil) then\r\n            return s1\r\n        elseif solve_ok == false then\r\n            ret = wx.wxMessageBox(\"The puzzle was not fully verified and therefore may not have a unique solution or a solution at all.\\n\"..\r\n                                  \"Press 'Ok' to restart checking or 'Cancel' to quit.\",\r\n                                  \"wxLuaSudoku - Unfinished check\",\r\n                                  wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                                  sudokuGUI.frame)\r\n        elseif s1 and s2 then\r\n            wx.wxMessageBox(\"The puzzle does not have a unique solution.\\n\"..\r\n                            \"Use 'Create' to fix the problem, showing mistakes will be disabled.\",\r\n                            \"wxLuaSudoku - Nonunique puzzle\",\r\n                            wx.wxOK + wx.wxICON_ERROR,\r\n                            sudokuGUI.frame)\r\n\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n            return nil\r\n        else\r\n            wx.wxMessageBox(\"The puzzle does not have a solution.\\n\"..\r\n                            \"Use 'Create' to fix the problem, showing mistakes will be disabled.\",\r\n                            \"wxLuaSudoku - Unsolvable puzzle\",\r\n                            wx.wxOK + wx.wxICON_ERROR,\r\n                            sudokuGUI.frame)\r\n\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n            return nil\r\n        end\r\n    end\r\n\r\n    return nil\r\nend",
    "type": "function"
  }, {
    "id": 1302,
    "text": "local invalid_count = TableCount(sudokuTable.invalid)",
    "type": "statement:localassign"
  }, {
    "id": 1303,
    "text": "if invalid_count > 0 then\r\n        local ret = wx.wxMessageBox(\r\n                string.format(\"The initial values of the puzzle are invalid.\\n\"..\r\n                              \"There are %d cells with duplicate values.\\n\"..\r\n                              \"Please select Create and fix them before trying to solve.\\n\", invalid_count),\r\n                              \"wxLuaSudoku - Invalid puzzle\",\r\n                              wx.wxOK + wx.wxICON_ERROR,\r\n                              sudokuGUI.frame )\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1304,
    "text": "local ret = wx.wxMessageBox(\r\n                string.format(\"The initial values of the puzzle are invalid.\\n\"..\r\n                              \"There are %d cells with duplicate values.\\n\"..\r\n                              \"Please select Create and fix them before trying to solve.\\n\", invalid_count),\r\n                              \"wxLuaSudoku - Invalid puzzle\",\r\n                              wx.wxOK + wx.wxICON_ERROR,\r\n                              sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1305,
    "text": "function sudoku.SolveBruteForceHook(guesses, cell)\r\n        if solve_ok == false then return false end -- canceled\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if (solve_progress-1)%10 ~= 0 then return true end\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], guesses.current, cell)\r\n        solve_ok = progressDialog:Update(solve_progress, msg)\r\n        return solve_ok\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1306,
    "text": "if (solve_progress-1)%10 ~= 0 then return true end",
    "type": "statement:if"
  }, {
    "id": 1307,
    "text": "local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], guesses.current, cell)",
    "type": "statement:localassign"
  }, {
    "id": 1308,
    "text": "local ret = wx.wxOK",
    "type": "statement:localassign"
  }, {
    "id": 1309,
    "text": "while ret == wx.wxOK do\r\n        solve_progress = 0\r\n        start_time     = os.time()\r\n        last_time      = start_time\r\n        solve_ok       = true\r\n        msg_idx        = 1\r\n\r\n        progressDialog = wx.wxProgressDialog(\"wxLuaSudoku - Verifying puzzle...\",\r\n                            string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[1], 0, 0),\r\n                            1000, sudokuGUI.frame,\r\n                            wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)\r\n\r\n        local s1, s2 = sudoku.IsUniquePuzzle(sudokuTable)\r\n        progressDialog:Destroy()\r\n\r\n        if s1 and (s2 == nil) then\r\n            return s1\r\n        elseif solve_ok == false then\r\n            ret = wx.wxMessageBox(\"The puzzle was not fully verified and therefore may not have a unique solution or a solution at all.\\n\"..\r\n                                  \"Press 'Ok' to restart checking or 'Cancel' to quit.\",\r\n                                  \"wxLuaSudoku - Unfinished check\",\r\n                                  wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                                  sudokuGUI.frame)\r\n        elseif s1 and s2 then\r\n            wx.wxMessageBox(\"The puzzle does not have a unique solution.\\n\"..\r\n                            \"Use 'Create' to fix the problem, showing mistakes will be disabled.\",\r\n                            \"wxLuaSudoku - Nonunique puzzle\",\r\n                            wx.wxOK + wx.wxICON_ERROR,\r\n                            sudokuGUI.frame)\r\n\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n            return nil\r\n        else\r\n            wx.wxMessageBox(\"The puzzle does not have a solution.\\n\"..\r\n                            \"Use 'Create' to fix the problem, showing mistakes will be disabled.\",\r\n                            \"wxLuaSudoku - Unsolvable puzzle\",\r\n                            wx.wxOK + wx.wxICON_ERROR,\r\n                            sudokuGUI.frame)\r\n\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n            return nil\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 1310,
    "text": "progressDialog = wx.wxProgressDialog(\"wxLuaSudoku - Verifying puzzle...\",\r\n                            string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[1], 0, 0),\r\n                            1000, sudokuGUI.frame,\r\n                            wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)",
    "type": "statement:assign"
  }, {
    "id": 1311,
    "text": "local s1, s2 = sudoku.IsUniquePuzzle(sudokuTable)",
    "type": "statement:localassign"
  }, {
    "id": 1312,
    "text": "if s1 and (s2 == nil) then\r\n            return s1\r\n        elseif solve_ok == false then\r\n            ret = wx.wxMessageBox(\"The puzzle was not fully verified and therefore may not have a unique solution or a solution at all.\\n\"..\r\n                                  \"Press 'Ok' to restart checking or 'Cancel' to quit.\",\r\n                                  \"wxLuaSudoku - Unfinished check\",\r\n                                  wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                                  sudokuGUI.frame)\r\n        elseif s1 and s2 then\r\n            wx.wxMessageBox(\"The puzzle does not have a unique solution.\\n\"..\r\n                            \"Use 'Create' to fix the problem, showing mistakes will be disabled.\",\r\n                            \"wxLuaSudoku - Nonunique puzzle\",\r\n                            wx.wxOK + wx.wxICON_ERROR,\r\n                            sudokuGUI.frame)\r\n\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n            return nil\r\n        else\r\n            wx.wxMessageBox(\"The puzzle does not have a solution.\\n\"..\r\n                            \"Use 'Create' to fix the problem, showing mistakes will be disabled.\",\r\n                            \"wxLuaSudoku - Unsolvable puzzle\",\r\n                            wx.wxOK + wx.wxICON_ERROR,\r\n                            sudokuGUI.frame)\r\n\r\n            sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n            return nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1313,
    "text": "ret = wx.wxMessageBox(\"The puzzle was not fully verified and therefore may not have a unique solution or a solution at all.\\n\"..\r\n                                  \"Press 'Ok' to restart checking or 'Cancel' to quit.\",\r\n                                  \"wxLuaSudoku - Unfinished check\",\r\n                                  wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                                  sudokuGUI.frame)",
    "type": "statement:assign"
  }, {
    "id": 1314,
    "text": "wx.wxMessageBox(\"The puzzle does not have a unique solution.\\n\"..\r\n                            \"Use 'Create' to fix the problem, showing mistakes will be disabled.\",\r\n                            \"wxLuaSudoku - Nonunique puzzle\",\r\n                            wx.wxOK + wx.wxICON_ERROR,\r\n                            sudokuGUI.frame)",
    "type": "statement:functioncall"
  }, {
    "id": 1315,
    "text": "wx.wxMessageBox(\"The puzzle does not have a solution.\\n\"..\r\n                            \"Use 'Create' to fix the problem, showing mistakes will be disabled.\",\r\n                            \"wxLuaSudoku - Unsolvable puzzle\",\r\n                            wx.wxOK + wx.wxICON_ERROR,\r\n                            sudokuGUI.frame)",
    "type": "statement:functioncall"
  }, {
    "id": 1316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1317,
    "text": "function sudoku.SolveBruteForceHook(guesses, cell)\r\n        if solve_ok == false then return false end -- canceled\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if (solve_progress-1)%10 ~= 0 then return true end\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], guesses.current, cell)\r\n        solve_ok = progressDialog:Update(solve_progress, msg)\r\n        return solve_ok\r\n    end",
    "type": "function"
  }, {
    "id": 1318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1319,
    "text": "function sudokuGUI.SolveScanning()\r\n    local s = TableCopy(sudokuGUI.GetCurrentTable())\r\n--[[\r\n    local invalid = not TableIsEmpty(s.invalid)\r\n    if invalid then\r\n        if not TableIsEmpty(sudokuGUI.sudokuTables[1].invalid) then\r\n            local ret = wx.wxMessageBox(\"The initial values in the puzzle are invalid.\\n\"..\r\n                                        \"Please select Create and fix them before trying to solve.\\n\"..\r\n                                        \"Press 'Cancel' to try to solve it anyway.\",\r\n                                        \"wxLuaSudoku - Invalid puzzle\",\r\n                                        wx.wxOK + wx.wxCANCEL + wx.wxICON_ERROR,\r\n                                        sudokuGUI.frame )\r\n\r\n            if ret == wx.wxOK then return end\r\n        else\r\n            local ret = wx.wxMessageBox(\"The current puzzle has invalid cell values.\\n\"..\r\n                                        \"Would you like me to try to fix those cells or press cancel to abort solving.\",\r\n                                        \"wxLuaSudoku - Invalid puzzle\",\r\n                                        wx.wxYES_NO + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                        sudokuGUI.frame )\r\n\r\n            if ret == wx.wxCANCEL then\r\n                return\r\n            elseif ret == wx.wxYES then\r\n                local fixedS = sudokuGUI.FixInvalid(s, true)\r\n                if fixedS then\r\n                    sudokuGUI.AddTable(fixedS)\r\n                    s = TableCopy(sudokuGUI.GetCurrentTable())\r\n                else\r\n                    return\r\n                end\r\n            end\r\n        end\r\n    end\r\n]]\r\n    local count, changed_cells = sudoku.SolveScan(s)\r\n    local changed_count = 0\r\n    if changed_cells then\r\n        sudokuGUI.AddTable(s)\r\n        changed_count = TableCount(changed_cells)\r\n    end\r\n\r\n    local msg = string.format(\"Scanned rows, cols, and blocks %d times.\\n\"..\r\n                              \"Found %d new values.\\n\"..\r\n                              \"You may be able to do better using 'Eliminate groups'\", count, changed_count)\r\n    wx.wxMessageBox( msg,\r\n                     \"wxLuaSudoku - Finished scanning\",\r\n                     wx.wxOK + wx.wxICON_INFORMATION,\r\n                     sudokuGUI.frame )\r\nend",
    "type": "function"
  }, {
    "id": 1320,
    "text": "local s = TableCopy(sudokuGUI.GetCurrentTable())",
    "type": "statement:localassign"
  }, {
    "id": 1321,
    "text": "local count, changed_cells = sudoku.SolveScan(s)",
    "type": "statement:localassign"
  }, {
    "id": 1322,
    "text": "local changed_count = 0",
    "type": "statement:localassign"
  }, {
    "id": 1323,
    "text": "if changed_cells then\r\n        sudokuGUI.AddTable(s)\r\n        changed_count = TableCount(changed_cells)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1324,
    "text": "changed_count = TableCount(changed_cells)",
    "type": "statement:assign"
  }, {
    "id": 1325,
    "text": "local msg = string.format(\"Scanned rows, cols, and blocks %d times.\\n\"..\r\n                              \"Found %d new values.\\n\"..\r\n                              \"You may be able to do better using 'Eliminate groups'\", count, changed_count)",
    "type": "statement:localassign"
  }, {
    "id": 1326,
    "text": "wx.wxMessageBox( msg,\r\n                     \"wxLuaSudoku - Finished scanning\",\r\n                     wx.wxOK + wx.wxICON_INFORMATION,\r\n                     sudokuGUI.frame )",
    "type": "statement:functioncall"
  }, {
    "id": 1327,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1328,
    "text": "function sudokuGUI.SolveBruteForce(sudokuTable)\r\n\r\n    local s\r\n    if sudokuTable then\r\n        s = TableCopy(sudokuTable)\r\n    else\r\n        s = TableCopy(sudokuGUI.GetCurrentTable())\r\n    end\r\n--[[\r\n    local invalid = not TableIsEmpty(s.invalid)\r\n    if invalid then\r\n        if (sudokuTable == nil) and (not TableIsEmpty(sudokuGUI.sudokuTables[1].invalid)) then\r\n            wx.wxMessageBox(\"The initial values in the puzzle are invalid.\\n\"..\r\n                            \"Please select Create and fix them before trying to solve.\",\r\n                            \"wxLuaSudoku - Invalid puzzle\",\r\n                            wx.wxOK + wx.wxICON_ERROR,\r\n                            sudokuGUI.frame )\r\n\r\n            return\r\n        end\r\n\r\n        local ret = wx.wxMessageBox(\"The current puzzle has invalid cell values.\\n\"..\r\n                                    \"Would you like me to try to fix those cells or press cancel to abort solving.\",\r\n                                    \"wxLuaSudoku - Invalid puzzle\",\r\n                                    wx.wxYES_NO + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                    sudokuGUI.frame )\r\n\r\n        if ret == wx.wxCANCEL then\r\n            return\r\n        elseif ret == wx.wxYES then\r\n            local fixedS = sudokuGUI.FixInvalid(s, true)\r\n            if fixedS then\r\n                sudokuGUI.AddTable(fixedS)\r\n                s = TableCopy(sudokuGUI.GetCurrentTable())\r\n            else\r\n                return\r\n            end\r\n        end\r\n    end\r\n]]\r\n    local progressDialog = wx.wxProgressDialog(\"wxLuaSudoku - Solving...\",\r\n                           string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[1], 0, 0),\r\n                           1000, sudokuGUI.frame,\r\n                           wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)\r\n\r\n    local solve_progress = 0\r\n    local start_time     = os.time()\r\n    local last_time      = start_time\r\n    local solve_ok       = true\r\n    local msg_idx        = 1\r\n\r\n    -- define handler function here so it'll work w/o gui\r\n    function sudoku.SolveBruteForceHook(guesses, cell)\r\n        if solve_ok == false then return false end -- canceled\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if (solve_progress-1)%10 ~= 0 then return true end\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], guesses.current, cell)\r\n        solve_ok = progressDialog:Update(solve_progress, msg)\r\n        return solve_ok\r\n    end\r\n\r\n    -- \"cheat\" a little by using SolveScan to get easy to find values\r\n    --local flags = TableCopy(s.flags)\r\n    --for n = sudoku.ELIMINATE_FLAG_MIN, sudoku.ELIMINATE_FLAG_MAX do\r\n    --    s.flags[n] = true\r\n    --end\r\n\r\n    --local count, changed_cells = sudoku.SolveScan(s)\r\n    local s, g = sudoku.SolveBruteForce(s)\r\n\r\n    progressDialog:Destroy()\r\n\r\n    if not s then\r\n        if solve_ok then\r\n            wx.wxMessageBox(\"Sorry, no solutions found!\",\r\n                            \"wxLuaSudoku - error\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            sudokuGUI.frame )\r\n        end\r\n    elseif not sudokuTable then\r\n        --s.flags = flags         -- restore flags\r\n        sudokuGUI.AddTable(s)    -- we solved the current grid\r\n    else\r\n        --s.flags = flags         -- restore flags\r\n        return s                -- we solved the input grid\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1329,
    "text": "local s",
    "type": "statement:localassign"
  }, {
    "id": 1330,
    "text": "if sudokuTable then\r\n        s = TableCopy(sudokuTable)\r\n    else\r\n        s = TableCopy(sudokuGUI.GetCurrentTable())\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1331,
    "text": "s = TableCopy(sudokuTable)",
    "type": "statement:assign"
  }, {
    "id": 1332,
    "text": "s = TableCopy(sudokuGUI.GetCurrentTable())",
    "type": "statement:assign"
  }, {
    "id": 1333,
    "text": "local progressDialog = wx.wxProgressDialog(\"wxLuaSudoku - Solving...\",\r\n                           string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[1], 0, 0),\r\n                           1000, sudokuGUI.frame,\r\n                           wx.wxPD_AUTO_HIDE+wx.wxPD_CAN_ABORT+wx.wxPD_ELAPSED_TIME)",
    "type": "statement:localassign"
  }, {
    "id": 1334,
    "text": "local s, g = sudoku.SolveBruteForce(s)",
    "type": "statement:localassign"
  }, {
    "id": 1335,
    "text": "if not s then\r\n        if solve_ok then\r\n            wx.wxMessageBox(\"Sorry, no solutions found!\",\r\n                            \"wxLuaSudoku - error\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            sudokuGUI.frame )\r\n        end\r\n    elseif not sudokuTable then\r\n        --s.flags = flags         -- restore flags\r\n        sudokuGUI.AddTable(s)    -- we solved the current grid\r\n    else\r\n        --s.flags = flags         -- restore flags\r\n        return s                -- we solved the input grid\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1336,
    "text": "if solve_ok then\r\n            wx.wxMessageBox(\"Sorry, no solutions found!\",\r\n                            \"wxLuaSudoku - error\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            sudokuGUI.frame )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1337,
    "text": "wx.wxMessageBox(\"Sorry, no solutions found!\",\r\n                            \"wxLuaSudoku - error\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            sudokuGUI.frame )",
    "type": "statement:functioncall"
  }, {
    "id": 1338,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1339,
    "text": "function sudoku.SolveBruteForceHook(guesses, cell)\r\n        if solve_ok == false then return false end -- canceled\r\n        solve_progress = iff(solve_progress+1 >= 1000, 0, solve_progress + 1)\r\n        if (solve_progress-1)%10 ~= 0 then return true end\r\n        if (msg_idx < sudokuGUI.sayings_n) and (os.time() - last_time > 4) then\r\n            msg_idx = msg_idx + 1\r\n            last_time = os.time()\r\n        end\r\n        local msg = string.format(\"%s\\nIteration # %d, current cell %d            \", sudokuGUI.sayings[msg_idx], guesses.current, cell)\r\n        solve_ok = progressDialog:Update(solve_progress, msg)\r\n        return solve_ok\r\n    end",
    "type": "function"
  }, {
    "id": 1340,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1341,
    "text": "function sudokuGUI.ResetPuzzle(dont_query_user)\r\n    dont_query_user = dont_query_user or false\r\n    local ret = wx.wxOK\r\n    if not dont_query_user then\r\n        ret = wx.wxMessageBox(\"Reset the puzzle to the initial state?\",\r\n                              \"wxLuaSudoku - reset puzzle?\",\r\n                               wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                               sudokuGUI.frame )\r\n    end\r\n\r\n    if ret == wx.wxCANCEL then\r\n        return\r\n    else\r\n        sudokuGUI.sudokuTables_pos = 1\r\n        while TableCount(sudokuGUI.sudokuTables) > 1 do\r\n            table.remove(sudokuGUI.sudokuTables, 2)\r\n        end\r\n    end\r\n\r\n    sudokuGUI.UpdateTable() -- redo it anyway\r\nend",
    "type": "function"
  }, {
    "id": 1342,
    "text": "dont_query_user = dont_query_user or false",
    "type": "statement:assign"
  }, {
    "id": 1343,
    "text": "if not dont_query_user then\r\n        ret = wx.wxMessageBox(\"Reset the puzzle to the initial state?\",\r\n                              \"wxLuaSudoku - reset puzzle?\",\r\n                               wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                               sudokuGUI.frame )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1344,
    "text": "ret = wx.wxMessageBox(\"Reset the puzzle to the initial state?\",\r\n                              \"wxLuaSudoku - reset puzzle?\",\r\n                               wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                               sudokuGUI.frame )",
    "type": "statement:assign"
  }, {
    "id": 1345,
    "text": "if ret == wx.wxCANCEL then\r\n        return\r\n    else\r\n        sudokuGUI.sudokuTables_pos = 1\r\n        while TableCount(sudokuGUI.sudokuTables) > 1 do\r\n            table.remove(sudokuGUI.sudokuTables, 2)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1346,
    "text": "while TableCount(sudokuGUI.sudokuTables) > 1 do\r\n            table.remove(sudokuGUI.sudokuTables, 2)\r\n        end",
    "type": "statement:while"
  }, {
    "id": 1347,
    "text": "table.remove(sudokuGUI.sudokuTables, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 1348,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1349,
    "text": "function sudokuGUI.UpdateTable(refresh)\r\n    if refresh == nil then refresh = true end\r\n\r\n    local sudokuTable = sudokuGUI.GetCurrentTable()\r\n\r\n    sudokuGUI.block_refresh = true\r\n\r\n    local has_show_flag = false\r\n    for n = sudoku.ELIMINATE_FLAG_MIN, sudoku.ELIMINATE_FLAG_MAX do\r\n        local id = n + sudokuGUI.ID_ELIMINATE_NAKEDPAIRS - sudoku.ELIMINATE_FLAG_MIN\r\n        sudokuTable.flags[n] = sudokuGUI.IsCheckedMenuItem(id)\r\n\r\n        local show_id = n + sudokuGUI.ID_SHOW_NAKEDPAIRS - sudoku.ELIMINATE_FLAG_MIN\r\n        if (not has_show_flag) and (sudokuGUI.IsCheckedMenuItem(show_id) == true) then\r\n            has_show_flag = true\r\n        end\r\n    end\r\n\r\n    sudoku.UpdateTable(sudokuTable)\r\n\r\n    if has_show_flag == true then\r\n        -- swap out the possible table temporarily to calc pencil marks\r\n        if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) then\r\n            local p = sudokuTable.possible\r\n            sudokuTable.possible = sudokuGUI.pencilMarks\r\n            sudokuGUI.pencilMarksNakedTable, sudokuGUI.pencilMarksHiddenTable = sudoku.FindAllNakedHiddenGroups(sudokuTable, true)\r\n            sudokuTable.possible = p\r\n        else\r\n            sudokuGUI.possNakedTable, sudokuGUI.possHiddenTable = sudoku.FindAllNakedHiddenGroups(sudokuTable, true)\r\n        end\r\n    end\r\n\r\n    sudokuGUI.SetCurrentTable(sudokuTable)\r\n\r\n    sudokuGUI.block_refresh = false\r\n\r\n    if (refresh == true) then\r\n        sudokuGUI.Refresh()\r\n    end\r\n\r\n    sudokuGUI.UpdateGUI()\r\nend",
    "type": "function"
  }, {
    "id": 1350,
    "text": "if refresh == nil then refresh = true end",
    "type": "statement:if"
  }, {
    "id": 1351,
    "text": "refresh = true",
    "type": "statement:assign"
  }, {
    "id": 1352,
    "text": "sudokuGUI.block_refresh = true",
    "type": "statement:assign"
  }, {
    "id": 1353,
    "text": "local has_show_flag = false",
    "type": "statement:localassign"
  }, {
    "id": 1354,
    "text": "for n = sudoku.ELIMINATE_FLAG_MIN, sudoku.ELIMINATE_FLAG_MAX do\r\n        local id = n + sudokuGUI.ID_ELIMINATE_NAKEDPAIRS - sudoku.ELIMINATE_FLAG_MIN\r\n        sudokuTable.flags[n] = sudokuGUI.IsCheckedMenuItem(id)\r\n\r\n        local show_id = n + sudokuGUI.ID_SHOW_NAKEDPAIRS - sudoku.ELIMINATE_FLAG_MIN\r\n        if (not has_show_flag) and (sudokuGUI.IsCheckedMenuItem(show_id) == true) then\r\n            has_show_flag = true\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1355,
    "text": "local id = n + sudokuGUI.ID_ELIMINATE_NAKEDPAIRS - sudoku.ELIMINATE_FLAG_MIN",
    "type": "statement:localassign"
  }, {
    "id": 1356,
    "text": "sudokuTable.flags[n] = sudokuGUI.IsCheckedMenuItem(id)",
    "type": "statement:assign"
  }, {
    "id": 1357,
    "text": "local show_id = n + sudokuGUI.ID_SHOW_NAKEDPAIRS - sudoku.ELIMINATE_FLAG_MIN",
    "type": "statement:localassign"
  }, {
    "id": 1358,
    "text": "if (not has_show_flag) and (sudokuGUI.IsCheckedMenuItem(show_id) == true) then\r\n            has_show_flag = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1359,
    "text": "has_show_flag = true",
    "type": "statement:assign"
  }, {
    "id": 1360,
    "text": "if has_show_flag == true then\r\n        -- swap out the possible table temporarily to calc pencil marks\r\n        if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) then\r\n            local p = sudokuTable.possible\r\n            sudokuTable.possible = sudokuGUI.pencilMarks\r\n            sudokuGUI.pencilMarksNakedTable, sudokuGUI.pencilMarksHiddenTable = sudoku.FindAllNakedHiddenGroups(sudokuTable, true)\r\n            sudokuTable.possible = p\r\n        else\r\n            sudokuGUI.possNakedTable, sudokuGUI.possHiddenTable = sudoku.FindAllNakedHiddenGroups(sudokuTable, true)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1361,
    "text": "if sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE) then\r\n            local p = sudokuTable.possible\r\n            sudokuTable.possible = sudokuGUI.pencilMarks\r\n            sudokuGUI.pencilMarksNakedTable, sudokuGUI.pencilMarksHiddenTable = sudoku.FindAllNakedHiddenGroups(sudokuTable, true)\r\n            sudokuTable.possible = p\r\n        else\r\n            sudokuGUI.possNakedTable, sudokuGUI.possHiddenTable = sudoku.FindAllNakedHiddenGroups(sudokuTable, true)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1362,
    "text": "local p = sudokuTable.possible",
    "type": "statement:localassign"
  }, {
    "id": 1363,
    "text": "sudokuTable.possible = sudokuGUI.pencilMarks",
    "type": "statement:assign"
  }, {
    "id": 1364,
    "text": "sudokuGUI.pencilMarksNakedTable, sudokuGUI.pencilMarksHiddenTable = sudoku.FindAllNakedHiddenGroups(sudokuTable, true)",
    "type": "statement:assign"
  }, {
    "id": 1365,
    "text": "sudokuTable.possible = p",
    "type": "statement:assign"
  }, {
    "id": 1366,
    "text": "sudokuGUI.possNakedTable, sudokuGUI.possHiddenTable = sudoku.FindAllNakedHiddenGroups(sudokuTable, true)",
    "type": "statement:assign"
  }, {
    "id": 1367,
    "text": "sudokuGUI.SetCurrentTable(sudokuTable)",
    "type": "statement:functioncall"
  }, {
    "id": 1368,
    "text": "sudokuGUI.block_refresh = false",
    "type": "statement:assign"
  }, {
    "id": 1369,
    "text": "if (refresh == true) then\r\n        sudokuGUI.Refresh()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1370,
    "text": "sudokuGUI.Refresh()",
    "type": "statement:functioncall"
  }, {
    "id": 1371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1372,
    "text": "function sudokuGUI.UpdateGUI()\r\n    local table_count = #sudokuGUI.sudokuTables\r\n    local table_pos   = sudokuGUI.sudokuTables_pos\r\n    sudokuGUI.frame:GetMenuBar():Enable(sudokuGUI.ID_UNDO, table_pos > 1)\r\n    sudokuGUI.frame:GetMenuBar():Enable(sudokuGUI.ID_REDO, table_pos < table_count)\r\n    sudokuGUI.frame:GetToolBar():EnableTool(sudokuGUI.ID_UNDO, table_pos > 1)\r\n    sudokuGUI.frame:GetToolBar():EnableTool(sudokuGUI.ID_REDO, table_pos < table_count)\r\n\r\n    sudokuGUI.frame:SetStatusText(string.format(\"Step : %d\", table_pos), 1)\r\nend",
    "type": "function"
  }, {
    "id": 1373,
    "text": "local table_count = #sudokuGUI.sudokuTables",
    "type": "statement:localassign"
  }, {
    "id": 1374,
    "text": "local table_pos   = sudokuGUI.sudokuTables_pos",
    "type": "statement:localassign"
  }, {
    "id": 1375,
    "text": "sudokuGUI.frame:GetMenuBar():Enable(sudokuGUI.ID_UNDO, table_pos > 1)",
    "type": "statement:functioncall"
  }, {
    "id": 1376,
    "text": "sudokuGUI.frame:GetMenuBar():Enable(sudokuGUI.ID_REDO, table_pos < table_count)",
    "type": "statement:functioncall"
  }, {
    "id": 1377,
    "text": "sudokuGUI.frame:GetToolBar():EnableTool(sudokuGUI.ID_UNDO, table_pos > 1)",
    "type": "statement:functioncall"
  }, {
    "id": 1378,
    "text": "sudokuGUI.frame:GetToolBar():EnableTool(sudokuGUI.ID_REDO, table_pos < table_count)",
    "type": "statement:functioncall"
  }, {
    "id": 1379,
    "text": "sudokuGUI.frame:SetStatusText(string.format(\"Step : %d\", table_pos), 1)",
    "type": "statement:functioncall"
  }, {
    "id": 1380,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1381,
    "text": "function sudokuGUI.PreferencesDialogPageUI.Create(parent)\r\n    local panel = wx.wxPanel(parent, wx.wxID_ANY)\r\n\r\n    local ID_LISTBOX        = 10\r\n    local ID_SAMPLE_TEXT    = 11\r\n    local ID_FONT_BUTTON    = 12\r\n    local ID_COLOUR_BUTTON  = 13\r\n    local ID_RESET_BUTTON   = 14\r\n\r\n    local listStrings = -- in same order as the colours\r\n    {\r\n        \"Values\",\r\n        \"Initial values\",\r\n        \"Possible values\",\r\n        \"Invalid values\",\r\n        \"Background\",\r\n        \"Odd background\",\r\n        \"Focused cell\",\r\n        \"Naked pairs\",\r\n        \"Naked triplets\",\r\n        \"Naked quads\",\r\n        \"Hidden pairs\",\r\n        \"Hidden triplets\",\r\n        \"Hidden quads\"\r\n    }\r\n\r\n    local listBoxValues = {}\r\n    for n = 1, sudokuGUI.COLOUR_MAX do\r\n        table.insert(listBoxValues, {colour = wx.wxColour(sudokuGUI.Colours[n])})\r\n    end\r\n    listBoxValues[sudokuGUI.VALUE_COLOUR].font      = wx.wxFont(sudokuGUI.valueFont.wxfont)\r\n    listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font = wx.wxFont(sudokuGUI.possibleFont.wxfont)\r\n\r\n    local reset_fonts = true\r\n\r\n    -- Create the dialog ------------------------------------------------------\r\n\r\n    local mainSizer = wx.wxBoxSizer( wx.wxVERTICAL )\r\n\r\n    local fcFlexSizer = wx.wxFlexGridSizer( 1, 2, 0, 0 )\r\n    fcFlexSizer:AddGrowableCol( 0 )\r\n    fcFlexSizer:AddGrowableRow( 0 )\r\n\r\n    local fcListBox = wx.wxListBox( panel, ID_LISTBOX, wx.wxDefaultPosition, wx.wxSize(80,100), listStrings, wx.wxLB_SINGLE )\r\n    fcListBox:SetSelection(0)\r\n    fcFlexSizer:Add( fcListBox, 0, wx.wxGROW+wx.wxALIGN_CENTER_HORIZONTAL+wx.wxALL, 5 )\r\n\r\n    local fcBoxSizer = wx.wxBoxSizer( wx.wxVERTICAL )\r\n\r\n    local sampleWin = wx.wxWindow(panel, ID_SAMPLE_TEXT, wx.wxDefaultPosition, wx.wxSize(140,140))\r\n    fcBoxSizer:Add( sampleWin, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 );\r\n\r\n    local fontButton = wx.wxButton( panel, ID_FONT_BUTTON, \"Choose Font\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )\r\n    fcBoxSizer:Add( fontButton, 0, wx.wxGROW+wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5 )\r\n    local colourButton = wx.wxButton( panel, ID_COLOUR_BUTTON, \"Choose Color\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )\r\n    fcBoxSizer:Add( colourButton, 0, wx.wxGROW+wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5 )\r\n    local resetButton = wx.wxButton( panel, ID_RESET_BUTTON, \"Reset Value...\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )\r\n    fcBoxSizer:Add( resetButton, 0, wx.wxGROW+wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5 )\r\n\r\n    fcFlexSizer:Add( fcBoxSizer, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )\r\n\r\n    mainSizer:Add( fcFlexSizer, 1, wx.wxGROW+wx.wxALIGN_CENTER_VERTICAL, 5 )\r\n    panel:SetSizer( mainSizer )\r\n\r\n    sampleWin:Connect(wx.wxEVT_PAINT,\r\n        function (event)\r\n            local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n            local sel = fcListBox:GetSelection() + 1\r\n            local width, height = win:GetClientSizeWH()\r\n            local dc = wx.wxPaintDC(win)\r\n\r\n            local function SetFontSize(size, width, height, font)\r\n                -- alternate way, but it fails for fonts that can't scale large enough\r\n                --local f = wx.wxNullFont:NewSize(wx.wxSize(width, height), font:GetFamily(), font:GetStyle(), font:GetWeight(), font:GetUnderlined(), font:GetFaceName())\r\n                --font:SetPointSize(f:GetPointSize())\r\n\r\n                local font_width = 0\r\n                local font_height = 0\r\n                while (font_width < width) and (font_height < height) do\r\n                    font:SetPointSize(size)\r\n                    dc:SetFont(font)\r\n                    font_width, font_height = dc:GetTextExtent(\"5\")\r\n                    size = size + 2\r\n                    if size > 200 then break end -- oops bad font?\r\n                end\r\n                font:SetPointSize(size-1)\r\n            end\r\n\r\n            -- clear background\r\n            local c = listBoxValues[sudokuGUI.BACKGROUND_COLOUR].colour\r\n            if (sel == sudokuGUI.ODD_BACKGROUND_COLOUR) or (sel == sudokuGUI.FOCUS_CELL_COLOUR) then\r\n                c = listBoxValues[sel].colour\r\n            end\r\n            local brush = wx.wxBrush(c, wx.wxSOLID)\r\n            dc:SetBrush(brush)\r\n            brush:delete()\r\n            dc:DrawRectangle(0, 0, width, height)\r\n\r\n            -- draw possible values\r\n            dc:SetTextForeground(listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].colour)\r\n            local font = listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font\r\n            if reset_fonts then SetFontSize(4, width/4, height/4, font) end\r\n            dc:SetFont(font)\r\n            local font_width, font_height = dc:GetTextExtent(\"5\")\r\n\r\n            local pos =\r\n            {\r\n                [1] = { x = 2,                  y = 2 },\r\n                [3] = { x = width-font_width-2, y = 2 },\r\n                [4] = { x = 2,                  y = (height-font_height)/2-2 },\r\n                [6] = { x = width-font_width-2, y = (height-font_height)/2-2 },\r\n                [7] = { x = 2,                  y = height-font_height-2 },\r\n                [9] = { x = width-font_width-2, y = height-font_height-2 }\r\n            }\r\n\r\n            dc:SetBrush(wx.wxTRANSPARENT_BRUSH)\r\n\r\n            local function DrawPossible(idx, n, value, hidden)\r\n                dc:DrawText(value, pos[n].x, pos[n].y)\r\n                local pen = wx.wxPen(listBoxValues[idx].colour, 1, wx.wxSOLID)\r\n                dc:SetPen(pen); pen:delete()\r\n                if hidden ~= true then\r\n                    dc:DrawRectangle(pos[n].x, pos[n].y, font_width, font_height)\r\n                else\r\n                    dc:DrawRoundedRectangle(pos[n].x, pos[n].y, font_width, font_height, 20)\r\n                end\r\n            end\r\n\r\n            DrawPossible(sudokuGUI.NAKED_PAIRS_COLOUR,     1, \"2\")\r\n            DrawPossible(sudokuGUI.NAKED_TRIPLETS_COLOUR,  4, \"3\")\r\n            DrawPossible(sudokuGUI.NAKED_QUADS_COLOUR,     7, \"4\")\r\n            DrawPossible(sudokuGUI.HIDDEN_PAIRS_COLOUR,    3, \"2\", true)\r\n            DrawPossible(sudokuGUI.HIDDEN_TRIPLETS_COLOUR, 6, \"3\", true)\r\n            DrawPossible(sudokuGUI.HIDDEN_QUADS_COLOUR,    9, \"4\", true)\r\n\r\n            -- draw invalid marker\r\n            local pen = wx.wxPen(listBoxValues[sudokuGUI.INVALID_VALUE_COLOUR].colour, 1, wx.wxSOLID)\r\n            dc:SetPen(pen); pen:delete()\r\n            dc:DrawLine(0, 0, width, height)\r\n\r\n            -- draw value\r\n            if (sel == sudokuGUI.INIT_VALUE_COLOUR) then\r\n                dc:SetTextForeground(listBoxValues[sudokuGUI.INIT_VALUE_COLOUR].colour)\r\n            else\r\n                dc:SetTextForeground(listBoxValues[sudokuGUI.VALUE_COLOUR].colour)\r\n            end\r\n\r\n            local old_font = font\r\n            local font = listBoxValues[sudokuGUI.VALUE_COLOUR].font\r\n            if reset_fonts then SetFontSize(old_font:GetPointSize(), width-2, height-2, font) end\r\n            dc:SetFont(font)\r\n            local font_width, font_height = dc:GetTextExtent(\"9\")\r\n            dc:DrawText(\"9\", (width-font_width)/2, (height-font_height)/2)\r\n\r\n            reset_fonts = false\r\n            dc:delete()\r\n        end)\r\n\r\n    panel:Connect(ID_LISTBOX, wx.wxEVT_COMMAND_LISTBOX_SELECTED,\r\n        function (event)\r\n            local sel = event:GetSelection() + 1\r\n            panel:FindWindow(ID_FONT_BUTTON):Enable(listBoxValues[sel].font ~= nil)\r\n            colourButton:SetForegroundColour(listBoxValues[sel].colour)\r\n            sampleWin:Refresh(false)\r\n        end)\r\n\r\n    panel:Connect(ID_FONT_BUTTON, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            local sel = fcListBox:GetSelection() + 1\r\n            local f = listBoxValues[sel].font\r\n            f = wx.wxGetFontFromUser(panel, f)\r\n            if f:Ok() then\r\n                listBoxValues[sel].font:delete()\r\n                listBoxValues[sel].font = f\r\n                reset_fonts = true\r\n            else\r\n                f:delete()\r\n            end\r\n            sampleWin:Refresh(false)\r\n        end)\r\n    panel:Connect(ID_COLOUR_BUTTON, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            local sel = fcListBox:GetSelection() + 1\r\n            local c = listBoxValues[sel].colour\r\n            c = wx.wxGetColourFromUser(panel, c)\r\n            if c:Ok() then\r\n                listBoxValues[sel].colour:delete()\r\n                listBoxValues[sel].colour = c\r\n                colourButton:SetForegroundColour(c)\r\n            else\r\n                c:delete()\r\n            end\r\n            sampleWin:Refresh(false)\r\n        end)\r\n    panel:Connect(ID_RESET_BUTTON, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            local sel = fcListBox:GetSelection() + 1\r\n\r\n            local ret = wx.wxMessageBox(\r\n                \"Press 'Yes' to reset all the colors and fonts or 'No' to reset only just the selected item.\",\r\n                \"wxLuaSudoku - Reset colors or fonts?\",\r\n                wx.wxYES_NO + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                panel )\r\n\r\n            if ret == wx.wxYES then\r\n                for n = 1, sudokuGUI.COLOUR_MAX do\r\n                    listBoxValues[n].colour:delete()\r\n                    listBoxValues[n].colour = wx.wxColour(sudokuGUI.Colours_[n])\r\n                end\r\n\r\n                listBoxValues[sudokuGUI.VALUE_COLOUR].font:delete()\r\n                listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font:delete()\r\n                listBoxValues[sudokuGUI.VALUE_COLOUR].font      = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\n                listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n            elseif ret == wx.wxNO then\r\n                listBoxValues[sel].colour:delete()\r\n                listBoxValues[sel].colour = wx.wxColour(sudokuGUI.Colours_[sel])\r\n\r\n                if (sel == sudokuGUI.VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\n                elseif (sel == sudokuGUI.POSS_VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n                end\r\n            end\r\n\r\n            colourButton:SetForegroundColour(listBoxValues[sel].colour)\r\n            reset_fonts = true\r\n            sampleWin:Refresh(false)\r\n        end)\r\n\r\n    function sudokuGUI.PreferencesDialogPageUI.Apply()\r\n        for n = 1, sudokuGUI.COLOUR_MAX do\r\n            sudokuGUI.Colours[n]:delete()\r\n            sudokuGUI.Colours[n] = wx.wxColour(listBoxValues[n].colour)\r\n        end\r\n\r\n        -- copy the fonts since when applied their size will change\r\n        sudokuGUI.valueFont.wxfont:delete()\r\n        sudokuGUI.valueFont.wxfont    = wx.wxFont(listBoxValues[sudokuGUI.VALUE_COLOUR].font)\r\n        sudokuGUI.possibleFont.wxfont:delete()\r\n        sudokuGUI.possibleFont.wxfont = wx.wxFont(listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font)\r\n        sudokuGUI.valueFont_cache    = {} -- clear cache so GetCellBestSize recreates it\r\n        sudokuGUI.possibleFont_cache = {}\r\n\r\n        for winID = 1, 81 do\r\n            if sudokuGUI.IsOddBlockCell(winID) then\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n            else\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n            end\r\n        end\r\n\r\n        local width, height = sudokuGUI.cellWindows[1]:GetClientSizeWH()\r\n        sudokuGUI.GetCellBestSize(width, height)\r\n        sudokuGUI.Refresh()\r\n    end\r\n\r\n    function sudokuGUI.PreferencesDialogPageUI.Destroy()\r\n        for n = 1, sudokuGUI.COLOUR_MAX do\r\n            listBoxValues[n].colour:delete()\r\n            if listBoxValues[n].font then listBoxValues[n].font:delete() end\r\n        end\r\n    end\r\n\r\n    return panel\r\nend",
    "type": "function"
  }, {
    "id": 1382,
    "text": "local panel = wx.wxPanel(parent, wx.wxID_ANY)",
    "type": "statement:localassign"
  }, {
    "id": 1383,
    "text": "local ID_LISTBOX        = 10",
    "type": "statement:localassign"
  }, {
    "id": 1384,
    "text": "local ID_SAMPLE_TEXT    = 11",
    "type": "statement:localassign"
  }, {
    "id": 1385,
    "text": "local ID_FONT_BUTTON    = 12",
    "type": "statement:localassign"
  }, {
    "id": 1386,
    "text": "local ID_COLOUR_BUTTON  = 13",
    "type": "statement:localassign"
  }, {
    "id": 1387,
    "text": "local ID_RESET_BUTTON   = 14",
    "type": "statement:localassign"
  }, {
    "id": 1388,
    "text": "local listStrings = -- in same order as the colours\r\n    {\r\n        \"Values\",\r\n        \"Initial values\",\r\n        \"Possible values\",\r\n        \"Invalid values\",\r\n        \"Background\",\r\n        \"Odd background\",\r\n        \"Focused cell\",\r\n        \"Naked pairs\",\r\n        \"Naked triplets\",\r\n        \"Naked quads\",\r\n        \"Hidden pairs\",\r\n        \"Hidden triplets\",\r\n        \"Hidden quads\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 1389,
    "text": "local listBoxValues = {}",
    "type": "statement:localassign"
  }, {
    "id": 1390,
    "text": "for n = 1, sudokuGUI.COLOUR_MAX do\r\n        table.insert(listBoxValues, {colour = wx.wxColour(sudokuGUI.Colours[n])})\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1391,
    "text": "table.insert(listBoxValues, {colour = wx.wxColour(sudokuGUI.Colours[n])})",
    "type": "statement:functioncall"
  }, {
    "id": 1392,
    "text": "listBoxValues[sudokuGUI.VALUE_COLOUR].font      = wx.wxFont(sudokuGUI.valueFont.wxfont)",
    "type": "statement:assign"
  }, {
    "id": 1393,
    "text": "listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font = wx.wxFont(sudokuGUI.possibleFont.wxfont)",
    "type": "statement:assign"
  }, {
    "id": 1394,
    "text": "local reset_fonts = true",
    "type": "statement:localassign"
  }, {
    "id": 1395,
    "text": "local mainSizer = wx.wxBoxSizer( wx.wxVERTICAL )",
    "type": "statement:localassign"
  }, {
    "id": 1396,
    "text": "local fcFlexSizer = wx.wxFlexGridSizer( 1, 2, 0, 0 )",
    "type": "statement:localassign"
  }, {
    "id": 1397,
    "text": "fcFlexSizer:AddGrowableCol( 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 1398,
    "text": "fcFlexSizer:AddGrowableRow( 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 1399,
    "text": "local fcListBox = wx.wxListBox( panel, ID_LISTBOX, wx.wxDefaultPosition, wx.wxSize(80,100), listStrings, wx.wxLB_SINGLE )",
    "type": "statement:localassign"
  }, {
    "id": 1400,
    "text": "fcListBox:SetSelection(0)",
    "type": "statement:functioncall"
  }, {
    "id": 1401,
    "text": "fcFlexSizer:Add( fcListBox, 0, wx.wxGROW+wx.wxALIGN_CENTER_HORIZONTAL+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1402,
    "text": "local fcBoxSizer = wx.wxBoxSizer( wx.wxVERTICAL )",
    "type": "statement:localassign"
  }, {
    "id": 1403,
    "text": "local sampleWin = wx.wxWindow(panel, ID_SAMPLE_TEXT, wx.wxDefaultPosition, wx.wxSize(140,140))",
    "type": "statement:localassign"
  }, {
    "id": 1404,
    "text": "fcBoxSizer:Add( sampleWin, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1405,
    "text": "local fontButton = wx.wxButton( panel, ID_FONT_BUTTON, \"Choose Font\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )",
    "type": "statement:localassign"
  }, {
    "id": 1406,
    "text": "fcBoxSizer:Add( fontButton, 0, wx.wxGROW+wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1407,
    "text": "local colourButton = wx.wxButton( panel, ID_COLOUR_BUTTON, \"Choose Color\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )",
    "type": "statement:localassign"
  }, {
    "id": 1408,
    "text": "fcBoxSizer:Add( colourButton, 0, wx.wxGROW+wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1409,
    "text": "local resetButton = wx.wxButton( panel, ID_RESET_BUTTON, \"Reset Value...\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )",
    "type": "statement:localassign"
  }, {
    "id": 1410,
    "text": "fcBoxSizer:Add( resetButton, 0, wx.wxGROW+wx.wxALIGN_CENTER_VERTICAL+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1411,
    "text": "fcFlexSizer:Add( fcBoxSizer, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1412,
    "text": "mainSizer:Add( fcFlexSizer, 1, wx.wxGROW+wx.wxALIGN_CENTER_VERTICAL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1413,
    "text": "panel:SetSizer( mainSizer )",
    "type": "statement:functioncall"
  }, {
    "id": 1414,
    "text": "sampleWin:Connect(wx.wxEVT_PAINT,\r\n        function (event)\r\n            local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n            local sel = fcListBox:GetSelection() + 1\r\n            local width, height = win:GetClientSizeWH()\r\n            local dc = wx.wxPaintDC(win)\r\n\r\n            local function SetFontSize(size, width, height, font)\r\n                -- alternate way, but it fails for fonts that can't scale large enough\r\n                --local f = wx.wxNullFont:NewSize(wx.wxSize(width, height), font:GetFamily(), font:GetStyle(), font:GetWeight(), font:GetUnderlined(), font:GetFaceName())\r\n                --font:SetPointSize(f:GetPointSize())\r\n\r\n                local font_width = 0\r\n                local font_height = 0\r\n                while (font_width < width) and (font_height < height) do\r\n                    font:SetPointSize(size)\r\n                    dc:SetFont(font)\r\n                    font_width, font_height = dc:GetTextExtent(\"5\")\r\n                    size = size + 2\r\n                    if size > 200 then break end -- oops bad font?\r\n                end\r\n                font:SetPointSize(size-1)\r\n            end\r\n\r\n            -- clear background\r\n            local c = listBoxValues[sudokuGUI.BACKGROUND_COLOUR].colour\r\n            if (sel == sudokuGUI.ODD_BACKGROUND_COLOUR) or (sel == sudokuGUI.FOCUS_CELL_COLOUR) then\r\n                c = listBoxValues[sel].colour\r\n            end\r\n            local brush = wx.wxBrush(c, wx.wxSOLID)\r\n            dc:SetBrush(brush)\r\n            brush:delete()\r\n            dc:DrawRectangle(0, 0, width, height)\r\n\r\n            -- draw possible values\r\n            dc:SetTextForeground(listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].colour)\r\n            local font = listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font\r\n            if reset_fonts then SetFontSize(4, width/4, height/4, font) end\r\n            dc:SetFont(font)\r\n            local font_width, font_height = dc:GetTextExtent(\"5\")\r\n\r\n            local pos =\r\n            {\r\n                [1] = { x = 2,                  y = 2 },\r\n                [3] = { x = width-font_width-2, y = 2 },\r\n                [4] = { x = 2,                  y = (height-font_height)/2-2 },\r\n                [6] = { x = width-font_width-2, y = (height-font_height)/2-2 },\r\n                [7] = { x = 2,                  y = height-font_height-2 },\r\n                [9] = { x = width-font_width-2, y = height-font_height-2 }\r\n            }\r\n\r\n            dc:SetBrush(wx.wxTRANSPARENT_BRUSH)\r\n\r\n            local function DrawPossible(idx, n, value, hidden)\r\n                dc:DrawText(value, pos[n].x, pos[n].y)\r\n                local pen = wx.wxPen(listBoxValues[idx].colour, 1, wx.wxSOLID)\r\n                dc:SetPen(pen); pen:delete()\r\n                if hidden ~= true then\r\n                    dc:DrawRectangle(pos[n].x, pos[n].y, font_width, font_height)\r\n                else\r\n                    dc:DrawRoundedRectangle(pos[n].x, pos[n].y, font_width, font_height, 20)\r\n                end\r\n            end\r\n\r\n            DrawPossible(sudokuGUI.NAKED_PAIRS_COLOUR,     1, \"2\")\r\n            DrawPossible(sudokuGUI.NAKED_TRIPLETS_COLOUR,  4, \"3\")\r\n            DrawPossible(sudokuGUI.NAKED_QUADS_COLOUR,     7, \"4\")\r\n            DrawPossible(sudokuGUI.HIDDEN_PAIRS_COLOUR,    3, \"2\", true)\r\n            DrawPossible(sudokuGUI.HIDDEN_TRIPLETS_COLOUR, 6, \"3\", true)\r\n            DrawPossible(sudokuGUI.HIDDEN_QUADS_COLOUR,    9, \"4\", true)\r\n\r\n            -- draw invalid marker\r\n            local pen = wx.wxPen(listBoxValues[sudokuGUI.INVALID_VALUE_COLOUR].colour, 1, wx.wxSOLID)\r\n            dc:SetPen(pen); pen:delete()\r\n            dc:DrawLine(0, 0, width, height)\r\n\r\n            -- draw value\r\n            if (sel == sudokuGUI.INIT_VALUE_COLOUR) then\r\n                dc:SetTextForeground(listBoxValues[sudokuGUI.INIT_VALUE_COLOUR].colour)\r\n            else\r\n                dc:SetTextForeground(listBoxValues[sudokuGUI.VALUE_COLOUR].colour)\r\n            end\r\n\r\n            local old_font = font\r\n            local font = listBoxValues[sudokuGUI.VALUE_COLOUR].font\r\n            if reset_fonts then SetFontSize(old_font:GetPointSize(), width-2, height-2, font) end\r\n            dc:SetFont(font)\r\n            local font_width, font_height = dc:GetTextExtent(\"9\")\r\n            dc:DrawText(\"9\", (width-font_width)/2, (height-font_height)/2)\r\n\r\n            reset_fonts = false\r\n            dc:delete()\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1415,
    "text": "local sel = fcListBox:GetSelection() + 1",
    "type": "statement:localassign"
  }, {
    "id": 1416,
    "text": "local function SetFontSize(size, width, height, font)\r\n                -- alternate way, but it fails for fonts that can't scale large enough\r\n                --local f = wx.wxNullFont:NewSize(wx.wxSize(width, height), font:GetFamily(), font:GetStyle(), font:GetWeight(), font:GetUnderlined(), font:GetFaceName())\r\n                --font:SetPointSize(f:GetPointSize())\r\n\r\n                local font_width = 0\r\n                local font_height = 0\r\n                while (font_width < width) and (font_height < height) do\r\n                    font:SetPointSize(size)\r\n                    dc:SetFont(font)\r\n                    font_width, font_height = dc:GetTextExtent(\"5\")\r\n                    size = size + 2\r\n                    if size > 200 then break end -- oops bad font?\r\n                end\r\n                font:SetPointSize(size-1)\r\n            end",
    "type": "statement:localfunction"
  }, {
    "id": 1417,
    "text": "local font_width = 0",
    "type": "statement:localassign"
  }, {
    "id": 1418,
    "text": "local font_height = 0",
    "type": "statement:localassign"
  }, {
    "id": 1419,
    "text": "while (font_width < width) and (font_height < height) do\r\n                    font:SetPointSize(size)\r\n                    dc:SetFont(font)\r\n                    font_width, font_height = dc:GetTextExtent(\"5\")\r\n                    size = size + 2\r\n                    if size > 200 then break end -- oops bad font?\r\n                end",
    "type": "statement:while"
  }, {
    "id": 1420,
    "text": "font:SetPointSize(size)",
    "type": "statement:functioncall"
  }, {
    "id": 1421,
    "text": "dc:SetFont(font)",
    "type": "statement:functioncall"
  }, {
    "id": 1422,
    "text": "font_width, font_height = dc:GetTextExtent(\"5\")",
    "type": "statement:assign"
  }, {
    "id": 1423,
    "text": "size = size + 2",
    "type": "statement:assign"
  }, {
    "id": 1424,
    "text": "if size > 200 then break end",
    "type": "statement:if"
  }, {
    "id": 1425,
    "text": "font:SetPointSize(size-1)",
    "type": "statement:functioncall"
  }, {
    "id": 1426,
    "text": "local c = listBoxValues[sudokuGUI.BACKGROUND_COLOUR].colour",
    "type": "statement:localassign"
  }, {
    "id": 1427,
    "text": "if (sel == sudokuGUI.ODD_BACKGROUND_COLOUR) or (sel == sudokuGUI.FOCUS_CELL_COLOUR) then\r\n                c = listBoxValues[sel].colour\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1428,
    "text": "c = listBoxValues[sel].colour",
    "type": "statement:assign"
  }, {
    "id": 1429,
    "text": "local brush = wx.wxBrush(c, wx.wxSOLID)",
    "type": "statement:localassign"
  }, {
    "id": 1430,
    "text": "dc:SetTextForeground(listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].colour)",
    "type": "statement:functioncall"
  }, {
    "id": 1431,
    "text": "local font = listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font",
    "type": "statement:localassign"
  }, {
    "id": 1432,
    "text": "if reset_fonts then SetFontSize(4, width/4, height/4, font) end",
    "type": "statement:if"
  }, {
    "id": 1433,
    "text": "SetFontSize(4, width/4, height/4, font)",
    "type": "statement:functioncall"
  }, {
    "id": 1434,
    "text": "local font_width, font_height = dc:GetTextExtent(\"5\")",
    "type": "statement:localassign"
  }, {
    "id": 1435,
    "text": "local pos =\r\n            {\r\n                [1] = { x = 2,                  y = 2 },\r\n                [3] = { x = width-font_width-2, y = 2 },\r\n                [4] = { x = 2,                  y = (height-font_height)/2-2 },\r\n                [6] = { x = width-font_width-2, y = (height-font_height)/2-2 },\r\n                [7] = { x = 2,                  y = height-font_height-2 },\r\n                [9] = { x = width-font_width-2, y = height-font_height-2 }\r\n            }",
    "type": "statement:localassign"
  }, {
    "id": 1436,
    "text": "local function DrawPossible(idx, n, value, hidden)\r\n                dc:DrawText(value, pos[n].x, pos[n].y)\r\n                local pen = wx.wxPen(listBoxValues[idx].colour, 1, wx.wxSOLID)\r\n                dc:SetPen(pen); pen:delete()\r\n                if hidden ~= true then\r\n                    dc:DrawRectangle(pos[n].x, pos[n].y, font_width, font_height)\r\n                else\r\n                    dc:DrawRoundedRectangle(pos[n].x, pos[n].y, font_width, font_height, 20)\r\n                end\r\n            end",
    "type": "statement:localfunction"
  }, {
    "id": 1437,
    "text": "dc:DrawText(value, pos[n].x, pos[n].y)",
    "type": "statement:functioncall"
  }, {
    "id": 1438,
    "text": "local pen = wx.wxPen(listBoxValues[idx].colour, 1, wx.wxSOLID)",
    "type": "statement:localassign"
  }, {
    "id": 1439,
    "text": "if hidden ~= true then\r\n                    dc:DrawRectangle(pos[n].x, pos[n].y, font_width, font_height)\r\n                else\r\n                    dc:DrawRoundedRectangle(pos[n].x, pos[n].y, font_width, font_height, 20)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1440,
    "text": "dc:DrawRectangle(pos[n].x, pos[n].y, font_width, font_height)",
    "type": "statement:functioncall"
  }, {
    "id": 1441,
    "text": "dc:DrawRoundedRectangle(pos[n].x, pos[n].y, font_width, font_height, 20)",
    "type": "statement:functioncall"
  }, {
    "id": 1442,
    "text": "DrawPossible(sudokuGUI.NAKED_PAIRS_COLOUR,     1, \"2\")",
    "type": "statement:functioncall"
  }, {
    "id": 1443,
    "text": "DrawPossible(sudokuGUI.NAKED_TRIPLETS_COLOUR,  4, \"3\")",
    "type": "statement:functioncall"
  }, {
    "id": 1444,
    "text": "DrawPossible(sudokuGUI.NAKED_QUADS_COLOUR,     7, \"4\")",
    "type": "statement:functioncall"
  }, {
    "id": 1445,
    "text": "DrawPossible(sudokuGUI.HIDDEN_PAIRS_COLOUR,    3, \"2\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 1446,
    "text": "DrawPossible(sudokuGUI.HIDDEN_TRIPLETS_COLOUR, 6, \"3\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 1447,
    "text": "DrawPossible(sudokuGUI.HIDDEN_QUADS_COLOUR,    9, \"4\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 1448,
    "text": "local pen = wx.wxPen(listBoxValues[sudokuGUI.INVALID_VALUE_COLOUR].colour, 1, wx.wxSOLID)",
    "type": "statement:localassign"
  }, {
    "id": 1449,
    "text": "if (sel == sudokuGUI.INIT_VALUE_COLOUR) then\r\n                dc:SetTextForeground(listBoxValues[sudokuGUI.INIT_VALUE_COLOUR].colour)\r\n            else\r\n                dc:SetTextForeground(listBoxValues[sudokuGUI.VALUE_COLOUR].colour)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1450,
    "text": "dc:SetTextForeground(listBoxValues[sudokuGUI.INIT_VALUE_COLOUR].colour)",
    "type": "statement:functioncall"
  }, {
    "id": 1451,
    "text": "dc:SetTextForeground(listBoxValues[sudokuGUI.VALUE_COLOUR].colour)",
    "type": "statement:functioncall"
  }, {
    "id": 1452,
    "text": "local old_font = font",
    "type": "statement:localassign"
  }, {
    "id": 1453,
    "text": "local font = listBoxValues[sudokuGUI.VALUE_COLOUR].font",
    "type": "statement:localassign"
  }, {
    "id": 1454,
    "text": "if reset_fonts then SetFontSize(old_font:GetPointSize(), width-2, height-2, font) end",
    "type": "statement:if"
  }, {
    "id": 1455,
    "text": "SetFontSize(old_font:GetPointSize(), width-2, height-2, font)",
    "type": "statement:functioncall"
  }, {
    "id": 1456,
    "text": "local font_width, font_height = dc:GetTextExtent(\"9\")",
    "type": "statement:localassign"
  }, {
    "id": 1457,
    "text": "dc:DrawText(\"9\", (width-font_width)/2, (height-font_height)/2)",
    "type": "statement:functioncall"
  }, {
    "id": 1458,
    "text": "reset_fonts = false",
    "type": "statement:assign"
  }, {
    "id": 1459,
    "text": "panel:Connect(ID_LISTBOX, wx.wxEVT_COMMAND_LISTBOX_SELECTED,\r\n        function (event)\r\n            local sel = event:GetSelection() + 1\r\n            panel:FindWindow(ID_FONT_BUTTON):Enable(listBoxValues[sel].font ~= nil)\r\n            colourButton:SetForegroundColour(listBoxValues[sel].colour)\r\n            sampleWin:Refresh(false)\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1460,
    "text": "local sel = event:GetSelection() + 1",
    "type": "statement:localassign"
  }, {
    "id": 1461,
    "text": "panel:FindWindow(ID_FONT_BUTTON):Enable(listBoxValues[sel].font ~= nil)",
    "type": "statement:functioncall"
  }, {
    "id": 1462,
    "text": "colourButton:SetForegroundColour(listBoxValues[sel].colour)",
    "type": "statement:functioncall"
  }, {
    "id": 1463,
    "text": "sampleWin:Refresh(false)",
    "type": "statement:functioncall"
  }, {
    "id": 1464,
    "text": "panel:Connect(ID_FONT_BUTTON, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            local sel = fcListBox:GetSelection() + 1\r\n            local f = listBoxValues[sel].font\r\n            f = wx.wxGetFontFromUser(panel, f)\r\n            if f:Ok() then\r\n                listBoxValues[sel].font:delete()\r\n                listBoxValues[sel].font = f\r\n                reset_fonts = true\r\n            else\r\n                f:delete()\r\n            end\r\n            sampleWin:Refresh(false)\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1465,
    "text": "local f = listBoxValues[sel].font",
    "type": "statement:localassign"
  }, {
    "id": 1466,
    "text": "f = wx.wxGetFontFromUser(panel, f)",
    "type": "statement:assign"
  }, {
    "id": 1467,
    "text": "if f:Ok() then\r\n                listBoxValues[sel].font:delete()\r\n                listBoxValues[sel].font = f\r\n                reset_fonts = true\r\n            else\r\n                f:delete()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1468,
    "text": "listBoxValues[sel].font:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1469,
    "text": "listBoxValues[sel].font = f",
    "type": "statement:assign"
  }, {
    "id": 1470,
    "text": "reset_fonts = true",
    "type": "statement:assign"
  }, {
    "id": 1471,
    "text": "f:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1472,
    "text": "panel:Connect(ID_COLOUR_BUTTON, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            local sel = fcListBox:GetSelection() + 1\r\n            local c = listBoxValues[sel].colour\r\n            c = wx.wxGetColourFromUser(panel, c)\r\n            if c:Ok() then\r\n                listBoxValues[sel].colour:delete()\r\n                listBoxValues[sel].colour = c\r\n                colourButton:SetForegroundColour(c)\r\n            else\r\n                c:delete()\r\n            end\r\n            sampleWin:Refresh(false)\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1473,
    "text": "local c = listBoxValues[sel].colour",
    "type": "statement:localassign"
  }, {
    "id": 1474,
    "text": "c = wx.wxGetColourFromUser(panel, c)",
    "type": "statement:assign"
  }, {
    "id": 1475,
    "text": "if c:Ok() then\r\n                listBoxValues[sel].colour:delete()\r\n                listBoxValues[sel].colour = c\r\n                colourButton:SetForegroundColour(c)\r\n            else\r\n                c:delete()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1476,
    "text": "listBoxValues[sel].colour:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1477,
    "text": "listBoxValues[sel].colour = c",
    "type": "statement:assign"
  }, {
    "id": 1478,
    "text": "colourButton:SetForegroundColour(c)",
    "type": "statement:functioncall"
  }, {
    "id": 1479,
    "text": "c:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1480,
    "text": "panel:Connect(ID_RESET_BUTTON, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            local sel = fcListBox:GetSelection() + 1\r\n\r\n            local ret = wx.wxMessageBox(\r\n                \"Press 'Yes' to reset all the colors and fonts or 'No' to reset only just the selected item.\",\r\n                \"wxLuaSudoku - Reset colors or fonts?\",\r\n                wx.wxYES_NO + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                panel )\r\n\r\n            if ret == wx.wxYES then\r\n                for n = 1, sudokuGUI.COLOUR_MAX do\r\n                    listBoxValues[n].colour:delete()\r\n                    listBoxValues[n].colour = wx.wxColour(sudokuGUI.Colours_[n])\r\n                end\r\n\r\n                listBoxValues[sudokuGUI.VALUE_COLOUR].font:delete()\r\n                listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font:delete()\r\n                listBoxValues[sudokuGUI.VALUE_COLOUR].font      = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\n                listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n            elseif ret == wx.wxNO then\r\n                listBoxValues[sel].colour:delete()\r\n                listBoxValues[sel].colour = wx.wxColour(sudokuGUI.Colours_[sel])\r\n\r\n                if (sel == sudokuGUI.VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\n                elseif (sel == sudokuGUI.POSS_VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n                end\r\n            end\r\n\r\n            colourButton:SetForegroundColour(listBoxValues[sel].colour)\r\n            reset_fonts = true\r\n            sampleWin:Refresh(false)\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1481,
    "text": "local ret = wx.wxMessageBox(\r\n                \"Press 'Yes' to reset all the colors and fonts or 'No' to reset only just the selected item.\",\r\n                \"wxLuaSudoku - Reset colors or fonts?\",\r\n                wx.wxYES_NO + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                panel )",
    "type": "statement:localassign"
  }, {
    "id": 1482,
    "text": "if ret == wx.wxYES then\r\n                for n = 1, sudokuGUI.COLOUR_MAX do\r\n                    listBoxValues[n].colour:delete()\r\n                    listBoxValues[n].colour = wx.wxColour(sudokuGUI.Colours_[n])\r\n                end\r\n\r\n                listBoxValues[sudokuGUI.VALUE_COLOUR].font:delete()\r\n                listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font:delete()\r\n                listBoxValues[sudokuGUI.VALUE_COLOUR].font      = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\n                listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n            elseif ret == wx.wxNO then\r\n                listBoxValues[sel].colour:delete()\r\n                listBoxValues[sel].colour = wx.wxColour(sudokuGUI.Colours_[sel])\r\n\r\n                if (sel == sudokuGUI.VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\n                elseif (sel == sudokuGUI.POSS_VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1483,
    "text": "for n = 1, sudokuGUI.COLOUR_MAX do\r\n                    listBoxValues[n].colour:delete()\r\n                    listBoxValues[n].colour = wx.wxColour(sudokuGUI.Colours_[n])\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 1484,
    "text": "listBoxValues[n].colour:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1485,
    "text": "listBoxValues[n].colour = wx.wxColour(sudokuGUI.Colours_[n])",
    "type": "statement:assign"
  }, {
    "id": 1486,
    "text": "listBoxValues[sudokuGUI.VALUE_COLOUR].font:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1487,
    "text": "listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1488,
    "text": "listBoxValues[sudokuGUI.VALUE_COLOUR].font      = wx.wxFont(sudokuGUI.valueFont_wxfont_)",
    "type": "statement:assign"
  }, {
    "id": 1489,
    "text": "listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)",
    "type": "statement:assign"
  }, {
    "id": 1490,
    "text": "listBoxValues[sel].colour = wx.wxColour(sudokuGUI.Colours_[sel])",
    "type": "statement:assign"
  }, {
    "id": 1491,
    "text": "if (sel == sudokuGUI.VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\n                elseif (sel == sudokuGUI.POSS_VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1492,
    "text": "listBoxValues[sel].font = wx.wxFont(sudokuGUI.valueFont_wxfont_)",
    "type": "statement:assign"
  }, {
    "id": 1493,
    "text": "listBoxValues[sel].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)",
    "type": "statement:assign"
  }, {
    "id": 1494,
    "text": "function sudokuGUI.PreferencesDialogPageUI.Apply()\r\n        for n = 1, sudokuGUI.COLOUR_MAX do\r\n            sudokuGUI.Colours[n]:delete()\r\n            sudokuGUI.Colours[n] = wx.wxColour(listBoxValues[n].colour)\r\n        end\r\n\r\n        -- copy the fonts since when applied their size will change\r\n        sudokuGUI.valueFont.wxfont:delete()\r\n        sudokuGUI.valueFont.wxfont    = wx.wxFont(listBoxValues[sudokuGUI.VALUE_COLOUR].font)\r\n        sudokuGUI.possibleFont.wxfont:delete()\r\n        sudokuGUI.possibleFont.wxfont = wx.wxFont(listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font)\r\n        sudokuGUI.valueFont_cache    = {} -- clear cache so GetCellBestSize recreates it\r\n        sudokuGUI.possibleFont_cache = {}\r\n\r\n        for winID = 1, 81 do\r\n            if sudokuGUI.IsOddBlockCell(winID) then\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n            else\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n            end\r\n        end\r\n\r\n        local width, height = sudokuGUI.cellWindows[1]:GetClientSizeWH()\r\n        sudokuGUI.GetCellBestSize(width, height)\r\n        sudokuGUI.Refresh()\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1495,
    "text": "for n = 1, sudokuGUI.COLOUR_MAX do\r\n            sudokuGUI.Colours[n]:delete()\r\n            sudokuGUI.Colours[n] = wx.wxColour(listBoxValues[n].colour)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 1496,
    "text": "sudokuGUI.Colours[n]:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1497,
    "text": "sudokuGUI.Colours[n] = wx.wxColour(listBoxValues[n].colour)",
    "type": "statement:assign"
  }, {
    "id": 1498,
    "text": "sudokuGUI.valueFont.wxfont:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1499,
    "text": "sudokuGUI.valueFont.wxfont    = wx.wxFont(listBoxValues[sudokuGUI.VALUE_COLOUR].font)",
    "type": "statement:assign"
  }, {
    "id": 1500,
    "text": "sudokuGUI.possibleFont.wxfont:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1501,
    "text": "sudokuGUI.possibleFont.wxfont = wx.wxFont(listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font)",
    "type": "statement:assign"
  }, {
    "id": 1502,
    "text": "sudokuGUI.valueFont_cache    = {}",
    "type": "statement:assign"
  }, {
    "id": 1503,
    "text": "sudokuGUI.possibleFont_cache = {}",
    "type": "statement:assign"
  }, {
    "id": 1504,
    "text": "for winID = 1, 81 do\r\n            if sudokuGUI.IsOddBlockCell(winID) then\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n            else\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 1505,
    "text": "if sudokuGUI.IsOddBlockCell(winID) then\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n            else\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1506,
    "text": "sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1507,
    "text": "sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1508,
    "text": "local width, height = sudokuGUI.cellWindows[1]:GetClientSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 1509,
    "text": "sudokuGUI.GetCellBestSize(width, height)",
    "type": "statement:functioncall"
  }, {
    "id": 1510,
    "text": "function sudokuGUI.PreferencesDialogPageUI.Destroy()\r\n        for n = 1, sudokuGUI.COLOUR_MAX do\r\n            listBoxValues[n].colour:delete()\r\n            if listBoxValues[n].font then listBoxValues[n].font:delete() end\r\n        end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1511,
    "text": "for n = 1, sudokuGUI.COLOUR_MAX do\r\n            listBoxValues[n].colour:delete()\r\n            if listBoxValues[n].font then listBoxValues[n].font:delete() end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 1512,
    "text": "if listBoxValues[n].font then listBoxValues[n].font:delete() end",
    "type": "statement:if"
  }, {
    "id": 1513,
    "text": "listBoxValues[n].font:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1514,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1515,
    "text": "local function SetFontSize(size, width, height, font)\r\n                -- alternate way, but it fails for fonts that can't scale large enough\r\n                --local f = wx.wxNullFont:NewSize(wx.wxSize(width, height), font:GetFamily(), font:GetStyle(), font:GetWeight(), font:GetUnderlined(), font:GetFaceName())\r\n                --font:SetPointSize(f:GetPointSize())\r\n\r\n                local font_width = 0\r\n                local font_height = 0\r\n                while (font_width < width) and (font_height < height) do\r\n                    font:SetPointSize(size)\r\n                    dc:SetFont(font)\r\n                    font_width, font_height = dc:GetTextExtent(\"5\")\r\n                    size = size + 2\r\n                    if size > 200 then break end -- oops bad font?\r\n                end\r\n                font:SetPointSize(size-1)\r\n            end",
    "type": "function"
  }, {
    "id": 1516,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1517,
    "text": "local function DrawPossible(idx, n, value, hidden)\r\n                dc:DrawText(value, pos[n].x, pos[n].y)\r\n                local pen = wx.wxPen(listBoxValues[idx].colour, 1, wx.wxSOLID)\r\n                dc:SetPen(pen); pen:delete()\r\n                if hidden ~= true then\r\n                    dc:DrawRectangle(pos[n].x, pos[n].y, font_width, font_height)\r\n                else\r\n                    dc:DrawRoundedRectangle(pos[n].x, pos[n].y, font_width, font_height, 20)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 1518,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1519,
    "text": "function sudokuGUI.PreferencesDialogPageUI.Apply()\r\n        for n = 1, sudokuGUI.COLOUR_MAX do\r\n            sudokuGUI.Colours[n]:delete()\r\n            sudokuGUI.Colours[n] = wx.wxColour(listBoxValues[n].colour)\r\n        end\r\n\r\n        -- copy the fonts since when applied their size will change\r\n        sudokuGUI.valueFont.wxfont:delete()\r\n        sudokuGUI.valueFont.wxfont    = wx.wxFont(listBoxValues[sudokuGUI.VALUE_COLOUR].font)\r\n        sudokuGUI.possibleFont.wxfont:delete()\r\n        sudokuGUI.possibleFont.wxfont = wx.wxFont(listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font)\r\n        sudokuGUI.valueFont_cache    = {} -- clear cache so GetCellBestSize recreates it\r\n        sudokuGUI.possibleFont_cache = {}\r\n\r\n        for winID = 1, 81 do\r\n            if sudokuGUI.IsOddBlockCell(winID) then\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n            else\r\n                sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n            end\r\n        end\r\n\r\n        local width, height = sudokuGUI.cellWindows[1]:GetClientSizeWH()\r\n        sudokuGUI.GetCellBestSize(width, height)\r\n        sudokuGUI.Refresh()\r\n    end",
    "type": "function"
  }, {
    "id": 1520,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1521,
    "text": "function sudokuGUI.PreferencesDialogPageUI.Destroy()\r\n        for n = 1, sudokuGUI.COLOUR_MAX do\r\n            listBoxValues[n].colour:delete()\r\n            if listBoxValues[n].font then listBoxValues[n].font:delete() end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 1522,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1523,
    "text": "function sudokuGUI.CheckListBoxCheck(clBox, n_start, n_end, check)\r\n    for n = n_start, n_end do\r\n        clBox:Check(n, check)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1524,
    "text": "for n = n_start, n_end do\r\n        clBox:Check(n, check)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1525,
    "text": "clBox:Check(n, check)",
    "type": "statement:functioncall"
  }, {
    "id": 1526,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1527,
    "text": "function sudokuGUI.CheckListBoxIsChecked(clBox, n_start, n_end)\r\n    for n = n_start, n_end do\r\n        if not clBox:IsChecked(n) then return false end\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 1528,
    "text": "for n = n_start, n_end do\r\n        if not clBox:IsChecked(n) then return false end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1529,
    "text": "if not clBox:IsChecked(n) then return false end",
    "type": "statement:if"
  }, {
    "id": 1530,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1531,
    "text": "function sudokuGUI.PreferencesDialogPageShow.Create(parent)\r\n    local panel = wx.wxPanel(parent, wx.wxID_ANY)\r\n\r\n    local ID_LISTBOX  = 10\r\n\r\n    local listStrings =\r\n    {\r\n        \"All naked groups\",\r\n        \"All hidden groups\",\r\n        \"Naked pairs\",\r\n        \"Naked triplets\",\r\n        \"Naked quads\",\r\n        \"Hidden pairs\",\r\n        \"Hidden triplets\",\r\n        \"Hidden quads\"\r\n    }\r\n\r\n    local listBoxValues =\r\n    {\r\n        sudokuGUI.ID_SHOW_NAKED,\r\n        sudokuGUI.ID_SHOW_HIDDEN,\r\n        sudokuGUI.ID_SHOW_NAKEDPAIRS,\r\n        sudokuGUI.ID_SHOW_NAKEDTRIPLETS,\r\n        sudokuGUI.ID_SHOW_NAKEDQUADS,\r\n        sudokuGUI.ID_SHOW_HIDDENPAIRS,\r\n        sudokuGUI.ID_SHOW_HIDDENTRIPLETS,\r\n        sudokuGUI.ID_SHOW_HIDDENQUADS\r\n    }\r\n\r\n    -- Create the dialog ------------------------------------------------------\r\n\r\n    local mainSizer = wx.wxBoxSizer( wx.wxVERTICAL )\r\n    local showListBox = wx.wxCheckListBox( panel, ID_LISTBOX, wx.wxDefaultPosition, wx.wxSize(80,100), listStrings, wx.wxLB_SINGLE )\r\n    mainSizer:Add( showListBox, 1, wx.wxGROW+wx.wxALIGN_CENTER_HORIZONTAL+wx.wxALL, 5 )\r\n    panel:SetSizer( mainSizer )\r\n\r\n    for n = 1, showListBox:GetCount() do\r\n        showListBox:Check(n-1, sudokuGUI.IsCheckedMenuItem(listBoxValues[n]))\r\n    end\r\n\r\n    panel:Connect(ID_LISTBOX, wx.wxEVT_COMMAND_CHECKLISTBOX_TOGGLED,\r\n        function (event)\r\n            local sel = event:GetSelection()\r\n            local checked = showListBox:IsChecked(sel)\r\n            local id = listBoxValues[sel+1]\r\n            if id == sudokuGUI.ID_SHOW_NAKED then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 2, 4, checked)\r\n            elseif id == sudokuGUI.ID_SHOW_HIDDEN then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 5, 7, checked)\r\n            else\r\n                showListBox:Check(0, sudokuGUI.CheckListBoxIsChecked(showListBox, 2, 4))\r\n                showListBox:Check(1, sudokuGUI.CheckListBoxIsChecked(showListBox, 5, 7))\r\n            end\r\n        end)\r\n\r\n    function sudokuGUI.PreferencesDialogPageShow.Apply()\r\n        for n = 1, showListBox:GetCount() do\r\n            sudokuGUI.CheckMenuItem(listBoxValues[n], showListBox:IsChecked(n-1))\r\n        end\r\n        sudokuGUI.UpdateTable()\r\n    end\r\n\r\n    function sudokuGUI.PreferencesDialogPageShow.Destroy()\r\n    end\r\n\r\n    return panel\r\nend",
    "type": "function"
  }, {
    "id": 1532,
    "text": "local ID_LISTBOX  = 10",
    "type": "statement:localassign"
  }, {
    "id": 1533,
    "text": "local listStrings =\r\n    {\r\n        \"All naked groups\",\r\n        \"All hidden groups\",\r\n        \"Naked pairs\",\r\n        \"Naked triplets\",\r\n        \"Naked quads\",\r\n        \"Hidden pairs\",\r\n        \"Hidden triplets\",\r\n        \"Hidden quads\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 1534,
    "text": "local listBoxValues =\r\n    {\r\n        sudokuGUI.ID_SHOW_NAKED,\r\n        sudokuGUI.ID_SHOW_HIDDEN,\r\n        sudokuGUI.ID_SHOW_NAKEDPAIRS,\r\n        sudokuGUI.ID_SHOW_NAKEDTRIPLETS,\r\n        sudokuGUI.ID_SHOW_NAKEDQUADS,\r\n        sudokuGUI.ID_SHOW_HIDDENPAIRS,\r\n        sudokuGUI.ID_SHOW_HIDDENTRIPLETS,\r\n        sudokuGUI.ID_SHOW_HIDDENQUADS\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 1535,
    "text": "local showListBox = wx.wxCheckListBox( panel, ID_LISTBOX, wx.wxDefaultPosition, wx.wxSize(80,100), listStrings, wx.wxLB_SINGLE )",
    "type": "statement:localassign"
  }, {
    "id": 1536,
    "text": "mainSizer:Add( showListBox, 1, wx.wxGROW+wx.wxALIGN_CENTER_HORIZONTAL+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1537,
    "text": "for n = 1, showListBox:GetCount() do\r\n        showListBox:Check(n-1, sudokuGUI.IsCheckedMenuItem(listBoxValues[n]))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1538,
    "text": "showListBox:Check(n-1, sudokuGUI.IsCheckedMenuItem(listBoxValues[n]))",
    "type": "statement:functioncall"
  }, {
    "id": 1539,
    "text": "panel:Connect(ID_LISTBOX, wx.wxEVT_COMMAND_CHECKLISTBOX_TOGGLED,\r\n        function (event)\r\n            local sel = event:GetSelection()\r\n            local checked = showListBox:IsChecked(sel)\r\n            local id = listBoxValues[sel+1]\r\n            if id == sudokuGUI.ID_SHOW_NAKED then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 2, 4, checked)\r\n            elseif id == sudokuGUI.ID_SHOW_HIDDEN then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 5, 7, checked)\r\n            else\r\n                showListBox:Check(0, sudokuGUI.CheckListBoxIsChecked(showListBox, 2, 4))\r\n                showListBox:Check(1, sudokuGUI.CheckListBoxIsChecked(showListBox, 5, 7))\r\n            end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1540,
    "text": "local sel = event:GetSelection()",
    "type": "statement:localassign"
  }, {
    "id": 1541,
    "text": "local checked = showListBox:IsChecked(sel)",
    "type": "statement:localassign"
  }, {
    "id": 1542,
    "text": "local id = listBoxValues[sel+1]",
    "type": "statement:localassign"
  }, {
    "id": 1543,
    "text": "if id == sudokuGUI.ID_SHOW_NAKED then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 2, 4, checked)\r\n            elseif id == sudokuGUI.ID_SHOW_HIDDEN then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 5, 7, checked)\r\n            else\r\n                showListBox:Check(0, sudokuGUI.CheckListBoxIsChecked(showListBox, 2, 4))\r\n                showListBox:Check(1, sudokuGUI.CheckListBoxIsChecked(showListBox, 5, 7))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1544,
    "text": "sudokuGUI.CheckListBoxCheck(showListBox, 2, 4, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1545,
    "text": "sudokuGUI.CheckListBoxCheck(showListBox, 5, 7, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1546,
    "text": "showListBox:Check(0, sudokuGUI.CheckListBoxIsChecked(showListBox, 2, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 1547,
    "text": "showListBox:Check(1, sudokuGUI.CheckListBoxIsChecked(showListBox, 5, 7))",
    "type": "statement:functioncall"
  }, {
    "id": 1548,
    "text": "function sudokuGUI.PreferencesDialogPageShow.Apply()\r\n        for n = 1, showListBox:GetCount() do\r\n            sudokuGUI.CheckMenuItem(listBoxValues[n], showListBox:IsChecked(n-1))\r\n        end\r\n        sudokuGUI.UpdateTable()\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1549,
    "text": "for n = 1, showListBox:GetCount() do\r\n            sudokuGUI.CheckMenuItem(listBoxValues[n], showListBox:IsChecked(n-1))\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 1550,
    "text": "sudokuGUI.CheckMenuItem(listBoxValues[n], showListBox:IsChecked(n-1))",
    "type": "statement:functioncall"
  }, {
    "id": 1551,
    "text": "function sudokuGUI.PreferencesDialogPageShow.Destroy()\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1552,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1553,
    "text": "function sudokuGUI.PreferencesDialogPageShow.Apply()\r\n        for n = 1, showListBox:GetCount() do\r\n            sudokuGUI.CheckMenuItem(listBoxValues[n], showListBox:IsChecked(n-1))\r\n        end\r\n        sudokuGUI.UpdateTable()\r\n    end",
    "type": "function"
  }, {
    "id": 1554,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1555,
    "text": "function sudokuGUI.PreferencesDialogPageShow.Destroy()\r\n    end",
    "type": "function"
  }, {
    "id": 1556,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1557,
    "text": "function sudokuGUI.PreferencesDialogPageSolve.Create(parent)\r\n    local panel = wx.wxPanel(parent, wx.wxID_ANY)\r\n\r\n    local ID_LISTBOX  = 10\r\n\r\n    local listStrings =\r\n    {\r\n        \"All naked groups\",\r\n        \"All hidden groups\",\r\n        \"Naked pairs\",\r\n        \"Naked triplets\",\r\n        \"Naked quads\",\r\n        \"Hidden pairs\",\r\n        \"Hidden triplets\",\r\n        \"Hidden quads\"\r\n    }\r\n\r\n    local listBoxValues =\r\n    {\r\n        sudokuGUI.ID_ELIMINATE_NAKED,\r\n        sudokuGUI.ID_ELIMINATE_HIDDEN,\r\n        sudokuGUI.ID_ELIMINATE_NAKEDPAIRS,\r\n        sudokuGUI.ID_ELIMINATE_NAKEDTRIPLETS,\r\n        sudokuGUI.ID_ELIMINATE_NAKEDQUADS,\r\n        sudokuGUI.ID_ELIMINATE_HIDDENPAIRS,\r\n        sudokuGUI.ID_ELIMINATE_HIDDENTRIPLETS,\r\n        sudokuGUI.ID_ELIMINATE_HIDDENQUADS\r\n    }\r\n\r\n    -- Create the dialog ------------------------------------------------------\r\n\r\n    local mainSizer = wx.wxBoxSizer( wx.wxVERTICAL )\r\n    local showListBox = wx.wxCheckListBox( panel, ID_LISTBOX, wx.wxDefaultPosition, wx.wxSize(80,100), listStrings, wx.wxLB_SINGLE )\r\n    mainSizer:Add( showListBox, 1, wx.wxGROW+wx.wxALIGN_CENTER_HORIZONTAL+wx.wxALL, 5 )\r\n    panel:SetSizer( mainSizer )\r\n\r\n    for n = 1, showListBox:GetCount() do\r\n        showListBox:Check(n-1, sudokuGUI.IsCheckedMenuItem(listBoxValues[n]))\r\n    end\r\n\r\n    panel:Connect(ID_LISTBOX, wx.wxEVT_COMMAND_CHECKLISTBOX_TOGGLED,\r\n        function (event)\r\n            local sel = event:GetSelection()\r\n            local checked = showListBox:IsChecked(sel)\r\n            local id = listBoxValues[sel+1]\r\n            if id == sudokuGUI.ID_ELIMINATE_NAKED then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 2, 4, checked)\r\n            elseif id == sudokuGUI.ID_ELIMINATE_HIDDEN then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 5, 7, checked)\r\n            else\r\n                showListBox:Check(0, sudokuGUI.CheckListBoxIsChecked(showListBox, 2, 4))\r\n                showListBox:Check(1, sudokuGUI.CheckListBoxIsChecked(showListBox, 5, 7))\r\n            end\r\n        end)\r\n\r\n    function sudokuGUI.PreferencesDialogPageSolve.Apply()\r\n        for n = 1, showListBox:GetCount() do\r\n            sudokuGUI.CheckMenuItem(listBoxValues[n], showListBox:IsChecked(n-1))\r\n        end\r\n        sudokuGUI.UpdateTable()\r\n    end\r\n\r\n    function sudokuGUI.PreferencesDialogPageSolve.Destroy()\r\n    end\r\n\r\n    return panel\r\nend",
    "type": "function"
  }, {
    "id": 1558,
    "text": "local listBoxValues =\r\n    {\r\n        sudokuGUI.ID_ELIMINATE_NAKED,\r\n        sudokuGUI.ID_ELIMINATE_HIDDEN,\r\n        sudokuGUI.ID_ELIMINATE_NAKEDPAIRS,\r\n        sudokuGUI.ID_ELIMINATE_NAKEDTRIPLETS,\r\n        sudokuGUI.ID_ELIMINATE_NAKEDQUADS,\r\n        sudokuGUI.ID_ELIMINATE_HIDDENPAIRS,\r\n        sudokuGUI.ID_ELIMINATE_HIDDENTRIPLETS,\r\n        sudokuGUI.ID_ELIMINATE_HIDDENQUADS\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 1559,
    "text": "panel:Connect(ID_LISTBOX, wx.wxEVT_COMMAND_CHECKLISTBOX_TOGGLED,\r\n        function (event)\r\n            local sel = event:GetSelection()\r\n            local checked = showListBox:IsChecked(sel)\r\n            local id = listBoxValues[sel+1]\r\n            if id == sudokuGUI.ID_ELIMINATE_NAKED then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 2, 4, checked)\r\n            elseif id == sudokuGUI.ID_ELIMINATE_HIDDEN then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 5, 7, checked)\r\n            else\r\n                showListBox:Check(0, sudokuGUI.CheckListBoxIsChecked(showListBox, 2, 4))\r\n                showListBox:Check(1, sudokuGUI.CheckListBoxIsChecked(showListBox, 5, 7))\r\n            end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1560,
    "text": "if id == sudokuGUI.ID_ELIMINATE_NAKED then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 2, 4, checked)\r\n            elseif id == sudokuGUI.ID_ELIMINATE_HIDDEN then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 5, 7, checked)\r\n            else\r\n                showListBox:Check(0, sudokuGUI.CheckListBoxIsChecked(showListBox, 2, 4))\r\n                showListBox:Check(1, sudokuGUI.CheckListBoxIsChecked(showListBox, 5, 7))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1561,
    "text": "function sudokuGUI.PreferencesDialogPageSolve.Apply()\r\n        for n = 1, showListBox:GetCount() do\r\n            sudokuGUI.CheckMenuItem(listBoxValues[n], showListBox:IsChecked(n-1))\r\n        end\r\n        sudokuGUI.UpdateTable()\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1562,
    "text": "function sudokuGUI.PreferencesDialogPageSolve.Destroy()\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 1563,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1564,
    "text": "function sudokuGUI.PreferencesDialogPageSolve.Apply()\r\n        for n = 1, showListBox:GetCount() do\r\n            sudokuGUI.CheckMenuItem(listBoxValues[n], showListBox:IsChecked(n-1))\r\n        end\r\n        sudokuGUI.UpdateTable()\r\n    end",
    "type": "function"
  }, {
    "id": 1565,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1566,
    "text": "function sudokuGUI.PreferencesDialogPageSolve.Destroy()\r\n    end",
    "type": "function"
  }, {
    "id": 1567,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1568,
    "text": "function sudokuGUI.PreferencesDialog()\r\n    local dialog = wx.wxDialog(sudokuGUI.frame, wx.wxID_ANY,\r\n                               \"wxLuaSudoku - Preferences\",\r\n                               wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                               wx.wxDEFAULT_DIALOG_STYLE+wx.wxRESIZE_BORDER)\r\n\r\n    local panel = wx.wxPanel(dialog, wx.wxID_ANY)\r\n    local notebook = wx.wxNotebook(panel, wx.wxID_ANY)\r\n\r\n    local notebookPages = {}\r\n\r\n    local page1 = sudokuGUI.PreferencesDialogPageUI.Create(notebook)\r\n    notebook:AddPage(page1, \"Fonts and Colors\", true)\r\n    table.insert(notebookPages, sudokuGUI.PreferencesDialogPageUI)\r\n\r\n    local page2 = sudokuGUI.PreferencesDialogPageShow.Create(notebook)\r\n    notebook:AddPage(page2, \"Mark groups\", false)\r\n    table.insert(notebookPages, sudokuGUI.PreferencesDialogPageShow)\r\n\r\n    local page3 = sudokuGUI.PreferencesDialogPageSolve.Create(notebook)\r\n    notebook:AddPage(page3, \"Eliminate groups\", false)\r\n    table.insert(notebookPages, sudokuGUI.PreferencesDialogPageSolve)\r\n\r\n    local mainSizer = wx.wxBoxSizer( wx.wxVERTICAL )\r\n\r\n    local buttonSizer = wx.wxBoxSizer( wx.wxHORIZONTAL )\r\n    local okButton = wx.wxButton( panel, wx.wxID_OK, \"&OK\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )\r\n    buttonSizer:Add( okButton, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )\r\n    local cancelButton = wx.wxButton( panel, wx.wxID_CANCEL, \"&Cancel\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )\r\n    buttonSizer:Add( cancelButton, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )\r\n    local applyButton = wx.wxButton( panel, wx.wxID_APPLY, \"&Apply\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )\r\n    buttonSizer:Add( applyButton, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )\r\n\r\n    mainSizer:Add( notebook, 1, wx.wxGROW+wx.wxALIGN_CENTER, 0 )\r\n    mainSizer:Add( buttonSizer, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )\r\n    panel:SetSizer( mainSizer )\r\n    mainSizer:SetSizeHints( dialog )\r\n\r\n    dialog:Connect(wx.wxID_APPLY, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            --local sel = notebook:GetSelection()\r\n            --if sel >= 0 then notebookPages[sel+1].Apply() end\r\n            for n = 1, #notebookPages do\r\n                notebookPages[n].Apply()\r\n            end\r\n\r\n        end)\r\n    dialog:Connect(wx.wxID_OK, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            for n = 1, #notebookPages do\r\n                notebookPages[n].Apply()\r\n                notebookPages[n].Destroy()\r\n            end\r\n\r\n            event:Skip() -- wxDialog will cancel automatically\r\n        end)\r\n    dialog:Connect(wx.wxID_CANCEL, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            for n = 1, #notebookPages do\r\n                notebookPages[n].Destroy()\r\n            end\r\n\r\n            event:Skip() -- wxDialog will cancel automatically\r\n        end)\r\n\r\n    dialog:ShowModal()\r\nend",
    "type": "function"
  }, {
    "id": 1569,
    "text": "local dialog = wx.wxDialog(sudokuGUI.frame, wx.wxID_ANY,\r\n                               \"wxLuaSudoku - Preferences\",\r\n                               wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                               wx.wxDEFAULT_DIALOG_STYLE+wx.wxRESIZE_BORDER)",
    "type": "statement:localassign"
  }, {
    "id": 1570,
    "text": "local panel = wx.wxPanel(dialog, wx.wxID_ANY)",
    "type": "statement:localassign"
  }, {
    "id": 1571,
    "text": "local notebook = wx.wxNotebook(panel, wx.wxID_ANY)",
    "type": "statement:localassign"
  }, {
    "id": 1572,
    "text": "local notebookPages = {}",
    "type": "statement:localassign"
  }, {
    "id": 1573,
    "text": "local page1 = sudokuGUI.PreferencesDialogPageUI.Create(notebook)",
    "type": "statement:localassign"
  }, {
    "id": 1574,
    "text": "notebook:AddPage(page1, \"Fonts and Colors\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 1575,
    "text": "table.insert(notebookPages, sudokuGUI.PreferencesDialogPageUI)",
    "type": "statement:functioncall"
  }, {
    "id": 1576,
    "text": "local page2 = sudokuGUI.PreferencesDialogPageShow.Create(notebook)",
    "type": "statement:localassign"
  }, {
    "id": 1577,
    "text": "notebook:AddPage(page2, \"Mark groups\", false)",
    "type": "statement:functioncall"
  }, {
    "id": 1578,
    "text": "table.insert(notebookPages, sudokuGUI.PreferencesDialogPageShow)",
    "type": "statement:functioncall"
  }, {
    "id": 1579,
    "text": "local page3 = sudokuGUI.PreferencesDialogPageSolve.Create(notebook)",
    "type": "statement:localassign"
  }, {
    "id": 1580,
    "text": "notebook:AddPage(page3, \"Eliminate groups\", false)",
    "type": "statement:functioncall"
  }, {
    "id": 1581,
    "text": "table.insert(notebookPages, sudokuGUI.PreferencesDialogPageSolve)",
    "type": "statement:functioncall"
  }, {
    "id": 1582,
    "text": "local buttonSizer = wx.wxBoxSizer( wx.wxHORIZONTAL )",
    "type": "statement:localassign"
  }, {
    "id": 1583,
    "text": "local okButton = wx.wxButton( panel, wx.wxID_OK, \"&OK\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )",
    "type": "statement:localassign"
  }, {
    "id": 1584,
    "text": "buttonSizer:Add( okButton, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1585,
    "text": "local cancelButton = wx.wxButton( panel, wx.wxID_CANCEL, \"&Cancel\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )",
    "type": "statement:localassign"
  }, {
    "id": 1586,
    "text": "buttonSizer:Add( cancelButton, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1587,
    "text": "local applyButton = wx.wxButton( panel, wx.wxID_APPLY, \"&Apply\", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )",
    "type": "statement:localassign"
  }, {
    "id": 1588,
    "text": "buttonSizer:Add( applyButton, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1589,
    "text": "mainSizer:Add( notebook, 1, wx.wxGROW+wx.wxALIGN_CENTER, 0 )",
    "type": "statement:functioncall"
  }, {
    "id": 1590,
    "text": "mainSizer:Add( buttonSizer, 0, wx.wxALIGN_CENTER+wx.wxALL, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 1591,
    "text": "mainSizer:SetSizeHints( dialog )",
    "type": "statement:functioncall"
  }, {
    "id": 1592,
    "text": "dialog:Connect(wx.wxID_APPLY, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            --local sel = notebook:GetSelection()\r\n            --if sel >= 0 then notebookPages[sel+1].Apply() end\r\n            for n = 1, #notebookPages do\r\n                notebookPages[n].Apply()\r\n            end\r\n\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1593,
    "text": "for n = 1, #notebookPages do\r\n                notebookPages[n].Apply()\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 1594,
    "text": "notebookPages[n].Apply()",
    "type": "statement:functioncall"
  }, {
    "id": 1595,
    "text": "dialog:Connect(wx.wxID_OK, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            for n = 1, #notebookPages do\r\n                notebookPages[n].Apply()\r\n                notebookPages[n].Destroy()\r\n            end\r\n\r\n            event:Skip() -- wxDialog will cancel automatically\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1596,
    "text": "for n = 1, #notebookPages do\r\n                notebookPages[n].Apply()\r\n                notebookPages[n].Destroy()\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 1597,
    "text": "notebookPages[n].Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 1598,
    "text": "dialog:Connect(wx.wxID_CANCEL, wx.wxEVT_COMMAND_BUTTON_CLICKED,\r\n        function (event)\r\n            for n = 1, #notebookPages do\r\n                notebookPages[n].Destroy()\r\n            end\r\n\r\n            event:Skip() -- wxDialog will cancel automatically\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 1599,
    "text": "for n = 1, #notebookPages do\r\n                notebookPages[n].Destroy()\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 1600,
    "text": "dialog:ShowModal()",
    "type": "statement:functioncall"
  }, {
    "id": 1601,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1602,
    "text": "function sudokuGUI.ConfigSave(save_prefs)\r\n    if not sudokuGUI.config then\r\n        sudokuGUI.config = wx.wxFileConfig(\"wxLuaSudoku\", \"wxLua\")\r\n    end\r\n\r\n    if not sudokuGUI.config then return end\r\n\r\n    -- write the frame position so we can restore it\r\n    local x, y = sudokuGUI.frame:GetPositionXY()\r\n    local w, h = sudokuGUI.frame:GetClientSizeWH()\r\n    local max  = booltoint(sudokuGUI.frame:IsMaximized())\r\n    sudokuGUI.config:Write(\"wxLuaSudoku/Frame\", string.format(\"x:%d y:%d w:%d h:%d maximized:%d\", x, y, w, h, max))\r\n\r\n    if not save_prefs then return end\r\n\r\n    if sudokuGUI.query_save_prefs then\r\n        local ret = wx.wxMessageBox(\r\n            \"Preferences are stored in an ini file which you may delete:\\n\"..\r\n            \"MSW : Documents and Settings\\\\user\\\\wxLuaSudoku.ini\\n\"..\r\n            \"Unix : /home/user/.wxLuaSudoku\",\r\n            \"wxLuaSudoku - Save preferences?\",\r\n            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n            sudokuGUI.frame )\r\n\r\n        if ret == wx.wxCANCEL then\r\n            return\r\n        end\r\n\r\n        sudokuGUI.query_save_prefs = false\r\n    end\r\n\r\n    if sudokuGUI.config then\r\n        sudokuGUI.ConfigReadWrite(false, sudokuGUI.config)\r\n        sudokuGUI.config:Flush(true)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1603,
    "text": "if not sudokuGUI.config then\r\n        sudokuGUI.config = wx.wxFileConfig(\"wxLuaSudoku\", \"wxLua\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1604,
    "text": "sudokuGUI.config = wx.wxFileConfig(\"wxLuaSudoku\", \"wxLua\")",
    "type": "statement:assign"
  }, {
    "id": 1605,
    "text": "if not sudokuGUI.config then return end",
    "type": "statement:if"
  }, {
    "id": 1606,
    "text": "local x, y = sudokuGUI.frame:GetPositionXY()",
    "type": "statement:localassign"
  }, {
    "id": 1607,
    "text": "local w, h = sudokuGUI.frame:GetClientSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 1608,
    "text": "local max  = booltoint(sudokuGUI.frame:IsMaximized())",
    "type": "statement:localassign"
  }, {
    "id": 1609,
    "text": "sudokuGUI.config:Write(\"wxLuaSudoku/Frame\", string.format(\"x:%d y:%d w:%d h:%d maximized:%d\", x, y, w, h, max))",
    "type": "statement:functioncall"
  }, {
    "id": 1610,
    "text": "if not save_prefs then return end",
    "type": "statement:if"
  }, {
    "id": 1611,
    "text": "if sudokuGUI.query_save_prefs then\r\n        local ret = wx.wxMessageBox(\r\n            \"Preferences are stored in an ini file which you may delete:\\n\"..\r\n            \"MSW : Documents and Settings\\\\user\\\\wxLuaSudoku.ini\\n\"..\r\n            \"Unix : /home/user/.wxLuaSudoku\",\r\n            \"wxLuaSudoku - Save preferences?\",\r\n            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n            sudokuGUI.frame )\r\n\r\n        if ret == wx.wxCANCEL then\r\n            return\r\n        end\r\n\r\n        sudokuGUI.query_save_prefs = false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1612,
    "text": "local ret = wx.wxMessageBox(\r\n            \"Preferences are stored in an ini file which you may delete:\\n\"..\r\n            \"MSW : Documents and Settings\\\\user\\\\wxLuaSudoku.ini\\n\"..\r\n            \"Unix : /home/user/.wxLuaSudoku\",\r\n            \"wxLuaSudoku - Save preferences?\",\r\n            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n            sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1613,
    "text": "if ret == wx.wxCANCEL then\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1614,
    "text": "sudokuGUI.query_save_prefs = false",
    "type": "statement:assign"
  }, {
    "id": 1615,
    "text": "if sudokuGUI.config then\r\n        sudokuGUI.ConfigReadWrite(false, sudokuGUI.config)\r\n        sudokuGUI.config:Flush(true)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1616,
    "text": "sudokuGUI.ConfigReadWrite(false, sudokuGUI.config)",
    "type": "statement:functioncall"
  }, {
    "id": 1617,
    "text": "sudokuGUI.config:Flush(true)",
    "type": "statement:functioncall"
  }, {
    "id": 1618,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1619,
    "text": "function sudokuGUI.ConfigLoad()\r\n    if not sudokuGUI.config then\r\n        sudokuGUI.config = wx.wxFileConfig(\"wxLuaSudoku\", \"wxLua\")\r\n    end\r\n\r\n    if sudokuGUI.config then\r\n        local dispX, dispY, dispW, dispH = wx.wxClientDisplayRect()\r\n        local _, str = sudokuGUI.config:Read(\"wxLuaSudoku/Frame\")\r\n        local x, y, w, h, max = string.match(str, \"x:(%d+) y:(%d+) w:(%d+) h:(%d+) maximized:(%d+)\")\r\n        if (x ~= nil) and (y ~= nil) and (w ~= nil) and (h ~= nil) and (max ~= nil) then\r\n            x = tonumber(x); y = tonumber(y); w = tonumber(w); h = tonumber(h)\r\n            max = inttobool(tonumber(max))\r\n            if max then\r\n                sudokuGUI.frame:Maximize(true)\r\n            else\r\n                if x < dispX - 5 then x = 0 end\r\n                if y < dispY - 5 then y = 0 end\r\n                if w > dispW then w = dispW end\r\n                if h > dispH then h = dispH end\r\n\r\n                sudokuGUI.frame:Move(x, y)\r\n                sudokuGUI.frame:SetClientSize(w, h)\r\n            end\r\n        end\r\n\r\n        sudokuGUI.ConfigReadWrite(true, sudokuGUI.config)\r\n    end\r\n\r\n    for winID = 1, 81 do\r\n        if sudokuGUI.IsOddBlockCell(winID) then\r\n            sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n        else\r\n            sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n        end\r\n    end\r\n\r\n    local show_toolbar = sudokuGUI.frame:GetMenuBar():IsChecked(sudokuGUI.ID_SHOW_TOOLBAR)\r\n    if sudokuGUI.frame:GetToolBar():IsShown() ~= show_toolbar then\r\n        -- generate fake event to simplify processing\r\n        local evt = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, sudokuGUI.ID_SHOW_TOOLBAR)\r\n        evt:SetInt(booltoint(show_toolbar))\r\n        sudokuGUI.OnMenuEvent(evt)\r\n    end\r\n\r\n    local show_toolbar_labels = sudokuGUI.frame:GetMenuBar():IsChecked(sudokuGUI.ID_SHOW_TOOLBAR_LABELS)\r\n    if (bit.band(sudokuGUI.frame:GetToolBar():GetWindowStyleFlag(), wx.wxTB_TEXT) ~= 0) ~= show_toolbar_labels then\r\n        -- generate fake event to simplify processing\r\n        local evt = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, sudokuGUI.ID_SHOW_TOOLBAR_LABELS)\r\n        evt:SetInt(booltoint(show_toolbar_labels))\r\n        sudokuGUI.OnMenuEvent(evt)\r\n    end\r\n\r\n    local show_statusbar = sudokuGUI.frame:GetMenuBar():IsChecked(sudokuGUI.ID_SHOW_STATUSBAR)\r\n    if sudokuGUI.frame:GetStatusBar():IsShown() ~= show_statusbar then\r\n        -- generate fake event to simplify processing\r\n        local evt = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, sudokuGUI.ID_SHOW_STATUSBAR)\r\n        evt:SetInt(booltoint(show_statusbar))\r\n        sudokuGUI.OnMenuEvent(evt)\r\n    end\r\n\r\n    sudokuGUI.valueFont_cache    = {} -- clear cache in case the font has changed\r\n    sudokuGUI.possibleFont_cache = {}\r\n\r\n    -- update font size\r\n    local width, height = sudokuGUI.cellWindows[1]:GetClientSizeWH()\r\n    sudokuGUI.GetCellBestSize(width, height)\r\n    -- update for preferences\r\n    sudokuGUI.UpdateTable()\r\n    sudokuGUI.Refresh()\r\nend",
    "type": "function"
  }, {
    "id": 1620,
    "text": "if sudokuGUI.config then\r\n        local dispX, dispY, dispW, dispH = wx.wxClientDisplayRect()\r\n        local _, str = sudokuGUI.config:Read(\"wxLuaSudoku/Frame\")\r\n        local x, y, w, h, max = string.match(str, \"x:(%d+) y:(%d+) w:(%d+) h:(%d+) maximized:(%d+)\")\r\n        if (x ~= nil) and (y ~= nil) and (w ~= nil) and (h ~= nil) and (max ~= nil) then\r\n            x = tonumber(x); y = tonumber(y); w = tonumber(w); h = tonumber(h)\r\n            max = inttobool(tonumber(max))\r\n            if max then\r\n                sudokuGUI.frame:Maximize(true)\r\n            else\r\n                if x < dispX - 5 then x = 0 end\r\n                if y < dispY - 5 then y = 0 end\r\n                if w > dispW then w = dispW end\r\n                if h > dispH then h = dispH end\r\n\r\n                sudokuGUI.frame:Move(x, y)\r\n                sudokuGUI.frame:SetClientSize(w, h)\r\n            end\r\n        end\r\n\r\n        sudokuGUI.ConfigReadWrite(true, sudokuGUI.config)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1621,
    "text": "local dispX, dispY, dispW, dispH = wx.wxClientDisplayRect()",
    "type": "statement:localassign"
  }, {
    "id": 1622,
    "text": "local _, str = sudokuGUI.config:Read(\"wxLuaSudoku/Frame\")",
    "type": "statement:localassign"
  }, {
    "id": 1623,
    "text": "local x, y, w, h, max = string.match(str, \"x:(%d+) y:(%d+) w:(%d+) h:(%d+) maximized:(%d+)\")",
    "type": "statement:localassign"
  }, {
    "id": 1624,
    "text": "if (x ~= nil) and (y ~= nil) and (w ~= nil) and (h ~= nil) and (max ~= nil) then\r\n            x = tonumber(x); y = tonumber(y); w = tonumber(w); h = tonumber(h)\r\n            max = inttobool(tonumber(max))\r\n            if max then\r\n                sudokuGUI.frame:Maximize(true)\r\n            else\r\n                if x < dispX - 5 then x = 0 end\r\n                if y < dispY - 5 then y = 0 end\r\n                if w > dispW then w = dispW end\r\n                if h > dispH then h = dispH end\r\n\r\n                sudokuGUI.frame:Move(x, y)\r\n                sudokuGUI.frame:SetClientSize(w, h)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1625,
    "text": "x = tonumber(x)",
    "type": "statement:assign"
  }, {
    "id": 1626,
    "text": "y = tonumber(y)",
    "type": "statement:assign"
  }, {
    "id": 1627,
    "text": "w = tonumber(w)",
    "type": "statement:assign"
  }, {
    "id": 1628,
    "text": "h = tonumber(h)",
    "type": "statement:assign"
  }, {
    "id": 1629,
    "text": "max = inttobool(tonumber(max))",
    "type": "statement:assign"
  }, {
    "id": 1630,
    "text": "if max then\r\n                sudokuGUI.frame:Maximize(true)\r\n            else\r\n                if x < dispX - 5 then x = 0 end\r\n                if y < dispY - 5 then y = 0 end\r\n                if w > dispW then w = dispW end\r\n                if h > dispH then h = dispH end\r\n\r\n                sudokuGUI.frame:Move(x, y)\r\n                sudokuGUI.frame:SetClientSize(w, h)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1631,
    "text": "sudokuGUI.frame:Maximize(true)",
    "type": "statement:functioncall"
  }, {
    "id": 1632,
    "text": "if x < dispX - 5 then x = 0 end",
    "type": "statement:if"
  }, {
    "id": 1633,
    "text": "x = 0",
    "type": "statement:assign"
  }, {
    "id": 1634,
    "text": "if y < dispY - 5 then y = 0 end",
    "type": "statement:if"
  }, {
    "id": 1635,
    "text": "y = 0",
    "type": "statement:assign"
  }, {
    "id": 1636,
    "text": "if w > dispW then w = dispW end",
    "type": "statement:if"
  }, {
    "id": 1637,
    "text": "w = dispW",
    "type": "statement:assign"
  }, {
    "id": 1638,
    "text": "if h > dispH then h = dispH end",
    "type": "statement:if"
  }, {
    "id": 1639,
    "text": "h = dispH",
    "type": "statement:assign"
  }, {
    "id": 1640,
    "text": "sudokuGUI.frame:Move(x, y)",
    "type": "statement:functioncall"
  }, {
    "id": 1641,
    "text": "sudokuGUI.frame:SetClientSize(w, h)",
    "type": "statement:functioncall"
  }, {
    "id": 1642,
    "text": "sudokuGUI.ConfigReadWrite(true, sudokuGUI.config)",
    "type": "statement:functioncall"
  }, {
    "id": 1643,
    "text": "for winID = 1, 81 do\r\n        if sudokuGUI.IsOddBlockCell(winID) then\r\n            sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n        else\r\n            sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1644,
    "text": "if sudokuGUI.IsOddBlockCell(winID) then\r\n            sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n        else\r\n            sudokuGUI.cellWindows[winID]:SetBackgroundColour(sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1645,
    "text": "local show_toolbar = sudokuGUI.frame:GetMenuBar():IsChecked(sudokuGUI.ID_SHOW_TOOLBAR)",
    "type": "statement:localassign"
  }, {
    "id": 1646,
    "text": "if sudokuGUI.frame:GetToolBar():IsShown() ~= show_toolbar then\r\n        -- generate fake event to simplify processing\r\n        local evt = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, sudokuGUI.ID_SHOW_TOOLBAR)\r\n        evt:SetInt(booltoint(show_toolbar))\r\n        sudokuGUI.OnMenuEvent(evt)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1647,
    "text": "local evt = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, sudokuGUI.ID_SHOW_TOOLBAR)",
    "type": "statement:localassign"
  }, {
    "id": 1648,
    "text": "evt:SetInt(booltoint(show_toolbar))",
    "type": "statement:functioncall"
  }, {
    "id": 1649,
    "text": "sudokuGUI.OnMenuEvent(evt)",
    "type": "statement:functioncall"
  }, {
    "id": 1650,
    "text": "local show_toolbar_labels = sudokuGUI.frame:GetMenuBar():IsChecked(sudokuGUI.ID_SHOW_TOOLBAR_LABELS)",
    "type": "statement:localassign"
  }, {
    "id": 1651,
    "text": "if (bit.band(sudokuGUI.frame:GetToolBar():GetWindowStyleFlag(), wx.wxTB_TEXT) ~= 0) ~= show_toolbar_labels then\r\n        -- generate fake event to simplify processing\r\n        local evt = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, sudokuGUI.ID_SHOW_TOOLBAR_LABELS)\r\n        evt:SetInt(booltoint(show_toolbar_labels))\r\n        sudokuGUI.OnMenuEvent(evt)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1652,
    "text": "local evt = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, sudokuGUI.ID_SHOW_TOOLBAR_LABELS)",
    "type": "statement:localassign"
  }, {
    "id": 1653,
    "text": "evt:SetInt(booltoint(show_toolbar_labels))",
    "type": "statement:functioncall"
  }, {
    "id": 1654,
    "text": "local show_statusbar = sudokuGUI.frame:GetMenuBar():IsChecked(sudokuGUI.ID_SHOW_STATUSBAR)",
    "type": "statement:localassign"
  }, {
    "id": 1655,
    "text": "if sudokuGUI.frame:GetStatusBar():IsShown() ~= show_statusbar then\r\n        -- generate fake event to simplify processing\r\n        local evt = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, sudokuGUI.ID_SHOW_STATUSBAR)\r\n        evt:SetInt(booltoint(show_statusbar))\r\n        sudokuGUI.OnMenuEvent(evt)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1656,
    "text": "local evt = wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, sudokuGUI.ID_SHOW_STATUSBAR)",
    "type": "statement:localassign"
  }, {
    "id": 1657,
    "text": "evt:SetInt(booltoint(show_statusbar))",
    "type": "statement:functioncall"
  }, {
    "id": 1658,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1659,
    "text": "function sudokuGUI.ConfigReadWrite(read, config)\r\n    local path = \"wxLuaSudoku\"\r\n\r\n    local function ReadWriteColour(key, c)\r\n        if read then\r\n            if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local r, g, b = string.match(str, \"r:(%d+) g:(%d+) b:(%d+)\")\r\n                if (r == nil) or (g == nil) or (b == nil) then return end\r\n                r = tonumber(r); g = tonumber(g); b = tonumber(b)\r\n                if (r < 0) or (r > 255) then return end -- sanity check\r\n                if (g < 0) or (g > 255) then return end\r\n                if (b < 0) or (b > 255) then return end\r\n                c:Set(r, g, b)\r\n            end\r\n        else\r\n            config:Write(key, string.format(\"r:%d g:%d b:%d\", c:Red(), c:Green(), c:Blue()))\r\n        end\r\n    end\r\n\r\n    local function ReadWriteFont(key, f)\r\n        if read then\r\n            if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local face, family, style, underlined, weight = string.match(str, \"face:(\\\"[%w ]+\\\") family:(%d+) style:(%d+) underlined:(%d+) weight:(%d+)\")\r\n                if (face == nil) or (family == nil) or (style == nil) or (underlined == nil) or (weight == nil) then return end\r\n                family = tonumber(family); style = tonumber(style);\r\n                underlined = inttobool(tonumber(underlined)); weight = tonumber(weight)\r\n                -- remove quotes\r\n                if string.len(face) > 2 then face = string.sub(face, 2, -2) end\r\n\r\n                -- test so see if the values are any good\r\n                local ff = wx.wxFont(12, family, style, weight, underlined, face)\r\n                if not ff:Ok() then return end\r\n\r\n                local tempF = wx.wxFont(f)\r\n                f:SetFaceName(face)\r\n                f:SetFamily(family)\r\n                f:SetStyle(style)\r\n                f:SetUnderlined(underlined)\r\n                f:SetWeight(weight)\r\n\r\n                -- shouldn't happen but we always want a usable font\r\n                if not f:Ok() then\r\n                    f:SetFaceName(tempF:GetFaceName())\r\n                    f:SetFamily(tempF:GetFamily())\r\n                    f:SetStyle(tempF:GetStyle())\r\n                    f:SetUnderlined(tempF:GetUnderlined())\r\n                    f:SetWeight(tempF:GetWeight())\r\n                end\r\n            end\r\n        else\r\n            config:Write(key, string.format(\"face:\\\"%s\\\" family:%d style:%d underlined:%d weight:%d\",\r\n                f:GetFaceName(), f:GetFamily(), f:GetStyle(), booltoint(f:GetUnderlined()), f:GetWeight()))\r\n        end\r\n    end\r\n\r\n    if read then\r\n        local _\r\n        if config:HasEntry(path..\"/LastOpenedFilepath\") then\r\n            _, sudokuGUI.filePath   = config:Read(path..\"/LastOpenedFilepath\", \"\")\r\n        end\r\n        if config:HasEntry(path..\"/LastOpenedFilename\") then\r\n            _, sudokuGUI.fileName   = config:Read(path..\"/LastOpenedFilename\", \"\")\r\n        end\r\n        if config:HasEntry(path..\"/GenerateDifficulty\") then\r\n            _, sudokuGUI.difficulty = config:Read(path..\"/GenerateDifficulty\", 0)\r\n        end\r\n    else\r\n        config:Write(path..\"/LastOpenedFilepath\", sudokuGUI.filePath)\r\n        config:Write(path..\"/LastOpenedFilename\", sudokuGUI.fileName)\r\n        config:Write(path..\"/GenerateDifficulty\", sudokuGUI.difficulty)\r\n    end\r\n\r\n    ReadWriteColour(path..\"/Colours/Value\",             sudokuGUI.Colours[sudokuGUI.VALUE_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/ValueInit\",         sudokuGUI.Colours[sudokuGUI.INIT_VALUE_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/ValuePossible\",     sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/ValueInvalid\",      sudokuGUI.Colours[sudokuGUI.INVALID_VALUE_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/CellBackground\",    sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/CellOddBackground\", sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/CellFocus\",         sudokuGUI.Colours[sudokuGUI.FOCUS_CELL_COLOUR])\r\n\r\n    ReadWriteColour(path..\"/Colours/NakedPairs\",     sudokuGUI.Colours[sudokuGUI.NAKED_PAIRS_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/NakedTriplets\",  sudokuGUI.Colours[sudokuGUI.NAKED_TRIPLETS_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/NakedQuads\",     sudokuGUI.Colours[sudokuGUI.NAKED_QUADS_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/HiddenPairs\",    sudokuGUI.Colours[sudokuGUI.HIDDEN_PAIRS_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/HiddenTriplets\", sudokuGUI.Colours[sudokuGUI.HIDDEN_TRIPLETS_COLOUR])\r\n    ReadWriteColour(path..\"/Colours/HiddenQuads\",    sudokuGUI.Colours[sudokuGUI.HIDDEN_QUADS_COLOUR])\r\n\r\n    ReadWriteFont(path..\"/Fonts/Value\",         sudokuGUI.valueFont.wxfont)\r\n    ReadWriteFont(path..\"/Fonts/ValuePossible\", sudokuGUI.possibleFont.wxfont)\r\n\r\n    local function ReadWritePref(key, pref)\r\n        if read then\r\n            if config:HasEntry(key) then\r\n                local _, v = config:Read(key, 0)\r\n                sudokuGUI.CheckMenuItem(pref, inttobool(v))\r\n            end\r\n        else\r\n            config:Write(key, booltoint(sudokuGUI.IsCheckedMenuItem(pref)))\r\n        end\r\n    end\r\n\r\n    ReadWritePref(path..\"/Preferences/SHOW_ERRORS\",          sudokuGUI.ID_SHOW_ERRORS)\r\n    ReadWritePref(path..\"/Preferences/SHOW_MISTAKES\",        sudokuGUI.ID_SHOW_MISTAKES)\r\n    ReadWritePref(path..\"/Preferences/SHOW_TOOLBAR\",         sudokuGUI.ID_SHOW_TOOLBAR)\r\n    ReadWritePref(path..\"/Preferences/SHOW_TOOLBAR_LABELS\",  sudokuGUI.ID_SHOW_TOOLBAR_LABELS)\r\n    ReadWritePref(path..\"/Preferences/SHOW_STATUSBAR\",       sudokuGUI.ID_SHOW_STATUSBAR)\r\n\r\n    ReadWritePref(path..\"/Preferences/SHOW_POSSIBLE\",        sudokuGUI.ID_SHOW_POSSIBLE)\r\n    ReadWritePref(path..\"/Preferences/SHOW_USER_POSSIBLE\",   sudokuGUI.ID_SHOW_USER_POSSIBLE)\r\n    ReadWritePref(path..\"/Preferences/SHOW_POSSIBLE_LINE\",   sudokuGUI.ID_SHOW_POSSIBLE_LINE)\r\n\r\n    ReadWritePref(path..\"/Preferences/SHOW_NAKED\",               sudokuGUI.ID_SHOW_NAKED)\r\n    ReadWritePref(path..\"/Preferences/SHOW_HIDDEN\",              sudokuGUI.ID_SHOW_HIDDEN)\r\n    ReadWritePref(path..\"/Preferences/SHOW_NAKEDPAIRS\",          sudokuGUI.ID_SHOW_NAKEDPAIRS)\r\n    ReadWritePref(path..\"/Preferences/SHOW_HIDDENPAIRS\",         sudokuGUI.ID_SHOW_HIDDENPAIRS)\r\n    ReadWritePref(path..\"/Preferences/SHOW_NAKEDTRIPLETS\",       sudokuGUI.ID_SHOW_NAKEDTRIPLETS)\r\n    ReadWritePref(path..\"/Preferences/SHOW_HIDDENTRIPLETS\",      sudokuGUI.ID_SHOW_HIDDENTRIPLETS)\r\n    ReadWritePref(path..\"/Preferences/SHOW_NAKEDQUADS\",          sudokuGUI.ID_SHOW_NAKEDQUADS)\r\n    ReadWritePref(path..\"/Preferences/SHOW_HIDDENQUADS\",         sudokuGUI.ID_SHOW_HIDDENQUADS)\r\n\r\n    ReadWritePref(path..\"/Preferences/ELIMINATE_NAKED\",          sudokuGUI.ID_ELIMINATE_NAKED)\r\n    ReadWritePref(path..\"/Preferences/ELIMINATE_HIDDEN\",         sudokuGUI.ID_ELIMINATE_HIDDEN)\r\n    ReadWritePref(path..\"/Preferences/ELIMINATE_NAKEDPAIRS\",     sudokuGUI.ID_ELIMINATE_NAKEDPAIRS)\r\n    ReadWritePref(path..\"/Preferences/ELIMINATE_HIDDENPAIRS\",    sudokuGUI.ID_ELIMINATE_HIDDENPAIRS)\r\n    ReadWritePref(path..\"/Preferences/ELIMINATE_NAKEDTRIPLETS\",  sudokuGUI.ID_ELIMINATE_NAKEDTRIPLETS)\r\n    ReadWritePref(path..\"/Preferences/ELIMINATE_HIDDENTRIPLETS\", sudokuGUI.ID_ELIMINATE_HIDDENTRIPLETS)\r\n    ReadWritePref(path..\"/Preferences/ELIMINATE_NAKEDQUADS\",     sudokuGUI.ID_ELIMINATE_NAKEDQUADS)\r\n    ReadWritePref(path..\"/Preferences/ELIMINATE_HIDDENQUADS\",    sudokuGUI.ID_ELIMINATE_HIDDENQUADS)\r\nend",
    "type": "function"
  }, {
    "id": 1660,
    "text": "local path = \"wxLuaSudoku\"",
    "type": "statement:localassign"
  }, {
    "id": 1661,
    "text": "local function ReadWriteColour(key, c)\r\n        if read then\r\n            if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local r, g, b = string.match(str, \"r:(%d+) g:(%d+) b:(%d+)\")\r\n                if (r == nil) or (g == nil) or (b == nil) then return end\r\n                r = tonumber(r); g = tonumber(g); b = tonumber(b)\r\n                if (r < 0) or (r > 255) then return end -- sanity check\r\n                if (g < 0) or (g > 255) then return end\r\n                if (b < 0) or (b > 255) then return end\r\n                c:Set(r, g, b)\r\n            end\r\n        else\r\n            config:Write(key, string.format(\"r:%d g:%d b:%d\", c:Red(), c:Green(), c:Blue()))\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 1662,
    "text": "if read then\r\n            if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local r, g, b = string.match(str, \"r:(%d+) g:(%d+) b:(%d+)\")\r\n                if (r == nil) or (g == nil) or (b == nil) then return end\r\n                r = tonumber(r); g = tonumber(g); b = tonumber(b)\r\n                if (r < 0) or (r > 255) then return end -- sanity check\r\n                if (g < 0) or (g > 255) then return end\r\n                if (b < 0) or (b > 255) then return end\r\n                c:Set(r, g, b)\r\n            end\r\n        else\r\n            config:Write(key, string.format(\"r:%d g:%d b:%d\", c:Red(), c:Green(), c:Blue()))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1663,
    "text": "if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local r, g, b = string.match(str, \"r:(%d+) g:(%d+) b:(%d+)\")\r\n                if (r == nil) or (g == nil) or (b == nil) then return end\r\n                r = tonumber(r); g = tonumber(g); b = tonumber(b)\r\n                if (r < 0) or (r > 255) then return end -- sanity check\r\n                if (g < 0) or (g > 255) then return end\r\n                if (b < 0) or (b > 255) then return end\r\n                c:Set(r, g, b)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1664,
    "text": "local _, str = config:Read(key)",
    "type": "statement:localassign"
  }, {
    "id": 1665,
    "text": "local r, g, b = string.match(str, \"r:(%d+) g:(%d+) b:(%d+)\")",
    "type": "statement:localassign"
  }, {
    "id": 1666,
    "text": "if (r == nil) or (g == nil) or (b == nil) then return end",
    "type": "statement:if"
  }, {
    "id": 1667,
    "text": "r = tonumber(r)",
    "type": "statement:assign"
  }, {
    "id": 1668,
    "text": "g = tonumber(g)",
    "type": "statement:assign"
  }, {
    "id": 1669,
    "text": "b = tonumber(b)",
    "type": "statement:assign"
  }, {
    "id": 1670,
    "text": "if (r < 0) or (r > 255) then return end",
    "type": "statement:if"
  }, {
    "id": 1671,
    "text": "if (g < 0) or (g > 255) then return end",
    "type": "statement:if"
  }, {
    "id": 1672,
    "text": "if (b < 0) or (b > 255) then return end",
    "type": "statement:if"
  }, {
    "id": 1673,
    "text": "c:Set(r, g, b)",
    "type": "statement:functioncall"
  }, {
    "id": 1674,
    "text": "config:Write(key, string.format(\"r:%d g:%d b:%d\", c:Red(), c:Green(), c:Blue()))",
    "type": "statement:functioncall"
  }, {
    "id": 1675,
    "text": "local function ReadWriteFont(key, f)\r\n        if read then\r\n            if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local face, family, style, underlined, weight = string.match(str, \"face:(\\\"[%w ]+\\\") family:(%d+) style:(%d+) underlined:(%d+) weight:(%d+)\")\r\n                if (face == nil) or (family == nil) or (style == nil) or (underlined == nil) or (weight == nil) then return end\r\n                family = tonumber(family); style = tonumber(style);\r\n                underlined = inttobool(tonumber(underlined)); weight = tonumber(weight)\r\n                -- remove quotes\r\n                if string.len(face) > 2 then face = string.sub(face, 2, -2) end\r\n\r\n                -- test so see if the values are any good\r\n                local ff = wx.wxFont(12, family, style, weight, underlined, face)\r\n                if not ff:Ok() then return end\r\n\r\n                local tempF = wx.wxFont(f)\r\n                f:SetFaceName(face)\r\n                f:SetFamily(family)\r\n                f:SetStyle(style)\r\n                f:SetUnderlined(underlined)\r\n                f:SetWeight(weight)\r\n\r\n                -- shouldn't happen but we always want a usable font\r\n                if not f:Ok() then\r\n                    f:SetFaceName(tempF:GetFaceName())\r\n                    f:SetFamily(tempF:GetFamily())\r\n                    f:SetStyle(tempF:GetStyle())\r\n                    f:SetUnderlined(tempF:GetUnderlined())\r\n                    f:SetWeight(tempF:GetWeight())\r\n                end\r\n            end\r\n        else\r\n            config:Write(key, string.format(\"face:\\\"%s\\\" family:%d style:%d underlined:%d weight:%d\",\r\n                f:GetFaceName(), f:GetFamily(), f:GetStyle(), booltoint(f:GetUnderlined()), f:GetWeight()))\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 1676,
    "text": "if read then\r\n            if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local face, family, style, underlined, weight = string.match(str, \"face:(\\\"[%w ]+\\\") family:(%d+) style:(%d+) underlined:(%d+) weight:(%d+)\")\r\n                if (face == nil) or (family == nil) or (style == nil) or (underlined == nil) or (weight == nil) then return end\r\n                family = tonumber(family); style = tonumber(style);\r\n                underlined = inttobool(tonumber(underlined)); weight = tonumber(weight)\r\n                -- remove quotes\r\n                if string.len(face) > 2 then face = string.sub(face, 2, -2) end\r\n\r\n                -- test so see if the values are any good\r\n                local ff = wx.wxFont(12, family, style, weight, underlined, face)\r\n                if not ff:Ok() then return end\r\n\r\n                local tempF = wx.wxFont(f)\r\n                f:SetFaceName(face)\r\n                f:SetFamily(family)\r\n                f:SetStyle(style)\r\n                f:SetUnderlined(underlined)\r\n                f:SetWeight(weight)\r\n\r\n                -- shouldn't happen but we always want a usable font\r\n                if not f:Ok() then\r\n                    f:SetFaceName(tempF:GetFaceName())\r\n                    f:SetFamily(tempF:GetFamily())\r\n                    f:SetStyle(tempF:GetStyle())\r\n                    f:SetUnderlined(tempF:GetUnderlined())\r\n                    f:SetWeight(tempF:GetWeight())\r\n                end\r\n            end\r\n        else\r\n            config:Write(key, string.format(\"face:\\\"%s\\\" family:%d style:%d underlined:%d weight:%d\",\r\n                f:GetFaceName(), f:GetFamily(), f:GetStyle(), booltoint(f:GetUnderlined()), f:GetWeight()))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1677,
    "text": "if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local face, family, style, underlined, weight = string.match(str, \"face:(\\\"[%w ]+\\\") family:(%d+) style:(%d+) underlined:(%d+) weight:(%d+)\")\r\n                if (face == nil) or (family == nil) or (style == nil) or (underlined == nil) or (weight == nil) then return end\r\n                family = tonumber(family); style = tonumber(style);\r\n                underlined = inttobool(tonumber(underlined)); weight = tonumber(weight)\r\n                -- remove quotes\r\n                if string.len(face) > 2 then face = string.sub(face, 2, -2) end\r\n\r\n                -- test so see if the values are any good\r\n                local ff = wx.wxFont(12, family, style, weight, underlined, face)\r\n                if not ff:Ok() then return end\r\n\r\n                local tempF = wx.wxFont(f)\r\n                f:SetFaceName(face)\r\n                f:SetFamily(family)\r\n                f:SetStyle(style)\r\n                f:SetUnderlined(underlined)\r\n                f:SetWeight(weight)\r\n\r\n                -- shouldn't happen but we always want a usable font\r\n                if not f:Ok() then\r\n                    f:SetFaceName(tempF:GetFaceName())\r\n                    f:SetFamily(tempF:GetFamily())\r\n                    f:SetStyle(tempF:GetStyle())\r\n                    f:SetUnderlined(tempF:GetUnderlined())\r\n                    f:SetWeight(tempF:GetWeight())\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1678,
    "text": "local face, family, style, underlined, weight = string.match(str, \"face:(\\\"[%w ]+\\\") family:(%d+) style:(%d+) underlined:(%d+) weight:(%d+)\")",
    "type": "statement:localassign"
  }, {
    "id": 1679,
    "text": "if (face == nil) or (family == nil) or (style == nil) or (underlined == nil) or (weight == nil) then return end",
    "type": "statement:if"
  }, {
    "id": 1680,
    "text": "family = tonumber(family)",
    "type": "statement:assign"
  }, {
    "id": 1681,
    "text": "style = tonumber(style)",
    "type": "statement:assign"
  }, {
    "id": 1682,
    "text": "underlined = inttobool(tonumber(underlined))",
    "type": "statement:assign"
  }, {
    "id": 1683,
    "text": "weight = tonumber(weight)",
    "type": "statement:assign"
  }, {
    "id": 1684,
    "text": "if string.len(face) > 2 then face = string.sub(face, 2, -2) end",
    "type": "statement:if"
  }, {
    "id": 1685,
    "text": "face = string.sub(face, 2, -2)",
    "type": "statement:assign"
  }, {
    "id": 1686,
    "text": "local ff = wx.wxFont(12, family, style, weight, underlined, face)",
    "type": "statement:localassign"
  }, {
    "id": 1687,
    "text": "if not ff:Ok() then return end",
    "type": "statement:if"
  }, {
    "id": 1688,
    "text": "local tempF = wx.wxFont(f)",
    "type": "statement:localassign"
  }, {
    "id": 1689,
    "text": "f:SetFaceName(face)",
    "type": "statement:functioncall"
  }, {
    "id": 1690,
    "text": "f:SetFamily(family)",
    "type": "statement:functioncall"
  }, {
    "id": 1691,
    "text": "f:SetStyle(style)",
    "type": "statement:functioncall"
  }, {
    "id": 1692,
    "text": "f:SetUnderlined(underlined)",
    "type": "statement:functioncall"
  }, {
    "id": 1693,
    "text": "f:SetWeight(weight)",
    "type": "statement:functioncall"
  }, {
    "id": 1694,
    "text": "if not f:Ok() then\r\n                    f:SetFaceName(tempF:GetFaceName())\r\n                    f:SetFamily(tempF:GetFamily())\r\n                    f:SetStyle(tempF:GetStyle())\r\n                    f:SetUnderlined(tempF:GetUnderlined())\r\n                    f:SetWeight(tempF:GetWeight())\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1695,
    "text": "f:SetFaceName(tempF:GetFaceName())",
    "type": "statement:functioncall"
  }, {
    "id": 1696,
    "text": "f:SetFamily(tempF:GetFamily())",
    "type": "statement:functioncall"
  }, {
    "id": 1697,
    "text": "f:SetStyle(tempF:GetStyle())",
    "type": "statement:functioncall"
  }, {
    "id": 1698,
    "text": "f:SetUnderlined(tempF:GetUnderlined())",
    "type": "statement:functioncall"
  }, {
    "id": 1699,
    "text": "f:SetWeight(tempF:GetWeight())",
    "type": "statement:functioncall"
  }, {
    "id": 1700,
    "text": "config:Write(key, string.format(\"face:\\\"%s\\\" family:%d style:%d underlined:%d weight:%d\",\r\n                f:GetFaceName(), f:GetFamily(), f:GetStyle(), booltoint(f:GetUnderlined()), f:GetWeight()))",
    "type": "statement:functioncall"
  }, {
    "id": 1701,
    "text": "if read then\r\n        local _\r\n        if config:HasEntry(path..\"/LastOpenedFilepath\") then\r\n            _, sudokuGUI.filePath   = config:Read(path..\"/LastOpenedFilepath\", \"\")\r\n        end\r\n        if config:HasEntry(path..\"/LastOpenedFilename\") then\r\n            _, sudokuGUI.fileName   = config:Read(path..\"/LastOpenedFilename\", \"\")\r\n        end\r\n        if config:HasEntry(path..\"/GenerateDifficulty\") then\r\n            _, sudokuGUI.difficulty = config:Read(path..\"/GenerateDifficulty\", 0)\r\n        end\r\n    else\r\n        config:Write(path..\"/LastOpenedFilepath\", sudokuGUI.filePath)\r\n        config:Write(path..\"/LastOpenedFilename\", sudokuGUI.fileName)\r\n        config:Write(path..\"/GenerateDifficulty\", sudokuGUI.difficulty)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1702,
    "text": "local _",
    "type": "statement:localassign"
  }, {
    "id": 1703,
    "text": "if config:HasEntry(path..\"/LastOpenedFilepath\") then\r\n            _, sudokuGUI.filePath   = config:Read(path..\"/LastOpenedFilepath\", \"\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1704,
    "text": "_, sudokuGUI.filePath   = config:Read(path..\"/LastOpenedFilepath\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 1705,
    "text": "if config:HasEntry(path..\"/LastOpenedFilename\") then\r\n            _, sudokuGUI.fileName   = config:Read(path..\"/LastOpenedFilename\", \"\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1706,
    "text": "_, sudokuGUI.fileName   = config:Read(path..\"/LastOpenedFilename\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 1707,
    "text": "if config:HasEntry(path..\"/GenerateDifficulty\") then\r\n            _, sudokuGUI.difficulty = config:Read(path..\"/GenerateDifficulty\", 0)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1708,
    "text": "_, sudokuGUI.difficulty = config:Read(path..\"/GenerateDifficulty\", 0)",
    "type": "statement:assign"
  }, {
    "id": 1709,
    "text": "config:Write(path..\"/LastOpenedFilepath\", sudokuGUI.filePath)",
    "type": "statement:functioncall"
  }, {
    "id": 1710,
    "text": "config:Write(path..\"/LastOpenedFilename\", sudokuGUI.fileName)",
    "type": "statement:functioncall"
  }, {
    "id": 1711,
    "text": "config:Write(path..\"/GenerateDifficulty\", sudokuGUI.difficulty)",
    "type": "statement:functioncall"
  }, {
    "id": 1712,
    "text": "ReadWriteColour(path..\"/Colours/Value\",             sudokuGUI.Colours[sudokuGUI.VALUE_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1713,
    "text": "ReadWriteColour(path..\"/Colours/ValueInit\",         sudokuGUI.Colours[sudokuGUI.INIT_VALUE_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1714,
    "text": "ReadWriteColour(path..\"/Colours/ValuePossible\",     sudokuGUI.Colours[sudokuGUI.POSS_VALUE_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1715,
    "text": "ReadWriteColour(path..\"/Colours/ValueInvalid\",      sudokuGUI.Colours[sudokuGUI.INVALID_VALUE_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1716,
    "text": "ReadWriteColour(path..\"/Colours/CellBackground\",    sudokuGUI.Colours[sudokuGUI.BACKGROUND_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1717,
    "text": "ReadWriteColour(path..\"/Colours/CellOddBackground\", sudokuGUI.Colours[sudokuGUI.ODD_BACKGROUND_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1718,
    "text": "ReadWriteColour(path..\"/Colours/CellFocus\",         sudokuGUI.Colours[sudokuGUI.FOCUS_CELL_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1719,
    "text": "ReadWriteColour(path..\"/Colours/NakedPairs\",     sudokuGUI.Colours[sudokuGUI.NAKED_PAIRS_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1720,
    "text": "ReadWriteColour(path..\"/Colours/NakedTriplets\",  sudokuGUI.Colours[sudokuGUI.NAKED_TRIPLETS_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1721,
    "text": "ReadWriteColour(path..\"/Colours/NakedQuads\",     sudokuGUI.Colours[sudokuGUI.NAKED_QUADS_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1722,
    "text": "ReadWriteColour(path..\"/Colours/HiddenPairs\",    sudokuGUI.Colours[sudokuGUI.HIDDEN_PAIRS_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1723,
    "text": "ReadWriteColour(path..\"/Colours/HiddenTriplets\", sudokuGUI.Colours[sudokuGUI.HIDDEN_TRIPLETS_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1724,
    "text": "ReadWriteColour(path..\"/Colours/HiddenQuads\",    sudokuGUI.Colours[sudokuGUI.HIDDEN_QUADS_COLOUR])",
    "type": "statement:functioncall"
  }, {
    "id": 1725,
    "text": "ReadWriteFont(path..\"/Fonts/Value\",         sudokuGUI.valueFont.wxfont)",
    "type": "statement:functioncall"
  }, {
    "id": 1726,
    "text": "ReadWriteFont(path..\"/Fonts/ValuePossible\", sudokuGUI.possibleFont.wxfont)",
    "type": "statement:functioncall"
  }, {
    "id": 1727,
    "text": "local function ReadWritePref(key, pref)\r\n        if read then\r\n            if config:HasEntry(key) then\r\n                local _, v = config:Read(key, 0)\r\n                sudokuGUI.CheckMenuItem(pref, inttobool(v))\r\n            end\r\n        else\r\n            config:Write(key, booltoint(sudokuGUI.IsCheckedMenuItem(pref)))\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 1728,
    "text": "if read then\r\n            if config:HasEntry(key) then\r\n                local _, v = config:Read(key, 0)\r\n                sudokuGUI.CheckMenuItem(pref, inttobool(v))\r\n            end\r\n        else\r\n            config:Write(key, booltoint(sudokuGUI.IsCheckedMenuItem(pref)))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 1729,
    "text": "if config:HasEntry(key) then\r\n                local _, v = config:Read(key, 0)\r\n                sudokuGUI.CheckMenuItem(pref, inttobool(v))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 1730,
    "text": "local _, v = config:Read(key, 0)",
    "type": "statement:localassign"
  }, {
    "id": 1731,
    "text": "sudokuGUI.CheckMenuItem(pref, inttobool(v))",
    "type": "statement:functioncall"
  }, {
    "id": 1732,
    "text": "config:Write(key, booltoint(sudokuGUI.IsCheckedMenuItem(pref)))",
    "type": "statement:functioncall"
  }, {
    "id": 1733,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_ERRORS\",          sudokuGUI.ID_SHOW_ERRORS)",
    "type": "statement:functioncall"
  }, {
    "id": 1734,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_MISTAKES\",        sudokuGUI.ID_SHOW_MISTAKES)",
    "type": "statement:functioncall"
  }, {
    "id": 1735,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_TOOLBAR\",         sudokuGUI.ID_SHOW_TOOLBAR)",
    "type": "statement:functioncall"
  }, {
    "id": 1736,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_TOOLBAR_LABELS\",  sudokuGUI.ID_SHOW_TOOLBAR_LABELS)",
    "type": "statement:functioncall"
  }, {
    "id": 1737,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_STATUSBAR\",       sudokuGUI.ID_SHOW_STATUSBAR)",
    "type": "statement:functioncall"
  }, {
    "id": 1738,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_POSSIBLE\",        sudokuGUI.ID_SHOW_POSSIBLE)",
    "type": "statement:functioncall"
  }, {
    "id": 1739,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_USER_POSSIBLE\",   sudokuGUI.ID_SHOW_USER_POSSIBLE)",
    "type": "statement:functioncall"
  }, {
    "id": 1740,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_POSSIBLE_LINE\",   sudokuGUI.ID_SHOW_POSSIBLE_LINE)",
    "type": "statement:functioncall"
  }, {
    "id": 1741,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_NAKED\",               sudokuGUI.ID_SHOW_NAKED)",
    "type": "statement:functioncall"
  }, {
    "id": 1742,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_HIDDEN\",              sudokuGUI.ID_SHOW_HIDDEN)",
    "type": "statement:functioncall"
  }, {
    "id": 1743,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_NAKEDPAIRS\",          sudokuGUI.ID_SHOW_NAKEDPAIRS)",
    "type": "statement:functioncall"
  }, {
    "id": 1744,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_HIDDENPAIRS\",         sudokuGUI.ID_SHOW_HIDDENPAIRS)",
    "type": "statement:functioncall"
  }, {
    "id": 1745,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_NAKEDTRIPLETS\",       sudokuGUI.ID_SHOW_NAKEDTRIPLETS)",
    "type": "statement:functioncall"
  }, {
    "id": 1746,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_HIDDENTRIPLETS\",      sudokuGUI.ID_SHOW_HIDDENTRIPLETS)",
    "type": "statement:functioncall"
  }, {
    "id": 1747,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_NAKEDQUADS\",          sudokuGUI.ID_SHOW_NAKEDQUADS)",
    "type": "statement:functioncall"
  }, {
    "id": 1748,
    "text": "ReadWritePref(path..\"/Preferences/SHOW_HIDDENQUADS\",         sudokuGUI.ID_SHOW_HIDDENQUADS)",
    "type": "statement:functioncall"
  }, {
    "id": 1749,
    "text": "ReadWritePref(path..\"/Preferences/ELIMINATE_NAKED\",          sudokuGUI.ID_ELIMINATE_NAKED)",
    "type": "statement:functioncall"
  }, {
    "id": 1750,
    "text": "ReadWritePref(path..\"/Preferences/ELIMINATE_HIDDEN\",         sudokuGUI.ID_ELIMINATE_HIDDEN)",
    "type": "statement:functioncall"
  }, {
    "id": 1751,
    "text": "ReadWritePref(path..\"/Preferences/ELIMINATE_NAKEDPAIRS\",     sudokuGUI.ID_ELIMINATE_NAKEDPAIRS)",
    "type": "statement:functioncall"
  }, {
    "id": 1752,
    "text": "ReadWritePref(path..\"/Preferences/ELIMINATE_HIDDENPAIRS\",    sudokuGUI.ID_ELIMINATE_HIDDENPAIRS)",
    "type": "statement:functioncall"
  }, {
    "id": 1753,
    "text": "ReadWritePref(path..\"/Preferences/ELIMINATE_NAKEDTRIPLETS\",  sudokuGUI.ID_ELIMINATE_NAKEDTRIPLETS)",
    "type": "statement:functioncall"
  }, {
    "id": 1754,
    "text": "ReadWritePref(path..\"/Preferences/ELIMINATE_HIDDENTRIPLETS\", sudokuGUI.ID_ELIMINATE_HIDDENTRIPLETS)",
    "type": "statement:functioncall"
  }, {
    "id": 1755,
    "text": "ReadWritePref(path..\"/Preferences/ELIMINATE_NAKEDQUADS\",     sudokuGUI.ID_ELIMINATE_NAKEDQUADS)",
    "type": "statement:functioncall"
  }, {
    "id": 1756,
    "text": "ReadWritePref(path..\"/Preferences/ELIMINATE_HIDDENQUADS\",    sudokuGUI.ID_ELIMINATE_HIDDENQUADS)",
    "type": "statement:functioncall"
  }, {
    "id": 1757,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1758,
    "text": "local function ReadWriteColour(key, c)\r\n        if read then\r\n            if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local r, g, b = string.match(str, \"r:(%d+) g:(%d+) b:(%d+)\")\r\n                if (r == nil) or (g == nil) or (b == nil) then return end\r\n                r = tonumber(r); g = tonumber(g); b = tonumber(b)\r\n                if (r < 0) or (r > 255) then return end -- sanity check\r\n                if (g < 0) or (g > 255) then return end\r\n                if (b < 0) or (b > 255) then return end\r\n                c:Set(r, g, b)\r\n            end\r\n        else\r\n            config:Write(key, string.format(\"r:%d g:%d b:%d\", c:Red(), c:Green(), c:Blue()))\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 1759,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1760,
    "text": "local function ReadWriteFont(key, f)\r\n        if read then\r\n            if config:HasEntry(key) then\r\n                local _, str = config:Read(key)\r\n                local face, family, style, underlined, weight = string.match(str, \"face:(\\\"[%w ]+\\\") family:(%d+) style:(%d+) underlined:(%d+) weight:(%d+)\")\r\n                if (face == nil) or (family == nil) or (style == nil) or (underlined == nil) or (weight == nil) then return end\r\n                family = tonumber(family); style = tonumber(style);\r\n                underlined = inttobool(tonumber(underlined)); weight = tonumber(weight)\r\n                -- remove quotes\r\n                if string.len(face) > 2 then face = string.sub(face, 2, -2) end\r\n\r\n                -- test so see if the values are any good\r\n                local ff = wx.wxFont(12, family, style, weight, underlined, face)\r\n                if not ff:Ok() then return end\r\n\r\n                local tempF = wx.wxFont(f)\r\n                f:SetFaceName(face)\r\n                f:SetFamily(family)\r\n                f:SetStyle(style)\r\n                f:SetUnderlined(underlined)\r\n                f:SetWeight(weight)\r\n\r\n                -- shouldn't happen but we always want a usable font\r\n                if not f:Ok() then\r\n                    f:SetFaceName(tempF:GetFaceName())\r\n                    f:SetFamily(tempF:GetFamily())\r\n                    f:SetStyle(tempF:GetStyle())\r\n                    f:SetUnderlined(tempF:GetUnderlined())\r\n                    f:SetWeight(tempF:GetWeight())\r\n                end\r\n            end\r\n        else\r\n            config:Write(key, string.format(\"face:\\\"%s\\\" family:%d style:%d underlined:%d weight:%d\",\r\n                f:GetFaceName(), f:GetFamily(), f:GetStyle(), booltoint(f:GetUnderlined()), f:GetWeight()))\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 1761,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1762,
    "text": "local function ReadWritePref(key, pref)\r\n        if read then\r\n            if config:HasEntry(key) then\r\n                local _, v = config:Read(key, 0)\r\n                sudokuGUI.CheckMenuItem(pref, inttobool(v))\r\n            end\r\n        else\r\n            config:Write(key, booltoint(sudokuGUI.IsCheckedMenuItem(pref)))\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 1763,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1764,
    "text": "function sudokuGUI.InitFontsAndColours()\r\n    sudokuGUI.Colours =\r\n    {\r\n        [sudokuGUI.VALUE_COLOUR]           = wx.wxColour(0, 0, 230),\r\n        [sudokuGUI.INIT_VALUE_COLOUR]      = wx.wxColour(0, 0, 0),\r\n        [sudokuGUI.POSS_VALUE_COLOUR]      = wx.wxColour(0, 0, 0),\r\n        [sudokuGUI.INVALID_VALUE_COLOUR]   = wx.wxColour(255, 0, 0),\r\n        [sudokuGUI.BACKGROUND_COLOUR]      = wx.wxColour(255, 255, 255),\r\n        [sudokuGUI.ODD_BACKGROUND_COLOUR]  = wx.wxColour(250, 250, 210),\r\n        [sudokuGUI.FOCUS_CELL_COLOUR]      = wx.wxColour(200, 220, 250),\r\n\r\n        [sudokuGUI.NAKED_PAIRS_COLOUR]     = wx.wxColour(255, 0, 0),\r\n        [sudokuGUI.NAKED_TRIPLETS_COLOUR]  = wx.wxColour(255, 180, 0),\r\n        [sudokuGUI.NAKED_QUADS_COLOUR]     = wx.wxColour(255, 255, 0),\r\n        [sudokuGUI.HIDDEN_PAIRS_COLOUR]    = wx.wxColour(0, 220, 0),\r\n        [sudokuGUI.HIDDEN_TRIPLETS_COLOUR] = wx.wxColour(0, 240, 160),\r\n        [sudokuGUI.HIDDEN_QUADS_COLOUR]    = wx.wxColour(0, 220, 220)\r\n    }\r\n\r\n    sudokuGUI.Colours_ = {}\r\n    for n = 1, sudokuGUI.COLOUR_MAX do\r\n        sudokuGUI.Colours_[n] = wx.wxColour(sudokuGUI.Colours[n])\r\n    end\r\n\r\n    --   just use defaults since some XP systems may not even have wxMODERN\r\n    sudokuGUI.possibleFont_wxfont_ = wx.wxFont(wx.wxNORMAL_FONT)\r\n    sudokuGUI.valueFont_wxfont_    = wx.wxFont(wx.wxNORMAL_FONT)\r\n    sudokuGUI.valueFont_wxfont_:SetWeight(wx.wxFONTWEIGHT_BOLD)\r\n    if not sudokuGUI.valueFont_wxfont_:Ok() then\r\n        sudokuGUI.valueFont_wxfont_:Destroy()\r\n        sudokuGUI.valueFont_wxfont_ = wx.wxFont(wx.wxNORMAL_FONT)\r\n    end\r\n\r\n    sudokuGUI.possibleFont.wxfont = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n    sudokuGUI.valueFont.wxfont    = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\nend",
    "type": "function"
  }, {
    "id": 1765,
    "text": "sudokuGUI.Colours =\r\n    {\r\n        [sudokuGUI.VALUE_COLOUR]           = wx.wxColour(0, 0, 230),\r\n        [sudokuGUI.INIT_VALUE_COLOUR]      = wx.wxColour(0, 0, 0),\r\n        [sudokuGUI.POSS_VALUE_COLOUR]      = wx.wxColour(0, 0, 0),\r\n        [sudokuGUI.INVALID_VALUE_COLOUR]   = wx.wxColour(255, 0, 0),\r\n        [sudokuGUI.BACKGROUND_COLOUR]      = wx.wxColour(255, 255, 255),\r\n        [sudokuGUI.ODD_BACKGROUND_COLOUR]  = wx.wxColour(250, 250, 210),\r\n        [sudokuGUI.FOCUS_CELL_COLOUR]      = wx.wxColour(200, 220, 250),\r\n\r\n        [sudokuGUI.NAKED_PAIRS_COLOUR]     = wx.wxColour(255, 0, 0),\r\n        [sudokuGUI.NAKED_TRIPLETS_COLOUR]  = wx.wxColour(255, 180, 0),\r\n        [sudokuGUI.NAKED_QUADS_COLOUR]     = wx.wxColour(255, 255, 0),\r\n        [sudokuGUI.HIDDEN_PAIRS_COLOUR]    = wx.wxColour(0, 220, 0),\r\n        [sudokuGUI.HIDDEN_TRIPLETS_COLOUR] = wx.wxColour(0, 240, 160),\r\n        [sudokuGUI.HIDDEN_QUADS_COLOUR]    = wx.wxColour(0, 220, 220)\r\n    }",
    "type": "statement:assign"
  }, {
    "id": 1766,
    "text": "sudokuGUI.Colours_ = {}",
    "type": "statement:assign"
  }, {
    "id": 1767,
    "text": "for n = 1, sudokuGUI.COLOUR_MAX do\r\n        sudokuGUI.Colours_[n] = wx.wxColour(sudokuGUI.Colours[n])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 1768,
    "text": "sudokuGUI.Colours_[n] = wx.wxColour(sudokuGUI.Colours[n])",
    "type": "statement:assign"
  }, {
    "id": 1769,
    "text": "sudokuGUI.possibleFont_wxfont_ = wx.wxFont(wx.wxNORMAL_FONT)",
    "type": "statement:assign"
  }, {
    "id": 1770,
    "text": "sudokuGUI.valueFont_wxfont_    = wx.wxFont(wx.wxNORMAL_FONT)",
    "type": "statement:assign"
  }, {
    "id": 1771,
    "text": "sudokuGUI.valueFont_wxfont_:SetWeight(wx.wxFONTWEIGHT_BOLD)",
    "type": "statement:functioncall"
  }, {
    "id": 1772,
    "text": "if not sudokuGUI.valueFont_wxfont_:Ok() then\r\n        sudokuGUI.valueFont_wxfont_:Destroy()\r\n        sudokuGUI.valueFont_wxfont_ = wx.wxFont(wx.wxNORMAL_FONT)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1773,
    "text": "sudokuGUI.valueFont_wxfont_:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 1774,
    "text": "sudokuGUI.valueFont_wxfont_ = wx.wxFont(wx.wxNORMAL_FONT)",
    "type": "statement:assign"
  }, {
    "id": 1775,
    "text": "sudokuGUI.possibleFont.wxfont = wx.wxFont(sudokuGUI.possibleFont_wxfont_)",
    "type": "statement:assign"
  }, {
    "id": 1776,
    "text": "sudokuGUI.valueFont.wxfont    = wx.wxFont(sudokuGUI.valueFont_wxfont_)",
    "type": "statement:assign"
  }, {
    "id": 1777,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1778,
    "text": "function() sudokuGUI.NewPuzzle(true) end",
    "type": "function"
  }, {
    "id": 1779,
    "text": "sudokuGUI.NewPuzzle(true)",
    "type": "statement:functioncall"
  }, {
    "id": 1780,
    "text": "function(event) sudokuGUI.CreatePuzzle(event:IsChecked()) end",
    "type": "function"
  }, {
    "id": 1781,
    "text": "sudokuGUI.CreatePuzzle(event:IsChecked())",
    "type": "statement:functioncall"
  }, {
    "id": 1782,
    "text": "function() sudokuGUI.GeneratePuzzle() end",
    "type": "function"
  }, {
    "id": 1783,
    "text": "sudokuGUI.GeneratePuzzle()",
    "type": "statement:functioncall"
  }, {
    "id": 1784,
    "text": "function() sudokuGUI.OpenPuzzle() end",
    "type": "function"
  }, {
    "id": 1785,
    "text": "sudokuGUI.OpenPuzzle()",
    "type": "statement:functioncall"
  }, {
    "id": 1786,
    "text": "function() sudokuGUI.SaveAsPuzzle() end",
    "type": "function"
  }, {
    "id": 1787,
    "text": "sudokuGUI.SaveAsPuzzle()",
    "type": "statement:functioncall"
  }, {
    "id": 1788,
    "text": "function() sudokuGUI.PageSetup() end",
    "type": "function"
  }, {
    "id": 1789,
    "text": "sudokuGUI.PageSetup()",
    "type": "statement:functioncall"
  }, {
    "id": 1790,
    "text": "function() sudokuGUI.PrintSetup() end",
    "type": "function"
  }, {
    "id": 1791,
    "text": "sudokuGUI.PrintSetup()",
    "type": "statement:functioncall"
  }, {
    "id": 1792,
    "text": "function() sudokuGUI.PrintPreview() end",
    "type": "function"
  }, {
    "id": 1793,
    "text": "sudokuGUI.PrintPreview()",
    "type": "statement:functioncall"
  }, {
    "id": 1794,
    "text": "function() sudokuGUI.Print() end",
    "type": "function"
  }, {
    "id": 1795,
    "text": "sudokuGUI.Print()",
    "type": "statement:functioncall"
  }, {
    "id": 1796,
    "text": "function() sudokuGUI.frame:Close() end",
    "type": "function"
  }, {
    "id": 1797,
    "text": "sudokuGUI.frame:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 1798,
    "text": "function (event)\r\n                local str = sudoku.ToString(sudokuGUI.GetCurrentTable())\r\n                if wx.wxClipboard.Get():Open() then\r\n                    wx.wxClipboard.Get():SetData(wx.wxTextDataObject(str))\r\n                    wx.wxClipboard.Get():Close()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 1799,
    "text": "local str = sudoku.ToString(sudokuGUI.GetCurrentTable())",
    "type": "statement:localassign"
  }, {
    "id": 1800,
    "text": "if wx.wxClipboard.Get():Open() then\r\n                    wx.wxClipboard.Get():SetData(wx.wxTextDataObject(str))\r\n                    wx.wxClipboard.Get():Close()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1801,
    "text": "wx.wxClipboard.Get():SetData(wx.wxTextDataObject(str))",
    "type": "statement:functioncall"
  }, {
    "id": 1802,
    "text": "wx.wxClipboard.Get():Close()",
    "type": "statement:functioncall"
  }, {
    "id": 1803,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1804,
    "text": "function() sudokuGUI.ResetPuzzle() end",
    "type": "function"
  }, {
    "id": 1805,
    "text": "sudokuGUI.ResetPuzzle()",
    "type": "statement:functioncall"
  }, {
    "id": 1806,
    "text": "function() sudokuGUI.Undo() end",
    "type": "function"
  }, {
    "id": 1807,
    "text": "sudokuGUI.Undo()",
    "type": "statement:functioncall"
  }, {
    "id": 1808,
    "text": "function() sudokuGUI.Redo() end",
    "type": "function"
  }, {
    "id": 1809,
    "text": "sudokuGUI.Redo()",
    "type": "statement:functioncall"
  }, {
    "id": 1810,
    "text": "function() sudokuGUI.PreferencesDialog() end",
    "type": "function"
  }, {
    "id": 1811,
    "text": "sudokuGUI.PreferencesDialog()",
    "type": "statement:functioncall"
  }, {
    "id": 1812,
    "text": "function() sudokuGUI.ConfigSave(true) end",
    "type": "function"
  }, {
    "id": 1813,
    "text": "sudokuGUI.ConfigSave(true)",
    "type": "statement:functioncall"
  }, {
    "id": 1814,
    "text": "function sudokuGUI.MenuCheckUpdate(event)\r\n    sudokuGUI.CheckMenuItem(event:GetId(), event:IsChecked())\r\n    sudokuGUI.UpdateTable()\r\nend",
    "type": "function"
  }, {
    "id": 1815,
    "text": "sudokuGUI.CheckMenuItem(event:GetId(), event:IsChecked())",
    "type": "statement:functioncall"
  }, {
    "id": 1816,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1817,
    "text": "function (event)\r\n                -- need to solve it ourselves first\r\n                if (not sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_CREATE)) and\r\n                    (event:IsChecked()) and (not sudokuGUI.sudokuSolnTable) then\r\n                    sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n\r\n                    if not sudokuGUI.sudokuSolnTable then\r\n                        event:SetInt(0) -- uncheck for MenuCheckUpdate function\r\n                        sudokuGUI.frame:GetMenuBar():Check(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n                    end\r\n                end\r\n                sudokuGUI.MenuCheckUpdate(event)\r\n            end",
    "type": "function"
  }, {
    "id": 1818,
    "text": "if (not sudokuGUI.IsCheckedMenuItem(sudokuGUI.ID_CREATE)) and\r\n                    (event:IsChecked()) and (not sudokuGUI.sudokuSolnTable) then\r\n                    sudokuGUI.sudokuSolnTable = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n\r\n                    if not sudokuGUI.sudokuSolnTable then\r\n                        event:SetInt(0) -- uncheck for MenuCheckUpdate function\r\n                        sudokuGUI.frame:GetMenuBar():Check(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1819,
    "text": "if not sudokuGUI.sudokuSolnTable then\r\n                        event:SetInt(0) -- uncheck for MenuCheckUpdate function\r\n                        sudokuGUI.frame:GetMenuBar():Check(sudokuGUI.ID_SHOW_MISTAKES, false)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 1820,
    "text": "event:SetInt(0)",
    "type": "statement:functioncall"
  }, {
    "id": 1821,
    "text": "sudokuGUI.frame:GetMenuBar():Check(sudokuGUI.ID_SHOW_MISTAKES, false)",
    "type": "statement:functioncall"
  }, {
    "id": 1822,
    "text": "sudokuGUI.MenuCheckUpdate(event)",
    "type": "statement:functioncall"
  }, {
    "id": 1823,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1824,
    "text": "function(event)\r\n                sudokuGUI.frame:GetToolBar():Show(event:IsChecked())\r\n                -- hack to make the wxFrame layout the child panel\r\n                local w, h = sudokuGUI.frame:GetSizeWH()\r\n                sudokuGUI.frame:SetSize(wx.wxSize(w, h+1))\r\n                sudokuGUI.frame:SetSize(wx.wxSize(w, h))\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_TOOLBAR, event:IsChecked())\r\n            end",
    "type": "function"
  }, {
    "id": 1825,
    "text": "sudokuGUI.frame:GetToolBar():Show(event:IsChecked())",
    "type": "statement:functioncall"
  }, {
    "id": 1826,
    "text": "local w, h = sudokuGUI.frame:GetSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 1827,
    "text": "sudokuGUI.frame:SetSize(wx.wxSize(w, h+1))",
    "type": "statement:functioncall"
  }, {
    "id": 1828,
    "text": "sudokuGUI.frame:SetSize(wx.wxSize(w, h))",
    "type": "statement:functioncall"
  }, {
    "id": 1829,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_TOOLBAR, event:IsChecked())",
    "type": "statement:functioncall"
  }, {
    "id": 1830,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1831,
    "text": "function(event)\r\n                local style = wx.wxNO_BORDER\r\n                if event:IsChecked() then\r\n                    style = style + wx.wxTB_TEXT\r\n                end\r\n\r\n                sudokuGUI.frame:GetToolBar():SetWindowStyle(style)\r\n                sudokuGUI.frame:GetToolBar():Realize()\r\n                -- hack to make the wxFrame layout the child panel\r\n                local w, h = sudokuGUI.frame:GetSizeWH()\r\n                sudokuGUI.frame:SetSize(wx.wxSize(w, h+1))\r\n                sudokuGUI.frame:SetSize(wx.wxSize(w, h))\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_TOOLBAR_LABELS, event:IsChecked())\r\n            end",
    "type": "function"
  }, {
    "id": 1832,
    "text": "local style = wx.wxNO_BORDER",
    "type": "statement:localassign"
  }, {
    "id": 1833,
    "text": "if event:IsChecked() then\r\n                    style = style + wx.wxTB_TEXT\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1834,
    "text": "style = style + wx.wxTB_TEXT",
    "type": "statement:assign"
  }, {
    "id": 1835,
    "text": "sudokuGUI.frame:GetToolBar():SetWindowStyle(style)",
    "type": "statement:functioncall"
  }, {
    "id": 1836,
    "text": "sudokuGUI.frame:GetToolBar():Realize()",
    "type": "statement:functioncall"
  }, {
    "id": 1837,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_TOOLBAR_LABELS, event:IsChecked())",
    "type": "statement:functioncall"
  }, {
    "id": 1838,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1839,
    "text": "function(event)\r\n                sudokuGUI.frame:GetStatusBar():Show(event:IsChecked())\r\n                -- hack to make the wxFrame layout the child panel\r\n                local w, h = sudokuGUI.frame:GetSizeWH()\r\n                sudokuGUI.frame:SetSize(wx.wxSize(w, h+1))\r\n                sudokuGUI.frame:SetSize(wx.wxSize(w, h))\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_STATUSBAR, event:IsChecked())\r\n            end",
    "type": "function"
  }, {
    "id": 1840,
    "text": "sudokuGUI.frame:GetStatusBar():Show(event:IsChecked())",
    "type": "statement:functioncall"
  }, {
    "id": 1841,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_STATUSBAR, event:IsChecked())",
    "type": "statement:functioncall"
  }, {
    "id": 1842,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1843,
    "text": "function (event)\r\n                if event:IsChecked() then\r\n                    -- make this act like a radio item that can be unchecked\r\n                    sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE, false)\r\n                end\r\n                sudokuGUI.MenuCheckUpdate(event)\r\n            end",
    "type": "function"
  }, {
    "id": 1844,
    "text": "if event:IsChecked() then\r\n                    -- make this act like a radio item that can be unchecked\r\n                    sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE, false)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1845,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_USER_POSSIBLE, false)",
    "type": "statement:functioncall"
  }, {
    "id": 1846,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1847,
    "text": "function (event)\r\n                if event:IsChecked() then\r\n                    -- make this act like a radio item that can be unchecked\r\n                    sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_POSSIBLE, false)\r\n                end\r\n                sudokuGUI.MenuCheckUpdate(event)\r\n            end",
    "type": "function"
  }, {
    "id": 1848,
    "text": "if event:IsChecked() then\r\n                    -- make this act like a radio item that can be unchecked\r\n                    sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_POSSIBLE, false)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1849,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_POSSIBLE, false)",
    "type": "statement:functioncall"
  }, {
    "id": 1850,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1851,
    "text": "function (event)\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_POSSIBLE_LINE, event:IsChecked())\r\n                local width, height = sudokuGUI.cellWindows[1]:GetClientSizeWH()\r\n                sudokuGUI.GetCellBestSize(width-1, height-1)\r\n                sudokuGUI.Refresh()\r\n            end",
    "type": "function"
  }, {
    "id": 1852,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_POSSIBLE_LINE, event:IsChecked())",
    "type": "statement:functioncall"
  }, {
    "id": 1853,
    "text": "sudokuGUI.GetCellBestSize(width-1, height-1)",
    "type": "statement:functioncall"
  }, {
    "id": 1854,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1855,
    "text": "function (event)\r\n                local ret = wx.wxMessageBox(\"Clear all of your pencil marks?\",\r\n                                            \"wxLuaSudoku - clear pencil marks?\",\r\n                                            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                            sudokuGUI.frame )\r\n                if ret == wx.wxOK then\r\n                    sudokuGUI.pencilMarks = {}\r\n                    for cell = 1, 81 do\r\n                        sudokuGUI.pencilMarks[cell] = {}\r\n                    end\r\n                    sudokuGUI.UpdateTable()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 1856,
    "text": "local ret = wx.wxMessageBox(\"Clear all of your pencil marks?\",\r\n                                            \"wxLuaSudoku - clear pencil marks?\",\r\n                                            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                            sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1857,
    "text": "if ret == wx.wxOK then\r\n                    sudokuGUI.pencilMarks = {}\r\n                    for cell = 1, 81 do\r\n                        sudokuGUI.pencilMarks[cell] = {}\r\n                    end\r\n                    sudokuGUI.UpdateTable()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1858,
    "text": "sudokuGUI.pencilMarks = {}",
    "type": "statement:assign"
  }, {
    "id": 1859,
    "text": "for cell = 1, 81 do\r\n                        sudokuGUI.pencilMarks[cell] = {}\r\n                    end",
    "type": "statement:numericfor"
  }, {
    "id": 1860,
    "text": "sudokuGUI.pencilMarks[cell] = {}",
    "type": "statement:assign"
  }, {
    "id": 1861,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1862,
    "text": "function (event)\r\n                local ret = wx.wxMessageBox(\"Set all values as possible in the pencil marks?\",\r\n                                            \"wxLuaSudoku - set all pencil marks?\",\r\n                                            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                            sudokuGUI.frame )\r\n                if ret == wx.wxOK then\r\n                    sudokuGUI.pencilMarks = {}\r\n                    for cell = 1, 81 do\r\n                        sudokuGUI.pencilMarks[cell] = {}\r\n                        for v = 1, 9 do\r\n                            sudokuGUI.pencilMarks[cell][v] = v\r\n                        end\r\n                    end\r\n                    sudokuGUI.UpdateTable()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 1863,
    "text": "local ret = wx.wxMessageBox(\"Set all values as possible in the pencil marks?\",\r\n                                            \"wxLuaSudoku - set all pencil marks?\",\r\n                                            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                            sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1864,
    "text": "if ret == wx.wxOK then\r\n                    sudokuGUI.pencilMarks = {}\r\n                    for cell = 1, 81 do\r\n                        sudokuGUI.pencilMarks[cell] = {}\r\n                        for v = 1, 9 do\r\n                            sudokuGUI.pencilMarks[cell][v] = v\r\n                        end\r\n                    end\r\n                    sudokuGUI.UpdateTable()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1865,
    "text": "for cell = 1, 81 do\r\n                        sudokuGUI.pencilMarks[cell] = {}\r\n                        for v = 1, 9 do\r\n                            sudokuGUI.pencilMarks[cell][v] = v\r\n                        end\r\n                    end",
    "type": "statement:numericfor"
  }, {
    "id": 1866,
    "text": "for v = 1, 9 do\r\n                            sudokuGUI.pencilMarks[cell][v] = v\r\n                        end",
    "type": "statement:numericfor"
  }, {
    "id": 1867,
    "text": "sudokuGUI.pencilMarks[cell][v] = v",
    "type": "statement:assign"
  }, {
    "id": 1868,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1869,
    "text": "function (event)\r\n                local ret = wx.wxMessageBox(\"Initialize the pencil marks to the calculated possible values?\",\r\n                                            \"wxLuaSudoku - initialize pencil marks?\",\r\n                                            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                            sudokuGUI.frame )\r\n                if ret == wx.wxOK then\r\n                    local s  = sudokuGUI.GetCurrentTable()\r\n                    for cell = 1, 81 do\r\n                        sudokuGUI.pencilMarks[cell] = {}\r\n                        for v = 1, 9 do\r\n                            sudokuGUI.pencilMarks[cell][v] = s.possible[cell][v]\r\n                        end\r\n                    end\r\n                    sudokuGUI.UpdateTable()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 1870,
    "text": "local ret = wx.wxMessageBox(\"Initialize the pencil marks to the calculated possible values?\",\r\n                                            \"wxLuaSudoku - initialize pencil marks?\",\r\n                                            wx.wxOK + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                                            sudokuGUI.frame )",
    "type": "statement:localassign"
  }, {
    "id": 1871,
    "text": "if ret == wx.wxOK then\r\n                    local s  = sudokuGUI.GetCurrentTable()\r\n                    for cell = 1, 81 do\r\n                        sudokuGUI.pencilMarks[cell] = {}\r\n                        for v = 1, 9 do\r\n                            sudokuGUI.pencilMarks[cell][v] = s.possible[cell][v]\r\n                        end\r\n                    end\r\n                    sudokuGUI.UpdateTable()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1872,
    "text": "local s  = sudokuGUI.GetCurrentTable()",
    "type": "statement:localassign"
  }, {
    "id": 1873,
    "text": "for cell = 1, 81 do\r\n                        sudokuGUI.pencilMarks[cell] = {}\r\n                        for v = 1, 9 do\r\n                            sudokuGUI.pencilMarks[cell][v] = s.possible[cell][v]\r\n                        end\r\n                    end",
    "type": "statement:numericfor"
  }, {
    "id": 1874,
    "text": "for v = 1, 9 do\r\n                            sudokuGUI.pencilMarks[cell][v] = s.possible[cell][v]\r\n                        end",
    "type": "statement:numericfor"
  }, {
    "id": 1875,
    "text": "sudokuGUI.pencilMarks[cell][v] = s.possible[cell][v]",
    "type": "statement:assign"
  }, {
    "id": 1876,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1877,
    "text": "function (event)\r\n                local checked = event:IsChecked()\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_NAKEDPAIRS, checked)\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_NAKEDTRIPLETS, checked)\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_NAKEDQUADS, checked)\r\n                sudokuGUI.UpdateTable()\r\n            end",
    "type": "function"
  }, {
    "id": 1878,
    "text": "local checked = event:IsChecked()",
    "type": "statement:localassign"
  }, {
    "id": 1879,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_NAKEDPAIRS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1880,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_NAKEDTRIPLETS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1881,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_NAKEDQUADS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1882,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1883,
    "text": "function (event)\r\n                local checked = event:IsChecked()\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_HIDDENPAIRS, checked)\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_HIDDENTRIPLETS, checked)\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_HIDDENQUADS, checked)\r\n                sudokuGUI.UpdateTable()\r\n            end",
    "type": "function"
  }, {
    "id": 1884,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_HIDDENPAIRS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1885,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_HIDDENTRIPLETS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1886,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_SHOW_HIDDENQUADS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1887,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1888,
    "text": "function (event)\r\n                local s = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n                if s then\r\n                    sudokuGUI.sudokuSolnTable = s\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 1889,
    "text": "local s = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())",
    "type": "statement:localassign"
  }, {
    "id": 1890,
    "text": "if s then\r\n                    sudokuGUI.sudokuSolnTable = s\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1891,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1892,
    "text": "function (event)\r\n                if not sudokuGUI.sudokuSolnTable then\r\n                    local s = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n                    if s then\r\n                        sudokuGUI.sudokuSolnTable = s\r\n                    end\r\n                end\r\n\r\n                if sudokuGUI.sudokuSolnTable then\r\n                    sudokuGUI.AddTable(sudokuGUI.sudokuSolnTable)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 1893,
    "text": "if not sudokuGUI.sudokuSolnTable then\r\n                    local s = sudokuGUI.VerifyUniquePuzzle(sudokuGUI.GetInitTable())\r\n                    if s then\r\n                        sudokuGUI.sudokuSolnTable = s\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1894,
    "text": "if s then\r\n                        sudokuGUI.sudokuSolnTable = s\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 1895,
    "text": "if sudokuGUI.sudokuSolnTable then\r\n                    sudokuGUI.AddTable(sudokuGUI.sudokuSolnTable)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1896,
    "text": "sudokuGUI.AddTable(sudokuGUI.sudokuSolnTable)",
    "type": "statement:functioncall"
  }, {
    "id": 1897,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1898,
    "text": "function (event)\r\n                local checked = event:IsChecked()\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_NAKEDPAIRS, checked)\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_NAKEDTRIPLETS, checked)\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_NAKEDQUADS, checked)\r\n                sudokuGUI.UpdateTable()\r\n            end",
    "type": "function"
  }, {
    "id": 1899,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_NAKEDPAIRS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1900,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_NAKEDTRIPLETS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1901,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_NAKEDQUADS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1902,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1903,
    "text": "function (event)\r\n                local checked = event:IsChecked()\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_HIDDENPAIRS, checked)\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_HIDDENTRIPLETS, checked)\r\n                sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_HIDDENQUADS, checked)\r\n                sudokuGUI.UpdateTable()\r\n            end",
    "type": "function"
  }, {
    "id": 1904,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_HIDDENPAIRS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1905,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_HIDDENTRIPLETS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1906,
    "text": "sudokuGUI.CheckMenuItem(sudokuGUI.ID_ELIMINATE_HIDDENQUADS, checked)",
    "type": "statement:functioncall"
  }, {
    "id": 1907,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1908,
    "text": "function (event)\r\n                local s = TableCopy(sudokuGUI.GetCurrentTable())\r\n                local changed_cells = sudoku.SolveScanSingles(s)\r\n                if changed_cells then sudokuGUI.AddTable(s) end\r\n            end",
    "type": "function"
  }, {
    "id": 1909,
    "text": "local changed_cells = sudoku.SolveScanSingles(s)",
    "type": "statement:localassign"
  }, {
    "id": 1910,
    "text": "if changed_cells then sudokuGUI.AddTable(s) end",
    "type": "statement:if"
  }, {
    "id": 1911,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1912,
    "text": "function (event)\r\n                local s = TableCopy(sudokuGUI.GetCurrentTable())\r\n                local changed_cells = sudoku.SolveScanRows(s)\r\n                if changed_cells then sudokuGUI.AddTable(s) end\r\n            end",
    "type": "function"
  }, {
    "id": 1913,
    "text": "local changed_cells = sudoku.SolveScanRows(s)",
    "type": "statement:localassign"
  }, {
    "id": 1914,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1915,
    "text": "function (event)\r\n                local s = TableCopy(sudokuGUI.GetCurrentTable())\r\n                local changed_cells = sudoku.SolveScanCols(s)\r\n                if changed_cells then sudokuGUI.AddTable(s) end\r\n            end",
    "type": "function"
  }, {
    "id": 1916,
    "text": "local changed_cells = sudoku.SolveScanCols(s)",
    "type": "statement:localassign"
  }, {
    "id": 1917,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1918,
    "text": "function (event)\r\n                local s = TableCopy(sudokuGUI.GetCurrentTable())\r\n                local changed_cells = sudoku.SolveScanBlocks(s)\r\n                if changed_cells then sudokuGUI.AddTable(s) end\r\n            end",
    "type": "function"
  }, {
    "id": 1919,
    "text": "local changed_cells = sudoku.SolveScanBlocks(s)",
    "type": "statement:localassign"
  }, {
    "id": 1920,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1921,
    "text": "function (event) sudokuGUI.SolveScanning() end",
    "type": "function"
  }, {
    "id": 1922,
    "text": "sudokuGUI.SolveScanning()",
    "type": "statement:functioncall"
  }, {
    "id": 1923,
    "text": "function (event) sudokuGUI.SolveBruteForce() end",
    "type": "function"
  }, {
    "id": 1924,
    "text": "sudokuGUI.SolveBruteForce()",
    "type": "statement:functioncall"
  }, {
    "id": 1925,
    "text": "function (event)\r\n                wx.wxMessageBox(\"Welcome to wxLuaSudoku!\\nWritten by John Labenski\\nCopyright 2006.\\n\"..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLuaSudoku\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                sudokuGUI.frame )\r\n            end",
    "type": "function"
  }, {
    "id": 1926,
    "text": "wx.wxMessageBox(\"Welcome to wxLuaSudoku!\\nWritten by John Labenski\\nCopyright 2006.\\n\"..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLuaSudoku\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                sudokuGUI.frame )",
    "type": "statement:functioncall"
  }, {
    "id": 1927,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1928,
    "text": "function (event)\r\n                local helpFrame = wx.wxFrame(sudokuGUI.frame, wx.wxID_ANY, \"Help on wxLuaSudoku\", wx.wxDefaultPosition, wx.wxSize(600,400))\r\n                local htmlWin = wx.wxHtmlWindow(helpFrame)\r\n                if (htmlWin:SetPage(sudokuGUIhelp)) then\r\n                    helpFrame:Centre()\r\n                    helpFrame:Show(true)\r\n                else\r\n                    helpFrame:Destroy()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 1929,
    "text": "local helpFrame = wx.wxFrame(sudokuGUI.frame, wx.wxID_ANY, \"Help on wxLuaSudoku\", wx.wxDefaultPosition, wx.wxSize(600,400))",
    "type": "statement:localassign"
  }, {
    "id": 1930,
    "text": "local htmlWin = wx.wxHtmlWindow(helpFrame)",
    "type": "statement:localassign"
  }, {
    "id": 1931,
    "text": "if (htmlWin:SetPage(sudokuGUIhelp)) then\r\n                    helpFrame:Centre()\r\n                    helpFrame:Show(true)\r\n                else\r\n                    helpFrame:Destroy()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 1932,
    "text": "helpFrame:Centre()",
    "type": "statement:functioncall"
  }, {
    "id": 1933,
    "text": "helpFrame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 1934,
    "text": "helpFrame:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 1935,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1936,
    "text": "function sudokuGUI.OnMenuEvent(event)\r\n    local id = event:GetId()\r\n\r\n    if sudokuGUI.MenuId[id] then\r\n        sudokuGUI.MenuId[id](event)\r\n        return\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 1937,
    "text": "local id = event:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 1938,
    "text": "if sudokuGUI.MenuId[id] then\r\n        sudokuGUI.MenuId[id](event)\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1939,
    "text": "sudokuGUI.MenuId[id](event)",
    "type": "statement:functioncall"
  }, {
    "id": 1940,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1941,
    "text": "function sudokuGUI.CheckMenuItem(id, check)\r\n    sudokuGUI.frame:GetMenuBar():Check(id, check)\r\n    sudokuGUI.frame:GetToolBar():ToggleTool(id, check) -- doesn't care if id doesn't exist\r\n    sudokuGUI.menuCheckIDs[id] = check\r\nend",
    "type": "function"
  }, {
    "id": 1942,
    "text": "sudokuGUI.frame:GetMenuBar():Check(id, check)",
    "type": "statement:functioncall"
  }, {
    "id": 1943,
    "text": "sudokuGUI.frame:GetToolBar():ToggleTool(id, check)",
    "type": "statement:functioncall"
  }, {
    "id": 1944,
    "text": "sudokuGUI.menuCheckIDs[id] = check",
    "type": "statement:assign"
  }, {
    "id": 1945,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1946,
    "text": "function sudokuGUI.IsCheckedMenuItem(id)\r\n    if sudokuGUI.menuCheckIDs[id] == nil then\r\n        sudokuGUI.menuCheckIDs[id] = sudokuGUI.frame:GetMenuBar():IsChecked(id)\r\n    end\r\n\r\n    return sudokuGUI.menuCheckIDs[id]\r\nend",
    "type": "function"
  }, {
    "id": 1947,
    "text": "if sudokuGUI.menuCheckIDs[id] == nil then\r\n        sudokuGUI.menuCheckIDs[id] = sudokuGUI.frame:GetMenuBar():IsChecked(id)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 1948,
    "text": "sudokuGUI.menuCheckIDs[id] = sudokuGUI.frame:GetMenuBar():IsChecked(id)",
    "type": "statement:assign"
  }, {
    "id": 1949,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 1950,
    "text": "function main()\r\n\r\n    sudokuGUI.block_refresh = true\r\n\r\n    -- initialize the fonts and colours to use (must always exist)\r\n    sudokuGUI.InitFontsAndColours()\r\n\r\n    -- initialize the printing defaults\r\n    sudokuGUI.printData:SetPaperId(wx.wxPAPER_LETTER);\r\n    sudokuGUI.pageSetupData:SetMarginTopLeft(wx.wxPoint(25, 25));\r\n    sudokuGUI.pageSetupData:SetMarginBottomRight(wx.wxPoint(25, 25));\r\n\r\n    -- Create the main frame for the program\r\n    sudokuGUI.frame = wx.wxFrame(wx.NULL, wx.wxID_ANY, \"wxLuaSudoku\",\r\n                                 wx.wxDefaultPosition, wx.wxSize(300,320))\r\n\r\n    sudokuGUI.frame:SetSizeHints(300, 300);\r\n    local bitmap = wx.wxBitmap(sudokuGUIxpmdata)\r\n    local icon = wx.wxIcon()\r\n    icon:CopyFromBitmap(bitmap)\r\n    sudokuGUI.frame:SetIcon(icon)\r\n\r\n    local function MItem(menu, id, text, help, bmp)\r\n        local m = wx.wxMenuItem(menu, id, text, help)\r\n        m:SetBitmap(bmp)\r\n        bmp:delete()\r\n        return m\r\n    end\r\n\r\n    local fileMenu = wx.wxMenu(\"\", 0)\r\n    fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_NEW,      \"&New...\\tCtrl-N\",      \"Clear the current puzzle\", wx.wxArtProvider.GetBitmap(wx.wxART_NEW, wx.wxART_TOOLBAR)))\r\n    fileMenu:AppendCheckItem(sudokuGUI.ID_CREATE,              \"&Create...\\tCtrl-T\",   \"Enter the initial values for the puzzle\")\r\n    fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_GENERATE, \"&Generate...\\tCtrl-G\", \"Generate a new puzzle\", wx.wxArtProvider.GetBitmap(wx.wxART_EXECUTABLE_FILE, wx.wxART_TOOLBAR)))\r\n    fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_OPEN,     \"&Open...\\tCtrl-O\",     \"Open a puzzle file\", wx.wxArtProvider.GetBitmap(wx.wxART_FILE_OPEN, wx.wxART_TOOLBAR)))\r\n    fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_SAVEAS,   \"&Save as...\\tCtrl-S\",  \"Save the current puzzle\", wx.wxArtProvider.GetBitmap(wx.wxART_FILE_SAVE_AS, wx.wxART_TOOLBAR)))\r\n    fileMenu:AppendSeparator()\r\n    fileMenu:Append(sudokuGUI.ID_PAGESETUP,    \"Page S&etup...\",    \"Setup the printout page\")\r\n    --fileMenu:Append(sudokuGUI.ID_PRINTSETUP, \"Print Se&tup...\",   \"Setup the printer\")\r\n    fileMenu:Append(sudokuGUI.ID_PRINTPREVIEW, \"Print Pre&view...\", \"Preview the printout\")\r\n    fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_PRINT,        \"&Print...\",         \"Print the puzzle\", wx.wxArtProvider.GetBitmap(wx.wxART_PRINT, wx.wxART_TOOLBAR)))\r\n    fileMenu:AppendSeparator()\r\n    fileMenu:Append(sudokuGUI.ID_EXIT, \"E&xit\\tCtrl-X\", \"Quit the program\")\r\n\r\n    local editMenu = wx.wxMenu(\"\", 0)\r\n    editMenu:Append(sudokuGUI.ID_COPY_PUZZLE, \"Copy puzzle\", \"Copy the puzzle to the clipboard\")\r\n    editMenu:AppendSeparator()\r\n    editMenu:Append(sudokuGUI.ID_RESET, \"Re&set...\\tCtrl-R\", \"Reset the puzzle to the initial state\")\r\n    editMenu:AppendSeparator()\r\n    editMenu:Append(MItem(editMenu, sudokuGUI.ID_UNDO, \"&Undo\\tCtrl-Z\", \"Undo the last entry\", wx.wxArtProvider.GetBitmap(wx.wxART_UNDO, wx.wxART_TOOLBAR)))\r\n    editMenu:Append(MItem(editMenu, sudokuGUI.ID_REDO, \"&Redo\\tCtrl-Y\", \"Redo the last entry\", wx.wxArtProvider.GetBitmap(wx.wxART_REDO, wx.wxART_TOOLBAR)))\r\n    editMenu:AppendSeparator()\r\n    editMenu:Append(sudokuGUI.ID_PREFERENCES, \"P&references...\", \"Show the preferences dialog\")\r\n    editMenu:AppendSeparator()\r\n    editMenu:Append(sudokuGUI.ID_SAVE_PREFERENCES, \"Sa&ve preferences...\", \"Save the preferences\")\r\n\r\n    local viewMenu = wx.wxMenu(\"\", 0)\r\n    viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_ERRORS,   \"Mark &errors\\tCtrl-E\",   \"Mark duplicate values in puzzle\")\r\n    viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_MISTAKES, \"Mark &mistakes\\tCtrl-M\", \"Mark wrong values in puzzle\")\r\n    viewMenu:AppendSeparator()\r\n    viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_TOOLBAR,        \"Show toolbar\",        \"Show the toolbar\")\r\n    viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_TOOLBAR_LABELS, \"Show toolbar labels\", \"Show labels on the toolbar\")\r\n    viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_STATUSBAR,      \"Show statusbar\",      \"Show the statusbar\")\r\n    viewMenu:Check(sudokuGUI.ID_SHOW_TOOLBAR, true)\r\n    viewMenu:Check(sudokuGUI.ID_SHOW_TOOLBAR_LABELS, true)\r\n    viewMenu:Check(sudokuGUI.ID_SHOW_STATUSBAR, true)\r\n\r\n    local possibleMenu = wx.wxMenu(\"\", 0)\r\n    possibleMenu:AppendCheckItem( sudokuGUI.ID_SHOW_POSSIBLE,      \"Show calculated &possible\\tCtrl-P\", \"Show calculated possible values for the cells\")\r\n    possibleMenu:AppendCheckItem( sudokuGUI.ID_SHOW_USER_POSSIBLE, \"Show/Edit pencil marks\\tCtrl-l\", \"Show and edit user set possible values for the cells\")\r\n    possibleMenu:AppendSeparator()\r\n    possibleMenu:AppendCheckItem( sudokuGUI.ID_SHOW_POSSIBLE_LINE, \"Show possible in a &line\",    \"Show possible values for the cells in a line\")\r\n    possibleMenu:AppendSeparator()\r\n    local userPossMenu = wx.wxMenu(\"\", 0)\r\n      userPossMenu:Append( sudokuGUI.ID_USER_POSSIBLE_CLEAR,  \"Clear all...\",  \"Clear all pencil marks\")\r\n      userPossMenu:Append( sudokuGUI.ID_USER_POSSIBLE_SETALL, \"Set all...\",    \"Set all pencil marks\")\r\n      userPossMenu:Append( sudokuGUI.ID_USER_POSSIBLE_INIT,   \"Calculate...\", \"Initialize pencil marks to calculated possible\")\r\n    possibleMenu:Append(sudokuGUI.ID_USER_POSSIBLE_MENU, \"Pencil marks\", userPossMenu, \"Setup user possible values\")\r\n\r\n    possibleMenu:AppendSeparator()\r\n    local possViewMenu = wx.wxMenu(\"\", 0)\r\n      possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_NAKED,  \"Mark &naked groups\",  \"Mark all naked groups in possible values\")\r\n      possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_HIDDEN, \"Mark &hidden groups\", \"Mark all hidden groups in possible values\")\r\n      possViewMenu:AppendSeparator()\r\n      possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_NAKEDPAIRS,     \"Mark naked pairs\",     \"Mark naked pairs in possible values\")\r\n      possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_HIDDENPAIRS,    \"Mark hidden pairs\",    \"Mark hidden pairs in possible values\")\r\n      possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_NAKEDTRIPLETS,  \"Mark naked triplets\",  \"Mark naked triplets in possible values\")\r\n      possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_HIDDENTRIPLETS, \"Mark hidden triplets\", \"Mark hidden triplets in possible values\")\r\n      possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_NAKEDQUADS,     \"Mark naked quads\",     \"Mark naked quads in possible values\")\r\n      possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_HIDDENQUADS,    \"Mark hidden quads\",    \"Mark hidden quads in possible values\")\r\n    possibleMenu:Append(sudokuGUI.ID_SHOW_MENU, \"Mark &groups\", possViewMenu, \"Mark naked/hidden groups\")\r\n\r\n    local solveMenu = wx.wxMenu(\"\", 0)\r\n    solveMenu:Append(sudokuGUI.ID_VERIFY_PUZZLE, \"Verify unique solution...\", \"Verify that the puzzle has only one solution\")\r\n    solveMenu:AppendSeparator()\r\n    solveMenu:Append(sudokuGUI.ID_SHOW_SOLUTION, \"Show solution\", \"Show the solution to the puzzle\")\r\n    solveMenu:AppendSeparator()\r\n    local elimSolveMenu = wx.wxMenu(\"\", 0)\r\n      elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_NAKED, \"Eliminate &naked groups\", \"Eliminate all naked groups from possible values\")\r\n      elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_HIDDEN, \"Eliminate &hidden groups\", \"Eliminate all hidden groups from possible values\")\r\n      elimSolveMenu:AppendSeparator()\r\n      elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_NAKEDPAIRS, \"Eliminate naked pairs\", \"Eliminate naked pairs from possible values\")\r\n      elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_HIDDENPAIRS, \"Eliminate hidden pairs\", \"Eliminate hidden pairs from possible values\")\r\n      elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_NAKEDTRIPLETS, \"Eliminate naked triplets\", \"Eliminate naked triplets from possible values\")\r\n      elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_HIDDENTRIPLETS, \"Eliminate hidden triplets\", \"Eliminate hidden triplets from possible values\")\r\n      elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_NAKEDQUADS, \"Eliminate naked quads\", \"Eliminate naked quads from possible values\")\r\n      elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_HIDDENQUADS, \"Eliminate hidden quads\", \"Eliminate hidden quads from possible values\")\r\n    solveMenu:Append(sudokuGUI.ID_ELIMINATE_MENU, \"&Eliminate groups\", elimSolveMenu, \"Remove possible values using naked and hidden groups\")\r\n    solveMenu:AppendSeparator()\r\n    solveMenu:Append(sudokuGUI.ID_SOLVE_SCANSINGLES, \"Solve (scan singles)\\tCtrl-1\", \"Solve all cells with only one possibility\")\r\n    solveMenu:Append(sudokuGUI.ID_SOLVE_SCANROWS, \"Solve (scan rows)\\tCtrl-2\", \"Solve cells in rows with only one possible value\")\r\n    solveMenu:Append(sudokuGUI.ID_SOLVE_SCANCOLS, \"Solve (scan cols)\\tCtrl-3\", \"Solve cells in cols with only one possible value\")\r\n    solveMenu:Append(sudokuGUI.ID_SOLVE_SCANBLOCKS, \"Solve (scan blocks)\\tCtrl-4\", \"Solve cells in blocks with only one possible value\")\r\n    solveMenu:AppendSeparator()\r\n    solveMenu:Append(sudokuGUI.ID_SOLVE_SCANNING, \"Solve (&scanning)\\tCtrl-L\", \"Solve the puzzle by only scanning\")\r\n    solveMenu:Append(sudokuGUI.ID_SOLVE_BRUTEFORCE, \"Solve (&brute force)\\tCtrl-B\", \"Solve the puzzle by guessing values\")\r\n\r\n    local helpMenu = wx.wxMenu(\"\", 0)\r\n    helpMenu:Append(sudokuGUI.ID_ABOUT, \"&About...\", \"About the wxLuaSudoku Application\")\r\n    helpMenu:Append(MItem(helpMenu, sudokuGUI.ID_HELP, \"&Help...\", \"Help using the wxLuaSudoku application\", wx.wxArtProvider.GetBitmap(wx.wxART_HELP, wx.wxART_TOOLBAR)))\r\n\r\n    local menuBar = wx.wxMenuBar()\r\n    menuBar:Append(fileMenu,     \"&File\")\r\n    menuBar:Append(editMenu,     \"&Edit\")\r\n    menuBar:Append(viewMenu,     \"&View\")\r\n    menuBar:Append(possibleMenu, \"&Possible\")\r\n    menuBar:Append(solveMenu,    \"&Solve\")\r\n    menuBar:Append(helpMenu,     \"&Help\")\r\n\r\n    sudokuGUI.frame:SetMenuBar(menuBar)\r\n\r\n    local toolBar = sudokuGUI.frame:CreateToolBar(wx.wxNO_BORDER + wx.wxTB_TEXT)\r\n    local tbSize = toolBar:GetToolBitmapSize() -- required to force help icon to right size in MSW\r\n    toolBar:AddTool(sudokuGUI.ID_NEW,       \"New\",    wx.wxArtProvider.GetBitmap(wx.wxART_NEW, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"New...\", \"Clear the current puzzle\")\r\n    toolBar:AddCheckTool(sudokuGUI.ID_CREATE, \"Create\", wx.wxArtProvider.GetBitmap(wx.wxART_ADD_BOOKMARK, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, \"Create...\", \"Enter initial values for the puzzle\")\r\n    toolBar:AddTool(sudokuGUI.ID_GENERATE,  \"Generate\", wx.wxArtProvider.GetBitmap(wx.wxART_EXECUTABLE_FILE, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Generate...\", \"Generate a new puzzle\")\r\n    toolBar:AddTool(sudokuGUI.ID_OPEN,      \"Open\",   wx.wxArtProvider.GetBitmap(wx.wxART_FILE_OPEN, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Open...\", \"Open a puzzle file\")\r\n    toolBar:AddTool(sudokuGUI.ID_SAVEAS,    \"Save\",   wx.wxArtProvider.GetBitmap(wx.wxART_FILE_SAVE_AS, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Save as...\", \"Save the current puzzle\")\r\n    toolBar:AddTool(sudokuGUI.ID_PRINT,     \"Print\",  wx.wxArtProvider.GetBitmap(wx.wxART_PRINT, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Print...\", \"Print the puzzle\")\r\n    toolBar:AddSeparator()\r\n    toolBar:AddTool(sudokuGUI.ID_UNDO,      \"Undo\",   wx.wxArtProvider.GetBitmap(wx.wxART_UNDO, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Undo\", \"Undo the last entry\")\r\n    toolBar:AddTool(sudokuGUI.ID_REDO,      \"Redo\",   wx.wxArtProvider.GetBitmap(wx.wxART_REDO, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Redo\", \"Redo the last entry\")\r\n    toolBar:AddSeparator()\r\n    toolBar:AddTool(sudokuGUI.ID_HELP,      \"Help\",   wx.wxArtProvider.GetBitmap(wx.wxART_HELP, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Help...\", \"Help on wxLuaSudoku\")\r\n    toolBar:Realize()\r\n\r\n    sudokuGUI.frame:CreateStatusBar(2)\r\n    local stat_width = sudokuGUI.frame:GetStatusBar():GetTextExtent(\"Step : 00000\")\r\n    sudokuGUI.frame:SetStatusWidths({-1, stat_width})\r\n    sudokuGUI.frame:SetStatusText(\"Welcome to wxLuaSudoku.\", 0)\r\n\r\n    -- ------------------------------------------------------------------------\r\n    -- Use single centralized menu/toolbar event handler\r\n    sudokuGUI.frame:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                            sudokuGUI.OnMenuEvent)\r\n\r\n    -- ------------------------------------------------------------------------\r\n\r\n    local values =\r\n    {\r\n        5,0,0, 8,0,3, 0,6,0,\r\n        1,0,6, 0,9,2, 0,8,5,\r\n        0,0,8, 5,0,7, 0,4,0,\r\n\r\n        0,0,1, 0,3,4, 0,7,0,\r\n        0,9,0, 0,0,8, 1,3,4,\r\n        3,0,0, 0,2,0, 5,9,0,\r\n\r\n        0,0,5, 1,0,0, 0,0,3,\r\n        0,0,0, 0,0,9, 0,0,0,\r\n        0,0,7, 3,0,0, 4,0,9\r\n    }\r\n\r\n    local solution =\r\n    {\r\n        5,4,9, 8,1,3, 2,6,7,\r\n        1,7,6, 4,9,2, 3,8,5,\r\n        2,3,8, 5,6,7, 9,4,1,\r\n\r\n        8,5,1, 9,3,4, 6,7,2,\r\n        7,9,2, 6,5,8, 1,3,4,\r\n        3,6,4, 7,2,1, 5,9,8,\r\n\r\n        9,8,5, 1,4,6, 7,2,3,\r\n        4,1,3, 2,7,9, 8,5,6,\r\n        6,2,7, 3,8,5, 4,1,9\r\n    }\r\n\r\n    local s = sudoku.CreateTable()\r\n    sudoku.SetValues(s, values)\r\n    sudokuGUI.sudokuTables_pos = 1\r\n    sudokuGUI.sudokuTables[1] = s\r\n\r\n    sudokuGUI.sudokuSolnTable = sudoku.CreateTable()\r\n    sudoku.SetValues(sudokuGUI.sudokuSolnTable, solution)\r\n\r\n    sudokuGUI.panel = wx.wxPanel(sudokuGUI.frame, wx.wxID_ANY)\r\n    --sudokuGUI.panel:SetBackgroundColour(wx.wxColour(0,0,0))\r\n    local gridsizer = wx.wxGridSizer(9, 9, 2, 2)\r\n\r\n    for i = 1, 81 do\r\n        local win = sudokuGUI.CreateCellWindow( sudokuGUI.panel, i, size )\r\n        gridsizer:Add(win, 1, wx.wxALL+wx.wxGROW+ wx.wxALIGN_CENTER, 0)\r\n        sudokuGUI.cellWindows[i] = win\r\n    end\r\n\r\n    local topsizer = wx.wxBoxSizer(wx.wxVERTICAL)\r\n    topsizer:Add(gridsizer, 1, wx.wxALL+wx.wxGROW+wx.wxALIGN_CENTER, 0)\r\n    sudokuGUI.panel:SetSizer( topsizer )\r\n    --topsizer:Fit(sudokuGUI.frame)\r\n    --topsizer:SetSizeHints( sudokuGUI.frame )\r\n\r\n    -- ------------------------------------------------------------------------\r\n    -- After being created - connect the size event to help MSW repaint the\r\n    --  child windows\r\n    sudokuGUI.cellWindows[1]:Connect(wx.wxEVT_SIZE,\r\n            function (event)\r\n                local width, height = sudokuGUI.cellWindows[1]:GetClientSizeWH()\r\n                sudokuGUI.GetCellBestSize(width, height)\r\n                sudokuGUI.Refresh()\r\n                event:Skip(true)\r\n            end )\r\n\r\n    -- save the config when closing the frame\r\n    sudokuGUI.frame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n            function (event)\r\n                event:Skip(true) -- allow it to really exit\r\n                sudokuGUI.ConfigSave(false)\r\n            end )\r\n\r\n    local cell_width, cell_height = sudokuGUI.cellWindows[1]:GetClientSizeWH()\r\n    sudokuGUI.GetCellBestSize(cell_width, cell_height)\r\n    --sudokuGUI.UpdateTable()\r\n\r\n    sudokuGUI.frame:SetClientSize(300,300)\r\n    sudokuGUI.block_refresh = false\r\n    sudokuGUI.ConfigLoad()\r\n    sudokuGUI.frame:Show(true)\r\n\r\n    collectgarbage(\"collect\") -- cleanup any locals\r\nend",
    "type": "function"
  }, {
    "id": 1951,
    "text": "sudokuGUI.InitFontsAndColours()",
    "type": "statement:functioncall"
  }, {
    "id": 1952,
    "text": "sudokuGUI.printData:SetPaperId(wx.wxPAPER_LETTER)",
    "type": "statement:functioncall"
  }, {
    "id": 1953,
    "text": "sudokuGUI.pageSetupData:SetMarginTopLeft(wx.wxPoint(25, 25))",
    "type": "statement:functioncall"
  }, {
    "id": 1954,
    "text": "sudokuGUI.pageSetupData:SetMarginBottomRight(wx.wxPoint(25, 25))",
    "type": "statement:functioncall"
  }, {
    "id": 1955,
    "text": "sudokuGUI.frame = wx.wxFrame(wx.NULL, wx.wxID_ANY, \"wxLuaSudoku\",\r\n                                 wx.wxDefaultPosition, wx.wxSize(300,320))",
    "type": "statement:assign"
  }, {
    "id": 1956,
    "text": "sudokuGUI.frame:SetSizeHints(300, 300)",
    "type": "statement:functioncall"
  }, {
    "id": 1957,
    "text": "local bitmap = wx.wxBitmap(sudokuGUIxpmdata)",
    "type": "statement:localassign"
  }, {
    "id": 1958,
    "text": "local icon = wx.wxIcon()",
    "type": "statement:localassign"
  }, {
    "id": 1959,
    "text": "icon:CopyFromBitmap(bitmap)",
    "type": "statement:functioncall"
  }, {
    "id": 1960,
    "text": "sudokuGUI.frame:SetIcon(icon)",
    "type": "statement:functioncall"
  }, {
    "id": 1961,
    "text": "local function MItem(menu, id, text, help, bmp)\r\n        local m = wx.wxMenuItem(menu, id, text, help)\r\n        m:SetBitmap(bmp)\r\n        bmp:delete()\r\n        return m\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 1962,
    "text": "local m = wx.wxMenuItem(menu, id, text, help)",
    "type": "statement:localassign"
  }, {
    "id": 1963,
    "text": "m:SetBitmap(bmp)",
    "type": "statement:functioncall"
  }, {
    "id": 1964,
    "text": "bmp:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 1965,
    "text": "local fileMenu = wx.wxMenu(\"\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 1966,
    "text": "fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_NEW,      \"&New...\\tCtrl-N\",      \"Clear the current puzzle\", wx.wxArtProvider.GetBitmap(wx.wxART_NEW, wx.wxART_TOOLBAR)))",
    "type": "statement:functioncall"
  }, {
    "id": 1967,
    "text": "fileMenu:AppendCheckItem(sudokuGUI.ID_CREATE,              \"&Create...\\tCtrl-T\",   \"Enter the initial values for the puzzle\")",
    "type": "statement:functioncall"
  }, {
    "id": 1968,
    "text": "fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_GENERATE, \"&Generate...\\tCtrl-G\", \"Generate a new puzzle\", wx.wxArtProvider.GetBitmap(wx.wxART_EXECUTABLE_FILE, wx.wxART_TOOLBAR)))",
    "type": "statement:functioncall"
  }, {
    "id": 1969,
    "text": "fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_OPEN,     \"&Open...\\tCtrl-O\",     \"Open a puzzle file\", wx.wxArtProvider.GetBitmap(wx.wxART_FILE_OPEN, wx.wxART_TOOLBAR)))",
    "type": "statement:functioncall"
  }, {
    "id": 1970,
    "text": "fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_SAVEAS,   \"&Save as...\\tCtrl-S\",  \"Save the current puzzle\", wx.wxArtProvider.GetBitmap(wx.wxART_FILE_SAVE_AS, wx.wxART_TOOLBAR)))",
    "type": "statement:functioncall"
  }, {
    "id": 1971,
    "text": "fileMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 1972,
    "text": "fileMenu:Append(sudokuGUI.ID_PAGESETUP,    \"Page S&etup...\",    \"Setup the printout page\")",
    "type": "statement:functioncall"
  }, {
    "id": 1973,
    "text": "fileMenu:Append(sudokuGUI.ID_PRINTPREVIEW, \"Print Pre&view...\", \"Preview the printout\")",
    "type": "statement:functioncall"
  }, {
    "id": 1974,
    "text": "fileMenu:Append(MItem(fileMenu, sudokuGUI.ID_PRINT,        \"&Print...\",         \"Print the puzzle\", wx.wxArtProvider.GetBitmap(wx.wxART_PRINT, wx.wxART_TOOLBAR)))",
    "type": "statement:functioncall"
  }, {
    "id": 1975,
    "text": "fileMenu:Append(sudokuGUI.ID_EXIT, \"E&xit\\tCtrl-X\", \"Quit the program\")",
    "type": "statement:functioncall"
  }, {
    "id": 1976,
    "text": "local editMenu = wx.wxMenu(\"\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 1977,
    "text": "editMenu:Append(sudokuGUI.ID_COPY_PUZZLE, \"Copy puzzle\", \"Copy the puzzle to the clipboard\")",
    "type": "statement:functioncall"
  }, {
    "id": 1978,
    "text": "editMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 1979,
    "text": "editMenu:Append(sudokuGUI.ID_RESET, \"Re&set...\\tCtrl-R\", \"Reset the puzzle to the initial state\")",
    "type": "statement:functioncall"
  }, {
    "id": 1980,
    "text": "editMenu:Append(MItem(editMenu, sudokuGUI.ID_UNDO, \"&Undo\\tCtrl-Z\", \"Undo the last entry\", wx.wxArtProvider.GetBitmap(wx.wxART_UNDO, wx.wxART_TOOLBAR)))",
    "type": "statement:functioncall"
  }, {
    "id": 1981,
    "text": "editMenu:Append(MItem(editMenu, sudokuGUI.ID_REDO, \"&Redo\\tCtrl-Y\", \"Redo the last entry\", wx.wxArtProvider.GetBitmap(wx.wxART_REDO, wx.wxART_TOOLBAR)))",
    "type": "statement:functioncall"
  }, {
    "id": 1982,
    "text": "editMenu:Append(sudokuGUI.ID_PREFERENCES, \"P&references...\", \"Show the preferences dialog\")",
    "type": "statement:functioncall"
  }, {
    "id": 1983,
    "text": "editMenu:Append(sudokuGUI.ID_SAVE_PREFERENCES, \"Sa&ve preferences...\", \"Save the preferences\")",
    "type": "statement:functioncall"
  }, {
    "id": 1984,
    "text": "local viewMenu = wx.wxMenu(\"\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 1985,
    "text": "viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_ERRORS,   \"Mark &errors\\tCtrl-E\",   \"Mark duplicate values in puzzle\")",
    "type": "statement:functioncall"
  }, {
    "id": 1986,
    "text": "viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_MISTAKES, \"Mark &mistakes\\tCtrl-M\", \"Mark wrong values in puzzle\")",
    "type": "statement:functioncall"
  }, {
    "id": 1987,
    "text": "viewMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 1988,
    "text": "viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_TOOLBAR,        \"Show toolbar\",        \"Show the toolbar\")",
    "type": "statement:functioncall"
  }, {
    "id": 1989,
    "text": "viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_TOOLBAR_LABELS, \"Show toolbar labels\", \"Show labels on the toolbar\")",
    "type": "statement:functioncall"
  }, {
    "id": 1990,
    "text": "viewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_STATUSBAR,      \"Show statusbar\",      \"Show the statusbar\")",
    "type": "statement:functioncall"
  }, {
    "id": 1991,
    "text": "viewMenu:Check(sudokuGUI.ID_SHOW_TOOLBAR, true)",
    "type": "statement:functioncall"
  }, {
    "id": 1992,
    "text": "viewMenu:Check(sudokuGUI.ID_SHOW_TOOLBAR_LABELS, true)",
    "type": "statement:functioncall"
  }, {
    "id": 1993,
    "text": "viewMenu:Check(sudokuGUI.ID_SHOW_STATUSBAR, true)",
    "type": "statement:functioncall"
  }, {
    "id": 1994,
    "text": "local possibleMenu = wx.wxMenu(\"\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 1995,
    "text": "possibleMenu:AppendCheckItem( sudokuGUI.ID_SHOW_POSSIBLE,      \"Show calculated &possible\\tCtrl-P\", \"Show calculated possible values for the cells\")",
    "type": "statement:functioncall"
  }, {
    "id": 1996,
    "text": "possibleMenu:AppendCheckItem( sudokuGUI.ID_SHOW_USER_POSSIBLE, \"Show/Edit pencil marks\\tCtrl-l\", \"Show and edit user set possible values for the cells\")",
    "type": "statement:functioncall"
  }, {
    "id": 1997,
    "text": "possibleMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 1998,
    "text": "possibleMenu:AppendCheckItem( sudokuGUI.ID_SHOW_POSSIBLE_LINE, \"Show possible in a &line\",    \"Show possible values for the cells in a line\")",
    "type": "statement:functioncall"
  }, {
    "id": 1999,
    "text": "local userPossMenu = wx.wxMenu(\"\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 2000,
    "text": "userPossMenu:Append( sudokuGUI.ID_USER_POSSIBLE_CLEAR,  \"Clear all...\",  \"Clear all pencil marks\")",
    "type": "statement:functioncall"
  }, {
    "id": 2001,
    "text": "userPossMenu:Append( sudokuGUI.ID_USER_POSSIBLE_SETALL, \"Set all...\",    \"Set all pencil marks\")",
    "type": "statement:functioncall"
  }, {
    "id": 2002,
    "text": "userPossMenu:Append( sudokuGUI.ID_USER_POSSIBLE_INIT,   \"Calculate...\", \"Initialize pencil marks to calculated possible\")",
    "type": "statement:functioncall"
  }, {
    "id": 2003,
    "text": "possibleMenu:Append(sudokuGUI.ID_USER_POSSIBLE_MENU, \"Pencil marks\", userPossMenu, \"Setup user possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2004,
    "text": "local possViewMenu = wx.wxMenu(\"\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 2005,
    "text": "possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_NAKED,  \"Mark &naked groups\",  \"Mark all naked groups in possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2006,
    "text": "possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_HIDDEN, \"Mark &hidden groups\", \"Mark all hidden groups in possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2007,
    "text": "possViewMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 2008,
    "text": "possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_NAKEDPAIRS,     \"Mark naked pairs\",     \"Mark naked pairs in possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2009,
    "text": "possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_HIDDENPAIRS,    \"Mark hidden pairs\",    \"Mark hidden pairs in possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2010,
    "text": "possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_NAKEDTRIPLETS,  \"Mark naked triplets\",  \"Mark naked triplets in possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2011,
    "text": "possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_HIDDENTRIPLETS, \"Mark hidden triplets\", \"Mark hidden triplets in possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2012,
    "text": "possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_NAKEDQUADS,     \"Mark naked quads\",     \"Mark naked quads in possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2013,
    "text": "possViewMenu:AppendCheckItem( sudokuGUI.ID_SHOW_HIDDENQUADS,    \"Mark hidden quads\",    \"Mark hidden quads in possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2014,
    "text": "possibleMenu:Append(sudokuGUI.ID_SHOW_MENU, \"Mark &groups\", possViewMenu, \"Mark naked/hidden groups\")",
    "type": "statement:functioncall"
  }, {
    "id": 2015,
    "text": "local solveMenu = wx.wxMenu(\"\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 2016,
    "text": "solveMenu:Append(sudokuGUI.ID_VERIFY_PUZZLE, \"Verify unique solution...\", \"Verify that the puzzle has only one solution\")",
    "type": "statement:functioncall"
  }, {
    "id": 2017,
    "text": "solveMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 2018,
    "text": "solveMenu:Append(sudokuGUI.ID_SHOW_SOLUTION, \"Show solution\", \"Show the solution to the puzzle\")",
    "type": "statement:functioncall"
  }, {
    "id": 2019,
    "text": "local elimSolveMenu = wx.wxMenu(\"\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 2020,
    "text": "elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_NAKED, \"Eliminate &naked groups\", \"Eliminate all naked groups from possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2021,
    "text": "elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_HIDDEN, \"Eliminate &hidden groups\", \"Eliminate all hidden groups from possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2022,
    "text": "elimSolveMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 2023,
    "text": "elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_NAKEDPAIRS, \"Eliminate naked pairs\", \"Eliminate naked pairs from possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2024,
    "text": "elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_HIDDENPAIRS, \"Eliminate hidden pairs\", \"Eliminate hidden pairs from possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2025,
    "text": "elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_NAKEDTRIPLETS, \"Eliminate naked triplets\", \"Eliminate naked triplets from possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2026,
    "text": "elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_HIDDENTRIPLETS, \"Eliminate hidden triplets\", \"Eliminate hidden triplets from possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2027,
    "text": "elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_NAKEDQUADS, \"Eliminate naked quads\", \"Eliminate naked quads from possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2028,
    "text": "elimSolveMenu:AppendCheckItem(sudokuGUI.ID_ELIMINATE_HIDDENQUADS, \"Eliminate hidden quads\", \"Eliminate hidden quads from possible values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2029,
    "text": "solveMenu:Append(sudokuGUI.ID_ELIMINATE_MENU, \"&Eliminate groups\", elimSolveMenu, \"Remove possible values using naked and hidden groups\")",
    "type": "statement:functioncall"
  }, {
    "id": 2030,
    "text": "solveMenu:Append(sudokuGUI.ID_SOLVE_SCANSINGLES, \"Solve (scan singles)\\tCtrl-1\", \"Solve all cells with only one possibility\")",
    "type": "statement:functioncall"
  }, {
    "id": 2031,
    "text": "solveMenu:Append(sudokuGUI.ID_SOLVE_SCANROWS, \"Solve (scan rows)\\tCtrl-2\", \"Solve cells in rows with only one possible value\")",
    "type": "statement:functioncall"
  }, {
    "id": 2032,
    "text": "solveMenu:Append(sudokuGUI.ID_SOLVE_SCANCOLS, \"Solve (scan cols)\\tCtrl-3\", \"Solve cells in cols with only one possible value\")",
    "type": "statement:functioncall"
  }, {
    "id": 2033,
    "text": "solveMenu:Append(sudokuGUI.ID_SOLVE_SCANBLOCKS, \"Solve (scan blocks)\\tCtrl-4\", \"Solve cells in blocks with only one possible value\")",
    "type": "statement:functioncall"
  }, {
    "id": 2034,
    "text": "solveMenu:Append(sudokuGUI.ID_SOLVE_SCANNING, \"Solve (&scanning)\\tCtrl-L\", \"Solve the puzzle by only scanning\")",
    "type": "statement:functioncall"
  }, {
    "id": 2035,
    "text": "solveMenu:Append(sudokuGUI.ID_SOLVE_BRUTEFORCE, \"Solve (&brute force)\\tCtrl-B\", \"Solve the puzzle by guessing values\")",
    "type": "statement:functioncall"
  }, {
    "id": 2036,
    "text": "local helpMenu = wx.wxMenu(\"\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 2037,
    "text": "helpMenu:Append(sudokuGUI.ID_ABOUT, \"&About...\", \"About the wxLuaSudoku Application\")",
    "type": "statement:functioncall"
  }, {
    "id": 2038,
    "text": "helpMenu:Append(MItem(helpMenu, sudokuGUI.ID_HELP, \"&Help...\", \"Help using the wxLuaSudoku application\", wx.wxArtProvider.GetBitmap(wx.wxART_HELP, wx.wxART_TOOLBAR)))",
    "type": "statement:functioncall"
  }, {
    "id": 2039,
    "text": "local menuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 2040,
    "text": "menuBar:Append(fileMenu,     \"&File\")",
    "type": "statement:functioncall"
  }, {
    "id": 2041,
    "text": "menuBar:Append(editMenu,     \"&Edit\")",
    "type": "statement:functioncall"
  }, {
    "id": 2042,
    "text": "menuBar:Append(viewMenu,     \"&View\")",
    "type": "statement:functioncall"
  }, {
    "id": 2043,
    "text": "menuBar:Append(possibleMenu, \"&Possible\")",
    "type": "statement:functioncall"
  }, {
    "id": 2044,
    "text": "menuBar:Append(solveMenu,    \"&Solve\")",
    "type": "statement:functioncall"
  }, {
    "id": 2045,
    "text": "menuBar:Append(helpMenu,     \"&Help\")",
    "type": "statement:functioncall"
  }, {
    "id": 2046,
    "text": "sudokuGUI.frame:SetMenuBar(menuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 2047,
    "text": "local toolBar = sudokuGUI.frame:CreateToolBar(wx.wxNO_BORDER + wx.wxTB_TEXT)",
    "type": "statement:localassign"
  }, {
    "id": 2048,
    "text": "local tbSize = toolBar:GetToolBitmapSize()",
    "type": "statement:localassign"
  }, {
    "id": 2049,
    "text": "toolBar:AddTool(sudokuGUI.ID_NEW,       \"New\",    wx.wxArtProvider.GetBitmap(wx.wxART_NEW, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"New...\", \"Clear the current puzzle\")",
    "type": "statement:functioncall"
  }, {
    "id": 2050,
    "text": "toolBar:AddCheckTool(sudokuGUI.ID_CREATE, \"Create\", wx.wxArtProvider.GetBitmap(wx.wxART_ADD_BOOKMARK, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, \"Create...\", \"Enter initial values for the puzzle\")",
    "type": "statement:functioncall"
  }, {
    "id": 2051,
    "text": "toolBar:AddTool(sudokuGUI.ID_GENERATE,  \"Generate\", wx.wxArtProvider.GetBitmap(wx.wxART_EXECUTABLE_FILE, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Generate...\", \"Generate a new puzzle\")",
    "type": "statement:functioncall"
  }, {
    "id": 2052,
    "text": "toolBar:AddTool(sudokuGUI.ID_OPEN,      \"Open\",   wx.wxArtProvider.GetBitmap(wx.wxART_FILE_OPEN, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Open...\", \"Open a puzzle file\")",
    "type": "statement:functioncall"
  }, {
    "id": 2053,
    "text": "toolBar:AddTool(sudokuGUI.ID_SAVEAS,    \"Save\",   wx.wxArtProvider.GetBitmap(wx.wxART_FILE_SAVE_AS, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Save as...\", \"Save the current puzzle\")",
    "type": "statement:functioncall"
  }, {
    "id": 2054,
    "text": "toolBar:AddTool(sudokuGUI.ID_PRINT,     \"Print\",  wx.wxArtProvider.GetBitmap(wx.wxART_PRINT, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Print...\", \"Print the puzzle\")",
    "type": "statement:functioncall"
  }, {
    "id": 2055,
    "text": "toolBar:AddSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 2056,
    "text": "toolBar:AddTool(sudokuGUI.ID_UNDO,      \"Undo\",   wx.wxArtProvider.GetBitmap(wx.wxART_UNDO, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Undo\", \"Undo the last entry\")",
    "type": "statement:functioncall"
  }, {
    "id": 2057,
    "text": "toolBar:AddTool(sudokuGUI.ID_REDO,      \"Redo\",   wx.wxArtProvider.GetBitmap(wx.wxART_REDO, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Redo\", \"Redo the last entry\")",
    "type": "statement:functioncall"
  }, {
    "id": 2058,
    "text": "toolBar:AddTool(sudokuGUI.ID_HELP,      \"Help\",   wx.wxArtProvider.GetBitmap(wx.wxART_HELP, wx.wxART_TOOLBAR, tbSize), wx.wxNullBitmap, wx.wxITEM_NORMAL, \"Help...\", \"Help on wxLuaSudoku\")",
    "type": "statement:functioncall"
  }, {
    "id": 2059,
    "text": "toolBar:Realize()",
    "type": "statement:functioncall"
  }, {
    "id": 2060,
    "text": "sudokuGUI.frame:CreateStatusBar(2)",
    "type": "statement:functioncall"
  }, {
    "id": 2061,
    "text": "local stat_width = sudokuGUI.frame:GetStatusBar():GetTextExtent(\"Step : 00000\")",
    "type": "statement:localassign"
  }, {
    "id": 2062,
    "text": "sudokuGUI.frame:SetStatusWidths({-1, stat_width})",
    "type": "statement:functioncall"
  }, {
    "id": 2063,
    "text": "sudokuGUI.frame:SetStatusText(\"Welcome to wxLuaSudoku.\", 0)",
    "type": "statement:functioncall"
  }, {
    "id": 2064,
    "text": "sudokuGUI.frame:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                            sudokuGUI.OnMenuEvent)",
    "type": "statement:functioncall"
  }, {
    "id": 2065,
    "text": "local values =\r\n    {\r\n        5,0,0, 8,0,3, 0,6,0,\r\n        1,0,6, 0,9,2, 0,8,5,\r\n        0,0,8, 5,0,7, 0,4,0,\r\n\r\n        0,0,1, 0,3,4, 0,7,0,\r\n        0,9,0, 0,0,8, 1,3,4,\r\n        3,0,0, 0,2,0, 5,9,0,\r\n\r\n        0,0,5, 1,0,0, 0,0,3,\r\n        0,0,0, 0,0,9, 0,0,0,\r\n        0,0,7, 3,0,0, 4,0,9\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 2066,
    "text": "local solution =\r\n    {\r\n        5,4,9, 8,1,3, 2,6,7,\r\n        1,7,6, 4,9,2, 3,8,5,\r\n        2,3,8, 5,6,7, 9,4,1,\r\n\r\n        8,5,1, 9,3,4, 6,7,2,\r\n        7,9,2, 6,5,8, 1,3,4,\r\n        3,6,4, 7,2,1, 5,9,8,\r\n\r\n        9,8,5, 1,4,6, 7,2,3,\r\n        4,1,3, 2,7,9, 8,5,6,\r\n        6,2,7, 3,8,5, 4,1,9\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 2067,
    "text": "sudokuGUI.sudokuTables[1] = s",
    "type": "statement:assign"
  }, {
    "id": 2068,
    "text": "sudokuGUI.sudokuSolnTable = sudoku.CreateTable()",
    "type": "statement:assign"
  }, {
    "id": 2069,
    "text": "sudoku.SetValues(sudokuGUI.sudokuSolnTable, solution)",
    "type": "statement:functioncall"
  }, {
    "id": 2070,
    "text": "sudokuGUI.panel = wx.wxPanel(sudokuGUI.frame, wx.wxID_ANY)",
    "type": "statement:assign"
  }, {
    "id": 2071,
    "text": "local gridsizer = wx.wxGridSizer(9, 9, 2, 2)",
    "type": "statement:localassign"
  }, {
    "id": 2072,
    "text": "for i = 1, 81 do\r\n        local win = sudokuGUI.CreateCellWindow( sudokuGUI.panel, i, size )\r\n        gridsizer:Add(win, 1, wx.wxALL+wx.wxGROW+ wx.wxALIGN_CENTER, 0)\r\n        sudokuGUI.cellWindows[i] = win\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 2073,
    "text": "local win = sudokuGUI.CreateCellWindow( sudokuGUI.panel, i, size )",
    "type": "statement:localassign"
  }, {
    "id": 2074,
    "text": "gridsizer:Add(win, 1, wx.wxALL+wx.wxGROW+ wx.wxALIGN_CENTER, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 2075,
    "text": "sudokuGUI.cellWindows[i] = win",
    "type": "statement:assign"
  }, {
    "id": 2076,
    "text": "local topsizer = wx.wxBoxSizer(wx.wxVERTICAL)",
    "type": "statement:localassign"
  }, {
    "id": 2077,
    "text": "topsizer:Add(gridsizer, 1, wx.wxALL+wx.wxGROW+wx.wxALIGN_CENTER, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 2078,
    "text": "sudokuGUI.panel:SetSizer( topsizer )",
    "type": "statement:functioncall"
  }, {
    "id": 2079,
    "text": "sudokuGUI.cellWindows[1]:Connect(wx.wxEVT_SIZE,\r\n            function (event)\r\n                local width, height = sudokuGUI.cellWindows[1]:GetClientSizeWH()\r\n                sudokuGUI.GetCellBestSize(width, height)\r\n                sudokuGUI.Refresh()\r\n                event:Skip(true)\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 2080,
    "text": "event:Skip(true)",
    "type": "statement:functioncall"
  }, {
    "id": 2081,
    "text": "sudokuGUI.frame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n            function (event)\r\n                event:Skip(true) -- allow it to really exit\r\n                sudokuGUI.ConfigSave(false)\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 2082,
    "text": "sudokuGUI.ConfigSave(false)",
    "type": "statement:functioncall"
  }, {
    "id": 2083,
    "text": "local cell_width, cell_height = sudokuGUI.cellWindows[1]:GetClientSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 2084,
    "text": "sudokuGUI.GetCellBestSize(cell_width, cell_height)",
    "type": "statement:functioncall"
  }, {
    "id": 2085,
    "text": "sudokuGUI.frame:SetClientSize(300,300)",
    "type": "statement:functioncall"
  }, {
    "id": 2086,
    "text": "sudokuGUI.ConfigLoad()",
    "type": "statement:functioncall"
  }, {
    "id": 2087,
    "text": "sudokuGUI.frame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 2088,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 2089,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2090,
    "text": "local function MItem(menu, id, text, help, bmp)\r\n        local m = wx.wxMenuItem(menu, id, text, help)\r\n        m:SetBitmap(bmp)\r\n        bmp:delete()\r\n        return m\r\n    end",
    "type": "function"
  }, {
    "id": 2091,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2092,
    "text": "function ProfileBegin()\r\n    Profile_Counters = {}\r\n    Profile_Names = {}\r\n    local function hook ()\r\n      local f = debug.getinfo(2, \"f\").func\r\n      if Profile_Counters[f] == nil then    -- first time `f' is called?\r\n        Profile_Counters[f] = 1\r\n        Profile_Names[f] = debug.getinfo(2, \"Sn\")\r\n        --TableDump(Profile_Names[f])\r\n      else  -- only increment the counter\r\n        Profile_Counters[f] = Profile_Counters[f] + 1\r\n      end\r\n    end\r\n\r\n    debug.sethook(hook, \"c\")  -- turn on the hook\r\nend",
    "type": "function"
  }, {
    "id": 2093,
    "text": "Profile_Counters = {}",
    "type": "statement:assign"
  }, {
    "id": 2094,
    "text": "Profile_Names = {}",
    "type": "statement:assign"
  }, {
    "id": 2095,
    "text": "local function hook ()\r\n      local f = debug.getinfo(2, \"f\").func\r\n      if Profile_Counters[f] == nil then    -- first time `f' is called?\r\n        Profile_Counters[f] = 1\r\n        Profile_Names[f] = debug.getinfo(2, \"Sn\")\r\n        --TableDump(Profile_Names[f])\r\n      else  -- only increment the counter\r\n        Profile_Counters[f] = Profile_Counters[f] + 1\r\n      end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 2096,
    "text": "local f = debug.getinfo(2, \"f\").func",
    "type": "statement:localassign"
  }, {
    "id": 2097,
    "text": "if Profile_Counters[f] == nil then    -- first time `f' is called?\r\n        Profile_Counters[f] = 1\r\n        Profile_Names[f] = debug.getinfo(2, \"Sn\")\r\n        --TableDump(Profile_Names[f])\r\n      else  -- only increment the counter\r\n        Profile_Counters[f] = Profile_Counters[f] + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 2098,
    "text": "Profile_Counters[f] = 1",
    "type": "statement:assign"
  }, {
    "id": 2099,
    "text": "Profile_Names[f] = debug.getinfo(2, \"Sn\")",
    "type": "statement:assign"
  }, {
    "id": 2100,
    "text": "Profile_Counters[f] = Profile_Counters[f] + 1",
    "type": "statement:assign"
  }, {
    "id": 2101,
    "text": "debug.sethook(hook, \"c\")",
    "type": "statement:functioncall"
  }, {
    "id": 2102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2103,
    "text": "local function hook ()\r\n      local f = debug.getinfo(2, \"f\").func\r\n      if Profile_Counters[f] == nil then    -- first time `f' is called?\r\n        Profile_Counters[f] = 1\r\n        Profile_Names[f] = debug.getinfo(2, \"Sn\")\r\n        --TableDump(Profile_Names[f])\r\n      else  -- only increment the counter\r\n        Profile_Counters[f] = Profile_Counters[f] + 1\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 2104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2105,
    "text": "function ProfileEnd()\r\n    debug.sethook()   -- turn off the hook\r\n    function getname (func)\r\n      local n = Profile_Names[func]\r\n      if n.what == \"C\" then\r\n        return n.name\r\n      end\r\n      local loc = string.format(\"[%s]:%s\", n.short_src, n.linedefined)\r\n      if n.namewhat ~= \"\" then\r\n        return string.format(\"%s (%s)\", loc, n.name)\r\n      else\r\n        return string.format(\"%s\", loc)\r\n      end\r\n    end\r\n    for func, count in pairs(Profile_Counters) do\r\n      print(getname(func), count)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 2106,
    "text": "debug.sethook()",
    "type": "statement:functioncall"
  }, {
    "id": 2107,
    "text": "function getname (func)\r\n      local n = Profile_Names[func]\r\n      if n.what == \"C\" then\r\n        return n.name\r\n      end\r\n      local loc = string.format(\"[%s]:%s\", n.short_src, n.linedefined)\r\n      if n.namewhat ~= \"\" then\r\n        return string.format(\"%s (%s)\", loc, n.name)\r\n      else\r\n        return string.format(\"%s\", loc)\r\n      end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 2108,
    "text": "local n = Profile_Names[func]",
    "type": "statement:localassign"
  }, {
    "id": 2109,
    "text": "if n.what == \"C\" then\r\n        return n.name\r\n      end",
    "type": "statement:if"
  }, {
    "id": 2110,
    "text": "local loc = string.format(\"[%s]:%s\", n.short_src, n.linedefined)",
    "type": "statement:localassign"
  }, {
    "id": 2111,
    "text": "if n.namewhat ~= \"\" then\r\n        return string.format(\"%s (%s)\", loc, n.name)\r\n      else\r\n        return string.format(\"%s\", loc)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 2112,
    "text": "for func, count in pairs(Profile_Counters) do\r\n      print(getname(func), count)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 2113,
    "text": "print(getname(func), count)",
    "type": "statement:functioncall"
  }, {
    "id": 2114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2115,
    "text": "function getname (func)\r\n      local n = Profile_Names[func]\r\n      if n.what == \"C\" then\r\n        return n.name\r\n      end\r\n      local loc = string.format(\"[%s]:%s\", n.short_src, n.linedefined)\r\n      if n.namewhat ~= \"\" then\r\n        return string.format(\"%s (%s)\", loc, n.name)\r\n      else\r\n        return string.format(\"%s\", loc)\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 2116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2117,
    "text": "function(event) end",
    "type": "function"
  }, {
    "id": 2118,
    "text": "function (event)\r\n                    previewFrame:Destroy()\r\n                    event:Skip()\r\n                end",
    "type": "function"
  }, {
    "id": 2119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2120,
    "text": "function (event)\r\n                local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n                sudokuGUI.SaveCellTextCtrlValue()\r\n                win:Show(false) -- just hide it, we'll destroy it later\r\n            end",
    "type": "function"
  }, {
    "id": 2121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2122,
    "text": "function (event)\r\n                if (event:GetKeyCode() == wx.WXK_ESCAPE) then\r\n                    sudokuGUI.cellTextCtrl:Show(false)\r\n                    sudokuGUI.cellTextCtrl:SetValue(\"\")\r\n                end\r\n                event:Skip()\r\n            end",
    "type": "function"
  }, {
    "id": 2123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2124,
    "text": "function (event)\r\n            local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n            local sel = fcListBox:GetSelection() + 1\r\n            local width, height = win:GetClientSizeWH()\r\n            local dc = wx.wxPaintDC(win)\r\n\r\n            local function SetFontSize(size, width, height, font)\r\n                -- alternate way, but it fails for fonts that can't scale large enough\r\n                --local f = wx.wxNullFont:NewSize(wx.wxSize(width, height), font:GetFamily(), font:GetStyle(), font:GetWeight(), font:GetUnderlined(), font:GetFaceName())\r\n                --font:SetPointSize(f:GetPointSize())\r\n\r\n                local font_width = 0\r\n                local font_height = 0\r\n                while (font_width < width) and (font_height < height) do\r\n                    font:SetPointSize(size)\r\n                    dc:SetFont(font)\r\n                    font_width, font_height = dc:GetTextExtent(\"5\")\r\n                    size = size + 2\r\n                    if size > 200 then break end -- oops bad font?\r\n                end\r\n                font:SetPointSize(size-1)\r\n            end\r\n\r\n            -- clear background\r\n            local c = listBoxValues[sudokuGUI.BACKGROUND_COLOUR].colour\r\n            if (sel == sudokuGUI.ODD_BACKGROUND_COLOUR) or (sel == sudokuGUI.FOCUS_CELL_COLOUR) then\r\n                c = listBoxValues[sel].colour\r\n            end\r\n            local brush = wx.wxBrush(c, wx.wxSOLID)\r\n            dc:SetBrush(brush)\r\n            brush:delete()\r\n            dc:DrawRectangle(0, 0, width, height)\r\n\r\n            -- draw possible values\r\n            dc:SetTextForeground(listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].colour)\r\n            local font = listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font\r\n            if reset_fonts then SetFontSize(4, width/4, height/4, font) end\r\n            dc:SetFont(font)\r\n            local font_width, font_height = dc:GetTextExtent(\"5\")\r\n\r\n            local pos =\r\n            {\r\n                [1] = { x = 2,                  y = 2 },\r\n                [3] = { x = width-font_width-2, y = 2 },\r\n                [4] = { x = 2,                  y = (height-font_height)/2-2 },\r\n                [6] = { x = width-font_width-2, y = (height-font_height)/2-2 },\r\n                [7] = { x = 2,                  y = height-font_height-2 },\r\n                [9] = { x = width-font_width-2, y = height-font_height-2 }\r\n            }\r\n\r\n            dc:SetBrush(wx.wxTRANSPARENT_BRUSH)\r\n\r\n            local function DrawPossible(idx, n, value, hidden)\r\n                dc:DrawText(value, pos[n].x, pos[n].y)\r\n                local pen = wx.wxPen(listBoxValues[idx].colour, 1, wx.wxSOLID)\r\n                dc:SetPen(pen); pen:delete()\r\n                if hidden ~= true then\r\n                    dc:DrawRectangle(pos[n].x, pos[n].y, font_width, font_height)\r\n                else\r\n                    dc:DrawRoundedRectangle(pos[n].x, pos[n].y, font_width, font_height, 20)\r\n                end\r\n            end\r\n\r\n            DrawPossible(sudokuGUI.NAKED_PAIRS_COLOUR,     1, \"2\")\r\n            DrawPossible(sudokuGUI.NAKED_TRIPLETS_COLOUR,  4, \"3\")\r\n            DrawPossible(sudokuGUI.NAKED_QUADS_COLOUR,     7, \"4\")\r\n            DrawPossible(sudokuGUI.HIDDEN_PAIRS_COLOUR,    3, \"2\", true)\r\n            DrawPossible(sudokuGUI.HIDDEN_TRIPLETS_COLOUR, 6, \"3\", true)\r\n            DrawPossible(sudokuGUI.HIDDEN_QUADS_COLOUR,    9, \"4\", true)\r\n\r\n            -- draw invalid marker\r\n            local pen = wx.wxPen(listBoxValues[sudokuGUI.INVALID_VALUE_COLOUR].colour, 1, wx.wxSOLID)\r\n            dc:SetPen(pen); pen:delete()\r\n            dc:DrawLine(0, 0, width, height)\r\n\r\n            -- draw value\r\n            if (sel == sudokuGUI.INIT_VALUE_COLOUR) then\r\n                dc:SetTextForeground(listBoxValues[sudokuGUI.INIT_VALUE_COLOUR].colour)\r\n            else\r\n                dc:SetTextForeground(listBoxValues[sudokuGUI.VALUE_COLOUR].colour)\r\n            end\r\n\r\n            local old_font = font\r\n            local font = listBoxValues[sudokuGUI.VALUE_COLOUR].font\r\n            if reset_fonts then SetFontSize(old_font:GetPointSize(), width-2, height-2, font) end\r\n            dc:SetFont(font)\r\n            local font_width, font_height = dc:GetTextExtent(\"9\")\r\n            dc:DrawText(\"9\", (width-font_width)/2, (height-font_height)/2)\r\n\r\n            reset_fonts = false\r\n            dc:delete()\r\n        end",
    "type": "function"
  }, {
    "id": 2125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2126,
    "text": "function (event)\r\n            local sel = event:GetSelection() + 1\r\n            panel:FindWindow(ID_FONT_BUTTON):Enable(listBoxValues[sel].font ~= nil)\r\n            colourButton:SetForegroundColour(listBoxValues[sel].colour)\r\n            sampleWin:Refresh(false)\r\n        end",
    "type": "function"
  }, {
    "id": 2127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2128,
    "text": "function (event)\r\n            local sel = fcListBox:GetSelection() + 1\r\n            local f = listBoxValues[sel].font\r\n            f = wx.wxGetFontFromUser(panel, f)\r\n            if f:Ok() then\r\n                listBoxValues[sel].font:delete()\r\n                listBoxValues[sel].font = f\r\n                reset_fonts = true\r\n            else\r\n                f:delete()\r\n            end\r\n            sampleWin:Refresh(false)\r\n        end",
    "type": "function"
  }, {
    "id": 2129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2130,
    "text": "function (event)\r\n            local sel = fcListBox:GetSelection() + 1\r\n            local c = listBoxValues[sel].colour\r\n            c = wx.wxGetColourFromUser(panel, c)\r\n            if c:Ok() then\r\n                listBoxValues[sel].colour:delete()\r\n                listBoxValues[sel].colour = c\r\n                colourButton:SetForegroundColour(c)\r\n            else\r\n                c:delete()\r\n            end\r\n            sampleWin:Refresh(false)\r\n        end",
    "type": "function"
  }, {
    "id": 2131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2132,
    "text": "function (event)\r\n            local sel = fcListBox:GetSelection() + 1\r\n\r\n            local ret = wx.wxMessageBox(\r\n                \"Press 'Yes' to reset all the colors and fonts or 'No' to reset only just the selected item.\",\r\n                \"wxLuaSudoku - Reset colors or fonts?\",\r\n                wx.wxYES_NO + wx.wxCANCEL + wx.wxICON_INFORMATION,\r\n                panel )\r\n\r\n            if ret == wx.wxYES then\r\n                for n = 1, sudokuGUI.COLOUR_MAX do\r\n                    listBoxValues[n].colour:delete()\r\n                    listBoxValues[n].colour = wx.wxColour(sudokuGUI.Colours_[n])\r\n                end\r\n\r\n                listBoxValues[sudokuGUI.VALUE_COLOUR].font:delete()\r\n                listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font:delete()\r\n                listBoxValues[sudokuGUI.VALUE_COLOUR].font      = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\n                listBoxValues[sudokuGUI.POSS_VALUE_COLOUR].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n            elseif ret == wx.wxNO then\r\n                listBoxValues[sel].colour:delete()\r\n                listBoxValues[sel].colour = wx.wxColour(sudokuGUI.Colours_[sel])\r\n\r\n                if (sel == sudokuGUI.VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.valueFont_wxfont_)\r\n                elseif (sel == sudokuGUI.POSS_VALUE_COLOUR) then\r\n                    listBoxValues[sel].font:delete()\r\n                    listBoxValues[sel].font = wx.wxFont(sudokuGUI.possibleFont_wxfont_)\r\n                end\r\n            end\r\n\r\n            colourButton:SetForegroundColour(listBoxValues[sel].colour)\r\n            reset_fonts = true\r\n            sampleWin:Refresh(false)\r\n        end",
    "type": "function"
  }, {
    "id": 2133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2134,
    "text": "function (event)\r\n            local sel = event:GetSelection()\r\n            local checked = showListBox:IsChecked(sel)\r\n            local id = listBoxValues[sel+1]\r\n            if id == sudokuGUI.ID_SHOW_NAKED then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 2, 4, checked)\r\n            elseif id == sudokuGUI.ID_SHOW_HIDDEN then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 5, 7, checked)\r\n            else\r\n                showListBox:Check(0, sudokuGUI.CheckListBoxIsChecked(showListBox, 2, 4))\r\n                showListBox:Check(1, sudokuGUI.CheckListBoxIsChecked(showListBox, 5, 7))\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 2135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2136,
    "text": "function (event)\r\n            local sel = event:GetSelection()\r\n            local checked = showListBox:IsChecked(sel)\r\n            local id = listBoxValues[sel+1]\r\n            if id == sudokuGUI.ID_ELIMINATE_NAKED then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 2, 4, checked)\r\n            elseif id == sudokuGUI.ID_ELIMINATE_HIDDEN then\r\n                sudokuGUI.CheckListBoxCheck(showListBox, 5, 7, checked)\r\n            else\r\n                showListBox:Check(0, sudokuGUI.CheckListBoxIsChecked(showListBox, 2, 4))\r\n                showListBox:Check(1, sudokuGUI.CheckListBoxIsChecked(showListBox, 5, 7))\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 2137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2138,
    "text": "function (event)\r\n            --local sel = notebook:GetSelection()\r\n            --if sel >= 0 then notebookPages[sel+1].Apply() end\r\n            for n = 1, #notebookPages do\r\n                notebookPages[n].Apply()\r\n            end\r\n\r\n        end",
    "type": "function"
  }, {
    "id": 2139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2140,
    "text": "function (event)\r\n            for n = 1, #notebookPages do\r\n                notebookPages[n].Apply()\r\n                notebookPages[n].Destroy()\r\n            end\r\n\r\n            event:Skip() -- wxDialog will cancel automatically\r\n        end",
    "type": "function"
  }, {
    "id": 2141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2142,
    "text": "function (event)\r\n            for n = 1, #notebookPages do\r\n                notebookPages[n].Destroy()\r\n            end\r\n\r\n            event:Skip() -- wxDialog will cancel automatically\r\n        end",
    "type": "function"
  }, {
    "id": 2143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2144,
    "text": "function (event)\r\n                local width, height = sudokuGUI.cellWindows[1]:GetClientSizeWH()\r\n                sudokuGUI.GetCellBestSize(width, height)\r\n                sudokuGUI.Refresh()\r\n                event:Skip(true)\r\n            end",
    "type": "function"
  }, {
    "id": 2145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2146,
    "text": "function (event)\r\n                event:Skip(true) -- allow it to really exit\r\n                sudokuGUI.ConfigSave(false)\r\n            end",
    "type": "function"
  }, {
    "id": 2147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 2148,
    "text": "",
    "type": "function container"
  }, {
    "id": 2149,
    "text": "wxClipboard.Get",
    "type": "global function"
  }, {
    "id": 2150,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 2151,
    "text": "wxDialog",
    "type": "global function"
  }, {
    "id": 2152,
    "text": "wxNotebook",
    "type": "global function"
  }, {
    "id": 2153,
    "text": "wxGetFontFromUser",
    "type": "global function"
  }, {
    "id": 2154,
    "text": "wxPrintData",
    "type": "global function"
  }, {
    "id": 2155,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 2156,
    "text": "wxWindow",
    "type": "global function"
  }, {
    "id": 2157,
    "text": "wxRect",
    "type": "global function"
  }, {
    "id": 2158,
    "text": "wxIcon",
    "type": "global function"
  }, {
    "id": 2159,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 2160,
    "text": "wxCommandEvent",
    "type": "global function"
  }, {
    "id": 2161,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 2162,
    "text": "wxPrintDialogData",
    "type": "global function"
  }, {
    "id": 2163,
    "text": "wxBrush",
    "type": "global function"
  }, {
    "id": 2164,
    "text": "wxPen",
    "type": "global function"
  }, {
    "id": 2165,
    "text": "wxFileName",
    "type": "global function"
  }, {
    "id": 2166,
    "text": "wxPrintDialogDataFromPrintData",
    "type": "global function"
  }, {
    "id": 2167,
    "text": "wxProgressDialog",
    "type": "global function"
  }, {
    "id": 2168,
    "text": "wxCheckListBox",
    "type": "global function"
  }, {
    "id": 2169,
    "text": "wxPrinter",
    "type": "global function"
  }, {
    "id": 2170,
    "text": "wxFileDialog",
    "type": "global function"
  }, {
    "id": 2171,
    "text": "wxColour",
    "type": "global function"
  }, {
    "id": 2172,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 2173,
    "text": "wxPrintPreview",
    "type": "global function"
  }, {
    "id": 2174,
    "text": "wxPrintDialog",
    "type": "global function"
  }, {
    "id": 2175,
    "text": "wxBitmap",
    "type": "global function"
  }, {
    "id": 2176,
    "text": "wxPageSetupDialogData",
    "type": "global function"
  }, {
    "id": 2177,
    "text": "wxTextCtrl",
    "type": "global function"
  }, {
    "id": 2178,
    "text": "wxLuaPrintout",
    "type": "global function"
  }, {
    "id": 2179,
    "text": "wxBoxSizer",
    "type": "global function"
  }, {
    "id": 2180,
    "text": "wxClientDC",
    "type": "global function"
  }, {
    "id": 2181,
    "text": "wxListBox",
    "type": "global function"
  }, {
    "id": 2182,
    "text": "wxFont",
    "type": "global function"
  }, {
    "id": 2183,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 2184,
    "text": "wxGetColourFromUser",
    "type": "global function"
  }, {
    "id": 2185,
    "text": "wxHtmlWindow",
    "type": "global function"
  }, {
    "id": 2186,
    "text": "wxPoint",
    "type": "global function"
  }, {
    "id": 2187,
    "text": "wxPanel",
    "type": "global function"
  }, {
    "id": 2188,
    "text": "wxGetNumberFromUser",
    "type": "global function"
  }, {
    "id": 2189,
    "text": "wxMenuItem",
    "type": "global function"
  }, {
    "id": 2190,
    "text": "wxClientDisplayRect",
    "type": "global function"
  }, {
    "id": 2191,
    "text": "wxPageSetupDialog",
    "type": "global function"
  }, {
    "id": 2192,
    "text": "wxGetKeyState",
    "type": "global function"
  }, {
    "id": 2193,
    "text": "wxButton",
    "type": "global function"
  }, {
    "id": 2194,
    "text": "wxArtProvider.GetBitmap",
    "type": "global function"
  }, {
    "id": 2195,
    "text": "wxPaintDC",
    "type": "global function"
  }, {
    "id": 2196,
    "text": "wxGridSizer",
    "type": "global function"
  }, {
    "id": 2197,
    "text": "wxTextDataObject",
    "type": "global function"
  }, {
    "id": 2198,
    "text": "wxFileConfig",
    "type": "global function"
  }, {
    "id": 2199,
    "text": "wxPreviewFrame",
    "type": "global function"
  }, {
    "id": 2200,
    "text": "wxFlexGridSizer",
    "type": "global function"
  }, {
    "id": 2201,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 2202,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 2203,
    "text": "print",
    "type": "global function"
  }, {
    "id": 2204,
    "text": "fmod",
    "type": "global function"
  }, {
    "id": 2205,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 2206,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 2207,
    "text": "sethook",
    "type": "global function"
  }, {
    "id": 2208,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 2209,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 2210,
    "text": "remove_fn",
    "type": "global function"
  }, {
    "id": 2211,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 2212,
    "text": "lines",
    "type": "global function"
  }, {
    "id": 2213,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 2214,
    "text": "randomseed",
    "type": "global function"
  }, {
    "id": 2215,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 2216,
    "text": "len",
    "type": "global function"
  }, {
    "id": 2217,
    "text": "close",
    "type": "global function"
  }, {
    "id": 2218,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 2219,
    "text": "Apply",
    "type": "global function"
  }, {
    "id": 2220,
    "text": "next",
    "type": "global function"
  }, {
    "id": 2221,
    "text": "Destroy",
    "type": "global function"
  }, {
    "id": 2222,
    "text": "match",
    "type": "global function"
  }, {
    "id": 2223,
    "text": "MenuId[id]",
    "type": "global function"
  }, {
    "id": 2224,
    "text": "format",
    "type": "global function"
  }, {
    "id": 2225,
    "text": "time",
    "type": "global function"
  }, {
    "id": 2226,
    "text": "type",
    "type": "global function"
  }, {
    "id": 2227,
    "text": "find",
    "type": "global function"
  }, {
    "id": 2228,
    "text": "random",
    "type": "global function"
  }, {
    "id": 2229,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 2230,
    "text": "open",
    "type": "global function"
  }, {
    "id": 2231,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 2232,
    "text": "char",
    "type": "global function"
  }, {
    "id": 2233,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 2234,
    "text": "band",
    "type": "global function"
  }, {
    "id": 2235,
    "text": "require",
    "type": "global function"
  }, {
    "id": 2236,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2237,
    "text": "",
    "type": "variable container"
  }, {
    "id": 2238,
    "text": "",
    "type": "require container"
  }, {
    "id": 2239,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2240,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2241,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2242,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2243,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2244,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2245,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2246,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2247,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2248,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2249,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2250,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2251,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2252,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2253,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2254,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2255,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2256,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2257,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2258,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2259,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2260,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2261,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2262,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2263,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2264,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2265,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2266,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2267,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2268,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2269,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2270,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2271,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2272,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2273,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2274,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2275,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2276,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2277,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2278,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2279,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2280,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2281,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2282,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2283,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2285,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2286,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2287,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2288,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2289,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2290,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2291,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2292,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2293,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2294,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2295,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2296,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2297,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2298,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2299,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2300,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2301,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2302,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2303,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2304,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2305,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2306,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2307,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2308,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2309,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2310,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2312,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2314,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2316,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2318,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2320,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2322,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2324,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2326,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2328,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2330,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2331,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2332,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2333,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2334,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2335,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2336,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2337,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2338,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2339,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2340,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2341,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2342,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2343,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2344,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2345,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2346,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2347,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2348,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2349,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2350,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2351,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2352,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2353,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2354,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2355,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2356,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2357,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2358,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2359,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2360,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2361,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2362,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2363,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2364,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2365,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2366,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2367,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2368,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2369,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2370,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2371,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2372,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2373,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2374,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2375,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2376,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2377,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2378,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2379,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2380,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2381,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2382,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2383,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2384,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2385,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2386,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2387,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2388,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2389,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2390,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2391,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2392,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2393,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2394,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2395,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2396,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2397,
    "text": "",
    "type": "n/a"
  }, {
    "id": 2398,
    "text": "",
    "type": "global variable"
  }, {
    "id": 2399,
    "text": "",
    "type": "n/a"
  } ]
}