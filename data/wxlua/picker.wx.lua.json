{
  "_filename": "picker.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/picker.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 8
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 36
  }, {
    "from": 24,
    "label": "has",
    "to": 37
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 38
  }, {
    "from": 24,
    "label": "has",
    "to": 39
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 40
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 42
  }, {
    "from": 24,
    "label": "has",
    "to": 43
  }, {
    "from": 24,
    "label": "has",
    "to": 44
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 46
  }, {
    "from": 24,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 50
  }, {
    "from": 24,
    "label": "has",
    "to": 51
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 52
  }, {
    "from": 24,
    "label": "has",
    "to": 53
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 54
  }, {
    "from": 24,
    "label": "has",
    "to": 55
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 56
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 57
  }, {
    "from": 24,
    "label": "has",
    "to": 58
  }, {
    "from": 24,
    "label": "has",
    "to": 59
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 60
  }, {
    "from": 24,
    "label": "has",
    "to": 61
  }, {
    "from": 24,
    "label": "has",
    "to": 62
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 60
  }, {
    "from": 24,
    "label": "has",
    "to": 63
  }, {
    "from": 24,
    "label": "has",
    "to": 64
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 60
  }, {
    "from": 24,
    "label": "has",
    "to": 65
  }, {
    "from": 24,
    "label": "has",
    "to": 66
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 60
  }, {
    "from": 24,
    "label": "has",
    "to": 67
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 68
  }, {
    "from": 24,
    "label": "has",
    "to": 69
  }, {
    "from": 24,
    "label": "has",
    "to": 70
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 71
  }, {
    "from": 24,
    "label": "has",
    "to": 72
  }, {
    "from": 24,
    "label": "has",
    "to": 73
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 71
  }, {
    "from": 24,
    "label": "has",
    "to": 74
  }, {
    "from": 24,
    "label": "has",
    "to": 75
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 71
  }, {
    "from": 24,
    "label": "has",
    "to": 76
  }, {
    "from": 24,
    "label": "has",
    "to": 77
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 71
  }, {
    "from": 24,
    "label": "has",
    "to": 78
  }, {
    "from": 24,
    "label": "has",
    "to": 79
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 71
  }, {
    "from": 24,
    "label": "has",
    "to": 80
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 81
  }, {
    "from": 24,
    "label": "has",
    "to": 82
  }, {
    "from": 24,
    "label": "has",
    "to": 83
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 84
  }, {
    "from": 24,
    "label": "has",
    "to": 85
  }, {
    "from": 24,
    "label": "has",
    "to": 86
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 84
  }, {
    "from": 24,
    "label": "has",
    "to": 87
  }, {
    "from": 24,
    "label": "has",
    "to": 88
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 84
  }, {
    "from": 24,
    "label": "has",
    "to": 89
  }, {
    "from": 24,
    "label": "has",
    "to": 90
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 84
  }, {
    "from": 24,
    "label": "has",
    "to": 91
  }, {
    "from": 24,
    "label": "has",
    "to": 92
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 84
  }, {
    "from": 24,
    "label": "has",
    "to": 93
  }, {
    "from": 24,
    "label": "has",
    "to": 94
  }, {
    "from": 24,
    "label": "has",
    "to": 95
  }, {
    "from": 24,
    "label": "has",
    "to": 96
  }, {
    "from": 24,
    "label": "has",
    "to": 97
  }, {
    "from": 24,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 99,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 99,
    "label": "has",
    "to": 107
  }, {
    "from": 99,
    "label": "has",
    "to": 108
  }, {
    "from": 99,
    "label": "has",
    "to": 109
  }, {
    "from": 99,
    "label": "has",
    "to": 110
  }, {
    "from": 99,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 99,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 99,
    "label": "has",
    "to": 115
  }, {
    "from": 99,
    "label": "has",
    "to": 116
  }, {
    "from": 99,
    "label": "has",
    "to": 117
  }, {
    "from": 99,
    "label": "has",
    "to": 118
  }, {
    "from": 99,
    "label": "has",
    "to": 119
  }, {
    "from": 99,
    "label": "has",
    "to": 120
  }, {
    "from": 99,
    "label": "has",
    "to": 121
  }, {
    "from": 99,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 112
  }, {
    "from": 124,
    "label": "has",
    "to": 114
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 2,
    "label": "calls",
    "to": 147
  }, {
    "from": 10,
    "label": "calls",
    "to": 147
  }, {
    "from": 14,
    "label": "calls",
    "to": 147
  }, {
    "from": 18,
    "label": "calls",
    "to": 147
  }, {
    "from": 24,
    "label": "calls",
    "to": 141
  }, {
    "from": 24,
    "label": "calls",
    "to": 138
  }, {
    "from": 126,
    "label": "calls",
    "to": 149
  }, {
    "from": 24,
    "label": "calls",
    "to": 144
  }, {
    "from": 24,
    "label": "calls",
    "to": 144
  }, {
    "from": 24,
    "label": "calls",
    "to": 144
  }, {
    "from": 24,
    "label": "calls",
    "to": 144
  }, {
    "from": 2,
    "label": "calls",
    "to": 145
  }, {
    "from": 10,
    "label": "calls",
    "to": 145
  }, {
    "from": 14,
    "label": "calls",
    "to": 145
  }, {
    "from": 18,
    "label": "calls",
    "to": 145
  }, {
    "from": 99,
    "label": "calls",
    "to": 135
  }, {
    "from": 126,
    "label": "calls",
    "to": 148
  }, {
    "from": 126,
    "label": "calls",
    "to": 99
  }, {
    "from": 24,
    "label": "calls",
    "to": 143
  }, {
    "from": 24,
    "label": "calls",
    "to": 143
  }, {
    "from": 24,
    "label": "calls",
    "to": 143
  }, {
    "from": 24,
    "label": "calls",
    "to": 143
  }, {
    "from": 24,
    "label": "calls",
    "to": 143
  }, {
    "from": 24,
    "label": "calls",
    "to": 134
  }, {
    "from": 24,
    "label": "calls",
    "to": 134
  }, {
    "from": 24,
    "label": "calls",
    "to": 134
  }, {
    "from": 24,
    "label": "calls",
    "to": 137
  }, {
    "from": 24,
    "label": "calls",
    "to": 137
  }, {
    "from": 24,
    "label": "calls",
    "to": 137
  }, {
    "from": 24,
    "label": "calls",
    "to": 137
  }, {
    "from": 24,
    "label": "calls",
    "to": 137
  }, {
    "from": 99,
    "label": "calls",
    "to": 128
  }, {
    "from": 24,
    "label": "calls",
    "to": 140
  }, {
    "from": 24,
    "label": "calls",
    "to": 140
  }, {
    "from": 24,
    "label": "calls",
    "to": 140
  }, {
    "from": 24,
    "label": "calls",
    "to": 140
  }, {
    "from": 24,
    "label": "calls",
    "to": 140
  }, {
    "from": 99,
    "label": "calls",
    "to": 132
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 24,
    "label": "calls",
    "to": 130
  }, {
    "from": 99,
    "label": "calls",
    "to": 139
  }, {
    "from": 126,
    "label": "calls",
    "to": 150
  }, {
    "from": 24,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 136
  }, {
    "from": 24,
    "label": "calls",
    "to": 136
  }, {
    "from": 24,
    "label": "calls",
    "to": 136
  }, {
    "from": 24,
    "label": "calls",
    "to": 136
  }, {
    "from": 24,
    "label": "calls",
    "to": 136
  }, {
    "from": 24,
    "label": "calls",
    "to": 136
  }, {
    "from": 24,
    "label": "calls",
    "to": 136
  }, {
    "from": 24,
    "label": "calls",
    "to": 136
  }, {
    "from": 99,
    "label": "calls",
    "to": 24
  }, {
    "from": 99,
    "label": "calls",
    "to": 127
  }, {
    "from": 99,
    "label": "calls",
    "to": 129
  }, {
    "from": 99,
    "label": "calls",
    "to": 133
  }, {
    "from": 99,
    "label": "calls",
    "to": 133
  }, {
    "from": 24,
    "label": "calls",
    "to": 146
  }, {
    "from": 126,
    "label": "calls",
    "to": 131
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 126,
    "label": "declares",
    "to": 2
  }, {
    "from": 126,
    "label": "declares",
    "to": 10
  }, {
    "from": 126,
    "label": "declares",
    "to": 14
  }, {
    "from": 126,
    "label": "declares",
    "to": 18
  }, {
    "from": 126,
    "label": "declares",
    "to": 24
  }, {
    "from": 126,
    "label": "declares",
    "to": 99
  }, {
    "from": 126,
    "label": "declares",
    "to": 123
  }, {
    "from": 126,
    "label": "declares",
    "to": 124
  }, {
    "from": 1,
    "label": "contains",
    "to": 152
  }, {
    "from": 1,
    "label": "contains",
    "to": 153
  }, {
    "from": 152,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 152,
    "label": "initializes",
    "to": 156
  }, {
    "from": 152,
    "label": "initializes",
    "to": 157
  }, {
    "from": 152,
    "label": "initializes",
    "to": 158
  }, {
    "from": 152,
    "label": "initializes",
    "to": 159
  }, {
    "from": 152,
    "label": "initializes",
    "to": 160
  }, {
    "from": 152,
    "label": "initializes",
    "to": 161
  }, {
    "from": 152,
    "label": "initializes",
    "to": 162
  }, {
    "from": 152,
    "label": "initializes",
    "to": 163
  }, {
    "from": 152,
    "label": "initializes",
    "to": 164
  }, {
    "from": 152,
    "label": "initializes",
    "to": 165
  }, {
    "from": 152,
    "label": "initializes",
    "to": 166
  }, {
    "from": 152,
    "label": "initializes",
    "to": 167
  }, {
    "from": 152,
    "label": "initializes",
    "to": 168
  }, {
    "from": 152,
    "label": "initializes",
    "to": 169
  }, {
    "from": 152,
    "label": "initializes",
    "to": 170
  }, {
    "from": 152,
    "label": "initializes",
    "to": 171
  }, {
    "from": 152,
    "label": "initializes",
    "to": 172
  }, {
    "from": 152,
    "label": "initializes",
    "to": 173
  }, {
    "from": 152,
    "label": "initializes",
    "to": 174
  }, {
    "from": 152,
    "label": "initializes",
    "to": 175
  }, {
    "from": 152,
    "label": "initializes",
    "to": 176
  }, {
    "from": 152,
    "label": "initializes",
    "to": 177
  }, {
    "from": 152,
    "label": "initializes",
    "to": 178
  }, {
    "from": 152,
    "label": "initializes",
    "to": 179
  }, {
    "from": 152,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 153,
    "label": "initializes",
    "to": 151
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 123
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 124
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "picker",
    "type": "module"
  }, {
    "id": 2,
    "text": "function OnColourPicker(event)\r\n    local evt_type = event:GetEventType()\r\n    local c = event:GetColour()\r\n    local val = c:GetAsString()\r\n    c:delete() -- delete all wxColours when done\r\n\r\n    local s = string.format(\"%s wxColourPickerEvent type: %s=%d id: %d GetColour = '%s'\\n\\n\", wx.wxNow(), wxEVT_Names[evt_type], evt_type, event:GetId(), val)\r\n    textCtrl:AppendText(s)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local evt_type = event:GetEventType()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local c = event:GetColour()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local val = c:GetAsString()",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "c:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local s = string.format(\"%s wxColourPickerEvent type: %s=%d id: %d GetColour = '%s'\\n\\n\", wx.wxNow(), wxEVT_Names[evt_type], evt_type, event:GetId(), val)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "textCtrl:AppendText(s)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function OnDatePicker(event)\r\n    local evt_type = event:GetEventType()\r\n    local val = event:GetDate():Format()\r\n\r\n    local s = string.format(\"%s wxDateEvent type: %s=%d id: %d GetDate = '%s'\\n\\n\", wx.wxNow(), wxEVT_Names[evt_type], evt_type, event:GetId(), val)\r\n    textCtrl:AppendText(s)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local val = event:GetDate():Format()",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local s = string.format(\"%s wxDateEvent type: %s=%d id: %d GetDate = '%s'\\n\\n\", wx.wxNow(), wxEVT_Names[evt_type], evt_type, event:GetId(), val)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function OnFileDirPicker(event)\r\n    local evt_type = event:GetEventType()\r\n    local val = event:GetPath()\r\n\r\n    local s = string.format(\"%s wxFileDirPickerEvent type: %s=%d id: %d GetPath = '%s'\\n\\n\", wx.wxNow(), wxEVT_Names[evt_type], evt_type, event:GetId(), val)\r\n    textCtrl:AppendText(s)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local val = event:GetPath()",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local s = string.format(\"%s wxFileDirPickerEvent type: %s=%d id: %d GetPath = '%s'\\n\\n\", wx.wxNow(), wxEVT_Names[evt_type], evt_type, event:GetId(), val)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function OnFontPicker(event)\r\n    local evt_type = event:GetEventType()\r\n    local f = event:GetFont()\r\n    local val = f:GetNativeFontInfoDesc()\r\n    f:delete() -- delete all wxFonts when done\r\n\r\n    local s = string.format(\"%s wxFontPickerEvent type: %s=%d id: %d GetFont = '%s'\\n\\n\", wx.wxNow(), wxEVT_Names[evt_type], evt_type, event:GetId(), val)\r\n    textCtrl:AppendText(s)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local f = event:GetFont()",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local val = f:GetNativeFontInfoDesc()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "f:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local s = string.format(\"%s wxFontPickerEvent type: %s=%d id: %d GetFont = '%s'\\n\\n\", wx.wxNow(), wxEVT_Names[evt_type], evt_type, event:GetId(), val)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function CreatePickerWindow(parent)\r\n\r\n    local scrollWin = wx.wxScrolledWindow(parent, wx.wxID_ANY,\r\n                                    wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                    wx.wxHSCROLL + wx.wxVSCROLL)\r\n    -- Give the scrollwindow enough size so sizer works when calling Fit()\r\n    scrollWin:SetScrollbars(15, 15, 400, 600, 0, 0, false)\r\n\r\n    local mainSizer = wx.wxBoxSizer(wx.wxVERTICAL)\r\n    local flexSizer = wx.wxFlexGridSizer(20, 2, 5, 5)\r\n    flexSizer:AddGrowableCol(1)\r\n\r\n    local statText = nil -- not used outside of this function\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    local colourPicker = nil -- not used outside of this function\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxColourPickerCtrl + wxCLRP_DEFAULT_STYLE\")\r\n    colourPicker = wx.wxColourPickerCtrl(scrollWin, ID_COLOURPICKER1, wx.wxBLACK,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxCLRP_DEFAULT_STYLE)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(colourPicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxColourPickerCtrl + wxCLRP_USE_TEXTCTRL\")\r\n    colourPicker = wx.wxColourPickerCtrl(scrollWin, ID_COLOURPICKER2, wx.wxBLACK,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxCLRP_USE_TEXTCTRL)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(colourPicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxColourPickerCtrl + wxCLRP_SHOW_LABEL\")\r\n    colourPicker = wx.wxColourPickerCtrl(scrollWin, ID_COLOURPICKER3, wx.wxBLACK,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxCLRP_SHOW_LABEL)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(colourPicker, 1, wx.wxEXPAND)\r\n\r\n    -- central event handler for all wxColourPickerEvent\r\n    scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_COLOURPICKER_CHANGED, OnColourPicker)\r\n\r\n    -- -----------------------------------------------------------------------\r\n    flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 1, wx.wxEXPAND)\r\n    flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 1, wx.wxEXPAND)\r\n\r\n    local datePicker = nil -- not used outside of this function\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_DEFAULT\")\r\n    datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER1, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDP_DEFAULT)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(datePicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_SPIN\")\r\n    if wx.__WXMSW__ then\r\n        datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER2, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx. wxDP_SPIN)\r\n    else\r\n        datePicker = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"Supported in MSW only\")\r\n    end\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(datePicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_DROPDOWN\")\r\n    datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER3, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDP_DROPDOWN)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(datePicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_ALLOWNONE\")\r\n    datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER4, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDP_ALLOWNONE)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(datePicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_SHOWCENTURY\")\r\n    datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER5, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDP_SHOWCENTURY)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(datePicker, 1, wx.wxEXPAND)\r\n\r\n    -- central event handler for all wxDatePickerCtrls\r\n    scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_DATE_CHANGED, OnDatePicker)\r\n\r\n    -- -----------------------------------------------------------------------\r\n    flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 1, wx.wxEXPAND)\r\n    flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 1, wx.wxEXPAND)\r\n\r\n    local dirPicker = nil -- not used outside of this function\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDirPickerCtrl +  wxDIRP_DEFAULT_STYLE\")\r\n    dirPicker = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKER1, wx.wxGetCwd(), wx.wxDirSelectorPromptStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_DEFAULT_STYLE)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(dirPicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDirPickerCtrl +  wxDIRP_USE_TEXTCTRL\")\r\n    dirPicker = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKER2, wx.wxGetCwd(), \"I'm the message parameter\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_USE_TEXTCTRL)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(dirPicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDirPickerCtrl +  wxDIRP_CHANGE_DIR\")\r\n    dirPicker = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKER3, wx.wxGetCwd(), wx.wxDirSelectorPromptStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_CHANGE_DIR)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(dirPicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDirPickerCtrl +  wxDIRP_DIR_MUST_EXIST\")\r\n    dirPicker = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKER4, wx.wxGetCwd(), wx.wxDirSelectorPromptStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_DIR_MUST_EXIST)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(dirPicker, 1, wx.wxEXPAND)\r\n\r\n    -- central event handler for all wxDirPickerCtrl\r\n    scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_DIRPICKER_CHANGED, OnFileDirPicker)\r\n\r\n    -- -----------------------------------------------------------------------\r\n    flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 1, wx.wxEXPAND)\r\n    flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 1, wx.wxEXPAND)\r\n\r\n    local filePicker = nil -- not used outside of this function\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl +  wxFLP_DEFAULT_STYLE\")\r\n    filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER1, wx.wxGetCwd(), \"I'm the message parameter\", \"*\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_DEFAULT_STYLE)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(filePicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl + wxFLP_USE_TEXTCTRL\")\r\n    filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER2, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_USE_TEXTCTRL)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(filePicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl + wxFLP_CHANGE_DIR\")\r\n    filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER3, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_CHANGE_DIR)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(filePicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl + wxFLP_OPEN+wxFLP_FILE_MUST_EXIST\")\r\n    filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER4, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_OPEN + wx.wxFLP_FILE_MUST_EXIST)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(filePicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl + wxFLP_SAVE+wxFLP_OVERWRITE_PROMPT\")\r\n    filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER5, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_SAVE + wx.wxFLP_OVERWRITE_PROMPT)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(filePicker, 1, wx.wxEXPAND)\r\n\r\n    -- central event handler for all wxDirPickerCtrl\r\n    scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_FILEPICKER_CHANGED, OnFileDirPicker)\r\n\r\n    -- -----------------------------------------------------------------------\r\n    flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 1, wx.wxEXPAND)\r\n    flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 1, wx.wxEXPAND)\r\n\r\n    local fontPicker = nil -- not used outside of this function\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_DEFAULT_STYLE, wxNullFont\")\r\n    fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER1, wx.wxNullFont,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_DEFAULT_STYLE)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(fontPicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_USE_TEXTCTRL, wxNORMAL_FONT\")\r\n    fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER2, wx.wxNORMAL_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_USE_TEXTCTRL)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(fontPicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_FONTDESC_AS_LABEL, wxSMALL_FONT\")\r\n    fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER3, wx.wxSMALL_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_FONTDESC_AS_LABEL)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(fontPicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_USEFONT_FOR_LABEL, wxITALIC_FONT\")\r\n    fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER4, wx.wxITALIC_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_USEFONT_FOR_LABEL)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(fontPicker, 1, wx.wxEXPAND)\r\n\r\n    statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_USEFONT_FOR_LABEL, wxSWISS_FONT\")\r\n    fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER5, wx.wxSWISS_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_USEFONT_FOR_LABEL)\r\n    flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)\r\n    flexSizer:Add(fontPicker, 1, wx.wxEXPAND)\r\n\r\n    -- central event handler for all wxDirPickerCtrl\r\n    scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_FONTPICKER_CHANGED, OnFontPicker)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    mainSizer:Add(flexSizer, 1, wx.wxEXPAND)\r\n    scrollWin:SetSizer(mainSizer)\r\n    mainSizer:Fit(scrollWin)\r\n\r\n    return scrollWin\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local scrollWin = wx.wxScrolledWindow(parent, wx.wxID_ANY,\r\n                                    wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                    wx.wxHSCROLL + wx.wxVSCROLL)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "scrollWin:SetScrollbars(15, 15, 400, 600, 0, 0, false)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local mainSizer = wx.wxBoxSizer(wx.wxVERTICAL)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local flexSizer = wx.wxFlexGridSizer(20, 2, 5, 5)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "flexSizer:AddGrowableCol(1)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local statText = nil",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local colourPicker = nil",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxColourPickerCtrl + wxCLRP_DEFAULT_STYLE\")",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "colourPicker = wx.wxColourPickerCtrl(scrollWin, ID_COLOURPICKER1, wx.wxBLACK,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxCLRP_DEFAULT_STYLE)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "flexSizer:Add(statText, 1, wx.wxALIGN_CENTER_VERTICAL)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "flexSizer:Add(colourPicker, 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxColourPickerCtrl + wxCLRP_USE_TEXTCTRL\")",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "colourPicker = wx.wxColourPickerCtrl(scrollWin, ID_COLOURPICKER2, wx.wxBLACK,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxCLRP_USE_TEXTCTRL)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxColourPickerCtrl + wxCLRP_SHOW_LABEL\")",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "colourPicker = wx.wxColourPickerCtrl(scrollWin, ID_COLOURPICKER3, wx.wxBLACK,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxCLRP_SHOW_LABEL)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_COLOURPICKER_CHANGED, OnColourPicker)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "flexSizer:Add(wx.wxStaticLine(scrollWin, wx.wxID_ANY), 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local datePicker = nil",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_DEFAULT\")",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER1, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDP_DEFAULT)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "flexSizer:Add(datePicker, 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_SPIN\")",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if wx.__WXMSW__ then\r\n        datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER2, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx. wxDP_SPIN)\r\n    else\r\n        datePicker = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"Supported in MSW only\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER2, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx. wxDP_SPIN)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "datePicker = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"Supported in MSW only\")",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_DROPDOWN\")",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER3, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDP_DROPDOWN)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_ALLOWNONE\")",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER4, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDP_ALLOWNONE)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDatePickerCtrl +  wxDP_SHOWCENTURY\")",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "datePicker = wx.wxDatePickerCtrl(scrollWin, ID_DATEPICKER5, wx.wxDefaultDateTime,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDP_SHOWCENTURY)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_DATE_CHANGED, OnDatePicker)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "local dirPicker = nil",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDirPickerCtrl +  wxDIRP_DEFAULT_STYLE\")",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "dirPicker = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKER1, wx.wxGetCwd(), wx.wxDirSelectorPromptStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_DEFAULT_STYLE)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "flexSizer:Add(dirPicker, 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDirPickerCtrl +  wxDIRP_USE_TEXTCTRL\")",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "dirPicker = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKER2, wx.wxGetCwd(), \"I'm the message parameter\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_USE_TEXTCTRL)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDirPickerCtrl +  wxDIRP_CHANGE_DIR\")",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "dirPicker = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKER3, wx.wxGetCwd(), wx.wxDirSelectorPromptStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_CHANGE_DIR)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxDirPickerCtrl +  wxDIRP_DIR_MUST_EXIST\")",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "dirPicker = wx.wxDirPickerCtrl(scrollWin, ID_DIRPICKER4, wx.wxGetCwd(), wx.wxDirSelectorPromptStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxDIRP_DIR_MUST_EXIST)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_DIRPICKER_CHANGED, OnFileDirPicker)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "local filePicker = nil",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl +  wxFLP_DEFAULT_STYLE\")",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER1, wx.wxGetCwd(), \"I'm the message parameter\", \"*\",\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_DEFAULT_STYLE)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "flexSizer:Add(filePicker, 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl + wxFLP_USE_TEXTCTRL\")",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER2, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_USE_TEXTCTRL)",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl + wxFLP_CHANGE_DIR\")",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER3, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_CHANGE_DIR)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl + wxFLP_OPEN+wxFLP_FILE_MUST_EXIST\")",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER4, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_OPEN + wx.wxFLP_FILE_MUST_EXIST)",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFilePickerCtrl + wxFLP_SAVE+wxFLP_OVERWRITE_PROMPT\")",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "filePicker = wx.wxFilePickerCtrl(scrollWin, ID_FILEPICKER5, wx.wxGetCwd(), wx.wxFileSelectorPromptStr, wx.wxFileSelectorDefaultWildcardStr,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFLP_SAVE + wx.wxFLP_OVERWRITE_PROMPT)",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_FILEPICKER_CHANGED, OnFileDirPicker)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "local fontPicker = nil",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_DEFAULT_STYLE, wxNullFont\")",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER1, wx.wxNullFont,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_DEFAULT_STYLE)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "flexSizer:Add(fontPicker, 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_USE_TEXTCTRL, wxNORMAL_FONT\")",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER2, wx.wxNORMAL_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_USE_TEXTCTRL)",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_FONTDESC_AS_LABEL, wxSMALL_FONT\")",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER3, wx.wxSMALL_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_FONTDESC_AS_LABEL)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_USEFONT_FOR_LABEL, wxITALIC_FONT\")",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER4, wx.wxITALIC_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_USEFONT_FOR_LABEL)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "statText = wx.wxStaticText(scrollWin, wx.wxID_ANY, \"wxFontPickerCtrl + wxFNTP_USEFONT_FOR_LABEL, wxSWISS_FONT\")",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "fontPicker = wx.wxFontPickerCtrl(scrollWin, ID_FONTPICKER5, wx.wxSWISS_FONT,\r\n                                         wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                         wx.wxFNTP_USEFONT_FOR_LABEL)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "scrollWin:Connect(wx.wxID_ANY, wx.wxEVT_COMMAND_FONTPICKER_CHANGED, OnFontPicker)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "mainSizer:Add(flexSizer, 1, wx.wxEXPAND)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "scrollWin:SetSizer(mainSizer)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "mainSizer:Fit(scrollWin)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function main()\r\n\r\n    frame = wx.wxFrame( wx.NULL,              -- no parent needed for toplevel windows\r\n                        wx.wxID_ANY,          -- don't need a wxWindow ID\r\n                        \"wxLua Picker Demo\",  -- caption on the frame\r\n                        wx.wxDefaultPosition, -- let system place the frame\r\n                        wx.wxSize(550, 450),  -- set the size of the frame\r\n                        wx.wxDEFAULT_FRAME_STYLE ) -- use default frame styles\r\n\r\n    local fileMenu = wx.wxMenu()\r\n    fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")\r\n\r\n    local helpMenu = wx.wxMenu()\r\n    helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Picker Application\")\r\n\r\n    local menuBar = wx.wxMenuBar()\r\n    menuBar:Append(fileMenu, \"&File\")\r\n    menuBar:Append(helpMenu, \"&Help\")\r\n    frame:SetMenuBar(menuBar)\r\n\r\n    frame:CreateStatusBar(1)\r\n    frame:SetStatusText(\"Welcome to wxLua.\")\r\n\r\n    -- connect the selection event of the exit menu item to an\r\n    -- event handler that closes the window\r\n    frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) frame:Close(true) end )\r\n\r\n    -- connect the selection event of the about menu item\r\n    frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Picker wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )\r\n\r\n    -- -----------------------------------------------------------------------\r\n    splitter = wx.wxSplitterWindow(frame, wx.wxID_ANY)\r\n    splitter:SetMinimumPaneSize(50) -- don't let it unsplit\r\n    splitter:SetSashGravity(.8)\r\n\r\n    pickerWin = CreatePickerWindow(splitter)\r\n\r\n    textCtrl = wx.wxTextCtrl(splitter, wx.wxID_ANY, \"\",\r\n                             wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                             wx.wxTE_READONLY+wx.wxTE_MULTILINE+wx.wxTE_DONTWRAP)\r\n\r\n    splitter:SplitHorizontally(pickerWin, textCtrl, 300)\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    frame:Show(true) -- show the frame window\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "frame = wx.wxFrame( wx.NULL,              -- no parent needed for toplevel windows\r\n                        wx.wxID_ANY,          -- don't need a wxWindow ID\r\n                        \"wxLua Picker Demo\",  -- caption on the frame\r\n                        wx.wxDefaultPosition, -- let system place the frame\r\n                        wx.wxSize(550, 450),  -- set the size of the frame\r\n                        wx.wxDEFAULT_FRAME_STYLE )",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "local fileMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "local helpMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Picker Application\")",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "local menuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "menuBar:Append(fileMenu, \"&File\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "menuBar:Append(helpMenu, \"&Help\")",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "frame:SetMenuBar(menuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "frame:CreateStatusBar(1)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "frame:SetStatusText(\"Welcome to wxLua.\")",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) frame:Close(true) end )",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "frame:Close(true)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Picker wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the Picker wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "splitter = wx.wxSplitterWindow(frame, wx.wxID_ANY)",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "splitter:SetMinimumPaneSize(50)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "splitter:SetSashGravity(.8)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "pickerWin = CreatePickerWindow(splitter)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "textCtrl = wx.wxTextCtrl(splitter, wx.wxID_ANY, \"\",\r\n                             wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                             wx.wxTE_READONLY+wx.wxTE_MULTILINE+wx.wxTE_DONTWRAP)",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "splitter:SplitHorizontally(pickerWin, textCtrl, 300)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "frame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function (event) frame:Close(true) end",
    "type": "function"
  }, {
    "id": 124,
    "text": "function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Picker wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "",
    "type": "function container"
  }, {
    "id": 127,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 128,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 129,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 130,
    "text": "wxStaticText",
    "type": "global function"
  }, {
    "id": 131,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 132,
    "text": "wxSplitterWindow",
    "type": "global function"
  }, {
    "id": 133,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 134,
    "text": "wxColourPickerCtrl",
    "type": "global function"
  }, {
    "id": 135,
    "text": "wxTextCtrl",
    "type": "global function"
  }, {
    "id": 136,
    "text": "wxStaticLine",
    "type": "global function"
  }, {
    "id": 137,
    "text": "wxFontPickerCtrl",
    "type": "global function"
  }, {
    "id": 138,
    "text": "wxBoxSizer",
    "type": "global function"
  }, {
    "id": 139,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 140,
    "text": "wxFilePickerCtrl",
    "type": "global function"
  }, {
    "id": 141,
    "text": "wxScrolledWindow",
    "type": "global function"
  }, {
    "id": 142,
    "text": "wxGetCwd",
    "type": "global function"
  }, {
    "id": 143,
    "text": "wxDatePickerCtrl",
    "type": "global function"
  }, {
    "id": 144,
    "text": "wxDirPickerCtrl",
    "type": "global function"
  }, {
    "id": 145,
    "text": "wxNow",
    "type": "global function"
  }, {
    "id": 146,
    "text": "wxFlexGridSizer",
    "type": "global function"
  }, {
    "id": 147,
    "text": "format",
    "type": "global function"
  }, {
    "id": 148,
    "text": "find",
    "type": "global function"
  }, {
    "id": 149,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 150,
    "text": "require",
    "type": "global function"
  }, {
    "id": 151,
    "text": "",
    "type": "global variable"
  }, {
    "id": 152,
    "text": "",
    "type": "variable container"
  }, {
    "id": 153,
    "text": "",
    "type": "require container"
  }, {
    "id": 154,
    "text": "",
    "type": "global variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "global variable"
  }, {
    "id": 157,
    "text": "",
    "type": "global variable"
  }, {
    "id": 158,
    "text": "",
    "type": "global variable"
  }, {
    "id": 159,
    "text": "",
    "type": "global variable"
  }, {
    "id": 160,
    "text": "",
    "type": "global variable"
  }, {
    "id": 161,
    "text": "",
    "type": "global variable"
  }, {
    "id": 162,
    "text": "",
    "type": "global variable"
  }, {
    "id": 163,
    "text": "",
    "type": "global variable"
  }, {
    "id": 164,
    "text": "",
    "type": "global variable"
  }, {
    "id": 165,
    "text": "",
    "type": "global variable"
  }, {
    "id": 166,
    "text": "",
    "type": "global variable"
  }, {
    "id": 167,
    "text": "",
    "type": "global variable"
  }, {
    "id": 168,
    "text": "",
    "type": "global variable"
  }, {
    "id": 169,
    "text": "",
    "type": "global variable"
  }, {
    "id": 170,
    "text": "",
    "type": "global variable"
  }, {
    "id": 171,
    "text": "",
    "type": "global variable"
  }, {
    "id": 172,
    "text": "",
    "type": "global variable"
  }, {
    "id": 173,
    "text": "",
    "type": "global variable"
  }, {
    "id": 174,
    "text": "",
    "type": "global variable"
  }, {
    "id": 175,
    "text": "",
    "type": "global variable"
  }, {
    "id": 176,
    "text": "",
    "type": "global variable"
  }, {
    "id": 177,
    "text": "",
    "type": "global variable"
  }, {
    "id": 178,
    "text": "",
    "type": "global variable"
  }, {
    "id": 179,
    "text": "",
    "type": "global variable"
  }, {
    "id": 180,
    "text": "",
    "type": "global variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  } ]
}