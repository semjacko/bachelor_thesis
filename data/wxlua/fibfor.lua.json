{
  "_filename": "fibfor.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/wxlua/modules/lua/test/fibfor.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 13
  }, {
    "from": 2,
    "label": "calls",
    "to": 14
  }, {
    "from": 11,
    "label": "calls",
    "to": 12
  }, {
    "from": 1,
    "label": "contains",
    "to": 11
  }, {
    "from": 11,
    "label": "declares",
    "to": 2
  }, {
    "from": 11,
    "label": "declares",
    "to": 9
  }, {
    "from": 1,
    "label": "contains",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 16
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "fibfor",
    "type": "module"
  }, {
    "id": 2,
    "text": "function generatefib (n)\r\n  return coroutine.wrap(function ()\r\n    local a,b = 1, 1\r\n    while a <= n do\r\n      coroutine.yield(a)\r\n      a, b = b, a+b\r\n    end\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "local a,b = 1, 1",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "while a <= n do\r\n      coroutine.yield(a)\r\n      a, b = b, a+b\r\n    end",
    "type": "statement:while"
  }, {
    "id": 6,
    "text": "coroutine.yield(a)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "a, b = b, a+b",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function ()\r\n    local a,b = 1, 1\r\n    while a <= n do\r\n      coroutine.yield(a)\r\n      a, b = b, a+b\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "",
    "type": "function container"
  }, {
    "id": 12,
    "text": "print",
    "type": "global function"
  }, {
    "id": 13,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 14,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 15,
    "text": "",
    "type": "variable container"
  }, {
    "id": 16,
    "text": "",
    "type": "require container"
  } ]
}