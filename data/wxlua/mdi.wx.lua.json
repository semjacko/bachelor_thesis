{
  "_filename": "mdi.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/mdi.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 8,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 9
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 20,
    "label": "has",
    "to": 11
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 20,
    "label": "has",
    "to": 13
  }, {
    "from": 20,
    "label": "has",
    "to": 14
  }, {
    "from": 20,
    "label": "has",
    "to": 15
  }, {
    "from": 20,
    "label": "has",
    "to": 16
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 29,
    "label": "calls",
    "to": 31
  }, {
    "from": 29,
    "label": "calls",
    "to": 2
  }, {
    "from": 29,
    "label": "calls",
    "to": 36
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 29,
    "label": "calls",
    "to": 32
  }, {
    "from": 29,
    "label": "calls",
    "to": 34
  }, {
    "from": 29,
    "label": "calls",
    "to": 34
  }, {
    "from": 29,
    "label": "calls",
    "to": 39
  }, {
    "from": 29,
    "label": "calls",
    "to": 30
  }, {
    "from": 29,
    "label": "calls",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 29,
    "label": "declares",
    "to": 2
  }, {
    "from": 29,
    "label": "declares",
    "to": 20
  }, {
    "from": 29,
    "label": "declares",
    "to": 22
  }, {
    "from": 29,
    "label": "declares",
    "to": 24
  }, {
    "from": 29,
    "label": "declares",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 41,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 41,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 41,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 41,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 41,
    "label": "initializes",
    "to": 51
  }, {
    "from": 41,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 41,
    "label": "initializes",
    "to": 54
  }, {
    "from": 41,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 42,
    "label": "initializes",
    "to": 40
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mdi",
    "type": "module"
  }, {
    "id": 2,
    "text": "function CreateChild()\r\n    local child = wx.wxMDIChildFrame( frame, wx.wxID_ANY, \"\" )\r\n    child:SetSize(330,340)\r\n    childList[child:GetId()] = child\r\n    numChildren = numChildren + 1\r\n    child:SetTitle(\"Child \"..numChildren)\r\n\r\n    function OnPaint(event)\r\n        local id = event:GetId()\r\n        local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n        local dc = wx.wxPaintDC(win) -- or can use childList[id]\r\n        dc:DrawRectangle(10, 10, 300, 300);\r\n        dc:DrawRoundedRectangle(20, 20, 280, 280, 20);\r\n        dc:DrawEllipse(30, 30, 260, 260);\r\n        dc:DrawText(\"A test string for window Id \"..tostring(win:GetId()), 50, 150);\r\n        dc:delete() -- ALWAYS delete() any wxDCs created when done\r\n    end\r\n    child:Connect(wx.wxEVT_PAINT, OnPaint)\r\n    child:Show(true)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local child = wx.wxMDIChildFrame( frame, wx.wxID_ANY, \"\" )",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "child:SetSize(330,340)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "childList[child:GetId()] = child",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "numChildren = numChildren + 1",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "child:SetTitle(\"Child \"..numChildren)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "function OnPaint(event)\r\n        local id = event:GetId()\r\n        local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n        local dc = wx.wxPaintDC(win) -- or can use childList[id]\r\n        dc:DrawRectangle(10, 10, 300, 300);\r\n        dc:DrawRoundedRectangle(20, 20, 280, 280, 20);\r\n        dc:DrawEllipse(30, 30, 260, 260);\r\n        dc:DrawText(\"A test string for window Id \"..tostring(win:GetId()), 50, 150);\r\n        dc:delete() -- ALWAYS delete() any wxDCs created when done\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 9,
    "text": "local id = event:GetId()",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local win = event:GetEventObject():DynamicCast(\"wxWindow\")",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local dc = wx.wxPaintDC(win)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "dc:DrawRectangle(10, 10, 300, 300)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "dc:DrawRoundedRectangle(20, 20, 280, 280, 20)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "dc:DrawEllipse(30, 30, 260, 260)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "dc:DrawText(\"A test string for window Id \"..tostring(win:GetId()), 50, 150)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "dc:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "child:Connect(wx.wxEVT_PAINT, OnPaint)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "child:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function OnPaint(event)\r\n        local id = event:GetId()\r\n        local win = event:GetEventObject():DynamicCast(\"wxWindow\")\r\n        local dc = wx.wxPaintDC(win) -- or can use childList[id]\r\n        dc:DrawRectangle(10, 10, 300, 300);\r\n        dc:DrawRoundedRectangle(20, 20, 280, 280, 20);\r\n        dc:DrawEllipse(30, 30, 260, 260);\r\n        dc:DrawText(\"A test string for window Id \"..tostring(win:GetId()), 50, 150);\r\n        dc:delete() -- ALWAYS delete() any wxDCs created when done\r\n    end",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function (event) CreateChild() end",
    "type": "function"
  }, {
    "id": 23,
    "text": "CreateChild()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "function (event) frame:Close() end",
    "type": "function"
  }, {
    "id": 25,
    "text": "frame:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "function (event)\r\n        wx.wxMessageBox('This is the \"About\" dialog of the MDI wxLua sample.\\n'..\r\n                        wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                        \"About wxLua\",\r\n                        wx.wxOK + wx.wxICON_INFORMATION,\r\n                        frame )\r\n    end",
    "type": "function"
  }, {
    "id": 27,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the MDI wxLua sample.\\n'..\r\n                        wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                        \"About wxLua\",\r\n                        wx.wxOK + wx.wxICON_INFORMATION,\r\n                        frame )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "",
    "type": "function container"
  }, {
    "id": 30,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 31,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 32,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 33,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 34,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 35,
    "text": "wxMDIChildFrame",
    "type": "global function"
  }, {
    "id": 36,
    "text": "wxMDIParentFrame",
    "type": "global function"
  }, {
    "id": 37,
    "text": "wxPaintDC",
    "type": "global function"
  }, {
    "id": 38,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 39,
    "text": "require",
    "type": "global function"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  }, {
    "id": 41,
    "text": "",
    "type": "variable container"
  }, {
    "id": 42,
    "text": "",
    "type": "require container"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "global variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "global variable"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "global variable"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  } ]
}