{
  "_filename": "printing.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/printing.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 36
  }, {
    "from": 24,
    "label": "has",
    "to": 37
  }, {
    "from": 24,
    "label": "has",
    "to": 38
  }, {
    "from": 24,
    "label": "has",
    "to": 39
  }, {
    "from": 24,
    "label": "has",
    "to": 40
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 42
  }, {
    "from": 24,
    "label": "has",
    "to": 43
  }, {
    "from": 24,
    "label": "has",
    "to": 44
  }, {
    "from": 24,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 46
  }, {
    "from": 24,
    "label": "has",
    "to": 47
  }, {
    "from": 24,
    "label": "has",
    "to": 48
  }, {
    "from": 24,
    "label": "has",
    "to": 49
  }, {
    "from": 24,
    "label": "has",
    "to": 50
  }, {
    "from": 24,
    "label": "has",
    "to": 51
  }, {
    "from": 24,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 16
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 16
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 16
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 16
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 25
  }, {
    "from": 67,
    "label": "has",
    "to": 26
  }, {
    "from": 67,
    "label": "has",
    "to": 27
  }, {
    "from": 67,
    "label": "has",
    "to": 28
  }, {
    "from": 67,
    "label": "has",
    "to": 29
  }, {
    "from": 67,
    "label": "has",
    "to": 30
  }, {
    "from": 67,
    "label": "has",
    "to": 31
  }, {
    "from": 67,
    "label": "has",
    "to": 32
  }, {
    "from": 67,
    "label": "has",
    "to": 33
  }, {
    "from": 67,
    "label": "has",
    "to": 34
  }, {
    "from": 67,
    "label": "has",
    "to": 35
  }, {
    "from": 67,
    "label": "has",
    "to": 36
  }, {
    "from": 67,
    "label": "has",
    "to": 37
  }, {
    "from": 67,
    "label": "has",
    "to": 38
  }, {
    "from": 67,
    "label": "has",
    "to": 39
  }, {
    "from": 67,
    "label": "has",
    "to": 40
  }, {
    "from": 67,
    "label": "has",
    "to": 41
  }, {
    "from": 67,
    "label": "has",
    "to": 42
  }, {
    "from": 67,
    "label": "has",
    "to": 43
  }, {
    "from": 67,
    "label": "has",
    "to": 44
  }, {
    "from": 67,
    "label": "has",
    "to": 45
  }, {
    "from": 67,
    "label": "has",
    "to": 46
  }, {
    "from": 67,
    "label": "has",
    "to": 47
  }, {
    "from": 67,
    "label": "has",
    "to": 48
  }, {
    "from": 67,
    "label": "has",
    "to": 49
  }, {
    "from": 67,
    "label": "has",
    "to": 50
  }, {
    "from": 67,
    "label": "has",
    "to": 51
  }, {
    "from": 67,
    "label": "has",
    "to": 16
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 69,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 86
  }, {
    "from": 80,
    "label": "has",
    "to": 87
  }, {
    "from": 80,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 88,
    "label": "has",
    "to": 94
  }, {
    "from": 88,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 80,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 70
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 113,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 113,
    "label": "has",
    "to": 120
  }, {
    "from": 111,
    "label": "has",
    "to": 121
  }, {
    "from": 111,
    "label": "has",
    "to": 122
  }, {
    "from": 111,
    "label": "has",
    "to": 123
  }, {
    "from": 111,
    "label": "has",
    "to": 124
  }, {
    "from": 111,
    "label": "has",
    "to": 125
  }, {
    "from": 111,
    "label": "has",
    "to": 126
  }, {
    "from": 111,
    "label": "has",
    "to": 127
  }, {
    "from": 111,
    "label": "has",
    "to": 128
  }, {
    "from": 111,
    "label": "has",
    "to": 129
  }, {
    "from": 111,
    "label": "has",
    "to": 130
  }, {
    "from": 111,
    "label": "has",
    "to": 131
  }, {
    "from": 111,
    "label": "has",
    "to": 132
  }, {
    "from": 111,
    "label": "has",
    "to": 133
  }, {
    "from": 111,
    "label": "has",
    "to": 134
  }, {
    "from": 111,
    "label": "has",
    "to": 135
  }, {
    "from": 111,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 111,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 111,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 111,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 111,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 111,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 111,
    "label": "has",
    "to": 148
  }, {
    "from": 111,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 114
  }, {
    "from": 150,
    "label": "has",
    "to": 115
  }, {
    "from": 150,
    "label": "has",
    "to": 116
  }, {
    "from": 150,
    "label": "has",
    "to": 117
  }, {
    "from": 150,
    "label": "has",
    "to": 118
  }, {
    "from": 150,
    "label": "has",
    "to": 119
  }, {
    "from": 150,
    "label": "has",
    "to": 120
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 92
  }, {
    "from": 152,
    "label": "has",
    "to": 93
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 137
  }, {
    "from": 155,
    "label": "has",
    "to": 139
  }, {
    "from": 156,
    "label": "has",
    "to": 141
  }, {
    "from": 157,
    "label": "has",
    "to": 143
  }, {
    "from": 158,
    "label": "has",
    "to": 145
  }, {
    "from": 159,
    "label": "has",
    "to": 147
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 111,
    "label": "calls",
    "to": 98
  }, {
    "from": 111,
    "label": "calls",
    "to": 69
  }, {
    "from": 103,
    "label": "calls",
    "to": 176
  }, {
    "from": 80,
    "label": "calls",
    "to": 178
  }, {
    "from": 161,
    "label": "calls",
    "to": 175
  }, {
    "from": 161,
    "label": "calls",
    "to": 175
  }, {
    "from": 161,
    "label": "calls",
    "to": 111
  }, {
    "from": 161,
    "label": "calls",
    "to": 179
  }, {
    "from": 111,
    "label": "calls",
    "to": 162
  }, {
    "from": 69,
    "label": "calls",
    "to": 168
  }, {
    "from": 161,
    "label": "calls",
    "to": 172
  }, {
    "from": 69,
    "label": "calls",
    "to": 164
  }, {
    "from": 69,
    "label": "calls",
    "to": 164
  }, {
    "from": 80,
    "label": "calls",
    "to": 164
  }, {
    "from": 111,
    "label": "calls",
    "to": 164
  }, {
    "from": 80,
    "label": "calls",
    "to": 165
  }, {
    "from": 111,
    "label": "calls",
    "to": 165
  }, {
    "from": 69,
    "label": "calls",
    "to": 173
  }, {
    "from": 80,
    "label": "calls",
    "to": 173
  }, {
    "from": 80,
    "label": "calls",
    "to": 173
  }, {
    "from": 111,
    "label": "calls",
    "to": 177
  }, {
    "from": 111,
    "label": "calls",
    "to": 103
  }, {
    "from": 111,
    "label": "calls",
    "to": 174
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 111,
    "label": "calls",
    "to": 2
  }, {
    "from": 69,
    "label": "calls",
    "to": 167
  }, {
    "from": 80,
    "label": "calls",
    "to": 167
  }, {
    "from": 98,
    "label": "calls",
    "to": 167
  }, {
    "from": 98,
    "label": "calls",
    "to": 171
  }, {
    "from": 69,
    "label": "calls",
    "to": 14
  }, {
    "from": 80,
    "label": "calls",
    "to": 14
  }, {
    "from": 80,
    "label": "calls",
    "to": 14
  }, {
    "from": 111,
    "label": "calls",
    "to": 80
  }, {
    "from": 80,
    "label": "calls",
    "to": 170
  }, {
    "from": 111,
    "label": "calls",
    "to": 169
  }, {
    "from": 111,
    "label": "calls",
    "to": 169
  }, {
    "from": 161,
    "label": "calls",
    "to": 163
  }, {
    "from": 161,
    "label": "calls",
    "to": 166
  }, {
    "from": 1,
    "label": "contains",
    "to": 161
  }, {
    "from": 161,
    "label": "declares",
    "to": 2
  }, {
    "from": 161,
    "label": "declares",
    "to": 14
  }, {
    "from": 161,
    "label": "declares",
    "to": 53
  }, {
    "from": 161,
    "label": "declares",
    "to": 55
  }, {
    "from": 161,
    "label": "declares",
    "to": 57
  }, {
    "from": 161,
    "label": "declares",
    "to": 59
  }, {
    "from": 161,
    "label": "declares",
    "to": 61
  }, {
    "from": 161,
    "label": "declares",
    "to": 63
  }, {
    "from": 161,
    "label": "declares",
    "to": 65
  }, {
    "from": 161,
    "label": "declares",
    "to": 67
  }, {
    "from": 161,
    "label": "declares",
    "to": 69
  }, {
    "from": 161,
    "label": "declares",
    "to": 80
  }, {
    "from": 161,
    "label": "declares",
    "to": 98
  }, {
    "from": 161,
    "label": "declares",
    "to": 103
  }, {
    "from": 161,
    "label": "declares",
    "to": 111
  }, {
    "from": 161,
    "label": "declares",
    "to": 150
  }, {
    "from": 161,
    "label": "declares",
    "to": 152
  }, {
    "from": 161,
    "label": "declares",
    "to": 154
  }, {
    "from": 161,
    "label": "declares",
    "to": 155
  }, {
    "from": 161,
    "label": "declares",
    "to": 156
  }, {
    "from": 161,
    "label": "declares",
    "to": 157
  }, {
    "from": 161,
    "label": "declares",
    "to": 158
  }, {
    "from": 161,
    "label": "declares",
    "to": 159
  }, {
    "from": 1,
    "label": "contains",
    "to": 181
  }, {
    "from": 1,
    "label": "contains",
    "to": 182
  }, {
    "from": 181,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 181,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 181,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 181,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 181,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 181,
    "label": "initializes",
    "to": 193
  }, {
    "from": 181,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 181,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 182,
    "label": "initializes",
    "to": 180
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 154
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 155
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 156
  }, {
    "from": 142,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 144,
    "label": "hasArgument",
    "to": 158
  }, {
    "from": 146,
    "label": "hasArgument",
    "to": 159
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "printing",
    "type": "module"
  }, {
    "id": 2,
    "text": "function DisplayFigure(dc, pageNumber)\r\n    -- call some drawing functions\r\n    dc:SetBrush(wx.wxTRANSPARENT_BRUSH)\r\n\r\n    dc:SetPen(wx.wxRED_PEN)\r\n    dc:DrawRectangle(10, 10, 300, 300)\r\n    dc:SetPen(wx.wxBLACK_PEN)\r\n    dc:DrawRoundedRectangle(20, 20, 280, 280, 20)\r\n    dc:SetPen(wx.wxGREEN_PEN)\r\n    dc:DrawEllipse(30, 30, 260, 260)\r\n\r\n    if pageNumber then\r\n        dc:DrawText(\"Test page \"..pageNumber, 50, 150)\r\n    else\r\n        dc:DrawText(\"A test string\", 50, 150)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "dc:SetBrush(wx.wxTRANSPARENT_BRUSH)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "dc:SetPen(wx.wxRED_PEN)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "dc:DrawRectangle(10, 10, 300, 300)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "dc:SetPen(wx.wxBLACK_PEN)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "dc:DrawRoundedRectangle(20, 20, 280, 280, 20)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "dc:SetPen(wx.wxGREEN_PEN)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "dc:DrawEllipse(30, 30, 260, 260)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "if pageNumber then\r\n        dc:DrawText(\"Test page \"..pageNumber, 50, 150)\r\n    else\r\n        dc:DrawText(\"A test string\", 50, 150)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "dc:DrawText(\"Test page \"..pageNumber, 50, 150)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "dc:DrawText(\"A test string\", 50, 150)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function ConnectPrintEvents(printOut)\r\n\r\n    printOut.HasPage = function(self, pageNum)\r\n                            return (pageNum == 1) or (pageNum == 2)\r\n                       end\r\n\r\n    -- These two functions are equivalent, you can either use SetPageInfo to\r\n    -- set the number of pages or override GetPageInfo() as shown and return\r\n    -- the number of pages\r\n\r\n    printOut:SetPageInfo(1, 16, 2, 15) -- we override this using GetPageInfo\r\n\r\n    printOut.GetPageInfo = function(self)\r\n                               return 1, 2, 1, 2\r\n                           end\r\n\r\n    -- You MUST call the base class functions for OnBeginDocument(...) and\r\n    -- OnEndDocument() if you override them in order for printing to work.\r\n    -- If you don't override them then printing works as expected.\r\n\r\n    printOut.OnBeginDocument = function(self, startPage, endPage)\r\n                                   return self:_OnBeginDocument(startPage, endPage)\r\n                               end\r\n\r\n    printOut.OnEndDocument = function(self)\r\n                                return self:_OnEndDocument()\r\n                             end\r\n\r\n    -- You don't have to call the base class functions of these since they do\r\n    -- nothing anyway.\r\n    printOut.OnBeginPrinting = function(self)\r\n                               end\r\n\r\n    printOut.OnEndPrinting = function(self)\r\n                             end\r\n\r\n    printOut.OnPreparePrinting = function(self)\r\n                                 end\r\n\r\n    -- This is the actual function that is called for each page to print\r\n    printOut.OnPrintPage = function(self, pageNum)\r\n        local dc = self:GetDC()\r\n\r\n        local ppiScr_width, ppiScr_height = self:GetPPIScreen()\r\n        local ppiPrn_width, ppiPrn_height = self:GetPPIPrinter()\r\n        local ppi_scale_x = ppiPrn_width/ppiScr_width\r\n        local ppi_scale_y = ppiPrn_height/ppiScr_height\r\n\r\n        -- Get the size of DC in pixels and the number of pixels in the page\r\n        local dc_width, dc_height = dc:GetSize()\r\n        local pagepix_width, pagepix_height = self:GetPageSizePixels()\r\n\r\n        local dc_pagepix_scale_x = dc_width/pagepix_width\r\n        local dc_pagepix_scale_y = dc_height/pagepix_height\r\n\r\n        -- If printer pageWidth == current DC width, then this doesn't\r\n        -- change. But w might be the preview bitmap width, so scale down.\r\n        local dc_scale_x = ppi_scale_x * dc_pagepix_scale_x\r\n        local dc_scale_y = ppi_scale_y * dc_pagepix_scale_y\r\n\r\n        -- calculate the pixels / mm (25.4 mm = 1 inch)\r\n        local ppmm_x = ppiScr_width / 25.4\r\n        local ppmm_y = ppiScr_height / 25.4\r\n\r\n        -- Adjust the page size for the pixels / mm scaling factor\r\n        local pageMM_width, pageMM_height = self:GetPageSizeMM()\r\n        local pagerect_x, pagerect_y = 0, 0\r\n        local pagerect_w, pagerect_h = pageMM_width * ppmm_x, pageMM_height * ppmm_y\r\n\r\n        -- get margins informations and convert to printer pixels\r\n        local topLeft     = pageSetupDialogData:GetMarginTopLeft()\r\n        local bottomRight = pageSetupDialogData:GetMarginBottomRight()\r\n\r\n        local top    = topLeft:GetY()     * ppmm_y\r\n        local bottom = bottomRight:GetY() * ppmm_y\r\n        local left   = topLeft:GetX()     * ppmm_x\r\n        local right  = bottomRight:GetX() * ppmm_x\r\n\r\n        local printrect_x, printrect_y = left, top\r\n        local printrect_w, printrect_h = pagerect_w-(left+right), pagerect_h-(top+bottom)\r\n\r\n        -- finally, setup the dc scaling and origin for margins\r\n        dc:SetUserScale(dc_scale_x, dc_scale_y);\r\n        dc:SetDeviceOrigin(printrect_x*dc_scale_x, printrect_y*dc_scale_y)\r\n        -- draw our figure\r\n        DisplayFigure(dc, pageNum)\r\n\r\n        -- DON'T delete() this dc since we didn't create it\r\n\r\n        return true\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "printOut.HasPage = function(self, pageNum)\r\n                            return (pageNum == 1) or (pageNum == 2)\r\n                       end",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 17,
    "text": "printOut:SetPageInfo(1, 16, 2, 15)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "printOut.GetPageInfo = function(self)\r\n                               return 1, 2, 1, 2\r\n                           end",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "printOut.OnBeginDocument = function(self, startPage, endPage)\r\n                                   return self:_OnBeginDocument(startPage, endPage)\r\n                               end",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "printOut.OnEndDocument = function(self)\r\n                                return self:_OnEndDocument()\r\n                             end",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "printOut.OnBeginPrinting = function(self)\r\n                               end",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "printOut.OnEndPrinting = function(self)\r\n                             end",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "printOut.OnPreparePrinting = function(self)\r\n                                 end",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "printOut.OnPrintPage = function(self, pageNum)\r\n        local dc = self:GetDC()\r\n\r\n        local ppiScr_width, ppiScr_height = self:GetPPIScreen()\r\n        local ppiPrn_width, ppiPrn_height = self:GetPPIPrinter()\r\n        local ppi_scale_x = ppiPrn_width/ppiScr_width\r\n        local ppi_scale_y = ppiPrn_height/ppiScr_height\r\n\r\n        -- Get the size of DC in pixels and the number of pixels in the page\r\n        local dc_width, dc_height = dc:GetSize()\r\n        local pagepix_width, pagepix_height = self:GetPageSizePixels()\r\n\r\n        local dc_pagepix_scale_x = dc_width/pagepix_width\r\n        local dc_pagepix_scale_y = dc_height/pagepix_height\r\n\r\n        -- If printer pageWidth == current DC width, then this doesn't\r\n        -- change. But w might be the preview bitmap width, so scale down.\r\n        local dc_scale_x = ppi_scale_x * dc_pagepix_scale_x\r\n        local dc_scale_y = ppi_scale_y * dc_pagepix_scale_y\r\n\r\n        -- calculate the pixels / mm (25.4 mm = 1 inch)\r\n        local ppmm_x = ppiScr_width / 25.4\r\n        local ppmm_y = ppiScr_height / 25.4\r\n\r\n        -- Adjust the page size for the pixels / mm scaling factor\r\n        local pageMM_width, pageMM_height = self:GetPageSizeMM()\r\n        local pagerect_x, pagerect_y = 0, 0\r\n        local pagerect_w, pagerect_h = pageMM_width * ppmm_x, pageMM_height * ppmm_y\r\n\r\n        -- get margins informations and convert to printer pixels\r\n        local topLeft     = pageSetupDialogData:GetMarginTopLeft()\r\n        local bottomRight = pageSetupDialogData:GetMarginBottomRight()\r\n\r\n        local top    = topLeft:GetY()     * ppmm_y\r\n        local bottom = bottomRight:GetY() * ppmm_y\r\n        local left   = topLeft:GetX()     * ppmm_x\r\n        local right  = bottomRight:GetX() * ppmm_x\r\n\r\n        local printrect_x, printrect_y = left, top\r\n        local printrect_w, printrect_h = pagerect_w-(left+right), pagerect_h-(top+bottom)\r\n\r\n        -- finally, setup the dc scaling and origin for margins\r\n        dc:SetUserScale(dc_scale_x, dc_scale_y);\r\n        dc:SetDeviceOrigin(printrect_x*dc_scale_x, printrect_y*dc_scale_y)\r\n        -- draw our figure\r\n        DisplayFigure(dc, pageNum)\r\n\r\n        -- DON'T delete() this dc since we didn't create it\r\n\r\n        return true\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local dc = self:GetDC()",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local ppiScr_width, ppiScr_height = self:GetPPIScreen()",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local ppiPrn_width, ppiPrn_height = self:GetPPIPrinter()",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local ppi_scale_x = ppiPrn_width/ppiScr_width",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local ppi_scale_y = ppiPrn_height/ppiScr_height",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local dc_width, dc_height = dc:GetSize()",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local pagepix_width, pagepix_height = self:GetPageSizePixels()",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local dc_pagepix_scale_x = dc_width/pagepix_width",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local dc_pagepix_scale_y = dc_height/pagepix_height",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local dc_scale_x = ppi_scale_x * dc_pagepix_scale_x",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local dc_scale_y = ppi_scale_y * dc_pagepix_scale_y",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local ppmm_x = ppiScr_width / 25.4",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local ppmm_y = ppiScr_height / 25.4",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local pageMM_width, pageMM_height = self:GetPageSizeMM()",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local pagerect_x, pagerect_y = 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local pagerect_w, pagerect_h = pageMM_width * ppmm_x, pageMM_height * ppmm_y",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local topLeft     = pageSetupDialogData:GetMarginTopLeft()",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local bottomRight = pageSetupDialogData:GetMarginBottomRight()",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local top    = topLeft:GetY()     * ppmm_y",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local bottom = bottomRight:GetY() * ppmm_y",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local left   = topLeft:GetX()     * ppmm_x",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local right  = bottomRight:GetX() * ppmm_x",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local printrect_x, printrect_y = left, top",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local printrect_w, printrect_h = pagerect_w-(left+right), pagerect_h-(top+bottom)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "dc:SetUserScale(dc_scale_x, dc_scale_y)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "dc:SetDeviceOrigin(printrect_x*dc_scale_x, printrect_y*dc_scale_y)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "DisplayFigure(dc, pageNum)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function(self, pageNum)\r\n                            return (pageNum == 1) or (pageNum == 2)\r\n                       end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function(self)\r\n                               return 1, 2, 1, 2\r\n                           end",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function(self, startPage, endPage)\r\n                                   return self:_OnBeginDocument(startPage, endPage)\r\n                               end",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function(self)\r\n                                return self:_OnEndDocument()\r\n                             end",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function(self)\r\n                               end",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function(self)\r\n                             end",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function(self)\r\n                                 end",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function(self, pageNum)\r\n        local dc = self:GetDC()\r\n\r\n        local ppiScr_width, ppiScr_height = self:GetPPIScreen()\r\n        local ppiPrn_width, ppiPrn_height = self:GetPPIPrinter()\r\n        local ppi_scale_x = ppiPrn_width/ppiScr_width\r\n        local ppi_scale_y = ppiPrn_height/ppiScr_height\r\n\r\n        -- Get the size of DC in pixels and the number of pixels in the page\r\n        local dc_width, dc_height = dc:GetSize()\r\n        local pagepix_width, pagepix_height = self:GetPageSizePixels()\r\n\r\n        local dc_pagepix_scale_x = dc_width/pagepix_width\r\n        local dc_pagepix_scale_y = dc_height/pagepix_height\r\n\r\n        -- If printer pageWidth == current DC width, then this doesn't\r\n        -- change. But w might be the preview bitmap width, so scale down.\r\n        local dc_scale_x = ppi_scale_x * dc_pagepix_scale_x\r\n        local dc_scale_y = ppi_scale_y * dc_pagepix_scale_y\r\n\r\n        -- calculate the pixels / mm (25.4 mm = 1 inch)\r\n        local ppmm_x = ppiScr_width / 25.4\r\n        local ppmm_y = ppiScr_height / 25.4\r\n\r\n        -- Adjust the page size for the pixels / mm scaling factor\r\n        local pageMM_width, pageMM_height = self:GetPageSizeMM()\r\n        local pagerect_x, pagerect_y = 0, 0\r\n        local pagerect_w, pagerect_h = pageMM_width * ppmm_x, pageMM_height * ppmm_y\r\n\r\n        -- get margins informations and convert to printer pixels\r\n        local topLeft     = pageSetupDialogData:GetMarginTopLeft()\r\n        local bottomRight = pageSetupDialogData:GetMarginBottomRight()\r\n\r\n        local top    = topLeft:GetY()     * ppmm_y\r\n        local bottom = bottomRight:GetY() * ppmm_y\r\n        local left   = topLeft:GetX()     * ppmm_x\r\n        local right  = bottomRight:GetX() * ppmm_x\r\n\r\n        local printrect_x, printrect_y = left, top\r\n        local printrect_w, printrect_h = pagerect_w-(left+right), pagerect_h-(top+bottom)\r\n\r\n        -- finally, setup the dc scaling and origin for margins\r\n        dc:SetUserScale(dc_scale_x, dc_scale_y);\r\n        dc:SetDeviceOrigin(printrect_x*dc_scale_x, printrect_y*dc_scale_y)\r\n        -- draw our figure\r\n        DisplayFigure(dc, pageNum)\r\n\r\n        -- DON'T delete() this dc since we didn't create it\r\n\r\n        return true\r\n    end",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function Print()\r\n    local printDialogData = wx.wxPrintDialogData(printData)\r\n    local printer  = wx.wxPrinter(printDialogData)\r\n    local printout = wx.wxLuaPrintout(\"wxLua Test Print\")\r\n    ConnectPrintEvents(printout)\r\n\r\n    if printer:Print(frame, printout, true) == false then\r\n        if printer:GetLastError() == wx.wxPRINTER_ERROR then\r\n            wx.wxMessageBox(\"There was a problem printing.\\nPerhaps your current printer is not set correctly?\",\r\n                            \"Printing.wx.lua\",\r\n                            wx.wxOK)\r\n        else\r\n            wx.wxMessageBox(\"You cancelled printing\",\r\n                            \"Printing.wx.lua\",\r\n                            wx.wxOK)\r\n        end\r\n    else\r\n        printData = printer:GetPrintDialogData():GetPrintData():Copy()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local printDialogData = wx.wxPrintDialogData(printData)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local printer  = wx.wxPrinter(printDialogData)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local printout = wx.wxLuaPrintout(\"wxLua Test Print\")",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "ConnectPrintEvents(printout)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if printer:Print(frame, printout, true) == false then\r\n        if printer:GetLastError() == wx.wxPRINTER_ERROR then\r\n            wx.wxMessageBox(\"There was a problem printing.\\nPerhaps your current printer is not set correctly?\",\r\n                            \"Printing.wx.lua\",\r\n                            wx.wxOK)\r\n        else\r\n            wx.wxMessageBox(\"You cancelled printing\",\r\n                            \"Printing.wx.lua\",\r\n                            wx.wxOK)\r\n        end\r\n    else\r\n        printData = printer:GetPrintDialogData():GetPrintData():Copy()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "if printer:GetLastError() == wx.wxPRINTER_ERROR then\r\n            wx.wxMessageBox(\"There was a problem printing.\\nPerhaps your current printer is not set correctly?\",\r\n                            \"Printing.wx.lua\",\r\n                            wx.wxOK)\r\n        else\r\n            wx.wxMessageBox(\"You cancelled printing\",\r\n                            \"Printing.wx.lua\",\r\n                            wx.wxOK)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "wx.wxMessageBox(\"There was a problem printing.\\nPerhaps your current printer is not set correctly?\",\r\n                            \"Printing.wx.lua\",\r\n                            wx.wxOK)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "wx.wxMessageBox(\"You cancelled printing\",\r\n                            \"Printing.wx.lua\",\r\n                            wx.wxOK)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "printData = printer:GetPrintDialogData():GetPrintData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function PrintPreview()\r\n    local printerPrintout = wx.wxLuaPrintout(\"wxLua Test Print\")\r\n    ConnectPrintEvents(printerPrintout)\r\n\r\n    local previewPrintout = wx.wxLuaPrintout(\"wxLua Test Print Preview\")\r\n    ConnectPrintEvents(previewPrintout)\r\n\r\n    local printDialogData = wx.wxPrintDialogData(printData):GetPrintData()\r\n    local preview         = wx.wxPrintPreview(printerPrintout, previewPrintout, printDialogData)\r\n    local result = preview:Ok()\r\n    if result == false then\r\n        wx.wxMessageBox(\"There was a problem previewing.\\nPerhaps your current printer is not set correctly?\",\r\n                        \"Printing.wx.lua\",\r\n                        wx.wxOK)\r\n    else\r\n        local previewFrame = wx.wxPreviewFrame(preview, frame,\r\n                                               \"Test Print Preview\",\r\n                                               wx.wxDefaultPosition,\r\n                                               wx.wxSize(600, 650))\r\n\r\n        previewFrame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n                function (event)\r\n                    previewFrame:Destroy()\r\n                    event:Skip()\r\n                end )\r\n\r\n        previewFrame:Centre(wx.wxBOTH)\r\n        previewFrame:Initialize()\r\n        previewFrame:Show(true)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local printerPrintout = wx.wxLuaPrintout(\"wxLua Test Print\")",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "ConnectPrintEvents(printerPrintout)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "local previewPrintout = wx.wxLuaPrintout(\"wxLua Test Print Preview\")",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "ConnectPrintEvents(previewPrintout)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "local printDialogData = wx.wxPrintDialogData(printData):GetPrintData()",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local preview         = wx.wxPrintPreview(printerPrintout, previewPrintout, printDialogData)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local result = preview:Ok()",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if result == false then\r\n        wx.wxMessageBox(\"There was a problem previewing.\\nPerhaps your current printer is not set correctly?\",\r\n                        \"Printing.wx.lua\",\r\n                        wx.wxOK)\r\n    else\r\n        local previewFrame = wx.wxPreviewFrame(preview, frame,\r\n                                               \"Test Print Preview\",\r\n                                               wx.wxDefaultPosition,\r\n                                               wx.wxSize(600, 650))\r\n\r\n        previewFrame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n                function (event)\r\n                    previewFrame:Destroy()\r\n                    event:Skip()\r\n                end )\r\n\r\n        previewFrame:Centre(wx.wxBOTH)\r\n        previewFrame:Initialize()\r\n        previewFrame:Show(true)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "wx.wxMessageBox(\"There was a problem previewing.\\nPerhaps your current printer is not set correctly?\",\r\n                        \"Printing.wx.lua\",\r\n                        wx.wxOK)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local previewFrame = wx.wxPreviewFrame(preview, frame,\r\n                                               \"Test Print Preview\",\r\n                                               wx.wxDefaultPosition,\r\n                                               wx.wxSize(600, 650))",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "previewFrame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n                function (event)\r\n                    previewFrame:Destroy()\r\n                    event:Skip()\r\n                end )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "previewFrame:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "event:Skip()",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "previewFrame:Centre(wx.wxBOTH)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "previewFrame:Initialize()",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "previewFrame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function PrintSetup()\r\n    -- NOTE : this function crashes in wxWidgets GTK wxWidgets 2.8.2\r\n    local printDialogData = wx.wxPrintDialogData(printData)\r\n    local printerDialog   = wx.wxPrintDialog(frame, printDialogData)\r\n    --printerDialog:GetPrintDialogData():SetSetupDialog(true)\r\n    printerDialog:ShowModal()\r\n    printData = printerDialog:GetPrintDialogData():GetPrintData():Copy()\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "local printerDialog   = wx.wxPrintDialog(frame, printDialogData)",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "printerDialog:ShowModal()",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "printData = printerDialog:GetPrintDialogData():GetPrintData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function PageSetup()\r\n    printData = pageSetupDialogData:GetPrintData():Copy()\r\n    local pageSetupDialog = wx.wxPageSetupDialog(frame, pageSetupDialogData)\r\n    pageSetupDialog:ShowModal()\r\n    printData           = pageSetupDialog:GetPageSetupDialogData():GetPrintData():Copy()\r\n    pageSetupDialogData = pageSetupDialog:GetPageSetupDialogData():Copy()\r\n    pageSetupDialog:delete()\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "printData = pageSetupDialogData:GetPrintData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "local pageSetupDialog = wx.wxPageSetupDialog(frame, pageSetupDialogData)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "pageSetupDialog:ShowModal()",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "printData           = pageSetupDialog:GetPageSetupDialogData():GetPrintData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "pageSetupDialogData = pageSetupDialog:GetPageSetupDialogData():Copy()",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "pageSetupDialog:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function main()\r\n    -- create the frame window\r\n    frame = wx.wxFrame( wx.NULL, wx.wxID_ANY, \"wxLua Printing Demo\",\r\n                        wx.wxDefaultPosition, wx.wxSize(450, 450),\r\n                        wx.wxDEFAULT_FRAME_STYLE )\r\n\r\n    -- paint event handler\r\n    function Paint(event)\r\n        -- create the paint DC\r\n        local dc = wx.wxPaintDC(frame)\r\n        -- clear the window\r\n        dc:SetPen(wx.wxTRANSPARENT_PEN)\r\n        dc:SetBrush(wx.wxWHITE_BRUSH)\r\n        local w, h = frame:GetClientSizeWH()\r\n        dc:DrawRectangle(0, 0, w, h)\r\n        -- draw our figure\r\n        DisplayFigure(dc)\r\n        -- the paint DC will be destroyed by the garbage collector,\r\n        -- however on Windows 9x/Me this may be too late (DC's are precious resource)\r\n        -- so delete it here\r\n        dc:delete() -- ALWAYS delete() any wxDCs created when done\r\n    end\r\n\r\n    -- connect the paint event handler with the paint event\r\n    frame:Connect(wx.wxEVT_PAINT, Paint)\r\n\r\n    -- create a simple file menu\r\n    local fileMenu = wx.wxMenu()\r\n    fileMenu:Append(ID_PAGESETUP,    \"Page S&etup...\", \"Set up the page\")\r\n    fileMenu:Append(ID_PRINTSETUP,   \"Print &Setup...\", \"Set up the printer\")\r\n    fileMenu:Append(ID_PRINTPREVIEW, \"Print Pre&view...\", \"Preview the test print\")\r\n    fileMenu:Append(ID_PRINT,        \"&Print...\", \"Print the test print\")\r\n    fileMenu:Append(wx.wxID_EXIT,    \"E&xit\", \"Quit the program\")\r\n\r\n    -- create a simple help menu\r\n    local helpMenu = wx.wxMenu()\r\n    helpMenu:Append(wx.wxID_ABOUT, \"&About...\", \"About the wxLua Printing Application\")\r\n\r\n    -- create a menu bar and append the file and help menus\r\n    local menuBar = wx.wxMenuBar()\r\n    menuBar:Append(fileMenu, \"&File\")\r\n    menuBar:Append(helpMenu, \"&Help\")\r\n\r\n    -- insert the menu bar into the frame\r\n    frame:SetMenuBar(menuBar)\r\n\r\n    -- create a simple status bar\r\n    frame:CreateStatusBar(1)\r\n    frame:SetStatusText(\"Welcome to wxLua.\")\r\n\r\n    frame:Connect(ID_PAGESETUP, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) PageSetup() end )\r\n\r\n    frame:Connect(ID_PRINTSETUP, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) PrintSetup() end )\r\n\r\n    frame:Connect(ID_PRINTPREVIEW, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) PrintPreview() end )\r\n\r\n    frame:Connect(ID_PRINT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) Print() end )\r\n\r\n    -- connect the selection event of the exit menu item to an\r\n    -- event handler that closes the window\r\n    frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) frame:Close(true) end )\r\n\r\n    -- connect the selection event of the about menu item\r\n    frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                wx.wxMessageBox('This is the \"About\" dialog of the Printing wxLua sample.\\n'..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLua\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                frame )\r\n            end )\r\n\r\n    -- show the frame window\r\n    frame:Show(true)\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "frame = wx.wxFrame( wx.NULL, wx.wxID_ANY, \"wxLua Printing Demo\",\r\n                        wx.wxDefaultPosition, wx.wxSize(450, 450),\r\n                        wx.wxDEFAULT_FRAME_STYLE )",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "function Paint(event)\r\n        -- create the paint DC\r\n        local dc = wx.wxPaintDC(frame)\r\n        -- clear the window\r\n        dc:SetPen(wx.wxTRANSPARENT_PEN)\r\n        dc:SetBrush(wx.wxWHITE_BRUSH)\r\n        local w, h = frame:GetClientSizeWH()\r\n        dc:DrawRectangle(0, 0, w, h)\r\n        -- draw our figure\r\n        DisplayFigure(dc)\r\n        -- the paint DC will be destroyed by the garbage collector,\r\n        -- however on Windows 9x/Me this may be too late (DC's are precious resource)\r\n        -- so delete it here\r\n        dc:delete() -- ALWAYS delete() any wxDCs created when done\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 114,
    "text": "local dc = wx.wxPaintDC(frame)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "dc:SetPen(wx.wxTRANSPARENT_PEN)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "dc:SetBrush(wx.wxWHITE_BRUSH)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "local w, h = frame:GetClientSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "dc:DrawRectangle(0, 0, w, h)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "DisplayFigure(dc)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "dc:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "frame:Connect(wx.wxEVT_PAINT, Paint)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "local fileMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "fileMenu:Append(ID_PAGESETUP,    \"Page S&etup...\", \"Set up the page\")",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "fileMenu:Append(ID_PRINTSETUP,   \"Print &Setup...\", \"Set up the printer\")",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "fileMenu:Append(ID_PRINTPREVIEW, \"Print Pre&view...\", \"Preview the test print\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "fileMenu:Append(ID_PRINT,        \"&Print...\", \"Print the test print\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "fileMenu:Append(wx.wxID_EXIT,    \"E&xit\", \"Quit the program\")",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "local helpMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "helpMenu:Append(wx.wxID_ABOUT, \"&About...\", \"About the wxLua Printing Application\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "local menuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "menuBar:Append(fileMenu, \"&File\")",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "menuBar:Append(helpMenu, \"&Help\")",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "frame:SetMenuBar(menuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "frame:CreateStatusBar(1)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "frame:SetStatusText(\"Welcome to wxLua.\")",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "frame:Connect(ID_PAGESETUP, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) PageSetup() end )",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "PageSetup()",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "frame:Connect(ID_PRINTSETUP, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) PrintSetup() end )",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "PrintSetup()",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "frame:Connect(ID_PRINTPREVIEW, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) PrintPreview() end )",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "PrintPreview()",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "frame:Connect(ID_PRINT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) Print() end )",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "Print()",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n                  function (event) frame:Close(true) end )",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "frame:Close(true)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                wx.wxMessageBox('This is the \"About\" dialog of the Printing wxLua sample.\\n'..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLua\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                frame )\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the Printing wxLua sample.\\n'..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLua\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                frame )",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "frame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function Paint(event)\r\n        -- create the paint DC\r\n        local dc = wx.wxPaintDC(frame)\r\n        -- clear the window\r\n        dc:SetPen(wx.wxTRANSPARENT_PEN)\r\n        dc:SetBrush(wx.wxWHITE_BRUSH)\r\n        local w, h = frame:GetClientSizeWH()\r\n        dc:DrawRectangle(0, 0, w, h)\r\n        -- draw our figure\r\n        DisplayFigure(dc)\r\n        -- the paint DC will be destroyed by the garbage collector,\r\n        -- however on Windows 9x/Me this may be too late (DC's are precious resource)\r\n        -- so delete it here\r\n        dc:delete() -- ALWAYS delete() any wxDCs created when done\r\n    end",
    "type": "function"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function (event)\r\n                    previewFrame:Destroy()\r\n                    event:Skip()\r\n                end",
    "type": "function"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function (event) PageSetup() end",
    "type": "function"
  }, {
    "id": 155,
    "text": "function (event) PrintSetup() end",
    "type": "function"
  }, {
    "id": 156,
    "text": "function (event) PrintPreview() end",
    "type": "function"
  }, {
    "id": 157,
    "text": "function (event) Print() end",
    "type": "function"
  }, {
    "id": 158,
    "text": "function (event) frame:Close(true) end",
    "type": "function"
  }, {
    "id": 159,
    "text": "function (event)\r\n                wx.wxMessageBox('This is the \"About\" dialog of the Printing wxLua sample.\\n'..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLua\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                frame )\r\n            end",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "",
    "type": "function container"
  }, {
    "id": 162,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 163,
    "text": "wxPrintData",
    "type": "global function"
  }, {
    "id": 164,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 165,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 166,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 167,
    "text": "wxPrintDialogData",
    "type": "global function"
  }, {
    "id": 168,
    "text": "wxPrinter",
    "type": "global function"
  }, {
    "id": 169,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 170,
    "text": "wxPrintPreview",
    "type": "global function"
  }, {
    "id": 171,
    "text": "wxPrintDialog",
    "type": "global function"
  }, {
    "id": 172,
    "text": "wxPageSetupDialogData",
    "type": "global function"
  }, {
    "id": 173,
    "text": "wxLuaPrintout",
    "type": "global function"
  }, {
    "id": 174,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 175,
    "text": "wxPoint",
    "type": "global function"
  }, {
    "id": 176,
    "text": "wxPageSetupDialog",
    "type": "global function"
  }, {
    "id": 177,
    "text": "wxPaintDC",
    "type": "global function"
  }, {
    "id": 178,
    "text": "wxPreviewFrame",
    "type": "global function"
  }, {
    "id": 179,
    "text": "require",
    "type": "global function"
  }, {
    "id": 180,
    "text": "",
    "type": "global variable"
  }, {
    "id": 181,
    "text": "",
    "type": "variable container"
  }, {
    "id": 182,
    "text": "",
    "type": "require container"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "global variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "global variable"
  }, {
    "id": 194,
    "text": "",
    "type": "global variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "",
    "type": "global variable"
  }, {
    "id": 197,
    "text": "",
    "type": "n/a"
  } ]
}