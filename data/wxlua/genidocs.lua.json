{
  "_filename": "genidocs.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/bindings/genidocs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 19
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 19
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 19
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 19
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 19
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 19
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 45,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 45,
    "label": "has",
    "to": 57
  }, {
    "from": 45,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 61,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 58,
    "label": "has",
    "to": 76
  }, {
    "from": 58,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 45,
    "label": "has",
    "to": 79
  }, {
    "from": 45,
    "label": "has",
    "to": 19
  }, {
    "from": 45,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 46
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 56
  }, {
    "from": 81,
    "label": "has",
    "to": 57
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 78
  }, {
    "from": 81,
    "label": "has",
    "to": 79
  }, {
    "from": 81,
    "label": "has",
    "to": 19
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 87,
    "label": "has",
    "to": 19
  }, {
    "from": 87,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 19
  }, {
    "from": 96,
    "label": "has",
    "to": 19
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 100,
    "label": "has",
    "to": 106
  }, {
    "from": 100,
    "label": "has",
    "to": 107
  }, {
    "from": 100,
    "label": "has",
    "to": 108
  }, {
    "from": 100,
    "label": "has",
    "to": 109
  }, {
    "from": 100,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 19
  }, {
    "from": 100,
    "label": "has",
    "to": 19
  }, {
    "from": 100,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 102
  }, {
    "from": 112,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 114,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 122,
    "label": "has",
    "to": 128
  }, {
    "from": 122,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 129,
    "label": "has",
    "to": 133
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 129,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 136,
    "label": "has",
    "to": 140
  }, {
    "from": 136,
    "label": "has",
    "to": 141
  }, {
    "from": 136,
    "label": "has",
    "to": 142
  }, {
    "from": 136,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 139
  }, {
    "from": 136,
    "label": "has",
    "to": 144
  }, {
    "from": 136,
    "label": "has",
    "to": 145
  }, {
    "from": 136,
    "label": "has",
    "to": 142
  }, {
    "from": 129,
    "label": "has",
    "to": 146
  }, {
    "from": 129,
    "label": "has",
    "to": 147
  }, {
    "from": 129,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 129,
    "label": "has",
    "to": 150
  }, {
    "from": 129,
    "label": "has",
    "to": 151
  }, {
    "from": 129,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 88
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 152,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 152,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 152,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 152,
    "label": "has",
    "to": 166
  }, {
    "from": 152,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 171
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 172
  }, {
    "from": 167,
    "label": "has",
    "to": 173
  }, {
    "from": 167,
    "label": "has",
    "to": 174
  }, {
    "from": 167,
    "label": "has",
    "to": 175
  }, {
    "from": 167,
    "label": "has",
    "to": 176
  }, {
    "from": 167,
    "label": "has",
    "to": 177
  }, {
    "from": 167,
    "label": "has",
    "to": 178
  }, {
    "from": 129,
    "label": "has",
    "to": 179
  }, {
    "from": 129,
    "label": "has",
    "to": 180
  }, {
    "from": 129,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 182,
    "label": "has",
    "to": 185
  }, {
    "from": 182,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 129,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 19
  }, {
    "from": 129,
    "label": "has",
    "to": 191
  }, {
    "from": 129,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 192,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 192,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 192,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 192,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 192,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 129,
    "label": "has",
    "to": 207
  }, {
    "from": 114,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 210,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 209,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 216,
    "label": "has",
    "to": 19
  }, {
    "from": 216,
    "label": "has",
    "to": 219
  }, {
    "from": 216,
    "label": "has",
    "to": 220
  }, {
    "from": 216,
    "label": "has",
    "to": 221
  }, {
    "from": 216,
    "label": "has",
    "to": 19
  }, {
    "from": 216,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 223,
    "label": "has",
    "to": 19
  }, {
    "from": 223,
    "label": "has",
    "to": 227
  }, {
    "from": 223,
    "label": "has",
    "to": 228
  }, {
    "from": 223,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 223,
    "label": "has",
    "to": 19
  }, {
    "from": 223,
    "label": "has",
    "to": 231
  }, {
    "from": 223,
    "label": "has",
    "to": 232
  }, {
    "from": 223,
    "label": "has",
    "to": 233
  }, {
    "from": 223,
    "label": "has",
    "to": 19
  }, {
    "from": 223,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 235,
    "label": "has",
    "to": 239
  }, {
    "from": 235,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 243
  }, {
    "from": 240,
    "label": "has",
    "to": 244
  }, {
    "from": 240,
    "label": "has",
    "to": 245
  }, {
    "from": 235,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 246,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 249,
    "label": "has",
    "to": 252
  }, {
    "from": 235,
    "label": "has",
    "to": 253
  }, {
    "from": 235,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 235,
    "label": "has",
    "to": 258
  }, {
    "from": 235,
    "label": "has",
    "to": 259
  }, {
    "from": 235,
    "label": "has",
    "to": 260
  }, {
    "from": 235,
    "label": "has",
    "to": 261
  }, {
    "from": 235,
    "label": "has",
    "to": 260
  }, {
    "from": 235,
    "label": "has",
    "to": 262
  }, {
    "from": 235,
    "label": "has",
    "to": 260
  }, {
    "from": 235,
    "label": "has",
    "to": 263
  }, {
    "from": 235,
    "label": "has",
    "to": 264
  }, {
    "from": 235,
    "label": "has",
    "to": 265
  }, {
    "from": 235,
    "label": "has",
    "to": 266
  }, {
    "from": 267,
    "label": "has",
    "to": 19
  }, {
    "from": 268,
    "label": "has",
    "to": 19
  }, {
    "from": 216,
    "label": "calls",
    "to": 273
  }, {
    "from": 223,
    "label": "calls",
    "to": 273
  }, {
    "from": 223,
    "label": "calls",
    "to": 278
  }, {
    "from": 216,
    "label": "calls",
    "to": 279
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 3,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 114,
    "label": "calls",
    "to": 17
  }, {
    "from": 96,
    "label": "calls",
    "to": 283
  }, {
    "from": 112,
    "label": "calls",
    "to": 283
  }, {
    "from": 112,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 114,
    "label": "calls",
    "to": 283
  }, {
    "from": 223,
    "label": "calls",
    "to": 216
  }, {
    "from": 235,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 281
  }, {
    "from": 114,
    "label": "calls",
    "to": 29
  }, {
    "from": 114,
    "label": "calls",
    "to": 29
  }, {
    "from": 235,
    "label": "calls",
    "to": 41
  }, {
    "from": 114,
    "label": "calls",
    "to": 270
  }, {
    "from": 114,
    "label": "calls",
    "to": 270
  }, {
    "from": 223,
    "label": "calls",
    "to": 270
  }, {
    "from": 223,
    "label": "calls",
    "to": 270
  }, {
    "from": 223,
    "label": "calls",
    "to": 270
  }, {
    "from": 235,
    "label": "calls",
    "to": 270
  }, {
    "from": 235,
    "label": "calls",
    "to": 270
  }, {
    "from": 235,
    "label": "calls",
    "to": 270
  }, {
    "from": 235,
    "label": "calls",
    "to": 270
  }, {
    "from": 235,
    "label": "calls",
    "to": 270
  }, {
    "from": 235,
    "label": "calls",
    "to": 270
  }, {
    "from": 235,
    "label": "calls",
    "to": 270
  }, {
    "from": 235,
    "label": "calls",
    "to": 270
  }, {
    "from": 114,
    "label": "calls",
    "to": 274
  }, {
    "from": 209,
    "label": "calls",
    "to": 274
  }, {
    "from": 269,
    "label": "calls",
    "to": 287
  }, {
    "from": 269,
    "label": "calls",
    "to": 287
  }, {
    "from": 269,
    "label": "calls",
    "to": 287
  }, {
    "from": 269,
    "label": "calls",
    "to": 287
  }, {
    "from": 269,
    "label": "calls",
    "to": 287
  }, {
    "from": 269,
    "label": "calls",
    "to": 287
  }, {
    "from": 269,
    "label": "calls",
    "to": 287
  }, {
    "from": 269,
    "label": "calls",
    "to": 287
  }, {
    "from": 87,
    "label": "calls",
    "to": 287
  }, {
    "from": 114,
    "label": "calls",
    "to": 287
  }, {
    "from": 114,
    "label": "calls",
    "to": 275
  }, {
    "from": 209,
    "label": "calls",
    "to": 275
  }, {
    "from": 29,
    "label": "calls",
    "to": 282
  }, {
    "from": 29,
    "label": "calls",
    "to": 282
  }, {
    "from": 29,
    "label": "calls",
    "to": 282
  }, {
    "from": 29,
    "label": "calls",
    "to": 282
  }, {
    "from": 36,
    "label": "calls",
    "to": 282
  }, {
    "from": 36,
    "label": "calls",
    "to": 282
  }, {
    "from": 36,
    "label": "calls",
    "to": 282
  }, {
    "from": 114,
    "label": "calls",
    "to": 282
  }, {
    "from": 114,
    "label": "calls",
    "to": 87
  }, {
    "from": 114,
    "label": "calls",
    "to": 87
  }, {
    "from": 114,
    "label": "calls",
    "to": 87
  }, {
    "from": 235,
    "label": "calls",
    "to": 209
  }, {
    "from": 114,
    "label": "calls",
    "to": 96
  }, {
    "from": 114,
    "label": "calls",
    "to": 96
  }, {
    "from": 114,
    "label": "calls",
    "to": 96
  }, {
    "from": 114,
    "label": "calls",
    "to": 96
  }, {
    "from": 114,
    "label": "calls",
    "to": 96
  }, {
    "from": 114,
    "label": "calls",
    "to": 96
  }, {
    "from": 114,
    "label": "calls",
    "to": 96
  }, {
    "from": 114,
    "label": "calls",
    "to": 96
  }, {
    "from": 114,
    "label": "calls",
    "to": 96
  }, {
    "from": 45,
    "label": "calls",
    "to": 285
  }, {
    "from": 45,
    "label": "calls",
    "to": 285
  }, {
    "from": 45,
    "label": "calls",
    "to": 285
  }, {
    "from": 81,
    "label": "calls",
    "to": 285
  }, {
    "from": 45,
    "label": "calls",
    "to": 25
  }, {
    "from": 45,
    "label": "calls",
    "to": 25
  }, {
    "from": 81,
    "label": "calls",
    "to": 25
  }, {
    "from": 114,
    "label": "calls",
    "to": 25
  }, {
    "from": 114,
    "label": "calls",
    "to": 25
  }, {
    "from": 216,
    "label": "calls",
    "to": 286
  }, {
    "from": 223,
    "label": "calls",
    "to": 286
  }, {
    "from": 114,
    "label": "calls",
    "to": 27
  }, {
    "from": 114,
    "label": "calls",
    "to": 27
  }, {
    "from": 235,
    "label": "calls",
    "to": 280
  }, {
    "from": 114,
    "label": "calls",
    "to": 100
  }, {
    "from": 114,
    "label": "calls",
    "to": 100
  }, {
    "from": 114,
    "label": "calls",
    "to": 100
  }, {
    "from": 269,
    "label": "calls",
    "to": 235
  }, {
    "from": 87,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 114,
    "label": "calls",
    "to": 271
  }, {
    "from": 235,
    "label": "calls",
    "to": 114
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 3,
    "label": "calls",
    "to": 272
  }, {
    "from": 41,
    "label": "calls",
    "to": 272
  }, {
    "from": 41,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 45,
    "label": "calls",
    "to": 272
  }, {
    "from": 81,
    "label": "calls",
    "to": 272
  }, {
    "from": 81,
    "label": "calls",
    "to": 272
  }, {
    "from": 81,
    "label": "calls",
    "to": 272
  }, {
    "from": 81,
    "label": "calls",
    "to": 272
  }, {
    "from": 112,
    "label": "calls",
    "to": 272
  }, {
    "from": 114,
    "label": "calls",
    "to": 272
  }, {
    "from": 114,
    "label": "calls",
    "to": 272
  }, {
    "from": 114,
    "label": "calls",
    "to": 272
  }, {
    "from": 114,
    "label": "calls",
    "to": 272
  }, {
    "from": 114,
    "label": "calls",
    "to": 272
  }, {
    "from": 114,
    "label": "calls",
    "to": 272
  }, {
    "from": 235,
    "label": "calls",
    "to": 272
  }, {
    "from": 235,
    "label": "calls",
    "to": 272
  }, {
    "from": 235,
    "label": "calls",
    "to": 272
  }, {
    "from": 235,
    "label": "calls",
    "to": 45
  }, {
    "from": 235,
    "label": "calls",
    "to": 284
  }, {
    "from": 235,
    "label": "calls",
    "to": 284
  }, {
    "from": 100,
    "label": "calls",
    "to": 112
  }, {
    "from": 100,
    "label": "calls",
    "to": 112
  }, {
    "from": 100,
    "label": "calls",
    "to": 112
  }, {
    "from": 235,
    "label": "calls",
    "to": 288
  }, {
    "from": 114,
    "label": "calls",
    "to": 36
  }, {
    "from": 45,
    "label": "calls",
    "to": 276
  }, {
    "from": 81,
    "label": "calls",
    "to": 276
  }, {
    "from": 100,
    "label": "calls",
    "to": 276
  }, {
    "from": 114,
    "label": "calls",
    "to": 277
  }, {
    "from": 114,
    "label": "calls",
    "to": 277
  }, {
    "from": 114,
    "label": "calls",
    "to": 277
  }, {
    "from": 114,
    "label": "calls",
    "to": 277
  }, {
    "from": 114,
    "label": "calls",
    "to": 277
  }, {
    "from": 235,
    "label": "calls",
    "to": 223
  }, {
    "from": 235,
    "label": "calls",
    "to": 81
  }, {
    "from": 114,
    "label": "calls",
    "to": 21
  }, {
    "from": 1,
    "label": "contains",
    "to": 269
  }, {
    "from": 269,
    "label": "declares",
    "to": 2
  }, {
    "from": 269,
    "label": "declares",
    "to": 3
  }, {
    "from": 269,
    "label": "declares",
    "to": 17
  }, {
    "from": 269,
    "label": "declares",
    "to": 21
  }, {
    "from": 269,
    "label": "declares",
    "to": 23
  }, {
    "from": 269,
    "label": "declares",
    "to": 25
  }, {
    "from": 269,
    "label": "declares",
    "to": 27
  }, {
    "from": 269,
    "label": "declares",
    "to": 29
  }, {
    "from": 269,
    "label": "declares",
    "to": 36
  }, {
    "from": 269,
    "label": "declares",
    "to": 41
  }, {
    "from": 269,
    "label": "declares",
    "to": 45
  }, {
    "from": 269,
    "label": "declares",
    "to": 81
  }, {
    "from": 269,
    "label": "declares",
    "to": 87
  }, {
    "from": 269,
    "label": "declares",
    "to": 96
  }, {
    "from": 269,
    "label": "declares",
    "to": 100
  }, {
    "from": 269,
    "label": "declares",
    "to": 112
  }, {
    "from": 269,
    "label": "declares",
    "to": 114
  }, {
    "from": 269,
    "label": "declares",
    "to": 209
  }, {
    "from": 269,
    "label": "declares",
    "to": 216
  }, {
    "from": 269,
    "label": "declares",
    "to": 223
  }, {
    "from": 269,
    "label": "declares",
    "to": 235
  }, {
    "from": 269,
    "label": "declares",
    "to": 267
  }, {
    "from": 269,
    "label": "declares",
    "to": 268
  }, {
    "from": 1,
    "label": "contains",
    "to": 289
  }, {
    "from": 1,
    "label": "contains",
    "to": 290
  }, {
    "from": 289,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 289,
    "label": "initializes",
    "to": 293
  }, {
    "from": 289,
    "label": "initializes",
    "to": 294
  }, {
    "from": 294,
    "label": "assigns",
    "to": 295
  }, {
    "from": 289,
    "label": "initializes",
    "to": 296
  }, {
    "from": 296,
    "label": "assigns",
    "to": 297
  }, {
    "from": 289,
    "label": "initializes",
    "to": 298
  }, {
    "from": 298,
    "label": "assigns",
    "to": 299
  }, {
    "from": 289,
    "label": "initializes",
    "to": 300
  }, {
    "from": 300,
    "label": "assigns",
    "to": 301
  }, {
    "from": 289,
    "label": "initializes",
    "to": 302
  }, {
    "from": 289,
    "label": "initializes",
    "to": 303
  }, {
    "from": 289,
    "label": "initializes",
    "to": 304
  }, {
    "from": 289,
    "label": "initializes",
    "to": 305
  }, {
    "from": 289,
    "label": "initializes",
    "to": 306
  }, {
    "from": 289,
    "label": "initializes",
    "to": 307
  }, {
    "from": 289,
    "label": "initializes",
    "to": 308
  }, {
    "from": 289,
    "label": "initializes",
    "to": 309
  }, {
    "from": 289,
    "label": "initializes",
    "to": 310
  }, {
    "from": 289,
    "label": "initializes",
    "to": 311
  }, {
    "from": 289,
    "label": "initializes",
    "to": 312
  }, {
    "from": 289,
    "label": "initializes",
    "to": 313
  }, {
    "from": 289,
    "label": "initializes",
    "to": 314
  }, {
    "from": 289,
    "label": "initializes",
    "to": 315
  }, {
    "from": 289,
    "label": "initializes",
    "to": 316
  }, {
    "from": 289,
    "label": "initializes",
    "to": 317
  }, {
    "from": 289,
    "label": "initializes",
    "to": 318
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 267
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "genidocs",
    "type": "module"
  }, {
    "id": 2,
    "text": "function AllocDataType() end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function GenerateTestColours(fileTable)\r\n    table.insert(fileTable, \"<h2>Colours used to denote types</h2>\")\r\n\r\n    table.insert(fileTable, MakeColour(\"Comments - //\", colours.comment)..\"<br>\")\r\n    table.insert(fileTable, MakeColour(\"Block Comments - /* ... */\", colours.blkcomment)..\"<br>\")\r\n\r\n    table.insert(fileTable, MakeColour(\"Enums - %enum\", colours.enum)..\"<br>\")\r\n    table.insert(fileTable, MakeColour(\"Defines - %define [_string] [_object] [_pointer]\", colours.define)..\"<br>\")\r\n    table.insert(fileTable, MakeColour(\"Events - %define_event\", colours.event)..\"<br>\")\r\n    table.insert(fileTable, MakeColour(\"Functions - %function\", colours.func)..\"<br>\")\r\n\r\n    table.insert(fileTable, MakeColour(\"Classes - %class\", colours.class)..\"<br>\")\r\n    table.insert(fileTable, MakeColour(\"Class Members - %member\", colours.member)..\"<br>\")\r\n    table.insert(fileTable, MakeColour(\"Renamed Functions - %rename\", colours.rename)..\"<br>\")\r\n    table.insert(fileTable, MakeColour(\"Overridden Functions - %override\", colours.override)..\"<br>\")\r\n    table.insert(fileTable, MakeColour(\"Operator Functions - %operator\", colours.operator)..\"<br><br>\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "table.insert(fileTable, \"<h2>Colours used to denote types</h2>\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "table.insert(fileTable, MakeColour(\"Comments - //\", colours.comment)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "table.insert(fileTable, MakeColour(\"Block Comments - /* ... */\", colours.blkcomment)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "table.insert(fileTable, MakeColour(\"Enums - %enum\", colours.enum)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "table.insert(fileTable, MakeColour(\"Defines - %define [_string] [_object] [_pointer]\", colours.define)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "table.insert(fileTable, MakeColour(\"Events - %define_event\", colours.event)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "table.insert(fileTable, MakeColour(\"Functions - %function\", colours.func)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "table.insert(fileTable, MakeColour(\"Classes - %class\", colours.class)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "table.insert(fileTable, MakeColour(\"Class Members - %member\", colours.member)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "table.insert(fileTable, MakeColour(\"Renamed Functions - %rename\", colours.rename)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "table.insert(fileTable, MakeColour(\"Overridden Functions - %override\", colours.override)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "table.insert(fileTable, MakeColour(\"Operator Functions - %operator\", colours.operator)..\"<br><br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function MakeColour(str, color, size)\r\n    if size then\r\n        return \"<font size=+\"..size..\" color=#\"..color..\">\"..str..\"</font>\"\r\n    end\r\n\r\n    return \"<font color=#\"..color..\">\"..str..\"</font>\"\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if size then\r\n        return \"<font size=+\"..size..\" color=#\"..color..\">\"..str..\"</font>\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function MakeBold(str)\r\n    return \"<b>\"..str..\"</b>\"\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function MakeItalic(str)\r\n    return \"<i>\"..str..\"</i>\"\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function MakeLink(link_name, str)\r\n    --<a href=\"#papers\">papers</a>\r\n    return \"<a href=\\\"#\"..link_name..\"\\\">\"..(str or link_name)..\"</a>\"\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function MakeTag(link_name, str)\r\n    --<a name=\"papers\">Papers</a>\r\n    return \"<a name=\\\"\"..link_name..\"\\\">\"..(str or link_name)..\"</a>\"\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function MakeTagName(name)\r\n    local s = string.lower(name)\r\n    s = string.gsub(s, \"%/\", \"_\")\r\n    s = string.gsub(s, \"% \", \"_\")\r\n    s = string.gsub(s, \"%(\", \"_\")\r\n    s = string.gsub(s, \"%)\", \"_\")\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local s = string.lower(name)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "s = string.gsub(s, \"%/\", \"_\")",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "s = string.gsub(s, \"% \", \"_\")",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "s = string.gsub(s, \"%(\", \"_\")",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "s = string.gsub(s, \"%)\", \"_\")",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function MakeHTML(str)\r\n    local s = string.gsub(str, \"&\", \"&amp;\")\r\n    s = string.gsub(s, \">\", \"&gt;\")\r\n    s = string.gsub(s, \"<\", \"&lt;\")\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local s = string.gsub(str, \"&\", \"&amp;\")",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "s = string.gsub(s, \">\", \"&gt;\")",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "s = string.gsub(s, \"<\", \"&lt;\")",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function GenerateFooter(fileTable)\r\n    table.insert(fileTable, \"</body>\")\r\n    table.insert(fileTable, \"</html>\")\r\n\r\n    return fileTable\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "table.insert(fileTable, \"</body>\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "table.insert(fileTable, \"</html>\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function GenerateClassReference(fileTable)\r\n    local names = {}\r\n\r\n    table.insert(fileTable, \"<h2>Classes</h2>\")\r\n\r\n    local allClasses = {}\r\n\r\n    if completeClassRefTable then\r\n        for k, v in pairs(completeClassRefTable) do\r\n            allClasses[k] = false -- for example ALL wxWidgets classes\r\n        end\r\n    end\r\n    for k, v in pairs(dataTypeTable) do\r\n        -- hack for special classes\r\n        if (v.ValueType == \"class\") or (v.ValueType == \"struct\") or (v.ValueType == \"wx2lua\") then\r\n            allClasses[k]      = true -- the ones we wrap\r\n        end\r\n    end\r\n\r\n    for k, v in pairs(allClasses) do\r\n        table.insert(names, k)\r\n    end\r\n    table.sort(names)\r\n\r\n    --[[\r\n    <table border=\"1\">\r\n        <tr>  <td>row 1, cell 1</td>  <td>row 1, cell 2</td> </tr>\r\n        <tr>  <td>row 2, cell 1</td>  <td>row 2, cell 2</td> </tr>\r\n    </table>\r\n    ]]\r\n\r\n    if completeClassRefTable then\r\n\r\n        table.insert(fileTable, \"<table border=\\\"1\\\">\")\r\n        table.insert(fileTable, \"  <tr><th>Class Name</th> <th>\"..completeClassRefColLabel..\"</th> <th>Wrapped by wxLua</th> <th>Notes</th></tr>\")\r\n\r\n        for n = 1, #names do\r\n            local cname = names[n]\r\n\r\n            table.insert(fileTable, \"<tr>\")\r\n\r\n            -- link to class in html file\r\n            if allClasses[cname] then\r\n                table.insert(fileTable, \"<td>\"..MakeLink(cname)) -- optional </td>\r\n            else\r\n                table.insert(fileTable, \"<td>\"..cname)\r\n            end\r\n\r\n            -- in \"manual\" or complete list of classes\r\n            if completeClassRefTable and completeClassRefTable[cname] then\r\n                table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_manual..\">X\")\r\n            else\r\n                table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_manual..\">&nbsp;\")\r\n            end\r\n\r\n            -- wrapped by wxLua\r\n            if allClasses[cname] then\r\n                table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_wxlua..\">X\")\r\n            else\r\n                table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_wxlua..\">&nbsp;\")\r\n            end\r\n\r\n            -- note about the class\r\n            if msgForClassInIndex and msgForClassInIndex[cname] then\r\n                table.insert(fileTable, \"<td>\"..msgForClassInIndex[cname])\r\n            else\r\n                table.insert(fileTable, \"<td>&nbsp;\")\r\n            end\r\n\r\n            -- table.insert(fileTable, \"</tr>\") -- optional </tr>\r\n        end\r\n\r\n        table.insert(fileTable, \"</table><br>\")\r\n    else\r\n        for n = 1, #names do\r\n            table.insert(fileTable, MakeLink(names[n])..\"<br>\")\r\n        end\r\n    end\r\n\r\n    table.insert(fileTable, \"<br>\")\r\n\r\n    return fileTable\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local names = {}",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "table.insert(fileTable, \"<h2>Classes</h2>\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local allClasses = {}",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if completeClassRefTable then\r\n        for k, v in pairs(completeClassRefTable) do\r\n            allClasses[k] = false -- for example ALL wxWidgets classes\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "for k, v in pairs(completeClassRefTable) do\r\n            allClasses[k] = false -- for example ALL wxWidgets classes\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "allClasses[k] = false",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "for k, v in pairs(dataTypeTable) do\r\n        -- hack for special classes\r\n        if (v.ValueType == \"class\") or (v.ValueType == \"struct\") or (v.ValueType == \"wx2lua\") then\r\n            allClasses[k]      = true -- the ones we wrap\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "if (v.ValueType == \"class\") or (v.ValueType == \"struct\") or (v.ValueType == \"wx2lua\") then\r\n            allClasses[k]      = true -- the ones we wrap\r\n        end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "allClasses[k]      = true",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "for k, v in pairs(allClasses) do\r\n        table.insert(names, k)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "table.insert(names, k)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "table.sort(names)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "if completeClassRefTable then\r\n\r\n        table.insert(fileTable, \"<table border=\\\"1\\\">\")\r\n        table.insert(fileTable, \"  <tr><th>Class Name</th> <th>\"..completeClassRefColLabel..\"</th> <th>Wrapped by wxLua</th> <th>Notes</th></tr>\")\r\n\r\n        for n = 1, #names do\r\n            local cname = names[n]\r\n\r\n            table.insert(fileTable, \"<tr>\")\r\n\r\n            -- link to class in html file\r\n            if allClasses[cname] then\r\n                table.insert(fileTable, \"<td>\"..MakeLink(cname)) -- optional </td>\r\n            else\r\n                table.insert(fileTable, \"<td>\"..cname)\r\n            end\r\n\r\n            -- in \"manual\" or complete list of classes\r\n            if completeClassRefTable and completeClassRefTable[cname] then\r\n                table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_manual..\">X\")\r\n            else\r\n                table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_manual..\">&nbsp;\")\r\n            end\r\n\r\n            -- wrapped by wxLua\r\n            if allClasses[cname] then\r\n                table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_wxlua..\">X\")\r\n            else\r\n                table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_wxlua..\">&nbsp;\")\r\n            end\r\n\r\n            -- note about the class\r\n            if msgForClassInIndex and msgForClassInIndex[cname] then\r\n                table.insert(fileTable, \"<td>\"..msgForClassInIndex[cname])\r\n            else\r\n                table.insert(fileTable, \"<td>&nbsp;\")\r\n            end\r\n\r\n            -- table.insert(fileTable, \"</tr>\") -- optional </tr>\r\n        end\r\n\r\n        table.insert(fileTable, \"</table><br>\")\r\n    else\r\n        for n = 1, #names do\r\n            table.insert(fileTable, MakeLink(names[n])..\"<br>\")\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "table.insert(fileTable, \"<table border=\\\"1\\\">\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "table.insert(fileTable, \"  <tr><th>Class Name</th> <th>\"..completeClassRefColLabel..\"</th> <th>Wrapped by wxLua</th> <th>Notes</th></tr>\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "for n = 1, #names do\r\n            local cname = names[n]\r\n\r\n            table.insert(fileTable, \"<tr>\")\r\n\r\n            -- link to class in html file\r\n            if allClasses[cname] then\r\n                table.insert(fileTable, \"<td>\"..MakeLink(cname)) -- optional </td>\r\n            else\r\n                table.insert(fileTable, \"<td>\"..cname)\r\n            end\r\n\r\n            -- in \"manual\" or complete list of classes\r\n            if completeClassRefTable and completeClassRefTable[cname] then\r\n                table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_manual..\">X\")\r\n            else\r\n                table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_manual..\">&nbsp;\")\r\n            end\r\n\r\n            -- wrapped by wxLua\r\n            if allClasses[cname] then\r\n                table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_wxlua..\">X\")\r\n            else\r\n                table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_wxlua..\">&nbsp;\")\r\n            end\r\n\r\n            -- note about the class\r\n            if msgForClassInIndex and msgForClassInIndex[cname] then\r\n                table.insert(fileTable, \"<td>\"..msgForClassInIndex[cname])\r\n            else\r\n                table.insert(fileTable, \"<td>&nbsp;\")\r\n            end\r\n\r\n            -- table.insert(fileTable, \"</tr>\") -- optional </tr>\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 62,
    "text": "local cname = names[n]",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "table.insert(fileTable, \"<tr>\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "if allClasses[cname] then\r\n                table.insert(fileTable, \"<td>\"..MakeLink(cname)) -- optional </td>\r\n            else\r\n                table.insert(fileTable, \"<td>\"..cname)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "table.insert(fileTable, \"<td>\"..MakeLink(cname))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "table.insert(fileTable, \"<td>\"..cname)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "if completeClassRefTable and completeClassRefTable[cname] then\r\n                table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_manual..\">X\")\r\n            else\r\n                table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_manual..\">&nbsp;\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_manual..\">X\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_manual..\">&nbsp;\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "if allClasses[cname] then\r\n                table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_wxlua..\">X\")\r\n            else\r\n                table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_wxlua..\">&nbsp;\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "table.insert(fileTable, \"<td align=\\\"center\\\" bgcolor=\"..colours.in_wxlua..\">X\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "table.insert(fileTable, \"<td bgcolor=\"..colours.not_in_wxlua..\">&nbsp;\")",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if msgForClassInIndex and msgForClassInIndex[cname] then\r\n                table.insert(fileTable, \"<td>\"..msgForClassInIndex[cname])\r\n            else\r\n                table.insert(fileTable, \"<td>&nbsp;\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "table.insert(fileTable, \"<td>\"..msgForClassInIndex[cname])",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "table.insert(fileTable, \"<td>&nbsp;\")",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "table.insert(fileTable, \"</table><br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "for n = 1, #names do\r\n            table.insert(fileTable, MakeLink(names[n])..\"<br>\")\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 78,
    "text": "table.insert(fileTable, MakeLink(names[n])..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "table.insert(fileTable, \"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function GenerateEnumReference(fileTable)\r\n    local names = {}\r\n\r\n    table.insert(fileTable, \"<h2>Enums</h2>\")\r\n\r\n    for k, v in pairs(dataTypeTable) do\r\n        if v.ValueType == \"enum\" then\r\n            table.insert(names, k)\r\n        end\r\n    end\r\n    table.sort(names)\r\n    for n = 1, #names do\r\n        table.insert(fileTable, MakeLink(names[n])..\"<br>\")\r\n    end\r\n\r\n    table.insert(fileTable, \"<br>\")\r\n\r\n    return fileTable\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "table.insert(fileTable, \"<h2>Enums</h2>\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "for k, v in pairs(dataTypeTable) do\r\n        if v.ValueType == \"enum\" then\r\n            table.insert(names, k)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 84,
    "text": "if v.ValueType == \"enum\" then\r\n            table.insert(names, k)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "for n = 1, #names do\r\n        table.insert(fileTable, MakeLink(names[n])..\"<br>\")\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function GetPreviousWord(str, pos)\r\n    local start_pos = 0\r\n    local end_pos = 0\r\n    for n = pos, 0, -1 do\r\n        if not nameChars[string.byte(str, n)] then\r\n            if end_pos ~= 0 then\r\n                start_pos = n+1\r\n                break\r\n            end\r\n        elseif end_pos == 0 then\r\n            end_pos = n\r\n        end\r\n    end\r\n    return string.sub(str, start_pos, end_pos), start_pos\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "local start_pos = 0",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local end_pos = 0",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "for n = pos, 0, -1 do\r\n        if not nameChars[string.byte(str, n)] then\r\n            if end_pos ~= 0 then\r\n                start_pos = n+1\r\n                break\r\n            end\r\n        elseif end_pos == 0 then\r\n            end_pos = n\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 91,
    "text": "if not nameChars[string.byte(str, n)] then\r\n            if end_pos ~= 0 then\r\n                start_pos = n+1\r\n                break\r\n            end\r\n        elseif end_pos == 0 then\r\n            end_pos = n\r\n        end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "if end_pos ~= 0 then\r\n                start_pos = n+1\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "start_pos = n+1",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "end_pos = n",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function TagIsBefore(txt, tag, ifbefore_pos)\r\n    local pos = string.find(txt, tag, 1, 1)\r\n    if pos and ((ifbefore_pos == nil) or (pos < ifbefore_pos)) then\r\n        return true\r\n    end\r\n    return false\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local pos = string.find(txt, tag, 1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if pos and ((ifbefore_pos == nil) or (pos < ifbefore_pos)) then\r\n        return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function GetAllComments(str)\r\n    local function FindAllStrings(str, find_txt, tbl)\r\n        local s, e = string.find(str, find_txt, 1, 1)\r\n        while s do\r\n            table.insert(tbl, { [\"s\"] = s, [\"e\"] = e, [\"txt\"] = find_txt })\r\n            s, e = string.find(str, find_txt, e+1, 1)\r\n        end\r\n    end\r\n\r\n    local t = {}\r\n    FindAllStrings(str, \"//\", t)\r\n    FindAllStrings(str, \"/*\", t)\r\n    FindAllStrings(str, \"*/\", t)\r\n\r\n    table.sort(t, function(t1, t2) return t1.s < t2.s end)\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "local function FindAllStrings(str, find_txt, tbl)\r\n        local s, e = string.find(str, find_txt, 1, 1)\r\n        while s do\r\n            table.insert(tbl, { [\"s\"] = s, [\"e\"] = e, [\"txt\"] = find_txt })\r\n            s, e = string.find(str, find_txt, e+1, 1)\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 102,
    "text": "local s, e = string.find(str, find_txt, 1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "while s do\r\n            table.insert(tbl, { [\"s\"] = s, [\"e\"] = e, [\"txt\"] = find_txt })\r\n            s, e = string.find(str, find_txt, e+1, 1)\r\n        end",
    "type": "statement:while"
  }, {
    "id": 104,
    "text": "table.insert(tbl, { [\"s\"] = s, [\"e\"] = e, [\"txt\"] = find_txt })",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "s, e = string.find(str, find_txt, e+1, 1)",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "FindAllStrings(str, \"//\", t)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "FindAllStrings(str, \"/*\", t)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "FindAllStrings(str, \"*/\", t)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "table.sort(t, function(t1, t2) return t1.s < t2.s end)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "local function FindAllStrings(str, find_txt, tbl)\r\n        local s, e = string.find(str, find_txt, 1, 1)\r\n        while s do\r\n            table.insert(tbl, { [\"s\"] = s, [\"e\"] = e, [\"txt\"] = find_txt })\r\n            s, e = string.find(str, find_txt, e+1, 1)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function ReadInterfaceFiles(fileTable)\r\n\r\n    table.insert(fileTable, \"<h2>Interface files</h2>\")\r\n\r\n    for i = 1, #interface_fileTable do\r\n        for j = 1, #interface_fileTable[i].files do\r\n            local s = interface_fileTable[i].file_path..interface_fileTable[i].files[j]\r\n            table.insert(fileTable, MakeLink(MakeTagName(s), s)..\"<br>\")\r\n        end\r\n    end\r\n\r\n    local strSp = string.byte(\" \")\r\n\r\n    for i = 1, #interface_fileTable do\r\n    for j = 1, #interface_fileTable[i].files do\r\n\r\n        table.insert(fileTable, \"<br><HR>\\n\")\r\n        local filename = interface_fileTable[i].file_path..interface_fileTable[i].files[j]\r\n        table.insert(fileTable, \"<h2>\"..MakeTag(MakeTagName(filename), filename)..\" - Lua table = '\"..interface_fileTable[i].namespace..\"'</h2>\")\r\n        table.insert(fileTable, \"<HR>\\n\")\r\n\r\n        local in_blk_comment = false\r\n\r\n        local line_n = 0\r\n\r\n        for line in io.lines(filename) do\r\n            line_n = line_n + 1\r\n            local cname = \"\"\r\n            local out_line = MakeHTML(line)\r\n\r\n            local comment_pos = string.find(line, \"//\", 1, 1) or 1E6\r\n\r\n            -- handle all comments in the order they appear\r\n            local t = GetAllComments(out_line)\r\n            for n = 1, #t do\r\n                if t[n].txt == \"//\" then\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..MakeColour(string.sub(out_line, t[n].s), colours.comment)\r\n                    break\r\n                elseif t[n].txt == \"/*\" then\r\n                    if in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n\r\n                    in_blk_comment = true\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..\"<font color=#\"..colours.blkcomment..\">\"..string.sub(out_line, t[n].s)\r\n                    t = GetAllComments(out_line)\r\n                elseif t[n].txt == \"*/\" then\r\n                    if not in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n                    in_blk_comment = false\r\n                    out_line = string.sub(out_line, 1, t[n].s+1)..\"</font>\"..string.sub(out_line, t[n].s+2)\r\n                    t = GetAllComments(out_line)\r\n                end\r\n            end\r\n\r\n            local class_pos, class_pos2   = string.find(line, \"%class\", 1, 1)\r\n            local enum_pos,  enum_pos2    = string.find(line, \"%enum\", 1, 1)\r\n\r\n            if not class_pos then\r\n                class_pos, class_pos2   = string.find(line, \"%struct\", 1, 1)\r\n            end\r\n\r\n            local start_block = nil\r\n            local end_block   = nil\r\n\r\n            if (class_pos and (class_pos < comment_pos)) or (enum_pos and (enum_pos < comment_pos)) then\r\n                start_block = true\r\n\r\n                -- find this class not the base class\r\n                local comma = string.find(line, \",\", 1, 1)\r\n                local start_pos = 0\r\n                if class_pos and comma then\r\n                    cname, start_pos = GetPreviousWord(line, comma-1)\r\n                elseif comment_pos < 1E6 then\r\n                    cname, start_pos = GetPreviousWord(line, comment_pos-1)\r\n                else\r\n                    cname, start_pos = GetPreviousWord(line, string.len(line))\r\n                end\r\n\r\n                if cname == \"enum\" then\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..cname..string.sub(out_line, start_pos+string.len(cname))\r\n                else\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..MakeTag(cname)..string.sub(out_line, start_pos+string.len(cname))\r\n                end\r\n\r\n                if class_pos then\r\n                    out_line = MakeColour(out_line, colours.class, 1)\r\n                end\r\n                if enum_pos then\r\n                    out_line = MakeColour(out_line, colours.enum, 1)\r\n                end\r\n\r\n                out_line = MakeBold(out_line)\r\n            else\r\n                -- priortize the colouring so we don't have to check for every single case\r\n\r\n                if TagIsBefore(line, \"%endclass\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endclass\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endstruct\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endstruct\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endenum\", comment_pos)  then\r\n                    end_block = true\r\n                    enum_pos = string.find(line, \"%endenum\", 1, 1)\r\n                elseif TagIsBefore(line, \"%member\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.member)\r\n                elseif TagIsBefore(line, \"%rename\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.rename)\r\n                elseif TagIsBefore(line, \"%override\", 1E6) then\r\n                    out_line = MakeColour(out_line, colours.override)\r\n                elseif TagIsBefore(line, \"%event\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.event)\r\n                elseif TagIsBefore(line, \"%define\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.define)\r\n                elseif TagIsBefore(line, \"%function\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.func)\r\n                end\r\n            end\r\n\r\n            local used = {}\r\n            used[cname] = true\r\n\r\n            for w in string.gmatch(line, \"([%w_]+)\") do\r\n                if ((string.len(cname) == 0) or (not string.find(w, cname, 1, 1))) and\r\n                    (not used[w]) and\r\n                    dataTypeTable[w] and (dataTypeTable[w].ValueType ~= \"number\") and\r\n                    (dataTypeTable[w].ValueType ~= \"wxtypedef\") and (dataTypeTable[w].ValueType ~= \"special\") then\r\n\r\n                    used[w] = true\r\n\r\n                    -- replace the classname with a link, but not if it's part of a name\r\n                    --out_line = string.gsub(out_line, w, MakeLink(w))\r\n                    local pat = \"[ %&%*%(%)%{%}%[%]%+%-%=%<%>%.%-%+%|%/%,]\"\r\n                    -- need extra ending space to find words at end of line\r\n                    local s, e = string.find(out_line..\" \", w..pat, 1)\r\n                    while s do\r\n                        local link = MakeLink(w)\r\n                        out_line = string.sub(out_line, 1, s-1)..link..string.sub(out_line, e)\r\n                        s, e = string.find(out_line..\" \", w..pat, s+string.len(link))\r\n                    end\r\n                end\r\n            end\r\n\r\n            -- italicize the %keywords\r\n            out_line = string.gsub(out_line, \"(%%[%w_]+)\", function(s) return \"<i>\"..s..\"</i>\" end)\r\n\r\n--[[\r\n            -- alternate to blockquote, just force the spaces\r\n            local start_spaces = 0\r\n\r\n            for n = 1, string.len(out_line) do\r\n                if string.byte(out_line, n) == strSp then\r\n                    start_spaces = start_spaces + 1\r\n                else\r\n                    break\r\n                end\r\n            end\r\n            if start_spaces > 0 then\r\n                out_line = string.rep(\"&nbsp;\", start_spaces)..string.sub(out_line, start_spaces)\r\n            end\r\n]]\r\n\r\n            local tail = \"<br>\"\r\n\r\n            if start_block then\r\n                tail = \"\" -- don't add extra space since blockquote already gives a linebreak\r\n\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"</font>\"\r\n                end\r\n\r\n                out_line = out_line..\"\\n<blockquote>\"\r\n\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if enum_pos then\r\n                    out_line = out_line..\"<font color=#\"..colours.enum..\">\"\r\n                end\r\n                -- restart the block comment after blockquote, overrides enum colour\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            elseif end_block then\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if class_pos then\r\n                    out_line = \"</blockquote>\"..MakeColour(out_line, colours.class)\r\n                end\r\n                if enum_pos then\r\n                    out_line = \"</font>\\n</blockquote>\"..MakeColour(out_line, colours.enum)\r\n                end\r\n                -- restart the block comment after blockquote\r\n                if in_blk_comment then\r\n                    out_line = \"</font>\"..out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            end\r\n\r\n            table.insert(fileTable, out_line..tail)\r\n        end\r\n    end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "table.insert(fileTable, \"<h2>Interface files</h2>\")",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "for i = 1, #interface_fileTable do\r\n        for j = 1, #interface_fileTable[i].files do\r\n            local s = interface_fileTable[i].file_path..interface_fileTable[i].files[j]\r\n            table.insert(fileTable, MakeLink(MakeTagName(s), s)..\"<br>\")\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 117,
    "text": "for j = 1, #interface_fileTable[i].files do\r\n            local s = interface_fileTable[i].file_path..interface_fileTable[i].files[j]\r\n            table.insert(fileTable, MakeLink(MakeTagName(s), s)..\"<br>\")\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 118,
    "text": "local s = interface_fileTable[i].file_path..interface_fileTable[i].files[j]",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "table.insert(fileTable, MakeLink(MakeTagName(s), s)..\"<br>\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "local strSp = string.byte(\" \")",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "for i = 1, #interface_fileTable do\r\n    for j = 1, #interface_fileTable[i].files do\r\n\r\n        table.insert(fileTable, \"<br><HR>\\n\")\r\n        local filename = interface_fileTable[i].file_path..interface_fileTable[i].files[j]\r\n        table.insert(fileTable, \"<h2>\"..MakeTag(MakeTagName(filename), filename)..\" - Lua table = '\"..interface_fileTable[i].namespace..\"'</h2>\")\r\n        table.insert(fileTable, \"<HR>\\n\")\r\n\r\n        local in_blk_comment = false\r\n\r\n        local line_n = 0\r\n\r\n        for line in io.lines(filename) do\r\n            line_n = line_n + 1\r\n            local cname = \"\"\r\n            local out_line = MakeHTML(line)\r\n\r\n            local comment_pos = string.find(line, \"//\", 1, 1) or 1E6\r\n\r\n            -- handle all comments in the order they appear\r\n            local t = GetAllComments(out_line)\r\n            for n = 1, #t do\r\n                if t[n].txt == \"//\" then\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..MakeColour(string.sub(out_line, t[n].s), colours.comment)\r\n                    break\r\n                elseif t[n].txt == \"/*\" then\r\n                    if in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n\r\n                    in_blk_comment = true\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..\"<font color=#\"..colours.blkcomment..\">\"..string.sub(out_line, t[n].s)\r\n                    t = GetAllComments(out_line)\r\n                elseif t[n].txt == \"*/\" then\r\n                    if not in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n                    in_blk_comment = false\r\n                    out_line = string.sub(out_line, 1, t[n].s+1)..\"</font>\"..string.sub(out_line, t[n].s+2)\r\n                    t = GetAllComments(out_line)\r\n                end\r\n            end\r\n\r\n            local class_pos, class_pos2   = string.find(line, \"%class\", 1, 1)\r\n            local enum_pos,  enum_pos2    = string.find(line, \"%enum\", 1, 1)\r\n\r\n            if not class_pos then\r\n                class_pos, class_pos2   = string.find(line, \"%struct\", 1, 1)\r\n            end\r\n\r\n            local start_block = nil\r\n            local end_block   = nil\r\n\r\n            if (class_pos and (class_pos < comment_pos)) or (enum_pos and (enum_pos < comment_pos)) then\r\n                start_block = true\r\n\r\n                -- find this class not the base class\r\n                local comma = string.find(line, \",\", 1, 1)\r\n                local start_pos = 0\r\n                if class_pos and comma then\r\n                    cname, start_pos = GetPreviousWord(line, comma-1)\r\n                elseif comment_pos < 1E6 then\r\n                    cname, start_pos = GetPreviousWord(line, comment_pos-1)\r\n                else\r\n                    cname, start_pos = GetPreviousWord(line, string.len(line))\r\n                end\r\n\r\n                if cname == \"enum\" then\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..cname..string.sub(out_line, start_pos+string.len(cname))\r\n                else\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..MakeTag(cname)..string.sub(out_line, start_pos+string.len(cname))\r\n                end\r\n\r\n                if class_pos then\r\n                    out_line = MakeColour(out_line, colours.class, 1)\r\n                end\r\n                if enum_pos then\r\n                    out_line = MakeColour(out_line, colours.enum, 1)\r\n                end\r\n\r\n                out_line = MakeBold(out_line)\r\n            else\r\n                -- priortize the colouring so we don't have to check for every single case\r\n\r\n                if TagIsBefore(line, \"%endclass\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endclass\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endstruct\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endstruct\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endenum\", comment_pos)  then\r\n                    end_block = true\r\n                    enum_pos = string.find(line, \"%endenum\", 1, 1)\r\n                elseif TagIsBefore(line, \"%member\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.member)\r\n                elseif TagIsBefore(line, \"%rename\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.rename)\r\n                elseif TagIsBefore(line, \"%override\", 1E6) then\r\n                    out_line = MakeColour(out_line, colours.override)\r\n                elseif TagIsBefore(line, \"%event\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.event)\r\n                elseif TagIsBefore(line, \"%define\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.define)\r\n                elseif TagIsBefore(line, \"%function\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.func)\r\n                end\r\n            end\r\n\r\n            local used = {}\r\n            used[cname] = true\r\n\r\n            for w in string.gmatch(line, \"([%w_]+)\") do\r\n                if ((string.len(cname) == 0) or (not string.find(w, cname, 1, 1))) and\r\n                    (not used[w]) and\r\n                    dataTypeTable[w] and (dataTypeTable[w].ValueType ~= \"number\") and\r\n                    (dataTypeTable[w].ValueType ~= \"wxtypedef\") and (dataTypeTable[w].ValueType ~= \"special\") then\r\n\r\n                    used[w] = true\r\n\r\n                    -- replace the classname with a link, but not if it's part of a name\r\n                    --out_line = string.gsub(out_line, w, MakeLink(w))\r\n                    local pat = \"[ %&%*%(%)%{%}%[%]%+%-%=%<%>%.%-%+%|%/%,]\"\r\n                    -- need extra ending space to find words at end of line\r\n                    local s, e = string.find(out_line..\" \", w..pat, 1)\r\n                    while s do\r\n                        local link = MakeLink(w)\r\n                        out_line = string.sub(out_line, 1, s-1)..link..string.sub(out_line, e)\r\n                        s, e = string.find(out_line..\" \", w..pat, s+string.len(link))\r\n                    end\r\n                end\r\n            end\r\n\r\n            -- italicize the %keywords\r\n            out_line = string.gsub(out_line, \"(%%[%w_]+)\", function(s) return \"<i>\"..s..\"</i>\" end)\r\n\r\n--[[\r\n            -- alternate to blockquote, just force the spaces\r\n            local start_spaces = 0\r\n\r\n            for n = 1, string.len(out_line) do\r\n                if string.byte(out_line, n) == strSp then\r\n                    start_spaces = start_spaces + 1\r\n                else\r\n                    break\r\n                end\r\n            end\r\n            if start_spaces > 0 then\r\n                out_line = string.rep(\"&nbsp;\", start_spaces)..string.sub(out_line, start_spaces)\r\n            end\r\n]]\r\n\r\n            local tail = \"<br>\"\r\n\r\n            if start_block then\r\n                tail = \"\" -- don't add extra space since blockquote already gives a linebreak\r\n\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"</font>\"\r\n                end\r\n\r\n                out_line = out_line..\"\\n<blockquote>\"\r\n\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if enum_pos then\r\n                    out_line = out_line..\"<font color=#\"..colours.enum..\">\"\r\n                end\r\n                -- restart the block comment after blockquote, overrides enum colour\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            elseif end_block then\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if class_pos then\r\n                    out_line = \"</blockquote>\"..MakeColour(out_line, colours.class)\r\n                end\r\n                if enum_pos then\r\n                    out_line = \"</font>\\n</blockquote>\"..MakeColour(out_line, colours.enum)\r\n                end\r\n                -- restart the block comment after blockquote\r\n                if in_blk_comment then\r\n                    out_line = \"</font>\"..out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            end\r\n\r\n            table.insert(fileTable, out_line..tail)\r\n        end\r\n    end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 122,
    "text": "for j = 1, #interface_fileTable[i].files do\r\n\r\n        table.insert(fileTable, \"<br><HR>\\n\")\r\n        local filename = interface_fileTable[i].file_path..interface_fileTable[i].files[j]\r\n        table.insert(fileTable, \"<h2>\"..MakeTag(MakeTagName(filename), filename)..\" - Lua table = '\"..interface_fileTable[i].namespace..\"'</h2>\")\r\n        table.insert(fileTable, \"<HR>\\n\")\r\n\r\n        local in_blk_comment = false\r\n\r\n        local line_n = 0\r\n\r\n        for line in io.lines(filename) do\r\n            line_n = line_n + 1\r\n            local cname = \"\"\r\n            local out_line = MakeHTML(line)\r\n\r\n            local comment_pos = string.find(line, \"//\", 1, 1) or 1E6\r\n\r\n            -- handle all comments in the order they appear\r\n            local t = GetAllComments(out_line)\r\n            for n = 1, #t do\r\n                if t[n].txt == \"//\" then\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..MakeColour(string.sub(out_line, t[n].s), colours.comment)\r\n                    break\r\n                elseif t[n].txt == \"/*\" then\r\n                    if in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n\r\n                    in_blk_comment = true\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..\"<font color=#\"..colours.blkcomment..\">\"..string.sub(out_line, t[n].s)\r\n                    t = GetAllComments(out_line)\r\n                elseif t[n].txt == \"*/\" then\r\n                    if not in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n                    in_blk_comment = false\r\n                    out_line = string.sub(out_line, 1, t[n].s+1)..\"</font>\"..string.sub(out_line, t[n].s+2)\r\n                    t = GetAllComments(out_line)\r\n                end\r\n            end\r\n\r\n            local class_pos, class_pos2   = string.find(line, \"%class\", 1, 1)\r\n            local enum_pos,  enum_pos2    = string.find(line, \"%enum\", 1, 1)\r\n\r\n            if not class_pos then\r\n                class_pos, class_pos2   = string.find(line, \"%struct\", 1, 1)\r\n            end\r\n\r\n            local start_block = nil\r\n            local end_block   = nil\r\n\r\n            if (class_pos and (class_pos < comment_pos)) or (enum_pos and (enum_pos < comment_pos)) then\r\n                start_block = true\r\n\r\n                -- find this class not the base class\r\n                local comma = string.find(line, \",\", 1, 1)\r\n                local start_pos = 0\r\n                if class_pos and comma then\r\n                    cname, start_pos = GetPreviousWord(line, comma-1)\r\n                elseif comment_pos < 1E6 then\r\n                    cname, start_pos = GetPreviousWord(line, comment_pos-1)\r\n                else\r\n                    cname, start_pos = GetPreviousWord(line, string.len(line))\r\n                end\r\n\r\n                if cname == \"enum\" then\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..cname..string.sub(out_line, start_pos+string.len(cname))\r\n                else\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..MakeTag(cname)..string.sub(out_line, start_pos+string.len(cname))\r\n                end\r\n\r\n                if class_pos then\r\n                    out_line = MakeColour(out_line, colours.class, 1)\r\n                end\r\n                if enum_pos then\r\n                    out_line = MakeColour(out_line, colours.enum, 1)\r\n                end\r\n\r\n                out_line = MakeBold(out_line)\r\n            else\r\n                -- priortize the colouring so we don't have to check for every single case\r\n\r\n                if TagIsBefore(line, \"%endclass\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endclass\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endstruct\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endstruct\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endenum\", comment_pos)  then\r\n                    end_block = true\r\n                    enum_pos = string.find(line, \"%endenum\", 1, 1)\r\n                elseif TagIsBefore(line, \"%member\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.member)\r\n                elseif TagIsBefore(line, \"%rename\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.rename)\r\n                elseif TagIsBefore(line, \"%override\", 1E6) then\r\n                    out_line = MakeColour(out_line, colours.override)\r\n                elseif TagIsBefore(line, \"%event\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.event)\r\n                elseif TagIsBefore(line, \"%define\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.define)\r\n                elseif TagIsBefore(line, \"%function\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.func)\r\n                end\r\n            end\r\n\r\n            local used = {}\r\n            used[cname] = true\r\n\r\n            for w in string.gmatch(line, \"([%w_]+)\") do\r\n                if ((string.len(cname) == 0) or (not string.find(w, cname, 1, 1))) and\r\n                    (not used[w]) and\r\n                    dataTypeTable[w] and (dataTypeTable[w].ValueType ~= \"number\") and\r\n                    (dataTypeTable[w].ValueType ~= \"wxtypedef\") and (dataTypeTable[w].ValueType ~= \"special\") then\r\n\r\n                    used[w] = true\r\n\r\n                    -- replace the classname with a link, but not if it's part of a name\r\n                    --out_line = string.gsub(out_line, w, MakeLink(w))\r\n                    local pat = \"[ %&%*%(%)%{%}%[%]%+%-%=%<%>%.%-%+%|%/%,]\"\r\n                    -- need extra ending space to find words at end of line\r\n                    local s, e = string.find(out_line..\" \", w..pat, 1)\r\n                    while s do\r\n                        local link = MakeLink(w)\r\n                        out_line = string.sub(out_line, 1, s-1)..link..string.sub(out_line, e)\r\n                        s, e = string.find(out_line..\" \", w..pat, s+string.len(link))\r\n                    end\r\n                end\r\n            end\r\n\r\n            -- italicize the %keywords\r\n            out_line = string.gsub(out_line, \"(%%[%w_]+)\", function(s) return \"<i>\"..s..\"</i>\" end)\r\n\r\n--[[\r\n            -- alternate to blockquote, just force the spaces\r\n            local start_spaces = 0\r\n\r\n            for n = 1, string.len(out_line) do\r\n                if string.byte(out_line, n) == strSp then\r\n                    start_spaces = start_spaces + 1\r\n                else\r\n                    break\r\n                end\r\n            end\r\n            if start_spaces > 0 then\r\n                out_line = string.rep(\"&nbsp;\", start_spaces)..string.sub(out_line, start_spaces)\r\n            end\r\n]]\r\n\r\n            local tail = \"<br>\"\r\n\r\n            if start_block then\r\n                tail = \"\" -- don't add extra space since blockquote already gives a linebreak\r\n\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"</font>\"\r\n                end\r\n\r\n                out_line = out_line..\"\\n<blockquote>\"\r\n\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if enum_pos then\r\n                    out_line = out_line..\"<font color=#\"..colours.enum..\">\"\r\n                end\r\n                -- restart the block comment after blockquote, overrides enum colour\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            elseif end_block then\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if class_pos then\r\n                    out_line = \"</blockquote>\"..MakeColour(out_line, colours.class)\r\n                end\r\n                if enum_pos then\r\n                    out_line = \"</font>\\n</blockquote>\"..MakeColour(out_line, colours.enum)\r\n                end\r\n                -- restart the block comment after blockquote\r\n                if in_blk_comment then\r\n                    out_line = \"</font>\"..out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            end\r\n\r\n            table.insert(fileTable, out_line..tail)\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 123,
    "text": "table.insert(fileTable, \"<br><HR>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "local filename = interface_fileTable[i].file_path..interface_fileTable[i].files[j]",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "table.insert(fileTable, \"<h2>\"..MakeTag(MakeTagName(filename), filename)..\" - Lua table = '\"..interface_fileTable[i].namespace..\"'</h2>\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "table.insert(fileTable, \"<HR>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "local in_blk_comment = false",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "local line_n = 0",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "for line in io.lines(filename) do\r\n            line_n = line_n + 1\r\n            local cname = \"\"\r\n            local out_line = MakeHTML(line)\r\n\r\n            local comment_pos = string.find(line, \"//\", 1, 1) or 1E6\r\n\r\n            -- handle all comments in the order they appear\r\n            local t = GetAllComments(out_line)\r\n            for n = 1, #t do\r\n                if t[n].txt == \"//\" then\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..MakeColour(string.sub(out_line, t[n].s), colours.comment)\r\n                    break\r\n                elseif t[n].txt == \"/*\" then\r\n                    if in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n\r\n                    in_blk_comment = true\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..\"<font color=#\"..colours.blkcomment..\">\"..string.sub(out_line, t[n].s)\r\n                    t = GetAllComments(out_line)\r\n                elseif t[n].txt == \"*/\" then\r\n                    if not in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n                    in_blk_comment = false\r\n                    out_line = string.sub(out_line, 1, t[n].s+1)..\"</font>\"..string.sub(out_line, t[n].s+2)\r\n                    t = GetAllComments(out_line)\r\n                end\r\n            end\r\n\r\n            local class_pos, class_pos2   = string.find(line, \"%class\", 1, 1)\r\n            local enum_pos,  enum_pos2    = string.find(line, \"%enum\", 1, 1)\r\n\r\n            if not class_pos then\r\n                class_pos, class_pos2   = string.find(line, \"%struct\", 1, 1)\r\n            end\r\n\r\n            local start_block = nil\r\n            local end_block   = nil\r\n\r\n            if (class_pos and (class_pos < comment_pos)) or (enum_pos and (enum_pos < comment_pos)) then\r\n                start_block = true\r\n\r\n                -- find this class not the base class\r\n                local comma = string.find(line, \",\", 1, 1)\r\n                local start_pos = 0\r\n                if class_pos and comma then\r\n                    cname, start_pos = GetPreviousWord(line, comma-1)\r\n                elseif comment_pos < 1E6 then\r\n                    cname, start_pos = GetPreviousWord(line, comment_pos-1)\r\n                else\r\n                    cname, start_pos = GetPreviousWord(line, string.len(line))\r\n                end\r\n\r\n                if cname == \"enum\" then\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..cname..string.sub(out_line, start_pos+string.len(cname))\r\n                else\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..MakeTag(cname)..string.sub(out_line, start_pos+string.len(cname))\r\n                end\r\n\r\n                if class_pos then\r\n                    out_line = MakeColour(out_line, colours.class, 1)\r\n                end\r\n                if enum_pos then\r\n                    out_line = MakeColour(out_line, colours.enum, 1)\r\n                end\r\n\r\n                out_line = MakeBold(out_line)\r\n            else\r\n                -- priortize the colouring so we don't have to check for every single case\r\n\r\n                if TagIsBefore(line, \"%endclass\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endclass\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endstruct\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endstruct\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endenum\", comment_pos)  then\r\n                    end_block = true\r\n                    enum_pos = string.find(line, \"%endenum\", 1, 1)\r\n                elseif TagIsBefore(line, \"%member\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.member)\r\n                elseif TagIsBefore(line, \"%rename\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.rename)\r\n                elseif TagIsBefore(line, \"%override\", 1E6) then\r\n                    out_line = MakeColour(out_line, colours.override)\r\n                elseif TagIsBefore(line, \"%event\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.event)\r\n                elseif TagIsBefore(line, \"%define\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.define)\r\n                elseif TagIsBefore(line, \"%function\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.func)\r\n                end\r\n            end\r\n\r\n            local used = {}\r\n            used[cname] = true\r\n\r\n            for w in string.gmatch(line, \"([%w_]+)\") do\r\n                if ((string.len(cname) == 0) or (not string.find(w, cname, 1, 1))) and\r\n                    (not used[w]) and\r\n                    dataTypeTable[w] and (dataTypeTable[w].ValueType ~= \"number\") and\r\n                    (dataTypeTable[w].ValueType ~= \"wxtypedef\") and (dataTypeTable[w].ValueType ~= \"special\") then\r\n\r\n                    used[w] = true\r\n\r\n                    -- replace the classname with a link, but not if it's part of a name\r\n                    --out_line = string.gsub(out_line, w, MakeLink(w))\r\n                    local pat = \"[ %&%*%(%)%{%}%[%]%+%-%=%<%>%.%-%+%|%/%,]\"\r\n                    -- need extra ending space to find words at end of line\r\n                    local s, e = string.find(out_line..\" \", w..pat, 1)\r\n                    while s do\r\n                        local link = MakeLink(w)\r\n                        out_line = string.sub(out_line, 1, s-1)..link..string.sub(out_line, e)\r\n                        s, e = string.find(out_line..\" \", w..pat, s+string.len(link))\r\n                    end\r\n                end\r\n            end\r\n\r\n            -- italicize the %keywords\r\n            out_line = string.gsub(out_line, \"(%%[%w_]+)\", function(s) return \"<i>\"..s..\"</i>\" end)\r\n\r\n--[[\r\n            -- alternate to blockquote, just force the spaces\r\n            local start_spaces = 0\r\n\r\n            for n = 1, string.len(out_line) do\r\n                if string.byte(out_line, n) == strSp then\r\n                    start_spaces = start_spaces + 1\r\n                else\r\n                    break\r\n                end\r\n            end\r\n            if start_spaces > 0 then\r\n                out_line = string.rep(\"&nbsp;\", start_spaces)..string.sub(out_line, start_spaces)\r\n            end\r\n]]\r\n\r\n            local tail = \"<br>\"\r\n\r\n            if start_block then\r\n                tail = \"\" -- don't add extra space since blockquote already gives a linebreak\r\n\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"</font>\"\r\n                end\r\n\r\n                out_line = out_line..\"\\n<blockquote>\"\r\n\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if enum_pos then\r\n                    out_line = out_line..\"<font color=#\"..colours.enum..\">\"\r\n                end\r\n                -- restart the block comment after blockquote, overrides enum colour\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            elseif end_block then\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if class_pos then\r\n                    out_line = \"</blockquote>\"..MakeColour(out_line, colours.class)\r\n                end\r\n                if enum_pos then\r\n                    out_line = \"</font>\\n</blockquote>\"..MakeColour(out_line, colours.enum)\r\n                end\r\n                -- restart the block comment after blockquote\r\n                if in_blk_comment then\r\n                    out_line = \"</font>\"..out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            end\r\n\r\n            table.insert(fileTable, out_line..tail)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 130,
    "text": "line_n = line_n + 1",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "local cname = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "local out_line = MakeHTML(line)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local comment_pos = string.find(line, \"//\", 1, 1) or 1E6",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local t = GetAllComments(out_line)",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "for n = 1, #t do\r\n                if t[n].txt == \"//\" then\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..MakeColour(string.sub(out_line, t[n].s), colours.comment)\r\n                    break\r\n                elseif t[n].txt == \"/*\" then\r\n                    if in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n\r\n                    in_blk_comment = true\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..\"<font color=#\"..colours.blkcomment..\">\"..string.sub(out_line, t[n].s)\r\n                    t = GetAllComments(out_line)\r\n                elseif t[n].txt == \"*/\" then\r\n                    if not in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n                    in_blk_comment = false\r\n                    out_line = string.sub(out_line, 1, t[n].s+1)..\"</font>\"..string.sub(out_line, t[n].s+2)\r\n                    t = GetAllComments(out_line)\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 136,
    "text": "if t[n].txt == \"//\" then\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..MakeColour(string.sub(out_line, t[n].s), colours.comment)\r\n                    break\r\n                elseif t[n].txt == \"/*\" then\r\n                    if in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n\r\n                    in_blk_comment = true\r\n                    out_line = string.sub(out_line, 1, t[n].s-1)..\"<font color=#\"..colours.blkcomment..\">\"..string.sub(out_line, t[n].s)\r\n                    t = GetAllComments(out_line)\r\n                elseif t[n].txt == \"*/\" then\r\n                    if not in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end\r\n                    in_blk_comment = false\r\n                    out_line = string.sub(out_line, 1, t[n].s+1)..\"</font>\"..string.sub(out_line, t[n].s+2)\r\n                    t = GetAllComments(out_line)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "out_line = string.sub(out_line, 1, t[n].s-1)..MakeColour(string.sub(out_line, t[n].s), colours.comment)",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "if in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "print(\"ERROR mismatched /* */ in :\", filename, line_n, line)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "in_blk_comment = true",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "out_line = string.sub(out_line, 1, t[n].s-1)..\"<font color=#\"..colours.blkcomment..\">\"..string.sub(out_line, t[n].s)",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "t = GetAllComments(out_line)",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "if not in_blk_comment then print(\"ERROR mismatched /* */ in :\", filename, line_n, line) end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "in_blk_comment = false",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "out_line = string.sub(out_line, 1, t[n].s+1)..\"</font>\"..string.sub(out_line, t[n].s+2)",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "local class_pos, class_pos2   = string.find(line, \"%class\", 1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "local enum_pos,  enum_pos2    = string.find(line, \"%enum\", 1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if not class_pos then\r\n                class_pos, class_pos2   = string.find(line, \"%struct\", 1, 1)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "class_pos, class_pos2   = string.find(line, \"%struct\", 1, 1)",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "local start_block = nil",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "local end_block   = nil",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if (class_pos and (class_pos < comment_pos)) or (enum_pos and (enum_pos < comment_pos)) then\r\n                start_block = true\r\n\r\n                -- find this class not the base class\r\n                local comma = string.find(line, \",\", 1, 1)\r\n                local start_pos = 0\r\n                if class_pos and comma then\r\n                    cname, start_pos = GetPreviousWord(line, comma-1)\r\n                elseif comment_pos < 1E6 then\r\n                    cname, start_pos = GetPreviousWord(line, comment_pos-1)\r\n                else\r\n                    cname, start_pos = GetPreviousWord(line, string.len(line))\r\n                end\r\n\r\n                if cname == \"enum\" then\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..cname..string.sub(out_line, start_pos+string.len(cname))\r\n                else\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..MakeTag(cname)..string.sub(out_line, start_pos+string.len(cname))\r\n                end\r\n\r\n                if class_pos then\r\n                    out_line = MakeColour(out_line, colours.class, 1)\r\n                end\r\n                if enum_pos then\r\n                    out_line = MakeColour(out_line, colours.enum, 1)\r\n                end\r\n\r\n                out_line = MakeBold(out_line)\r\n            else\r\n                -- priortize the colouring so we don't have to check for every single case\r\n\r\n                if TagIsBefore(line, \"%endclass\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endclass\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endstruct\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endstruct\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endenum\", comment_pos)  then\r\n                    end_block = true\r\n                    enum_pos = string.find(line, \"%endenum\", 1, 1)\r\n                elseif TagIsBefore(line, \"%member\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.member)\r\n                elseif TagIsBefore(line, \"%rename\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.rename)\r\n                elseif TagIsBefore(line, \"%override\", 1E6) then\r\n                    out_line = MakeColour(out_line, colours.override)\r\n                elseif TagIsBefore(line, \"%event\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.event)\r\n                elseif TagIsBefore(line, \"%define\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.define)\r\n                elseif TagIsBefore(line, \"%function\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.func)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "start_block = true",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "local comma = string.find(line, \",\", 1, 1)",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "if class_pos and comma then\r\n                    cname, start_pos = GetPreviousWord(line, comma-1)\r\n                elseif comment_pos < 1E6 then\r\n                    cname, start_pos = GetPreviousWord(line, comment_pos-1)\r\n                else\r\n                    cname, start_pos = GetPreviousWord(line, string.len(line))\r\n                end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "cname, start_pos = GetPreviousWord(line, comma-1)",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "cname, start_pos = GetPreviousWord(line, comment_pos-1)",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "cname, start_pos = GetPreviousWord(line, string.len(line))",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "if cname == \"enum\" then\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..cname..string.sub(out_line, start_pos+string.len(cname))\r\n                else\r\n                    out_line = string.sub(out_line, 1, start_pos-1)..MakeTag(cname)..string.sub(out_line, start_pos+string.len(cname))\r\n                end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "out_line = string.sub(out_line, 1, start_pos-1)..cname..string.sub(out_line, start_pos+string.len(cname))",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "out_line = string.sub(out_line, 1, start_pos-1)..MakeTag(cname)..string.sub(out_line, start_pos+string.len(cname))",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "if class_pos then\r\n                    out_line = MakeColour(out_line, colours.class, 1)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "out_line = MakeColour(out_line, colours.class, 1)",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "if enum_pos then\r\n                    out_line = MakeColour(out_line, colours.enum, 1)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "out_line = MakeColour(out_line, colours.enum, 1)",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "out_line = MakeBold(out_line)",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "if TagIsBefore(line, \"%endclass\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endclass\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endstruct\", comment_pos)  then\r\n                    out_line = MakeColour(out_line, colours.class)\r\n                    end_block = true\r\n                    class_pos = string.find(line, \"%endstruct\", 1, 1)\r\n                elseif TagIsBefore(line, \"%endenum\", comment_pos)  then\r\n                    end_block = true\r\n                    enum_pos = string.find(line, \"%endenum\", 1, 1)\r\n                elseif TagIsBefore(line, \"%member\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.member)\r\n                elseif TagIsBefore(line, \"%rename\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.rename)\r\n                elseif TagIsBefore(line, \"%override\", 1E6) then\r\n                    out_line = MakeColour(out_line, colours.override)\r\n                elseif TagIsBefore(line, \"%event\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.event)\r\n                elseif TagIsBefore(line, \"%define\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.define)\r\n                elseif TagIsBefore(line, \"%function\", comment_pos) then\r\n                    out_line = MakeColour(out_line, colours.func)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "out_line = MakeColour(out_line, colours.class)",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "end_block = true",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "class_pos = string.find(line, \"%endclass\", 1, 1)",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "class_pos = string.find(line, \"%endstruct\", 1, 1)",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "enum_pos = string.find(line, \"%endenum\", 1, 1)",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "out_line = MakeColour(out_line, colours.member)",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "out_line = MakeColour(out_line, colours.rename)",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "out_line = MakeColour(out_line, colours.override)",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "out_line = MakeColour(out_line, colours.event)",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "out_line = MakeColour(out_line, colours.define)",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "out_line = MakeColour(out_line, colours.func)",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "local used = {}",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "used[cname] = true",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "for w in string.gmatch(line, \"([%w_]+)\") do\r\n                if ((string.len(cname) == 0) or (not string.find(w, cname, 1, 1))) and\r\n                    (not used[w]) and\r\n                    dataTypeTable[w] and (dataTypeTable[w].ValueType ~= \"number\") and\r\n                    (dataTypeTable[w].ValueType ~= \"wxtypedef\") and (dataTypeTable[w].ValueType ~= \"special\") then\r\n\r\n                    used[w] = true\r\n\r\n                    -- replace the classname with a link, but not if it's part of a name\r\n                    --out_line = string.gsub(out_line, w, MakeLink(w))\r\n                    local pat = \"[ %&%*%(%)%{%}%[%]%+%-%=%<%>%.%-%+%|%/%,]\"\r\n                    -- need extra ending space to find words at end of line\r\n                    local s, e = string.find(out_line..\" \", w..pat, 1)\r\n                    while s do\r\n                        local link = MakeLink(w)\r\n                        out_line = string.sub(out_line, 1, s-1)..link..string.sub(out_line, e)\r\n                        s, e = string.find(out_line..\" \", w..pat, s+string.len(link))\r\n                    end\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 182,
    "text": "if ((string.len(cname) == 0) or (not string.find(w, cname, 1, 1))) and\r\n                    (not used[w]) and\r\n                    dataTypeTable[w] and (dataTypeTable[w].ValueType ~= \"number\") and\r\n                    (dataTypeTable[w].ValueType ~= \"wxtypedef\") and (dataTypeTable[w].ValueType ~= \"special\") then\r\n\r\n                    used[w] = true\r\n\r\n                    -- replace the classname with a link, but not if it's part of a name\r\n                    --out_line = string.gsub(out_line, w, MakeLink(w))\r\n                    local pat = \"[ %&%*%(%)%{%}%[%]%+%-%=%<%>%.%-%+%|%/%,]\"\r\n                    -- need extra ending space to find words at end of line\r\n                    local s, e = string.find(out_line..\" \", w..pat, 1)\r\n                    while s do\r\n                        local link = MakeLink(w)\r\n                        out_line = string.sub(out_line, 1, s-1)..link..string.sub(out_line, e)\r\n                        s, e = string.find(out_line..\" \", w..pat, s+string.len(link))\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "used[w] = true",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "local pat = \"[ %&%*%(%)%{%}%[%]%+%-%=%<%>%.%-%+%|%/%,]\"",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "local s, e = string.find(out_line..\" \", w..pat, 1)",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "while s do\r\n                        local link = MakeLink(w)\r\n                        out_line = string.sub(out_line, 1, s-1)..link..string.sub(out_line, e)\r\n                        s, e = string.find(out_line..\" \", w..pat, s+string.len(link))\r\n                    end",
    "type": "statement:while"
  }, {
    "id": 187,
    "text": "local link = MakeLink(w)",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "out_line = string.sub(out_line, 1, s-1)..link..string.sub(out_line, e)",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "s, e = string.find(out_line..\" \", w..pat, s+string.len(link))",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "out_line = string.gsub(out_line, \"(%%[%w_]+)\", function(s) return \"<i>\"..s..\"</i>\" end)",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "local tail = \"<br>\"",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "if start_block then\r\n                tail = \"\" -- don't add extra space since blockquote already gives a linebreak\r\n\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"</font>\"\r\n                end\r\n\r\n                out_line = out_line..\"\\n<blockquote>\"\r\n\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if enum_pos then\r\n                    out_line = out_line..\"<font color=#\"..colours.enum..\">\"\r\n                end\r\n                -- restart the block comment after blockquote, overrides enum colour\r\n                if in_blk_comment then\r\n                    out_line = out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            elseif end_block then\r\n                -- need to restart font color after blockquote for \"tidy\"\r\n                if class_pos then\r\n                    out_line = \"</blockquote>\"..MakeColour(out_line, colours.class)\r\n                end\r\n                if enum_pos then\r\n                    out_line = \"</font>\\n</blockquote>\"..MakeColour(out_line, colours.enum)\r\n                end\r\n                -- restart the block comment after blockquote\r\n                if in_blk_comment then\r\n                    out_line = \"</font>\"..out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "tail = \"\"",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "if in_blk_comment then\r\n                    out_line = out_line..\"</font>\"\r\n                end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "out_line = out_line..\"</font>\"",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "out_line = out_line..\"\\n<blockquote>\"",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "if enum_pos then\r\n                    out_line = out_line..\"<font color=#\"..colours.enum..\">\"\r\n                end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "out_line = out_line..\"<font color=#\"..colours.enum..\">\"",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "if in_blk_comment then\r\n                    out_line = out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "out_line = out_line..\"<font color=#\"..colours.blkcomment..\">\"",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "if class_pos then\r\n                    out_line = \"</blockquote>\"..MakeColour(out_line, colours.class)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "out_line = \"</blockquote>\"..MakeColour(out_line, colours.class)",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "if enum_pos then\r\n                    out_line = \"</font>\\n</blockquote>\"..MakeColour(out_line, colours.enum)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "out_line = \"</font>\\n</blockquote>\"..MakeColour(out_line, colours.enum)",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "if in_blk_comment then\r\n                    out_line = \"</font>\"..out_line..\"<font color=#\"..colours.blkcomment..\">\"\r\n                end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "out_line = \"</font>\"..out_line..\"<font color=#\"..colours.blkcomment..\">\"",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "table.insert(fileTable, out_line..tail)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function LoadCompleteClassRef(filePath)\r\n    for line in io.lines(filePath) do\r\n        -- only create this if necessary\r\n        if not completeClassRefTable then completeClassRefTable = {} end\r\n\r\n        for w in string.gmatch(line, \"([%w_]+)\") do -- strip spaces if any\r\n            completeClassRefTable[w] = true\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "for line in io.lines(filePath) do\r\n        -- only create this if necessary\r\n        if not completeClassRefTable then completeClassRefTable = {} end\r\n\r\n        for w in string.gmatch(line, \"([%w_]+)\") do -- strip spaces if any\r\n            completeClassRefTable[w] = true\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 211,
    "text": "if not completeClassRefTable then completeClassRefTable = {} end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "completeClassRefTable = {}",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "for w in string.gmatch(line, \"([%w_]+)\") do -- strip spaces if any\r\n            completeClassRefTable[w] = true\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 214,
    "text": "completeClassRefTable[w] = true",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "function FileDataIsTableData(filename, fileData)\r\n    local file_handle = io.open(filename)\r\n    if not file_handle then return false end -- ok if it doesn't exist\r\n\r\n    local f = file_handle:read(\"*a\")\r\n    local is_same = (f == table.concat(fileData, \"\\n\"))\r\n    io.close(file_handle)\r\n    return is_same\r\nend",
    "type": "function"
  }, {
    "id": 217,
    "text": "local file_handle = io.open(filename)",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "if not file_handle then return false end",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "local f = file_handle:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "local is_same = (f == table.concat(fileData, \"\\n\"))",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "io.close(file_handle)",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function WriteTableToFile(filename, fileData, overwrite_always)\r\n    assert(filename and fileData, \"Invalid filename or fileData in WriteTableToFile\")\r\n\r\n    if (not overwrite_always) and FileDataIsTableData(filename, fileData) then\r\n        print(\"No changes to file : '\"..filename..\"'\")\r\n        return false\r\n    end\r\n\r\n    print(\"Updating file : '\"..filename..\"'\")\r\n\r\n    local outfile = io.open(filename, \"w+\")\r\n    if not outfile then\r\n        print(\"Unable to open file for writing '\"..filename..\"'.\")\r\n        return\r\n    end\r\n\r\n    outfile:write(table.concat(fileData, \"\\n\"))\r\n\r\n    outfile:flush()\r\n    outfile:close()\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "assert(filename and fileData, \"Invalid filename or fileData in WriteTableToFile\")",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "if (not overwrite_always) and FileDataIsTableData(filename, fileData) then\r\n        print(\"No changes to file : '\"..filename..\"'\")\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "print(\"No changes to file : '\"..filename..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "print(\"Updating file : '\"..filename..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "local outfile = io.open(filename, \"w+\")",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "if not outfile then\r\n        print(\"Unable to open file for writing '\"..filename..\"'.\")\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "print(\"Unable to open file for writing '\"..filename..\"'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "outfile:write(table.concat(fileData, \"\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "outfile:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "outfile:close()",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "function main()\r\n      -- load rules file\r\n    if not rulesFilename then\r\n        print(\"Warning: No rules filename set!\")\r\n        rulesFilename = \"\"\r\n    end\r\n\r\n    local rules = loadfile(\"./\"..rulesFilename)\r\n    if rules then\r\n        rules()\r\n        print(\"Loaded rules file: \"..rulesFilename)\r\n    else\r\n        print(\"ERROR : unable to load rules file: \"..rulesFilename)\r\n        print(\"This could mean that either the file cannot be found or there is an error in it.\")\r\n        print(\"The rules file should be valid lua code, try running it with lua directly.\")\r\n    end\r\n\r\n    for n = 1, #interface_fileTable do\r\n        local datatypes_filename = interface_fileTable[n].file_path..interface_fileTable[n].datatypes_filename\r\n        local datatypes_file = loadfile(datatypes_filename)\r\n        if datatypes_file then\r\n            datatypes_file()\r\n            print(\"Loaded data types file: \"..datatypes_filename)\r\n        else\r\n            print(\"WARNING: unable to load data types file: \"..datatypes_filename)\r\n        end\r\n    end\r\n\r\n    dataTypeTable[\"wxString\"].ValueType = \"class\" -- FIXME hack for wxString DefType as \"special\"\r\n\r\n    if completeClassRefFileTable then\r\n        for n = 1, #completeClassRefFileTable do\r\n            LoadCompleteClassRef(completeClassRefFileTable[n])\r\n            print(\"Loaded complete class reference : \"..completeClassRefFileTable[n])\r\n        end\r\n    end\r\n\r\n    fileTable = { htmlHeader }\r\n    GenerateClassReference(fileTable)\r\n    table.insert(fileTable, \"<HR>\")\r\n    GenerateEnumReference(fileTable)\r\n    table.insert(fileTable, \"<HR>\")\r\n    GenerateTestColours(fileTable)\r\n    table.insert(fileTable, \"<HR>\")\r\n    ReadInterfaceFiles(fileTable)\r\n    GenerateFooter(fileTable)\r\n\r\n\r\n    WriteTableToFile(output_filename , fileTable)\r\n    --for n = 1, #fileTable do print(fileTable[n]) end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 236,
    "text": "if not rulesFilename then\r\n        print(\"Warning: No rules filename set!\")\r\n        rulesFilename = \"\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 237,
    "text": "print(\"Warning: No rules filename set!\")",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "rulesFilename = \"\"",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "local rules = loadfile(\"./\"..rulesFilename)",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "if rules then\r\n        rules()\r\n        print(\"Loaded rules file: \"..rulesFilename)\r\n    else\r\n        print(\"ERROR : unable to load rules file: \"..rulesFilename)\r\n        print(\"This could mean that either the file cannot be found or there is an error in it.\")\r\n        print(\"The rules file should be valid lua code, try running it with lua directly.\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 241,
    "text": "rules()",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "print(\"Loaded rules file: \"..rulesFilename)",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "print(\"ERROR : unable to load rules file: \"..rulesFilename)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "print(\"This could mean that either the file cannot be found or there is an error in it.\")",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "print(\"The rules file should be valid lua code, try running it with lua directly.\")",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "for n = 1, #interface_fileTable do\r\n        local datatypes_filename = interface_fileTable[n].file_path..interface_fileTable[n].datatypes_filename\r\n        local datatypes_file = loadfile(datatypes_filename)\r\n        if datatypes_file then\r\n            datatypes_file()\r\n            print(\"Loaded data types file: \"..datatypes_filename)\r\n        else\r\n            print(\"WARNING: unable to load data types file: \"..datatypes_filename)\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 247,
    "text": "local datatypes_filename = interface_fileTable[n].file_path..interface_fileTable[n].datatypes_filename",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "local datatypes_file = loadfile(datatypes_filename)",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "if datatypes_file then\r\n            datatypes_file()\r\n            print(\"Loaded data types file: \"..datatypes_filename)\r\n        else\r\n            print(\"WARNING: unable to load data types file: \"..datatypes_filename)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 250,
    "text": "datatypes_file()",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "print(\"Loaded data types file: \"..datatypes_filename)",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "print(\"WARNING: unable to load data types file: \"..datatypes_filename)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "dataTypeTable[\"wxString\"].ValueType = \"class\"",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "if completeClassRefFileTable then\r\n        for n = 1, #completeClassRefFileTable do\r\n            LoadCompleteClassRef(completeClassRefFileTable[n])\r\n            print(\"Loaded complete class reference : \"..completeClassRefFileTable[n])\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "for n = 1, #completeClassRefFileTable do\r\n            LoadCompleteClassRef(completeClassRefFileTable[n])\r\n            print(\"Loaded complete class reference : \"..completeClassRefFileTable[n])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 256,
    "text": "LoadCompleteClassRef(completeClassRefFileTable[n])",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "print(\"Loaded complete class reference : \"..completeClassRefFileTable[n])",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "fileTable = { htmlHeader }",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "GenerateClassReference(fileTable)",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "table.insert(fileTable, \"<HR>\")",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "GenerateEnumReference(fileTable)",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "GenerateTestColours(fileTable)",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "ReadInterfaceFiles(fileTable)",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "GenerateFooter(fileTable)",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "WriteTableToFile(output_filename , fileTable)",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 267,
    "text": "function(t1, t2) return t1.s < t2.s end",
    "type": "function"
  }, {
    "id": 268,
    "text": "function(s) return \"<i>\"..s..\"</i>\" end",
    "type": "function"
  }, {
    "id": 269,
    "text": "",
    "type": "function container"
  }, {
    "id": 270,
    "text": "print",
    "type": "global function"
  }, {
    "id": 271,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 272,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 273,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 274,
    "text": "lines",
    "type": "global function"
  }, {
    "id": 275,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 276,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 277,
    "text": "len",
    "type": "global function"
  }, {
    "id": 278,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 279,
    "text": "close",
    "type": "global function"
  }, {
    "id": 280,
    "text": "datatypes_file",
    "type": "global function"
  }, {
    "id": 281,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 282,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 283,
    "text": "find",
    "type": "global function"
  }, {
    "id": 284,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 285,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 286,
    "text": "open",
    "type": "global function"
  }, {
    "id": 287,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 288,
    "text": "rules",
    "type": "global function"
  }, {
    "id": 289,
    "text": "",
    "type": "variable container"
  }, {
    "id": 290,
    "text": "",
    "type": "require container"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 293,
    "text": "",
    "type": "global variable"
  }, {
    "id": 294,
    "text": "",
    "type": "global variable"
  }, {
    "id": 295,
    "text": "",
    "type": "n/a"
  }, {
    "id": 296,
    "text": "",
    "type": "global variable"
  }, {
    "id": 297,
    "text": "",
    "type": "n/a"
  }, {
    "id": 298,
    "text": "",
    "type": "global variable"
  }, {
    "id": 299,
    "text": "",
    "type": "n/a"
  }, {
    "id": 300,
    "text": "",
    "type": "global variable"
  }, {
    "id": 301,
    "text": "",
    "type": "n/a"
  }, {
    "id": 302,
    "text": "",
    "type": "global variable"
  }, {
    "id": 303,
    "text": "",
    "type": "global variable"
  }, {
    "id": 304,
    "text": "",
    "type": "global variable"
  }, {
    "id": 305,
    "text": "",
    "type": "global variable"
  }, {
    "id": 306,
    "text": "",
    "type": "global variable"
  }, {
    "id": 307,
    "text": "",
    "type": "global variable"
  }, {
    "id": 308,
    "text": "",
    "type": "global variable"
  }, {
    "id": 309,
    "text": "",
    "type": "global variable"
  }, {
    "id": 310,
    "text": "",
    "type": "global variable"
  }, {
    "id": 311,
    "text": "",
    "type": "global variable"
  }, {
    "id": 312,
    "text": "",
    "type": "global variable"
  }, {
    "id": 313,
    "text": "",
    "type": "global variable"
  }, {
    "id": 314,
    "text": "",
    "type": "global variable"
  }, {
    "id": 315,
    "text": "",
    "type": "global variable"
  }, {
    "id": 316,
    "text": "",
    "type": "global variable"
  }, {
    "id": 317,
    "text": "",
    "type": "global variable"
  }, {
    "id": 318,
    "text": "",
    "type": "global variable"
  } ]
}