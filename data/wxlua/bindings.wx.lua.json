{
  "_filename": "bindings.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/bindings.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 7
  }, {
    "from": 18,
    "label": "has",
    "to": 12
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 15
  }, {
    "from": 19,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 22,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 22,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 22,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 22,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 41
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 22,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 22,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 22,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 65,
    "label": "has",
    "to": 79
  }, {
    "from": 65,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 65,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 82,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 65,
    "label": "has",
    "to": 92
  }, {
    "from": 65,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 85
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 93,
    "label": "has",
    "to": 102
  }, {
    "from": 93,
    "label": "has",
    "to": 103
  }, {
    "from": 93,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 65,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 65,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 65,
    "label": "has",
    "to": 116
  }, {
    "from": 65,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 65,
    "label": "has",
    "to": 119
  }, {
    "from": 65,
    "label": "has",
    "to": 120
  }, {
    "from": 65,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 116
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 126,
    "label": "has",
    "to": 57
  }, {
    "from": 124,
    "label": "has",
    "to": 131
  }, {
    "from": 124,
    "label": "has",
    "to": 132
  }, {
    "from": 124,
    "label": "has",
    "to": 133
  }, {
    "from": 124,
    "label": "has",
    "to": 134
  }, {
    "from": 124,
    "label": "has",
    "to": 135
  }, {
    "from": 124,
    "label": "has",
    "to": 136
  }, {
    "from": 124,
    "label": "has",
    "to": 137
  }, {
    "from": 124,
    "label": "has",
    "to": 138
  }, {
    "from": 124,
    "label": "has",
    "to": 139
  }, {
    "from": 124,
    "label": "has",
    "to": 140
  }, {
    "from": 124,
    "label": "has",
    "to": 57
  }, {
    "from": 124,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 142,
    "label": "has",
    "to": 57
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 144,
    "label": "has",
    "to": 57
  }, {
    "from": 144,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 12
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 154,
    "label": "has",
    "to": 57
  }, {
    "from": 152,
    "label": "has",
    "to": 163
  }, {
    "from": 152,
    "label": "has",
    "to": 164
  }, {
    "from": 152,
    "label": "has",
    "to": 165
  }, {
    "from": 152,
    "label": "has",
    "to": 166
  }, {
    "from": 152,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 167,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 167,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 167,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 167,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 167,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 167,
    "label": "has",
    "to": 184
  }, {
    "from": 152,
    "label": "has",
    "to": 57
  }, {
    "from": 152,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 12
  }, {
    "from": 186,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 155,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 186,
    "label": "has",
    "to": 57
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 163
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 188,
    "label": "has",
    "to": 191
  }, {
    "from": 188,
    "label": "has",
    "to": 166
  }, {
    "from": 188,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 192,
    "label": "has",
    "to": 198
  }, {
    "from": 192,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 205,
    "label": "has",
    "to": 208
  }, {
    "from": 199,
    "label": "has",
    "to": 209
  }, {
    "from": 188,
    "label": "has",
    "to": 57
  }, {
    "from": 188,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 41
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 163
  }, {
    "from": 211,
    "label": "has",
    "to": 164
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 211,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 211,
    "label": "has",
    "to": 57
  }, {
    "from": 211,
    "label": "has",
    "to": 216
  }, {
    "from": 217,
    "label": "has",
    "to": 41
  }, {
    "from": 217,
    "label": "has",
    "to": 57
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 163
  }, {
    "from": 219,
    "label": "has",
    "to": 164
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 224,
    "label": "has",
    "to": 227
  }, {
    "from": 224,
    "label": "has",
    "to": 228
  }, {
    "from": 224,
    "label": "has",
    "to": 229
  }, {
    "from": 224,
    "label": "has",
    "to": 230
  }, {
    "from": 219,
    "label": "has",
    "to": 57
  }, {
    "from": 219,
    "label": "has",
    "to": 231
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 232,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 223
  }, {
    "from": 235,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 224,
    "label": "has",
    "to": 227
  }, {
    "from": 224,
    "label": "has",
    "to": 228
  }, {
    "from": 224,
    "label": "has",
    "to": 229
  }, {
    "from": 224,
    "label": "has",
    "to": 230
  }, {
    "from": 232,
    "label": "has",
    "to": 57
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 237,
    "label": "has",
    "to": 240
  }, {
    "from": 237,
    "label": "has",
    "to": 241
  }, {
    "from": 237,
    "label": "has",
    "to": 163
  }, {
    "from": 237,
    "label": "has",
    "to": 190
  }, {
    "from": 237,
    "label": "has",
    "to": 165
  }, {
    "from": 237,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 242,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 237,
    "label": "has",
    "to": 57
  }, {
    "from": 237,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 252,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 250,
    "label": "has",
    "to": 184
  }, {
    "from": 248,
    "label": "has",
    "to": 57
  }, {
    "from": 248,
    "label": "has",
    "to": 257
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 258,
    "label": "has",
    "to": 260
  }, {
    "from": 258,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 258,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 263,
    "label": "has",
    "to": 266
  }, {
    "from": 263,
    "label": "has",
    "to": 57
  }, {
    "from": 263,
    "label": "has",
    "to": 267
  }, {
    "from": 263,
    "label": "has",
    "to": 57
  }, {
    "from": 263,
    "label": "has",
    "to": 268
  }, {
    "from": 263,
    "label": "has",
    "to": 269
  }, {
    "from": 263,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 271,
    "label": "has",
    "to": 274
  }, {
    "from": 271,
    "label": "has",
    "to": 275
  }, {
    "from": 271,
    "label": "has",
    "to": 276
  }, {
    "from": 270,
    "label": "has",
    "to": 277
  }, {
    "from": 270,
    "label": "has",
    "to": 278
  }, {
    "from": 263,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 279,
    "label": "has",
    "to": 281
  }, {
    "from": 279,
    "label": "has",
    "to": 282
  }, {
    "from": 279,
    "label": "has",
    "to": 283
  }, {
    "from": 263,
    "label": "has",
    "to": 57
  }, {
    "from": 263,
    "label": "has",
    "to": 57
  }, {
    "from": 263,
    "label": "has",
    "to": 57
  }, {
    "from": 263,
    "label": "has",
    "to": 57
  }, {
    "from": 263,
    "label": "has",
    "to": 57
  }, {
    "from": 258,
    "label": "has",
    "to": 284
  }, {
    "from": 258,
    "label": "has",
    "to": 285
  }, {
    "from": 258,
    "label": "has",
    "to": 286
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 258,
    "label": "has",
    "to": 289
  }, {
    "from": 258,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 290,
    "label": "has",
    "to": 292
  }, {
    "from": 258,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 293,
    "label": "has",
    "to": 295
  }, {
    "from": 258,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 297,
    "label": "has",
    "to": 300
  }, {
    "from": 258,
    "label": "has",
    "to": 301
  }, {
    "from": 302,
    "label": "has",
    "to": 264
  }, {
    "from": 302,
    "label": "has",
    "to": 265
  }, {
    "from": 302,
    "label": "has",
    "to": 266
  }, {
    "from": 302,
    "label": "has",
    "to": 57
  }, {
    "from": 302,
    "label": "has",
    "to": 267
  }, {
    "from": 302,
    "label": "has",
    "to": 57
  }, {
    "from": 302,
    "label": "has",
    "to": 268
  }, {
    "from": 302,
    "label": "has",
    "to": 269
  }, {
    "from": 302,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 271,
    "label": "has",
    "to": 274
  }, {
    "from": 271,
    "label": "has",
    "to": 275
  }, {
    "from": 271,
    "label": "has",
    "to": 276
  }, {
    "from": 270,
    "label": "has",
    "to": 277
  }, {
    "from": 270,
    "label": "has",
    "to": 278
  }, {
    "from": 302,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 279,
    "label": "has",
    "to": 281
  }, {
    "from": 279,
    "label": "has",
    "to": 282
  }, {
    "from": 279,
    "label": "has",
    "to": 283
  }, {
    "from": 302,
    "label": "has",
    "to": 57
  }, {
    "from": 302,
    "label": "has",
    "to": 57
  }, {
    "from": 302,
    "label": "has",
    "to": 57
  }, {
    "from": 302,
    "label": "has",
    "to": 57
  }, {
    "from": 302,
    "label": "has",
    "to": 57
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 304,
    "label": "has",
    "to": 306
  }, {
    "from": 304,
    "label": "has",
    "to": 307
  }, {
    "from": 304,
    "label": "has",
    "to": 259
  }, {
    "from": 304,
    "label": "has",
    "to": 308
  }, {
    "from": 304,
    "label": "has",
    "to": 309
  }, {
    "from": 304,
    "label": "has",
    "to": 310
  }, {
    "from": 304,
    "label": "has",
    "to": 311
  }, {
    "from": 304,
    "label": "has",
    "to": 312
  }, {
    "from": 304,
    "label": "has",
    "to": 313
  }, {
    "from": 304,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 304,
    "label": "has",
    "to": 316
  }, {
    "from": 304,
    "label": "has",
    "to": 317
  }, {
    "from": 304,
    "label": "has",
    "to": 318
  }, {
    "from": 304,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 304,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 323,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 326,
    "label": "has",
    "to": 328
  }, {
    "from": 326,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 326,
    "label": "has",
    "to": 329
  }, {
    "from": 326,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 326,
    "label": "has",
    "to": 330
  }, {
    "from": 326,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 326,
    "label": "has",
    "to": 331
  }, {
    "from": 326,
    "label": "has",
    "to": 325
  }, {
    "from": 326,
    "label": "has",
    "to": 332
  }, {
    "from": 326,
    "label": "has",
    "to": 333
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 326,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 334
  }, {
    "from": 323,
    "label": "has",
    "to": 335
  }, {
    "from": 323,
    "label": "has",
    "to": 336
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 336,
    "label": "has",
    "to": 338
  }, {
    "from": 336,
    "label": "has",
    "to": 339
  }, {
    "from": 336,
    "label": "has",
    "to": 340
  }, {
    "from": 336,
    "label": "has",
    "to": 341
  }, {
    "from": 336,
    "label": "has",
    "to": 342
  }, {
    "from": 323,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 327
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 343,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 335
  }, {
    "from": 323,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 345,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 347,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 351,
    "label": "has",
    "to": 353
  }, {
    "from": 351,
    "label": "has",
    "to": 354
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 351,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 347,
    "label": "has",
    "to": 359
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 345,
    "label": "has",
    "to": 361
  }, {
    "from": 345,
    "label": "has",
    "to": 362
  }, {
    "from": 323,
    "label": "has",
    "to": 363
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 363,
    "label": "has",
    "to": 327
  }, {
    "from": 363,
    "label": "has",
    "to": 344
  }, {
    "from": 363,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 335
  }, {
    "from": 323,
    "label": "has",
    "to": 365
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 365,
    "label": "has",
    "to": 367
  }, {
    "from": 323,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 327
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 343,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 335
  }, {
    "from": 323,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 323,
    "label": "has",
    "to": 363
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 363,
    "label": "has",
    "to": 327
  }, {
    "from": 363,
    "label": "has",
    "to": 344
  }, {
    "from": 363,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 335
  }, {
    "from": 323,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 323,
    "label": "has",
    "to": 363
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 363,
    "label": "has",
    "to": 327
  }, {
    "from": 363,
    "label": "has",
    "to": 344
  }, {
    "from": 363,
    "label": "has",
    "to": 325
  }, {
    "from": 304,
    "label": "has",
    "to": 370
  }, {
    "from": 304,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 351,
    "label": "has",
    "to": 353
  }, {
    "from": 351,
    "label": "has",
    "to": 354
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 351,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 374,
    "label": "has",
    "to": 376
  }, {
    "from": 374,
    "label": "has",
    "to": 377
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 374,
    "label": "has",
    "to": 379
  }, {
    "from": 374,
    "label": "has",
    "to": 380
  }, {
    "from": 374,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 381,
    "label": "has",
    "to": 383
  }, {
    "from": 381,
    "label": "has",
    "to": 384
  }, {
    "from": 384,
    "label": "has",
    "to": 385
  }, {
    "from": 384,
    "label": "has",
    "to": 386
  }, {
    "from": 384,
    "label": "has",
    "to": 387
  }, {
    "from": 381,
    "label": "has",
    "to": 184
  }, {
    "from": 374,
    "label": "has",
    "to": 57
  }, {
    "from": 374,
    "label": "has",
    "to": 388
  }, {
    "from": 389,
    "label": "has",
    "to": 390
  }, {
    "from": 389,
    "label": "has",
    "to": 391
  }, {
    "from": 389,
    "label": "has",
    "to": 392
  }, {
    "from": 389,
    "label": "has",
    "to": 393
  }, {
    "from": 389,
    "label": "has",
    "to": 394
  }, {
    "from": 389,
    "label": "has",
    "to": 395
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 395,
    "label": "has",
    "to": 57
  }, {
    "from": 395,
    "label": "has",
    "to": 397
  }, {
    "from": 395,
    "label": "has",
    "to": 398
  }, {
    "from": 395,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 399,
    "label": "has",
    "to": 401
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 399,
    "label": "has",
    "to": 403
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 403,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 403,
    "label": "has",
    "to": 408
  }, {
    "from": 403,
    "label": "has",
    "to": 409
  }, {
    "from": 399,
    "label": "has",
    "to": 410
  }, {
    "from": 399,
    "label": "has",
    "to": 411
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 399,
    "label": "has",
    "to": 413
  }, {
    "from": 389,
    "label": "has",
    "to": 414
  }, {
    "from": 414,
    "label": "has",
    "to": 415
  }, {
    "from": 414,
    "label": "has",
    "to": 416
  }, {
    "from": 414,
    "label": "has",
    "to": 417
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 417,
    "label": "has",
    "to": 419
  }, {
    "from": 417,
    "label": "has",
    "to": 420
  }, {
    "from": 417,
    "label": "has",
    "to": 421
  }, {
    "from": 421,
    "label": "has",
    "to": 422
  }, {
    "from": 417,
    "label": "has",
    "to": 423
  }, {
    "from": 417,
    "label": "has",
    "to": 424
  }, {
    "from": 417,
    "label": "has",
    "to": 425
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 426,
    "label": "has",
    "to": 427
  }, {
    "from": 425,
    "label": "has",
    "to": 428
  }, {
    "from": 417,
    "label": "has",
    "to": 429
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 429,
    "label": "has",
    "to": 431
  }, {
    "from": 429,
    "label": "has",
    "to": 432
  }, {
    "from": 432,
    "label": "has",
    "to": 433
  }, {
    "from": 433,
    "label": "has",
    "to": 434
  }, {
    "from": 433,
    "label": "has",
    "to": 435
  }, {
    "from": 433,
    "label": "has",
    "to": 436
  }, {
    "from": 433,
    "label": "has",
    "to": 437
  }, {
    "from": 433,
    "label": "has",
    "to": 436
  }, {
    "from": 433,
    "label": "has",
    "to": 438
  }, {
    "from": 433,
    "label": "has",
    "to": 436
  }, {
    "from": 433,
    "label": "has",
    "to": 439
  }, {
    "from": 439,
    "label": "has",
    "to": 440
  }, {
    "from": 432,
    "label": "has",
    "to": 441
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 432,
    "label": "has",
    "to": 443
  }, {
    "from": 429,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 445
  }, {
    "from": 429,
    "label": "has",
    "to": 446
  }, {
    "from": 389,
    "label": "has",
    "to": 447
  }, {
    "from": 447,
    "label": "has",
    "to": 448
  }, {
    "from": 389,
    "label": "has",
    "to": 449
  }, {
    "from": 449,
    "label": "has",
    "to": 450
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 389,
    "label": "has",
    "to": 57
  }, {
    "from": 389,
    "label": "has",
    "to": 453
  }, {
    "from": 454,
    "label": "has",
    "to": 396
  }, {
    "from": 454,
    "label": "has",
    "to": 57
  }, {
    "from": 454,
    "label": "has",
    "to": 397
  }, {
    "from": 454,
    "label": "has",
    "to": 398
  }, {
    "from": 454,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 399,
    "label": "has",
    "to": 401
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 399,
    "label": "has",
    "to": 403
  }, {
    "from": 403,
    "label": "has",
    "to": 404
  }, {
    "from": 403,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 403,
    "label": "has",
    "to": 408
  }, {
    "from": 403,
    "label": "has",
    "to": 409
  }, {
    "from": 399,
    "label": "has",
    "to": 410
  }, {
    "from": 399,
    "label": "has",
    "to": 411
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 399,
    "label": "has",
    "to": 413
  }, {
    "from": 454,
    "label": "has",
    "to": 455
  }, {
    "from": 456,
    "label": "has",
    "to": 457
  }, {
    "from": 456,
    "label": "has",
    "to": 458
  }, {
    "from": 458,
    "label": "has",
    "to": 415
  }, {
    "from": 458,
    "label": "has",
    "to": 416
  }, {
    "from": 458,
    "label": "has",
    "to": 459
  }, {
    "from": 459,
    "label": "has",
    "to": 460
  }, {
    "from": 456,
    "label": "has",
    "to": 461
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 461,
    "label": "has",
    "to": 463
  }, {
    "from": 461,
    "label": "has",
    "to": 464
  }, {
    "from": 464,
    "label": "has",
    "to": 465
  }, {
    "from": 464,
    "label": "has",
    "to": 466
  }, {
    "from": 466,
    "label": "has",
    "to": 467
  }, {
    "from": 466,
    "label": "has",
    "to": 468
  }, {
    "from": 468,
    "label": "has",
    "to": 469
  }, {
    "from": 469,
    "label": "has",
    "to": 470
  }, {
    "from": 468,
    "label": "has",
    "to": 471
  }, {
    "from": 468,
    "label": "has",
    "to": 472
  }, {
    "from": 464,
    "label": "has",
    "to": 473
  }, {
    "from": 461,
    "label": "has",
    "to": 57
  }, {
    "from": 456,
    "label": "has",
    "to": 474
  }, {
    "from": 456,
    "label": "has",
    "to": 475
  }, {
    "from": 456,
    "label": "has",
    "to": 391
  }, {
    "from": 456,
    "label": "has",
    "to": 476
  }, {
    "from": 476,
    "label": "has",
    "to": 477
  }, {
    "from": 476,
    "label": "has",
    "to": 478
  }, {
    "from": 478,
    "label": "has",
    "to": 479
  }, {
    "from": 479,
    "label": "has",
    "to": 480
  }, {
    "from": 478,
    "label": "has",
    "to": 481
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 478,
    "label": "has",
    "to": 483
  }, {
    "from": 476,
    "label": "has",
    "to": 484
  }, {
    "from": 456,
    "label": "has",
    "to": 485
  }, {
    "from": 485,
    "label": "has",
    "to": 486
  }, {
    "from": 486,
    "label": "has",
    "to": 487
  }, {
    "from": 456,
    "label": "has",
    "to": 488
  }, {
    "from": 488,
    "label": "has",
    "to": 489
  }, {
    "from": 456,
    "label": "has",
    "to": 490
  }, {
    "from": 490,
    "label": "has",
    "to": 57
  }, {
    "from": 456,
    "label": "has",
    "to": 57
  }, {
    "from": 456,
    "label": "has",
    "to": 491
  }, {
    "from": 492,
    "label": "has",
    "to": 462
  }, {
    "from": 492,
    "label": "has",
    "to": 463
  }, {
    "from": 492,
    "label": "has",
    "to": 464
  }, {
    "from": 464,
    "label": "has",
    "to": 465
  }, {
    "from": 464,
    "label": "has",
    "to": 466
  }, {
    "from": 466,
    "label": "has",
    "to": 467
  }, {
    "from": 466,
    "label": "has",
    "to": 468
  }, {
    "from": 468,
    "label": "has",
    "to": 469
  }, {
    "from": 469,
    "label": "has",
    "to": 470
  }, {
    "from": 468,
    "label": "has",
    "to": 471
  }, {
    "from": 468,
    "label": "has",
    "to": 472
  }, {
    "from": 464,
    "label": "has",
    "to": 473
  }, {
    "from": 492,
    "label": "has",
    "to": 57
  }, {
    "from": 492,
    "label": "has",
    "to": 493
  }, {
    "from": 494,
    "label": "has",
    "to": 495
  }, {
    "from": 494,
    "label": "has",
    "to": 496
  }, {
    "from": 494,
    "label": "has",
    "to": 497
  }, {
    "from": 497,
    "label": "has",
    "to": 415
  }, {
    "from": 497,
    "label": "has",
    "to": 416
  }, {
    "from": 497,
    "label": "has",
    "to": 498
  }, {
    "from": 498,
    "label": "has",
    "to": 499
  }, {
    "from": 498,
    "label": "has",
    "to": 500
  }, {
    "from": 500,
    "label": "has",
    "to": 501
  }, {
    "from": 500,
    "label": "has",
    "to": 502
  }, {
    "from": 500,
    "label": "has",
    "to": 503
  }, {
    "from": 503,
    "label": "has",
    "to": 504
  }, {
    "from": 503,
    "label": "has",
    "to": 12
  }, {
    "from": 503,
    "label": "has",
    "to": 505
  }, {
    "from": 505,
    "label": "has",
    "to": 506
  }, {
    "from": 503,
    "label": "has",
    "to": 507
  }, {
    "from": 503,
    "label": "has",
    "to": 508
  }, {
    "from": 503,
    "label": "has",
    "to": 509
  }, {
    "from": 500,
    "label": "has",
    "to": 510
  }, {
    "from": 510,
    "label": "has",
    "to": 511
  }, {
    "from": 511,
    "label": "has",
    "to": 512
  }, {
    "from": 510,
    "label": "has",
    "to": 513
  }, {
    "from": 494,
    "label": "has",
    "to": 514
  }, {
    "from": 514,
    "label": "has",
    "to": 515
  }, {
    "from": 514,
    "label": "has",
    "to": 516
  }, {
    "from": 494,
    "label": "has",
    "to": 449
  }, {
    "from": 449,
    "label": "has",
    "to": 450
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 494,
    "label": "has",
    "to": 57
  }, {
    "from": 494,
    "label": "has",
    "to": 517
  }, {
    "from": 518,
    "label": "has",
    "to": 519
  }, {
    "from": 518,
    "label": "has",
    "to": 520
  }, {
    "from": 518,
    "label": "has",
    "to": 521
  }, {
    "from": 518,
    "label": "has",
    "to": 522
  }, {
    "from": 518,
    "label": "has",
    "to": 523
  }, {
    "from": 518,
    "label": "has",
    "to": 524
  }, {
    "from": 518,
    "label": "has",
    "to": 525
  }, {
    "from": 518,
    "label": "has",
    "to": 526
  }, {
    "from": 518,
    "label": "has",
    "to": 527
  }, {
    "from": 518,
    "label": "has",
    "to": 528
  }, {
    "from": 518,
    "label": "has",
    "to": 529
  }, {
    "from": 518,
    "label": "has",
    "to": 530
  }, {
    "from": 518,
    "label": "has",
    "to": 531
  }, {
    "from": 518,
    "label": "has",
    "to": 532
  }, {
    "from": 518,
    "label": "has",
    "to": 533
  }, {
    "from": 518,
    "label": "has",
    "to": 534
  }, {
    "from": 534,
    "label": "has",
    "to": 535
  }, {
    "from": 518,
    "label": "has",
    "to": 536
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 536,
    "label": "has",
    "to": 538
  }, {
    "from": 536,
    "label": "has",
    "to": 539
  }, {
    "from": 539,
    "label": "has",
    "to": 540
  }, {
    "from": 539,
    "label": "has",
    "to": 541
  }, {
    "from": 539,
    "label": "has",
    "to": 542
  }, {
    "from": 536,
    "label": "has",
    "to": 543
  }, {
    "from": 518,
    "label": "has",
    "to": 544
  }, {
    "from": 544,
    "label": "has",
    "to": 545
  }, {
    "from": 518,
    "label": "has",
    "to": 546
  }, {
    "from": 546,
    "label": "has",
    "to": 547
  }, {
    "from": 518,
    "label": "has",
    "to": 548
  }, {
    "from": 518,
    "label": "has",
    "to": 549
  }, {
    "from": 518,
    "label": "has",
    "to": 550
  }, {
    "from": 518,
    "label": "has",
    "to": 551
  }, {
    "from": 518,
    "label": "has",
    "to": 552
  }, {
    "from": 518,
    "label": "has",
    "to": 553
  }, {
    "from": 518,
    "label": "has",
    "to": 551
  }, {
    "from": 518,
    "label": "has",
    "to": 554
  }, {
    "from": 554,
    "label": "has",
    "to": 555
  }, {
    "from": 554,
    "label": "has",
    "to": 325
  }, {
    "from": 518,
    "label": "has",
    "to": 556
  }, {
    "from": 556,
    "label": "has",
    "to": 557
  }, {
    "from": 557,
    "label": "has",
    "to": 324
  }, {
    "from": 557,
    "label": "has",
    "to": 325
  }, {
    "from": 518,
    "label": "has",
    "to": 558
  }, {
    "from": 518,
    "label": "has",
    "to": 559
  }, {
    "from": 518,
    "label": "has",
    "to": 560
  }, {
    "from": 518,
    "label": "has",
    "to": 561
  }, {
    "from": 518,
    "label": "has",
    "to": 562
  }, {
    "from": 518,
    "label": "has",
    "to": 563
  }, {
    "from": 518,
    "label": "has",
    "to": 564
  }, {
    "from": 518,
    "label": "has",
    "to": 565
  }, {
    "from": 518,
    "label": "has",
    "to": 566
  }, {
    "from": 518,
    "label": "has",
    "to": 567
  }, {
    "from": 518,
    "label": "has",
    "to": 568
  }, {
    "from": 518,
    "label": "has",
    "to": 569
  }, {
    "from": 569,
    "label": "has",
    "to": 570
  }, {
    "from": 569,
    "label": "has",
    "to": 571
  }, {
    "from": 518,
    "label": "has",
    "to": 555
  }, {
    "from": 518,
    "label": "has",
    "to": 572
  }, {
    "from": 518,
    "label": "has",
    "to": 573
  }, {
    "from": 573,
    "label": "has",
    "to": 574
  }, {
    "from": 518,
    "label": "has",
    "to": 575
  }, {
    "from": 518,
    "label": "has",
    "to": 576
  }, {
    "from": 518,
    "label": "has",
    "to": 577
  }, {
    "from": 518,
    "label": "has",
    "to": 578
  }, {
    "from": 518,
    "label": "has",
    "to": 579
  }, {
    "from": 518,
    "label": "has",
    "to": 580
  }, {
    "from": 518,
    "label": "has",
    "to": 581
  }, {
    "from": 518,
    "label": "has",
    "to": 582
  }, {
    "from": 583,
    "label": "has",
    "to": 540
  }, {
    "from": 583,
    "label": "has",
    "to": 541
  }, {
    "from": 583,
    "label": "has",
    "to": 542
  }, {
    "from": 583,
    "label": "has",
    "to": 584
  }, {
    "from": 585,
    "label": "has",
    "to": 57
  }, {
    "from": 586,
    "label": "has",
    "to": 535
  }, {
    "from": 586,
    "label": "has",
    "to": 587
  }, {
    "from": 588,
    "label": "has",
    "to": 537
  }, {
    "from": 588,
    "label": "has",
    "to": 538
  }, {
    "from": 588,
    "label": "has",
    "to": 539
  }, {
    "from": 539,
    "label": "has",
    "to": 540
  }, {
    "from": 539,
    "label": "has",
    "to": 541
  }, {
    "from": 539,
    "label": "has",
    "to": 542
  }, {
    "from": 588,
    "label": "has",
    "to": 543
  }, {
    "from": 588,
    "label": "has",
    "to": 589
  }, {
    "from": 590,
    "label": "has",
    "to": 545
  }, {
    "from": 590,
    "label": "has",
    "to": 591
  }, {
    "from": 592,
    "label": "has",
    "to": 547
  }, {
    "from": 592,
    "label": "has",
    "to": 593
  }, {
    "from": 594,
    "label": "has",
    "to": 555
  }, {
    "from": 594,
    "label": "has",
    "to": 325
  }, {
    "from": 594,
    "label": "has",
    "to": 595
  }, {
    "from": 596,
    "label": "has",
    "to": 557
  }, {
    "from": 557,
    "label": "has",
    "to": 324
  }, {
    "from": 557,
    "label": "has",
    "to": 325
  }, {
    "from": 596,
    "label": "has",
    "to": 597
  }, {
    "from": 598,
    "label": "has",
    "to": 570
  }, {
    "from": 598,
    "label": "has",
    "to": 571
  }, {
    "from": 598,
    "label": "has",
    "to": 599
  }, {
    "from": 304,
    "label": "calls",
    "to": 152
  }, {
    "from": 304,
    "label": "calls",
    "to": 152
  }, {
    "from": 304,
    "label": "calls",
    "to": 152
  }, {
    "from": 304,
    "label": "calls",
    "to": 152
  }, {
    "from": 304,
    "label": "calls",
    "to": 211
  }, {
    "from": 304,
    "label": "calls",
    "to": 211
  }, {
    "from": 124,
    "label": "calls",
    "to": 627
  }, {
    "from": 2,
    "label": "calls",
    "to": 619
  }, {
    "from": 2,
    "label": "calls",
    "to": 619
  }, {
    "from": 2,
    "label": "calls",
    "to": 619
  }, {
    "from": 22,
    "label": "calls",
    "to": 619
  }, {
    "from": 22,
    "label": "calls",
    "to": 619
  }, {
    "from": 22,
    "label": "calls",
    "to": 619
  }, {
    "from": 22,
    "label": "calls",
    "to": 619
  }, {
    "from": 22,
    "label": "calls",
    "to": 619
  }, {
    "from": 22,
    "label": "calls",
    "to": 619
  }, {
    "from": 22,
    "label": "calls",
    "to": 619
  }, {
    "from": 22,
    "label": "calls",
    "to": 619
  }, {
    "from": 65,
    "label": "calls",
    "to": 619
  }, {
    "from": 65,
    "label": "calls",
    "to": 619
  }, {
    "from": 65,
    "label": "calls",
    "to": 619
  }, {
    "from": 65,
    "label": "calls",
    "to": 619
  }, {
    "from": 124,
    "label": "calls",
    "to": 619
  }, {
    "from": 124,
    "label": "calls",
    "to": 619
  }, {
    "from": 188,
    "label": "calls",
    "to": 619
  }, {
    "from": 188,
    "label": "calls",
    "to": 619
  }, {
    "from": 258,
    "label": "calls",
    "to": 619
  }, {
    "from": 258,
    "label": "calls",
    "to": 619
  }, {
    "from": 304,
    "label": "calls",
    "to": 619
  }, {
    "from": 304,
    "label": "calls",
    "to": 619
  }, {
    "from": 304,
    "label": "calls",
    "to": 619
  }, {
    "from": 304,
    "label": "calls",
    "to": 619
  }, {
    "from": 304,
    "label": "calls",
    "to": 619
  }, {
    "from": 304,
    "label": "calls",
    "to": 619
  }, {
    "from": 304,
    "label": "calls",
    "to": 619
  }, {
    "from": 304,
    "label": "calls",
    "to": 619
  }, {
    "from": 374,
    "label": "calls",
    "to": 619
  }, {
    "from": 374,
    "label": "calls",
    "to": 619
  }, {
    "from": 389,
    "label": "calls",
    "to": 619
  }, {
    "from": 492,
    "label": "calls",
    "to": 619
  }, {
    "from": 456,
    "label": "calls",
    "to": 619
  }, {
    "from": 258,
    "label": "calls",
    "to": 628
  }, {
    "from": 258,
    "label": "calls",
    "to": 628
  }, {
    "from": 454,
    "label": "calls",
    "to": 628
  }, {
    "from": 188,
    "label": "calls",
    "to": 632
  }, {
    "from": 372,
    "label": "calls",
    "to": 632
  }, {
    "from": 372,
    "label": "calls",
    "to": 632
  }, {
    "from": 518,
    "label": "calls",
    "to": 601
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 304,
    "label": "calls",
    "to": 65
  }, {
    "from": 518,
    "label": "calls",
    "to": 65
  }, {
    "from": 518,
    "label": "calls",
    "to": 65
  }, {
    "from": 518,
    "label": "calls",
    "to": 65
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 2
  }, {
    "from": 304,
    "label": "calls",
    "to": 58
  }, {
    "from": 518,
    "label": "calls",
    "to": 614
  }, {
    "from": 2,
    "label": "calls",
    "to": 621
  }, {
    "from": 2,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 22,
    "label": "calls",
    "to": 621
  }, {
    "from": 152,
    "label": "calls",
    "to": 621
  }, {
    "from": 152,
    "label": "calls",
    "to": 621
  }, {
    "from": 152,
    "label": "calls",
    "to": 621
  }, {
    "from": 304,
    "label": "calls",
    "to": 621
  }, {
    "from": 372,
    "label": "calls",
    "to": 621
  }, {
    "from": 454,
    "label": "calls",
    "to": 621
  }, {
    "from": 389,
    "label": "calls",
    "to": 621
  }, {
    "from": 389,
    "label": "calls",
    "to": 621
  }, {
    "from": 372,
    "label": "calls",
    "to": 372
  }, {
    "from": 304,
    "label": "calls",
    "to": 372
  }, {
    "from": 600,
    "label": "calls",
    "to": 622
  }, {
    "from": 600,
    "label": "calls",
    "to": 604
  }, {
    "from": 518,
    "label": "calls",
    "to": 615
  }, {
    "from": 518,
    "label": "calls",
    "to": 610
  }, {
    "from": 518,
    "label": "calls",
    "to": 583
  }, {
    "from": 304,
    "label": "calls",
    "to": 188
  }, {
    "from": 304,
    "label": "calls",
    "to": 188
  }, {
    "from": 372,
    "label": "calls",
    "to": 188
  }, {
    "from": 304,
    "label": "calls",
    "to": 188
  }, {
    "from": 152,
    "label": "calls",
    "to": 186
  }, {
    "from": 237,
    "label": "calls",
    "to": 144
  }, {
    "from": 494,
    "label": "calls",
    "to": 144
  }, {
    "from": 600,
    "label": "calls",
    "to": 518
  }, {
    "from": 65,
    "label": "calls",
    "to": 122
  }, {
    "from": 65,
    "label": "calls",
    "to": 122
  }, {
    "from": 65,
    "label": "calls",
    "to": 122
  }, {
    "from": 144,
    "label": "calls",
    "to": 639
  }, {
    "from": 144,
    "label": "calls",
    "to": 639
  }, {
    "from": 144,
    "label": "calls",
    "to": 639
  }, {
    "from": 65,
    "label": "calls",
    "to": 613
  }, {
    "from": 65,
    "label": "calls",
    "to": 613
  }, {
    "from": 600,
    "label": "calls",
    "to": 605
  }, {
    "from": 600,
    "label": "calls",
    "to": 605
  }, {
    "from": 518,
    "label": "calls",
    "to": 612
  }, {
    "from": 186,
    "label": "calls",
    "to": 631
  }, {
    "from": 152,
    "label": "calls",
    "to": 631
  }, {
    "from": 152,
    "label": "calls",
    "to": 631
  }, {
    "from": 152,
    "label": "calls",
    "to": 631
  }, {
    "from": 152,
    "label": "calls",
    "to": 631
  }, {
    "from": 152,
    "label": "calls",
    "to": 631
  }, {
    "from": 152,
    "label": "calls",
    "to": 631
  }, {
    "from": 188,
    "label": "calls",
    "to": 631
  }, {
    "from": 219,
    "label": "calls",
    "to": 631
  }, {
    "from": 232,
    "label": "calls",
    "to": 631
  }, {
    "from": 304,
    "label": "calls",
    "to": 631
  }, {
    "from": 304,
    "label": "calls",
    "to": 631
  }, {
    "from": 304,
    "label": "calls",
    "to": 631
  }, {
    "from": 304,
    "label": "calls",
    "to": 631
  }, {
    "from": 304,
    "label": "calls",
    "to": 631
  }, {
    "from": 304,
    "label": "calls",
    "to": 631
  }, {
    "from": 304,
    "label": "calls",
    "to": 631
  }, {
    "from": 65,
    "label": "calls",
    "to": 618
  }, {
    "from": 65,
    "label": "calls",
    "to": 624
  }, {
    "from": 124,
    "label": "calls",
    "to": 624
  }, {
    "from": 144,
    "label": "calls",
    "to": 624
  }, {
    "from": 152,
    "label": "calls",
    "to": 624
  }, {
    "from": 237,
    "label": "calls",
    "to": 624
  }, {
    "from": 304,
    "label": "calls",
    "to": 616
  }, {
    "from": 304,
    "label": "calls",
    "to": 494
  }, {
    "from": 304,
    "label": "calls",
    "to": 389
  }, {
    "from": 374,
    "label": "calls",
    "to": 636
  }, {
    "from": 518,
    "label": "calls",
    "to": 617
  }, {
    "from": 518,
    "label": "calls",
    "to": 617
  }, {
    "from": 518,
    "label": "calls",
    "to": 617
  }, {
    "from": 518,
    "label": "calls",
    "to": 617
  }, {
    "from": 518,
    "label": "calls",
    "to": 617
  }, {
    "from": 518,
    "label": "calls",
    "to": 617
  }, {
    "from": 454,
    "label": "calls",
    "to": 637
  }, {
    "from": 304,
    "label": "calls",
    "to": 232
  }, {
    "from": 304,
    "label": "calls",
    "to": 456
  }, {
    "from": 454,
    "label": "calls",
    "to": 633
  }, {
    "from": 237,
    "label": "calls",
    "to": 124
  }, {
    "from": 454,
    "label": "calls",
    "to": 454
  }, {
    "from": 389,
    "label": "calls",
    "to": 454
  }, {
    "from": 65,
    "label": "calls",
    "to": 611
  }, {
    "from": 211,
    "label": "calls",
    "to": 248
  }, {
    "from": 217,
    "label": "calls",
    "to": 248
  }, {
    "from": 219,
    "label": "calls",
    "to": 248
  }, {
    "from": 232,
    "label": "calls",
    "to": 248
  }, {
    "from": 237,
    "label": "calls",
    "to": 248
  }, {
    "from": 144,
    "label": "calls",
    "to": 634
  }, {
    "from": 219,
    "label": "calls",
    "to": 634
  }, {
    "from": 232,
    "label": "calls",
    "to": 634
  }, {
    "from": 456,
    "label": "calls",
    "to": 607
  }, {
    "from": 456,
    "label": "calls",
    "to": 625
  }, {
    "from": 188,
    "label": "calls",
    "to": 237
  }, {
    "from": 304,
    "label": "calls",
    "to": 608
  }, {
    "from": 454,
    "label": "calls",
    "to": 608
  }, {
    "from": 389,
    "label": "calls",
    "to": 608
  }, {
    "from": 600,
    "label": "calls",
    "to": 640
  }, {
    "from": 454,
    "label": "calls",
    "to": 635
  }, {
    "from": 492,
    "label": "calls",
    "to": 492
  }, {
    "from": 456,
    "label": "calls",
    "to": 492
  }, {
    "from": 518,
    "label": "calls",
    "to": 602
  }, {
    "from": 518,
    "label": "calls",
    "to": 602
  }, {
    "from": 304,
    "label": "calls",
    "to": 219
  }, {
    "from": 65,
    "label": "calls",
    "to": 623
  }, {
    "from": 142,
    "label": "calls",
    "to": 623
  }, {
    "from": 144,
    "label": "calls",
    "to": 623
  }, {
    "from": 152,
    "label": "calls",
    "to": 623
  }, {
    "from": 188,
    "label": "calls",
    "to": 623
  }, {
    "from": 211,
    "label": "calls",
    "to": 623
  }, {
    "from": 248,
    "label": "calls",
    "to": 623
  }, {
    "from": 248,
    "label": "calls",
    "to": 623
  }, {
    "from": 248,
    "label": "calls",
    "to": 623
  }, {
    "from": 258,
    "label": "calls",
    "to": 623
  }, {
    "from": 372,
    "label": "calls",
    "to": 623
  }, {
    "from": 374,
    "label": "calls",
    "to": 623
  }, {
    "from": 374,
    "label": "calls",
    "to": 623
  }, {
    "from": 374,
    "label": "calls",
    "to": 623
  }, {
    "from": 454,
    "label": "calls",
    "to": 623
  }, {
    "from": 389,
    "label": "calls",
    "to": 623
  }, {
    "from": 389,
    "label": "calls",
    "to": 623
  }, {
    "from": 389,
    "label": "calls",
    "to": 623
  }, {
    "from": 389,
    "label": "calls",
    "to": 623
  }, {
    "from": 389,
    "label": "calls",
    "to": 623
  }, {
    "from": 389,
    "label": "calls",
    "to": 623
  }, {
    "from": 492,
    "label": "calls",
    "to": 623
  }, {
    "from": 492,
    "label": "calls",
    "to": 623
  }, {
    "from": 492,
    "label": "calls",
    "to": 623
  }, {
    "from": 456,
    "label": "calls",
    "to": 623
  }, {
    "from": 456,
    "label": "calls",
    "to": 623
  }, {
    "from": 456,
    "label": "calls",
    "to": 623
  }, {
    "from": 494,
    "label": "calls",
    "to": 623
  }, {
    "from": 494,
    "label": "calls",
    "to": 623
  }, {
    "from": 494,
    "label": "calls",
    "to": 623
  }, {
    "from": 518,
    "label": "calls",
    "to": 623
  }, {
    "from": 124,
    "label": "calls",
    "to": 142
  }, {
    "from": 124,
    "label": "calls",
    "to": 142
  }, {
    "from": 124,
    "label": "calls",
    "to": 142
  }, {
    "from": 124,
    "label": "calls",
    "to": 142
  }, {
    "from": 124,
    "label": "calls",
    "to": 142
  }, {
    "from": 124,
    "label": "calls",
    "to": 142
  }, {
    "from": 124,
    "label": "calls",
    "to": 142
  }, {
    "from": 124,
    "label": "calls",
    "to": 142
  }, {
    "from": 124,
    "label": "calls",
    "to": 142
  }, {
    "from": 2,
    "label": "calls",
    "to": 638
  }, {
    "from": 2,
    "label": "calls",
    "to": 638
  }, {
    "from": 124,
    "label": "calls",
    "to": 629
  }, {
    "from": 211,
    "label": "calls",
    "to": 629
  }, {
    "from": 389,
    "label": "calls",
    "to": 629
  }, {
    "from": 518,
    "label": "calls",
    "to": 258
  }, {
    "from": 304,
    "label": "calls",
    "to": 217
  }, {
    "from": 518,
    "label": "calls",
    "to": 603
  }, {
    "from": 518,
    "label": "calls",
    "to": 603
  }, {
    "from": 518,
    "label": "calls",
    "to": 603
  }, {
    "from": 518,
    "label": "calls",
    "to": 603
  }, {
    "from": 583,
    "label": "calls",
    "to": 630
  }, {
    "from": 304,
    "label": "calls",
    "to": 374
  }, {
    "from": 2,
    "label": "calls",
    "to": 626
  }, {
    "from": 2,
    "label": "calls",
    "to": 626
  }, {
    "from": 2,
    "label": "calls",
    "to": 626
  }, {
    "from": 2,
    "label": "calls",
    "to": 626
  }, {
    "from": 186,
    "label": "calls",
    "to": 626
  }, {
    "from": 186,
    "label": "calls",
    "to": 626
  }, {
    "from": 518,
    "label": "calls",
    "to": 606
  }, {
    "from": 518,
    "label": "calls",
    "to": 606
  }, {
    "from": 518,
    "label": "calls",
    "to": 606
  }, {
    "from": 518,
    "label": "calls",
    "to": 609
  }, {
    "from": 372,
    "label": "calls",
    "to": 620
  }, {
    "from": 1,
    "label": "contains",
    "to": 600
  }, {
    "from": 600,
    "label": "declares",
    "to": 2
  }, {
    "from": 600,
    "label": "declares",
    "to": 22
  }, {
    "from": 600,
    "label": "declares",
    "to": 55
  }, {
    "from": 600,
    "label": "declares",
    "to": 58
  }, {
    "from": 600,
    "label": "declares",
    "to": 65
  }, {
    "from": 600,
    "label": "declares",
    "to": 122
  }, {
    "from": 600,
    "label": "declares",
    "to": 124
  }, {
    "from": 600,
    "label": "declares",
    "to": 142
  }, {
    "from": 600,
    "label": "declares",
    "to": 144
  }, {
    "from": 600,
    "label": "declares",
    "to": 152
  }, {
    "from": 600,
    "label": "declares",
    "to": 186
  }, {
    "from": 600,
    "label": "declares",
    "to": 188
  }, {
    "from": 600,
    "label": "declares",
    "to": 211
  }, {
    "from": 600,
    "label": "declares",
    "to": 217
  }, {
    "from": 600,
    "label": "declares",
    "to": 219
  }, {
    "from": 600,
    "label": "declares",
    "to": 232
  }, {
    "from": 600,
    "label": "declares",
    "to": 237
  }, {
    "from": 600,
    "label": "declares",
    "to": 248
  }, {
    "from": 600,
    "label": "declares",
    "to": 258
  }, {
    "from": 600,
    "label": "declares",
    "to": 302
  }, {
    "from": 600,
    "label": "declares",
    "to": 304
  }, {
    "from": 600,
    "label": "declares",
    "to": 372
  }, {
    "from": 600,
    "label": "declares",
    "to": 374
  }, {
    "from": 600,
    "label": "declares",
    "to": 389
  }, {
    "from": 600,
    "label": "declares",
    "to": 454
  }, {
    "from": 600,
    "label": "declares",
    "to": 456
  }, {
    "from": 600,
    "label": "declares",
    "to": 492
  }, {
    "from": 600,
    "label": "declares",
    "to": 494
  }, {
    "from": 600,
    "label": "declares",
    "to": 518
  }, {
    "from": 600,
    "label": "declares",
    "to": 583
  }, {
    "from": 600,
    "label": "declares",
    "to": 585
  }, {
    "from": 600,
    "label": "declares",
    "to": 586
  }, {
    "from": 600,
    "label": "declares",
    "to": 588
  }, {
    "from": 600,
    "label": "declares",
    "to": 590
  }, {
    "from": 600,
    "label": "declares",
    "to": 592
  }, {
    "from": 600,
    "label": "declares",
    "to": 594
  }, {
    "from": 600,
    "label": "declares",
    "to": 596
  }, {
    "from": 600,
    "label": "declares",
    "to": 598
  }, {
    "from": 1,
    "label": "contains",
    "to": 642
  }, {
    "from": 1,
    "label": "contains",
    "to": 643
  }, {
    "from": 642,
    "label": "initializes",
    "to": 644
  }, {
    "from": 644,
    "label": "assigns",
    "to": 645
  }, {
    "from": 642,
    "label": "initializes",
    "to": 646
  }, {
    "from": 642,
    "label": "initializes",
    "to": 647
  }, {
    "from": 642,
    "label": "initializes",
    "to": 648
  }, {
    "from": 642,
    "label": "initializes",
    "to": 649
  }, {
    "from": 642,
    "label": "initializes",
    "to": 650
  }, {
    "from": 642,
    "label": "initializes",
    "to": 651
  }, {
    "from": 651,
    "label": "assigns",
    "to": 652
  }, {
    "from": 642,
    "label": "initializes",
    "to": 653
  }, {
    "from": 653,
    "label": "assigns",
    "to": 654
  }, {
    "from": 642,
    "label": "initializes",
    "to": 655
  }, {
    "from": 655,
    "label": "assigns",
    "to": 656
  }, {
    "from": 642,
    "label": "initializes",
    "to": 657
  }, {
    "from": 642,
    "label": "initializes",
    "to": 658
  }, {
    "from": 658,
    "label": "assigns",
    "to": 659
  }, {
    "from": 642,
    "label": "initializes",
    "to": 660
  }, {
    "from": 660,
    "label": "assigns",
    "to": 661
  }, {
    "from": 643,
    "label": "initializes",
    "to": 641
  }, {
    "from": 490,
    "label": "hasArgument",
    "to": 585
  }, {
    "from": 534,
    "label": "hasArgument",
    "to": 586
  }, {
    "from": 536,
    "label": "hasArgument",
    "to": 583
  }, {
    "from": 536,
    "label": "hasArgument",
    "to": 588
  }, {
    "from": 544,
    "label": "hasArgument",
    "to": 590
  }, {
    "from": 546,
    "label": "hasArgument",
    "to": 592
  }, {
    "from": 554,
    "label": "hasArgument",
    "to": 594
  }, {
    "from": 556,
    "label": "hasArgument",
    "to": 596
  }, {
    "from": 569,
    "label": "hasArgument",
    "to": 598
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bindings",
    "type": "module"
  }, {
    "id": 2,
    "text": "function ColumnDumpTable(t, keys)\r\n\r\n    local lens = {}\r\n\r\n    for i = 1, #keys do\r\n        lens[i] = string.len(keys[i])\r\n    end\r\n\r\n    for i = 1, #t do\r\n        local u = t[i]\r\n        for k = 1, #keys do\r\n            local len = string.len(tostring(u[keys[k]]))\r\n            if (len > lens[k]) then\r\n                lens[k] = len\r\n            end\r\n        end\r\n    end\r\n\r\n    local s = \"\"\r\n    for k = 1, #keys do\r\n        local val = tostring(keys[k])\r\n        local buf = string.rep(\" \", lens[k] - string.len(val) + 1)\r\n        s = s..val..buf\r\n    end\r\n    print(s)\r\n\r\n    for i = 1, #t do\r\n        local u = t[i]\r\n        local s = \"\"\r\n        for k = 1, #keys do\r\n            local val = tostring(u[keys[k]])\r\n            local buf = string.rep(\" \", lens[k] - string.len(val) + 1)\r\n            s = s..val..buf\r\n        end\r\n        print(s)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local lens = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for i = 1, #keys do\r\n        lens[i] = string.len(keys[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 5,
    "text": "lens[i] = string.len(keys[i])",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "for i = 1, #t do\r\n        local u = t[i]\r\n        for k = 1, #keys do\r\n            local len = string.len(tostring(u[keys[k]]))\r\n            if (len > lens[k]) then\r\n                lens[k] = len\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 7,
    "text": "local u = t[i]",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for k = 1, #keys do\r\n            local len = string.len(tostring(u[keys[k]]))\r\n            if (len > lens[k]) then\r\n                lens[k] = len\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 9,
    "text": "local len = string.len(tostring(u[keys[k]]))",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if (len > lens[k]) then\r\n                lens[k] = len\r\n            end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "lens[k] = len",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for k = 1, #keys do\r\n        local val = tostring(keys[k])\r\n        local buf = string.rep(\" \", lens[k] - string.len(val) + 1)\r\n        s = s..val..buf\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 14,
    "text": "local val = tostring(keys[k])",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local buf = string.rep(\" \", lens[k] - string.len(val) + 1)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "s = s..val..buf",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "print(s)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "for i = 1, #t do\r\n        local u = t[i]\r\n        local s = \"\"\r\n        for k = 1, #keys do\r\n            local val = tostring(u[keys[k]])\r\n            local buf = string.rep(\" \", lens[k] - string.len(val) + 1)\r\n            s = s..val..buf\r\n        end\r\n        print(s)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 19,
    "text": "for k = 1, #keys do\r\n            local val = tostring(u[keys[k]])\r\n            local buf = string.rep(\" \", lens[k] - string.len(val) + 1)\r\n            s = s..val..buf\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 20,
    "text": "local val = tostring(u[keys[k]])",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function DumpBindingInfo(binding)\r\n\r\n    print(\"GetBindingName  : \"..tostring(binding.GetBindingName))\r\n    print(\"GetLuaNamespace : \"..tostring(binding.GetLuaNamespace))\r\n\r\n    print(\"GetClassCount    : \"..tostring(binding.GetClassCount))\r\n    print(\"GetNumberCount   : \"..tostring(binding.GetNumberCount))\r\n    print(\"GetStringCount   : \"..tostring(binding.GetStringCount))\r\n    print(\"GetEventCount    : \"..tostring(binding.GetEventCount))\r\n    print(\"GetObjectCount   : \"..tostring(binding.GetObjectCount))\r\n    print(\"GetFunctionCount : \"..tostring(binding.GetFunctionCount))\r\n\r\n    if true then\r\n        print(\"\\nDUMPING binding.GetClassArray ==================================\\n\")\r\n        local keys = { \"name\", \"wxluamethods\", \"wxluamethods_n\", \"classInfo\", \"wxluatype\", \"baseclassNames\", \"baseBindClasses\", \"enums\", \"enums_n\" }\r\n        ColumnDumpTable(binding.GetClassArray, keys)\r\n    end\r\n\r\n    if true then\r\n        print(\"\\nDUMPING binding.GetFunctionArray ==================================\\n\")\r\n        local keys = { \"name\", \"type\", \"wxluacfuncs\", \"wxluacfuncs_n\", \"basemethod\" }\r\n        ColumnDumpTable(binding.GetFunctionArray, keys)\r\n    end\r\n\r\n    if true then\r\n        print(\"\\nDUMPING binding.GetNumberArray ==================================\\n\")\r\n        local keys = { \"name\", \"value\" }\r\n        ColumnDumpTable(binding.GetNumberArray, keys)\r\n    end\r\n\r\n    if true then\r\n        print(\"\\nDUMPING binding.GetStringArray ==================================\\n\")\r\n        local keys = { \"name\", \"value\" }\r\n        ColumnDumpTable(binding.GetStringArray, keys)\r\n    end\r\n\r\n    if true then\r\n        print(\"\\nDUMPING binding.GetEventArray ==================================\\n\")\r\n        local keys = { \"name\", \"eventType\", \"wxluatype\" }\r\n        ColumnDumpTable(binding.GetEventArray, keys)\r\n    end\r\n\r\n    if true then\r\n        print(\"\\nDUMPING binding.GetObjectArray ==================================\\n\")\r\n        local keys = { \"name\", \"object\", \"wxluatype\" }\r\n        ColumnDumpTable(binding.GetObjectArray, keys)\r\n    end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "print(\"GetBindingName  : \"..tostring(binding.GetBindingName))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "print(\"GetLuaNamespace : \"..tostring(binding.GetLuaNamespace))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "print(\"GetClassCount    : \"..tostring(binding.GetClassCount))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "print(\"GetNumberCount   : \"..tostring(binding.GetNumberCount))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "print(\"GetStringCount   : \"..tostring(binding.GetStringCount))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "print(\"GetEventCount    : \"..tostring(binding.GetEventCount))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "print(\"GetObjectCount   : \"..tostring(binding.GetObjectCount))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "print(\"GetFunctionCount : \"..tostring(binding.GetFunctionCount))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if true then\r\n        print(\"\\nDUMPING binding.GetClassArray ==================================\\n\")\r\n        local keys = { \"name\", \"wxluamethods\", \"wxluamethods_n\", \"classInfo\", \"wxluatype\", \"baseclassNames\", \"baseBindClasses\", \"enums\", \"enums_n\" }\r\n        ColumnDumpTable(binding.GetClassArray, keys)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "print(\"\\nDUMPING binding.GetClassArray ==================================\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local keys = { \"name\", \"wxluamethods\", \"wxluamethods_n\", \"classInfo\", \"wxluatype\", \"baseclassNames\", \"baseBindClasses\", \"enums\", \"enums_n\" }",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "ColumnDumpTable(binding.GetClassArray, keys)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if true then\r\n        print(\"\\nDUMPING binding.GetFunctionArray ==================================\\n\")\r\n        local keys = { \"name\", \"type\", \"wxluacfuncs\", \"wxluacfuncs_n\", \"basemethod\" }\r\n        ColumnDumpTable(binding.GetFunctionArray, keys)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "print(\"\\nDUMPING binding.GetFunctionArray ==================================\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local keys = { \"name\", \"type\", \"wxluacfuncs\", \"wxluacfuncs_n\", \"basemethod\" }",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "ColumnDumpTable(binding.GetFunctionArray, keys)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if true then\r\n        print(\"\\nDUMPING binding.GetNumberArray ==================================\\n\")\r\n        local keys = { \"name\", \"value\" }\r\n        ColumnDumpTable(binding.GetNumberArray, keys)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "print(\"\\nDUMPING binding.GetNumberArray ==================================\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local keys = { \"name\", \"value\" }",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "ColumnDumpTable(binding.GetNumberArray, keys)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if true then\r\n        print(\"\\nDUMPING binding.GetStringArray ==================================\\n\")\r\n        local keys = { \"name\", \"value\" }\r\n        ColumnDumpTable(binding.GetStringArray, keys)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "print(\"\\nDUMPING binding.GetStringArray ==================================\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "ColumnDumpTable(binding.GetStringArray, keys)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "if true then\r\n        print(\"\\nDUMPING binding.GetEventArray ==================================\\n\")\r\n        local keys = { \"name\", \"eventType\", \"wxluatype\" }\r\n        ColumnDumpTable(binding.GetEventArray, keys)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "print(\"\\nDUMPING binding.GetEventArray ==================================\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local keys = { \"name\", \"eventType\", \"wxluatype\" }",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "ColumnDumpTable(binding.GetEventArray, keys)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "if true then\r\n        print(\"\\nDUMPING binding.GetObjectArray ==================================\\n\")\r\n        local keys = { \"name\", \"object\", \"wxluatype\" }\r\n        ColumnDumpTable(binding.GetObjectArray, keys)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "print(\"\\nDUMPING binding.GetObjectArray ==================================\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local keys = { \"name\", \"object\", \"wxluatype\" }",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "ColumnDumpTable(binding.GetObjectArray, keys)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function iff(cond, a, b) if cond then return a else return b end end",
    "type": "function"
  }, {
    "id": 56,
    "text": "if cond then return a else return b end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 58,
    "text": "function SaveListColWidths(level)\r\n    local object_type = listData[level].object_type\r\n\r\n    if not listColWidths[object_type] then\r\n        listColWidths[object_type] = {}\r\n    end\r\n\r\n    for col = 1, listCtrl:GetColumnCount() do\r\n        listColWidths[object_type][col] = listCtrl:GetColumnWidth(col-1)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local object_type = listData[level].object_type",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if not listColWidths[object_type] then\r\n        listColWidths[object_type] = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "listColWidths[object_type] = {}",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "for col = 1, listCtrl:GetColumnCount() do\r\n        listColWidths[object_type][col] = listCtrl:GetColumnWidth(col-1)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 63,
    "text": "listColWidths[object_type][col] = listCtrl:GetColumnWidth(col-1)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function GotoBindingLevel(listCtrl, level)\r\n    wx.wxBeginBusyCursor();\r\n\r\n    local data = listData[level]\r\n\r\n    -- Do we calculate what widths to use for the cols or use previous values?\r\n    local auto_col_widths = false\r\n    if listColWidths[data.object_type] == nil then\r\n        auto_col_widths = true\r\n        listColWidths[data.object_type] = {}\r\n    end\r\n\r\n    local function AutoColWidth(col, txt)\r\n        if auto_col_widths and txt then\r\n            local w = listCtrl:GetTextExtent(txt)\r\n            if w > (listColWidths[data.object_type][col] or 0) - 25 then\r\n                if w > 400 then w = 400 end\r\n                listColWidths[data.object_type][col] = w + 25\r\n            end\r\n        end\r\n    end\r\n\r\n    -- Wipe items and extra cols\r\n    listCtrl:DeleteAllItems()\r\n\r\n    while #data.col_labels < listCtrl:GetColumnCount() do\r\n        listCtrl:DeleteColumn(0)\r\n    end\r\n\r\n    -- Add the cols\r\n    for col = 1, #data.col_labels do\r\n        if col > listCtrl:GetColumnCount() then\r\n            listCtrl:InsertColumn(col-1, data.col_labels[col], wx.wxLIST_FORMAT_LEFT, -1)\r\n        else\r\n            local li = wx.wxListItem()\r\n            li:SetText(data.col_labels[col])\r\n            li:SetImage(-1)\r\n            listCtrl:SetColumn(col-1, li)\r\n        end\r\n\r\n        if data.col_sorted and data.col_sorted[col] then\r\n            listCtrl:SetColumnImage(col-1, data.col_sorted[col])\r\n        end\r\n\r\n        AutoColWidth(col, data.col_labels[col])\r\n    end\r\n\r\n    -- Add the items\r\n    local lc_item = 0\r\n\r\n    for i = 1, #data do\r\n        local d = data[i]\r\n\r\n        local li = wx.wxListItem()\r\n        li:SetId(lc_item+1)\r\n        li:SetText(tostring(d[1] or \"\"))\r\n        li:SetData(i) -- key into the listData table for sorting\r\n\r\n        if (d.icon)  then li:SetImage(d.icon) end\r\n        if (d.color) then li:SetTextColour(d.color) end\r\n\r\n        lc_item = listCtrl:InsertItem(li)\r\n\r\n        AutoColWidth(1, tostring(d[1]))\r\n\r\n        for col = 2, #listData[level].col_labels do\r\n            listCtrl:SetItem(lc_item, col-1, tostring(d[col] or \"\"))\r\n\r\n            if d.col_icons and d.col_icons[col] then\r\n                listCtrl:SetItemColumnImage(lc_item, col-1, d.col_icons[col])\r\n            end\r\n\r\n            AutoColWidth(col, tostring(d[col]))\r\n        end\r\n    end\r\n\r\n    -- Set the column widths\r\n    if listColWidths[data.object_type] then\r\n        for col = 1, #listColWidths[data.object_type] do\r\n            listCtrl:SetColumnWidth(col-1, listColWidths[data.object_type][col])\r\n        end\r\n    end\r\n\r\n    -- Try to reselect the item if we're going up a level\r\n    if data.list_item and (data.list_item < listCtrl:GetItemCount()) then\r\n        listCtrl:SetItemState(data.list_item, wx.wxLIST_STATE_FOCUSED, wx.wxLIST_STATE_FOCUSED);\r\n        listCtrl:SetItemState(data.list_item, wx.wxLIST_STATE_SELECTED, wx.wxLIST_STATE_SELECTED);\r\n        listCtrl:EnsureVisible(data.list_item)\r\n    end\r\n\r\n    -- Finally set the status text of where we are\r\n    local s = {}\r\n    for i = 1, level do\r\n        table.insert(s, listData[i].object_type)\r\n    end\r\n    frame:SetStatusText(table.concat(s, \"->\"))\r\n\r\n    wx.wxEndBusyCursor();\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "wx.wxBeginBusyCursor()",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "local data = listData[level]",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local auto_col_widths = false",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if listColWidths[data.object_type] == nil then\r\n        auto_col_widths = true\r\n        listColWidths[data.object_type] = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "auto_col_widths = true",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "listColWidths[data.object_type] = {}",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "local function AutoColWidth(col, txt)\r\n        if auto_col_widths and txt then\r\n            local w = listCtrl:GetTextExtent(txt)\r\n            if w > (listColWidths[data.object_type][col] or 0) - 25 then\r\n                if w > 400 then w = 400 end\r\n                listColWidths[data.object_type][col] = w + 25\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 73,
    "text": "if auto_col_widths and txt then\r\n            local w = listCtrl:GetTextExtent(txt)\r\n            if w > (listColWidths[data.object_type][col] or 0) - 25 then\r\n                if w > 400 then w = 400 end\r\n                listColWidths[data.object_type][col] = w + 25\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local w = listCtrl:GetTextExtent(txt)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if w > (listColWidths[data.object_type][col] or 0) - 25 then\r\n                if w > 400 then w = 400 end\r\n                listColWidths[data.object_type][col] = w + 25\r\n            end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "if w > 400 then w = 400 end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "w = 400",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "listColWidths[data.object_type][col] = w + 25",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "listCtrl:DeleteAllItems()",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "while #data.col_labels < listCtrl:GetColumnCount() do\r\n        listCtrl:DeleteColumn(0)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 81,
    "text": "listCtrl:DeleteColumn(0)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "for col = 1, #data.col_labels do\r\n        if col > listCtrl:GetColumnCount() then\r\n            listCtrl:InsertColumn(col-1, data.col_labels[col], wx.wxLIST_FORMAT_LEFT, -1)\r\n        else\r\n            local li = wx.wxListItem()\r\n            li:SetText(data.col_labels[col])\r\n            li:SetImage(-1)\r\n            listCtrl:SetColumn(col-1, li)\r\n        end\r\n\r\n        if data.col_sorted and data.col_sorted[col] then\r\n            listCtrl:SetColumnImage(col-1, data.col_sorted[col])\r\n        end\r\n\r\n        AutoColWidth(col, data.col_labels[col])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 83,
    "text": "if col > listCtrl:GetColumnCount() then\r\n            listCtrl:InsertColumn(col-1, data.col_labels[col], wx.wxLIST_FORMAT_LEFT, -1)\r\n        else\r\n            local li = wx.wxListItem()\r\n            li:SetText(data.col_labels[col])\r\n            li:SetImage(-1)\r\n            listCtrl:SetColumn(col-1, li)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "listCtrl:InsertColumn(col-1, data.col_labels[col], wx.wxLIST_FORMAT_LEFT, -1)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "local li = wx.wxListItem()",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "li:SetText(data.col_labels[col])",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "li:SetImage(-1)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "listCtrl:SetColumn(col-1, li)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "if data.col_sorted and data.col_sorted[col] then\r\n            listCtrl:SetColumnImage(col-1, data.col_sorted[col])\r\n        end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "listCtrl:SetColumnImage(col-1, data.col_sorted[col])",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "AutoColWidth(col, data.col_labels[col])",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "local lc_item = 0",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "for i = 1, #data do\r\n        local d = data[i]\r\n\r\n        local li = wx.wxListItem()\r\n        li:SetId(lc_item+1)\r\n        li:SetText(tostring(d[1] or \"\"))\r\n        li:SetData(i) -- key into the listData table for sorting\r\n\r\n        if (d.icon)  then li:SetImage(d.icon) end\r\n        if (d.color) then li:SetTextColour(d.color) end\r\n\r\n        lc_item = listCtrl:InsertItem(li)\r\n\r\n        AutoColWidth(1, tostring(d[1]))\r\n\r\n        for col = 2, #listData[level].col_labels do\r\n            listCtrl:SetItem(lc_item, col-1, tostring(d[col] or \"\"))\r\n\r\n            if d.col_icons and d.col_icons[col] then\r\n                listCtrl:SetItemColumnImage(lc_item, col-1, d.col_icons[col])\r\n            end\r\n\r\n            AutoColWidth(col, tostring(d[col]))\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 94,
    "text": "local d = data[i]",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "li:SetId(lc_item+1)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "li:SetText(tostring(d[1] or \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "li:SetData(i)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if (d.icon)  then li:SetImage(d.icon) end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "li:SetImage(d.icon)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "if (d.color) then li:SetTextColour(d.color) end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "li:SetTextColour(d.color)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "lc_item = listCtrl:InsertItem(li)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "AutoColWidth(1, tostring(d[1]))",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "for col = 2, #listData[level].col_labels do\r\n            listCtrl:SetItem(lc_item, col-1, tostring(d[col] or \"\"))\r\n\r\n            if d.col_icons and d.col_icons[col] then\r\n                listCtrl:SetItemColumnImage(lc_item, col-1, d.col_icons[col])\r\n            end\r\n\r\n            AutoColWidth(col, tostring(d[col]))\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 105,
    "text": "listCtrl:SetItem(lc_item, col-1, tostring(d[col] or \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "if d.col_icons and d.col_icons[col] then\r\n                listCtrl:SetItemColumnImage(lc_item, col-1, d.col_icons[col])\r\n            end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "listCtrl:SetItemColumnImage(lc_item, col-1, d.col_icons[col])",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "AutoColWidth(col, tostring(d[col]))",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "if listColWidths[data.object_type] then\r\n        for col = 1, #listColWidths[data.object_type] do\r\n            listCtrl:SetColumnWidth(col-1, listColWidths[data.object_type][col])\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "for col = 1, #listColWidths[data.object_type] do\r\n            listCtrl:SetColumnWidth(col-1, listColWidths[data.object_type][col])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 111,
    "text": "listCtrl:SetColumnWidth(col-1, listColWidths[data.object_type][col])",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "if data.list_item and (data.list_item < listCtrl:GetItemCount()) then\r\n        listCtrl:SetItemState(data.list_item, wx.wxLIST_STATE_FOCUSED, wx.wxLIST_STATE_FOCUSED);\r\n        listCtrl:SetItemState(data.list_item, wx.wxLIST_STATE_SELECTED, wx.wxLIST_STATE_SELECTED);\r\n        listCtrl:EnsureVisible(data.list_item)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "listCtrl:SetItemState(data.list_item, wx.wxLIST_STATE_FOCUSED, wx.wxLIST_STATE_FOCUSED)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "listCtrl:SetItemState(data.list_item, wx.wxLIST_STATE_SELECTED, wx.wxLIST_STATE_SELECTED)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "listCtrl:EnsureVisible(data.list_item)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "local s = {}",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "for i = 1, level do\r\n        table.insert(s, listData[i].object_type)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 118,
    "text": "table.insert(s, listData[i].object_type)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "frame:SetStatusText(table.concat(s, \"->\"))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "wx.wxEndBusyCursor()",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function AutoColWidth(col, txt)\r\n        if auto_col_widths and txt then\r\n            local w = listCtrl:GetTextExtent(txt)\r\n            if w > (listColWidths[data.object_type][col] or 0) - 25 then\r\n                if w > 400 then w = 400 end\r\n                listColWidths[data.object_type][col] = w + 25\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function CreatewxLuaMethod_TypeString(t_)\r\n    local s = {}\r\n    local t = t_\r\n\r\n    local function HasBit(val, bit, tbl, name)\r\n        if (val - bit) >= 0 then\r\n            val = val - bit\r\n            if tbl then table.insert(tbl, name) end\r\n        end\r\n        return val\r\n    end\r\n\r\n    -- subtract values from high to low value\r\n    t = HasBit(t, wxlua.WXLUAMETHOD_CHECKED_OVERLOAD, nil, nil) -- nobody should care about this\r\n    t = HasBit(t, wxlua.WXLUAMETHOD_DELETE,      s, \"Delete\")\r\n    t = HasBit(t, wxlua.WXLUAMETHOD_STATIC,      s, \"Static\")\r\n    t = HasBit(t, wxlua.WXLUAMETHOD_SETPROP,     s, \"SetProp\")\r\n    t = HasBit(t, wxlua.WXLUAMETHOD_GETPROP,     s, \"GetProp\")\r\n    t = HasBit(t, wxlua.WXLUAMETHOD_CFUNCTION,   s, \"CFunc\")\r\n    t = HasBit(t, wxlua.WXLUAMETHOD_METHOD,      s, \"Method\")\r\n    t = HasBit(t, wxlua.WXLUAMETHOD_CONSTRUCTOR, s, \"Constructor\")\r\n\r\n    assert(t == 0, \"The wxLuaMethod_Type is not handled correctly, remainder \"..tostring(t)..\" of \"..tostring(t_))\r\n\r\n    -- remove this, nobody should care and it'll probably be confusing\r\n    t = HasBit(t_, wxlua.WXLUAMETHOD_CHECKED_OVERLOAD, nil, nil)\r\n\r\n    return string.format(\"0x%04X (%s)\", t, table.concat(s, \", \"))\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "local t = t_",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local function HasBit(val, bit, tbl, name)\r\n        if (val - bit) >= 0 then\r\n            val = val - bit\r\n            if tbl then table.insert(tbl, name) end\r\n        end\r\n        return val\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 127,
    "text": "if (val - bit) >= 0 then\r\n            val = val - bit\r\n            if tbl then table.insert(tbl, name) end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "val = val - bit",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "if tbl then table.insert(tbl, name) end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "table.insert(tbl, name)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "t = HasBit(t, wxlua.WXLUAMETHOD_CHECKED_OVERLOAD, nil, nil)",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "t = HasBit(t, wxlua.WXLUAMETHOD_DELETE,      s, \"Delete\")",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "t = HasBit(t, wxlua.WXLUAMETHOD_STATIC,      s, \"Static\")",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "t = HasBit(t, wxlua.WXLUAMETHOD_SETPROP,     s, \"SetProp\")",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "t = HasBit(t, wxlua.WXLUAMETHOD_GETPROP,     s, \"GetProp\")",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "t = HasBit(t, wxlua.WXLUAMETHOD_CFUNCTION,   s, \"CFunc\")",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "t = HasBit(t, wxlua.WXLUAMETHOD_METHOD,      s, \"Method\")",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "t = HasBit(t, wxlua.WXLUAMETHOD_CONSTRUCTOR, s, \"Constructor\")",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "assert(t == 0, \"The wxLuaMethod_Type is not handled correctly, remainder \"..tostring(t)..\" of \"..tostring(t_))",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "t = HasBit(t_, wxlua.WXLUAMETHOD_CHECKED_OVERLOAD, nil, nil)",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "local function HasBit(val, bit, tbl, name)\r\n        if (val - bit) >= 0 then\r\n            val = val - bit\r\n            if tbl then table.insert(tbl, name) end\r\n        end\r\n        return val\r\n    end",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function CreateArgTagsString(args_table, wxlua_type)\r\n    local arg_names = {}\r\n\r\n    for j = 1, #args_table do\r\n        local s = wxlua.typename(args_table[j])\r\n\r\n        -- The first arg for a class member function is the self\r\n        if (j == 1) and\r\n           (bit.band(wxlua_type, wxlua.WXLUAMETHOD_CFUNCTION) == 0) and\r\n           (bit.band(wxlua_type, wxlua.WXLUAMETHOD_CONSTRUCTOR) == 0) and\r\n           (bit.band(wxlua_type, wxlua.WXLUAMETHOD_STATIC) == 0) then\r\n           s = s..\"(self)\"\r\n        end\r\n\r\n        table.insert(arg_names, s)\r\n    end\r\n\r\n    return table.concat(arg_names, \", \")\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "local arg_names = {}",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "for j = 1, #args_table do\r\n        local s = wxlua.typename(args_table[j])\r\n\r\n        -- The first arg for a class member function is the self\r\n        if (j == 1) and\r\n           (bit.band(wxlua_type, wxlua.WXLUAMETHOD_CFUNCTION) == 0) and\r\n           (bit.band(wxlua_type, wxlua.WXLUAMETHOD_CONSTRUCTOR) == 0) and\r\n           (bit.band(wxlua_type, wxlua.WXLUAMETHOD_STATIC) == 0) then\r\n           s = s..\"(self)\"\r\n        end\r\n\r\n        table.insert(arg_names, s)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 147,
    "text": "local s = wxlua.typename(args_table[j])",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if (j == 1) and\r\n           (bit.band(wxlua_type, wxlua.WXLUAMETHOD_CFUNCTION) == 0) and\r\n           (bit.band(wxlua_type, wxlua.WXLUAMETHOD_CONSTRUCTOR) == 0) and\r\n           (bit.band(wxlua_type, wxlua.WXLUAMETHOD_STATIC) == 0) then\r\n           s = s..\"(self)\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "s = s..\"(self)\"",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "table.insert(arg_names, s)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function CreatewxLuaBindClass(tbl)\r\n    local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = { \"Class Name\", \"# Methods\", \"wxClassInfo\", \"Class Tag\", \"Base Class Names\", \"# Enums\" },\r\n        [\"object_type\"] = \"wxLuaBindClass\"\r\n    }\r\n\r\n    -- items in table from binding.GetClassArray are these\r\n    -- { \"name\", \"wxluamethods\", \"wxluamethods_n\", \"classInfo\", \"wxluatype\", \"baseclassNames\", \"baseBindClasses\", \"enums\", \"enums_n\" }\r\n\r\n    local function GetClassInfoStr(classInfo)\r\n        local s = \"\"\r\n\r\n        if type(classInfo) == \"userdata\" then\r\n            s  = classInfo:GetClassName()\r\n            local b1 = classInfo:GetBaseClassName1()\r\n            local b2 = classInfo:GetBaseClassName2()\r\n\r\n            if (string.len(b1) > 0) then\r\n                s = s..\" (\"..b1..\")\"\r\n            end\r\n            if (string.len(b2) > 0) then\r\n                s = s..\"(\"..b2..\")\"\r\n            end\r\n        end\r\n\r\n        return s\r\n    end\r\n\r\n    t.col_numbers = {}\r\n    t.col_numbers[2] = true\r\n    t.col_numbers[4] = true\r\n    t.col_numbers[6] = true\r\n\r\n    --{ \"name\"[data], \"wxluamethods_n\", \"classInfo\", \"wxluatype\", \"baseclassNames\"[data], \"enums_n\"[data] }\r\n    for i = 1, #tbl do\r\n        local item = {\r\n            tbl[i].name,\r\n            tbl[i].wxluamethods_n,\r\n            GetClassInfoStr(tbl[i].classInfo),\r\n            tbl[i].wxluatype,\r\n            table.concat(tbl[i].baseclassNames or {}, \",\"),\r\n            tbl[i].enums_n,\r\n            [\"col_icons\"] = {},\r\n            [\"data\"] = {}\r\n        }\r\n\r\n        -- This class has methods and can be expanded\r\n        if (type(tbl[i].wxluamethods) == \"table\") then\r\n            item.icon = list_images.folder\r\n            item.data[1] = tbl[i].wxluamethods\r\n        end\r\n\r\n        -- This class has a baseclass and can be expanded\r\n        if (type(tbl[i].baseBindClasses) == \"table\") then\r\n            item.col_icons[5] = list_images.folder\r\n            item.data[5] = tbl[i].baseBindClasses\r\n        end\r\n\r\n        -- This class has enums and can be expanded\r\n        if (type(tbl[i].enums) == \"table\") then\r\n            item.col_icons[6] = list_images.folder\r\n            item.data[6] = tbl[i].enums\r\n        end\r\n\r\n        -- some sanity checks to make sure the bindings are working\r\n        if (tbl[i].wxluamethods_n > 0) and (type(tbl[i].wxluamethods) ~= \"table\") then\r\n            print(tbl[i].name, \"is missing methods table, please report this.\")\r\n        end\r\n        if (tbl[i].baseclassNames) and (type(tbl[i].baseBindClasses) ~= \"table\") then\r\n            print(tbl[i].name, \"is missing baseclass userdata, please report this.\")\r\n        end\r\n        if (tbl[i].enums_n > 0) and (type(tbl[i].enums) ~= \"table\") then\r\n            print(tbl[i].name, \"is missing enums table, please report this.\")\r\n        end\r\n\r\n        table.insert(t, item)\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = { \"Class Name\", \"# Methods\", \"wxClassInfo\", \"Class Tag\", \"Base Class Names\", \"# Enums\" },\r\n        [\"object_type\"] = \"wxLuaBindClass\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "local function GetClassInfoStr(classInfo)\r\n        local s = \"\"\r\n\r\n        if type(classInfo) == \"userdata\" then\r\n            s  = classInfo:GetClassName()\r\n            local b1 = classInfo:GetBaseClassName1()\r\n            local b2 = classInfo:GetBaseClassName2()\r\n\r\n            if (string.len(b1) > 0) then\r\n                s = s..\" (\"..b1..\")\"\r\n            end\r\n            if (string.len(b2) > 0) then\r\n                s = s..\"(\"..b2..\")\"\r\n            end\r\n        end\r\n\r\n        return s\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 155,
    "text": "if type(classInfo) == \"userdata\" then\r\n            s  = classInfo:GetClassName()\r\n            local b1 = classInfo:GetBaseClassName1()\r\n            local b2 = classInfo:GetBaseClassName2()\r\n\r\n            if (string.len(b1) > 0) then\r\n                s = s..\" (\"..b1..\")\"\r\n            end\r\n            if (string.len(b2) > 0) then\r\n                s = s..\"(\"..b2..\")\"\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "s  = classInfo:GetClassName()",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "local b1 = classInfo:GetBaseClassName1()",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "local b2 = classInfo:GetBaseClassName2()",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "if (string.len(b1) > 0) then\r\n                s = s..\" (\"..b1..\")\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "s = s..\" (\"..b1..\")\"",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "if (string.len(b2) > 0) then\r\n                s = s..\"(\"..b2..\")\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "s = s..\"(\"..b2..\")\"",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "t.col_numbers = {}",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "t.col_numbers[2] = true",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "t.col_numbers[4] = true",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "t.col_numbers[6] = true",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "for i = 1, #tbl do\r\n        local item = {\r\n            tbl[i].name,\r\n            tbl[i].wxluamethods_n,\r\n            GetClassInfoStr(tbl[i].classInfo),\r\n            tbl[i].wxluatype,\r\n            table.concat(tbl[i].baseclassNames or {}, \",\"),\r\n            tbl[i].enums_n,\r\n            [\"col_icons\"] = {},\r\n            [\"data\"] = {}\r\n        }\r\n\r\n        -- This class has methods and can be expanded\r\n        if (type(tbl[i].wxluamethods) == \"table\") then\r\n            item.icon = list_images.folder\r\n            item.data[1] = tbl[i].wxluamethods\r\n        end\r\n\r\n        -- This class has a baseclass and can be expanded\r\n        if (type(tbl[i].baseBindClasses) == \"table\") then\r\n            item.col_icons[5] = list_images.folder\r\n            item.data[5] = tbl[i].baseBindClasses\r\n        end\r\n\r\n        -- This class has enums and can be expanded\r\n        if (type(tbl[i].enums) == \"table\") then\r\n            item.col_icons[6] = list_images.folder\r\n            item.data[6] = tbl[i].enums\r\n        end\r\n\r\n        -- some sanity checks to make sure the bindings are working\r\n        if (tbl[i].wxluamethods_n > 0) and (type(tbl[i].wxluamethods) ~= \"table\") then\r\n            print(tbl[i].name, \"is missing methods table, please report this.\")\r\n        end\r\n        if (tbl[i].baseclassNames) and (type(tbl[i].baseBindClasses) ~= \"table\") then\r\n            print(tbl[i].name, \"is missing baseclass userdata, please report this.\")\r\n        end\r\n        if (tbl[i].enums_n > 0) and (type(tbl[i].enums) ~= \"table\") then\r\n            print(tbl[i].name, \"is missing enums table, please report this.\")\r\n        end\r\n\r\n        table.insert(t, item)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 168,
    "text": "local item = {\r\n            tbl[i].name,\r\n            tbl[i].wxluamethods_n,\r\n            GetClassInfoStr(tbl[i].classInfo),\r\n            tbl[i].wxluatype,\r\n            table.concat(tbl[i].baseclassNames or {}, \",\"),\r\n            tbl[i].enums_n,\r\n            [\"col_icons\"] = {},\r\n            [\"data\"] = {}\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if (type(tbl[i].wxluamethods) == \"table\") then\r\n            item.icon = list_images.folder\r\n            item.data[1] = tbl[i].wxluamethods\r\n        end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "item.icon = list_images.folder",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "item.data[1] = tbl[i].wxluamethods",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "if (type(tbl[i].baseBindClasses) == \"table\") then\r\n            item.col_icons[5] = list_images.folder\r\n            item.data[5] = tbl[i].baseBindClasses\r\n        end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "item.col_icons[5] = list_images.folder",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "item.data[5] = tbl[i].baseBindClasses",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "if (type(tbl[i].enums) == \"table\") then\r\n            item.col_icons[6] = list_images.folder\r\n            item.data[6] = tbl[i].enums\r\n        end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "item.col_icons[6] = list_images.folder",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "item.data[6] = tbl[i].enums",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "if (tbl[i].wxluamethods_n > 0) and (type(tbl[i].wxluamethods) ~= \"table\") then\r\n            print(tbl[i].name, \"is missing methods table, please report this.\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "print(tbl[i].name, \"is missing methods table, please report this.\")",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "if (tbl[i].baseclassNames) and (type(tbl[i].baseBindClasses) ~= \"table\") then\r\n            print(tbl[i].name, \"is missing baseclass userdata, please report this.\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "print(tbl[i].name, \"is missing baseclass userdata, please report this.\")",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "if (tbl[i].enums_n > 0) and (type(tbl[i].enums) ~= \"table\") then\r\n            print(tbl[i].name, \"is missing enums table, please report this.\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "print(tbl[i].name, \"is missing enums table, please report this.\")",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "table.insert(t, item)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "local function GetClassInfoStr(classInfo)\r\n        local s = \"\"\r\n\r\n        if type(classInfo) == \"userdata\" then\r\n            s  = classInfo:GetClassName()\r\n            local b1 = classInfo:GetBaseClassName1()\r\n            local b2 = classInfo:GetBaseClassName2()\r\n\r\n            if (string.len(b1) > 0) then\r\n                s = s..\" (\"..b1..\")\"\r\n            end\r\n            if (string.len(b2) > 0) then\r\n                s = s..\"(\"..b2..\")\"\r\n            end\r\n        end\r\n\r\n        return s\r\n    end",
    "type": "function"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "function CreatewxLuaBindMethod(tbl, classname)\r\n    local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = { \"name\", \"method_type\", \"function\", \"basemethod\", \"minargs\", \"maxargs\", \"argtype_names\", \"argtypes\" },\r\n        [\"object_type\"] = \"wxLuaBindMethod\"\r\n    }\r\n\r\n    -- items in table are\r\n    -- { \"name\", \"type\", \"wxluacfuncs\", \"wxluacfuncs_n\", \"basemethod\" }\r\n\r\n    t.col_numbers = {}\r\n    t.col_numbers[3] = true\r\n    t.col_numbers[5] = true\r\n    t.col_numbers[6] = true\r\n\r\n    for i = 1, #tbl do\r\n        local class_name = \"\"\r\n        if tbl[i].class_name then \r\n            class_name = tbl[i].class_name..\"::\" \r\n        end\r\n        if classname then \r\n            class_name = classname..\"::\" \r\n        end\r\n\r\n        -- keys for CFunc = { \"lua_cfunc\", \"type\", \"minargs\", \"maxargs\", \"argtype_names\", \"argtypes\" }\r\n        local cfunc_t = CreatewxLuaBindCFunc(tbl[i].wxluacfuncs)\r\n        for j = 2, #cfunc_t do\r\n            local cft = {\r\n                class_name..tbl[i].name,\r\n                cfunc_t[j][2], \r\n                tostring(cfunc_t[j][1]), \r\n                \"\", \r\n                cfunc_t[j][3], \r\n                cfunc_t[j][4], \r\n                cfunc_t[j][5], \r\n                cfunc_t[j][6],\r\n                [\"icon\"] = nil,\r\n                [\"col_icons\"] = {},\r\n                [\"data\"] = {}\r\n            }\r\n\r\n            if string.find(cfunc_t[j][2], \"Overload\", 1, 1) then \r\n                cft.color = list_colors.green \r\n            end\r\n            if #cfunc_t > 2 then \r\n                cft[1] = cft[1]..\" \"..tostring(j-1) \r\n            end\r\n\r\n            -- This method has a basemethod and can be expanded\r\n            if type(tbl[i].basemethod) == \"userdata\" then\r\n                cft[4] = tbl[i].basemethod.class_name\r\n                cft.data[4] = tbl[i].basemethod\r\n                cft.col_icons[4] = list_images.folder\r\n            end\r\n\r\n            table.insert(t, cft)\r\n        end\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = { \"name\", \"method_type\", \"function\", \"basemethod\", \"minargs\", \"maxargs\", \"argtype_names\", \"argtypes\" },\r\n        [\"object_type\"] = \"wxLuaBindMethod\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "t.col_numbers[3] = true",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "t.col_numbers[5] = true",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "for i = 1, #tbl do\r\n        local class_name = \"\"\r\n        if tbl[i].class_name then \r\n            class_name = tbl[i].class_name..\"::\" \r\n        end\r\n        if classname then \r\n            class_name = classname..\"::\" \r\n        end\r\n\r\n        -- keys for CFunc = { \"lua_cfunc\", \"type\", \"minargs\", \"maxargs\", \"argtype_names\", \"argtypes\" }\r\n        local cfunc_t = CreatewxLuaBindCFunc(tbl[i].wxluacfuncs)\r\n        for j = 2, #cfunc_t do\r\n            local cft = {\r\n                class_name..tbl[i].name,\r\n                cfunc_t[j][2], \r\n                tostring(cfunc_t[j][1]), \r\n                \"\", \r\n                cfunc_t[j][3], \r\n                cfunc_t[j][4], \r\n                cfunc_t[j][5], \r\n                cfunc_t[j][6],\r\n                [\"icon\"] = nil,\r\n                [\"col_icons\"] = {},\r\n                [\"data\"] = {}\r\n            }\r\n\r\n            if string.find(cfunc_t[j][2], \"Overload\", 1, 1) then \r\n                cft.color = list_colors.green \r\n            end\r\n            if #cfunc_t > 2 then \r\n                cft[1] = cft[1]..\" \"..tostring(j-1) \r\n            end\r\n\r\n            -- This method has a basemethod and can be expanded\r\n            if type(tbl[i].basemethod) == \"userdata\" then\r\n                cft[4] = tbl[i].basemethod.class_name\r\n                cft.data[4] = tbl[i].basemethod\r\n                cft.col_icons[4] = list_images.folder\r\n            end\r\n\r\n            table.insert(t, cft)\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 193,
    "text": "local class_name = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "if tbl[i].class_name then \r\n            class_name = tbl[i].class_name..\"::\" \r\n        end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "class_name = tbl[i].class_name..\"::\"",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "if classname then \r\n            class_name = classname..\"::\" \r\n        end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "class_name = classname..\"::\"",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "local cfunc_t = CreatewxLuaBindCFunc(tbl[i].wxluacfuncs)",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "for j = 2, #cfunc_t do\r\n            local cft = {\r\n                class_name..tbl[i].name,\r\n                cfunc_t[j][2], \r\n                tostring(cfunc_t[j][1]), \r\n                \"\", \r\n                cfunc_t[j][3], \r\n                cfunc_t[j][4], \r\n                cfunc_t[j][5], \r\n                cfunc_t[j][6],\r\n                [\"icon\"] = nil,\r\n                [\"col_icons\"] = {},\r\n                [\"data\"] = {}\r\n            }\r\n\r\n            if string.find(cfunc_t[j][2], \"Overload\", 1, 1) then \r\n                cft.color = list_colors.green \r\n            end\r\n            if #cfunc_t > 2 then \r\n                cft[1] = cft[1]..\" \"..tostring(j-1) \r\n            end\r\n\r\n            -- This method has a basemethod and can be expanded\r\n            if type(tbl[i].basemethod) == \"userdata\" then\r\n                cft[4] = tbl[i].basemethod.class_name\r\n                cft.data[4] = tbl[i].basemethod\r\n                cft.col_icons[4] = list_images.folder\r\n            end\r\n\r\n            table.insert(t, cft)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 200,
    "text": "local cft = {\r\n                class_name..tbl[i].name,\r\n                cfunc_t[j][2], \r\n                tostring(cfunc_t[j][1]), \r\n                \"\", \r\n                cfunc_t[j][3], \r\n                cfunc_t[j][4], \r\n                cfunc_t[j][5], \r\n                cfunc_t[j][6],\r\n                [\"icon\"] = nil,\r\n                [\"col_icons\"] = {},\r\n                [\"data\"] = {}\r\n            }",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "if string.find(cfunc_t[j][2], \"Overload\", 1, 1) then \r\n                cft.color = list_colors.green \r\n            end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "cft.color = list_colors.green",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "if #cfunc_t > 2 then \r\n                cft[1] = cft[1]..\" \"..tostring(j-1) \r\n            end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "cft[1] = cft[1]..\" \"..tostring(j-1)",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "if type(tbl[i].basemethod) == \"userdata\" then\r\n                cft[4] = tbl[i].basemethod.class_name\r\n                cft.data[4] = tbl[i].basemethod\r\n                cft.col_icons[4] = list_images.folder\r\n            end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "cft[4] = tbl[i].basemethod.class_name",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "cft.data[4] = tbl[i].basemethod",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "cft.col_icons[4] = list_images.folder",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "table.insert(t, cft)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function CreatewxLuaBindNumber(tbl)\r\n    local keys = { \"name\", \"value\" }\r\n    local t = CreatewxLuaBindTable(tbl, keys, \"wxLuaBindNumber\")\r\n\r\n    t.col_numbers = {}\r\n    t.col_numbers[2] = true\r\n\r\n    -- these are often enums or flags, it's easier to see them as hex\r\n    table.insert(t.col_labels, \"hex\")\r\n\r\n    for i = 2, #t do\r\n        t[i][3] = string.format(\"0x%X\", t[i][2])\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 212,
    "text": "local t = CreatewxLuaBindTable(tbl, keys, \"wxLuaBindNumber\")",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "table.insert(t.col_labels, \"hex\")",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "for i = 2, #t do\r\n        t[i][3] = string.format(\"0x%X\", t[i][2])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 215,
    "text": "t[i][3] = string.format(\"0x%X\", t[i][2])",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 217,
    "text": "function CreatewxLuaBindString(tbl)\r\n    local keys = { \"name\", \"value\" }\r\n    return CreatewxLuaBindTable(tbl, keys, \"wxLuaBindString\")\r\nend",
    "type": "function"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function CreatewxLuaBindEvent(tbl)\r\n    local keys = { \"name\", \"eventType\", \"wxluatype\", \"wxLuaBindClass\" }\r\n    local t = CreatewxLuaBindTable(tbl, keys, \"wxLuaBindEvent\")\r\n\r\n    t.col_numbers = {}\r\n    t.col_numbers[2] = true\r\n\r\n    -- Add the class tag name for the event\r\n    for i = 2, #t do\r\n        t[i][3] = wxlua.typename(t[i][3])..\" (\"..t[i][3]..\")\"\r\n        -- if t[i-1][2] == t[i][2] then t[i].color = wx.wxRED end -- see if there's dups, there's a couple, but they're right\r\n\r\n        -- Set the wxLuaBindClass for this event type\r\n        if type(t[i][4]) == \"userdata\" then\r\n            local c = t[i][4]\r\n            t[i][4] = c.name\r\n            t[i].data = {}\r\n            t[i].data[4] = c\r\n            t[i].col_icons = {}\r\n            t[i].col_icons[4] = list_images.folder\r\n        end\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 220,
    "text": "local keys = { \"name\", \"eventType\", \"wxluatype\", \"wxLuaBindClass\" }",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "local t = CreatewxLuaBindTable(tbl, keys, \"wxLuaBindEvent\")",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "for i = 2, #t do\r\n        t[i][3] = wxlua.typename(t[i][3])..\" (\"..t[i][3]..\")\"\r\n        -- if t[i-1][2] == t[i][2] then t[i].color = wx.wxRED end -- see if there's dups, there's a couple, but they're right\r\n\r\n        -- Set the wxLuaBindClass for this event type\r\n        if type(t[i][4]) == \"userdata\" then\r\n            local c = t[i][4]\r\n            t[i][4] = c.name\r\n            t[i].data = {}\r\n            t[i].data[4] = c\r\n            t[i].col_icons = {}\r\n            t[i].col_icons[4] = list_images.folder\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 223,
    "text": "t[i][3] = wxlua.typename(t[i][3])..\" (\"..t[i][3]..\")\"",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "if type(t[i][4]) == \"userdata\" then\r\n            local c = t[i][4]\r\n            t[i][4] = c.name\r\n            t[i].data = {}\r\n            t[i].data[4] = c\r\n            t[i].col_icons = {}\r\n            t[i].col_icons[4] = list_images.folder\r\n        end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "local c = t[i][4]",
    "type": "statement:localassign"
  }, {
    "id": 226,
    "text": "t[i][4] = c.name",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "t[i].data = {}",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "t[i].data[4] = c",
    "type": "statement:assign"
  }, {
    "id": 229,
    "text": "t[i].col_icons = {}",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "t[i].col_icons[4] = list_images.folder",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 232,
    "text": "function CreatewxLuaBindObject(tbl)\r\n    local keys = { \"name\", \"object\", \"wxluatype\", \"wxLuaBindClass\" }\r\n    local t = CreatewxLuaBindTable(tbl, keys, \"wxLuaBindObject\")\r\n\r\n    -- Add the class tag name for the user data\r\n    for i = 2, #t do\r\n        t[i][3] = wxlua.typename(t[i][3])..\" (\"..t[i][3]..\")\"\r\n\r\n        -- Set the wxLuaBindClass for this object\r\n        if type(t[i][4]) == \"userdata\" then\r\n            local c = t[i][4]\r\n            t[i][4] = c.name\r\n            t[i].data = {}\r\n            t[i].data[4] = c\r\n            t[i].col_icons = {}\r\n            t[i].col_icons[4] = list_images.folder\r\n        end\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 233,
    "text": "local keys = { \"name\", \"object\", \"wxluatype\", \"wxLuaBindClass\" }",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "local t = CreatewxLuaBindTable(tbl, keys, \"wxLuaBindObject\")",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "for i = 2, #t do\r\n        t[i][3] = wxlua.typename(t[i][3])..\" (\"..t[i][3]..\")\"\r\n\r\n        -- Set the wxLuaBindClass for this object\r\n        if type(t[i][4]) == \"userdata\" then\r\n            local c = t[i][4]\r\n            t[i][4] = c.name\r\n            t[i].data = {}\r\n            t[i].data[4] = c\r\n            t[i].col_icons = {}\r\n            t[i].col_icons[4] = list_images.folder\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function CreatewxLuaBindCFunc(tbl)\r\n    local keys = { \"lua_cfunc\", \"method_type\", \"minargs\", \"maxargs\", \"argtypes\" }\r\n    local t = CreatewxLuaBindTable(tbl, keys, \"wxLuaBindCFunc\")\r\n\r\n    t.col_labels[5] =\"argtype_names\" -- swap these two\r\n    t.col_labels[6] =\"argtypes\"\r\n\r\n    t.col_numbers = {}\r\n    t.col_numbers[3] = true\r\n    t.col_numbers[4] = true\r\n\r\n    -- we don't want to show the table, just show the values\r\n    for i = 2, #t do\r\n        local args = t[i][5]\r\n        t[i][5] = CreateArgTagsString(args, t[i][2]) -- swap these two\r\n        t[i][6] = table.concat(args, \", \")\r\n\r\n        t[i][2] = CreatewxLuaMethod_TypeString(t[i][2])\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 238,
    "text": "local keys = { \"lua_cfunc\", \"method_type\", \"minargs\", \"maxargs\", \"argtypes\" }",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "local t = CreatewxLuaBindTable(tbl, keys, \"wxLuaBindCFunc\")",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "t.col_labels[5] =\"argtype_names\"",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "t.col_labels[6] =\"argtypes\"",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "for i = 2, #t do\r\n        local args = t[i][5]\r\n        t[i][5] = CreateArgTagsString(args, t[i][2]) -- swap these two\r\n        t[i][6] = table.concat(args, \", \")\r\n\r\n        t[i][2] = CreatewxLuaMethod_TypeString(t[i][2])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 243,
    "text": "local args = t[i][5]",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "t[i][5] = CreateArgTagsString(args, t[i][2])",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "t[i][6] = table.concat(args, \", \")",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "t[i][2] = CreatewxLuaMethod_TypeString(t[i][2])",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function CreatewxLuaBindTable(tbl, cols, object_type)\r\n    local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = cols,\r\n        [\"object_type\"] = object_type\r\n    }\r\n\r\n    --local keys = {} -- used to find dups\r\n\r\n    for i = 1, #tbl do\r\n        local item = {}\r\n        for c = 1, #cols do\r\n            -- we need to force there to be something in each col, use \"\"\r\n            local val = tbl[i][cols[c]]\r\n            if val ~= nil then\r\n                table.insert(item, val)\r\n            else\r\n                table.insert(item, \"\")\r\n            end\r\n        end\r\n\r\n        --if keys[tbl[i]] then item.color = wx.wxRED end -- check dup keys\r\n        --keys[tbl[i]] = true\r\n\r\n        table.insert(t, item)\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = cols,\r\n        [\"object_type\"] = object_type\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "for i = 1, #tbl do\r\n        local item = {}\r\n        for c = 1, #cols do\r\n            -- we need to force there to be something in each col, use \"\"\r\n            local val = tbl[i][cols[c]]\r\n            if val ~= nil then\r\n                table.insert(item, val)\r\n            else\r\n                table.insert(item, \"\")\r\n            end\r\n        end\r\n\r\n        --if keys[tbl[i]] then item.color = wx.wxRED end -- check dup keys\r\n        --keys[tbl[i]] = true\r\n\r\n        table.insert(t, item)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 251,
    "text": "local item = {}",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "for c = 1, #cols do\r\n            -- we need to force there to be something in each col, use \"\"\r\n            local val = tbl[i][cols[c]]\r\n            if val ~= nil then\r\n                table.insert(item, val)\r\n            else\r\n                table.insert(item, \"\")\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 253,
    "text": "local val = tbl[i][cols[c]]",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "if val ~= nil then\r\n                table.insert(item, val)\r\n            else\r\n                table.insert(item, \"\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "table.insert(item, val)",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "table.insert(item, \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 258,
    "text": "function SortListItems(col)\r\n    local data = listData[list_level]\r\n\r\n    local sorted = false\r\n    if data.col_sorted and data.col_sorted[col+1] then\r\n        sorted = data.col_sorted[col+1] == list_images.sort_dn\r\n    end\r\n\r\n    local function SortListItems(item1, item2, col)\r\n        local data1 = data[item1]\r\n        local data2 = data[item2]\r\n\r\n        if data1[1] == \"..\" then return -1 end\r\n        if data2[1] == \"..\" then return  1 end\r\n\r\n        local i1 = data1[col]\r\n        local i2 = data2[col]\r\n\r\n        if data.col_numbers and data.col_numbers[col] then\r\n            -- sort on the real numbers, but treat \"\" as lower\r\n            if (i1 == \"\") and (i2 == \"\") then\r\n                i1, i2 = 0, 0\r\n            elseif (i1 == \"\") then\r\n                i1, i2 = 0, 1\r\n            elseif (i2 == \"\") then\r\n                i1, i2 = 1, 0\r\n            else\r\n                i1 = tonumber(i1)\r\n                i2 = tonumber(i2)\r\n            end\r\n        else\r\n            i1 = tostring(data1[col])\r\n            i2 = tostring(data2[col])\r\n        end\r\n\r\n        if sorted then\r\n            if i1 < i2 then return  1 end\r\n            if i1 > i2 then return -1 end\r\n        else\r\n            if i1 < i2 then return -1 end\r\n            if i1 > i2 then return  1 end\r\n        end\r\n\r\n        return 0\r\n    end\r\n\r\n    listCtrl:SortItems(SortListItems, col+1)\r\n    data.col_sorted = {} -- we only remember the last col sorted\r\n    if not sorted then\r\n        data.col_sorted[col+1] = list_images.sort_dn\r\n    else\r\n        data.col_sorted[col+1] = list_images.sort_up\r\n    end\r\n\r\n    -- now make the table of data match what's in the listctrl so when you\r\n    -- go up a level it'll stay sorted the same way\r\n    -- Note: it seems faster to let the listctrl sort and then match the lua table\r\n    --       rather than sort table, clear listctrl, and add it back.\r\n    local t = {}\r\n    for i = 1, listCtrl:GetItemCount() do\r\n        local d = listCtrl:GetItemData(i-1) -- old table indexes\r\n        table.insert(t, data[d])            -- table with listctrl order\r\n    end\r\n\r\n    for i = 1, #t do\r\n        listData[list_level][i] = t[i] -- update original table\r\n        listCtrl:SetItemData(i-1, i)   -- fix itemdata to match table indexes\r\n    end\r\n\r\n    -- put the arrow in the col header that we've sorted this col and clear others\r\n    for c = 1, listCtrl:GetColumnCount() do\r\n        if c ~= col+1 then\r\n            listCtrl:SetColumnImage(c-1, -1)\r\n        elseif not sorted then\r\n            listCtrl:SetColumnImage(col, list_images.sort_dn)\r\n        else\r\n            listCtrl:SetColumnImage(col, list_images.sort_up)\r\n        end\r\n    end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 259,
    "text": "local data = listData[list_level]",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "local sorted = false",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "if data.col_sorted and data.col_sorted[col+1] then\r\n        sorted = data.col_sorted[col+1] == list_images.sort_dn\r\n    end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "sorted = data.col_sorted[col+1] == list_images.sort_dn",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "local function SortListItems(item1, item2, col)\r\n        local data1 = data[item1]\r\n        local data2 = data[item2]\r\n\r\n        if data1[1] == \"..\" then return -1 end\r\n        if data2[1] == \"..\" then return  1 end\r\n\r\n        local i1 = data1[col]\r\n        local i2 = data2[col]\r\n\r\n        if data.col_numbers and data.col_numbers[col] then\r\n            -- sort on the real numbers, but treat \"\" as lower\r\n            if (i1 == \"\") and (i2 == \"\") then\r\n                i1, i2 = 0, 0\r\n            elseif (i1 == \"\") then\r\n                i1, i2 = 0, 1\r\n            elseif (i2 == \"\") then\r\n                i1, i2 = 1, 0\r\n            else\r\n                i1 = tonumber(i1)\r\n                i2 = tonumber(i2)\r\n            end\r\n        else\r\n            i1 = tostring(data1[col])\r\n            i2 = tostring(data2[col])\r\n        end\r\n\r\n        if sorted then\r\n            if i1 < i2 then return  1 end\r\n            if i1 > i2 then return -1 end\r\n        else\r\n            if i1 < i2 then return -1 end\r\n            if i1 > i2 then return  1 end\r\n        end\r\n\r\n        return 0\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 264,
    "text": "local data1 = data[item1]",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "local data2 = data[item2]",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "if data1[1] == \"..\" then return -1 end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "if data2[1] == \"..\" then return  1 end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "local i1 = data1[col]",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "local i2 = data2[col]",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "if data.col_numbers and data.col_numbers[col] then\r\n            -- sort on the real numbers, but treat \"\" as lower\r\n            if (i1 == \"\") and (i2 == \"\") then\r\n                i1, i2 = 0, 0\r\n            elseif (i1 == \"\") then\r\n                i1, i2 = 0, 1\r\n            elseif (i2 == \"\") then\r\n                i1, i2 = 1, 0\r\n            else\r\n                i1 = tonumber(i1)\r\n                i2 = tonumber(i2)\r\n            end\r\n        else\r\n            i1 = tostring(data1[col])\r\n            i2 = tostring(data2[col])\r\n        end",
    "type": "statement:if"
  }, {
    "id": 271,
    "text": "if (i1 == \"\") and (i2 == \"\") then\r\n                i1, i2 = 0, 0\r\n            elseif (i1 == \"\") then\r\n                i1, i2 = 0, 1\r\n            elseif (i2 == \"\") then\r\n                i1, i2 = 1, 0\r\n            else\r\n                i1 = tonumber(i1)\r\n                i2 = tonumber(i2)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "i1, i2 = 0, 0",
    "type": "statement:assign"
  }, {
    "id": 273,
    "text": "i1, i2 = 0, 1",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "i1, i2 = 1, 0",
    "type": "statement:assign"
  }, {
    "id": 275,
    "text": "i1 = tonumber(i1)",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "i2 = tonumber(i2)",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "i1 = tostring(data1[col])",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "i2 = tostring(data2[col])",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "if sorted then\r\n            if i1 < i2 then return  1 end\r\n            if i1 > i2 then return -1 end\r\n        else\r\n            if i1 < i2 then return -1 end\r\n            if i1 > i2 then return  1 end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "if i1 < i2 then return  1 end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "if i1 > i2 then return -1 end",
    "type": "statement:if"
  }, {
    "id": 282,
    "text": "if i1 < i2 then return -1 end",
    "type": "statement:if"
  }, {
    "id": 283,
    "text": "if i1 > i2 then return  1 end",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "listCtrl:SortItems(SortListItems, col+1)",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "data.col_sorted = {}",
    "type": "statement:assign"
  }, {
    "id": 286,
    "text": "if not sorted then\r\n        data.col_sorted[col+1] = list_images.sort_dn\r\n    else\r\n        data.col_sorted[col+1] = list_images.sort_up\r\n    end",
    "type": "statement:if"
  }, {
    "id": 287,
    "text": "data.col_sorted[col+1] = list_images.sort_dn",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "data.col_sorted[col+1] = list_images.sort_up",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 290,
    "text": "for i = 1, listCtrl:GetItemCount() do\r\n        local d = listCtrl:GetItemData(i-1) -- old table indexes\r\n        table.insert(t, data[d])            -- table with listctrl order\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 291,
    "text": "local d = listCtrl:GetItemData(i-1)",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "table.insert(t, data[d])",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "for i = 1, #t do\r\n        listData[list_level][i] = t[i] -- update original table\r\n        listCtrl:SetItemData(i-1, i)   -- fix itemdata to match table indexes\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 294,
    "text": "listData[list_level][i] = t[i]",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "listCtrl:SetItemData(i-1, i)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "for c = 1, listCtrl:GetColumnCount() do\r\n        if c ~= col+1 then\r\n            listCtrl:SetColumnImage(c-1, -1)\r\n        elseif not sorted then\r\n            listCtrl:SetColumnImage(col, list_images.sort_dn)\r\n        else\r\n            listCtrl:SetColumnImage(col, list_images.sort_up)\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 297,
    "text": "if c ~= col+1 then\r\n            listCtrl:SetColumnImage(c-1, -1)\r\n        elseif not sorted then\r\n            listCtrl:SetColumnImage(col, list_images.sort_dn)\r\n        else\r\n            listCtrl:SetColumnImage(col, list_images.sort_up)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 298,
    "text": "listCtrl:SetColumnImage(c-1, -1)",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "listCtrl:SetColumnImage(col, list_images.sort_dn)",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "listCtrl:SetColumnImage(col, list_images.sort_up)",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 302,
    "text": "local function SortListItems(item1, item2, col)\r\n        local data1 = data[item1]\r\n        local data2 = data[item2]\r\n\r\n        if data1[1] == \"..\" then return -1 end\r\n        if data2[1] == \"..\" then return  1 end\r\n\r\n        local i1 = data1[col]\r\n        local i2 = data2[col]\r\n\r\n        if data.col_numbers and data.col_numbers[col] then\r\n            -- sort on the real numbers, but treat \"\" as lower\r\n            if (i1 == \"\") and (i2 == \"\") then\r\n                i1, i2 = 0, 0\r\n            elseif (i1 == \"\") then\r\n                i1, i2 = 0, 1\r\n            elseif (i2 == \"\") then\r\n                i1, i2 = 1, 0\r\n            else\r\n                i1 = tonumber(i1)\r\n                i2 = tonumber(i2)\r\n            end\r\n        else\r\n            i1 = tostring(data1[col])\r\n            i2 = tostring(data2[col])\r\n        end\r\n\r\n        if sorted then\r\n            if i1 < i2 then return  1 end\r\n            if i1 > i2 then return -1 end\r\n        else\r\n            if i1 < i2 then return -1 end\r\n            if i1 > i2 then return  1 end\r\n        end\r\n\r\n        return 0\r\n    end",
    "type": "function"
  }, {
    "id": 303,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 304,
    "text": "function OnListItemActivated(event)\r\n    local index      = event:GetIndex() -- note: 0 based, lua tables start at 1\r\n    local data_index = event:GetData()  -- this is the table index\r\n    local itemText   = listCtrl:GetItemText(index)\r\n\r\n    local data = listData[list_level]\r\n\r\n    listData[list_level].list_item = index -- last clicked\r\n    SaveListColWidths(list_level) -- remember user's col widths\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Find what column we're in\r\n    -- local col = event:GetColumn() -- both of these don't work in MSW & GTK\r\n    -- local pt = event:GetPoint()\r\n\r\n    local mousePos = wx.wxGetMousePosition() -- mouse pos on screen\r\n    local clientPos = listCtrl:ScreenToClient(mousePos)\r\n    local scrollPos = listCtrl:GetScrollPos(wx.wxHORIZONTAL) -- horiz scroll pos\r\n\r\n    -- The wxGenericListCtrl (used in GTK at least) actually scrolls by 15\r\n    genlistClassInfo = wx.wxClassInfo.FindClass(\"wxGenericListCtrl\")\r\n    if genlistClassInfo and listCtrl:GetClassInfo():IsKindOf(genlistClassInfo) then\r\n        scrollPos = scrollPos * 15\r\n    end\r\n\r\n    local x = clientPos:GetX() + scrollPos\r\n    local w = 0\r\n    local col = 0\r\n\r\n    --print(col, x, mousePos:GetX(), clientPos:GetX(), scrollPos)\r\n\r\n    for c = 1, listCtrl:GetColumnCount() do\r\n        w = w + listCtrl:GetColumnWidth(c-1)\r\n        if x < w then\r\n            col = c-1\r\n            break\r\n        end\r\n    end\r\n\r\n    -- Handle the different lists we may show\r\n    if (itemText == \"..\") then\r\n        list_level = list_level - 1\r\n        GotoBindingLevel(listCtrl, list_level)\r\n    elseif (list_level == 1) then\r\n        if itemText == \"wxLua Types\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreatewxLuaTypeTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        elseif itemText == \"All wxLua Classes\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreateAllClassesTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        elseif itemText == \"All wxWidgets wxClassInfo\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreatewxClassInfoTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        elseif itemText == \"Overloaded Baseclass Functions\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreateOverloadedBasecassFunctionsTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        else\r\n            local binding = data[data_index].binding\r\n\r\n            listData[2] = {\r\n                {\"..\", [\"icon\"] = list_images.folder},\r\n                {\"GetBindingName\",   tostring(binding.GetBindingName)},\r\n                {\"GetLuaNamespace\",  tostring(binding.GetLuaNamespace)},\r\n\r\n                {\"GetClassArray\",    \"GetClassCount : \"..tostring(binding.GetClassCount), [\"icon\"] = list_images.folder},\r\n                {\"GetFunctionArray\", \"GetFunctionCount : \"..tostring(binding.GetFunctionCount), [\"icon\"] = list_images.folder},\r\n                {\"GetNumberArray\",   \"GetNumberCount : \"..tostring(binding.GetNumberCount), [\"icon\"] = list_images.folder},\r\n                {\"GetStringArray\",   \"GetStringCount : \"..tostring(binding.GetStringCount), [\"icon\"] = list_images.folder},\r\n                {\"GetEventArray\",    \"GetEventCount : \"..tostring(binding.GetEventCount), [\"icon\"] = list_images.folder},\r\n                {\"GetObjectArray\",   \"GetObjectCount : \"..tostring(binding.GetObjectCount), [\"icon\"] = list_images.folder},\r\n\r\n                [\"col_labels\"] = {\"Function Name\", \"Value\"},\r\n                [\"binding\"] = binding,\r\n                [\"object_type\"] = \"wxLuaBinding\"\r\n            }\r\n\r\n            list_level = list_level + 1\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    elseif (list_level == 2) then\r\n        local binding = listData[2].binding\r\n        local t = nil\r\n\r\n        if (itemText == \"GetClassArray\") then\r\n            t = CreatewxLuaBindClass(binding.GetClassArray)\r\n        elseif (itemText == \"GetFunctionArray\") then\r\n            t = CreatewxLuaBindMethod(binding.GetFunctionArray)\r\n        elseif (itemText == \"GetNumberArray\") then\r\n            t = CreatewxLuaBindNumber(binding.GetNumberArray)\r\n        elseif (itemText == \"GetStringArray\") then\r\n            t = CreatewxLuaBindString(binding.GetStringArray)\r\n        elseif (itemText == \"GetEventArray\") then\r\n            t = CreatewxLuaBindEvent(binding.GetEventArray)\r\n        elseif (itemText == \"GetObjectArray\") then\r\n            t = CreatewxLuaBindObject(binding.GetObjectArray)\r\n        end\r\n\r\n        if t ~= nil then\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    elseif (data_index > 1) and (data.object_type == \"wxLuaBindClass\") then\r\n        local t = nil\r\n\r\n        if (col == 0) and (type(data[data_index].data[1]) == \"table\") then\r\n            t = CreatewxLuaBindMethod(data[data_index].data[1], data[data_index][1])\r\n\r\n            if frame:GetMenuBar():IsChecked(ID_VIEW_BASECLASS_FUNCTIONS) then\r\n                print(\"hi\")\r\n                local ct = data[data_index].data[5]\r\n                \r\n                local function recurse_baseclasstable(ct, t)\r\n                    for i, c in ipairs(ct) do\r\n                        print(c.name)\r\n                        local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                        for i = 2, #tt do -- skip \"..\"\r\n                            if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                                    string.find(t[i][1], \"delete\", 1, 1)) then\r\n                                    --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                                table.insert(t, tt[i])\r\n                            end\r\n                        end\r\n                        \r\n                        if c.baseBindClasses then\r\n                            recurse_baseclasstable(c.baseBindClasses, t)\r\n                        end\r\n                    end\r\n                end\r\n                \r\n                if type(ct) == \"table\" then\r\n                    recurse_baseclasstable(ct, t)\r\n                end\r\n                \r\n                --while type(ct) == \"table\" do\r\n                --    local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                --    for i = 2, #tt do -- skip \"..\"\r\n                --        if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                --                string.find(t[i][1], \"delete\", 1, 1)) then\r\n                --                --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                --            table.insert(t, tt[i])\r\n                --        end\r\n                --   end\r\n                --    c = c.baseclass\r\n                --end\r\n            end\r\n        elseif (col == 4) and (type(data[data_index].data[col+1]) == \"table\") then\r\n            t = CreatewxLuaBindClass(data[data_index].data[col+1])\r\n        elseif (col == 5) and (type(data[data_index].data[col+1]) == \"table\") then\r\n            t = CreatewxLuaBindNumber(data[data_index].data[col+1])\r\n        end\r\n\r\n        if t ~= nil then\r\n            t.class_name = listCtrl:GetItemText(index)\r\n\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    elseif (data_index > 1) and (data.object_type == \"wxLuaBindMethod\") then\r\n        local t = nil\r\n\r\n        if (col == 3) and (type(data[data_index].data[col+1]) == \"userdata\") then\r\n            t = CreatewxLuaBindMethod({data[data_index].data[col+1]})\r\n            t.class_name = data[data_index][col+1].class_name\r\n        end\r\n\r\n        if t ~= nil then\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n\r\n    elseif (data_index > 1) and (data.object_type == \"wxLuaBindEvent\") then\r\n        local t = nil\r\n\r\n        if (col == 3) and (type(data[data_index].data[col+1]) == \"userdata\") then\r\n            t = CreatewxLuaBindClass({data[data_index].data[col+1]})       \r\n        end\r\n\r\n        if t ~= nil then\r\n            t.class_name = listCtrl:GetItemText(index)\r\n\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    elseif (data_index > 1) and (data.object_type == \"wxLuaBindObject\") then\r\n        local t = nil\r\n\r\n        if (col == 3) and (type(data[data_index].data[col+1]) == \"userdata\") then\r\n            t = CreatewxLuaBindClass({data[data_index].data[col+1]})       \r\n        end\r\n\r\n        if t ~= nil then\r\n            t.class_name = listCtrl:GetItemText(index)\r\n\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    end\r\n\r\n    event:Skip();\r\n\r\nend",
    "type": "function"
  }, {
    "id": 305,
    "text": "local index      = event:GetIndex()",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "local data_index = event:GetData()",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "local itemText   = listCtrl:GetItemText(index)",
    "type": "statement:localassign"
  }, {
    "id": 308,
    "text": "listData[list_level].list_item = index",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "SaveListColWidths(list_level)",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "local mousePos = wx.wxGetMousePosition()",
    "type": "statement:localassign"
  }, {
    "id": 311,
    "text": "local clientPos = listCtrl:ScreenToClient(mousePos)",
    "type": "statement:localassign"
  }, {
    "id": 312,
    "text": "local scrollPos = listCtrl:GetScrollPos(wx.wxHORIZONTAL)",
    "type": "statement:localassign"
  }, {
    "id": 313,
    "text": "genlistClassInfo = wx.wxClassInfo.FindClass(\"wxGenericListCtrl\")",
    "type": "statement:assign"
  }, {
    "id": 314,
    "text": "if genlistClassInfo and listCtrl:GetClassInfo():IsKindOf(genlistClassInfo) then\r\n        scrollPos = scrollPos * 15\r\n    end",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "scrollPos = scrollPos * 15",
    "type": "statement:assign"
  }, {
    "id": 316,
    "text": "local x = clientPos:GetX() + scrollPos",
    "type": "statement:localassign"
  }, {
    "id": 317,
    "text": "local w = 0",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "local col = 0",
    "type": "statement:localassign"
  }, {
    "id": 319,
    "text": "for c = 1, listCtrl:GetColumnCount() do\r\n        w = w + listCtrl:GetColumnWidth(c-1)\r\n        if x < w then\r\n            col = c-1\r\n            break\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 320,
    "text": "w = w + listCtrl:GetColumnWidth(c-1)",
    "type": "statement:assign"
  }, {
    "id": 321,
    "text": "if x < w then\r\n            col = c-1\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 322,
    "text": "col = c-1",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "if (itemText == \"..\") then\r\n        list_level = list_level - 1\r\n        GotoBindingLevel(listCtrl, list_level)\r\n    elseif (list_level == 1) then\r\n        if itemText == \"wxLua Types\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreatewxLuaTypeTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        elseif itemText == \"All wxLua Classes\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreateAllClassesTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        elseif itemText == \"All wxWidgets wxClassInfo\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreatewxClassInfoTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        elseif itemText == \"Overloaded Baseclass Functions\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreateOverloadedBasecassFunctionsTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        else\r\n            local binding = data[data_index].binding\r\n\r\n            listData[2] = {\r\n                {\"..\", [\"icon\"] = list_images.folder},\r\n                {\"GetBindingName\",   tostring(binding.GetBindingName)},\r\n                {\"GetLuaNamespace\",  tostring(binding.GetLuaNamespace)},\r\n\r\n                {\"GetClassArray\",    \"GetClassCount : \"..tostring(binding.GetClassCount), [\"icon\"] = list_images.folder},\r\n                {\"GetFunctionArray\", \"GetFunctionCount : \"..tostring(binding.GetFunctionCount), [\"icon\"] = list_images.folder},\r\n                {\"GetNumberArray\",   \"GetNumberCount : \"..tostring(binding.GetNumberCount), [\"icon\"] = list_images.folder},\r\n                {\"GetStringArray\",   \"GetStringCount : \"..tostring(binding.GetStringCount), [\"icon\"] = list_images.folder},\r\n                {\"GetEventArray\",    \"GetEventCount : \"..tostring(binding.GetEventCount), [\"icon\"] = list_images.folder},\r\n                {\"GetObjectArray\",   \"GetObjectCount : \"..tostring(binding.GetObjectCount), [\"icon\"] = list_images.folder},\r\n\r\n                [\"col_labels\"] = {\"Function Name\", \"Value\"},\r\n                [\"binding\"] = binding,\r\n                [\"object_type\"] = \"wxLuaBinding\"\r\n            }\r\n\r\n            list_level = list_level + 1\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    elseif (list_level == 2) then\r\n        local binding = listData[2].binding\r\n        local t = nil\r\n\r\n        if (itemText == \"GetClassArray\") then\r\n            t = CreatewxLuaBindClass(binding.GetClassArray)\r\n        elseif (itemText == \"GetFunctionArray\") then\r\n            t = CreatewxLuaBindMethod(binding.GetFunctionArray)\r\n        elseif (itemText == \"GetNumberArray\") then\r\n            t = CreatewxLuaBindNumber(binding.GetNumberArray)\r\n        elseif (itemText == \"GetStringArray\") then\r\n            t = CreatewxLuaBindString(binding.GetStringArray)\r\n        elseif (itemText == \"GetEventArray\") then\r\n            t = CreatewxLuaBindEvent(binding.GetEventArray)\r\n        elseif (itemText == \"GetObjectArray\") then\r\n            t = CreatewxLuaBindObject(binding.GetObjectArray)\r\n        end\r\n\r\n        if t ~= nil then\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    elseif (data_index > 1) and (data.object_type == \"wxLuaBindClass\") then\r\n        local t = nil\r\n\r\n        if (col == 0) and (type(data[data_index].data[1]) == \"table\") then\r\n            t = CreatewxLuaBindMethod(data[data_index].data[1], data[data_index][1])\r\n\r\n            if frame:GetMenuBar():IsChecked(ID_VIEW_BASECLASS_FUNCTIONS) then\r\n                print(\"hi\")\r\n                local ct = data[data_index].data[5]\r\n                \r\n                local function recurse_baseclasstable(ct, t)\r\n                    for i, c in ipairs(ct) do\r\n                        print(c.name)\r\n                        local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                        for i = 2, #tt do -- skip \"..\"\r\n                            if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                                    string.find(t[i][1], \"delete\", 1, 1)) then\r\n                                    --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                                table.insert(t, tt[i])\r\n                            end\r\n                        end\r\n                        \r\n                        if c.baseBindClasses then\r\n                            recurse_baseclasstable(c.baseBindClasses, t)\r\n                        end\r\n                    end\r\n                end\r\n                \r\n                if type(ct) == \"table\" then\r\n                    recurse_baseclasstable(ct, t)\r\n                end\r\n                \r\n                --while type(ct) == \"table\" do\r\n                --    local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                --    for i = 2, #tt do -- skip \"..\"\r\n                --        if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                --                string.find(t[i][1], \"delete\", 1, 1)) then\r\n                --                --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                --            table.insert(t, tt[i])\r\n                --        end\r\n                --   end\r\n                --    c = c.baseclass\r\n                --end\r\n            end\r\n        elseif (col == 4) and (type(data[data_index].data[col+1]) == \"table\") then\r\n            t = CreatewxLuaBindClass(data[data_index].data[col+1])\r\n        elseif (col == 5) and (type(data[data_index].data[col+1]) == \"table\") then\r\n            t = CreatewxLuaBindNumber(data[data_index].data[col+1])\r\n        end\r\n\r\n        if t ~= nil then\r\n            t.class_name = listCtrl:GetItemText(index)\r\n\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    elseif (data_index > 1) and (data.object_type == \"wxLuaBindMethod\") then\r\n        local t = nil\r\n\r\n        if (col == 3) and (type(data[data_index].data[col+1]) == \"userdata\") then\r\n            t = CreatewxLuaBindMethod({data[data_index].data[col+1]})\r\n            t.class_name = data[data_index][col+1].class_name\r\n        end\r\n\r\n        if t ~= nil then\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n\r\n    elseif (data_index > 1) and (data.object_type == \"wxLuaBindEvent\") then\r\n        local t = nil\r\n\r\n        if (col == 3) and (type(data[data_index].data[col+1]) == \"userdata\") then\r\n            t = CreatewxLuaBindClass({data[data_index].data[col+1]})       \r\n        end\r\n\r\n        if t ~= nil then\r\n            t.class_name = listCtrl:GetItemText(index)\r\n\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    elseif (data_index > 1) and (data.object_type == \"wxLuaBindObject\") then\r\n        local t = nil\r\n\r\n        if (col == 3) and (type(data[data_index].data[col+1]) == \"userdata\") then\r\n            t = CreatewxLuaBindClass({data[data_index].data[col+1]})       \r\n        end\r\n\r\n        if t ~= nil then\r\n            t.class_name = listCtrl:GetItemText(index)\r\n\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 324,
    "text": "list_level = list_level - 1",
    "type": "statement:assign"
  }, {
    "id": 325,
    "text": "GotoBindingLevel(listCtrl, list_level)",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "if itemText == \"wxLua Types\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreatewxLuaTypeTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        elseif itemText == \"All wxLua Classes\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreateAllClassesTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        elseif itemText == \"All wxWidgets wxClassInfo\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreatewxClassInfoTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        elseif itemText == \"Overloaded Baseclass Functions\" then\r\n            list_level = list_level + 1\r\n            listData[list_level] = CreateOverloadedBasecassFunctionsTable()\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        else\r\n            local binding = data[data_index].binding\r\n\r\n            listData[2] = {\r\n                {\"..\", [\"icon\"] = list_images.folder},\r\n                {\"GetBindingName\",   tostring(binding.GetBindingName)},\r\n                {\"GetLuaNamespace\",  tostring(binding.GetLuaNamespace)},\r\n\r\n                {\"GetClassArray\",    \"GetClassCount : \"..tostring(binding.GetClassCount), [\"icon\"] = list_images.folder},\r\n                {\"GetFunctionArray\", \"GetFunctionCount : \"..tostring(binding.GetFunctionCount), [\"icon\"] = list_images.folder},\r\n                {\"GetNumberArray\",   \"GetNumberCount : \"..tostring(binding.GetNumberCount), [\"icon\"] = list_images.folder},\r\n                {\"GetStringArray\",   \"GetStringCount : \"..tostring(binding.GetStringCount), [\"icon\"] = list_images.folder},\r\n                {\"GetEventArray\",    \"GetEventCount : \"..tostring(binding.GetEventCount), [\"icon\"] = list_images.folder},\r\n                {\"GetObjectArray\",   \"GetObjectCount : \"..tostring(binding.GetObjectCount), [\"icon\"] = list_images.folder},\r\n\r\n                [\"col_labels\"] = {\"Function Name\", \"Value\"},\r\n                [\"binding\"] = binding,\r\n                [\"object_type\"] = \"wxLuaBinding\"\r\n            }\r\n\r\n            list_level = list_level + 1\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 327,
    "text": "list_level = list_level + 1",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "listData[list_level] = CreatewxLuaTypeTable()",
    "type": "statement:assign"
  }, {
    "id": 329,
    "text": "listData[list_level] = CreateAllClassesTable()",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "listData[list_level] = CreatewxClassInfoTable()",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "listData[list_level] = CreateOverloadedBasecassFunctionsTable()",
    "type": "statement:assign"
  }, {
    "id": 332,
    "text": "local binding = data[data_index].binding",
    "type": "statement:localassign"
  }, {
    "id": 333,
    "text": "listData[2] = {\r\n                {\"..\", [\"icon\"] = list_images.folder},\r\n                {\"GetBindingName\",   tostring(binding.GetBindingName)},\r\n                {\"GetLuaNamespace\",  tostring(binding.GetLuaNamespace)},\r\n\r\n                {\"GetClassArray\",    \"GetClassCount : \"..tostring(binding.GetClassCount), [\"icon\"] = list_images.folder},\r\n                {\"GetFunctionArray\", \"GetFunctionCount : \"..tostring(binding.GetFunctionCount), [\"icon\"] = list_images.folder},\r\n                {\"GetNumberArray\",   \"GetNumberCount : \"..tostring(binding.GetNumberCount), [\"icon\"] = list_images.folder},\r\n                {\"GetStringArray\",   \"GetStringCount : \"..tostring(binding.GetStringCount), [\"icon\"] = list_images.folder},\r\n                {\"GetEventArray\",    \"GetEventCount : \"..tostring(binding.GetEventCount), [\"icon\"] = list_images.folder},\r\n                {\"GetObjectArray\",   \"GetObjectCount : \"..tostring(binding.GetObjectCount), [\"icon\"] = list_images.folder},\r\n\r\n                [\"col_labels\"] = {\"Function Name\", \"Value\"},\r\n                [\"binding\"] = binding,\r\n                [\"object_type\"] = \"wxLuaBinding\"\r\n            }",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "local binding = listData[2].binding",
    "type": "statement:localassign"
  }, {
    "id": 335,
    "text": "local t = nil",
    "type": "statement:localassign"
  }, {
    "id": 336,
    "text": "if (itemText == \"GetClassArray\") then\r\n            t = CreatewxLuaBindClass(binding.GetClassArray)\r\n        elseif (itemText == \"GetFunctionArray\") then\r\n            t = CreatewxLuaBindMethod(binding.GetFunctionArray)\r\n        elseif (itemText == \"GetNumberArray\") then\r\n            t = CreatewxLuaBindNumber(binding.GetNumberArray)\r\n        elseif (itemText == \"GetStringArray\") then\r\n            t = CreatewxLuaBindString(binding.GetStringArray)\r\n        elseif (itemText == \"GetEventArray\") then\r\n            t = CreatewxLuaBindEvent(binding.GetEventArray)\r\n        elseif (itemText == \"GetObjectArray\") then\r\n            t = CreatewxLuaBindObject(binding.GetObjectArray)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 337,
    "text": "t = CreatewxLuaBindClass(binding.GetClassArray)",
    "type": "statement:assign"
  }, {
    "id": 338,
    "text": "t = CreatewxLuaBindMethod(binding.GetFunctionArray)",
    "type": "statement:assign"
  }, {
    "id": 339,
    "text": "t = CreatewxLuaBindNumber(binding.GetNumberArray)",
    "type": "statement:assign"
  }, {
    "id": 340,
    "text": "t = CreatewxLuaBindString(binding.GetStringArray)",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "t = CreatewxLuaBindEvent(binding.GetEventArray)",
    "type": "statement:assign"
  }, {
    "id": 342,
    "text": "t = CreatewxLuaBindObject(binding.GetObjectArray)",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "if t ~= nil then\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "listData[list_level] = t",
    "type": "statement:assign"
  }, {
    "id": 345,
    "text": "if (col == 0) and (type(data[data_index].data[1]) == \"table\") then\r\n            t = CreatewxLuaBindMethod(data[data_index].data[1], data[data_index][1])\r\n\r\n            if frame:GetMenuBar():IsChecked(ID_VIEW_BASECLASS_FUNCTIONS) then\r\n                print(\"hi\")\r\n                local ct = data[data_index].data[5]\r\n                \r\n                local function recurse_baseclasstable(ct, t)\r\n                    for i, c in ipairs(ct) do\r\n                        print(c.name)\r\n                        local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                        for i = 2, #tt do -- skip \"..\"\r\n                            if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                                    string.find(t[i][1], \"delete\", 1, 1)) then\r\n                                    --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                                table.insert(t, tt[i])\r\n                            end\r\n                        end\r\n                        \r\n                        if c.baseBindClasses then\r\n                            recurse_baseclasstable(c.baseBindClasses, t)\r\n                        end\r\n                    end\r\n                end\r\n                \r\n                if type(ct) == \"table\" then\r\n                    recurse_baseclasstable(ct, t)\r\n                end\r\n                \r\n                --while type(ct) == \"table\" do\r\n                --    local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                --    for i = 2, #tt do -- skip \"..\"\r\n                --        if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                --                string.find(t[i][1], \"delete\", 1, 1)) then\r\n                --                --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                --            table.insert(t, tt[i])\r\n                --        end\r\n                --   end\r\n                --    c = c.baseclass\r\n                --end\r\n            end\r\n        elseif (col == 4) and (type(data[data_index].data[col+1]) == \"table\") then\r\n            t = CreatewxLuaBindClass(data[data_index].data[col+1])\r\n        elseif (col == 5) and (type(data[data_index].data[col+1]) == \"table\") then\r\n            t = CreatewxLuaBindNumber(data[data_index].data[col+1])\r\n        end",
    "type": "statement:if"
  }, {
    "id": 346,
    "text": "t = CreatewxLuaBindMethod(data[data_index].data[1], data[data_index][1])",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "if frame:GetMenuBar():IsChecked(ID_VIEW_BASECLASS_FUNCTIONS) then\r\n                print(\"hi\")\r\n                local ct = data[data_index].data[5]\r\n                \r\n                local function recurse_baseclasstable(ct, t)\r\n                    for i, c in ipairs(ct) do\r\n                        print(c.name)\r\n                        local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                        for i = 2, #tt do -- skip \"..\"\r\n                            if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                                    string.find(t[i][1], \"delete\", 1, 1)) then\r\n                                    --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                                table.insert(t, tt[i])\r\n                            end\r\n                        end\r\n                        \r\n                        if c.baseBindClasses then\r\n                            recurse_baseclasstable(c.baseBindClasses, t)\r\n                        end\r\n                    end\r\n                end\r\n                \r\n                if type(ct) == \"table\" then\r\n                    recurse_baseclasstable(ct, t)\r\n                end\r\n                \r\n                --while type(ct) == \"table\" do\r\n                --    local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                --    for i = 2, #tt do -- skip \"..\"\r\n                --        if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                --                string.find(t[i][1], \"delete\", 1, 1)) then\r\n                --                --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                --            table.insert(t, tt[i])\r\n                --        end\r\n                --   end\r\n                --    c = c.baseclass\r\n                --end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 348,
    "text": "print(\"hi\")",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "local ct = data[data_index].data[5]",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "local function recurse_baseclasstable(ct, t)\r\n                    for i, c in ipairs(ct) do\r\n                        print(c.name)\r\n                        local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                        for i = 2, #tt do -- skip \"..\"\r\n                            if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                                    string.find(t[i][1], \"delete\", 1, 1)) then\r\n                                    --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                                table.insert(t, tt[i])\r\n                            end\r\n                        end\r\n                        \r\n                        if c.baseBindClasses then\r\n                            recurse_baseclasstable(c.baseBindClasses, t)\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:localfunction"
  }, {
    "id": 351,
    "text": "for i, c in ipairs(ct) do\r\n                        print(c.name)\r\n                        local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                        for i = 2, #tt do -- skip \"..\"\r\n                            if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                                    string.find(t[i][1], \"delete\", 1, 1)) then\r\n                                    --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                                table.insert(t, tt[i])\r\n                            end\r\n                        end\r\n                        \r\n                        if c.baseBindClasses then\r\n                            recurse_baseclasstable(c.baseBindClasses, t)\r\n                        end\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 352,
    "text": "print(c.name)",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)",
    "type": "statement:localassign"
  }, {
    "id": 354,
    "text": "for i = 2, #tt do -- skip \"..\"\r\n                            if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                                    string.find(t[i][1], \"delete\", 1, 1)) then\r\n                                    --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                                table.insert(t, tt[i])\r\n                            end\r\n                        end",
    "type": "statement:numericfor"
  }, {
    "id": 355,
    "text": "if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                                    string.find(t[i][1], \"delete\", 1, 1)) then\r\n                                    --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                                table.insert(t, tt[i])\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 356,
    "text": "table.insert(t, tt[i])",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "if c.baseBindClasses then\r\n                            recurse_baseclasstable(c.baseBindClasses, t)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 358,
    "text": "recurse_baseclasstable(c.baseBindClasses, t)",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "if type(ct) == \"table\" then\r\n                    recurse_baseclasstable(ct, t)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 360,
    "text": "recurse_baseclasstable(ct, t)",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "t = CreatewxLuaBindClass(data[data_index].data[col+1])",
    "type": "statement:assign"
  }, {
    "id": 362,
    "text": "t = CreatewxLuaBindNumber(data[data_index].data[col+1])",
    "type": "statement:assign"
  }, {
    "id": 363,
    "text": "if t ~= nil then\r\n            t.class_name = listCtrl:GetItemText(index)\r\n\r\n            list_level = list_level + 1\r\n            listData[list_level] = t\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 364,
    "text": "t.class_name = listCtrl:GetItemText(index)",
    "type": "statement:assign"
  }, {
    "id": 365,
    "text": "if (col == 3) and (type(data[data_index].data[col+1]) == \"userdata\") then\r\n            t = CreatewxLuaBindMethod({data[data_index].data[col+1]})\r\n            t.class_name = data[data_index][col+1].class_name\r\n        end",
    "type": "statement:if"
  }, {
    "id": 366,
    "text": "t = CreatewxLuaBindMethod({data[data_index].data[col+1]})",
    "type": "statement:assign"
  }, {
    "id": 367,
    "text": "t.class_name = data[data_index][col+1].class_name",
    "type": "statement:assign"
  }, {
    "id": 368,
    "text": "if (col == 3) and (type(data[data_index].data[col+1]) == \"userdata\") then\r\n            t = CreatewxLuaBindClass({data[data_index].data[col+1]})       \r\n        end",
    "type": "statement:if"
  }, {
    "id": 369,
    "text": "t = CreatewxLuaBindClass({data[data_index].data[col+1]})",
    "type": "statement:assign"
  }, {
    "id": 370,
    "text": "event:Skip()",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "local function recurse_baseclasstable(ct, t)\r\n                    for i, c in ipairs(ct) do\r\n                        print(c.name)\r\n                        local tt = CreatewxLuaBindMethod(c.wxluamethods, c.name)\r\n                        for i = 2, #tt do -- skip \"..\"\r\n                            if not (string.find(tt[i][2], \"Constructor\", 1, 1) or\r\n                                    string.find(t[i][1], \"delete\", 1, 1)) then\r\n                                    --string.find(t[i][1], \"::\"..c.name, 1, 1)) then\r\n                                table.insert(t, tt[i])\r\n                            end\r\n                        end\r\n                        \r\n                        if c.baseBindClasses then\r\n                            recurse_baseclasstable(c.baseBindClasses, t)\r\n                        end\r\n                    end\r\n                end",
    "type": "function"
  }, {
    "id": 373,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 374,
    "text": "function CreatewxLuaTypeTable()\r\n    local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = {\"wxLua Type\"},\r\n        [\"object_type\"] = \"wxLua Types\"\r\n    }\r\n\r\n    local lua_types = {\r\n        \"LUA_TNONE\",\r\n        \"LUA_TNIL\",\r\n        \"LUA_TBOOLEAN\",\r\n        \"LUA_TLIGHTUSERDATA\",\r\n        \"LUA_TNUMBER\",\r\n        \"LUA_TSTRING\",\r\n        \"LUA_TTABLE\",\r\n        \"LUA_TFUNCTION\",\r\n        \"LUA_TUSERDATA\",\r\n        \"LUA_TTHREAD\"\r\n    }\r\n\r\n    for i = 1, #lua_types do\r\n        table.insert(t.col_labels, lua_types[i]..\" \"..tostring(wxlua[lua_types[i]]))\r\n    end\r\n\r\n    local wxltype_names = {\r\n        \"WXLUA_TNONE\",\r\n        \"WXLUA_TNIL\",\r\n        \"WXLUA_TBOOLEAN\",\r\n        \"WXLUA_TLIGHTUSERDATA\",\r\n        \"WXLUA_TNUMBER\",\r\n        \"WXLUA_TSTRING\",\r\n        \"WXLUA_TTABLE\",\r\n        \"WXLUA_TFUNCTION\",\r\n        \"WXLUA_TUSERDATA\",\r\n        \"WXLUA_TTHREAD\",\r\n        \"WXLUA_TINTEGER\",\r\n        \"WXLUA_TCFUNCTION\"\r\n    }\r\n\r\n    local tostr = { [1] = \"X\", [0] = \"\", [-1] = \"?\" }\r\n\r\n    for i = 1, #wxltype_names do\r\n        local wxltype = wxlua[wxltype_names[i]]\r\n        local item = { wxltype_names[i]..\" \"..tostring(wxltype) }\r\n        for j = 1, #lua_types do\r\n            local ltype = wxlua[lua_types[j]]\r\n            local ok = wxlua.iswxluatype(ltype, wxltype)\r\n            table.insert(item, tostr[ok])\r\n        end\r\n        table.insert(t, item)\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 375,
    "text": "local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = {\"wxLua Type\"},\r\n        [\"object_type\"] = \"wxLua Types\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 376,
    "text": "local lua_types = {\r\n        \"LUA_TNONE\",\r\n        \"LUA_TNIL\",\r\n        \"LUA_TBOOLEAN\",\r\n        \"LUA_TLIGHTUSERDATA\",\r\n        \"LUA_TNUMBER\",\r\n        \"LUA_TSTRING\",\r\n        \"LUA_TTABLE\",\r\n        \"LUA_TFUNCTION\",\r\n        \"LUA_TUSERDATA\",\r\n        \"LUA_TTHREAD\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 377,
    "text": "for i = 1, #lua_types do\r\n        table.insert(t.col_labels, lua_types[i]..\" \"..tostring(wxlua[lua_types[i]]))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 378,
    "text": "table.insert(t.col_labels, lua_types[i]..\" \"..tostring(wxlua[lua_types[i]]))",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "local wxltype_names = {\r\n        \"WXLUA_TNONE\",\r\n        \"WXLUA_TNIL\",\r\n        \"WXLUA_TBOOLEAN\",\r\n        \"WXLUA_TLIGHTUSERDATA\",\r\n        \"WXLUA_TNUMBER\",\r\n        \"WXLUA_TSTRING\",\r\n        \"WXLUA_TTABLE\",\r\n        \"WXLUA_TFUNCTION\",\r\n        \"WXLUA_TUSERDATA\",\r\n        \"WXLUA_TTHREAD\",\r\n        \"WXLUA_TINTEGER\",\r\n        \"WXLUA_TCFUNCTION\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "local tostr = { [1] = \"X\", [0] = \"\", [-1] = \"?\" }",
    "type": "statement:localassign"
  }, {
    "id": 381,
    "text": "for i = 1, #wxltype_names do\r\n        local wxltype = wxlua[wxltype_names[i]]\r\n        local item = { wxltype_names[i]..\" \"..tostring(wxltype) }\r\n        for j = 1, #lua_types do\r\n            local ltype = wxlua[lua_types[j]]\r\n            local ok = wxlua.iswxluatype(ltype, wxltype)\r\n            table.insert(item, tostr[ok])\r\n        end\r\n        table.insert(t, item)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 382,
    "text": "local wxltype = wxlua[wxltype_names[i]]",
    "type": "statement:localassign"
  }, {
    "id": 383,
    "text": "local item = { wxltype_names[i]..\" \"..tostring(wxltype) }",
    "type": "statement:localassign"
  }, {
    "id": 384,
    "text": "for j = 1, #lua_types do\r\n            local ltype = wxlua[lua_types[j]]\r\n            local ok = wxlua.iswxluatype(ltype, wxltype)\r\n            table.insert(item, tostr[ok])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 385,
    "text": "local ltype = wxlua[lua_types[j]]",
    "type": "statement:localassign"
  }, {
    "id": 386,
    "text": "local ok = wxlua.iswxluatype(ltype, wxltype)",
    "type": "statement:localassign"
  }, {
    "id": 387,
    "text": "table.insert(item, tostr[ok])",
    "type": "statement:functioncall"
  }, {
    "id": 388,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 389,
    "text": "function CreateAllClassesTable()\r\n    local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = {\"Binding\", \"wxLua Class Name (1st line) / wxClassInfo Name (2nd line)\"},\r\n        [\"object_type\"] = \"All wxLua Classes\"\r\n    }\r\n\r\n    local max_cols = 1\r\n\r\n    -- These are classes that wxLua doesn't wrap since they're not necessary\r\n    local unwrappedBaseClasses = {\r\n        [\"wxAnimationBase\"] = 1,\r\n        [\"wxAnimationCtrlBase\"] = 1,\r\n        [\"wxDCBase\"] = 1,\r\n        [\"wxFileDialogBase\"] = 1,\r\n        [\"wxGenericDirDialog\"] = 1,\r\n        [\"wxGenericFileDialog\"] = 1,\r\n        [\"wxGenericImageList\"] = 1,\r\n        [\"wxGenericListCtrl\"] = 1,\r\n        [\"wxGenericTreeCtrl\"] = 1,\r\n        [\"wxPrinterBase\"] = 1,\r\n        [\"wxPrintPreviewBase\"] = 1,\r\n        [\"wxTextCtrlBase\"] = 1,\r\n        [\"wxWindowBase\"] = 1,\r\n\r\n        [\"wxLuaDebuggerBase\"] = 1,\r\n    }\r\n\r\n    -- These are classes that wxLua has, but don't have wxClassInfo\r\n    local wxwidgetsNoClassInfo = {\r\n        [\"wxBookCtrlBaseEvent\"]     = \"wxNotifyEvent\",\r\n        [\"wxControlWithItems\"]      = \"wxControl\",\r\n        [\"wxMirrorDC\"]              = \"wxDC\",\r\n        [\"wxSplashScreenWindow\"]    = \"wxWindow\",\r\n        [\"wxToolBarBase\"]           = \"wxControl\",\r\n    }\r\n\r\n    -- These notes for classes that where the classinfo doesn't match\r\n    -- the classname is the one that wxLua uses, not the one wxWidgets uses\r\n    local classinfoNotes = {\r\n        [\"wxAutoBufferedPaintDC\"]   = \"(Platform dep. baseclass, wxDC is ok)\",\r\n        [\"wxCursor\"]                = \"(Platform dep. baseclass, wxObject is ok)\",\r\n        [\"wxHelpController\"]        = \"(Platform dep. typedef by wxWidgets)\",\r\n        [\"wxLuaDebuggerServer\"]     = \"(Platform dep. typedef by wxLua)\",\r\n        [\"wxMemoryDC\"]              = \"(Platform dep. baseclass, wxDC is ok)\",\r\n        [\"wxPaintDC\"]               = \"(Platform dep. baseclass, wxWindowDC is ok)\",\r\n        [\"wxScreenDC\"]              = \"(Platform dep. baseclass, wxDC is ok)\",\r\n    }\r\n\r\n    local function BaseClassRecursor(baseBindClasses, c_table, c_table_pos)\r\n        if not baseBindClasses then return end\r\n\r\n        local bc_list = baseBindClasses\r\n        local c_table_lens = {}\r\n         \r\n        for bc_i = 1, #bc_list do\r\n            local bc = bc_list[bc_i]\r\n            -- check for mistakes in the bindings\r\n            if (not bc.classInfo) and wx.wxClassInfo.FindClass(bc.name) then\r\n                print(bc.name..\" is missing its wxClassInfo, please report this.\")\r\n            end\r\n\r\n            -- make a new entry and copy the previous ones\r\n            if bc_i > 1 then\r\n                c_table[c_table_pos+bc_i-1] = {}\r\n                for k, v in pairs(c_table[c_table_pos]) do\r\n                    if (tonumber(k) == nil) then\r\n                        c_table[c_table_pos+1][k] = v\r\n                    elseif (k < c_table_lens[c_table_pos]) then\r\n                        -- use \"\" to blank out \r\n                        c_table[c_table_pos+1][k] = v -- \"\"\r\n                    end\r\n                end\r\n                \r\n                c_table[c_table_pos+bc_i-1][1] = c_table[c_table_pos][1]..string.char(string.byte(\"a\")+c_table_pos+bc_i-3)\r\n                c_table[c_table_pos+bc_i-1][2] = c_table[c_table_pos][2]\r\n            end\r\n            table.insert(c_table[c_table_pos+bc_i-1], bc.name)\r\n            \r\n            for i = 1, #c_table do\r\n                c_table_lens[i] = #c_table[i]\r\n            end\r\n            \r\n            BaseClassRecursor(bc.baseBindClasses, c_table, c_table_pos+bc_i-1)\r\n        end\r\n    end\r\n\r\n    for b = 1, #bindingList do\r\n        local binding = bindingList[b]\r\n\r\n        local classTable = binding.GetClassArray\r\n\r\n        for i = 1, #classTable do\r\n            -- this string is to force the wxLua classname and the wxClassInfo names\r\n            -- to be together and the first char is to keep bindings together\r\n            local a = string.format(\"%s %03d\", binding.GetBindingName, i)\r\n\r\n            local c = classTable[i]\r\n            local c_table = {a, [\"color\"] = wx.wxBLUE}\r\n\r\n            -- check for mistakes in the bindings\r\n            if (not c.classInfo) and wx.wxClassInfo.FindClass(c.name) then\r\n                print(c.name..\" is missing its wxClassInfo, please report this.\")\r\n            end\r\n\r\n            c_table = {c_table}\r\n\r\n            -- traverse through the wxLua defined base classes\r\n            BaseClassRecursor({c}, c_table, 1)\r\n\r\n            for j = 1, #c_table do\r\n                if max_cols < #c_table[j] then max_cols = #c_table[j] end\r\n                table.insert(t, c_table[j])\r\n            end\r\n\r\n            -- now do wxWidgets base class info\r\n            if c.classInfo then\r\n                local ci = c.classInfo\r\n                local c_table2 = {a..\"wx\"}\r\n\r\n                while ci do\r\n                    -- we don't bind some classes since we wouldn't need them\r\n                    if unwrappedBaseClasses[ci:GetClassName()] then\r\n                        c_table2[#c_table2] = c_table2[#c_table2]..\"(\"..ci:GetClassName()..\")\"\r\n                    elseif c_table[#c_table2+1] and (wxwidgetsNoClassInfo[c_table[#c_table2+1]] == ci:GetClassName()) then\r\n                        table.insert(c_table2, c_table[#c_table2+1]..\" - No wxClassInfo\")\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                    elseif c_table[#c_table2+1] and classinfoNotes[c_table[#c_table2+1]] then\r\n                        c_table[#c_table2+1] = c_table[#c_table2+1]..classinfoNotes[c_table[#c_table2+1]]\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        c_table2.color = list_colors.purple\r\n                    else\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        if ((c_table[#c_table2] ~= c_table2[#c_table2])) and\r\n                           (c_table2.color == nil) then\r\n                            c_table2.color = wx.wxRED\r\n                        end\r\n                    end\r\n\r\n                    if ci:GetBaseClass2() then print(ci:GetClassName(), \"Has two bases!\") end\r\n                    ci = ci:GetBaseClass1() -- FIXME handle two base classes, maybe?\r\n                end\r\n\r\n                if max_cols < #c_table2 then max_cols = #c_table2 end\r\n                table.insert(t, c_table2)\r\n            end\r\n\r\n        end\r\n    end\r\n\r\n    -- Set the col labels after counting them\r\n    for i = 3, max_cols do\r\n        t.col_labels[i] = \"Base class \"..tostring(i-1)\r\n    end\r\n\r\n    -- Put \"\" strings where there is no base class\r\n    for i = 1, #t do\r\n        for j = 1, max_cols do\r\n            if t[i][j] == nil then t[i][j] = \"\" end\r\n        end\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 390,
    "text": "local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = {\"Binding\", \"wxLua Class Name (1st line) / wxClassInfo Name (2nd line)\"},\r\n        [\"object_type\"] = \"All wxLua Classes\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 391,
    "text": "local max_cols = 1",
    "type": "statement:localassign"
  }, {
    "id": 392,
    "text": "local unwrappedBaseClasses = {\r\n        [\"wxAnimationBase\"] = 1,\r\n        [\"wxAnimationCtrlBase\"] = 1,\r\n        [\"wxDCBase\"] = 1,\r\n        [\"wxFileDialogBase\"] = 1,\r\n        [\"wxGenericDirDialog\"] = 1,\r\n        [\"wxGenericFileDialog\"] = 1,\r\n        [\"wxGenericImageList\"] = 1,\r\n        [\"wxGenericListCtrl\"] = 1,\r\n        [\"wxGenericTreeCtrl\"] = 1,\r\n        [\"wxPrinterBase\"] = 1,\r\n        [\"wxPrintPreviewBase\"] = 1,\r\n        [\"wxTextCtrlBase\"] = 1,\r\n        [\"wxWindowBase\"] = 1,\r\n\r\n        [\"wxLuaDebuggerBase\"] = 1,\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 393,
    "text": "local wxwidgetsNoClassInfo = {\r\n        [\"wxBookCtrlBaseEvent\"]     = \"wxNotifyEvent\",\r\n        [\"wxControlWithItems\"]      = \"wxControl\",\r\n        [\"wxMirrorDC\"]              = \"wxDC\",\r\n        [\"wxSplashScreenWindow\"]    = \"wxWindow\",\r\n        [\"wxToolBarBase\"]           = \"wxControl\",\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 394,
    "text": "local classinfoNotes = {\r\n        [\"wxAutoBufferedPaintDC\"]   = \"(Platform dep. baseclass, wxDC is ok)\",\r\n        [\"wxCursor\"]                = \"(Platform dep. baseclass, wxObject is ok)\",\r\n        [\"wxHelpController\"]        = \"(Platform dep. typedef by wxWidgets)\",\r\n        [\"wxLuaDebuggerServer\"]     = \"(Platform dep. typedef by wxLua)\",\r\n        [\"wxMemoryDC\"]              = \"(Platform dep. baseclass, wxDC is ok)\",\r\n        [\"wxPaintDC\"]               = \"(Platform dep. baseclass, wxWindowDC is ok)\",\r\n        [\"wxScreenDC\"]              = \"(Platform dep. baseclass, wxDC is ok)\",\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 395,
    "text": "local function BaseClassRecursor(baseBindClasses, c_table, c_table_pos)\r\n        if not baseBindClasses then return end\r\n\r\n        local bc_list = baseBindClasses\r\n        local c_table_lens = {}\r\n         \r\n        for bc_i = 1, #bc_list do\r\n            local bc = bc_list[bc_i]\r\n            -- check for mistakes in the bindings\r\n            if (not bc.classInfo) and wx.wxClassInfo.FindClass(bc.name) then\r\n                print(bc.name..\" is missing its wxClassInfo, please report this.\")\r\n            end\r\n\r\n            -- make a new entry and copy the previous ones\r\n            if bc_i > 1 then\r\n                c_table[c_table_pos+bc_i-1] = {}\r\n                for k, v in pairs(c_table[c_table_pos]) do\r\n                    if (tonumber(k) == nil) then\r\n                        c_table[c_table_pos+1][k] = v\r\n                    elseif (k < c_table_lens[c_table_pos]) then\r\n                        -- use \"\" to blank out \r\n                        c_table[c_table_pos+1][k] = v -- \"\"\r\n                    end\r\n                end\r\n                \r\n                c_table[c_table_pos+bc_i-1][1] = c_table[c_table_pos][1]..string.char(string.byte(\"a\")+c_table_pos+bc_i-3)\r\n                c_table[c_table_pos+bc_i-1][2] = c_table[c_table_pos][2]\r\n            end\r\n            table.insert(c_table[c_table_pos+bc_i-1], bc.name)\r\n            \r\n            for i = 1, #c_table do\r\n                c_table_lens[i] = #c_table[i]\r\n            end\r\n            \r\n            BaseClassRecursor(bc.baseBindClasses, c_table, c_table_pos+bc_i-1)\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 396,
    "text": "if not baseBindClasses then return end",
    "type": "statement:if"
  }, {
    "id": 397,
    "text": "local bc_list = baseBindClasses",
    "type": "statement:localassign"
  }, {
    "id": 398,
    "text": "local c_table_lens = {}",
    "type": "statement:localassign"
  }, {
    "id": 399,
    "text": "for bc_i = 1, #bc_list do\r\n            local bc = bc_list[bc_i]\r\n            -- check for mistakes in the bindings\r\n            if (not bc.classInfo) and wx.wxClassInfo.FindClass(bc.name) then\r\n                print(bc.name..\" is missing its wxClassInfo, please report this.\")\r\n            end\r\n\r\n            -- make a new entry and copy the previous ones\r\n            if bc_i > 1 then\r\n                c_table[c_table_pos+bc_i-1] = {}\r\n                for k, v in pairs(c_table[c_table_pos]) do\r\n                    if (tonumber(k) == nil) then\r\n                        c_table[c_table_pos+1][k] = v\r\n                    elseif (k < c_table_lens[c_table_pos]) then\r\n                        -- use \"\" to blank out \r\n                        c_table[c_table_pos+1][k] = v -- \"\"\r\n                    end\r\n                end\r\n                \r\n                c_table[c_table_pos+bc_i-1][1] = c_table[c_table_pos][1]..string.char(string.byte(\"a\")+c_table_pos+bc_i-3)\r\n                c_table[c_table_pos+bc_i-1][2] = c_table[c_table_pos][2]\r\n            end\r\n            table.insert(c_table[c_table_pos+bc_i-1], bc.name)\r\n            \r\n            for i = 1, #c_table do\r\n                c_table_lens[i] = #c_table[i]\r\n            end\r\n            \r\n            BaseClassRecursor(bc.baseBindClasses, c_table, c_table_pos+bc_i-1)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 400,
    "text": "local bc = bc_list[bc_i]",
    "type": "statement:localassign"
  }, {
    "id": 401,
    "text": "if (not bc.classInfo) and wx.wxClassInfo.FindClass(bc.name) then\r\n                print(bc.name..\" is missing its wxClassInfo, please report this.\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 402,
    "text": "print(bc.name..\" is missing its wxClassInfo, please report this.\")",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "if bc_i > 1 then\r\n                c_table[c_table_pos+bc_i-1] = {}\r\n                for k, v in pairs(c_table[c_table_pos]) do\r\n                    if (tonumber(k) == nil) then\r\n                        c_table[c_table_pos+1][k] = v\r\n                    elseif (k < c_table_lens[c_table_pos]) then\r\n                        -- use \"\" to blank out \r\n                        c_table[c_table_pos+1][k] = v -- \"\"\r\n                    end\r\n                end\r\n                \r\n                c_table[c_table_pos+bc_i-1][1] = c_table[c_table_pos][1]..string.char(string.byte(\"a\")+c_table_pos+bc_i-3)\r\n                c_table[c_table_pos+bc_i-1][2] = c_table[c_table_pos][2]\r\n            end",
    "type": "statement:if"
  }, {
    "id": 404,
    "text": "c_table[c_table_pos+bc_i-1] = {}",
    "type": "statement:assign"
  }, {
    "id": 405,
    "text": "for k, v in pairs(c_table[c_table_pos]) do\r\n                    if (tonumber(k) == nil) then\r\n                        c_table[c_table_pos+1][k] = v\r\n                    elseif (k < c_table_lens[c_table_pos]) then\r\n                        -- use \"\" to blank out \r\n                        c_table[c_table_pos+1][k] = v -- \"\"\r\n                    end\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 406,
    "text": "if (tonumber(k) == nil) then\r\n                        c_table[c_table_pos+1][k] = v\r\n                    elseif (k < c_table_lens[c_table_pos]) then\r\n                        -- use \"\" to blank out \r\n                        c_table[c_table_pos+1][k] = v -- \"\"\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 407,
    "text": "c_table[c_table_pos+1][k] = v",
    "type": "statement:assign"
  }, {
    "id": 408,
    "text": "c_table[c_table_pos+bc_i-1][1] = c_table[c_table_pos][1]..string.char(string.byte(\"a\")+c_table_pos+bc_i-3)",
    "type": "statement:assign"
  }, {
    "id": 409,
    "text": "c_table[c_table_pos+bc_i-1][2] = c_table[c_table_pos][2]",
    "type": "statement:assign"
  }, {
    "id": 410,
    "text": "table.insert(c_table[c_table_pos+bc_i-1], bc.name)",
    "type": "statement:functioncall"
  }, {
    "id": 411,
    "text": "for i = 1, #c_table do\r\n                c_table_lens[i] = #c_table[i]\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 412,
    "text": "c_table_lens[i] = #c_table[i]",
    "type": "statement:assign"
  }, {
    "id": 413,
    "text": "BaseClassRecursor(bc.baseBindClasses, c_table, c_table_pos+bc_i-1)",
    "type": "statement:functioncall"
  }, {
    "id": 414,
    "text": "for b = 1, #bindingList do\r\n        local binding = bindingList[b]\r\n\r\n        local classTable = binding.GetClassArray\r\n\r\n        for i = 1, #classTable do\r\n            -- this string is to force the wxLua classname and the wxClassInfo names\r\n            -- to be together and the first char is to keep bindings together\r\n            local a = string.format(\"%s %03d\", binding.GetBindingName, i)\r\n\r\n            local c = classTable[i]\r\n            local c_table = {a, [\"color\"] = wx.wxBLUE}\r\n\r\n            -- check for mistakes in the bindings\r\n            if (not c.classInfo) and wx.wxClassInfo.FindClass(c.name) then\r\n                print(c.name..\" is missing its wxClassInfo, please report this.\")\r\n            end\r\n\r\n            c_table = {c_table}\r\n\r\n            -- traverse through the wxLua defined base classes\r\n            BaseClassRecursor({c}, c_table, 1)\r\n\r\n            for j = 1, #c_table do\r\n                if max_cols < #c_table[j] then max_cols = #c_table[j] end\r\n                table.insert(t, c_table[j])\r\n            end\r\n\r\n            -- now do wxWidgets base class info\r\n            if c.classInfo then\r\n                local ci = c.classInfo\r\n                local c_table2 = {a..\"wx\"}\r\n\r\n                while ci do\r\n                    -- we don't bind some classes since we wouldn't need them\r\n                    if unwrappedBaseClasses[ci:GetClassName()] then\r\n                        c_table2[#c_table2] = c_table2[#c_table2]..\"(\"..ci:GetClassName()..\")\"\r\n                    elseif c_table[#c_table2+1] and (wxwidgetsNoClassInfo[c_table[#c_table2+1]] == ci:GetClassName()) then\r\n                        table.insert(c_table2, c_table[#c_table2+1]..\" - No wxClassInfo\")\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                    elseif c_table[#c_table2+1] and classinfoNotes[c_table[#c_table2+1]] then\r\n                        c_table[#c_table2+1] = c_table[#c_table2+1]..classinfoNotes[c_table[#c_table2+1]]\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        c_table2.color = list_colors.purple\r\n                    else\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        if ((c_table[#c_table2] ~= c_table2[#c_table2])) and\r\n                           (c_table2.color == nil) then\r\n                            c_table2.color = wx.wxRED\r\n                        end\r\n                    end\r\n\r\n                    if ci:GetBaseClass2() then print(ci:GetClassName(), \"Has two bases!\") end\r\n                    ci = ci:GetBaseClass1() -- FIXME handle two base classes, maybe?\r\n                end\r\n\r\n                if max_cols < #c_table2 then max_cols = #c_table2 end\r\n                table.insert(t, c_table2)\r\n            end\r\n\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 415,
    "text": "local binding = bindingList[b]",
    "type": "statement:localassign"
  }, {
    "id": 416,
    "text": "local classTable = binding.GetClassArray",
    "type": "statement:localassign"
  }, {
    "id": 417,
    "text": "for i = 1, #classTable do\r\n            -- this string is to force the wxLua classname and the wxClassInfo names\r\n            -- to be together and the first char is to keep bindings together\r\n            local a = string.format(\"%s %03d\", binding.GetBindingName, i)\r\n\r\n            local c = classTable[i]\r\n            local c_table = {a, [\"color\"] = wx.wxBLUE}\r\n\r\n            -- check for mistakes in the bindings\r\n            if (not c.classInfo) and wx.wxClassInfo.FindClass(c.name) then\r\n                print(c.name..\" is missing its wxClassInfo, please report this.\")\r\n            end\r\n\r\n            c_table = {c_table}\r\n\r\n            -- traverse through the wxLua defined base classes\r\n            BaseClassRecursor({c}, c_table, 1)\r\n\r\n            for j = 1, #c_table do\r\n                if max_cols < #c_table[j] then max_cols = #c_table[j] end\r\n                table.insert(t, c_table[j])\r\n            end\r\n\r\n            -- now do wxWidgets base class info\r\n            if c.classInfo then\r\n                local ci = c.classInfo\r\n                local c_table2 = {a..\"wx\"}\r\n\r\n                while ci do\r\n                    -- we don't bind some classes since we wouldn't need them\r\n                    if unwrappedBaseClasses[ci:GetClassName()] then\r\n                        c_table2[#c_table2] = c_table2[#c_table2]..\"(\"..ci:GetClassName()..\")\"\r\n                    elseif c_table[#c_table2+1] and (wxwidgetsNoClassInfo[c_table[#c_table2+1]] == ci:GetClassName()) then\r\n                        table.insert(c_table2, c_table[#c_table2+1]..\" - No wxClassInfo\")\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                    elseif c_table[#c_table2+1] and classinfoNotes[c_table[#c_table2+1]] then\r\n                        c_table[#c_table2+1] = c_table[#c_table2+1]..classinfoNotes[c_table[#c_table2+1]]\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        c_table2.color = list_colors.purple\r\n                    else\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        if ((c_table[#c_table2] ~= c_table2[#c_table2])) and\r\n                           (c_table2.color == nil) then\r\n                            c_table2.color = wx.wxRED\r\n                        end\r\n                    end\r\n\r\n                    if ci:GetBaseClass2() then print(ci:GetClassName(), \"Has two bases!\") end\r\n                    ci = ci:GetBaseClass1() -- FIXME handle two base classes, maybe?\r\n                end\r\n\r\n                if max_cols < #c_table2 then max_cols = #c_table2 end\r\n                table.insert(t, c_table2)\r\n            end\r\n\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 418,
    "text": "local a = string.format(\"%s %03d\", binding.GetBindingName, i)",
    "type": "statement:localassign"
  }, {
    "id": 419,
    "text": "local c = classTable[i]",
    "type": "statement:localassign"
  }, {
    "id": 420,
    "text": "local c_table = {a, [\"color\"] = wx.wxBLUE}",
    "type": "statement:localassign"
  }, {
    "id": 421,
    "text": "if (not c.classInfo) and wx.wxClassInfo.FindClass(c.name) then\r\n                print(c.name..\" is missing its wxClassInfo, please report this.\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 422,
    "text": "print(c.name..\" is missing its wxClassInfo, please report this.\")",
    "type": "statement:functioncall"
  }, {
    "id": 423,
    "text": "c_table = {c_table}",
    "type": "statement:assign"
  }, {
    "id": 424,
    "text": "BaseClassRecursor({c}, c_table, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 425,
    "text": "for j = 1, #c_table do\r\n                if max_cols < #c_table[j] then max_cols = #c_table[j] end\r\n                table.insert(t, c_table[j])\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 426,
    "text": "if max_cols < #c_table[j] then max_cols = #c_table[j] end",
    "type": "statement:if"
  }, {
    "id": 427,
    "text": "max_cols = #c_table[j]",
    "type": "statement:assign"
  }, {
    "id": 428,
    "text": "table.insert(t, c_table[j])",
    "type": "statement:functioncall"
  }, {
    "id": 429,
    "text": "if c.classInfo then\r\n                local ci = c.classInfo\r\n                local c_table2 = {a..\"wx\"}\r\n\r\n                while ci do\r\n                    -- we don't bind some classes since we wouldn't need them\r\n                    if unwrappedBaseClasses[ci:GetClassName()] then\r\n                        c_table2[#c_table2] = c_table2[#c_table2]..\"(\"..ci:GetClassName()..\")\"\r\n                    elseif c_table[#c_table2+1] and (wxwidgetsNoClassInfo[c_table[#c_table2+1]] == ci:GetClassName()) then\r\n                        table.insert(c_table2, c_table[#c_table2+1]..\" - No wxClassInfo\")\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                    elseif c_table[#c_table2+1] and classinfoNotes[c_table[#c_table2+1]] then\r\n                        c_table[#c_table2+1] = c_table[#c_table2+1]..classinfoNotes[c_table[#c_table2+1]]\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        c_table2.color = list_colors.purple\r\n                    else\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        if ((c_table[#c_table2] ~= c_table2[#c_table2])) and\r\n                           (c_table2.color == nil) then\r\n                            c_table2.color = wx.wxRED\r\n                        end\r\n                    end\r\n\r\n                    if ci:GetBaseClass2() then print(ci:GetClassName(), \"Has two bases!\") end\r\n                    ci = ci:GetBaseClass1() -- FIXME handle two base classes, maybe?\r\n                end\r\n\r\n                if max_cols < #c_table2 then max_cols = #c_table2 end\r\n                table.insert(t, c_table2)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 430,
    "text": "local ci = c.classInfo",
    "type": "statement:localassign"
  }, {
    "id": 431,
    "text": "local c_table2 = {a..\"wx\"}",
    "type": "statement:localassign"
  }, {
    "id": 432,
    "text": "while ci do\r\n                    -- we don't bind some classes since we wouldn't need them\r\n                    if unwrappedBaseClasses[ci:GetClassName()] then\r\n                        c_table2[#c_table2] = c_table2[#c_table2]..\"(\"..ci:GetClassName()..\")\"\r\n                    elseif c_table[#c_table2+1] and (wxwidgetsNoClassInfo[c_table[#c_table2+1]] == ci:GetClassName()) then\r\n                        table.insert(c_table2, c_table[#c_table2+1]..\" - No wxClassInfo\")\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                    elseif c_table[#c_table2+1] and classinfoNotes[c_table[#c_table2+1]] then\r\n                        c_table[#c_table2+1] = c_table[#c_table2+1]..classinfoNotes[c_table[#c_table2+1]]\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        c_table2.color = list_colors.purple\r\n                    else\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        if ((c_table[#c_table2] ~= c_table2[#c_table2])) and\r\n                           (c_table2.color == nil) then\r\n                            c_table2.color = wx.wxRED\r\n                        end\r\n                    end\r\n\r\n                    if ci:GetBaseClass2() then print(ci:GetClassName(), \"Has two bases!\") end\r\n                    ci = ci:GetBaseClass1() -- FIXME handle two base classes, maybe?\r\n                end",
    "type": "statement:while"
  }, {
    "id": 433,
    "text": "if unwrappedBaseClasses[ci:GetClassName()] then\r\n                        c_table2[#c_table2] = c_table2[#c_table2]..\"(\"..ci:GetClassName()..\")\"\r\n                    elseif c_table[#c_table2+1] and (wxwidgetsNoClassInfo[c_table[#c_table2+1]] == ci:GetClassName()) then\r\n                        table.insert(c_table2, c_table[#c_table2+1]..\" - No wxClassInfo\")\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                    elseif c_table[#c_table2+1] and classinfoNotes[c_table[#c_table2+1]] then\r\n                        c_table[#c_table2+1] = c_table[#c_table2+1]..classinfoNotes[c_table[#c_table2+1]]\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        c_table2.color = list_colors.purple\r\n                    else\r\n                        table.insert(c_table2, ci:GetClassName())\r\n                        if ((c_table[#c_table2] ~= c_table2[#c_table2])) and\r\n                           (c_table2.color == nil) then\r\n                            c_table2.color = wx.wxRED\r\n                        end\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 434,
    "text": "c_table2[#c_table2] = c_table2[#c_table2]..\"(\"..ci:GetClassName()..\")\"",
    "type": "statement:assign"
  }, {
    "id": 435,
    "text": "table.insert(c_table2, c_table[#c_table2+1]..\" - No wxClassInfo\")",
    "type": "statement:functioncall"
  }, {
    "id": 436,
    "text": "table.insert(c_table2, ci:GetClassName())",
    "type": "statement:functioncall"
  }, {
    "id": 437,
    "text": "c_table[#c_table2+1] = c_table[#c_table2+1]..classinfoNotes[c_table[#c_table2+1]]",
    "type": "statement:assign"
  }, {
    "id": 438,
    "text": "c_table2.color = list_colors.purple",
    "type": "statement:assign"
  }, {
    "id": 439,
    "text": "if ((c_table[#c_table2] ~= c_table2[#c_table2])) and\r\n                           (c_table2.color == nil) then\r\n                            c_table2.color = wx.wxRED\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 440,
    "text": "c_table2.color = wx.wxRED",
    "type": "statement:assign"
  }, {
    "id": 441,
    "text": "if ci:GetBaseClass2() then print(ci:GetClassName(), \"Has two bases!\") end",
    "type": "statement:if"
  }, {
    "id": 442,
    "text": "print(ci:GetClassName(), \"Has two bases!\")",
    "type": "statement:functioncall"
  }, {
    "id": 443,
    "text": "ci = ci:GetBaseClass1()",
    "type": "statement:assign"
  }, {
    "id": 444,
    "text": "if max_cols < #c_table2 then max_cols = #c_table2 end",
    "type": "statement:if"
  }, {
    "id": 445,
    "text": "max_cols = #c_table2",
    "type": "statement:assign"
  }, {
    "id": 446,
    "text": "table.insert(t, c_table2)",
    "type": "statement:functioncall"
  }, {
    "id": 447,
    "text": "for i = 3, max_cols do\r\n        t.col_labels[i] = \"Base class \"..tostring(i-1)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 448,
    "text": "t.col_labels[i] = \"Base class \"..tostring(i-1)",
    "type": "statement:assign"
  }, {
    "id": 449,
    "text": "for i = 1, #t do\r\n        for j = 1, max_cols do\r\n            if t[i][j] == nil then t[i][j] = \"\" end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 450,
    "text": "for j = 1, max_cols do\r\n            if t[i][j] == nil then t[i][j] = \"\" end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 451,
    "text": "if t[i][j] == nil then t[i][j] = \"\" end",
    "type": "statement:if"
  }, {
    "id": 452,
    "text": "t[i][j] = \"\"",
    "type": "statement:assign"
  }, {
    "id": 453,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 454,
    "text": "local function BaseClassRecursor(baseBindClasses, c_table, c_table_pos)\r\n        if not baseBindClasses then return end\r\n\r\n        local bc_list = baseBindClasses\r\n        local c_table_lens = {}\r\n         \r\n        for bc_i = 1, #bc_list do\r\n            local bc = bc_list[bc_i]\r\n            -- check for mistakes in the bindings\r\n            if (not bc.classInfo) and wx.wxClassInfo.FindClass(bc.name) then\r\n                print(bc.name..\" is missing its wxClassInfo, please report this.\")\r\n            end\r\n\r\n            -- make a new entry and copy the previous ones\r\n            if bc_i > 1 then\r\n                c_table[c_table_pos+bc_i-1] = {}\r\n                for k, v in pairs(c_table[c_table_pos]) do\r\n                    if (tonumber(k) == nil) then\r\n                        c_table[c_table_pos+1][k] = v\r\n                    elseif (k < c_table_lens[c_table_pos]) then\r\n                        -- use \"\" to blank out \r\n                        c_table[c_table_pos+1][k] = v -- \"\"\r\n                    end\r\n                end\r\n                \r\n                c_table[c_table_pos+bc_i-1][1] = c_table[c_table_pos][1]..string.char(string.byte(\"a\")+c_table_pos+bc_i-3)\r\n                c_table[c_table_pos+bc_i-1][2] = c_table[c_table_pos][2]\r\n            end\r\n            table.insert(c_table[c_table_pos+bc_i-1], bc.name)\r\n            \r\n            for i = 1, #c_table do\r\n                c_table_lens[i] = #c_table[i]\r\n            end\r\n            \r\n            BaseClassRecursor(bc.baseBindClasses, c_table, c_table_pos+bc_i-1)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 455,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 456,
    "text": "function CreatewxClassInfoTable()\r\n\r\n    -- gather up all of wxLua wrapped classes\r\n    local wxluaClasses = {}\r\n\r\n    for b = 1, #bindingList do\r\n        local binding = bindingList[b]\r\n\r\n        local classTable = binding.GetClassArray\r\n\r\n        for i = 1, #classTable do\r\n            wxluaClasses[classTable[i].name] = true\r\n        end\r\n    end\r\n\r\n    -- create a table of tables of cols of the classname and baseclass names\r\n    -- if there is a baseclass2 then the returned table will have > 1 tables\r\n    local function GetBases(ci)\r\n        local c = ci\r\n        local t = {{}}\r\n\r\n        while c do\r\n            table.insert(t[1], c:GetClassName())\r\n\r\n            if c:GetBaseClass2() then\r\n                --print(c:GetClassName(), \"Has Base2\", c:GetBaseClass2())\r\n\r\n                local baseTable2 = GetBases(c:GetBaseClass2())\r\n                for i = 1, #baseTable2 do\r\n                    -- insert back in the original info\r\n                    for j = 1, #t do\r\n                        table.insert(baseTable2[i], j, t[1][j])\r\n                    end\r\n                    baseTable2[i][1] = baseTable2[i][1]..\" (Multiple base classes \"..tostring(i)..\")\" -- count # of base2s\r\n                    table.insert(t, baseTable2[i])\r\n                end\r\n            end\r\n\r\n            c = c:GetBaseClass1()\r\n        end\r\n\r\n        return t\r\n    end\r\n\r\n    local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = {\"wxClassInfo::GetClassName() (wxLua wraps blue)\"},\r\n        [\"object_type\"] = \"All wxWidgets wxClassInfo\"\r\n    }\r\n\r\n    local ci = wx.wxClassInfo.GetFirst()\r\n    local max_cols = 1\r\n\r\n    while ci do\r\n        local baseTable = GetBases(ci)\r\n        for i = 1, #baseTable do\r\n            if wxluaClasses[baseTable[i][1]] then\r\n                baseTable[i].color = wx.wxBLUE\r\n            end\r\n\r\n            if max_cols < #baseTable[i] then max_cols = #baseTable[i] end\r\n            table.insert(t, baseTable[i])\r\n        end\r\n\r\n        ci = ci:GetNext()\r\n    end\r\n\r\n    -- Fill remainder of items with \"\" string\r\n    for i = 1, #t do\r\n        for j = #t[i], max_cols do\r\n            table.insert(t[i], \"\")\r\n        end\r\n    end\r\n\r\n    -- Create col labels\r\n    for i = 2, max_cols do\r\n        table.insert(t.col_labels, \"Base Class \"..tostring(i-1))\r\n    end\r\n\r\n    table.sort(t, function(t1, t2) return t1[1] < t2[1] end)\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 457,
    "text": "local wxluaClasses = {}",
    "type": "statement:localassign"
  }, {
    "id": 458,
    "text": "for b = 1, #bindingList do\r\n        local binding = bindingList[b]\r\n\r\n        local classTable = binding.GetClassArray\r\n\r\n        for i = 1, #classTable do\r\n            wxluaClasses[classTable[i].name] = true\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 459,
    "text": "for i = 1, #classTable do\r\n            wxluaClasses[classTable[i].name] = true\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 460,
    "text": "wxluaClasses[classTable[i].name] = true",
    "type": "statement:assign"
  }, {
    "id": 461,
    "text": "local function GetBases(ci)\r\n        local c = ci\r\n        local t = {{}}\r\n\r\n        while c do\r\n            table.insert(t[1], c:GetClassName())\r\n\r\n            if c:GetBaseClass2() then\r\n                --print(c:GetClassName(), \"Has Base2\", c:GetBaseClass2())\r\n\r\n                local baseTable2 = GetBases(c:GetBaseClass2())\r\n                for i = 1, #baseTable2 do\r\n                    -- insert back in the original info\r\n                    for j = 1, #t do\r\n                        table.insert(baseTable2[i], j, t[1][j])\r\n                    end\r\n                    baseTable2[i][1] = baseTable2[i][1]..\" (Multiple base classes \"..tostring(i)..\")\" -- count # of base2s\r\n                    table.insert(t, baseTable2[i])\r\n                end\r\n            end\r\n\r\n            c = c:GetBaseClass1()\r\n        end\r\n\r\n        return t\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 462,
    "text": "local c = ci",
    "type": "statement:localassign"
  }, {
    "id": 463,
    "text": "local t = {{}}",
    "type": "statement:localassign"
  }, {
    "id": 464,
    "text": "while c do\r\n            table.insert(t[1], c:GetClassName())\r\n\r\n            if c:GetBaseClass2() then\r\n                --print(c:GetClassName(), \"Has Base2\", c:GetBaseClass2())\r\n\r\n                local baseTable2 = GetBases(c:GetBaseClass2())\r\n                for i = 1, #baseTable2 do\r\n                    -- insert back in the original info\r\n                    for j = 1, #t do\r\n                        table.insert(baseTable2[i], j, t[1][j])\r\n                    end\r\n                    baseTable2[i][1] = baseTable2[i][1]..\" (Multiple base classes \"..tostring(i)..\")\" -- count # of base2s\r\n                    table.insert(t, baseTable2[i])\r\n                end\r\n            end\r\n\r\n            c = c:GetBaseClass1()\r\n        end",
    "type": "statement:while"
  }, {
    "id": 465,
    "text": "table.insert(t[1], c:GetClassName())",
    "type": "statement:functioncall"
  }, {
    "id": 466,
    "text": "if c:GetBaseClass2() then\r\n                --print(c:GetClassName(), \"Has Base2\", c:GetBaseClass2())\r\n\r\n                local baseTable2 = GetBases(c:GetBaseClass2())\r\n                for i = 1, #baseTable2 do\r\n                    -- insert back in the original info\r\n                    for j = 1, #t do\r\n                        table.insert(baseTable2[i], j, t[1][j])\r\n                    end\r\n                    baseTable2[i][1] = baseTable2[i][1]..\" (Multiple base classes \"..tostring(i)..\")\" -- count # of base2s\r\n                    table.insert(t, baseTable2[i])\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 467,
    "text": "local baseTable2 = GetBases(c:GetBaseClass2())",
    "type": "statement:localassign"
  }, {
    "id": 468,
    "text": "for i = 1, #baseTable2 do\r\n                    -- insert back in the original info\r\n                    for j = 1, #t do\r\n                        table.insert(baseTable2[i], j, t[1][j])\r\n                    end\r\n                    baseTable2[i][1] = baseTable2[i][1]..\" (Multiple base classes \"..tostring(i)..\")\" -- count # of base2s\r\n                    table.insert(t, baseTable2[i])\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 469,
    "text": "for j = 1, #t do\r\n                        table.insert(baseTable2[i], j, t[1][j])\r\n                    end",
    "type": "statement:numericfor"
  }, {
    "id": 470,
    "text": "table.insert(baseTable2[i], j, t[1][j])",
    "type": "statement:functioncall"
  }, {
    "id": 471,
    "text": "baseTable2[i][1] = baseTable2[i][1]..\" (Multiple base classes \"..tostring(i)..\")\"",
    "type": "statement:assign"
  }, {
    "id": 472,
    "text": "table.insert(t, baseTable2[i])",
    "type": "statement:functioncall"
  }, {
    "id": 473,
    "text": "c = c:GetBaseClass1()",
    "type": "statement:assign"
  }, {
    "id": 474,
    "text": "local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = {\"wxClassInfo::GetClassName() (wxLua wraps blue)\"},\r\n        [\"object_type\"] = \"All wxWidgets wxClassInfo\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 475,
    "text": "local ci = wx.wxClassInfo.GetFirst()",
    "type": "statement:localassign"
  }, {
    "id": 476,
    "text": "while ci do\r\n        local baseTable = GetBases(ci)\r\n        for i = 1, #baseTable do\r\n            if wxluaClasses[baseTable[i][1]] then\r\n                baseTable[i].color = wx.wxBLUE\r\n            end\r\n\r\n            if max_cols < #baseTable[i] then max_cols = #baseTable[i] end\r\n            table.insert(t, baseTable[i])\r\n        end\r\n\r\n        ci = ci:GetNext()\r\n    end",
    "type": "statement:while"
  }, {
    "id": 477,
    "text": "local baseTable = GetBases(ci)",
    "type": "statement:localassign"
  }, {
    "id": 478,
    "text": "for i = 1, #baseTable do\r\n            if wxluaClasses[baseTable[i][1]] then\r\n                baseTable[i].color = wx.wxBLUE\r\n            end\r\n\r\n            if max_cols < #baseTable[i] then max_cols = #baseTable[i] end\r\n            table.insert(t, baseTable[i])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 479,
    "text": "if wxluaClasses[baseTable[i][1]] then\r\n                baseTable[i].color = wx.wxBLUE\r\n            end",
    "type": "statement:if"
  }, {
    "id": 480,
    "text": "baseTable[i].color = wx.wxBLUE",
    "type": "statement:assign"
  }, {
    "id": 481,
    "text": "if max_cols < #baseTable[i] then max_cols = #baseTable[i] end",
    "type": "statement:if"
  }, {
    "id": 482,
    "text": "max_cols = #baseTable[i]",
    "type": "statement:assign"
  }, {
    "id": 483,
    "text": "table.insert(t, baseTable[i])",
    "type": "statement:functioncall"
  }, {
    "id": 484,
    "text": "ci = ci:GetNext()",
    "type": "statement:assign"
  }, {
    "id": 485,
    "text": "for i = 1, #t do\r\n        for j = #t[i], max_cols do\r\n            table.insert(t[i], \"\")\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 486,
    "text": "for j = #t[i], max_cols do\r\n            table.insert(t[i], \"\")\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 487,
    "text": "table.insert(t[i], \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 488,
    "text": "for i = 2, max_cols do\r\n        table.insert(t.col_labels, \"Base Class \"..tostring(i-1))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 489,
    "text": "table.insert(t.col_labels, \"Base Class \"..tostring(i-1))",
    "type": "statement:functioncall"
  }, {
    "id": 490,
    "text": "table.sort(t, function(t1, t2) return t1[1] < t2[1] end)",
    "type": "statement:functioncall"
  }, {
    "id": 491,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 492,
    "text": "local function GetBases(ci)\r\n        local c = ci\r\n        local t = {{}}\r\n\r\n        while c do\r\n            table.insert(t[1], c:GetClassName())\r\n\r\n            if c:GetBaseClass2() then\r\n                --print(c:GetClassName(), \"Has Base2\", c:GetBaseClass2())\r\n\r\n                local baseTable2 = GetBases(c:GetBaseClass2())\r\n                for i = 1, #baseTable2 do\r\n                    -- insert back in the original info\r\n                    for j = 1, #t do\r\n                        table.insert(baseTable2[i], j, t[1][j])\r\n                    end\r\n                    baseTable2[i][1] = baseTable2[i][1]..\" (Multiple base classes \"..tostring(i)..\")\" -- count # of base2s\r\n                    table.insert(t, baseTable2[i])\r\n                end\r\n            end\r\n\r\n            c = c:GetBaseClass1()\r\n        end\r\n\r\n        return t\r\n    end",
    "type": "function"
  }, {
    "id": 493,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 494,
    "text": "function CreateOverloadedBasecassFunctionsTable()\r\n    local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = {\"Function Name\", \"Class Name\", \"Args\"},\r\n        [\"object_type\"] = \"Overloaded Baseclass Functions\"\r\n    }\r\n\r\n    local max_cols = 2\r\n\r\n    for b = 1, #bindingList do\r\n        local binding = bindingList[b]\r\n\r\n        local classTable = binding.GetClassArray\r\n\r\n        for i = 1, #classTable do\r\n            local wxluamethods = classTable[i].wxluamethods\r\n\r\n            -- some classes don't have methods, wxBestHelpController for example\r\n            for j = 1, classTable[i].wxluamethods_n do\r\n                local m = wxluamethods[j]\r\n                local m_table = {m.name}\r\n\r\n                while m do\r\n                    local wxluacfuncs = m.wxluacfuncs\r\n                    local s = \"\"\r\n                    for f = 1, m.wxluacfuncs_n do\r\n                        s = s..\"(\"..CreateArgTagsString(wxluacfuncs[f].argtypes, wxluacfuncs[f].method_type)..\") \"\r\n                    end\r\n\r\n                    table.insert(m_table, m.class_name)\r\n                    table.insert(m_table, s)\r\n                    m = m.basemethod\r\n                end\r\n\r\n                if #m_table > 3 then\r\n                    if max_cols < #m_table then max_cols = #m_table end\r\n                    table.insert(t, m_table)\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    -- Set the col labels after counting them\r\n    for i = 4, max_cols, 2 do\r\n        t.col_labels[i] = \"Base Class\"\r\n        t.col_labels[i+1] = \"Args\"\r\n    end\r\n\r\n    -- Put strings where there is no base class\r\n    for i = 1, #t do\r\n        for j = 1, max_cols do\r\n            if t[i][j] == nil then t[i][j] = \"\" end\r\n        end\r\n    end\r\n\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 495,
    "text": "local t = {\r\n        {\"..\", [\"icon\"] = list_images.folder},\r\n        [\"col_labels\"] = {\"Function Name\", \"Class Name\", \"Args\"},\r\n        [\"object_type\"] = \"Overloaded Baseclass Functions\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 496,
    "text": "local max_cols = 2",
    "type": "statement:localassign"
  }, {
    "id": 497,
    "text": "for b = 1, #bindingList do\r\n        local binding = bindingList[b]\r\n\r\n        local classTable = binding.GetClassArray\r\n\r\n        for i = 1, #classTable do\r\n            local wxluamethods = classTable[i].wxluamethods\r\n\r\n            -- some classes don't have methods, wxBestHelpController for example\r\n            for j = 1, classTable[i].wxluamethods_n do\r\n                local m = wxluamethods[j]\r\n                local m_table = {m.name}\r\n\r\n                while m do\r\n                    local wxluacfuncs = m.wxluacfuncs\r\n                    local s = \"\"\r\n                    for f = 1, m.wxluacfuncs_n do\r\n                        s = s..\"(\"..CreateArgTagsString(wxluacfuncs[f].argtypes, wxluacfuncs[f].method_type)..\") \"\r\n                    end\r\n\r\n                    table.insert(m_table, m.class_name)\r\n                    table.insert(m_table, s)\r\n                    m = m.basemethod\r\n                end\r\n\r\n                if #m_table > 3 then\r\n                    if max_cols < #m_table then max_cols = #m_table end\r\n                    table.insert(t, m_table)\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 498,
    "text": "for i = 1, #classTable do\r\n            local wxluamethods = classTable[i].wxluamethods\r\n\r\n            -- some classes don't have methods, wxBestHelpController for example\r\n            for j = 1, classTable[i].wxluamethods_n do\r\n                local m = wxluamethods[j]\r\n                local m_table = {m.name}\r\n\r\n                while m do\r\n                    local wxluacfuncs = m.wxluacfuncs\r\n                    local s = \"\"\r\n                    for f = 1, m.wxluacfuncs_n do\r\n                        s = s..\"(\"..CreateArgTagsString(wxluacfuncs[f].argtypes, wxluacfuncs[f].method_type)..\") \"\r\n                    end\r\n\r\n                    table.insert(m_table, m.class_name)\r\n                    table.insert(m_table, s)\r\n                    m = m.basemethod\r\n                end\r\n\r\n                if #m_table > 3 then\r\n                    if max_cols < #m_table then max_cols = #m_table end\r\n                    table.insert(t, m_table)\r\n                end\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 499,
    "text": "local wxluamethods = classTable[i].wxluamethods",
    "type": "statement:localassign"
  }, {
    "id": 500,
    "text": "for j = 1, classTable[i].wxluamethods_n do\r\n                local m = wxluamethods[j]\r\n                local m_table = {m.name}\r\n\r\n                while m do\r\n                    local wxluacfuncs = m.wxluacfuncs\r\n                    local s = \"\"\r\n                    for f = 1, m.wxluacfuncs_n do\r\n                        s = s..\"(\"..CreateArgTagsString(wxluacfuncs[f].argtypes, wxluacfuncs[f].method_type)..\") \"\r\n                    end\r\n\r\n                    table.insert(m_table, m.class_name)\r\n                    table.insert(m_table, s)\r\n                    m = m.basemethod\r\n                end\r\n\r\n                if #m_table > 3 then\r\n                    if max_cols < #m_table then max_cols = #m_table end\r\n                    table.insert(t, m_table)\r\n                end\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 501,
    "text": "local m = wxluamethods[j]",
    "type": "statement:localassign"
  }, {
    "id": 502,
    "text": "local m_table = {m.name}",
    "type": "statement:localassign"
  }, {
    "id": 503,
    "text": "while m do\r\n                    local wxluacfuncs = m.wxluacfuncs\r\n                    local s = \"\"\r\n                    for f = 1, m.wxluacfuncs_n do\r\n                        s = s..\"(\"..CreateArgTagsString(wxluacfuncs[f].argtypes, wxluacfuncs[f].method_type)..\") \"\r\n                    end\r\n\r\n                    table.insert(m_table, m.class_name)\r\n                    table.insert(m_table, s)\r\n                    m = m.basemethod\r\n                end",
    "type": "statement:while"
  }, {
    "id": 504,
    "text": "local wxluacfuncs = m.wxluacfuncs",
    "type": "statement:localassign"
  }, {
    "id": 505,
    "text": "for f = 1, m.wxluacfuncs_n do\r\n                        s = s..\"(\"..CreateArgTagsString(wxluacfuncs[f].argtypes, wxluacfuncs[f].method_type)..\") \"\r\n                    end",
    "type": "statement:numericfor"
  }, {
    "id": 506,
    "text": "s = s..\"(\"..CreateArgTagsString(wxluacfuncs[f].argtypes, wxluacfuncs[f].method_type)..\") \"",
    "type": "statement:assign"
  }, {
    "id": 507,
    "text": "table.insert(m_table, m.class_name)",
    "type": "statement:functioncall"
  }, {
    "id": 508,
    "text": "table.insert(m_table, s)",
    "type": "statement:functioncall"
  }, {
    "id": 509,
    "text": "m = m.basemethod",
    "type": "statement:assign"
  }, {
    "id": 510,
    "text": "if #m_table > 3 then\r\n                    if max_cols < #m_table then max_cols = #m_table end\r\n                    table.insert(t, m_table)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 511,
    "text": "if max_cols < #m_table then max_cols = #m_table end",
    "type": "statement:if"
  }, {
    "id": 512,
    "text": "max_cols = #m_table",
    "type": "statement:assign"
  }, {
    "id": 513,
    "text": "table.insert(t, m_table)",
    "type": "statement:functioncall"
  }, {
    "id": 514,
    "text": "for i = 4, max_cols, 2 do\r\n        t.col_labels[i] = \"Base Class\"\r\n        t.col_labels[i+1] = \"Args\"\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 515,
    "text": "t.col_labels[i] = \"Base Class\"",
    "type": "statement:assign"
  }, {
    "id": 516,
    "text": "t.col_labels[i+1] = \"Args\"",
    "type": "statement:assign"
  }, {
    "id": 517,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 518,
    "text": "function main()\r\n\r\n    frame = wx.wxFrame(wx.NULL, wx.wxID_ANY, \"wxLua Binding Browser\")\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Create the menu bar\r\n    local fileMenu = wx.wxMenu()\r\n    fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")\r\n\r\n    local viewMenu = wx.wxMenu()\r\n    viewMenu:Append(ID_STACK_DIALOG, \"Show lua stack dialog...\", \"View the current lua stack, stack top shows globals.\")\r\n    viewMenu:AppendSeparator()\r\n    viewMenu:AppendCheckItem(ID_VIEW_BASECLASS_FUNCTIONS, \"View baseclass functions\", \"View all baseclass functions for class methods.\")\r\n\r\n    local helpMenu = wx.wxMenu()\r\n    helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Binding Application\")\r\n    helpMenu:Append(wx.wxID_HELP,  \"&Help\", \"How to use the wxLua Binding Application\")\r\n\r\n    local menuBar = wx.wxMenuBar()\r\n    menuBar:Append(fileMenu, \"&File\")\r\n    menuBar:Append(viewMenu, \"&View\")\r\n    menuBar:Append(helpMenu, \"&Help\")\r\n    frame:SetMenuBar(menuBar)\r\n  \r\n    -- -----------------------------------------------------------------------\r\n\r\n    frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            frame:Close(true)\r\n        end )\r\n\r\n    frame:Connect(ID_STACK_DIALOG, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            local LocalVar1_InEventFn = 1\r\n            local LocalVar2_InEventFn = \"local to the event handler function\"\r\n\r\n            local function LocalFunction(var)\r\n                local LocalVar1_InLocalFuncInEventFn = 3\r\n                local LocalVar2_InLocalFuncInEventFn = \"local to a local function in the event handler function\"\r\n\r\n                wxlua.LuaStackDialog()\r\n            end\r\n\r\n            LocalFunction(LocalStringVariable)\r\n        end )\r\n\r\n    -- connect the selection event of the about menu item\r\n    frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Bindings wxLua sample.\\n'..\r\n                            \"You can view the C++ bindings by navigating the wxListCtrl.\\n\"..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua Binding Browser\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )\r\n    frame:Connect(wx.wxID_HELP, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox(\"Select the C++ bindings to view and then the items that\\n\"..\r\n                            \"have been wrapped. You can expand items that have a folder\\n\"..\r\n                            \"icon by double clicking on the item's column. \\n\"..\r\n                            \"Use the '..' to go up a level.\\n\"..\r\n                            \"Left-click column headers to sort.\\n\\n\"..\r\n                            \"This data is from the structs declared in \\n\"..\r\n                            \"wxLua/modules/wxlua/include/wxlbind.h.\",\r\n                            \"Help on wxLua Binding Browser\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Create the toolbar\r\n    \r\n    toolbar = frame:CreateToolBar()\r\n    \r\n    local bmp = wx.wxArtProvider.GetBitmap(wx.wxART_GO_HOME, wx.wxART_TOOLBAR, wx.wxDefaultSize)\r\n    toolbar:AddTool(wx.wxID_HOME, \"Home\", bmp, \"Go to root level\")\r\n    bmp:delete()\r\n    local bmp = wx.wxArtProvider.GetBitmap(wx.wxART_GO_BACK, wx.wxART_TOOLBAR, wx.wxDefaultSize)\r\n    toolbar:AddTool(wx.wxID_BACKWARD, \"Back\", bmp, \"Go back a level\")\r\n    bmp:delete()\r\n    --local bmp = wx.wxArtProvider.GetBitmap(wx.wxART_GO_FORWARD, wx.wxART_TOOLBAR, wx.wxDefaultSize)\r\n    --toolbar:AddTool(wx.wxID_FORWARD, \"Forward\", bmp, \"Go forward a level\")\r\n    --bmp:delete()\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    frame:Connect(wx.wxID_HOME, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            list_level = 1\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end )\r\n\r\n    frame:Connect(wx.wxID_BACKWARD, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            if list_level > 1 then\r\n                list_level = list_level - 1\r\n                GotoBindingLevel(listCtrl, list_level)\r\n            end\r\n        end )\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Create the status bar\r\n    frame:CreateStatusBar(1)\r\n    frame:SetStatusText(\"Welcome to wxLua.\")\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Create the windows\r\n    panel = wx.wxPanel(frame, wx.wxID_ANY)\r\n    listCtrl = wx.wxListView(panel, ID_LISTCTRL,\r\n                             wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                             wx.wxLC_REPORT + wx.wxLC_SINGLE_SEL + wx.wxLC_HRULES + wx.wxLC_VRULES)\r\n\r\n    imageList = wx.wxImageList(16, 16, true)\r\n    imageList:Add(wx.wxArtProvider.GetBitmap(wx.wxART_NORMAL_FILE, wx.wxART_MENU, wx.wxSize(16,16)))\r\n    imageList:Add(wx.wxArtProvider.GetBitmap(wx.wxART_FOLDER, wx.wxART_MENU, wx.wxSize(16,16)))\r\n    imageList:Add(wx.wxArtProvider.GetBitmap(wx.wxART_GO_DOWN, wx.wxART_MENU, wx.wxSize(16,16)))\r\n    imageList:Add(wx.wxArtProvider.GetBitmap(wx.wxART_GO_UP, wx.wxART_MENU, wx.wxSize(16,16)))\r\n    listCtrl:SetImageList(imageList, wx.wxIMAGE_LIST_SMALL);\r\n\r\n    listCtrl:Connect(wx.wxEVT_COMMAND_LIST_ITEM_ACTIVATED, OnListItemActivated)\r\n    listCtrl:Connect(wx.wxEVT_COMMAND_LIST_COL_CLICK,\r\n            function (event)\r\n                local col = event:GetColumn()\r\n                SortListItems(col)\r\n            end)\r\n\r\n    list_level = 1\r\n    listData[1] = {\r\n        {\"wxLua Types\",  \"Compare Lua's type to wxLua's type\", [\"icon\"] = list_images.folder },\r\n        {\"All wxLua Classes\", \"Classes and their base classes (red may not indicate error)\", [\"icon\"] = list_images.folder },\r\n        {\"All wxWidgets wxClassInfo\", \"All wxObjects having wxClassInfo and their base classes\", [\"icon\"] = list_images.folder },\r\n        {\"Overloaded Baseclass Functions\", \"See all functions that also have a baseclass function\", [\"icon\"] = list_images.folder },\r\n\r\n        [\"col_labels\"] = { \"Item to View\", \"Information\"},\r\n        [\"object_type\"] = \" \"\r\n    }\r\n\r\n\r\n    -- Add the binding that are installed {\"wxLuaBinding_wx\", \"wx\", [\"icon\"] = list_images.folder },\r\n    for i = 1, #bindingList do\r\n        table.insert(listData[1], { \"Binding Name : \"..bindingList[i].GetBindingName, \"Namespace : \"..bindingList[i].GetLuaNamespace, [\"icon\"] = list_images.folder, [\"binding\"] = bindingList[i] })\r\n    end\r\n\r\n    GotoBindingLevel(listCtrl, 1)\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Create the sizer to layout the windows\r\n    rootSizer = wx.wxBoxSizer(wx.wxVERTICAL);\r\n    rootSizer:Add(listCtrl, 1, wx.wxEXPAND + wx.wxALL, 0);\r\n    rootSizer:SetMinSize(600, 420);\r\n    panel:SetSizer(rootSizer);\r\n    rootSizer:SetSizeHints(frame);\r\n\r\n    frame:Show(true)\r\nend",
    "type": "function"
  }, {
    "id": 519,
    "text": "frame = wx.wxFrame(wx.NULL, wx.wxID_ANY, \"wxLua Binding Browser\")",
    "type": "statement:assign"
  }, {
    "id": 520,
    "text": "local fileMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 521,
    "text": "fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")",
    "type": "statement:functioncall"
  }, {
    "id": 522,
    "text": "local viewMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 523,
    "text": "viewMenu:Append(ID_STACK_DIALOG, \"Show lua stack dialog...\", \"View the current lua stack, stack top shows globals.\")",
    "type": "statement:functioncall"
  }, {
    "id": 524,
    "text": "viewMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 525,
    "text": "viewMenu:AppendCheckItem(ID_VIEW_BASECLASS_FUNCTIONS, \"View baseclass functions\", \"View all baseclass functions for class methods.\")",
    "type": "statement:functioncall"
  }, {
    "id": 526,
    "text": "local helpMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 527,
    "text": "helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Binding Application\")",
    "type": "statement:functioncall"
  }, {
    "id": 528,
    "text": "helpMenu:Append(wx.wxID_HELP,  \"&Help\", \"How to use the wxLua Binding Application\")",
    "type": "statement:functioncall"
  }, {
    "id": 529,
    "text": "local menuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 530,
    "text": "menuBar:Append(fileMenu, \"&File\")",
    "type": "statement:functioncall"
  }, {
    "id": 531,
    "text": "menuBar:Append(viewMenu, \"&View\")",
    "type": "statement:functioncall"
  }, {
    "id": 532,
    "text": "menuBar:Append(helpMenu, \"&Help\")",
    "type": "statement:functioncall"
  }, {
    "id": 533,
    "text": "frame:SetMenuBar(menuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 534,
    "text": "frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            frame:Close(true)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 535,
    "text": "frame:Close(true)",
    "type": "statement:functioncall"
  }, {
    "id": 536,
    "text": "frame:Connect(ID_STACK_DIALOG, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            local LocalVar1_InEventFn = 1\r\n            local LocalVar2_InEventFn = \"local to the event handler function\"\r\n\r\n            local function LocalFunction(var)\r\n                local LocalVar1_InLocalFuncInEventFn = 3\r\n                local LocalVar2_InLocalFuncInEventFn = \"local to a local function in the event handler function\"\r\n\r\n                wxlua.LuaStackDialog()\r\n            end\r\n\r\n            LocalFunction(LocalStringVariable)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 537,
    "text": "local LocalVar1_InEventFn = 1",
    "type": "statement:localassign"
  }, {
    "id": 538,
    "text": "local LocalVar2_InEventFn = \"local to the event handler function\"",
    "type": "statement:localassign"
  }, {
    "id": 539,
    "text": "local function LocalFunction(var)\r\n                local LocalVar1_InLocalFuncInEventFn = 3\r\n                local LocalVar2_InLocalFuncInEventFn = \"local to a local function in the event handler function\"\r\n\r\n                wxlua.LuaStackDialog()\r\n            end",
    "type": "statement:localfunction"
  }, {
    "id": 540,
    "text": "local LocalVar1_InLocalFuncInEventFn = 3",
    "type": "statement:localassign"
  }, {
    "id": 541,
    "text": "local LocalVar2_InLocalFuncInEventFn = \"local to a local function in the event handler function\"",
    "type": "statement:localassign"
  }, {
    "id": 542,
    "text": "wxlua.LuaStackDialog()",
    "type": "statement:functioncall"
  }, {
    "id": 543,
    "text": "LocalFunction(LocalStringVariable)",
    "type": "statement:functioncall"
  }, {
    "id": 544,
    "text": "frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Bindings wxLua sample.\\n'..\r\n                            \"You can view the C++ bindings by navigating the wxListCtrl.\\n\"..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua Binding Browser\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 545,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the Bindings wxLua sample.\\n'..\r\n                            \"You can view the C++ bindings by navigating the wxListCtrl.\\n\"..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua Binding Browser\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)",
    "type": "statement:functioncall"
  }, {
    "id": 546,
    "text": "frame:Connect(wx.wxID_HELP, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox(\"Select the C++ bindings to view and then the items that\\n\"..\r\n                            \"have been wrapped. You can expand items that have a folder\\n\"..\r\n                            \"icon by double clicking on the item's column. \\n\"..\r\n                            \"Use the '..' to go up a level.\\n\"..\r\n                            \"Left-click column headers to sort.\\n\\n\"..\r\n                            \"This data is from the structs declared in \\n\"..\r\n                            \"wxLua/modules/wxlua/include/wxlbind.h.\",\r\n                            \"Help on wxLua Binding Browser\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 547,
    "text": "wx.wxMessageBox(\"Select the C++ bindings to view and then the items that\\n\"..\r\n                            \"have been wrapped. You can expand items that have a folder\\n\"..\r\n                            \"icon by double clicking on the item's column. \\n\"..\r\n                            \"Use the '..' to go up a level.\\n\"..\r\n                            \"Left-click column headers to sort.\\n\\n\"..\r\n                            \"This data is from the structs declared in \\n\"..\r\n                            \"wxLua/modules/wxlua/include/wxlbind.h.\",\r\n                            \"Help on wxLua Binding Browser\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)",
    "type": "statement:functioncall"
  }, {
    "id": 548,
    "text": "toolbar = frame:CreateToolBar()",
    "type": "statement:assign"
  }, {
    "id": 549,
    "text": "local bmp = wx.wxArtProvider.GetBitmap(wx.wxART_GO_HOME, wx.wxART_TOOLBAR, wx.wxDefaultSize)",
    "type": "statement:localassign"
  }, {
    "id": 550,
    "text": "toolbar:AddTool(wx.wxID_HOME, \"Home\", bmp, \"Go to root level\")",
    "type": "statement:functioncall"
  }, {
    "id": 551,
    "text": "bmp:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 552,
    "text": "local bmp = wx.wxArtProvider.GetBitmap(wx.wxART_GO_BACK, wx.wxART_TOOLBAR, wx.wxDefaultSize)",
    "type": "statement:localassign"
  }, {
    "id": 553,
    "text": "toolbar:AddTool(wx.wxID_BACKWARD, \"Back\", bmp, \"Go back a level\")",
    "type": "statement:functioncall"
  }, {
    "id": 554,
    "text": "frame:Connect(wx.wxID_HOME, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            list_level = 1\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 555,
    "text": "list_level = 1",
    "type": "statement:assign"
  }, {
    "id": 556,
    "text": "frame:Connect(wx.wxID_BACKWARD, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            if list_level > 1 then\r\n                list_level = list_level - 1\r\n                GotoBindingLevel(listCtrl, list_level)\r\n            end\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 557,
    "text": "if list_level > 1 then\r\n                list_level = list_level - 1\r\n                GotoBindingLevel(listCtrl, list_level)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 558,
    "text": "frame:CreateStatusBar(1)",
    "type": "statement:functioncall"
  }, {
    "id": 559,
    "text": "frame:SetStatusText(\"Welcome to wxLua.\")",
    "type": "statement:functioncall"
  }, {
    "id": 560,
    "text": "panel = wx.wxPanel(frame, wx.wxID_ANY)",
    "type": "statement:assign"
  }, {
    "id": 561,
    "text": "listCtrl = wx.wxListView(panel, ID_LISTCTRL,\r\n                             wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                             wx.wxLC_REPORT + wx.wxLC_SINGLE_SEL + wx.wxLC_HRULES + wx.wxLC_VRULES)",
    "type": "statement:assign"
  }, {
    "id": 562,
    "text": "imageList = wx.wxImageList(16, 16, true)",
    "type": "statement:assign"
  }, {
    "id": 563,
    "text": "imageList:Add(wx.wxArtProvider.GetBitmap(wx.wxART_NORMAL_FILE, wx.wxART_MENU, wx.wxSize(16,16)))",
    "type": "statement:functioncall"
  }, {
    "id": 564,
    "text": "imageList:Add(wx.wxArtProvider.GetBitmap(wx.wxART_FOLDER, wx.wxART_MENU, wx.wxSize(16,16)))",
    "type": "statement:functioncall"
  }, {
    "id": 565,
    "text": "imageList:Add(wx.wxArtProvider.GetBitmap(wx.wxART_GO_DOWN, wx.wxART_MENU, wx.wxSize(16,16)))",
    "type": "statement:functioncall"
  }, {
    "id": 566,
    "text": "imageList:Add(wx.wxArtProvider.GetBitmap(wx.wxART_GO_UP, wx.wxART_MENU, wx.wxSize(16,16)))",
    "type": "statement:functioncall"
  }, {
    "id": 567,
    "text": "listCtrl:SetImageList(imageList, wx.wxIMAGE_LIST_SMALL)",
    "type": "statement:functioncall"
  }, {
    "id": 568,
    "text": "listCtrl:Connect(wx.wxEVT_COMMAND_LIST_ITEM_ACTIVATED, OnListItemActivated)",
    "type": "statement:functioncall"
  }, {
    "id": 569,
    "text": "listCtrl:Connect(wx.wxEVT_COMMAND_LIST_COL_CLICK,\r\n            function (event)\r\n                local col = event:GetColumn()\r\n                SortListItems(col)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 570,
    "text": "local col = event:GetColumn()",
    "type": "statement:localassign"
  }, {
    "id": 571,
    "text": "SortListItems(col)",
    "type": "statement:functioncall"
  }, {
    "id": 572,
    "text": "listData[1] = {\r\n        {\"wxLua Types\",  \"Compare Lua's type to wxLua's type\", [\"icon\"] = list_images.folder },\r\n        {\"All wxLua Classes\", \"Classes and their base classes (red may not indicate error)\", [\"icon\"] = list_images.folder },\r\n        {\"All wxWidgets wxClassInfo\", \"All wxObjects having wxClassInfo and their base classes\", [\"icon\"] = list_images.folder },\r\n        {\"Overloaded Baseclass Functions\", \"See all functions that also have a baseclass function\", [\"icon\"] = list_images.folder },\r\n\r\n        [\"col_labels\"] = { \"Item to View\", \"Information\"},\r\n        [\"object_type\"] = \" \"\r\n    }",
    "type": "statement:assign"
  }, {
    "id": 573,
    "text": "for i = 1, #bindingList do\r\n        table.insert(listData[1], { \"Binding Name : \"..bindingList[i].GetBindingName, \"Namespace : \"..bindingList[i].GetLuaNamespace, [\"icon\"] = list_images.folder, [\"binding\"] = bindingList[i] })\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 574,
    "text": "table.insert(listData[1], { \"Binding Name : \"..bindingList[i].GetBindingName, \"Namespace : \"..bindingList[i].GetLuaNamespace, [\"icon\"] = list_images.folder, [\"binding\"] = bindingList[i] })",
    "type": "statement:functioncall"
  }, {
    "id": 575,
    "text": "GotoBindingLevel(listCtrl, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 576,
    "text": "rootSizer = wx.wxBoxSizer(wx.wxVERTICAL)",
    "type": "statement:assign"
  }, {
    "id": 577,
    "text": "rootSizer:Add(listCtrl, 1, wx.wxEXPAND + wx.wxALL, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 578,
    "text": "rootSizer:SetMinSize(600, 420)",
    "type": "statement:functioncall"
  }, {
    "id": 579,
    "text": "panel:SetSizer(rootSizer)",
    "type": "statement:functioncall"
  }, {
    "id": 580,
    "text": "rootSizer:SetSizeHints(frame)",
    "type": "statement:functioncall"
  }, {
    "id": 581,
    "text": "frame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 582,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 583,
    "text": "local function LocalFunction(var)\r\n                local LocalVar1_InLocalFuncInEventFn = 3\r\n                local LocalVar2_InLocalFuncInEventFn = \"local to a local function in the event handler function\"\r\n\r\n                wxlua.LuaStackDialog()\r\n            end",
    "type": "function"
  }, {
    "id": 584,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 585,
    "text": "function(t1, t2) return t1[1] < t2[1] end",
    "type": "function"
  }, {
    "id": 586,
    "text": "function (event)\r\n            frame:Close(true)\r\n        end",
    "type": "function"
  }, {
    "id": 587,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 588,
    "text": "function (event)\r\n            local LocalVar1_InEventFn = 1\r\n            local LocalVar2_InEventFn = \"local to the event handler function\"\r\n\r\n            local function LocalFunction(var)\r\n                local LocalVar1_InLocalFuncInEventFn = 3\r\n                local LocalVar2_InLocalFuncInEventFn = \"local to a local function in the event handler function\"\r\n\r\n                wxlua.LuaStackDialog()\r\n            end\r\n\r\n            LocalFunction(LocalStringVariable)\r\n        end",
    "type": "function"
  }, {
    "id": 589,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 590,
    "text": "function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Bindings wxLua sample.\\n'..\r\n                            \"You can view the C++ bindings by navigating the wxListCtrl.\\n\"..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua Binding Browser\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end",
    "type": "function"
  }, {
    "id": 591,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 592,
    "text": "function (event)\r\n            wx.wxMessageBox(\"Select the C++ bindings to view and then the items that\\n\"..\r\n                            \"have been wrapped. You can expand items that have a folder\\n\"..\r\n                            \"icon by double clicking on the item's column. \\n\"..\r\n                            \"Use the '..' to go up a level.\\n\"..\r\n                            \"Left-click column headers to sort.\\n\\n\"..\r\n                            \"This data is from the structs declared in \\n\"..\r\n                            \"wxLua/modules/wxlua/include/wxlbind.h.\",\r\n                            \"Help on wxLua Binding Browser\",\r\n                            wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end",
    "type": "function"
  }, {
    "id": 593,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 594,
    "text": "function (event)\r\n            list_level = 1\r\n            GotoBindingLevel(listCtrl, list_level)\r\n        end",
    "type": "function"
  }, {
    "id": 595,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 596,
    "text": "function (event)\r\n            if list_level > 1 then\r\n                list_level = list_level - 1\r\n                GotoBindingLevel(listCtrl, list_level)\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 597,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 598,
    "text": "function (event)\r\n                local col = event:GetColumn()\r\n                SortListItems(col)\r\n            end",
    "type": "function"
  }, {
    "id": 599,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 600,
    "text": "",
    "type": "function container"
  }, {
    "id": 601,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 602,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 603,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 604,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 605,
    "text": "wxColour",
    "type": "global function"
  }, {
    "id": 606,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 607,
    "text": "wxClassInfo.GetFirst",
    "type": "global function"
  }, {
    "id": 608,
    "text": "wxClassInfo.FindClass",
    "type": "global function"
  }, {
    "id": 609,
    "text": "wxListView",
    "type": "global function"
  }, {
    "id": 610,
    "text": "wxBoxSizer",
    "type": "global function"
  }, {
    "id": 611,
    "text": "wxEndBusyCursor",
    "type": "global function"
  }, {
    "id": 612,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 613,
    "text": "wxListItem",
    "type": "global function"
  }, {
    "id": 614,
    "text": "wxPanel",
    "type": "global function"
  }, {
    "id": 615,
    "text": "wxImageList",
    "type": "global function"
  }, {
    "id": 616,
    "text": "wxGetMousePosition",
    "type": "global function"
  }, {
    "id": 617,
    "text": "wxArtProvider.GetBitmap",
    "type": "global function"
  }, {
    "id": 618,
    "text": "wxBeginBusyCursor",
    "type": "global function"
  }, {
    "id": 619,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 620,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 621,
    "text": "print",
    "type": "global function"
  }, {
    "id": 622,
    "text": "GetBindings",
    "type": "global function"
  }, {
    "id": 623,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 624,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 625,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 626,
    "text": "len",
    "type": "global function"
  }, {
    "id": 627,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 628,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 629,
    "text": "format",
    "type": "global function"
  }, {
    "id": 630,
    "text": "LuaStackDialog",
    "type": "global function"
  }, {
    "id": 631,
    "text": "type",
    "type": "global function"
  }, {
    "id": 632,
    "text": "find",
    "type": "global function"
  }, {
    "id": 633,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 634,
    "text": "typename",
    "type": "global function"
  }, {
    "id": 635,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 636,
    "text": "iswxluatype",
    "type": "global function"
  }, {
    "id": 637,
    "text": "char",
    "type": "global function"
  }, {
    "id": 638,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 639,
    "text": "band",
    "type": "global function"
  }, {
    "id": 640,
    "text": "require",
    "type": "global function"
  }, {
    "id": 641,
    "text": "",
    "type": "global variable"
  }, {
    "id": 642,
    "text": "",
    "type": "variable container"
  }, {
    "id": 643,
    "text": "",
    "type": "require container"
  }, {
    "id": 644,
    "text": "",
    "type": "global variable"
  }, {
    "id": 645,
    "text": "",
    "type": "n/a"
  }, {
    "id": 646,
    "text": "",
    "type": "global variable"
  }, {
    "id": 647,
    "text": "",
    "type": "global variable"
  }, {
    "id": 648,
    "text": "",
    "type": "global variable"
  }, {
    "id": 649,
    "text": "",
    "type": "global variable"
  }, {
    "id": 650,
    "text": "",
    "type": "global variable"
  }, {
    "id": 651,
    "text": "",
    "type": "global variable"
  }, {
    "id": 652,
    "text": "",
    "type": "n/a"
  }, {
    "id": 653,
    "text": "",
    "type": "global variable"
  }, {
    "id": 654,
    "text": "",
    "type": "n/a"
  }, {
    "id": 655,
    "text": "",
    "type": "global variable"
  }, {
    "id": 656,
    "text": "",
    "type": "n/a"
  }, {
    "id": 657,
    "text": "",
    "type": "global variable"
  }, {
    "id": 658,
    "text": "",
    "type": "global variable"
  }, {
    "id": 659,
    "text": "",
    "type": "n/a"
  }, {
    "id": 660,
    "text": "",
    "type": "global variable"
  }, {
    "id": 661,
    "text": "",
    "type": "n/a"
  } ]
}