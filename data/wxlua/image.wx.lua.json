{
  "_filename": "image.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/image/image.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 7,
    "label": "has",
    "to": 17
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 7,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 7,
    "label": "has",
    "to": 21
  }, {
    "from": 7,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 7,
    "label": "has",
    "to": 29
  }, {
    "from": 7,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 7,
    "label": "has",
    "to": 32
  }, {
    "from": 7,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 7,
    "label": "has",
    "to": 35
  }, {
    "from": 7,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 7,
    "label": "has",
    "to": 38
  }, {
    "from": 7,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 7,
    "label": "has",
    "to": 41
  }, {
    "from": 7,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 7,
    "label": "has",
    "to": 44
  }, {
    "from": 7,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 7,
    "label": "has",
    "to": 47
  }, {
    "from": 7,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 7,
    "label": "has",
    "to": 50
  }, {
    "from": 7,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 7,
    "label": "has",
    "to": 53
  }, {
    "from": 7,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 7,
    "label": "has",
    "to": 56
  }, {
    "from": 7,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 7,
    "label": "has",
    "to": 59
  }, {
    "from": 7,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 7,
    "label": "has",
    "to": 62
  }, {
    "from": 7,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 7,
    "label": "has",
    "to": 65
  }, {
    "from": 7,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 7,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 77
  }, {
    "from": 68,
    "label": "has",
    "to": 78
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 79
  }, {
    "from": 68,
    "label": "has",
    "to": 80
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 81
  }, {
    "from": 68,
    "label": "has",
    "to": 82
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 83
  }, {
    "from": 68,
    "label": "has",
    "to": 84
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 85
  }, {
    "from": 68,
    "label": "has",
    "to": 86
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 87
  }, {
    "from": 68,
    "label": "has",
    "to": 88
  }, {
    "from": 7,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 89,
    "label": "has",
    "to": 95
  }, {
    "from": 89,
    "label": "has",
    "to": 96
  }, {
    "from": 89,
    "label": "has",
    "to": 97
  }, {
    "from": 89,
    "label": "has",
    "to": 98
  }, {
    "from": 89,
    "label": "has",
    "to": 99
  }, {
    "from": 89,
    "label": "has",
    "to": 100
  }, {
    "from": 89,
    "label": "has",
    "to": 101
  }, {
    "from": 89,
    "label": "has",
    "to": 102
  }, {
    "from": 89,
    "label": "has",
    "to": 103
  }, {
    "from": 89,
    "label": "has",
    "to": 96
  }, {
    "from": 7,
    "label": "has",
    "to": 104
  }, {
    "from": 7,
    "label": "has",
    "to": 105
  }, {
    "from": 7,
    "label": "has",
    "to": 106
  }, {
    "from": 7,
    "label": "has",
    "to": 107
  }, {
    "from": 7,
    "label": "has",
    "to": 108
  }, {
    "from": 7,
    "label": "has",
    "to": 109
  }, {
    "from": 7,
    "label": "has",
    "to": 110
  }, {
    "from": 7,
    "label": "has",
    "to": 111
  }, {
    "from": 7,
    "label": "has",
    "to": 112
  }, {
    "from": 7,
    "label": "has",
    "to": 113
  }, {
    "from": 7,
    "label": "has",
    "to": 114
  }, {
    "from": 7,
    "label": "has",
    "to": 115
  }, {
    "from": 7,
    "label": "has",
    "to": 116
  }, {
    "from": 7,
    "label": "has",
    "to": 117
  }, {
    "from": 7,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 118,
    "label": "has",
    "to": 123
  }, {
    "from": 118,
    "label": "has",
    "to": 124
  }, {
    "from": 118,
    "label": "has",
    "to": 96
  }, {
    "from": 118,
    "label": "has",
    "to": 97
  }, {
    "from": 118,
    "label": "has",
    "to": 98
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 118,
    "label": "has",
    "to": 125
  }, {
    "from": 118,
    "label": "has",
    "to": 126
  }, {
    "from": 118,
    "label": "has",
    "to": 127
  }, {
    "from": 118,
    "label": "has",
    "to": 103
  }, {
    "from": 118,
    "label": "has",
    "to": 96
  }, {
    "from": 7,
    "label": "has",
    "to": 128
  }, {
    "from": 7,
    "label": "has",
    "to": 129
  }, {
    "from": 7,
    "label": "has",
    "to": 130
  }, {
    "from": 7,
    "label": "has",
    "to": 131
  }, {
    "from": 7,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 7,
    "label": "has",
    "to": 134
  }, {
    "from": 7,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 7,
    "label": "has",
    "to": 137
  }, {
    "from": 7,
    "label": "has",
    "to": 138
  }, {
    "from": 7,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 139,
    "label": "has",
    "to": 28
  }, {
    "from": 139,
    "label": "has",
    "to": 144
  }, {
    "from": 139,
    "label": "has",
    "to": 145
  }, {
    "from": 139,
    "label": "has",
    "to": 146
  }, {
    "from": 139,
    "label": "has",
    "to": 147
  }, {
    "from": 139,
    "label": "has",
    "to": 148
  }, {
    "from": 139,
    "label": "has",
    "to": 149
  }, {
    "from": 139,
    "label": "has",
    "to": 150
  }, {
    "from": 139,
    "label": "has",
    "to": 151
  }, {
    "from": 139,
    "label": "has",
    "to": 152
  }, {
    "from": 139,
    "label": "has",
    "to": 153
  }, {
    "from": 139,
    "label": "has",
    "to": 145
  }, {
    "from": 139,
    "label": "has",
    "to": 154
  }, {
    "from": 139,
    "label": "has",
    "to": 147
  }, {
    "from": 139,
    "label": "has",
    "to": 155
  }, {
    "from": 139,
    "label": "has",
    "to": 149
  }, {
    "from": 139,
    "label": "has",
    "to": 156
  }, {
    "from": 139,
    "label": "has",
    "to": 157
  }, {
    "from": 7,
    "label": "has",
    "to": 158
  }, {
    "from": 7,
    "label": "has",
    "to": 159
  }, {
    "from": 7,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 7,
    "label": "has",
    "to": 162
  }, {
    "from": 7,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 7,
    "label": "has",
    "to": 165
  }, {
    "from": 7,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 7,
    "label": "has",
    "to": 168
  }, {
    "from": 7,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 169,
    "label": "has",
    "to": 173
  }, {
    "from": 7,
    "label": "has",
    "to": 174
  }, {
    "from": 7,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 7,
    "label": "has",
    "to": 178
  }, {
    "from": 7,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 180,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 180,
    "label": "has",
    "to": 122
  }, {
    "from": 180,
    "label": "has",
    "to": 186
  }, {
    "from": 180,
    "label": "has",
    "to": 187
  }, {
    "from": 180,
    "label": "has",
    "to": 129
  }, {
    "from": 180,
    "label": "has",
    "to": 188
  }, {
    "from": 180,
    "label": "has",
    "to": 189
  }, {
    "from": 180,
    "label": "has",
    "to": 190
  }, {
    "from": 180,
    "label": "has",
    "to": 191
  }, {
    "from": 180,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 198,
    "label": "has",
    "to": 201
  }, {
    "from": 198,
    "label": "has",
    "to": 202
  }, {
    "from": 198,
    "label": "has",
    "to": 203
  }, {
    "from": 198,
    "label": "has",
    "to": 204
  }, {
    "from": 198,
    "label": "has",
    "to": 205
  }, {
    "from": 198,
    "label": "has",
    "to": 206
  }, {
    "from": 198,
    "label": "has",
    "to": 207
  }, {
    "from": 198,
    "label": "has",
    "to": 208
  }, {
    "from": 198,
    "label": "has",
    "to": 209
  }, {
    "from": 198,
    "label": "has",
    "to": 210
  }, {
    "from": 198,
    "label": "has",
    "to": 211
  }, {
    "from": 198,
    "label": "has",
    "to": 212
  }, {
    "from": 198,
    "label": "has",
    "to": 202
  }, {
    "from": 198,
    "label": "has",
    "to": 213
  }, {
    "from": 196,
    "label": "has",
    "to": 214
  }, {
    "from": 180,
    "label": "has",
    "to": 215
  }, {
    "from": 180,
    "label": "has",
    "to": 216
  }, {
    "from": 180,
    "label": "has",
    "to": 217
  }, {
    "from": 180,
    "label": "has",
    "to": 178
  }, {
    "from": 180,
    "label": "has",
    "to": 218
  }, {
    "from": 180,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 220,
    "label": "has",
    "to": 223
  }, {
    "from": 220,
    "label": "has",
    "to": 224
  }, {
    "from": 220,
    "label": "has",
    "to": 225
  }, {
    "from": 220,
    "label": "has",
    "to": 226
  }, {
    "from": 220,
    "label": "has",
    "to": 227
  }, {
    "from": 220,
    "label": "has",
    "to": 228
  }, {
    "from": 220,
    "label": "has",
    "to": 229
  }, {
    "from": 220,
    "label": "has",
    "to": 230
  }, {
    "from": 220,
    "label": "has",
    "to": 231
  }, {
    "from": 220,
    "label": "has",
    "to": 232
  }, {
    "from": 220,
    "label": "has",
    "to": 233
  }, {
    "from": 220,
    "label": "has",
    "to": 234
  }, {
    "from": 220,
    "label": "has",
    "to": 235
  }, {
    "from": 220,
    "label": "has",
    "to": 236
  }, {
    "from": 220,
    "label": "has",
    "to": 237
  }, {
    "from": 220,
    "label": "has",
    "to": 238
  }, {
    "from": 220,
    "label": "has",
    "to": 239
  }, {
    "from": 220,
    "label": "has",
    "to": 240
  }, {
    "from": 220,
    "label": "has",
    "to": 241
  }, {
    "from": 220,
    "label": "has",
    "to": 242
  }, {
    "from": 220,
    "label": "has",
    "to": 243
  }, {
    "from": 220,
    "label": "has",
    "to": 244
  }, {
    "from": 220,
    "label": "has",
    "to": 245
  }, {
    "from": 220,
    "label": "has",
    "to": 246
  }, {
    "from": 220,
    "label": "has",
    "to": 247
  }, {
    "from": 220,
    "label": "has",
    "to": 248
  }, {
    "from": 220,
    "label": "has",
    "to": 249
  }, {
    "from": 220,
    "label": "has",
    "to": 250
  }, {
    "from": 220,
    "label": "has",
    "to": 251
  }, {
    "from": 220,
    "label": "has",
    "to": 252
  }, {
    "from": 220,
    "label": "has",
    "to": 253
  }, {
    "from": 220,
    "label": "has",
    "to": 254
  }, {
    "from": 220,
    "label": "has",
    "to": 255
  }, {
    "from": 220,
    "label": "has",
    "to": 256
  }, {
    "from": 220,
    "label": "has",
    "to": 257
  }, {
    "from": 220,
    "label": "has",
    "to": 258
  }, {
    "from": 220,
    "label": "has",
    "to": 259
  }, {
    "from": 220,
    "label": "has",
    "to": 260
  }, {
    "from": 220,
    "label": "has",
    "to": 261
  }, {
    "from": 220,
    "label": "has",
    "to": 262
  }, {
    "from": 220,
    "label": "has",
    "to": 182
  }, {
    "from": 220,
    "label": "has",
    "to": 183
  }, {
    "from": 220,
    "label": "has",
    "to": 263
  }, {
    "from": 220,
    "label": "has",
    "to": 15
  }, {
    "from": 220,
    "label": "has",
    "to": 264
  }, {
    "from": 220,
    "label": "has",
    "to": 17
  }, {
    "from": 220,
    "label": "has",
    "to": 265
  }, {
    "from": 220,
    "label": "has",
    "to": 266
  }, {
    "from": 220,
    "label": "has",
    "to": 178
  }, {
    "from": 220,
    "label": "has",
    "to": 267
  }, {
    "from": 220,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 271
  }, {
    "from": 268,
    "label": "has",
    "to": 272
  }, {
    "from": 268,
    "label": "has",
    "to": 273
  }, {
    "from": 220,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 274,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 274,
    "label": "has",
    "to": 278
  }, {
    "from": 274,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 220,
    "label": "has",
    "to": 4
  }, {
    "from": 220,
    "label": "has",
    "to": 281
  }, {
    "from": 220,
    "label": "has",
    "to": 282
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 287,
    "label": "has",
    "to": 289
  }, {
    "from": 220,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 288
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 220,
    "label": "has",
    "to": 292
  }, {
    "from": 220,
    "label": "has",
    "to": 293
  }, {
    "from": 220,
    "label": "has",
    "to": 294
  }, {
    "from": 220,
    "label": "has",
    "to": 295
  }, {
    "from": 220,
    "label": "has",
    "to": 296
  }, {
    "from": 220,
    "label": "has",
    "to": 297
  }, {
    "from": 220,
    "label": "has",
    "to": 298
  }, {
    "from": 220,
    "label": "has",
    "to": 299
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 300,
    "label": "has",
    "to": 302
  }, {
    "from": 300,
    "label": "has",
    "to": 303
  }, {
    "from": 300,
    "label": "has",
    "to": 304
  }, {
    "from": 300,
    "label": "has",
    "to": 305
  }, {
    "from": 300,
    "label": "has",
    "to": 306
  }, {
    "from": 220,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 312
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 313,
    "label": "has",
    "to": 315
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 319
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 220,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 283
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 323,
    "label": "has",
    "to": 325
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 324
  }, {
    "from": 326,
    "label": "has",
    "to": 327
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 324
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 332
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 333,
    "label": "has",
    "to": 335
  }, {
    "from": 220,
    "label": "has",
    "to": 336
  }, {
    "from": 220,
    "label": "has",
    "to": 337
  }, {
    "from": 220,
    "label": "has",
    "to": 338
  }, {
    "from": 220,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 345
  }, {
    "from": 344,
    "label": "has",
    "to": 346
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 348
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 350,
    "label": "has",
    "to": 353
  }, {
    "from": 220,
    "label": "has",
    "to": 354
  }, {
    "from": 220,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 355,
    "label": "has",
    "to": 255
  }, {
    "from": 220,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 284
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 360
  }, {
    "from": 358,
    "label": "has",
    "to": 361
  }, {
    "from": 220,
    "label": "has",
    "to": 284
  }, {
    "from": 220,
    "label": "has",
    "to": 362
  }, {
    "from": 220,
    "label": "has",
    "to": 363
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 363,
    "label": "has",
    "to": 365
  }, {
    "from": 363,
    "label": "has",
    "to": 366
  }, {
    "from": 363,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 367,
    "label": "has",
    "to": 369
  }, {
    "from": 367,
    "label": "has",
    "to": 370
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 370,
    "label": "has",
    "to": 372
  }, {
    "from": 220,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 220,
    "label": "has",
    "to": 4
  }, {
    "from": 220,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 4
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 378,
    "label": "has",
    "to": 379
  }, {
    "from": 378,
    "label": "has",
    "to": 380
  }, {
    "from": 378,
    "label": "has",
    "to": 381
  }, {
    "from": 378,
    "label": "has",
    "to": 4
  }, {
    "from": 378,
    "label": "has",
    "to": 382
  }, {
    "from": 378,
    "label": "has",
    "to": 383
  }, {
    "from": 378,
    "label": "has",
    "to": 384
  }, {
    "from": 384,
    "label": "has",
    "to": 385
  }, {
    "from": 384,
    "label": "has",
    "to": 386
  }, {
    "from": 384,
    "label": "has",
    "to": 387
  }, {
    "from": 384,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 390
  }, {
    "from": 388,
    "label": "has",
    "to": 391
  }, {
    "from": 391,
    "label": "has",
    "to": 392
  }, {
    "from": 391,
    "label": "has",
    "to": 393
  }, {
    "from": 393,
    "label": "has",
    "to": 394
  }, {
    "from": 391,
    "label": "has",
    "to": 395
  }, {
    "from": 384,
    "label": "has",
    "to": 396
  }, {
    "from": 384,
    "label": "has",
    "to": 397
  }, {
    "from": 384,
    "label": "has",
    "to": 398
  }, {
    "from": 384,
    "label": "has",
    "to": 399
  }, {
    "from": 399,
    "label": "has",
    "to": 400
  }, {
    "from": 399,
    "label": "has",
    "to": 401
  }, {
    "from": 384,
    "label": "has",
    "to": 402
  }, {
    "from": 384,
    "label": "has",
    "to": 403
  }, {
    "from": 384,
    "label": "has",
    "to": 404
  }, {
    "from": 384,
    "label": "has",
    "to": 405
  }, {
    "from": 378,
    "label": "has",
    "to": 406
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 378,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 8
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 409,
    "label": "has",
    "to": 178
  }, {
    "from": 409,
    "label": "has",
    "to": 411
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 412,
    "label": "has",
    "to": 414
  }, {
    "from": 412,
    "label": "has",
    "to": 259
  }, {
    "from": 412,
    "label": "has",
    "to": 415
  }, {
    "from": 412,
    "label": "has",
    "to": 416
  }, {
    "from": 412,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 412,
    "label": "has",
    "to": 417
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 412,
    "label": "has",
    "to": 419
  }, {
    "from": 412,
    "label": "has",
    "to": 4
  }, {
    "from": 412,
    "label": "has",
    "to": 420
  }, {
    "from": 421,
    "label": "has",
    "to": 4
  }, {
    "from": 421,
    "label": "has",
    "to": 422
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 425,
    "label": "has",
    "to": 427
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 425,
    "label": "has",
    "to": 4
  }, {
    "from": 425,
    "label": "has",
    "to": 429
  }, {
    "from": 425,
    "label": "has",
    "to": 430
  }, {
    "from": 430,
    "label": "has",
    "to": 431
  }, {
    "from": 430,
    "label": "has",
    "to": 432
  }, {
    "from": 430,
    "label": "has",
    "to": 433
  }, {
    "from": 430,
    "label": "has",
    "to": 434
  }, {
    "from": 430,
    "label": "has",
    "to": 435
  }, {
    "from": 435,
    "label": "has",
    "to": 436
  }, {
    "from": 435,
    "label": "has",
    "to": 437
  }, {
    "from": 435,
    "label": "has",
    "to": 438
  }, {
    "from": 430,
    "label": "has",
    "to": 439
  }, {
    "from": 430,
    "label": "has",
    "to": 440
  }, {
    "from": 425,
    "label": "has",
    "to": 441
  }, {
    "from": 442,
    "label": "has",
    "to": 8
  }, {
    "from": 442,
    "label": "has",
    "to": 443
  }, {
    "from": 442,
    "label": "has",
    "to": 444
  }, {
    "from": 442,
    "label": "has",
    "to": 445
  }, {
    "from": 442,
    "label": "has",
    "to": 446
  }, {
    "from": 442,
    "label": "has",
    "to": 447
  }, {
    "from": 442,
    "label": "has",
    "to": 448
  }, {
    "from": 442,
    "label": "has",
    "to": 178
  }, {
    "from": 442,
    "label": "has",
    "to": 449
  }, {
    "from": 450,
    "label": "has",
    "to": 451
  }, {
    "from": 450,
    "label": "has",
    "to": 452
  }, {
    "from": 450,
    "label": "has",
    "to": 453
  }, {
    "from": 450,
    "label": "has",
    "to": 454
  }, {
    "from": 450,
    "label": "has",
    "to": 455
  }, {
    "from": 450,
    "label": "has",
    "to": 259
  }, {
    "from": 450,
    "label": "has",
    "to": 373
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 450,
    "label": "has",
    "to": 456
  }, {
    "from": 450,
    "label": "has",
    "to": 457
  }, {
    "from": 450,
    "label": "has",
    "to": 458
  }, {
    "from": 450,
    "label": "has",
    "to": 4
  }, {
    "from": 450,
    "label": "has",
    "to": 459
  }, {
    "from": 460,
    "label": "has",
    "to": 4
  }, {
    "from": 460,
    "label": "has",
    "to": 461
  }, {
    "from": 462,
    "label": "has",
    "to": 463
  }, {
    "from": 462,
    "label": "has",
    "to": 464
  }, {
    "from": 465,
    "label": "has",
    "to": 466
  }, {
    "from": 465,
    "label": "has",
    "to": 467
  }, {
    "from": 465,
    "label": "has",
    "to": 4
  }, {
    "from": 465,
    "label": "has",
    "to": 468
  }, {
    "from": 465,
    "label": "has",
    "to": 469
  }, {
    "from": 469,
    "label": "has",
    "to": 470
  }, {
    "from": 465,
    "label": "has",
    "to": 4
  }, {
    "from": 465,
    "label": "has",
    "to": 471
  }, {
    "from": 465,
    "label": "has",
    "to": 472
  }, {
    "from": 473,
    "label": "has",
    "to": 474
  }, {
    "from": 473,
    "label": "has",
    "to": 475
  }, {
    "from": 476,
    "label": "has",
    "to": 477
  }, {
    "from": 476,
    "label": "has",
    "to": 478
  }, {
    "from": 479,
    "label": "has",
    "to": 480
  }, {
    "from": 479,
    "label": "has",
    "to": 481
  }, {
    "from": 479,
    "label": "has",
    "to": 482
  }, {
    "from": 479,
    "label": "has",
    "to": 483
  }, {
    "from": 483,
    "label": "has",
    "to": 484
  }, {
    "from": 479,
    "label": "has",
    "to": 4
  }, {
    "from": 479,
    "label": "has",
    "to": 485
  }, {
    "from": 479,
    "label": "has",
    "to": 486
  }, {
    "from": 486,
    "label": "has",
    "to": 487
  }, {
    "from": 479,
    "label": "has",
    "to": 488
  }, {
    "from": 479,
    "label": "has",
    "to": 489
  }, {
    "from": 490,
    "label": "has",
    "to": 480
  }, {
    "from": 490,
    "label": "has",
    "to": 482
  }, {
    "from": 490,
    "label": "has",
    "to": 483
  }, {
    "from": 483,
    "label": "has",
    "to": 484
  }, {
    "from": 490,
    "label": "has",
    "to": 4
  }, {
    "from": 490,
    "label": "has",
    "to": 485
  }, {
    "from": 490,
    "label": "has",
    "to": 491
  }, {
    "from": 491,
    "label": "has",
    "to": 492
  }, {
    "from": 491,
    "label": "has",
    "to": 493
  }, {
    "from": 490,
    "label": "has",
    "to": 488
  }, {
    "from": 490,
    "label": "has",
    "to": 494
  }, {
    "from": 495,
    "label": "has",
    "to": 496
  }, {
    "from": 495,
    "label": "has",
    "to": 497
  }, {
    "from": 495,
    "label": "has",
    "to": 498
  }, {
    "from": 495,
    "label": "has",
    "to": 499
  }, {
    "from": 495,
    "label": "has",
    "to": 500
  }, {
    "from": 500,
    "label": "has",
    "to": 501
  }, {
    "from": 495,
    "label": "has",
    "to": 502
  }, {
    "from": 495,
    "label": "has",
    "to": 503
  }, {
    "from": 495,
    "label": "has",
    "to": 504
  }, {
    "from": 504,
    "label": "has",
    "to": 505
  }, {
    "from": 495,
    "label": "has",
    "to": 506
  }, {
    "from": 506,
    "label": "has",
    "to": 507
  }, {
    "from": 495,
    "label": "has",
    "to": 508
  }, {
    "from": 508,
    "label": "has",
    "to": 509
  }, {
    "from": 495,
    "label": "has",
    "to": 510
  }, {
    "from": 510,
    "label": "has",
    "to": 511
  }, {
    "from": 511,
    "label": "has",
    "to": 512
  }, {
    "from": 495,
    "label": "has",
    "to": 513
  }, {
    "from": 513,
    "label": "has",
    "to": 514
  }, {
    "from": 495,
    "label": "has",
    "to": 515
  }, {
    "from": 515,
    "label": "has",
    "to": 516
  }, {
    "from": 495,
    "label": "has",
    "to": 517
  }, {
    "from": 495,
    "label": "has",
    "to": 518
  }, {
    "from": 495,
    "label": "has",
    "to": 519
  }, {
    "from": 495,
    "label": "has",
    "to": 520
  }, {
    "from": 520,
    "label": "has",
    "to": 521
  }, {
    "from": 495,
    "label": "has",
    "to": 522
  }, {
    "from": 495,
    "label": "has",
    "to": 523
  }, {
    "from": 495,
    "label": "has",
    "to": 522
  }, {
    "from": 495,
    "label": "has",
    "to": 524
  }, {
    "from": 495,
    "label": "has",
    "to": 525
  }, {
    "from": 495,
    "label": "has",
    "to": 526
  }, {
    "from": 495,
    "label": "has",
    "to": 527
  }, {
    "from": 495,
    "label": "has",
    "to": 528
  }, {
    "from": 495,
    "label": "has",
    "to": 529
  }, {
    "from": 495,
    "label": "has",
    "to": 530
  }, {
    "from": 495,
    "label": "has",
    "to": 531
  }, {
    "from": 495,
    "label": "has",
    "to": 532
  }, {
    "from": 495,
    "label": "has",
    "to": 533
  }, {
    "from": 495,
    "label": "has",
    "to": 534
  }, {
    "from": 495,
    "label": "has",
    "to": 4
  }, {
    "from": 495,
    "label": "has",
    "to": 535
  }, {
    "from": 536,
    "label": "has",
    "to": 4
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 538,
    "label": "has",
    "to": 539
  }, {
    "from": 538,
    "label": "has",
    "to": 540
  }, {
    "from": 538,
    "label": "has",
    "to": 4
  }, {
    "from": 538,
    "label": "has",
    "to": 541
  }, {
    "from": 542,
    "label": "has",
    "to": 543
  }, {
    "from": 542,
    "label": "has",
    "to": 544
  }, {
    "from": 542,
    "label": "has",
    "to": 4
  }, {
    "from": 542,
    "label": "has",
    "to": 4
  }, {
    "from": 542,
    "label": "has",
    "to": 545
  }, {
    "from": 546,
    "label": "has",
    "to": 4
  }, {
    "from": 546,
    "label": "has",
    "to": 547
  }, {
    "from": 548,
    "label": "has",
    "to": 374
  }, {
    "from": 549,
    "label": "has",
    "to": 550
  }, {
    "from": 551,
    "label": "has",
    "to": 374
  }, {
    "from": 552,
    "label": "has",
    "to": 418
  }, {
    "from": 553,
    "label": "has",
    "to": 374
  }, {
    "from": 554,
    "label": "has",
    "to": 505
  }, {
    "from": 555,
    "label": "has",
    "to": 507
  }, {
    "from": 556,
    "label": "has",
    "to": 509
  }, {
    "from": 557,
    "label": "has",
    "to": 512
  }, {
    "from": 558,
    "label": "has",
    "to": 514
  }, {
    "from": 559,
    "label": "has",
    "to": 516
  }, {
    "from": 378,
    "label": "calls",
    "to": 2
  }, {
    "from": 425,
    "label": "calls",
    "to": 2
  }, {
    "from": 425,
    "label": "calls",
    "to": 2
  }, {
    "from": 425,
    "label": "calls",
    "to": 2
  }, {
    "from": 560,
    "label": "calls",
    "to": 595
  }, {
    "from": 560,
    "label": "calls",
    "to": 596
  }, {
    "from": 479,
    "label": "calls",
    "to": 565
  }, {
    "from": 490,
    "label": "calls",
    "to": 565
  }, {
    "from": 220,
    "label": "calls",
    "to": 580
  }, {
    "from": 220,
    "label": "calls",
    "to": 580
  }, {
    "from": 220,
    "label": "calls",
    "to": 580
  }, {
    "from": 220,
    "label": "calls",
    "to": 580
  }, {
    "from": 220,
    "label": "calls",
    "to": 580
  }, {
    "from": 220,
    "label": "calls",
    "to": 580
  }, {
    "from": 220,
    "label": "calls",
    "to": 594
  }, {
    "from": 220,
    "label": "calls",
    "to": 588
  }, {
    "from": 220,
    "label": "calls",
    "to": 588
  }, {
    "from": 180,
    "label": "calls",
    "to": 585
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 220,
    "label": "calls",
    "to": 6
  }, {
    "from": 378,
    "label": "calls",
    "to": 583
  }, {
    "from": 490,
    "label": "calls",
    "to": 573
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 220,
    "label": "calls",
    "to": 591
  }, {
    "from": 425,
    "label": "calls",
    "to": 591
  }, {
    "from": 465,
    "label": "calls",
    "to": 591
  }, {
    "from": 479,
    "label": "calls",
    "to": 591
  }, {
    "from": 479,
    "label": "calls",
    "to": 591
  }, {
    "from": 490,
    "label": "calls",
    "to": 591
  }, {
    "from": 560,
    "label": "calls",
    "to": 597
  }, {
    "from": 560,
    "label": "calls",
    "to": 597
  }, {
    "from": 560,
    "label": "calls",
    "to": 597
  }, {
    "from": 560,
    "label": "calls",
    "to": 597
  }, {
    "from": 560,
    "label": "calls",
    "to": 597
  }, {
    "from": 465,
    "label": "calls",
    "to": 600
  }, {
    "from": 490,
    "label": "calls",
    "to": 600
  }, {
    "from": 378,
    "label": "calls",
    "to": 581
  }, {
    "from": 425,
    "label": "calls",
    "to": 582
  }, {
    "from": 220,
    "label": "calls",
    "to": 603
  }, {
    "from": 220,
    "label": "calls",
    "to": 570
  }, {
    "from": 560,
    "label": "calls",
    "to": 605
  }, {
    "from": 560,
    "label": "calls",
    "to": 605
  }, {
    "from": 560,
    "label": "calls",
    "to": 605
  }, {
    "from": 560,
    "label": "calls",
    "to": 605
  }, {
    "from": 560,
    "label": "calls",
    "to": 605
  }, {
    "from": 560,
    "label": "calls",
    "to": 605
  }, {
    "from": 220,
    "label": "calls",
    "to": 568
  }, {
    "from": 220,
    "label": "calls",
    "to": 587
  }, {
    "from": 220,
    "label": "calls",
    "to": 538
  }, {
    "from": 220,
    "label": "calls",
    "to": 569
  }, {
    "from": 220,
    "label": "calls",
    "to": 569
  }, {
    "from": 220,
    "label": "calls",
    "to": 589
  }, {
    "from": 7,
    "label": "calls",
    "to": 577
  }, {
    "from": 7,
    "label": "calls",
    "to": 577
  }, {
    "from": 7,
    "label": "calls",
    "to": 577
  }, {
    "from": 7,
    "label": "calls",
    "to": 577
  }, {
    "from": 7,
    "label": "calls",
    "to": 577
  }, {
    "from": 180,
    "label": "calls",
    "to": 577
  }, {
    "from": 180,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 577
  }, {
    "from": 465,
    "label": "calls",
    "to": 577
  }, {
    "from": 220,
    "label": "calls",
    "to": 563
  }, {
    "from": 220,
    "label": "calls",
    "to": 576
  }, {
    "from": 425,
    "label": "calls",
    "to": 598
  }, {
    "from": 378,
    "label": "calls",
    "to": 575
  }, {
    "from": 378,
    "label": "calls",
    "to": 575
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 180,
    "label": "calls",
    "to": 601
  }, {
    "from": 378,
    "label": "calls",
    "to": 601
  }, {
    "from": 376,
    "label": "calls",
    "to": 220
  }, {
    "from": 376,
    "label": "calls",
    "to": 220
  }, {
    "from": 376,
    "label": "calls",
    "to": 220
  }, {
    "from": 376,
    "label": "calls",
    "to": 220
  }, {
    "from": 376,
    "label": "calls",
    "to": 220
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 180,
    "label": "calls",
    "to": 5
  }, {
    "from": 180,
    "label": "calls",
    "to": 5
  }, {
    "from": 220,
    "label": "calls",
    "to": 5
  }, {
    "from": 180,
    "label": "calls",
    "to": 564
  }, {
    "from": 465,
    "label": "calls",
    "to": 564
  }, {
    "from": 220,
    "label": "calls",
    "to": 579
  }, {
    "from": 7,
    "label": "calls",
    "to": 584
  }, {
    "from": 7,
    "label": "calls",
    "to": 584
  }, {
    "from": 180,
    "label": "calls",
    "to": 584
  }, {
    "from": 220,
    "label": "calls",
    "to": 584
  }, {
    "from": 473,
    "label": "calls",
    "to": 602
  }, {
    "from": 7,
    "label": "calls",
    "to": 567
  }, {
    "from": 7,
    "label": "calls",
    "to": 567
  }, {
    "from": 220,
    "label": "calls",
    "to": 567
  }, {
    "from": 7,
    "label": "calls",
    "to": 571
  }, {
    "from": 220,
    "label": "calls",
    "to": 571
  }, {
    "from": 7,
    "label": "calls",
    "to": 572
  }, {
    "from": 7,
    "label": "calls",
    "to": 572
  }, {
    "from": 7,
    "label": "calls",
    "to": 572
  }, {
    "from": 462,
    "label": "calls",
    "to": 566
  }, {
    "from": 220,
    "label": "calls",
    "to": 586
  }, {
    "from": 220,
    "label": "calls",
    "to": 586
  }, {
    "from": 220,
    "label": "calls",
    "to": 586
  }, {
    "from": 538,
    "label": "calls",
    "to": 593
  }, {
    "from": 425,
    "label": "calls",
    "to": 592
  }, {
    "from": 560,
    "label": "calls",
    "to": 604
  }, {
    "from": 560,
    "label": "calls",
    "to": 604
  }, {
    "from": 560,
    "label": "calls",
    "to": 604
  }, {
    "from": 560,
    "label": "calls",
    "to": 604
  }, {
    "from": 560,
    "label": "calls",
    "to": 604
  }, {
    "from": 220,
    "label": "calls",
    "to": 578
  }, {
    "from": 479,
    "label": "calls",
    "to": 561
  }, {
    "from": 490,
    "label": "calls",
    "to": 561
  }, {
    "from": 378,
    "label": "calls",
    "to": 562
  }, {
    "from": 465,
    "label": "calls",
    "to": 562
  }, {
    "from": 220,
    "label": "calls",
    "to": 574
  }, {
    "from": 220,
    "label": "calls",
    "to": 574
  }, {
    "from": 560,
    "label": "calls",
    "to": 599
  }, {
    "from": 7,
    "label": "calls",
    "to": 590
  }, {
    "from": 7,
    "label": "calls",
    "to": 590
  }, {
    "from": 7,
    "label": "calls",
    "to": 590
  }, {
    "from": 1,
    "label": "contains",
    "to": 560
  }, {
    "from": 560,
    "label": "declares",
    "to": 2
  }, {
    "from": 560,
    "label": "declares",
    "to": 5
  }, {
    "from": 560,
    "label": "declares",
    "to": 6
  }, {
    "from": 560,
    "label": "declares",
    "to": 7
  }, {
    "from": 560,
    "label": "declares",
    "to": 180
  }, {
    "from": 560,
    "label": "declares",
    "to": 220
  }, {
    "from": 560,
    "label": "declares",
    "to": 376
  }, {
    "from": 560,
    "label": "declares",
    "to": 378
  }, {
    "from": 560,
    "label": "declares",
    "to": 409
  }, {
    "from": 560,
    "label": "declares",
    "to": 412
  }, {
    "from": 560,
    "label": "declares",
    "to": 421
  }, {
    "from": 560,
    "label": "declares",
    "to": 423
  }, {
    "from": 560,
    "label": "declares",
    "to": 425
  }, {
    "from": 560,
    "label": "declares",
    "to": 442
  }, {
    "from": 560,
    "label": "declares",
    "to": 450
  }, {
    "from": 560,
    "label": "declares",
    "to": 460
  }, {
    "from": 560,
    "label": "declares",
    "to": 462
  }, {
    "from": 560,
    "label": "declares",
    "to": 465
  }, {
    "from": 560,
    "label": "declares",
    "to": 473
  }, {
    "from": 560,
    "label": "declares",
    "to": 476
  }, {
    "from": 560,
    "label": "declares",
    "to": 479
  }, {
    "from": 560,
    "label": "declares",
    "to": 490
  }, {
    "from": 560,
    "label": "declares",
    "to": 495
  }, {
    "from": 560,
    "label": "declares",
    "to": 536
  }, {
    "from": 560,
    "label": "declares",
    "to": 538
  }, {
    "from": 560,
    "label": "declares",
    "to": 542
  }, {
    "from": 560,
    "label": "declares",
    "to": 546
  }, {
    "from": 560,
    "label": "declares",
    "to": 548
  }, {
    "from": 560,
    "label": "declares",
    "to": 549
  }, {
    "from": 560,
    "label": "declares",
    "to": 551
  }, {
    "from": 560,
    "label": "declares",
    "to": 552
  }, {
    "from": 560,
    "label": "declares",
    "to": 553
  }, {
    "from": 560,
    "label": "declares",
    "to": 554
  }, {
    "from": 560,
    "label": "declares",
    "to": 555
  }, {
    "from": 560,
    "label": "declares",
    "to": 556
  }, {
    "from": 560,
    "label": "declares",
    "to": 557
  }, {
    "from": 560,
    "label": "declares",
    "to": 558
  }, {
    "from": 560,
    "label": "declares",
    "to": 559
  }, {
    "from": 1,
    "label": "contains",
    "to": 606
  }, {
    "from": 1,
    "label": "contains",
    "to": 607
  }, {
    "from": 606,
    "label": "initializes",
    "to": 608
  }, {
    "from": 608,
    "label": "assigns",
    "to": 609
  }, {
    "from": 606,
    "label": "initializes",
    "to": 610
  }, {
    "from": 610,
    "label": "assigns",
    "to": 611
  }, {
    "from": 606,
    "label": "initializes",
    "to": 612
  }, {
    "from": 612,
    "label": "assigns",
    "to": 613
  }, {
    "from": 606,
    "label": "initializes",
    "to": 614
  }, {
    "from": 614,
    "label": "assigns",
    "to": 615
  }, {
    "from": 606,
    "label": "initializes",
    "to": 616
  }, {
    "from": 616,
    "label": "assigns",
    "to": 617
  }, {
    "from": 606,
    "label": "initializes",
    "to": 618
  }, {
    "from": 618,
    "label": "assigns",
    "to": 619
  }, {
    "from": 606,
    "label": "initializes",
    "to": 620
  }, {
    "from": 620,
    "label": "assigns",
    "to": 621
  }, {
    "from": 606,
    "label": "initializes",
    "to": 622
  }, {
    "from": 622,
    "label": "assigns",
    "to": 623
  }, {
    "from": 606,
    "label": "initializes",
    "to": 624
  }, {
    "from": 624,
    "label": "assigns",
    "to": 625
  }, {
    "from": 606,
    "label": "initializes",
    "to": 626
  }, {
    "from": 626,
    "label": "assigns",
    "to": 627
  }, {
    "from": 606,
    "label": "initializes",
    "to": 628
  }, {
    "from": 628,
    "label": "assigns",
    "to": 629
  }, {
    "from": 629,
    "label": "assigns",
    "to": 630
  }, {
    "from": 629,
    "label": "assigns",
    "to": 631
  }, {
    "from": 629,
    "label": "assigns",
    "to": 632
  }, {
    "from": 629,
    "label": "assigns",
    "to": 633
  }, {
    "from": 629,
    "label": "assigns",
    "to": 634
  }, {
    "from": 629,
    "label": "assigns",
    "to": 635
  }, {
    "from": 629,
    "label": "assigns",
    "to": 636
  }, {
    "from": 629,
    "label": "assigns",
    "to": 637
  }, {
    "from": 629,
    "label": "assigns",
    "to": 638
  }, {
    "from": 629,
    "label": "assigns",
    "to": 639
  }, {
    "from": 629,
    "label": "assigns",
    "to": 640
  }, {
    "from": 629,
    "label": "assigns",
    "to": 641
  }, {
    "from": 629,
    "label": "assigns",
    "to": 642
  }, {
    "from": 629,
    "label": "assigns",
    "to": 643
  }, {
    "from": 629,
    "label": "assigns",
    "to": 644
  }, {
    "from": 629,
    "label": "assigns",
    "to": 645
  }, {
    "from": 629,
    "label": "assigns",
    "to": 646
  }, {
    "from": 629,
    "label": "assigns",
    "to": 647
  }, {
    "from": 629,
    "label": "assigns",
    "to": 648
  }, {
    "from": 629,
    "label": "assigns",
    "to": 649
  }, {
    "from": 629,
    "label": "assigns",
    "to": 650
  }, {
    "from": 629,
    "label": "assigns",
    "to": 651
  }, {
    "from": 629,
    "label": "assigns",
    "to": 652
  }, {
    "from": 629,
    "label": "assigns",
    "to": 653
  }, {
    "from": 629,
    "label": "assigns",
    "to": 654
  }, {
    "from": 629,
    "label": "assigns",
    "to": 655
  }, {
    "from": 629,
    "label": "assigns",
    "to": 656
  }, {
    "from": 629,
    "label": "assigns",
    "to": 657
  }, {
    "from": 629,
    "label": "assigns",
    "to": 658
  }, {
    "from": 629,
    "label": "assigns",
    "to": 659
  }, {
    "from": 629,
    "label": "assigns",
    "to": 660
  }, {
    "from": 629,
    "label": "assigns",
    "to": 661
  }, {
    "from": 629,
    "label": "assigns",
    "to": 662
  }, {
    "from": 629,
    "label": "assigns",
    "to": 663
  }, {
    "from": 629,
    "label": "assigns",
    "to": 664
  }, {
    "from": 629,
    "label": "assigns",
    "to": 665
  }, {
    "from": 629,
    "label": "assigns",
    "to": 666
  }, {
    "from": 629,
    "label": "assigns",
    "to": 667
  }, {
    "from": 629,
    "label": "assigns",
    "to": 668
  }, {
    "from": 629,
    "label": "assigns",
    "to": 669
  }, {
    "from": 629,
    "label": "assigns",
    "to": 670
  }, {
    "from": 629,
    "label": "assigns",
    "to": 671
  }, {
    "from": 629,
    "label": "assigns",
    "to": 672
  }, {
    "from": 629,
    "label": "assigns",
    "to": 673
  }, {
    "from": 629,
    "label": "assigns",
    "to": 674
  }, {
    "from": 629,
    "label": "assigns",
    "to": 675
  }, {
    "from": 629,
    "label": "assigns",
    "to": 676
  }, {
    "from": 629,
    "label": "assigns",
    "to": 677
  }, {
    "from": 629,
    "label": "assigns",
    "to": 678
  }, {
    "from": 629,
    "label": "assigns",
    "to": 679
  }, {
    "from": 629,
    "label": "assigns",
    "to": 680
  }, {
    "from": 629,
    "label": "assigns",
    "to": 681
  }, {
    "from": 629,
    "label": "assigns",
    "to": 682
  }, {
    "from": 629,
    "label": "assigns",
    "to": 683
  }, {
    "from": 629,
    "label": "assigns",
    "to": 684
  }, {
    "from": 629,
    "label": "assigns",
    "to": 685
  }, {
    "from": 629,
    "label": "assigns",
    "to": 686
  }, {
    "from": 629,
    "label": "assigns",
    "to": 687
  }, {
    "from": 629,
    "label": "assigns",
    "to": 688
  }, {
    "from": 629,
    "label": "assigns",
    "to": 689
  }, {
    "from": 629,
    "label": "assigns",
    "to": 690
  }, {
    "from": 629,
    "label": "assigns",
    "to": 691
  }, {
    "from": 629,
    "label": "assigns",
    "to": 692
  }, {
    "from": 629,
    "label": "assigns",
    "to": 693
  }, {
    "from": 629,
    "label": "assigns",
    "to": 694
  }, {
    "from": 629,
    "label": "assigns",
    "to": 695
  }, {
    "from": 629,
    "label": "assigns",
    "to": 696
  }, {
    "from": 629,
    "label": "assigns",
    "to": 697
  }, {
    "from": 629,
    "label": "assigns",
    "to": 698
  }, {
    "from": 629,
    "label": "assigns",
    "to": 699
  }, {
    "from": 629,
    "label": "assigns",
    "to": 700
  }, {
    "from": 629,
    "label": "assigns",
    "to": 701
  }, {
    "from": 629,
    "label": "assigns",
    "to": 702
  }, {
    "from": 629,
    "label": "assigns",
    "to": 703
  }, {
    "from": 629,
    "label": "assigns",
    "to": 704
  }, {
    "from": 629,
    "label": "assigns",
    "to": 705
  }, {
    "from": 629,
    "label": "assigns",
    "to": 706
  }, {
    "from": 629,
    "label": "assigns",
    "to": 707
  }, {
    "from": 629,
    "label": "assigns",
    "to": 708
  }, {
    "from": 629,
    "label": "assigns",
    "to": 709
  }, {
    "from": 629,
    "label": "assigns",
    "to": 710
  }, {
    "from": 629,
    "label": "assigns",
    "to": 711
  }, {
    "from": 629,
    "label": "assigns",
    "to": 712
  }, {
    "from": 629,
    "label": "assigns",
    "to": 713
  }, {
    "from": 629,
    "label": "assigns",
    "to": 714
  }, {
    "from": 629,
    "label": "assigns",
    "to": 715
  }, {
    "from": 629,
    "label": "assigns",
    "to": 716
  }, {
    "from": 629,
    "label": "assigns",
    "to": 717
  }, {
    "from": 629,
    "label": "assigns",
    "to": 718
  }, {
    "from": 629,
    "label": "assigns",
    "to": 719
  }, {
    "from": 629,
    "label": "assigns",
    "to": 720
  }, {
    "from": 629,
    "label": "assigns",
    "to": 721
  }, {
    "from": 629,
    "label": "assigns",
    "to": 722
  }, {
    "from": 629,
    "label": "assigns",
    "to": 723
  }, {
    "from": 629,
    "label": "assigns",
    "to": 724
  }, {
    "from": 629,
    "label": "assigns",
    "to": 725
  }, {
    "from": 629,
    "label": "assigns",
    "to": 726
  }, {
    "from": 629,
    "label": "assigns",
    "to": 727
  }, {
    "from": 629,
    "label": "assigns",
    "to": 728
  }, {
    "from": 629,
    "label": "assigns",
    "to": 729
  }, {
    "from": 629,
    "label": "assigns",
    "to": 730
  }, {
    "from": 629,
    "label": "assigns",
    "to": 731
  }, {
    "from": 629,
    "label": "assigns",
    "to": 732
  }, {
    "from": 629,
    "label": "assigns",
    "to": 733
  }, {
    "from": 629,
    "label": "assigns",
    "to": 734
  }, {
    "from": 629,
    "label": "assigns",
    "to": 735
  }, {
    "from": 629,
    "label": "assigns",
    "to": 736
  }, {
    "from": 629,
    "label": "assigns",
    "to": 737
  }, {
    "from": 629,
    "label": "assigns",
    "to": 738
  }, {
    "from": 629,
    "label": "assigns",
    "to": 739
  }, {
    "from": 629,
    "label": "assigns",
    "to": 740
  }, {
    "from": 629,
    "label": "assigns",
    "to": 741
  }, {
    "from": 629,
    "label": "assigns",
    "to": 742
  }, {
    "from": 629,
    "label": "assigns",
    "to": 743
  }, {
    "from": 629,
    "label": "assigns",
    "to": 744
  }, {
    "from": 629,
    "label": "assigns",
    "to": 745
  }, {
    "from": 629,
    "label": "assigns",
    "to": 746
  }, {
    "from": 629,
    "label": "assigns",
    "to": 747
  }, {
    "from": 629,
    "label": "assigns",
    "to": 748
  }, {
    "from": 629,
    "label": "assigns",
    "to": 749
  }, {
    "from": 629,
    "label": "assigns",
    "to": 750
  }, {
    "from": 629,
    "label": "assigns",
    "to": 751
  }, {
    "from": 629,
    "label": "assigns",
    "to": 752
  }, {
    "from": 629,
    "label": "assigns",
    "to": 753
  }, {
    "from": 629,
    "label": "assigns",
    "to": 754
  }, {
    "from": 629,
    "label": "assigns",
    "to": 755
  }, {
    "from": 629,
    "label": "assigns",
    "to": 756
  }, {
    "from": 629,
    "label": "assigns",
    "to": 757
  }, {
    "from": 606,
    "label": "initializes",
    "to": 758
  }, {
    "from": 758,
    "label": "assigns",
    "to": 759
  }, {
    "from": 606,
    "label": "initializes",
    "to": 760
  }, {
    "from": 760,
    "label": "assigns",
    "to": 761
  }, {
    "from": 761,
    "label": "assigns",
    "to": 762
  }, {
    "from": 761,
    "label": "assigns",
    "to": 763
  }, {
    "from": 761,
    "label": "assigns",
    "to": 764
  }, {
    "from": 761,
    "label": "assigns",
    "to": 765
  }, {
    "from": 761,
    "label": "assigns",
    "to": 766
  }, {
    "from": 761,
    "label": "assigns",
    "to": 767
  }, {
    "from": 761,
    "label": "assigns",
    "to": 768
  }, {
    "from": 761,
    "label": "assigns",
    "to": 769
  }, {
    "from": 761,
    "label": "assigns",
    "to": 770
  }, {
    "from": 761,
    "label": "assigns",
    "to": 771
  }, {
    "from": 761,
    "label": "assigns",
    "to": 772
  }, {
    "from": 761,
    "label": "assigns",
    "to": 773
  }, {
    "from": 761,
    "label": "assigns",
    "to": 774
  }, {
    "from": 761,
    "label": "assigns",
    "to": 775
  }, {
    "from": 761,
    "label": "assigns",
    "to": 776
  }, {
    "from": 761,
    "label": "assigns",
    "to": 777
  }, {
    "from": 761,
    "label": "assigns",
    "to": 778
  }, {
    "from": 761,
    "label": "assigns",
    "to": 779
  }, {
    "from": 761,
    "label": "assigns",
    "to": 780
  }, {
    "from": 761,
    "label": "assigns",
    "to": 781
  }, {
    "from": 761,
    "label": "assigns",
    "to": 782
  }, {
    "from": 761,
    "label": "assigns",
    "to": 783
  }, {
    "from": 761,
    "label": "assigns",
    "to": 784
  }, {
    "from": 761,
    "label": "assigns",
    "to": 785
  }, {
    "from": 761,
    "label": "assigns",
    "to": 786
  }, {
    "from": 761,
    "label": "assigns",
    "to": 787
  }, {
    "from": 761,
    "label": "assigns",
    "to": 788
  }, {
    "from": 761,
    "label": "assigns",
    "to": 789
  }, {
    "from": 761,
    "label": "assigns",
    "to": 790
  }, {
    "from": 761,
    "label": "assigns",
    "to": 791
  }, {
    "from": 761,
    "label": "assigns",
    "to": 792
  }, {
    "from": 761,
    "label": "assigns",
    "to": 793
  }, {
    "from": 761,
    "label": "assigns",
    "to": 794
  }, {
    "from": 761,
    "label": "assigns",
    "to": 795
  }, {
    "from": 761,
    "label": "assigns",
    "to": 796
  }, {
    "from": 761,
    "label": "assigns",
    "to": 797
  }, {
    "from": 761,
    "label": "assigns",
    "to": 798
  }, {
    "from": 606,
    "label": "initializes",
    "to": 799
  }, {
    "from": 799,
    "label": "assigns",
    "to": 800
  }, {
    "from": 606,
    "label": "initializes",
    "to": 801
  }, {
    "from": 801,
    "label": "assigns",
    "to": 802
  }, {
    "from": 606,
    "label": "initializes",
    "to": 803
  }, {
    "from": 803,
    "label": "assigns",
    "to": 804
  }, {
    "from": 606,
    "label": "initializes",
    "to": 805
  }, {
    "from": 805,
    "label": "assigns",
    "to": 806
  }, {
    "from": 606,
    "label": "initializes",
    "to": 807
  }, {
    "from": 807,
    "label": "assigns",
    "to": 808
  }, {
    "from": 606,
    "label": "initializes",
    "to": 809
  }, {
    "from": 809,
    "label": "assigns",
    "to": 810
  }, {
    "from": 606,
    "label": "initializes",
    "to": 811
  }, {
    "from": 811,
    "label": "assigns",
    "to": 812
  }, {
    "from": 606,
    "label": "initializes",
    "to": 813
  }, {
    "from": 813,
    "label": "assigns",
    "to": 814
  }, {
    "from": 606,
    "label": "initializes",
    "to": 815
  }, {
    "from": 815,
    "label": "assigns",
    "to": 816
  }, {
    "from": 606,
    "label": "initializes",
    "to": 817
  }, {
    "from": 817,
    "label": "assigns",
    "to": 818
  }, {
    "from": 606,
    "label": "initializes",
    "to": 819
  }, {
    "from": 819,
    "label": "assigns",
    "to": 820
  }, {
    "from": 606,
    "label": "initializes",
    "to": 821
  }, {
    "from": 821,
    "label": "assigns",
    "to": 822
  }, {
    "from": 606,
    "label": "initializes",
    "to": 823
  }, {
    "from": 823,
    "label": "assigns",
    "to": 824
  }, {
    "from": 606,
    "label": "initializes",
    "to": 825
  }, {
    "from": 825,
    "label": "assigns",
    "to": 826
  }, {
    "from": 606,
    "label": "initializes",
    "to": 827
  }, {
    "from": 827,
    "label": "assigns",
    "to": 828
  }, {
    "from": 606,
    "label": "initializes",
    "to": 829
  }, {
    "from": 829,
    "label": "assigns",
    "to": 830
  }, {
    "from": 606,
    "label": "initializes",
    "to": 831
  }, {
    "from": 831,
    "label": "assigns",
    "to": 832
  }, {
    "from": 606,
    "label": "initializes",
    "to": 833
  }, {
    "from": 833,
    "label": "assigns",
    "to": 834
  }, {
    "from": 606,
    "label": "initializes",
    "to": 835
  }, {
    "from": 835,
    "label": "assigns",
    "to": 836
  }, {
    "from": 606,
    "label": "initializes",
    "to": 837
  }, {
    "from": 837,
    "label": "assigns",
    "to": 838
  }, {
    "from": 606,
    "label": "initializes",
    "to": 839
  }, {
    "from": 606,
    "label": "initializes",
    "to": 840
  }, {
    "from": 840,
    "label": "assigns",
    "to": 841
  }, {
    "from": 606,
    "label": "initializes",
    "to": 842
  }, {
    "from": 842,
    "label": "assigns",
    "to": 843
  }, {
    "from": 607,
    "label": "initializes",
    "to": 844
  }, {
    "from": 844,
    "label": "requires",
    "to": 845
  }, {
    "from": 607,
    "label": "initializes",
    "to": 846
  }, {
    "from": 846,
    "label": "requires",
    "to": 847
  }, {
    "from": 607,
    "label": "initializes",
    "to": 848
  }, {
    "from": 848,
    "label": "requires",
    "to": 849
  }, {
    "from": 607,
    "label": "initializes",
    "to": 850
  }, {
    "from": 850,
    "label": "requires",
    "to": 851
  }, {
    "from": 607,
    "label": "initializes",
    "to": 852
  }, {
    "from": 852,
    "label": "requires",
    "to": 853
  }, {
    "from": 373,
    "label": "hasArgument",
    "to": 548
  }, {
    "from": 373,
    "label": "hasArgument",
    "to": 551
  }, {
    "from": 373,
    "label": "hasArgument",
    "to": 553
  }, {
    "from": 416,
    "label": "hasArgument",
    "to": 549
  }, {
    "from": 417,
    "label": "hasArgument",
    "to": 552
  }, {
    "from": 504,
    "label": "hasArgument",
    "to": 554
  }, {
    "from": 506,
    "label": "hasArgument",
    "to": 555
  }, {
    "from": 508,
    "label": "hasArgument",
    "to": 556
  }, {
    "from": 511,
    "label": "hasArgument",
    "to": 557
  }, {
    "from": 513,
    "label": "hasArgument",
    "to": 558
  }, {
    "from": 515,
    "label": "hasArgument",
    "to": 559
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "image",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function iff(cond, A, B) if cond then return A else return B end end",
    "type": "function"
  }, {
    "id": 3,
    "text": "if cond then return A else return B end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "function(s) return s end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function(s) return s end",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function OnPaint(T, event )\r\n    local dc = wx.wxPaintDC(T)\r\n    T:PrepareDC( dc )\r\n\r\n    dc:DrawText( _T(\"Loaded image\"), 30, 10 )\r\n    if (T.my_square:Ok()) then\r\n        dc:DrawBitmap( T.my_square, 30, 30, false)\r\n    end\r\n\r\n    dc:DrawText( _T(\"Drawn directly\"), 150, 10 )\r\n    dc:SetBrush( wx.wxBrush( wxT(\"orange\"), wx.wxSOLID ) )\r\n    dc:SetPen( wx.wxBLACK_PEN )\r\n    dc:DrawRectangle( 150, 30, 100, 100 )\r\n    dc:SetBrush( wx.wxWHITE_BRUSH )\r\n    dc:DrawRectangle( 170, 50, 60, 60 )\r\n\r\n    if (T.my_anti:Ok()) then\r\n        dc:DrawBitmap( T.my_anti, 280, 30, false)\r\n    end\r\n\r\n    dc:DrawText( _T(\"PNG handler\"), 30, 135 )\r\n    if (T.my_horse_png:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_png, 30, 150, false)\r\n        local rect = wx.wxRect(0,0,100,100)\r\n        local sub = wx.wxBitmap( T.my_horse_png:GetSubBitmap(rect) )\r\n        dc:DrawText( _T(\"GetSubBitmap()\"), 280, 175 )\r\n        dc:DrawBitmap( sub, 280, 195, false)\r\n        sub:delete()\r\n    end\r\n\r\n    dc:DrawText( _T(\"JPEG handler\"), 30, 365 )\r\n    if (T.my_horse_jpeg:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_jpeg, 30, 380, false)\r\n    end\r\n\r\n    dc:DrawText( _T(\"Green rotated to red\"), 280, 365 )\r\n    if (T.colorized_horse_jpeg:Ok()) then\r\n        dc:DrawBitmap( T.colorized_horse_jpeg, 280, 380, false)\r\n    end\r\n\r\n    dc:DrawText( _T(\"CMYK JPEG image\"), 530, 365 )\r\n    if (T.my_cmyk_jpeg:Ok()) then\r\n        dc:DrawBitmap( T.my_cmyk_jpeg, 530, 380, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"GIF handler\"), 30, 595 )\r\n    if (T.my_horse_gif:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_gif, 30, 610, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"PCX handler\"), 30, 825 )\r\n    if (T.my_horse_pcx:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_pcx, 30, 840, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"BMP handler\"), 30, 1055 )\r\n    if (T.my_horse_bmp:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_bmp, 30, 1070, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"BMP read from memory\"), 280, 1055 )\r\n    if (T.my_horse_bmp2:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_bmp2, 280, 1070, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"PNM handler\"), 30, 1285 )\r\n    if (T.my_horse_pnm:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_pnm, 30, 1300, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"PNM handler (ascii grey)\"), 280, 1285 )\r\n    if (T.my_horse_asciigrey_pnm:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_asciigrey_pnm, 280, 1300, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"PNM handler (raw grey)\"), 530, 1285 )\r\n    if (T.my_horse_rawgrey_pnm:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_rawgrey_pnm, 530, 1300, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"TIFF handler\"), 30, 1515 )\r\n    if (T.my_horse_tiff:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_tiff, 30, 1530, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"TGA handler\"), 30, 1745 )\r\n    if (T.my_horse_tga:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_tga, 30, 1760, false )\r\n    end\r\n\r\n    dc:DrawText( _T(\"XPM handler\"), 30, 1975 )\r\n    if (T.my_horse_xpm:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_xpm, 30, 2000, false )\r\n    end\r\n\r\n\r\n    --// toucans\r\n    if T.my_toucan:Ok() then\r\n        local x,y,yy = 750,10,170\r\n\r\n        dc:DrawText(wxT(\"Original toucan\"), x+50, y)\r\n        dc:DrawBitmap(T.my_toucan, x, y+15, true)\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Flipped horizontally\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_flipped_horiz, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Flipped vertically\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_flipped_vert, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Flipped both h&v\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_flipped_both, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"In greyscale\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_grey, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Toucan's head\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_head, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Scaled with normal quality\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_scaled_normal, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Scaled with high quality\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_scaled_high, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Blured\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_blur, x, y+15, true);\r\n    end\r\n\r\n    if (T.my_smile_xbm:Ok()) then\r\n        local x,y = 300,1800\r\n\r\n        dc:DrawText( _T(\"XBM bitmap\"), x, y )\r\n        dc:DrawText( _T(\"(green on red)\"), x, y + 15 )\r\n        dc:SetTextForeground( wx.wxColour(_T(\"GREEN\")) )\r\n        dc:SetTextBackground( wx.wxColour(_T(\"RED\")) )\r\n        dc:DrawBitmap( T.my_smile_xbm, x, y + 30, false )\r\n\r\n        dc:SetTextForeground( wx.wxBLACK )\r\n        dc:DrawText( _T(\"After wxImage conversion\"), x + 120, y )\r\n        dc:DrawText( _T(\"(red on white)\"), x + 120, y + 15 )\r\n        dc:SetTextForeground( wx.wxColour(wxT(\"RED\")) )\r\n        local i = T.my_smile_xbm:ConvertToImage()\r\n        i:SetMaskColour( 255, 255, 255 )\r\n        i:Replace( 0, 0, 0,\r\n               wx.wxRED_PEN:GetColour():Red(),\r\n               wx.wxRED_PEN:GetColour():Green(),\r\n               wx.wxRED_PEN:GetColour():Blue() )\r\n        dc:DrawBitmap( wx.wxBitmap(i), x + 120, y + 30, true )\r\n        dc:SetTextForeground( wx.wxBLACK )\r\n    end\r\n\r\n\r\n    local mono = wx.wxBitmap( 60,50,1 )\r\n    local memdc = wx.wxMemoryDC()\r\n    memdc:SelectObject( mono )\r\n    memdc:SetPen( wx.wxBLACK_PEN )\r\n    memdc:SetBrush( wx.wxWHITE_BRUSH )\r\n    memdc:DrawRectangle( 0,0,60,50 )\r\n    memdc:SetTextForeground( wx.wxBLACK )\r\n--#ifndef __WXGTK20__\r\n    --// I cannot convince GTK2 to draw into mono bitmaps\r\n    memdc:DrawText( _T(\"Hi!\"), 5, 5 )\r\n--#endif\r\n    memdc:SetBrush( wx.wxBLACK_BRUSH )\r\n    memdc:DrawRectangle( 33,5,20,20 )\r\n    memdc:SetPen( wx.wxRED_PEN )\r\n    memdc:DrawLine( 5, 42, 50, 42 )\r\n    memdc:SelectObject( wx.wxNullBitmap )\r\n    memdc:delete()\r\n\r\n    if (mono:Ok()) then\r\n        local x,y = 300,1900\r\n\r\n        dc:DrawText( _T(\"Mono bitmap\"), x, y )\r\n        dc:DrawText( _T(\"(red on green)\"), x, y + 15 )\r\n        dc:SetTextForeground( wx.wxRED )\r\n        dc:SetTextBackground( wx.wxGREEN )\r\n        dc:DrawBitmap( mono, x, y + 30, false )\r\n\r\n        dc:SetTextForeground( wx.wxBLACK )\r\n        dc:DrawText( _T(\"After wxImage conversion\"), x + 120, y )\r\n        dc:DrawText( _T(\"(red on white)\"), x + 120, y + 15 )\r\n        dc:SetTextForeground( wx.wxRED )\r\n        local i = mono:ConvertToImage()\r\n        i:SetMaskColour( 255,255,255 )\r\n        i:Replace( 0,0,0,\r\n               wx.wxRED_PEN:GetColour():Red(),\r\n               wx.wxRED_PEN:GetColour():Green(),\r\n               wx.wxRED_PEN:GetColour():Blue() )\r\n        dc:DrawBitmap( wx.wxBitmap(i), x + 120, y + 30, true )\r\n        dc:SetTextForeground( wx.wxBLACK )\r\n    end\r\n    mono:delete()\r\n\r\n    --// For testing transparency\r\n    dc:SetBrush( wx.wxRED_BRUSH )\r\n    dc:DrawRectangle( 20, 2220, 560, 68 )\r\n\r\n    dc:DrawText(_T(\"XPM bitmap\"), 30, 2230 )\r\n    if ( T.m_bmpSmileXpm:Ok() ) then\r\n        dc:DrawBitmap(T.m_bmpSmileXpm, 30, 2250, true)\r\n    end\r\n\r\n    dc:DrawText(_T(\"XPM icon\"), 110, 2230 )\r\n    if ( T.m_iconSmileXpm:Ok() ) then\r\n        dc:DrawIcon(T.m_iconSmileXpm, 110, 2250)\r\n    end\r\n\r\n    --// testing icon -> bitmap conversion\r\n    --local to_blit = wx.wxBitmap( T.m_iconSmileXpm )\r\n    local to_blit = wx.wxBitmap()\r\n    to_blit:CopyFromIcon( T.m_iconSmileXpm )\r\n    if (to_blit:Ok()) then\r\n        dc:DrawText( _T(\"SubBitmap\"), 170, 2230 )\r\n        local sub = to_blit:GetSubBitmap( wx.wxRect(0,0,15,15) )\r\n        if (sub:Ok()) then\r\n            dc:DrawBitmap( sub, 170, 2250, true )\r\n        end\r\n        sub:delete()\r\n\r\n        dc:DrawText( _T(\"Enlarged\"), 250, 2230 )\r\n        dc:SetUserScale( 1.5, 1.5 )\r\n        dc:DrawBitmap( to_blit, (250/1.5), (2250/1.5), true )\r\n        dc:SetUserScale( 2, 2 )\r\n        dc:DrawBitmap( to_blit, (300/2), (2250/2), true )\r\n        dc:SetUserScale( 1.0, 1.0 )\r\n\r\n        dc:DrawText( _T(\"Blit\"), 400, 2230)\r\n        local blit_dc = wx.wxMemoryDC()\r\n        blit_dc:SelectObject( to_blit )\r\n        dc:Blit( 400, 2250, to_blit:GetWidth(), to_blit:GetHeight(), blit_dc, 0, 0, wx.wxCOPY, true )\r\n        dc:SetUserScale( 1.5, 1.5 )\r\n        dc:Blit( (450/1.5), (2250/1.5), to_blit:GetWidth(), to_blit:GetHeight(), blit_dc, 0, 0, wx.wxCOPY, true )\r\n        dc:SetUserScale( 2, 2 )\r\n        dc:Blit( (500/2), (2250/2), to_blit:GetWidth(), to_blit:GetHeight(), blit_dc, 0, 0, wx.wxCOPY, true )\r\n        dc:SetUserScale( 1.0, 1.0 )\r\n        blit_dc:SelectObject( wx.wxNullBitmap )\r\n        blit_dc:delete()\r\n    end\r\n    to_blit:delete()\r\n\r\n    dc:DrawText( _T(\"ICO handler (1st image)\"), 30, 2290 )\r\n    if (T.my_horse_ico32:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_ico32, 30, 2330, true )\r\n    end\r\n\r\n    dc:DrawText( _T(\"ICO handler (2nd image)\"), 230, 2290 )\r\n    if (T.my_horse_ico16:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_ico16, 230, 2330, true )\r\n    end\r\n\r\n    dc:DrawText( _T(\"ICO handler (best image)\"), 430, 2290 )\r\n    if (T.my_horse_ico:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_ico, 430, 2330, true )\r\n    end\r\n\r\n    dc:DrawText( _T(\"CUR handler\"), 30, 2390 )\r\n    if (T.my_horse_cur:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_cur, 30, 2420, true )\r\n        dc:SetPen (wx.wxRED_PEN)\r\n        dc:DrawLine (T.xH-10,T.yH,T.xH+10,T.yH)\r\n        dc:DrawLine (T.xH,T.yH-10,T.xH,T.yH+10)\r\n    end\r\n\r\n    dc:DrawText( _T(\"ANI handler\"), 230, 2390 )\r\n    for i=0, T.m_ani_images-1 do\r\n        if (T.my_horse_ani[i]:Ok()) then\r\n            dc:DrawBitmap( T.my_horse_ani[i], 230 + i * 2 * T.my_horse_ani[i]:GetWidth() , 2420, true )\r\n        end\r\n    end\r\n\r\n    dc:delete()\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local dc = wx.wxPaintDC(T)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "T:PrepareDC( dc )",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "dc:DrawText( _T(\"Loaded image\"), 30, 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "if (T.my_square:Ok()) then\r\n        dc:DrawBitmap( T.my_square, 30, 30, false)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "dc:DrawBitmap( T.my_square, 30, 30, false)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "dc:DrawText( _T(\"Drawn directly\"), 150, 10 )",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "dc:SetBrush( wx.wxBrush( wxT(\"orange\"), wx.wxSOLID ) )",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "dc:SetPen( wx.wxBLACK_PEN )",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "dc:DrawRectangle( 150, 30, 100, 100 )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "dc:SetBrush( wx.wxWHITE_BRUSH )",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "dc:DrawRectangle( 170, 50, 60, 60 )",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if (T.my_anti:Ok()) then\r\n        dc:DrawBitmap( T.my_anti, 280, 30, false)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "dc:DrawBitmap( T.my_anti, 280, 30, false)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "dc:DrawText( _T(\"PNG handler\"), 30, 135 )",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if (T.my_horse_png:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_png, 30, 150, false)\r\n        local rect = wx.wxRect(0,0,100,100)\r\n        local sub = wx.wxBitmap( T.my_horse_png:GetSubBitmap(rect) )\r\n        dc:DrawText( _T(\"GetSubBitmap()\"), 280, 175 )\r\n        dc:DrawBitmap( sub, 280, 195, false)\r\n        sub:delete()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "dc:DrawBitmap( T.my_horse_png, 30, 150, false)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "local rect = wx.wxRect(0,0,100,100)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local sub = wx.wxBitmap( T.my_horse_png:GetSubBitmap(rect) )",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "dc:DrawText( _T(\"GetSubBitmap()\"), 280, 175 )",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "dc:DrawBitmap( sub, 280, 195, false)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "sub:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "dc:DrawText( _T(\"JPEG handler\"), 30, 365 )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "if (T.my_horse_jpeg:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_jpeg, 30, 380, false)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "dc:DrawBitmap( T.my_horse_jpeg, 30, 380, false)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "dc:DrawText( _T(\"Green rotated to red\"), 280, 365 )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if (T.colorized_horse_jpeg:Ok()) then\r\n        dc:DrawBitmap( T.colorized_horse_jpeg, 280, 380, false)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "dc:DrawBitmap( T.colorized_horse_jpeg, 280, 380, false)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "dc:DrawText( _T(\"CMYK JPEG image\"), 530, 365 )",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if (T.my_cmyk_jpeg:Ok()) then\r\n        dc:DrawBitmap( T.my_cmyk_jpeg, 530, 380, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "dc:DrawBitmap( T.my_cmyk_jpeg, 530, 380, false )",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "dc:DrawText( _T(\"GIF handler\"), 30, 595 )",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if (T.my_horse_gif:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_gif, 30, 610, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "dc:DrawBitmap( T.my_horse_gif, 30, 610, false )",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "dc:DrawText( _T(\"PCX handler\"), 30, 825 )",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "if (T.my_horse_pcx:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_pcx, 30, 840, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "dc:DrawBitmap( T.my_horse_pcx, 30, 840, false )",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "dc:DrawText( _T(\"BMP handler\"), 30, 1055 )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "if (T.my_horse_bmp:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_bmp, 30, 1070, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "dc:DrawBitmap( T.my_horse_bmp, 30, 1070, false )",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "dc:DrawText( _T(\"BMP read from memory\"), 280, 1055 )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "if (T.my_horse_bmp2:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_bmp2, 280, 1070, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "dc:DrawBitmap( T.my_horse_bmp2, 280, 1070, false )",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "dc:DrawText( _T(\"PNM handler\"), 30, 1285 )",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "if (T.my_horse_pnm:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_pnm, 30, 1300, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "dc:DrawBitmap( T.my_horse_pnm, 30, 1300, false )",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "dc:DrawText( _T(\"PNM handler (ascii grey)\"), 280, 1285 )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "if (T.my_horse_asciigrey_pnm:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_asciigrey_pnm, 280, 1300, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "dc:DrawBitmap( T.my_horse_asciigrey_pnm, 280, 1300, false )",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "dc:DrawText( _T(\"PNM handler (raw grey)\"), 530, 1285 )",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "if (T.my_horse_rawgrey_pnm:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_rawgrey_pnm, 530, 1300, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "dc:DrawBitmap( T.my_horse_rawgrey_pnm, 530, 1300, false )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "dc:DrawText( _T(\"TIFF handler\"), 30, 1515 )",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "if (T.my_horse_tiff:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_tiff, 30, 1530, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "dc:DrawBitmap( T.my_horse_tiff, 30, 1530, false )",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "dc:DrawText( _T(\"TGA handler\"), 30, 1745 )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "if (T.my_horse_tga:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_tga, 30, 1760, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "dc:DrawBitmap( T.my_horse_tga, 30, 1760, false )",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "dc:DrawText( _T(\"XPM handler\"), 30, 1975 )",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if (T.my_horse_xpm:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_xpm, 30, 2000, false )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "dc:DrawBitmap( T.my_horse_xpm, 30, 2000, false )",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "if T.my_toucan:Ok() then\r\n        local x,y,yy = 750,10,170\r\n\r\n        dc:DrawText(wxT(\"Original toucan\"), x+50, y)\r\n        dc:DrawBitmap(T.my_toucan, x, y+15, true)\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Flipped horizontally\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_flipped_horiz, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Flipped vertically\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_flipped_vert, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Flipped both h&v\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_flipped_both, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"In greyscale\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_grey, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Toucan's head\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_head, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Scaled with normal quality\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_scaled_normal, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Scaled with high quality\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_scaled_high, x, y+15, true);\r\n        y = y+yy\r\n        dc:DrawText(wxT(\"Blured\"), x+50, y);\r\n        dc:DrawBitmap(T.my_toucan_blur, x, y+15, true);\r\n    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local x,y,yy = 750,10,170",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "dc:DrawText(wxT(\"Original toucan\"), x+50, y)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "dc:DrawBitmap(T.my_toucan, x, y+15, true)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "y = y+yy",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "dc:DrawText(wxT(\"Flipped horizontally\"), x+50, y)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "dc:DrawBitmap(T.my_toucan_flipped_horiz, x, y+15, true)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "dc:DrawText(wxT(\"Flipped vertically\"), x+50, y)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "dc:DrawBitmap(T.my_toucan_flipped_vert, x, y+15, true)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "dc:DrawText(wxT(\"Flipped both h&v\"), x+50, y)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "dc:DrawBitmap(T.my_toucan_flipped_both, x, y+15, true)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "dc:DrawText(wxT(\"In greyscale\"), x+50, y)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "dc:DrawBitmap(T.my_toucan_grey, x, y+15, true)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "dc:DrawText(wxT(\"Toucan's head\"), x+50, y)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "dc:DrawBitmap(T.my_toucan_head, x, y+15, true)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "dc:DrawText(wxT(\"Scaled with normal quality\"), x+50, y)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "dc:DrawBitmap(T.my_toucan_scaled_normal, x, y+15, true)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "dc:DrawText(wxT(\"Scaled with high quality\"), x+50, y)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "dc:DrawBitmap(T.my_toucan_scaled_high, x, y+15, true)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "dc:DrawText(wxT(\"Blured\"), x+50, y)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "dc:DrawBitmap(T.my_toucan_blur, x, y+15, true)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "if (T.my_smile_xbm:Ok()) then\r\n        local x,y = 300,1800\r\n\r\n        dc:DrawText( _T(\"XBM bitmap\"), x, y )\r\n        dc:DrawText( _T(\"(green on red)\"), x, y + 15 )\r\n        dc:SetTextForeground( wx.wxColour(_T(\"GREEN\")) )\r\n        dc:SetTextBackground( wx.wxColour(_T(\"RED\")) )\r\n        dc:DrawBitmap( T.my_smile_xbm, x, y + 30, false )\r\n\r\n        dc:SetTextForeground( wx.wxBLACK )\r\n        dc:DrawText( _T(\"After wxImage conversion\"), x + 120, y )\r\n        dc:DrawText( _T(\"(red on white)\"), x + 120, y + 15 )\r\n        dc:SetTextForeground( wx.wxColour(wxT(\"RED\")) )\r\n        local i = T.my_smile_xbm:ConvertToImage()\r\n        i:SetMaskColour( 255, 255, 255 )\r\n        i:Replace( 0, 0, 0,\r\n               wx.wxRED_PEN:GetColour():Red(),\r\n               wx.wxRED_PEN:GetColour():Green(),\r\n               wx.wxRED_PEN:GetColour():Blue() )\r\n        dc:DrawBitmap( wx.wxBitmap(i), x + 120, y + 30, true )\r\n        dc:SetTextForeground( wx.wxBLACK )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "local x,y = 300,1800",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "dc:DrawText( _T(\"XBM bitmap\"), x, y )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "dc:DrawText( _T(\"(green on red)\"), x, y + 15 )",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "dc:SetTextForeground( wx.wxColour(_T(\"GREEN\")) )",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "dc:SetTextBackground( wx.wxColour(_T(\"RED\")) )",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "dc:DrawBitmap( T.my_smile_xbm, x, y + 30, false )",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "dc:SetTextForeground( wx.wxBLACK )",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "dc:DrawText( _T(\"After wxImage conversion\"), x + 120, y )",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "dc:DrawText( _T(\"(red on white)\"), x + 120, y + 15 )",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "dc:SetTextForeground( wx.wxColour(wxT(\"RED\")) )",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "local i = T.my_smile_xbm:ConvertToImage()",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "i:SetMaskColour( 255, 255, 255 )",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "i:Replace( 0, 0, 0,\r\n               wx.wxRED_PEN:GetColour():Red(),\r\n               wx.wxRED_PEN:GetColour():Green(),\r\n               wx.wxRED_PEN:GetColour():Blue() )",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "dc:DrawBitmap( wx.wxBitmap(i), x + 120, y + 30, true )",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "local mono = wx.wxBitmap( 60,50,1 )",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local memdc = wx.wxMemoryDC()",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "memdc:SelectObject( mono )",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "memdc:SetPen( wx.wxBLACK_PEN )",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "memdc:SetBrush( wx.wxWHITE_BRUSH )",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "memdc:DrawRectangle( 0,0,60,50 )",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "memdc:SetTextForeground( wx.wxBLACK )",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "memdc:DrawText( _T(\"Hi!\"), 5, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "memdc:SetBrush( wx.wxBLACK_BRUSH )",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "memdc:DrawRectangle( 33,5,20,20 )",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "memdc:SetPen( wx.wxRED_PEN )",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "memdc:DrawLine( 5, 42, 50, 42 )",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "memdc:SelectObject( wx.wxNullBitmap )",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "memdc:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "if (mono:Ok()) then\r\n        local x,y = 300,1900\r\n\r\n        dc:DrawText( _T(\"Mono bitmap\"), x, y )\r\n        dc:DrawText( _T(\"(red on green)\"), x, y + 15 )\r\n        dc:SetTextForeground( wx.wxRED )\r\n        dc:SetTextBackground( wx.wxGREEN )\r\n        dc:DrawBitmap( mono, x, y + 30, false )\r\n\r\n        dc:SetTextForeground( wx.wxBLACK )\r\n        dc:DrawText( _T(\"After wxImage conversion\"), x + 120, y )\r\n        dc:DrawText( _T(\"(red on white)\"), x + 120, y + 15 )\r\n        dc:SetTextForeground( wx.wxRED )\r\n        local i = mono:ConvertToImage()\r\n        i:SetMaskColour( 255,255,255 )\r\n        i:Replace( 0,0,0,\r\n               wx.wxRED_PEN:GetColour():Red(),\r\n               wx.wxRED_PEN:GetColour():Green(),\r\n               wx.wxRED_PEN:GetColour():Blue() )\r\n        dc:DrawBitmap( wx.wxBitmap(i), x + 120, y + 30, true )\r\n        dc:SetTextForeground( wx.wxBLACK )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "local x,y = 300,1900",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "dc:DrawText( _T(\"Mono bitmap\"), x, y )",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "dc:DrawText( _T(\"(red on green)\"), x, y + 15 )",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "dc:SetTextForeground( wx.wxRED )",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "dc:SetTextBackground( wx.wxGREEN )",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "dc:DrawBitmap( mono, x, y + 30, false )",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "local i = mono:ConvertToImage()",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "i:SetMaskColour( 255,255,255 )",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "i:Replace( 0,0,0,\r\n               wx.wxRED_PEN:GetColour():Red(),\r\n               wx.wxRED_PEN:GetColour():Green(),\r\n               wx.wxRED_PEN:GetColour():Blue() )",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "mono:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "dc:SetBrush( wx.wxRED_BRUSH )",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "dc:DrawRectangle( 20, 2220, 560, 68 )",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "dc:DrawText(_T(\"XPM bitmap\"), 30, 2230 )",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "if ( T.m_bmpSmileXpm:Ok() ) then\r\n        dc:DrawBitmap(T.m_bmpSmileXpm, 30, 2250, true)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "dc:DrawBitmap(T.m_bmpSmileXpm, 30, 2250, true)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "dc:DrawText(_T(\"XPM icon\"), 110, 2230 )",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "if ( T.m_iconSmileXpm:Ok() ) then\r\n        dc:DrawIcon(T.m_iconSmileXpm, 110, 2250)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "dc:DrawIcon(T.m_iconSmileXpm, 110, 2250)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "local to_blit = wx.wxBitmap()",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "to_blit:CopyFromIcon( T.m_iconSmileXpm )",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "if (to_blit:Ok()) then\r\n        dc:DrawText( _T(\"SubBitmap\"), 170, 2230 )\r\n        local sub = to_blit:GetSubBitmap( wx.wxRect(0,0,15,15) )\r\n        if (sub:Ok()) then\r\n            dc:DrawBitmap( sub, 170, 2250, true )\r\n        end\r\n        sub:delete()\r\n\r\n        dc:DrawText( _T(\"Enlarged\"), 250, 2230 )\r\n        dc:SetUserScale( 1.5, 1.5 )\r\n        dc:DrawBitmap( to_blit, (250/1.5), (2250/1.5), true )\r\n        dc:SetUserScale( 2, 2 )\r\n        dc:DrawBitmap( to_blit, (300/2), (2250/2), true )\r\n        dc:SetUserScale( 1.0, 1.0 )\r\n\r\n        dc:DrawText( _T(\"Blit\"), 400, 2230)\r\n        local blit_dc = wx.wxMemoryDC()\r\n        blit_dc:SelectObject( to_blit )\r\n        dc:Blit( 400, 2250, to_blit:GetWidth(), to_blit:GetHeight(), blit_dc, 0, 0, wx.wxCOPY, true )\r\n        dc:SetUserScale( 1.5, 1.5 )\r\n        dc:Blit( (450/1.5), (2250/1.5), to_blit:GetWidth(), to_blit:GetHeight(), blit_dc, 0, 0, wx.wxCOPY, true )\r\n        dc:SetUserScale( 2, 2 )\r\n        dc:Blit( (500/2), (2250/2), to_blit:GetWidth(), to_blit:GetHeight(), blit_dc, 0, 0, wx.wxCOPY, true )\r\n        dc:SetUserScale( 1.0, 1.0 )\r\n        blit_dc:SelectObject( wx.wxNullBitmap )\r\n        blit_dc:delete()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "dc:DrawText( _T(\"SubBitmap\"), 170, 2230 )",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "local sub = to_blit:GetSubBitmap( wx.wxRect(0,0,15,15) )",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "if (sub:Ok()) then\r\n            dc:DrawBitmap( sub, 170, 2250, true )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "dc:DrawBitmap( sub, 170, 2250, true )",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "dc:DrawText( _T(\"Enlarged\"), 250, 2230 )",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "dc:SetUserScale( 1.5, 1.5 )",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "dc:DrawBitmap( to_blit, (250/1.5), (2250/1.5), true )",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "dc:SetUserScale( 2, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "dc:DrawBitmap( to_blit, (300/2), (2250/2), true )",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "dc:SetUserScale( 1.0, 1.0 )",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "dc:DrawText( _T(\"Blit\"), 400, 2230)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "local blit_dc = wx.wxMemoryDC()",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "blit_dc:SelectObject( to_blit )",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "dc:Blit( 400, 2250, to_blit:GetWidth(), to_blit:GetHeight(), blit_dc, 0, 0, wx.wxCOPY, true )",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "dc:Blit( (450/1.5), (2250/1.5), to_blit:GetWidth(), to_blit:GetHeight(), blit_dc, 0, 0, wx.wxCOPY, true )",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "dc:Blit( (500/2), (2250/2), to_blit:GetWidth(), to_blit:GetHeight(), blit_dc, 0, 0, wx.wxCOPY, true )",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "blit_dc:SelectObject( wx.wxNullBitmap )",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "blit_dc:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "to_blit:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "dc:DrawText( _T(\"ICO handler (1st image)\"), 30, 2290 )",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "if (T.my_horse_ico32:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_ico32, 30, 2330, true )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "dc:DrawBitmap( T.my_horse_ico32, 30, 2330, true )",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "dc:DrawText( _T(\"ICO handler (2nd image)\"), 230, 2290 )",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "if (T.my_horse_ico16:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_ico16, 230, 2330, true )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "dc:DrawBitmap( T.my_horse_ico16, 230, 2330, true )",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "dc:DrawText( _T(\"ICO handler (best image)\"), 430, 2290 )",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "if (T.my_horse_ico:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_ico, 430, 2330, true )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "dc:DrawBitmap( T.my_horse_ico, 430, 2330, true )",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "dc:DrawText( _T(\"CUR handler\"), 30, 2390 )",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "if (T.my_horse_cur:Ok()) then\r\n        dc:DrawBitmap( T.my_horse_cur, 30, 2420, true )\r\n        dc:SetPen (wx.wxRED_PEN)\r\n        dc:DrawLine (T.xH-10,T.yH,T.xH+10,T.yH)\r\n        dc:DrawLine (T.xH,T.yH-10,T.xH,T.yH+10)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "dc:DrawBitmap( T.my_horse_cur, 30, 2420, true )",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "dc:SetPen (wx.wxRED_PEN)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "dc:DrawLine (T.xH-10,T.yH,T.xH+10,T.yH)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "dc:DrawLine (T.xH,T.yH-10,T.xH,T.yH+10)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "dc:DrawText( _T(\"ANI handler\"), 230, 2390 )",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "for i=0, T.m_ani_images-1 do\r\n        if (T.my_horse_ani[i]:Ok()) then\r\n            dc:DrawBitmap( T.my_horse_ani[i], 230 + i * 2 * T.my_horse_ani[i]:GetWidth() , 2420, true )\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 176,
    "text": "if (T.my_horse_ani[i]:Ok()) then\r\n            dc:DrawBitmap( T.my_horse_ani[i], 230 + i * 2 * T.my_horse_ani[i]:GetWidth() , 2420, true )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "dc:DrawBitmap( T.my_horse_ani[i], 230 + i * 2 * T.my_horse_ani[i]:GetWidth() , 2420, true )",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "dc:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "local function CreateAntiAliasedBitmap(T)\r\n    local bitmap = wx.wxBitmap( 300, 300 )\r\n    local dc = wx.wxMemoryDC()\r\n    dc:SelectObject( bitmap )\r\n    dc:Clear()\r\n\r\n    dc:SetFont( wx.wxFont( 24, wx.wxDECORATIVE, wx.wxNORMAL, wx.wxNORMAL) )\r\n    dc:SetTextForeground( wx.wxRED )\r\n    dc:DrawText( _T(\"This is anti-aliased Text.\"), 20, 5 )\r\n    dc:DrawText( _T(\"And a Rectangle.\"), 20, 45 )\r\n\r\n    dc:SetBrush( wx.wxRED_BRUSH )\r\n    dc:SetPen( wx.wxTRANSPARENT_PEN )\r\n    dc:DrawRoundedRectangle( 20, 85, 200, 180, 20 )\r\n\r\n    local original= bitmap:ConvertToImage()\r\n    local anti = wx.wxImage( 150, 150 )\r\n\r\n    --/* This is quite slow, but safe. Use wxImage::GetData() for speed instead. */\r\n    if USE_QUITE_SLOW then\r\n\r\n    local orig_data = original:GetData() -- get the data as a RGBRGB.. string\r\n    local w = original:GetWidth()\r\n\r\n    for y = 1, 149-1 do\r\n        for x = 1, 149-1 do\r\n\r\n            local red, green, blue = 0, 0, 0\r\n\r\n            if false then\r\n                red = original:GetRed( x*2, y*2 ) +\r\n                      original:GetRed( x*2-1, y*2 ) +\r\n                      original:GetRed( x*2, y*2+1 ) +\r\n                      original:GetRed( x*2+1, y*2+1 )\r\n                red = red/4\r\n\r\n                green = original:GetGreen( x*2, y*2 ) +\r\n                        original:GetGreen( x*2-1, y*2 ) +\r\n                        original:GetGreen( x*2, y*2+1 ) +\r\n                        original:GetGreen( x*2+1, y*2+1 )\r\n                green = green/4\r\n\r\n                blue = original:GetBlue( x*2, y*2 ) +\r\n                       original:GetBlue( x*2-1, y*2 ) +\r\n                       original:GetBlue( x*2, y*2+1 ) +\r\n                       original:GetBlue( x*2+1, y*2+1 )\r\n                blue = blue/4\r\n            else\r\n                local i1 = ((x*2  ) + (y*2  )*w)*3 + 1 -- +1 for Lua string starting at 1\r\n                local i2 = ((x*2-1) + (y*2  )*w)*3 + 1\r\n                local i3 = ((x*2  ) + (y*2+1)*w)*3 + 1\r\n                local i4 = ((x*2+1) + (y*2+1)*w)*3 + 1\r\n\r\n                red   = string.byte(orig_data, i1  ) +\r\n                        string.byte(orig_data, i2  ) +\r\n                        string.byte(orig_data, i3  ) +\r\n                        string.byte(orig_data, i4  )\r\n                green = string.byte(orig_data, i1+1) +\r\n                        string.byte(orig_data, i2+1) +\r\n                        string.byte(orig_data, i3+1) +\r\n                        string.byte(orig_data, i4+1)\r\n                blue  = string.byte(orig_data, i1+2) +\r\n                        string.byte(orig_data, i2+2) +\r\n                        string.byte(orig_data, i3+2) +\r\n                        string.byte(orig_data, i4+2)\r\n\r\n                red   = red/4\r\n                green = green/4\r\n                blue  = blue/4\r\n            end\r\n\r\n            anti:SetRGB( x, y, red, green, blue )\r\n        end\r\n    end\r\n    end\r\n    T.my_anti = wx.wxBitmap(anti)\r\n\r\n    original:delete()\r\n    anti:delete()\r\n\r\n    dc:delete()\r\n    bitmap:delete()\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "local bitmap = wx.wxBitmap( 300, 300 )",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "local dc = wx.wxMemoryDC()",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "dc:SelectObject( bitmap )",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "dc:Clear()",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "dc:SetFont( wx.wxFont( 24, wx.wxDECORATIVE, wx.wxNORMAL, wx.wxNORMAL) )",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "dc:DrawText( _T(\"This is anti-aliased Text.\"), 20, 5 )",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "dc:DrawText( _T(\"And a Rectangle.\"), 20, 45 )",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "dc:SetPen( wx.wxTRANSPARENT_PEN )",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "dc:DrawRoundedRectangle( 20, 85, 200, 180, 20 )",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "local original= bitmap:ConvertToImage()",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "local anti = wx.wxImage( 150, 150 )",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "if USE_QUITE_SLOW then\r\n\r\n    local orig_data = original:GetData() -- get the data as a RGBRGB.. string\r\n    local w = original:GetWidth()\r\n\r\n    for y = 1, 149-1 do\r\n        for x = 1, 149-1 do\r\n\r\n            local red, green, blue = 0, 0, 0\r\n\r\n            if false then\r\n                red = original:GetRed( x*2, y*2 ) +\r\n                      original:GetRed( x*2-1, y*2 ) +\r\n                      original:GetRed( x*2, y*2+1 ) +\r\n                      original:GetRed( x*2+1, y*2+1 )\r\n                red = red/4\r\n\r\n                green = original:GetGreen( x*2, y*2 ) +\r\n                        original:GetGreen( x*2-1, y*2 ) +\r\n                        original:GetGreen( x*2, y*2+1 ) +\r\n                        original:GetGreen( x*2+1, y*2+1 )\r\n                green = green/4\r\n\r\n                blue = original:GetBlue( x*2, y*2 ) +\r\n                       original:GetBlue( x*2-1, y*2 ) +\r\n                       original:GetBlue( x*2, y*2+1 ) +\r\n                       original:GetBlue( x*2+1, y*2+1 )\r\n                blue = blue/4\r\n            else\r\n                local i1 = ((x*2  ) + (y*2  )*w)*3 + 1 -- +1 for Lua string starting at 1\r\n                local i2 = ((x*2-1) + (y*2  )*w)*3 + 1\r\n                local i3 = ((x*2  ) + (y*2+1)*w)*3 + 1\r\n                local i4 = ((x*2+1) + (y*2+1)*w)*3 + 1\r\n\r\n                red   = string.byte(orig_data, i1  ) +\r\n                        string.byte(orig_data, i2  ) +\r\n                        string.byte(orig_data, i3  ) +\r\n                        string.byte(orig_data, i4  )\r\n                green = string.byte(orig_data, i1+1) +\r\n                        string.byte(orig_data, i2+1) +\r\n                        string.byte(orig_data, i3+1) +\r\n                        string.byte(orig_data, i4+1)\r\n                blue  = string.byte(orig_data, i1+2) +\r\n                        string.byte(orig_data, i2+2) +\r\n                        string.byte(orig_data, i3+2) +\r\n                        string.byte(orig_data, i4+2)\r\n\r\n                red   = red/4\r\n                green = green/4\r\n                blue  = blue/4\r\n            end\r\n\r\n            anti:SetRGB( x, y, red, green, blue )\r\n        end\r\n    end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "local orig_data = original:GetData()",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "local w = original:GetWidth()",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "for y = 1, 149-1 do\r\n        for x = 1, 149-1 do\r\n\r\n            local red, green, blue = 0, 0, 0\r\n\r\n            if false then\r\n                red = original:GetRed( x*2, y*2 ) +\r\n                      original:GetRed( x*2-1, y*2 ) +\r\n                      original:GetRed( x*2, y*2+1 ) +\r\n                      original:GetRed( x*2+1, y*2+1 )\r\n                red = red/4\r\n\r\n                green = original:GetGreen( x*2, y*2 ) +\r\n                        original:GetGreen( x*2-1, y*2 ) +\r\n                        original:GetGreen( x*2, y*2+1 ) +\r\n                        original:GetGreen( x*2+1, y*2+1 )\r\n                green = green/4\r\n\r\n                blue = original:GetBlue( x*2, y*2 ) +\r\n                       original:GetBlue( x*2-1, y*2 ) +\r\n                       original:GetBlue( x*2, y*2+1 ) +\r\n                       original:GetBlue( x*2+1, y*2+1 )\r\n                blue = blue/4\r\n            else\r\n                local i1 = ((x*2  ) + (y*2  )*w)*3 + 1 -- +1 for Lua string starting at 1\r\n                local i2 = ((x*2-1) + (y*2  )*w)*3 + 1\r\n                local i3 = ((x*2  ) + (y*2+1)*w)*3 + 1\r\n                local i4 = ((x*2+1) + (y*2+1)*w)*3 + 1\r\n\r\n                red   = string.byte(orig_data, i1  ) +\r\n                        string.byte(orig_data, i2  ) +\r\n                        string.byte(orig_data, i3  ) +\r\n                        string.byte(orig_data, i4  )\r\n                green = string.byte(orig_data, i1+1) +\r\n                        string.byte(orig_data, i2+1) +\r\n                        string.byte(orig_data, i3+1) +\r\n                        string.byte(orig_data, i4+1)\r\n                blue  = string.byte(orig_data, i1+2) +\r\n                        string.byte(orig_data, i2+2) +\r\n                        string.byte(orig_data, i3+2) +\r\n                        string.byte(orig_data, i4+2)\r\n\r\n                red   = red/4\r\n                green = green/4\r\n                blue  = blue/4\r\n            end\r\n\r\n            anti:SetRGB( x, y, red, green, blue )\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 196,
    "text": "for x = 1, 149-1 do\r\n\r\n            local red, green, blue = 0, 0, 0\r\n\r\n            if false then\r\n                red = original:GetRed( x*2, y*2 ) +\r\n                      original:GetRed( x*2-1, y*2 ) +\r\n                      original:GetRed( x*2, y*2+1 ) +\r\n                      original:GetRed( x*2+1, y*2+1 )\r\n                red = red/4\r\n\r\n                green = original:GetGreen( x*2, y*2 ) +\r\n                        original:GetGreen( x*2-1, y*2 ) +\r\n                        original:GetGreen( x*2, y*2+1 ) +\r\n                        original:GetGreen( x*2+1, y*2+1 )\r\n                green = green/4\r\n\r\n                blue = original:GetBlue( x*2, y*2 ) +\r\n                       original:GetBlue( x*2-1, y*2 ) +\r\n                       original:GetBlue( x*2, y*2+1 ) +\r\n                       original:GetBlue( x*2+1, y*2+1 )\r\n                blue = blue/4\r\n            else\r\n                local i1 = ((x*2  ) + (y*2  )*w)*3 + 1 -- +1 for Lua string starting at 1\r\n                local i2 = ((x*2-1) + (y*2  )*w)*3 + 1\r\n                local i3 = ((x*2  ) + (y*2+1)*w)*3 + 1\r\n                local i4 = ((x*2+1) + (y*2+1)*w)*3 + 1\r\n\r\n                red   = string.byte(orig_data, i1  ) +\r\n                        string.byte(orig_data, i2  ) +\r\n                        string.byte(orig_data, i3  ) +\r\n                        string.byte(orig_data, i4  )\r\n                green = string.byte(orig_data, i1+1) +\r\n                        string.byte(orig_data, i2+1) +\r\n                        string.byte(orig_data, i3+1) +\r\n                        string.byte(orig_data, i4+1)\r\n                blue  = string.byte(orig_data, i1+2) +\r\n                        string.byte(orig_data, i2+2) +\r\n                        string.byte(orig_data, i3+2) +\r\n                        string.byte(orig_data, i4+2)\r\n\r\n                red   = red/4\r\n                green = green/4\r\n                blue  = blue/4\r\n            end\r\n\r\n            anti:SetRGB( x, y, red, green, blue )\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 197,
    "text": "local red, green, blue = 0, 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 198,
    "text": "if false then\r\n                red = original:GetRed( x*2, y*2 ) +\r\n                      original:GetRed( x*2-1, y*2 ) +\r\n                      original:GetRed( x*2, y*2+1 ) +\r\n                      original:GetRed( x*2+1, y*2+1 )\r\n                red = red/4\r\n\r\n                green = original:GetGreen( x*2, y*2 ) +\r\n                        original:GetGreen( x*2-1, y*2 ) +\r\n                        original:GetGreen( x*2, y*2+1 ) +\r\n                        original:GetGreen( x*2+1, y*2+1 )\r\n                green = green/4\r\n\r\n                blue = original:GetBlue( x*2, y*2 ) +\r\n                       original:GetBlue( x*2-1, y*2 ) +\r\n                       original:GetBlue( x*2, y*2+1 ) +\r\n                       original:GetBlue( x*2+1, y*2+1 )\r\n                blue = blue/4\r\n            else\r\n                local i1 = ((x*2  ) + (y*2  )*w)*3 + 1 -- +1 for Lua string starting at 1\r\n                local i2 = ((x*2-1) + (y*2  )*w)*3 + 1\r\n                local i3 = ((x*2  ) + (y*2+1)*w)*3 + 1\r\n                local i4 = ((x*2+1) + (y*2+1)*w)*3 + 1\r\n\r\n                red   = string.byte(orig_data, i1  ) +\r\n                        string.byte(orig_data, i2  ) +\r\n                        string.byte(orig_data, i3  ) +\r\n                        string.byte(orig_data, i4  )\r\n                green = string.byte(orig_data, i1+1) +\r\n                        string.byte(orig_data, i2+1) +\r\n                        string.byte(orig_data, i3+1) +\r\n                        string.byte(orig_data, i4+1)\r\n                blue  = string.byte(orig_data, i1+2) +\r\n                        string.byte(orig_data, i2+2) +\r\n                        string.byte(orig_data, i3+2) +\r\n                        string.byte(orig_data, i4+2)\r\n\r\n                red   = red/4\r\n                green = green/4\r\n                blue  = blue/4\r\n            end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "red = original:GetRed( x*2, y*2 ) +\r\n                      original:GetRed( x*2-1, y*2 ) +\r\n                      original:GetRed( x*2, y*2+1 ) +\r\n                      original:GetRed( x*2+1, y*2+1 )",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "red = red/4",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "green = original:GetGreen( x*2, y*2 ) +\r\n                        original:GetGreen( x*2-1, y*2 ) +\r\n                        original:GetGreen( x*2, y*2+1 ) +\r\n                        original:GetGreen( x*2+1, y*2+1 )",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "green = green/4",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "blue = original:GetBlue( x*2, y*2 ) +\r\n                       original:GetBlue( x*2-1, y*2 ) +\r\n                       original:GetBlue( x*2, y*2+1 ) +\r\n                       original:GetBlue( x*2+1, y*2+1 )",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "blue = blue/4",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "local i1 = ((x*2  ) + (y*2  )*w)*3 + 1",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "local i2 = ((x*2-1) + (y*2  )*w)*3 + 1",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "local i3 = ((x*2  ) + (y*2+1)*w)*3 + 1",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "local i4 = ((x*2+1) + (y*2+1)*w)*3 + 1",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "red   = string.byte(orig_data, i1  ) +\r\n                        string.byte(orig_data, i2  ) +\r\n                        string.byte(orig_data, i3  ) +\r\n                        string.byte(orig_data, i4  )",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "green = string.byte(orig_data, i1+1) +\r\n                        string.byte(orig_data, i2+1) +\r\n                        string.byte(orig_data, i3+1) +\r\n                        string.byte(orig_data, i4+1)",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "blue  = string.byte(orig_data, i1+2) +\r\n                        string.byte(orig_data, i2+2) +\r\n                        string.byte(orig_data, i3+2) +\r\n                        string.byte(orig_data, i4+2)",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "red   = red/4",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "blue  = blue/4",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "anti:SetRGB( x, y, red, green, blue )",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "T.my_anti = wx.wxBitmap(anti)",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "original:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "anti:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "bitmap:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "local function create(parent, id, pos, size)\r\n    local this = wx.wxScrolledWindow( parent, id, pos, size, wx.wxSUNKEN_BORDER )\r\n\r\n    this.my_horse_png = wx.wxNullBitmap\r\n    this.my_horse_jpeg = wx.wxNullBitmap\r\n    this.my_horse_gif = wx.wxNullBitmap\r\n    this.my_horse_bmp = wx.wxNullBitmap\r\n    this.my_horse_bmp2 = wx.wxNullBitmap\r\n    this.my_horse_pcx = wx.wxNullBitmap\r\n    this.my_horse_pnm = wx.wxNullBitmap\r\n    this.my_horse_tiff = wx.wxNullBitmap\r\n    this.my_horse_tga = wx.wxNullBitmap\r\n    this.my_horse_xpm = wx.wxNullBitmap\r\n    this.my_horse_ico32 = wx.wxNullBitmap\r\n    this.my_horse_ico16 = wx.wxNullBitmap\r\n    this.my_horse_ico = wx.wxNullBitmap\r\n    this.my_horse_cur = wx.wxNullBitmap\r\n    this.my_smile_xbm = wx.wxNullBitmap\r\n    this.my_square = wx.wxNullBitmap\r\n    this.my_anti = wx.wxNullBitmap\r\n    this.my_horse_asciigrey_pnm = wx.wxNullBitmap\r\n    this.my_horse_rawgrey_pnm = wx.wxNullBitmap\r\n    this.colorized_horse_jpeg = wx.wxNullBitmap\r\n    this.my_cmyk_jpeg = wx.wxNullBitmap\r\n    this.my_toucan = wx.wxNullBitmap\r\n    this.my_toucan_flipped_horiz = wx.wxNullBitmap\r\n    this.my_toucan_flipped_vert = wx.wxNullBitmap\r\n    this.my_toucan_flipped_both = wx.wxNullBitmap\r\n    this.my_toucan_grey = wx.wxNullBitmap\r\n    this.my_toucan_head = wx.wxNullBitmap\r\n    this.my_toucan_scaled_normal = wx.wxNullBitmap\r\n    this.my_toucan_scaled_high = wx.wxNullBitmap\r\n    this.my_toucan_blur = wx.wxNullBitmap\r\n\r\n    this.m_bmpSmileXpm = wx.wxBitmap(smile_xpm)\r\n    --this.m_iconSmileXpm = wx.wxIcon(smile_xpm)\r\n    this.m_iconSmileXpm = wx.wxIcon()\r\n    this.m_iconSmileXpm:CopyFromBitmap(this.m_bmpSmileXpm)\r\n\r\n    this.my_horse_ani = {}\r\n    this.m_ani_images = 0\r\n    this.xH = 0\r\n    this.yH = 0\r\n\r\n    this.OnPaint = OnPaint\r\n    this.CreateAntiAliasedBitmap = CreateAntiAliasedBitmap\r\n\r\n    this:SetBackgroundColour(wx.wxWHITE)\r\n\r\n    local bitmap = wx.wxBitmap( 100, 100 )\r\n\r\n    local dc = wx.wxMemoryDC()\r\n    dc:SelectObject( bitmap )\r\n    dc:SetBrush( wx.wxBrush( \"orange\", wx.wxSOLID ) )\r\n    dc:SetPen( wx.wxBLACK_PEN )\r\n    dc:DrawRectangle( 0, 0, 100, 100 )\r\n    dc:SetBrush( wx.wxWHITE_BRUSH )\r\n    dc:DrawRectangle( 20, 20, 60, 60 )\r\n    dc:SelectObject( wx.wxNullBitmap )\r\n    dc:delete()\r\n\r\n    --// try to find the directory with our images\r\n    local dir\r\n    if ( wx.wxFile.Exists(\"horse.png\") ) then\r\n        dir = \"\"\r\n    elseif ( wx.wxFile.Exists(\"./image/horse.png\") ) then\r\n        dir = \"./image/\"\r\n    elseif ( wx.wxFile.Exists(\"./samples/image/horse.png\") ) then\r\n        dir = \"./samples/image/\"\r\n    elseif ( wx.wxFile.Exists(\"../samples/image/horse.png\") ) then\r\n        dir = \"../samples/image/\"\r\n    elseif ( wx.wxFile.Exists(\"../../samples/image/horse.png\") ) then\r\n        dir = \"../../samples/image/\"\r\n    else\r\n        --wx.wxLogWarning(\"Can't find image files in either '.' or '..'!\")\r\n    end\r\n\r\n    while (dir == nil) do\r\n        dir = wx.wxDirSelector(\"Select path to image sample files, e.g. 'wxLua/samples/image/horse.png'\", \"\", wx.wxDD_DIR_MUST_EXIST, wx.wxDefaultPosition, parent)\r\n        if (dir == \"\") then\r\n            parent:Close()\r\n            return this\r\n        end\r\n\r\n        dir = dir..\"/\"\r\n\r\n        if ( not wx.wxFile.Exists(dir..\"horse.png\") ) then\r\n            dir = nil\r\n        end\r\n    end\r\n\r\n    local image = bitmap:ConvertToImage()\r\n\r\n\r\n--if wx.wxUSE_LIBPNG then\r\n    if ( not image:SaveFile( dir .. \"test.png\", wx.wxBITMAP_TYPE_PNG )) then\r\n        wx.wxLogError(\"Can't save file\")\r\n    end\r\n\r\n    image:Destroy()\r\n\r\n    if ( image:LoadFile( dir .. \"test.png\" ) ) then\r\n        this.my_square = wx.wxBitmap( image )\r\n    end\r\n\r\n    image:Destroy();\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.png\") ) then\r\n        wx.wxLogError(\"Can't load PNG image\")\r\n    else\r\n        this.my_horse_png = wx.wxBitmap( image )\r\n    end\r\n\r\n    if ( not image:LoadFile( dir .. \"toucan.png\" )) then\r\n        wx.wxLogError(\"Can't load PNG image\")\r\n    else\r\n        this.my_toucan = wx.wxBitmap(image)\r\n    end\r\n\r\n    this.my_toucan_flipped_horiz = wx.wxBitmap(image:Mirror(true))\r\n    this.my_toucan_flipped_vert = wx.wxBitmap(image:Mirror(false))\r\n    this.my_toucan_flipped_both = wx.wxBitmap(image:Mirror(true):Mirror(false))\r\n    this.my_toucan_grey = wx.wxBitmap(image:ConvertToGreyscale())\r\n    this.my_toucan_head = wx.wxBitmap(image:GetSubImage(wx.wxRect(40, 7, 80, 60)))\r\n    this.my_toucan_scaled_normal = wx.wxBitmap(image:Scale(110,90,wx.wxIMAGE_QUALITY_NORMAL))\r\n    this.my_toucan_scaled_high = wx.wxBitmap(image:Scale(110,90,wx.wxIMAGE_QUALITY_HIGH))\r\n    this.my_toucan_blur = wx.wxBitmap(image:Blur(10))\r\n\r\n--end --// wxUSE_LIBPNG\r\n\r\n--if wx.wxUSE_LIBJPEG then\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.jpg\") ) then\r\n        wx.wxLogError(\"Can't load JPG image\")\r\n    else\r\n        this.my_horse_jpeg = wx.wxBitmap( image )\r\n\r\n        --// Colorize by rotating green hue to red\r\n        --local greenHSV = wx.wxImage:RGBtoHSV(wx.wxImage:RGBValue(0, 255, 0))\r\n        local gh,gs,gv = wx.wxImage:RGBtoHSV(0, 255, 0)\r\n        --local redHSV = wx.wxImage:RGBtoHSV(wx.wxImage:RGBValue(255, 0, 0))\r\n        local rh,rs,rv = wx.wxImage:RGBtoHSV(255, 0, 0)\r\n        --image:RotateHue(redHSV.hue - greenHSV.hue)\r\n        image:RotateHue(rh - gh)\r\n        this.colorized_horse_jpeg = wx.wxBitmap( image )\r\n    end\r\n\r\n    if ( not image:LoadFile( dir .. \"cmyk.jpg\") ) then\r\n        wx.wxLogError(\"Can't load CMYK JPG image\")\r\n    else\r\n        this.my_cmyk_jpeg = wx.wxBitmap(image)\r\n    end\r\n--end --// wxUSE_LIBJPEG\r\n\r\n--if wx.wxUSE_GIF then\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.gif\") ) then\r\n        wx.wxLogError(\"Can't load GIF image\")\r\n    else\r\n        this.my_horse_gif = wx.wxBitmap( image )\r\n    end\r\n--end --// wx.wxUSE_GIF\r\n\r\n--if wx.wxUSE_PCX then\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.pcx\", wx.wxBITMAP_TYPE_PCX ) ) then\r\n        wx.wxLogError(\"Can't load PCX image\")\r\n    else\r\n        this.my_horse_pcx = wx.wxBitmap( image )\r\n    end\r\n--end --// wx.wxUSE_PCX\r\n\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.bmp\", wx.wxBITMAP_TYPE_BMP ) ) then\r\n        wx.wxLogError(\"Can't load BMP image\")\r\n    else\r\n        this.my_horse_bmp = wx.wxBitmap( image )\r\n    end\r\n\r\n--if wx.wxUSE_XPM then\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.xpm\", wx.wxBITMAP_TYPE_XPM ) ) then\r\n        wx.wxLogError(\"Can't load XPM image\")\r\n    else\r\n        this.my_horse_xpm = wx.wxBitmap( image )\r\n    end\r\n\r\n    if ( not image:SaveFile( dir .. \"test.xpm\", wx.wxBITMAP_TYPE_XPM )) then\r\n        wx.wxLogError(\"Can't save file\")\r\n    end\r\n--end --// wx.wxUSE_XPM\r\n\r\n--if wx.wxUSE_PNM then\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.pnm\", wx.wxBITMAP_TYPE_PNM ) ) then\r\n        wx.wxLogError(\"Can't load PNM image\")\r\n    else\r\n        this.my_horse_pnm = wx.wxBitmap( image )\r\n    end\r\n\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse_ag.pnm\", wx.wxBITMAP_TYPE_PNM ) ) then\r\n        wx.wxLogError(\"Can't load PNM image\")\r\n    else\r\n        this.my_horse_asciigrey_pnm = wx.wxBitmap( image )\r\n    end\r\n\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse_rg.pnm\", wx.wxBITMAP_TYPE_PNM ) ) then\r\n        wx.wxLogError(\"Can't load PNM image\")\r\n    else\r\n        this.my_horse_rawgrey_pnm = wx.wxBitmap( image )\r\n    end\r\n--end --// wx.wxUSE_PNM\r\n\r\n--if wx.wxUSE_LIBTIFF then\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.tif\", wx.wxBITMAP_TYPE_TIF ) ) then\r\n        wx.wxLogError(\"Can't load TIFF image\")\r\n    else\r\n        this.my_horse_tiff = wx.wxBitmap( image )\r\n    end\r\n--end --// wx.wxUSE_LIBTIFF\r\n\r\n--if wx.wxUSE_LIBTIFF then\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.tga\", wx.wxBITMAP_TYPE_TGA ) ) then\r\n        wx.wxLogError(\"Can't load TGA image\")\r\n    else\r\n        this.my_horse_tga = wx.wxBitmap( image )\r\n    end\r\n--end --// wx.wxUSE_LIBTIFF\r\n\r\n    this:CreateAntiAliasedBitmap()\r\n\r\n    this.my_smile_xbm = wx.wxBitmap( smile_bits_str, smile_width,\r\n                                 smile_height, 1 )\r\n    this.my_smile_xbm = wx.wxBitmap( smile_bits, smile_width,\r\n                                 smile_height, 1 )\r\n\r\n    --// demonstrates XPM automatically using the mask when saving\r\n    if ( this.m_bmpSmileXpm:Ok() ) then\r\n        this.m_bmpSmileXpm:SaveFile(dir .. \"saved.xpm\", wx.wxBITMAP_TYPE_XPM)\r\n    end\r\n\r\n--if wx.wxUSE_ICO_CUR then\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.ico\", wx.wxBITMAP_TYPE_ICO, 0 ) ) then\r\n        wx.wxLogError(\"Can't load first ICO image\")\r\n    else\r\n        this.my_horse_ico32 = wx.wxBitmap( image )\r\n    end\r\n\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.ico\", wx.wxBITMAP_TYPE_ICO, 1 ) ) then\r\n        wx.wxLogError(\"Can't load second ICO image\")\r\n    else\r\n        this.my_horse_ico16 = wx.wxBitmap( image )\r\n    end\r\n\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.ico\" ) ) then\r\n        wx.wxLogError(\"Can't load best ICO image\")\r\n    else\r\n        this.my_horse_ico = wx.wxBitmap( image )\r\n    end\r\n\r\n    image:Destroy()\r\n\r\n    if ( not image:LoadFile( dir .. \"horse.cur\", wx.wxBITMAP_TYPE_CUR ) ) then\r\n        wx.wxLogError(\"Can't load best ICO image\")\r\n    else\r\n        this.my_horse_cur = wx.wxBitmap( image )\r\n        this.xH = 30 + image:GetOptionInt(wx.wxIMAGE_OPTION_CUR_HOTSPOT_X)\r\n        this.yH = 2420 + image:GetOptionInt(wx.wxIMAGE_OPTION_CUR_HOTSPOT_Y)\r\n    end\r\n\r\n    this.m_ani_images = wx.wxImage.GetImageCount ( dir .. \"horse3.ani\", wx.wxBITMAP_TYPE_ANI )\r\n    if (this.m_ani_images==0) then\r\n        wx.wxLogError(\"No ANI-format images found\")\r\n    else\r\n        this.my_horse_ani = {}\r\n    end\r\n\r\n    for i=0, this.m_ani_images-1 do\r\n        image:Destroy()\r\n        if (not image:LoadFile( dir .. \"horse3.ani\", wx.wxBITMAP_TYPE_ANI, i )) then\r\n            local tmp = \"Can't load image number \" .. tostring(i)\r\n            wx.wxLogError(tmp)\r\n        else\r\n            this.my_horse_ani [i] = wx.wxBitmap( image )\r\n        end\r\n    end\r\n--end --// wxUSE_ICO_CUR\r\n\r\n    image:Destroy()\r\n\r\n    --// test image loading from stream\r\n    local file = wx.wxFile(dir .. \"horse.bmp\")\r\n    if ( file:IsOpened() ) then\r\n        local len = file:Length()\r\n        local dataSize = len\r\n\r\n        local read_count, data = file:Read(dataSize)\r\n        if ( read_count ~= len ) then\r\n            wx.wxLogError(_T(\"Reading bitmap file failed\"));\r\n        else\r\n            local mis = wx.wxMemoryInputStream(data, dataSize);\r\n            if ( not image:LoadFile(mis) ) then\r\n                wx.wxLogError(wxT(\"Can't load BMP image from stream\"));\r\n            else\r\n                this.my_horse_bmp2 = wx.wxBitmap( image );\r\n            end\r\n        end\r\n    end\r\n\r\n\r\n    this:Connect(wx.wxEVT_PAINT, function(event) this:OnPaint(event) end)\r\n\r\n    return this\r\nend",
    "type": "function"
  }, {
    "id": 221,
    "text": "local this = wx.wxScrolledWindow( parent, id, pos, size, wx.wxSUNKEN_BORDER )",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "this.my_horse_png = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "this.my_horse_jpeg = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "this.my_horse_gif = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "this.my_horse_bmp = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "this.my_horse_bmp2 = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "this.my_horse_pcx = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "this.my_horse_pnm = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 229,
    "text": "this.my_horse_tiff = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "this.my_horse_tga = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "this.my_horse_xpm = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "this.my_horse_ico32 = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "this.my_horse_ico16 = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "this.my_horse_ico = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "this.my_horse_cur = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "this.my_smile_xbm = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "this.my_square = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "this.my_anti = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "this.my_horse_asciigrey_pnm = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "this.my_horse_rawgrey_pnm = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "this.colorized_horse_jpeg = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "this.my_cmyk_jpeg = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "this.my_toucan = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "this.my_toucan_flipped_horiz = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "this.my_toucan_flipped_vert = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "this.my_toucan_flipped_both = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "this.my_toucan_grey = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "this.my_toucan_head = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "this.my_toucan_scaled_normal = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "this.my_toucan_scaled_high = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "this.my_toucan_blur = wx.wxNullBitmap",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "this.m_bmpSmileXpm = wx.wxBitmap(smile_xpm)",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "this.m_iconSmileXpm = wx.wxIcon()",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "this.m_iconSmileXpm:CopyFromBitmap(this.m_bmpSmileXpm)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "this.my_horse_ani = {}",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "this.m_ani_images = 0",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "this.xH = 0",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "this.yH = 0",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "this.OnPaint = OnPaint",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "this.CreateAntiAliasedBitmap = CreateAntiAliasedBitmap",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "this:SetBackgroundColour(wx.wxWHITE)",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "local bitmap = wx.wxBitmap( 100, 100 )",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "dc:SetBrush( wx.wxBrush( \"orange\", wx.wxSOLID ) )",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "dc:DrawRectangle( 0, 0, 100, 100 )",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "dc:DrawRectangle( 20, 20, 60, 60 )",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "dc:SelectObject( wx.wxNullBitmap )",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "local dir",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "if ( wx.wxFile.Exists(\"horse.png\") ) then\r\n        dir = \"\"\r\n    elseif ( wx.wxFile.Exists(\"./image/horse.png\") ) then\r\n        dir = \"./image/\"\r\n    elseif ( wx.wxFile.Exists(\"./samples/image/horse.png\") ) then\r\n        dir = \"./samples/image/\"\r\n    elseif ( wx.wxFile.Exists(\"../samples/image/horse.png\") ) then\r\n        dir = \"../samples/image/\"\r\n    elseif ( wx.wxFile.Exists(\"../../samples/image/horse.png\") ) then\r\n        dir = \"../../samples/image/\"\r\n    else\r\n        --wx.wxLogWarning(\"Can't find image files in either '.' or '..'!\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 269,
    "text": "dir = \"\"",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "dir = \"./image/\"",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "dir = \"./samples/image/\"",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "dir = \"../samples/image/\"",
    "type": "statement:assign"
  }, {
    "id": 273,
    "text": "dir = \"../../samples/image/\"",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "while (dir == nil) do\r\n        dir = wx.wxDirSelector(\"Select path to image sample files, e.g. 'wxLua/samples/image/horse.png'\", \"\", wx.wxDD_DIR_MUST_EXIST, wx.wxDefaultPosition, parent)\r\n        if (dir == \"\") then\r\n            parent:Close()\r\n            return this\r\n        end\r\n\r\n        dir = dir..\"/\"\r\n\r\n        if ( not wx.wxFile.Exists(dir..\"horse.png\") ) then\r\n            dir = nil\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 275,
    "text": "dir = wx.wxDirSelector(\"Select path to image sample files, e.g. 'wxLua/samples/image/horse.png'\", \"\", wx.wxDD_DIR_MUST_EXIST, wx.wxDefaultPosition, parent)",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "if (dir == \"\") then\r\n            parent:Close()\r\n            return this\r\n        end",
    "type": "statement:if"
  }, {
    "id": 277,
    "text": "parent:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "dir = dir..\"/\"",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "if ( not wx.wxFile.Exists(dir..\"horse.png\") ) then\r\n            dir = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "dir = nil",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "local image = bitmap:ConvertToImage()",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "if ( not image:SaveFile( dir .. \"test.png\", wx.wxBITMAP_TYPE_PNG )) then\r\n        wx.wxLogError(\"Can't save file\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 283,
    "text": "wx.wxLogError(\"Can't save file\")",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "image:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "if ( image:LoadFile( dir .. \"test.png\" ) ) then\r\n        this.my_square = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "this.my_square = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "if ( not image:LoadFile( dir .. \"horse.png\") ) then\r\n        wx.wxLogError(\"Can't load PNG image\")\r\n    else\r\n        this.my_horse_png = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "wx.wxLogError(\"Can't load PNG image\")",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "this.my_horse_png = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "if ( not image:LoadFile( dir .. \"toucan.png\" )) then\r\n        wx.wxLogError(\"Can't load PNG image\")\r\n    else\r\n        this.my_toucan = wx.wxBitmap(image)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 291,
    "text": "this.my_toucan = wx.wxBitmap(image)",
    "type": "statement:assign"
  }, {
    "id": 292,
    "text": "this.my_toucan_flipped_horiz = wx.wxBitmap(image:Mirror(true))",
    "type": "statement:assign"
  }, {
    "id": 293,
    "text": "this.my_toucan_flipped_vert = wx.wxBitmap(image:Mirror(false))",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "this.my_toucan_flipped_both = wx.wxBitmap(image:Mirror(true):Mirror(false))",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "this.my_toucan_grey = wx.wxBitmap(image:ConvertToGreyscale())",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "this.my_toucan_head = wx.wxBitmap(image:GetSubImage(wx.wxRect(40, 7, 80, 60)))",
    "type": "statement:assign"
  }, {
    "id": 297,
    "text": "this.my_toucan_scaled_normal = wx.wxBitmap(image:Scale(110,90,wx.wxIMAGE_QUALITY_NORMAL))",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "this.my_toucan_scaled_high = wx.wxBitmap(image:Scale(110,90,wx.wxIMAGE_QUALITY_HIGH))",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "this.my_toucan_blur = wx.wxBitmap(image:Blur(10))",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "if ( not image:LoadFile( dir .. \"horse.jpg\") ) then\r\n        wx.wxLogError(\"Can't load JPG image\")\r\n    else\r\n        this.my_horse_jpeg = wx.wxBitmap( image )\r\n\r\n        --// Colorize by rotating green hue to red\r\n        --local greenHSV = wx.wxImage:RGBtoHSV(wx.wxImage:RGBValue(0, 255, 0))\r\n        local gh,gs,gv = wx.wxImage:RGBtoHSV(0, 255, 0)\r\n        --local redHSV = wx.wxImage:RGBtoHSV(wx.wxImage:RGBValue(255, 0, 0))\r\n        local rh,rs,rv = wx.wxImage:RGBtoHSV(255, 0, 0)\r\n        --image:RotateHue(redHSV.hue - greenHSV.hue)\r\n        image:RotateHue(rh - gh)\r\n        this.colorized_horse_jpeg = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 301,
    "text": "wx.wxLogError(\"Can't load JPG image\")",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "this.my_horse_jpeg = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 303,
    "text": "local gh,gs,gv = wx.wxImage:RGBtoHSV(0, 255, 0)",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "local rh,rs,rv = wx.wxImage:RGBtoHSV(255, 0, 0)",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "image:RotateHue(rh - gh)",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "this.colorized_horse_jpeg = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 307,
    "text": "if ( not image:LoadFile( dir .. \"cmyk.jpg\") ) then\r\n        wx.wxLogError(\"Can't load CMYK JPG image\")\r\n    else\r\n        this.my_cmyk_jpeg = wx.wxBitmap(image)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "wx.wxLogError(\"Can't load CMYK JPG image\")",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "this.my_cmyk_jpeg = wx.wxBitmap(image)",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "if ( not image:LoadFile( dir .. \"horse.gif\") ) then\r\n        wx.wxLogError(\"Can't load GIF image\")\r\n    else\r\n        this.my_horse_gif = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "wx.wxLogError(\"Can't load GIF image\")",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "this.my_horse_gif = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "if ( not image:LoadFile( dir .. \"horse.pcx\", wx.wxBITMAP_TYPE_PCX ) ) then\r\n        wx.wxLogError(\"Can't load PCX image\")\r\n    else\r\n        this.my_horse_pcx = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 314,
    "text": "wx.wxLogError(\"Can't load PCX image\")",
    "type": "statement:functioncall"
  }, {
    "id": 315,
    "text": "this.my_horse_pcx = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 316,
    "text": "if ( not image:LoadFile( dir .. \"horse.bmp\", wx.wxBITMAP_TYPE_BMP ) ) then\r\n        wx.wxLogError(\"Can't load BMP image\")\r\n    else\r\n        this.my_horse_bmp = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 317,
    "text": "wx.wxLogError(\"Can't load BMP image\")",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "this.my_horse_bmp = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 319,
    "text": "if ( not image:LoadFile( dir .. \"horse.xpm\", wx.wxBITMAP_TYPE_XPM ) ) then\r\n        wx.wxLogError(\"Can't load XPM image\")\r\n    else\r\n        this.my_horse_xpm = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 320,
    "text": "wx.wxLogError(\"Can't load XPM image\")",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "this.my_horse_xpm = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 322,
    "text": "if ( not image:SaveFile( dir .. \"test.xpm\", wx.wxBITMAP_TYPE_XPM )) then\r\n        wx.wxLogError(\"Can't save file\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 323,
    "text": "if ( not image:LoadFile( dir .. \"horse.pnm\", wx.wxBITMAP_TYPE_PNM ) ) then\r\n        wx.wxLogError(\"Can't load PNM image\")\r\n    else\r\n        this.my_horse_pnm = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 324,
    "text": "wx.wxLogError(\"Can't load PNM image\")",
    "type": "statement:functioncall"
  }, {
    "id": 325,
    "text": "this.my_horse_pnm = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "if ( not image:LoadFile( dir .. \"horse_ag.pnm\", wx.wxBITMAP_TYPE_PNM ) ) then\r\n        wx.wxLogError(\"Can't load PNM image\")\r\n    else\r\n        this.my_horse_asciigrey_pnm = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 327,
    "text": "this.my_horse_asciigrey_pnm = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "if ( not image:LoadFile( dir .. \"horse_rg.pnm\", wx.wxBITMAP_TYPE_PNM ) ) then\r\n        wx.wxLogError(\"Can't load PNM image\")\r\n    else\r\n        this.my_horse_rawgrey_pnm = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 329,
    "text": "this.my_horse_rawgrey_pnm = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "if ( not image:LoadFile( dir .. \"horse.tif\", wx.wxBITMAP_TYPE_TIF ) ) then\r\n        wx.wxLogError(\"Can't load TIFF image\")\r\n    else\r\n        this.my_horse_tiff = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 331,
    "text": "wx.wxLogError(\"Can't load TIFF image\")",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "this.my_horse_tiff = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 333,
    "text": "if ( not image:LoadFile( dir .. \"horse.tga\", wx.wxBITMAP_TYPE_TGA ) ) then\r\n        wx.wxLogError(\"Can't load TGA image\")\r\n    else\r\n        this.my_horse_tga = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 334,
    "text": "wx.wxLogError(\"Can't load TGA image\")",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "this.my_horse_tga = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "this:CreateAntiAliasedBitmap()",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "this.my_smile_xbm = wx.wxBitmap( smile_bits_str, smile_width,\r\n                                 smile_height, 1 )",
    "type": "statement:assign"
  }, {
    "id": 338,
    "text": "this.my_smile_xbm = wx.wxBitmap( smile_bits, smile_width,\r\n                                 smile_height, 1 )",
    "type": "statement:assign"
  }, {
    "id": 339,
    "text": "if ( this.m_bmpSmileXpm:Ok() ) then\r\n        this.m_bmpSmileXpm:SaveFile(dir .. \"saved.xpm\", wx.wxBITMAP_TYPE_XPM)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 340,
    "text": "this.m_bmpSmileXpm:SaveFile(dir .. \"saved.xpm\", wx.wxBITMAP_TYPE_XPM)",
    "type": "statement:functioncall"
  }, {
    "id": 341,
    "text": "if ( not image:LoadFile( dir .. \"horse.ico\", wx.wxBITMAP_TYPE_ICO, 0 ) ) then\r\n        wx.wxLogError(\"Can't load first ICO image\")\r\n    else\r\n        this.my_horse_ico32 = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 342,
    "text": "wx.wxLogError(\"Can't load first ICO image\")",
    "type": "statement:functioncall"
  }, {
    "id": 343,
    "text": "this.my_horse_ico32 = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "if ( not image:LoadFile( dir .. \"horse.ico\", wx.wxBITMAP_TYPE_ICO, 1 ) ) then\r\n        wx.wxLogError(\"Can't load second ICO image\")\r\n    else\r\n        this.my_horse_ico16 = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 345,
    "text": "wx.wxLogError(\"Can't load second ICO image\")",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "this.my_horse_ico16 = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "if ( not image:LoadFile( dir .. \"horse.ico\" ) ) then\r\n        wx.wxLogError(\"Can't load best ICO image\")\r\n    else\r\n        this.my_horse_ico = wx.wxBitmap( image )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 348,
    "text": "wx.wxLogError(\"Can't load best ICO image\")",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "this.my_horse_ico = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 350,
    "text": "if ( not image:LoadFile( dir .. \"horse.cur\", wx.wxBITMAP_TYPE_CUR ) ) then\r\n        wx.wxLogError(\"Can't load best ICO image\")\r\n    else\r\n        this.my_horse_cur = wx.wxBitmap( image )\r\n        this.xH = 30 + image:GetOptionInt(wx.wxIMAGE_OPTION_CUR_HOTSPOT_X)\r\n        this.yH = 2420 + image:GetOptionInt(wx.wxIMAGE_OPTION_CUR_HOTSPOT_Y)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 351,
    "text": "this.my_horse_cur = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 352,
    "text": "this.xH = 30 + image:GetOptionInt(wx.wxIMAGE_OPTION_CUR_HOTSPOT_X)",
    "type": "statement:assign"
  }, {
    "id": 353,
    "text": "this.yH = 2420 + image:GetOptionInt(wx.wxIMAGE_OPTION_CUR_HOTSPOT_Y)",
    "type": "statement:assign"
  }, {
    "id": 354,
    "text": "this.m_ani_images = wx.wxImage.GetImageCount ( dir .. \"horse3.ani\", wx.wxBITMAP_TYPE_ANI )",
    "type": "statement:assign"
  }, {
    "id": 355,
    "text": "if (this.m_ani_images==0) then\r\n        wx.wxLogError(\"No ANI-format images found\")\r\n    else\r\n        this.my_horse_ani = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 356,
    "text": "wx.wxLogError(\"No ANI-format images found\")",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "for i=0, this.m_ani_images-1 do\r\n        image:Destroy()\r\n        if (not image:LoadFile( dir .. \"horse3.ani\", wx.wxBITMAP_TYPE_ANI, i )) then\r\n            local tmp = \"Can't load image number \" .. tostring(i)\r\n            wx.wxLogError(tmp)\r\n        else\r\n            this.my_horse_ani [i] = wx.wxBitmap( image )\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 358,
    "text": "if (not image:LoadFile( dir .. \"horse3.ani\", wx.wxBITMAP_TYPE_ANI, i )) then\r\n            local tmp = \"Can't load image number \" .. tostring(i)\r\n            wx.wxLogError(tmp)\r\n        else\r\n            this.my_horse_ani [i] = wx.wxBitmap( image )\r\n        end",
    "type": "statement:if"
  }, {
    "id": 359,
    "text": "local tmp = \"Can't load image number \" .. tostring(i)",
    "type": "statement:localassign"
  }, {
    "id": 360,
    "text": "wx.wxLogError(tmp)",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "this.my_horse_ani [i] = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 362,
    "text": "local file = wx.wxFile(dir .. \"horse.bmp\")",
    "type": "statement:localassign"
  }, {
    "id": 363,
    "text": "if ( file:IsOpened() ) then\r\n        local len = file:Length()\r\n        local dataSize = len\r\n\r\n        local read_count, data = file:Read(dataSize)\r\n        if ( read_count ~= len ) then\r\n            wx.wxLogError(_T(\"Reading bitmap file failed\"));\r\n        else\r\n            local mis = wx.wxMemoryInputStream(data, dataSize);\r\n            if ( not image:LoadFile(mis) ) then\r\n                wx.wxLogError(wxT(\"Can't load BMP image from stream\"));\r\n            else\r\n                this.my_horse_bmp2 = wx.wxBitmap( image );\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 364,
    "text": "local len = file:Length()",
    "type": "statement:localassign"
  }, {
    "id": 365,
    "text": "local dataSize = len",
    "type": "statement:localassign"
  }, {
    "id": 366,
    "text": "local read_count, data = file:Read(dataSize)",
    "type": "statement:localassign"
  }, {
    "id": 367,
    "text": "if ( read_count ~= len ) then\r\n            wx.wxLogError(_T(\"Reading bitmap file failed\"));\r\n        else\r\n            local mis = wx.wxMemoryInputStream(data, dataSize);\r\n            if ( not image:LoadFile(mis) ) then\r\n                wx.wxLogError(wxT(\"Can't load BMP image from stream\"));\r\n            else\r\n                this.my_horse_bmp2 = wx.wxBitmap( image );\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 368,
    "text": "wx.wxLogError(_T(\"Reading bitmap file failed\"))",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "local mis = wx.wxMemoryInputStream(data, dataSize)",
    "type": "statement:localassign"
  }, {
    "id": 370,
    "text": "if ( not image:LoadFile(mis) ) then\r\n                wx.wxLogError(wxT(\"Can't load BMP image from stream\"));\r\n            else\r\n                this.my_horse_bmp2 = wx.wxBitmap( image );\r\n            end",
    "type": "statement:if"
  }, {
    "id": 371,
    "text": "wx.wxLogError(wxT(\"Can't load BMP image from stream\"))",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "this.my_horse_bmp2 = wx.wxBitmap( image )",
    "type": "statement:assign"
  }, {
    "id": 373,
    "text": "this:Connect(wx.wxEVT_PAINT, function(event) this:OnPaint(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 374,
    "text": "this:OnPaint(event)",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "function __call(self, ...)\r\n    return create(...)\r\nend",
    "type": "function"
  }, {
    "id": 377,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 378,
    "text": "local function OnSave(T, event)\r\n--if wx.wxUSE_FILEDLG then\r\n    local image = T.m_bitmap:ConvertToImage()\r\n\r\n    local savefilename = wx.wxFileSelector( \"Save Image\",\r\n                                            \"\", --wx.wxEmptyString,\r\n                                            \"\", --wx.wxEmptyString,\r\n                                            \"\",\r\n                                            \"BMP files (*.bmp)|*.bmp|\"..\r\n                                            \"PNG files (*.png)|*.png|\"..\r\n                                            \"JPEG files (*.jpg)|*.jpg|\"..\r\n                                            \"GIF files (*.gif)|*.gif|\"..\r\n                                            \"TIFF files (*.tif)|*.tif|\"..\r\n                                            \"PCX files (*.pcx)|*.pcx|\"..\r\n                                            \"ICO files (*.ico)|*.ico|\"..\r\n                                            \"CUR files (*.cur)|*.cur\",\r\n                                            wx.wxFD_SAVE,\r\n                                            T)\r\n\r\n    if ( savefilename == \"\" ) then\r\n        return\r\n    end\r\n\r\n    local path, name, extension = wx.wxFileName.SplitPath(savefilename)\r\n\r\n    local saved = false\r\n    if ( extension == \"bmp\" ) then\r\n        local bppvalues =\r\n        {\r\n            wx.wxBMP_1BPP,\r\n            wx.wxBMP_1BPP_BW,\r\n            wx.wxBMP_4BPP,\r\n            wx.wxBMP_8BPP,\r\n            wx.wxBMP_8BPP_GREY,\r\n            wx.wxBMP_8BPP_RED,\r\n            wx.wxBMP_8BPP_PALETTE,\r\n            wx.wxBMP_24BPP,\r\n        }\r\n\r\n        local bppchoices =\r\n        {\r\n            \"1 bpp color\",\r\n            \"1 bpp B&W\",\r\n            \"4 bpp color\",\r\n            \"8 bpp color\",\r\n            \"8 bpp greyscale\",\r\n            \"8 bpp red\",\r\n            \"8 bpp own palette\",\r\n            \"24 bpp\",\r\n        }\r\n\r\n        local bppselection = wx.wxGetSingleChoiceIndex(\"Set BMP BPP\",\r\n                                                  \"Image sample: save file\",\r\n                                                  bppchoices,\r\n                                                  T)\r\n        if ( bppselection ~= -1 ) then\r\n            local formatt = bppvalues[bppselection]\r\n            image:SetOption(wx.wxIMAGE_OPTION_BMP_FORMAT, formatt)\r\n\r\n            if ( formatt == wx.wxBMP_8BPP_PALETTE ) then\r\n                local cmap = \"\" --string.rep(256,\" \")\r\n                for i = 0, 256-1 do\r\n                    cmap = cmap .. string.byte(i)\r\n                end\r\n                image:SetPalette(wx.wxPalette(256, cmap, cmap, cmap))\r\n            end\r\n        end\r\n    elseif ( extension == \"png\" ) then\r\n        local pngvalues =\r\n        {\r\n            wx.wxPNG_TYPE_COLOUR,\r\n            wx.wxPNG_TYPE_COLOUR,\r\n            wx.wxPNG_TYPE_GREY,\r\n            wx.wxPNG_TYPE_GREY,\r\n            wx.wxPNG_TYPE_GREY_RED,\r\n            wx.wxPNG_TYPE_GREY_RED,\r\n        }\r\n\r\n        local pngchoices =\r\n        {\r\n            \"Colour 8bpp\",\r\n            \"Colour 16bpp\",\r\n            \"Grey 8bpp\",\r\n            \"Grey 16bpp\",\r\n            \"Grey red 8bpp\",\r\n            \"Grey red 16bpp\",\r\n        }\r\n\r\n        local sel = wx.wxGetSingleChoiceIndex(\"Set PNG format\",\r\n                                         \"Image sample: save file\",\r\n                                         pngchoices,\r\n                                         T)\r\n        if ( sel ~= -1 ) then\r\n            image:SetOption(wx.wxIMAGE_OPTION_PNG_FORMAT, pngvalues[sel])\r\n            image:SetOption(wx.wxIMAGE_OPTION_PNG_BITDEPTH, iff(sel % 2, 16, 8))\r\n        end\r\n    elseif ( extension == \"cur\" ) then\r\n        image:Rescale(32,32)\r\n        image:SetOption(wx.wxIMAGE_OPTION_CUR_HOTSPOT_X, 0)\r\n        image:SetOption(wx.wxIMAGE_OPTION_CUR_HOTSPOT_Y, 0)\r\n        --// This shows how you can save an image with explicitly\r\n        --// specified image format:\r\n        saved = image:SaveFile(savefilename, wx.wxBITMAP_TYPE_CUR)\r\n    end\r\n\r\n    if ( not saved ) then\r\n        --// This one guesses image format from filename extension\r\n        --// (it may fail if the extension is not recognized):\r\n        image:SaveFile(savefilename)\r\n    end\r\n--end --// wx.wxUSE_FILEDLG\r\nend",
    "type": "function"
  }, {
    "id": 379,
    "text": "local image = T.m_bitmap:ConvertToImage()",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "local savefilename = wx.wxFileSelector( \"Save Image\",\r\n                                            \"\", --wx.wxEmptyString,\r\n                                            \"\", --wx.wxEmptyString,\r\n                                            \"\",\r\n                                            \"BMP files (*.bmp)|*.bmp|\"..\r\n                                            \"PNG files (*.png)|*.png|\"..\r\n                                            \"JPEG files (*.jpg)|*.jpg|\"..\r\n                                            \"GIF files (*.gif)|*.gif|\"..\r\n                                            \"TIFF files (*.tif)|*.tif|\"..\r\n                                            \"PCX files (*.pcx)|*.pcx|\"..\r\n                                            \"ICO files (*.ico)|*.ico|\"..\r\n                                            \"CUR files (*.cur)|*.cur\",\r\n                                            wx.wxFD_SAVE,\r\n                                            T)",
    "type": "statement:localassign"
  }, {
    "id": 381,
    "text": "if ( savefilename == \"\" ) then\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 382,
    "text": "local path, name, extension = wx.wxFileName.SplitPath(savefilename)",
    "type": "statement:localassign"
  }, {
    "id": 383,
    "text": "local saved = false",
    "type": "statement:localassign"
  }, {
    "id": 384,
    "text": "if ( extension == \"bmp\" ) then\r\n        local bppvalues =\r\n        {\r\n            wx.wxBMP_1BPP,\r\n            wx.wxBMP_1BPP_BW,\r\n            wx.wxBMP_4BPP,\r\n            wx.wxBMP_8BPP,\r\n            wx.wxBMP_8BPP_GREY,\r\n            wx.wxBMP_8BPP_RED,\r\n            wx.wxBMP_8BPP_PALETTE,\r\n            wx.wxBMP_24BPP,\r\n        }\r\n\r\n        local bppchoices =\r\n        {\r\n            \"1 bpp color\",\r\n            \"1 bpp B&W\",\r\n            \"4 bpp color\",\r\n            \"8 bpp color\",\r\n            \"8 bpp greyscale\",\r\n            \"8 bpp red\",\r\n            \"8 bpp own palette\",\r\n            \"24 bpp\",\r\n        }\r\n\r\n        local bppselection = wx.wxGetSingleChoiceIndex(\"Set BMP BPP\",\r\n                                                  \"Image sample: save file\",\r\n                                                  bppchoices,\r\n                                                  T)\r\n        if ( bppselection ~= -1 ) then\r\n            local formatt = bppvalues[bppselection]\r\n            image:SetOption(wx.wxIMAGE_OPTION_BMP_FORMAT, formatt)\r\n\r\n            if ( formatt == wx.wxBMP_8BPP_PALETTE ) then\r\n                local cmap = \"\" --string.rep(256,\" \")\r\n                for i = 0, 256-1 do\r\n                    cmap = cmap .. string.byte(i)\r\n                end\r\n                image:SetPalette(wx.wxPalette(256, cmap, cmap, cmap))\r\n            end\r\n        end\r\n    elseif ( extension == \"png\" ) then\r\n        local pngvalues =\r\n        {\r\n            wx.wxPNG_TYPE_COLOUR,\r\n            wx.wxPNG_TYPE_COLOUR,\r\n            wx.wxPNG_TYPE_GREY,\r\n            wx.wxPNG_TYPE_GREY,\r\n            wx.wxPNG_TYPE_GREY_RED,\r\n            wx.wxPNG_TYPE_GREY_RED,\r\n        }\r\n\r\n        local pngchoices =\r\n        {\r\n            \"Colour 8bpp\",\r\n            \"Colour 16bpp\",\r\n            \"Grey 8bpp\",\r\n            \"Grey 16bpp\",\r\n            \"Grey red 8bpp\",\r\n            \"Grey red 16bpp\",\r\n        }\r\n\r\n        local sel = wx.wxGetSingleChoiceIndex(\"Set PNG format\",\r\n                                         \"Image sample: save file\",\r\n                                         pngchoices,\r\n                                         T)\r\n        if ( sel ~= -1 ) then\r\n            image:SetOption(wx.wxIMAGE_OPTION_PNG_FORMAT, pngvalues[sel])\r\n            image:SetOption(wx.wxIMAGE_OPTION_PNG_BITDEPTH, iff(sel % 2, 16, 8))\r\n        end\r\n    elseif ( extension == \"cur\" ) then\r\n        image:Rescale(32,32)\r\n        image:SetOption(wx.wxIMAGE_OPTION_CUR_HOTSPOT_X, 0)\r\n        image:SetOption(wx.wxIMAGE_OPTION_CUR_HOTSPOT_Y, 0)\r\n        --// This shows how you can save an image with explicitly\r\n        --// specified image format:\r\n        saved = image:SaveFile(savefilename, wx.wxBITMAP_TYPE_CUR)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 385,
    "text": "local bppvalues =\r\n        {\r\n            wx.wxBMP_1BPP,\r\n            wx.wxBMP_1BPP_BW,\r\n            wx.wxBMP_4BPP,\r\n            wx.wxBMP_8BPP,\r\n            wx.wxBMP_8BPP_GREY,\r\n            wx.wxBMP_8BPP_RED,\r\n            wx.wxBMP_8BPP_PALETTE,\r\n            wx.wxBMP_24BPP,\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 386,
    "text": "local bppchoices =\r\n        {\r\n            \"1 bpp color\",\r\n            \"1 bpp B&W\",\r\n            \"4 bpp color\",\r\n            \"8 bpp color\",\r\n            \"8 bpp greyscale\",\r\n            \"8 bpp red\",\r\n            \"8 bpp own palette\",\r\n            \"24 bpp\",\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 387,
    "text": "local bppselection = wx.wxGetSingleChoiceIndex(\"Set BMP BPP\",\r\n                                                  \"Image sample: save file\",\r\n                                                  bppchoices,\r\n                                                  T)",
    "type": "statement:localassign"
  }, {
    "id": 388,
    "text": "if ( bppselection ~= -1 ) then\r\n            local formatt = bppvalues[bppselection]\r\n            image:SetOption(wx.wxIMAGE_OPTION_BMP_FORMAT, formatt)\r\n\r\n            if ( formatt == wx.wxBMP_8BPP_PALETTE ) then\r\n                local cmap = \"\" --string.rep(256,\" \")\r\n                for i = 0, 256-1 do\r\n                    cmap = cmap .. string.byte(i)\r\n                end\r\n                image:SetPalette(wx.wxPalette(256, cmap, cmap, cmap))\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 389,
    "text": "local formatt = bppvalues[bppselection]",
    "type": "statement:localassign"
  }, {
    "id": 390,
    "text": "image:SetOption(wx.wxIMAGE_OPTION_BMP_FORMAT, formatt)",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "if ( formatt == wx.wxBMP_8BPP_PALETTE ) then\r\n                local cmap = \"\" --string.rep(256,\" \")\r\n                for i = 0, 256-1 do\r\n                    cmap = cmap .. string.byte(i)\r\n                end\r\n                image:SetPalette(wx.wxPalette(256, cmap, cmap, cmap))\r\n            end",
    "type": "statement:if"
  }, {
    "id": 392,
    "text": "local cmap = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 393,
    "text": "for i = 0, 256-1 do\r\n                    cmap = cmap .. string.byte(i)\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 394,
    "text": "cmap = cmap .. string.byte(i)",
    "type": "statement:assign"
  }, {
    "id": 395,
    "text": "image:SetPalette(wx.wxPalette(256, cmap, cmap, cmap))",
    "type": "statement:functioncall"
  }, {
    "id": 396,
    "text": "local pngvalues =\r\n        {\r\n            wx.wxPNG_TYPE_COLOUR,\r\n            wx.wxPNG_TYPE_COLOUR,\r\n            wx.wxPNG_TYPE_GREY,\r\n            wx.wxPNG_TYPE_GREY,\r\n            wx.wxPNG_TYPE_GREY_RED,\r\n            wx.wxPNG_TYPE_GREY_RED,\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 397,
    "text": "local pngchoices =\r\n        {\r\n            \"Colour 8bpp\",\r\n            \"Colour 16bpp\",\r\n            \"Grey 8bpp\",\r\n            \"Grey 16bpp\",\r\n            \"Grey red 8bpp\",\r\n            \"Grey red 16bpp\",\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 398,
    "text": "local sel = wx.wxGetSingleChoiceIndex(\"Set PNG format\",\r\n                                         \"Image sample: save file\",\r\n                                         pngchoices,\r\n                                         T)",
    "type": "statement:localassign"
  }, {
    "id": 399,
    "text": "if ( sel ~= -1 ) then\r\n            image:SetOption(wx.wxIMAGE_OPTION_PNG_FORMAT, pngvalues[sel])\r\n            image:SetOption(wx.wxIMAGE_OPTION_PNG_BITDEPTH, iff(sel % 2, 16, 8))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 400,
    "text": "image:SetOption(wx.wxIMAGE_OPTION_PNG_FORMAT, pngvalues[sel])",
    "type": "statement:functioncall"
  }, {
    "id": 401,
    "text": "image:SetOption(wx.wxIMAGE_OPTION_PNG_BITDEPTH, iff(sel % 2, 16, 8))",
    "type": "statement:functioncall"
  }, {
    "id": 402,
    "text": "image:Rescale(32,32)",
    "type": "statement:functioncall"
  }, {
    "id": 403,
    "text": "image:SetOption(wx.wxIMAGE_OPTION_CUR_HOTSPOT_X, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 404,
    "text": "image:SetOption(wx.wxIMAGE_OPTION_CUR_HOTSPOT_Y, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 405,
    "text": "saved = image:SaveFile(savefilename, wx.wxBITMAP_TYPE_CUR)",
    "type": "statement:assign"
  }, {
    "id": 406,
    "text": "if ( not saved ) then\r\n        --// This one guesses image format from filename extension\r\n        --// (it may fail if the extension is not recognized):\r\n        image:SaveFile(savefilename)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 407,
    "text": "image:SaveFile(savefilename)",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "local function OnPaint(T, event)\r\n    local dc = wx.wxPaintDC(T)\r\n    dc:DrawBitmap( T.m_bitmap, 0, 0, true --[[/* use mask */]] )\r\n    dc:delete()\r\nend",
    "type": "function"
  }, {
    "id": 410,
    "text": "dc:DrawBitmap( T.m_bitmap, 0, 0, true --[[/* use mask */]] )",
    "type": "statement:functioncall"
  }, {
    "id": 411,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 412,
    "text": "local function create(parent, bitmap)\r\n    local this = wx.wxFrame(parent, wx.wxID_ANY, \"Double click to save\",\r\n                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                  wx.wxCAPTION + wx.wxSYSTEM_MENU + wx.wxCLOSE_BOX)\r\n\r\n    this.m_bitmap = bitmap\r\n    this.OnPaint = OnPaint\r\n    this.OnSave = OnSave\r\n\r\n    this:Connect(wx.wxEVT_ERASE_BACKGROUND, function(event)\r\n        --// do nothing here to be able to see how transparent images are shown\r\n    end )\r\n    this:Connect(wx.wxEVT_PAINT, function(event) this:OnPaint(event) end)\r\n    this:Connect(wx.wxEVT_LEFT_DCLICK, function(event) this:OnSave(event) end)\r\n\r\n    this:SetClientSize(bitmap:GetWidth(), bitmap:GetHeight())\r\n    return this\r\nend",
    "type": "function"
  }, {
    "id": 413,
    "text": "local this = wx.wxFrame(parent, wx.wxID_ANY, \"Double click to save\",\r\n                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                  wx.wxCAPTION + wx.wxSYSTEM_MENU + wx.wxCLOSE_BOX)",
    "type": "statement:localassign"
  }, {
    "id": 414,
    "text": "this.m_bitmap = bitmap",
    "type": "statement:assign"
  }, {
    "id": 415,
    "text": "this.OnSave = OnSave",
    "type": "statement:assign"
  }, {
    "id": 416,
    "text": "this:Connect(wx.wxEVT_ERASE_BACKGROUND, function(event)\r\n        --// do nothing here to be able to see how transparent images are shown\r\n    end )",
    "type": "statement:functioncall"
  }, {
    "id": 417,
    "text": "this:Connect(wx.wxEVT_LEFT_DCLICK, function(event) this:OnSave(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 418,
    "text": "this:OnSave(event)",
    "type": "statement:functioncall"
  }, {
    "id": 419,
    "text": "this:SetClientSize(bitmap:GetWidth(), bitmap:GetHeight())",
    "type": "statement:functioncall"
  }, {
    "id": 420,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 421,
    "text": "function __call(self, ...)\r\n    return create(...)\r\nend",
    "type": "function"
  }, {
    "id": 422,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 423,
    "text": "local function InitAlphaBitmap(T)\r\n--[[FIXME\r\n    --// First, clear the whole bitmap by making it alpha\r\n    do\r\n        local data = wx.wxAlphaPixelData( T.m_alphaBitmap, wx.wxPoint(0,0), wx.wxSize(SIZE, SIZE) )\r\n        if ( not data ) then\r\n            wx.wxLogError(\"Failed to gain raw access to bitmap data\")\r\n            return\r\n        end\r\n        data:UseAlpha()\r\n        local p = wx.wxAlphaPixelData.Iterator(data)\r\n        for y = 0, SIZE-1 do\r\n            local rowStart = p\r\n            for x = 0, SIZE-1 do\r\n                p.Alpha() = 0\r\n                -- ++p; // same as p.OffsetX(1)\r\n            end\r\n            p = rowStart\r\n            p.OffsetY(data, 1)\r\n        end\r\n    end\r\n\r\n    --// Then, draw colourful alpha-blended stripes\r\n    local data = wx.wxAlphaPixelData(T.m_alphaBitmap, wx.wxPoint(BORDER, BORDER),\r\n                          wx.wxSize(REAL_SIZE, REAL_SIZE))\r\n    if ( not data ) then\r\n        wx.wxLogError(\"Failed to gain raw access to bitmap data\")\r\n        return\r\n    end\r\n\r\n    data.UseAlpha()\r\n    local p = wx.wxAlphaPixelData.Iterator(data)\r\n\r\n    for y = 0, REAL_SIZE-1 do\r\n        wxAlphaPixelData::Iterator rowStart = p;\r\n\r\n        int r = y < REAL_SIZE/3 ? 255 : 0,\r\n            g = (REAL_SIZE/3 <= y) && (y < 2*(REAL_SIZE/3)) ? 255 : 0,\r\n            b = 2*(REAL_SIZE/3) <= y ? 255 : 0;\r\n\r\n        for x = 0, REAL_SIZE-1 do\r\n            --// note that RGB must be premultiplied by alpha\r\n            local a = (wxAlphaPixelData::Iterator::ChannelType)((x*255.)/REAL_SIZE)\r\n            p.Red() = r * a / 256\r\n            p.Green() = g * a / 256\r\n            p.Blue() = b * a / 256\r\n            p.Alpha() = a\r\n\r\n            --FIXME ++p; --// same as p.OffsetX(1)\r\n        end\r\n\r\n        p = rowStart\r\n        p.OffsetY(data, 1)\r\n    end\r\n--]]\r\nend",
    "type": "function"
  }, {
    "id": 424,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 425,
    "text": "local function InitBitmap(T)\r\n    --// draw some colourful stripes without alpha\r\n    local data = wx.wxNativePixelData(T.m_bitmap)\r\n    if ( not data ) then\r\n        wx.wxLogError(\"Failed to gain raw access to bitmap data\")\r\n        return\r\n    end\r\n\r\n    local p = wx.wxNativePixelData.Iterator(data)\r\n    for y = 0, SIZE-1 do\r\n        local rowStart = p\r\n\r\n        local r = iff(y < SIZE/3, 255, 0)\r\n        local g = iff((SIZE/3 <= y) and (y < 2*(SIZE/3)), 255, 0)\r\n        local b = iff(2*(SIZE/3) <= y, 255, 0)\r\n\r\n        for x = 0, SIZE-1 do\r\n            p.Red = r\r\n            p.Green = g\r\n            p.Blue = b\r\n            --FIXME ++p; // same as p.OffsetX(1)\r\n        end\r\n\r\n        p = rowStart\r\n        p.OffsetY(data, 1)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 426,
    "text": "local data = wx.wxNativePixelData(T.m_bitmap)",
    "type": "statement:localassign"
  }, {
    "id": 427,
    "text": "if ( not data ) then\r\n        wx.wxLogError(\"Failed to gain raw access to bitmap data\")\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 428,
    "text": "wx.wxLogError(\"Failed to gain raw access to bitmap data\")",
    "type": "statement:functioncall"
  }, {
    "id": 429,
    "text": "local p = wx.wxNativePixelData.Iterator(data)",
    "type": "statement:localassign"
  }, {
    "id": 430,
    "text": "for y = 0, SIZE-1 do\r\n        local rowStart = p\r\n\r\n        local r = iff(y < SIZE/3, 255, 0)\r\n        local g = iff((SIZE/3 <= y) and (y < 2*(SIZE/3)), 255, 0)\r\n        local b = iff(2*(SIZE/3) <= y, 255, 0)\r\n\r\n        for x = 0, SIZE-1 do\r\n            p.Red = r\r\n            p.Green = g\r\n            p.Blue = b\r\n            --FIXME ++p; // same as p.OffsetX(1)\r\n        end\r\n\r\n        p = rowStart\r\n        p.OffsetY(data, 1)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 431,
    "text": "local rowStart = p",
    "type": "statement:localassign"
  }, {
    "id": 432,
    "text": "local r = iff(y < SIZE/3, 255, 0)",
    "type": "statement:localassign"
  }, {
    "id": 433,
    "text": "local g = iff((SIZE/3 <= y) and (y < 2*(SIZE/3)), 255, 0)",
    "type": "statement:localassign"
  }, {
    "id": 434,
    "text": "local b = iff(2*(SIZE/3) <= y, 255, 0)",
    "type": "statement:localassign"
  }, {
    "id": 435,
    "text": "for x = 0, SIZE-1 do\r\n            p.Red = r\r\n            p.Green = g\r\n            p.Blue = b\r\n            --FIXME ++p; // same as p.OffsetX(1)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 436,
    "text": "p.Red = r",
    "type": "statement:assign"
  }, {
    "id": 437,
    "text": "p.Green = g",
    "type": "statement:assign"
  }, {
    "id": 438,
    "text": "p.Blue = b",
    "type": "statement:assign"
  }, {
    "id": 439,
    "text": "p = rowStart",
    "type": "statement:assign"
  }, {
    "id": 440,
    "text": "p.OffsetY(data, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 441,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 442,
    "text": "local function OnPaint(T, event)\r\n    local dc = wx.wxPaintDC(T)\r\n    dc:DrawText(\"This is alpha and raw bitmap test\", 0, BORDER)\r\n    dc:DrawText(\"This is alpha and raw bitmap test\", 0, SIZE/2 - BORDER)\r\n    dc:DrawText(\"This is alpha and raw bitmap test\", 0, SIZE - 2*BORDER)\r\n    dc:DrawBitmap( m_alphaBitmap, 0, 0, true --[[/* use mask */]] )\r\n\r\n    dc:DrawText(\"Raw bitmap access without alpha\", 0, SIZE+5)\r\n    dc:DrawBitmap( m_bitmap, 0, SIZE+5+dc:GetCharHeight(), false)\r\n    dc:delete()\r\nend",
    "type": "function"
  }, {
    "id": 443,
    "text": "dc:DrawText(\"This is alpha and raw bitmap test\", 0, BORDER)",
    "type": "statement:functioncall"
  }, {
    "id": 444,
    "text": "dc:DrawText(\"This is alpha and raw bitmap test\", 0, SIZE/2 - BORDER)",
    "type": "statement:functioncall"
  }, {
    "id": 445,
    "text": "dc:DrawText(\"This is alpha and raw bitmap test\", 0, SIZE - 2*BORDER)",
    "type": "statement:functioncall"
  }, {
    "id": 446,
    "text": "dc:DrawBitmap( m_alphaBitmap, 0, 0, true --[[/* use mask */]] )",
    "type": "statement:functioncall"
  }, {
    "id": 447,
    "text": "dc:DrawText(\"Raw bitmap access without alpha\", 0, SIZE+5)",
    "type": "statement:functioncall"
  }, {
    "id": 448,
    "text": "dc:DrawBitmap( m_bitmap, 0, SIZE+5+dc:GetCharHeight(), false)",
    "type": "statement:functioncall"
  }, {
    "id": 449,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 450,
    "text": "local function create(parent)\r\n    local this = wx.wxFrame(parent, wx.wxID_ANY, \"Raw bitmaps (how exciting)\")\r\n\r\n    this.m_bitmap = wx.wxBitmap(SIZE, SIZE, 24)\r\n    this.m_alphaBitmap = wx.wxBitmap(SIZE, SIZE, 32)\r\n    this.InitAlphaBitmap = InitAlphaBitmap\r\n    this.InitBitmap = InitBitmap\r\n    this.OnPaint = OnPaint\r\n    this:Connect(wx.wxEVT_PAINT, function(event) this:OnPaint(event) end)\r\n\r\n    this:SetClientSize(SIZE, SIZE*2+25)\r\n    this:InitAlphaBitmap()\r\n    this:InitBitmap()\r\n    return this\r\nend",
    "type": "function"
  }, {
    "id": 451,
    "text": "local this = wx.wxFrame(parent, wx.wxID_ANY, \"Raw bitmaps (how exciting)\")",
    "type": "statement:localassign"
  }, {
    "id": 452,
    "text": "this.m_bitmap = wx.wxBitmap(SIZE, SIZE, 24)",
    "type": "statement:assign"
  }, {
    "id": 453,
    "text": "this.m_alphaBitmap = wx.wxBitmap(SIZE, SIZE, 32)",
    "type": "statement:assign"
  }, {
    "id": 454,
    "text": "this.InitAlphaBitmap = InitAlphaBitmap",
    "type": "statement:assign"
  }, {
    "id": 455,
    "text": "this.InitBitmap = InitBitmap",
    "type": "statement:assign"
  }, {
    "id": 456,
    "text": "this:SetClientSize(SIZE, SIZE*2+25)",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "this:InitAlphaBitmap()",
    "type": "statement:functioncall"
  }, {
    "id": 458,
    "text": "this:InitBitmap()",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 460,
    "text": "function __call(self, ...)\r\n    return create(...)\r\nend",
    "type": "function"
  }, {
    "id": 461,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 462,
    "text": "local function OnAbout(T, event)\r\n  wx.wxMessageBox( \"wxImage demo\\n\"..\r\n                    \"Robert Roebling (c) 1998,2000\",\r\n                    \"About wxImage Demo\", wx.wxICON_INFORMATION + wx.wxOK )\r\nend",
    "type": "function"
  }, {
    "id": 463,
    "text": "wx.wxMessageBox( \"wxImage demo\\n\"..\r\n                    \"Robert Roebling (c) 1998,2000\",\r\n                    \"About wxImage Demo\", wx.wxICON_INFORMATION + wx.wxOK )",
    "type": "statement:functioncall"
  }, {
    "id": 464,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 465,
    "text": "local function OnNewFrame(T, event)\r\n--if wx.wxUSE_FILEDLG then\r\n    local filename = wx.wxFileSelector(\"Select image file\")\r\n    if ( not filename ) then\r\n        return\r\n    end\r\n\r\n    local image = wx.wxImage()\r\n    if ( not image:LoadFile(filename) ) then\r\n        wx.wxLogError(\"Couldn't load image from '%s'.\", filename)\r\n        return\r\n    end\r\n\r\n    MyImageFrame(T, wx.wxBitmap(image)):Show()\r\n--end --// wxUSE_FILEDLG\r\nend",
    "type": "function"
  }, {
    "id": 466,
    "text": "local filename = wx.wxFileSelector(\"Select image file\")",
    "type": "statement:localassign"
  }, {
    "id": 467,
    "text": "if ( not filename ) then\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 468,
    "text": "local image = wx.wxImage()",
    "type": "statement:localassign"
  }, {
    "id": 469,
    "text": "if ( not image:LoadFile(filename) ) then\r\n        wx.wxLogError(\"Couldn't load image from '%s'.\", filename)\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 470,
    "text": "wx.wxLogError(\"Couldn't load image from '%s'.\", filename)",
    "type": "statement:functioncall"
  }, {
    "id": 471,
    "text": "MyImageFrame(T, wx.wxBitmap(image)):Show()",
    "type": "statement:functioncall"
  }, {
    "id": 472,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 473,
    "text": "local function OnTestRawBitmap(T, event)\r\n    MyRawBitmapFrame(T):Show()\r\nend",
    "type": "function"
  }, {
    "id": 474,
    "text": "MyRawBitmapFrame(T):Show()",
    "type": "statement:functioncall"
  }, {
    "id": 475,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 476,
    "text": "local function OnQuit(T, event)\r\n    T:Close( true )\r\nend",
    "type": "function"
  }, {
    "id": 477,
    "text": "T:Close( true )",
    "type": "statement:functioncall"
  }, {
    "id": 478,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 479,
    "text": "local function OnCopy(T, event)\r\n    local dobjBmp = wx.wxBitmapDataObject()\r\n    dobjBmp:SetBitmap(T.m_canvas.my_horse_png)\r\n\r\n    local clipboard = wx.wxClipboard.Get()\r\n    if not clipboard then\r\n        wx.wxLogError(\"Failed to open clipboard\")\r\n        return\r\n    end\r\n    clipboard:Open()\r\n\r\n    if ( not clipboard:SetData(dobjBmp) ) then\r\n        wx.wxLogError(\"Failed to copy bitmap to clipboard\")\r\n    end\r\n\r\n    clipboard:Close()\r\nend",
    "type": "function"
  }, {
    "id": 480,
    "text": "local dobjBmp = wx.wxBitmapDataObject()",
    "type": "statement:localassign"
  }, {
    "id": 481,
    "text": "dobjBmp:SetBitmap(T.m_canvas.my_horse_png)",
    "type": "statement:functioncall"
  }, {
    "id": 482,
    "text": "local clipboard = wx.wxClipboard.Get()",
    "type": "statement:localassign"
  }, {
    "id": 483,
    "text": "if not clipboard then\r\n        wx.wxLogError(\"Failed to open clipboard\")\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 484,
    "text": "wx.wxLogError(\"Failed to open clipboard\")",
    "type": "statement:functioncall"
  }, {
    "id": 485,
    "text": "clipboard:Open()",
    "type": "statement:functioncall"
  }, {
    "id": 486,
    "text": "if ( not clipboard:SetData(dobjBmp) ) then\r\n        wx.wxLogError(\"Failed to copy bitmap to clipboard\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 487,
    "text": "wx.wxLogError(\"Failed to copy bitmap to clipboard\")",
    "type": "statement:functioncall"
  }, {
    "id": 488,
    "text": "clipboard:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 489,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 490,
    "text": "local function OnPaste(T, event)\r\n    local dobjBmp = wx.wxBitmapDataObject()\r\n\r\n    local clipboard = wx.wxClipboard.Get()\r\n    if not clipboard then\r\n        wx.wxLogError(\"Failed to open clipboard\")\r\n        return\r\n    end\r\n    clipboard:Open()\r\n    if ( not clipboard:GetData(dobjBmp) ) then\r\n        wx.wxLogMessage(\"No bitmap data in the clipboard\")\r\n    else\r\n        MyImageFrame(T, dobjBmp:GetBitmap()):Show()\r\n    end\r\n    clipboard:Close()\r\nend",
    "type": "function"
  }, {
    "id": 491,
    "text": "if ( not clipboard:GetData(dobjBmp) ) then\r\n        wx.wxLogMessage(\"No bitmap data in the clipboard\")\r\n    else\r\n        MyImageFrame(T, dobjBmp:GetBitmap()):Show()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 492,
    "text": "wx.wxLogMessage(\"No bitmap data in the clipboard\")",
    "type": "statement:functioncall"
  }, {
    "id": 493,
    "text": "MyImageFrame(T, dobjBmp:GetBitmap()):Show()",
    "type": "statement:functioncall"
  }, {
    "id": 494,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 495,
    "text": "local function create()\r\n    local this = wx.wxFrame(wx.NULL, wx.wxID_ANY, \"wxImage sample\",\r\n                  wx.wxPoint(20, 20), wx.wxSize(950, 700))\r\n\r\n    this.OnAbout = OnAbout\r\n    this.OnQuit = OnQuit\r\n    this.OnNewFrame = OnNewFrame\r\nif wx.wxHAVE_RAW_BITMAP then                -- FIXME add wxPixelData\r\n    this.OnTestRawBitmap = OnTestRawBitmap\r\nend --// wxHAVE_RAW_BITMAP\r\n--if wx.wxUSE_CLIPBOARD then\r\n    this.OnCopy = OnCopy\r\n    this.OnPaste = OnPaste\r\n--end --// wx.wxUSE_CLIPBOARD\r\n\r\n    this:Connect(ID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnAbout(event) end)\r\n    this:Connect(ID_QUIT, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnQuit(event) end)\r\n    this:Connect(ID_NEW, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnNewFrame(event) end)\r\nif wx.wxHAVE_RAW_BITMAP then\r\n    this:Connect(ID_SHOWRAW, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnTestRawBitmap(event) end)\r\nend\r\n--if wx.wxUSE_CLIPBOARD then\r\n    this:Connect(wx.wxID_COPY, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnCopy(event) end)\r\n    this:Connect(wx.wxID_PASTE, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnPaste(event) end)\r\n--end --// wxUSE_CLIPBOARD\r\n\r\n    local menu_bar = wx.wxMenuBar()\r\n\r\n    local menuImage = wx.wxMenu()\r\n    menuImage:Append( ID_NEW, \"&Show any image...\\tCtrl-O\")\r\n\r\nif wx.wxHAVE_RAW_BITMAP then\r\n    menuImage:Append( ID_SHOWRAW, \"Test &raw bitmap...\\tCtrl-R\")\r\nend\r\n    menuImage:AppendSeparator()\r\n    menuImage:Append( ID_ABOUT, \"&About...\")\r\n    menuImage:AppendSeparator()\r\n    menuImage:Append( ID_QUIT, \"E&xit\\tCtrl-Q\")\r\n    menu_bar:Append(menuImage, \"&Image\")\r\n\r\n--if wx.wxUSE_CLIPBOARD then\r\n    local menuClipboard = wx.wxMenu()\r\n    menuClipboard:Append(wx.wxID_COPY, \"&Copy test image\\tCtrl-C\")\r\n    menuClipboard:Append(wx.wxID_PASTE, \"&Paste image\\tCtrl-V\")\r\n    menu_bar:Append(menuClipboard, \"&Clipboard\")\r\n--end --// wxUSE_CLIPBOARD\r\n\r\n    this:SetMenuBar( menu_bar )\r\n\r\n--if wx.wxUSE_STATUSBAR then\r\n    this:CreateStatusBar(2)\r\n    --local widths = { -1, 100 }\r\n    --this:SetStatusWidths( 2, widths )\r\n    this:SetStatusWidths({ -1, 100 })\r\n--end --// wxUSE_STATUSBAR\r\n\r\n    this.m_canvas = MyCanvas( this, wx.wxID_ANY, wx.wxPoint(0,0), wx.wxSize(10,10) )\r\n    --// 500 width * 2750 height\r\n    this.m_canvas:SetScrollbars( 10, 10, 50, 275 )\r\n\r\n    return this\r\nend",
    "type": "function"
  }, {
    "id": 496,
    "text": "local this = wx.wxFrame(wx.NULL, wx.wxID_ANY, \"wxImage sample\",\r\n                  wx.wxPoint(20, 20), wx.wxSize(950, 700))",
    "type": "statement:localassign"
  }, {
    "id": 497,
    "text": "this.OnAbout = OnAbout",
    "type": "statement:assign"
  }, {
    "id": 498,
    "text": "this.OnQuit = OnQuit",
    "type": "statement:assign"
  }, {
    "id": 499,
    "text": "this.OnNewFrame = OnNewFrame",
    "type": "statement:assign"
  }, {
    "id": 500,
    "text": "if wx.wxHAVE_RAW_BITMAP then                -- FIXME add wxPixelData\r\n    this.OnTestRawBitmap = OnTestRawBitmap\r\nend",
    "type": "statement:if"
  }, {
    "id": 501,
    "text": "this.OnTestRawBitmap = OnTestRawBitmap",
    "type": "statement:assign"
  }, {
    "id": 502,
    "text": "this.OnCopy = OnCopy",
    "type": "statement:assign"
  }, {
    "id": 503,
    "text": "this.OnPaste = OnPaste",
    "type": "statement:assign"
  }, {
    "id": 504,
    "text": "this:Connect(ID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnAbout(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 505,
    "text": "this:OnAbout(event)",
    "type": "statement:functioncall"
  }, {
    "id": 506,
    "text": "this:Connect(ID_QUIT, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnQuit(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 507,
    "text": "this:OnQuit(event)",
    "type": "statement:functioncall"
  }, {
    "id": 508,
    "text": "this:Connect(ID_NEW, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnNewFrame(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 509,
    "text": "this:OnNewFrame(event)",
    "type": "statement:functioncall"
  }, {
    "id": 510,
    "text": "if wx.wxHAVE_RAW_BITMAP then\r\n    this:Connect(ID_SHOWRAW, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnTestRawBitmap(event) end)\r\nend",
    "type": "statement:if"
  }, {
    "id": 511,
    "text": "this:Connect(ID_SHOWRAW, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnTestRawBitmap(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 512,
    "text": "this:OnTestRawBitmap(event)",
    "type": "statement:functioncall"
  }, {
    "id": 513,
    "text": "this:Connect(wx.wxID_COPY, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnCopy(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 514,
    "text": "this:OnCopy(event)",
    "type": "statement:functioncall"
  }, {
    "id": 515,
    "text": "this:Connect(wx.wxID_PASTE, wx.wxEVT_COMMAND_MENU_SELECTED, function(event) this:OnPaste(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 516,
    "text": "this:OnPaste(event)",
    "type": "statement:functioncall"
  }, {
    "id": 517,
    "text": "local menu_bar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 518,
    "text": "local menuImage = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 519,
    "text": "menuImage:Append( ID_NEW, \"&Show any image...\\tCtrl-O\")",
    "type": "statement:functioncall"
  }, {
    "id": 520,
    "text": "if wx.wxHAVE_RAW_BITMAP then\r\n    menuImage:Append( ID_SHOWRAW, \"Test &raw bitmap...\\tCtrl-R\")\r\nend",
    "type": "statement:if"
  }, {
    "id": 521,
    "text": "menuImage:Append( ID_SHOWRAW, \"Test &raw bitmap...\\tCtrl-R\")",
    "type": "statement:functioncall"
  }, {
    "id": 522,
    "text": "menuImage:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 523,
    "text": "menuImage:Append( ID_ABOUT, \"&About...\")",
    "type": "statement:functioncall"
  }, {
    "id": 524,
    "text": "menuImage:Append( ID_QUIT, \"E&xit\\tCtrl-Q\")",
    "type": "statement:functioncall"
  }, {
    "id": 525,
    "text": "menu_bar:Append(menuImage, \"&Image\")",
    "type": "statement:functioncall"
  }, {
    "id": 526,
    "text": "local menuClipboard = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 527,
    "text": "menuClipboard:Append(wx.wxID_COPY, \"&Copy test image\\tCtrl-C\")",
    "type": "statement:functioncall"
  }, {
    "id": 528,
    "text": "menuClipboard:Append(wx.wxID_PASTE, \"&Paste image\\tCtrl-V\")",
    "type": "statement:functioncall"
  }, {
    "id": 529,
    "text": "menu_bar:Append(menuClipboard, \"&Clipboard\")",
    "type": "statement:functioncall"
  }, {
    "id": 530,
    "text": "this:SetMenuBar( menu_bar )",
    "type": "statement:functioncall"
  }, {
    "id": 531,
    "text": "this:CreateStatusBar(2)",
    "type": "statement:functioncall"
  }, {
    "id": 532,
    "text": "this:SetStatusWidths({ -1, 100 })",
    "type": "statement:functioncall"
  }, {
    "id": 533,
    "text": "this.m_canvas = MyCanvas( this, wx.wxID_ANY, wx.wxPoint(0,0), wx.wxSize(10,10) )",
    "type": "statement:assign"
  }, {
    "id": 534,
    "text": "this.m_canvas:SetScrollbars( 10, 10, 50, 275 )",
    "type": "statement:functioncall"
  }, {
    "id": 535,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 536,
    "text": "function __call(self, ...)\r\n    return create(...)\r\nend",
    "type": "function"
  }, {
    "id": 537,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 538,
    "text": "local function OnInit(T)\r\n    local frame = MyFrame()\r\n    frame:Show( true )\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 539,
    "text": "local frame = MyFrame()",
    "type": "statement:localassign"
  }, {
    "id": 540,
    "text": "frame:Show( true )",
    "type": "statement:functioncall"
  }, {
    "id": 541,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 542,
    "text": "local function create()\r\n    local this = wx.wxGetApp()\r\n    if not OnInit(this) then return nil end\r\n    return this\r\nend",
    "type": "function"
  }, {
    "id": 543,
    "text": "local this = wx.wxGetApp()",
    "type": "statement:localassign"
  }, {
    "id": 544,
    "text": "if not OnInit(this) then return nil end",
    "type": "statement:if"
  }, {
    "id": 545,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 546,
    "text": "function __call(self, ...)\r\n    return create(...)\r\nend",
    "type": "function"
  }, {
    "id": 547,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 548,
    "text": "function(event) this:OnPaint(event) end",
    "type": "function"
  }, {
    "id": 549,
    "text": "function(event)\r\n        --// do nothing here to be able to see how transparent images are shown\r\n    end",
    "type": "function"
  }, {
    "id": 550,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 551,
    "text": "function(event) this:OnPaint(event) end",
    "type": "function"
  }, {
    "id": 552,
    "text": "function(event) this:OnSave(event) end",
    "type": "function"
  }, {
    "id": 553,
    "text": "function(event) this:OnPaint(event) end",
    "type": "function"
  }, {
    "id": 554,
    "text": "function(event) this:OnAbout(event) end",
    "type": "function"
  }, {
    "id": 555,
    "text": "function(event) this:OnQuit(event) end",
    "type": "function"
  }, {
    "id": 556,
    "text": "function(event) this:OnNewFrame(event) end",
    "type": "function"
  }, {
    "id": 557,
    "text": "function(event) this:OnTestRawBitmap(event) end",
    "type": "function"
  }, {
    "id": 558,
    "text": "function(event) this:OnCopy(event) end",
    "type": "function"
  }, {
    "id": 559,
    "text": "function(event) this:OnPaste(event) end",
    "type": "function"
  }, {
    "id": 560,
    "text": "",
    "type": "function container"
  }, {
    "id": 561,
    "text": "wxClipboard.Get",
    "type": "global function"
  }, {
    "id": 562,
    "text": "wxFileSelector",
    "type": "global function"
  }, {
    "id": 563,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 564,
    "text": "wxImage",
    "type": "global function"
  }, {
    "id": 565,
    "text": "wxBitmapDataObject",
    "type": "global function"
  }, {
    "id": 566,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 567,
    "text": "wxRect",
    "type": "global function"
  }, {
    "id": 568,
    "text": "wxIcon",
    "type": "global function"
  }, {
    "id": 569,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 570,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 571,
    "text": "wxBrush",
    "type": "global function"
  }, {
    "id": 572,
    "text": "wxColour",
    "type": "global function"
  }, {
    "id": 573,
    "text": "wxLogMessage",
    "type": "global function"
  }, {
    "id": 574,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 575,
    "text": "wxGetSingleChoiceIndex",
    "type": "global function"
  }, {
    "id": 576,
    "text": "wxFile",
    "type": "global function"
  }, {
    "id": 577,
    "text": "wxBitmap",
    "type": "global function"
  }, {
    "id": 578,
    "text": "wxImage.GetImageCount",
    "type": "global function"
  }, {
    "id": 579,
    "text": "wxDirSelector",
    "type": "global function"
  }, {
    "id": 580,
    "text": "wxFile.Exists",
    "type": "global function"
  }, {
    "id": 581,
    "text": "wxFileName.SplitPath",
    "type": "global function"
  }, {
    "id": 582,
    "text": "wxNativePixelData.Iterator",
    "type": "global function"
  }, {
    "id": 583,
    "text": "wxPalette",
    "type": "global function"
  }, {
    "id": 584,
    "text": "wxMemoryDC",
    "type": "global function"
  }, {
    "id": 585,
    "text": "wxFont",
    "type": "global function"
  }, {
    "id": 586,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 587,
    "text": "wxScrolledWindow",
    "type": "global function"
  }, {
    "id": 588,
    "text": "wxPoint",
    "type": "global function"
  }, {
    "id": 589,
    "text": "wxMemoryInputStream",
    "type": "global function"
  }, {
    "id": 590,
    "text": "wxPaintDC",
    "type": "global function"
  }, {
    "id": 591,
    "text": "wxLogError",
    "type": "global function"
  }, {
    "id": 592,
    "text": "wxNativePixelData",
    "type": "global function"
  }, {
    "id": 593,
    "text": "MyFrame",
    "type": "global function"
  }, {
    "id": 594,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 595,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 596,
    "text": "MyApp",
    "type": "global function"
  }, {
    "id": 597,
    "text": "module",
    "type": "global function"
  }, {
    "id": 598,
    "text": "OffsetY",
    "type": "global function"
  }, {
    "id": 599,
    "text": "C",
    "type": "global function"
  }, {
    "id": 600,
    "text": "MyImageFrame",
    "type": "global function"
  }, {
    "id": 601,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 602,
    "text": "MyRawBitmapFrame",
    "type": "global function"
  }, {
    "id": 603,
    "text": "MyCanvas",
    "type": "global function"
  }, {
    "id": 604,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 605,
    "text": "require",
    "type": "global function"
  }, {
    "id": 606,
    "text": "",
    "type": "variable container"
  }, {
    "id": 607,
    "text": "",
    "type": "require container"
  }, {
    "id": 608,
    "text": "",
    "type": "local variable"
  }, {
    "id": 609,
    "text": "",
    "type": "n/a"
  }, {
    "id": 610,
    "text": "",
    "type": "local variable"
  }, {
    "id": 611,
    "text": "",
    "type": "n/a"
  }, {
    "id": 612,
    "text": "",
    "type": "local variable"
  }, {
    "id": 613,
    "text": "",
    "type": "n/a"
  }, {
    "id": 614,
    "text": "",
    "type": "local variable"
  }, {
    "id": 615,
    "text": "",
    "type": "n/a"
  }, {
    "id": 616,
    "text": "",
    "type": "local variable"
  }, {
    "id": 617,
    "text": "",
    "type": "n/a"
  }, {
    "id": 618,
    "text": "",
    "type": "local variable"
  }, {
    "id": 619,
    "text": "",
    "type": "n/a"
  }, {
    "id": 620,
    "text": "",
    "type": "local variable"
  }, {
    "id": 621,
    "text": "",
    "type": "n/a"
  }, {
    "id": 622,
    "text": "",
    "type": "local variable"
  }, {
    "id": 623,
    "text": "",
    "type": "n/a"
  }, {
    "id": 624,
    "text": "",
    "type": "local variable"
  }, {
    "id": 625,
    "text": "",
    "type": "number"
  }, {
    "id": 626,
    "text": "",
    "type": "local variable"
  }, {
    "id": 627,
    "text": "",
    "type": "number"
  }, {
    "id": 628,
    "text": "",
    "type": "local variable"
  }, {
    "id": 629,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 630,
    "text": "",
    "type": "number"
  }, {
    "id": 631,
    "text": "",
    "type": "number"
  }, {
    "id": 632,
    "text": "",
    "type": "number"
  }, {
    "id": 633,
    "text": "",
    "type": "number"
  }, {
    "id": 634,
    "text": "",
    "type": "number"
  }, {
    "id": 635,
    "text": "",
    "type": "number"
  }, {
    "id": 636,
    "text": "",
    "type": "number"
  }, {
    "id": 637,
    "text": "",
    "type": "number"
  }, {
    "id": 638,
    "text": "",
    "type": "number"
  }, {
    "id": 639,
    "text": "",
    "type": "number"
  }, {
    "id": 640,
    "text": "",
    "type": "number"
  }, {
    "id": 641,
    "text": "",
    "type": "number"
  }, {
    "id": 642,
    "text": "",
    "type": "number"
  }, {
    "id": 643,
    "text": "",
    "type": "number"
  }, {
    "id": 644,
    "text": "",
    "type": "number"
  }, {
    "id": 645,
    "text": "",
    "type": "number"
  }, {
    "id": 646,
    "text": "",
    "type": "number"
  }, {
    "id": 647,
    "text": "",
    "type": "number"
  }, {
    "id": 648,
    "text": "",
    "type": "number"
  }, {
    "id": 649,
    "text": "",
    "type": "number"
  }, {
    "id": 650,
    "text": "",
    "type": "number"
  }, {
    "id": 651,
    "text": "",
    "type": "number"
  }, {
    "id": 652,
    "text": "",
    "type": "number"
  }, {
    "id": 653,
    "text": "",
    "type": "number"
  }, {
    "id": 654,
    "text": "",
    "type": "number"
  }, {
    "id": 655,
    "text": "",
    "type": "number"
  }, {
    "id": 656,
    "text": "",
    "type": "number"
  }, {
    "id": 657,
    "text": "",
    "type": "number"
  }, {
    "id": 658,
    "text": "",
    "type": "number"
  }, {
    "id": 659,
    "text": "",
    "type": "number"
  }, {
    "id": 660,
    "text": "",
    "type": "number"
  }, {
    "id": 661,
    "text": "",
    "type": "number"
  }, {
    "id": 662,
    "text": "",
    "type": "number"
  }, {
    "id": 663,
    "text": "",
    "type": "number"
  }, {
    "id": 664,
    "text": "",
    "type": "number"
  }, {
    "id": 665,
    "text": "",
    "type": "number"
  }, {
    "id": 666,
    "text": "",
    "type": "number"
  }, {
    "id": 667,
    "text": "",
    "type": "number"
  }, {
    "id": 668,
    "text": "",
    "type": "number"
  }, {
    "id": 669,
    "text": "",
    "type": "number"
  }, {
    "id": 670,
    "text": "",
    "type": "number"
  }, {
    "id": 671,
    "text": "",
    "type": "number"
  }, {
    "id": 672,
    "text": "",
    "type": "number"
  }, {
    "id": 673,
    "text": "",
    "type": "number"
  }, {
    "id": 674,
    "text": "",
    "type": "number"
  }, {
    "id": 675,
    "text": "",
    "type": "number"
  }, {
    "id": 676,
    "text": "",
    "type": "number"
  }, {
    "id": 677,
    "text": "",
    "type": "number"
  }, {
    "id": 678,
    "text": "",
    "type": "number"
  }, {
    "id": 679,
    "text": "",
    "type": "number"
  }, {
    "id": 680,
    "text": "",
    "type": "number"
  }, {
    "id": 681,
    "text": "",
    "type": "number"
  }, {
    "id": 682,
    "text": "",
    "type": "number"
  }, {
    "id": 683,
    "text": "",
    "type": "number"
  }, {
    "id": 684,
    "text": "",
    "type": "number"
  }, {
    "id": 685,
    "text": "",
    "type": "number"
  }, {
    "id": 686,
    "text": "",
    "type": "number"
  }, {
    "id": 687,
    "text": "",
    "type": "number"
  }, {
    "id": 688,
    "text": "",
    "type": "number"
  }, {
    "id": 689,
    "text": "",
    "type": "number"
  }, {
    "id": 690,
    "text": "",
    "type": "number"
  }, {
    "id": 691,
    "text": "",
    "type": "number"
  }, {
    "id": 692,
    "text": "",
    "type": "number"
  }, {
    "id": 693,
    "text": "",
    "type": "number"
  }, {
    "id": 694,
    "text": "",
    "type": "number"
  }, {
    "id": 695,
    "text": "",
    "type": "number"
  }, {
    "id": 696,
    "text": "",
    "type": "number"
  }, {
    "id": 697,
    "text": "",
    "type": "number"
  }, {
    "id": 698,
    "text": "",
    "type": "number"
  }, {
    "id": 699,
    "text": "",
    "type": "number"
  }, {
    "id": 700,
    "text": "",
    "type": "number"
  }, {
    "id": 701,
    "text": "",
    "type": "number"
  }, {
    "id": 702,
    "text": "",
    "type": "number"
  }, {
    "id": 703,
    "text": "",
    "type": "number"
  }, {
    "id": 704,
    "text": "",
    "type": "number"
  }, {
    "id": 705,
    "text": "",
    "type": "number"
  }, {
    "id": 706,
    "text": "",
    "type": "number"
  }, {
    "id": 707,
    "text": "",
    "type": "number"
  }, {
    "id": 708,
    "text": "",
    "type": "number"
  }, {
    "id": 709,
    "text": "",
    "type": "number"
  }, {
    "id": 710,
    "text": "",
    "type": "number"
  }, {
    "id": 711,
    "text": "",
    "type": "number"
  }, {
    "id": 712,
    "text": "",
    "type": "number"
  }, {
    "id": 713,
    "text": "",
    "type": "number"
  }, {
    "id": 714,
    "text": "",
    "type": "number"
  }, {
    "id": 715,
    "text": "",
    "type": "number"
  }, {
    "id": 716,
    "text": "",
    "type": "number"
  }, {
    "id": 717,
    "text": "",
    "type": "number"
  }, {
    "id": 718,
    "text": "",
    "type": "number"
  }, {
    "id": 719,
    "text": "",
    "type": "number"
  }, {
    "id": 720,
    "text": "",
    "type": "number"
  }, {
    "id": 721,
    "text": "",
    "type": "number"
  }, {
    "id": 722,
    "text": "",
    "type": "number"
  }, {
    "id": 723,
    "text": "",
    "type": "number"
  }, {
    "id": 724,
    "text": "",
    "type": "number"
  }, {
    "id": 725,
    "text": "",
    "type": "number"
  }, {
    "id": 726,
    "text": "",
    "type": "number"
  }, {
    "id": 727,
    "text": "",
    "type": "number"
  }, {
    "id": 728,
    "text": "",
    "type": "number"
  }, {
    "id": 729,
    "text": "",
    "type": "number"
  }, {
    "id": 730,
    "text": "",
    "type": "number"
  }, {
    "id": 731,
    "text": "",
    "type": "number"
  }, {
    "id": 732,
    "text": "",
    "type": "number"
  }, {
    "id": 733,
    "text": "",
    "type": "number"
  }, {
    "id": 734,
    "text": "",
    "type": "number"
  }, {
    "id": 735,
    "text": "",
    "type": "number"
  }, {
    "id": 736,
    "text": "",
    "type": "number"
  }, {
    "id": 737,
    "text": "",
    "type": "number"
  }, {
    "id": 738,
    "text": "",
    "type": "number"
  }, {
    "id": 739,
    "text": "",
    "type": "number"
  }, {
    "id": 740,
    "text": "",
    "type": "number"
  }, {
    "id": 741,
    "text": "",
    "type": "number"
  }, {
    "id": 742,
    "text": "",
    "type": "number"
  }, {
    "id": 743,
    "text": "",
    "type": "number"
  }, {
    "id": 744,
    "text": "",
    "type": "number"
  }, {
    "id": 745,
    "text": "",
    "type": "number"
  }, {
    "id": 746,
    "text": "",
    "type": "number"
  }, {
    "id": 747,
    "text": "",
    "type": "number"
  }, {
    "id": 748,
    "text": "",
    "type": "number"
  }, {
    "id": 749,
    "text": "",
    "type": "number"
  }, {
    "id": 750,
    "text": "",
    "type": "number"
  }, {
    "id": 751,
    "text": "",
    "type": "number"
  }, {
    "id": 752,
    "text": "",
    "type": "number"
  }, {
    "id": 753,
    "text": "",
    "type": "number"
  }, {
    "id": 754,
    "text": "",
    "type": "number"
  }, {
    "id": 755,
    "text": "",
    "type": "number"
  }, {
    "id": 756,
    "text": "",
    "type": "number"
  }, {
    "id": 757,
    "text": "",
    "type": "number"
  }, {
    "id": 758,
    "text": "",
    "type": "local variable"
  }, {
    "id": 759,
    "text": "",
    "type": "n/a"
  }, {
    "id": 760,
    "text": "",
    "type": "local variable"
  }, {
    "id": 761,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 762,
    "text": "",
    "type": "string"
  }, {
    "id": 763,
    "text": "",
    "type": "string"
  }, {
    "id": 764,
    "text": "",
    "type": "string"
  }, {
    "id": 765,
    "text": "",
    "type": "string"
  }, {
    "id": 766,
    "text": "",
    "type": "string"
  }, {
    "id": 767,
    "text": "",
    "type": "string"
  }, {
    "id": 768,
    "text": "",
    "type": "string"
  }, {
    "id": 769,
    "text": "",
    "type": "string"
  }, {
    "id": 770,
    "text": "",
    "type": "string"
  }, {
    "id": 771,
    "text": "",
    "type": "string"
  }, {
    "id": 772,
    "text": "",
    "type": "string"
  }, {
    "id": 773,
    "text": "",
    "type": "string"
  }, {
    "id": 774,
    "text": "",
    "type": "string"
  }, {
    "id": 775,
    "text": "",
    "type": "string"
  }, {
    "id": 776,
    "text": "",
    "type": "string"
  }, {
    "id": 777,
    "text": "",
    "type": "string"
  }, {
    "id": 778,
    "text": "",
    "type": "string"
  }, {
    "id": 779,
    "text": "",
    "type": "string"
  }, {
    "id": 780,
    "text": "",
    "type": "string"
  }, {
    "id": 781,
    "text": "",
    "type": "string"
  }, {
    "id": 782,
    "text": "",
    "type": "string"
  }, {
    "id": 783,
    "text": "",
    "type": "string"
  }, {
    "id": 784,
    "text": "",
    "type": "string"
  }, {
    "id": 785,
    "text": "",
    "type": "string"
  }, {
    "id": 786,
    "text": "",
    "type": "string"
  }, {
    "id": 787,
    "text": "",
    "type": "string"
  }, {
    "id": 788,
    "text": "",
    "type": "string"
  }, {
    "id": 789,
    "text": "",
    "type": "string"
  }, {
    "id": 790,
    "text": "",
    "type": "string"
  }, {
    "id": 791,
    "text": "",
    "type": "string"
  }, {
    "id": 792,
    "text": "",
    "type": "string"
  }, {
    "id": 793,
    "text": "",
    "type": "string"
  }, {
    "id": 794,
    "text": "",
    "type": "string"
  }, {
    "id": 795,
    "text": "",
    "type": "string"
  }, {
    "id": 796,
    "text": "",
    "type": "string"
  }, {
    "id": 797,
    "text": "",
    "type": "string"
  }, {
    "id": 798,
    "text": "",
    "type": "string"
  }, {
    "id": 799,
    "text": "",
    "type": "local variable"
  }, {
    "id": 800,
    "text": "",
    "type": "n/a"
  }, {
    "id": 801,
    "text": "",
    "type": "local variable"
  }, {
    "id": 802,
    "text": "",
    "type": "n/a"
  }, {
    "id": 803,
    "text": "",
    "type": "local variable"
  }, {
    "id": 804,
    "text": "",
    "type": "n/a"
  }, {
    "id": 805,
    "text": "",
    "type": "local variable"
  }, {
    "id": 806,
    "text": "",
    "type": "n/a"
  }, {
    "id": 807,
    "text": "",
    "type": "local variable"
  }, {
    "id": 808,
    "text": "",
    "type": "n/a"
  }, {
    "id": 809,
    "text": "",
    "type": "local variable"
  }, {
    "id": 810,
    "text": "",
    "type": "n/a"
  }, {
    "id": 811,
    "text": "",
    "type": "local variable"
  }, {
    "id": 812,
    "text": "",
    "type": "n/a"
  }, {
    "id": 813,
    "text": "",
    "type": "local variable"
  }, {
    "id": 814,
    "text": "",
    "type": "n/a"
  }, {
    "id": 815,
    "text": "",
    "type": "local variable"
  }, {
    "id": 816,
    "text": "",
    "type": "n/a"
  }, {
    "id": 817,
    "text": "",
    "type": "local variable"
  }, {
    "id": 818,
    "text": "",
    "type": "n/a"
  }, {
    "id": 819,
    "text": "",
    "type": "local variable"
  }, {
    "id": 820,
    "text": "",
    "type": "n/a"
  }, {
    "id": 821,
    "text": "",
    "type": "local variable"
  }, {
    "id": 822,
    "text": "",
    "type": "n/a"
  }, {
    "id": 823,
    "text": "",
    "type": "local variable"
  }, {
    "id": 824,
    "text": "",
    "type": "number"
  }, {
    "id": 825,
    "text": "",
    "type": "local variable"
  }, {
    "id": 826,
    "text": "",
    "type": "number"
  }, {
    "id": 827,
    "text": "",
    "type": "local variable"
  }, {
    "id": 828,
    "text": "",
    "type": "n/a"
  }, {
    "id": 829,
    "text": "",
    "type": "local variable"
  }, {
    "id": 830,
    "text": "",
    "type": "n/a"
  }, {
    "id": 831,
    "text": "",
    "type": "local variable"
  }, {
    "id": 832,
    "text": "",
    "type": "n/a"
  }, {
    "id": 833,
    "text": "",
    "type": "local variable"
  }, {
    "id": 834,
    "text": "",
    "type": "n/a"
  }, {
    "id": 835,
    "text": "",
    "type": "local variable"
  }, {
    "id": 836,
    "text": "",
    "type": "n/a"
  }, {
    "id": 837,
    "text": "",
    "type": "global variable"
  }, {
    "id": 838,
    "text": "",
    "type": "n/a"
  }, {
    "id": 839,
    "text": "",
    "type": "global variable"
  }, {
    "id": 840,
    "text": "",
    "type": "global variable"
  }, {
    "id": 841,
    "text": "",
    "type": "n/a"
  }, {
    "id": 842,
    "text": "",
    "type": "global variable"
  }, {
    "id": 843,
    "text": "",
    "type": "n/a"
  }, {
    "id": 844,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 845,
    "text": "MyCanvas",
    "type": "module"
  }, {
    "id": 846,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 847,
    "text": "MyImageFrame",
    "type": "module"
  }, {
    "id": 848,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 849,
    "text": "MyRawBitmapFrame",
    "type": "module"
  }, {
    "id": 850,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 851,
    "text": "MyFrame",
    "type": "module"
  }, {
    "id": 852,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 853,
    "text": "MyApp",
    "type": "module"
  } ]
}