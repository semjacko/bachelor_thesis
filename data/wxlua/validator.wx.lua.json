{
  "_filename": "validator.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/validator.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 26,
    "label": "has",
    "to": 37
  }, {
    "from": 26,
    "label": "has",
    "to": 38
  }, {
    "from": 26,
    "label": "has",
    "to": 39
  }, {
    "from": 26,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 40,
    "label": "has",
    "to": 52
  }, {
    "from": 40,
    "label": "has",
    "to": 53
  }, {
    "from": 40,
    "label": "has",
    "to": 54
  }, {
    "from": 40,
    "label": "has",
    "to": 55
  }, {
    "from": 26,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 26,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 26,
    "label": "has",
    "to": 60
  }, {
    "from": 26,
    "label": "has",
    "to": 61
  }, {
    "from": 26,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 41
  }, {
    "from": 63,
    "label": "has",
    "to": 42
  }, {
    "from": 63,
    "label": "has",
    "to": 43
  }, {
    "from": 63,
    "label": "has",
    "to": 44
  }, {
    "from": 63,
    "label": "has",
    "to": 45
  }, {
    "from": 63,
    "label": "has",
    "to": 46
  }, {
    "from": 63,
    "label": "has",
    "to": 47
  }, {
    "from": 63,
    "label": "has",
    "to": 48
  }, {
    "from": 63,
    "label": "has",
    "to": 49
  }, {
    "from": 63,
    "label": "has",
    "to": 50
  }, {
    "from": 63,
    "label": "has",
    "to": 51
  }, {
    "from": 63,
    "label": "has",
    "to": 52
  }, {
    "from": 63,
    "label": "has",
    "to": 53
  }, {
    "from": 63,
    "label": "has",
    "to": 54
  }, {
    "from": 63,
    "label": "has",
    "to": 55
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 57
  }, {
    "from": 66,
    "label": "has",
    "to": 59
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 26,
    "label": "calls",
    "to": 89
  }, {
    "from": 26,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 26,
    "label": "calls",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 75
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 26,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 78
  }, {
    "from": 2,
    "label": "calls",
    "to": 86
  }, {
    "from": 68,
    "label": "calls",
    "to": 26
  }, {
    "from": 26,
    "label": "calls",
    "to": 69
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 77
  }, {
    "from": 2,
    "label": "calls",
    "to": 77
  }, {
    "from": 26,
    "label": "calls",
    "to": 80
  }, {
    "from": 26,
    "label": "calls",
    "to": 80
  }, {
    "from": 68,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 81
  }, {
    "from": 26,
    "label": "calls",
    "to": 85
  }, {
    "from": 2,
    "label": "calls",
    "to": 87
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 68,
    "label": "calls",
    "to": 90
  }, {
    "from": 68,
    "label": "calls",
    "to": 90
  }, {
    "from": 68,
    "label": "calls",
    "to": 90
  }, {
    "from": 68,
    "label": "calls",
    "to": 90
  }, {
    "from": 68,
    "label": "calls",
    "to": 90
  }, {
    "from": 68,
    "label": "calls",
    "to": 90
  }, {
    "from": 68,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 72
  }, {
    "from": 26,
    "label": "calls",
    "to": 72
  }, {
    "from": 26,
    "label": "calls",
    "to": 71
  }, {
    "from": 2,
    "label": "calls",
    "to": 79
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 68,
    "label": "calls",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 68
  }, {
    "from": 68,
    "label": "declares",
    "to": 2
  }, {
    "from": 68,
    "label": "declares",
    "to": 26
  }, {
    "from": 68,
    "label": "declares",
    "to": 63
  }, {
    "from": 68,
    "label": "declares",
    "to": 65
  }, {
    "from": 68,
    "label": "declares",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 94
  }, {
    "from": 93,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 93,
    "label": "initializes",
    "to": 97
  }, {
    "from": 93,
    "label": "initializes",
    "to": 98
  }, {
    "from": 93,
    "label": "initializes",
    "to": 99
  }, {
    "from": 93,
    "label": "initializes",
    "to": 100
  }, {
    "from": 93,
    "label": "initializes",
    "to": 101
  }, {
    "from": 93,
    "label": "initializes",
    "to": 102
  }, {
    "from": 93,
    "label": "initializes",
    "to": 103
  }, {
    "from": 93,
    "label": "initializes",
    "to": 104
  }, {
    "from": 93,
    "label": "initializes",
    "to": 105
  }, {
    "from": 93,
    "label": "initializes",
    "to": 106
  }, {
    "from": 93,
    "label": "initializes",
    "to": 107
  }, {
    "from": 93,
    "label": "initializes",
    "to": 108
  }, {
    "from": 93,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 93,
    "label": "initializes",
    "to": 111
  }, {
    "from": 93,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 93,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 93,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 93,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 93,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 93,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 93,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 94,
    "label": "initializes",
    "to": 92
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 66
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "validator",
    "type": "module"
  }, {
    "id": 2,
    "text": "function CreateDialog()\r\n    dialog = wx.wxDialog(frame, wx.wxID_ANY, \"Test Validators\")\r\n\r\n    checkBox = wx.wxCheckBox(dialog, ID_CHECKBOX, \"Check me!\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize, 0,\r\n                            wx.wxGenericValidatorBool(checkObj))\r\n\r\n    comboBox = wx.wxComboBox(dialog, ID_COMBOBOX, \"THIS WILL BE OVERWRITTEN\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            {\"Item0\", \"Item1\", \"Item2\"}, 0,\r\n                            wx.wxGenericValidatorString(comboObj))\r\n\r\n    textCtrl = wx.wxTextCtrl(dialog, ID_TEXTCTRL, \"THIS WILL BE OVERWRITTEN\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize, 0,\r\n                            wx.wxGenericValidatorString(textObj))\r\n\r\n    scrollBar = wx.wxScrollBar(dialog, ID_SCROLLBAR,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxSB_HORIZONTAL,\r\n                            wx.wxGenericValidatorInt(scrollObj))\r\n    scrollBar:SetScrollbar(0, 10, 100, 5)\r\n\r\n    checklBox = wx.wxCheckListBox(dialog, ID_CHECKLBOX,\r\n                                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                  {\"Check 0\", \"Check 1\", \"Check 2\", \"Check 3\"}, 0,\r\n                                  wx.wxGenericValidatorArrayInt(checklObj))\r\n\r\n    textAlphaCtrl = wx.wxTextCtrl(dialog, ID_TEXTCTRL, \"THIS WILL BE OVERWRITTEN\",\r\n                            wx.wxDefaultPosition, wx.wxSize(400, -1), 0,\r\n                            wx.wxTextValidator(wx.wxFILTER_ALPHA, textAlphaObj))\r\n\r\n\r\n    okButton = wx.wxButton(dialog, wx.wxID_OK, \"Ok\") -- NEED this for validators to work\r\n    okButton:SetDefault()\r\n\r\n    flexSizer = wx.wxFlexGridSizer(12, 1, 0, 0)\r\n    flexSizer:AddGrowableCol(0)\r\n    flexSizer:Add(checkBox,  1, wx.wxEXPAND+wx.wxALL, 5)\r\n    flexSizer:Add(comboBox,  1, wx.wxEXPAND+wx.wxALL, 5)\r\n    flexSizer:Add(textCtrl,  1, wx.wxEXPAND+wx.wxALL, 5)\r\n    flexSizer:Add(scrollBar, 1, wx.wxEXPAND+wx.wxALL, 5)\r\n    flexSizer:Add(checklBox, 1, wx.wxEXPAND+wx.wxALL, 5)\r\n    flexSizer:Add(textAlphaCtrl,  1, wx.wxEXPAND+wx.wxALL, 5)\r\n\r\n    flexSizer:Add(okButton,  1, wx.wxEXPAND+wx.wxALL, 5)\r\n\r\n    dialog:SetSizer(flexSizer)\r\n    flexSizer:SetSizeHints(dialog)\r\n\r\n    dialog:ShowModal()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "dialog = wx.wxDialog(frame, wx.wxID_ANY, \"Test Validators\")",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "checkBox = wx.wxCheckBox(dialog, ID_CHECKBOX, \"Check me!\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize, 0,\r\n                            wx.wxGenericValidatorBool(checkObj))",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "comboBox = wx.wxComboBox(dialog, ID_COMBOBOX, \"THIS WILL BE OVERWRITTEN\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                            {\"Item0\", \"Item1\", \"Item2\"}, 0,\r\n                            wx.wxGenericValidatorString(comboObj))",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "textCtrl = wx.wxTextCtrl(dialog, ID_TEXTCTRL, \"THIS WILL BE OVERWRITTEN\",\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize, 0,\r\n                            wx.wxGenericValidatorString(textObj))",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "scrollBar = wx.wxScrollBar(dialog, ID_SCROLLBAR,\r\n                            wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxSB_HORIZONTAL,\r\n                            wx.wxGenericValidatorInt(scrollObj))",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "scrollBar:SetScrollbar(0, 10, 100, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "checklBox = wx.wxCheckListBox(dialog, ID_CHECKLBOX,\r\n                                  wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                  {\"Check 0\", \"Check 1\", \"Check 2\", \"Check 3\"}, 0,\r\n                                  wx.wxGenericValidatorArrayInt(checklObj))",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "textAlphaCtrl = wx.wxTextCtrl(dialog, ID_TEXTCTRL, \"THIS WILL BE OVERWRITTEN\",\r\n                            wx.wxDefaultPosition, wx.wxSize(400, -1), 0,\r\n                            wx.wxTextValidator(wx.wxFILTER_ALPHA, textAlphaObj))",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "okButton = wx.wxButton(dialog, wx.wxID_OK, \"Ok\")",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "okButton:SetDefault()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "flexSizer = wx.wxFlexGridSizer(12, 1, 0, 0)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "flexSizer:AddGrowableCol(0)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "flexSizer:Add(checkBox,  1, wx.wxEXPAND+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "flexSizer:Add(comboBox,  1, wx.wxEXPAND+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "flexSizer:Add(textCtrl,  1, wx.wxEXPAND+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "flexSizer:Add(scrollBar, 1, wx.wxEXPAND+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "flexSizer:Add(checklBox, 1, wx.wxEXPAND+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "flexSizer:Add(textAlphaCtrl,  1, wx.wxEXPAND+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "flexSizer:Add(okButton,  1, wx.wxEXPAND+wx.wxALL, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "dialog:SetSizer(flexSizer)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "flexSizer:SetSizeHints(dialog)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "dialog:ShowModal()",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function main()\r\n\r\n    frame = wx.wxFrame( wx.NULL,              -- no parent for toplevel windows\r\n                        wx.wxID_ANY,          -- don't need a wxWindow ID\r\n                        \"wxLua Validator Demo\", -- caption on the frame\r\n                        wx.wxDefaultPosition, -- let system place the frame\r\n                        wx.wxSize(450, 420),  -- set the size of the frame\r\n                        wx.wxDEFAULT_FRAME_STYLE ) -- use default frame styles\r\n\r\n    -- create a simple status bar\r\n    frame:CreateStatusBar(1)\r\n    frame:SetStatusText(\"Welcome to wxLua.\")\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    local fileMenu = wx.wxMenu()\r\n    fileMenu:Append(ID_TEST_VALIDATORS, \"&Test Validators...\", \"Show dialog to test validators\")\r\n    fileMenu:AppendSeparator()\r\n    fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")\r\n    local helpMenu = wx.wxMenu()\r\n    helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Minimal Application\")\r\n\r\n    local menuBar = wx.wxMenuBar()\r\n    menuBar:Append(fileMenu, \"&File\")\r\n    menuBar:Append(helpMenu, \"&Help\")\r\n    frame:SetMenuBar(menuBar)\r\n\r\n    -- connect the selection event of the exit menu item to an\r\n    frame:Connect(ID_TEST_VALIDATORS, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                -- update original values we'll use for the validators\r\n                check_val  = checkObj:GetObject()\r\n                combo_val  = comboObj:GetObject()\r\n                text_val   = textObj:GetObject()\r\n                scroll_val = scrollObj:GetObject()\r\n                checkl_val = checklObj:GetObject()\r\n                text_alpha_val = textAlphaObj:GetObject()\r\n\r\n                CreateDialog()\r\n\r\n                local s = \"\"\r\n                s = s..\"wxCheckBox  : '\"..tostring(checkObj:GetObject())..\"'\\nInitial value : '\"..tostring(check_val)..\"'\\n\\n\"\r\n                s = s..\"wxComboBox  : '\"..tostring(comboObj:GetObject())..\"'\\nInitial value : '\"..tostring(combo_val)..\"'\\n\\n\"\r\n                s = s..\"wxTextCtrl  : '\"..tostring(textObj:GetObject())..\"'\\nInitial value : '\"..tostring(text_val)..\"'\\n\\n\"\r\n                s = s..\"wxScrollBar : '\"..tostring(scrollObj:GetObject())..\"'\\nInitial value : '\"..tostring(scroll_val)..\"'\\n\\n\"\r\n                s = s..\"wxCheckListBox : '\"..table.concat(checklObj:GetObject(), \", \")..\"'\\nInitial value : '\"..table.concat(checkl_val, \", \")..\"'\\n\\n\"\r\n\r\n                s = s..\"wxTextCtrl alpha chars only: '\"..tostring(textAlphaObj:GetObject())..\"'\\nInitial value : '\"..tostring(text_alpha_val)..\"'\\n\\n\"\r\n\r\n                frameText:SetValue(s)\r\n            end )\r\n\r\n    -- event handler that closes the window\r\n    frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event) frame:Close(true) end )\r\n\r\n    -- connect the selection event of the about menu item\r\n    frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Validator wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                           wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    frameText = wx.wxTextCtrl(frame, wx.wxID_ANY, \"Output of the validator test dialog will be shown here.\",\r\n                              wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                              wx.wxTE_MULTILINE)\r\n\r\n\r\n    -- show the frame window\r\n    frame:Show(true)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "frame = wx.wxFrame( wx.NULL,              -- no parent for toplevel windows\r\n                        wx.wxID_ANY,          -- don't need a wxWindow ID\r\n                        \"wxLua Validator Demo\", -- caption on the frame\r\n                        wx.wxDefaultPosition, -- let system place the frame\r\n                        wx.wxSize(450, 420),  -- set the size of the frame\r\n                        wx.wxDEFAULT_FRAME_STYLE )",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "frame:CreateStatusBar(1)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "frame:SetStatusText(\"Welcome to wxLua.\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local fileMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "fileMenu:Append(ID_TEST_VALIDATORS, \"&Test Validators...\", \"Show dialog to test validators\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "fileMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "fileMenu:Append(wx.wxID_EXIT, \"E&xit\", \"Quit the program\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local helpMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "helpMenu:Append(wx.wxID_ABOUT, \"&About\", \"About the wxLua Minimal Application\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "local menuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "menuBar:Append(fileMenu, \"&File\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "menuBar:Append(helpMenu, \"&Help\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "frame:SetMenuBar(menuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "frame:Connect(ID_TEST_VALIDATORS, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                -- update original values we'll use for the validators\r\n                check_val  = checkObj:GetObject()\r\n                combo_val  = comboObj:GetObject()\r\n                text_val   = textObj:GetObject()\r\n                scroll_val = scrollObj:GetObject()\r\n                checkl_val = checklObj:GetObject()\r\n                text_alpha_val = textAlphaObj:GetObject()\r\n\r\n                CreateDialog()\r\n\r\n                local s = \"\"\r\n                s = s..\"wxCheckBox  : '\"..tostring(checkObj:GetObject())..\"'\\nInitial value : '\"..tostring(check_val)..\"'\\n\\n\"\r\n                s = s..\"wxComboBox  : '\"..tostring(comboObj:GetObject())..\"'\\nInitial value : '\"..tostring(combo_val)..\"'\\n\\n\"\r\n                s = s..\"wxTextCtrl  : '\"..tostring(textObj:GetObject())..\"'\\nInitial value : '\"..tostring(text_val)..\"'\\n\\n\"\r\n                s = s..\"wxScrollBar : '\"..tostring(scrollObj:GetObject())..\"'\\nInitial value : '\"..tostring(scroll_val)..\"'\\n\\n\"\r\n                s = s..\"wxCheckListBox : '\"..table.concat(checklObj:GetObject(), \", \")..\"'\\nInitial value : '\"..table.concat(checkl_val, \", \")..\"'\\n\\n\"\r\n\r\n                s = s..\"wxTextCtrl alpha chars only: '\"..tostring(textAlphaObj:GetObject())..\"'\\nInitial value : '\"..tostring(text_alpha_val)..\"'\\n\\n\"\r\n\r\n                frameText:SetValue(s)\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "check_val  = checkObj:GetObject()",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "combo_val  = comboObj:GetObject()",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "text_val   = textObj:GetObject()",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "scroll_val = scrollObj:GetObject()",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "checkl_val = checklObj:GetObject()",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "text_alpha_val = textAlphaObj:GetObject()",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "CreateDialog()",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "s = s..\"wxCheckBox  : '\"..tostring(checkObj:GetObject())..\"'\\nInitial value : '\"..tostring(check_val)..\"'\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "s = s..\"wxComboBox  : '\"..tostring(comboObj:GetObject())..\"'\\nInitial value : '\"..tostring(combo_val)..\"'\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "s = s..\"wxTextCtrl  : '\"..tostring(textObj:GetObject())..\"'\\nInitial value : '\"..tostring(text_val)..\"'\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "s = s..\"wxScrollBar : '\"..tostring(scrollObj:GetObject())..\"'\\nInitial value : '\"..tostring(scroll_val)..\"'\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "s = s..\"wxCheckListBox : '\"..table.concat(checklObj:GetObject(), \", \")..\"'\\nInitial value : '\"..table.concat(checkl_val, \", \")..\"'\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "s = s..\"wxTextCtrl alpha chars only: '\"..tostring(textAlphaObj:GetObject())..\"'\\nInitial value : '\"..tostring(text_alpha_val)..\"'\\n\\n\"",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "frameText:SetValue(s)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event) frame:Close(true) end )",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "frame:Close(true)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n        function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Validator wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                           wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the Validator wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                           wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "frameText = wx.wxTextCtrl(frame, wx.wxID_ANY, \"Output of the validator test dialog will be shown here.\",\r\n                              wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                              wx.wxTE_MULTILINE)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "frame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function (event)\r\n                -- update original values we'll use for the validators\r\n                check_val  = checkObj:GetObject()\r\n                combo_val  = comboObj:GetObject()\r\n                text_val   = textObj:GetObject()\r\n                scroll_val = scrollObj:GetObject()\r\n                checkl_val = checklObj:GetObject()\r\n                text_alpha_val = textAlphaObj:GetObject()\r\n\r\n                CreateDialog()\r\n\r\n                local s = \"\"\r\n                s = s..\"wxCheckBox  : '\"..tostring(checkObj:GetObject())..\"'\\nInitial value : '\"..tostring(check_val)..\"'\\n\\n\"\r\n                s = s..\"wxComboBox  : '\"..tostring(comboObj:GetObject())..\"'\\nInitial value : '\"..tostring(combo_val)..\"'\\n\\n\"\r\n                s = s..\"wxTextCtrl  : '\"..tostring(textObj:GetObject())..\"'\\nInitial value : '\"..tostring(text_val)..\"'\\n\\n\"\r\n                s = s..\"wxScrollBar : '\"..tostring(scrollObj:GetObject())..\"'\\nInitial value : '\"..tostring(scroll_val)..\"'\\n\\n\"\r\n                s = s..\"wxCheckListBox : '\"..table.concat(checklObj:GetObject(), \", \")..\"'\\nInitial value : '\"..table.concat(checkl_val, \", \")..\"'\\n\\n\"\r\n\r\n                s = s..\"wxTextCtrl alpha chars only: '\"..tostring(textAlphaObj:GetObject())..\"'\\nInitial value : '\"..tostring(text_alpha_val)..\"'\\n\\n\"\r\n\r\n                frameText:SetValue(s)\r\n            end",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function (event) frame:Close(true) end",
    "type": "function"
  }, {
    "id": 66,
    "text": "function (event)\r\n            wx.wxMessageBox('This is the \"About\" dialog of the Validator wxLua sample.\\n'..\r\n                            wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                            \"About wxLua\",\r\n                           wx.wxOK + wx.wxICON_INFORMATION,\r\n                            frame)\r\n        end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "",
    "type": "function container"
  }, {
    "id": 69,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 70,
    "text": "wxDialog",
    "type": "global function"
  }, {
    "id": 71,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 72,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 73,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 74,
    "text": "wxCheckBox",
    "type": "global function"
  }, {
    "id": 75,
    "text": "wxTextValidator",
    "type": "global function"
  }, {
    "id": 76,
    "text": "wxCheckListBox",
    "type": "global function"
  }, {
    "id": 77,
    "text": "wxGenericValidatorString",
    "type": "global function"
  }, {
    "id": 78,
    "text": "wxGenericValidatorArrayInt",
    "type": "global function"
  }, {
    "id": 79,
    "text": "wxGenericValidatorBool",
    "type": "global function"
  }, {
    "id": 80,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 81,
    "text": "wxGenericValidatorInt",
    "type": "global function"
  }, {
    "id": 82,
    "text": "wxComboBox",
    "type": "global function"
  }, {
    "id": 83,
    "text": "wxTextCtrl",
    "type": "global function"
  }, {
    "id": 84,
    "text": "wxScrollBar",
    "type": "global function"
  }, {
    "id": 85,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 86,
    "text": "wxButton",
    "type": "global function"
  }, {
    "id": 87,
    "text": "wxFlexGridSizer",
    "type": "global function"
  }, {
    "id": 88,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 89,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 90,
    "text": "wxLuaObject",
    "type": "global function"
  }, {
    "id": 91,
    "text": "require",
    "type": "global function"
  }, {
    "id": 92,
    "text": "",
    "type": "global variable"
  }, {
    "id": 93,
    "text": "",
    "type": "variable container"
  }, {
    "id": 94,
    "text": "",
    "type": "require container"
  }, {
    "id": 95,
    "text": "",
    "type": "global variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "global variable"
  }, {
    "id": 98,
    "text": "",
    "type": "global variable"
  }, {
    "id": 99,
    "text": "",
    "type": "global variable"
  }, {
    "id": 100,
    "text": "",
    "type": "global variable"
  }, {
    "id": 101,
    "text": "",
    "type": "global variable"
  }, {
    "id": 102,
    "text": "",
    "type": "global variable"
  }, {
    "id": 103,
    "text": "",
    "type": "global variable"
  }, {
    "id": 104,
    "text": "",
    "type": "global variable"
  }, {
    "id": 105,
    "text": "",
    "type": "global variable"
  }, {
    "id": 106,
    "text": "",
    "type": "global variable"
  }, {
    "id": 107,
    "text": "",
    "type": "global variable"
  }, {
    "id": 108,
    "text": "",
    "type": "global variable"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "global variable"
  }, {
    "id": 112,
    "text": "",
    "type": "global variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "global variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "global variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  }, {
    "id": 118,
    "text": "",
    "type": "global variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "global variable"
  }, {
    "id": 123,
    "text": "",
    "type": "n/a"
  }, {
    "id": 124,
    "text": "",
    "type": "global variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  } ]
}