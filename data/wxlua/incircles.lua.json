{
  "_filename": "incircles.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/apps/wxluacan/scripts/incircles.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 19,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 11
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 16
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 36,
    "label": "calls",
    "to": 49
  }, {
    "from": 43,
    "label": "calls",
    "to": 49
  }, {
    "from": 19,
    "label": "calls",
    "to": 51
  }, {
    "from": 36,
    "label": "calls",
    "to": 48
  }, {
    "from": 43,
    "label": "calls",
    "to": 48
  }, {
    "from": 43,
    "label": "calls",
    "to": 36
  }, {
    "from": 43,
    "label": "calls",
    "to": 50
  }, {
    "from": 43,
    "label": "calls",
    "to": 50
  }, {
    "from": 43,
    "label": "calls",
    "to": 46
  }, {
    "from": 43,
    "label": "calls",
    "to": 46
  }, {
    "from": 43,
    "label": "calls",
    "to": 46
  }, {
    "from": 43,
    "label": "calls",
    "to": 46
  }, {
    "from": 43,
    "label": "calls",
    "to": 46
  }, {
    "from": 43,
    "label": "calls",
    "to": 47
  }, {
    "from": 43,
    "label": "calls",
    "to": 47
  }, {
    "from": 43,
    "label": "calls",
    "to": 45
  }, {
    "from": 43,
    "label": "calls",
    "to": 45
  }, {
    "from": 43,
    "label": "calls",
    "to": 45
  }, {
    "from": 43,
    "label": "calls",
    "to": 45
  }, {
    "from": 43,
    "label": "calls",
    "to": 44
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "declares",
    "to": 2
  }, {
    "from": 43,
    "label": "declares",
    "to": 10
  }, {
    "from": 43,
    "label": "declares",
    "to": 19
  }, {
    "from": 43,
    "label": "declares",
    "to": 30
  }, {
    "from": 43,
    "label": "declares",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 52,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 52,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 52,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 52,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 52,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 52,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 52,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 52,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 52,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "incircles",
    "type": "module"
  }, {
    "id": 2,
    "text": "function MonoDraw( dc, x, y )\r\n        dc:SetBrush( redbrush )\r\n        dc:SetPen( bluepen )\r\n        dc:DrawRectangle(x, y, 120, 140)\r\n        dc:SetBrush( greenbrush )\r\n        dc:SetPen( purplepen )\r\n        dc:DrawEllipse(x, y, 190, 30)\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "dc:SetBrush( redbrush )",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "dc:SetPen( bluepen )",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "dc:DrawRectangle(x, y, 120, 140)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "dc:SetBrush( greenbrush )",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "dc:SetPen( purplepen )",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "dc:DrawEllipse(x, y, 190, 30)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function MonoHit( x, y )\r\n        local xmin, ymin, xmax, ymax\r\n        xmin = 0\r\n        ymin = 0\r\n        xmax = 190\r\n        ymax = 140\r\n        if  x < xmax and y < ymax and x > xmin and y > ymin\r\n        then\r\n            return true\r\n        end\r\n        return false\r\n    end",
    "type": "function"
  }, {
    "id": 11,
    "text": "local xmin, ymin, xmax, ymax",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "xmin = 0",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "ymin = 0",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "xmax = 190",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "ymax = 140",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if  x < xmax and y < ymax and x > xmin and y > ymin\r\n        then\r\n            return true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function ApeDraw( dc, x, y )\r\n        dc:SetBrush( purplebrush )\r\n        dc:SetPen( bluepen )\r\n        dc:DrawEllipse(x, y, 30, 90)\r\n        dc:SetPen( redpen )\r\n        for i = -20, 20 do\r\n            local y2\r\n            if  i ~= 0  then\r\n                y2 = 150*math.sin(i/2)/(i/2)\r\n            else\r\n                y2 = 150; --sin(x)/x goes to one at zero\r\n            end\r\n            dc:DrawLine(x + 5*i, y, x + 5*i, y + y2  )\r\n        end\r\n\r\n    end",
    "type": "function"
  }, {
    "id": 20,
    "text": "dc:SetBrush( purplebrush )",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "dc:DrawEllipse(x, y, 30, 90)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "dc:SetPen( redpen )",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "for i = -20, 20 do\r\n            local y2\r\n            if  i ~= 0  then\r\n                y2 = 150*math.sin(i/2)/(i/2)\r\n            else\r\n                y2 = 150; --sin(x)/x goes to one at zero\r\n            end\r\n            dc:DrawLine(x + 5*i, y, x + 5*i, y + y2  )\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 24,
    "text": "local y2",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if  i ~= 0  then\r\n                y2 = 150*math.sin(i/2)/(i/2)\r\n            else\r\n                y2 = 150; --sin(x)/x goes to one at zero\r\n            end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "y2 = 150*math.sin(i/2)/(i/2)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "y2 = 150",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "dc:DrawLine(x + 5*i, y, x + 5*i, y + y2  )",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function ApeHit( x, y )\r\n        local xmin, ymin, xmax, ymax\r\n        xmin = -100\r\n        ymin = -40\r\n        xmax = 100\r\n        ymax = 150\r\n        if  x < xmax and y < ymax and x > xmin and y > ymin\r\n        then\r\n            return true\r\n        end\r\n        return false\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "xmin = -100",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "ymin = -40",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "xmax = 100",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "ymax = 150",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function AddSome()\r\n        for list = 1, 10 do\r\n            canvas = wxluacan.GetCan()\r\n            canobjrect = wxluacan.wxlCanObjRect( 30+list*2, 40+list*3, 100, 20)\r\n            canobjrect:SetBrush( bluebrush )\r\n            canvas:AddObject(  canobjrect )\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 37,
    "text": "for list = 1, 10 do\r\n            canvas = wxluacan.GetCan()\r\n            canobjrect = wxluacan.wxlCanObjRect( 30+list*2, 40+list*3, 100, 20)\r\n            canobjrect:SetBrush( bluebrush )\r\n            canvas:AddObject(  canobjrect )\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 38,
    "text": "canvas = wxluacan.GetCan()",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "canobjrect = wxluacan.wxlCanObjRect( 30+list*2, 40+list*3, 100, 20)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "canobjrect:SetBrush( bluebrush )",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "canvas:AddObject(  canobjrect )",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "",
    "type": "function container"
  }, {
    "id": 44,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 45,
    "text": "wxBrush",
    "type": "global function"
  }, {
    "id": 46,
    "text": "wxPen",
    "type": "global function"
  }, {
    "id": 47,
    "text": "wxlCanObjAddScript",
    "type": "global function"
  }, {
    "id": 48,
    "text": "GetCan",
    "type": "global function"
  }, {
    "id": 49,
    "text": "wxlCanObjRect",
    "type": "global function"
  }, {
    "id": 50,
    "text": "wxlCanObjScript",
    "type": "global function"
  }, {
    "id": 51,
    "text": "sin",
    "type": "global function"
  }, {
    "id": 52,
    "text": "",
    "type": "variable container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "global variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "global variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "global variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "global variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "global variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "global variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  } ]
}