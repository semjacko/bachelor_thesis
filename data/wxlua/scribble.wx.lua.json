{
  "_filename": "scribble.wx.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wxlua/samples/scribble.wx.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 5
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 18,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 12,
    "label": "has",
    "to": 29
  }, {
    "from": 12,
    "label": "has",
    "to": 30
  }, {
    "from": 12,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 20
  }, {
    "from": 36,
    "label": "has",
    "to": 21
  }, {
    "from": 36,
    "label": "has",
    "to": 22
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 6
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 72,
    "label": "has",
    "to": 80
  }, {
    "from": 72,
    "label": "has",
    "to": 81
  }, {
    "from": 71,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 74
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 85,
    "label": "has",
    "to": 68
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 78
  }, {
    "from": 85,
    "label": "has",
    "to": 79
  }, {
    "from": 83,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 6
  }, {
    "from": 90,
    "label": "has",
    "to": 6
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 60
  }, {
    "from": 97,
    "label": "has",
    "to": 6
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 101,
    "label": "has",
    "to": 111
  }, {
    "from": 100,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 6
  }, {
    "from": 113,
    "label": "has",
    "to": 6
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 120,
    "label": "has",
    "to": 128
  }, {
    "from": 120,
    "label": "has",
    "to": 6
  }, {
    "from": 120,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 122
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 124
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 130,
    "label": "has",
    "to": 128
  }, {
    "from": 130,
    "label": "has",
    "to": 6
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 135,
    "label": "has",
    "to": 6
  }, {
    "from": 135,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 144,
    "label": "has",
    "to": 148
  }, {
    "from": 144,
    "label": "has",
    "to": 149
  }, {
    "from": 144,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 141,
    "label": "has",
    "to": 6
  }, {
    "from": 141,
    "label": "has",
    "to": 153
  }, {
    "from": 141,
    "label": "has",
    "to": 154
  }, {
    "from": 141,
    "label": "has",
    "to": 155
  }, {
    "from": 141,
    "label": "has",
    "to": 156
  }, {
    "from": 141,
    "label": "has",
    "to": 6
  }, {
    "from": 141,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 158,
    "label": "has",
    "to": 162
  }, {
    "from": 158,
    "label": "has",
    "to": 163
  }, {
    "from": 158,
    "label": "has",
    "to": 164
  }, {
    "from": 158,
    "label": "has",
    "to": 165
  }, {
    "from": 158,
    "label": "has",
    "to": 166
  }, {
    "from": 158,
    "label": "has",
    "to": 163
  }, {
    "from": 158,
    "label": "has",
    "to": 167
  }, {
    "from": 158,
    "label": "has",
    "to": 168
  }, {
    "from": 158,
    "label": "has",
    "to": 169
  }, {
    "from": 158,
    "label": "has",
    "to": 170
  }, {
    "from": 158,
    "label": "has",
    "to": 171
  }, {
    "from": 158,
    "label": "has",
    "to": 172
  }, {
    "from": 158,
    "label": "has",
    "to": 173
  }, {
    "from": 158,
    "label": "has",
    "to": 172
  }, {
    "from": 158,
    "label": "has",
    "to": 174
  }, {
    "from": 158,
    "label": "has",
    "to": 175
  }, {
    "from": 158,
    "label": "has",
    "to": 176
  }, {
    "from": 158,
    "label": "has",
    "to": 177
  }, {
    "from": 158,
    "label": "has",
    "to": 178
  }, {
    "from": 158,
    "label": "has",
    "to": 179
  }, {
    "from": 158,
    "label": "has",
    "to": 180
  }, {
    "from": 158,
    "label": "has",
    "to": 181
  }, {
    "from": 158,
    "label": "has",
    "to": 182
  }, {
    "from": 158,
    "label": "has",
    "to": 183
  }, {
    "from": 158,
    "label": "has",
    "to": 184
  }, {
    "from": 158,
    "label": "has",
    "to": 185
  }, {
    "from": 158,
    "label": "has",
    "to": 186
  }, {
    "from": 158,
    "label": "has",
    "to": 187
  }, {
    "from": 158,
    "label": "has",
    "to": 188
  }, {
    "from": 158,
    "label": "has",
    "to": 189
  }, {
    "from": 158,
    "label": "has",
    "to": 188
  }, {
    "from": 158,
    "label": "has",
    "to": 190
  }, {
    "from": 158,
    "label": "has",
    "to": 188
  }, {
    "from": 158,
    "label": "has",
    "to": 191
  }, {
    "from": 158,
    "label": "has",
    "to": 192
  }, {
    "from": 158,
    "label": "has",
    "to": 193
  }, {
    "from": 158,
    "label": "has",
    "to": 194
  }, {
    "from": 158,
    "label": "has",
    "to": 195
  }, {
    "from": 158,
    "label": "has",
    "to": 188
  }, {
    "from": 158,
    "label": "has",
    "to": 196
  }, {
    "from": 158,
    "label": "has",
    "to": 197
  }, {
    "from": 158,
    "label": "has",
    "to": 5
  }, {
    "from": 158,
    "label": "has",
    "to": 198
  }, {
    "from": 158,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 5
  }, {
    "from": 158,
    "label": "has",
    "to": 202
  }, {
    "from": 158,
    "label": "has",
    "to": 188
  }, {
    "from": 158,
    "label": "has",
    "to": 203
  }, {
    "from": 158,
    "label": "has",
    "to": 204
  }, {
    "from": 158,
    "label": "has",
    "to": 205
  }, {
    "from": 158,
    "label": "has",
    "to": 206
  }, {
    "from": 158,
    "label": "has",
    "to": 207
  }, {
    "from": 158,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 42
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 210
  }, {
    "from": 208,
    "label": "has",
    "to": 211
  }, {
    "from": 208,
    "label": "has",
    "to": 212
  }, {
    "from": 208,
    "label": "has",
    "to": 213
  }, {
    "from": 208,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 215,
    "label": "has",
    "to": 216
  }, {
    "from": 215,
    "label": "has",
    "to": 217
  }, {
    "from": 215,
    "label": "has",
    "to": 218
  }, {
    "from": 215,
    "label": "has",
    "to": 219
  }, {
    "from": 215,
    "label": "has",
    "to": 220
  }, {
    "from": 215,
    "label": "has",
    "to": 221
  }, {
    "from": 208,
    "label": "has",
    "to": 45
  }, {
    "from": 208,
    "label": "has",
    "to": 46
  }, {
    "from": 158,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 222,
    "label": "has",
    "to": 55
  }, {
    "from": 158,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 211
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 225,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 201
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 5
  }, {
    "from": 158,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 226
  }, {
    "from": 231,
    "label": "has",
    "to": 211
  }, {
    "from": 231,
    "label": "has",
    "to": 227
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 158,
    "label": "has",
    "to": 236
  }, {
    "from": 158,
    "label": "has",
    "to": 237
  }, {
    "from": 158,
    "label": "has",
    "to": 238
  }, {
    "from": 158,
    "label": "has",
    "to": 239
  }, {
    "from": 158,
    "label": "has",
    "to": 240
  }, {
    "from": 158,
    "label": "has",
    "to": 241
  }, {
    "from": 158,
    "label": "has",
    "to": 242
  }, {
    "from": 158,
    "label": "has",
    "to": 243
  }, {
    "from": 158,
    "label": "has",
    "to": 244
  }, {
    "from": 158,
    "label": "has",
    "to": 245
  }, {
    "from": 158,
    "label": "has",
    "to": 246
  }, {
    "from": 158,
    "label": "has",
    "to": 247
  }, {
    "from": 158,
    "label": "has",
    "to": 248
  }, {
    "from": 158,
    "label": "has",
    "to": 249
  }, {
    "from": 158,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 6
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 250,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 253,
    "label": "has",
    "to": 98
  }, {
    "from": 253,
    "label": "has",
    "to": 60
  }, {
    "from": 253,
    "label": "has",
    "to": 80
  }, {
    "from": 253,
    "label": "has",
    "to": 256
  }, {
    "from": 253,
    "label": "has",
    "to": 81
  }, {
    "from": 158,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 251
  }, {
    "from": 257,
    "label": "has",
    "to": 6
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 80
  }, {
    "from": 257,
    "label": "has",
    "to": 81
  }, {
    "from": 158,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 136
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 138
  }, {
    "from": 260,
    "label": "has",
    "to": 139
  }, {
    "from": 259,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 256
  }, {
    "from": 158,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 256
  }, {
    "from": 158,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 264,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 266,
    "label": "has",
    "to": 268
  }, {
    "from": 266,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 266,
    "label": "has",
    "to": 271
  }, {
    "from": 266,
    "label": "has",
    "to": 272
  }, {
    "from": 264,
    "label": "has",
    "to": 128
  }, {
    "from": 158,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 158,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 252
  }, {
    "from": 275,
    "label": "has",
    "to": 60
  }, {
    "from": 275,
    "label": "has",
    "to": 80
  }, {
    "from": 275,
    "label": "has",
    "to": 81
  }, {
    "from": 158,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 276,
    "label": "has",
    "to": 279
  }, {
    "from": 276,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 201
  }, {
    "from": 280,
    "label": "has",
    "to": 230
  }, {
    "from": 276,
    "label": "has",
    "to": 5
  }, {
    "from": 158,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 158,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 158,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 287,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 158,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 292,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 267
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 294,
    "label": "has",
    "to": 271
  }, {
    "from": 294,
    "label": "has",
    "to": 296
  }, {
    "from": 158,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 76
  }, {
    "from": 298,
    "label": "has",
    "to": 60
  }, {
    "from": 298,
    "label": "has",
    "to": 80
  }, {
    "from": 298,
    "label": "has",
    "to": 81
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 256
  }, {
    "from": 158,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 158,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 304
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 304,
    "label": "has",
    "to": 92
  }, {
    "from": 304,
    "label": "has",
    "to": 93
  }, {
    "from": 304,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 302,
    "label": "has",
    "to": 6
  }, {
    "from": 302,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 153
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 158,
    "label": "has",
    "to": 311
  }, {
    "from": 158,
    "label": "has",
    "to": 312
  }, {
    "from": 158,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 200
  }, {
    "from": 314,
    "label": "has",
    "to": 201
  }, {
    "from": 314,
    "label": "has",
    "to": 5
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 223
  }, {
    "from": 316,
    "label": "has",
    "to": 224
  }, {
    "from": 316,
    "label": "has",
    "to": 55
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 318,
    "label": "has",
    "to": 226
  }, {
    "from": 318,
    "label": "has",
    "to": 211
  }, {
    "from": 318,
    "label": "has",
    "to": 227
  }, {
    "from": 318,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 201
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 5
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 320,
    "label": "has",
    "to": 226
  }, {
    "from": 320,
    "label": "has",
    "to": 211
  }, {
    "from": 320,
    "label": "has",
    "to": 227
  }, {
    "from": 320,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 323,
    "label": "has",
    "to": 251
  }, {
    "from": 323,
    "label": "has",
    "to": 6
  }, {
    "from": 323,
    "label": "has",
    "to": 252
  }, {
    "from": 323,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 253,
    "label": "has",
    "to": 98
  }, {
    "from": 253,
    "label": "has",
    "to": 60
  }, {
    "from": 253,
    "label": "has",
    "to": 80
  }, {
    "from": 253,
    "label": "has",
    "to": 256
  }, {
    "from": 253,
    "label": "has",
    "to": 81
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 325,
    "label": "has",
    "to": 251
  }, {
    "from": 325,
    "label": "has",
    "to": 6
  }, {
    "from": 325,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 256
  }, {
    "from": 325,
    "label": "has",
    "to": 80
  }, {
    "from": 325,
    "label": "has",
    "to": 81
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 327,
    "label": "has",
    "to": 136
  }, {
    "from": 327,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 138
  }, {
    "from": 260,
    "label": "has",
    "to": 139
  }, {
    "from": 327,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 256
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 329,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 256
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 331,
    "label": "has",
    "to": 265
  }, {
    "from": 331,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 266,
    "label": "has",
    "to": 268
  }, {
    "from": 266,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 266,
    "label": "has",
    "to": 271
  }, {
    "from": 266,
    "label": "has",
    "to": 272
  }, {
    "from": 331,
    "label": "has",
    "to": 128
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 333,
    "label": "has",
    "to": 274
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 335,
    "label": "has",
    "to": 252
  }, {
    "from": 335,
    "label": "has",
    "to": 60
  }, {
    "from": 335,
    "label": "has",
    "to": 80
  }, {
    "from": 335,
    "label": "has",
    "to": 81
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 337,
    "label": "has",
    "to": 277
  }, {
    "from": 337,
    "label": "has",
    "to": 278
  }, {
    "from": 337,
    "label": "has",
    "to": 279
  }, {
    "from": 337,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 201
  }, {
    "from": 280,
    "label": "has",
    "to": 230
  }, {
    "from": 337,
    "label": "has",
    "to": 5
  }, {
    "from": 337,
    "label": "has",
    "to": 338
  }, {
    "from": 339,
    "label": "has",
    "to": 282
  }, {
    "from": 339,
    "label": "has",
    "to": 283
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 341,
    "label": "has",
    "to": 286
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 343,
    "label": "has",
    "to": 288
  }, {
    "from": 343,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 345,
    "label": "has",
    "to": 293
  }, {
    "from": 345,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 267
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 294,
    "label": "has",
    "to": 271
  }, {
    "from": 294,
    "label": "has",
    "to": 296
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 298
  }, {
    "from": 298,
    "label": "has",
    "to": 76
  }, {
    "from": 298,
    "label": "has",
    "to": 60
  }, {
    "from": 298,
    "label": "has",
    "to": 80
  }, {
    "from": 298,
    "label": "has",
    "to": 81
  }, {
    "from": 347,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 256
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 349,
    "label": "has",
    "to": 301
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 351,
    "label": "has",
    "to": 303
  }, {
    "from": 351,
    "label": "has",
    "to": 304
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 304,
    "label": "has",
    "to": 92
  }, {
    "from": 304,
    "label": "has",
    "to": 93
  }, {
    "from": 304,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 351,
    "label": "has",
    "to": 6
  }, {
    "from": 351,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 153
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 83,
    "label": "calls",
    "to": 391
  }, {
    "from": 141,
    "label": "calls",
    "to": 391
  }, {
    "from": 158,
    "label": "calls",
    "to": 374
  }, {
    "from": 158,
    "label": "calls",
    "to": 357
  }, {
    "from": 12,
    "label": "calls",
    "to": 8
  }, {
    "from": 32,
    "label": "calls",
    "to": 8
  }, {
    "from": 100,
    "label": "calls",
    "to": 382
  }, {
    "from": 158,
    "label": "calls",
    "to": 382
  }, {
    "from": 141,
    "label": "calls",
    "to": 387
  }, {
    "from": 141,
    "label": "calls",
    "to": 387
  }, {
    "from": 83,
    "label": "calls",
    "to": 32
  }, {
    "from": 158,
    "label": "calls",
    "to": 367
  }, {
    "from": 158,
    "label": "calls",
    "to": 356
  }, {
    "from": 90,
    "label": "calls",
    "to": 381
  }, {
    "from": 158,
    "label": "calls",
    "to": 381
  }, {
    "from": 158,
    "label": "calls",
    "to": 355
  }, {
    "from": 100,
    "label": "calls",
    "to": 393
  }, {
    "from": 353,
    "label": "calls",
    "to": 377
  }, {
    "from": 158,
    "label": "calls",
    "to": 375
  }, {
    "from": 48,
    "label": "calls",
    "to": 41
  }, {
    "from": 57,
    "label": "calls",
    "to": 41
  }, {
    "from": 158,
    "label": "calls",
    "to": 57
  }, {
    "from": 158,
    "label": "calls",
    "to": 57
  }, {
    "from": 158,
    "label": "calls",
    "to": 141
  }, {
    "from": 158,
    "label": "calls",
    "to": 141
  }, {
    "from": 97,
    "label": "calls",
    "to": 383
  }, {
    "from": 158,
    "label": "calls",
    "to": 379
  }, {
    "from": 158,
    "label": "calls",
    "to": 379
  }, {
    "from": 158,
    "label": "calls",
    "to": 379
  }, {
    "from": 158,
    "label": "calls",
    "to": 379
  }, {
    "from": 158,
    "label": "calls",
    "to": 379
  }, {
    "from": 158,
    "label": "calls",
    "to": 379
  }, {
    "from": 353,
    "label": "calls",
    "to": 395
  }, {
    "from": 100,
    "label": "calls",
    "to": 392
  }, {
    "from": 100,
    "label": "calls",
    "to": 392
  }, {
    "from": 100,
    "label": "calls",
    "to": 392
  }, {
    "from": 141,
    "label": "calls",
    "to": 388
  }, {
    "from": 130,
    "label": "calls",
    "to": 113
  }, {
    "from": 135,
    "label": "calls",
    "to": 113
  }, {
    "from": 158,
    "label": "calls",
    "to": 113
  }, {
    "from": 158,
    "label": "calls",
    "to": 385
  }, {
    "from": 158,
    "label": "calls",
    "to": 385
  }, {
    "from": 158,
    "label": "calls",
    "to": 385
  }, {
    "from": 158,
    "label": "calls",
    "to": 385
  }, {
    "from": 158,
    "label": "calls",
    "to": 385
  }, {
    "from": 158,
    "label": "calls",
    "to": 385
  }, {
    "from": 158,
    "label": "calls",
    "to": 385
  }, {
    "from": 141,
    "label": "calls",
    "to": 376
  }, {
    "from": 353,
    "label": "calls",
    "to": 361
  }, {
    "from": 353,
    "label": "calls",
    "to": 368
  }, {
    "from": 57,
    "label": "calls",
    "to": 368
  }, {
    "from": 141,
    "label": "calls",
    "to": 368
  }, {
    "from": 158,
    "label": "calls",
    "to": 368
  }, {
    "from": 158,
    "label": "calls",
    "to": 373
  }, {
    "from": 100,
    "label": "calls",
    "to": 389
  }, {
    "from": 158,
    "label": "calls",
    "to": 378
  }, {
    "from": 83,
    "label": "calls",
    "to": 371
  }, {
    "from": 158,
    "label": "calls",
    "to": 371
  }, {
    "from": 113,
    "label": "calls",
    "to": 394
  }, {
    "from": 41,
    "label": "calls",
    "to": 370
  }, {
    "from": 158,
    "label": "calls",
    "to": 370
  }, {
    "from": 158,
    "label": "calls",
    "to": 90
  }, {
    "from": 158,
    "label": "calls",
    "to": 90
  }, {
    "from": 8,
    "label": "calls",
    "to": 365
  }, {
    "from": 158,
    "label": "calls",
    "to": 365
  }, {
    "from": 158,
    "label": "calls",
    "to": 365
  }, {
    "from": 120,
    "label": "calls",
    "to": 364
  }, {
    "from": 130,
    "label": "calls",
    "to": 364
  }, {
    "from": 158,
    "label": "calls",
    "to": 364
  }, {
    "from": 63,
    "label": "calls",
    "to": 2
  }, {
    "from": 353,
    "label": "calls",
    "to": 158
  }, {
    "from": 135,
    "label": "calls",
    "to": 130
  }, {
    "from": 158,
    "label": "calls",
    "to": 130
  }, {
    "from": 158,
    "label": "calls",
    "to": 130
  }, {
    "from": 41,
    "label": "calls",
    "to": 12
  }, {
    "from": 158,
    "label": "calls",
    "to": 369
  }, {
    "from": 158,
    "label": "calls",
    "to": 120
  }, {
    "from": 158,
    "label": "calls",
    "to": 360
  }, {
    "from": 113,
    "label": "calls",
    "to": 358
  }, {
    "from": 141,
    "label": "calls",
    "to": 358
  }, {
    "from": 158,
    "label": "calls",
    "to": 358
  }, {
    "from": 158,
    "label": "calls",
    "to": 358
  }, {
    "from": 158,
    "label": "calls",
    "to": 362
  }, {
    "from": 63,
    "label": "calls",
    "to": 384
  }, {
    "from": 71,
    "label": "calls",
    "to": 384
  }, {
    "from": 83,
    "label": "calls",
    "to": 384
  }, {
    "from": 120,
    "label": "calls",
    "to": 97
  }, {
    "from": 158,
    "label": "calls",
    "to": 372
  }, {
    "from": 158,
    "label": "calls",
    "to": 359
  }, {
    "from": 158,
    "label": "calls",
    "to": 359
  }, {
    "from": 158,
    "label": "calls",
    "to": 359
  }, {
    "from": 158,
    "label": "calls",
    "to": 359
  }, {
    "from": 158,
    "label": "calls",
    "to": 359
  }, {
    "from": 100,
    "label": "calls",
    "to": 100
  }, {
    "from": 100,
    "label": "calls",
    "to": 100
  }, {
    "from": 113,
    "label": "calls",
    "to": 100
  }, {
    "from": 353,
    "label": "calls",
    "to": 363
  }, {
    "from": 8,
    "label": "calls",
    "to": 363
  }, {
    "from": 90,
    "label": "calls",
    "to": 135
  }, {
    "from": 158,
    "label": "calls",
    "to": 135
  }, {
    "from": 158,
    "label": "calls",
    "to": 354
  }, {
    "from": 8,
    "label": "calls",
    "to": 390
  }, {
    "from": 158,
    "label": "calls",
    "to": 366
  }, {
    "from": 158,
    "label": "calls",
    "to": 366
  }, {
    "from": 158,
    "label": "calls",
    "to": 366
  }, {
    "from": 158,
    "label": "calls",
    "to": 386
  }, {
    "from": 48,
    "label": "calls",
    "to": 380
  }, {
    "from": 1,
    "label": "contains",
    "to": 353
  }, {
    "from": 353,
    "label": "declares",
    "to": 2
  }, {
    "from": 353,
    "label": "declares",
    "to": 8
  }, {
    "from": 353,
    "label": "declares",
    "to": 12
  }, {
    "from": 353,
    "label": "declares",
    "to": 32
  }, {
    "from": 353,
    "label": "declares",
    "to": 41
  }, {
    "from": 353,
    "label": "declares",
    "to": 48
  }, {
    "from": 353,
    "label": "declares",
    "to": 57
  }, {
    "from": 353,
    "label": "declares",
    "to": 63
  }, {
    "from": 353,
    "label": "declares",
    "to": 71
  }, {
    "from": 353,
    "label": "declares",
    "to": 83
  }, {
    "from": 353,
    "label": "declares",
    "to": 90
  }, {
    "from": 353,
    "label": "declares",
    "to": 97
  }, {
    "from": 353,
    "label": "declares",
    "to": 100
  }, {
    "from": 353,
    "label": "declares",
    "to": 113
  }, {
    "from": 353,
    "label": "declares",
    "to": 120
  }, {
    "from": 353,
    "label": "declares",
    "to": 130
  }, {
    "from": 353,
    "label": "declares",
    "to": 135
  }, {
    "from": 353,
    "label": "declares",
    "to": 141
  }, {
    "from": 353,
    "label": "declares",
    "to": 158
  }, {
    "from": 353,
    "label": "declares",
    "to": 314
  }, {
    "from": 353,
    "label": "declares",
    "to": 316
  }, {
    "from": 353,
    "label": "declares",
    "to": 318
  }, {
    "from": 353,
    "label": "declares",
    "to": 320
  }, {
    "from": 353,
    "label": "declares",
    "to": 322
  }, {
    "from": 353,
    "label": "declares",
    "to": 323
  }, {
    "from": 353,
    "label": "declares",
    "to": 325
  }, {
    "from": 353,
    "label": "declares",
    "to": 327
  }, {
    "from": 353,
    "label": "declares",
    "to": 329
  }, {
    "from": 353,
    "label": "declares",
    "to": 331
  }, {
    "from": 353,
    "label": "declares",
    "to": 333
  }, {
    "from": 353,
    "label": "declares",
    "to": 335
  }, {
    "from": 353,
    "label": "declares",
    "to": 337
  }, {
    "from": 353,
    "label": "declares",
    "to": 339
  }, {
    "from": 353,
    "label": "declares",
    "to": 341
  }, {
    "from": 353,
    "label": "declares",
    "to": 343
  }, {
    "from": 353,
    "label": "declares",
    "to": 345
  }, {
    "from": 353,
    "label": "declares",
    "to": 347
  }, {
    "from": 353,
    "label": "declares",
    "to": 349
  }, {
    "from": 353,
    "label": "declares",
    "to": 351
  }, {
    "from": 1,
    "label": "contains",
    "to": 397
  }, {
    "from": 1,
    "label": "contains",
    "to": 398
  }, {
    "from": 397,
    "label": "initializes",
    "to": 399
  }, {
    "from": 399,
    "label": "assigns",
    "to": 400
  }, {
    "from": 397,
    "label": "initializes",
    "to": 401
  }, {
    "from": 397,
    "label": "initializes",
    "to": 402
  }, {
    "from": 397,
    "label": "initializes",
    "to": 403
  }, {
    "from": 397,
    "label": "initializes",
    "to": 404
  }, {
    "from": 397,
    "label": "initializes",
    "to": 405
  }, {
    "from": 405,
    "label": "assigns",
    "to": 406
  }, {
    "from": 397,
    "label": "initializes",
    "to": 407
  }, {
    "from": 397,
    "label": "initializes",
    "to": 408
  }, {
    "from": 397,
    "label": "initializes",
    "to": 409
  }, {
    "from": 397,
    "label": "initializes",
    "to": 410
  }, {
    "from": 397,
    "label": "initializes",
    "to": 411
  }, {
    "from": 411,
    "label": "assigns",
    "to": 412
  }, {
    "from": 397,
    "label": "initializes",
    "to": 413
  }, {
    "from": 413,
    "label": "assigns",
    "to": 414
  }, {
    "from": 397,
    "label": "initializes",
    "to": 415
  }, {
    "from": 415,
    "label": "assigns",
    "to": 416
  }, {
    "from": 397,
    "label": "initializes",
    "to": 417
  }, {
    "from": 417,
    "label": "assigns",
    "to": 418
  }, {
    "from": 397,
    "label": "initializes",
    "to": 419
  }, {
    "from": 419,
    "label": "assigns",
    "to": 420
  }, {
    "from": 397,
    "label": "initializes",
    "to": 421
  }, {
    "from": 421,
    "label": "assigns",
    "to": 422
  }, {
    "from": 397,
    "label": "initializes",
    "to": 423
  }, {
    "from": 423,
    "label": "assigns",
    "to": 424
  }, {
    "from": 397,
    "label": "initializes",
    "to": 425
  }, {
    "from": 425,
    "label": "assigns",
    "to": 426
  }, {
    "from": 397,
    "label": "initializes",
    "to": 427
  }, {
    "from": 427,
    "label": "assigns",
    "to": 428
  }, {
    "from": 397,
    "label": "initializes",
    "to": 429
  }, {
    "from": 429,
    "label": "assigns",
    "to": 430
  }, {
    "from": 397,
    "label": "initializes",
    "to": 431
  }, {
    "from": 397,
    "label": "initializes",
    "to": 432
  }, {
    "from": 432,
    "label": "assigns",
    "to": 433
  }, {
    "from": 398,
    "label": "initializes",
    "to": 396
  }, {
    "from": 199,
    "label": "hasArgument",
    "to": 314
  }, {
    "from": 222,
    "label": "hasArgument",
    "to": 316
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 318
  }, {
    "from": 231,
    "label": "hasArgument",
    "to": 320
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 322
  }, {
    "from": 250,
    "label": "hasArgument",
    "to": 323
  }, {
    "from": 257,
    "label": "hasArgument",
    "to": 325
  }, {
    "from": 259,
    "label": "hasArgument",
    "to": 327
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 329
  }, {
    "from": 264,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 273,
    "label": "hasArgument",
    "to": 333
  }, {
    "from": 275,
    "label": "hasArgument",
    "to": 335
  }, {
    "from": 276,
    "label": "hasArgument",
    "to": 337
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 339
  }, {
    "from": 285,
    "label": "hasArgument",
    "to": 341
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 343
  }, {
    "from": 292,
    "label": "hasArgument",
    "to": 345
  }, {
    "from": 297,
    "label": "hasArgument",
    "to": 347
  }, {
    "from": 300,
    "label": "hasArgument",
    "to": 349
  }, {
    "from": 302,
    "label": "hasArgument",
    "to": 351
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "scribble",
    "type": "module"
  }, {
    "id": 2,
    "text": "function PenToTable(pen)\r\n    local c = pen:GetColour()\r\n    local t = { colour = { c:Red(), c:Green(), c:Blue() }, width = pen:GetWidth(), style = pen:GetStyle() }\r\n    c:delete()\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local c = pen:GetColour()",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local t = { colour = { c:Red(), c:Green(), c:Blue() }, width = pen:GetWidth(), style = pen:GetStyle() }",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "c:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function TableToPen(penTable)\r\n    local c = wx.wxColour(unpack(penTable.colour))\r\n    local pen = wx.wxPen(c, penTable.width, penTable.style)\r\n    c:delete()\r\n    return pen\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local c = wx.wxColour(unpack(penTable.colour))",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local pen = wx.wxPen(c, penTable.width, penTable.style)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function DrawPoints(drawDC)\r\n    if lastDrawn == 0 then\r\n        drawDC:Clear()\r\n    end\r\n\r\n    local start_index = 1\r\n    if lastDrawn > 1 then start_index = lastDrawn end\r\n\r\n    for list_index = start_index, #pointsList do\r\n        local listValue = pointsList[list_index]\r\n        local pen = TableToPen(listValue.pen)\r\n        drawDC:SetPen(pen)\r\n        pen:delete()\r\n\r\n        local point = listValue[1]\r\n        local last_point = point\r\n        for point_index = 2, #listValue do\r\n            point = listValue[point_index]\r\n            drawDC:DrawLine(last_point.x, last_point.y, point.x, point.y)\r\n            last_point = point\r\n        end\r\n    end\r\n\r\n    lastDrawn = #pointsList\r\n    drawDC:SetPen(wx.wxNullPen)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "if lastDrawn == 0 then\r\n        drawDC:Clear()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "drawDC:Clear()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local start_index = 1",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if lastDrawn > 1 then start_index = lastDrawn end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "start_index = lastDrawn",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "for list_index = start_index, #pointsList do\r\n        local listValue = pointsList[list_index]\r\n        local pen = TableToPen(listValue.pen)\r\n        drawDC:SetPen(pen)\r\n        pen:delete()\r\n\r\n        local point = listValue[1]\r\n        local last_point = point\r\n        for point_index = 2, #listValue do\r\n            point = listValue[point_index]\r\n            drawDC:DrawLine(last_point.x, last_point.y, point.x, point.y)\r\n            last_point = point\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 19,
    "text": "local listValue = pointsList[list_index]",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local pen = TableToPen(listValue.pen)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "drawDC:SetPen(pen)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "pen:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local point = listValue[1]",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local last_point = point",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "for point_index = 2, #listValue do\r\n            point = listValue[point_index]\r\n            drawDC:DrawLine(last_point.x, last_point.y, point.x, point.y)\r\n            last_point = point\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 26,
    "text": "point = listValue[point_index]",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "drawDC:DrawLine(last_point.x, last_point.y, point.x, point.y)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "last_point = point",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "lastDrawn = #pointsList",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "drawDC:SetPen(wx.wxNullPen)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function DrawLastPoint(drawDC)\r\n    if #pointsList >= 1 then\r\n        local listValue = pointsList[#pointsList]\r\n        local count = #listValue\r\n        if count > 1 then\r\n            local pen = TableToPen(listValue.pen)\r\n            drawDC:SetPen(pen)\r\n            pen:delete()\r\n\r\n            local pt1 = listValue[count-1]\r\n            local pt2 = listValue[count]\r\n            drawDC:DrawLine(pt1.x, pt1.y, pt2.x, pt2.y)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "if #pointsList >= 1 then\r\n        local listValue = pointsList[#pointsList]\r\n        local count = #listValue\r\n        if count > 1 then\r\n            local pen = TableToPen(listValue.pen)\r\n            drawDC:SetPen(pen)\r\n            pen:delete()\r\n\r\n            local pt1 = listValue[count-1]\r\n            local pt2 = listValue[count]\r\n            drawDC:DrawLine(pt1.x, pt1.y, pt2.x, pt2.y)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "local listValue = pointsList[#pointsList]",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local count = #listValue",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if count > 1 then\r\n            local pen = TableToPen(listValue.pen)\r\n            drawDC:SetPen(pen)\r\n            pen:delete()\r\n\r\n            local pt1 = listValue[count-1]\r\n            local pt2 = listValue[count]\r\n            drawDC:DrawLine(pt1.x, pt1.y, pt2.x, pt2.y)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local pt1 = listValue[count-1]",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local pt2 = listValue[count]",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "drawDC:DrawLine(pt1.x, pt1.y, pt2.x, pt2.y)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function DrawBitmap(bmp)\r\n    local memDC = wx.wxMemoryDC()       -- create off screen dc to draw on\r\n    memDC:SelectObject(bmp)             -- select our bitmap to draw into\r\n\r\n    DrawPoints(memDC)\r\n\r\n    memDC:SelectObject(wx.wxNullBitmap) -- always release bitmap\r\n    memDC:delete() -- ALWAYS delete() any wxDCs created when done\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local memDC = wx.wxMemoryDC()",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "memDC:SelectObject(bmp)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "DrawPoints(memDC)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "memDC:SelectObject(wx.wxNullBitmap)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "memDC:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function OnPaint(event)\r\n    -- ALWAYS create wxPaintDC in wxEVT_PAINT handler, even if unused\r\n    local dc = wx.wxPaintDC(panel)\r\n\r\n    if bitmap and bitmap:Ok() then\r\n        if redrawRequired then\r\n            DrawBitmap(bitmap)\r\n            redrawRequired = false\r\n        end\r\n\r\n        dc:DrawBitmap(bitmap, 0, 0, false)\r\n    end\r\n\r\n    dc:delete() -- ALWAYS delete() any wxDCs created when done\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local dc = wx.wxPaintDC(panel)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if bitmap and bitmap:Ok() then\r\n        if redrawRequired then\r\n            DrawBitmap(bitmap)\r\n            redrawRequired = false\r\n        end\r\n\r\n        dc:DrawBitmap(bitmap, 0, 0, false)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "if redrawRequired then\r\n            DrawBitmap(bitmap)\r\n            redrawRequired = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "DrawBitmap(bitmap)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "redrawRequired = false",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "dc:DrawBitmap(bitmap, 0, 0, false)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "dc:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function GetBitmap()\r\n    local w, h = panel:GetClientSizeWH()\r\n    local bmp = wx.wxBitmap(w, h)\r\n    lastDrawn = 0 -- force redrawing all points\r\n    DrawBitmap(bmp)\r\n    lastDrawn = 0 -- force redrawing all points\r\n    return bmp\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local w, h = panel:GetClientSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local bmp = wx.wxBitmap(w, h)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "lastDrawn = 0",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "DrawBitmap(bmp)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function OnLeftDown(event)\r\n    local pointItem = {pen = PenToTable(currentPen), {x = event:GetX(), y = event:GetY()}}\r\n    table.insert(pointsList, pointItem)\r\n\r\n    if (not panel:HasCapture()) then panel:CaptureMouse() end\r\n    mouseDown = true\r\n    isModified = true\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local pointItem = {pen = PenToTable(currentPen), {x = event:GetX(), y = event:GetY()}}",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "table.insert(pointsList, pointItem)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if (not panel:HasCapture()) then panel:CaptureMouse() end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "panel:CaptureMouse()",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "mouseDown = true",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "isModified = true",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function OnLeftUp(event)\r\n    if mouseDown then\r\n        -- only add point if the mouse moved since DrawLine(1,2,1,2) won't draw anyway\r\n        if (#pointsList[#pointsList] > 1) then\r\n            local point = { x = event:GetX(), y = event:GetY() }\r\n            table.insert(pointsList[#pointsList], point)\r\n        else\r\n            pointsList[#pointsList] = nil\r\n        end\r\n\r\n        if panel:HasCapture() then panel:ReleaseMouse() end\r\n        mouseDown = false\r\n        redrawRequired = true\r\n        panel:Refresh()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "if mouseDown then\r\n        -- only add point if the mouse moved since DrawLine(1,2,1,2) won't draw anyway\r\n        if (#pointsList[#pointsList] > 1) then\r\n            local point = { x = event:GetX(), y = event:GetY() }\r\n            table.insert(pointsList[#pointsList], point)\r\n        else\r\n            pointsList[#pointsList] = nil\r\n        end\r\n\r\n        if panel:HasCapture() then panel:ReleaseMouse() end\r\n        mouseDown = false\r\n        redrawRequired = true\r\n        panel:Refresh()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "if (#pointsList[#pointsList] > 1) then\r\n            local point = { x = event:GetX(), y = event:GetY() }\r\n            table.insert(pointsList[#pointsList], point)\r\n        else\r\n            pointsList[#pointsList] = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local point = { x = event:GetX(), y = event:GetY() }",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "table.insert(pointsList[#pointsList], point)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "pointsList[#pointsList] = nil",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "if panel:HasCapture() then panel:ReleaseMouse() end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "panel:ReleaseMouse()",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "mouseDown = false",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "redrawRequired = true",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "panel:Refresh()",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function OnMotion(event)\r\n    frame:SetStatusText(string.format(\"%d, %d\", event:GetX(), event:GetY()), 1)\r\n\r\n    if event:LeftIsDown() then\r\n        local point = { x = event:GetX(), y = event:GetY() }\r\n        table.insert(pointsList[#pointsList], point)\r\n\r\n        mouseDown = true\r\n\r\n        -- draw directly on the panel, we'll draw on the bitmap in OnLeftUp\r\n        local drawDC = wx.wxClientDC(panel)\r\n        DrawLastPoint(drawDC)\r\n        drawDC:delete()\r\n    elseif panel:HasCapture() then -- just in case we lost focus somehow\r\n        panel:ReleaseMouse()\r\n        mouseDown = false\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "frame:SetStatusText(string.format(\"%d, %d\", event:GetX(), event:GetY()), 1)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "if event:LeftIsDown() then\r\n        local point = { x = event:GetX(), y = event:GetY() }\r\n        table.insert(pointsList[#pointsList], point)\r\n\r\n        mouseDown = true\r\n\r\n        -- draw directly on the panel, we'll draw on the bitmap in OnLeftUp\r\n        local drawDC = wx.wxClientDC(panel)\r\n        DrawLastPoint(drawDC)\r\n        drawDC:delete()\r\n    elseif panel:HasCapture() then -- just in case we lost focus somehow\r\n        panel:ReleaseMouse()\r\n        mouseDown = false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "local drawDC = wx.wxClientDC(panel)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "DrawLastPoint(drawDC)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "drawDC:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function QuerySaveChanges()\r\n    local dialog = wx.wxMessageDialog( frame,\r\n                                       \"Document has changed. Do you wish to save the changes?\",\r\n                                       \"wxLua Scribble Save Changes?\",\r\n                                       wx.wxYES_NO + wx.wxCANCEL + wx.wxCENTRE + wx.wxICON_QUESTION )\r\n    local result = dialog:ShowModal()\r\n    dialog:Destroy()\r\n\r\n    if result == wx.wxID_YES then\r\n        if not SaveChanges() then return wx.wxID_CANCEL end\r\n    end\r\n\r\n    return result\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local dialog = wx.wxMessageDialog( frame,\r\n                                       \"Document has changed. Do you wish to save the changes?\",\r\n                                       \"wxLua Scribble Save Changes?\",\r\n                                       wx.wxYES_NO + wx.wxCANCEL + wx.wxCENTRE + wx.wxICON_QUESTION )",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local result = dialog:ShowModal()",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "dialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "if result == wx.wxID_YES then\r\n        if not SaveChanges() then return wx.wxID_CANCEL end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "if not SaveChanges() then return wx.wxID_CANCEL end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function LoadScribbles(fileName)\r\n    pointsList = {}\r\n    lastDrawn = 0\r\n    return ((pcall(dofile, fileName)) ~= nil)\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "pointsList = {}",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function savevar(fh, n, v)\r\n    if v ~= nil then\r\n        fh:write(n, \"=\")\r\n        if type(v) == \"string\" then\r\n            fh:write(format(\"%q\", v))\r\n        elseif type(v) == \"table\" then\r\n            fh:write(\"{}\\n\")\r\n            for r,f in pairs(v) do\r\n                if type(r) == 'string' then\r\n                    savevar(fh, n..\".\"..r, f)\r\n                else\r\n                    savevar(fh, n..\"[\"..r..\"]\", f)\r\n                end\r\n            end\r\n        else\r\n            fh:write(tostring(v))\r\n        end\r\n        fh:write(\"\\n\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "if v ~= nil then\r\n        fh:write(n, \"=\")\r\n        if type(v) == \"string\" then\r\n            fh:write(format(\"%q\", v))\r\n        elseif type(v) == \"table\" then\r\n            fh:write(\"{}\\n\")\r\n            for r,f in pairs(v) do\r\n                if type(r) == 'string' then\r\n                    savevar(fh, n..\".\"..r, f)\r\n                else\r\n                    savevar(fh, n..\"[\"..r..\"]\", f)\r\n                end\r\n            end\r\n        else\r\n            fh:write(tostring(v))\r\n        end\r\n        fh:write(\"\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "fh:write(n, \"=\")",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "if type(v) == \"string\" then\r\n            fh:write(format(\"%q\", v))\r\n        elseif type(v) == \"table\" then\r\n            fh:write(\"{}\\n\")\r\n            for r,f in pairs(v) do\r\n                if type(r) == 'string' then\r\n                    savevar(fh, n..\".\"..r, f)\r\n                else\r\n                    savevar(fh, n..\"[\"..r..\"]\", f)\r\n                end\r\n            end\r\n        else\r\n            fh:write(tostring(v))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "fh:write(format(\"%q\", v))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "fh:write(\"{}\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "for r,f in pairs(v) do\r\n                if type(r) == 'string' then\r\n                    savevar(fh, n..\".\"..r, f)\r\n                else\r\n                    savevar(fh, n..\"[\"..r..\"]\", f)\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 107,
    "text": "if type(r) == 'string' then\r\n                    savevar(fh, n..\".\"..r, f)\r\n                else\r\n                    savevar(fh, n..\"[\"..r..\"]\", f)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "savevar(fh, n..\".\"..r, f)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "savevar(fh, n..\"[\"..r..\"]\", f)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "fh:write(tostring(v))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "fh:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function SaveScribbles()\r\n    local fh, msg = io.open(fileName, \"w+\")\r\n    if fh then\r\n        savevar(fh, \"pointsList\", pointsList)\r\n        fh:close()\r\n        return true\r\n    else\r\n        wx.wxMessageBox(\"Unable to save file:'\"..fileName..\"'.\\n\"..msg,\r\n                        \"wxLua Scribble Save error\",\r\n                        wx.wxOK + wx.wxICON_ERROR,\r\n                        frame)\r\n        return false\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "local fh, msg = io.open(fileName, \"w+\")",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "if fh then\r\n        savevar(fh, \"pointsList\", pointsList)\r\n        fh:close()\r\n        return true\r\n    else\r\n        wx.wxMessageBox(\"Unable to save file:'\"..fileName..\"'.\\n\"..msg,\r\n                        \"wxLua Scribble Save error\",\r\n                        wx.wxOK + wx.wxICON_ERROR,\r\n                        frame)\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "savevar(fh, \"pointsList\", pointsList)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "wx.wxMessageBox(\"Unable to save file:'\"..fileName..\"'.\\n\"..msg,\r\n                        \"wxLua Scribble Save error\",\r\n                        wx.wxOK + wx.wxICON_ERROR,\r\n                        frame)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function Open()\r\n    local fileDialog = wx.wxFileDialog(frame,\r\n                                       \"Open wxLua scribble file\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"Scribble files(*.scribble)|*.scribble|All files(*)|*\",\r\n                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)\r\n    local result = false\r\n    if fileDialog:ShowModal() == wx.wxID_OK then\r\n        fileName = fileDialog:GetPath()\r\n        result = LoadScribbles(fileName)\r\n        if result then\r\n            frame:SetTitle(\"wxLua Scribble - \" .. fileName)\r\n        end\r\n    end\r\n    fileDialog:Destroy()\r\n    return result\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "local fileDialog = wx.wxFileDialog(frame,\r\n                                       \"Open wxLua scribble file\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"Scribble files(*.scribble)|*.scribble|All files(*)|*\",\r\n                                       wx.wxOPEN + wx.wxFILE_MUST_EXIST)",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local result = false",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "if fileDialog:ShowModal() == wx.wxID_OK then\r\n        fileName = fileDialog:GetPath()\r\n        result = LoadScribbles(fileName)\r\n        if result then\r\n            frame:SetTitle(\"wxLua Scribble - \" .. fileName)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "fileName = fileDialog:GetPath()",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "result = LoadScribbles(fileName)",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "if result then\r\n            frame:SetTitle(\"wxLua Scribble - \" .. fileName)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "frame:SetTitle(\"wxLua Scribble - \" .. fileName)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "fileDialog:Destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function SaveAs()\r\n    local fileDialog = wx.wxFileDialog(frame,\r\n                                       \"Save wxLua scribble file\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"Scribble files(*.scribble)|*.scribble|All files(*)|*\",\r\n                                       wx.wxSAVE + wx.wxOVERWRITE_PROMPT)\r\n    local result = false\r\n    if fileDialog:ShowModal() == wx.wxID_OK then\r\n        fileName = fileDialog:GetPath()\r\n        result = SaveScribbles()\r\n        if result then\r\n            frame:SetTitle(\"wxLua Scribble - \" .. fileName)\r\n        end\r\n    end\r\n    fileDialog:Destroy()\r\n    return result\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "local fileDialog = wx.wxFileDialog(frame,\r\n                                       \"Save wxLua scribble file\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"Scribble files(*.scribble)|*.scribble|All files(*)|*\",\r\n                                       wx.wxSAVE + wx.wxOVERWRITE_PROMPT)",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "if fileDialog:ShowModal() == wx.wxID_OK then\r\n        fileName = fileDialog:GetPath()\r\n        result = SaveScribbles()\r\n        if result then\r\n            frame:SetTitle(\"wxLua Scribble - \" .. fileName)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "result = SaveScribbles()",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function SaveChanges()\r\n   local saved = false\r\n   if fileName == \"\" then\r\n       saved = SaveAs()\r\n   else\r\n       saved = SaveScribbles()\r\n   end\r\n   return saved\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "local saved = false",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if fileName == \"\" then\r\n       saved = SaveAs()\r\n   else\r\n       saved = SaveScribbles()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "saved = SaveAs()",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "saved = SaveScribbles()",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function SetBitmapSize()\r\n    local w, h = bitmap:GetWidth(), bitmap:GetHeight()\r\n\r\n    local ok = true\r\n    repeat\r\n        local s = wx.wxGetTextFromUser(\"Enter the image size to use as 'width height'\", \"Set new image size\",\r\n                                        string.format(\"%d %d\", bitmap:GetWidth(), bitmap:GetHeight()), frame)\r\n        if (#s == 0) then\r\n            return false -- they canceled the dialog\r\n        end\r\n        w, h = string.match(s, \"(%d+) (%d+)\")\r\n\r\n        w = tonumber(w)\r\n        h = tonumber(h)\r\n        if (w == nil) or (h == nil) or (w < 2) or (h < 2) or (w > 10000) or (h > 10000) then\r\n            wx.wxMessageBox(\"Please enter two positive numbers < 10000 for the width and height separated by a space\",\r\n                            \"Invalid image width or height\", wx.wxOK + wx.wxCENTRE + wx.wxICON_ERROR, frame)\r\n            ok = false\r\n        end\r\n    until ok\r\n\r\n    -- resize all the drawing objects\r\n    bitmap:delete()\r\n    bitmap = wx.wxBitmap(w, h)\r\n    panel:SetSize(w, h)\r\n    scrollwin:SetScrollbars(1, 1, w, h)\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "local w, h = bitmap:GetWidth(), bitmap:GetHeight()",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "local ok = true",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "repeat\r\n        local s = wx.wxGetTextFromUser(\"Enter the image size to use as 'width height'\", \"Set new image size\",\r\n                                        string.format(\"%d %d\", bitmap:GetWidth(), bitmap:GetHeight()), frame)\r\n        if (#s == 0) then\r\n            return false -- they canceled the dialog\r\n        end\r\n        w, h = string.match(s, \"(%d+) (%d+)\")\r\n\r\n        w = tonumber(w)\r\n        h = tonumber(h)\r\n        if (w == nil) or (h == nil) or (w < 2) or (h < 2) or (w > 10000) or (h > 10000) then\r\n            wx.wxMessageBox(\"Please enter two positive numbers < 10000 for the width and height separated by a space\",\r\n                            \"Invalid image width or height\", wx.wxOK + wx.wxCENTRE + wx.wxICON_ERROR, frame)\r\n            ok = false\r\n        end\r\n    until ok",
    "type": "statement:repeat"
  }, {
    "id": 145,
    "text": "local s = wx.wxGetTextFromUser(\"Enter the image size to use as 'width height'\", \"Set new image size\",\r\n                                        string.format(\"%d %d\", bitmap:GetWidth(), bitmap:GetHeight()), frame)",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "if (#s == 0) then\r\n            return false -- they canceled the dialog\r\n        end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "w, h = string.match(s, \"(%d+) (%d+)\")",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "w = tonumber(w)",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "h = tonumber(h)",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "if (w == nil) or (h == nil) or (w < 2) or (h < 2) or (w > 10000) or (h > 10000) then\r\n            wx.wxMessageBox(\"Please enter two positive numbers < 10000 for the width and height separated by a space\",\r\n                            \"Invalid image width or height\", wx.wxOK + wx.wxCENTRE + wx.wxICON_ERROR, frame)\r\n            ok = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "wx.wxMessageBox(\"Please enter two positive numbers < 10000 for the width and height separated by a space\",\r\n                            \"Invalid image width or height\", wx.wxOK + wx.wxCENTRE + wx.wxICON_ERROR, frame)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "ok = false",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "bitmap:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "bitmap = wx.wxBitmap(w, h)",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "panel:SetSize(w, h)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "scrollwin:SetScrollbars(1, 1, w, h)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function main()\r\n    frame = wx.wxFrame( wx.NULL, wx.wxID_ANY, \"wxLua Scribble\",\r\n                        wx.wxDefaultPosition, wx.wxSize(450, 450),\r\n                        wx.wxDEFAULT_FRAME_STYLE )\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Create the menubar\r\n    local fileMenu = wx.wxMenu()\r\n    fileMenu:Append(wx.wxID_NEW,    \"&New...\\tCtrl+N\",    \"Begin a new drawing\")\r\n    fileMenu:Append(wx.wxID_OPEN,   \"&Open...\\tCtrl+O\",   \"Open an existing drawing\")\r\n    fileMenu:AppendSeparator()\r\n    fileMenu:Append(wx.wxID_SAVE,   \"&Save\\tCtrl+S\",      \"Save the drawing lines\")\r\n    fileMenu:Append(wx.wxID_SAVEAS, \"Save &as...\\tAlt+S\", \"Save the drawing lines to a new file\")\r\n    fileMenu:Append(ID_SAVEBITMAP,  \"Save &bitmap...\",    \"Save the drawing as a bitmap file\")\r\n    fileMenu:AppendSeparator()\r\n    fileMenu:Append(wx.wxID_EXIT,   \"E&xit\\tCtrl+Q\",      \"Quit the program\")\r\n\r\n    local editMenu = wx.wxMenu()\r\n    editMenu:Append(ID_IMAGESIZE, \"Set image size...\", \"Set the size of the image to draw on\")\r\n    editMenu:Append(ID_PENCOLOUR, \"Set pen &color...\\tCtrl+R\", \"Set the color of the pen to draw with\")\r\n    editMenu:Append(ID_PENWIDTH,  \"Set pen &width...\\tCtrl+T\", \"Set width of the pen to draw with\")\r\n    -- Pen styles really only work for long lines, when you change direction the styles\r\n    --   blur into each other and just look like a solid line.\r\n    --editMenu:Append(ID_PENSTYLE,  \"Set &Style\\tCtrl+Y\", \"Set style of the pen to draw with\")\r\n    editMenu:AppendSeparator()\r\n    editMenu:Append(wx.wxID_COPY,  \"Copy to clipboard\\tCtrl-C\", \"Copy current image to the clipboard\")\r\n    editMenu:AppendSeparator()\r\n    editMenu:Append(wx.wxID_UNDO,  \"&Undo\\tCtrl-Z\", \"Undo last drawn segment\")\r\n\r\n    local helpMenu = wx.wxMenu()\r\n    helpMenu:Append(wx.wxID_ABOUT,  \"&About...\", \"About the wxLua Scribble Application\")\r\n\r\n    local menuBar = wx.wxMenuBar()\r\n    menuBar:Append(fileMenu, \"&File\")\r\n    menuBar:Append(editMenu, \"&Edit\")\r\n    menuBar:Append(helpMenu, \"&Help\")\r\n    frame:SetMenuBar(menuBar)\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Create the toolbar\r\n    toolBar = frame:CreateToolBar(wx.wxNO_BORDER + wx.wxTB_FLAT + wx.wxTB_DOCKABLE)\r\n    -- Note: Ususally the bmp size isn't necessary, but the HELP icon is not the right size in MSW\r\n    local toolBmpSize = toolBar:GetToolBitmapSize()\r\n    -- Note: Each temp bitmap returned by the wxArtProvider needs to be garbage collected\r\n    --       and there is no way to call delete() on them. See collectgarbage(\"collect\")\r\n    --       at the end of this function.\r\n    toolBar:AddTool(wx.wxID_NEW,    \"New\",     wx.wxArtProvider.GetBitmap(wx.wxART_NORMAL_FILE, wx.wxART_MENU, toolBmpSize), \"Create an empty scribble\")\r\n    toolBar:AddTool(wx.wxID_OPEN,   \"Open\",    wx.wxArtProvider.GetBitmap(wx.wxART_FILE_OPEN, wx.wxART_MENU, toolBmpSize),   \"Open an existing scribble\")\r\n    toolBar:AddTool(wx.wxID_SAVE,   \"Save\",    wx.wxArtProvider.GetBitmap(wx.wxART_FILE_SAVE, wx.wxART_MENU, toolBmpSize),   \"Save the current scribble\")\r\n    toolBar:AddTool(wx.wxID_SAVEAS, \"Save as\", wx.wxArtProvider.GetBitmap(wx.wxART_NEW_DIR, wx.wxART_MENU, toolBmpSize),     \"Save the current scribble to a new file\")\r\n    toolBar:AddSeparator()\r\n    toolBar:AddTool(wx.wxID_COPY,   \"Copy\",    wx.wxArtProvider.GetBitmap(wx.wxART_COPY, wx.wxART_MENU, toolBmpSize),        \"Copy image to clipboard\")\r\n    toolBar:AddSeparator()\r\n    toolBar:AddTool(wx.wxID_UNDO,   \"Undo\",    wx.wxArtProvider.GetBitmap(wx.wxART_UNDO, wx.wxART_MENU, toolBmpSize),        \"Undo last line drawn\")\r\n    toolBar:AddSeparator()\r\n\r\n    penWidthSpinCtrl = wx.wxSpinCtrl(toolBar, ID_PENWIDTH_SPINCTRL, tostring(currentPen:GetWidth()),\r\n                                     wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                     wx.wxSP_ARROW_KEYS, 1, 100, currentPen:GetWidth())\r\n    local w, h = penWidthSpinCtrl:GetSizeWH()\r\n    penWidthSpinCtrl:SetSize(3*h, -1)\r\n    penWidthSpinCtrl:SetToolTip(\"Set pen width in pixels\")\r\n    toolBar:AddControl(penWidthSpinCtrl)\r\n    toolBar:AddSeparator()\r\n\r\n    local c = currentPen:GetColour()\r\n    colourPicker = wx.wxColourPickerCtrl(toolBar, ID_PENCOLOUR, c,\r\n                                         wx.wxDefaultPosition, toolBmpSize:op_sub(wx.wxSize(2,2)),\r\n                                         wx.wxCLRP_DEFAULT_STYLE)\r\n    c:delete()\r\n    colourPicker:SetToolTip(\"Choose pen color\")\r\n    colourPicker:Connect(wx.wxEVT_COMMAND_COLOURPICKER_CHANGED,\r\n            function(event)\r\n                local c = event:GetColour()\r\n                currentPen:SetColour(c)\r\n                c:delete()\r\n            end)\r\n\r\n    toolBar:AddControl(colourPicker)\r\n    toolBar:AddSeparator()\r\n\r\n    -- Create a custom control to choose some common colours.\r\n    local colourWin_height = math.floor(h/2)*2 -- round to be divisible by two\r\n    local colourWin = wx.wxControl(toolBar, wx.wxID_ANY,\r\n                                   wx.wxDefaultPosition, wx.wxSize(4*colourWin_height, colourWin_height),\r\n                                   wx.wxBORDER_NONE)\r\n    -- Need help in GTK to ensure that it's positioned correctly\r\n    colourWin:SetMinSize(wx.wxSize(4*colourWin_height, colourWin_height))\r\n\r\n    local colourWinColours = {\r\n        \"black\", \"grey\",       \"brown\", \"red\",  \"orange\", \"green\",     \"blue\",     \"violet\",\r\n        \"white\", \"light grey\", \"tan\",   \"pink\", \"yellow\", \"turquoise\", \"sky blue\", \"maroon\"\r\n    }\r\n    -- Note: this bitmap is local, but is used in the event handlers\r\n    local colourWinBmp = wx.wxBitmap(4*colourWin_height, colourWin_height)\r\n    do\r\n        local memDC = wx.wxMemoryDC()\r\n        memDC:SelectObject(colourWinBmp)\r\n        memDC:SetPen(wx.wxBLACK_PEN)\r\n        local w, h = colourWin:GetClientSizeWH()\r\n        local w2 = math.floor(w/8)\r\n        local h2 = math.floor(h/2)\r\n\r\n        for j = 1, 2 do\r\n            for i = 1, 8 do\r\n                local colour = wx.wxColour(colourWinColours[i + 8*(j-1)])\r\n                local brush  = wx.wxBrush(colour, wx.wxSOLID)\r\n                memDC:SetBrush(brush)\r\n                memDC:DrawRectangle(w2*(i-1), h2*(j-1), w2, h2)\r\n                brush:delete()\r\n                colour:delete()\r\n            end\r\n        end\r\n        memDC:SelectObject(wx.wxNullBitmap)\r\n        memDC:delete()\r\n    end\r\n\r\n    colourWin:Connect(wx.wxEVT_ERASE_BACKGROUND,\r\n        function(event)\r\n            local dc = wx.wxClientDC(colourWin)\r\n            dc:DrawBitmap(colourWinBmp, 0, 0, false) -- this is our background\r\n            dc:delete()\r\n        end)\r\n    colourWin:Connect(wx.wxEVT_LEFT_DOWN,\r\n        function(event)\r\n            local x, y = event:GetPositionXY()\r\n            local w, h = colourWin:GetClientSizeWH()\r\n            local i = math.floor(8*x/w)+1 + 8*math.floor(2*y/h)\r\n            if colourWinColours[i] then\r\n                local c = wx.wxColour(colourWinColours[i])\r\n                currentPen:SetColour(c)\r\n                colourPicker:SetColour(c)\r\n                c:delete()\r\n            end\r\n        end)\r\n    colourWin:Connect(wx.wxEVT_MOTION,\r\n        function(event)\r\n            local x, y = event:GetPositionXY()\r\n            local w, h = colourWin:GetClientSizeWH()\r\n            local i = math.floor(8*x/w)+1 + 8*math.floor(2*y/h)\r\n            if colourWinColours[i] then\r\n                local s = \"Set pen color : \"..colourWinColours[i]\r\n                if colourWin:GetToolTip() ~= s then\r\n                    colourWin:SetToolTip(s)\r\n                end\r\n            end\r\n        end)\r\n    toolBar:AddControl(colourWin)\r\n\r\n    -- once all the tools are added, layout all the tools\r\n    toolBar:Realize()\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Create the statusbar\r\n    local statusBar = frame:CreateStatusBar(2)\r\n    local status_width = statusBar:GetTextExtent(\"88888, 88888\")\r\n    frame:SetStatusWidths({ -1, status_width })\r\n    frame:SetStatusText(\"Welcome to wxLua Scribble.\")\r\n\r\n    -- Create a wxScrolledWindow to hold drawing window, it will fill the frame\r\n    scrollwin = wx.wxScrolledWindow(frame, wx.wxID_ANY)\r\n    scrollwin:SetScrollbars(1, 1, bitmap:GetWidth(), bitmap:GetHeight())\r\n\r\n    -- Create the panel that's the correct size of the bitmap on the scrolled\r\n    -- window so we don't have to worry about calculating the scrolled position\r\n    -- for drawing and the mouse position.\r\n    panel = wx.wxPanel(scrollwin, wx.wxID_ANY, wx.wxDefaultPosition, wx.wxSize(bitmap:GetWidth(), bitmap:GetHeight()))\r\n\r\n    panel:Connect(wx.wxEVT_PAINT, OnPaint)\r\n    panel:Connect(wx.wxEVT_ERASE_BACKGROUND, function(event) end) -- do nothing\r\n    panel:Connect(wx.wxEVT_LEFT_DOWN, OnLeftDown )\r\n    panel:Connect(wx.wxEVT_LEFT_UP,   OnLeftUp )\r\n    panel:Connect(wx.wxEVT_MOTION,    OnMotion )\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- File menu events\r\n\r\n    frame:Connect(wx.wxID_NEW, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                if isModified and (QuerySaveChanges() == wx.wxID_CANCEL) then\r\n                    return\r\n                end\r\n\r\n                local bmp_changed = SetBitmapSize()\r\n\r\n                if bmp_changed then\r\n                    fileName = \"\"\r\n                    frame:SetTitle(\"wxLua Scribble\")\r\n                    pointsList = {}\r\n                    lastDrawn = 0\r\n                    redrawRequired = true\r\n                    isModified = false\r\n                    panel:Refresh()\r\n                end\r\n            end )\r\n\r\n    frame:Connect(wx.wxID_OPEN, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                if isModified and (QuerySaveChanges() == wx.wxID_CANCEL) then\r\n                    return\r\n                end\r\n\r\n                if Open() then\r\n                    isModified = false\r\n                end\r\n                redrawRequired = true\r\n                panel:Refresh()\r\n            end )\r\n\r\n    frame:Connect(wx.wxID_SAVE, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local saved = false\r\n                if fileName == \"\" then\r\n                    saved = SaveAs()\r\n                else\r\n                    saved = SaveScribbles()\r\n                end\r\n                if saved then\r\n                    isModified = false\r\n                end\r\n            end )\r\n\r\n    frame:Connect(wx.wxID_SAVEAS, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                if SaveAs() then\r\n                    isModified = false\r\n                end\r\n            end )\r\n\r\n    frame:Connect(ID_SAVEBITMAP, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local fileDialog = wx.wxFileDialog(frame,\r\n                                       \"Save wxLua scribble file as\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"PNG (*.png)|*.png|PCX (*.pcx)|*.pcx|Bitmap (*.bmp)|*.bmp|Jpeg (*.jpg,*.jpeg)|*.jpg,*.jpeg|Tiff (*.tif,*.tiff)|*.tif,*.tiff\",\r\n                                       wx.wxSAVE + wx.wxOVERWRITE_PROMPT)\r\n                if fileDialog:ShowModal() == wx.wxID_OK then\r\n                    local bmp = GetBitmap()\r\n                    local img = bmp:ConvertToImage()\r\n                    if not img:SaveFile(fileDialog:GetPath()) then\r\n                        wx.wxMessageBox(\"There was a problem saving the image file\\n\"..fileDialog:GetPath(),\r\n                                        \"Error saving image\",\r\n                                        wx.wxOK + wx.wxICON_ERROR,\r\n                                        frame )\r\n                    end\r\n\r\n                    bmp:delete()\r\n                    img:delete()\r\n                end\r\n\r\n                fileDialog:Destroy()\r\n            end )\r\n\r\n    frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                frame:Close(true)\r\n            end )\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Edit menu events\r\n\r\n    frame:Connect(ID_IMAGESIZE, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local bmp_changed = SetBitmapSize()\r\n                lastDrawn = 0\r\n                redrawRequired = true\r\n                panel:Refresh()\r\n            end )\r\n\r\n    frame:Connect(ID_PENCOLOUR, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local oldColour = currentPen:GetColour()\r\n                local c = wx.wxGetColourFromUser(frame, oldColour,\r\n                                                 \"wxLua Scribble\")\r\n                oldColour:delete()\r\n                if c:Ok() then -- returns invalid colour if canceled\r\n                    currentPen:SetColour(c)\r\n                    colourPicker:SetColour(c)\r\n                end\r\n                c:delete()\r\n            end )\r\n\r\n    frame:Connect(ID_PENWIDTH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local ret = wx.wxGetNumberFromUser(\"Select pen width in pixels\", \"Width\", \"wxLua Scribble\",\r\n                                                    currentPen:GetWidth(), 1, 100, frame)\r\n                if ret > 0 then -- returns -1 if canceled\r\n                    currentPen:SetWidth(ret)\r\n                end\r\n            end )\r\n    frame:Connect(ID_PENWIDTH_SPINCTRL, wx.wxEVT_COMMAND_SPINCTRL_UPDATED,\r\n            function (event)\r\n                currentPen:SetWidth(event:GetInt())\r\n            end )\r\n\r\n    frame:Connect(ID_PENSTYLE, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local ret = wx.wxGetSingleChoice(\"Select pen style\", \"wxLua Scribble\",\r\n                                                 penStyleNames,\r\n                                                 frame)\r\n                for n = 1, #penStyleNames do\r\n                    if penStyleNames[n] == ret then\r\n                        currentPen:SetStyle(penStyles[n])\r\n                        break\r\n                    end\r\n                end\r\n            end )\r\n\r\n    frame:Connect(wx.wxID_COPY, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local clipBoard = wx.wxClipboard.Get()\r\n                if clipBoard and clipBoard:Open() then\r\n                    local bmp = GetBitmap()\r\n                    clipBoard:SetData(wx.wxBitmapDataObject(bmp))\r\n                    bmp:delete()\r\n\r\n                    clipBoard:Close()\r\n                end\r\n            end)\r\n\r\n    frame:Connect(wx.wxID_UNDO, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                if #pointsList then\r\n                    pointsList[#pointsList] = nil\r\n                    lastDrawn = 0\r\n                    redrawRequired = true\r\n                    panel:Refresh()\r\n                end\r\n\r\n                if #pointsList == 0 then\r\n                    isModified = false\r\n                end\r\n            end )\r\n\r\n    -- -----------------------------------------------------------------------\r\n    -- Help menu events\r\n\r\n    frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                wx.wxMessageBox('This is the \"About\" dialog of the Scribble wxLua Sample.\\n'..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLua Scribble\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                frame )\r\n            end )\r\n\r\n    -- -----------------------------------------------------------------------\r\n\r\n    frame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n            function (event)\r\n                local isOkToClose = true\r\n                if isModified then\r\n                    local dialog = wx.wxMessageDialog( frame,\r\n                                                       \"Save changes before exiting?\",\r\n                                                       \"Save Changes?\",\r\n                                                       wx.wxYES_NO + wx.wxCANCEL + wx.wxCENTRE + wx.wxICON_QUESTION )\r\n                    local result = dialog:ShowModal()\r\n                    dialog:Destroy()\r\n                    if result == wx.wxID_CANCEL then\r\n                        return\r\n                    elseif result == wx.wxID_YES then\r\n                        isOkToClose  = SaveChanges()\r\n                    end\r\n                end\r\n                if isOkToClose then\r\n                    -- prevent paint events using the memDC during closing\r\n                    bitmap:delete()\r\n                    bitmap = nil\r\n                    -- ensure the event is skipped to allow the frame to close\r\n                    event:Skip()\r\n                end\r\n            end )\r\n\r\n    -- delete all locals vars like the temporary wxArtProvider bitmaps\r\n    collectgarbage(\"collect\")\r\n\r\n    frame:Show(true)\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "frame = wx.wxFrame( wx.NULL, wx.wxID_ANY, \"wxLua Scribble\",\r\n                        wx.wxDefaultPosition, wx.wxSize(450, 450),\r\n                        wx.wxDEFAULT_FRAME_STYLE )",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "local fileMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "fileMenu:Append(wx.wxID_NEW,    \"&New...\\tCtrl+N\",    \"Begin a new drawing\")",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "fileMenu:Append(wx.wxID_OPEN,   \"&Open...\\tCtrl+O\",   \"Open an existing drawing\")",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "fileMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "fileMenu:Append(wx.wxID_SAVE,   \"&Save\\tCtrl+S\",      \"Save the drawing lines\")",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "fileMenu:Append(wx.wxID_SAVEAS, \"Save &as...\\tAlt+S\", \"Save the drawing lines to a new file\")",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "fileMenu:Append(ID_SAVEBITMAP,  \"Save &bitmap...\",    \"Save the drawing as a bitmap file\")",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "fileMenu:Append(wx.wxID_EXIT,   \"E&xit\\tCtrl+Q\",      \"Quit the program\")",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "local editMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "editMenu:Append(ID_IMAGESIZE, \"Set image size...\", \"Set the size of the image to draw on\")",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "editMenu:Append(ID_PENCOLOUR, \"Set pen &color...\\tCtrl+R\", \"Set the color of the pen to draw with\")",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "editMenu:Append(ID_PENWIDTH,  \"Set pen &width...\\tCtrl+T\", \"Set width of the pen to draw with\")",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "editMenu:AppendSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "editMenu:Append(wx.wxID_COPY,  \"Copy to clipboard\\tCtrl-C\", \"Copy current image to the clipboard\")",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "editMenu:Append(wx.wxID_UNDO,  \"&Undo\\tCtrl-Z\", \"Undo last drawn segment\")",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "local helpMenu = wx.wxMenu()",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "helpMenu:Append(wx.wxID_ABOUT,  \"&About...\", \"About the wxLua Scribble Application\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "local menuBar = wx.wxMenuBar()",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "menuBar:Append(fileMenu, \"&File\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "menuBar:Append(editMenu, \"&Edit\")",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "menuBar:Append(helpMenu, \"&Help\")",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "frame:SetMenuBar(menuBar)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "toolBar = frame:CreateToolBar(wx.wxNO_BORDER + wx.wxTB_FLAT + wx.wxTB_DOCKABLE)",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "local toolBmpSize = toolBar:GetToolBitmapSize()",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "toolBar:AddTool(wx.wxID_NEW,    \"New\",     wx.wxArtProvider.GetBitmap(wx.wxART_NORMAL_FILE, wx.wxART_MENU, toolBmpSize), \"Create an empty scribble\")",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "toolBar:AddTool(wx.wxID_OPEN,   \"Open\",    wx.wxArtProvider.GetBitmap(wx.wxART_FILE_OPEN, wx.wxART_MENU, toolBmpSize),   \"Open an existing scribble\")",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "toolBar:AddTool(wx.wxID_SAVE,   \"Save\",    wx.wxArtProvider.GetBitmap(wx.wxART_FILE_SAVE, wx.wxART_MENU, toolBmpSize),   \"Save the current scribble\")",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "toolBar:AddTool(wx.wxID_SAVEAS, \"Save as\", wx.wxArtProvider.GetBitmap(wx.wxART_NEW_DIR, wx.wxART_MENU, toolBmpSize),     \"Save the current scribble to a new file\")",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "toolBar:AddSeparator()",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "toolBar:AddTool(wx.wxID_COPY,   \"Copy\",    wx.wxArtProvider.GetBitmap(wx.wxART_COPY, wx.wxART_MENU, toolBmpSize),        \"Copy image to clipboard\")",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "toolBar:AddTool(wx.wxID_UNDO,   \"Undo\",    wx.wxArtProvider.GetBitmap(wx.wxART_UNDO, wx.wxART_MENU, toolBmpSize),        \"Undo last line drawn\")",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "penWidthSpinCtrl = wx.wxSpinCtrl(toolBar, ID_PENWIDTH_SPINCTRL, tostring(currentPen:GetWidth()),\r\n                                     wx.wxDefaultPosition, wx.wxDefaultSize,\r\n                                     wx.wxSP_ARROW_KEYS, 1, 100, currentPen:GetWidth())",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "local w, h = penWidthSpinCtrl:GetSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "penWidthSpinCtrl:SetSize(3*h, -1)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "penWidthSpinCtrl:SetToolTip(\"Set pen width in pixels\")",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "toolBar:AddControl(penWidthSpinCtrl)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "local c = currentPen:GetColour()",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "colourPicker = wx.wxColourPickerCtrl(toolBar, ID_PENCOLOUR, c,\r\n                                         wx.wxDefaultPosition, toolBmpSize:op_sub(wx.wxSize(2,2)),\r\n                                         wx.wxCLRP_DEFAULT_STYLE)",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "colourPicker:SetToolTip(\"Choose pen color\")",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "colourPicker:Connect(wx.wxEVT_COMMAND_COLOURPICKER_CHANGED,\r\n            function(event)\r\n                local c = event:GetColour()\r\n                currentPen:SetColour(c)\r\n                c:delete()\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "local c = event:GetColour()",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "currentPen:SetColour(c)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "toolBar:AddControl(colourPicker)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "local colourWin_height = math.floor(h/2)*2",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "local colourWin = wx.wxControl(toolBar, wx.wxID_ANY,\r\n                                   wx.wxDefaultPosition, wx.wxSize(4*colourWin_height, colourWin_height),\r\n                                   wx.wxBORDER_NONE)",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "colourWin:SetMinSize(wx.wxSize(4*colourWin_height, colourWin_height))",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "local colourWinColours = {\r\n        \"black\", \"grey\",       \"brown\", \"red\",  \"orange\", \"green\",     \"blue\",     \"violet\",\r\n        \"white\", \"light grey\", \"tan\",   \"pink\", \"yellow\", \"turquoise\", \"sky blue\", \"maroon\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "local colourWinBmp = wx.wxBitmap(4*colourWin_height, colourWin_height)",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "do\r\n        local memDC = wx.wxMemoryDC()\r\n        memDC:SelectObject(colourWinBmp)\r\n        memDC:SetPen(wx.wxBLACK_PEN)\r\n        local w, h = colourWin:GetClientSizeWH()\r\n        local w2 = math.floor(w/8)\r\n        local h2 = math.floor(h/2)\r\n\r\n        for j = 1, 2 do\r\n            for i = 1, 8 do\r\n                local colour = wx.wxColour(colourWinColours[i + 8*(j-1)])\r\n                local brush  = wx.wxBrush(colour, wx.wxSOLID)\r\n                memDC:SetBrush(brush)\r\n                memDC:DrawRectangle(w2*(i-1), h2*(j-1), w2, h2)\r\n                brush:delete()\r\n                colour:delete()\r\n            end\r\n        end\r\n        memDC:SelectObject(wx.wxNullBitmap)\r\n        memDC:delete()\r\n    end",
    "type": "statement:do"
  }, {
    "id": 209,
    "text": "memDC:SelectObject(colourWinBmp)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "memDC:SetPen(wx.wxBLACK_PEN)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "local w, h = colourWin:GetClientSizeWH()",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "local w2 = math.floor(w/8)",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "local h2 = math.floor(h/2)",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "for j = 1, 2 do\r\n            for i = 1, 8 do\r\n                local colour = wx.wxColour(colourWinColours[i + 8*(j-1)])\r\n                local brush  = wx.wxBrush(colour, wx.wxSOLID)\r\n                memDC:SetBrush(brush)\r\n                memDC:DrawRectangle(w2*(i-1), h2*(j-1), w2, h2)\r\n                brush:delete()\r\n                colour:delete()\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 215,
    "text": "for i = 1, 8 do\r\n                local colour = wx.wxColour(colourWinColours[i + 8*(j-1)])\r\n                local brush  = wx.wxBrush(colour, wx.wxSOLID)\r\n                memDC:SetBrush(brush)\r\n                memDC:DrawRectangle(w2*(i-1), h2*(j-1), w2, h2)\r\n                brush:delete()\r\n                colour:delete()\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 216,
    "text": "local colour = wx.wxColour(colourWinColours[i + 8*(j-1)])",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "local brush  = wx.wxBrush(colour, wx.wxSOLID)",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "memDC:SetBrush(brush)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "memDC:DrawRectangle(w2*(i-1), h2*(j-1), w2, h2)",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "brush:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "colour:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "colourWin:Connect(wx.wxEVT_ERASE_BACKGROUND,\r\n        function(event)\r\n            local dc = wx.wxClientDC(colourWin)\r\n            dc:DrawBitmap(colourWinBmp, 0, 0, false) -- this is our background\r\n            dc:delete()\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "local dc = wx.wxClientDC(colourWin)",
    "type": "statement:localassign"
  }, {
    "id": 224,
    "text": "dc:DrawBitmap(colourWinBmp, 0, 0, false)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "colourWin:Connect(wx.wxEVT_LEFT_DOWN,\r\n        function(event)\r\n            local x, y = event:GetPositionXY()\r\n            local w, h = colourWin:GetClientSizeWH()\r\n            local i = math.floor(8*x/w)+1 + 8*math.floor(2*y/h)\r\n            if colourWinColours[i] then\r\n                local c = wx.wxColour(colourWinColours[i])\r\n                currentPen:SetColour(c)\r\n                colourPicker:SetColour(c)\r\n                c:delete()\r\n            end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "local x, y = event:GetPositionXY()",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "local i = math.floor(8*x/w)+1 + 8*math.floor(2*y/h)",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "if colourWinColours[i] then\r\n                local c = wx.wxColour(colourWinColours[i])\r\n                currentPen:SetColour(c)\r\n                colourPicker:SetColour(c)\r\n                c:delete()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 229,
    "text": "local c = wx.wxColour(colourWinColours[i])",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "colourPicker:SetColour(c)",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "colourWin:Connect(wx.wxEVT_MOTION,\r\n        function(event)\r\n            local x, y = event:GetPositionXY()\r\n            local w, h = colourWin:GetClientSizeWH()\r\n            local i = math.floor(8*x/w)+1 + 8*math.floor(2*y/h)\r\n            if colourWinColours[i] then\r\n                local s = \"Set pen color : \"..colourWinColours[i]\r\n                if colourWin:GetToolTip() ~= s then\r\n                    colourWin:SetToolTip(s)\r\n                end\r\n            end\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "if colourWinColours[i] then\r\n                local s = \"Set pen color : \"..colourWinColours[i]\r\n                if colourWin:GetToolTip() ~= s then\r\n                    colourWin:SetToolTip(s)\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "local s = \"Set pen color : \"..colourWinColours[i]",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "if colourWin:GetToolTip() ~= s then\r\n                    colourWin:SetToolTip(s)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 235,
    "text": "colourWin:SetToolTip(s)",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "toolBar:AddControl(colourWin)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "toolBar:Realize()",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "local statusBar = frame:CreateStatusBar(2)",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "local status_width = statusBar:GetTextExtent(\"88888, 88888\")",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "frame:SetStatusWidths({ -1, status_width })",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "frame:SetStatusText(\"Welcome to wxLua Scribble.\")",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "scrollwin = wx.wxScrolledWindow(frame, wx.wxID_ANY)",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "scrollwin:SetScrollbars(1, 1, bitmap:GetWidth(), bitmap:GetHeight())",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "panel = wx.wxPanel(scrollwin, wx.wxID_ANY, wx.wxDefaultPosition, wx.wxSize(bitmap:GetWidth(), bitmap:GetHeight()))",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "panel:Connect(wx.wxEVT_PAINT, OnPaint)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "panel:Connect(wx.wxEVT_ERASE_BACKGROUND, function(event) end)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "panel:Connect(wx.wxEVT_LEFT_DOWN, OnLeftDown )",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "panel:Connect(wx.wxEVT_LEFT_UP,   OnLeftUp )",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "panel:Connect(wx.wxEVT_MOTION,    OnMotion )",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "frame:Connect(wx.wxID_NEW, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                if isModified and (QuerySaveChanges() == wx.wxID_CANCEL) then\r\n                    return\r\n                end\r\n\r\n                local bmp_changed = SetBitmapSize()\r\n\r\n                if bmp_changed then\r\n                    fileName = \"\"\r\n                    frame:SetTitle(\"wxLua Scribble\")\r\n                    pointsList = {}\r\n                    lastDrawn = 0\r\n                    redrawRequired = true\r\n                    isModified = false\r\n                    panel:Refresh()\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "if isModified and (QuerySaveChanges() == wx.wxID_CANCEL) then\r\n                    return\r\n                end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "local bmp_changed = SetBitmapSize()",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "if bmp_changed then\r\n                    fileName = \"\"\r\n                    frame:SetTitle(\"wxLua Scribble\")\r\n                    pointsList = {}\r\n                    lastDrawn = 0\r\n                    redrawRequired = true\r\n                    isModified = false\r\n                    panel:Refresh()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 254,
    "text": "fileName = \"\"",
    "type": "statement:assign"
  }, {
    "id": 255,
    "text": "frame:SetTitle(\"wxLua Scribble\")",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "isModified = false",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "frame:Connect(wx.wxID_OPEN, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                if isModified and (QuerySaveChanges() == wx.wxID_CANCEL) then\r\n                    return\r\n                end\r\n\r\n                if Open() then\r\n                    isModified = false\r\n                end\r\n                redrawRequired = true\r\n                panel:Refresh()\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "if Open() then\r\n                    isModified = false\r\n                end",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "frame:Connect(wx.wxID_SAVE, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local saved = false\r\n                if fileName == \"\" then\r\n                    saved = SaveAs()\r\n                else\r\n                    saved = SaveScribbles()\r\n                end\r\n                if saved then\r\n                    isModified = false\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "if fileName == \"\" then\r\n                    saved = SaveAs()\r\n                else\r\n                    saved = SaveScribbles()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "if saved then\r\n                    isModified = false\r\n                end",
    "type": "statement:if"
  }, {
    "id": 262,
    "text": "frame:Connect(wx.wxID_SAVEAS, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                if SaveAs() then\r\n                    isModified = false\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "if SaveAs() then\r\n                    isModified = false\r\n                end",
    "type": "statement:if"
  }, {
    "id": 264,
    "text": "frame:Connect(ID_SAVEBITMAP, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local fileDialog = wx.wxFileDialog(frame,\r\n                                       \"Save wxLua scribble file as\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"PNG (*.png)|*.png|PCX (*.pcx)|*.pcx|Bitmap (*.bmp)|*.bmp|Jpeg (*.jpg,*.jpeg)|*.jpg,*.jpeg|Tiff (*.tif,*.tiff)|*.tif,*.tiff\",\r\n                                       wx.wxSAVE + wx.wxOVERWRITE_PROMPT)\r\n                if fileDialog:ShowModal() == wx.wxID_OK then\r\n                    local bmp = GetBitmap()\r\n                    local img = bmp:ConvertToImage()\r\n                    if not img:SaveFile(fileDialog:GetPath()) then\r\n                        wx.wxMessageBox(\"There was a problem saving the image file\\n\"..fileDialog:GetPath(),\r\n                                        \"Error saving image\",\r\n                                        wx.wxOK + wx.wxICON_ERROR,\r\n                                        frame )\r\n                    end\r\n\r\n                    bmp:delete()\r\n                    img:delete()\r\n                end\r\n\r\n                fileDialog:Destroy()\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "local fileDialog = wx.wxFileDialog(frame,\r\n                                       \"Save wxLua scribble file as\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"PNG (*.png)|*.png|PCX (*.pcx)|*.pcx|Bitmap (*.bmp)|*.bmp|Jpeg (*.jpg,*.jpeg)|*.jpg,*.jpeg|Tiff (*.tif,*.tiff)|*.tif,*.tiff\",\r\n                                       wx.wxSAVE + wx.wxOVERWRITE_PROMPT)",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "if fileDialog:ShowModal() == wx.wxID_OK then\r\n                    local bmp = GetBitmap()\r\n                    local img = bmp:ConvertToImage()\r\n                    if not img:SaveFile(fileDialog:GetPath()) then\r\n                        wx.wxMessageBox(\"There was a problem saving the image file\\n\"..fileDialog:GetPath(),\r\n                                        \"Error saving image\",\r\n                                        wx.wxOK + wx.wxICON_ERROR,\r\n                                        frame )\r\n                    end\r\n\r\n                    bmp:delete()\r\n                    img:delete()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "local bmp = GetBitmap()",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "local img = bmp:ConvertToImage()",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "if not img:SaveFile(fileDialog:GetPath()) then\r\n                        wx.wxMessageBox(\"There was a problem saving the image file\\n\"..fileDialog:GetPath(),\r\n                                        \"Error saving image\",\r\n                                        wx.wxOK + wx.wxICON_ERROR,\r\n                                        frame )\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "wx.wxMessageBox(\"There was a problem saving the image file\\n\"..fileDialog:GetPath(),\r\n                                        \"Error saving image\",\r\n                                        wx.wxOK + wx.wxICON_ERROR,\r\n                                        frame )",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "bmp:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "img:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "frame:Connect(wx.wxID_EXIT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                frame:Close(true)\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "frame:Close(true)",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "frame:Connect(ID_IMAGESIZE, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local bmp_changed = SetBitmapSize()\r\n                lastDrawn = 0\r\n                redrawRequired = true\r\n                panel:Refresh()\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "frame:Connect(ID_PENCOLOUR, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local oldColour = currentPen:GetColour()\r\n                local c = wx.wxGetColourFromUser(frame, oldColour,\r\n                                                 \"wxLua Scribble\")\r\n                oldColour:delete()\r\n                if c:Ok() then -- returns invalid colour if canceled\r\n                    currentPen:SetColour(c)\r\n                    colourPicker:SetColour(c)\r\n                end\r\n                c:delete()\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "local oldColour = currentPen:GetColour()",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "local c = wx.wxGetColourFromUser(frame, oldColour,\r\n                                                 \"wxLua Scribble\")",
    "type": "statement:localassign"
  }, {
    "id": 279,
    "text": "oldColour:delete()",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "if c:Ok() then -- returns invalid colour if canceled\r\n                    currentPen:SetColour(c)\r\n                    colourPicker:SetColour(c)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "frame:Connect(ID_PENWIDTH, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local ret = wx.wxGetNumberFromUser(\"Select pen width in pixels\", \"Width\", \"wxLua Scribble\",\r\n                                                    currentPen:GetWidth(), 1, 100, frame)\r\n                if ret > 0 then -- returns -1 if canceled\r\n                    currentPen:SetWidth(ret)\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "local ret = wx.wxGetNumberFromUser(\"Select pen width in pixels\", \"Width\", \"wxLua Scribble\",\r\n                                                    currentPen:GetWidth(), 1, 100, frame)",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "if ret > 0 then -- returns -1 if canceled\r\n                    currentPen:SetWidth(ret)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "currentPen:SetWidth(ret)",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "frame:Connect(ID_PENWIDTH_SPINCTRL, wx.wxEVT_COMMAND_SPINCTRL_UPDATED,\r\n            function (event)\r\n                currentPen:SetWidth(event:GetInt())\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "currentPen:SetWidth(event:GetInt())",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "frame:Connect(ID_PENSTYLE, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local ret = wx.wxGetSingleChoice(\"Select pen style\", \"wxLua Scribble\",\r\n                                                 penStyleNames,\r\n                                                 frame)\r\n                for n = 1, #penStyleNames do\r\n                    if penStyleNames[n] == ret then\r\n                        currentPen:SetStyle(penStyles[n])\r\n                        break\r\n                    end\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "local ret = wx.wxGetSingleChoice(\"Select pen style\", \"wxLua Scribble\",\r\n                                                 penStyleNames,\r\n                                                 frame)",
    "type": "statement:localassign"
  }, {
    "id": 289,
    "text": "for n = 1, #penStyleNames do\r\n                    if penStyleNames[n] == ret then\r\n                        currentPen:SetStyle(penStyles[n])\r\n                        break\r\n                    end\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 290,
    "text": "if penStyleNames[n] == ret then\r\n                        currentPen:SetStyle(penStyles[n])\r\n                        break\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 291,
    "text": "currentPen:SetStyle(penStyles[n])",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "frame:Connect(wx.wxID_COPY, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                local clipBoard = wx.wxClipboard.Get()\r\n                if clipBoard and clipBoard:Open() then\r\n                    local bmp = GetBitmap()\r\n                    clipBoard:SetData(wx.wxBitmapDataObject(bmp))\r\n                    bmp:delete()\r\n\r\n                    clipBoard:Close()\r\n                end\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "local clipBoard = wx.wxClipboard.Get()",
    "type": "statement:localassign"
  }, {
    "id": 294,
    "text": "if clipBoard and clipBoard:Open() then\r\n                    local bmp = GetBitmap()\r\n                    clipBoard:SetData(wx.wxBitmapDataObject(bmp))\r\n                    bmp:delete()\r\n\r\n                    clipBoard:Close()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 295,
    "text": "clipBoard:SetData(wx.wxBitmapDataObject(bmp))",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "clipBoard:Close()",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "frame:Connect(wx.wxID_UNDO, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                if #pointsList then\r\n                    pointsList[#pointsList] = nil\r\n                    lastDrawn = 0\r\n                    redrawRequired = true\r\n                    panel:Refresh()\r\n                end\r\n\r\n                if #pointsList == 0 then\r\n                    isModified = false\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "if #pointsList then\r\n                    pointsList[#pointsList] = nil\r\n                    lastDrawn = 0\r\n                    redrawRequired = true\r\n                    panel:Refresh()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 299,
    "text": "if #pointsList == 0 then\r\n                    isModified = false\r\n                end",
    "type": "statement:if"
  }, {
    "id": 300,
    "text": "frame:Connect(wx.wxID_ABOUT, wx.wxEVT_COMMAND_MENU_SELECTED,\r\n            function (event)\r\n                wx.wxMessageBox('This is the \"About\" dialog of the Scribble wxLua Sample.\\n'..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLua Scribble\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                frame )\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "wx.wxMessageBox('This is the \"About\" dialog of the Scribble wxLua Sample.\\n'..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLua Scribble\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                frame )",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "frame:Connect(wx.wxEVT_CLOSE_WINDOW,\r\n            function (event)\r\n                local isOkToClose = true\r\n                if isModified then\r\n                    local dialog = wx.wxMessageDialog( frame,\r\n                                                       \"Save changes before exiting?\",\r\n                                                       \"Save Changes?\",\r\n                                                       wx.wxYES_NO + wx.wxCANCEL + wx.wxCENTRE + wx.wxICON_QUESTION )\r\n                    local result = dialog:ShowModal()\r\n                    dialog:Destroy()\r\n                    if result == wx.wxID_CANCEL then\r\n                        return\r\n                    elseif result == wx.wxID_YES then\r\n                        isOkToClose  = SaveChanges()\r\n                    end\r\n                end\r\n                if isOkToClose then\r\n                    -- prevent paint events using the memDC during closing\r\n                    bitmap:delete()\r\n                    bitmap = nil\r\n                    -- ensure the event is skipped to allow the frame to close\r\n                    event:Skip()\r\n                end\r\n            end )",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "local isOkToClose = true",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "if isModified then\r\n                    local dialog = wx.wxMessageDialog( frame,\r\n                                                       \"Save changes before exiting?\",\r\n                                                       \"Save Changes?\",\r\n                                                       wx.wxYES_NO + wx.wxCANCEL + wx.wxCENTRE + wx.wxICON_QUESTION )\r\n                    local result = dialog:ShowModal()\r\n                    dialog:Destroy()\r\n                    if result == wx.wxID_CANCEL then\r\n                        return\r\n                    elseif result == wx.wxID_YES then\r\n                        isOkToClose  = SaveChanges()\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 305,
    "text": "local dialog = wx.wxMessageDialog( frame,\r\n                                                       \"Save changes before exiting?\",\r\n                                                       \"Save Changes?\",\r\n                                                       wx.wxYES_NO + wx.wxCANCEL + wx.wxCENTRE + wx.wxICON_QUESTION )",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "if result == wx.wxID_CANCEL then\r\n                        return\r\n                    elseif result == wx.wxID_YES then\r\n                        isOkToClose  = SaveChanges()\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 307,
    "text": "isOkToClose  = SaveChanges()",
    "type": "statement:assign"
  }, {
    "id": 308,
    "text": "if isOkToClose then\r\n                    -- prevent paint events using the memDC during closing\r\n                    bitmap:delete()\r\n                    bitmap = nil\r\n                    -- ensure the event is skipped to allow the frame to close\r\n                    event:Skip()\r\n                end",
    "type": "statement:if"
  }, {
    "id": 309,
    "text": "bitmap = nil",
    "type": "statement:assign"
  }, {
    "id": 310,
    "text": "event:Skip()",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "frame:Show(true)",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function(event)\r\n                local c = event:GetColour()\r\n                currentPen:SetColour(c)\r\n                c:delete()\r\n            end",
    "type": "function"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "function(event)\r\n            local dc = wx.wxClientDC(colourWin)\r\n            dc:DrawBitmap(colourWinBmp, 0, 0, false) -- this is our background\r\n            dc:delete()\r\n        end",
    "type": "function"
  }, {
    "id": 317,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 318,
    "text": "function(event)\r\n            local x, y = event:GetPositionXY()\r\n            local w, h = colourWin:GetClientSizeWH()\r\n            local i = math.floor(8*x/w)+1 + 8*math.floor(2*y/h)\r\n            if colourWinColours[i] then\r\n                local c = wx.wxColour(colourWinColours[i])\r\n                currentPen:SetColour(c)\r\n                colourPicker:SetColour(c)\r\n                c:delete()\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 319,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 320,
    "text": "function(event)\r\n            local x, y = event:GetPositionXY()\r\n            local w, h = colourWin:GetClientSizeWH()\r\n            local i = math.floor(8*x/w)+1 + 8*math.floor(2*y/h)\r\n            if colourWinColours[i] then\r\n                local s = \"Set pen color : \"..colourWinColours[i]\r\n                if colourWin:GetToolTip() ~= s then\r\n                    colourWin:SetToolTip(s)\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function(event) end",
    "type": "function"
  }, {
    "id": 323,
    "text": "function (event)\r\n                if isModified and (QuerySaveChanges() == wx.wxID_CANCEL) then\r\n                    return\r\n                end\r\n\r\n                local bmp_changed = SetBitmapSize()\r\n\r\n                if bmp_changed then\r\n                    fileName = \"\"\r\n                    frame:SetTitle(\"wxLua Scribble\")\r\n                    pointsList = {}\r\n                    lastDrawn = 0\r\n                    redrawRequired = true\r\n                    isModified = false\r\n                    panel:Refresh()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 324,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 325,
    "text": "function (event)\r\n                if isModified and (QuerySaveChanges() == wx.wxID_CANCEL) then\r\n                    return\r\n                end\r\n\r\n                if Open() then\r\n                    isModified = false\r\n                end\r\n                redrawRequired = true\r\n                panel:Refresh()\r\n            end",
    "type": "function"
  }, {
    "id": 326,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 327,
    "text": "function (event)\r\n                local saved = false\r\n                if fileName == \"\" then\r\n                    saved = SaveAs()\r\n                else\r\n                    saved = SaveScribbles()\r\n                end\r\n                if saved then\r\n                    isModified = false\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 328,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 329,
    "text": "function (event)\r\n                if SaveAs() then\r\n                    isModified = false\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 330,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 331,
    "text": "function (event)\r\n                local fileDialog = wx.wxFileDialog(frame,\r\n                                       \"Save wxLua scribble file as\",\r\n                                       \"\",\r\n                                       \"\",\r\n                                       \"PNG (*.png)|*.png|PCX (*.pcx)|*.pcx|Bitmap (*.bmp)|*.bmp|Jpeg (*.jpg,*.jpeg)|*.jpg,*.jpeg|Tiff (*.tif,*.tiff)|*.tif,*.tiff\",\r\n                                       wx.wxSAVE + wx.wxOVERWRITE_PROMPT)\r\n                if fileDialog:ShowModal() == wx.wxID_OK then\r\n                    local bmp = GetBitmap()\r\n                    local img = bmp:ConvertToImage()\r\n                    if not img:SaveFile(fileDialog:GetPath()) then\r\n                        wx.wxMessageBox(\"There was a problem saving the image file\\n\"..fileDialog:GetPath(),\r\n                                        \"Error saving image\",\r\n                                        wx.wxOK + wx.wxICON_ERROR,\r\n                                        frame )\r\n                    end\r\n\r\n                    bmp:delete()\r\n                    img:delete()\r\n                end\r\n\r\n                fileDialog:Destroy()\r\n            end",
    "type": "function"
  }, {
    "id": 332,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 333,
    "text": "function (event)\r\n                frame:Close(true)\r\n            end",
    "type": "function"
  }, {
    "id": 334,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 335,
    "text": "function (event)\r\n                local bmp_changed = SetBitmapSize()\r\n                lastDrawn = 0\r\n                redrawRequired = true\r\n                panel:Refresh()\r\n            end",
    "type": "function"
  }, {
    "id": 336,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 337,
    "text": "function (event)\r\n                local oldColour = currentPen:GetColour()\r\n                local c = wx.wxGetColourFromUser(frame, oldColour,\r\n                                                 \"wxLua Scribble\")\r\n                oldColour:delete()\r\n                if c:Ok() then -- returns invalid colour if canceled\r\n                    currentPen:SetColour(c)\r\n                    colourPicker:SetColour(c)\r\n                end\r\n                c:delete()\r\n            end",
    "type": "function"
  }, {
    "id": 338,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 339,
    "text": "function (event)\r\n                local ret = wx.wxGetNumberFromUser(\"Select pen width in pixels\", \"Width\", \"wxLua Scribble\",\r\n                                                    currentPen:GetWidth(), 1, 100, frame)\r\n                if ret > 0 then -- returns -1 if canceled\r\n                    currentPen:SetWidth(ret)\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 340,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 341,
    "text": "function (event)\r\n                currentPen:SetWidth(event:GetInt())\r\n            end",
    "type": "function"
  }, {
    "id": 342,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 343,
    "text": "function (event)\r\n                local ret = wx.wxGetSingleChoice(\"Select pen style\", \"wxLua Scribble\",\r\n                                                 penStyleNames,\r\n                                                 frame)\r\n                for n = 1, #penStyleNames do\r\n                    if penStyleNames[n] == ret then\r\n                        currentPen:SetStyle(penStyles[n])\r\n                        break\r\n                    end\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 344,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 345,
    "text": "function (event)\r\n                local clipBoard = wx.wxClipboard.Get()\r\n                if clipBoard and clipBoard:Open() then\r\n                    local bmp = GetBitmap()\r\n                    clipBoard:SetData(wx.wxBitmapDataObject(bmp))\r\n                    bmp:delete()\r\n\r\n                    clipBoard:Close()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 346,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 347,
    "text": "function (event)\r\n                if #pointsList then\r\n                    pointsList[#pointsList] = nil\r\n                    lastDrawn = 0\r\n                    redrawRequired = true\r\n                    panel:Refresh()\r\n                end\r\n\r\n                if #pointsList == 0 then\r\n                    isModified = false\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 348,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 349,
    "text": "function (event)\r\n                wx.wxMessageBox('This is the \"About\" dialog of the Scribble wxLua Sample.\\n'..\r\n                                wxlua.wxLUA_VERSION_STRING..\" built with \"..wx.wxVERSION_STRING,\r\n                                \"About wxLua Scribble\",\r\n                                wx.wxOK + wx.wxICON_INFORMATION,\r\n                                frame )\r\n            end",
    "type": "function"
  }, {
    "id": 350,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 351,
    "text": "function (event)\r\n                local isOkToClose = true\r\n                if isModified then\r\n                    local dialog = wx.wxMessageDialog( frame,\r\n                                                       \"Save changes before exiting?\",\r\n                                                       \"Save Changes?\",\r\n                                                       wx.wxYES_NO + wx.wxCANCEL + wx.wxCENTRE + wx.wxICON_QUESTION )\r\n                    local result = dialog:ShowModal()\r\n                    dialog:Destroy()\r\n                    if result == wx.wxID_CANCEL then\r\n                        return\r\n                    elseif result == wx.wxID_YES then\r\n                        isOkToClose  = SaveChanges()\r\n                    end\r\n                end\r\n                if isOkToClose then\r\n                    -- prevent paint events using the memDC during closing\r\n                    bitmap:delete()\r\n                    bitmap = nil\r\n                    -- ensure the event is skipped to allow the frame to close\r\n                    event:Skip()\r\n                end\r\n            end",
    "type": "function"
  }, {
    "id": 352,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 353,
    "text": "",
    "type": "function container"
  }, {
    "id": 354,
    "text": "wxClipboard.Get",
    "type": "global function"
  }, {
    "id": 355,
    "text": "wxMenuBar",
    "type": "global function"
  }, {
    "id": 356,
    "text": "wxSpinCtrl",
    "type": "global function"
  }, {
    "id": 357,
    "text": "wxBitmapDataObject",
    "type": "global function"
  }, {
    "id": 358,
    "text": "wxMessageBox",
    "type": "global function"
  }, {
    "id": 359,
    "text": "wxSize",
    "type": "global function"
  }, {
    "id": 360,
    "text": "wxControl",
    "type": "global function"
  }, {
    "id": 361,
    "text": "wxGetApp",
    "type": "global function"
  }, {
    "id": 362,
    "text": "wxBrush",
    "type": "global function"
  }, {
    "id": 363,
    "text": "wxPen",
    "type": "global function"
  }, {
    "id": 364,
    "text": "wxFileDialog",
    "type": "global function"
  }, {
    "id": 365,
    "text": "wxColour",
    "type": "global function"
  }, {
    "id": 366,
    "text": "wxMenu",
    "type": "global function"
  }, {
    "id": 367,
    "text": "wxGetSingleChoice",
    "type": "global function"
  }, {
    "id": 368,
    "text": "wxBitmap",
    "type": "global function"
  }, {
    "id": 369,
    "text": "wxColourPickerCtrl",
    "type": "global function"
  }, {
    "id": 370,
    "text": "wxMemoryDC",
    "type": "global function"
  }, {
    "id": 371,
    "text": "wxClientDC",
    "type": "global function"
  }, {
    "id": 372,
    "text": "wxFrame",
    "type": "global function"
  }, {
    "id": 373,
    "text": "wxScrolledWindow",
    "type": "global function"
  }, {
    "id": 374,
    "text": "wxGetColourFromUser",
    "type": "global function"
  }, {
    "id": 375,
    "text": "wxPanel",
    "type": "global function"
  }, {
    "id": 376,
    "text": "wxGetTextFromUser",
    "type": "global function"
  }, {
    "id": 377,
    "text": "wxDisplaySize",
    "type": "global function"
  }, {
    "id": 378,
    "text": "wxGetNumberFromUser",
    "type": "global function"
  }, {
    "id": 379,
    "text": "wxArtProvider.GetBitmap",
    "type": "global function"
  }, {
    "id": 380,
    "text": "wxPaintDC",
    "type": "global function"
  }, {
    "id": 381,
    "text": "wxMessageDialog",
    "type": "global function"
  }, {
    "id": 382,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 383,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 384,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 385,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 386,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 387,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 388,
    "text": "match",
    "type": "global function"
  }, {
    "id": 389,
    "text": "format",
    "type": "global function"
  }, {
    "id": 390,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 391,
    "text": "format",
    "type": "global function"
  }, {
    "id": 392,
    "text": "type",
    "type": "global function"
  }, {
    "id": 393,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 394,
    "text": "open",
    "type": "global function"
  }, {
    "id": 395,
    "text": "require",
    "type": "global function"
  }, {
    "id": 396,
    "text": "",
    "type": "global variable"
  }, {
    "id": 397,
    "text": "",
    "type": "variable container"
  }, {
    "id": 398,
    "text": "",
    "type": "require container"
  }, {
    "id": 399,
    "text": "",
    "type": "global variable"
  }, {
    "id": 400,
    "text": "",
    "type": "n/a"
  }, {
    "id": 401,
    "text": "",
    "type": "global variable"
  }, {
    "id": 402,
    "text": "",
    "type": "global variable"
  }, {
    "id": 403,
    "text": "",
    "type": "global variable"
  }, {
    "id": 404,
    "text": "",
    "type": "global variable"
  }, {
    "id": 405,
    "text": "",
    "type": "global variable"
  }, {
    "id": 406,
    "text": "",
    "type": "n/a"
  }, {
    "id": 407,
    "text": "",
    "type": "global variable"
  }, {
    "id": 408,
    "text": "",
    "type": "global variable"
  }, {
    "id": 409,
    "text": "",
    "type": "global variable"
  }, {
    "id": 410,
    "text": "",
    "type": "global variable"
  }, {
    "id": 411,
    "text": "",
    "type": "global variable"
  }, {
    "id": 412,
    "text": "",
    "type": "n/a"
  }, {
    "id": 413,
    "text": "",
    "type": "global variable"
  }, {
    "id": 414,
    "text": "",
    "type": "n/a"
  }, {
    "id": 415,
    "text": "",
    "type": "global variable"
  }, {
    "id": 416,
    "text": "",
    "type": "n/a"
  }, {
    "id": 417,
    "text": "",
    "type": "global variable"
  }, {
    "id": 418,
    "text": "",
    "type": "n/a"
  }, {
    "id": 419,
    "text": "",
    "type": "global variable"
  }, {
    "id": 420,
    "text": "",
    "type": "n/a"
  }, {
    "id": 421,
    "text": "",
    "type": "global variable"
  }, {
    "id": 422,
    "text": "",
    "type": "n/a"
  }, {
    "id": 423,
    "text": "",
    "type": "global variable"
  }, {
    "id": 424,
    "text": "",
    "type": "n/a"
  }, {
    "id": 425,
    "text": "",
    "type": "global variable"
  }, {
    "id": 426,
    "text": "",
    "type": "n/a"
  }, {
    "id": 427,
    "text": "",
    "type": "global variable"
  }, {
    "id": 428,
    "text": "",
    "type": "n/a"
  }, {
    "id": 429,
    "text": "",
    "type": "global variable"
  }, {
    "id": 430,
    "text": "",
    "type": "n/a"
  }, {
    "id": 431,
    "text": "",
    "type": "global variable"
  }, {
    "id": 432,
    "text": "",
    "type": "global variable"
  }, {
    "id": 433,
    "text": "",
    "type": "n/a"
  } ]
}