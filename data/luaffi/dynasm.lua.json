{
  "_filename": "dynasm.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaffi/dynasm/dynasm.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 43
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 43
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 70
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 43
  }, {
    "from": 77,
    "label": "has",
    "to": 43
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 82,
    "label": "has",
    "to": 43
  }, {
    "from": 82,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 90,
    "label": "has",
    "to": 101
  }, {
    "from": 90,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 43
  }, {
    "from": 103,
    "label": "has",
    "to": 43
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 109,
    "label": "has",
    "to": 43
  }, {
    "from": 109,
    "label": "has",
    "to": 43
  }, {
    "from": 109,
    "label": "has",
    "to": 116
  }, {
    "from": 109,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 118,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 122
  }, {
    "from": 130,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 43
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 132,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 133
  }, {
    "from": 141,
    "label": "has",
    "to": 43
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 141,
    "label": "has",
    "to": 145
  }, {
    "from": 141,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 137
  }, {
    "from": 141,
    "label": "has",
    "to": 43
  }, {
    "from": 141,
    "label": "has",
    "to": 139
  }, {
    "from": 141,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 144
  }, {
    "from": 152,
    "label": "has",
    "to": 145
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 139
  }, {
    "from": 152,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 144
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 160,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 171,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 169,
    "label": "has",
    "to": 43
  }, {
    "from": 169,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 43
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 177,
    "label": "has",
    "to": 181
  }, {
    "from": 177,
    "label": "has",
    "to": 182
  }, {
    "from": 177,
    "label": "has",
    "to": 183
  }, {
    "from": 177,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 177,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 43
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 187,
    "label": "has",
    "to": 192
  }, {
    "from": 187,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 187,
    "label": "has",
    "to": 195
  }, {
    "from": 187,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 187,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 199,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 187,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 187,
    "label": "has",
    "to": 210
  }, {
    "from": 187,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 43
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 212,
    "label": "has",
    "to": 216
  }, {
    "from": 212,
    "label": "has",
    "to": 217
  }, {
    "from": 212,
    "label": "has",
    "to": 218
  }, {
    "from": 212,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 188
  }, {
    "from": 219,
    "label": "has",
    "to": 43
  }, {
    "from": 219,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 219,
    "label": "has",
    "to": 191
  }, {
    "from": 219,
    "label": "has",
    "to": 192
  }, {
    "from": 219,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 219,
    "label": "has",
    "to": 195
  }, {
    "from": 219,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 219,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 199,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 219,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 219,
    "label": "has",
    "to": 210
  }, {
    "from": 212,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 43
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 221,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 221,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 221,
    "label": "has",
    "to": 228
  }, {
    "from": 221,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 229,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 229,
    "label": "has",
    "to": 234
  }, {
    "from": 221,
    "label": "has",
    "to": 235
  }, {
    "from": 221,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 221,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 221,
    "label": "has",
    "to": 240
  }, {
    "from": 221,
    "label": "has",
    "to": 241
  }, {
    "from": 221,
    "label": "has",
    "to": 242
  }, {
    "from": 221,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 243,
    "label": "has",
    "to": 43
  }, {
    "from": 243,
    "label": "has",
    "to": 215
  }, {
    "from": 243,
    "label": "has",
    "to": 216
  }, {
    "from": 243,
    "label": "has",
    "to": 217
  }, {
    "from": 243,
    "label": "has",
    "to": 218
  }, {
    "from": 243,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 188
  }, {
    "from": 219,
    "label": "has",
    "to": 43
  }, {
    "from": 219,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 219,
    "label": "has",
    "to": 191
  }, {
    "from": 219,
    "label": "has",
    "to": 192
  }, {
    "from": 219,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 219,
    "label": "has",
    "to": 195
  }, {
    "from": 219,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 219,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 199,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 219,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 219,
    "label": "has",
    "to": 210
  }, {
    "from": 221,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 245,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 248,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 251,
    "label": "has",
    "to": 254
  }, {
    "from": 251,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 255,
    "label": "has",
    "to": 101
  }, {
    "from": 248,
    "label": "has",
    "to": 101
  }, {
    "from": 248,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 43
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 263,
    "label": "has",
    "to": 179
  }, {
    "from": 263,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 263,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 263,
    "label": "has",
    "to": 270
  }, {
    "from": 263,
    "label": "has",
    "to": 271
  }, {
    "from": 263,
    "label": "has",
    "to": 272
  }, {
    "from": 263,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 263,
    "label": "has",
    "to": 276
  }, {
    "from": 263,
    "label": "has",
    "to": 277
  }, {
    "from": 263,
    "label": "has",
    "to": 278
  }, {
    "from": 279,
    "label": "has",
    "to": 265
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 279,
    "label": "has",
    "to": 282
  }, {
    "from": 279,
    "label": "has",
    "to": 283
  }, {
    "from": 279,
    "label": "has",
    "to": 284
  }, {
    "from": 279,
    "label": "has",
    "to": 277
  }, {
    "from": 279,
    "label": "has",
    "to": 285
  }, {
    "from": 286,
    "label": "has",
    "to": 264
  }, {
    "from": 286,
    "label": "has",
    "to": 43
  }, {
    "from": 286,
    "label": "has",
    "to": 265
  }, {
    "from": 286,
    "label": "has",
    "to": 179
  }, {
    "from": 286,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 286,
    "label": "has",
    "to": 288
  }, {
    "from": 288,
    "label": "has",
    "to": 272
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 286,
    "label": "has",
    "to": 277
  }, {
    "from": 286,
    "label": "has",
    "to": 291
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 292,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 294,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 296,
    "label": "has",
    "to": 298
  }, {
    "from": 296,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 296,
    "label": "has",
    "to": 301
  }, {
    "from": 292,
    "label": "has",
    "to": 101
  }, {
    "from": 292,
    "label": "has",
    "to": 302
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 304,
    "label": "has",
    "to": 305
  }, {
    "from": 303,
    "label": "has",
    "to": 43
  }, {
    "from": 303,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 303,
    "label": "has",
    "to": 309
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 312,
    "label": "has",
    "to": 43
  }, {
    "from": 312,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 312,
    "label": "has",
    "to": 265
  }, {
    "from": 312,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 316,
    "label": "has",
    "to": 320
  }, {
    "from": 316,
    "label": "has",
    "to": 321
  }, {
    "from": 316,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 323
  }, {
    "from": 312,
    "label": "has",
    "to": 324
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 325,
    "label": "has",
    "to": 101
  }, {
    "from": 325,
    "label": "has",
    "to": 329
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 43
  }, {
    "from": 330,
    "label": "has",
    "to": 332
  }, {
    "from": 330,
    "label": "has",
    "to": 333
  }, {
    "from": 330,
    "label": "has",
    "to": 43
  }, {
    "from": 330,
    "label": "has",
    "to": 334
  }, {
    "from": 330,
    "label": "has",
    "to": 335
  }, {
    "from": 330,
    "label": "has",
    "to": 336
  }, {
    "from": 330,
    "label": "has",
    "to": 337
  }, {
    "from": 330,
    "label": "has",
    "to": 338
  }, {
    "from": 339,
    "label": "has",
    "to": 73
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 342
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 339,
    "label": "has",
    "to": 91
  }, {
    "from": 339,
    "label": "has",
    "to": 344
  }, {
    "from": 344,
    "label": "has",
    "to": 93
  }, {
    "from": 339,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 93
  }, {
    "from": 339,
    "label": "has",
    "to": 94
  }, {
    "from": 339,
    "label": "has",
    "to": 346
  }, {
    "from": 339,
    "label": "has",
    "to": 347
  }, {
    "from": 339,
    "label": "has",
    "to": 348
  }, {
    "from": 339,
    "label": "has",
    "to": 349
  }, {
    "from": 339,
    "label": "has",
    "to": 350
  }, {
    "from": 339,
    "label": "has",
    "to": 351
  }, {
    "from": 339,
    "label": "has",
    "to": 352
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 352,
    "label": "has",
    "to": 354
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 355,
    "label": "has",
    "to": 357
  }, {
    "from": 354,
    "label": "has",
    "to": 358
  }, {
    "from": 354,
    "label": "has",
    "to": 359
  }, {
    "from": 354,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 354,
    "label": "has",
    "to": 362
  }, {
    "from": 362,
    "label": "has",
    "to": 363
  }, {
    "from": 362,
    "label": "has",
    "to": 364
  }, {
    "from": 362,
    "label": "has",
    "to": 365
  }, {
    "from": 354,
    "label": "has",
    "to": 366
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 366,
    "label": "has",
    "to": 369
  }, {
    "from": 339,
    "label": "has",
    "to": 101
  }, {
    "from": 339,
    "label": "has",
    "to": 370
  }, {
    "from": 339,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 264
  }, {
    "from": 372,
    "label": "has",
    "to": 43
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 372,
    "label": "has",
    "to": 376
  }, {
    "from": 377,
    "label": "has",
    "to": 264
  }, {
    "from": 377,
    "label": "has",
    "to": 43
  }, {
    "from": 377,
    "label": "has",
    "to": 378
  }, {
    "from": 377,
    "label": "has",
    "to": 379
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 380,
    "label": "has",
    "to": 43
  }, {
    "from": 380,
    "label": "has",
    "to": 382
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 383,
    "label": "has",
    "to": 43
  }, {
    "from": 383,
    "label": "has",
    "to": 385
  }, {
    "from": 383,
    "label": "has",
    "to": 386
  }, {
    "from": 387,
    "label": "has",
    "to": 384
  }, {
    "from": 387,
    "label": "has",
    "to": 43
  }, {
    "from": 387,
    "label": "has",
    "to": 388
  }, {
    "from": 387,
    "label": "has",
    "to": 389
  }, {
    "from": 390,
    "label": "has",
    "to": 391
  }, {
    "from": 390,
    "label": "has",
    "to": 392
  }, {
    "from": 390,
    "label": "has",
    "to": 43
  }, {
    "from": 390,
    "label": "has",
    "to": 393
  }, {
    "from": 390,
    "label": "has",
    "to": 394
  }, {
    "from": 390,
    "label": "has",
    "to": 395
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 390,
    "label": "has",
    "to": 397
  }, {
    "from": 390,
    "label": "has",
    "to": 398
  }, {
    "from": 390,
    "label": "has",
    "to": 399
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 401,
    "label": "has",
    "to": 403
  }, {
    "from": 401,
    "label": "has",
    "to": 404
  }, {
    "from": 401,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 401,
    "label": "has",
    "to": 407
  }, {
    "from": 400,
    "label": "has",
    "to": 43
  }, {
    "from": 400,
    "label": "has",
    "to": 43
  }, {
    "from": 400,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 409,
    "label": "has",
    "to": 411
  }, {
    "from": 409,
    "label": "has",
    "to": 43
  }, {
    "from": 409,
    "label": "has",
    "to": 412
  }, {
    "from": 409,
    "label": "has",
    "to": 413
  }, {
    "from": 409,
    "label": "has",
    "to": 414
  }, {
    "from": 414,
    "label": "has",
    "to": 415
  }, {
    "from": 409,
    "label": "has",
    "to": 416
  }, {
    "from": 409,
    "label": "has",
    "to": 417
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 409,
    "label": "has",
    "to": 419
  }, {
    "from": 409,
    "label": "has",
    "to": 420
  }, {
    "from": 420,
    "label": "has",
    "to": 421
  }, {
    "from": 409,
    "label": "has",
    "to": 422
  }, {
    "from": 422,
    "label": "has",
    "to": 423
  }, {
    "from": 409,
    "label": "has",
    "to": 424
  }, {
    "from": 409,
    "label": "has",
    "to": 43
  }, {
    "from": 409,
    "label": "has",
    "to": 425
  }, {
    "from": 426,
    "label": "has",
    "to": 427
  }, {
    "from": 426,
    "label": "has",
    "to": 43
  }, {
    "from": 426,
    "label": "has",
    "to": 428
  }, {
    "from": 426,
    "label": "has",
    "to": 43
  }, {
    "from": 426,
    "label": "has",
    "to": 429
  }, {
    "from": 426,
    "label": "has",
    "to": 430
  }, {
    "from": 430,
    "label": "has",
    "to": 431
  }, {
    "from": 430,
    "label": "has",
    "to": 265
  }, {
    "from": 430,
    "label": "has",
    "to": 432
  }, {
    "from": 432,
    "label": "has",
    "to": 433
  }, {
    "from": 432,
    "label": "has",
    "to": 434
  }, {
    "from": 426,
    "label": "has",
    "to": 43
  }, {
    "from": 426,
    "label": "has",
    "to": 435
  }, {
    "from": 426,
    "label": "has",
    "to": 436
  }, {
    "from": 426,
    "label": "has",
    "to": 437
  }, {
    "from": 437,
    "label": "has",
    "to": 438
  }, {
    "from": 438,
    "label": "has",
    "to": 439
  }, {
    "from": 437,
    "label": "has",
    "to": 440
  }, {
    "from": 440,
    "label": "has",
    "to": 441
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 437,
    "label": "has",
    "to": 443
  }, {
    "from": 426,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 445
  }, {
    "from": 444,
    "label": "has",
    "to": 446
  }, {
    "from": 426,
    "label": "has",
    "to": 447
  }, {
    "from": 448,
    "label": "has",
    "to": 449
  }, {
    "from": 449,
    "label": "has",
    "to": 265
  }, {
    "from": 448,
    "label": "has",
    "to": 450
  }, {
    "from": 448,
    "label": "has",
    "to": 451
  }, {
    "from": 451,
    "label": "has",
    "to": 265
  }, {
    "from": 451,
    "label": "has",
    "to": 452
  }, {
    "from": 451,
    "label": "has",
    "to": 453
  }, {
    "from": 448,
    "label": "has",
    "to": 43
  }, {
    "from": 448,
    "label": "has",
    "to": 454
  }, {
    "from": 448,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 456,
    "label": "has",
    "to": 452
  }, {
    "from": 456,
    "label": "has",
    "to": 452
  }, {
    "from": 456,
    "label": "has",
    "to": 457
  }, {
    "from": 455,
    "label": "has",
    "to": 458
  }, {
    "from": 448,
    "label": "has",
    "to": 43
  }, {
    "from": 448,
    "label": "has",
    "to": 459
  }, {
    "from": 459,
    "label": "has",
    "to": 452
  }, {
    "from": 459,
    "label": "has",
    "to": 457
  }, {
    "from": 448,
    "label": "has",
    "to": 460
  }, {
    "from": 448,
    "label": "has",
    "to": 461
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 462,
    "label": "has",
    "to": 128
  }, {
    "from": 461,
    "label": "has",
    "to": 458
  }, {
    "from": 448,
    "label": "has",
    "to": 463
  }, {
    "from": 464,
    "label": "has",
    "to": 465
  }, {
    "from": 464,
    "label": "has",
    "to": 466
  }, {
    "from": 467,
    "label": "has",
    "to": 468
  }, {
    "from": 467,
    "label": "has",
    "to": 469
  }, {
    "from": 467,
    "label": "has",
    "to": 182
  }, {
    "from": 467,
    "label": "has",
    "to": 470
  }, {
    "from": 470,
    "label": "has",
    "to": 471
  }, {
    "from": 470,
    "label": "has",
    "to": 472
  }, {
    "from": 470,
    "label": "has",
    "to": 473
  }, {
    "from": 470,
    "label": "has",
    "to": 474
  }, {
    "from": 467,
    "label": "has",
    "to": 43
  }, {
    "from": 467,
    "label": "has",
    "to": 265
  }, {
    "from": 467,
    "label": "has",
    "to": 475
  }, {
    "from": 467,
    "label": "has",
    "to": 476
  }, {
    "from": 477,
    "label": "has",
    "to": 478
  }, {
    "from": 477,
    "label": "has",
    "to": 479
  }, {
    "from": 479,
    "label": "has",
    "to": 480
  }, {
    "from": 479,
    "label": "has",
    "to": 481
  }, {
    "from": 477,
    "label": "has",
    "to": 482
  }, {
    "from": 477,
    "label": "has",
    "to": 483
  }, {
    "from": 477,
    "label": "has",
    "to": 484
  }, {
    "from": 477,
    "label": "has",
    "to": 485
  }, {
    "from": 486,
    "label": "has",
    "to": 487
  }, {
    "from": 486,
    "label": "has",
    "to": 468
  }, {
    "from": 486,
    "label": "has",
    "to": 469
  }, {
    "from": 486,
    "label": "has",
    "to": 182
  }, {
    "from": 486,
    "label": "has",
    "to": 488
  }, {
    "from": 486,
    "label": "has",
    "to": 489
  }, {
    "from": 486,
    "label": "has",
    "to": 490
  }, {
    "from": 490,
    "label": "has",
    "to": 491
  }, {
    "from": 490,
    "label": "has",
    "to": 492
  }, {
    "from": 490,
    "label": "has",
    "to": 493
  }, {
    "from": 490,
    "label": "has",
    "to": 494
  }, {
    "from": 486,
    "label": "has",
    "to": 495
  }, {
    "from": 486,
    "label": "has",
    "to": 496
  }, {
    "from": 496,
    "label": "has",
    "to": 497
  }, {
    "from": 486,
    "label": "has",
    "to": 498
  }, {
    "from": 486,
    "label": "has",
    "to": 499
  }, {
    "from": 486,
    "label": "has",
    "to": 500
  }, {
    "from": 486,
    "label": "has",
    "to": 501
  }, {
    "from": 501,
    "label": "has",
    "to": 502
  }, {
    "from": 501,
    "label": "has",
    "to": 503
  }, {
    "from": 501,
    "label": "has",
    "to": 48
  }, {
    "from": 486,
    "label": "has",
    "to": 504
  }, {
    "from": 486,
    "label": "has",
    "to": 505
  }, {
    "from": 506,
    "label": "has",
    "to": 507
  }, {
    "from": 506,
    "label": "has",
    "to": 508
  }, {
    "from": 506,
    "label": "has",
    "to": 509
  }, {
    "from": 506,
    "label": "has",
    "to": 370
  }, {
    "from": 506,
    "label": "has",
    "to": 510
  }, {
    "from": 511,
    "label": "has",
    "to": 512
  }, {
    "from": 511,
    "label": "has",
    "to": 370
  }, {
    "from": 511,
    "label": "has",
    "to": 513
  }, {
    "from": 514,
    "label": "has",
    "to": 515
  }, {
    "from": 516,
    "label": "has",
    "to": 517
  }, {
    "from": 518,
    "label": "has",
    "to": 519
  }, {
    "from": 518,
    "label": "has",
    "to": 520
  }, {
    "from": 521,
    "label": "has",
    "to": 522
  }, {
    "from": 521,
    "label": "has",
    "to": 523
  }, {
    "from": 524,
    "label": "has",
    "to": 525
  }, {
    "from": 526,
    "label": "has",
    "to": 527
  }, {
    "from": 528,
    "label": "has",
    "to": 529
  }, {
    "from": 530,
    "label": "has",
    "to": 531
  }, {
    "from": 532,
    "label": "has",
    "to": 533
  }, {
    "from": 534,
    "label": "has",
    "to": 535
  }, {
    "from": 536,
    "label": "has",
    "to": 537
  }, {
    "from": 536,
    "label": "has",
    "to": 538
  }, {
    "from": 536,
    "label": "has",
    "to": 539
  }, {
    "from": 539,
    "label": "has",
    "to": 540
  }, {
    "from": 536,
    "label": "has",
    "to": 541
  }, {
    "from": 536,
    "label": "has",
    "to": 542
  }, {
    "from": 543,
    "label": "has",
    "to": 522
  }, {
    "from": 543,
    "label": "has",
    "to": 523
  }, {
    "from": 543,
    "label": "has",
    "to": 544
  }, {
    "from": 543,
    "label": "has",
    "to": 545
  }, {
    "from": 543,
    "label": "has",
    "to": 546
  }, {
    "from": 543,
    "label": "has",
    "to": 547
  }, {
    "from": 543,
    "label": "has",
    "to": 548
  }, {
    "from": 548,
    "label": "has",
    "to": 549
  }, {
    "from": 548,
    "label": "has",
    "to": 550
  }, {
    "from": 548,
    "label": "has",
    "to": 551
  }, {
    "from": 548,
    "label": "has",
    "to": 552
  }, {
    "from": 548,
    "label": "has",
    "to": 553
  }, {
    "from": 548,
    "label": "has",
    "to": 554
  }, {
    "from": 554,
    "label": "has",
    "to": 555
  }, {
    "from": 555,
    "label": "has",
    "to": 556
  }, {
    "from": 554,
    "label": "has",
    "to": 557
  }, {
    "from": 543,
    "label": "has",
    "to": 558
  }, {
    "from": 543,
    "label": "has",
    "to": 559
  }, {
    "from": 559,
    "label": "has",
    "to": 560
  }, {
    "from": 560,
    "label": "has",
    "to": 561
  }, {
    "from": 559,
    "label": "has",
    "to": 562
  }, {
    "from": 543,
    "label": "has",
    "to": 43
  }, {
    "from": 543,
    "label": "has",
    "to": 563
  }, {
    "from": 543,
    "label": "has",
    "to": 564
  }, {
    "from": 565,
    "label": "has",
    "to": 272
  }, {
    "from": 565,
    "label": "has",
    "to": 289
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 565,
    "label": "has",
    "to": 566
  }, {
    "from": 19,
    "label": "calls",
    "to": 568
  }, {
    "from": 567,
    "label": "calls",
    "to": 568
  }, {
    "from": 477,
    "label": "calls",
    "to": 568
  }, {
    "from": 477,
    "label": "calls",
    "to": 568
  }, {
    "from": 486,
    "label": "calls",
    "to": 568
  }, {
    "from": 30,
    "label": "calls",
    "to": 25
  }, {
    "from": 567,
    "label": "calls",
    "to": 25
  }, {
    "from": 567,
    "label": "calls",
    "to": 25
  }, {
    "from": 567,
    "label": "calls",
    "to": 25
  }, {
    "from": 567,
    "label": "calls",
    "to": 25
  }, {
    "from": 567,
    "label": "calls",
    "to": 25
  }, {
    "from": 400,
    "label": "calls",
    "to": 25
  }, {
    "from": 409,
    "label": "calls",
    "to": 25
  }, {
    "from": 409,
    "label": "calls",
    "to": 25
  }, {
    "from": 409,
    "label": "calls",
    "to": 25
  }, {
    "from": 567,
    "label": "calls",
    "to": 25
  }, {
    "from": 567,
    "label": "calls",
    "to": 25
  }, {
    "from": 90,
    "label": "calls",
    "to": 569
  }, {
    "from": 448,
    "label": "calls",
    "to": 12
  }, {
    "from": 448,
    "label": "calls",
    "to": 12
  }, {
    "from": 448,
    "label": "calls",
    "to": 12
  }, {
    "from": 448,
    "label": "calls",
    "to": 12
  }, {
    "from": 19,
    "label": "calls",
    "to": 597
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 64,
    "label": "calls",
    "to": 570
  }, {
    "from": 64,
    "label": "calls",
    "to": 570
  }, {
    "from": 72,
    "label": "calls",
    "to": 570
  }, {
    "from": 118,
    "label": "calls",
    "to": 570
  }, {
    "from": 169,
    "label": "calls",
    "to": 570
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 330,
    "label": "calls",
    "to": 570
  }, {
    "from": 339,
    "label": "calls",
    "to": 570
  }, {
    "from": 409,
    "label": "calls",
    "to": 570
  }, {
    "from": 409,
    "label": "calls",
    "to": 570
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 448,
    "label": "calls",
    "to": 570
  }, {
    "from": 448,
    "label": "calls",
    "to": 570
  }, {
    "from": 543,
    "label": "calls",
    "to": 570
  }, {
    "from": 567,
    "label": "calls",
    "to": 570
  }, {
    "from": 339,
    "label": "calls",
    "to": 330
  }, {
    "from": 567,
    "label": "calls",
    "to": 330
  }, {
    "from": 390,
    "label": "calls",
    "to": 90
  }, {
    "from": 567,
    "label": "calls",
    "to": 543
  }, {
    "from": 19,
    "label": "calls",
    "to": 571
  }, {
    "from": 90,
    "label": "calls",
    "to": 571
  }, {
    "from": 169,
    "label": "calls",
    "to": 571
  }, {
    "from": 567,
    "label": "calls",
    "to": 571
  }, {
    "from": 567,
    "label": "calls",
    "to": 571
  }, {
    "from": 567,
    "label": "calls",
    "to": 571
  }, {
    "from": 248,
    "label": "calls",
    "to": 571
  }, {
    "from": 248,
    "label": "calls",
    "to": 571
  }, {
    "from": 292,
    "label": "calls",
    "to": 571
  }, {
    "from": 567,
    "label": "calls",
    "to": 571
  }, {
    "from": 325,
    "label": "calls",
    "to": 571
  }, {
    "from": 339,
    "label": "calls",
    "to": 571
  }, {
    "from": 339,
    "label": "calls",
    "to": 571
  }, {
    "from": 390,
    "label": "calls",
    "to": 572
  }, {
    "from": 543,
    "label": "calls",
    "to": 486
  }, {
    "from": 543,
    "label": "calls",
    "to": 506
  }, {
    "from": 330,
    "label": "calls",
    "to": 574
  }, {
    "from": 109,
    "label": "calls",
    "to": 575
  }, {
    "from": 567,
    "label": "calls",
    "to": 575
  }, {
    "from": 330,
    "label": "calls",
    "to": 575
  }, {
    "from": 567,
    "label": "calls",
    "to": 575
  }, {
    "from": 390,
    "label": "calls",
    "to": 325
  }, {
    "from": 390,
    "label": "calls",
    "to": 292
  }, {
    "from": 567,
    "label": "calls",
    "to": 577
  }, {
    "from": 567,
    "label": "calls",
    "to": 8
  }, {
    "from": 567,
    "label": "calls",
    "to": 8
  }, {
    "from": 567,
    "label": "calls",
    "to": 8
  }, {
    "from": 567,
    "label": "calls",
    "to": 8
  }, {
    "from": 448,
    "label": "calls",
    "to": 8
  }, {
    "from": 448,
    "label": "calls",
    "to": 8
  }, {
    "from": 516,
    "label": "calls",
    "to": 578
  }, {
    "from": 567,
    "label": "calls",
    "to": 17
  }, {
    "from": 567,
    "label": "calls",
    "to": 17
  }, {
    "from": 567,
    "label": "calls",
    "to": 17
  }, {
    "from": 567,
    "label": "calls",
    "to": 17
  }, {
    "from": 567,
    "label": "calls",
    "to": 17
  }, {
    "from": 448,
    "label": "calls",
    "to": 17
  }, {
    "from": 448,
    "label": "calls",
    "to": 17
  }, {
    "from": 567,
    "label": "calls",
    "to": 17
  }, {
    "from": 103,
    "label": "calls",
    "to": 580
  }, {
    "from": 486,
    "label": "calls",
    "to": 259
  }, {
    "from": 19,
    "label": "calls",
    "to": 581
  }, {
    "from": 37,
    "label": "calls",
    "to": 581
  }, {
    "from": 339,
    "label": "calls",
    "to": 581
  }, {
    "from": 339,
    "label": "calls",
    "to": 581
  }, {
    "from": 567,
    "label": "calls",
    "to": 581
  }, {
    "from": 486,
    "label": "calls",
    "to": 581
  }, {
    "from": 248,
    "label": "calls",
    "to": 582
  }, {
    "from": 25,
    "label": "calls",
    "to": 583
  }, {
    "from": 25,
    "label": "calls",
    "to": 583
  }, {
    "from": 34,
    "label": "calls",
    "to": 583
  }, {
    "from": 90,
    "label": "calls",
    "to": 583
  }, {
    "from": 248,
    "label": "calls",
    "to": 583
  }, {
    "from": 292,
    "label": "calls",
    "to": 583
  }, {
    "from": 567,
    "label": "calls",
    "to": 583
  }, {
    "from": 567,
    "label": "calls",
    "to": 583
  }, {
    "from": 325,
    "label": "calls",
    "to": 583
  }, {
    "from": 339,
    "label": "calls",
    "to": 583
  }, {
    "from": 339,
    "label": "calls",
    "to": 583
  }, {
    "from": 339,
    "label": "calls",
    "to": 583
  }, {
    "from": 464,
    "label": "calls",
    "to": 583
  }, {
    "from": 511,
    "label": "calls",
    "to": 583
  }, {
    "from": 486,
    "label": "calls",
    "to": 477
  }, {
    "from": 165,
    "label": "calls",
    "to": 37
  }, {
    "from": 567,
    "label": "calls",
    "to": 37
  }, {
    "from": 259,
    "label": "calls",
    "to": 37
  }, {
    "from": 303,
    "label": "calls",
    "to": 37
  }, {
    "from": 303,
    "label": "calls",
    "to": 37
  }, {
    "from": 567,
    "label": "calls",
    "to": 37
  }, {
    "from": 486,
    "label": "calls",
    "to": 37
  }, {
    "from": 390,
    "label": "calls",
    "to": 248
  }, {
    "from": 82,
    "label": "calls",
    "to": 585
  }, {
    "from": 567,
    "label": "calls",
    "to": 585
  }, {
    "from": 567,
    "label": "calls",
    "to": 585
  }, {
    "from": 409,
    "label": "calls",
    "to": 585
  }, {
    "from": 409,
    "label": "calls",
    "to": 585
  }, {
    "from": 448,
    "label": "calls",
    "to": 585
  }, {
    "from": 339,
    "label": "calls",
    "to": 586
  }, {
    "from": 82,
    "label": "calls",
    "to": 30
  }, {
    "from": 109,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 567,
    "label": "calls",
    "to": 30
  }, {
    "from": 477,
    "label": "calls",
    "to": 390
  }, {
    "from": 486,
    "label": "calls",
    "to": 390
  }, {
    "from": 543,
    "label": "calls",
    "to": 390
  }, {
    "from": 567,
    "label": "calls",
    "to": 118
  }, {
    "from": 567,
    "label": "calls",
    "to": 118
  }, {
    "from": 567,
    "label": "calls",
    "to": 118
  }, {
    "from": 409,
    "label": "calls",
    "to": 587
  }, {
    "from": 448,
    "label": "calls",
    "to": 587
  }, {
    "from": 543,
    "label": "calls",
    "to": 587
  }, {
    "from": 567,
    "label": "calls",
    "to": 212
  }, {
    "from": 103,
    "label": "calls",
    "to": 592
  }, {
    "from": 567,
    "label": "calls",
    "to": 409
  }, {
    "from": 339,
    "label": "calls",
    "to": 588
  }, {
    "from": 567,
    "label": "calls",
    "to": 588
  }, {
    "from": 536,
    "label": "calls",
    "to": 588
  }, {
    "from": 90,
    "label": "calls",
    "to": 589
  }, {
    "from": 292,
    "label": "calls",
    "to": 589
  }, {
    "from": 303,
    "label": "calls",
    "to": 589
  }, {
    "from": 339,
    "label": "calls",
    "to": 589
  }, {
    "from": 339,
    "label": "calls",
    "to": 589
  }, {
    "from": 118,
    "label": "calls",
    "to": 130
  }, {
    "from": 448,
    "label": "calls",
    "to": 130
  }, {
    "from": 448,
    "label": "calls",
    "to": 130
  }, {
    "from": 448,
    "label": "calls",
    "to": 130
  }, {
    "from": 292,
    "label": "calls",
    "to": 573
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 567,
    "label": "calls",
    "to": 3
  }, {
    "from": 567,
    "label": "calls",
    "to": 3
  }, {
    "from": 567,
    "label": "calls",
    "to": 3
  }, {
    "from": 567,
    "label": "calls",
    "to": 3
  }, {
    "from": 448,
    "label": "calls",
    "to": 3
  }, {
    "from": 486,
    "label": "calls",
    "to": 3
  }, {
    "from": 567,
    "label": "calls",
    "to": 19
  }, {
    "from": 477,
    "label": "calls",
    "to": 19
  }, {
    "from": 109,
    "label": "calls",
    "to": 103
  }, {
    "from": 567,
    "label": "calls",
    "to": 590
  }, {
    "from": 248,
    "label": "calls",
    "to": 590
  }, {
    "from": 339,
    "label": "calls",
    "to": 590
  }, {
    "from": 400,
    "label": "calls",
    "to": 590
  }, {
    "from": 400,
    "label": "calls",
    "to": 590
  }, {
    "from": 567,
    "label": "calls",
    "to": 590
  }, {
    "from": 567,
    "label": "calls",
    "to": 590
  }, {
    "from": 567,
    "label": "calls",
    "to": 590
  }, {
    "from": 448,
    "label": "calls",
    "to": 590
  }, {
    "from": 45,
    "label": "calls",
    "to": 591
  }, {
    "from": 339,
    "label": "calls",
    "to": 591
  }, {
    "from": 486,
    "label": "calls",
    "to": 591
  }, {
    "from": 506,
    "label": "calls",
    "to": 591
  }, {
    "from": 511,
    "label": "calls",
    "to": 591
  }, {
    "from": 50,
    "label": "calls",
    "to": 45
  }, {
    "from": 64,
    "label": "calls",
    "to": 45
  }, {
    "from": 72,
    "label": "calls",
    "to": 45
  }, {
    "from": 339,
    "label": "calls",
    "to": 45
  }, {
    "from": 536,
    "label": "calls",
    "to": 45
  }, {
    "from": 25,
    "label": "calls",
    "to": 595
  }, {
    "from": 25,
    "label": "calls",
    "to": 595
  }, {
    "from": 64,
    "label": "calls",
    "to": 50
  }, {
    "from": 72,
    "label": "calls",
    "to": 50
  }, {
    "from": 339,
    "label": "calls",
    "to": 50
  }, {
    "from": 514,
    "label": "calls",
    "to": 50
  }, {
    "from": 516,
    "label": "calls",
    "to": 50
  }, {
    "from": 90,
    "label": "calls",
    "to": 593
  }, {
    "from": 248,
    "label": "calls",
    "to": 593
  }, {
    "from": 339,
    "label": "calls",
    "to": 593
  }, {
    "from": 567,
    "label": "calls",
    "to": 109
  }, {
    "from": 567,
    "label": "calls",
    "to": 109
  }, {
    "from": 567,
    "label": "calls",
    "to": 599
  }, {
    "from": 543,
    "label": "calls",
    "to": 536
  }, {
    "from": 543,
    "label": "calls",
    "to": 536
  }, {
    "from": 169,
    "label": "calls",
    "to": 584
  }, {
    "from": 477,
    "label": "calls",
    "to": 584
  }, {
    "from": 486,
    "label": "calls",
    "to": 584
  }, {
    "from": 339,
    "label": "calls",
    "to": 596
  }, {
    "from": 567,
    "label": "calls",
    "to": 596
  }, {
    "from": 567,
    "label": "calls",
    "to": 467
  }, {
    "from": 486,
    "label": "calls",
    "to": 467
  }, {
    "from": 330,
    "label": "calls",
    "to": 598
  }, {
    "from": 103,
    "label": "calls",
    "to": 594
  }, {
    "from": 486,
    "label": "calls",
    "to": 303
  }, {
    "from": 486,
    "label": "calls",
    "to": 165
  }, {
    "from": 248,
    "label": "calls",
    "to": 187
  }, {
    "from": 567,
    "label": "calls",
    "to": 579
  }, {
    "from": 330,
    "label": "calls",
    "to": 576
  }, {
    "from": 567,
    "label": "calls",
    "to": 82
  }, {
    "from": 567,
    "label": "calls",
    "to": 82
  }, {
    "from": 567,
    "label": "calls",
    "to": 169
  }, {
    "from": 1,
    "label": "contains",
    "to": 567
  }, {
    "from": 567,
    "label": "declares",
    "to": 3
  }, {
    "from": 567,
    "label": "declares",
    "to": 8
  }, {
    "from": 567,
    "label": "declares",
    "to": 12
  }, {
    "from": 567,
    "label": "declares",
    "to": 17
  }, {
    "from": 567,
    "label": "declares",
    "to": 19
  }, {
    "from": 567,
    "label": "declares",
    "to": 25
  }, {
    "from": 567,
    "label": "declares",
    "to": 30
  }, {
    "from": 567,
    "label": "declares",
    "to": 34
  }, {
    "from": 567,
    "label": "declares",
    "to": 37
  }, {
    "from": 567,
    "label": "declares",
    "to": 45
  }, {
    "from": 567,
    "label": "declares",
    "to": 50
  }, {
    "from": 567,
    "label": "declares",
    "to": 57
  }, {
    "from": 567,
    "label": "declares",
    "to": 64
  }, {
    "from": 567,
    "label": "declares",
    "to": 72
  }, {
    "from": 567,
    "label": "declares",
    "to": 77
  }, {
    "from": 567,
    "label": "declares",
    "to": 82
  }, {
    "from": 567,
    "label": "declares",
    "to": 90
  }, {
    "from": 567,
    "label": "declares",
    "to": 103
  }, {
    "from": 567,
    "label": "declares",
    "to": 109
  }, {
    "from": 567,
    "label": "declares",
    "to": 118
  }, {
    "from": 567,
    "label": "declares",
    "to": 130
  }, {
    "from": 567,
    "label": "declares",
    "to": 132
  }, {
    "from": 567,
    "label": "declares",
    "to": 141
  }, {
    "from": 567,
    "label": "declares",
    "to": 152
  }, {
    "from": 567,
    "label": "declares",
    "to": 160
  }, {
    "from": 567,
    "label": "declares",
    "to": 165
  }, {
    "from": 567,
    "label": "declares",
    "to": 169
  }, {
    "from": 567,
    "label": "declares",
    "to": 177
  }, {
    "from": 567,
    "label": "declares",
    "to": 187
  }, {
    "from": 567,
    "label": "declares",
    "to": 212
  }, {
    "from": 567,
    "label": "declares",
    "to": 221
  }, {
    "from": 567,
    "label": "declares",
    "to": 245
  }, {
    "from": 567,
    "label": "declares",
    "to": 248
  }, {
    "from": 567,
    "label": "declares",
    "to": 259
  }, {
    "from": 567,
    "label": "declares",
    "to": 263
  }, {
    "from": 567,
    "label": "declares",
    "to": 279
  }, {
    "from": 567,
    "label": "declares",
    "to": 286
  }, {
    "from": 567,
    "label": "declares",
    "to": 292
  }, {
    "from": 567,
    "label": "declares",
    "to": 303
  }, {
    "from": 567,
    "label": "declares",
    "to": 310
  }, {
    "from": 567,
    "label": "declares",
    "to": 312
  }, {
    "from": 567,
    "label": "declares",
    "to": 325
  }, {
    "from": 567,
    "label": "declares",
    "to": 330
  }, {
    "from": 567,
    "label": "declares",
    "to": 339
  }, {
    "from": 567,
    "label": "declares",
    "to": 372
  }, {
    "from": 567,
    "label": "declares",
    "to": 377
  }, {
    "from": 567,
    "label": "declares",
    "to": 380
  }, {
    "from": 567,
    "label": "declares",
    "to": 383
  }, {
    "from": 567,
    "label": "declares",
    "to": 387
  }, {
    "from": 567,
    "label": "declares",
    "to": 390
  }, {
    "from": 567,
    "label": "declares",
    "to": 400
  }, {
    "from": 567,
    "label": "declares",
    "to": 409
  }, {
    "from": 567,
    "label": "declares",
    "to": 426
  }, {
    "from": 567,
    "label": "declares",
    "to": 448
  }, {
    "from": 567,
    "label": "declares",
    "to": 464
  }, {
    "from": 567,
    "label": "declares",
    "to": 467
  }, {
    "from": 567,
    "label": "declares",
    "to": 477
  }, {
    "from": 567,
    "label": "declares",
    "to": 486
  }, {
    "from": 567,
    "label": "declares",
    "to": 506
  }, {
    "from": 567,
    "label": "declares",
    "to": 511
  }, {
    "from": 567,
    "label": "declares",
    "to": 514
  }, {
    "from": 567,
    "label": "declares",
    "to": 516
  }, {
    "from": 567,
    "label": "declares",
    "to": 518
  }, {
    "from": 567,
    "label": "declares",
    "to": 521
  }, {
    "from": 567,
    "label": "declares",
    "to": 524
  }, {
    "from": 567,
    "label": "declares",
    "to": 526
  }, {
    "from": 567,
    "label": "declares",
    "to": 528
  }, {
    "from": 567,
    "label": "declares",
    "to": 530
  }, {
    "from": 567,
    "label": "declares",
    "to": 532
  }, {
    "from": 567,
    "label": "declares",
    "to": 534
  }, {
    "from": 567,
    "label": "declares",
    "to": 536
  }, {
    "from": 567,
    "label": "declares",
    "to": 543
  }, {
    "from": 567,
    "label": "declares",
    "to": 565
  }, {
    "from": 1,
    "label": "contains",
    "to": 600
  }, {
    "from": 1,
    "label": "contains",
    "to": 601
  }, {
    "from": 600,
    "label": "initializes",
    "to": 602
  }, {
    "from": 602,
    "label": "assigns",
    "to": 603
  }, {
    "from": 603,
    "label": "assigns",
    "to": 604
  }, {
    "from": 604,
    "label": "assigns",
    "to": 605
  }, {
    "from": 603,
    "label": "assigns",
    "to": 606
  }, {
    "from": 606,
    "label": "assigns",
    "to": 607
  }, {
    "from": 603,
    "label": "assigns",
    "to": 608
  }, {
    "from": 608,
    "label": "assigns",
    "to": 609
  }, {
    "from": 603,
    "label": "assigns",
    "to": 610
  }, {
    "from": 610,
    "label": "assigns",
    "to": 611
  }, {
    "from": 603,
    "label": "assigns",
    "to": 612
  }, {
    "from": 612,
    "label": "assigns",
    "to": 613
  }, {
    "from": 603,
    "label": "assigns",
    "to": 614
  }, {
    "from": 614,
    "label": "assigns",
    "to": 615
  }, {
    "from": 603,
    "label": "assigns",
    "to": 616
  }, {
    "from": 616,
    "label": "assigns",
    "to": 617
  }, {
    "from": 603,
    "label": "assigns",
    "to": 618
  }, {
    "from": 618,
    "label": "assigns",
    "to": 619
  }, {
    "from": 603,
    "label": "assigns",
    "to": 620
  }, {
    "from": 620,
    "label": "assigns",
    "to": 621
  }, {
    "from": 600,
    "label": "initializes",
    "to": 622
  }, {
    "from": 622,
    "label": "assigns",
    "to": 623
  }, {
    "from": 600,
    "label": "initializes",
    "to": 624
  }, {
    "from": 624,
    "label": "assigns",
    "to": 625
  }, {
    "from": 600,
    "label": "initializes",
    "to": 626
  }, {
    "from": 626,
    "label": "assigns",
    "to": 627
  }, {
    "from": 600,
    "label": "initializes",
    "to": 628
  }, {
    "from": 628,
    "label": "assigns",
    "to": 629
  }, {
    "from": 600,
    "label": "initializes",
    "to": 630
  }, {
    "from": 630,
    "label": "assigns",
    "to": 631
  }, {
    "from": 600,
    "label": "initializes",
    "to": 632
  }, {
    "from": 632,
    "label": "assigns",
    "to": 633
  }, {
    "from": 600,
    "label": "initializes",
    "to": 634
  }, {
    "from": 634,
    "label": "assigns",
    "to": 635
  }, {
    "from": 600,
    "label": "initializes",
    "to": 636
  }, {
    "from": 636,
    "label": "assigns",
    "to": 637
  }, {
    "from": 600,
    "label": "initializes",
    "to": 638
  }, {
    "from": 638,
    "label": "assigns",
    "to": 639
  }, {
    "from": 600,
    "label": "initializes",
    "to": 640
  }, {
    "from": 640,
    "label": "assigns",
    "to": 641
  }, {
    "from": 600,
    "label": "initializes",
    "to": 642
  }, {
    "from": 642,
    "label": "assigns",
    "to": 643
  }, {
    "from": 600,
    "label": "initializes",
    "to": 644
  }, {
    "from": 644,
    "label": "assigns",
    "to": 645
  }, {
    "from": 600,
    "label": "initializes",
    "to": 646
  }, {
    "from": 646,
    "label": "assigns",
    "to": 647
  }, {
    "from": 600,
    "label": "initializes",
    "to": 648
  }, {
    "from": 648,
    "label": "assigns",
    "to": 649
  }, {
    "from": 600,
    "label": "initializes",
    "to": 650
  }, {
    "from": 650,
    "label": "assigns",
    "to": 651
  }, {
    "from": 600,
    "label": "initializes",
    "to": 652
  }, {
    "from": 652,
    "label": "assigns",
    "to": 653
  }, {
    "from": 600,
    "label": "initializes",
    "to": 654
  }, {
    "from": 654,
    "label": "assigns",
    "to": 655
  }, {
    "from": 600,
    "label": "initializes",
    "to": 656
  }, {
    "from": 656,
    "label": "assigns",
    "to": 657
  }, {
    "from": 600,
    "label": "initializes",
    "to": 658
  }, {
    "from": 658,
    "label": "assigns",
    "to": 659
  }, {
    "from": 600,
    "label": "initializes",
    "to": 660
  }, {
    "from": 660,
    "label": "assigns",
    "to": 661
  }, {
    "from": 600,
    "label": "initializes",
    "to": 662
  }, {
    "from": 662,
    "label": "assigns",
    "to": 663
  }, {
    "from": 600,
    "label": "initializes",
    "to": 664
  }, {
    "from": 664,
    "label": "assigns",
    "to": 665
  }, {
    "from": 600,
    "label": "initializes",
    "to": 666
  }, {
    "from": 666,
    "label": "assigns",
    "to": 667
  }, {
    "from": 600,
    "label": "initializes",
    "to": 668
  }, {
    "from": 668,
    "label": "assigns",
    "to": 669
  }, {
    "from": 600,
    "label": "initializes",
    "to": 670
  }, {
    "from": 670,
    "label": "assigns",
    "to": 671
  }, {
    "from": 600,
    "label": "initializes",
    "to": 672
  }, {
    "from": 600,
    "label": "initializes",
    "to": 673
  }, {
    "from": 600,
    "label": "initializes",
    "to": 674
  }, {
    "from": 600,
    "label": "initializes",
    "to": 675
  }, {
    "from": 600,
    "label": "initializes",
    "to": 676
  }, {
    "from": 600,
    "label": "initializes",
    "to": 677
  }, {
    "from": 600,
    "label": "initializes",
    "to": 678
  }, {
    "from": 678,
    "label": "assigns",
    "to": 679
  }, {
    "from": 600,
    "label": "initializes",
    "to": 680
  }, {
    "from": 600,
    "label": "initializes",
    "to": 681
  }, {
    "from": 600,
    "label": "initializes",
    "to": 682
  }, {
    "from": 682,
    "label": "assigns",
    "to": 683
  }, {
    "from": 600,
    "label": "initializes",
    "to": 684
  }, {
    "from": 600,
    "label": "initializes",
    "to": 685
  }, {
    "from": 685,
    "label": "assigns",
    "to": 686
  }, {
    "from": 600,
    "label": "initializes",
    "to": 687
  }, {
    "from": 687,
    "label": "assigns",
    "to": 688
  }, {
    "from": 600,
    "label": "initializes",
    "to": 689
  }, {
    "from": 600,
    "label": "initializes",
    "to": 690
  }, {
    "from": 600,
    "label": "initializes",
    "to": 691
  }, {
    "from": 691,
    "label": "assigns",
    "to": 692
  }, {
    "from": 600,
    "label": "initializes",
    "to": 693
  }, {
    "from": 600,
    "label": "initializes",
    "to": 694
  }, {
    "from": 694,
    "label": "assigns",
    "to": 695
  }, {
    "from": 600,
    "label": "initializes",
    "to": 696
  }, {
    "from": 696,
    "label": "assigns",
    "to": 697
  }, {
    "from": 600,
    "label": "initializes",
    "to": 698
  }, {
    "from": 600,
    "label": "initializes",
    "to": 699
  }, {
    "from": 600,
    "label": "initializes",
    "to": 700
  }, {
    "from": 600,
    "label": "initializes",
    "to": 701
  }, {
    "from": 701,
    "label": "assigns",
    "to": 702
  }, {
    "from": 600,
    "label": "initializes",
    "to": 703
  }, {
    "from": 703,
    "label": "assigns",
    "to": 704
  }, {
    "from": 600,
    "label": "initializes",
    "to": 705
  }, {
    "from": 600,
    "label": "initializes",
    "to": 706
  }, {
    "from": 600,
    "label": "initializes",
    "to": 707
  }, {
    "from": 707,
    "label": "assigns",
    "to": 708
  }, {
    "from": 600,
    "label": "initializes",
    "to": 709
  }, {
    "from": 709,
    "label": "assigns",
    "to": 710
  }, {
    "from": 600,
    "label": "initializes",
    "to": 711
  }, {
    "from": 711,
    "label": "assigns",
    "to": 712
  }, {
    "from": 600,
    "label": "initializes",
    "to": 713
  }, {
    "from": 600,
    "label": "initializes",
    "to": 714
  }, {
    "from": 714,
    "label": "assigns",
    "to": 715
  }, {
    "from": 715,
    "label": "assigns",
    "to": 716
  }, {
    "from": 716,
    "label": "assigns",
    "to": 717
  }, {
    "from": 715,
    "label": "assigns",
    "to": 718
  }, {
    "from": 718,
    "label": "assigns",
    "to": 719
  }, {
    "from": 715,
    "label": "assigns",
    "to": 720
  }, {
    "from": 720,
    "label": "assigns",
    "to": 721
  }, {
    "from": 715,
    "label": "assigns",
    "to": 722
  }, {
    "from": 722,
    "label": "assigns",
    "to": 723
  }, {
    "from": 715,
    "label": "assigns",
    "to": 724
  }, {
    "from": 724,
    "label": "assigns",
    "to": 725
  }, {
    "from": 715,
    "label": "assigns",
    "to": 726
  }, {
    "from": 726,
    "label": "assigns",
    "to": 727
  }, {
    "from": 715,
    "label": "assigns",
    "to": 728
  }, {
    "from": 728,
    "label": "assigns",
    "to": 729
  }, {
    "from": 715,
    "label": "assigns",
    "to": 730
  }, {
    "from": 730,
    "label": "assigns",
    "to": 731
  }, {
    "from": 715,
    "label": "assigns",
    "to": 732
  }, {
    "from": 732,
    "label": "assigns",
    "to": 733
  }, {
    "from": 715,
    "label": "assigns",
    "to": 734
  }, {
    "from": 734,
    "label": "assigns",
    "to": 735
  }, {
    "from": 715,
    "label": "assigns",
    "to": 736
  }, {
    "from": 736,
    "label": "assigns",
    "to": 737
  }, {
    "from": 715,
    "label": "assigns",
    "to": 738
  }, {
    "from": 738,
    "label": "assigns",
    "to": 739
  }, {
    "from": 715,
    "label": "assigns",
    "to": 740
  }, {
    "from": 740,
    "label": "assigns",
    "to": 741
  }, {
    "from": 715,
    "label": "assigns",
    "to": 742
  }, {
    "from": 742,
    "label": "assigns",
    "to": 743
  }, {
    "from": 600,
    "label": "initializes",
    "to": 744
  }, {
    "from": 744,
    "label": "assigns",
    "to": 745
  }, {
    "from": 600,
    "label": "initializes",
    "to": 746
  }, {
    "from": 746,
    "label": "assigns",
    "to": 747
  }, {
    "from": 600,
    "label": "initializes",
    "to": 748
  }, {
    "from": 748,
    "label": "assigns",
    "to": 749
  }, {
    "from": 600,
    "label": "initializes",
    "to": 750
  }, {
    "from": 750,
    "label": "assigns",
    "to": 751
  }, {
    "from": 600,
    "label": "initializes",
    "to": 752
  }, {
    "from": 752,
    "label": "assigns",
    "to": 753
  }, {
    "from": 600,
    "label": "initializes",
    "to": 754
  }, {
    "from": 754,
    "label": "assigns",
    "to": 755
  }, {
    "from": 600,
    "label": "initializes",
    "to": 756
  }, {
    "from": 756,
    "label": "assigns",
    "to": 757
  }, {
    "from": 600,
    "label": "initializes",
    "to": 758
  }, {
    "from": 758,
    "label": "assigns",
    "to": 759
  }, {
    "from": 600,
    "label": "initializes",
    "to": 760
  }, {
    "from": 760,
    "label": "assigns",
    "to": 761
  }, {
    "from": 600,
    "label": "initializes",
    "to": 762
  }, {
    "from": 762,
    "label": "assigns",
    "to": 763
  }, {
    "from": 600,
    "label": "initializes",
    "to": 764
  }, {
    "from": 764,
    "label": "assigns",
    "to": 765
  }, {
    "from": 600,
    "label": "initializes",
    "to": 766
  }, {
    "from": 766,
    "label": "assigns",
    "to": 767
  }, {
    "from": 600,
    "label": "initializes",
    "to": 768
  }, {
    "from": 768,
    "label": "assigns",
    "to": 769
  }, {
    "from": 600,
    "label": "initializes",
    "to": 770
  }, {
    "from": 770,
    "label": "assigns",
    "to": 771
  }, {
    "from": 600,
    "label": "initializes",
    "to": 772
  }, {
    "from": 772,
    "label": "assigns",
    "to": 773
  }, {
    "from": 600,
    "label": "initializes",
    "to": 774
  }, {
    "from": 774,
    "label": "assigns",
    "to": 775
  }, {
    "from": 600,
    "label": "initializes",
    "to": 776
  }, {
    "from": 776,
    "label": "assigns",
    "to": 777
  }, {
    "from": 600,
    "label": "initializes",
    "to": 778
  }, {
    "from": 778,
    "label": "assigns",
    "to": 779
  }, {
    "from": 600,
    "label": "initializes",
    "to": 780
  }, {
    "from": 780,
    "label": "assigns",
    "to": 781
  }, {
    "from": 600,
    "label": "initializes",
    "to": 782
  }, {
    "from": 782,
    "label": "assigns",
    "to": 783
  }, {
    "from": 600,
    "label": "initializes",
    "to": 784
  }, {
    "from": 784,
    "label": "assigns",
    "to": 785
  }, {
    "from": 600,
    "label": "initializes",
    "to": 786
  }, {
    "from": 786,
    "label": "assigns",
    "to": 787
  }, {
    "from": 600,
    "label": "initializes",
    "to": 788
  }, {
    "from": 788,
    "label": "assigns",
    "to": 789
  }, {
    "from": 600,
    "label": "initializes",
    "to": 790
  }, {
    "from": 790,
    "label": "assigns",
    "to": 791
  }, {
    "from": 600,
    "label": "initializes",
    "to": 792
  }, {
    "from": 792,
    "label": "assigns",
    "to": 793
  }, {
    "from": 600,
    "label": "initializes",
    "to": 794
  }, {
    "from": 794,
    "label": "assigns",
    "to": 795
  }, {
    "from": 687,
    "label": "contains",
    "to": 2
  }, {
    "from": 682,
    "label": "contains",
    "to": 64
  }, {
    "from": 682,
    "label": "contains",
    "to": 72
  }, {
    "from": 682,
    "label": "contains",
    "to": 339
  }, {
    "from": 682,
    "label": "contains",
    "to": 506
  }, {
    "from": 682,
    "label": "contains",
    "to": 511
  }, {
    "from": 682,
    "label": "contains",
    "to": 514
  }, {
    "from": 682,
    "label": "contains",
    "to": 516
  }, {
    "from": 682,
    "label": "contains",
    "to": 518
  }, {
    "from": 682,
    "label": "contains",
    "to": 521
  }, {
    "from": 682,
    "label": "contains",
    "to": 524
  }, {
    "from": 682,
    "label": "contains",
    "to": 526
  }, {
    "from": 682,
    "label": "contains",
    "to": 528
  }, {
    "from": 682,
    "label": "contains",
    "to": 530
  }, {
    "from": 682,
    "label": "contains",
    "to": 532
  }, {
    "from": 682,
    "label": "contains",
    "to": 534
  }, {
    "from": 288,
    "label": "hasArgument",
    "to": 565
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dynasm",
    "type": "module"
  }, {
    "id": 2,
    "text": "function map_op.mov64_2(params)\r\n    if not params then return { \"reg, imm\", \"reg, [disp]\", \"[disp], reg\" } end\r\n    if secpos+2 > maxsecpos then wflush() end\r\n    local opcode, op64, sz, rex\r\n    local op64 = match(params[1], \"^%[%s*(.-)%s*%]$\")\r\n    if op64 then\r\n      local a = parseoperand(params[2])\r\n      if a.mode ~= \"rmR\" then werror(\"bad operand mode\") end\r\n      sz = a.opsize\r\n      rex = sz == \"q\" and 8 or 0\r\n      opcode = 0xa3\r\n    else\r\n      op64 = match(params[2], \"^%[%s*(.-)%s*%]$\")\r\n      local a = parseoperand(params[1])\r\n      if op64 then\r\n\tif a.mode ~= \"rmR\" then werror(\"bad operand mode\") end\r\n\tsz = a.opsize\r\n\trex = sz == \"q\" and 8 or 0\r\n\topcode = 0xa1\r\n      else\r\n\tif sub(a.mode, 1, 1) ~= \"r\" or a.opsize ~= \"q\" then\r\n\t  werror(\"bad operand mode\")\r\n\tend\r\n\top64 = params[2]\r\n\topcode = 0xb8 + (a.reg%8) -- !x64: no VREG support.\r\n\trex = a.reg > 7 and 9 or 8\r\n      end\r\n    end\r\n    wputop(sz, opcode, rex)\r\n    waction(\"IMM_D\", format(\"(unsigned int)((uintptr_t)(%s))\", op64))\r\n    waction(\"IMM_D\", format(\"(unsigned int)(((uintptr_t)(%s))>>32)\", op64))\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function wline(line, needindent)\r\n  local buf = g_capbuffer or g_wbuffer\r\n  buf[#buf+1] = needindent and g_indent..line or line\r\n  g_synclineno = g_synclineno + 1\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local buf = g_capbuffer or g_wbuffer",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "buf[#buf+1] = needindent and g_indent..line or line",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "g_synclineno = g_synclineno + 1",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function wcomment(aline)\r\n  if g_opt.comment then\r\n    wline(g_opt.comment..aline..g_opt.endcomment, true)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if g_opt.comment then\r\n    wline(g_opt.comment..aline..g_opt.endcomment, true)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "wline(g_opt.comment..aline..g_opt.endcomment, true)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function wsync()\r\n  if g_synclineno ~= g_lineno and g_opt.cpp then\r\n    wline(\"# \"..g_lineno..' \"'..g_fname..'\"')\r\n    g_synclineno = g_lineno\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "if g_synclineno ~= g_lineno and g_opt.cpp then\r\n    wline(\"# \"..g_lineno..' \"'..g_fname..'\"')\r\n    g_synclineno = g_lineno\r\n  end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "wline(\"# \"..g_lineno..' \"'..g_fname..'\"')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "g_synclineno = g_lineno",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function wflush(term)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function wdumplines(out, buf)\r\n  for _,line in ipairs(buf) do\r\n    if type(line) == \"string\" then\r\n      assert(out:write(line, \"\\n\"))\r\n    else\r\n      -- Special callback to dynamically insert lines after end of processing.\r\n      line(out)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "for _,line in ipairs(buf) do\r\n    if type(line) == \"string\" then\r\n      assert(out:write(line, \"\\n\"))\r\n    else\r\n      -- Special callback to dynamically insert lines after end of processing.\r\n      line(out)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "if type(line) == \"string\" then\r\n      assert(out:write(line, \"\\n\"))\r\n    else\r\n      -- Special callback to dynamically insert lines after end of processing.\r\n      line(out)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "assert(out:write(line, \"\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "line(out)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function werror(msg)\r\n  if g_opt.vserror then\r\n    error(format(\"%s(%s) : error: %s:\\n%s\", g_fname, g_lineno, msg, g_curline), 0)\r\n  else\r\n    error(format(\"%s:%s: error: %s:\\n%s\", g_fname, g_lineno, msg, g_curline), 0)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "if g_opt.vserror then\r\n    error(format(\"%s(%s) : error: %s:\\n%s\", g_fname, g_lineno, msg, g_curline), 0)\r\n  else\r\n    error(format(\"%s:%s: error: %s:\\n%s\", g_fname, g_lineno, msg, g_curline), 0)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "error(format(\"%s(%s) : error: %s:\\n%s\", g_fname, g_lineno, msg, g_curline), 0)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "error(format(\"%s:%s: error: %s:\\n%s\", g_fname, g_lineno, msg, g_curline), 0)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function wfatal(msg)\r\n  g_errcount = \"fatal\"\r\n  werror(msg)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "g_errcount = \"fatal\"",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "werror(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function wwarn(msg)\r\n  stderr:write(format(\"%s:%s: warning: %s:\\n%s\\n\",\r\n    g_fname, g_lineno, msg, g_curline))\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "stderr:write(format(\"%s:%s: warning: %s:\\n%s\\n\",\r\n    g_fname, g_lineno, msg, g_curline))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function wprinterr(...)\r\n  if type(g_errcount) == \"number\" then\r\n    -- Regular error.\r\n    g_errcount = g_errcount + 1\r\n    if g_errcount < 21 then -- Seems to be a reasonable limit.\r\n      stderr:write(...)\r\n    elseif g_errcount == 21 then\r\n      stderr:write(g_fname,\r\n\t\":*: warning: too many errors (suppressed further messages).\\n\")\r\n    end\r\n  else\r\n    -- Fatal error.\r\n    stderr:write(...)\r\n    return true -- Stop processing.\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if type(g_errcount) == \"number\" then\r\n    -- Regular error.\r\n    g_errcount = g_errcount + 1\r\n    if g_errcount < 21 then -- Seems to be a reasonable limit.\r\n      stderr:write(...)\r\n    elseif g_errcount == 21 then\r\n      stderr:write(g_fname,\r\n\t\":*: warning: too many errors (suppressed further messages).\\n\")\r\n    end\r\n  else\r\n    -- Fatal error.\r\n    stderr:write(...)\r\n    return true -- Stop processing.\r\n  end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "g_errcount = g_errcount + 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if g_errcount < 21 then -- Seems to be a reasonable limit.\r\n      stderr:write(...)\r\n    elseif g_errcount == 21 then\r\n      stderr:write(g_fname,\r\n\t\":*: warning: too many errors (suppressed further messages).\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "stderr:write(...)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "stderr:write(g_fname,\r\n\t\":*: warning: too many errors (suppressed further messages).\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function opterror(...)\r\n  stderr:write(\"dynasm.lua: ERROR: \", ...)\r\n  stderr:write(\"\\n\")\r\n  exit(1)\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "stderr:write(\"dynasm.lua: ERROR: \", ...)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "stderr:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function optparam(args)\r\n  local argn = args.argn\r\n  local p = args[argn]\r\n  if not p then\r\n    opterror(\"missing parameter for option `\", opt_current, \"'.\")\r\n  end\r\n  args.argn = argn + 1\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local argn = args.argn",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local p = args[argn]",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if not p then\r\n    opterror(\"missing parameter for option `\", opt_current, \"'.\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "opterror(\"missing parameter for option `\", opt_current, \"'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "args.argn = argn + 1",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function(params, nparams)\r\n  if not params then return nparams == 1 and \"name\" or \"name, subst\" end\r\n  local name, def = params[1], params[2] or \"1\"\r\n  if not match(name, \"^[%a_][%w_]*$\") then werror(\"bad or duplicate define\") end\r\n  map_def[name] = def\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "if not params then return nparams == 1 and \"name\" or \"name, subst\" end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "local name, def = params[1], params[2] or \"1\"",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if not match(name, \"^[%a_][%w_]*$\") then werror(\"bad or duplicate define\") end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "werror(\"bad or duplicate define\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "map_def[name] = def",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function opt_map.D(args)\r\n  local namesubst = optparam(args)\r\n  local name, subst = match(namesubst, \"^([%a_][%w_]*)=(.*)$\")\r\n  if name then\r\n    map_def[name] = subst\r\n  elseif match(namesubst, \"^[%a_][%w_]*$\") then\r\n    map_def[namesubst] = \"1\"\r\n  else\r\n    opterror(\"bad define\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "local namesubst = optparam(args)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local name, subst = match(namesubst, \"^([%a_][%w_]*)=(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if name then\r\n    map_def[name] = subst\r\n  elseif match(namesubst, \"^[%a_][%w_]*$\") then\r\n    map_def[namesubst] = \"1\"\r\n  else\r\n    opterror(\"bad define\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "map_def[name] = subst",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "map_def[namesubst] = \"1\"",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "opterror(\"bad define\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function opt_map.U(args)\r\n  local name = optparam(args)\r\n  if match(name, \"^[%a_][%w_]*$\") then\r\n    map_def[name] = nil\r\n  else\r\n    opterror(\"bad define\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "local name = optparam(args)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if match(name, \"^[%a_][%w_]*$\") then\r\n    map_def[name] = nil\r\n  else\r\n    opterror(\"bad define\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "map_def[name] = nil",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "local function definesubst_one(word)\r\n  local subst = map_def[word]\r\n  if subst then gotsubst = word; return subst else return word end\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "local subst = map_def[word]",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if subst then gotsubst = word; return subst else return word end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "gotsubst = word",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function definesubst(stmt)\r\n  -- Limit number of iterations.\r\n  for i=1,100 do\r\n    gotsubst = false\r\n    stmt = gsub(stmt, \"#?[%w_]+\", definesubst_one)\r\n    if not gotsubst then break end\r\n  end\r\n  if gotsubst then wfatal(\"recursive define involving `\"..gotsubst..\"'\") end\r\n  return stmt\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "for i=1,100 do\r\n    gotsubst = false\r\n    stmt = gsub(stmt, \"#?[%w_]+\", definesubst_one)\r\n    if not gotsubst then break end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 84,
    "text": "gotsubst = false",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "stmt = gsub(stmt, \"#?[%w_]+\", definesubst_one)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if not gotsubst then break end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "if gotsubst then wfatal(\"recursive define involving `\"..gotsubst..\"'\") end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "wfatal(\"recursive define involving `\"..gotsubst..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "local function dumpdefines(out, lvl)\r\n  local t = {}\r\n  for name in pairs(map_def) do\r\n    t[#t+1] = name\r\n  end\r\n  sort(t)\r\n  out:write(\"Defines:\\n\")\r\n  for _,name in ipairs(t) do\r\n    local subst = map_def[name]\r\n    if g_arch then subst = g_arch.revdef(subst) end\r\n    out:write(format(\"  %-20s %s\\n\", name, subst))\r\n  end\r\n  out:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "for name in pairs(map_def) do\r\n    t[#t+1] = name\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 93,
    "text": "t[#t+1] = name",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "sort(t)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "out:write(\"Defines:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "for _,name in ipairs(t) do\r\n    local subst = map_def[name]\r\n    if g_arch then subst = g_arch.revdef(subst) end\r\n    out:write(format(\"  %-20s %s\\n\", name, subst))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "local subst = map_def[name]",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if g_arch then subst = g_arch.revdef(subst) end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "subst = g_arch.revdef(subst)",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "out:write(format(\"  %-20s %s\\n\", name, subst))",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "out:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "local function loadin(source, env)\r\n  if setfenv then\r\n    local func, err = loadstring(source)\r\n    if func then\r\n      setfenv(func, env)\r\n    end\r\n    return func, err\r\n  else\r\n    return load(source, nil, nil, env)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "if setfenv then\r\n    local func, err = loadstring(source)\r\n    if func then\r\n      setfenv(func, env)\r\n    end\r\n    return func, err\r\n  else\r\n    return load(source, nil, nil, env)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "local func, err = loadstring(source)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if func then\r\n      setfenv(func, env)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "setfenv(func, env)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "local function cond_eval(cond)\r\n  -- No globals. All unknown identifiers evaluate to nil.\r\n  local func, err = loadin(\"return \"..cond, {})\r\n  if func then\r\n    local ok, res = pcall(func)\r\n    if ok then\r\n      if res == 0 then return false end -- Oh well.\r\n      return not not res\r\n    end\r\n    err = res\r\n  end\r\n  wfatal(\"bad condition: \"..err)\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "local func, err = loadin(\"return \"..cond, {})",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if func then\r\n    local ok, res = pcall(func)\r\n    if ok then\r\n      if res == 0 then return false end -- Oh well.\r\n      return not not res\r\n    end\r\n    err = res\r\n  end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "local ok, res = pcall(func)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if ok then\r\n      if res == 0 then return false end -- Oh well.\r\n      return not not res\r\n    end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "if res == 0 then return false end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "err = res",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "wfatal(\"bad condition: \"..err)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "local function stmtskip()\r\n  local dostmt_save = dostmt\r\n  local lvl = 0\r\n  dostmt = function(stmt)\r\n    local op = match(stmt, \"^%s*(%S+)\")\r\n    if op == \".if\" then\r\n      lvl = lvl + 1\r\n    elseif lvl ~= 0 then\r\n      if op == \".endif\" then lvl = lvl - 1 end\r\n    elseif op == \".elif\" or op == \".else\" or op == \".endif\" then\r\n      dostmt = dostmt_save\r\n      dostmt(stmt)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "local dostmt_save = dostmt",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "local lvl = 0",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "dostmt = function(stmt)\r\n    local op = match(stmt, \"^%s*(%S+)\")\r\n    if op == \".if\" then\r\n      lvl = lvl + 1\r\n    elseif lvl ~= 0 then\r\n      if op == \".endif\" then lvl = lvl - 1 end\r\n    elseif op == \".elif\" or op == \".else\" or op == \".endif\" then\r\n      dostmt = dostmt_save\r\n      dostmt(stmt)\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "local op = match(stmt, \"^%s*(%S+)\")",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "if op == \".if\" then\r\n      lvl = lvl + 1\r\n    elseif lvl ~= 0 then\r\n      if op == \".endif\" then lvl = lvl - 1 end\r\n    elseif op == \".elif\" or op == \".else\" or op == \".endif\" then\r\n      dostmt = dostmt_save\r\n      dostmt(stmt)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "lvl = lvl + 1",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "if op == \".endif\" then lvl = lvl - 1 end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "lvl = lvl - 1",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "dostmt = dostmt_save",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "dostmt(stmt)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function(stmt)\r\n    local op = match(stmt, \"^%s*(%S+)\")\r\n    if op == \".if\" then\r\n      lvl = lvl + 1\r\n    elseif lvl ~= 0 then\r\n      if op == \".endif\" then lvl = lvl - 1 end\r\n    elseif op == \".elif\" or op == \".else\" or op == \".endif\" then\r\n      dostmt = dostmt_save\r\n      dostmt(stmt)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function(params)\r\n  if not params then return \"condition\" end\r\n  local lvl = condlevel + 1\r\n  local res = cond_eval(params[1])\r\n  condlevel = lvl\r\n  condstack[lvl] = res\r\n  if not res then stmtskip() end\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "if not params then return \"condition\" end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "local lvl = condlevel + 1",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "local res = cond_eval(params[1])",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "condlevel = lvl",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "condstack[lvl] = res",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "if not res then stmtskip() end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "stmtskip()",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function(params)\r\n  if not params then return \"condition\" end\r\n  if condlevel == 0 then wfatal(\".elif without .if\") end\r\n  local lvl = condlevel\r\n  local res = condstack[lvl]\r\n  if res then\r\n    if res == \"else\" then wfatal(\".elif after .else\") end\r\n  else\r\n    res = cond_eval(params[1])\r\n    if res then\r\n      condstack[lvl] = res\r\n      return\r\n    end\r\n  end\r\n  stmtskip()\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "if condlevel == 0 then wfatal(\".elif without .if\") end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "wfatal(\".elif without .if\")",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "local lvl = condlevel",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "local res = condstack[lvl]",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "if res then\r\n    if res == \"else\" then wfatal(\".elif after .else\") end\r\n  else\r\n    res = cond_eval(params[1])\r\n    if res then\r\n      condstack[lvl] = res\r\n      return\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "if res == \"else\" then wfatal(\".elif after .else\") end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "wfatal(\".elif after .else\")",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "res = cond_eval(params[1])",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "if res then\r\n      condstack[lvl] = res\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function(params)\r\n  if condlevel == 0 then wfatal(\".else without .if\") end\r\n  local lvl = condlevel\r\n  local res = condstack[lvl]\r\n  condstack[lvl] = \"else\"\r\n  if res then\r\n    if res == \"else\" then wfatal(\".else after .else\") end\r\n    stmtskip()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "if condlevel == 0 then wfatal(\".else without .if\") end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "wfatal(\".else without .if\")",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "condstack[lvl] = \"else\"",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "if res then\r\n    if res == \"else\" then wfatal(\".else after .else\") end\r\n    stmtskip()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "if res == \"else\" then wfatal(\".else after .else\") end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "wfatal(\".else after .else\")",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "function(params)\r\n  local lvl = condlevel\r\n  if lvl == 0 then wfatal(\".endif without .if\") end\r\n  condlevel = lvl - 1\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "if lvl == 0 then wfatal(\".endif without .if\") end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "wfatal(\".endif without .if\")",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "condlevel = lvl - 1",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "local function checkconds()\r\n  if g_errcount ~= \"fatal\" and condlevel ~= 0 then\r\n    wprinterr(g_fname, \":*: error: unbalanced conditional\\n\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "if g_errcount ~= \"fatal\" and condlevel ~= 0 then\r\n    wprinterr(g_fname, \":*: error: unbalanced conditional\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "wprinterr(g_fname, \":*: error: unbalanced conditional\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "local function pathopen(path, name)\r\n  local dirsep = match(package.path, \"\\\\\") and \"\\\\\" or \"/\"\r\n  for _,p in ipairs(path) do\r\n    local fullname = p == \"\" and name or p..dirsep..name\r\n    local fin = io.open(fullname, \"r\")\r\n    if fin then\r\n      g_fname = fullname\r\n      return fin\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "local dirsep = match(package.path, \"\\\\\") and \"\\\\\" or \"/\"",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "for _,p in ipairs(path) do\r\n    local fullname = p == \"\" and name or p..dirsep..name\r\n    local fin = io.open(fullname, \"r\")\r\n    if fin then\r\n      g_fname = fullname\r\n      return fin\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 172,
    "text": "local fullname = p == \"\" and name or p..dirsep..name",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "local fin = io.open(fullname, \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "if fin then\r\n      g_fname = fullname\r\n      return fin\r\n    end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "g_fname = fullname",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function(params)\r\n  if not params then return \"filename\" end\r\n  local name = params[1]\r\n  -- Save state. Ugly, I know. but upvalues are fast.\r\n  local gf, gl, gcl, gi = g_fname, g_lineno, g_curline, g_indent\r\n  -- Read the included file.\r\n  local fatal = readfile(pathopen(g_opt.include, name) or\r\n\t\t\t wfatal(\"include file `\"..name..\"' not found\"))\r\n  -- Restore state.\r\n  g_synclineno = -1\r\n  g_fname, g_lineno, g_curline, g_indent = gf, gl, gcl, gi\r\n  if fatal then wfatal(\"in include file\") end\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "if not params then return \"filename\" end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "local name = params[1]",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "local gf, gl, gcl, gi = g_fname, g_lineno, g_curline, g_indent",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "local fatal = readfile(pathopen(g_opt.include, name) or\r\n\t\t\t wfatal(\"include file `\"..name..\"' not found\"))",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "g_synclineno = -1",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "g_fname, g_lineno, g_curline, g_indent = gf, gl, gcl, gi",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "if fatal then wfatal(\"in include file\") end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "wfatal(\"in include file\")",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function(params)\r\n      if not params then return mparams, lines end\r\n      -- Protect against recursive macro invocation.\r\n      if mac_active[opname] then wfatal(\"recursive macro invocation\") end\r\n      mac_active[opname] = true\r\n      -- Setup substitution map.\r\n      local subst = {}\r\n      for i,mp in ipairs(mparams) do subst[mp] = params[i] end\r\n      local mcom\r\n      if g_opt.maccomment and g_opt.comment then\r\n\tmcom = \" MACRO \"..name..\" (\"..#mparams..\")\"\r\n\twcomment(\"{\"..mcom)\r\n      end\r\n      -- Loop through all captured statements\r\n      for _,stmt in ipairs(lines) do\r\n\t-- Substitute macro parameters.\r\n\tlocal st = gsub(stmt, \"[%w_]+\", subst)\r\n\tst = definesubst(st)\r\n\tst = gsub(st, \"%s*%.%.%s*\", \"\") -- Token paste a..b.\r\n\tif mcom and sub(st, 1, 1) ~= \"|\" then wcomment(st) end\r\n\t-- Emit statement. Use a protected call for better diagnostics.\r\n\tlocal ok, err = pcall(dostmt, st)\r\n\tif not ok then\r\n\t  -- Add the captured statement to the error.\r\n\t  wprinterr(err, \"\\n\", g_indent, \"|  \", stmt,\r\n\t\t    \"\\t[MACRO \", name, \" (\", #mparams, \")]\\n\")\r\n\tend\r\n      end\r\n      if mcom then wcomment(\"}\"..mcom) end\r\n      mac_active[opname] = nil\r\n    end",
    "type": "function"
  }, {
    "id": 188,
    "text": "if not params then return mparams, lines end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "if mac_active[opname] then wfatal(\"recursive macro invocation\") end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "wfatal(\"recursive macro invocation\")",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "mac_active[opname] = true",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "local subst = {}",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "for i,mp in ipairs(mparams) do subst[mp] = params[i] end",
    "type": "statement:genericfor"
  }, {
    "id": 194,
    "text": "subst[mp] = params[i]",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "local mcom",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "if g_opt.maccomment and g_opt.comment then\r\n\tmcom = \" MACRO \"..name..\" (\"..#mparams..\")\"\r\n\twcomment(\"{\"..mcom)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "mcom = \" MACRO \"..name..\" (\"..#mparams..\")\"",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "wcomment(\"{\"..mcom)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "for _,stmt in ipairs(lines) do\r\n\t-- Substitute macro parameters.\r\n\tlocal st = gsub(stmt, \"[%w_]+\", subst)\r\n\tst = definesubst(st)\r\n\tst = gsub(st, \"%s*%.%.%s*\", \"\") -- Token paste a..b.\r\n\tif mcom and sub(st, 1, 1) ~= \"|\" then wcomment(st) end\r\n\t-- Emit statement. Use a protected call for better diagnostics.\r\n\tlocal ok, err = pcall(dostmt, st)\r\n\tif not ok then\r\n\t  -- Add the captured statement to the error.\r\n\t  wprinterr(err, \"\\n\", g_indent, \"|  \", stmt,\r\n\t\t    \"\\t[MACRO \", name, \" (\", #mparams, \")]\\n\")\r\n\tend\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 200,
    "text": "local st = gsub(stmt, \"[%w_]+\", subst)",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "st = definesubst(st)",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "st = gsub(st, \"%s*%.%.%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "if mcom and sub(st, 1, 1) ~= \"|\" then wcomment(st) end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "wcomment(st)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "local ok, err = pcall(dostmt, st)",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "if not ok then\r\n\t  -- Add the captured statement to the error.\r\n\t  wprinterr(err, \"\\n\", g_indent, \"|  \", stmt,\r\n\t\t    \"\\t[MACRO \", name, \" (\", #mparams, \")]\\n\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "wprinterr(err, \"\\n\", g_indent, \"|  \", stmt,\r\n\t\t    \"\\t[MACRO \", name, \" (\", #mparams, \")]\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "if mcom then wcomment(\"}\"..mcom) end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "wcomment(\"}\"..mcom)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "mac_active[opname] = nil",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "function(stmt) -- Statement capture function.\r\n    -- Stop macro definition with .endmacro pseudo-opcode.\r\n    if not match(stmt, \"^%s*.endmacro%s*$\") then\r\n      lines[#lines+1] = stmt\r\n      return\r\n    end\r\n    mac_capture = nil\r\n    mac_lineno = nil\r\n    mac_name = nil\r\n    mac_list[#mac_list+1] = opname\r\n    -- Add macro-op definition.\r\n    map_op[opname] = function(params)\r\n      if not params then return mparams, lines end\r\n      -- Protect against recursive macro invocation.\r\n      if mac_active[opname] then wfatal(\"recursive macro invocation\") end\r\n      mac_active[opname] = true\r\n      -- Setup substitution map.\r\n      local subst = {}\r\n      for i,mp in ipairs(mparams) do subst[mp] = params[i] end\r\n      local mcom\r\n      if g_opt.maccomment and g_opt.comment then\r\n\tmcom = \" MACRO \"..name..\" (\"..#mparams..\")\"\r\n\twcomment(\"{\"..mcom)\r\n      end\r\n      -- Loop through all captured statements\r\n      for _,stmt in ipairs(lines) do\r\n\t-- Substitute macro parameters.\r\n\tlocal st = gsub(stmt, \"[%w_]+\", subst)\r\n\tst = definesubst(st)\r\n\tst = gsub(st, \"%s*%.%.%s*\", \"\") -- Token paste a..b.\r\n\tif mcom and sub(st, 1, 1) ~= \"|\" then wcomment(st) end\r\n\t-- Emit statement. Use a protected call for better diagnostics.\r\n\tlocal ok, err = pcall(dostmt, st)\r\n\tif not ok then\r\n\t  -- Add the captured statement to the error.\r\n\t  wprinterr(err, \"\\n\", g_indent, \"|  \", stmt,\r\n\t\t    \"\\t[MACRO \", name, \" (\", #mparams, \")]\\n\")\r\n\tend\r\n      end\r\n      if mcom then wcomment(\"}\"..mcom) end\r\n      mac_active[opname] = nil\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 213,
    "text": "if not match(stmt, \"^%s*.endmacro%s*$\") then\r\n      lines[#lines+1] = stmt\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "lines[#lines+1] = stmt",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "mac_capture = nil",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "mac_lineno = nil",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "mac_name = nil",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "mac_list[#mac_list+1] = opname",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "map_op[opname] = function(params)\r\n      if not params then return mparams, lines end\r\n      -- Protect against recursive macro invocation.\r\n      if mac_active[opname] then wfatal(\"recursive macro invocation\") end\r\n      mac_active[opname] = true\r\n      -- Setup substitution map.\r\n      local subst = {}\r\n      for i,mp in ipairs(mparams) do subst[mp] = params[i] end\r\n      local mcom\r\n      if g_opt.maccomment and g_opt.comment then\r\n\tmcom = \" MACRO \"..name..\" (\"..#mparams..\")\"\r\n\twcomment(\"{\"..mcom)\r\n      end\r\n      -- Loop through all captured statements\r\n      for _,stmt in ipairs(lines) do\r\n\t-- Substitute macro parameters.\r\n\tlocal st = gsub(stmt, \"[%w_]+\", subst)\r\n\tst = definesubst(st)\r\n\tst = gsub(st, \"%s*%.%.%s*\", \"\") -- Token paste a..b.\r\n\tif mcom and sub(st, 1, 1) ~= \"|\" then wcomment(st) end\r\n\t-- Emit statement. Use a protected call for better diagnostics.\r\n\tlocal ok, err = pcall(dostmt, st)\r\n\tif not ok then\r\n\t  -- Add the captured statement to the error.\r\n\t  wprinterr(err, \"\\n\", g_indent, \"|  \", stmt,\r\n\t\t    \"\\t[MACRO \", name, \" (\", #mparams, \")]\\n\")\r\n\tend\r\n      end\r\n      if mcom then wcomment(\"}\"..mcom) end\r\n      mac_active[opname] = nil\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function(mparams)\r\n  if not mparams then return \"name [, params...]\" end\r\n  -- Split off and validate macro name.\r\n  local name = remove(mparams, 1)\r\n  if not name then werror(\"missing macro name\") end\r\n  if not (match(name, \"^[%a_][%w_%.]*$\") or match(name, \"^%.[%w_%.]+$\")) then\r\n    wfatal(\"bad macro name `\"..name..\"'\")\r\n  end\r\n  -- Validate macro parameter names.\r\n  local mdup = {}\r\n  for _,mp in ipairs(mparams) do\r\n    if not match(mp, \"^[%a_][%w_]*$\") then\r\n      wfatal(\"bad macro parameter name `\"..mp..\"'\")\r\n    end\r\n    if mdup[mp] then wfatal(\"duplicate macro parameter name `\"..mp..\"'\") end\r\n    mdup[mp] = true\r\n  end\r\n  -- Check for duplicate or recursive macro definitions.\r\n  local opname = name..\"_\"..#mparams\r\n  if map_op[opname] or map_op[name..\"_*\"] then\r\n    wfatal(\"duplicate macro `\"..name..\"' (\"..#mparams..\" parameters)\")\r\n  end\r\n  if mac_capture then wfatal(\"recursive macro definition\") end\r\n\r\n  -- Enable statement capture.\r\n  local lines = {}\r\n  mac_lineno = g_lineno\r\n  mac_name = name\r\n  mac_capture = function(stmt) -- Statement capture function.\r\n    -- Stop macro definition with .endmacro pseudo-opcode.\r\n    if not match(stmt, \"^%s*.endmacro%s*$\") then\r\n      lines[#lines+1] = stmt\r\n      return\r\n    end\r\n    mac_capture = nil\r\n    mac_lineno = nil\r\n    mac_name = nil\r\n    mac_list[#mac_list+1] = opname\r\n    -- Add macro-op definition.\r\n    map_op[opname] = function(params)\r\n      if not params then return mparams, lines end\r\n      -- Protect against recursive macro invocation.\r\n      if mac_active[opname] then wfatal(\"recursive macro invocation\") end\r\n      mac_active[opname] = true\r\n      -- Setup substitution map.\r\n      local subst = {}\r\n      for i,mp in ipairs(mparams) do subst[mp] = params[i] end\r\n      local mcom\r\n      if g_opt.maccomment and g_opt.comment then\r\n\tmcom = \" MACRO \"..name..\" (\"..#mparams..\")\"\r\n\twcomment(\"{\"..mcom)\r\n      end\r\n      -- Loop through all captured statements\r\n      for _,stmt in ipairs(lines) do\r\n\t-- Substitute macro parameters.\r\n\tlocal st = gsub(stmt, \"[%w_]+\", subst)\r\n\tst = definesubst(st)\r\n\tst = gsub(st, \"%s*%.%.%s*\", \"\") -- Token paste a..b.\r\n\tif mcom and sub(st, 1, 1) ~= \"|\" then wcomment(st) end\r\n\t-- Emit statement. Use a protected call for better diagnostics.\r\n\tlocal ok, err = pcall(dostmt, st)\r\n\tif not ok then\r\n\t  -- Add the captured statement to the error.\r\n\t  wprinterr(err, \"\\n\", g_indent, \"|  \", stmt,\r\n\t\t    \"\\t[MACRO \", name, \" (\", #mparams, \")]\\n\")\r\n\tend\r\n      end\r\n      if mcom then wcomment(\"}\"..mcom) end\r\n      mac_active[opname] = nil\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 222,
    "text": "if not mparams then return \"name [, params...]\" end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "local name = remove(mparams, 1)",
    "type": "statement:localassign"
  }, {
    "id": 224,
    "text": "if not name then werror(\"missing macro name\") end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "werror(\"missing macro name\")",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "if not (match(name, \"^[%a_][%w_%.]*$\") or match(name, \"^%.[%w_%.]+$\")) then\r\n    wfatal(\"bad macro name `\"..name..\"'\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "wfatal(\"bad macro name `\"..name..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "local mdup = {}",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "for _,mp in ipairs(mparams) do\r\n    if not match(mp, \"^[%a_][%w_]*$\") then\r\n      wfatal(\"bad macro parameter name `\"..mp..\"'\")\r\n    end\r\n    if mdup[mp] then wfatal(\"duplicate macro parameter name `\"..mp..\"'\") end\r\n    mdup[mp] = true\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 230,
    "text": "if not match(mp, \"^[%a_][%w_]*$\") then\r\n      wfatal(\"bad macro parameter name `\"..mp..\"'\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "wfatal(\"bad macro parameter name `\"..mp..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "if mdup[mp] then wfatal(\"duplicate macro parameter name `\"..mp..\"'\") end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "wfatal(\"duplicate macro parameter name `\"..mp..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "mdup[mp] = true",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "local opname = name..\"_\"..#mparams",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "if map_op[opname] or map_op[name..\"_*\"] then\r\n    wfatal(\"duplicate macro `\"..name..\"' (\"..#mparams..\" parameters)\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 237,
    "text": "wfatal(\"duplicate macro `\"..name..\"' (\"..#mparams..\" parameters)\")",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "if mac_capture then wfatal(\"recursive macro definition\") end",
    "type": "statement:if"
  }, {
    "id": 239,
    "text": "wfatal(\"recursive macro definition\")",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "local lines = {}",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "mac_lineno = g_lineno",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "mac_name = name",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "mac_capture = function(stmt) -- Statement capture function.\r\n    -- Stop macro definition with .endmacro pseudo-opcode.\r\n    if not match(stmt, \"^%s*.endmacro%s*$\") then\r\n      lines[#lines+1] = stmt\r\n      return\r\n    end\r\n    mac_capture = nil\r\n    mac_lineno = nil\r\n    mac_name = nil\r\n    mac_list[#mac_list+1] = opname\r\n    -- Add macro-op definition.\r\n    map_op[opname] = function(params)\r\n      if not params then return mparams, lines end\r\n      -- Protect against recursive macro invocation.\r\n      if mac_active[opname] then wfatal(\"recursive macro invocation\") end\r\n      mac_active[opname] = true\r\n      -- Setup substitution map.\r\n      local subst = {}\r\n      for i,mp in ipairs(mparams) do subst[mp] = params[i] end\r\n      local mcom\r\n      if g_opt.maccomment and g_opt.comment then\r\n\tmcom = \" MACRO \"..name..\" (\"..#mparams..\")\"\r\n\twcomment(\"{\"..mcom)\r\n      end\r\n      -- Loop through all captured statements\r\n      for _,stmt in ipairs(lines) do\r\n\t-- Substitute macro parameters.\r\n\tlocal st = gsub(stmt, \"[%w_]+\", subst)\r\n\tst = definesubst(st)\r\n\tst = gsub(st, \"%s*%.%.%s*\", \"\") -- Token paste a..b.\r\n\tif mcom and sub(st, 1, 1) ~= \"|\" then wcomment(st) end\r\n\t-- Emit statement. Use a protected call for better diagnostics.\r\n\tlocal ok, err = pcall(dostmt, st)\r\n\tif not ok then\r\n\t  -- Add the captured statement to the error.\r\n\t  wprinterr(err, \"\\n\", g_indent, \"|  \", stmt,\r\n\t\t    \"\\t[MACRO \", name, \" (\", #mparams, \")]\\n\")\r\n\tend\r\n      end\r\n      if mcom then wcomment(\"}\"..mcom) end\r\n      mac_active[opname] = nil\r\n    end\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function(params)\r\n  wfatal(\".endmacro without .macro\")\r\nend",
    "type": "function"
  }, {
    "id": 246,
    "text": "wfatal(\".endmacro without .macro\")",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "local function dumpmacros(out, lvl)\r\n  sort(mac_list)\r\n  out:write(\"Macros:\\n\")\r\n  for _,opname in ipairs(mac_list) do\r\n    local name = sub(opname, 1, -3)\r\n    local params, lines = map_op[opname]()\r\n    out:write(format(\"  %-20s %s\\n\", name, concat(params, \", \")))\r\n    if lvl > 1 then\r\n      for _,line in ipairs(lines) do\r\n\tout:write(\"  |\", line, \"\\n\")\r\n      end\r\n      out:write(\"\\n\")\r\n    end\r\n  end\r\n  out:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "sort(mac_list)",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "out:write(\"Macros:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 251,
    "text": "for _,opname in ipairs(mac_list) do\r\n    local name = sub(opname, 1, -3)\r\n    local params, lines = map_op[opname]()\r\n    out:write(format(\"  %-20s %s\\n\", name, concat(params, \", \")))\r\n    if lvl > 1 then\r\n      for _,line in ipairs(lines) do\r\n\tout:write(\"  |\", line, \"\\n\")\r\n      end\r\n      out:write(\"\\n\")\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 252,
    "text": "local name = sub(opname, 1, -3)",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "local params, lines = map_op[opname]()",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "out:write(format(\"  %-20s %s\\n\", name, concat(params, \", \")))",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "if lvl > 1 then\r\n      for _,line in ipairs(lines) do\r\n\tout:write(\"  |\", line, \"\\n\")\r\n      end\r\n      out:write(\"\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "for _,line in ipairs(lines) do\r\n\tout:write(\"  |\", line, \"\\n\")\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 257,
    "text": "out:write(\"  |\", line, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "local function checkmacros()\r\n  if mac_capture then\r\n    wprinterr(g_fname, \":\", mac_lineno,\r\n\t      \": error: unfinished .macro `\", mac_name ,\"'\\n\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 260,
    "text": "if mac_capture then\r\n    wprinterr(g_fname, \":\", mac_lineno,\r\n\t      \": error: unfinished .macro `\", mac_name ,\"'\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "wprinterr(g_fname, \":\", mac_lineno,\r\n\t      \": error: unfinished .macro `\", mac_name ,\"'\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function(params)\r\n  if not params then return \"name\" end\r\n  wflush()\r\n  local name = params[1]\r\n  if not match(name, \"^[%a_][%w_]*$\") then\r\n    wfatal(\"bad capture name `\"..name..\"'\")\r\n  end\r\n  if cap_name then\r\n    wfatal(\"already capturing to `\"..cap_name..\"' since line \"..cap_lineno)\r\n  end\r\n  cap_name = name\r\n  cap_lineno = g_lineno\r\n  -- Create or continue a capture buffer and start the output line capture.\r\n  local buf = cap_buffers[name]\r\n  if not buf then buf = {}; cap_buffers[name] = buf end\r\n  g_capbuffer = buf\r\n  g_synclineno = 0\r\nend",
    "type": "function"
  }, {
    "id": 264,
    "text": "if not params then return \"name\" end",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "wflush()",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "if not match(name, \"^[%a_][%w_]*$\") then\r\n    wfatal(\"bad capture name `\"..name..\"'\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "wfatal(\"bad capture name `\"..name..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "if cap_name then\r\n    wfatal(\"already capturing to `\"..cap_name..\"' since line \"..cap_lineno)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 269,
    "text": "wfatal(\"already capturing to `\"..cap_name..\"' since line \"..cap_lineno)",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "cap_name = name",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "cap_lineno = g_lineno",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "local buf = cap_buffers[name]",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "if not buf then buf = {}; cap_buffers[name] = buf end",
    "type": "statement:if"
  }, {
    "id": 274,
    "text": "buf = {}",
    "type": "statement:assign"
  }, {
    "id": 275,
    "text": "cap_buffers[name] = buf",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "g_capbuffer = buf",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "g_synclineno = 0",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 279,
    "text": "function(params)\r\n  wflush()\r\n  if not cap_name then wfatal(\".endcapture without a valid .capture\") end\r\n  cap_name = nil\r\n  cap_lineno = nil\r\n  g_capbuffer = nil\r\n  g_synclineno = 0\r\nend",
    "type": "function"
  }, {
    "id": 280,
    "text": "if not cap_name then wfatal(\".endcapture without a valid .capture\") end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "wfatal(\".endcapture without a valid .capture\")",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "cap_name = nil",
    "type": "statement:assign"
  }, {
    "id": 283,
    "text": "cap_lineno = nil",
    "type": "statement:assign"
  }, {
    "id": 284,
    "text": "g_capbuffer = nil",
    "type": "statement:assign"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "function(params)\r\n  if not params then return \"name\" end\r\n  wflush()\r\n  local name = params[1]\r\n  if not match(name, \"^[%a_][%w_]*$\") then\r\n    wfatal(\"bad capture name `\"..name..\"'\")\r\n  end\r\n  cap_used[name] = true\r\n  wline(function(out)\r\n    local buf = cap_buffers[name]\r\n    if buf then wdumplines(out, buf) end\r\n  end)\r\n  g_synclineno = 0\r\nend",
    "type": "function"
  }, {
    "id": 287,
    "text": "cap_used[name] = true",
    "type": "statement:assign"
  }, {
    "id": 288,
    "text": "wline(function(out)\r\n    local buf = cap_buffers[name]\r\n    if buf then wdumplines(out, buf) end\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "if buf then wdumplines(out, buf) end",
    "type": "statement:if"
  }, {
    "id": 290,
    "text": "wdumplines(out, buf)",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 292,
    "text": "local function dumpcaptures(out, lvl)\r\n  out:write(\"Captures:\\n\")\r\n  for name,buf in pairs(cap_buffers) do\r\n    out:write(format(\"  %-20s %4s)\\n\", name, \"(\"..#buf))\r\n    if lvl > 1 then\r\n      local bar = rep(\"=\", 76)\r\n      out:write(\"  \", bar, \"\\n\")\r\n      for _,line in ipairs(buf) do\r\n\tout:write(\"  \", line, \"\\n\")\r\n      end\r\n      out:write(\"  \", bar, \"\\n\\n\")\r\n    end\r\n  end\r\n  out:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 293,
    "text": "out:write(\"Captures:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "for name,buf in pairs(cap_buffers) do\r\n    out:write(format(\"  %-20s %4s)\\n\", name, \"(\"..#buf))\r\n    if lvl > 1 then\r\n      local bar = rep(\"=\", 76)\r\n      out:write(\"  \", bar, \"\\n\")\r\n      for _,line in ipairs(buf) do\r\n\tout:write(\"  \", line, \"\\n\")\r\n      end\r\n      out:write(\"  \", bar, \"\\n\\n\")\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 295,
    "text": "out:write(format(\"  %-20s %4s)\\n\", name, \"(\"..#buf))",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "if lvl > 1 then\r\n      local bar = rep(\"=\", 76)\r\n      out:write(\"  \", bar, \"\\n\")\r\n      for _,line in ipairs(buf) do\r\n\tout:write(\"  \", line, \"\\n\")\r\n      end\r\n      out:write(\"  \", bar, \"\\n\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 297,
    "text": "local bar = rep(\"=\", 76)",
    "type": "statement:localassign"
  }, {
    "id": 298,
    "text": "out:write(\"  \", bar, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "for _,line in ipairs(buf) do\r\n\tout:write(\"  \", line, \"\\n\")\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 300,
    "text": "out:write(\"  \", line, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 301,
    "text": "out:write(\"  \", bar, \"\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 303,
    "text": "local function checkcaptures()\r\n  if cap_name then\r\n    wprinterr(g_fname, \":\", cap_lineno,\r\n\t      \": error: unfinished .capture `\", cap_name,\"'\\n\")\r\n    return\r\n  end\r\n  for name in pairs(cap_buffers) do\r\n    if not cap_used[name] then\r\n      wprinterr(g_fname, \":*: error: missing .dumpcapture \", name ,\"\\n\")\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 304,
    "text": "if cap_name then\r\n    wprinterr(g_fname, \":\", cap_lineno,\r\n\t      \": error: unfinished .capture `\", cap_name,\"'\\n\")\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 305,
    "text": "wprinterr(g_fname, \":\", cap_lineno,\r\n\t      \": error: unfinished .capture `\", cap_name,\"'\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "for name in pairs(cap_buffers) do\r\n    if not cap_used[name] then\r\n      wprinterr(g_fname, \":*: error: missing .dumpcapture \", name ,\"\\n\")\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 307,
    "text": "if not cap_used[name] then\r\n      wprinterr(g_fname, \":*: error: missing .dumpcapture \", name ,\"\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "wprinterr(g_fname, \":*: error: missing .dumpcapture \", name ,\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 310,
    "text": "function(params) g_arch.section(sn-1) end",
    "type": "function"
  }, {
    "id": 311,
    "text": "g_arch.section(sn-1)",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "function(params)\r\n  if not params then return \"name...\" end\r\n  if #map_sections > 0 then werror(\"duplicate section definition\") end\r\n  wflush()\r\n  for sn,name in ipairs(params) do\r\n    local opname = \".\"..name..\"_0\"\r\n    if not match(name, \"^[%a][%w_]*$\") or\r\n       map_op[opname] or map_op[\".\"..name..\"_*\"] then\r\n      werror(\"bad section name `\"..name..\"'\")\r\n    end\r\n    map_sections[#map_sections+1] = name\r\n    wline(format(\"#define DASM_SECTION_%s\\t%d\", upper(name), sn-1))\r\n    map_op[opname] = function(params) g_arch.section(sn-1) end\r\n  end\r\n  wline(format(\"#define DASM_MAXSECTION\\t\\t%d\", #map_sections))\r\nend",
    "type": "function"
  }, {
    "id": 313,
    "text": "if not params then return \"name...\" end",
    "type": "statement:if"
  }, {
    "id": 314,
    "text": "if #map_sections > 0 then werror(\"duplicate section definition\") end",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "werror(\"duplicate section definition\")",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "for sn,name in ipairs(params) do\r\n    local opname = \".\"..name..\"_0\"\r\n    if not match(name, \"^[%a][%w_]*$\") or\r\n       map_op[opname] or map_op[\".\"..name..\"_*\"] then\r\n      werror(\"bad section name `\"..name..\"'\")\r\n    end\r\n    map_sections[#map_sections+1] = name\r\n    wline(format(\"#define DASM_SECTION_%s\\t%d\", upper(name), sn-1))\r\n    map_op[opname] = function(params) g_arch.section(sn-1) end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 317,
    "text": "local opname = \".\"..name..\"_0\"",
    "type": "statement:localassign"
  }, {
    "id": 318,
    "text": "if not match(name, \"^[%a][%w_]*$\") or\r\n       map_op[opname] or map_op[\".\"..name..\"_*\"] then\r\n      werror(\"bad section name `\"..name..\"'\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 319,
    "text": "werror(\"bad section name `\"..name..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "map_sections[#map_sections+1] = name",
    "type": "statement:assign"
  }, {
    "id": 321,
    "text": "wline(format(\"#define DASM_SECTION_%s\\t%d\", upper(name), sn-1))",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "map_op[opname] = function(params) g_arch.section(sn-1) end",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "wline(format(\"#define DASM_MAXSECTION\\t\\t%d\", #map_sections))",
    "type": "statement:functioncall"
  }, {
    "id": 324,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 325,
    "text": "local function dumpsections(out, lvl)\r\n  out:write(\"Sections:\\n\")\r\n  for _,name in ipairs(map_sections) do\r\n    out:write(format(\"  %s\\n\", name))\r\n  end\r\n  out:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 326,
    "text": "out:write(\"Sections:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "for _,name in ipairs(map_sections) do\r\n    out:write(format(\"  %s\\n\", name))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 328,
    "text": "out:write(format(\"  %s\\n\", name))",
    "type": "statement:functioncall"
  }, {
    "id": 329,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 330,
    "text": "local function loadarch(arch)\r\n  if not match(arch, \"^[%w_]+$\") then return \"bad arch name\" end\r\n  local ok, m_arch = pcall(require, \"dasm_\"..arch)\r\n  if not ok then return \"cannot load module: \"..m_arch end\r\n  g_arch = m_arch\r\n  wflush = m_arch.passcb(wline, werror, wfatal, wwarn)\r\n  m_arch.setup(arch, g_opt)\r\n  map_op, map_def = m_arch.mergemaps(map_coreop, map_def)\r\nend",
    "type": "function"
  }, {
    "id": 331,
    "text": "if not match(arch, \"^[%w_]+$\") then return \"bad arch name\" end",
    "type": "statement:if"
  }, {
    "id": 332,
    "text": "local ok, m_arch = pcall(require, \"dasm_\"..arch)",
    "type": "statement:localassign"
  }, {
    "id": 333,
    "text": "if not ok then return \"cannot load module: \"..m_arch end",
    "type": "statement:if"
  }, {
    "id": 334,
    "text": "g_arch = m_arch",
    "type": "statement:assign"
  }, {
    "id": 335,
    "text": "wflush = m_arch.passcb(wline, werror, wfatal, wwarn)",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "m_arch.setup(arch, g_opt)",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "map_op, map_def = m_arch.mergemaps(map_coreop, map_def)",
    "type": "statement:assign"
  }, {
    "id": 338,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 339,
    "text": "function opt_map.dumparch(args)\r\n  local name = optparam(args)\r\n  if not g_arch then\r\n    local err = loadarch(name)\r\n    if err then opterror(err) end\r\n  end\r\n\r\n  local t = {}\r\n  for name in pairs(map_coreop) do t[#t+1] = name end\r\n  for name in pairs(map_op) do t[#t+1] = name end\r\n  sort(t)\r\n\r\n  local out = stdout\r\n  local _arch = g_arch._info\r\n  out:write(format(\"%s version %s, released %s, %s\\n\",\r\n    _info.name, _info.version, _info.release, _info.url))\r\n  g_arch.dumparch(out)\r\n\r\n  local pseudo = true\r\n  out:write(\"Pseudo-Opcodes:\\n\")\r\n  for _,sname in ipairs(t) do\r\n    local name, nparam = match(sname, \"^(.+)_([0-9%*])$\")\r\n    if name then\r\n      if pseudo and sub(name, 1, 1) ~= \".\" then\r\n\tout:write(\"\\nOpcodes:\\n\")\r\n\tpseudo = false\r\n      end\r\n      local f = map_op[sname]\r\n      local s\r\n      if nparam ~= \"*\" then nparam = nparam + 0 end\r\n      if nparam == 0 then\r\n\ts = \"\"\r\n      elseif type(f) == \"string\" then\r\n\ts = map_op[\".template__\"](nil, f, nparam)\r\n      else\r\n\ts = f(nil, nparam)\r\n      end\r\n      if type(s) == \"table\" then\r\n\tfor _,s2 in ipairs(s) do\r\n\t  out:write(format(\"  %-12s %s\\n\", name, s2))\r\n\tend\r\n      else\r\n\tout:write(format(\"  %-12s %s\\n\", name, s))\r\n      end\r\n    end\r\n  end\r\n  out:write(\"\\n\")\r\n  exit(0)\r\nend",
    "type": "function"
  }, {
    "id": 340,
    "text": "if not g_arch then\r\n    local err = loadarch(name)\r\n    if err then opterror(err) end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 341,
    "text": "local err = loadarch(name)",
    "type": "statement:localassign"
  }, {
    "id": 342,
    "text": "if err then opterror(err) end",
    "type": "statement:if"
  }, {
    "id": 343,
    "text": "opterror(err)",
    "type": "statement:functioncall"
  }, {
    "id": 344,
    "text": "for name in pairs(map_coreop) do t[#t+1] = name end",
    "type": "statement:genericfor"
  }, {
    "id": 345,
    "text": "for name in pairs(map_op) do t[#t+1] = name end",
    "type": "statement:genericfor"
  }, {
    "id": 346,
    "text": "local out = stdout",
    "type": "statement:localassign"
  }, {
    "id": 347,
    "text": "local _arch = g_arch._info",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "out:write(format(\"%s version %s, released %s, %s\\n\",\r\n    _info.name, _info.version, _info.release, _info.url))",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "g_arch.dumparch(out)",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "local pseudo = true",
    "type": "statement:localassign"
  }, {
    "id": 351,
    "text": "out:write(\"Pseudo-Opcodes:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "for _,sname in ipairs(t) do\r\n    local name, nparam = match(sname, \"^(.+)_([0-9%*])$\")\r\n    if name then\r\n      if pseudo and sub(name, 1, 1) ~= \".\" then\r\n\tout:write(\"\\nOpcodes:\\n\")\r\n\tpseudo = false\r\n      end\r\n      local f = map_op[sname]\r\n      local s\r\n      if nparam ~= \"*\" then nparam = nparam + 0 end\r\n      if nparam == 0 then\r\n\ts = \"\"\r\n      elseif type(f) == \"string\" then\r\n\ts = map_op[\".template__\"](nil, f, nparam)\r\n      else\r\n\ts = f(nil, nparam)\r\n      end\r\n      if type(s) == \"table\" then\r\n\tfor _,s2 in ipairs(s) do\r\n\t  out:write(format(\"  %-12s %s\\n\", name, s2))\r\n\tend\r\n      else\r\n\tout:write(format(\"  %-12s %s\\n\", name, s))\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 353,
    "text": "local name, nparam = match(sname, \"^(.+)_([0-9%*])$\")",
    "type": "statement:localassign"
  }, {
    "id": 354,
    "text": "if name then\r\n      if pseudo and sub(name, 1, 1) ~= \".\" then\r\n\tout:write(\"\\nOpcodes:\\n\")\r\n\tpseudo = false\r\n      end\r\n      local f = map_op[sname]\r\n      local s\r\n      if nparam ~= \"*\" then nparam = nparam + 0 end\r\n      if nparam == 0 then\r\n\ts = \"\"\r\n      elseif type(f) == \"string\" then\r\n\ts = map_op[\".template__\"](nil, f, nparam)\r\n      else\r\n\ts = f(nil, nparam)\r\n      end\r\n      if type(s) == \"table\" then\r\n\tfor _,s2 in ipairs(s) do\r\n\t  out:write(format(\"  %-12s %s\\n\", name, s2))\r\n\tend\r\n      else\r\n\tout:write(format(\"  %-12s %s\\n\", name, s))\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 355,
    "text": "if pseudo and sub(name, 1, 1) ~= \".\" then\r\n\tout:write(\"\\nOpcodes:\\n\")\r\n\tpseudo = false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 356,
    "text": "out:write(\"\\nOpcodes:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "pseudo = false",
    "type": "statement:assign"
  }, {
    "id": 358,
    "text": "local f = map_op[sname]",
    "type": "statement:localassign"
  }, {
    "id": 359,
    "text": "local s",
    "type": "statement:localassign"
  }, {
    "id": 360,
    "text": "if nparam ~= \"*\" then nparam = nparam + 0 end",
    "type": "statement:if"
  }, {
    "id": 361,
    "text": "nparam = nparam + 0",
    "type": "statement:assign"
  }, {
    "id": 362,
    "text": "if nparam == 0 then\r\n\ts = \"\"\r\n      elseif type(f) == \"string\" then\r\n\ts = map_op[\".template__\"](nil, f, nparam)\r\n      else\r\n\ts = f(nil, nparam)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 363,
    "text": "s = \"\"",
    "type": "statement:assign"
  }, {
    "id": 364,
    "text": "s = map_op[\".template__\"](nil, f, nparam)",
    "type": "statement:assign"
  }, {
    "id": 365,
    "text": "s = f(nil, nparam)",
    "type": "statement:assign"
  }, {
    "id": 366,
    "text": "if type(s) == \"table\" then\r\n\tfor _,s2 in ipairs(s) do\r\n\t  out:write(format(\"  %-12s %s\\n\", name, s2))\r\n\tend\r\n      else\r\n\tout:write(format(\"  %-12s %s\\n\", name, s))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 367,
    "text": "for _,s2 in ipairs(s) do\r\n\t  out:write(format(\"  %-12s %s\\n\", name, s2))\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 368,
    "text": "out:write(format(\"  %-12s %s\\n\", name, s2))",
    "type": "statement:functioncall"
  }, {
    "id": 369,
    "text": "out:write(format(\"  %-12s %s\\n\", name, s))",
    "type": "statement:functioncall"
  }, {
    "id": 370,
    "text": "exit(0)",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "function(params)\r\n  if not params then return \"name\" end\r\n  local err = loadarch(params[1])\r\n  if err then wfatal(err) end\r\nend",
    "type": "function"
  }, {
    "id": 373,
    "text": "local err = loadarch(params[1])",
    "type": "statement:localassign"
  }, {
    "id": 374,
    "text": "if err then wfatal(err) end",
    "type": "statement:if"
  }, {
    "id": 375,
    "text": "wfatal(err)",
    "type": "statement:functioncall"
  }, {
    "id": 376,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 377,
    "text": "function(params)\r\n  if not params then return \"name\" end\r\n  wfatal(\"duplicate .arch statement\")\r\nend",
    "type": "function"
  }, {
    "id": 378,
    "text": "wfatal(\"duplicate .arch statement\")",
    "type": "statement:functioncall"
  }, {
    "id": 379,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 380,
    "text": "function(params)\r\n  if not params then return \"[ignored...]\" end\r\nend",
    "type": "function"
  }, {
    "id": 381,
    "text": "if not params then return \"[ignored...]\" end",
    "type": "statement:if"
  }, {
    "id": 382,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 383,
    "text": "function(params)\r\n  if not params then return \"message\" end\r\n  werror(params[1])\r\nend",
    "type": "function"
  }, {
    "id": 384,
    "text": "if not params then return \"message\" end",
    "type": "statement:if"
  }, {
    "id": 385,
    "text": "werror(params[1])",
    "type": "statement:functioncall"
  }, {
    "id": 386,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 387,
    "text": "function(params)\r\n  if not params then return \"message\" end\r\n  wfatal(params[1])\r\nend",
    "type": "function"
  }, {
    "id": 388,
    "text": "wfatal(params[1])",
    "type": "statement:functioncall"
  }, {
    "id": 389,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 390,
    "text": "local function dumpdef(out)\r\n  local lvl = g_opt.dumpdef\r\n  if lvl == 0 then return end\r\n  dumpsections(out, lvl)\r\n  dumpdefines(out, lvl)\r\n  if g_arch then g_arch.dumpdef(out, lvl) end\r\n  dumpmacros(out, lvl)\r\n  dumpcaptures(out, lvl)\r\nend",
    "type": "function"
  }, {
    "id": 391,
    "text": "local lvl = g_opt.dumpdef",
    "type": "statement:localassign"
  }, {
    "id": 392,
    "text": "if lvl == 0 then return end",
    "type": "statement:if"
  }, {
    "id": 393,
    "text": "dumpsections(out, lvl)",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "dumpdefines(out, lvl)",
    "type": "statement:functioncall"
  }, {
    "id": 395,
    "text": "if g_arch then g_arch.dumpdef(out, lvl) end",
    "type": "statement:if"
  }, {
    "id": 396,
    "text": "g_arch.dumpdef(out, lvl)",
    "type": "statement:functioncall"
  }, {
    "id": 397,
    "text": "dumpmacros(out, lvl)",
    "type": "statement:functioncall"
  }, {
    "id": 398,
    "text": "dumpcaptures(out, lvl)",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 400,
    "text": "local function splitstmt_one(c)\r\n  if c == \"(\" then\r\n    splitlvl = \")\"..splitlvl\r\n  elseif c == \"[\" then\r\n    splitlvl = \"]\"..splitlvl\r\n  elseif c == \"{\" then\r\n    splitlvl = \"}\"..splitlvl\r\n  elseif c == \")\" or c == \"]\" or c == \"}\" then\r\n    if sub(splitlvl, 1, 1) ~= c then werror(\"unbalanced (), [] or {}\") end\r\n    splitlvl = sub(splitlvl, 2)\r\n  elseif splitlvl == \"\" then\r\n    return \" \\0 \"\r\n  end\r\n  return c\r\nend",
    "type": "function"
  }, {
    "id": 401,
    "text": "if c == \"(\" then\r\n    splitlvl = \")\"..splitlvl\r\n  elseif c == \"[\" then\r\n    splitlvl = \"]\"..splitlvl\r\n  elseif c == \"{\" then\r\n    splitlvl = \"}\"..splitlvl\r\n  elseif c == \")\" or c == \"]\" or c == \"}\" then\r\n    if sub(splitlvl, 1, 1) ~= c then werror(\"unbalanced (), [] or {}\") end\r\n    splitlvl = sub(splitlvl, 2)\r\n  elseif splitlvl == \"\" then\r\n    return \" \\0 \"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 402,
    "text": "splitlvl = \")\"..splitlvl",
    "type": "statement:assign"
  }, {
    "id": 403,
    "text": "splitlvl = \"]\"..splitlvl",
    "type": "statement:assign"
  }, {
    "id": 404,
    "text": "splitlvl = \"}\"..splitlvl",
    "type": "statement:assign"
  }, {
    "id": 405,
    "text": "if sub(splitlvl, 1, 1) ~= c then werror(\"unbalanced (), [] or {}\") end",
    "type": "statement:if"
  }, {
    "id": 406,
    "text": "werror(\"unbalanced (), [] or {}\")",
    "type": "statement:functioncall"
  }, {
    "id": 407,
    "text": "splitlvl = sub(splitlvl, 2)",
    "type": "statement:assign"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "local function splitstmt(stmt)\r\n  -- Convert label with trailing-colon into .label statement.\r\n  local label = match(stmt, \"^%s*(.+):%s*$\")\r\n  if label then return \".label\", {label} end\r\n\r\n  -- Split at commas and equal signs, but obey parentheses and brackets.\r\n  splitlvl = \"\"\r\n  stmt = gsub(stmt, \"[,%(%)%[%]{}]\", splitstmt_one)\r\n  if splitlvl ~= \"\" then werror(\"unbalanced () or []\") end\r\n\r\n  -- Split off opcode.\r\n  local op, other = match(stmt, \"^%s*([^%s%z]+)%s*(.*)$\")\r\n  if not op then werror(\"bad statement syntax\") end\r\n\r\n  -- Split parameters.\r\n  local params = {}\r\n  for p in gmatch(other, \"%s*(%Z+)%z?\") do\r\n    params[#params+1] = gsub(p, \"%s+$\", \"\")\r\n  end\r\n  if #params > 16 then werror(\"too many parameters\") end\r\n\r\n  params.op = op\r\n  return op, params\r\nend",
    "type": "function"
  }, {
    "id": 410,
    "text": "local label = match(stmt, \"^%s*(.+):%s*$\")",
    "type": "statement:localassign"
  }, {
    "id": 411,
    "text": "if label then return \".label\", {label} end",
    "type": "statement:if"
  }, {
    "id": 412,
    "text": "splitlvl = \"\"",
    "type": "statement:assign"
  }, {
    "id": 413,
    "text": "stmt = gsub(stmt, \"[,%(%)%[%]{}]\", splitstmt_one)",
    "type": "statement:assign"
  }, {
    "id": 414,
    "text": "if splitlvl ~= \"\" then werror(\"unbalanced () or []\") end",
    "type": "statement:if"
  }, {
    "id": 415,
    "text": "werror(\"unbalanced () or []\")",
    "type": "statement:functioncall"
  }, {
    "id": 416,
    "text": "local op, other = match(stmt, \"^%s*([^%s%z]+)%s*(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 417,
    "text": "if not op then werror(\"bad statement syntax\") end",
    "type": "statement:if"
  }, {
    "id": 418,
    "text": "werror(\"bad statement syntax\")",
    "type": "statement:functioncall"
  }, {
    "id": 419,
    "text": "local params = {}",
    "type": "statement:localassign"
  }, {
    "id": 420,
    "text": "for p in gmatch(other, \"%s*(%Z+)%z?\") do\r\n    params[#params+1] = gsub(p, \"%s+$\", \"\")\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 421,
    "text": "params[#params+1] = gsub(p, \"%s+$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 422,
    "text": "if #params > 16 then werror(\"too many parameters\") end",
    "type": "statement:if"
  }, {
    "id": 423,
    "text": "werror(\"too many parameters\")",
    "type": "statement:functioncall"
  }, {
    "id": 424,
    "text": "params.op = op",
    "type": "statement:assign"
  }, {
    "id": 425,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 426,
    "text": "function(stmt)\r\n  -- Ignore empty statements.\r\n  if match(stmt, \"^%s*$\") then return end\r\n\r\n  -- Capture macro defs before substitution.\r\n  if mac_capture then return mac_capture(stmt) end\r\n  stmt = definesubst(stmt)\r\n\r\n  -- Emit C code without parsing the line.\r\n  if sub(stmt, 1, 1) == \"|\" then\r\n    local tail = sub(stmt, 2)\r\n    wflush()\r\n    if sub(tail, 1, 2) == \"//\" then wcomment(tail) else wline(tail, true) end\r\n    return\r\n  end\r\n\r\n  -- Split into (pseudo-)opcode and params.\r\n  local op, params = splitstmt(stmt)\r\n\r\n  -- Get opcode handler (matching # of parameters or generic handler).\r\n  local f = map_op[op..\"_\"..#params] or map_op[op..\"_*\"]\r\n  if not f then\r\n    if not g_arch then wfatal(\"first statement must be .arch\") end\r\n    -- Improve error report.\r\n    for i=0,9 do\r\n      if map_op[op..\"_\"..i] then\r\n\twerror(\"wrong number of parameters for `\"..op..\"'\")\r\n      end\r\n    end\r\n    werror(\"unknown statement `\"..op..\"'\")\r\n  end\r\n\r\n  -- Call opcode handler or special handler for template strings.\r\n  if type(f) == \"string\" then\r\n    map_op[\".template__\"](params, f)\r\n  else\r\n    f(params)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 427,
    "text": "if match(stmt, \"^%s*$\") then return end",
    "type": "statement:if"
  }, {
    "id": 428,
    "text": "if mac_capture then return mac_capture(stmt) end",
    "type": "statement:if"
  }, {
    "id": 429,
    "text": "stmt = definesubst(stmt)",
    "type": "statement:assign"
  }, {
    "id": 430,
    "text": "if sub(stmt, 1, 1) == \"|\" then\r\n    local tail = sub(stmt, 2)\r\n    wflush()\r\n    if sub(tail, 1, 2) == \"//\" then wcomment(tail) else wline(tail, true) end\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 431,
    "text": "local tail = sub(stmt, 2)",
    "type": "statement:localassign"
  }, {
    "id": 432,
    "text": "if sub(tail, 1, 2) == \"//\" then wcomment(tail) else wline(tail, true) end",
    "type": "statement:if"
  }, {
    "id": 433,
    "text": "wcomment(tail)",
    "type": "statement:functioncall"
  }, {
    "id": 434,
    "text": "wline(tail, true)",
    "type": "statement:functioncall"
  }, {
    "id": 435,
    "text": "local op, params = splitstmt(stmt)",
    "type": "statement:localassign"
  }, {
    "id": 436,
    "text": "local f = map_op[op..\"_\"..#params] or map_op[op..\"_*\"]",
    "type": "statement:localassign"
  }, {
    "id": 437,
    "text": "if not f then\r\n    if not g_arch then wfatal(\"first statement must be .arch\") end\r\n    -- Improve error report.\r\n    for i=0,9 do\r\n      if map_op[op..\"_\"..i] then\r\n\twerror(\"wrong number of parameters for `\"..op..\"'\")\r\n      end\r\n    end\r\n    werror(\"unknown statement `\"..op..\"'\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 438,
    "text": "if not g_arch then wfatal(\"first statement must be .arch\") end",
    "type": "statement:if"
  }, {
    "id": 439,
    "text": "wfatal(\"first statement must be .arch\")",
    "type": "statement:functioncall"
  }, {
    "id": 440,
    "text": "for i=0,9 do\r\n      if map_op[op..\"_\"..i] then\r\n\twerror(\"wrong number of parameters for `\"..op..\"'\")\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 441,
    "text": "if map_op[op..\"_\"..i] then\r\n\twerror(\"wrong number of parameters for `\"..op..\"'\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 442,
    "text": "werror(\"wrong number of parameters for `\"..op..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 443,
    "text": "werror(\"unknown statement `\"..op..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 444,
    "text": "if type(f) == \"string\" then\r\n    map_op[\".template__\"](params, f)\r\n  else\r\n    f(params)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 445,
    "text": "map_op[\".template__\"](params, f)",
    "type": "statement:functioncall"
  }, {
    "id": 446,
    "text": "f(params)",
    "type": "statement:functioncall"
  }, {
    "id": 447,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 448,
    "text": "local function doline(line)\r\n  if g_opt.flushline then wflush() end\r\n\r\n  -- Assembler line?\r\n  local indent, aline = match(line, \"^(%s*)%|(.*)$\")\r\n  if not aline then\r\n    -- No, plain C code line, need to flush first.\r\n    wflush()\r\n    wsync()\r\n    wline(line, false)\r\n    return\r\n  end\r\n\r\n  g_indent = indent -- Remember current line indentation.\r\n\r\n  -- Emit C code (even from macros). Avoids echo and line parsing.\r\n  if sub(aline, 1, 1) == \"|\" then\r\n    if not mac_capture then\r\n      wsync()\r\n    elseif g_opt.comment then\r\n      wsync()\r\n      wcomment(aline)\r\n    end\r\n    dostmt(aline)\r\n    return\r\n  end\r\n\r\n  -- Echo assembler line as a comment.\r\n  if g_opt.comment then\r\n    wsync()\r\n    wcomment(aline)\r\n  end\r\n\r\n  -- Strip assembler comments.\r\n  aline = gsub(aline, \"//.*$\", \"\")\r\n\r\n  -- Split line into statements at semicolons.\r\n  if match(aline, \";\") then\r\n    for stmt in gmatch(aline, \"[^;]+\") do dostmt(stmt) end\r\n  else\r\n    dostmt(aline)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 449,
    "text": "if g_opt.flushline then wflush() end",
    "type": "statement:if"
  }, {
    "id": 450,
    "text": "local indent, aline = match(line, \"^(%s*)%|(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 451,
    "text": "if not aline then\r\n    -- No, plain C code line, need to flush first.\r\n    wflush()\r\n    wsync()\r\n    wline(line, false)\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 452,
    "text": "wsync()",
    "type": "statement:functioncall"
  }, {
    "id": 453,
    "text": "wline(line, false)",
    "type": "statement:functioncall"
  }, {
    "id": 454,
    "text": "g_indent = indent",
    "type": "statement:assign"
  }, {
    "id": 455,
    "text": "if sub(aline, 1, 1) == \"|\" then\r\n    if not mac_capture then\r\n      wsync()\r\n    elseif g_opt.comment then\r\n      wsync()\r\n      wcomment(aline)\r\n    end\r\n    dostmt(aline)\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 456,
    "text": "if not mac_capture then\r\n      wsync()\r\n    elseif g_opt.comment then\r\n      wsync()\r\n      wcomment(aline)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 457,
    "text": "wcomment(aline)",
    "type": "statement:functioncall"
  }, {
    "id": 458,
    "text": "dostmt(aline)",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "if g_opt.comment then\r\n    wsync()\r\n    wcomment(aline)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 460,
    "text": "aline = gsub(aline, \"//.*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 461,
    "text": "if match(aline, \";\") then\r\n    for stmt in gmatch(aline, \"[^;]+\") do dostmt(stmt) end\r\n  else\r\n    dostmt(aline)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 462,
    "text": "for stmt in gmatch(aline, \"[^;]+\") do dostmt(stmt) end",
    "type": "statement:genericfor"
  }, {
    "id": 463,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 464,
    "text": "local function dasmhead(out)\r\n  out:write(format([[\r\n/*\r\n** This file has been pre-processed with DynASM.\r\n** %s\r\n** DynASM version %s, DynASM %s version %s\r\n** DO NOT EDIT! The original file is in \"%s\".\r\n*/\r\n\r\n#if DASM_VERSION != %d\r\n#error \"Version mismatch between DynASM and included encoding engine\"\r\n#endif\r\n\r\n]], _info.url,\r\n    _info.version, g_arch._info.arch, g_arch._info.version,\r\n    g_fname, _info.vernum))\r\nend",
    "type": "function"
  }, {
    "id": 465,
    "text": "out:write(format([[\r\n/*\r\n** This file has been pre-processed with DynASM.\r\n** %s\r\n** DynASM version %s, DynASM %s version %s\r\n** DO NOT EDIT! The original file is in \"%s\".\r\n*/\r\n\r\n#if DASM_VERSION != %d\r\n#error \"Version mismatch between DynASM and included encoding engine\"\r\n#endif\r\n\r\n]], _info.url,\r\n    _info.version, g_arch._info.arch, g_arch._info.version,\r\n    g_fname, _info.vernum))",
    "type": "statement:functioncall"
  }, {
    "id": 466,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 467,
    "text": "function(fin)\r\n  g_indent = \"\"\r\n  g_lineno = 0\r\n  g_synclineno = -1\r\n\r\n  -- Process all lines.\r\n  for line in fin:lines() do\r\n    g_lineno = g_lineno + 1\r\n    g_curline = line\r\n    local ok, err = pcall(doline, line)\r\n    if not ok and wprinterr(err, \"\\n\") then return true end\r\n  end\r\n  wflush()\r\n\r\n  -- Close input file.\r\n  assert(fin == stdin or fin:close())\r\nend",
    "type": "function"
  }, {
    "id": 468,
    "text": "g_indent = \"\"",
    "type": "statement:assign"
  }, {
    "id": 469,
    "text": "g_lineno = 0",
    "type": "statement:assign"
  }, {
    "id": 470,
    "text": "for line in fin:lines() do\r\n    g_lineno = g_lineno + 1\r\n    g_curline = line\r\n    local ok, err = pcall(doline, line)\r\n    if not ok and wprinterr(err, \"\\n\") then return true end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 471,
    "text": "g_lineno = g_lineno + 1",
    "type": "statement:assign"
  }, {
    "id": 472,
    "text": "g_curline = line",
    "type": "statement:assign"
  }, {
    "id": 473,
    "text": "local ok, err = pcall(doline, line)",
    "type": "statement:localassign"
  }, {
    "id": 474,
    "text": "if not ok and wprinterr(err, \"\\n\") then return true end",
    "type": "statement:if"
  }, {
    "id": 475,
    "text": "assert(fin == stdin or fin:close())",
    "type": "statement:functioncall"
  }, {
    "id": 476,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 477,
    "text": "local function writefile(outfile)\r\n  local fout\r\n\r\n  -- Open output file.\r\n  if outfile == nil or outfile == \"-\" then\r\n    fout = stdout\r\n  else\r\n    fout = assert(io.open(outfile, \"w\"))\r\n  end\r\n\r\n  -- Write all buffered lines\r\n  wdumplines(fout, g_wbuffer)\r\n\r\n  -- Close output file.\r\n  assert(fout == stdout or fout:close())\r\n\r\n  -- Optionally dump definitions.\r\n  dumpdef(fout == stdout and stderr or stdout)\r\nend",
    "type": "function"
  }, {
    "id": 478,
    "text": "local fout",
    "type": "statement:localassign"
  }, {
    "id": 479,
    "text": "if outfile == nil or outfile == \"-\" then\r\n    fout = stdout\r\n  else\r\n    fout = assert(io.open(outfile, \"w\"))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 480,
    "text": "fout = stdout",
    "type": "statement:assign"
  }, {
    "id": 481,
    "text": "fout = assert(io.open(outfile, \"w\"))",
    "type": "statement:assign"
  }, {
    "id": 482,
    "text": "wdumplines(fout, g_wbuffer)",
    "type": "statement:functioncall"
  }, {
    "id": 483,
    "text": "assert(fout == stdout or fout:close())",
    "type": "statement:functioncall"
  }, {
    "id": 484,
    "text": "dumpdef(fout == stdout and stderr or stdout)",
    "type": "statement:functioncall"
  }, {
    "id": 485,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 486,
    "text": "local function translate(infile, outfile)\r\n  g_wbuffer = {}\r\n  g_indent = \"\"\r\n  g_lineno = 0\r\n  g_synclineno = -1\r\n\r\n  -- Put header.\r\n  wline(dasmhead)\r\n\r\n  -- Read input file.\r\n  local fin\r\n  if infile == \"-\" then\r\n    g_fname = \"(stdin)\"\r\n    fin = stdin\r\n  else\r\n    g_fname = infile\r\n    fin = assert(io.open(infile, \"r\"))\r\n  end\r\n  readfile(fin)\r\n\r\n  -- Check for errors.\r\n  if not g_arch then\r\n    wprinterr(g_fname, \":*: error: missing .arch directive\\n\")\r\n  end\r\n  checkconds()\r\n  checkmacros()\r\n  checkcaptures()\r\n\r\n  if g_errcount ~= 0 then\r\n    stderr:write(g_fname, \":*: info: \", g_errcount, \" error\",\r\n      (type(g_errcount) == \"number\" and g_errcount > 1) and \"s\" or \"\",\r\n      \" in input file -- no output file generated.\\n\")\r\n    dumpdef(stderr)\r\n    exit(1)\r\n  end\r\n\r\n  -- Write output file.\r\n  writefile(outfile)\r\nend",
    "type": "function"
  }, {
    "id": 487,
    "text": "g_wbuffer = {}",
    "type": "statement:assign"
  }, {
    "id": 488,
    "text": "wline(dasmhead)",
    "type": "statement:functioncall"
  }, {
    "id": 489,
    "text": "local fin",
    "type": "statement:localassign"
  }, {
    "id": 490,
    "text": "if infile == \"-\" then\r\n    g_fname = \"(stdin)\"\r\n    fin = stdin\r\n  else\r\n    g_fname = infile\r\n    fin = assert(io.open(infile, \"r\"))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 491,
    "text": "g_fname = \"(stdin)\"",
    "type": "statement:assign"
  }, {
    "id": 492,
    "text": "fin = stdin",
    "type": "statement:assign"
  }, {
    "id": 493,
    "text": "g_fname = infile",
    "type": "statement:assign"
  }, {
    "id": 494,
    "text": "fin = assert(io.open(infile, \"r\"))",
    "type": "statement:assign"
  }, {
    "id": 495,
    "text": "readfile(fin)",
    "type": "statement:functioncall"
  }, {
    "id": 496,
    "text": "if not g_arch then\r\n    wprinterr(g_fname, \":*: error: missing .arch directive\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 497,
    "text": "wprinterr(g_fname, \":*: error: missing .arch directive\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 498,
    "text": "checkconds()",
    "type": "statement:functioncall"
  }, {
    "id": 499,
    "text": "checkmacros()",
    "type": "statement:functioncall"
  }, {
    "id": 500,
    "text": "checkcaptures()",
    "type": "statement:functioncall"
  }, {
    "id": 501,
    "text": "if g_errcount ~= 0 then\r\n    stderr:write(g_fname, \":*: info: \", g_errcount, \" error\",\r\n      (type(g_errcount) == \"number\" and g_errcount > 1) and \"s\" or \"\",\r\n      \" in input file -- no output file generated.\\n\")\r\n    dumpdef(stderr)\r\n    exit(1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 502,
    "text": "stderr:write(g_fname, \":*: info: \", g_errcount, \" error\",\r\n      (type(g_errcount) == \"number\" and g_errcount > 1) and \"s\" or \"\",\r\n      \" in input file -- no output file generated.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 503,
    "text": "dumpdef(stderr)",
    "type": "statement:functioncall"
  }, {
    "id": 504,
    "text": "writefile(outfile)",
    "type": "statement:functioncall"
  }, {
    "id": 505,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 506,
    "text": "function opt_map.help()\r\n  stdout:write(\"DynASM -- \", _info.description, \".\\n\")\r\n  stdout:write(\"DynASM \", _info.version, \" \", _info.release, \"  \", _info.url, \"\\n\")\r\n  stdout:write[[\r\n\r\nUsage: dynasm [OPTION]... INFILE.dasc|-\r\n\r\n  -h, --help           Display this help text.\r\n  -V, --version        Display version and copyright information.\r\n\r\n  -o, --outfile FILE   Output file name (default is stdout).\r\n  -I, --include DIR    Add directory to the include search path.\r\n\r\n  -c, --ccomment       Use /* */ comments for assembler lines.\r\n  -C, --cppcomment     Use // comments for assembler lines (default).\r\n  -N, --nocomment      Suppress assembler lines in output.\r\n  -M, --maccomment     Show macro expansions as comments (default off).\r\n\r\n  -L, --nolineno       Suppress CPP line number information in output.\r\n  -F, --flushline      Flush action list for every line.\r\n\r\n  -E, --vserror        Use Visual Studio style errors file(line) vs file:line\r\n\r\n  -D NAME[=SUBST]      Define a substitution.\r\n  -U NAME              Undefine a substitution.\r\n\r\n  -P, --dumpdef        Dump defines, macros, etc. Repeat for more output.\r\n  -A, --dumparch ARCH  Load architecture ARCH and dump description.\r\n]]\r\n  exit(0)\r\nend",
    "type": "function"
  }, {
    "id": 507,
    "text": "stdout:write(\"DynASM -- \", _info.description, \".\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 508,
    "text": "stdout:write(\"DynASM \", _info.version, \" \", _info.release, \"  \", _info.url, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 509,
    "text": "stdout:write[[\r\n\r\nUsage: dynasm [OPTION]... INFILE.dasc|-\r\n\r\n  -h, --help           Display this help text.\r\n  -V, --version        Display version and copyright information.\r\n\r\n  -o, --outfile FILE   Output file name (default is stdout).\r\n  -I, --include DIR    Add directory to the include search path.\r\n\r\n  -c, --ccomment       Use /* */ comments for assembler lines.\r\n  -C, --cppcomment     Use // comments for assembler lines (default).\r\n  -N, --nocomment      Suppress assembler lines in output.\r\n  -M, --maccomment     Show macro expansions as comments (default off).\r\n\r\n  -L, --nolineno       Suppress CPP line number information in output.\r\n  -F, --flushline      Flush action list for every line.\r\n\r\n  -E, --vserror        Use Visual Studio style errors file(line) vs file:line\r\n\r\n  -D NAME[=SUBST]      Define a substitution.\r\n  -U NAME              Undefine a substitution.\r\n\r\n  -P, --dumpdef        Dump defines, macros, etc. Repeat for more output.\r\n  -A, --dumparch ARCH  Load architecture ARCH and dump description.\r\n]]",
    "type": "statement:functioncall"
  }, {
    "id": 510,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 511,
    "text": "function opt_map.version()\r\n  stdout:write(format(\"%s version %s, released %s\\n%s\\n\\n%s\",\r\n    _info.name, _info.version, _info.release, _info.url, _info.copyright))\r\n  exit(0)\r\nend",
    "type": "function"
  }, {
    "id": 512,
    "text": "stdout:write(format(\"%s version %s, released %s\\n%s\\n\\n%s\",\r\n    _info.name, _info.version, _info.release, _info.url, _info.copyright))",
    "type": "statement:functioncall"
  }, {
    "id": 513,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 514,
    "text": "function opt_map.outfile(args) g_opt.outfile = optparam(args) end",
    "type": "function"
  }, {
    "id": 515,
    "text": "g_opt.outfile = optparam(args)",
    "type": "statement:assign"
  }, {
    "id": 516,
    "text": "function opt_map.include(args) insert(g_opt.include, 1, optparam(args)) end",
    "type": "function"
  }, {
    "id": 517,
    "text": "insert(g_opt.include, 1, optparam(args))",
    "type": "statement:functioncall"
  }, {
    "id": 518,
    "text": "function opt_map.ccomment() g_opt.comment = \"/*|\"; g_opt.endcomment = \" */\" end",
    "type": "function"
  }, {
    "id": 519,
    "text": "g_opt.comment = \"/*|\"",
    "type": "statement:assign"
  }, {
    "id": 520,
    "text": "g_opt.endcomment = \" */\"",
    "type": "statement:assign"
  }, {
    "id": 521,
    "text": "function opt_map.cppcomment() g_opt.comment = \"//|\"; g_opt.endcomment = \"\" end",
    "type": "function"
  }, {
    "id": 522,
    "text": "g_opt.comment = \"//|\"",
    "type": "statement:assign"
  }, {
    "id": 523,
    "text": "g_opt.endcomment = \"\"",
    "type": "statement:assign"
  }, {
    "id": 524,
    "text": "function opt_map.nocomment() g_opt.comment = false end",
    "type": "function"
  }, {
    "id": 525,
    "text": "g_opt.comment = false",
    "type": "statement:assign"
  }, {
    "id": 526,
    "text": "function opt_map.maccomment() g_opt.maccomment = true end",
    "type": "function"
  }, {
    "id": 527,
    "text": "g_opt.maccomment = true",
    "type": "statement:assign"
  }, {
    "id": 528,
    "text": "function opt_map.nolineno() g_opt.cpp = false end",
    "type": "function"
  }, {
    "id": 529,
    "text": "g_opt.cpp = false",
    "type": "statement:assign"
  }, {
    "id": 530,
    "text": "function opt_map.flushline() g_opt.flushline = true end",
    "type": "function"
  }, {
    "id": 531,
    "text": "g_opt.flushline = true",
    "type": "statement:assign"
  }, {
    "id": 532,
    "text": "function opt_map.vserror() g_opt.vserror = true end",
    "type": "function"
  }, {
    "id": 533,
    "text": "g_opt.vserror = true",
    "type": "statement:assign"
  }, {
    "id": 534,
    "text": "function opt_map.dumpdef() g_opt.dumpdef = g_opt.dumpdef + 1 end",
    "type": "function"
  }, {
    "id": 535,
    "text": "g_opt.dumpdef = g_opt.dumpdef + 1",
    "type": "statement:assign"
  }, {
    "id": 536,
    "text": "local function parseopt(opt, args)\r\n  opt_current = #opt == 1 and \"-\"..opt or \"--\"..opt\r\n  local f = opt_map[opt] or opt_map[opt_alias[opt]]\r\n  if not f then\r\n    opterror(\"unrecognized option `\", opt_current, \"'. Try `--help'.\\n\")\r\n  end\r\n  f(args)\r\nend",
    "type": "function"
  }, {
    "id": 537,
    "text": "opt_current = #opt == 1 and \"-\"..opt or \"--\"..opt",
    "type": "statement:assign"
  }, {
    "id": 538,
    "text": "local f = opt_map[opt] or opt_map[opt_alias[opt]]",
    "type": "statement:localassign"
  }, {
    "id": 539,
    "text": "if not f then\r\n    opterror(\"unrecognized option `\", opt_current, \"'. Try `--help'.\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 540,
    "text": "opterror(\"unrecognized option `\", opt_current, \"'. Try `--help'.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 541,
    "text": "f(args)",
    "type": "statement:functioncall"
  }, {
    "id": 542,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 543,
    "text": "local function parseargs(args)\r\n  -- Default options.\r\n  g_opt.comment = \"//|\"\r\n  g_opt.endcomment = \"\"\r\n  g_opt.cpp = true\r\n  g_opt.dumpdef = 0\r\n  g_opt.include = { \"\" }\r\n\r\n  -- Process all option arguments.\r\n  args.argn = 1\r\n  repeat\r\n    local a = args[args.argn]\r\n    if not a then break end\r\n    local lopt, opt = match(a, \"^%-(%-?)(.+)\")\r\n    if not opt then break end\r\n    args.argn = args.argn + 1\r\n    if lopt == \"\" then\r\n      -- Loop through short options.\r\n      for o in gmatch(opt, \".\") do parseopt(o, args) end\r\n    else\r\n      -- Long option.\r\n      parseopt(opt, args)\r\n    end\r\n  until false\r\n\r\n  -- Check for proper number of arguments.\r\n  local nargs = #args - args.argn + 1\r\n  if nargs ~= 1 then\r\n    if nargs == 0 then\r\n      if g_opt.dumpdef > 0 then return dumpdef(stdout) end\r\n    end\r\n    opt_map.help()\r\n  end\r\n\r\n  -- Translate a single input file to a single output file\r\n  -- TODO: Handle multiple files?\r\n  translate(args[args.argn], g_opt.outfile)\r\nend",
    "type": "function"
  }, {
    "id": 544,
    "text": "g_opt.cpp = true",
    "type": "statement:assign"
  }, {
    "id": 545,
    "text": "g_opt.dumpdef = 0",
    "type": "statement:assign"
  }, {
    "id": 546,
    "text": "g_opt.include = { \"\" }",
    "type": "statement:assign"
  }, {
    "id": 547,
    "text": "args.argn = 1",
    "type": "statement:assign"
  }, {
    "id": 548,
    "text": "repeat\r\n    local a = args[args.argn]\r\n    if not a then break end\r\n    local lopt, opt = match(a, \"^%-(%-?)(.+)\")\r\n    if not opt then break end\r\n    args.argn = args.argn + 1\r\n    if lopt == \"\" then\r\n      -- Loop through short options.\r\n      for o in gmatch(opt, \".\") do parseopt(o, args) end\r\n    else\r\n      -- Long option.\r\n      parseopt(opt, args)\r\n    end\r\n  until false",
    "type": "statement:repeat"
  }, {
    "id": 549,
    "text": "local a = args[args.argn]",
    "type": "statement:localassign"
  }, {
    "id": 550,
    "text": "if not a then break end",
    "type": "statement:if"
  }, {
    "id": 551,
    "text": "local lopt, opt = match(a, \"^%-(%-?)(.+)\")",
    "type": "statement:localassign"
  }, {
    "id": 552,
    "text": "if not opt then break end",
    "type": "statement:if"
  }, {
    "id": 553,
    "text": "args.argn = args.argn + 1",
    "type": "statement:assign"
  }, {
    "id": 554,
    "text": "if lopt == \"\" then\r\n      -- Loop through short options.\r\n      for o in gmatch(opt, \".\") do parseopt(o, args) end\r\n    else\r\n      -- Long option.\r\n      parseopt(opt, args)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 555,
    "text": "for o in gmatch(opt, \".\") do parseopt(o, args) end",
    "type": "statement:genericfor"
  }, {
    "id": 556,
    "text": "parseopt(o, args)",
    "type": "statement:functioncall"
  }, {
    "id": 557,
    "text": "parseopt(opt, args)",
    "type": "statement:functioncall"
  }, {
    "id": 558,
    "text": "local nargs = #args - args.argn + 1",
    "type": "statement:localassign"
  }, {
    "id": 559,
    "text": "if nargs ~= 1 then\r\n    if nargs == 0 then\r\n      if g_opt.dumpdef > 0 then return dumpdef(stdout) end\r\n    end\r\n    opt_map.help()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 560,
    "text": "if nargs == 0 then\r\n      if g_opt.dumpdef > 0 then return dumpdef(stdout) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 561,
    "text": "if g_opt.dumpdef > 0 then return dumpdef(stdout) end",
    "type": "statement:if"
  }, {
    "id": 562,
    "text": "opt_map.help()",
    "type": "statement:functioncall"
  }, {
    "id": 563,
    "text": "translate(args[args.argn], g_opt.outfile)",
    "type": "statement:functioncall"
  }, {
    "id": 564,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 565,
    "text": "function(out)\r\n    local buf = cap_buffers[name]\r\n    if buf then wdumplines(out, buf) end\r\n  end",
    "type": "function"
  }, {
    "id": 566,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 567,
    "text": "",
    "type": "function container"
  }, {
    "id": 568,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 569,
    "text": "revdef",
    "type": "global function"
  }, {
    "id": 570,
    "text": "match",
    "type": "global function"
  }, {
    "id": 571,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 572,
    "text": "dumpdef",
    "type": "global function"
  }, {
    "id": 573,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 574,
    "text": "setup",
    "type": "global function"
  }, {
    "id": 575,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 576,
    "text": "mergemaps",
    "type": "global function"
  }, {
    "id": 577,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 578,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 579,
    "text": "section",
    "type": "global function"
  }, {
    "id": 580,
    "text": "load",
    "type": "global function"
  }, {
    "id": 581,
    "text": "type",
    "type": "global function"
  }, {
    "id": 582,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 583,
    "text": "format",
    "type": "global function"
  }, {
    "id": 584,
    "text": "open",
    "type": "global function"
  }, {
    "id": 585,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 586,
    "text": "dumparch",
    "type": "global function"
  }, {
    "id": 587,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 588,
    "text": "f",
    "type": "global function"
  }, {
    "id": 589,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 590,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 591,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 592,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 593,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 594,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 595,
    "text": "error",
    "type": "global function"
  }, {
    "id": 596,
    "text": "template__\"]",
    "type": "global function"
  }, {
    "id": 597,
    "text": "line",
    "type": "global function"
  }, {
    "id": 598,
    "text": "passcb",
    "type": "global function"
  }, {
    "id": 599,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 600,
    "text": "",
    "type": "variable container"
  }, {
    "id": 601,
    "text": "",
    "type": "require container"
  }, {
    "id": 602,
    "text": "",
    "type": "local variable"
  }, {
    "id": 603,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 604,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 605,
    "text": "",
    "type": "string"
  }, {
    "id": 606,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 607,
    "text": "",
    "type": "string"
  }, {
    "id": 608,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 609,
    "text": "",
    "type": "string"
  }, {
    "id": 610,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 611,
    "text": "",
    "type": "number"
  }, {
    "id": 612,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 613,
    "text": "",
    "type": "string"
  }, {
    "id": 614,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 615,
    "text": "",
    "type": "string"
  }, {
    "id": 616,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 617,
    "text": "",
    "type": "string"
  }, {
    "id": 618,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 619,
    "text": "",
    "type": "string"
  }, {
    "id": 620,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 621,
    "text": "",
    "type": "string"
  }, {
    "id": 622,
    "text": "",
    "type": "local variable"
  }, {
    "id": 623,
    "text": "",
    "type": "n/a"
  }, {
    "id": 624,
    "text": "",
    "type": "local variable"
  }, {
    "id": 625,
    "text": "",
    "type": "n/a"
  }, {
    "id": 626,
    "text": "",
    "type": "local variable"
  }, {
    "id": 627,
    "text": "",
    "type": "n/a"
  }, {
    "id": 628,
    "text": "",
    "type": "local variable"
  }, {
    "id": 629,
    "text": "",
    "type": "n/a"
  }, {
    "id": 630,
    "text": "",
    "type": "local variable"
  }, {
    "id": 631,
    "text": "",
    "type": "n/a"
  }, {
    "id": 632,
    "text": "",
    "type": "local variable"
  }, {
    "id": 633,
    "text": "",
    "type": "n/a"
  }, {
    "id": 634,
    "text": "",
    "type": "local variable"
  }, {
    "id": 635,
    "text": "",
    "type": "n/a"
  }, {
    "id": 636,
    "text": "",
    "type": "local variable"
  }, {
    "id": 637,
    "text": "",
    "type": "n/a"
  }, {
    "id": 638,
    "text": "",
    "type": "local variable"
  }, {
    "id": 639,
    "text": "",
    "type": "n/a"
  }, {
    "id": 640,
    "text": "",
    "type": "local variable"
  }, {
    "id": 641,
    "text": "",
    "type": "n/a"
  }, {
    "id": 642,
    "text": "",
    "type": "local variable"
  }, {
    "id": 643,
    "text": "",
    "type": "n/a"
  }, {
    "id": 644,
    "text": "",
    "type": "local variable"
  }, {
    "id": 645,
    "text": "",
    "type": "n/a"
  }, {
    "id": 646,
    "text": "",
    "type": "local variable"
  }, {
    "id": 647,
    "text": "",
    "type": "n/a"
  }, {
    "id": 648,
    "text": "",
    "type": "local variable"
  }, {
    "id": 649,
    "text": "",
    "type": "n/a"
  }, {
    "id": 650,
    "text": "",
    "type": "local variable"
  }, {
    "id": 651,
    "text": "",
    "type": "n/a"
  }, {
    "id": 652,
    "text": "",
    "type": "local variable"
  }, {
    "id": 653,
    "text": "",
    "type": "n/a"
  }, {
    "id": 654,
    "text": "",
    "type": "local variable"
  }, {
    "id": 655,
    "text": "",
    "type": "n/a"
  }, {
    "id": 656,
    "text": "",
    "type": "local variable"
  }, {
    "id": 657,
    "text": "",
    "type": "n/a"
  }, {
    "id": 658,
    "text": "",
    "type": "local variable"
  }, {
    "id": 659,
    "text": "",
    "type": "n/a"
  }, {
    "id": 660,
    "text": "",
    "type": "local variable"
  }, {
    "id": 661,
    "text": "",
    "type": "n/a"
  }, {
    "id": 662,
    "text": "",
    "type": "local variable"
  }, {
    "id": 663,
    "text": "",
    "type": "n/a"
  }, {
    "id": 664,
    "text": "",
    "type": "local variable"
  }, {
    "id": 665,
    "text": "",
    "type": "n/a"
  }, {
    "id": 666,
    "text": "",
    "type": "local variable"
  }, {
    "id": 667,
    "text": "",
    "type": "n/a"
  }, {
    "id": 668,
    "text": "",
    "type": "local variable"
  }, {
    "id": 669,
    "text": "",
    "type": "n/a"
  }, {
    "id": 670,
    "text": "",
    "type": "local variable"
  }, {
    "id": 671,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 672,
    "text": "",
    "type": "local variable"
  }, {
    "id": 673,
    "text": "",
    "type": "local variable"
  }, {
    "id": 674,
    "text": "",
    "type": "local variable"
  }, {
    "id": 675,
    "text": "",
    "type": "local variable"
  }, {
    "id": 676,
    "text": "",
    "type": "local variable"
  }, {
    "id": 677,
    "text": "",
    "type": "local variable"
  }, {
    "id": 678,
    "text": "",
    "type": "local variable"
  }, {
    "id": 679,
    "text": "",
    "type": "number"
  }, {
    "id": 680,
    "text": "",
    "type": "local variable"
  }, {
    "id": 681,
    "text": "",
    "type": "local variable"
  }, {
    "id": 682,
    "text": "",
    "type": "local variable"
  }, {
    "id": 683,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 684,
    "text": "",
    "type": "local variable"
  }, {
    "id": 685,
    "text": "",
    "type": "local variable"
  }, {
    "id": 686,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 687,
    "text": "",
    "type": "local variable"
  }, {
    "id": 688,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 689,
    "text": "",
    "type": "local variable"
  }, {
    "id": 690,
    "text": "",
    "type": "local variable"
  }, {
    "id": 691,
    "text": "",
    "type": "local variable"
  }, {
    "id": 692,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 693,
    "text": "",
    "type": "local variable"
  }, {
    "id": 694,
    "text": "",
    "type": "local variable"
  }, {
    "id": 695,
    "text": "",
    "type": "number"
  }, {
    "id": 696,
    "text": "",
    "type": "local variable"
  }, {
    "id": 697,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 698,
    "text": "",
    "type": "local variable"
  }, {
    "id": 699,
    "text": "",
    "type": "local variable"
  }, {
    "id": 700,
    "text": "",
    "type": "local variable"
  }, {
    "id": 701,
    "text": "",
    "type": "local variable"
  }, {
    "id": 702,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 703,
    "text": "",
    "type": "local variable"
  }, {
    "id": 704,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 705,
    "text": "",
    "type": "local variable"
  }, {
    "id": 706,
    "text": "",
    "type": "local variable"
  }, {
    "id": 707,
    "text": "",
    "type": "local variable"
  }, {
    "id": 708,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 709,
    "text": "",
    "type": "local variable"
  }, {
    "id": 710,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 711,
    "text": "",
    "type": "local variable"
  }, {
    "id": 712,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 713,
    "text": "",
    "type": "local variable"
  }, {
    "id": 714,
    "text": "",
    "type": "local variable"
  }, {
    "id": 715,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 716,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 717,
    "text": "",
    "type": "string"
  }, {
    "id": 718,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 719,
    "text": "",
    "type": "string"
  }, {
    "id": 720,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 721,
    "text": "",
    "type": "string"
  }, {
    "id": 722,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 723,
    "text": "",
    "type": "string"
  }, {
    "id": 724,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 725,
    "text": "",
    "type": "string"
  }, {
    "id": 726,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 727,
    "text": "",
    "type": "string"
  }, {
    "id": 728,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 729,
    "text": "",
    "type": "string"
  }, {
    "id": 730,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 731,
    "text": "",
    "type": "string"
  }, {
    "id": 732,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 733,
    "text": "",
    "type": "string"
  }, {
    "id": 734,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 735,
    "text": "",
    "type": "string"
  }, {
    "id": 736,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 737,
    "text": "",
    "type": "string"
  }, {
    "id": 738,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 739,
    "text": "",
    "type": "string"
  }, {
    "id": 740,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 741,
    "text": "",
    "type": "string"
  }, {
    "id": 742,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 743,
    "text": "",
    "type": "string"
  }, {
    "id": 744,
    "text": "",
    "type": "local variable"
  }, {
    "id": 745,
    "text": "",
    "type": "n/a"
  }, {
    "id": 746,
    "text": "",
    "type": "global variable"
  }, {
    "id": 747,
    "text": "",
    "type": "n/a"
  }, {
    "id": 748,
    "text": "",
    "type": "global variable"
  }, {
    "id": 749,
    "text": "",
    "type": "n/a"
  }, {
    "id": 750,
    "text": "",
    "type": "global variable"
  }, {
    "id": 751,
    "text": "",
    "type": "n/a"
  }, {
    "id": 752,
    "text": "",
    "type": "global variable"
  }, {
    "id": 753,
    "text": "",
    "type": "n/a"
  }, {
    "id": 754,
    "text": "",
    "type": "global variable"
  }, {
    "id": 755,
    "text": "",
    "type": "n/a"
  }, {
    "id": 756,
    "text": "",
    "type": "global variable"
  }, {
    "id": 757,
    "text": "",
    "type": "n/a"
  }, {
    "id": 758,
    "text": "",
    "type": "global variable"
  }, {
    "id": 759,
    "text": "",
    "type": "n/a"
  }, {
    "id": 760,
    "text": "",
    "type": "global variable"
  }, {
    "id": 761,
    "text": "",
    "type": "n/a"
  }, {
    "id": 762,
    "text": "",
    "type": "global variable"
  }, {
    "id": 763,
    "text": "",
    "type": "n/a"
  }, {
    "id": 764,
    "text": "",
    "type": "global variable"
  }, {
    "id": 765,
    "text": "",
    "type": "n/a"
  }, {
    "id": 766,
    "text": "",
    "type": "global variable"
  }, {
    "id": 767,
    "text": "",
    "type": "n/a"
  }, {
    "id": 768,
    "text": "",
    "type": "global variable"
  }, {
    "id": 769,
    "text": "",
    "type": "n/a"
  }, {
    "id": 770,
    "text": "",
    "type": "global variable"
  }, {
    "id": 771,
    "text": "",
    "type": "n/a"
  }, {
    "id": 772,
    "text": "",
    "type": "global variable"
  }, {
    "id": 773,
    "text": "",
    "type": "n/a"
  }, {
    "id": 774,
    "text": "",
    "type": "global variable"
  }, {
    "id": 775,
    "text": "",
    "type": "n/a"
  }, {
    "id": 776,
    "text": "",
    "type": "global variable"
  }, {
    "id": 777,
    "text": "",
    "type": "n/a"
  }, {
    "id": 778,
    "text": "",
    "type": "global variable"
  }, {
    "id": 779,
    "text": "",
    "type": "n/a"
  }, {
    "id": 780,
    "text": "",
    "type": "global variable"
  }, {
    "id": 781,
    "text": "",
    "type": "n/a"
  }, {
    "id": 782,
    "text": "",
    "type": "global variable"
  }, {
    "id": 783,
    "text": "",
    "type": "n/a"
  }, {
    "id": 784,
    "text": "",
    "type": "global variable"
  }, {
    "id": 785,
    "text": "",
    "type": "n/a"
  }, {
    "id": 786,
    "text": "",
    "type": "global variable"
  }, {
    "id": 787,
    "text": "",
    "type": "n/a"
  }, {
    "id": 788,
    "text": "",
    "type": "global variable"
  }, {
    "id": 789,
    "text": "",
    "type": "n/a"
  }, {
    "id": 790,
    "text": "",
    "type": "global variable"
  }, {
    "id": 791,
    "text": "",
    "type": "n/a"
  }, {
    "id": 792,
    "text": "",
    "type": "global variable"
  }, {
    "id": 793,
    "text": "",
    "type": "n/a"
  }, {
    "id": 794,
    "text": "",
    "type": "global variable"
  }, {
    "id": 795,
    "text": "",
    "type": "n/a"
  } ]
}