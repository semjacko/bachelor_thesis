{
  "_filename": "dasm_arm.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaffi/dynasm/dasm_arm.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 3
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 23
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 10
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 58
  }, {
    "from": 65,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 58
  }, {
    "from": 71,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 10
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 72
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 75
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 88,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 88,
    "label": "has",
    "to": 3
  }, {
    "from": 88,
    "label": "has",
    "to": 100
  }, {
    "from": 88,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 3
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 105,
    "label": "has",
    "to": 3
  }, {
    "from": 105,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 121,
    "label": "has",
    "to": 129
  }, {
    "from": 121,
    "label": "has",
    "to": 130
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 120
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 133,
    "label": "has",
    "to": 129
  }, {
    "from": 133,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 3
  }, {
    "from": 132,
    "label": "has",
    "to": 3
  }, {
    "from": 132,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 117
  }, {
    "from": 141,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 141,
    "label": "has",
    "to": 120
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 129
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 141,
    "label": "has",
    "to": 3
  }, {
    "from": 141,
    "label": "has",
    "to": 3
  }, {
    "from": 141,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 120
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 149,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 148,
    "label": "has",
    "to": 129
  }, {
    "from": 148,
    "label": "has",
    "to": 157
  }, {
    "from": 147,
    "label": "has",
    "to": 3
  }, {
    "from": 147,
    "label": "has",
    "to": 3
  }, {
    "from": 147,
    "label": "has",
    "to": 3
  }, {
    "from": 147,
    "label": "has",
    "to": 3
  }, {
    "from": 147,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 160,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 159,
    "label": "has",
    "to": 3
  }, {
    "from": 159,
    "label": "has",
    "to": 3
  }, {
    "from": 159,
    "label": "has",
    "to": 3
  }, {
    "from": 159,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 3
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 169,
    "label": "has",
    "to": 3
  }, {
    "from": 169,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 173,
    "label": "has",
    "to": 176
  }, {
    "from": 173,
    "label": "has",
    "to": 177
  }, {
    "from": 173,
    "label": "has",
    "to": 178
  }, {
    "from": 169,
    "label": "has",
    "to": 3
  }, {
    "from": 169,
    "label": "has",
    "to": 3
  }, {
    "from": 169,
    "label": "has",
    "to": 3
  }, {
    "from": 169,
    "label": "has",
    "to": 179
  }, {
    "from": 169,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 181,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 181,
    "label": "has",
    "to": 189
  }, {
    "from": 181,
    "label": "has",
    "to": 190
  }, {
    "from": 181,
    "label": "has",
    "to": 191
  }, {
    "from": 181,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 193,
    "label": "has",
    "to": 197
  }, {
    "from": 193,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 192,
    "label": "has",
    "to": 202
  }, {
    "from": 181,
    "label": "has",
    "to": 3
  }, {
    "from": 181,
    "label": "has",
    "to": 3
  }, {
    "from": 181,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 181,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 205,
    "label": "has",
    "to": 208
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 205,
    "label": "has",
    "to": 210
  }, {
    "from": 205,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 211,
    "label": "has",
    "to": 215
  }, {
    "from": 211,
    "label": "has",
    "to": 216
  }, {
    "from": 211,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 211,
    "label": "has",
    "to": 219
  }, {
    "from": 211,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 205,
    "label": "has",
    "to": 222
  }, {
    "from": 205,
    "label": "has",
    "to": 223
  }, {
    "from": 205,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 212
  }, {
    "from": 226,
    "label": "has",
    "to": 215
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 226,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 226,
    "label": "has",
    "to": 219
  }, {
    "from": 226,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 214
  }, {
    "from": 229,
    "label": "has",
    "to": 221
  }, {
    "from": 224,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 224,
    "label": "has",
    "to": 231
  }, {
    "from": 181,
    "label": "has",
    "to": 3
  }, {
    "from": 181,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 3
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 233,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 233,
    "label": "has",
    "to": 239
  }, {
    "from": 233,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 244
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 245
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 246
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 247
  }, {
    "from": 241,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 246
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 250
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 251
  }, {
    "from": 241,
    "label": "has",
    "to": 252
  }, {
    "from": 241,
    "label": "has",
    "to": 253
  }, {
    "from": 241,
    "label": "has",
    "to": 254
  }, {
    "from": 241,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 255,
    "label": "has",
    "to": 259
  }, {
    "from": 255,
    "label": "has",
    "to": 253
  }, {
    "from": 255,
    "label": "has",
    "to": 260
  }, {
    "from": 241,
    "label": "has",
    "to": 261
  }, {
    "from": 241,
    "label": "has",
    "to": 262
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 263
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 264
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 265
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 247
  }, {
    "from": 241,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 243
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 241,
    "label": "has",
    "to": 268
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 269
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 241,
    "label": "has",
    "to": 272
  }, {
    "from": 241,
    "label": "has",
    "to": 273
  }, {
    "from": 241,
    "label": "has",
    "to": 274
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 275
  }, {
    "from": 233,
    "label": "has",
    "to": 276
  }, {
    "from": 233,
    "label": "has",
    "to": 277
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 278,
    "label": "has",
    "to": 3
  }, {
    "from": 278,
    "label": "has",
    "to": 280
  }, {
    "from": 278,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 278,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 3
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 284,
    "label": "has",
    "to": 289
  }, {
    "from": 290,
    "label": "has",
    "to": 279
  }, {
    "from": 290,
    "label": "has",
    "to": 3
  }, {
    "from": 290,
    "label": "has",
    "to": 280
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 290,
    "label": "has",
    "to": 293
  }, {
    "from": 294,
    "label": "has",
    "to": 279
  }, {
    "from": 294,
    "label": "has",
    "to": 3
  }, {
    "from": 294,
    "label": "has",
    "to": 280
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 294,
    "label": "has",
    "to": 297
  }, {
    "from": 298,
    "label": "has",
    "to": 299
  }, {
    "from": 298,
    "label": "has",
    "to": 3
  }, {
    "from": 298,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 238
  }, {
    "from": 298,
    "label": "has",
    "to": 301
  }, {
    "from": 298,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 298,
    "label": "has",
    "to": 304
  }, {
    "from": 298,
    "label": "has",
    "to": 305
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 3
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 310,
    "label": "has",
    "to": 313
  }, {
    "from": 310,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 238
  }, {
    "from": 310,
    "label": "has",
    "to": 315
  }, {
    "from": 306,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 317,
    "label": "has",
    "to": 3
  }, {
    "from": 317,
    "label": "has",
    "to": 300
  }, {
    "from": 300,
    "label": "has",
    "to": 238
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 317,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 317,
    "label": "has",
    "to": 3
  }, {
    "from": 317,
    "label": "has",
    "to": 326
  }, {
    "from": 317,
    "label": "has",
    "to": 327
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 3
  }, {
    "from": 328,
    "label": "has",
    "to": 330
  }, {
    "from": 328,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 328,
    "label": "has",
    "to": 333
  }, {
    "from": 328,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 328,
    "label": "has",
    "to": 336
  }, {
    "from": 328,
    "label": "has",
    "to": 337
  }, {
    "from": 328,
    "label": "has",
    "to": 338
  }, {
    "from": 328,
    "label": "has",
    "to": 339
  }, {
    "from": 328,
    "label": "has",
    "to": 340
  }, {
    "from": 328,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 58
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 342,
    "label": "has",
    "to": 345
  }, {
    "from": 342,
    "label": "has",
    "to": 346
  }, {
    "from": 342,
    "label": "has",
    "to": 347
  }, {
    "from": 347,
    "label": "has",
    "to": 333
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 347,
    "label": "has",
    "to": 349
  }, {
    "from": 342,
    "label": "has",
    "to": 10
  }, {
    "from": 342,
    "label": "has",
    "to": 350
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 351,
    "label": "has",
    "to": 353
  }, {
    "from": 351,
    "label": "has",
    "to": 354
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 355,
    "label": "has",
    "to": 357
  }, {
    "from": 355,
    "label": "has",
    "to": 358
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 359,
    "label": "has",
    "to": 361
  }, {
    "from": 359,
    "label": "has",
    "to": 362
  }, {
    "from": 359,
    "label": "has",
    "to": 363
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 364,
    "label": "has",
    "to": 3
  }, {
    "from": 364,
    "label": "has",
    "to": 366
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 367,
    "label": "has",
    "to": 369
  }, {
    "from": 370,
    "label": "has",
    "to": 371
  }, {
    "from": 371,
    "label": "has",
    "to": 372
  }, {
    "from": 371,
    "label": "has",
    "to": 373
  }, {
    "from": 371,
    "label": "has",
    "to": 3
  }, {
    "from": 371,
    "label": "has",
    "to": 374
  }, {
    "from": 371,
    "label": "has",
    "to": 375
  }, {
    "from": 371,
    "label": "has",
    "to": 376
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 371,
    "label": "has",
    "to": 3
  }, {
    "from": 370,
    "label": "has",
    "to": 379
  }, {
    "from": 370,
    "label": "has",
    "to": 3
  }, {
    "from": 370,
    "label": "has",
    "to": 380
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 382,
    "label": "has",
    "to": 383
  }, {
    "from": 381,
    "label": "has",
    "to": 384
  }, {
    "from": 381,
    "label": "has",
    "to": 385
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 381,
    "label": "has",
    "to": 387
  }, {
    "from": 381,
    "label": "has",
    "to": 388
  }, {
    "from": 381,
    "label": "has",
    "to": 3
  }, {
    "from": 381,
    "label": "has",
    "to": 389
  }, {
    "from": 390,
    "label": "has",
    "to": 391
  }, {
    "from": 390,
    "label": "has",
    "to": 392
  }, {
    "from": 392,
    "label": "has",
    "to": 393
  }, {
    "from": 390,
    "label": "has",
    "to": 394
  }, {
    "from": 390,
    "label": "has",
    "to": 388
  }, {
    "from": 390,
    "label": "has",
    "to": 395
  }, {
    "from": 390,
    "label": "has",
    "to": 3
  }, {
    "from": 390,
    "label": "has",
    "to": 396
  }, {
    "from": 397,
    "label": "has",
    "to": 282
  }, {
    "from": 398,
    "label": "has",
    "to": 288
  }, {
    "from": 399,
    "label": "has",
    "to": 292
  }, {
    "from": 400,
    "label": "has",
    "to": 296
  }, {
    "from": 401,
    "label": "has",
    "to": 372
  }, {
    "from": 401,
    "label": "has",
    "to": 373
  }, {
    "from": 401,
    "label": "has",
    "to": 3
  }, {
    "from": 401,
    "label": "has",
    "to": 374
  }, {
    "from": 401,
    "label": "has",
    "to": 375
  }, {
    "from": 401,
    "label": "has",
    "to": 376
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 401,
    "label": "has",
    "to": 3
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 2,
    "label": "calls",
    "to": 413
  }, {
    "from": 5,
    "label": "calls",
    "to": 413
  }, {
    "from": 34,
    "label": "calls",
    "to": 413
  }, {
    "from": 57,
    "label": "calls",
    "to": 413
  }, {
    "from": 77,
    "label": "calls",
    "to": 413
  }, {
    "from": 181,
    "label": "calls",
    "to": 413
  }, {
    "from": 403,
    "label": "calls",
    "to": 413
  }, {
    "from": 403,
    "label": "calls",
    "to": 413
  }, {
    "from": 403,
    "label": "calls",
    "to": 413
  }, {
    "from": 342,
    "label": "calls",
    "to": 413
  }, {
    "from": 355,
    "label": "calls",
    "to": 413
  }, {
    "from": 370,
    "label": "calls",
    "to": 413
  }, {
    "from": 12,
    "label": "calls",
    "to": 404
  }, {
    "from": 12,
    "label": "calls",
    "to": 404
  }, {
    "from": 22,
    "label": "calls",
    "to": 404
  }, {
    "from": 26,
    "label": "calls",
    "to": 404
  }, {
    "from": 51,
    "label": "calls",
    "to": 404
  }, {
    "from": 403,
    "label": "calls",
    "to": 404
  }, {
    "from": 403,
    "label": "calls",
    "to": 405
  }, {
    "from": 403,
    "label": "calls",
    "to": 405
  }, {
    "from": 403,
    "label": "calls",
    "to": 405
  }, {
    "from": 88,
    "label": "calls",
    "to": 405
  }, {
    "from": 88,
    "label": "calls",
    "to": 405
  }, {
    "from": 105,
    "label": "calls",
    "to": 405
  }, {
    "from": 105,
    "label": "calls",
    "to": 405
  }, {
    "from": 116,
    "label": "calls",
    "to": 405
  }, {
    "from": 116,
    "label": "calls",
    "to": 405
  }, {
    "from": 132,
    "label": "calls",
    "to": 405
  }, {
    "from": 141,
    "label": "calls",
    "to": 405
  }, {
    "from": 141,
    "label": "calls",
    "to": 405
  }, {
    "from": 147,
    "label": "calls",
    "to": 405
  }, {
    "from": 159,
    "label": "calls",
    "to": 405
  }, {
    "from": 159,
    "label": "calls",
    "to": 405
  }, {
    "from": 169,
    "label": "calls",
    "to": 405
  }, {
    "from": 181,
    "label": "calls",
    "to": 405
  }, {
    "from": 181,
    "label": "calls",
    "to": 405
  }, {
    "from": 181,
    "label": "calls",
    "to": 405
  }, {
    "from": 181,
    "label": "calls",
    "to": 405
  }, {
    "from": 181,
    "label": "calls",
    "to": 405
  }, {
    "from": 181,
    "label": "calls",
    "to": 405
  }, {
    "from": 181,
    "label": "calls",
    "to": 405
  }, {
    "from": 181,
    "label": "calls",
    "to": 405
  }, {
    "from": 403,
    "label": "calls",
    "to": 405
  }, {
    "from": 403,
    "label": "calls",
    "to": 405
  }, {
    "from": 403,
    "label": "calls",
    "to": 405
  }, {
    "from": 403,
    "label": "calls",
    "to": 405
  }, {
    "from": 403,
    "label": "calls",
    "to": 405
  }, {
    "from": 403,
    "label": "calls",
    "to": 405
  }, {
    "from": 355,
    "label": "calls",
    "to": 5
  }, {
    "from": 88,
    "label": "calls",
    "to": 406
  }, {
    "from": 116,
    "label": "calls",
    "to": 406
  }, {
    "from": 132,
    "label": "calls",
    "to": 406
  }, {
    "from": 141,
    "label": "calls",
    "to": 406
  }, {
    "from": 147,
    "label": "calls",
    "to": 406
  }, {
    "from": 169,
    "label": "calls",
    "to": 406
  }, {
    "from": 403,
    "label": "calls",
    "to": 406
  }, {
    "from": 403,
    "label": "calls",
    "to": 406
  }, {
    "from": 403,
    "label": "calls",
    "to": 406
  }, {
    "from": 403,
    "label": "calls",
    "to": 406
  }, {
    "from": 403,
    "label": "calls",
    "to": 407
  }, {
    "from": 88,
    "label": "calls",
    "to": 407
  }, {
    "from": 88,
    "label": "calls",
    "to": 407
  }, {
    "from": 102,
    "label": "calls",
    "to": 407
  }, {
    "from": 105,
    "label": "calls",
    "to": 407
  }, {
    "from": 116,
    "label": "calls",
    "to": 407
  }, {
    "from": 141,
    "label": "calls",
    "to": 407
  }, {
    "from": 159,
    "label": "calls",
    "to": 407
  }, {
    "from": 169,
    "label": "calls",
    "to": 407
  }, {
    "from": 169,
    "label": "calls",
    "to": 407
  }, {
    "from": 169,
    "label": "calls",
    "to": 407
  }, {
    "from": 181,
    "label": "calls",
    "to": 407
  }, {
    "from": 181,
    "label": "calls",
    "to": 407
  }, {
    "from": 181,
    "label": "calls",
    "to": 407
  }, {
    "from": 181,
    "label": "calls",
    "to": 407
  }, {
    "from": 181,
    "label": "calls",
    "to": 407
  }, {
    "from": 181,
    "label": "calls",
    "to": 407
  }, {
    "from": 181,
    "label": "calls",
    "to": 407
  }, {
    "from": 181,
    "label": "calls",
    "to": 407
  }, {
    "from": 403,
    "label": "calls",
    "to": 407
  }, {
    "from": 403,
    "label": "calls",
    "to": 407
  }, {
    "from": 403,
    "label": "calls",
    "to": 407
  }, {
    "from": 403,
    "label": "calls",
    "to": 407
  }, {
    "from": 403,
    "label": "calls",
    "to": 407
  }, {
    "from": 403,
    "label": "calls",
    "to": 407
  }, {
    "from": 403,
    "label": "calls",
    "to": 407
  }, {
    "from": 370,
    "label": "calls",
    "to": 419
  }, {
    "from": 403,
    "label": "calls",
    "to": 65
  }, {
    "from": 403,
    "label": "calls",
    "to": 415
  }, {
    "from": 403,
    "label": "calls",
    "to": 71
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 403,
    "label": "calls",
    "to": 408
  }, {
    "from": 5,
    "label": "calls",
    "to": 408
  }, {
    "from": 403,
    "label": "calls",
    "to": 408
  }, {
    "from": 342,
    "label": "calls",
    "to": 408
  }, {
    "from": 181,
    "label": "calls",
    "to": 159
  }, {
    "from": 181,
    "label": "calls",
    "to": 159
  }, {
    "from": 403,
    "label": "calls",
    "to": 159
  }, {
    "from": 34,
    "label": "calls",
    "to": 26
  }, {
    "from": 42,
    "label": "calls",
    "to": 26
  }, {
    "from": 116,
    "label": "calls",
    "to": 26
  }, {
    "from": 132,
    "label": "calls",
    "to": 26
  }, {
    "from": 141,
    "label": "calls",
    "to": 26
  }, {
    "from": 147,
    "label": "calls",
    "to": 26
  }, {
    "from": 181,
    "label": "calls",
    "to": 26
  }, {
    "from": 181,
    "label": "calls",
    "to": 26
  }, {
    "from": 403,
    "label": "calls",
    "to": 26
  }, {
    "from": 403,
    "label": "calls",
    "to": 26
  }, {
    "from": 403,
    "label": "calls",
    "to": 26
  }, {
    "from": 403,
    "label": "calls",
    "to": 26
  }, {
    "from": 403,
    "label": "calls",
    "to": 26
  }, {
    "from": 351,
    "label": "calls",
    "to": 26
  }, {
    "from": 403,
    "label": "calls",
    "to": 141
  }, {
    "from": 105,
    "label": "calls",
    "to": 416
  }, {
    "from": 403,
    "label": "calls",
    "to": 416
  }, {
    "from": 403,
    "label": "calls",
    "to": 82
  }, {
    "from": 57,
    "label": "calls",
    "to": 417
  }, {
    "from": 65,
    "label": "calls",
    "to": 417
  }, {
    "from": 71,
    "label": "calls",
    "to": 417
  }, {
    "from": 403,
    "label": "calls",
    "to": 417
  }, {
    "from": 403,
    "label": "calls",
    "to": 417
  }, {
    "from": 342,
    "label": "calls",
    "to": 417
  }, {
    "from": 34,
    "label": "calls",
    "to": 418
  }, {
    "from": 403,
    "label": "calls",
    "to": 418
  }, {
    "from": 403,
    "label": "calls",
    "to": 418
  }, {
    "from": 403,
    "label": "calls",
    "to": 418
  }, {
    "from": 403,
    "label": "calls",
    "to": 418
  }, {
    "from": 403,
    "label": "calls",
    "to": 418
  }, {
    "from": 102,
    "label": "calls",
    "to": 88
  }, {
    "from": 105,
    "label": "calls",
    "to": 88
  }, {
    "from": 159,
    "label": "calls",
    "to": 88
  }, {
    "from": 181,
    "label": "calls",
    "to": 88
  }, {
    "from": 181,
    "label": "calls",
    "to": 88
  }, {
    "from": 181,
    "label": "calls",
    "to": 88
  }, {
    "from": 403,
    "label": "calls",
    "to": 88
  }, {
    "from": 403,
    "label": "calls",
    "to": 88
  }, {
    "from": 403,
    "label": "calls",
    "to": 88
  }, {
    "from": 403,
    "label": "calls",
    "to": 88
  }, {
    "from": 403,
    "label": "calls",
    "to": 88
  }, {
    "from": 403,
    "label": "calls",
    "to": 88
  }, {
    "from": 403,
    "label": "calls",
    "to": 88
  }, {
    "from": 403,
    "label": "calls",
    "to": 88
  }, {
    "from": 403,
    "label": "calls",
    "to": 47
  }, {
    "from": 181,
    "label": "calls",
    "to": 102
  }, {
    "from": 181,
    "label": "calls",
    "to": 102
  }, {
    "from": 403,
    "label": "calls",
    "to": 12
  }, {
    "from": 2,
    "label": "calls",
    "to": 420
  }, {
    "from": 403,
    "label": "calls",
    "to": 420
  }, {
    "from": 403,
    "label": "calls",
    "to": 420
  }, {
    "from": 403,
    "label": "calls",
    "to": 420
  }, {
    "from": 403,
    "label": "calls",
    "to": 420
  }, {
    "from": 403,
    "label": "calls",
    "to": 420
  }, {
    "from": 159,
    "label": "calls",
    "to": 420
  }, {
    "from": 169,
    "label": "calls",
    "to": 420
  }, {
    "from": 169,
    "label": "calls",
    "to": 420
  }, {
    "from": 169,
    "label": "calls",
    "to": 420
  }, {
    "from": 403,
    "label": "calls",
    "to": 420
  }, {
    "from": 403,
    "label": "calls",
    "to": 420
  }, {
    "from": 403,
    "label": "calls",
    "to": 420
  }, {
    "from": 370,
    "label": "calls",
    "to": 420
  }, {
    "from": 370,
    "label": "calls",
    "to": 420
  }, {
    "from": 370,
    "label": "calls",
    "to": 420
  }, {
    "from": 370,
    "label": "calls",
    "to": 420
  }, {
    "from": 359,
    "label": "calls",
    "to": 342
  }, {
    "from": 181,
    "label": "calls",
    "to": 169
  }, {
    "from": 403,
    "label": "calls",
    "to": 169
  }, {
    "from": 403,
    "label": "calls",
    "to": 169
  }, {
    "from": 403,
    "label": "calls",
    "to": 169
  }, {
    "from": 26,
    "label": "calls",
    "to": 22
  }, {
    "from": 42,
    "label": "calls",
    "to": 22
  }, {
    "from": 403,
    "label": "calls",
    "to": 51
  }, {
    "from": 403,
    "label": "calls",
    "to": 132
  }, {
    "from": 403,
    "label": "calls",
    "to": 34
  }, {
    "from": 403,
    "label": "calls",
    "to": 34
  }, {
    "from": 403,
    "label": "calls",
    "to": 34
  }, {
    "from": 403,
    "label": "calls",
    "to": 34
  }, {
    "from": 351,
    "label": "calls",
    "to": 34
  }, {
    "from": 342,
    "label": "calls",
    "to": 421
  }, {
    "from": 359,
    "label": "calls",
    "to": 77
  }, {
    "from": 403,
    "label": "calls",
    "to": 105
  }, {
    "from": 51,
    "label": "calls",
    "to": 409
  }, {
    "from": 359,
    "label": "calls",
    "to": 57
  }, {
    "from": 403,
    "label": "calls",
    "to": 181
  }, {
    "from": 403,
    "label": "calls",
    "to": 422
  }, {
    "from": 403,
    "label": "calls",
    "to": 422
  }, {
    "from": 370,
    "label": "calls",
    "to": 422
  }, {
    "from": 370,
    "label": "calls",
    "to": 422
  }, {
    "from": 403,
    "label": "calls",
    "to": 42
  }, {
    "from": 159,
    "label": "calls",
    "to": 116
  }, {
    "from": 403,
    "label": "calls",
    "to": 116
  }, {
    "from": 403,
    "label": "calls",
    "to": 116
  }, {
    "from": 403,
    "label": "calls",
    "to": 116
  }, {
    "from": 403,
    "label": "calls",
    "to": 116
  }, {
    "from": 403,
    "label": "calls",
    "to": 410
  }, {
    "from": 370,
    "label": "calls",
    "to": 411
  }, {
    "from": 181,
    "label": "calls",
    "to": 147
  }, {
    "from": 181,
    "label": "calls",
    "to": 147
  }, {
    "from": 34,
    "label": "calls",
    "to": 412
  }, {
    "from": 105,
    "label": "calls",
    "to": 414
  }, {
    "from": 1,
    "label": "contains",
    "to": 403
  }, {
    "from": 403,
    "label": "declares",
    "to": 2
  }, {
    "from": 403,
    "label": "declares",
    "to": 5
  }, {
    "from": 403,
    "label": "declares",
    "to": 12
  }, {
    "from": 403,
    "label": "declares",
    "to": 22
  }, {
    "from": 403,
    "label": "declares",
    "to": 26
  }, {
    "from": 403,
    "label": "declares",
    "to": 34
  }, {
    "from": 403,
    "label": "declares",
    "to": 42
  }, {
    "from": 403,
    "label": "declares",
    "to": 47
  }, {
    "from": 403,
    "label": "declares",
    "to": 51
  }, {
    "from": 403,
    "label": "declares",
    "to": 57
  }, {
    "from": 403,
    "label": "declares",
    "to": 65
  }, {
    "from": 403,
    "label": "declares",
    "to": 71
  }, {
    "from": 403,
    "label": "declares",
    "to": 77
  }, {
    "from": 403,
    "label": "declares",
    "to": 82
  }, {
    "from": 403,
    "label": "declares",
    "to": 86
  }, {
    "from": 403,
    "label": "declares",
    "to": 88
  }, {
    "from": 403,
    "label": "declares",
    "to": 102
  }, {
    "from": 403,
    "label": "declares",
    "to": 105
  }, {
    "from": 403,
    "label": "declares",
    "to": 116
  }, {
    "from": 403,
    "label": "declares",
    "to": 132
  }, {
    "from": 403,
    "label": "declares",
    "to": 141
  }, {
    "from": 403,
    "label": "declares",
    "to": 147
  }, {
    "from": 403,
    "label": "declares",
    "to": 159
  }, {
    "from": 403,
    "label": "declares",
    "to": 169
  }, {
    "from": 403,
    "label": "declares",
    "to": 181
  }, {
    "from": 403,
    "label": "declares",
    "to": 233
  }, {
    "from": 403,
    "label": "declares",
    "to": 278
  }, {
    "from": 403,
    "label": "declares",
    "to": 284
  }, {
    "from": 403,
    "label": "declares",
    "to": 290
  }, {
    "from": 403,
    "label": "declares",
    "to": 294
  }, {
    "from": 403,
    "label": "declares",
    "to": 298
  }, {
    "from": 403,
    "label": "declares",
    "to": 306
  }, {
    "from": 403,
    "label": "declares",
    "to": 317
  }, {
    "from": 403,
    "label": "declares",
    "to": 328
  }, {
    "from": 403,
    "label": "declares",
    "to": 342
  }, {
    "from": 403,
    "label": "declares",
    "to": 351
  }, {
    "from": 403,
    "label": "declares",
    "to": 355
  }, {
    "from": 403,
    "label": "declares",
    "to": 359
  }, {
    "from": 403,
    "label": "declares",
    "to": 364
  }, {
    "from": 403,
    "label": "declares",
    "to": 367
  }, {
    "from": 403,
    "label": "declares",
    "to": 370
  }, {
    "from": 403,
    "label": "declares",
    "to": 381
  }, {
    "from": 403,
    "label": "declares",
    "to": 390
  }, {
    "from": 403,
    "label": "declares",
    "to": 397
  }, {
    "from": 403,
    "label": "declares",
    "to": 398
  }, {
    "from": 403,
    "label": "declares",
    "to": 399
  }, {
    "from": 403,
    "label": "declares",
    "to": 400
  }, {
    "from": 403,
    "label": "declares",
    "to": 401
  }, {
    "from": 1,
    "label": "contains",
    "to": 423
  }, {
    "from": 1,
    "label": "contains",
    "to": 424
  }, {
    "from": 423,
    "label": "initializes",
    "to": 425
  }, {
    "from": 425,
    "label": "assigns",
    "to": 426
  }, {
    "from": 426,
    "label": "assigns",
    "to": 427
  }, {
    "from": 427,
    "label": "assigns",
    "to": 428
  }, {
    "from": 426,
    "label": "assigns",
    "to": 429
  }, {
    "from": 429,
    "label": "assigns",
    "to": 430
  }, {
    "from": 426,
    "label": "assigns",
    "to": 431
  }, {
    "from": 431,
    "label": "assigns",
    "to": 432
  }, {
    "from": 426,
    "label": "assigns",
    "to": 433
  }, {
    "from": 433,
    "label": "assigns",
    "to": 434
  }, {
    "from": 426,
    "label": "assigns",
    "to": 435
  }, {
    "from": 435,
    "label": "assigns",
    "to": 436
  }, {
    "from": 426,
    "label": "assigns",
    "to": 437
  }, {
    "from": 437,
    "label": "assigns",
    "to": 438
  }, {
    "from": 426,
    "label": "assigns",
    "to": 439
  }, {
    "from": 439,
    "label": "assigns",
    "to": 440
  }, {
    "from": 423,
    "label": "initializes",
    "to": 441
  }, {
    "from": 441,
    "label": "assigns",
    "to": 442
  }, {
    "from": 442,
    "label": "assigns",
    "to": 443
  }, {
    "from": 443,
    "label": "assigns",
    "to": 444
  }, {
    "from": 423,
    "label": "initializes",
    "to": 445
  }, {
    "from": 445,
    "label": "assigns",
    "to": 446
  }, {
    "from": 423,
    "label": "initializes",
    "to": 447
  }, {
    "from": 447,
    "label": "assigns",
    "to": 448
  }, {
    "from": 423,
    "label": "initializes",
    "to": 449
  }, {
    "from": 449,
    "label": "assigns",
    "to": 450
  }, {
    "from": 423,
    "label": "initializes",
    "to": 451
  }, {
    "from": 451,
    "label": "assigns",
    "to": 452
  }, {
    "from": 423,
    "label": "initializes",
    "to": 453
  }, {
    "from": 453,
    "label": "assigns",
    "to": 454
  }, {
    "from": 423,
    "label": "initializes",
    "to": 455
  }, {
    "from": 455,
    "label": "assigns",
    "to": 456
  }, {
    "from": 423,
    "label": "initializes",
    "to": 457
  }, {
    "from": 457,
    "label": "assigns",
    "to": 458
  }, {
    "from": 423,
    "label": "initializes",
    "to": 459
  }, {
    "from": 459,
    "label": "assigns",
    "to": 460
  }, {
    "from": 423,
    "label": "initializes",
    "to": 461
  }, {
    "from": 461,
    "label": "assigns",
    "to": 462
  }, {
    "from": 423,
    "label": "initializes",
    "to": 463
  }, {
    "from": 463,
    "label": "assigns",
    "to": 464
  }, {
    "from": 423,
    "label": "initializes",
    "to": 465
  }, {
    "from": 465,
    "label": "assigns",
    "to": 466
  }, {
    "from": 423,
    "label": "initializes",
    "to": 467
  }, {
    "from": 467,
    "label": "assigns",
    "to": 468
  }, {
    "from": 423,
    "label": "initializes",
    "to": 469
  }, {
    "from": 469,
    "label": "assigns",
    "to": 470
  }, {
    "from": 423,
    "label": "initializes",
    "to": 471
  }, {
    "from": 471,
    "label": "assigns",
    "to": 472
  }, {
    "from": 423,
    "label": "initializes",
    "to": 473
  }, {
    "from": 473,
    "label": "assigns",
    "to": 474
  }, {
    "from": 423,
    "label": "initializes",
    "to": 475
  }, {
    "from": 475,
    "label": "assigns",
    "to": 476
  }, {
    "from": 423,
    "label": "initializes",
    "to": 477
  }, {
    "from": 477,
    "label": "assigns",
    "to": 478
  }, {
    "from": 423,
    "label": "initializes",
    "to": 479
  }, {
    "from": 479,
    "label": "assigns",
    "to": 480
  }, {
    "from": 423,
    "label": "initializes",
    "to": 481
  }, {
    "from": 423,
    "label": "initializes",
    "to": 482
  }, {
    "from": 423,
    "label": "initializes",
    "to": 483
  }, {
    "from": 423,
    "label": "initializes",
    "to": 484
  }, {
    "from": 423,
    "label": "initializes",
    "to": 485
  }, {
    "from": 423,
    "label": "initializes",
    "to": 486
  }, {
    "from": 423,
    "label": "initializes",
    "to": 487
  }, {
    "from": 487,
    "label": "assigns",
    "to": 488
  }, {
    "from": 488,
    "label": "assigns",
    "to": 489
  }, {
    "from": 488,
    "label": "assigns",
    "to": 490
  }, {
    "from": 488,
    "label": "assigns",
    "to": 491
  }, {
    "from": 488,
    "label": "assigns",
    "to": 492
  }, {
    "from": 488,
    "label": "assigns",
    "to": 493
  }, {
    "from": 488,
    "label": "assigns",
    "to": 494
  }, {
    "from": 488,
    "label": "assigns",
    "to": 495
  }, {
    "from": 488,
    "label": "assigns",
    "to": 496
  }, {
    "from": 488,
    "label": "assigns",
    "to": 497
  }, {
    "from": 488,
    "label": "assigns",
    "to": 498
  }, {
    "from": 488,
    "label": "assigns",
    "to": 499
  }, {
    "from": 488,
    "label": "assigns",
    "to": 500
  }, {
    "from": 488,
    "label": "assigns",
    "to": 501
  }, {
    "from": 488,
    "label": "assigns",
    "to": 502
  }, {
    "from": 488,
    "label": "assigns",
    "to": 503
  }, {
    "from": 423,
    "label": "initializes",
    "to": 504
  }, {
    "from": 504,
    "label": "assigns",
    "to": 505
  }, {
    "from": 423,
    "label": "initializes",
    "to": 506
  }, {
    "from": 506,
    "label": "assigns",
    "to": 507
  }, {
    "from": 423,
    "label": "initializes",
    "to": 508
  }, {
    "from": 508,
    "label": "assigns",
    "to": 509
  }, {
    "from": 423,
    "label": "initializes",
    "to": 510
  }, {
    "from": 510,
    "label": "assigns",
    "to": 511
  }, {
    "from": 511,
    "label": "assigns",
    "to": 512
  }, {
    "from": 423,
    "label": "initializes",
    "to": 513
  }, {
    "from": 513,
    "label": "assigns",
    "to": 514
  }, {
    "from": 423,
    "label": "initializes",
    "to": 515
  }, {
    "from": 515,
    "label": "assigns",
    "to": 516
  }, {
    "from": 423,
    "label": "initializes",
    "to": 517
  }, {
    "from": 517,
    "label": "assigns",
    "to": 518
  }, {
    "from": 423,
    "label": "initializes",
    "to": 519
  }, {
    "from": 519,
    "label": "assigns",
    "to": 520
  }, {
    "from": 423,
    "label": "initializes",
    "to": 521
  }, {
    "from": 521,
    "label": "assigns",
    "to": 522
  }, {
    "from": 423,
    "label": "initializes",
    "to": 523
  }, {
    "from": 523,
    "label": "assigns",
    "to": 524
  }, {
    "from": 423,
    "label": "initializes",
    "to": 525
  }, {
    "from": 525,
    "label": "assigns",
    "to": 526
  }, {
    "from": 526,
    "label": "assigns",
    "to": 527
  }, {
    "from": 527,
    "label": "assigns",
    "to": 528
  }, {
    "from": 526,
    "label": "assigns",
    "to": 529
  }, {
    "from": 529,
    "label": "assigns",
    "to": 530
  }, {
    "from": 526,
    "label": "assigns",
    "to": 531
  }, {
    "from": 531,
    "label": "assigns",
    "to": 532
  }, {
    "from": 423,
    "label": "initializes",
    "to": 533
  }, {
    "from": 533,
    "label": "assigns",
    "to": 534
  }, {
    "from": 534,
    "label": "assigns",
    "to": 535
  }, {
    "from": 535,
    "label": "assigns",
    "to": 536
  }, {
    "from": 534,
    "label": "assigns",
    "to": 537
  }, {
    "from": 537,
    "label": "assigns",
    "to": 538
  }, {
    "from": 534,
    "label": "assigns",
    "to": 539
  }, {
    "from": 539,
    "label": "assigns",
    "to": 540
  }, {
    "from": 423,
    "label": "initializes",
    "to": 541
  }, {
    "from": 541,
    "label": "assigns",
    "to": 542
  }, {
    "from": 423,
    "label": "initializes",
    "to": 543
  }, {
    "from": 543,
    "label": "assigns",
    "to": 544
  }, {
    "from": 423,
    "label": "initializes",
    "to": 545
  }, {
    "from": 545,
    "label": "assigns",
    "to": 546
  }, {
    "from": 546,
    "label": "assigns",
    "to": 547
  }, {
    "from": 547,
    "label": "assigns",
    "to": 548
  }, {
    "from": 546,
    "label": "assigns",
    "to": 549
  }, {
    "from": 549,
    "label": "assigns",
    "to": 550
  }, {
    "from": 546,
    "label": "assigns",
    "to": 551
  }, {
    "from": 551,
    "label": "assigns",
    "to": 552
  }, {
    "from": 546,
    "label": "assigns",
    "to": 553
  }, {
    "from": 553,
    "label": "assigns",
    "to": 554
  }, {
    "from": 423,
    "label": "initializes",
    "to": 555
  }, {
    "from": 555,
    "label": "assigns",
    "to": 556
  }, {
    "from": 556,
    "label": "assigns",
    "to": 557
  }, {
    "from": 557,
    "label": "assigns",
    "to": 558
  }, {
    "from": 556,
    "label": "assigns",
    "to": 559
  }, {
    "from": 559,
    "label": "assigns",
    "to": 560
  }, {
    "from": 556,
    "label": "assigns",
    "to": 561
  }, {
    "from": 561,
    "label": "assigns",
    "to": 562
  }, {
    "from": 556,
    "label": "assigns",
    "to": 563
  }, {
    "from": 563,
    "label": "assigns",
    "to": 564
  }, {
    "from": 556,
    "label": "assigns",
    "to": 565
  }, {
    "from": 565,
    "label": "assigns",
    "to": 566
  }, {
    "from": 556,
    "label": "assigns",
    "to": 567
  }, {
    "from": 567,
    "label": "assigns",
    "to": 568
  }, {
    "from": 556,
    "label": "assigns",
    "to": 569
  }, {
    "from": 569,
    "label": "assigns",
    "to": 570
  }, {
    "from": 556,
    "label": "assigns",
    "to": 571
  }, {
    "from": 571,
    "label": "assigns",
    "to": 572
  }, {
    "from": 556,
    "label": "assigns",
    "to": 573
  }, {
    "from": 573,
    "label": "assigns",
    "to": 574
  }, {
    "from": 556,
    "label": "assigns",
    "to": 575
  }, {
    "from": 575,
    "label": "assigns",
    "to": 576
  }, {
    "from": 556,
    "label": "assigns",
    "to": 577
  }, {
    "from": 577,
    "label": "assigns",
    "to": 578
  }, {
    "from": 556,
    "label": "assigns",
    "to": 579
  }, {
    "from": 579,
    "label": "assigns",
    "to": 580
  }, {
    "from": 556,
    "label": "assigns",
    "to": 581
  }, {
    "from": 581,
    "label": "assigns",
    "to": 582
  }, {
    "from": 556,
    "label": "assigns",
    "to": 583
  }, {
    "from": 583,
    "label": "assigns",
    "to": 584
  }, {
    "from": 556,
    "label": "assigns",
    "to": 585
  }, {
    "from": 585,
    "label": "assigns",
    "to": 586
  }, {
    "from": 556,
    "label": "assigns",
    "to": 587
  }, {
    "from": 587,
    "label": "assigns",
    "to": 588
  }, {
    "from": 556,
    "label": "assigns",
    "to": 589
  }, {
    "from": 589,
    "label": "assigns",
    "to": 590
  }, {
    "from": 423,
    "label": "initializes",
    "to": 591
  }, {
    "from": 591,
    "label": "assigns",
    "to": 592
  }, {
    "from": 592,
    "label": "assigns",
    "to": 593
  }, {
    "from": 593,
    "label": "assigns",
    "to": 594
  }, {
    "from": 592,
    "label": "assigns",
    "to": 595
  }, {
    "from": 595,
    "label": "assigns",
    "to": 596
  }, {
    "from": 592,
    "label": "assigns",
    "to": 597
  }, {
    "from": 597,
    "label": "assigns",
    "to": 598
  }, {
    "from": 592,
    "label": "assigns",
    "to": 599
  }, {
    "from": 599,
    "label": "assigns",
    "to": 600
  }, {
    "from": 592,
    "label": "assigns",
    "to": 601
  }, {
    "from": 601,
    "label": "assigns",
    "to": 602
  }, {
    "from": 592,
    "label": "assigns",
    "to": 603
  }, {
    "from": 603,
    "label": "assigns",
    "to": 604
  }, {
    "from": 592,
    "label": "assigns",
    "to": 605
  }, {
    "from": 605,
    "label": "assigns",
    "to": 606
  }, {
    "from": 592,
    "label": "assigns",
    "to": 607
  }, {
    "from": 607,
    "label": "assigns",
    "to": 608
  }, {
    "from": 592,
    "label": "assigns",
    "to": 609
  }, {
    "from": 609,
    "label": "assigns",
    "to": 610
  }, {
    "from": 592,
    "label": "assigns",
    "to": 611
  }, {
    "from": 611,
    "label": "assigns",
    "to": 612
  }, {
    "from": 592,
    "label": "assigns",
    "to": 613
  }, {
    "from": 613,
    "label": "assigns",
    "to": 614
  }, {
    "from": 592,
    "label": "assigns",
    "to": 615
  }, {
    "from": 615,
    "label": "assigns",
    "to": 616
  }, {
    "from": 592,
    "label": "assigns",
    "to": 617
  }, {
    "from": 617,
    "label": "assigns",
    "to": 618
  }, {
    "from": 592,
    "label": "assigns",
    "to": 619
  }, {
    "from": 619,
    "label": "assigns",
    "to": 620
  }, {
    "from": 592,
    "label": "assigns",
    "to": 621
  }, {
    "from": 621,
    "label": "assigns",
    "to": 622
  }, {
    "from": 592,
    "label": "assigns",
    "to": 623
  }, {
    "from": 623,
    "label": "assigns",
    "to": 624
  }, {
    "from": 592,
    "label": "assigns",
    "to": 625
  }, {
    "from": 625,
    "label": "assigns",
    "to": 626
  }, {
    "from": 592,
    "label": "assigns",
    "to": 627
  }, {
    "from": 627,
    "label": "assigns",
    "to": 628
  }, {
    "from": 592,
    "label": "assigns",
    "to": 629
  }, {
    "from": 629,
    "label": "assigns",
    "to": 630
  }, {
    "from": 592,
    "label": "assigns",
    "to": 631
  }, {
    "from": 631,
    "label": "assigns",
    "to": 632
  }, {
    "from": 592,
    "label": "assigns",
    "to": 633
  }, {
    "from": 633,
    "label": "assigns",
    "to": 634
  }, {
    "from": 592,
    "label": "assigns",
    "to": 635
  }, {
    "from": 635,
    "label": "assigns",
    "to": 636
  }, {
    "from": 592,
    "label": "assigns",
    "to": 637
  }, {
    "from": 637,
    "label": "assigns",
    "to": 638
  }, {
    "from": 592,
    "label": "assigns",
    "to": 639
  }, {
    "from": 639,
    "label": "assigns",
    "to": 640
  }, {
    "from": 592,
    "label": "assigns",
    "to": 641
  }, {
    "from": 641,
    "label": "assigns",
    "to": 642
  }, {
    "from": 592,
    "label": "assigns",
    "to": 643
  }, {
    "from": 643,
    "label": "assigns",
    "to": 644
  }, {
    "from": 592,
    "label": "assigns",
    "to": 645
  }, {
    "from": 645,
    "label": "assigns",
    "to": 646
  }, {
    "from": 592,
    "label": "assigns",
    "to": 647
  }, {
    "from": 647,
    "label": "assigns",
    "to": 648
  }, {
    "from": 592,
    "label": "assigns",
    "to": 649
  }, {
    "from": 649,
    "label": "assigns",
    "to": 650
  }, {
    "from": 592,
    "label": "assigns",
    "to": 651
  }, {
    "from": 651,
    "label": "assigns",
    "to": 652
  }, {
    "from": 592,
    "label": "assigns",
    "to": 653
  }, {
    "from": 653,
    "label": "assigns",
    "to": 654
  }, {
    "from": 592,
    "label": "assigns",
    "to": 655
  }, {
    "from": 655,
    "label": "assigns",
    "to": 656
  }, {
    "from": 592,
    "label": "assigns",
    "to": 657
  }, {
    "from": 657,
    "label": "assigns",
    "to": 658
  }, {
    "from": 592,
    "label": "assigns",
    "to": 659
  }, {
    "from": 659,
    "label": "assigns",
    "to": 660
  }, {
    "from": 592,
    "label": "assigns",
    "to": 661
  }, {
    "from": 661,
    "label": "assigns",
    "to": 662
  }, {
    "from": 592,
    "label": "assigns",
    "to": 663
  }, {
    "from": 663,
    "label": "assigns",
    "to": 664
  }, {
    "from": 592,
    "label": "assigns",
    "to": 665
  }, {
    "from": 665,
    "label": "assigns",
    "to": 666
  }, {
    "from": 592,
    "label": "assigns",
    "to": 667
  }, {
    "from": 667,
    "label": "assigns",
    "to": 668
  }, {
    "from": 592,
    "label": "assigns",
    "to": 669
  }, {
    "from": 669,
    "label": "assigns",
    "to": 670
  }, {
    "from": 592,
    "label": "assigns",
    "to": 671
  }, {
    "from": 671,
    "label": "assigns",
    "to": 672
  }, {
    "from": 592,
    "label": "assigns",
    "to": 673
  }, {
    "from": 673,
    "label": "assigns",
    "to": 674
  }, {
    "from": 592,
    "label": "assigns",
    "to": 675
  }, {
    "from": 675,
    "label": "assigns",
    "to": 676
  }, {
    "from": 592,
    "label": "assigns",
    "to": 677
  }, {
    "from": 677,
    "label": "assigns",
    "to": 678
  }, {
    "from": 592,
    "label": "assigns",
    "to": 679
  }, {
    "from": 679,
    "label": "assigns",
    "to": 680
  }, {
    "from": 592,
    "label": "assigns",
    "to": 681
  }, {
    "from": 681,
    "label": "assigns",
    "to": 682
  }, {
    "from": 592,
    "label": "assigns",
    "to": 683
  }, {
    "from": 683,
    "label": "assigns",
    "to": 684
  }, {
    "from": 592,
    "label": "assigns",
    "to": 685
  }, {
    "from": 685,
    "label": "assigns",
    "to": 686
  }, {
    "from": 592,
    "label": "assigns",
    "to": 687
  }, {
    "from": 687,
    "label": "assigns",
    "to": 688
  }, {
    "from": 592,
    "label": "assigns",
    "to": 689
  }, {
    "from": 689,
    "label": "assigns",
    "to": 690
  }, {
    "from": 592,
    "label": "assigns",
    "to": 691
  }, {
    "from": 691,
    "label": "assigns",
    "to": 692
  }, {
    "from": 592,
    "label": "assigns",
    "to": 693
  }, {
    "from": 693,
    "label": "assigns",
    "to": 694
  }, {
    "from": 592,
    "label": "assigns",
    "to": 695
  }, {
    "from": 695,
    "label": "assigns",
    "to": 696
  }, {
    "from": 592,
    "label": "assigns",
    "to": 697
  }, {
    "from": 697,
    "label": "assigns",
    "to": 698
  }, {
    "from": 592,
    "label": "assigns",
    "to": 699
  }, {
    "from": 699,
    "label": "assigns",
    "to": 700
  }, {
    "from": 592,
    "label": "assigns",
    "to": 701
  }, {
    "from": 701,
    "label": "assigns",
    "to": 702
  }, {
    "from": 592,
    "label": "assigns",
    "to": 703
  }, {
    "from": 703,
    "label": "assigns",
    "to": 704
  }, {
    "from": 592,
    "label": "assigns",
    "to": 705
  }, {
    "from": 705,
    "label": "assigns",
    "to": 706
  }, {
    "from": 592,
    "label": "assigns",
    "to": 707
  }, {
    "from": 707,
    "label": "assigns",
    "to": 708
  }, {
    "from": 592,
    "label": "assigns",
    "to": 709
  }, {
    "from": 709,
    "label": "assigns",
    "to": 710
  }, {
    "from": 592,
    "label": "assigns",
    "to": 711
  }, {
    "from": 711,
    "label": "assigns",
    "to": 712
  }, {
    "from": 592,
    "label": "assigns",
    "to": 713
  }, {
    "from": 713,
    "label": "assigns",
    "to": 714
  }, {
    "from": 592,
    "label": "assigns",
    "to": 715
  }, {
    "from": 715,
    "label": "assigns",
    "to": 716
  }, {
    "from": 592,
    "label": "assigns",
    "to": 717
  }, {
    "from": 717,
    "label": "assigns",
    "to": 718
  }, {
    "from": 592,
    "label": "assigns",
    "to": 719
  }, {
    "from": 719,
    "label": "assigns",
    "to": 720
  }, {
    "from": 592,
    "label": "assigns",
    "to": 721
  }, {
    "from": 721,
    "label": "assigns",
    "to": 722
  }, {
    "from": 592,
    "label": "assigns",
    "to": 723
  }, {
    "from": 723,
    "label": "assigns",
    "to": 724
  }, {
    "from": 592,
    "label": "assigns",
    "to": 725
  }, {
    "from": 725,
    "label": "assigns",
    "to": 726
  }, {
    "from": 592,
    "label": "assigns",
    "to": 727
  }, {
    "from": 727,
    "label": "assigns",
    "to": 728
  }, {
    "from": 592,
    "label": "assigns",
    "to": 729
  }, {
    "from": 729,
    "label": "assigns",
    "to": 730
  }, {
    "from": 592,
    "label": "assigns",
    "to": 731
  }, {
    "from": 731,
    "label": "assigns",
    "to": 732
  }, {
    "from": 592,
    "label": "assigns",
    "to": 733
  }, {
    "from": 733,
    "label": "assigns",
    "to": 734
  }, {
    "from": 592,
    "label": "assigns",
    "to": 735
  }, {
    "from": 735,
    "label": "assigns",
    "to": 736
  }, {
    "from": 592,
    "label": "assigns",
    "to": 737
  }, {
    "from": 737,
    "label": "assigns",
    "to": 738
  }, {
    "from": 592,
    "label": "assigns",
    "to": 739
  }, {
    "from": 739,
    "label": "assigns",
    "to": 740
  }, {
    "from": 592,
    "label": "assigns",
    "to": 741
  }, {
    "from": 741,
    "label": "assigns",
    "to": 742
  }, {
    "from": 592,
    "label": "assigns",
    "to": 743
  }, {
    "from": 743,
    "label": "assigns",
    "to": 744
  }, {
    "from": 592,
    "label": "assigns",
    "to": 745
  }, {
    "from": 745,
    "label": "assigns",
    "to": 746
  }, {
    "from": 592,
    "label": "assigns",
    "to": 747
  }, {
    "from": 747,
    "label": "assigns",
    "to": 748
  }, {
    "from": 592,
    "label": "assigns",
    "to": 749
  }, {
    "from": 749,
    "label": "assigns",
    "to": 750
  }, {
    "from": 592,
    "label": "assigns",
    "to": 751
  }, {
    "from": 751,
    "label": "assigns",
    "to": 752
  }, {
    "from": 592,
    "label": "assigns",
    "to": 753
  }, {
    "from": 753,
    "label": "assigns",
    "to": 754
  }, {
    "from": 592,
    "label": "assigns",
    "to": 755
  }, {
    "from": 755,
    "label": "assigns",
    "to": 756
  }, {
    "from": 592,
    "label": "assigns",
    "to": 757
  }, {
    "from": 757,
    "label": "assigns",
    "to": 758
  }, {
    "from": 592,
    "label": "assigns",
    "to": 759
  }, {
    "from": 759,
    "label": "assigns",
    "to": 760
  }, {
    "from": 592,
    "label": "assigns",
    "to": 761
  }, {
    "from": 761,
    "label": "assigns",
    "to": 762
  }, {
    "from": 592,
    "label": "assigns",
    "to": 763
  }, {
    "from": 763,
    "label": "assigns",
    "to": 764
  }, {
    "from": 592,
    "label": "assigns",
    "to": 765
  }, {
    "from": 765,
    "label": "assigns",
    "to": 766
  }, {
    "from": 592,
    "label": "assigns",
    "to": 767
  }, {
    "from": 767,
    "label": "assigns",
    "to": 768
  }, {
    "from": 592,
    "label": "assigns",
    "to": 769
  }, {
    "from": 769,
    "label": "assigns",
    "to": 770
  }, {
    "from": 592,
    "label": "assigns",
    "to": 771
  }, {
    "from": 771,
    "label": "assigns",
    "to": 772
  }, {
    "from": 592,
    "label": "assigns",
    "to": 773
  }, {
    "from": 773,
    "label": "assigns",
    "to": 774
  }, {
    "from": 592,
    "label": "assigns",
    "to": 775
  }, {
    "from": 775,
    "label": "assigns",
    "to": 776
  }, {
    "from": 592,
    "label": "assigns",
    "to": 777
  }, {
    "from": 777,
    "label": "assigns",
    "to": 778
  }, {
    "from": 592,
    "label": "assigns",
    "to": 779
  }, {
    "from": 779,
    "label": "assigns",
    "to": 780
  }, {
    "from": 592,
    "label": "assigns",
    "to": 781
  }, {
    "from": 781,
    "label": "assigns",
    "to": 782
  }, {
    "from": 592,
    "label": "assigns",
    "to": 783
  }, {
    "from": 783,
    "label": "assigns",
    "to": 784
  }, {
    "from": 592,
    "label": "assigns",
    "to": 785
  }, {
    "from": 785,
    "label": "assigns",
    "to": 786
  }, {
    "from": 592,
    "label": "assigns",
    "to": 787
  }, {
    "from": 787,
    "label": "assigns",
    "to": 788
  }, {
    "from": 592,
    "label": "assigns",
    "to": 789
  }, {
    "from": 789,
    "label": "assigns",
    "to": 790
  }, {
    "from": 592,
    "label": "assigns",
    "to": 791
  }, {
    "from": 791,
    "label": "assigns",
    "to": 792
  }, {
    "from": 592,
    "label": "assigns",
    "to": 793
  }, {
    "from": 793,
    "label": "assigns",
    "to": 794
  }, {
    "from": 592,
    "label": "assigns",
    "to": 795
  }, {
    "from": 795,
    "label": "assigns",
    "to": 796
  }, {
    "from": 592,
    "label": "assigns",
    "to": 797
  }, {
    "from": 797,
    "label": "assigns",
    "to": 798
  }, {
    "from": 592,
    "label": "assigns",
    "to": 799
  }, {
    "from": 799,
    "label": "assigns",
    "to": 800
  }, {
    "from": 592,
    "label": "assigns",
    "to": 801
  }, {
    "from": 801,
    "label": "assigns",
    "to": 802
  }, {
    "from": 592,
    "label": "assigns",
    "to": 803
  }, {
    "from": 803,
    "label": "assigns",
    "to": 804
  }, {
    "from": 592,
    "label": "assigns",
    "to": 805
  }, {
    "from": 805,
    "label": "assigns",
    "to": 806
  }, {
    "from": 592,
    "label": "assigns",
    "to": 807
  }, {
    "from": 807,
    "label": "assigns",
    "to": 808
  }, {
    "from": 592,
    "label": "assigns",
    "to": 809
  }, {
    "from": 809,
    "label": "assigns",
    "to": 810
  }, {
    "from": 592,
    "label": "assigns",
    "to": 811
  }, {
    "from": 811,
    "label": "assigns",
    "to": 812
  }, {
    "from": 592,
    "label": "assigns",
    "to": 813
  }, {
    "from": 813,
    "label": "assigns",
    "to": 814
  }, {
    "from": 592,
    "label": "assigns",
    "to": 815
  }, {
    "from": 815,
    "label": "assigns",
    "to": 816
  }, {
    "from": 592,
    "label": "assigns",
    "to": 817
  }, {
    "from": 817,
    "label": "assigns",
    "to": 818
  }, {
    "from": 592,
    "label": "assigns",
    "to": 819
  }, {
    "from": 819,
    "label": "assigns",
    "to": 820
  }, {
    "from": 592,
    "label": "assigns",
    "to": 821
  }, {
    "from": 821,
    "label": "assigns",
    "to": 822
  }, {
    "from": 592,
    "label": "assigns",
    "to": 823
  }, {
    "from": 823,
    "label": "assigns",
    "to": 824
  }, {
    "from": 592,
    "label": "assigns",
    "to": 825
  }, {
    "from": 825,
    "label": "assigns",
    "to": 826
  }, {
    "from": 592,
    "label": "assigns",
    "to": 827
  }, {
    "from": 827,
    "label": "assigns",
    "to": 828
  }, {
    "from": 592,
    "label": "assigns",
    "to": 829
  }, {
    "from": 829,
    "label": "assigns",
    "to": 830
  }, {
    "from": 592,
    "label": "assigns",
    "to": 831
  }, {
    "from": 831,
    "label": "assigns",
    "to": 832
  }, {
    "from": 592,
    "label": "assigns",
    "to": 833
  }, {
    "from": 833,
    "label": "assigns",
    "to": 834
  }, {
    "from": 592,
    "label": "assigns",
    "to": 835
  }, {
    "from": 835,
    "label": "assigns",
    "to": 836
  }, {
    "from": 592,
    "label": "assigns",
    "to": 837
  }, {
    "from": 837,
    "label": "assigns",
    "to": 838
  }, {
    "from": 592,
    "label": "assigns",
    "to": 839
  }, {
    "from": 839,
    "label": "assigns",
    "to": 840
  }, {
    "from": 592,
    "label": "assigns",
    "to": 841
  }, {
    "from": 841,
    "label": "assigns",
    "to": 842
  }, {
    "from": 592,
    "label": "assigns",
    "to": 843
  }, {
    "from": 843,
    "label": "assigns",
    "to": 844
  }, {
    "from": 592,
    "label": "assigns",
    "to": 845
  }, {
    "from": 845,
    "label": "assigns",
    "to": 846
  }, {
    "from": 592,
    "label": "assigns",
    "to": 847
  }, {
    "from": 847,
    "label": "assigns",
    "to": 848
  }, {
    "from": 592,
    "label": "assigns",
    "to": 849
  }, {
    "from": 849,
    "label": "assigns",
    "to": 850
  }, {
    "from": 592,
    "label": "assigns",
    "to": 851
  }, {
    "from": 851,
    "label": "assigns",
    "to": 852
  }, {
    "from": 592,
    "label": "assigns",
    "to": 853
  }, {
    "from": 853,
    "label": "assigns",
    "to": 854
  }, {
    "from": 592,
    "label": "assigns",
    "to": 855
  }, {
    "from": 855,
    "label": "assigns",
    "to": 856
  }, {
    "from": 592,
    "label": "assigns",
    "to": 857
  }, {
    "from": 857,
    "label": "assigns",
    "to": 858
  }, {
    "from": 592,
    "label": "assigns",
    "to": 859
  }, {
    "from": 859,
    "label": "assigns",
    "to": 860
  }, {
    "from": 592,
    "label": "assigns",
    "to": 861
  }, {
    "from": 861,
    "label": "assigns",
    "to": 862
  }, {
    "from": 592,
    "label": "assigns",
    "to": 863
  }, {
    "from": 863,
    "label": "assigns",
    "to": 864
  }, {
    "from": 592,
    "label": "assigns",
    "to": 865
  }, {
    "from": 865,
    "label": "assigns",
    "to": 866
  }, {
    "from": 592,
    "label": "assigns",
    "to": 867
  }, {
    "from": 867,
    "label": "assigns",
    "to": 868
  }, {
    "from": 592,
    "label": "assigns",
    "to": 869
  }, {
    "from": 869,
    "label": "assigns",
    "to": 870
  }, {
    "from": 592,
    "label": "assigns",
    "to": 871
  }, {
    "from": 871,
    "label": "assigns",
    "to": 872
  }, {
    "from": 592,
    "label": "assigns",
    "to": 873
  }, {
    "from": 873,
    "label": "assigns",
    "to": 874
  }, {
    "from": 592,
    "label": "assigns",
    "to": 875
  }, {
    "from": 875,
    "label": "assigns",
    "to": 876
  }, {
    "from": 592,
    "label": "assigns",
    "to": 877
  }, {
    "from": 877,
    "label": "assigns",
    "to": 878
  }, {
    "from": 592,
    "label": "assigns",
    "to": 879
  }, {
    "from": 879,
    "label": "assigns",
    "to": 880
  }, {
    "from": 592,
    "label": "assigns",
    "to": 881
  }, {
    "from": 881,
    "label": "assigns",
    "to": 882
  }, {
    "from": 592,
    "label": "assigns",
    "to": 883
  }, {
    "from": 883,
    "label": "assigns",
    "to": 884
  }, {
    "from": 592,
    "label": "assigns",
    "to": 885
  }, {
    "from": 885,
    "label": "assigns",
    "to": 886
  }, {
    "from": 592,
    "label": "assigns",
    "to": 887
  }, {
    "from": 887,
    "label": "assigns",
    "to": 888
  }, {
    "from": 592,
    "label": "assigns",
    "to": 889
  }, {
    "from": 889,
    "label": "assigns",
    "to": 890
  }, {
    "from": 592,
    "label": "assigns",
    "to": 891
  }, {
    "from": 891,
    "label": "assigns",
    "to": 892
  }, {
    "from": 592,
    "label": "assigns",
    "to": 893
  }, {
    "from": 893,
    "label": "assigns",
    "to": 894
  }, {
    "from": 592,
    "label": "assigns",
    "to": 895
  }, {
    "from": 895,
    "label": "assigns",
    "to": 896
  }, {
    "from": 592,
    "label": "assigns",
    "to": 897
  }, {
    "from": 897,
    "label": "assigns",
    "to": 898
  }, {
    "from": 592,
    "label": "assigns",
    "to": 899
  }, {
    "from": 899,
    "label": "assigns",
    "to": 900
  }, {
    "from": 592,
    "label": "assigns",
    "to": 901
  }, {
    "from": 901,
    "label": "assigns",
    "to": 902
  }, {
    "from": 592,
    "label": "assigns",
    "to": 903
  }, {
    "from": 903,
    "label": "assigns",
    "to": 904
  }, {
    "from": 592,
    "label": "assigns",
    "to": 905
  }, {
    "from": 905,
    "label": "assigns",
    "to": 906
  }, {
    "from": 592,
    "label": "assigns",
    "to": 907
  }, {
    "from": 907,
    "label": "assigns",
    "to": 908
  }, {
    "from": 592,
    "label": "assigns",
    "to": 909
  }, {
    "from": 909,
    "label": "assigns",
    "to": 910
  }, {
    "from": 592,
    "label": "assigns",
    "to": 911
  }, {
    "from": 911,
    "label": "assigns",
    "to": 912
  }, {
    "from": 592,
    "label": "assigns",
    "to": 913
  }, {
    "from": 913,
    "label": "assigns",
    "to": 914
  }, {
    "from": 592,
    "label": "assigns",
    "to": 915
  }, {
    "from": 915,
    "label": "assigns",
    "to": 916
  }, {
    "from": 592,
    "label": "assigns",
    "to": 917
  }, {
    "from": 917,
    "label": "assigns",
    "to": 918
  }, {
    "from": 592,
    "label": "assigns",
    "to": 919
  }, {
    "from": 919,
    "label": "assigns",
    "to": 920
  }, {
    "from": 592,
    "label": "assigns",
    "to": 921
  }, {
    "from": 921,
    "label": "assigns",
    "to": 922
  }, {
    "from": 592,
    "label": "assigns",
    "to": 923
  }, {
    "from": 923,
    "label": "assigns",
    "to": 924
  }, {
    "from": 592,
    "label": "assigns",
    "to": 925
  }, {
    "from": 925,
    "label": "assigns",
    "to": 926
  }, {
    "from": 592,
    "label": "assigns",
    "to": 927
  }, {
    "from": 927,
    "label": "assigns",
    "to": 928
  }, {
    "from": 592,
    "label": "assigns",
    "to": 929
  }, {
    "from": 929,
    "label": "assigns",
    "to": 930
  }, {
    "from": 592,
    "label": "assigns",
    "to": 931
  }, {
    "from": 931,
    "label": "assigns",
    "to": 932
  }, {
    "from": 592,
    "label": "assigns",
    "to": 933
  }, {
    "from": 933,
    "label": "assigns",
    "to": 934
  }, {
    "from": 592,
    "label": "assigns",
    "to": 935
  }, {
    "from": 935,
    "label": "assigns",
    "to": 936
  }, {
    "from": 592,
    "label": "assigns",
    "to": 937
  }, {
    "from": 937,
    "label": "assigns",
    "to": 938
  }, {
    "from": 592,
    "label": "assigns",
    "to": 939
  }, {
    "from": 939,
    "label": "assigns",
    "to": 940
  }, {
    "from": 592,
    "label": "assigns",
    "to": 941
  }, {
    "from": 941,
    "label": "assigns",
    "to": 942
  }, {
    "from": 592,
    "label": "assigns",
    "to": 943
  }, {
    "from": 943,
    "label": "assigns",
    "to": 944
  }, {
    "from": 592,
    "label": "assigns",
    "to": 945
  }, {
    "from": 945,
    "label": "assigns",
    "to": 946
  }, {
    "from": 592,
    "label": "assigns",
    "to": 947
  }, {
    "from": 947,
    "label": "assigns",
    "to": 948
  }, {
    "from": 592,
    "label": "assigns",
    "to": 949
  }, {
    "from": 949,
    "label": "assigns",
    "to": 950
  }, {
    "from": 592,
    "label": "assigns",
    "to": 951
  }, {
    "from": 951,
    "label": "assigns",
    "to": 952
  }, {
    "from": 592,
    "label": "assigns",
    "to": 953
  }, {
    "from": 953,
    "label": "assigns",
    "to": 954
  }, {
    "from": 592,
    "label": "assigns",
    "to": 955
  }, {
    "from": 955,
    "label": "assigns",
    "to": 956
  }, {
    "from": 592,
    "label": "assigns",
    "to": 957
  }, {
    "from": 957,
    "label": "assigns",
    "to": 958
  }, {
    "from": 592,
    "label": "assigns",
    "to": 959
  }, {
    "from": 959,
    "label": "assigns",
    "to": 960
  }, {
    "from": 592,
    "label": "assigns",
    "to": 961
  }, {
    "from": 961,
    "label": "assigns",
    "to": 962
  }, {
    "from": 592,
    "label": "assigns",
    "to": 963
  }, {
    "from": 963,
    "label": "assigns",
    "to": 964
  }, {
    "from": 592,
    "label": "assigns",
    "to": 965
  }, {
    "from": 965,
    "label": "assigns",
    "to": 966
  }, {
    "from": 592,
    "label": "assigns",
    "to": 967
  }, {
    "from": 967,
    "label": "assigns",
    "to": 968
  }, {
    "from": 592,
    "label": "assigns",
    "to": 969
  }, {
    "from": 969,
    "label": "assigns",
    "to": 970
  }, {
    "from": 592,
    "label": "assigns",
    "to": 971
  }, {
    "from": 971,
    "label": "assigns",
    "to": 972
  }, {
    "from": 592,
    "label": "assigns",
    "to": 973
  }, {
    "from": 973,
    "label": "assigns",
    "to": 974
  }, {
    "from": 592,
    "label": "assigns",
    "to": 975
  }, {
    "from": 975,
    "label": "assigns",
    "to": 976
  }, {
    "from": 592,
    "label": "assigns",
    "to": 977
  }, {
    "from": 977,
    "label": "assigns",
    "to": 978
  }, {
    "from": 592,
    "label": "assigns",
    "to": 979
  }, {
    "from": 979,
    "label": "assigns",
    "to": 980
  }, {
    "from": 592,
    "label": "assigns",
    "to": 981
  }, {
    "from": 981,
    "label": "assigns",
    "to": 982
  }, {
    "from": 592,
    "label": "assigns",
    "to": 983
  }, {
    "from": 983,
    "label": "assigns",
    "to": 984
  }, {
    "from": 592,
    "label": "assigns",
    "to": 985
  }, {
    "from": 985,
    "label": "assigns",
    "to": 986
  }, {
    "from": 592,
    "label": "assigns",
    "to": 987
  }, {
    "from": 987,
    "label": "assigns",
    "to": 988
  }, {
    "from": 592,
    "label": "assigns",
    "to": 989
  }, {
    "from": 989,
    "label": "assigns",
    "to": 990
  }, {
    "from": 592,
    "label": "assigns",
    "to": 991
  }, {
    "from": 991,
    "label": "assigns",
    "to": 992
  }, {
    "from": 592,
    "label": "assigns",
    "to": 993
  }, {
    "from": 993,
    "label": "assigns",
    "to": 994
  }, {
    "from": 592,
    "label": "assigns",
    "to": 995
  }, {
    "from": 995,
    "label": "assigns",
    "to": 996
  }, {
    "from": 592,
    "label": "assigns",
    "to": 997
  }, {
    "from": 997,
    "label": "assigns",
    "to": 998
  }, {
    "from": 423,
    "label": "initializes",
    "to": 999
  }, {
    "from": 999,
    "label": "assigns",
    "to": 1000
  }, {
    "from": 423,
    "label": "initializes",
    "to": 1001
  }, {
    "from": 1001,
    "label": "assigns",
    "to": 1002
  }, {
    "from": 423,
    "label": "initializes",
    "to": 1003
  }, {
    "from": 1003,
    "label": "assigns",
    "to": 1004
  }, {
    "from": 423,
    "label": "initializes",
    "to": 1005
  }, {
    "from": 1005,
    "label": "assigns",
    "to": 1006
  }, {
    "from": 423,
    "label": "initializes",
    "to": 1007
  }, {
    "from": 1007,
    "label": "assigns",
    "to": 1008
  }, {
    "from": 423,
    "label": "initializes",
    "to": 1009
  }, {
    "from": 1009,
    "label": "assigns",
    "to": 1010
  }, {
    "from": 423,
    "label": "initializes",
    "to": 1011
  }, {
    "from": 1011,
    "label": "assigns",
    "to": 1012
  }, {
    "from": 423,
    "label": "initializes",
    "to": 1013
  }, {
    "from": 1013,
    "label": "assigns",
    "to": 1014
  }, {
    "from": 423,
    "label": "initializes",
    "to": 1015
  }, {
    "from": 1015,
    "label": "assigns",
    "to": 1016
  }, {
    "from": 423,
    "label": "initializes",
    "to": 1017
  }, {
    "from": 1017,
    "label": "assigns",
    "to": 1018
  }, {
    "from": 1,
    "label": "provides",
    "to": 1019
  }, {
    "from": 441,
    "label": "represents",
    "to": 1020
  }, {
    "from": 1019,
    "label": "provides",
    "to": 1020
  }, {
    "from": 441,
    "label": "represents",
    "to": 1021
  }, {
    "from": 441,
    "label": "represents",
    "to": 1022
  }, {
    "from": 281,
    "label": "hasArgument",
    "to": 397
  }, {
    "from": 287,
    "label": "hasArgument",
    "to": 398
  }, {
    "from": 291,
    "label": "hasArgument",
    "to": 399
  }, {
    "from": 295,
    "label": "hasArgument",
    "to": 400
  }, {
    "from": 371,
    "label": "hasArgument",
    "to": 401
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dasm_arm",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function tohex(x)\r\n  return sub(format(\"%08x\", x), -8) -- Avoid 64 bit portability problem in Lua.\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function dumpactions(out)\r\n  out:write(\"DynASM encoding engine action codes:\\n\")\r\n  for n,name in ipairs(action_names) do\r\n    local num = map_action[name]\r\n    out:write(format(\"  %-10s %02X  %d\\n\", name, num, num))\r\n  end\r\n  out:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "out:write(\"DynASM encoding engine action codes:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "for n,name in ipairs(action_names) do\r\n    local num = map_action[name]\r\n    out:write(format(\"  %-10s %02X  %d\\n\", name, num, num))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "local num = map_action[name]",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "out:write(format(\"  %-10s %02X  %d\\n\", name, num, num))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "out:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function writeactions(out, name)\r\n  local nn = #actlist\r\n  if nn == 0 then nn = 1; actlist[0] = map_action.STOP end\r\n  out:write(\"static const unsigned int \", name, \"[\", nn, \"] = {\\n\")\r\n  for i = 1,nn-1 do\r\n    assert(out:write(\"0x\", tohex(actlist[i]), \",\\n\"))\r\n  end\r\n  assert(out:write(\"0x\", tohex(actlist[nn]), \"\\n};\\n\\n\"))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local nn = #actlist",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if nn == 0 then nn = 1; actlist[0] = map_action.STOP end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "nn = 1",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "actlist[0] = map_action.STOP",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "out:write(\"static const unsigned int \", name, \"[\", nn, \"] = {\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "for i = 1,nn-1 do\r\n    assert(out:write(\"0x\", tohex(actlist[i]), \",\\n\"))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 19,
    "text": "assert(out:write(\"0x\", tohex(actlist[i]), \",\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert(out:write(\"0x\", tohex(actlist[nn]), \"\\n};\\n\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function wputxw(n)\r\n  assert(n >= 0 and n <= 0xffffffff and n % 1 == 0, \"word out of range\")\r\n  actlist[#actlist+1] = n\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "assert(n >= 0 and n <= 0xffffffff and n % 1 == 0, \"word out of range\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "actlist[#actlist+1] = n",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function waction(action, val, a, num)\r\n  local w = assert(map_action[action], \"bad action name `\"..action..\"'\")\r\n  wputxw(w * 0x10000 + (val or 0))\r\n  if a then actargs[#actargs+1] = a end\r\n  if a or num then secpos = secpos + (num or 1) end\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local w = assert(map_action[action], \"bad action name `\"..action..\"'\")",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "wputxw(w * 0x10000 + (val or 0))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if a then actargs[#actargs+1] = a end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "actargs[#actargs+1] = a",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if a or num then secpos = secpos + (num or 1) end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "secpos = secpos + (num or 1)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function wflush(term)\r\n  if #actlist == actargs[1] then return end -- Nothing to flush.\r\n  if not term then waction(\"STOP\") end -- Terminate action list.\r\n  wline(format(\"dasm_put(Dst, %s);\", concat(actargs, \", \")), true)\r\n  actargs = { #actlist } -- Actionlist offset is 1st arg to next dasm_put().\r\n  secpos = 1 -- The actionlist offset occupies a buffer position, too.\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "if #actlist == actargs[1] then return end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if not term then waction(\"STOP\") end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "waction(\"STOP\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "wline(format(\"dasm_put(Dst, %s);\", concat(actargs, \", \")), true)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "actargs = { #actlist }",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "secpos = 1",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function wputw(n)\r\n  if n <= 0x000fffff then waction(\"ESC\") end\r\n  wputxw(n)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "if n <= 0x000fffff then waction(\"ESC\") end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "waction(\"ESC\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "wputxw(n)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function wpos()\r\n  local pos = #actlist+1\r\n  actlist[pos] = \"\"\r\n  return pos\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local pos = #actlist+1",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "actlist[pos] = \"\"",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function wputpos(pos, n)\r\n  assert(n >= 0 and n <= 0xffffffff and n % 1 == 0, \"word out of range\")\r\n  if n <= 0x000fffff then\r\n    insert(actlist, pos+1, n)\r\n    n = map_action.ESC * 0x10000\r\n  end\r\n  actlist[pos] = n\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "if n <= 0x000fffff then\r\n    insert(actlist, pos+1, n)\r\n    n = map_action.ESC * 0x10000\r\n  end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "insert(actlist, pos+1, n)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "n = map_action.ESC * 0x10000",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "actlist[pos] = n",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function dumpglobals(out, lvl)\r\n  local t = {}\r\n  for name, n in pairs(map_global) do t[n] = name end\r\n  out:write(\"Global labels:\\n\")\r\n  for i=20,next_global-1 do\r\n    out:write(format(\"  %s\\n\", t[i]))\r\n  end\r\n  out:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "for name, n in pairs(map_global) do t[n] = name end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "t[n] = name",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "out:write(\"Global labels:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "for i=20,next_global-1 do\r\n    out:write(format(\"  %s\\n\", t[i]))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 63,
    "text": "out:write(format(\"  %s\\n\", t[i]))",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "local function writeglobals(out, prefix)\r\n  local t = {}\r\n  for name, n in pairs(map_global) do t[n] = name end\r\n  out:write(\"enum {\\n\")\r\n  for i=20,next_global-1 do\r\n    out:write(\"  \", prefix, t[i], \",\\n\")\r\n  end\r\n  out:write(\"  \", prefix, \"_MAX\\n};\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "out:write(\"enum {\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "for i=20,next_global-1 do\r\n    out:write(\"  \", prefix, t[i], \",\\n\")\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 68,
    "text": "out:write(\"  \", prefix, t[i], \",\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "out:write(\"  \", prefix, \"_MAX\\n};\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "local function writeglobalnames(out, name)\r\n  local t = {}\r\n  for name, n in pairs(map_global) do t[n] = name end\r\n  out:write(\"static const char *const \", name, \"[] = {\\n\")\r\n  for i=20,next_global-1 do\r\n    out:write(\"  \\\"\", t[i], \"\\\",\\n\")\r\n  end\r\n  out:write(\"  (const char *)0\\n};\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "out:write(\"static const char *const \", name, \"[] = {\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "for i=20,next_global-1 do\r\n    out:write(\"  \\\"\", t[i], \"\\\",\\n\")\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 74,
    "text": "out:write(\"  \\\"\", t[i], \"\\\",\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "out:write(\"  (const char *)0\\n};\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "local function dumpexterns(out, lvl)\r\n  out:write(\"Extern labels:\\n\")\r\n  for i=0,next_extern-1 do\r\n    out:write(format(\"  %s\\n\", map_extern_[i]))\r\n  end\r\n  out:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "out:write(\"Extern labels:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "for i=0,next_extern-1 do\r\n    out:write(format(\"  %s\\n\", map_extern_[i]))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 80,
    "text": "out:write(format(\"  %s\\n\", map_extern_[i]))",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function writeexternnames(out, name)\r\n  out:write(\"static const char *const \", name, \"[] = {\\n\")\r\n  for i=0,next_extern-1 do\r\n    out:write(\"  \\\"\", map_extern_[i], \"\\\",\\n\")\r\n  end\r\n  out:write(\"  (const char *)0\\n};\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "for i=0,next_extern-1 do\r\n    out:write(\"  \\\"\", map_extern_[i], \"\\\",\\n\")\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 84,
    "text": "out:write(\"  \\\"\", map_extern_[i], \"\\\",\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function _M.revdef(s)\r\n  return map_reg_rev[s] or s\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "local function parse_gpr(expr)\r\n  local tname, ovreg = match(expr, \"^([%w_]+):(r1?[0-9])$\")\r\n  local tp = map_type[tname or expr]\r\n  if tp then\r\n    local reg = ovreg or tp.reg\r\n    if not reg then\r\n      werror(\"type `\"..(tname or expr)..\"' needs a register override\")\r\n    end\r\n    expr = reg\r\n  end\r\n  local r = match(expr, \"^r(1?[0-9])$\")\r\n  if r then\r\n    r = tonumber(r)\r\n    if r <= 15 then return r, tp end\r\n  end\r\n  werror(\"bad register name `\"..expr..\"'\")\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "local tname, ovreg = match(expr, \"^([%w_]+):(r1?[0-9])$\")",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local tp = map_type[tname or expr]",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if tp then\r\n    local reg = ovreg or tp.reg\r\n    if not reg then\r\n      werror(\"type `\"..(tname or expr)..\"' needs a register override\")\r\n    end\r\n    expr = reg\r\n  end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "local reg = ovreg or tp.reg",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if not reg then\r\n      werror(\"type `\"..(tname or expr)..\"' needs a register override\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "werror(\"type `\"..(tname or expr)..\"' needs a register override\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "expr = reg",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "local r = match(expr, \"^r(1?[0-9])$\")",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "if r then\r\n    r = tonumber(r)\r\n    if r <= 15 then return r, tp end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "r = tonumber(r)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if r <= 15 then return r, tp end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "werror(\"bad register name `\"..expr..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "local function parse_gpr_pm(expr)\r\n  local pm, expr2 = match(expr, \"^([+-]?)(.*)$\")\r\n  return parse_gpr(expr2), (pm == \"-\")\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local pm, expr2 = match(expr, \"^([+-]?)(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "local function parse_reglist(reglist)\r\n  reglist = match(reglist, \"^{%s*([^}]*)}$\")\r\n  if not reglist then werror(\"register list expected\") end\r\n  local rr = 0\r\n  for p in gmatch(reglist..\",\", \"%s*([^,]*),\") do\r\n    local rbit = 2^parse_gpr(gsub(p, \"%s+$\", \"\"))\r\n    if ((rr - (rr % rbit)) / rbit) % 2 ~= 0 then\r\n      werror(\"duplicate register `\"..p..\"'\")\r\n    end\r\n    rr = rr + rbit\r\n  end\r\n  return rr\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "reglist = match(reglist, \"^{%s*([^}]*)}$\")",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "if not reglist then werror(\"register list expected\") end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "werror(\"register list expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "local rr = 0",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "for p in gmatch(reglist..\",\", \"%s*([^,]*),\") do\r\n    local rbit = 2^parse_gpr(gsub(p, \"%s+$\", \"\"))\r\n    if ((rr - (rr % rbit)) / rbit) % 2 ~= 0 then\r\n      werror(\"duplicate register `\"..p..\"'\")\r\n    end\r\n    rr = rr + rbit\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 111,
    "text": "local rbit = 2^parse_gpr(gsub(p, \"%s+$\", \"\"))",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "if ((rr - (rr % rbit)) / rbit) % 2 ~= 0 then\r\n      werror(\"duplicate register `\"..p..\"'\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "werror(\"duplicate register `\"..p..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "rr = rr + rbit",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "local function parse_imm(imm, bits, shift, scale, signed)\r\n  imm = match(imm, \"^#(.*)$\")\r\n  if not imm then werror(\"expected immediate operand\") end\r\n  local n = tonumber(imm)\r\n  if n then\r\n    if n % 2^scale == 0 then\r\n      n = n / 2^scale\r\n      if signed then\r\n\tif n >= 0 then\r\n\t  if n < 2^(bits-1) then return n*2^shift end\r\n\telse\r\n\t  if n >= -(2^(bits-1))-1 then return (n+2^bits)*2^shift end\r\n\tend\r\n      else\r\n\tif n >= 0 and n <= 2^bits-1 then return n*2^shift end\r\n      end\r\n    end\r\n    werror(\"out of range immediate `\"..imm..\"'\")\r\n  else\r\n    waction(\"IMM\", (signed and 32768 or 0)+scale*1024+bits*32+shift, imm)\r\n    return 0\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "imm = match(imm, \"^#(.*)$\")",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "if not imm then werror(\"expected immediate operand\") end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "werror(\"expected immediate operand\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "local n = tonumber(imm)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "if n then\r\n    if n % 2^scale == 0 then\r\n      n = n / 2^scale\r\n      if signed then\r\n\tif n >= 0 then\r\n\t  if n < 2^(bits-1) then return n*2^shift end\r\n\telse\r\n\t  if n >= -(2^(bits-1))-1 then return (n+2^bits)*2^shift end\r\n\tend\r\n      else\r\n\tif n >= 0 and n <= 2^bits-1 then return n*2^shift end\r\n      end\r\n    end\r\n    werror(\"out of range immediate `\"..imm..\"'\")\r\n  else\r\n    waction(\"IMM\", (signed and 32768 or 0)+scale*1024+bits*32+shift, imm)\r\n    return 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "if n % 2^scale == 0 then\r\n      n = n / 2^scale\r\n      if signed then\r\n\tif n >= 0 then\r\n\t  if n < 2^(bits-1) then return n*2^shift end\r\n\telse\r\n\t  if n >= -(2^(bits-1))-1 then return (n+2^bits)*2^shift end\r\n\tend\r\n      else\r\n\tif n >= 0 and n <= 2^bits-1 then return n*2^shift end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "n = n / 2^scale",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "if signed then\r\n\tif n >= 0 then\r\n\t  if n < 2^(bits-1) then return n*2^shift end\r\n\telse\r\n\t  if n >= -(2^(bits-1))-1 then return (n+2^bits)*2^shift end\r\n\tend\r\n      else\r\n\tif n >= 0 and n <= 2^bits-1 then return n*2^shift end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "if n >= 0 then\r\n\t  if n < 2^(bits-1) then return n*2^shift end\r\n\telse\r\n\t  if n >= -(2^(bits-1))-1 then return (n+2^bits)*2^shift end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "if n < 2^(bits-1) then return n*2^shift end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "if n >= -(2^(bits-1))-1 then return (n+2^bits)*2^shift end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "if n >= 0 and n <= 2^bits-1 then return n*2^shift end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "werror(\"out of range immediate `\"..imm..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "waction(\"IMM\", (signed and 32768 or 0)+scale*1024+bits*32+shift, imm)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "local function parse_imm12(imm)\r\n  local n = tonumber(imm)\r\n  if n then\r\n    local m = n\r\n    for i=0,-15,-1 do\r\n      if m >= 0 and m <= 255 and n % 1 == 0 then return m + (i%16) * 256 end\r\n      local t = m % 4\r\n      m = (m - t) / 4 + t * 2^30\r\n    end\r\n    werror(\"out of range immediate `\"..imm..\"'\")\r\n  else\r\n    waction(\"IMM12\", 0, imm)\r\n    return 0\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "if n then\r\n    local m = n\r\n    for i=0,-15,-1 do\r\n      if m >= 0 and m <= 255 and n % 1 == 0 then return m + (i%16) * 256 end\r\n      local t = m % 4\r\n      m = (m - t) / 4 + t * 2^30\r\n    end\r\n    werror(\"out of range immediate `\"..imm..\"'\")\r\n  else\r\n    waction(\"IMM12\", 0, imm)\r\n    return 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "local m = n",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "for i=0,-15,-1 do\r\n      if m >= 0 and m <= 255 and n % 1 == 0 then return m + (i%16) * 256 end\r\n      local t = m % 4\r\n      m = (m - t) / 4 + t * 2^30\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 136,
    "text": "if m >= 0 and m <= 255 and n % 1 == 0 then return m + (i%16) * 256 end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "local t = m % 4",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "m = (m - t) / 4 + t * 2^30",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "waction(\"IMM12\", 0, imm)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "local function parse_imm16(imm)\r\n  imm = match(imm, \"^#(.*)$\")\r\n  if not imm then werror(\"expected immediate operand\") end\r\n  local n = tonumber(imm)\r\n  if n then\r\n    if n >= 0 and n <= 65535 and n % 1 == 0 then\r\n      local t = n % 4096\r\n      return (n - t) * 16 + t\r\n    end\r\n    werror(\"out of range immediate `\"..imm..\"'\")\r\n  else\r\n    waction(\"IMM16\", 32*16, imm)\r\n    return 0\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "if n then\r\n    if n >= 0 and n <= 65535 and n % 1 == 0 then\r\n      local t = n % 4096\r\n      return (n - t) * 16 + t\r\n    end\r\n    werror(\"out of range immediate `\"..imm..\"'\")\r\n  else\r\n    waction(\"IMM16\", 32*16, imm)\r\n    return 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "if n >= 0 and n <= 65535 and n % 1 == 0 then\r\n      local t = n % 4096\r\n      return (n - t) * 16 + t\r\n    end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "local t = n % 4096",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "waction(\"IMM16\", 32*16, imm)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "local function parse_imm_load(imm, ext)\r\n  local n = tonumber(imm)\r\n  if n then\r\n    if ext then\r\n      if n >= -255 and n <= 255 then\r\n\tlocal up = 0x00800000\r\n\tif n < 0 then n = -n; up = 0 end\r\n\treturn (n-(n%16))*16+(n%16) + up\r\n      end\r\n    else\r\n      if n >= -4095 and n <= 4095 then\r\n\tif n >= 0 then return n+0x00800000 end\r\n\treturn -n\r\n      end\r\n    end\r\n    werror(\"out of range immediate `\"..imm..\"'\")\r\n  else\r\n    waction(ext and \"IMML8\" or \"IMML12\", 32768 + 32*(ext and 8 or 12), imm)\r\n    return 0\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "if n then\r\n    if ext then\r\n      if n >= -255 and n <= 255 then\r\n\tlocal up = 0x00800000\r\n\tif n < 0 then n = -n; up = 0 end\r\n\treturn (n-(n%16))*16+(n%16) + up\r\n      end\r\n    else\r\n      if n >= -4095 and n <= 4095 then\r\n\tif n >= 0 then return n+0x00800000 end\r\n\treturn -n\r\n      end\r\n    end\r\n    werror(\"out of range immediate `\"..imm..\"'\")\r\n  else\r\n    waction(ext and \"IMML8\" or \"IMML12\", 32768 + 32*(ext and 8 or 12), imm)\r\n    return 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "if ext then\r\n      if n >= -255 and n <= 255 then\r\n\tlocal up = 0x00800000\r\n\tif n < 0 then n = -n; up = 0 end\r\n\treturn (n-(n%16))*16+(n%16) + up\r\n      end\r\n    else\r\n      if n >= -4095 and n <= 4095 then\r\n\tif n >= 0 then return n+0x00800000 end\r\n\treturn -n\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "if n >= -255 and n <= 255 then\r\n\tlocal up = 0x00800000\r\n\tif n < 0 then n = -n; up = 0 end\r\n\treturn (n-(n%16))*16+(n%16) + up\r\n      end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "local up = 0x00800000",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if n < 0 then n = -n; up = 0 end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "n = -n",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "up = 0",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "if n >= -4095 and n <= 4095 then\r\n\tif n >= 0 then return n+0x00800000 end\r\n\treturn -n\r\n      end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "if n >= 0 then return n+0x00800000 end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "waction(ext and \"IMML8\" or \"IMML12\", 32768 + 32*(ext and 8 or 12), imm)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "local function parse_shift(shift, gprok)\r\n  if shift == \"rrx\" then\r\n    return 3 * 32\r\n  else\r\n    local s, s2 = match(shift, \"^(%S+)%s*(.*)$\")\r\n    s = map_shift[s]\r\n    if not s then werror(\"expected shift operand\") end\r\n    if sub(s2, 1, 1) == \"#\" then\r\n      return parse_imm(s2, 5, 7, 0, false) + s * 32\r\n    else\r\n      if not gprok then werror(\"expected immediate shift operand\") end\r\n      return parse_gpr(s2) * 256 + s * 32 + 16\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "if shift == \"rrx\" then\r\n    return 3 * 32\r\n  else\r\n    local s, s2 = match(shift, \"^(%S+)%s*(.*)$\")\r\n    s = map_shift[s]\r\n    if not s then werror(\"expected shift operand\") end\r\n    if sub(s2, 1, 1) == \"#\" then\r\n      return parse_imm(s2, 5, 7, 0, false) + s * 32\r\n    else\r\n      if not gprok then werror(\"expected immediate shift operand\") end\r\n      return parse_gpr(s2) * 256 + s * 32 + 16\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "local s, s2 = match(shift, \"^(%S+)%s*(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "s = map_shift[s]",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "if not s then werror(\"expected shift operand\") end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "werror(\"expected shift operand\")",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "if sub(s2, 1, 1) == \"#\" then\r\n      return parse_imm(s2, 5, 7, 0, false) + s * 32\r\n    else\r\n      if not gprok then werror(\"expected immediate shift operand\") end\r\n      return parse_gpr(s2) * 256 + s * 32 + 16\r\n    end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "if not gprok then werror(\"expected immediate shift operand\") end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "werror(\"expected immediate shift operand\")",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "local function parse_label(label, def)\r\n  local prefix = sub(label, 1, 2)\r\n  -- =>label (pc label reference)\r\n  if prefix == \"=>\" then\r\n    return \"PC\", 0, sub(label, 3)\r\n  end\r\n  -- ->name (global label reference)\r\n  if prefix == \"->\" then\r\n    return \"LG\", map_global[sub(label, 3)]\r\n  end\r\n  if def then\r\n    -- [1-9] (local label definition)\r\n    if match(label, \"^[1-9]$\") then\r\n      return \"LG\", 10+tonumber(label)\r\n    end\r\n  else\r\n    -- [<>][1-9] (local label reference)\r\n    local dir, lnum = match(label, \"^([<>])([1-9])$\")\r\n    if dir then -- Fwd: 1-9, Bkwd: 11-19.\r\n      return \"LG\", lnum + (dir == \">\" and 0 or 10)\r\n    end\r\n    -- extern label (extern label reference)\r\n    local extname = match(label, \"^extern%s+(%S+)$\")\r\n    if extname then\r\n      return \"EXT\", map_extern[extname]\r\n    end\r\n  end\r\n  werror(\"bad label `\"..label..\"'\")\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "local prefix = sub(label, 1, 2)",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "if prefix == \"=>\" then\r\n    return \"PC\", 0, sub(label, 3)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "if prefix == \"->\" then\r\n    return \"LG\", map_global[sub(label, 3)]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "if def then\r\n    -- [1-9] (local label definition)\r\n    if match(label, \"^[1-9]$\") then\r\n      return \"LG\", 10+tonumber(label)\r\n    end\r\n  else\r\n    -- [<>][1-9] (local label reference)\r\n    local dir, lnum = match(label, \"^([<>])([1-9])$\")\r\n    if dir then -- Fwd: 1-9, Bkwd: 11-19.\r\n      return \"LG\", lnum + (dir == \">\" and 0 or 10)\r\n    end\r\n    -- extern label (extern label reference)\r\n    local extname = match(label, \"^extern%s+(%S+)$\")\r\n    if extname then\r\n      return \"EXT\", map_extern[extname]\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "if match(label, \"^[1-9]$\") then\r\n      return \"LG\", 10+tonumber(label)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "local dir, lnum = match(label, \"^([<>])([1-9])$\")",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "if dir then -- Fwd: 1-9, Bkwd: 11-19.\r\n      return \"LG\", lnum + (dir == \">\" and 0 or 10)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "local extname = match(label, \"^extern%s+(%S+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if extname then\r\n      return \"EXT\", map_extern[extname]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "werror(\"bad label `\"..label..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "local function parse_load(params, nparams, n, op)\r\n  local oplo = op % 256\r\n  local ext, ldrd = (oplo ~= 0), (oplo == 208)\r\n  local d\r\n  if (ldrd or oplo == 240) then\r\n    d = ((op - (op % 4096)) / 4096) % 16\r\n    if d % 2 ~= 0 then werror(\"odd destination register\") end\r\n  end\r\n  local pn = params[n]\r\n  local p1, wb = match(pn, \"^%[%s*(.-)%s*%](!?)$\")\r\n  local p2 = params[n+1]\r\n  if not p1 then\r\n    if not p2 then\r\n      if match(pn, \"^[<>=%-]\") or match(pn, \"^extern%s+\") then\r\n\tlocal mode, n, s = parse_label(pn, false)\r\n\twaction(\"REL_\"..mode, n + (ext and 0x1800 or 0x0800), s, 1)\r\n\treturn op + 15 * 65536 + 0x01000000 + (ext and 0x00400000 or 0)\r\n      end\r\n      local reg, tailr = match(pn, \"^([%w_:]+)%s*(.*)$\")\r\n      if reg and tailr ~= \"\" then\r\n\tlocal d, tp = parse_gpr(reg)\r\n\tif tp then\r\n\t  waction(ext and \"IMML8\" or \"IMML12\", 32768 + 32*(ext and 8 or 12),\r\n\t\t  format(tp.ctypefmt, tailr))\r\n\t  return op + d * 65536 + 0x01000000 + (ext and 0x00400000 or 0)\r\n\tend\r\n      end\r\n    end\r\n    werror(\"expected address operand\")\r\n  end\r\n  if wb == \"!\" then op = op + 0x00200000 end\r\n  if p2 then\r\n    if wb == \"!\" then werror(\"bad use of '!'\") end\r\n    local p3 = params[n+2]\r\n    op = op + parse_gpr(p1) * 65536\r\n    local imm = match(p2, \"^#(.*)$\")\r\n    if imm then\r\n      local m = parse_imm_load(imm, ext)\r\n      if p3 then werror(\"too many parameters\") end\r\n      op = op + m + (ext and 0x00400000 or 0)\r\n    else\r\n      local m, neg = parse_gpr_pm(p2)\r\n      if ldrd and (m == d or m-1 == d) then werror(\"register conflict\") end\r\n      op = op + m + (neg and 0 or 0x00800000) + (ext and 0 or 0x02000000)\r\n      if p3 then op = op + parse_shift(p3) end\r\n    end\r\n  else\r\n    local p1a, p2 = match(p1, \"^([^,%s]*)%s*(.*)$\")\r\n    op = op + parse_gpr(p1a) * 65536 + 0x01000000\r\n    if p2 ~= \"\" then\r\n      local imm = match(p2, \"^,%s*#(.*)$\")\r\n      if imm then\r\n\tlocal m = parse_imm_load(imm, ext)\r\n\top = op + m + (ext and 0x00400000 or 0)\r\n      else\r\n\tlocal p2a, p3 = match(p2, \"^,%s*([^,%s]*)%s*,?%s*(.*)$\")\r\n\tlocal m, neg = parse_gpr_pm(p2a)\r\n\tif ldrd and (m == d or m-1 == d) then werror(\"register conflict\") end\r\n\top = op + m + (neg and 0 or 0x00800000) + (ext and 0 or 0x02000000)\r\n\tif p3 ~= \"\" then\r\n\t  if ext then werror(\"too many parameters\") end\r\n\t  op = op + parse_shift(p3)\r\n\tend\r\n      end\r\n    else\r\n      if wb == \"!\" then werror(\"bad use of '!'\") end\r\n      op = op + (ext and 0x00c00000 or 0x00800000)\r\n    end\r\n  end\r\n  return op\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "local oplo = op % 256",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "local ext, ldrd = (oplo ~= 0), (oplo == 208)",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "local d",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "if (ldrd or oplo == 240) then\r\n    d = ((op - (op % 4096)) / 4096) % 16\r\n    if d % 2 ~= 0 then werror(\"odd destination register\") end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "d = ((op - (op % 4096)) / 4096) % 16",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "if d % 2 ~= 0 then werror(\"odd destination register\") end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "werror(\"odd destination register\")",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "local pn = params[n]",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "local p1, wb = match(pn, \"^%[%s*(.-)%s*%](!?)$\")",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "local p2 = params[n+1]",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "if not p1 then\r\n    if not p2 then\r\n      if match(pn, \"^[<>=%-]\") or match(pn, \"^extern%s+\") then\r\n\tlocal mode, n, s = parse_label(pn, false)\r\n\twaction(\"REL_\"..mode, n + (ext and 0x1800 or 0x0800), s, 1)\r\n\treturn op + 15 * 65536 + 0x01000000 + (ext and 0x00400000 or 0)\r\n      end\r\n      local reg, tailr = match(pn, \"^([%w_:]+)%s*(.*)$\")\r\n      if reg and tailr ~= \"\" then\r\n\tlocal d, tp = parse_gpr(reg)\r\n\tif tp then\r\n\t  waction(ext and \"IMML8\" or \"IMML12\", 32768 + 32*(ext and 8 or 12),\r\n\t\t  format(tp.ctypefmt, tailr))\r\n\t  return op + d * 65536 + 0x01000000 + (ext and 0x00400000 or 0)\r\n\tend\r\n      end\r\n    end\r\n    werror(\"expected address operand\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "if not p2 then\r\n      if match(pn, \"^[<>=%-]\") or match(pn, \"^extern%s+\") then\r\n\tlocal mode, n, s = parse_label(pn, false)\r\n\twaction(\"REL_\"..mode, n + (ext and 0x1800 or 0x0800), s, 1)\r\n\treturn op + 15 * 65536 + 0x01000000 + (ext and 0x00400000 or 0)\r\n      end\r\n      local reg, tailr = match(pn, \"^([%w_:]+)%s*(.*)$\")\r\n      if reg and tailr ~= \"\" then\r\n\tlocal d, tp = parse_gpr(reg)\r\n\tif tp then\r\n\t  waction(ext and \"IMML8\" or \"IMML12\", 32768 + 32*(ext and 8 or 12),\r\n\t\t  format(tp.ctypefmt, tailr))\r\n\t  return op + d * 65536 + 0x01000000 + (ext and 0x00400000 or 0)\r\n\tend\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "if match(pn, \"^[<>=%-]\") or match(pn, \"^extern%s+\") then\r\n\tlocal mode, n, s = parse_label(pn, false)\r\n\twaction(\"REL_\"..mode, n + (ext and 0x1800 or 0x0800), s, 1)\r\n\treturn op + 15 * 65536 + 0x01000000 + (ext and 0x00400000 or 0)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "local mode, n, s = parse_label(pn, false)",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "waction(\"REL_\"..mode, n + (ext and 0x1800 or 0x0800), s, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "local reg, tailr = match(pn, \"^([%w_:]+)%s*(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 198,
    "text": "if reg and tailr ~= \"\" then\r\n\tlocal d, tp = parse_gpr(reg)\r\n\tif tp then\r\n\t  waction(ext and \"IMML8\" or \"IMML12\", 32768 + 32*(ext and 8 or 12),\r\n\t\t  format(tp.ctypefmt, tailr))\r\n\t  return op + d * 65536 + 0x01000000 + (ext and 0x00400000 or 0)\r\n\tend\r\n      end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "local d, tp = parse_gpr(reg)",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "if tp then\r\n\t  waction(ext and \"IMML8\" or \"IMML12\", 32768 + 32*(ext and 8 or 12),\r\n\t\t  format(tp.ctypefmt, tailr))\r\n\t  return op + d * 65536 + 0x01000000 + (ext and 0x00400000 or 0)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "waction(ext and \"IMML8\" or \"IMML12\", 32768 + 32*(ext and 8 or 12),\r\n\t\t  format(tp.ctypefmt, tailr))",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "werror(\"expected address operand\")",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "if wb == \"!\" then op = op + 0x00200000 end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "op = op + 0x00200000",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "if p2 then\r\n    if wb == \"!\" then werror(\"bad use of '!'\") end\r\n    local p3 = params[n+2]\r\n    op = op + parse_gpr(p1) * 65536\r\n    local imm = match(p2, \"^#(.*)$\")\r\n    if imm then\r\n      local m = parse_imm_load(imm, ext)\r\n      if p3 then werror(\"too many parameters\") end\r\n      op = op + m + (ext and 0x00400000 or 0)\r\n    else\r\n      local m, neg = parse_gpr_pm(p2)\r\n      if ldrd and (m == d or m-1 == d) then werror(\"register conflict\") end\r\n      op = op + m + (neg and 0 or 0x00800000) + (ext and 0 or 0x02000000)\r\n      if p3 then op = op + parse_shift(p3) end\r\n    end\r\n  else\r\n    local p1a, p2 = match(p1, \"^([^,%s]*)%s*(.*)$\")\r\n    op = op + parse_gpr(p1a) * 65536 + 0x01000000\r\n    if p2 ~= \"\" then\r\n      local imm = match(p2, \"^,%s*#(.*)$\")\r\n      if imm then\r\n\tlocal m = parse_imm_load(imm, ext)\r\n\top = op + m + (ext and 0x00400000 or 0)\r\n      else\r\n\tlocal p2a, p3 = match(p2, \"^,%s*([^,%s]*)%s*,?%s*(.*)$\")\r\n\tlocal m, neg = parse_gpr_pm(p2a)\r\n\tif ldrd and (m == d or m-1 == d) then werror(\"register conflict\") end\r\n\top = op + m + (neg and 0 or 0x00800000) + (ext and 0 or 0x02000000)\r\n\tif p3 ~= \"\" then\r\n\t  if ext then werror(\"too many parameters\") end\r\n\t  op = op + parse_shift(p3)\r\n\tend\r\n      end\r\n    else\r\n      if wb == \"!\" then werror(\"bad use of '!'\") end\r\n      op = op + (ext and 0x00c00000 or 0x00800000)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "if wb == \"!\" then werror(\"bad use of '!'\") end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "werror(\"bad use of '!'\")",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "local p3 = params[n+2]",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "op = op + parse_gpr(p1) * 65536",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "local imm = match(p2, \"^#(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "if imm then\r\n      local m = parse_imm_load(imm, ext)\r\n      if p3 then werror(\"too many parameters\") end\r\n      op = op + m + (ext and 0x00400000 or 0)\r\n    else\r\n      local m, neg = parse_gpr_pm(p2)\r\n      if ldrd and (m == d or m-1 == d) then werror(\"register conflict\") end\r\n      op = op + m + (neg and 0 or 0x00800000) + (ext and 0 or 0x02000000)\r\n      if p3 then op = op + parse_shift(p3) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "local m = parse_imm_load(imm, ext)",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "if p3 then werror(\"too many parameters\") end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "werror(\"too many parameters\")",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "op = op + m + (ext and 0x00400000 or 0)",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "local m, neg = parse_gpr_pm(p2)",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "if ldrd and (m == d or m-1 == d) then werror(\"register conflict\") end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "werror(\"register conflict\")",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "op = op + m + (neg and 0 or 0x00800000) + (ext and 0 or 0x02000000)",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "if p3 then op = op + parse_shift(p3) end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "op = op + parse_shift(p3)",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "local p1a, p2 = match(p1, \"^([^,%s]*)%s*(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "op = op + parse_gpr(p1a) * 65536 + 0x01000000",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "if p2 ~= \"\" then\r\n      local imm = match(p2, \"^,%s*#(.*)$\")\r\n      if imm then\r\n\tlocal m = parse_imm_load(imm, ext)\r\n\top = op + m + (ext and 0x00400000 or 0)\r\n      else\r\n\tlocal p2a, p3 = match(p2, \"^,%s*([^,%s]*)%s*,?%s*(.*)$\")\r\n\tlocal m, neg = parse_gpr_pm(p2a)\r\n\tif ldrd and (m == d or m-1 == d) then werror(\"register conflict\") end\r\n\top = op + m + (neg and 0 or 0x00800000) + (ext and 0 or 0x02000000)\r\n\tif p3 ~= \"\" then\r\n\t  if ext then werror(\"too many parameters\") end\r\n\t  op = op + parse_shift(p3)\r\n\tend\r\n      end\r\n    else\r\n      if wb == \"!\" then werror(\"bad use of '!'\") end\r\n      op = op + (ext and 0x00c00000 or 0x00800000)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "local imm = match(p2, \"^,%s*#(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 226,
    "text": "if imm then\r\n\tlocal m = parse_imm_load(imm, ext)\r\n\top = op + m + (ext and 0x00400000 or 0)\r\n      else\r\n\tlocal p2a, p3 = match(p2, \"^,%s*([^,%s]*)%s*,?%s*(.*)$\")\r\n\tlocal m, neg = parse_gpr_pm(p2a)\r\n\tif ldrd and (m == d or m-1 == d) then werror(\"register conflict\") end\r\n\top = op + m + (neg and 0 or 0x00800000) + (ext and 0 or 0x02000000)\r\n\tif p3 ~= \"\" then\r\n\t  if ext then werror(\"too many parameters\") end\r\n\t  op = op + parse_shift(p3)\r\n\tend\r\n      end",
    "type": "statement:if"
  }, {
    "id": 227,
    "text": "local p2a, p3 = match(p2, \"^,%s*([^,%s]*)%s*,?%s*(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "local m, neg = parse_gpr_pm(p2a)",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "if p3 ~= \"\" then\r\n\t  if ext then werror(\"too many parameters\") end\r\n\t  op = op + parse_shift(p3)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "if ext then werror(\"too many parameters\") end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "op = op + (ext and 0x00c00000 or 0x00800000)",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function(params, template, nparams)\r\n  if not params then return sub(template, 9) end\r\n  local op = tonumber(sub(template, 1, 8), 16)\r\n  local n = 1\r\n\r\n  -- Limit number of section buffer positions used by a single dasm_put().\r\n  -- A single opcode needs a maximum of 3 positions.\r\n  if secpos+3 > maxsecpos then wflush() end\r\n  local pos = wpos()\r\n\r\n  -- Process each character.\r\n  for p in gmatch(sub(template, 9), \".\") do\r\n    if p == \"D\" then\r\n      op = op + parse_gpr(params[n]) * 4096; n = n + 1\r\n    elseif p == \"N\" then\r\n      op = op + parse_gpr(params[n]) * 65536; n = n + 1\r\n    elseif p == \"S\" then\r\n      op = op + parse_gpr(params[n]) * 256; n = n + 1\r\n    elseif p == \"M\" then\r\n      op = op + parse_gpr(params[n]); n = n + 1\r\n    elseif p == \"P\" then\r\n      local imm = match(params[n], \"^#(.*)$\")\r\n      if imm then\r\n\top = op + parse_imm12(imm) + 0x02000000\r\n      else\r\n\top = op + parse_gpr(params[n])\r\n      end\r\n      n = n + 1\r\n    elseif p == \"p\" then\r\n      op = op + parse_shift(params[n], true); n = n + 1\r\n    elseif p == \"L\" then\r\n      op = parse_load(params, nparams, n, op)\r\n    elseif p == \"B\" then\r\n      local mode, n, s = parse_label(params[n], false)\r\n      waction(\"REL_\"..mode, n, s, 1)\r\n    elseif p == \"C\" then -- blx gpr vs. blx label.\r\n      local p = params[n]\r\n      if match(p, \"^([%w_]+):(r1?[0-9])$\") or match(p, \"^r(1?[0-9])$\") then\r\n\top = op + parse_gpr(p)\r\n      else\r\n\tif op < 0xe0000000 then werror(\"unconditional instruction\") end\r\n\tlocal mode, n, s = parse_label(p, false)\r\n\twaction(\"REL_\"..mode, n, s, 1)\r\n\top = 0xfa000000\r\n      end\r\n    elseif p == \"n\" then\r\n      local r, wb = match(params[n], \"^([^!]*)(!?)$\")\r\n      op = op + parse_gpr(r) * 65536 + (wb == \"!\" and 0x00200000 or 0)\r\n      n = n + 1\r\n    elseif p == \"R\" then\r\n      op = op + parse_reglist(params[n]); n = n + 1\r\n    elseif p == \"W\" then\r\n      op = op + parse_imm16(params[n]); n = n + 1\r\n    elseif p == \"v\" then\r\n      op = op + parse_imm(params[n], 5, 7, 0, false); n = n + 1\r\n    elseif p == \"w\" then\r\n      local imm = match(params[n], \"^#(.*)$\")\r\n      if imm then\r\n\top = op + parse_imm(params[n], 5, 7, 0, false); n = n + 1\r\n      else\r\n\top = op + parse_gpr(params[n]) * 256 + 16\r\n      end\r\n    elseif p == \"X\" then\r\n      op = op + parse_imm(params[n], 5, 16, 0, false); n = n + 1\r\n    elseif p == \"K\" then\r\n      local imm = tonumber(match(params[n], \"^#(.*)$\")); n = n + 1\r\n      if not imm or imm % 1 ~= 0 or imm < 0 or imm > 0xffff then\r\n\twerror(\"bad immediate operand\")\r\n      end\r\n      local t = imm % 16\r\n      op = op + (imm - t) * 16 + t\r\n    elseif p == \"T\" then\r\n      op = op + parse_imm(params[n], 24, 0, 0, false); n = n + 1\r\n    elseif p == \"s\" then\r\n      -- Ignored.\r\n    else\r\n      assert(false)\r\n    end\r\n  end\r\n  wputpos(pos, op)\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "if not params then return sub(template, 9) end",
    "type": "statement:if"
  }, {
    "id": 235,
    "text": "local op = tonumber(sub(template, 1, 8), 16)",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "local n = 1",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "if secpos+3 > maxsecpos then wflush() end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "wflush()",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "local pos = wpos()",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "for p in gmatch(sub(template, 9), \".\") do\r\n    if p == \"D\" then\r\n      op = op + parse_gpr(params[n]) * 4096; n = n + 1\r\n    elseif p == \"N\" then\r\n      op = op + parse_gpr(params[n]) * 65536; n = n + 1\r\n    elseif p == \"S\" then\r\n      op = op + parse_gpr(params[n]) * 256; n = n + 1\r\n    elseif p == \"M\" then\r\n      op = op + parse_gpr(params[n]); n = n + 1\r\n    elseif p == \"P\" then\r\n      local imm = match(params[n], \"^#(.*)$\")\r\n      if imm then\r\n\top = op + parse_imm12(imm) + 0x02000000\r\n      else\r\n\top = op + parse_gpr(params[n])\r\n      end\r\n      n = n + 1\r\n    elseif p == \"p\" then\r\n      op = op + parse_shift(params[n], true); n = n + 1\r\n    elseif p == \"L\" then\r\n      op = parse_load(params, nparams, n, op)\r\n    elseif p == \"B\" then\r\n      local mode, n, s = parse_label(params[n], false)\r\n      waction(\"REL_\"..mode, n, s, 1)\r\n    elseif p == \"C\" then -- blx gpr vs. blx label.\r\n      local p = params[n]\r\n      if match(p, \"^([%w_]+):(r1?[0-9])$\") or match(p, \"^r(1?[0-9])$\") then\r\n\top = op + parse_gpr(p)\r\n      else\r\n\tif op < 0xe0000000 then werror(\"unconditional instruction\") end\r\n\tlocal mode, n, s = parse_label(p, false)\r\n\twaction(\"REL_\"..mode, n, s, 1)\r\n\top = 0xfa000000\r\n      end\r\n    elseif p == \"n\" then\r\n      local r, wb = match(params[n], \"^([^!]*)(!?)$\")\r\n      op = op + parse_gpr(r) * 65536 + (wb == \"!\" and 0x00200000 or 0)\r\n      n = n + 1\r\n    elseif p == \"R\" then\r\n      op = op + parse_reglist(params[n]); n = n + 1\r\n    elseif p == \"W\" then\r\n      op = op + parse_imm16(params[n]); n = n + 1\r\n    elseif p == \"v\" then\r\n      op = op + parse_imm(params[n], 5, 7, 0, false); n = n + 1\r\n    elseif p == \"w\" then\r\n      local imm = match(params[n], \"^#(.*)$\")\r\n      if imm then\r\n\top = op + parse_imm(params[n], 5, 7, 0, false); n = n + 1\r\n      else\r\n\top = op + parse_gpr(params[n]) * 256 + 16\r\n      end\r\n    elseif p == \"X\" then\r\n      op = op + parse_imm(params[n], 5, 16, 0, false); n = n + 1\r\n    elseif p == \"K\" then\r\n      local imm = tonumber(match(params[n], \"^#(.*)$\")); n = n + 1\r\n      if not imm or imm % 1 ~= 0 or imm < 0 or imm > 0xffff then\r\n\twerror(\"bad immediate operand\")\r\n      end\r\n      local t = imm % 16\r\n      op = op + (imm - t) * 16 + t\r\n    elseif p == \"T\" then\r\n      op = op + parse_imm(params[n], 24, 0, 0, false); n = n + 1\r\n    elseif p == \"s\" then\r\n      -- Ignored.\r\n    else\r\n      assert(false)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 241,
    "text": "if p == \"D\" then\r\n      op = op + parse_gpr(params[n]) * 4096; n = n + 1\r\n    elseif p == \"N\" then\r\n      op = op + parse_gpr(params[n]) * 65536; n = n + 1\r\n    elseif p == \"S\" then\r\n      op = op + parse_gpr(params[n]) * 256; n = n + 1\r\n    elseif p == \"M\" then\r\n      op = op + parse_gpr(params[n]); n = n + 1\r\n    elseif p == \"P\" then\r\n      local imm = match(params[n], \"^#(.*)$\")\r\n      if imm then\r\n\top = op + parse_imm12(imm) + 0x02000000\r\n      else\r\n\top = op + parse_gpr(params[n])\r\n      end\r\n      n = n + 1\r\n    elseif p == \"p\" then\r\n      op = op + parse_shift(params[n], true); n = n + 1\r\n    elseif p == \"L\" then\r\n      op = parse_load(params, nparams, n, op)\r\n    elseif p == \"B\" then\r\n      local mode, n, s = parse_label(params[n], false)\r\n      waction(\"REL_\"..mode, n, s, 1)\r\n    elseif p == \"C\" then -- blx gpr vs. blx label.\r\n      local p = params[n]\r\n      if match(p, \"^([%w_]+):(r1?[0-9])$\") or match(p, \"^r(1?[0-9])$\") then\r\n\top = op + parse_gpr(p)\r\n      else\r\n\tif op < 0xe0000000 then werror(\"unconditional instruction\") end\r\n\tlocal mode, n, s = parse_label(p, false)\r\n\twaction(\"REL_\"..mode, n, s, 1)\r\n\top = 0xfa000000\r\n      end\r\n    elseif p == \"n\" then\r\n      local r, wb = match(params[n], \"^([^!]*)(!?)$\")\r\n      op = op + parse_gpr(r) * 65536 + (wb == \"!\" and 0x00200000 or 0)\r\n      n = n + 1\r\n    elseif p == \"R\" then\r\n      op = op + parse_reglist(params[n]); n = n + 1\r\n    elseif p == \"W\" then\r\n      op = op + parse_imm16(params[n]); n = n + 1\r\n    elseif p == \"v\" then\r\n      op = op + parse_imm(params[n], 5, 7, 0, false); n = n + 1\r\n    elseif p == \"w\" then\r\n      local imm = match(params[n], \"^#(.*)$\")\r\n      if imm then\r\n\top = op + parse_imm(params[n], 5, 7, 0, false); n = n + 1\r\n      else\r\n\top = op + parse_gpr(params[n]) * 256 + 16\r\n      end\r\n    elseif p == \"X\" then\r\n      op = op + parse_imm(params[n], 5, 16, 0, false); n = n + 1\r\n    elseif p == \"K\" then\r\n      local imm = tonumber(match(params[n], \"^#(.*)$\")); n = n + 1\r\n      if not imm or imm % 1 ~= 0 or imm < 0 or imm > 0xffff then\r\n\twerror(\"bad immediate operand\")\r\n      end\r\n      local t = imm % 16\r\n      op = op + (imm - t) * 16 + t\r\n    elseif p == \"T\" then\r\n      op = op + parse_imm(params[n], 24, 0, 0, false); n = n + 1\r\n    elseif p == \"s\" then\r\n      -- Ignored.\r\n    else\r\n      assert(false)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 242,
    "text": "op = op + parse_gpr(params[n]) * 4096",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "n = n + 1",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "op = op + parse_gpr(params[n]) * 65536",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "op = op + parse_gpr(params[n]) * 256",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "op = op + parse_gpr(params[n])",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "local imm = match(params[n], \"^#(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "if imm then\r\n\top = op + parse_imm12(imm) + 0x02000000\r\n      else\r\n\top = op + parse_gpr(params[n])\r\n      end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "op = op + parse_imm12(imm) + 0x02000000",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "op = op + parse_shift(params[n], true)",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "op = parse_load(params, nparams, n, op)",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "local mode, n, s = parse_label(params[n], false)",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "waction(\"REL_\"..mode, n, s, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "local p = params[n]",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "if match(p, \"^([%w_]+):(r1?[0-9])$\") or match(p, \"^r(1?[0-9])$\") then\r\n\top = op + parse_gpr(p)\r\n      else\r\n\tif op < 0xe0000000 then werror(\"unconditional instruction\") end\r\n\tlocal mode, n, s = parse_label(p, false)\r\n\twaction(\"REL_\"..mode, n, s, 1)\r\n\top = 0xfa000000\r\n      end",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "op = op + parse_gpr(p)",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "if op < 0xe0000000 then werror(\"unconditional instruction\") end",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "werror(\"unconditional instruction\")",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "local mode, n, s = parse_label(p, false)",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "op = 0xfa000000",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "local r, wb = match(params[n], \"^([^!]*)(!?)$\")",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "op = op + parse_gpr(r) * 65536 + (wb == \"!\" and 0x00200000 or 0)",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "op = op + parse_reglist(params[n])",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "op = op + parse_imm16(params[n])",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "op = op + parse_imm(params[n], 5, 7, 0, false)",
    "type": "statement:assign"
  }, {
    "id": 266,
    "text": "if imm then\r\n\top = op + parse_imm(params[n], 5, 7, 0, false); n = n + 1\r\n      else\r\n\top = op + parse_gpr(params[n]) * 256 + 16\r\n      end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "op = op + parse_gpr(params[n]) * 256 + 16",
    "type": "statement:assign"
  }, {
    "id": 268,
    "text": "op = op + parse_imm(params[n], 5, 16, 0, false)",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "local imm = tonumber(match(params[n], \"^#(.*)$\"))",
    "type": "statement:localassign"
  }, {
    "id": 270,
    "text": "if not imm or imm % 1 ~= 0 or imm < 0 or imm > 0xffff then\r\n\twerror(\"bad immediate operand\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 271,
    "text": "werror(\"bad immediate operand\")",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "local t = imm % 16",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "op = op + (imm - t) * 16 + t",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "op = op + parse_imm(params[n], 24, 0, 0, false)",
    "type": "statement:assign"
  }, {
    "id": 275,
    "text": "assert(false)",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "wputpos(pos, op)",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 278,
    "text": "function(params)\r\n  if not params then return \"cvar\" end\r\n  local name = params[1] -- No syntax check. You get to keep the pieces.\r\n  wline(function(out) writeactions(out, name) end)\r\nend",
    "type": "function"
  }, {
    "id": 279,
    "text": "if not params then return \"cvar\" end",
    "type": "statement:if"
  }, {
    "id": 280,
    "text": "local name = params[1]",
    "type": "statement:localassign"
  }, {
    "id": 281,
    "text": "wline(function(out) writeactions(out, name) end)",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "writeactions(out, name)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function(params)\r\n  if not params then return \"prefix\" end\r\n  local prefix = params[1] -- No syntax check. You get to keep the pieces.\r\n  wline(function(out) writeglobals(out, prefix) end)\r\nend",
    "type": "function"
  }, {
    "id": 285,
    "text": "if not params then return \"prefix\" end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "local prefix = params[1]",
    "type": "statement:localassign"
  }, {
    "id": 287,
    "text": "wline(function(out) writeglobals(out, prefix) end)",
    "type": "statement:functioncall"
  }, {
    "id": 288,
    "text": "writeglobals(out, prefix)",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 290,
    "text": "function(params)\r\n  if not params then return \"cvar\" end\r\n  local name = params[1] -- No syntax check. You get to keep the pieces.\r\n  wline(function(out) writeglobalnames(out, name) end)\r\nend",
    "type": "function"
  }, {
    "id": 291,
    "text": "wline(function(out) writeglobalnames(out, name) end)",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "writeglobalnames(out, name)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 294,
    "text": "function(params)\r\n  if not params then return \"cvar\" end\r\n  local name = params[1] -- No syntax check. You get to keep the pieces.\r\n  wline(function(out) writeexternnames(out, name) end)\r\nend",
    "type": "function"
  }, {
    "id": 295,
    "text": "wline(function(out) writeexternnames(out, name) end)",
    "type": "statement:functioncall"
  }, {
    "id": 296,
    "text": "writeexternnames(out, name)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 298,
    "text": "function(params)\r\n  if not params then return \"[1-9] | ->global | =>pcexpr\" end\r\n  if secpos+1 > maxsecpos then wflush() end\r\n  local mode, n, s = parse_label(params[1], true)\r\n  if mode == \"EXT\" then werror(\"bad label definition\") end\r\n  waction(\"LABEL_\"..mode, n, s, 1)\r\nend",
    "type": "function"
  }, {
    "id": 299,
    "text": "if not params then return \"[1-9] | ->global | =>pcexpr\" end",
    "type": "statement:if"
  }, {
    "id": 300,
    "text": "if secpos+1 > maxsecpos then wflush() end",
    "type": "statement:if"
  }, {
    "id": 301,
    "text": "local mode, n, s = parse_label(params[1], true)",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "if mode == \"EXT\" then werror(\"bad label definition\") end",
    "type": "statement:if"
  }, {
    "id": 303,
    "text": "werror(\"bad label definition\")",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "waction(\"LABEL_\"..mode, n, s, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 306,
    "text": "function(params)\r\n  if not params then return \"imm...\" end\r\n  for _,p in ipairs(params) do\r\n    local n = tonumber(p)\r\n    if n then\r\n      if n < 0 then n = n + 2^32 end\r\n      wputw(n)\r\n      if secpos+2 > maxsecpos then wflush() end\r\n    else\r\n      waction(\"LONG\", 0, format(\"(uintptr_t)(%s)\", p))\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 307,
    "text": "if not params then return \"imm...\" end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "for _,p in ipairs(params) do\r\n    local n = tonumber(p)\r\n    if n then\r\n      if n < 0 then n = n + 2^32 end\r\n      wputw(n)\r\n      if secpos+2 > maxsecpos then wflush() end\r\n    else\r\n      waction(\"LONG\", 0, format(\"(uintptr_t)(%s)\", p))\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 309,
    "text": "local n = tonumber(p)",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "if n then\r\n      if n < 0 then n = n + 2^32 end\r\n      wputw(n)\r\n      if secpos+2 > maxsecpos then wflush() end\r\n    else\r\n      waction(\"LONG\", 0, format(\"(uintptr_t)(%s)\", p))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "if n < 0 then n = n + 2^32 end",
    "type": "statement:if"
  }, {
    "id": 312,
    "text": "n = n + 2^32",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "wputw(n)",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "if secpos+2 > maxsecpos then wflush() end",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "waction(\"LONG\", 0, format(\"(uintptr_t)(%s)\", p))",
    "type": "statement:functioncall"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function(params)\r\n  if not params then return \"numpow2\" end\r\n  if secpos+1 > maxsecpos then wflush() end\r\n  local align = tonumber(params[1])\r\n  if align then\r\n    local x = align\r\n    -- Must be a power of 2 in the range (2 ... 256).\r\n    for i=1,8 do\r\n      x = x / 2\r\n      if x == 1 then\r\n\twaction(\"ALIGN\", align-1, nil, 1) -- Action byte is 2**n-1.\r\n\treturn\r\n      end\r\n    end\r\n  end\r\n  werror(\"bad alignment\")\r\nend",
    "type": "function"
  }, {
    "id": 318,
    "text": "if not params then return \"numpow2\" end",
    "type": "statement:if"
  }, {
    "id": 319,
    "text": "local align = tonumber(params[1])",
    "type": "statement:localassign"
  }, {
    "id": 320,
    "text": "if align then\r\n    local x = align\r\n    -- Must be a power of 2 in the range (2 ... 256).\r\n    for i=1,8 do\r\n      x = x / 2\r\n      if x == 1 then\r\n\twaction(\"ALIGN\", align-1, nil, 1) -- Action byte is 2**n-1.\r\n\treturn\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 321,
    "text": "local x = align",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "for i=1,8 do\r\n      x = x / 2\r\n      if x == 1 then\r\n\twaction(\"ALIGN\", align-1, nil, 1) -- Action byte is 2**n-1.\r\n\treturn\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 323,
    "text": "x = x / 2",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "if x == 1 then\r\n\twaction(\"ALIGN\", align-1, nil, 1) -- Action byte is 2**n-1.\r\n\treturn\r\n      end",
    "type": "statement:if"
  }, {
    "id": 325,
    "text": "waction(\"ALIGN\", align-1, nil, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "werror(\"bad alignment\")",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 328,
    "text": "function(params, nparams)\r\n  if not params then\r\n    return nparams == 2 and \"name, ctype\" or \"name, ctype, reg\"\r\n  end\r\n  local name, ctype, reg = params[1], params[2], params[3]\r\n  if not match(name, \"^[%a_][%w_]*$\") then\r\n    werror(\"bad type name `\"..name..\"'\")\r\n  end\r\n  local tp = map_type[name]\r\n  if tp then\r\n    werror(\"duplicate type `\"..name..\"'\")\r\n  end\r\n  -- Add #type to defines. A bit unclean to put it in map_archdef.\r\n  map_archdef[\"#\"..name] = \"sizeof(\"..ctype..\")\"\r\n  -- Add new type and emit shortcut define.\r\n  local num = ctypenum + 1\r\n  map_type[name] = {\r\n    ctype = ctype,\r\n    ctypefmt = format(\"Dt%X(%%s)\", num),\r\n    reg = reg,\r\n  }\r\n  wline(format(\"#define Dt%X(_V) (int)(ptrdiff_t)&(((%s *)0)_V)\", num, ctype))\r\n  ctypenum = num\r\nend",
    "type": "function"
  }, {
    "id": 329,
    "text": "if not params then\r\n    return nparams == 2 and \"name, ctype\" or \"name, ctype, reg\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 330,
    "text": "local name, ctype, reg = params[1], params[2], params[3]",
    "type": "statement:localassign"
  }, {
    "id": 331,
    "text": "if not match(name, \"^[%a_][%w_]*$\") then\r\n    werror(\"bad type name `\"..name..\"'\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 332,
    "text": "werror(\"bad type name `\"..name..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "local tp = map_type[name]",
    "type": "statement:localassign"
  }, {
    "id": 334,
    "text": "if tp then\r\n    werror(\"duplicate type `\"..name..\"'\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "werror(\"duplicate type `\"..name..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "map_archdef[\"#\"..name] = \"sizeof(\"..ctype..\")\"",
    "type": "statement:assign"
  }, {
    "id": 337,
    "text": "local num = ctypenum + 1",
    "type": "statement:localassign"
  }, {
    "id": 338,
    "text": "map_type[name] = {\r\n    ctype = ctype,\r\n    ctypefmt = format(\"Dt%X(%%s)\", num),\r\n    reg = reg,\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 339,
    "text": "wline(format(\"#define Dt%X(_V) (int)(ptrdiff_t)&(((%s *)0)_V)\", num, ctype))",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "ctypenum = num",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "local function dumptypes(out, lvl)\r\n  local t = {}\r\n  for name in pairs(map_type) do t[#t+1] = name end\r\n  sort(t)\r\n  out:write(\"Type definitions:\\n\")\r\n  for _,name in ipairs(t) do\r\n    local tp = map_type[name]\r\n    local reg = tp.reg or \"\"\r\n    out:write(format(\"  %-20s %-20s %s\\n\", name, tp.ctype, reg))\r\n  end\r\n  out:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "for name in pairs(map_type) do t[#t+1] = name end",
    "type": "statement:genericfor"
  }, {
    "id": 344,
    "text": "t[#t+1] = name",
    "type": "statement:assign"
  }, {
    "id": 345,
    "text": "sort(t)",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "out:write(\"Type definitions:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "for _,name in ipairs(t) do\r\n    local tp = map_type[name]\r\n    local reg = tp.reg or \"\"\r\n    out:write(format(\"  %-20s %-20s %s\\n\", name, tp.ctype, reg))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 348,
    "text": "local reg = tp.reg or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 349,
    "text": "out:write(format(\"  %-20s %-20s %s\\n\", name, tp.ctype, reg))",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 351,
    "text": "function _M.section(num)\r\n  waction(\"SECTION\", num)\r\n  wflush(true) -- SECTION is a terminal action.\r\nend",
    "type": "function"
  }, {
    "id": 352,
    "text": "waction(\"SECTION\", num)",
    "type": "statement:functioncall"
  }, {
    "id": 353,
    "text": "wflush(true)",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 355,
    "text": "function _M.dumparch(out)\r\n  out:write(format(\"DynASM %s version %s, released %s\\n\\n\",\r\n    _info.arch, _info.version, _info.release))\r\n  dumpactions(out)\r\nend",
    "type": "function"
  }, {
    "id": 356,
    "text": "out:write(format(\"DynASM %s version %s, released %s\\n\\n\",\r\n    _info.arch, _info.version, _info.release))",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "dumpactions(out)",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 359,
    "text": "function _M.dumpdef(out, lvl)\r\n  dumptypes(out, lvl)\r\n  dumpglobals(out, lvl)\r\n  dumpexterns(out, lvl)\r\nend",
    "type": "function"
  }, {
    "id": 360,
    "text": "dumptypes(out, lvl)",
    "type": "statement:functioncall"
  }, {
    "id": 361,
    "text": "dumpglobals(out, lvl)",
    "type": "statement:functioncall"
  }, {
    "id": 362,
    "text": "dumpexterns(out, lvl)",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 364,
    "text": "function _M.passcb(wl, we, wf, ww)\r\n  wline, werror, wfatal, wwarn = wl, we, wf, ww\r\n  return wflush\r\nend",
    "type": "function"
  }, {
    "id": 365,
    "text": "wline, werror, wfatal, wwarn = wl, we, wf, ww",
    "type": "statement:assign"
  }, {
    "id": 366,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 367,
    "text": "function _M.setup(arch, opt)\r\n  g_arch, g_opt = arch, opt\r\nend",
    "type": "function"
  }, {
    "id": 368,
    "text": "g_arch, g_opt = arch, opt",
    "type": "statement:assign"
  }, {
    "id": 369,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 370,
    "text": "function _M.mergemaps(map_coreop, map_def)\r\n  setmetatable(map_op, { __index = function(t, k)\r\n    local v = map_coreop[k]\r\n    if v then return v end\r\n    local cc = sub(k, -4, -3)\r\n    local cv = map_cond[cc]\r\n    if cv then\r\n      local v = rawget(t, sub(k, 1, -5)..sub(k, -2))\r\n      if type(v) == \"string\" then return format(\"%x%s\", cv, sub(v, 2)) end\r\n    end\r\n  end })\r\n  setmetatable(map_def, { __index = map_archdef })\r\n  return map_op, map_def\r\nend",
    "type": "function"
  }, {
    "id": 371,
    "text": "setmetatable(map_op, { __index = function(t, k)\r\n    local v = map_coreop[k]\r\n    if v then return v end\r\n    local cc = sub(k, -4, -3)\r\n    local cv = map_cond[cc]\r\n    if cv then\r\n      local v = rawget(t, sub(k, 1, -5)..sub(k, -2))\r\n      if type(v) == \"string\" then return format(\"%x%s\", cv, sub(v, 2)) end\r\n    end\r\n  end })",
    "type": "statement:functioncall"
  }, {
    "id": 372,
    "text": "local v = map_coreop[k]",
    "type": "statement:localassign"
  }, {
    "id": 373,
    "text": "if v then return v end",
    "type": "statement:if"
  }, {
    "id": 374,
    "text": "local cc = sub(k, -4, -3)",
    "type": "statement:localassign"
  }, {
    "id": 375,
    "text": "local cv = map_cond[cc]",
    "type": "statement:localassign"
  }, {
    "id": 376,
    "text": "if cv then\r\n      local v = rawget(t, sub(k, 1, -5)..sub(k, -2))\r\n      if type(v) == \"string\" then return format(\"%x%s\", cv, sub(v, 2)) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 377,
    "text": "local v = rawget(t, sub(k, 1, -5)..sub(k, -2))",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "if type(v) == \"string\" then return format(\"%x%s\", cv, sub(v, 2)) end",
    "type": "statement:if"
  }, {
    "id": 379,
    "text": "setmetatable(map_def, { __index = map_archdef })",
    "type": "statement:functioncall"
  }, {
    "id": 380,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 381,
    "text": "function(t, name)\r\n  if not match(name, \"^[%a_][%w_]*$\") then werror(\"bad global label\") end\r\n  local n = next_global\r\n  if n > 2047 then werror(\"too many global labels\") end\r\n  next_global = n + 1\r\n  t[name] = n\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 382,
    "text": "if not match(name, \"^[%a_][%w_]*$\") then werror(\"bad global label\") end",
    "type": "statement:if"
  }, {
    "id": 383,
    "text": "werror(\"bad global label\")",
    "type": "statement:functioncall"
  }, {
    "id": 384,
    "text": "local n = next_global",
    "type": "statement:localassign"
  }, {
    "id": 385,
    "text": "if n > 2047 then werror(\"too many global labels\") end",
    "type": "statement:if"
  }, {
    "id": 386,
    "text": "werror(\"too many global labels\")",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "next_global = n + 1",
    "type": "statement:assign"
  }, {
    "id": 388,
    "text": "t[name] = n",
    "type": "statement:assign"
  }, {
    "id": 389,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 390,
    "text": "function(t, name)\r\n  -- No restrictions on the name for now.\r\n  local n = next_extern\r\n  if n > 2047 then werror(\"too many extern labels\") end\r\n  next_extern = n + 1\r\n  t[name] = n\r\n  map_extern_[n] = name\r\n  return n\r\nend",
    "type": "function"
  }, {
    "id": 391,
    "text": "local n = next_extern",
    "type": "statement:localassign"
  }, {
    "id": 392,
    "text": "if n > 2047 then werror(\"too many extern labels\") end",
    "type": "statement:if"
  }, {
    "id": 393,
    "text": "werror(\"too many extern labels\")",
    "type": "statement:functioncall"
  }, {
    "id": 394,
    "text": "next_extern = n + 1",
    "type": "statement:assign"
  }, {
    "id": 395,
    "text": "map_extern_[n] = name",
    "type": "statement:assign"
  }, {
    "id": 396,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 397,
    "text": "function(out) writeactions(out, name) end",
    "type": "function"
  }, {
    "id": 398,
    "text": "function(out) writeglobals(out, prefix) end",
    "type": "function"
  }, {
    "id": 399,
    "text": "function(out) writeglobalnames(out, name) end",
    "type": "function"
  }, {
    "id": 400,
    "text": "function(out) writeexternnames(out, name) end",
    "type": "function"
  }, {
    "id": 401,
    "text": "function(t, k)\r\n    local v = map_coreop[k]\r\n    if v then return v end\r\n    local cc = sub(k, -4, -3)\r\n    local cv = map_cond[cc]\r\n    if cv then\r\n      local v = rawget(t, sub(k, 1, -5)..sub(k, -2))\r\n      if type(v) == \"string\" then return format(\"%x%s\", cv, sub(v, 2)) end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 402,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 403,
    "text": "",
    "type": "function container"
  }, {
    "id": 404,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 405,
    "text": "werror",
    "type": "global function"
  }, {
    "id": 406,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 407,
    "text": "match",
    "type": "global function"
  }, {
    "id": 408,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 409,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 410,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 411,
    "text": "type",
    "type": "global function"
  }, {
    "id": 412,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 413,
    "text": "format",
    "type": "global function"
  }, {
    "id": 414,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 415,
    "text": "char",
    "type": "global function"
  }, {
    "id": 416,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 417,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 418,
    "text": "wline",
    "type": "global function"
  }, {
    "id": 419,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 420,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 421,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 422,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 423,
    "text": "",
    "type": "variable container"
  }, {
    "id": 424,
    "text": "",
    "type": "require container"
  }, {
    "id": 425,
    "text": "",
    "type": "local variable"
  }, {
    "id": 426,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 427,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 428,
    "text": "",
    "type": "string"
  }, {
    "id": 429,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 430,
    "text": "",
    "type": "string"
  }, {
    "id": 431,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 432,
    "text": "",
    "type": "string"
  }, {
    "id": 433,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 434,
    "text": "",
    "type": "number"
  }, {
    "id": 435,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 436,
    "text": "",
    "type": "string"
  }, {
    "id": 437,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 438,
    "text": "",
    "type": "string"
  }, {
    "id": 439,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 440,
    "text": "",
    "type": "string"
  }, {
    "id": 441,
    "text": "",
    "type": "local variable"
  }, {
    "id": 442,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 443,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 444,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 445,
    "text": "",
    "type": "local variable"
  }, {
    "id": 446,
    "text": "",
    "type": "n/a"
  }, {
    "id": 447,
    "text": "",
    "type": "local variable"
  }, {
    "id": 448,
    "text": "",
    "type": "n/a"
  }, {
    "id": 449,
    "text": "",
    "type": "local variable"
  }, {
    "id": 450,
    "text": "",
    "type": "n/a"
  }, {
    "id": 451,
    "text": "",
    "type": "local variable"
  }, {
    "id": 452,
    "text": "",
    "type": "n/a"
  }, {
    "id": 453,
    "text": "",
    "type": "local variable"
  }, {
    "id": 454,
    "text": "",
    "type": "n/a"
  }, {
    "id": 455,
    "text": "",
    "type": "local variable"
  }, {
    "id": 456,
    "text": "",
    "type": "n/a"
  }, {
    "id": 457,
    "text": "",
    "type": "local variable"
  }, {
    "id": 458,
    "text": "",
    "type": "n/a"
  }, {
    "id": 459,
    "text": "",
    "type": "local variable"
  }, {
    "id": 460,
    "text": "",
    "type": "n/a"
  }, {
    "id": 461,
    "text": "",
    "type": "local variable"
  }, {
    "id": 462,
    "text": "",
    "type": "n/a"
  }, {
    "id": 463,
    "text": "",
    "type": "local variable"
  }, {
    "id": 464,
    "text": "",
    "type": "n/a"
  }, {
    "id": 465,
    "text": "",
    "type": "local variable"
  }, {
    "id": 466,
    "text": "",
    "type": "n/a"
  }, {
    "id": 467,
    "text": "",
    "type": "local variable"
  }, {
    "id": 468,
    "text": "",
    "type": "n/a"
  }, {
    "id": 469,
    "text": "",
    "type": "local variable"
  }, {
    "id": 470,
    "text": "",
    "type": "n/a"
  }, {
    "id": 471,
    "text": "",
    "type": "local variable"
  }, {
    "id": 472,
    "text": "",
    "type": "n/a"
  }, {
    "id": 473,
    "text": "",
    "type": "local variable"
  }, {
    "id": 474,
    "text": "",
    "type": "n/a"
  }, {
    "id": 475,
    "text": "",
    "type": "local variable"
  }, {
    "id": 476,
    "text": "",
    "type": "n/a"
  }, {
    "id": 477,
    "text": "",
    "type": "local variable"
  }, {
    "id": 478,
    "text": "",
    "type": "n/a"
  }, {
    "id": 479,
    "text": "",
    "type": "local variable"
  }, {
    "id": 480,
    "text": "",
    "type": "n/a"
  }, {
    "id": 481,
    "text": "",
    "type": "local variable"
  }, {
    "id": 482,
    "text": "",
    "type": "local variable"
  }, {
    "id": 483,
    "text": "",
    "type": "local variable"
  }, {
    "id": 484,
    "text": "",
    "type": "local variable"
  }, {
    "id": 485,
    "text": "",
    "type": "local variable"
  }, {
    "id": 486,
    "text": "",
    "type": "local variable"
  }, {
    "id": 487,
    "text": "",
    "type": "local variable"
  }, {
    "id": 488,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 489,
    "text": "",
    "type": "string"
  }, {
    "id": 490,
    "text": "",
    "type": "string"
  }, {
    "id": 491,
    "text": "",
    "type": "string"
  }, {
    "id": 492,
    "text": "",
    "type": "string"
  }, {
    "id": 493,
    "text": "",
    "type": "string"
  }, {
    "id": 494,
    "text": "",
    "type": "string"
  }, {
    "id": 495,
    "text": "",
    "type": "string"
  }, {
    "id": 496,
    "text": "",
    "type": "string"
  }, {
    "id": 497,
    "text": "",
    "type": "string"
  }, {
    "id": 498,
    "text": "",
    "type": "string"
  }, {
    "id": 499,
    "text": "",
    "type": "string"
  }, {
    "id": 500,
    "text": "",
    "type": "string"
  }, {
    "id": 501,
    "text": "",
    "type": "string"
  }, {
    "id": 502,
    "text": "",
    "type": "string"
  }, {
    "id": 503,
    "text": "",
    "type": "string"
  }, {
    "id": 504,
    "text": "",
    "type": "local variable"
  }, {
    "id": 505,
    "text": "",
    "type": "number"
  }, {
    "id": 506,
    "text": "",
    "type": "local variable"
  }, {
    "id": 507,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 508,
    "text": "",
    "type": "local variable"
  }, {
    "id": 509,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 510,
    "text": "",
    "type": "local variable"
  }, {
    "id": 511,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 512,
    "text": "",
    "type": "number"
  }, {
    "id": 513,
    "text": "",
    "type": "local variable"
  }, {
    "id": 514,
    "text": "",
    "type": "number"
  }, {
    "id": 515,
    "text": "",
    "type": "local variable"
  }, {
    "id": 516,
    "text": "",
    "type": "number"
  }, {
    "id": 517,
    "text": "",
    "type": "local variable"
  }, {
    "id": 518,
    "text": "",
    "type": "n/a"
  }, {
    "id": 519,
    "text": "",
    "type": "local variable"
  }, {
    "id": 520,
    "text": "",
    "type": "number"
  }, {
    "id": 521,
    "text": "",
    "type": "local variable"
  }, {
    "id": 522,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 523,
    "text": "",
    "type": "local variable"
  }, {
    "id": 524,
    "text": "",
    "type": "n/a"
  }, {
    "id": 525,
    "text": "",
    "type": "local variable"
  }, {
    "id": 526,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 527,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 528,
    "text": "",
    "type": "string"
  }, {
    "id": 529,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 530,
    "text": "",
    "type": "string"
  }, {
    "id": 531,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 532,
    "text": "",
    "type": "string"
  }, {
    "id": 533,
    "text": "",
    "type": "local variable"
  }, {
    "id": 534,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 535,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 536,
    "text": "",
    "type": "string"
  }, {
    "id": 537,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 538,
    "text": "",
    "type": "string"
  }, {
    "id": 539,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 540,
    "text": "",
    "type": "string"
  }, {
    "id": 541,
    "text": "",
    "type": "local variable"
  }, {
    "id": 542,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 543,
    "text": "",
    "type": "local variable"
  }, {
    "id": 544,
    "text": "",
    "type": "number"
  }, {
    "id": 545,
    "text": "",
    "type": "local variable"
  }, {
    "id": 546,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 547,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 548,
    "text": "",
    "type": "number"
  }, {
    "id": 549,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 550,
    "text": "",
    "type": "number"
  }, {
    "id": 551,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 552,
    "text": "",
    "type": "number"
  }, {
    "id": 553,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 554,
    "text": "",
    "type": "number"
  }, {
    "id": 555,
    "text": "",
    "type": "local variable"
  }, {
    "id": 556,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 557,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 558,
    "text": "",
    "type": "number"
  }, {
    "id": 559,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 560,
    "text": "",
    "type": "number"
  }, {
    "id": 561,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 562,
    "text": "",
    "type": "number"
  }, {
    "id": 563,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 564,
    "text": "",
    "type": "number"
  }, {
    "id": 565,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 566,
    "text": "",
    "type": "number"
  }, {
    "id": 567,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 568,
    "text": "",
    "type": "number"
  }, {
    "id": 569,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 570,
    "text": "",
    "type": "number"
  }, {
    "id": 571,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 572,
    "text": "",
    "type": "number"
  }, {
    "id": 573,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 574,
    "text": "",
    "type": "number"
  }, {
    "id": 575,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 576,
    "text": "",
    "type": "number"
  }, {
    "id": 577,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 578,
    "text": "",
    "type": "number"
  }, {
    "id": 579,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 580,
    "text": "",
    "type": "number"
  }, {
    "id": 581,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 582,
    "text": "",
    "type": "number"
  }, {
    "id": 583,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 584,
    "text": "",
    "type": "number"
  }, {
    "id": 585,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 586,
    "text": "",
    "type": "number"
  }, {
    "id": 587,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 588,
    "text": "",
    "type": "number"
  }, {
    "id": 589,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 590,
    "text": "",
    "type": "number"
  }, {
    "id": 591,
    "text": "",
    "type": "local variable"
  }, {
    "id": 592,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 593,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 594,
    "text": "",
    "type": "string"
  }, {
    "id": 595,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 596,
    "text": "",
    "type": "string"
  }, {
    "id": 597,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 598,
    "text": "",
    "type": "string"
  }, {
    "id": 599,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 600,
    "text": "",
    "type": "string"
  }, {
    "id": 601,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 602,
    "text": "",
    "type": "string"
  }, {
    "id": 603,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 604,
    "text": "",
    "type": "string"
  }, {
    "id": 605,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 606,
    "text": "",
    "type": "string"
  }, {
    "id": 607,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 608,
    "text": "",
    "type": "string"
  }, {
    "id": 609,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 610,
    "text": "",
    "type": "string"
  }, {
    "id": 611,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 612,
    "text": "",
    "type": "string"
  }, {
    "id": 613,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 614,
    "text": "",
    "type": "string"
  }, {
    "id": 615,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 616,
    "text": "",
    "type": "string"
  }, {
    "id": 617,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 618,
    "text": "",
    "type": "string"
  }, {
    "id": 619,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 620,
    "text": "",
    "type": "string"
  }, {
    "id": 621,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 622,
    "text": "",
    "type": "string"
  }, {
    "id": 623,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 624,
    "text": "",
    "type": "string"
  }, {
    "id": 625,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 626,
    "text": "",
    "type": "string"
  }, {
    "id": 627,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 628,
    "text": "",
    "type": "string"
  }, {
    "id": 629,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 630,
    "text": "",
    "type": "string"
  }, {
    "id": 631,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 632,
    "text": "",
    "type": "string"
  }, {
    "id": 633,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 634,
    "text": "",
    "type": "string"
  }, {
    "id": 635,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 636,
    "text": "",
    "type": "string"
  }, {
    "id": 637,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 638,
    "text": "",
    "type": "string"
  }, {
    "id": 639,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 640,
    "text": "",
    "type": "string"
  }, {
    "id": 641,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 642,
    "text": "",
    "type": "string"
  }, {
    "id": 643,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 644,
    "text": "",
    "type": "string"
  }, {
    "id": 645,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 646,
    "text": "",
    "type": "string"
  }, {
    "id": 647,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 648,
    "text": "",
    "type": "string"
  }, {
    "id": 649,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 650,
    "text": "",
    "type": "string"
  }, {
    "id": 651,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 652,
    "text": "",
    "type": "string"
  }, {
    "id": 653,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 654,
    "text": "",
    "type": "string"
  }, {
    "id": 655,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 656,
    "text": "",
    "type": "string"
  }, {
    "id": 657,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 658,
    "text": "",
    "type": "string"
  }, {
    "id": 659,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 660,
    "text": "",
    "type": "string"
  }, {
    "id": 661,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 662,
    "text": "",
    "type": "string"
  }, {
    "id": 663,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 664,
    "text": "",
    "type": "string"
  }, {
    "id": 665,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 666,
    "text": "",
    "type": "string"
  }, {
    "id": 667,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 668,
    "text": "",
    "type": "string"
  }, {
    "id": 669,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 670,
    "text": "",
    "type": "string"
  }, {
    "id": 671,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 672,
    "text": "",
    "type": "string"
  }, {
    "id": 673,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 674,
    "text": "",
    "type": "string"
  }, {
    "id": 675,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 676,
    "text": "",
    "type": "string"
  }, {
    "id": 677,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 678,
    "text": "",
    "type": "string"
  }, {
    "id": 679,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 680,
    "text": "",
    "type": "string"
  }, {
    "id": 681,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 682,
    "text": "",
    "type": "string"
  }, {
    "id": 683,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 684,
    "text": "",
    "type": "string"
  }, {
    "id": 685,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 686,
    "text": "",
    "type": "string"
  }, {
    "id": 687,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 688,
    "text": "",
    "type": "string"
  }, {
    "id": 689,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 690,
    "text": "",
    "type": "string"
  }, {
    "id": 691,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 692,
    "text": "",
    "type": "string"
  }, {
    "id": 693,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 694,
    "text": "",
    "type": "string"
  }, {
    "id": 695,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 696,
    "text": "",
    "type": "string"
  }, {
    "id": 697,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 698,
    "text": "",
    "type": "string"
  }, {
    "id": 699,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 700,
    "text": "",
    "type": "string"
  }, {
    "id": 701,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 702,
    "text": "",
    "type": "string"
  }, {
    "id": 703,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 704,
    "text": "",
    "type": "string"
  }, {
    "id": 705,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 706,
    "text": "",
    "type": "string"
  }, {
    "id": 707,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 708,
    "text": "",
    "type": "string"
  }, {
    "id": 709,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 710,
    "text": "",
    "type": "string"
  }, {
    "id": 711,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 712,
    "text": "",
    "type": "string"
  }, {
    "id": 713,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 714,
    "text": "",
    "type": "string"
  }, {
    "id": 715,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 716,
    "text": "",
    "type": "string"
  }, {
    "id": 717,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 718,
    "text": "",
    "type": "string"
  }, {
    "id": 719,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 720,
    "text": "",
    "type": "string"
  }, {
    "id": 721,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 722,
    "text": "",
    "type": "string"
  }, {
    "id": 723,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 724,
    "text": "",
    "type": "string"
  }, {
    "id": 725,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 726,
    "text": "",
    "type": "string"
  }, {
    "id": 727,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 728,
    "text": "",
    "type": "string"
  }, {
    "id": 729,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 730,
    "text": "",
    "type": "string"
  }, {
    "id": 731,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 732,
    "text": "",
    "type": "string"
  }, {
    "id": 733,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 734,
    "text": "",
    "type": "string"
  }, {
    "id": 735,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 736,
    "text": "",
    "type": "string"
  }, {
    "id": 737,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 738,
    "text": "",
    "type": "string"
  }, {
    "id": 739,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 740,
    "text": "",
    "type": "string"
  }, {
    "id": 741,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 742,
    "text": "",
    "type": "string"
  }, {
    "id": 743,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 744,
    "text": "",
    "type": "string"
  }, {
    "id": 745,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 746,
    "text": "",
    "type": "string"
  }, {
    "id": 747,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 748,
    "text": "",
    "type": "string"
  }, {
    "id": 749,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 750,
    "text": "",
    "type": "string"
  }, {
    "id": 751,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 752,
    "text": "",
    "type": "string"
  }, {
    "id": 753,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 754,
    "text": "",
    "type": "string"
  }, {
    "id": 755,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 756,
    "text": "",
    "type": "string"
  }, {
    "id": 757,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 758,
    "text": "",
    "type": "string"
  }, {
    "id": 759,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 760,
    "text": "",
    "type": "string"
  }, {
    "id": 761,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 762,
    "text": "",
    "type": "string"
  }, {
    "id": 763,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 764,
    "text": "",
    "type": "string"
  }, {
    "id": 765,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 766,
    "text": "",
    "type": "string"
  }, {
    "id": 767,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 768,
    "text": "",
    "type": "string"
  }, {
    "id": 769,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 770,
    "text": "",
    "type": "string"
  }, {
    "id": 771,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 772,
    "text": "",
    "type": "string"
  }, {
    "id": 773,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 774,
    "text": "",
    "type": "string"
  }, {
    "id": 775,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 776,
    "text": "",
    "type": "string"
  }, {
    "id": 777,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 778,
    "text": "",
    "type": "string"
  }, {
    "id": 779,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 780,
    "text": "",
    "type": "string"
  }, {
    "id": 781,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 782,
    "text": "",
    "type": "string"
  }, {
    "id": 783,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 784,
    "text": "",
    "type": "string"
  }, {
    "id": 785,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 786,
    "text": "",
    "type": "string"
  }, {
    "id": 787,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 788,
    "text": "",
    "type": "string"
  }, {
    "id": 789,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 790,
    "text": "",
    "type": "string"
  }, {
    "id": 791,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 792,
    "text": "",
    "type": "string"
  }, {
    "id": 793,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 794,
    "text": "",
    "type": "string"
  }, {
    "id": 795,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 796,
    "text": "",
    "type": "string"
  }, {
    "id": 797,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 798,
    "text": "",
    "type": "string"
  }, {
    "id": 799,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 800,
    "text": "",
    "type": "string"
  }, {
    "id": 801,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 802,
    "text": "",
    "type": "string"
  }, {
    "id": 803,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 804,
    "text": "",
    "type": "string"
  }, {
    "id": 805,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 806,
    "text": "",
    "type": "string"
  }, {
    "id": 807,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 808,
    "text": "",
    "type": "string"
  }, {
    "id": 809,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 810,
    "text": "",
    "type": "string"
  }, {
    "id": 811,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 812,
    "text": "",
    "type": "string"
  }, {
    "id": 813,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 814,
    "text": "",
    "type": "string"
  }, {
    "id": 815,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 816,
    "text": "",
    "type": "string"
  }, {
    "id": 817,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 818,
    "text": "",
    "type": "string"
  }, {
    "id": 819,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 820,
    "text": "",
    "type": "string"
  }, {
    "id": 821,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 822,
    "text": "",
    "type": "string"
  }, {
    "id": 823,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 824,
    "text": "",
    "type": "string"
  }, {
    "id": 825,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 826,
    "text": "",
    "type": "string"
  }, {
    "id": 827,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 828,
    "text": "",
    "type": "string"
  }, {
    "id": 829,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 830,
    "text": "",
    "type": "string"
  }, {
    "id": 831,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 832,
    "text": "",
    "type": "string"
  }, {
    "id": 833,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 834,
    "text": "",
    "type": "string"
  }, {
    "id": 835,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 836,
    "text": "",
    "type": "string"
  }, {
    "id": 837,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 838,
    "text": "",
    "type": "string"
  }, {
    "id": 839,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 840,
    "text": "",
    "type": "string"
  }, {
    "id": 841,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 842,
    "text": "",
    "type": "string"
  }, {
    "id": 843,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 844,
    "text": "",
    "type": "string"
  }, {
    "id": 845,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 846,
    "text": "",
    "type": "string"
  }, {
    "id": 847,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 848,
    "text": "",
    "type": "string"
  }, {
    "id": 849,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 850,
    "text": "",
    "type": "string"
  }, {
    "id": 851,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 852,
    "text": "",
    "type": "string"
  }, {
    "id": 853,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 854,
    "text": "",
    "type": "string"
  }, {
    "id": 855,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 856,
    "text": "",
    "type": "string"
  }, {
    "id": 857,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 858,
    "text": "",
    "type": "string"
  }, {
    "id": 859,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 860,
    "text": "",
    "type": "string"
  }, {
    "id": 861,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 862,
    "text": "",
    "type": "string"
  }, {
    "id": 863,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 864,
    "text": "",
    "type": "string"
  }, {
    "id": 865,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 866,
    "text": "",
    "type": "string"
  }, {
    "id": 867,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 868,
    "text": "",
    "type": "string"
  }, {
    "id": 869,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 870,
    "text": "",
    "type": "string"
  }, {
    "id": 871,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 872,
    "text": "",
    "type": "string"
  }, {
    "id": 873,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 874,
    "text": "",
    "type": "string"
  }, {
    "id": 875,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 876,
    "text": "",
    "type": "string"
  }, {
    "id": 877,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 878,
    "text": "",
    "type": "string"
  }, {
    "id": 879,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 880,
    "text": "",
    "type": "string"
  }, {
    "id": 881,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 882,
    "text": "",
    "type": "string"
  }, {
    "id": 883,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 884,
    "text": "",
    "type": "string"
  }, {
    "id": 885,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 886,
    "text": "",
    "type": "string"
  }, {
    "id": 887,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 888,
    "text": "",
    "type": "string"
  }, {
    "id": 889,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 890,
    "text": "",
    "type": "string"
  }, {
    "id": 891,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 892,
    "text": "",
    "type": "string"
  }, {
    "id": 893,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 894,
    "text": "",
    "type": "string"
  }, {
    "id": 895,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 896,
    "text": "",
    "type": "string"
  }, {
    "id": 897,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 898,
    "text": "",
    "type": "string"
  }, {
    "id": 899,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 900,
    "text": "",
    "type": "string"
  }, {
    "id": 901,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 902,
    "text": "",
    "type": "string"
  }, {
    "id": 903,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 904,
    "text": "",
    "type": "string"
  }, {
    "id": 905,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 906,
    "text": "",
    "type": "string"
  }, {
    "id": 907,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 908,
    "text": "",
    "type": "string"
  }, {
    "id": 909,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 910,
    "text": "",
    "type": "string"
  }, {
    "id": 911,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 912,
    "text": "",
    "type": "string"
  }, {
    "id": 913,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 914,
    "text": "",
    "type": "string"
  }, {
    "id": 915,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 916,
    "text": "",
    "type": "string"
  }, {
    "id": 917,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 918,
    "text": "",
    "type": "string"
  }, {
    "id": 919,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 920,
    "text": "",
    "type": "string"
  }, {
    "id": 921,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 922,
    "text": "",
    "type": "string"
  }, {
    "id": 923,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 924,
    "text": "",
    "type": "string"
  }, {
    "id": 925,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 926,
    "text": "",
    "type": "string"
  }, {
    "id": 927,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 928,
    "text": "",
    "type": "string"
  }, {
    "id": 929,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 930,
    "text": "",
    "type": "string"
  }, {
    "id": 931,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 932,
    "text": "",
    "type": "string"
  }, {
    "id": 933,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 934,
    "text": "",
    "type": "string"
  }, {
    "id": 935,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 936,
    "text": "",
    "type": "string"
  }, {
    "id": 937,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 938,
    "text": "",
    "type": "string"
  }, {
    "id": 939,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 940,
    "text": "",
    "type": "string"
  }, {
    "id": 941,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 942,
    "text": "",
    "type": "string"
  }, {
    "id": 943,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 944,
    "text": "",
    "type": "string"
  }, {
    "id": 945,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 946,
    "text": "",
    "type": "string"
  }, {
    "id": 947,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 948,
    "text": "",
    "type": "string"
  }, {
    "id": 949,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 950,
    "text": "",
    "type": "string"
  }, {
    "id": 951,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 952,
    "text": "",
    "type": "string"
  }, {
    "id": 953,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 954,
    "text": "",
    "type": "string"
  }, {
    "id": 955,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 956,
    "text": "",
    "type": "string"
  }, {
    "id": 957,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 958,
    "text": "",
    "type": "string"
  }, {
    "id": 959,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 960,
    "text": "",
    "type": "string"
  }, {
    "id": 961,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 962,
    "text": "",
    "type": "string"
  }, {
    "id": 963,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 964,
    "text": "",
    "type": "string"
  }, {
    "id": 965,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 966,
    "text": "",
    "type": "string"
  }, {
    "id": 967,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 968,
    "text": "",
    "type": "string"
  }, {
    "id": 969,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 970,
    "text": "",
    "type": "string"
  }, {
    "id": 971,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 972,
    "text": "",
    "type": "string"
  }, {
    "id": 973,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 974,
    "text": "",
    "type": "string"
  }, {
    "id": 975,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 976,
    "text": "",
    "type": "string"
  }, {
    "id": 977,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 978,
    "text": "",
    "type": "string"
  }, {
    "id": 979,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 980,
    "text": "",
    "type": "string"
  }, {
    "id": 981,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 982,
    "text": "",
    "type": "string"
  }, {
    "id": 983,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 984,
    "text": "",
    "type": "string"
  }, {
    "id": 985,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 986,
    "text": "",
    "type": "string"
  }, {
    "id": 987,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 988,
    "text": "",
    "type": "string"
  }, {
    "id": 989,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 990,
    "text": "",
    "type": "string"
  }, {
    "id": 991,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 992,
    "text": "",
    "type": "string"
  }, {
    "id": 993,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 994,
    "text": "",
    "type": "string"
  }, {
    "id": 995,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 996,
    "text": "",
    "type": "string"
  }, {
    "id": 997,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 998,
    "text": "",
    "type": "string"
  }, {
    "id": 999,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1000,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1001,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1002,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1003,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1004,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1005,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1006,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1007,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1008,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1009,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1010,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1011,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1012,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1013,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1014,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1015,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1016,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1017,
    "text": "",
    "type": "global variable"
  }, {
    "id": 1018,
    "text": "",
    "type": "n/a"
  }, {
    "id": 1019,
    "text": "",
    "type": "interface container"
  }, {
    "id": 1020,
    "text": "",
    "type": "interface"
  }, {
    "id": 1021,
    "text": "",
    "type": "interface"
  }, {
    "id": 1022,
    "text": "",
    "type": "interface"
  } ]
}