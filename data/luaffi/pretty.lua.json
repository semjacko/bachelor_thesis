{
  "_filename": "pretty.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaffi/pretty.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 27
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 20
  }, {
    "from": 32,
    "label": "has",
    "to": 21
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 26
  }, {
    "from": 35,
    "label": "has",
    "to": 27
  }, {
    "from": 35,
    "label": "has",
    "to": 28
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 32,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 36
  }, {
    "from": 17,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 27
  }, {
    "from": 41,
    "label": "has",
    "to": 28
  }, {
    "from": 41,
    "label": "has",
    "to": 29
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 37,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 46
  }, {
    "from": 2,
    "label": "has",
    "to": 47
  }, {
    "from": 2,
    "label": "has",
    "to": 48
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 49
  }, {
    "from": 2,
    "label": "has",
    "to": 50
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 8
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 13
  }, {
    "from": 55,
    "label": "has",
    "to": 14
  }, {
    "from": 55,
    "label": "has",
    "to": 15
  }, {
    "from": 55,
    "label": "has",
    "to": 16
  }, {
    "from": 55,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 27
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 20
  }, {
    "from": 32,
    "label": "has",
    "to": 21
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 26
  }, {
    "from": 35,
    "label": "has",
    "to": 27
  }, {
    "from": 35,
    "label": "has",
    "to": 28
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 32,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 36
  }, {
    "from": 17,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 27
  }, {
    "from": 41,
    "label": "has",
    "to": 28
  }, {
    "from": 41,
    "label": "has",
    "to": 29
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 37,
    "label": "has",
    "to": 31
  }, {
    "from": 17,
    "label": "has",
    "to": 46
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "calls",
    "to": 63
  }, {
    "from": 53,
    "label": "calls",
    "to": 63
  }, {
    "from": 53,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 63
  }, {
    "from": 55,
    "label": "calls",
    "to": 59
  }, {
    "from": 55,
    "label": "calls",
    "to": 59
  }, {
    "from": 55,
    "label": "calls",
    "to": 66
  }, {
    "from": 55,
    "label": "calls",
    "to": 66
  }, {
    "from": 55,
    "label": "calls",
    "to": 66
  }, {
    "from": 55,
    "label": "calls",
    "to": 55
  }, {
    "from": 55,
    "label": "calls",
    "to": 55
  }, {
    "from": 55,
    "label": "calls",
    "to": 55
  }, {
    "from": 55,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "calls",
    "to": 55
  }, {
    "from": 53,
    "label": "calls",
    "to": 61
  }, {
    "from": 55,
    "label": "calls",
    "to": 53
  }, {
    "from": 55,
    "label": "calls",
    "to": 53
  }, {
    "from": 55,
    "label": "calls",
    "to": 53
  }, {
    "from": 55,
    "label": "calls",
    "to": 53
  }, {
    "from": 55,
    "label": "calls",
    "to": 53
  }, {
    "from": 55,
    "label": "calls",
    "to": 53
  }, {
    "from": 55,
    "label": "calls",
    "to": 53
  }, {
    "from": 55,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 53,
    "label": "calls",
    "to": 60
  }, {
    "from": 55,
    "label": "calls",
    "to": 52
  }, {
    "from": 57,
    "label": "calls",
    "to": 67
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 53,
    "label": "calls",
    "to": 64
  }, {
    "from": 53,
    "label": "calls",
    "to": 64
  }, {
    "from": 53,
    "label": "calls",
    "to": 64
  }, {
    "from": 55,
    "label": "calls",
    "to": 64
  }, {
    "from": 55,
    "label": "calls",
    "to": 64
  }, {
    "from": 55,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 55,
    "label": "calls",
    "to": 65
  }, {
    "from": 55,
    "label": "calls",
    "to": 65
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 55,
    "label": "calls",
    "to": 58
  }, {
    "from": 55,
    "label": "calls",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 57,
    "label": "declares",
    "to": 2
  }, {
    "from": 57,
    "label": "declares",
    "to": 52
  }, {
    "from": 57,
    "label": "declares",
    "to": 53
  }, {
    "from": 57,
    "label": "declares",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 68
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 68,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 69,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "requires",
    "to": 73
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pretty",
    "type": "module"
  }, {
    "id": 2,
    "text": "function table.show(t, name, indent)\r\n  local cart     -- a container\r\n  local autoref  -- for self references\r\n\r\n  --[[ counts the number of elements in a table\r\n  local function tablecount(t)\r\n  local n = 0\r\n  for _, _ in pairs(t) do n = n+1 end\r\n  return n\r\n  end\r\n  ]]\r\n  -- (RiciLake) returns true if the table is empty\r\n  local function isemptytable(t) return type(t) == \"table\" and next(t) == nil end\r\n\r\n  local function basicSerialize (o)\r\n    local so = tostring(o)\r\n    if type(o) == \"function\" then\r\n      local info = debug.getinfo(o, \"S\")\r\n      -- info.name is nil because o is not a calling level\r\n      if info.what == \"C\" then\r\n        return string.format(\"%q\", so .. \", C function\")\r\n      else\r\n        -- the information is defined through lines\r\n        return string.format(\"%q\", so .. \", defined in (\" ..\r\n        info.linedefined .. \"-\" .. info.lastlinedefined ..\r\n        \")\" .. info.source)\r\n      end\r\n    elseif type(o) == \"number\" or type(o) == \"boolean\" then\r\n      return so\r\n    else\r\n      return string.format(\"%q\", so)\r\n    end\r\n  end\r\n\r\n  local function addtocart (value, name, indent, saved, field)\r\n    indent = indent or \"\"\r\n    saved = saved or {}\r\n    field = field or name\r\n\r\n    cart = cart .. indent .. field\r\n\r\n    if type(value) == \"table\" then\r\n      if saved[value] then\r\n        cart = cart .. \" = {}; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        --if tablecount(value) == 0 then\r\n        if isemptytable(value) then\r\n          cart = cart .. \" = {};\\n\"\r\n        else\r\n          cart = cart .. \" = {\\n\"\r\n          for k, v in pairs(value) do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          cart = cart .. indent .. \"};\\n\"\r\n        end\r\n      end\r\n    elseif type(value) == \"userdata\" then\r\n      if saved[value] then\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \"; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \" {\\n\"\r\n        for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n          k = basicSerialize(k)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end\r\n    elseif type(value) == \"function\" then\r\n      cart = cart .. \" = \" .. basicSerialize(value)\r\n      if debug.getupvalue(value, 1) == nil then\r\n        cart = cart .. \";\\n\"\r\n      else\r\n        cart = cart .. \" {\\n\"\r\n        local i = 1\r\n        while true do\r\n          local k, v = debug.getupvalue(value, i)\r\n          if k == nil and v == nil then break end\r\n          k = basicSerialize(i)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n          i = i + 1\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end\r\n    else\r\n      cart = cart .. \" = \" .. basicSerialize(value) .. \";\\n\"\r\n    end\r\n  end\r\n\r\n  name = name or \"__unnamed__\"\r\n  if type(t) ~= \"table\" and type(t) ~= 'userdata' then\r\n    return name .. \" = \" .. basicSerialize(t)\r\n  end\r\n  cart, autoref = \"\", \"\"\r\n  addtocart(t, name, indent)\r\n  return cart .. autoref\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local cart",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local autoref",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local function isemptytable(t) return type(t) == \"table\" and next(t) == nil end",
    "type": "statement:localfunction"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "local function basicSerialize (o)\r\n    local so = tostring(o)\r\n    if type(o) == \"function\" then\r\n      local info = debug.getinfo(o, \"S\")\r\n      -- info.name is nil because o is not a calling level\r\n      if info.what == \"C\" then\r\n        return string.format(\"%q\", so .. \", C function\")\r\n      else\r\n        -- the information is defined through lines\r\n        return string.format(\"%q\", so .. \", defined in (\" ..\r\n        info.linedefined .. \"-\" .. info.lastlinedefined ..\r\n        \")\" .. info.source)\r\n      end\r\n    elseif type(o) == \"number\" or type(o) == \"boolean\" then\r\n      return so\r\n    else\r\n      return string.format(\"%q\", so)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 8,
    "text": "local so = tostring(o)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if type(o) == \"function\" then\r\n      local info = debug.getinfo(o, \"S\")\r\n      -- info.name is nil because o is not a calling level\r\n      if info.what == \"C\" then\r\n        return string.format(\"%q\", so .. \", C function\")\r\n      else\r\n        -- the information is defined through lines\r\n        return string.format(\"%q\", so .. \", defined in (\" ..\r\n        info.linedefined .. \"-\" .. info.lastlinedefined ..\r\n        \")\" .. info.source)\r\n      end\r\n    elseif type(o) == \"number\" or type(o) == \"boolean\" then\r\n      return so\r\n    else\r\n      return string.format(\"%q\", so)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local info = debug.getinfo(o, \"S\")",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if info.what == \"C\" then\r\n        return string.format(\"%q\", so .. \", C function\")\r\n      else\r\n        -- the information is defined through lines\r\n        return string.format(\"%q\", so .. \", defined in (\" ..\r\n        info.linedefined .. \"-\" .. info.lastlinedefined ..\r\n        \")\" .. info.source)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "local function addtocart (value, name, indent, saved, field)\r\n    indent = indent or \"\"\r\n    saved = saved or {}\r\n    field = field or name\r\n\r\n    cart = cart .. indent .. field\r\n\r\n    if type(value) == \"table\" then\r\n      if saved[value] then\r\n        cart = cart .. \" = {}; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        --if tablecount(value) == 0 then\r\n        if isemptytable(value) then\r\n          cart = cart .. \" = {};\\n\"\r\n        else\r\n          cart = cart .. \" = {\\n\"\r\n          for k, v in pairs(value) do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          cart = cart .. indent .. \"};\\n\"\r\n        end\r\n      end\r\n    elseif type(value) == \"userdata\" then\r\n      if saved[value] then\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \"; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \" {\\n\"\r\n        for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n          k = basicSerialize(k)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end\r\n    elseif type(value) == \"function\" then\r\n      cart = cart .. \" = \" .. basicSerialize(value)\r\n      if debug.getupvalue(value, 1) == nil then\r\n        cart = cart .. \";\\n\"\r\n      else\r\n        cart = cart .. \" {\\n\"\r\n        local i = 1\r\n        while true do\r\n          local k, v = debug.getupvalue(value, i)\r\n          if k == nil and v == nil then break end\r\n          k = basicSerialize(i)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n          i = i + 1\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end\r\n    else\r\n      cart = cart .. \" = \" .. basicSerialize(value) .. \";\\n\"\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 13,
    "text": "indent = indent or \"\"",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "saved = saved or {}",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "field = field or name",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "cart = cart .. indent .. field",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if type(value) == \"table\" then\r\n      if saved[value] then\r\n        cart = cart .. \" = {}; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        --if tablecount(value) == 0 then\r\n        if isemptytable(value) then\r\n          cart = cart .. \" = {};\\n\"\r\n        else\r\n          cart = cart .. \" = {\\n\"\r\n          for k, v in pairs(value) do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          cart = cart .. indent .. \"};\\n\"\r\n        end\r\n      end\r\n    elseif type(value) == \"userdata\" then\r\n      if saved[value] then\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \"; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \" {\\n\"\r\n        for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n          k = basicSerialize(k)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end\r\n    elseif type(value) == \"function\" then\r\n      cart = cart .. \" = \" .. basicSerialize(value)\r\n      if debug.getupvalue(value, 1) == nil then\r\n        cart = cart .. \";\\n\"\r\n      else\r\n        cart = cart .. \" {\\n\"\r\n        local i = 1\r\n        while true do\r\n          local k, v = debug.getupvalue(value, i)\r\n          if k == nil and v == nil then break end\r\n          k = basicSerialize(i)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n          i = i + 1\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end\r\n    else\r\n      cart = cart .. \" = \" .. basicSerialize(value) .. \";\\n\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "if saved[value] then\r\n        cart = cart .. \" = {}; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        --if tablecount(value) == 0 then\r\n        if isemptytable(value) then\r\n          cart = cart .. \" = {};\\n\"\r\n        else\r\n          cart = cart .. \" = {\\n\"\r\n          for k, v in pairs(value) do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          cart = cart .. indent .. \"};\\n\"\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "cart = cart .. \" = {}; -- \" .. saved[value] .. \" (self reference)\\n\"",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "saved[value] = name",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if isemptytable(value) then\r\n          cart = cart .. \" = {};\\n\"\r\n        else\r\n          cart = cart .. \" = {\\n\"\r\n          for k, v in pairs(value) do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          cart = cart .. indent .. \"};\\n\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "cart = cart .. \" = {};\\n\"",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "cart = cart .. \" = {\\n\"",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "for k, v in pairs(value) do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "k = basicSerialize(k)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "local fname = string.format(\"%s[%s]\", name, k)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "field = string.format(\"[%s]\", k)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "addtocart(v, fname, indent .. \"   \", saved, field)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "cart = cart .. indent .. \"};\\n\"",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if saved[value] then\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \"; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \" {\\n\"\r\n        for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n          k = basicSerialize(k)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "cart = cart .. \" = \" .. basicSerialize(value) .. \"; -- \" .. saved[value] .. \" (self reference)\\n\"",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "cart = cart .. \" = \" .. basicSerialize(value) .. \" {\\n\"",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n          k = basicSerialize(k)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "cart = cart .. \" = \" .. basicSerialize(value)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if debug.getupvalue(value, 1) == nil then\r\n        cart = cart .. \";\\n\"\r\n      else\r\n        cart = cart .. \" {\\n\"\r\n        local i = 1\r\n        while true do\r\n          local k, v = debug.getupvalue(value, i)\r\n          if k == nil and v == nil then break end\r\n          k = basicSerialize(i)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n          i = i + 1\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "cart = cart .. \";\\n\"",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "cart = cart .. \" {\\n\"",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "while true do\r\n          local k, v = debug.getupvalue(value, i)\r\n          if k == nil and v == nil then break end\r\n          k = basicSerialize(i)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n          i = i + 1\r\n        end",
    "type": "statement:while"
  }, {
    "id": 42,
    "text": "local k, v = debug.getupvalue(value, i)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if k == nil and v == nil then break end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "k = basicSerialize(i)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "cart = cart .. \" = \" .. basicSerialize(value) .. \";\\n\"",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "name = name or \"__unnamed__\"",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "if type(t) ~= \"table\" and type(t) ~= 'userdata' then\r\n    return name .. \" = \" .. basicSerialize(t)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "cart, autoref = \"\", \"\"",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "addtocart(t, name, indent)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function isemptytable(t) return type(t) == \"table\" and next(t) == nil end",
    "type": "function"
  }, {
    "id": 53,
    "text": "local function basicSerialize (o)\r\n    local so = tostring(o)\r\n    if type(o) == \"function\" then\r\n      local info = debug.getinfo(o, \"S\")\r\n      -- info.name is nil because o is not a calling level\r\n      if info.what == \"C\" then\r\n        return string.format(\"%q\", so .. \", C function\")\r\n      else\r\n        -- the information is defined through lines\r\n        return string.format(\"%q\", so .. \", defined in (\" ..\r\n        info.linedefined .. \"-\" .. info.lastlinedefined ..\r\n        \")\" .. info.source)\r\n      end\r\n    elseif type(o) == \"number\" or type(o) == \"boolean\" then\r\n      return so\r\n    else\r\n      return string.format(\"%q\", so)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function addtocart (value, name, indent, saved, field)\r\n    indent = indent or \"\"\r\n    saved = saved or {}\r\n    field = field or name\r\n\r\n    cart = cart .. indent .. field\r\n\r\n    if type(value) == \"table\" then\r\n      if saved[value] then\r\n        cart = cart .. \" = {}; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        --if tablecount(value) == 0 then\r\n        if isemptytable(value) then\r\n          cart = cart .. \" = {};\\n\"\r\n        else\r\n          cart = cart .. \" = {\\n\"\r\n          for k, v in pairs(value) do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n            k = basicSerialize(k)\r\n            local fname = string.format(\"%s[%s]\", name, k)\r\n            field = string.format(\"[%s]\", k)\r\n            -- three spaces between levels\r\n            addtocart(v, fname, indent .. \"   \", saved, field)\r\n          end\r\n          cart = cart .. indent .. \"};\\n\"\r\n        end\r\n      end\r\n    elseif type(value) == \"userdata\" then\r\n      if saved[value] then\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \"; -- \" .. saved[value] .. \" (self reference)\\n\"\r\n        autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\r\n      else\r\n        saved[value] = name\r\n        cart = cart .. \" = \" .. basicSerialize(value) .. \" {\\n\"\r\n        for k, v in pairs{env = dbg_getfenv(value), mt = debug.getmetatable(value)} do\r\n          k = basicSerialize(k)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end\r\n    elseif type(value) == \"function\" then\r\n      cart = cart .. \" = \" .. basicSerialize(value)\r\n      if debug.getupvalue(value, 1) == nil then\r\n        cart = cart .. \";\\n\"\r\n      else\r\n        cart = cart .. \" {\\n\"\r\n        local i = 1\r\n        while true do\r\n          local k, v = debug.getupvalue(value, i)\r\n          if k == nil and v == nil then break end\r\n          k = basicSerialize(i)\r\n          local fname = string.format(\"%s[%s]\", name, k)\r\n          field = string.format(\"[%s]\", k)\r\n          -- three spaces between levels\r\n          addtocart(v, fname, indent .. \"   \", saved, field)\r\n          i = i + 1\r\n        end\r\n        cart = cart .. indent .. \"};\\n\"\r\n      end\r\n    else\r\n      cart = cart .. \" = \" .. basicSerialize(value) .. \";\\n\"\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "",
    "type": "function container"
  }, {
    "id": 58,
    "text": "getupvalue",
    "type": "global function"
  }, {
    "id": 59,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 60,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 61,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 62,
    "text": "next",
    "type": "global function"
  }, {
    "id": 63,
    "text": "format",
    "type": "global function"
  }, {
    "id": 64,
    "text": "type",
    "type": "global function"
  }, {
    "id": 65,
    "text": "dbg_getfenv",
    "type": "global function"
  }, {
    "id": 66,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 67,
    "text": "require",
    "type": "global function"
  }, {
    "id": 68,
    "text": "",
    "type": "variable container"
  }, {
    "id": 69,
    "text": "",
    "type": "require container"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 73,
    "text": "(debug)",
    "type": "module"
  } ]
}