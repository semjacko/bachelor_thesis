{
  "_filename": "message.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-pop3/lua/pop3/message.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 15
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 23,
    "label": "has",
    "to": 8
  }, {
    "from": 23,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 32,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 8
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 8
  }, {
    "from": 49,
    "label": "has",
    "to": 8
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 8
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 8
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 8
  }, {
    "from": 59,
    "label": "has",
    "to": 8
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 65,
    "label": "has",
    "to": 8
  }, {
    "from": 65,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 8
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 8
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 8
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 8
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 8
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 8
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 8
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 8
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 98
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 8
  }, {
    "from": 100,
    "label": "has",
    "to": 8
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 92
  }, {
    "from": 103,
    "label": "has",
    "to": 93
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 8
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 104
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 8
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 8
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 8
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 8
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 8
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 8
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 8
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 8
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 8
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 8
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 8
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 8
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 8
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 152,
    "label": "has",
    "to": 8
  }, {
    "from": 152,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 158,
    "label": "has",
    "to": 8
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 161,
    "label": "has",
    "to": 8
  }, {
    "from": 161,
    "label": "has",
    "to": 8
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 8
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 8
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 8
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 8
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 8
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 8
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 8
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 179
  }, {
    "from": 181,
    "label": "has",
    "to": 8
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 184,
    "label": "has",
    "to": 8
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 8
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 8
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 190,
    "label": "has",
    "to": 8
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 8
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 194,
    "label": "has",
    "to": 8
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 196,
    "label": "has",
    "to": 8
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 8
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 201,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 211,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 211,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 209,
    "label": "has",
    "to": 8
  }, {
    "from": 209,
    "label": "has",
    "to": 8
  }, {
    "from": 209,
    "label": "has",
    "to": 8
  }, {
    "from": 209,
    "label": "has",
    "to": 8
  }, {
    "from": 209,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 8
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 8
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 230,
    "label": "has",
    "to": 233
  }, {
    "from": 228,
    "label": "has",
    "to": 234
  }, {
    "from": 235,
    "label": "has",
    "to": 229
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 235,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 239,
    "label": "has",
    "to": 8
  }, {
    "from": 239,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 240
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 8
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 246,
    "label": "has",
    "to": 8
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 8
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 8
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 252,
    "label": "has",
    "to": 8
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 8
  }, {
    "from": 261,
    "label": "has",
    "to": 8
  }, {
    "from": 262,
    "label": "has",
    "to": 8
  }, {
    "from": 263,
    "label": "has",
    "to": 8
  }, {
    "from": 264,
    "label": "has",
    "to": 8
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 8
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 8
  }, {
    "from": 265,
    "label": "has",
    "to": 8
  }, {
    "from": 265,
    "label": "has",
    "to": 269
  }, {
    "from": 270,
    "label": "has",
    "to": 8
  }, {
    "from": 271,
    "label": "has",
    "to": 8
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 8
  }, {
    "from": 272,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 8
  }, {
    "from": 272,
    "label": "has",
    "to": 8
  }, {
    "from": 272,
    "label": "has",
    "to": 274
  }, {
    "from": 275,
    "label": "has",
    "to": 37
  }, {
    "from": 275,
    "label": "has",
    "to": 38
  }, {
    "from": 275,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 275,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 275,
    "label": "has",
    "to": 8
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 277,
    "label": "has",
    "to": 51
  }, {
    "from": 277,
    "label": "has",
    "to": 8
  }, {
    "from": 277,
    "label": "has",
    "to": 8
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 279,
    "label": "has",
    "to": 8
  }, {
    "from": 279,
    "label": "has",
    "to": 8
  }, {
    "from": 279,
    "label": "has",
    "to": 281
  }, {
    "from": 282,
    "label": "has",
    "to": 8
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 284,
    "label": "has",
    "to": 288
  }, {
    "from": 284,
    "label": "has",
    "to": 8
  }, {
    "from": 284,
    "label": "has",
    "to": 289
  }, {
    "from": 284,
    "label": "has",
    "to": 290
  }, {
    "from": 284,
    "label": "has",
    "to": 291
  }, {
    "from": 284,
    "label": "has",
    "to": 8
  }, {
    "from": 284,
    "label": "has",
    "to": 292
  }, {
    "from": 284,
    "label": "has",
    "to": 293
  }, {
    "from": 284,
    "label": "has",
    "to": 294
  }, {
    "from": 284,
    "label": "has",
    "to": 295
  }, {
    "from": 284,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 296,
    "label": "has",
    "to": 300
  }, {
    "from": 296,
    "label": "has",
    "to": 301
  }, {
    "from": 296,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 296,
    "label": "has",
    "to": 304
  }, {
    "from": 296,
    "label": "has",
    "to": 299
  }, {
    "from": 296,
    "label": "has",
    "to": 305
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 296,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 296,
    "label": "has",
    "to": 308
  }, {
    "from": 296,
    "label": "has",
    "to": 309
  }, {
    "from": 296,
    "label": "has",
    "to": 310
  }, {
    "from": 296,
    "label": "has",
    "to": 311
  }, {
    "from": 284,
    "label": "has",
    "to": 8
  }, {
    "from": 284,
    "label": "has",
    "to": 312
  }, {
    "from": 284,
    "label": "has",
    "to": 8
  }, {
    "from": 284,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 314,
    "label": "has",
    "to": 8
  }, {
    "from": 314,
    "label": "has",
    "to": 104
  }, {
    "from": 314,
    "label": "has",
    "to": 316
  }, {
    "from": 314,
    "label": "has",
    "to": 317
  }, {
    "from": 314,
    "label": "has",
    "to": 318
  }, {
    "from": 314,
    "label": "has",
    "to": 8
  }, {
    "from": 314,
    "label": "has",
    "to": 319
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 320,
    "label": "has",
    "to": 323
  }, {
    "from": 320,
    "label": "has",
    "to": 324
  }, {
    "from": 320,
    "label": "has",
    "to": 325
  }, {
    "from": 320,
    "label": "has",
    "to": 326
  }, {
    "from": 320,
    "label": "has",
    "to": 327
  }, {
    "from": 320,
    "label": "has",
    "to": 328
  }, {
    "from": 320,
    "label": "has",
    "to": 329
  }, {
    "from": 320,
    "label": "has",
    "to": 8
  }, {
    "from": 320,
    "label": "has",
    "to": 330
  }, {
    "from": 320,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 320,
    "label": "has",
    "to": 333
  }, {
    "from": 320,
    "label": "has",
    "to": 334
  }, {
    "from": 320,
    "label": "has",
    "to": 335
  }, {
    "from": 320,
    "label": "has",
    "to": 336
  }, {
    "from": 320,
    "label": "has",
    "to": 8
  }, {
    "from": 320,
    "label": "has",
    "to": 337
  }, {
    "from": 320,
    "label": "has",
    "to": 338
  }, {
    "from": 320,
    "label": "has",
    "to": 339
  }, {
    "from": 339,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 341,
    "label": "has",
    "to": 343
  }, {
    "from": 341,
    "label": "has",
    "to": 344
  }, {
    "from": 340,
    "label": "has",
    "to": 327
  }, {
    "from": 340,
    "label": "has",
    "to": 345
  }, {
    "from": 320,
    "label": "has",
    "to": 346
  }, {
    "from": 320,
    "label": "has",
    "to": 8
  }, {
    "from": 320,
    "label": "has",
    "to": 347
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 321
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 348,
    "label": "has",
    "to": 351
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 351,
    "label": "has",
    "to": 353
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 353,
    "label": "has",
    "to": 355
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 355,
    "label": "has",
    "to": 357
  }, {
    "from": 355,
    "label": "has",
    "to": 358
  }, {
    "from": 353,
    "label": "has",
    "to": 359
  }, {
    "from": 351,
    "label": "has",
    "to": 360
  }, {
    "from": 348,
    "label": "has",
    "to": 8
  }, {
    "from": 348,
    "label": "has",
    "to": 8
  }, {
    "from": 348,
    "label": "has",
    "to": 361
  }, {
    "from": 362,
    "label": "has",
    "to": 120
  }, {
    "from": 362,
    "label": "has",
    "to": 121
  }, {
    "from": 363,
    "label": "has",
    "to": 125
  }, {
    "from": 363,
    "label": "has",
    "to": 126
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 364,
    "label": "has",
    "to": 321
  }, {
    "from": 364,
    "label": "has",
    "to": 318
  }, {
    "from": 364,
    "label": "has",
    "to": 317
  }, {
    "from": 364,
    "label": "has",
    "to": 366
  }, {
    "from": 364,
    "label": "has",
    "to": 367
  }, {
    "from": 364,
    "label": "has",
    "to": 368
  }, {
    "from": 364,
    "label": "has",
    "to": 369
  }, {
    "from": 364,
    "label": "has",
    "to": 370
  }, {
    "from": 364,
    "label": "has",
    "to": 371
  }, {
    "from": 364,
    "label": "has",
    "to": 8
  }, {
    "from": 364,
    "label": "has",
    "to": 8
  }, {
    "from": 364,
    "label": "has",
    "to": 372
  }, {
    "from": 373,
    "label": "has",
    "to": 374
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 373,
    "label": "has",
    "to": 8
  }, {
    "from": 373,
    "label": "has",
    "to": 376
  }, {
    "from": 81,
    "label": "calls",
    "to": 396
  }, {
    "from": 377,
    "label": "calls",
    "to": 396
  }, {
    "from": 164,
    "label": "calls",
    "to": 396
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 91,
    "label": "calls",
    "to": 389
  }, {
    "from": 103,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 389
  }, {
    "from": 118,
    "label": "calls",
    "to": 389
  }, {
    "from": 123,
    "label": "calls",
    "to": 389
  }, {
    "from": 209,
    "label": "calls",
    "to": 389
  }, {
    "from": 228,
    "label": "calls",
    "to": 389
  }, {
    "from": 377,
    "label": "calls",
    "to": 382
  }, {
    "from": 228,
    "label": "calls",
    "to": 226
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 65
  }, {
    "from": 377,
    "label": "calls",
    "to": 405
  }, {
    "from": 377,
    "label": "calls",
    "to": 405
  }, {
    "from": 23,
    "label": "calls",
    "to": 390
  }, {
    "from": 377,
    "label": "calls",
    "to": 390
  }, {
    "from": 377,
    "label": "calls",
    "to": 390
  }, {
    "from": 377,
    "label": "calls",
    "to": 390
  }, {
    "from": 201,
    "label": "calls",
    "to": 402
  }, {
    "from": 201,
    "label": "calls",
    "to": 402
  }, {
    "from": 377,
    "label": "calls",
    "to": 23
  }, {
    "from": 377,
    "label": "calls",
    "to": 399
  }, {
    "from": 377,
    "label": "calls",
    "to": 399
  }, {
    "from": 91,
    "label": "calls",
    "to": 399
  }, {
    "from": 103,
    "label": "calls",
    "to": 399
  }, {
    "from": 109,
    "label": "calls",
    "to": 399
  }, {
    "from": 75,
    "label": "calls",
    "to": 391
  }, {
    "from": 377,
    "label": "calls",
    "to": 391
  }, {
    "from": 377,
    "label": "calls",
    "to": 391
  }, {
    "from": 91,
    "label": "calls",
    "to": 391
  }, {
    "from": 103,
    "label": "calls",
    "to": 391
  }, {
    "from": 109,
    "label": "calls",
    "to": 391
  }, {
    "from": 152,
    "label": "calls",
    "to": 391
  }, {
    "from": 158,
    "label": "calls",
    "to": 391
  }, {
    "from": 161,
    "label": "calls",
    "to": 391
  }, {
    "from": 201,
    "label": "calls",
    "to": 391
  }, {
    "from": 138,
    "label": "calls",
    "to": 32
  }, {
    "from": 140,
    "label": "calls",
    "to": 32
  }, {
    "from": 142,
    "label": "calls",
    "to": 32
  }, {
    "from": 144,
    "label": "calls",
    "to": 32
  }, {
    "from": 177,
    "label": "calls",
    "to": 32
  }, {
    "from": 181,
    "label": "calls",
    "to": 32
  }, {
    "from": 377,
    "label": "calls",
    "to": 392
  }, {
    "from": 377,
    "label": "calls",
    "to": 392
  }, {
    "from": 209,
    "label": "calls",
    "to": 392
  }, {
    "from": 83,
    "label": "calls",
    "to": 19
  }, {
    "from": 166,
    "label": "calls",
    "to": 19
  }, {
    "from": 46,
    "label": "calls",
    "to": 394
  }, {
    "from": 377,
    "label": "calls",
    "to": 394
  }, {
    "from": 377,
    "label": "calls",
    "to": 383
  }, {
    "from": 7,
    "label": "calls",
    "to": 404
  }, {
    "from": 10,
    "label": "calls",
    "to": 404
  }, {
    "from": 377,
    "label": "calls",
    "to": 404
  }, {
    "from": 170,
    "label": "calls",
    "to": 45
  }, {
    "from": 377,
    "label": "calls",
    "to": 388
  }, {
    "from": 377,
    "label": "calls",
    "to": 388
  }, {
    "from": 377,
    "label": "calls",
    "to": 387
  }, {
    "from": 377,
    "label": "calls",
    "to": 387
  }, {
    "from": 235,
    "label": "calls",
    "to": 406
  }, {
    "from": 53,
    "label": "calls",
    "to": 59
  }, {
    "from": 75,
    "label": "calls",
    "to": 59
  }, {
    "from": 75,
    "label": "calls",
    "to": 385
  }, {
    "from": 377,
    "label": "calls",
    "to": 407
  }, {
    "from": 377,
    "label": "calls",
    "to": 407
  }, {
    "from": 377,
    "label": "calls",
    "to": 393
  }, {
    "from": 377,
    "label": "calls",
    "to": 393
  }, {
    "from": 377,
    "label": "calls",
    "to": 393
  }, {
    "from": 377,
    "label": "calls",
    "to": 393
  }, {
    "from": 49,
    "label": "calls",
    "to": 409
  }, {
    "from": 377,
    "label": "calls",
    "to": 398
  }, {
    "from": 53,
    "label": "calls",
    "to": 408
  }, {
    "from": 53,
    "label": "calls",
    "to": 408
  }, {
    "from": 377,
    "label": "calls",
    "to": 408
  }, {
    "from": 377,
    "label": "calls",
    "to": 408
  }, {
    "from": 377,
    "label": "calls",
    "to": 408
  }, {
    "from": 23,
    "label": "calls",
    "to": 414
  }, {
    "from": 23,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 414
  }, {
    "from": 377,
    "label": "calls",
    "to": 413
  }, {
    "from": 377,
    "label": "calls",
    "to": 410
  }, {
    "from": 377,
    "label": "calls",
    "to": 410
  }, {
    "from": 75,
    "label": "calls",
    "to": 410
  }, {
    "from": 377,
    "label": "calls",
    "to": 410
  }, {
    "from": 377,
    "label": "calls",
    "to": 410
  }, {
    "from": 146,
    "label": "calls",
    "to": 410
  }, {
    "from": 148,
    "label": "calls",
    "to": 410
  }, {
    "from": 150,
    "label": "calls",
    "to": 410
  }, {
    "from": 377,
    "label": "calls",
    "to": 403
  }, {
    "from": 377,
    "label": "calls",
    "to": 412
  }, {
    "from": 377,
    "label": "calls",
    "to": 395
  }, {
    "from": 209,
    "label": "calls",
    "to": 395
  }, {
    "from": 377,
    "label": "calls",
    "to": 411
  }, {
    "from": 377,
    "label": "calls",
    "to": 411
  }, {
    "from": 23,
    "label": "calls",
    "to": 411
  }, {
    "from": 23,
    "label": "calls",
    "to": 411
  }, {
    "from": 377,
    "label": "calls",
    "to": 411
  }, {
    "from": 377,
    "label": "calls",
    "to": 411
  }, {
    "from": 103,
    "label": "calls",
    "to": 411
  }, {
    "from": 377,
    "label": "calls",
    "to": 411
  }, {
    "from": 377,
    "label": "calls",
    "to": 411
  }, {
    "from": 228,
    "label": "calls",
    "to": 411
  }, {
    "from": 228,
    "label": "calls",
    "to": 411
  }, {
    "from": 235,
    "label": "calls",
    "to": 411
  }, {
    "from": 14,
    "label": "calls",
    "to": 401
  }, {
    "from": 59,
    "label": "calls",
    "to": 401
  }, {
    "from": 59,
    "label": "calls",
    "to": 401
  }, {
    "from": 377,
    "label": "calls",
    "to": 46
  }, {
    "from": 12,
    "label": "calls",
    "to": 7
  }, {
    "from": 377,
    "label": "calls",
    "to": 7
  }, {
    "from": 228,
    "label": "calls",
    "to": 224
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 415
  }, {
    "from": 377,
    "label": "calls",
    "to": 400
  }, {
    "from": 59,
    "label": "calls",
    "to": 53
  }, {
    "from": 377,
    "label": "calls",
    "to": 53
  }, {
    "from": 377,
    "label": "calls",
    "to": 53
  }, {
    "from": 377,
    "label": "calls",
    "to": 12
  }, {
    "from": 377,
    "label": "calls",
    "to": 12
  }, {
    "from": 377,
    "label": "calls",
    "to": 12
  }, {
    "from": 377,
    "label": "calls",
    "to": 12
  }, {
    "from": 377,
    "label": "calls",
    "to": 416
  }, {
    "from": 377,
    "label": "calls",
    "to": 416
  }, {
    "from": 377,
    "label": "calls",
    "to": 416
  }, {
    "from": 377,
    "label": "calls",
    "to": 416
  }, {
    "from": 377,
    "label": "calls",
    "to": 416
  }, {
    "from": 377,
    "label": "calls",
    "to": 416
  }, {
    "from": 235,
    "label": "calls",
    "to": 397
  }, {
    "from": 12,
    "label": "calls",
    "to": 10
  }, {
    "from": 377,
    "label": "calls",
    "to": 10
  }, {
    "from": 377,
    "label": "calls",
    "to": 10
  }, {
    "from": 2,
    "label": "contains",
    "to": 377
  }, {
    "from": 377,
    "label": "declares",
    "to": 7
  }, {
    "from": 377,
    "label": "declares",
    "to": 10
  }, {
    "from": 377,
    "label": "declares",
    "to": 12
  }, {
    "from": 377,
    "label": "declares",
    "to": 14
  }, {
    "from": 377,
    "label": "declares",
    "to": 19
  }, {
    "from": 377,
    "label": "declares",
    "to": 23
  }, {
    "from": 377,
    "label": "declares",
    "to": 32
  }, {
    "from": 377,
    "label": "declares",
    "to": 45
  }, {
    "from": 377,
    "label": "declares",
    "to": 46
  }, {
    "from": 377,
    "label": "declares",
    "to": 49
  }, {
    "from": 377,
    "label": "declares",
    "to": 53
  }, {
    "from": 377,
    "label": "declares",
    "to": 59
  }, {
    "from": 377,
    "label": "declares",
    "to": 65
  }, {
    "from": 377,
    "label": "declares",
    "to": 75
  }, {
    "from": 377,
    "label": "declares",
    "to": 79
  }, {
    "from": 377,
    "label": "declares",
    "to": 81
  }, {
    "from": 377,
    "label": "declares",
    "to": 83
  }, {
    "from": 377,
    "label": "declares",
    "to": 85
  }, {
    "from": 377,
    "label": "declares",
    "to": 87
  }, {
    "from": 377,
    "label": "declares",
    "to": 89
  }, {
    "from": 377,
    "label": "declares",
    "to": 91
  }, {
    "from": 377,
    "label": "declares",
    "to": 97
  }, {
    "from": 377,
    "label": "declares",
    "to": 100
  }, {
    "from": 377,
    "label": "declares",
    "to": 103
  }, {
    "from": 377,
    "label": "declares",
    "to": 109
  }, {
    "from": 377,
    "label": "declares",
    "to": 116
  }, {
    "from": 377,
    "label": "declares",
    "to": 118
  }, {
    "from": 377,
    "label": "declares",
    "to": 123
  }, {
    "from": 377,
    "label": "declares",
    "to": 128
  }, {
    "from": 377,
    "label": "declares",
    "to": 130
  }, {
    "from": 377,
    "label": "declares",
    "to": 132
  }, {
    "from": 377,
    "label": "declares",
    "to": 134
  }, {
    "from": 377,
    "label": "declares",
    "to": 136
  }, {
    "from": 377,
    "label": "declares",
    "to": 138
  }, {
    "from": 377,
    "label": "declares",
    "to": 140
  }, {
    "from": 377,
    "label": "declares",
    "to": 142
  }, {
    "from": 377,
    "label": "declares",
    "to": 144
  }, {
    "from": 377,
    "label": "declares",
    "to": 146
  }, {
    "from": 377,
    "label": "declares",
    "to": 148
  }, {
    "from": 377,
    "label": "declares",
    "to": 150
  }, {
    "from": 377,
    "label": "declares",
    "to": 152
  }, {
    "from": 377,
    "label": "declares",
    "to": 158
  }, {
    "from": 377,
    "label": "declares",
    "to": 161
  }, {
    "from": 377,
    "label": "declares",
    "to": 164
  }, {
    "from": 377,
    "label": "declares",
    "to": 166
  }, {
    "from": 377,
    "label": "declares",
    "to": 168
  }, {
    "from": 377,
    "label": "declares",
    "to": 170
  }, {
    "from": 377,
    "label": "declares",
    "to": 173
  }, {
    "from": 377,
    "label": "declares",
    "to": 175
  }, {
    "from": 377,
    "label": "declares",
    "to": 177
  }, {
    "from": 377,
    "label": "declares",
    "to": 181
  }, {
    "from": 377,
    "label": "declares",
    "to": 184
  }, {
    "from": 377,
    "label": "declares",
    "to": 186
  }, {
    "from": 377,
    "label": "declares",
    "to": 188
  }, {
    "from": 377,
    "label": "declares",
    "to": 190
  }, {
    "from": 377,
    "label": "declares",
    "to": 192
  }, {
    "from": 377,
    "label": "declares",
    "to": 194
  }, {
    "from": 377,
    "label": "declares",
    "to": 196
  }, {
    "from": 377,
    "label": "declares",
    "to": 198
  }, {
    "from": 377,
    "label": "declares",
    "to": 201
  }, {
    "from": 377,
    "label": "declares",
    "to": 209
  }, {
    "from": 377,
    "label": "declares",
    "to": 224
  }, {
    "from": 377,
    "label": "declares",
    "to": 226
  }, {
    "from": 377,
    "label": "declares",
    "to": 228
  }, {
    "from": 377,
    "label": "declares",
    "to": 235
  }, {
    "from": 377,
    "label": "declares",
    "to": 239
  }, {
    "from": 377,
    "label": "declares",
    "to": 243
  }, {
    "from": 377,
    "label": "declares",
    "to": 246
  }, {
    "from": 377,
    "label": "declares",
    "to": 248
  }, {
    "from": 377,
    "label": "declares",
    "to": 250
  }, {
    "from": 377,
    "label": "declares",
    "to": 252
  }, {
    "from": 377,
    "label": "declares",
    "to": 254
  }, {
    "from": 377,
    "label": "declares",
    "to": 256
  }, {
    "from": 377,
    "label": "declares",
    "to": 258
  }, {
    "from": 377,
    "label": "declares",
    "to": 260
  }, {
    "from": 377,
    "label": "declares",
    "to": 261
  }, {
    "from": 377,
    "label": "declares",
    "to": 262
  }, {
    "from": 377,
    "label": "declares",
    "to": 263
  }, {
    "from": 377,
    "label": "declares",
    "to": 264
  }, {
    "from": 377,
    "label": "declares",
    "to": 265
  }, {
    "from": 377,
    "label": "declares",
    "to": 270
  }, {
    "from": 377,
    "label": "declares",
    "to": 271
  }, {
    "from": 377,
    "label": "declares",
    "to": 272
  }, {
    "from": 377,
    "label": "declares",
    "to": 275
  }, {
    "from": 377,
    "label": "declares",
    "to": 277
  }, {
    "from": 377,
    "label": "declares",
    "to": 279
  }, {
    "from": 377,
    "label": "declares",
    "to": 282
  }, {
    "from": 377,
    "label": "declares",
    "to": 284
  }, {
    "from": 377,
    "label": "declares",
    "to": 314
  }, {
    "from": 377,
    "label": "declares",
    "to": 320
  }, {
    "from": 377,
    "label": "declares",
    "to": 348
  }, {
    "from": 377,
    "label": "declares",
    "to": 362
  }, {
    "from": 377,
    "label": "declares",
    "to": 363
  }, {
    "from": 377,
    "label": "declares",
    "to": 364
  }, {
    "from": 377,
    "label": "declares",
    "to": 373
  }, {
    "from": 2,
    "label": "contains",
    "to": 418
  }, {
    "from": 2,
    "label": "contains",
    "to": 419
  }, {
    "from": 418,
    "label": "initializes",
    "to": 420
  }, {
    "from": 420,
    "label": "assigns",
    "to": 421
  }, {
    "from": 418,
    "label": "initializes",
    "to": 422
  }, {
    "from": 422,
    "label": "assigns",
    "to": 423
  }, {
    "from": 418,
    "label": "initializes",
    "to": 424
  }, {
    "from": 424,
    "label": "assigns",
    "to": 425
  }, {
    "from": 425,
    "label": "assigns",
    "to": 426
  }, {
    "from": 426,
    "label": "assigns",
    "to": 427
  }, {
    "from": 425,
    "label": "assigns",
    "to": 428
  }, {
    "from": 428,
    "label": "assigns",
    "to": 429
  }, {
    "from": 418,
    "label": "initializes",
    "to": 430
  }, {
    "from": 430,
    "label": "assigns",
    "to": 431
  }, {
    "from": 418,
    "label": "initializes",
    "to": 432
  }, {
    "from": 432,
    "label": "assigns",
    "to": 433
  }, {
    "from": 418,
    "label": "initializes",
    "to": 434
  }, {
    "from": 418,
    "label": "initializes",
    "to": 435
  }, {
    "from": 435,
    "label": "assigns",
    "to": 436
  }, {
    "from": 418,
    "label": "initializes",
    "to": 437
  }, {
    "from": 437,
    "label": "assigns",
    "to": 438
  }, {
    "from": 418,
    "label": "initializes",
    "to": 439
  }, {
    "from": 439,
    "label": "assigns",
    "to": 440
  }, {
    "from": 418,
    "label": "initializes",
    "to": 441
  }, {
    "from": 441,
    "label": "assigns",
    "to": 442
  }, {
    "from": 418,
    "label": "initializes",
    "to": 443
  }, {
    "from": 443,
    "label": "assigns",
    "to": 444
  }, {
    "from": 418,
    "label": "initializes",
    "to": 445
  }, {
    "from": 445,
    "label": "assigns",
    "to": 446
  }, {
    "from": 418,
    "label": "initializes",
    "to": 447
  }, {
    "from": 447,
    "label": "assigns",
    "to": 448
  }, {
    "from": 418,
    "label": "initializes",
    "to": 449
  }, {
    "from": 449,
    "label": "assigns",
    "to": 450
  }, {
    "from": 418,
    "label": "initializes",
    "to": 451
  }, {
    "from": 451,
    "label": "assigns",
    "to": 452
  }, {
    "from": 418,
    "label": "initializes",
    "to": 453
  }, {
    "from": 453,
    "label": "assigns",
    "to": 454
  }, {
    "from": 418,
    "label": "initializes",
    "to": 455
  }, {
    "from": 455,
    "label": "assigns",
    "to": 456
  }, {
    "from": 418,
    "label": "initializes",
    "to": 457
  }, {
    "from": 457,
    "label": "assigns",
    "to": 458
  }, {
    "from": 419,
    "label": "initializes",
    "to": 459
  }, {
    "from": 459,
    "label": "requires",
    "to": 1
  }, {
    "from": 419,
    "label": "initializes",
    "to": 460
  }, {
    "from": 460,
    "label": "requires",
    "to": 381
  }, {
    "from": 419,
    "label": "initializes",
    "to": 461
  }, {
    "from": 461,
    "label": "requires",
    "to": 386
  }, {
    "from": 419,
    "label": "initializes",
    "to": 462
  }, {
    "from": 462,
    "label": "requires",
    "to": 384
  }, {
    "from": 419,
    "label": "initializes",
    "to": 463
  }, {
    "from": 463,
    "label": "requires",
    "to": 464
  }, {
    "from": 2,
    "label": "provides",
    "to": 465
  }, {
    "from": 417,
    "label": "represents",
    "to": 466
  }, {
    "from": 465,
    "label": "provides",
    "to": 466
  }, {
    "from": 469,
    "label": "initializes",
    "to": 463
  }, {
    "from": 463,
    "label": "requires",
    "to": 470
  }, {
    "from": 469,
    "label": "initializes",
    "to": 463
  }, {
    "from": 463,
    "label": "requires",
    "to": 471
  }, {
    "from": 472,
    "label": "initializes",
    "to": 463
  }, {
    "from": 463,
    "label": "requires",
    "to": 3
  }, {
    "from": 457,
    "label": "contains",
    "to": 4
  }, {
    "from": 457,
    "label": "contains",
    "to": 5
  }, {
    "from": 457,
    "label": "contains",
    "to": 6
  }, {
    "from": 417,
    "label": "contains",
    "to": 254
  }, {
    "from": 457,
    "label": "contains",
    "to": 254
  }, {
    "from": 467,
    "label": "contains",
    "to": 254
  }, {
    "from": 468,
    "label": "contains",
    "to": 254
  }, {
    "from": 417,
    "label": "contains",
    "to": 256
  }, {
    "from": 457,
    "label": "contains",
    "to": 256
  }, {
    "from": 467,
    "label": "contains",
    "to": 256
  }, {
    "from": 468,
    "label": "contains",
    "to": 256
  }, {
    "from": 417,
    "label": "contains",
    "to": 258
  }, {
    "from": 457,
    "label": "contains",
    "to": 258
  }, {
    "from": 467,
    "label": "contains",
    "to": 258
  }, {
    "from": 468,
    "label": "contains",
    "to": 258
  }, {
    "from": 417,
    "label": "contains",
    "to": 260
  }, {
    "from": 457,
    "label": "contains",
    "to": 260
  }, {
    "from": 467,
    "label": "contains",
    "to": 260
  }, {
    "from": 468,
    "label": "contains",
    "to": 260
  }, {
    "from": 417,
    "label": "contains",
    "to": 261
  }, {
    "from": 457,
    "label": "contains",
    "to": 261
  }, {
    "from": 467,
    "label": "contains",
    "to": 261
  }, {
    "from": 468,
    "label": "contains",
    "to": 261
  }, {
    "from": 417,
    "label": "contains",
    "to": 262
  }, {
    "from": 457,
    "label": "contains",
    "to": 262
  }, {
    "from": 467,
    "label": "contains",
    "to": 262
  }, {
    "from": 468,
    "label": "contains",
    "to": 262
  }, {
    "from": 457,
    "label": "contains",
    "to": 378
  }, {
    "from": 457,
    "label": "contains",
    "to": 379
  }, {
    "from": 457,
    "label": "contains",
    "to": 380
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 77,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 119,
    "label": "hasArgument",
    "to": 362
  }, {
    "from": 119,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 119,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 120,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 120,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 363
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 125,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 210,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 231,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 231,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 244,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 264
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 271
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 268,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 285,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 285,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 286,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 304,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 304,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 311,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 311,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 312,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 312,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 354,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 354,
    "label": "hasArgument",
    "to": 429
  }, {
    "from": 358,
    "label": "hasArgument",
    "to": 427
  }, {
    "from": 358,
    "label": "hasArgument",
    "to": 429
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "charset",
    "type": "module"
  }, {
    "id": 2,
    "text": "message",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "function M.pass_thrue_only()\r\n  return not iconv\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function M.supported(to, from)\r\n  return M[to][from] ~= pass_thrue\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function M.convert(to, from, str)\r\n  return M[to][from](str)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function ltrim(s)\r\n  return (string.gsub (s, \"^%s+\",\"\"))\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function rtrim (s)\r\n  return (string.gsub (s, \"%s+$\",\"\"))\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function trim (s)\r\n  return rtrim(ltrim (s))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function clone (t)\r\n  local u = {}\r\n  for i, v in pairs (t) do\r\n    u[i] = v\r\n  end\r\n  return u\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local u = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for i, v in pairs (t) do\r\n    u[i] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "u[i] = v",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function slice(t, s, e)\r\n  local u = {}\r\n  for i = (s or 1), (e or #t) do\r\n    u[i - s  + 1] = t[i]\r\n  end\r\n  return u\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "for i = (s or 1), (e or #t) do\r\n    u[i - s  + 1] = t[i]\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 21,
    "text": "u[i - s  + 1] = t[i]",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function split(str, sep, plain)\r\n  local b, res = 1, {}\r\n  while b <= #str do\r\n    local e, e2 = string.find(str, sep, b, plain)\r\n    if e then\r\n      table.insert(res, (string.sub(str, b, e-1)))\r\n      b = e2 + 1\r\n    else\r\n      table.insert(res, (string.sub(str, b)))\r\n      break\r\n    end\r\n  end\r\n  return res\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local b, res = 1, {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "while b <= #str do\r\n    local e, e2 = string.find(str, sep, b, plain)\r\n    if e then\r\n      table.insert(res, (string.sub(str, b, e-1)))\r\n      b = e2 + 1\r\n    else\r\n      table.insert(res, (string.sub(str, b)))\r\n      break\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 26,
    "text": "local e, e2 = string.find(str, sep, b, plain)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if e then\r\n      table.insert(res, (string.sub(str, b, e-1)))\r\n      b = e2 + 1\r\n    else\r\n      table.insert(res, (string.sub(str, b)))\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "table.insert(res, (string.sub(str, b, e-1)))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "b = e2 + 1",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "table.insert(res, (string.sub(str, b)))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function (target_charset, base_charset, str)\r\n  if str == nil then return nil end\r\n  if not str:find([[=%?([%w-]+)%?(.)%?(.-)%?=]]) then\r\n    if base_charset then\r\n      return CP(target_charset, base_charset, str)\r\n    end\r\n    return str\r\n  end\r\n\r\n  str = str:gsub([[(%?=)%s*(=%?)]],'%1%2') -- Romove ws. Is it necessary?\r\n\r\n  return (str:gsub([[=%?([%w-]+)%?(.)%?(.-)%?=]],function(codepage,encoding,data)\r\n    encoding = encoding:upper()\r\n    local algo\r\n    if encoding == 'B'then\r\n      algo = assert(DECODERS['base64'])\r\n    elseif encoding == 'Q' then\r\n      algo = assert(DECODERS['quoted-printable'])\r\n    end\r\n    if algo then \r\n      data = algo()(data)\r\n      return CP(target_charset, codepage, data)\r\n    end\r\n  end))\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "if str == nil then return nil end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "if not str:find([[=%?([%w-]+)%?(.)%?(.-)%?=]]) then\r\n    if base_charset then\r\n      return CP(target_charset, base_charset, str)\r\n    end\r\n    return str\r\n  end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if base_charset then\r\n      return CP(target_charset, base_charset, str)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "str = str:gsub([[(%?=)%s*(=%?)]],'%1%2')",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "encoding = encoding:upper()",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "local algo",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if encoding == 'B'then\r\n      algo = assert(DECODERS['base64'])\r\n    elseif encoding == 'Q' then\r\n      algo = assert(DECODERS['quoted-printable'])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "algo = assert(DECODERS['base64'])",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "algo = assert(DECODERS['quoted-printable'])",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if algo then \r\n      data = algo()(data)\r\n      return CP(target_charset, codepage, data)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "data = algo()(data)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function as_date(str) return str end",
    "type": "function"
  }, {
    "id": 46,
    "text": "local function prequire(...)\r\n  local ok, mod = pcall(require, ...)\r\n  return ok and mod, mod\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local ok, mod = pcall(require, ...)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function try_load_get_address_list()\r\n  -- @todo unquot quoted name\r\n  local mail_pat = re.compile[[\r\n    groups            <- (group (%s* ([,;] %s*)+ group)*) -> {}\r\n    group             <- (\r\n                            {:name: <phrase> :} %s* <addr>                  /\r\n                            {:name: <uq_phrase> :} %s* \"<\" <addr_spec> \">\"  /\r\n                            <addr> %s* {:name: <phrase> :}                  /\r\n                            \"<\" <addr_spec> \">\" %s* {:name: <uq_phrase> :}  /\r\n                            <addr>                                          /\r\n                            {:name: <phrase> :}                              \r\n                          ) -> {}\r\n\r\n    uq_phrase          <- <uq_atom> (%s+ <uq_atom>)*\r\n    uq_atom            <- [^<>,; ]+\r\n\r\n    phrase            <- <word> ([%s.]+ <word>)* /  <quoted_string>\r\n    word              <- <atom> ! <domain_addr>\r\n\r\n    atom              <- [^] %c()<>@,;:\\\".[]+\r\n    quoted_string     <- '\"' ([^\"\\%nl] / \"\\\" .)*  '\"'\r\n\r\n    addr              <- <addr_spec> / \"<\" <addr_spec> \">\"\r\n    addr_spec         <- {:addr: <addr_chars> <domain_addr> :}\r\n    domain_addr       <- \"@\" <addr_chars>\r\n    addr_chars        <- [_%a%d][-._%a%d]*\r\n  ]]\r\n\r\n  return function(str)\r\n    if (not str) or (str == '') then\r\n      return nil\r\n    end\r\n    return mail_pat:match(str)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local mail_pat = re.compile[[\r\n    groups            <- (group (%s* ([,;] %s*)+ group)*) -> {}\r\n    group             <- (\r\n                            {:name: <phrase> :} %s* <addr>                  /\r\n                            {:name: <uq_phrase> :} %s* \"<\" <addr_spec> \">\"  /\r\n                            <addr> %s* {:name: <phrase> :}                  /\r\n                            \"<\" <addr_spec> \">\" %s* {:name: <uq_phrase> :}  /\r\n                            <addr>                                          /\r\n                            {:name: <phrase> :}                              \r\n                          ) -> {}\r\n\r\n    uq_phrase          <- <uq_atom> (%s+ <uq_atom>)*\r\n    uq_atom            <- [^<>,; ]+\r\n\r\n    phrase            <- <word> ([%s.]+ <word>)* /  <quoted_string>\r\n    word              <- <atom> ! <domain_addr>\r\n\r\n    atom              <- [^] %c()<>@,;:\\\".[]+\r\n    quoted_string     <- '\"' ([^\"\\%nl] / \"\\\" .)*  '\"'\r\n\r\n    addr              <- <addr_spec> / \"<\" <addr_spec> \">\"\r\n    addr_spec         <- {:addr: <addr_chars> <domain_addr> :}\r\n    domain_addr       <- \"@\" <addr_chars>\r\n    addr_chars        <- [_%a%d][-._%a%d]*\r\n  ]]",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if (not str) or (str == '') then\r\n      return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function cmp_v(v1,v2)\r\n  local flag = true\r\n  if type(v1) == 'table' then\r\n    flag = (type(v2) == 'table') and cmp_t(v1, v2)\r\n  else\r\n    flag = (v1 == v2)\r\n  end\r\n  return flag\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local flag = true",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if type(v1) == 'table' then\r\n    flag = (type(v2) == 'table') and cmp_t(v1, v2)\r\n  else\r\n    flag = (v1 == v2)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "flag = (type(v2) == 'table') and cmp_t(v1, v2)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "flag = (v1 == v2)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function cmp_t(t1,t2)\r\n  for k in pairs(t2)do\r\n    if t1[k] == nil then\r\n      return false\r\n    end\r\n  end\r\n  for k,v in pairs(t1)do\r\n    if not cmp_v(t2[k],v) then \r\n      return false \r\n    end\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "for k in pairs(t2)do\r\n    if t1[k] == nil then\r\n      return false\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "if t1[k] == nil then\r\n      return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "for k,v in pairs(t1)do\r\n    if not cmp_v(t2[k],v) then \r\n      return false \r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 63,
    "text": "if not cmp_v(t2[k],v) then \r\n      return false \r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function(str, result) \r\n  local t \r\n  if type(result) == 'string' then\r\n    local res = assert(tests_index[str])\r\n    t = {result, result = res.result}\r\n    assert(result ~= str)\r\n    tests_index[result] = t;\r\n  else\r\n    t = {str,result=result}\r\n    tests_index[str] = t;\r\n  end\r\n  return table.insert(tests,t)\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local t",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if type(result) == 'string' then\r\n    local res = assert(tests_index[str])\r\n    t = {result, result = res.result}\r\n    assert(result ~= str)\r\n    tests_index[result] = t;\r\n  else\r\n    t = {str,result=result}\r\n    tests_index[str] = t;\r\n  end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "local res = assert(tests_index[str])",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "t = {result, result = res.result}",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "assert(result ~= str)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "tests_index[result] = t",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "t = {str,result=result}",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "tests_index[str] = t",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function test_pop3_messege_get_address_list()\r\n    for _, test_case in ipairs(tests) do\r\n      lunit.assert_true(cmp_t(get_address_list(test_case[1]),test_case.result),test_case[1])\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 76,
    "text": "for _, test_case in ipairs(tests) do\r\n      lunit.assert_true(cmp_t(get_address_list(test_case[1]),test_case.result),test_case[1])\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 77,
    "text": "lunit.assert_true(cmp_t(get_address_list(test_case[1]),test_case.result),test_case[1])",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function mime_content_multipart:parts()\r\n  return #self.content_\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function mime_content:as_string(sep)\r\n  return table.concat(self.message_, sep or '', self.bound_[1], self.bound_[2])\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function mime_content:as_table()\r\n  return slice(self.message_, self.bound_[1], self.bound_[2])\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function mime_header:value()\r\n  return self.value_\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function mime_header:key()\r\n  return self.key_\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function mime_header:param(key)\r\n  return self.param_[key]\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function mime_headers:header(key)\r\n  assert(key)\r\n  key = string.lower(key)\r\n  for i, h in ipairs (self.headers_) do\r\n    if h:key() == key then\r\n      return h\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "assert(key)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "key = string.lower(key)",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "for i, h in ipairs (self.headers_) do\r\n    if h:key() == key then\r\n      return h\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 95,
    "text": "if h:key() == key then\r\n      return h\r\n    end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function mime_headers:value(key,def)\r\n  local h = self:header(key)\r\n  return h and h:value() or def\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local h = self:header(key)",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function mime_headers:param(key, param, def)\r\n  local h = self:header(key)\r\n  if h then return h:param(param) or def end\r\n  return def\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "if h then return h:param(param) or def end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function mime_headers:headers(key)\r\n  assert(key)\r\n  key = string.lower(key)\r\n  local result = {}\r\n  for i, h in ipairs (self.headers_) do\r\n    if h:key() == key then\r\n      table.insert(result, h)\r\n    end\r\n  end\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "for i, h in ipairs (self.headers_) do\r\n    if h:key() == key then\r\n      table.insert(result, h)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 106,
    "text": "if h:key() == key then\r\n      table.insert(result, h)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "table.insert(result, h)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function mime_headers:as_table(key)\r\n  key = key and string.lower(key)\r\n  local result = {}\r\n  for i, h in ipairs (self.headers_) do\r\n    if (not key) or (h:key() == key) then\r\n      if result[h:key()] == nil then\r\n        result[h:key()] = h.raw_\r\n      end\r\n    end\r\n  end\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "key = key and string.lower(key)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "for i, h in ipairs (self.headers_) do\r\n    if (not key) or (h:key() == key) then\r\n      if result[h:key()] == nil then\r\n        result[h:key()] = h.raw_\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 112,
    "text": "if (not key) or (h:key() == key) then\r\n      if result[h:key()] == nil then\r\n        result[h:key()] = h.raw_\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "if result[h:key()] == nil then\r\n        result[h:key()] = h.raw_\r\n      end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "result[h:key()] = h.raw_",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function mime:type()\r\n  return self.type_\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function mime:set_cp(cp)\r\n  self:for_each(function(t) assert(t.cp_); t.cp_ = cp end)\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "self:for_each(function(t) assert(t.cp_); t.cp_ = cp end)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert(t.cp_)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "t.cp_ = cp",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function mime:set_eol(nl)\r\n  self:for_each(function(t) assert(t.eol_); t.eol_ = nl end)\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "self:for_each(function(t) assert(t.eol_); t.eol_ = nl end)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "assert(t.eol_)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "t.eol_ = nl",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function mime:cp()\r\n  return self.cp_\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function mime:eol()\r\n  return self.eol_\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function mime:hvalue(key, def)\r\n  return self.headers:value(key, def)\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function mime:hparam(key, param, def)\r\n  return self.headers:param(key, param, def)\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function mime:header(key)\r\n  return self.headers:header(key)\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function mime:subject()\r\n  return decode_str(self:cp(), self:charset(), self:hvalue(\"subject\",''))\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function mime:from()\r\n  return decode_str(self:cp(), self:charset(), self:hvalue(\"from\"))\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function mime:to()\r\n  return decode_str(self:cp(), self:charset(), self:hvalue(\"to\"))\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function mime:reply_to()\r\n  return decode_str(self:cp(), self:charset(), self:hvalue(\"reply-to\"))\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function mime:from_list()\r\n  return get_address_list(self:from())\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function mime:to_list()\r\n  return get_address_list(self:to())\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function mime:reply_list()\r\n  return get_address_list(self:reply_to())\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function mime:from_address()\r\n  local t = self:from_list()\r\n  if t then\r\n    for _,k in ipairs(t) do\r\n      if k and k.addr then\r\n        return k.addr, k.name\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "local t = self:from_list()",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if t then\r\n    for _,k in ipairs(t) do\r\n      if k and k.addr then\r\n        return k.addr, k.name\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "for _,k in ipairs(t) do\r\n      if k and k.addr then\r\n        return k.addr, k.name\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 156,
    "text": "if k and k.addr then\r\n        return k.addr, k.name\r\n      end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function mime:to_address()\r\n  local t = self:to_list()\r\n  if t then\r\n    for _,k in ipairs(t) do\r\n      if k and k.addr then\r\n        return k.addr, k.name\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "local t = self:to_list()",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function mime:reply_address()\r\n  local t = self:reply_list()\r\n  if t then\r\n    for _,k in ipairs(t) do\r\n      if k and k.addr then\r\n        return k.addr, k.name\r\n      end\r\n    end\r\n  end\r\n\r\n  return self:from_address()\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local t = self:reply_list()",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function mime:as_string(nl)\r\n  return table.concat(self.message_, nl or CRLF, self.bound_[1], self.bound_[2])\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function mime:as_table()\r\n  return slice(self.message_, self.bound_[1], self.bound_[2])\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "function mime:id()\r\n  return self:hvalue(\"message-id\", '')\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function mime:date()\r\n  local h = self:header(\"date\")\r\n  return h and as_date(h:value()) or ''\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "local h = self:header(\"date\")",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function mime:encoding()\r\n  return self:hvalue(\"content-transfer-encoding\")\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "function mime:charset()\r\n  return self:hparam(\"content-type\", \"charset\", self:cp())\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function mime:content_name()\r\n  local h = self:hparam(\"content-type\", \"name\")\r\n  if h then return decode_str(self:cp(), self:charset(), h) end\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "local h = self:hparam(\"content-type\", \"name\")",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "if h then return decode_str(self:cp(), self:charset(), h) end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function mime:file_name()\r\n  local h = self:hparam(\"content-disposition\", \"filename\")\r\n  if h then return decode_str(self:cp(), self:charset(), h) end\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "local h = self:hparam(\"content-disposition\", \"filename\")",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "function mime:disposition()\r\n  return self:hvalue(\"content-disposition\")\r\nend",
    "type": "function"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function mime:is_application()\r\n  return self:type():sub(1,11) == 'application'\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "function mime:is_text()\r\n  return self:type():sub(1,4) == 'text'\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "function mime:is_truncated()\r\n  return self.content.is_truncated\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "function mime:is_multi()\r\n  return self.content.is_multi\r\nend",
    "type": "function"
  }, {
    "id": 193,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 194,
    "text": "function mime:is_data()\r\n  return self.content.is_data\r\nend",
    "type": "function"
  }, {
    "id": 195,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 196,
    "text": "function mime:is_binary()\r\n  return (not self:is_text()) and (not self:is_multi())\r\nend",
    "type": "function"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "function mime:is_attachment()\r\n  local h = self:disposition()\r\n  return h and h:sub(1,10):lower() == 'attachment'\r\nend",
    "type": "function"
  }, {
    "id": 199,
    "text": "local h = self:disposition()",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function mime:for_each(fn, ...)\r\n  fn(self, ...)\r\n  if self:is_multi() then \r\n    for k, part in ipairs(self.content.content_) do\r\n      fn(part, ...)\r\n      if part:is_multi() then part:for_each(fn, ...) end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "fn(self, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "if self:is_multi() then \r\n    for k, part in ipairs(self.content.content_) do\r\n      fn(part, ...)\r\n      if part:is_multi() then part:for_each(fn, ...) end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "for k, part in ipairs(self.content.content_) do\r\n      fn(part, ...)\r\n      if part:is_multi() then part:for_each(fn, ...) end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 205,
    "text": "fn(part, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "if part:is_multi() then part:for_each(fn, ...) end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "part:for_each(fn, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function mime:decode_content()\r\n  assert(self.content)\r\n  if self:is_data() then\r\n    local data\r\n    local encoding = self:encoding()\r\n    if encoding then \r\n      local algo = DECODERS[encoding:lower()]\r\n      if algo then \r\n        local content = self.content:as_string(CRLF)\r\n        data = algo(self:is_text() and self:eol())( content )\r\n      end\r\n    end\r\n    if self:is_text() then\r\n      local charset = self:charset()\r\n      data = data or self.content:as_string(self:eol())\r\n      if charset then return CP(self:cp(), charset, data) end\r\n      return data\r\n    end\r\n    return data or self.content:as_string()\r\n  end\r\n  return self.content\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "assert(self.content)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "if self:is_data() then\r\n    local data\r\n    local encoding = self:encoding()\r\n    if encoding then \r\n      local algo = DECODERS[encoding:lower()]\r\n      if algo then \r\n        local content = self.content:as_string(CRLF)\r\n        data = algo(self:is_text() and self:eol())( content )\r\n      end\r\n    end\r\n    if self:is_text() then\r\n      local charset = self:charset()\r\n      data = data or self.content:as_string(self:eol())\r\n      if charset then return CP(self:cp(), charset, data) end\r\n      return data\r\n    end\r\n    return data or self.content:as_string()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "local data",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "local encoding = self:encoding()",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "if encoding then \r\n      local algo = DECODERS[encoding:lower()]\r\n      if algo then \r\n        local content = self.content:as_string(CRLF)\r\n        data = algo(self:is_text() and self:eol())( content )\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "local algo = DECODERS[encoding:lower()]",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "if algo then \r\n        local content = self.content:as_string(CRLF)\r\n        data = algo(self:is_text() and self:eol())( content )\r\n      end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "local content = self.content:as_string(CRLF)",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "data = algo(self:is_text() and self:eol())( content )",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "if self:is_text() then\r\n      local charset = self:charset()\r\n      data = data or self.content:as_string(self:eol())\r\n      if charset then return CP(self:cp(), charset, data) end\r\n      return data\r\n    end",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "local charset = self:charset()",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "data = data or self.content:as_string(self:eol())",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "if charset then return CP(self:cp(), charset, data) end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "local function grab_text(self)\r\n  return{\r\n    text      = self:decode_content(),\r\n    type      = self:type()\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "local function grab_binary(self)\r\n  return{\r\n    data      = self:decode_content(),\r\n    name      = self:content_name(),\r\n    file_name = self:file_name(),\r\n    type      = self:type()\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "local function content_collector(self, dst)\r\n  dst = dst or {}\r\n  if self:is_binary() then\r\n    table.insert( dst, grab_binary(self) )\r\n  elseif self:is_text() then\r\n    table.insert( dst, grab_text(self) )\r\n  else\r\n    assert(self:is_multi())\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "dst = dst or {}",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "if self:is_binary() then\r\n    table.insert( dst, grab_binary(self) )\r\n  elseif self:is_text() then\r\n    table.insert( dst, grab_text(self) )\r\n  else\r\n    assert(self:is_multi())\r\n  end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "table.insert( dst, grab_binary(self) )",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "table.insert( dst, grab_text(self) )",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "assert(self:is_multi())",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 235,
    "text": "local function if_collector(self, pred, grab, dst)\r\n  dst = dst or {}\r\n  if pred(self) then\r\n    table.insert( dst, grab(self) )\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 236,
    "text": "if pred(self) then\r\n    table.insert( dst, grab(self) )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 237,
    "text": "table.insert( dst, grab(self) )",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function mime:collect(collector,t)\r\n  t = t or {}\r\n  self:for_each(collector, t)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 240,
    "text": "t = t or {}",
    "type": "statement:assign"
  }, {
    "id": 241,
    "text": "self:for_each(collector, t)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function mime:collect_if(pred, grab, t)\r\n  t = t or {}\r\n  self:for_each(if_collector, pred, grab, t)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "self:for_each(if_collector, pred, grab, t)",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 246,
    "text": "function mime:full_content()\r\n  return self:collect(content_collector)\r\nend",
    "type": "function"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function mime:attachments()\r\n  return self:collect_if(self.is_attachment, grab_binary)\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function mime:objects()\r\n  return self:collect_if(self.is_binary, grab_binary)\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 252,
    "text": "function mime:text()\r\n  return self:collect_if(self.is_text, grab_text)\r\nend",
    "type": "function"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "function M.set_cp(cp) DEFAULT_LOCAL_CP = cp end",
    "type": "function"
  }, {
    "id": 255,
    "text": "DEFAULT_LOCAL_CP = cp",
    "type": "statement:assign"
  }, {
    "id": 256,
    "text": "function M.set_cp_converter(conv) CP = (conv or DEFAULT_CP_CONV) end",
    "type": "function"
  }, {
    "id": 257,
    "text": "CP = (conv or DEFAULT_CP_CONV)",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "function M.set_eol(nl) DEFAULT_NL = nl end",
    "type": "function"
  }, {
    "id": 259,
    "text": "DEFAULT_NL = nl",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "function M.cp() return DEFAULT_LOCAL_CP end",
    "type": "function"
  }, {
    "id": 261,
    "text": "function M.cp_converter() return CP end",
    "type": "function"
  }, {
    "id": 262,
    "text": "function M.eol() return DEFAULT_NL end",
    "type": "function"
  }, {
    "id": 263,
    "text": "function(msg) return socket_mime.unb64('', msg) end",
    "type": "function"
  }, {
    "id": 264,
    "text": "function(msg) return socket_mime.eol(0, msg, nl) end",
    "type": "function"
  }, {
    "id": 265,
    "text": "function(nl) \r\n    local t = {\r\n      -- socket_mime.normalize(), -- decode_content alwas set CRLF for this\r\n      function(msg) return socket_mime.unb64('', msg) end,\r\n    }\r\n    if nl and nl ~= CRLF then\r\n      table.insert(t, function(msg) return socket_mime.eol(0, msg, nl) end)\r\n    end\r\n    return socket_ltn12.filter.chain((unpack or table.unpack)(t))\r\n  end",
    "type": "function"
  }, {
    "id": 266,
    "text": "local t = {\r\n      -- socket_mime.normalize(), -- decode_content alwas set CRLF for this\r\n      function(msg) return socket_mime.unb64('', msg) end,\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "if nl and nl ~= CRLF then\r\n      table.insert(t, function(msg) return socket_mime.eol(0, msg, nl) end)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "table.insert(t, function(msg) return socket_mime.eol(0, msg, nl) end)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 270,
    "text": "function(msg) return socket_mime.unqp('', msg) end",
    "type": "function"
  }, {
    "id": 271,
    "text": "function(msg) return socket_mime.eol(0, msg, nl) end",
    "type": "function"
  }, {
    "id": 272,
    "text": "function(nl) \r\n    local t = {\r\n      -- socket_mime.normalize(), -- decode_content alwas set CRLF for this\r\n      function(msg) return socket_mime.unqp('', msg) end,\r\n    }\r\n    if nl and nl ~= CRLF then\r\n      table.insert(t, function(msg) return socket_mime.eol(0, msg, nl) end)\r\n    end\r\n    return socket_ltn12.filter.chain((unpack or table.unpack)(t))\r\n  end",
    "type": "function"
  }, {
    "id": 273,
    "text": "local t = {\r\n      -- socket_mime.normalize(), -- decode_content alwas set CRLF for this\r\n      function(msg) return socket_mime.unqp('', msg) end,\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 274,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 275,
    "text": "function(codepage,encoding,data)\r\n    encoding = encoding:upper()\r\n    local algo\r\n    if encoding == 'B'then\r\n      algo = assert(DECODERS['base64'])\r\n    elseif encoding == 'Q' then\r\n      algo = assert(DECODERS['quoted-printable'])\r\n    end\r\n    if algo then \r\n      data = algo()(data)\r\n      return CP(target_charset, codepage, data)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 276,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 277,
    "text": "function(str)\r\n    if (not str) or (str == '') then\r\n      return nil\r\n    end\r\n    return mail_pat:match(str)\r\n  end",
    "type": "function"
  }, {
    "id": 278,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 279,
    "text": "function(self, k)\r\n    if type(k) == 'number' then\r\n      return self.content_[k]\r\n    end\r\n    return mime_content_multipart[k]\r\n  end",
    "type": "function"
  }, {
    "id": 280,
    "text": "if type(k) == 'number' then\r\n      return self.content_[k]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 282,
    "text": "function(self)\r\n    return #self.content_\r\n  end",
    "type": "function"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function (self, headers, msg, index_begin, index_end)\r\n  assert(index_begin <= index_end)\r\n  assert(index_end <= #msg)\r\n\r\n  local boundary = headers:param('content-type', 'boundary')\r\n  if not boundary then return nil, MIME_ERR_NO_BOUNDARY end\r\n  boundary       = '--' .. boundary\r\n  local boundary_close = boundary .. '--'\r\n\r\n  if #boundary > 72 then return nil, MIME_ERR_BOUNDARY_TOO_LONG end\r\n\r\n  local result = setmetatable({},mime_content_multipart_mt)\r\n  result.is_multi = true\r\n  result.content_ = {} -- array\r\n  \r\n  local i = index_begin\r\n  while i <= index_end do\r\n    while(i <= index_end)do\r\n      if msg[i] == boundary or msg[i] == boundary_close then\r\n        break\r\n      end\r\n      i = i + 1\r\n    end\r\n    if i > index_end then break end\r\n    local line = msg[i]\r\n\r\n    if line == (boundary_close) then \r\n      i = index_end + 1\r\n      break\r\n    end\r\n    assert(line == boundary)\r\n\r\n    i = i + 1\r\n    local cstart = i\r\n    while(i <= index_end)do\r\n      if msg[i] == boundary or msg[i] == boundary_close then\r\n        break\r\n      end\r\n      i = i + 1\r\n    end\r\n    if i > index_end then result.is_truncated = true end\r\n    -- if i > index_end then return nil, MIME_ERR_BOUNDARY_NOCLOSE  end\r\n    local cend = i - 1\r\n    local content, err, i1, i2 = mime(msg, cstart, cend)\r\n    if not content then \r\n      return nil, err, i1, i2 \r\n    end\r\n    table.insert(result.content_, content)\r\n  end\r\n  assert(i == (index_end + 1))\r\n  return result, i\r\nend",
    "type": "function"
  }, {
    "id": 285,
    "text": "assert(index_begin <= index_end)",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "assert(index_end <= #msg)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "local boundary = headers:param('content-type', 'boundary')",
    "type": "statement:localassign"
  }, {
    "id": 288,
    "text": "if not boundary then return nil, MIME_ERR_NO_BOUNDARY end",
    "type": "statement:if"
  }, {
    "id": 289,
    "text": "boundary       = '--' .. boundary",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "local boundary_close = boundary .. '--'",
    "type": "statement:localassign"
  }, {
    "id": 291,
    "text": "if #boundary > 72 then return nil, MIME_ERR_BOUNDARY_TOO_LONG end",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "local result = setmetatable({},mime_content_multipart_mt)",
    "type": "statement:localassign"
  }, {
    "id": 293,
    "text": "result.is_multi = true",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "result.content_ = {}",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "local i = index_begin",
    "type": "statement:localassign"
  }, {
    "id": 296,
    "text": "while i <= index_end do\r\n    while(i <= index_end)do\r\n      if msg[i] == boundary or msg[i] == boundary_close then\r\n        break\r\n      end\r\n      i = i + 1\r\n    end\r\n    if i > index_end then break end\r\n    local line = msg[i]\r\n\r\n    if line == (boundary_close) then \r\n      i = index_end + 1\r\n      break\r\n    end\r\n    assert(line == boundary)\r\n\r\n    i = i + 1\r\n    local cstart = i\r\n    while(i <= index_end)do\r\n      if msg[i] == boundary or msg[i] == boundary_close then\r\n        break\r\n      end\r\n      i = i + 1\r\n    end\r\n    if i > index_end then result.is_truncated = true end\r\n    -- if i > index_end then return nil, MIME_ERR_BOUNDARY_NOCLOSE  end\r\n    local cend = i - 1\r\n    local content, err, i1, i2 = mime(msg, cstart, cend)\r\n    if not content then \r\n      return nil, err, i1, i2 \r\n    end\r\n    table.insert(result.content_, content)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 297,
    "text": "while(i <= index_end)do\r\n      if msg[i] == boundary or msg[i] == boundary_close then\r\n        break\r\n      end\r\n      i = i + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 298,
    "text": "if msg[i] == boundary or msg[i] == boundary_close then\r\n        break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 299,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "if i > index_end then break end",
    "type": "statement:if"
  }, {
    "id": 301,
    "text": "local line = msg[i]",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "if line == (boundary_close) then \r\n      i = index_end + 1\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 303,
    "text": "i = index_end + 1",
    "type": "statement:assign"
  }, {
    "id": 304,
    "text": "assert(line == boundary)",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "local cstart = i",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "if i > index_end then result.is_truncated = true end",
    "type": "statement:if"
  }, {
    "id": 307,
    "text": "result.is_truncated = true",
    "type": "statement:assign"
  }, {
    "id": 308,
    "text": "local cend = i - 1",
    "type": "statement:localassign"
  }, {
    "id": 309,
    "text": "local content, err, i1, i2 = mime(msg, cstart, cend)",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "if not content then \r\n      return nil, err, i1, i2 \r\n    end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "table.insert(result.content_, content)",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "assert(i == (index_end + 1))",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function(self, mtype, headers, msg, index_begin, index_end)\r\n  if  string.sub(mtype,1,9) == 'multipart' then\r\n    return mime_content_multipart(headers, msg, index_begin, index_end)\r\n  end\r\n\r\n  local result = {} --clone(self)\r\n  result.is_data  = true;\r\n  result.message_ = msg;-- or create closure?\r\n  result.bound_   = {index_begin, index_end};\r\n\r\n  return setmetatable(result,\r\n    { __tostring = self.as_string, __index = self }\r\n  )\r\nend",
    "type": "function"
  }, {
    "id": 315,
    "text": "if  string.sub(mtype,1,9) == 'multipart' then\r\n    return mime_content_multipart(headers, msg, index_begin, index_end)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 316,
    "text": "result.is_data  = true",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "result.message_ = msg",
    "type": "statement:assign"
  }, {
    "id": 318,
    "text": "result.bound_   = {index_begin, index_end}",
    "type": "statement:assign"
  }, {
    "id": 319,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 320,
    "text": "function (self, str)\r\n  local result = setmetatable({},{__index = self}) --clone(self)\r\n  result.raw_   = str;\r\n  result.value_ = \"\";\r\n  result.param_ = {}\r\n\r\n\r\n  local key_index = string.find(str, \":\", 1, true)\r\n  local key = key_index and (string.sub(str, 1, key_index-1)) or str\r\n  key = string.lower(trim(key))\r\n  result.key_ = key\r\n  if not key_index then return result end\r\n  str = rtrim(string.sub(str, key_index + 1))\r\n  if string.sub(str, -1) ~= ';' then str = str .. ';' end\r\n\r\n  local par_index = string.find(str, ';%s*[^%s=]+%s*=%s*.-;')\r\n  local value = par_index and (string.sub(str, 1, par_index - 1)) or string.sub(str,1,-2)\r\n  result.value_ = trim(value)\r\n  -- result.value_ = string.lower(trim(value))\r\n  if not par_index then return result end\r\n\r\n  str = string.sub(str, par_index)\r\n  local param = {}\r\n  for key, value in string.gmatch(str, \"[;]?%s*([^%s=]+)%s*=%s*(.-);\") do\r\n    if not string.find(key, [[^%?([%w-]+)%?(.)%?]]) then -- \"?utf-8?B?...\"=\r\n      if string.sub(value, 1, 1) == '\"' then\r\n          value = string.sub(value, 2, -2 )\r\n          value = string.gsub(value, '\"\"', '\"') --??\r\n      else\r\n        value = trim(value)\r\n      end\r\n      key = string.lower(trim(key)) -- trim just in case\r\n      param[ key ] = value\r\n    end\r\n  end\r\n\r\n  result.param_ = param;\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 321,
    "text": "local result = setmetatable({},{__index = self})",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "result.raw_   = str",
    "type": "statement:assign"
  }, {
    "id": 323,
    "text": "result.value_ = \"\"",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "result.param_ = {}",
    "type": "statement:assign"
  }, {
    "id": 325,
    "text": "local key_index = string.find(str, \":\", 1, true)",
    "type": "statement:localassign"
  }, {
    "id": 326,
    "text": "local key = key_index and (string.sub(str, 1, key_index-1)) or str",
    "type": "statement:localassign"
  }, {
    "id": 327,
    "text": "key = string.lower(trim(key))",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "result.key_ = key",
    "type": "statement:assign"
  }, {
    "id": 329,
    "text": "if not key_index then return result end",
    "type": "statement:if"
  }, {
    "id": 330,
    "text": "str = rtrim(string.sub(str, key_index + 1))",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "if string.sub(str, -1) ~= ';' then str = str .. ';' end",
    "type": "statement:if"
  }, {
    "id": 332,
    "text": "str = str .. ';'",
    "type": "statement:assign"
  }, {
    "id": 333,
    "text": "local par_index = string.find(str, ';%s*[^%s=]+%s*=%s*.-;')",
    "type": "statement:localassign"
  }, {
    "id": 334,
    "text": "local value = par_index and (string.sub(str, 1, par_index - 1)) or string.sub(str,1,-2)",
    "type": "statement:localassign"
  }, {
    "id": 335,
    "text": "result.value_ = trim(value)",
    "type": "statement:assign"
  }, {
    "id": 336,
    "text": "if not par_index then return result end",
    "type": "statement:if"
  }, {
    "id": 337,
    "text": "str = string.sub(str, par_index)",
    "type": "statement:assign"
  }, {
    "id": 338,
    "text": "local param = {}",
    "type": "statement:localassign"
  }, {
    "id": 339,
    "text": "for key, value in string.gmatch(str, \"[;]?%s*([^%s=]+)%s*=%s*(.-);\") do\r\n    if not string.find(key, [[^%?([%w-]+)%?(.)%?]]) then -- \"?utf-8?B?...\"=\r\n      if string.sub(value, 1, 1) == '\"' then\r\n          value = string.sub(value, 2, -2 )\r\n          value = string.gsub(value, '\"\"', '\"') --??\r\n      else\r\n        value = trim(value)\r\n      end\r\n      key = string.lower(trim(key)) -- trim just in case\r\n      param[ key ] = value\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 340,
    "text": "if not string.find(key, [[^%?([%w-]+)%?(.)%?]]) then -- \"?utf-8?B?...\"=\r\n      if string.sub(value, 1, 1) == '\"' then\r\n          value = string.sub(value, 2, -2 )\r\n          value = string.gsub(value, '\"\"', '\"') --??\r\n      else\r\n        value = trim(value)\r\n      end\r\n      key = string.lower(trim(key)) -- trim just in case\r\n      param[ key ] = value\r\n    end",
    "type": "statement:if"
  }, {
    "id": 341,
    "text": "if string.sub(value, 1, 1) == '\"' then\r\n          value = string.sub(value, 2, -2 )\r\n          value = string.gsub(value, '\"\"', '\"') --??\r\n      else\r\n        value = trim(value)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 342,
    "text": "value = string.sub(value, 2, -2 )",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "value = string.gsub(value, '\"\"', '\"')",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "value = trim(value)",
    "type": "statement:assign"
  }, {
    "id": 345,
    "text": "param[ key ] = value",
    "type": "statement:assign"
  }, {
    "id": 346,
    "text": "result.param_ = param",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 348,
    "text": "function (self, msg, index_begin, index_end)\r\n  local buffer = {}\r\n  local result = setmetatable({},{__index = self})\r\n\r\n  result.headers_={} -- array\r\n\r\n  for i = index_begin, index_end do\r\n    local line = msg[i] or \"\"\r\n    if line:find(\"^%s\") then\r\n      table.insert(buffer,ltrim(line))\r\n    else\r\n      if buffer[1] then\r\n        local str = table.concat(buffer, \" \")\r\n        local header = mime_header(str)\r\n        table.insert(result.headers_, header)\r\n      end\r\n      buffer = {rtrim(line)}\r\n    end\r\n    if line == \"\" then return result, i + 1 end\r\n  end\r\n  return result, index_end + 1\r\nend",
    "type": "function"
  }, {
    "id": 349,
    "text": "local buffer = {}",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "result.headers_={}",
    "type": "statement:assign"
  }, {
    "id": 351,
    "text": "for i = index_begin, index_end do\r\n    local line = msg[i] or \"\"\r\n    if line:find(\"^%s\") then\r\n      table.insert(buffer,ltrim(line))\r\n    else\r\n      if buffer[1] then\r\n        local str = table.concat(buffer, \" \")\r\n        local header = mime_header(str)\r\n        table.insert(result.headers_, header)\r\n      end\r\n      buffer = {rtrim(line)}\r\n    end\r\n    if line == \"\" then return result, i + 1 end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 352,
    "text": "local line = msg[i] or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 353,
    "text": "if line:find(\"^%s\") then\r\n      table.insert(buffer,ltrim(line))\r\n    else\r\n      if buffer[1] then\r\n        local str = table.concat(buffer, \" \")\r\n        local header = mime_header(str)\r\n        table.insert(result.headers_, header)\r\n      end\r\n      buffer = {rtrim(line)}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 354,
    "text": "table.insert(buffer,ltrim(line))",
    "type": "statement:functioncall"
  }, {
    "id": 355,
    "text": "if buffer[1] then\r\n        local str = table.concat(buffer, \" \")\r\n        local header = mime_header(str)\r\n        table.insert(result.headers_, header)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 356,
    "text": "local str = table.concat(buffer, \" \")",
    "type": "statement:localassign"
  }, {
    "id": 357,
    "text": "local header = mime_header(str)",
    "type": "statement:localassign"
  }, {
    "id": 358,
    "text": "table.insert(result.headers_, header)",
    "type": "statement:functioncall"
  }, {
    "id": 359,
    "text": "buffer = {rtrim(line)}",
    "type": "statement:assign"
  }, {
    "id": 360,
    "text": "if line == \"\" then return result, i + 1 end",
    "type": "statement:if"
  }, {
    "id": 361,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 362,
    "text": "function(t) assert(t.cp_); t.cp_ = cp end",
    "type": "function"
  }, {
    "id": 363,
    "text": "function(t) assert(t.eol_); t.eol_ = nl end",
    "type": "function"
  }, {
    "id": 364,
    "text": "function (self, msg, index_begin, index_end)\r\n  index_begin, index_end = index_begin or 1, index_end or #msg\r\n  local result = setmetatable({},{__index = self}) -- clone(self)\r\n  result.bound_   = {index_begin, index_end};\r\n  result.message_ = msg;\r\n\r\n  local headers, index = mime_headers(msg, index_begin, index_end)\r\n  result.headers = headers\r\n  result.type_ = result:hvalue('content-type', 'text/plain'):lower()\r\n  local err\r\n  result.content, err = mime_content(result:type(), headers, msg, index, index_end)\r\n  if not result.content then \r\n    return nil, err, index_begin, index_end\r\n  end\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 365,
    "text": "index_begin, index_end = index_begin or 1, index_end or #msg",
    "type": "statement:assign"
  }, {
    "id": 366,
    "text": "local headers, index = mime_headers(msg, index_begin, index_end)",
    "type": "statement:localassign"
  }, {
    "id": 367,
    "text": "result.headers = headers",
    "type": "statement:assign"
  }, {
    "id": 368,
    "text": "result.type_ = result:hvalue('content-type', 'text/plain'):lower()",
    "type": "statement:assign"
  }, {
    "id": 369,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 370,
    "text": "result.content, err = mime_content(result:type(), headers, msg, index, index_end)",
    "type": "statement:assign"
  }, {
    "id": 371,
    "text": "if not result.content then \r\n    return nil, err, index_begin, index_end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 372,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 373,
    "text": "function(self, msg, ...)\r\n  if type(msg) == \"string\" then msg = split(msg, CRLF, true) end\r\n  return mime(msg, ...)\r\nend",
    "type": "function"
  }, {
    "id": 374,
    "text": "if type(msg) == \"string\" then msg = split(msg, CRLF, true) end",
    "type": "statement:if"
  }, {
    "id": 375,
    "text": "msg = split(msg, CRLF, true)",
    "type": "statement:assign"
  }, {
    "id": 376,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 377,
    "text": "",
    "type": "function container"
  }, {
    "id": 378,
    "text": "function M.GetLocalCPCode()\r\n  return LOCAL_CP or DEFAULT_CP\r\nend",
    "type": "function"
  }, {
    "id": 379,
    "text": "function M.GetLocalCPName()\r\n  return WINDOWS_CODE_PAGES[ LOCAL_CP or DEFAULT_CP ]\r\nend",
    "type": "function"
  }, {
    "id": 380,
    "text": "function M.new(...)\r\n  return pop3:new(...)\r\nend",
    "type": "function"
  }, {
    "id": 381,
    "text": "mime",
    "type": "module"
  }, {
    "id": 382,
    "text": "unqp",
    "type": "global function"
  }, {
    "id": 383,
    "text": "unb64",
    "type": "global function"
  }, {
    "id": 384,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 385,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 386,
    "text": "ltn12",
    "type": "module"
  }, {
    "id": 387,
    "text": "filter.chain",
    "type": "global function"
  }, {
    "id": 388,
    "text": "eol",
    "type": "global function"
  }, {
    "id": 389,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 390,
    "text": "find",
    "type": "global function"
  }, {
    "id": 391,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 392,
    "text": "CP",
    "type": "global function"
  }, {
    "id": 393,
    "text": "print",
    "type": "global function"
  }, {
    "id": 394,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 395,
    "text": "algo",
    "type": "global function"
  }, {
    "id": 396,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 397,
    "text": "grab",
    "type": "global function"
  }, {
    "id": 398,
    "text": "mime_content_multipart",
    "type": "global function"
  }, {
    "id": 399,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 400,
    "text": "mime_headers",
    "type": "global function"
  }, {
    "id": 401,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 402,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 403,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 404,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 405,
    "text": "mime",
    "type": "global function"
  }, {
    "id": 406,
    "text": "pred",
    "type": "global function"
  }, {
    "id": 407,
    "text": "pprint",
    "type": "global function"
  }, {
    "id": 408,
    "text": "type",
    "type": "global function"
  }, {
    "id": 409,
    "text": "compile",
    "type": "global function"
  }, {
    "id": 410,
    "text": "get_address_list",
    "type": "global function"
  }, {
    "id": 411,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 412,
    "text": "mime_content",
    "type": "global function"
  }, {
    "id": 413,
    "text": "mime_header",
    "type": "global function"
  }, {
    "id": 414,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 415,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 416,
    "text": "require",
    "type": "global function"
  }, {
    "id": 417,
    "text": "",
    "type": "local variable"
  }, {
    "id": 418,
    "text": "",
    "type": "variable container"
  }, {
    "id": 419,
    "text": "",
    "type": "require container"
  }, {
    "id": 420,
    "text": "",
    "type": "local variable"
  }, {
    "id": 421,
    "text": "",
    "type": "n/a"
  }, {
    "id": 422,
    "text": "",
    "type": "local variable"
  }, {
    "id": 423,
    "text": "",
    "type": "string"
  }, {
    "id": 424,
    "text": "",
    "type": "local variable"
  }, {
    "id": 425,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 426,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 427,
    "text": "",
    "type": "function"
  }, {
    "id": 428,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 429,
    "text": "",
    "type": "function"
  }, {
    "id": 430,
    "text": "",
    "type": "local variable"
  }, {
    "id": 431,
    "text": "",
    "type": "n/a"
  }, {
    "id": 432,
    "text": "",
    "type": "local variable"
  }, {
    "id": 433,
    "text": "",
    "type": "n/a"
  }, {
    "id": 434,
    "text": "",
    "type": "local variable"
  }, {
    "id": 435,
    "text": "",
    "type": "local variable"
  }, {
    "id": 436,
    "text": "",
    "type": "string"
  }, {
    "id": 437,
    "text": "",
    "type": "local variable"
  }, {
    "id": 438,
    "text": "",
    "type": "n/a"
  }, {
    "id": 439,
    "text": "",
    "type": "local variable"
  }, {
    "id": 440,
    "text": "",
    "type": "string"
  }, {
    "id": 441,
    "text": "",
    "type": "local variable"
  }, {
    "id": 442,
    "text": "",
    "type": "string"
  }, {
    "id": 443,
    "text": "",
    "type": "local variable"
  }, {
    "id": 444,
    "text": "",
    "type": "string"
  }, {
    "id": 445,
    "text": "",
    "type": "local variable"
  }, {
    "id": 446,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 447,
    "text": "",
    "type": "local variable"
  }, {
    "id": 448,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 449,
    "text": "",
    "type": "local variable"
  }, {
    "id": 450,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 451,
    "text": "",
    "type": "local variable"
  }, {
    "id": 452,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 453,
    "text": "",
    "type": "local variable"
  }, {
    "id": 454,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 455,
    "text": "",
    "type": "local variable"
  }, {
    "id": 456,
    "text": "",
    "type": "n/a"
  }, {
    "id": 457,
    "text": "",
    "type": "local variable"
  }, {
    "id": 458,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 459,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 460,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 461,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 462,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 463,
    "text": "",
    "type": "global variable"
  }, {
    "id": 464,
    "text": "pprint",
    "type": "module"
  }, {
    "id": 465,
    "text": "",
    "type": "interface container"
  }, {
    "id": 466,
    "text": "",
    "type": "interface"
  }, {
    "id": 467,
    "text": "",
    "type": "local variable"
  }, {
    "id": 468,
    "text": "",
    "type": "local variable"
  }, {
    "id": 469,
    "text": "",
    "type": "require container"
  }, {
    "id": 470,
    "text": "runner",
    "type": "module"
  }, {
    "id": 471,
    "text": "coveralls",
    "type": "module"
  }, {
    "id": 472,
    "text": "",
    "type": "require container"
  } ]
}