{
  "_filename": "pop3.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-pop3/lua/pop3.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 15
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 23,
    "label": "has",
    "to": 15
  }, {
    "from": 24,
    "label": "has",
    "to": 15
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 26,
    "label": "has",
    "to": 15
  }, {
    "from": 27,
    "label": "has",
    "to": 15
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 15
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 15
  }, {
    "from": 33,
    "label": "has",
    "to": 15
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 35,
    "label": "has",
    "to": 15
  }, {
    "from": 35,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 15
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 15
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 15
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 15
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 49,
    "label": "has",
    "to": 15
  }, {
    "from": 49,
    "label": "has",
    "to": 15
  }, {
    "from": 49,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 15
  }, {
    "from": 59,
    "label": "has",
    "to": 15
  }, {
    "from": 59,
    "label": "has",
    "to": 15
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 15
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 15
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 15
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 15
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 51
  }, {
    "from": 74,
    "label": "has",
    "to": 15
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 74,
    "label": "has",
    "to": 15
  }, {
    "from": 74,
    "label": "has",
    "to": 84
  }, {
    "from": 74,
    "label": "has",
    "to": 15
  }, {
    "from": 74,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 15
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 15
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 15
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 15
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 90,
    "label": "has",
    "to": 97
  }, {
    "from": 90,
    "label": "has",
    "to": 98
  }, {
    "from": 90,
    "label": "has",
    "to": 99
  }, {
    "from": 90,
    "label": "has",
    "to": 100
  }, {
    "from": 90,
    "label": "has",
    "to": 101
  }, {
    "from": 90,
    "label": "has",
    "to": 15
  }, {
    "from": 90,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 83
  }, {
    "from": 103,
    "label": "has",
    "to": 15
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 83
  }, {
    "from": 107,
    "label": "has",
    "to": 15
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 15
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 15
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 111
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 116,
    "label": "has",
    "to": 122
  }, {
    "from": 116,
    "label": "has",
    "to": 15
  }, {
    "from": 116,
    "label": "has",
    "to": 15
  }, {
    "from": 116,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 15
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 124,
    "label": "has",
    "to": 15
  }, {
    "from": 124,
    "label": "has",
    "to": 15
  }, {
    "from": 124,
    "label": "has",
    "to": 15
  }, {
    "from": 124,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 15
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 133,
    "label": "has",
    "to": 122
  }, {
    "from": 133,
    "label": "has",
    "to": 15
  }, {
    "from": 133,
    "label": "has",
    "to": 15
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 136
  }, {
    "from": 139,
    "label": "has",
    "to": 15
  }, {
    "from": 140,
    "label": "has",
    "to": 15
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 15
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 15
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 111
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 15
  }, {
    "from": 146,
    "label": "has",
    "to": 15
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 149,
    "label": "has",
    "to": 15
  }, {
    "from": 149,
    "label": "has",
    "to": 153
  }, {
    "from": 149,
    "label": "has",
    "to": 154
  }, {
    "from": 149,
    "label": "has",
    "to": 15
  }, {
    "from": 149,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 150
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 154
  }, {
    "from": 156,
    "label": "has",
    "to": 15
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 154
  }, {
    "from": 161,
    "label": "has",
    "to": 15
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 15
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 165,
    "label": "has",
    "to": 171
  }, {
    "from": 165,
    "label": "has",
    "to": 15
  }, {
    "from": 165,
    "label": "has",
    "to": 172
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 15
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 165,
    "label": "has",
    "to": 173
  }, {
    "from": 165,
    "label": "has",
    "to": 15
  }, {
    "from": 165,
    "label": "has",
    "to": 174
  }, {
    "from": 165,
    "label": "has",
    "to": 175
  }, {
    "from": 165,
    "label": "has",
    "to": 15
  }, {
    "from": 165,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 126
  }, {
    "from": 177,
    "label": "has",
    "to": 15
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 177,
    "label": "has",
    "to": 181
  }, {
    "from": 177,
    "label": "has",
    "to": 182
  }, {
    "from": 177,
    "label": "has",
    "to": 183
  }, {
    "from": 177,
    "label": "has",
    "to": 184
  }, {
    "from": 177,
    "label": "has",
    "to": 185
  }, {
    "from": 177,
    "label": "has",
    "to": 154
  }, {
    "from": 177,
    "label": "has",
    "to": 15
  }, {
    "from": 177,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 126
  }, {
    "from": 187,
    "label": "has",
    "to": 15
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 187,
    "label": "has",
    "to": 15
  }, {
    "from": 187,
    "label": "has",
    "to": 15
  }, {
    "from": 187,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 188
  }, {
    "from": 193,
    "label": "has",
    "to": 15
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 188
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 15
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 198,
    "label": "has",
    "to": 188
  }, {
    "from": 198,
    "label": "has",
    "to": 196
  }, {
    "from": 198,
    "label": "has",
    "to": 15
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 200,
    "label": "has",
    "to": 188
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 169
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 200,
    "label": "has",
    "to": 15
  }, {
    "from": 200,
    "label": "has",
    "to": 15
  }, {
    "from": 200,
    "label": "has",
    "to": 15
  }, {
    "from": 200,
    "label": "has",
    "to": 205
  }, {
    "from": 200,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 203
  }, {
    "from": 206,
    "label": "has",
    "to": 204
  }, {
    "from": 206,
    "label": "has",
    "to": 15
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 206,
    "label": "has",
    "to": 15
  }, {
    "from": 200,
    "label": "has",
    "to": 209
  }, {
    "from": 200,
    "label": "has",
    "to": 122
  }, {
    "from": 200,
    "label": "has",
    "to": 15
  }, {
    "from": 200,
    "label": "has",
    "to": 15
  }, {
    "from": 200,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 203
  }, {
    "from": 211,
    "label": "has",
    "to": 204
  }, {
    "from": 211,
    "label": "has",
    "to": 15
  }, {
    "from": 211,
    "label": "has",
    "to": 207
  }, {
    "from": 211,
    "label": "has",
    "to": 208
  }, {
    "from": 211,
    "label": "has",
    "to": 15
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 188
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 169
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 214,
    "label": "has",
    "to": 217
  }, {
    "from": 213,
    "label": "has",
    "to": 15
  }, {
    "from": 213,
    "label": "has",
    "to": 15
  }, {
    "from": 213,
    "label": "has",
    "to": 15
  }, {
    "from": 213,
    "label": "has",
    "to": 205
  }, {
    "from": 213,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 216
  }, {
    "from": 218,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 15
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 218,
    "label": "has",
    "to": 208
  }, {
    "from": 218,
    "label": "has",
    "to": 15
  }, {
    "from": 213,
    "label": "has",
    "to": 220
  }, {
    "from": 213,
    "label": "has",
    "to": 122
  }, {
    "from": 213,
    "label": "has",
    "to": 15
  }, {
    "from": 213,
    "label": "has",
    "to": 15
  }, {
    "from": 213,
    "label": "has",
    "to": 221
  }, {
    "from": 222,
    "label": "has",
    "to": 216
  }, {
    "from": 222,
    "label": "has",
    "to": 217
  }, {
    "from": 222,
    "label": "has",
    "to": 15
  }, {
    "from": 222,
    "label": "has",
    "to": 219
  }, {
    "from": 222,
    "label": "has",
    "to": 208
  }, {
    "from": 222,
    "label": "has",
    "to": 15
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 188
  }, {
    "from": 224,
    "label": "has",
    "to": 196
  }, {
    "from": 224,
    "label": "has",
    "to": 15
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 188
  }, {
    "from": 226,
    "label": "has",
    "to": 196
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 15
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 111
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 229,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 233,
    "label": "has",
    "to": 237
  }, {
    "from": 233,
    "label": "has",
    "to": 238
  }, {
    "from": 233,
    "label": "has",
    "to": 239
  }, {
    "from": 233,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 233,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 242,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 233,
    "label": "has",
    "to": 15
  }, {
    "from": 229,
    "label": "has",
    "to": 248
  }, {
    "from": 229,
    "label": "has",
    "to": 122
  }, {
    "from": 229,
    "label": "has",
    "to": 15
  }, {
    "from": 229,
    "label": "has",
    "to": 15
  }, {
    "from": 229,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 234
  }, {
    "from": 250,
    "label": "has",
    "to": 235
  }, {
    "from": 250,
    "label": "has",
    "to": 236
  }, {
    "from": 250,
    "label": "has",
    "to": 237
  }, {
    "from": 250,
    "label": "has",
    "to": 238
  }, {
    "from": 250,
    "label": "has",
    "to": 239
  }, {
    "from": 250,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 250,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 242,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 250,
    "label": "has",
    "to": 15
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 252,
    "label": "has",
    "to": 254
  }, {
    "from": 252,
    "label": "has",
    "to": 15
  }, {
    "from": 252,
    "label": "has",
    "to": 15
  }, {
    "from": 252,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 256,
    "label": "has",
    "to": 260
  }, {
    "from": 256,
    "label": "has",
    "to": 261
  }, {
    "from": 256,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 15
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 15
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 262,
    "label": "has",
    "to": 15
  }, {
    "from": 262,
    "label": "has",
    "to": 268
  }, {
    "from": 262,
    "label": "has",
    "to": 269
  }, {
    "from": 262,
    "label": "has",
    "to": 15
  }, {
    "from": 262,
    "label": "has",
    "to": 270
  }, {
    "from": 262,
    "label": "has",
    "to": 271
  }, {
    "from": 262,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 259
  }, {
    "from": 262,
    "label": "has",
    "to": 15
  }, {
    "from": 256,
    "label": "has",
    "to": 15
  }, {
    "from": 256,
    "label": "has",
    "to": 273
  }, {
    "from": 274,
    "label": "has",
    "to": 263
  }, {
    "from": 274,
    "label": "has",
    "to": 264
  }, {
    "from": 274,
    "label": "has",
    "to": 15
  }, {
    "from": 274,
    "label": "has",
    "to": 265
  }, {
    "from": 274,
    "label": "has",
    "to": 266
  }, {
    "from": 274,
    "label": "has",
    "to": 15
  }, {
    "from": 274,
    "label": "has",
    "to": 267
  }, {
    "from": 274,
    "label": "has",
    "to": 15
  }, {
    "from": 274,
    "label": "has",
    "to": 268
  }, {
    "from": 274,
    "label": "has",
    "to": 269
  }, {
    "from": 274,
    "label": "has",
    "to": 15
  }, {
    "from": 274,
    "label": "has",
    "to": 270
  }, {
    "from": 274,
    "label": "has",
    "to": 271
  }, {
    "from": 274,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 259
  }, {
    "from": 274,
    "label": "has",
    "to": 15
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 276,
    "label": "has",
    "to": 15
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 278,
    "label": "has",
    "to": 15
  }, {
    "from": 278,
    "label": "has",
    "to": 15
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 280,
    "label": "has",
    "to": 15
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 282,
    "label": "has",
    "to": 15
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 15
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 286,
    "label": "has",
    "to": 15
  }, {
    "from": 286,
    "label": "has",
    "to": 287
  }, {
    "from": 116,
    "label": "calls",
    "to": 302
  }, {
    "from": 90,
    "label": "calls",
    "to": 291
  }, {
    "from": 110,
    "label": "calls",
    "to": 291
  }, {
    "from": 116,
    "label": "calls",
    "to": 291
  }, {
    "from": 146,
    "label": "calls",
    "to": 291
  }, {
    "from": 149,
    "label": "calls",
    "to": 291
  }, {
    "from": 156,
    "label": "calls",
    "to": 291
  }, {
    "from": 156,
    "label": "calls",
    "to": 291
  }, {
    "from": 187,
    "label": "calls",
    "to": 291
  }, {
    "from": 193,
    "label": "calls",
    "to": 291
  }, {
    "from": 195,
    "label": "calls",
    "to": 291
  }, {
    "from": 195,
    "label": "calls",
    "to": 291
  }, {
    "from": 198,
    "label": "calls",
    "to": 291
  }, {
    "from": 198,
    "label": "calls",
    "to": 291
  }, {
    "from": 200,
    "label": "calls",
    "to": 291
  }, {
    "from": 213,
    "label": "calls",
    "to": 291
  }, {
    "from": 224,
    "label": "calls",
    "to": 291
  }, {
    "from": 224,
    "label": "calls",
    "to": 291
  }, {
    "from": 226,
    "label": "calls",
    "to": 291
  }, {
    "from": 226,
    "label": "calls",
    "to": 291
  }, {
    "from": 226,
    "label": "calls",
    "to": 291
  }, {
    "from": 229,
    "label": "calls",
    "to": 291
  }, {
    "from": 256,
    "label": "calls",
    "to": 291
  }, {
    "from": 256,
    "label": "calls",
    "to": 274
  }, {
    "from": 63,
    "label": "calls",
    "to": 292
  }, {
    "from": 63,
    "label": "calls",
    "to": 292
  }, {
    "from": 66,
    "label": "calls",
    "to": 292
  }, {
    "from": 288,
    "label": "calls",
    "to": 305
  }, {
    "from": 35,
    "label": "calls",
    "to": 28
  }, {
    "from": 124,
    "label": "calls",
    "to": 139
  }, {
    "from": 256,
    "label": "calls",
    "to": 139
  }, {
    "from": 288,
    "label": "calls",
    "to": 35
  }, {
    "from": 229,
    "label": "calls",
    "to": 294
  }, {
    "from": 288,
    "label": "calls",
    "to": 313
  }, {
    "from": 13,
    "label": "calls",
    "to": 295
  }, {
    "from": 288,
    "label": "calls",
    "to": 295
  }, {
    "from": 288,
    "label": "calls",
    "to": 319
  }, {
    "from": 229,
    "label": "calls",
    "to": 306
  }, {
    "from": 187,
    "label": "calls",
    "to": 63
  }, {
    "from": 200,
    "label": "calls",
    "to": 63
  }, {
    "from": 200,
    "label": "calls",
    "to": 63
  }, {
    "from": 256,
    "label": "calls",
    "to": 63
  }, {
    "from": 28,
    "label": "calls",
    "to": 308
  }, {
    "from": 110,
    "label": "calls",
    "to": 59
  }, {
    "from": 165,
    "label": "calls",
    "to": 309
  }, {
    "from": 165,
    "label": "calls",
    "to": 309
  }, {
    "from": 177,
    "label": "calls",
    "to": 309
  }, {
    "from": 156,
    "label": "calls",
    "to": 18
  }, {
    "from": 35,
    "label": "calls",
    "to": 310
  }, {
    "from": 256,
    "label": "calls",
    "to": 310
  }, {
    "from": 256,
    "label": "calls",
    "to": 310
  }, {
    "from": 256,
    "label": "calls",
    "to": 310
  }, {
    "from": 256,
    "label": "calls",
    "to": 310
  }, {
    "from": 213,
    "label": "calls",
    "to": 66
  }, {
    "from": 213,
    "label": "calls",
    "to": 66
  }, {
    "from": 110,
    "label": "calls",
    "to": 17
  }, {
    "from": 116,
    "label": "calls",
    "to": 17
  }, {
    "from": 177,
    "label": "calls",
    "to": 17
  }, {
    "from": 177,
    "label": "calls",
    "to": 17
  }, {
    "from": 177,
    "label": "calls",
    "to": 17
  }, {
    "from": 252,
    "label": "calls",
    "to": 299
  }, {
    "from": 59,
    "label": "calls",
    "to": 311
  }, {
    "from": 63,
    "label": "calls",
    "to": 311
  }, {
    "from": 66,
    "label": "calls",
    "to": 311
  }, {
    "from": 74,
    "label": "calls",
    "to": 311
  }, {
    "from": 49,
    "label": "calls",
    "to": 312
  }, {
    "from": 288,
    "label": "calls",
    "to": 297
  }, {
    "from": 288,
    "label": "calls",
    "to": 297
  }, {
    "from": 288,
    "label": "calls",
    "to": 297
  }, {
    "from": 288,
    "label": "calls",
    "to": 297
  }, {
    "from": 177,
    "label": "calls",
    "to": 20
  }, {
    "from": 35,
    "label": "calls",
    "to": 303
  }, {
    "from": 229,
    "label": "calls",
    "to": 315
  }, {
    "from": 229,
    "label": "calls",
    "to": 315
  }, {
    "from": 49,
    "label": "calls",
    "to": 300
  }, {
    "from": 133,
    "label": "calls",
    "to": 314
  }, {
    "from": 229,
    "label": "calls",
    "to": 314
  }, {
    "from": 256,
    "label": "calls",
    "to": 298
  }, {
    "from": 161,
    "label": "calls",
    "to": 316
  }, {
    "from": 165,
    "label": "calls",
    "to": 316
  }, {
    "from": 165,
    "label": "calls",
    "to": 316
  }, {
    "from": 177,
    "label": "calls",
    "to": 316
  }, {
    "from": 229,
    "label": "calls",
    "to": 293
  }, {
    "from": 35,
    "label": "calls",
    "to": 307
  }, {
    "from": 69,
    "label": "calls",
    "to": 317
  }, {
    "from": 28,
    "label": "calls",
    "to": 304
  }, {
    "from": 33,
    "label": "calls",
    "to": 304
  }, {
    "from": 33,
    "label": "calls",
    "to": 318
  }, {
    "from": 288,
    "label": "calls",
    "to": 301
  }, {
    "from": 35,
    "label": "calls",
    "to": 33
  }, {
    "from": 35,
    "label": "calls",
    "to": 33
  }, {
    "from": 74,
    "label": "calls",
    "to": 296
  }, {
    "from": 288,
    "label": "calls",
    "to": 13
  }, {
    "from": 288,
    "label": "calls",
    "to": 13
  }, {
    "from": 288,
    "label": "calls",
    "to": 13
  }, {
    "from": 288,
    "label": "calls",
    "to": 13
  }, {
    "from": 288,
    "label": "calls",
    "to": 13
  }, {
    "from": 288,
    "label": "calls",
    "to": 13
  }, {
    "from": 288,
    "label": "calls",
    "to": 13
  }, {
    "from": 288,
    "label": "calls",
    "to": 13
  }, {
    "from": 288,
    "label": "calls",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 288
  }, {
    "from": 288,
    "label": "declares",
    "to": 13
  }, {
    "from": 288,
    "label": "declares",
    "to": 17
  }, {
    "from": 288,
    "label": "declares",
    "to": 18
  }, {
    "from": 288,
    "label": "declares",
    "to": 20
  }, {
    "from": 288,
    "label": "declares",
    "to": 22
  }, {
    "from": 288,
    "label": "declares",
    "to": 23
  }, {
    "from": 288,
    "label": "declares",
    "to": 24
  }, {
    "from": 288,
    "label": "declares",
    "to": 25
  }, {
    "from": 288,
    "label": "declares",
    "to": 26
  }, {
    "from": 288,
    "label": "declares",
    "to": 27
  }, {
    "from": 288,
    "label": "declares",
    "to": 28
  }, {
    "from": 288,
    "label": "declares",
    "to": 33
  }, {
    "from": 288,
    "label": "declares",
    "to": 35
  }, {
    "from": 288,
    "label": "declares",
    "to": 45
  }, {
    "from": 288,
    "label": "declares",
    "to": 47
  }, {
    "from": 288,
    "label": "declares",
    "to": 49
  }, {
    "from": 288,
    "label": "declares",
    "to": 59
  }, {
    "from": 288,
    "label": "declares",
    "to": 63
  }, {
    "from": 288,
    "label": "declares",
    "to": 66
  }, {
    "from": 288,
    "label": "declares",
    "to": 69
  }, {
    "from": 288,
    "label": "declares",
    "to": 71
  }, {
    "from": 288,
    "label": "declares",
    "to": 74
  }, {
    "from": 288,
    "label": "declares",
    "to": 86
  }, {
    "from": 288,
    "label": "declares",
    "to": 88
  }, {
    "from": 288,
    "label": "declares",
    "to": 90
  }, {
    "from": 288,
    "label": "declares",
    "to": 103
  }, {
    "from": 288,
    "label": "declares",
    "to": 107
  }, {
    "from": 288,
    "label": "declares",
    "to": 110
  }, {
    "from": 288,
    "label": "declares",
    "to": 116
  }, {
    "from": 288,
    "label": "declares",
    "to": 124
  }, {
    "from": 288,
    "label": "declares",
    "to": 133
  }, {
    "from": 288,
    "label": "declares",
    "to": 139
  }, {
    "from": 288,
    "label": "declares",
    "to": 140
  }, {
    "from": 288,
    "label": "declares",
    "to": 142
  }, {
    "from": 288,
    "label": "declares",
    "to": 144
  }, {
    "from": 288,
    "label": "declares",
    "to": 146
  }, {
    "from": 288,
    "label": "declares",
    "to": 149
  }, {
    "from": 288,
    "label": "declares",
    "to": 156
  }, {
    "from": 288,
    "label": "declares",
    "to": 161
  }, {
    "from": 288,
    "label": "declares",
    "to": 165
  }, {
    "from": 288,
    "label": "declares",
    "to": 177
  }, {
    "from": 288,
    "label": "declares",
    "to": 187
  }, {
    "from": 288,
    "label": "declares",
    "to": 193
  }, {
    "from": 288,
    "label": "declares",
    "to": 195
  }, {
    "from": 288,
    "label": "declares",
    "to": 198
  }, {
    "from": 288,
    "label": "declares",
    "to": 200
  }, {
    "from": 288,
    "label": "declares",
    "to": 211
  }, {
    "from": 288,
    "label": "declares",
    "to": 213
  }, {
    "from": 288,
    "label": "declares",
    "to": 222
  }, {
    "from": 288,
    "label": "declares",
    "to": 224
  }, {
    "from": 288,
    "label": "declares",
    "to": 226
  }, {
    "from": 288,
    "label": "declares",
    "to": 229
  }, {
    "from": 288,
    "label": "declares",
    "to": 250
  }, {
    "from": 288,
    "label": "declares",
    "to": 252
  }, {
    "from": 288,
    "label": "declares",
    "to": 256
  }, {
    "from": 288,
    "label": "declares",
    "to": 274
  }, {
    "from": 288,
    "label": "declares",
    "to": 276
  }, {
    "from": 288,
    "label": "declares",
    "to": 278
  }, {
    "from": 288,
    "label": "declares",
    "to": 280
  }, {
    "from": 288,
    "label": "declares",
    "to": 282
  }, {
    "from": 288,
    "label": "declares",
    "to": 284
  }, {
    "from": 288,
    "label": "declares",
    "to": 286
  }, {
    "from": 1,
    "label": "declares",
    "to": 289
  }, {
    "from": 1,
    "label": "declares",
    "to": 290
  }, {
    "from": 320,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 324
  }, {
    "from": 1,
    "label": "contains",
    "to": 325
  }, {
    "from": 324,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 324,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 324,
    "label": "initializes",
    "to": 330
  }, {
    "from": 324,
    "label": "initializes",
    "to": 331
  }, {
    "from": 324,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 324,
    "label": "initializes",
    "to": 334
  }, {
    "from": 324,
    "label": "initializes",
    "to": 335
  }, {
    "from": 324,
    "label": "initializes",
    "to": 336
  }, {
    "from": 324,
    "label": "initializes",
    "to": 337
  }, {
    "from": 337,
    "label": "assigns",
    "to": 338
  }, {
    "from": 324,
    "label": "initializes",
    "to": 339
  }, {
    "from": 339,
    "label": "assigns",
    "to": 340
  }, {
    "from": 324,
    "label": "initializes",
    "to": 341
  }, {
    "from": 341,
    "label": "assigns",
    "to": 342
  }, {
    "from": 324,
    "label": "initializes",
    "to": 343
  }, {
    "from": 324,
    "label": "initializes",
    "to": 344
  }, {
    "from": 344,
    "label": "assigns",
    "to": 345
  }, {
    "from": 324,
    "label": "initializes",
    "to": 346
  }, {
    "from": 346,
    "label": "assigns",
    "to": 347
  }, {
    "from": 324,
    "label": "initializes",
    "to": 348
  }, {
    "from": 348,
    "label": "assigns",
    "to": 349
  }, {
    "from": 324,
    "label": "initializes",
    "to": 350
  }, {
    "from": 350,
    "label": "assigns",
    "to": 351
  }, {
    "from": 324,
    "label": "initializes",
    "to": 352
  }, {
    "from": 352,
    "label": "assigns",
    "to": 353
  }, {
    "from": 1,
    "label": "provides",
    "to": 354
  }, {
    "from": 321,
    "label": "represents",
    "to": 355
  }, {
    "from": 354,
    "label": "provides",
    "to": 355
  }, {
    "from": 356,
    "label": "requires",
    "to": 1
  }, {
    "from": 357,
    "label": "requires",
    "to": 1
  }, {
    "from": 346,
    "label": "contains",
    "to": 2
  }, {
    "from": 346,
    "label": "contains",
    "to": 3
  }, {
    "from": 346,
    "label": "contains",
    "to": 4
  }, {
    "from": 346,
    "label": "contains",
    "to": 5
  }, {
    "from": 346,
    "label": "contains",
    "to": 6
  }, {
    "from": 346,
    "label": "contains",
    "to": 7
  }, {
    "from": 346,
    "label": "contains",
    "to": 8
  }, {
    "from": 346,
    "label": "contains",
    "to": 9
  }, {
    "from": 346,
    "label": "contains",
    "to": 10
  }, {
    "from": 346,
    "label": "contains",
    "to": 11
  }, {
    "from": 346,
    "label": "contains",
    "to": 12
  }, {
    "from": 321,
    "label": "contains",
    "to": 282
  }, {
    "from": 322,
    "label": "contains",
    "to": 282
  }, {
    "from": 323,
    "label": "contains",
    "to": 282
  }, {
    "from": 346,
    "label": "contains",
    "to": 282
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pop3",
    "type": "module"
  }, {
    "id": 2,
    "text": "function M.pass_thrue_only()\r\n  return not iconv\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function M.supported(to, from)\r\n  return M[to][from] ~= pass_thrue\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function M.convert(to, from, str)\r\n  return M[to][from](str)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function M.set_cp(cp) DEFAULT_LOCAL_CP = cp end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function M.set_cp_converter(conv) CP = (conv or DEFAULT_CP_CONV) end",
    "type": "function"
  }, {
    "id": 7,
    "text": "function M.set_eol(nl) DEFAULT_NL = nl end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function M.cp() return DEFAULT_LOCAL_CP end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function M.cp_converter() return CP end",
    "type": "function"
  }, {
    "id": 10,
    "text": "function M.eol() return DEFAULT_NL end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function M.GetLocalCPCode()\r\n  return LOCAL_CP or DEFAULT_CP\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function M.GetLocalCPName()\r\n  return WINDOWS_CODE_PAGES[ LOCAL_CP or DEFAULT_CP ]\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local function prequire(...)\r\n  local ok, mod = pcall(require, ...)\r\n  return ok and mod, mod\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local ok, mod = pcall(require, ...)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function(...)  end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function (str)\r\n      return digest(\"md5\", str)\r\n    end",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function (key,value)\r\n      return crypto.hmac.digest(\"md5\", value, key)\r\n    end",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function (str) return md5.digest(str)       end",
    "type": "function"
  }, {
    "id": 23,
    "text": "function (str) return md5.digest(str, true) end",
    "type": "function"
  }, {
    "id": 24,
    "text": "function(str) return md5.digest(str)       end",
    "type": "function"
  }, {
    "id": 25,
    "text": "function(str) return md5.digest(str, true) end",
    "type": "function"
  }, {
    "id": 26,
    "text": "function(str) return md5.sumhexa(str)   end",
    "type": "function"
  }, {
    "id": 27,
    "text": "function(str) return md5.sum(str, true) end",
    "type": "function"
  }, {
    "id": 28,
    "text": "local function hmac_key( hash, blocksize, key )\r\n      if key:len() > blocksize then key = hash( key, true ) end\r\n      key = key .. string.char( 0 ):rep( blocksize - key:len() )\r\n      return key\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "if key:len() > blocksize then key = hash( key, true ) end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "key = hash( key, true )",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "key = key .. string.char( 0 ):rep( blocksize - key:len() )",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function hmac_xor(str, b)\r\n      return str:gsub( '.', function( ch ) \r\n        return string.char( bxor( ch:byte(), b ) ) \r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function hmac(hash, key, value, raw)\r\n      local blocksize = 64\r\n      local hash_dig, hash_sum\r\n      if     hash == 'md5'  then hash_dig, hash_sum = md5_digest, md5_sum\r\n      -- elseif hash == 'sha1' then hash = assert(sha1.digest)\r\n      else error(\"not supported.\") end\r\n\r\n      local key = hmac_key(hash, blocksize, key )\r\n      local ikeypad = hmac_xor(key, 54)\r\n      local okeypad = hmac_xor(key, 92)\r\n      return hash_dig( okeypad .. hash_sum( ikeypad .. value ), raw)\r\n    end",
    "type": "function"
  }, {
    "id": 36,
    "text": "local blocksize = 64",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local hash_dig, hash_sum",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if     hash == 'md5'  then hash_dig, hash_sum = md5_digest, md5_sum\r\n      -- elseif hash == 'sha1' then hash = assert(sha1.digest)\r\n      else error(\"not supported.\") end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "hash_dig, hash_sum = md5_digest, md5_sum",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "error(\"not supported.\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local key = hmac_key(hash, blocksize, key )",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local ikeypad = hmac_xor(key, 54)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local okeypad = hmac_xor(key, 92)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function (key, value)\r\n      return hmac('md5', key, value)\r\n    end",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n  return nil, 'default network transport is not loaded'\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function tls_connect(host, port)\r\n      local cnn, err = socket.connect(host,port)\r\n      if not cnn then return nil, err end\r\n\r\n      local scnn, err  = ssl.wrap(cnn, tls_cfg)\r\n      if not scnn then\r\n        cnn:close()\r\n        return nil, err\r\n      end\r\n\r\n      local ok,err = scnn:dohandshake()\r\n      if not ok then\r\n        scnn:close()\r\n        return nil,err\r\n      end\r\n      return scnn\r\n    end",
    "type": "function"
  }, {
    "id": 50,
    "text": "local cnn, err = socket.connect(host,port)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if not cnn then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "local scnn, err  = ssl.wrap(cnn, tls_cfg)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if not scnn then\r\n        cnn:close()\r\n        return nil, err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "cnn:close()",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local ok,err = scnn:dohandshake()",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if not ok then\r\n        scnn:close()\r\n        return nil,err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "scnn:close()",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "local function pars_response(resp)\r\n  local code, info = string.match(resp,\"%s*(%S*)(.*)%s*\")\r\n  -- SASL GET ONLY \"+\"/\"-\"\r\n  if code == '+OK' or code == '+' then\r\n    return true, info\r\n  elseif code == '-ERR' or code == '-' then\r\n    return false, info\r\n  end\r\n  return nil, resp\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local code, info = string.match(resp,\"%s*(%S*)(.*)%s*\")",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if code == '+OK' or code == '+' then\r\n    return true, info\r\n  elseif code == '-ERR' or code == '-' then\r\n    return false, info\r\n  end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function split_2_numbers(data)\r\n  local n1, n2 = string.match(data, \"%s*(%S+)%s+(%S+)\")\r\n  return tonumber(n1), tonumber(n2)\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local n1, n2 = string.match(data, \"%s*(%S+)%s+(%S+)\")",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local function split_1_number(data)\r\n  local n1,s= string.match(data, \"%s*(%S+)%s*(%S*)\")\r\n  return tonumber(n1),s\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local n1,s= string.match(data, \"%s*(%S+)%s*(%S*)\")",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function pop3:new(connect_ctor)\r\n  return setmetatable({cnn_fn_ = connect_ctor},self)\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function pop3:set_connect_fn(connect_ctor)\r\n  self.cnn_fn_ = connect_ctor\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "self.cnn_fn_ = connect_ctor",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function pop3:open_with(cnn_fn, host, port, timeout)\r\n  if self:is_open() then\r\n    return true\r\n  end\r\n\r\n  local cnn, err = cnn_fn(host,port)\r\n  if not cnn then return nil, err end\r\n  if timeout then\r\n    cnn:settimeout(timeout)\r\n  end\r\n  self.cnn = cnn\r\n  self.is_auth_ = false\r\n\r\n  local code, data = self:response()\r\n  if not code then \r\n    self:close()\r\n    return nil, data \r\n  end\r\n  self.apop_nonce = string.match(data, \"(<[^<>]+>)\")\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "if self:is_open() then\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "local cnn, err = cnn_fn(host,port)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if timeout then\r\n    cnn:settimeout(timeout)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "cnn:settimeout(timeout)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "self.cnn = cnn",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "self.is_auth_ = false",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "local code, data = self:response()",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if not code then \r\n    self:close()\r\n    return nil, data \r\n  end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "self:close()",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "self.apop_nonce = string.match(data, \"(<[^<>]+>)\")",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function pop3:open(...)\r\n  return self:open_with(self.cnn_fn_ or default_connect, ...)\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function pop3:open_tls(...)\r\n  return self:open_with(tls_connect,...)\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function pop3:close()\r\n  if self.close_progress_ then return end\r\n  if not self:is_open() then  return  end\r\n  self.close_progress_ = true\r\n  self:cmd(\"QUIT\")\r\n  assert(self.cnn)\r\n  self.cnn:close()\r\n  self.cnn             = nil\r\n  self.is_auth_        = nil\r\n  self.apop_nonce      = nil\r\n  self.close_progress_ = nil\r\n  self.is_secure_      = nil\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "if self.close_progress_ then return end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "if not self:is_open() then  return  end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "self.close_progress_ = true",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "self:cmd(\"QUIT\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "assert(self.cnn)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "self.cnn:close()",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "self.cnn             = nil",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "self.is_auth_        = nil",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "self.apop_nonce      = nil",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "self.close_progress_ = nil",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "self.is_secure_      = nil",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function pop3:recv(...)\r\n  local ok,err = self.cnn:receive(...)\r\n  if not ok then self:close() end\r\n  return ok,err\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local ok,err = self.cnn:receive(...)",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if not ok then self:close() end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function pop3:send(...)\r\n  local ok,err = self.cnn:send(...)\r\n  if not ok then self:close() end\r\n  return ok,err\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "local ok,err = self.cnn:send(...)",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function pop3:response()\r\n  assert(self:is_open())\r\n  local resp, err = self:recv('*l')\r\n  if not resp then return nil, err end\r\n  DEBUG(\"POP3 RESPONSE : \", resp)\r\n  return pars_response(resp)\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "assert(self:is_open())",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "local resp, err = self:recv('*l')",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if not resp then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "DEBUG(\"POP3 RESPONSE : \", resp)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function pop3:cmd(command, ...)\r\n  assert(self:is_open())\r\n  if ... then\r\n    command = command .. ' ' .. table.concat({...}, ' ')\r\n  end\r\n  DEBUG(\"POP3 REQUEST  : \", command)\r\n  command = command .. \"\\r\\n\"\r\n  local ok, err = self:send(command)\r\n  if not ok then return nil, err end\r\n  return self:response()\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "if ... then\r\n    command = command .. ' ' .. table.concat({...}, ' ')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "command = command .. ' ' .. table.concat({...}, ' ')",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "DEBUG(\"POP3 REQUEST  : \", command)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "command = command .. \"\\r\\n\"",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "local ok, err = self:send(command)",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function pop3:cmd_cb(fn, ...)\r\n  local status, data = self:cmd(...)\r\n  if not status then return nil, data end\r\n  while true do\r\n    local data, err = self:recv(\"*l\")\r\n    if not data then return nil,err end\r\n    if data == '.' then break end\r\n    data, err = fn(data)\r\n    if not data then return nil,err end\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "local status, data = self:cmd(...)",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if not status then return nil, data end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "while true do\r\n    local data, err = self:recv(\"*l\")\r\n    if not data then return nil,err end\r\n    if data == '.' then break end\r\n    data, err = fn(data)\r\n    if not data then return nil,err end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 128,
    "text": "local data, err = self:recv(\"*l\")",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "if not data then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "if data == '.' then break end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "data, err = fn(data)",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function pop3:cmd_ex(...)\r\n  local all = {}\r\n  local fn = function(line) table.insert(all,line) return true end\r\n  local ok, err = self:cmd_cb(fn, ...)\r\n  if not ok then return nil, err end\r\n  return all\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "local all = {}",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "local fn = function(line) table.insert(all,line) return true end",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "table.insert(all,line)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "local ok, err = self:cmd_cb(fn, ...)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function(line) table.insert(all,line) return true end",
    "type": "function"
  }, {
    "id": 140,
    "text": "function pop3:is_open()\r\n  return self.cnn ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function pop3:is_auth()\r\n  return self.is_auth_ == true\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function pop3:is_secure()\r\n  return self.is_secure_\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function pop3:has_apop()\r\n  assert(self:is_open())\r\n  if self.apop_nonce then return true end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "if self.apop_nonce then return true end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function pop3:auth(username, password)\r\n  assert(not self:is_auth())\r\n  local ok, err = self:cmd(\"USER\",username)\r\n  if not ok then return ok, err end\r\n  ok, err = self:cmd(\"PASS\", password)\r\n  self.is_auth_ = ok\r\n  return ok,err\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "assert(not self:is_auth())",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "local ok, err = self:cmd(\"USER\",username)",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if not ok then return ok, err end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "ok, err = self:cmd(\"PASS\", password)",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "self.is_auth_ = ok",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function pop3:auth_apop(username, password)\r\n  assert(not self:is_auth())\r\n  assert(self.apop_nonce)\r\n  local dig = md5_digest(self.apop_nonce .. password)\r\n  local ok, err = self:cmd(\"APOP\", username, dig)\r\n  self.is_auth_ = ok\r\n  return ok,err\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "assert(self.apop_nonce)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "local dig = md5_digest(self.apop_nonce .. password)",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "local ok, err = self:cmd(\"APOP\", username, dig)",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function pop3:auth_plain(username, password)\r\n  local auth64 = b64enc(\r\n    username .. \"\\0\" .. \r\n    username .. \"\\0\" .. \r\n    password\r\n  )\r\n  local ok, err = self:cmd(\"AUTH PLAIN\", auth64)\r\n  self.is_auth_ = ok\r\n  return ok,err\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local auth64 = b64enc(\r\n    username .. \"\\0\" .. \r\n    username .. \"\\0\" .. \r\n    password\r\n  )",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "local ok, err = self:cmd(\"AUTH PLAIN\", auth64)",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "function pop3:auth_login(username, password)\r\n  local user64 = b64enc(username)\r\n  local pw64   = b64enc(password)\r\n  local status, data = self:cmd(\"AUTH LOGIN\")\r\n  if not status then return nil,data end\r\n  \r\n  data = b64dec(data)\r\n  if data:upper() ~= \"USERNAME:\" then \r\n    return false, \"Wrong Response:\" .. data\r\n  end\r\n\r\n  status, data = self:cmd(user64)\r\n  if not status then return nil,data end\r\n\r\n  data = b64dec(data)\r\n  if data:upper() ~= \"PASSWORD:\" then \r\n    return false, \"Wrong Response:\" .. data\r\n  end\r\n\r\n  status, data = self:cmd(pw64)\r\n  self.is_auth_ = status\r\n  return status, data\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "local user64 = b64enc(username)",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "local pw64   = b64enc(password)",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local status, data = self:cmd(\"AUTH LOGIN\")",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if not status then return nil,data end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "data = b64dec(data)",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "if data:upper() ~= \"USERNAME:\" then \r\n    return false, \"Wrong Response:\" .. data\r\n  end",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "status, data = self:cmd(user64)",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "if data:upper() ~= \"PASSWORD:\" then \r\n    return false, \"Wrong Response:\" .. data\r\n  end",
    "type": "statement:if"
  }, {
    "id": 174,
    "text": "status, data = self:cmd(pw64)",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "self.is_auth_ = status",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function pop3:auth_crammd5(username, password)\r\n  local status, data = self:cmd(\"AUTH CRAM-MD5\")\r\n  if not status then return nil, data end\r\n\r\n  local nonce = b64dec(data)\r\n  DEBUG(\"CMD5-CHALLENGE:\", nonce)\r\n  local dig   = md5_hmac(password, nonce)\r\n  DEBUG(\"CMD5-HMAC(SECRET):\", dig)\r\n  local str   = b64enc(username.. ' ' .. dig)\r\n  DEBUG(\"CMD5-RESPONSE:\", dig)\r\n  \r\n  local ok, err = self:cmd(str)\r\n  self.is_auth_ = ok\r\n  return ok,err\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "local status, data = self:cmd(\"AUTH CRAM-MD5\")",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "local nonce = b64dec(data)",
    "type": "statement:localassign"
  }, {
    "id": 180,
    "text": "DEBUG(\"CMD5-CHALLENGE:\", nonce)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "local dig   = md5_hmac(password, nonce)",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "DEBUG(\"CMD5-HMAC(SECRET):\", dig)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "local str   = b64enc(username.. ' ' .. dig)",
    "type": "statement:localassign"
  }, {
    "id": 184,
    "text": "DEBUG(\"CMD5-RESPONSE:\", dig)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "local ok, err = self:cmd(str)",
    "type": "statement:localassign"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function pop3:stat()\r\n  assert(self:is_auth())\r\n  local status, data = self:cmd(\"STAT\")\r\n  if not status then return nil, data end\r\n  local count, size = split_2_numbers(data)\r\n  if not (count and size) then\r\n    return nil, \"Wrong Response:\" .. data\r\n  end\r\n  return count, size \r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "assert(self:is_auth())",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "local status, data = self:cmd(\"STAT\")",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "local count, size = split_2_numbers(data)",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "if not (count and size) then\r\n    return nil, \"Wrong Response:\" .. data\r\n  end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function pop3:noop()\r\n  assert(self:is_auth())\r\n  return self:cmd(\"NOOP\")\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "function pop3:dele(msgid)\r\n  assert(self:is_auth())\r\n  assert(msgid)\r\n  return self:cmd(\"DELE\",msgid)\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "assert(msgid)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "function pop3:rset(msgid)\r\n  assert(self:is_auth())\r\n  assert(msgid)\r\n  return self:cmd(\"RSET\",msgid)\r\nend",
    "type": "function"
  }, {
    "id": 199,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 200,
    "text": "function pop3:list(msgid)\r\n  assert(self:is_auth())\r\n\r\n  if msgid then\r\n    local status, data = self:cmd(\"LIST\",msgid)\r\n    if not status then return nil,data end\r\n    local no, size = split_2_numbers(data)\r\n    if not (no and size) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    return no,size\r\n  end\r\n\r\n  local t,i = {},0\r\n  local fn = function(data)\r\n    local no, size = split_2_numbers(data)\r\n    if not (no and size) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    t[no]=size\r\n    i = i + 1\r\n    return true\r\n  end\r\n  local ok, err = self:cmd_cb(fn, \"LIST\")\r\n  if not ok then return nil, err end\r\n  return t, i\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "if msgid then\r\n    local status, data = self:cmd(\"LIST\",msgid)\r\n    if not status then return nil,data end\r\n    local no, size = split_2_numbers(data)\r\n    if not (no and size) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    return no,size\r\n  end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "local status, data = self:cmd(\"LIST\",msgid)",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "local no, size = split_2_numbers(data)",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "if not (no and size) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "local t,i = {},0",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "local fn = function(data)\r\n    local no, size = split_2_numbers(data)\r\n    if not (no and size) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    t[no]=size\r\n    i = i + 1\r\n    return true\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "t[no]=size",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "local ok, err = self:cmd_cb(fn, \"LIST\")",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function(data)\r\n    local no, size = split_2_numbers(data)\r\n    if not (no and size) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    t[no]=size\r\n    i = i + 1\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function pop3:uidl(msgid)\r\n  assert(self:is_auth())\r\n\r\n  if msgid then\r\n    local status, data = self:cmd(\"UIDL\",msgid)\r\n    if not status then return nil,data end\r\n    local no, id = split_1_number(data)\r\n    if not (no and id) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    return no,id\r\n  end\r\n\r\n  local t,i = {},0\r\n  local fn = function(data)\r\n    local no, id = split_1_number(data)\r\n    if not (no and id) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    t[no]=id\r\n    i = i + 1\r\n    return true\r\n  end\r\n\r\n  local ok, err = self:cmd_cb(fn, \"UIDL\")\r\n  if not ok then return nil, err end\r\n  return t, i\r\nend",
    "type": "function"
  }, {
    "id": 214,
    "text": "if msgid then\r\n    local status, data = self:cmd(\"UIDL\",msgid)\r\n    if not status then return nil,data end\r\n    local no, id = split_1_number(data)\r\n    if not (no and id) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    return no,id\r\n  end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "local status, data = self:cmd(\"UIDL\",msgid)",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "local no, id = split_1_number(data)",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "if not (no and id) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "local fn = function(data)\r\n    local no, id = split_1_number(data)\r\n    if not (no and id) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    t[no]=id\r\n    i = i + 1\r\n    return true\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "t[no]=id",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "local ok, err = self:cmd_cb(fn, \"UIDL\")",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 222,
    "text": "function(data)\r\n    local no, id = split_1_number(data)\r\n    if not (no and id) then\r\n      return nil, \"Wrong Response:\" .. data\r\n    end\r\n    t[no]=id\r\n    i = i + 1\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "function pop3:retr(msgid)\r\n  assert(self:is_auth())\r\n  assert(msgid)\r\n  return self:cmd_ex(\"RETR\",msgid)\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function pop3:top(msgid, n)\r\n  assert(self:is_auth())\r\n  assert(msgid)\r\n  assert(n)\r\n  return self:cmd_ex(\"TOP\", msgid, n)\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "assert(n)",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function pop3:capa()\r\n  assert(self:is_open())\r\n  local capas = {}\r\n  if self.apop_nonce then capas.APOP = true end\r\n\r\n  local fn = function(line) \r\n    local capability = string.sub(line, string.find(line, \"[%w-]+\"))\r\n    capability = capability:upper()\r\n    line = string.sub(line, #capability + 1)\r\n    capas[capability] = true\r\n    local args = {}\r\n    local w\r\n    for w in string.gmatch(line, \"[%w-]+\") do\r\n      table.insert(args, w)\r\n    end\r\n    if #args == 1 then \r\n      capas[capability] = args[1]\r\n    elseif #args > 1 then\r\n      local t = {}\r\n      capas[capability] = t\r\n      for _,a in ipairs(args) do\r\n        t[a:upper()] = true\r\n      end\r\n    end\r\n    return true \r\n  end\r\n  local ok, err = self:cmd_cb(fn, \"CAPA\")\r\n  if not ok then return nil, err end\r\n  return capas\r\nend",
    "type": "function"
  }, {
    "id": 230,
    "text": "local capas = {}",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "if self.apop_nonce then capas.APOP = true end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "capas.APOP = true",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "local fn = function(line) \r\n    local capability = string.sub(line, string.find(line, \"[%w-]+\"))\r\n    capability = capability:upper()\r\n    line = string.sub(line, #capability + 1)\r\n    capas[capability] = true\r\n    local args = {}\r\n    local w\r\n    for w in string.gmatch(line, \"[%w-]+\") do\r\n      table.insert(args, w)\r\n    end\r\n    if #args == 1 then \r\n      capas[capability] = args[1]\r\n    elseif #args > 1 then\r\n      local t = {}\r\n      capas[capability] = t\r\n      for _,a in ipairs(args) do\r\n        t[a:upper()] = true\r\n      end\r\n    end\r\n    return true \r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "local capability = string.sub(line, string.find(line, \"[%w-]+\"))",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "capability = capability:upper()",
    "type": "statement:assign"
  }, {
    "id": 236,
    "text": "line = string.sub(line, #capability + 1)",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "capas[capability] = true",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "local args = {}",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "local w",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "for w in string.gmatch(line, \"[%w-]+\") do\r\n      table.insert(args, w)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 241,
    "text": "table.insert(args, w)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "if #args == 1 then \r\n      capas[capability] = args[1]\r\n    elseif #args > 1 then\r\n      local t = {}\r\n      capas[capability] = t\r\n      for _,a in ipairs(args) do\r\n        t[a:upper()] = true\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "capas[capability] = args[1]",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "capas[capability] = t",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "for _,a in ipairs(args) do\r\n        t[a:upper()] = true\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 247,
    "text": "t[a:upper()] = true",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "local ok, err = self:cmd_cb(fn, \"CAPA\")",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function(line) \r\n    local capability = string.sub(line, string.find(line, \"[%w-]+\"))\r\n    capability = capability:upper()\r\n    line = string.sub(line, #capability + 1)\r\n    capas[capability] = true\r\n    local args = {}\r\n    local w\r\n    for w in string.gmatch(line, \"[%w-]+\") do\r\n      table.insert(args, w)\r\n    end\r\n    if #args == 1 then \r\n      capas[capability] = args[1]\r\n    elseif #args > 1 then\r\n      local t = {}\r\n      capas[capability] = t\r\n      for _,a in ipairs(args) do\r\n        t[a:upper()] = true\r\n      end\r\n    end\r\n    return true \r\n  end",
    "type": "function"
  }, {
    "id": 251,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 252,
    "text": "function pop3:message(msgid)\r\n  local msg, err = self:retr(msgid)\r\n  if not msg then return nil, err end\r\n  return message(msg)\r\nend",
    "type": "function"
  }, {
    "id": 253,
    "text": "local msg, err = self:retr(msgid)",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "if not msg then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function pop3:make_iter(fn)\r\n  local lst, err = self:list()\r\n  if not lst then error(err) end\r\n  local k = nil\r\n  \r\n  local iter\r\n  iter = function ()\r\n    k = next(lst, k)\r\n    if not k then return nil end\r\n\r\n    -- skip deleted messages ?\r\n    local status, err = self:cmd(\"LIST\",k)\r\n    if status == false then return iter() end -- next message\r\n    if not status then return error(err) end\r\n    local no, size = split_2_numbers(err)\r\n    if not (no and size) then return error(\"Wrong Response:\" .. err) end\r\n    assert(no == k)\r\n\r\n    local data, err = fn(self, k, size)\r\n    if not data then error(err) end\r\n\r\n    return k, data\r\n  end\r\n\r\n  return iter\r\nend",
    "type": "function"
  }, {
    "id": 257,
    "text": "local lst, err = self:list()",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "if not lst then error(err) end",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "error(err)",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "local k = nil",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "local iter",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "iter = function ()\r\n    k = next(lst, k)\r\n    if not k then return nil end\r\n\r\n    -- skip deleted messages ?\r\n    local status, err = self:cmd(\"LIST\",k)\r\n    if status == false then return iter() end -- next message\r\n    if not status then return error(err) end\r\n    local no, size = split_2_numbers(err)\r\n    if not (no and size) then return error(\"Wrong Response:\" .. err) end\r\n    assert(no == k)\r\n\r\n    local data, err = fn(self, k, size)\r\n    if not data then error(err) end\r\n\r\n    return k, data\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "k = next(lst, k)",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "if not k then return nil end",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "local status, err = self:cmd(\"LIST\",k)",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "if status == false then return iter() end",
    "type": "statement:if"
  }, {
    "id": 267,
    "text": "if not status then return error(err) end",
    "type": "statement:if"
  }, {
    "id": 268,
    "text": "local no, size = split_2_numbers(err)",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "if not (no and size) then return error(\"Wrong Response:\" .. err) end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "assert(no == k)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "local data, err = fn(self, k, size)",
    "type": "statement:localassign"
  }, {
    "id": 272,
    "text": "if not data then error(err) end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 274,
    "text": "function ()\r\n    k = next(lst, k)\r\n    if not k then return nil end\r\n\r\n    -- skip deleted messages ?\r\n    local status, err = self:cmd(\"LIST\",k)\r\n    if status == false then return iter() end -- next message\r\n    if not status then return error(err) end\r\n    local no, size = split_2_numbers(err)\r\n    if not (no and size) then return error(\"Wrong Response:\" .. err) end\r\n    assert(no == k)\r\n\r\n    local data, err = fn(self, k, size)\r\n    if not data then error(err) end\r\n\r\n    return k, data\r\n  end",
    "type": "function"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "function pop3:retrs()\r\n  return self:make_iter(self.retr)\r\nend",
    "type": "function"
  }, {
    "id": 277,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 278,
    "text": "function pop3:tops(n)\r\n  return self:make_iter(function(self, msgid)\r\n    return self:top(msgid, n)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 279,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 280,
    "text": "function pop3:messages()\r\n  return self:make_iter(self.message)\r\nend",
    "type": "function"
  }, {
    "id": 281,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 282,
    "text": "function M.new(...)\r\n  return pop3:new(...)\r\nend",
    "type": "function"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function( ch ) \r\n        return string.char( bxor( ch:byte(), b ) ) \r\n      end",
    "type": "function"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "function(self, msgid)\r\n    return self:top(msgid, n)\r\n  end",
    "type": "function"
  }, {
    "id": 287,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 288,
    "text": "",
    "type": "function container"
  }, {
    "id": 289,
    "text": "message",
    "type": "global function"
  }, {
    "id": 290,
    "text": "new",
    "type": "global function"
  }, {
    "id": 291,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 292,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 293,
    "text": "find",
    "type": "global function"
  }, {
    "id": 294,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 295,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 296,
    "text": "cnn_fn",
    "type": "global function"
  }, {
    "id": 297,
    "text": "digest",
    "type": "global function"
  }, {
    "id": 298,
    "text": "next",
    "type": "global function"
  }, {
    "id": 299,
    "text": "message",
    "type": "global function"
  }, {
    "id": 300,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 301,
    "text": "sumhexa",
    "type": "global function"
  }, {
    "id": 302,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 303,
    "text": "hash_dig",
    "type": "global function"
  }, {
    "id": 304,
    "text": "char",
    "type": "global function"
  }, {
    "id": 305,
    "text": "crypto.hmac.digest",
    "type": "global function"
  }, {
    "id": 306,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 307,
    "text": "hash_sum",
    "type": "global function"
  }, {
    "id": 308,
    "text": "hash",
    "type": "global function"
  }, {
    "id": 309,
    "text": "b64dec",
    "type": "global function"
  }, {
    "id": 310,
    "text": "error",
    "type": "global function"
  }, {
    "id": 311,
    "text": "match",
    "type": "global function"
  }, {
    "id": 312,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 313,
    "text": "digest",
    "type": "global function"
  }, {
    "id": 314,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 315,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 316,
    "text": "b64enc",
    "type": "global function"
  }, {
    "id": 317,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 318,
    "text": "bxor",
    "type": "global function"
  }, {
    "id": 319,
    "text": "sum",
    "type": "global function"
  }, {
    "id": 320,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "local variable"
  }, {
    "id": 322,
    "text": "",
    "type": "local variable"
  }, {
    "id": 323,
    "text": "",
    "type": "local variable"
  }, {
    "id": 324,
    "text": "",
    "type": "variable container"
  }, {
    "id": 325,
    "text": "",
    "type": "require container"
  }, {
    "id": 326,
    "text": "",
    "type": "local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 330,
    "text": "",
    "type": "local variable"
  }, {
    "id": 331,
    "text": "",
    "type": "local variable"
  }, {
    "id": 332,
    "text": "",
    "type": "local variable"
  }, {
    "id": 333,
    "text": "",
    "type": "n/a"
  }, {
    "id": 334,
    "text": "",
    "type": "local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "local variable"
  }, {
    "id": 336,
    "text": "",
    "type": "local variable"
  }, {
    "id": 337,
    "text": "",
    "type": "local variable"
  }, {
    "id": 338,
    "text": "",
    "type": "n/a"
  }, {
    "id": 339,
    "text": "",
    "type": "local variable"
  }, {
    "id": 340,
    "text": "",
    "type": "n/a"
  }, {
    "id": 341,
    "text": "",
    "type": "local variable"
  }, {
    "id": 342,
    "text": "",
    "type": "n/a"
  }, {
    "id": 343,
    "text": "",
    "type": "local variable"
  }, {
    "id": 344,
    "text": "",
    "type": "local variable"
  }, {
    "id": 345,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 346,
    "text": "",
    "type": "local variable"
  }, {
    "id": 347,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 348,
    "text": "",
    "type": "global variable"
  }, {
    "id": 349,
    "text": "",
    "type": "n/a"
  }, {
    "id": 350,
    "text": "",
    "type": "global variable"
  }, {
    "id": 351,
    "text": "",
    "type": "n/a"
  }, {
    "id": 352,
    "text": "",
    "type": "global variable"
  }, {
    "id": 353,
    "text": "",
    "type": "n/a"
  }, {
    "id": 354,
    "text": "",
    "type": "interface container"
  }, {
    "id": 355,
    "text": "",
    "type": "interface"
  }, {
    "id": 356,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 357,
    "text": "",
    "type": "require local variable"
  } ]
}