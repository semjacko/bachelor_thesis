{
  "_filename": "utils.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-pop3/test/utils.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 7
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 7
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 7
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 7
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 7
  }, {
    "from": 52,
    "label": "has",
    "to": 7
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 7
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 60,
    "label": "has",
    "to": 69
  }, {
    "from": 60,
    "label": "has",
    "to": 7
  }, {
    "from": 60,
    "label": "has",
    "to": 70
  }, {
    "from": 73,
    "label": "has",
    "to": 7
  }, {
    "from": 73,
    "label": "has",
    "to": 7
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 7
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 52,
    "label": "calls",
    "to": 89
  }, {
    "from": 11,
    "label": "calls",
    "to": 82
  }, {
    "from": 35,
    "label": "calls",
    "to": 82
  }, {
    "from": 23,
    "label": "calls",
    "to": 88
  }, {
    "from": 23,
    "label": "calls",
    "to": 88
  }, {
    "from": 46,
    "label": "calls",
    "to": 84
  }, {
    "from": 40,
    "label": "calls",
    "to": 83
  }, {
    "from": 60,
    "label": "calls",
    "to": 83
  }, {
    "from": 17,
    "label": "calls",
    "to": 23
  }, {
    "from": 11,
    "label": "calls",
    "to": 9
  }, {
    "from": 52,
    "label": "calls",
    "to": 87
  }, {
    "from": 9,
    "label": "calls",
    "to": 3
  }, {
    "from": 43,
    "label": "calls",
    "to": 92
  }, {
    "from": 46,
    "label": "calls",
    "to": 86
  }, {
    "from": 11,
    "label": "calls",
    "to": 93
  }, {
    "from": 60,
    "label": "calls",
    "to": 93
  }, {
    "from": 58,
    "label": "calls",
    "to": 85
  }, {
    "from": 60,
    "label": "calls",
    "to": 85
  }, {
    "from": 35,
    "label": "calls",
    "to": 90
  }, {
    "from": 73,
    "label": "calls",
    "to": 94
  }, {
    "from": 11,
    "label": "calls",
    "to": 35
  }, {
    "from": 40,
    "label": "calls",
    "to": 35
  }, {
    "from": 43,
    "label": "calls",
    "to": 35
  }, {
    "from": 50,
    "label": "calls",
    "to": 35
  }, {
    "from": 23,
    "label": "calls",
    "to": 17
  }, {
    "from": 17,
    "label": "calls",
    "to": 91
  }, {
    "from": 17,
    "label": "calls",
    "to": 91
  }, {
    "from": 60,
    "label": "calls",
    "to": 91
  }, {
    "from": 60,
    "label": "calls",
    "to": 91
  }, {
    "from": 79,
    "label": "calls",
    "to": 95
  }, {
    "from": 79,
    "label": "calls",
    "to": 95
  }, {
    "from": 3,
    "label": "calls",
    "to": 81
  }, {
    "from": 50,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "contains",
    "to": 79
  }, {
    "from": 79,
    "label": "declares",
    "to": 3
  }, {
    "from": 79,
    "label": "declares",
    "to": 9
  }, {
    "from": 79,
    "label": "declares",
    "to": 11
  }, {
    "from": 79,
    "label": "declares",
    "to": 17
  }, {
    "from": 79,
    "label": "declares",
    "to": 23
  }, {
    "from": 79,
    "label": "declares",
    "to": 29
  }, {
    "from": 79,
    "label": "declares",
    "to": 35
  }, {
    "from": 79,
    "label": "declares",
    "to": 40
  }, {
    "from": 79,
    "label": "declares",
    "to": 43
  }, {
    "from": 79,
    "label": "declares",
    "to": 46
  }, {
    "from": 79,
    "label": "declares",
    "to": 50
  }, {
    "from": 79,
    "label": "declares",
    "to": 52
  }, {
    "from": 79,
    "label": "declares",
    "to": 58
  }, {
    "from": 79,
    "label": "declares",
    "to": 60
  }, {
    "from": 79,
    "label": "declares",
    "to": 71
  }, {
    "from": 79,
    "label": "declares",
    "to": 72
  }, {
    "from": 79,
    "label": "declares",
    "to": 73
  }, {
    "from": 79,
    "label": "declares",
    "to": 75
  }, {
    "from": 79,
    "label": "declares",
    "to": 77
  }, {
    "from": 96,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 97
  }, {
    "from": 2,
    "label": "contains",
    "to": 98
  }, {
    "from": 97,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 97,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 97,
    "label": "initializes",
    "to": 103
  }, {
    "from": 97,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 97,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 97,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 98,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 98,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 80
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pop3",
    "type": "module"
  }, {
    "id": 2,
    "text": "utils",
    "type": "module"
  }, {
    "id": 3,
    "text": "function new_message(...)\r\n  local msg = pop3.message(...)\r\n  msg:set_eol('\\r\\n')\r\n  msg:set_cp('windows-1251')\r\n  return msg\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local msg = pop3.message(...)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "msg:set_eol('\\r\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "msg:set_cp('windows-1251')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function load_msg_table(t)\r\n  return new_message(t)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function load_msg_file(f)\r\n  local m = {}\r\n  local data = assert(read_file(f))\r\n  for str in data:gmatch(\"(.-)\\r?\\n\") do\r\n    table.insert(m,str)\r\n  end\r\n  return load_msg_table(m)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local m = {}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local data = assert(read_file(f))",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "for str in data:gmatch(\"(.-)\\r?\\n\") do\r\n    table.insert(m,str)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "table.insert(m,str)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function cmp_v(v1,v2)\r\n  local flag = true\r\n  if type(v1) == 'table' then\r\n    flag = (type(v2) == 'table') and cmp_t(v1, v2)\r\n  else\r\n    flag = (v1 == v2)\r\n  end\r\n  return flag\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local flag = true",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if type(v1) == 'table' then\r\n    flag = (type(v2) == 'table') and cmp_t(v1, v2)\r\n  else\r\n    flag = (v1 == v2)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "flag = (type(v2) == 'table') and cmp_t(v1, v2)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "flag = (v1 == v2)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function cmp_t(t1,t2)\r\n  for k in pairs(t2)do\r\n    if t1[k] == nil then\r\n      return false\r\n    end\r\n  end\r\n  for k,v in pairs(t1)do\r\n    if not cmp_v(t2[k],v) then \r\n      return false \r\n    end\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "for k in pairs(t2)do\r\n    if t1[k] == nil then\r\n      return false\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "if t1[k] == nil then\r\n      return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "for k,v in pairs(t1)do\r\n    if not cmp_v(t2[k],v) then \r\n      return false \r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "if not cmp_v(t2[k],v) then \r\n      return false \r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function path_join(...)\r\n  local t = {...}\r\n  local result = t[1]\r\n  for i = 2, #t do result = result .. DIRSEP .. t[i] end\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local t = {...}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local result = t[1]",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "for i = 2, #t do result = result .. DIRSEP .. t[i] end",
    "type": "statement:numericfor"
  }, {
    "id": 33,
    "text": "result = result .. DIRSEP .. t[i]",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function read_file(path)\r\n  local f = assert(io.open(path, 'rb'))\r\n  local str = f:read('*all')\r\n  f:close()\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local f = assert(io.open(path, 'rb'))",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local str = f:read('*all')",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function assert_str_file(str, fname, msg)\r\n  assert_equal(str, read_file(fname), msg)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert_equal(str, read_file(fname), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function assert_not_str_file(str, fname, msg)\r\n  assert_not_equal(str, read_file(fname), msg)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "assert_not_equal(str, read_file(fname), msg)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function str_line_iter(str, nl)\r\n  return coroutine.wrap(function()\r\n    for line in str:gmatch(\"(.-)\"..nl)do\r\n      coroutine.yield(line)\r\n    end\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "for line in str:gmatch(\"(.-)\"..nl)do\r\n      coroutine.yield(line)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "coroutine.yield(line)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function file_line_iter(path, nl)\r\n  return str_line_iter(read_file(path),nl)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function cmp_lines(it1, it2)\r\n  while true do \r\n    local line = it1()\r\n    if line ~= it2() then return false end\r\n    if line == nil then return true end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "while true do \r\n    local line = it1()\r\n    if line ~= it2() then return false end\r\n    if line == nil then return true end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 54,
    "text": "local line = it1()",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if line ~= it2() then return false end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "if line == nil then return true end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function test_server:receive()\r\n  return table.remove(self.out_buf,1)\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function test_server:send(stuff)\r\n  local v = table.remove(self.in_buf,1)\r\n  \r\n  if type(v) == 'table' then \r\n    local i = v[2]\r\n    if type(i) == 'string' then i = {i} end\r\n    for k = #i, 1, -1 do \r\n      table.insert(self.out_buf,1,i[k])\r\n    end\r\n    v = v[1]\r\n  end\r\n  assert_equal(v, stuff)\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local v = table.remove(self.in_buf,1)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if type(v) == 'table' then \r\n    local i = v[2]\r\n    if type(i) == 'string' then i = {i} end\r\n    for k = #i, 1, -1 do \r\n      table.insert(self.out_buf,1,i[k])\r\n    end\r\n    v = v[1]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "local i = v[2]",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if type(i) == 'string' then i = {i} end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "i = {i}",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "for k = #i, 1, -1 do \r\n      table.insert(self.out_buf,1,i[k])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 67,
    "text": "table.insert(self.out_buf,1,i[k])",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "v = v[1]",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "assert_equal(v, stuff)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function test_server:close() end",
    "type": "function"
  }, {
    "id": 72,
    "text": "function test_server:settimeout() end",
    "type": "function"
  }, {
    "id": 73,
    "text": "function new_test_server(t) \r\n  return function(host, port)\r\n    return setmetatable({\r\n      out_buf = t.o;\r\n      in_buf  = t.i;\r\n    }, {__index=test_server})\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function()\r\n    for line in str:gmatch(\"(.-)\"..nl)do\r\n      coroutine.yield(line)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function(host, port)\r\n    return setmetatable({\r\n      out_buf = t.o;\r\n      in_buf  = t.i;\r\n    }, {__index=test_server})\r\n  end",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "",
    "type": "function container"
  }, {
    "id": 80,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 81,
    "text": "message",
    "type": "global function"
  }, {
    "id": 82,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 83,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 84,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 85,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 86,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 87,
    "text": "it2",
    "type": "global function"
  }, {
    "id": 88,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 89,
    "text": "it1",
    "type": "global function"
  }, {
    "id": 90,
    "text": "open",
    "type": "global function"
  }, {
    "id": 91,
    "text": "type",
    "type": "global function"
  }, {
    "id": 92,
    "text": "assert_not_equal",
    "type": "global function"
  }, {
    "id": 93,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 94,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 95,
    "text": "require",
    "type": "global function"
  }, {
    "id": 96,
    "text": "",
    "type": "global variable"
  }, {
    "id": 97,
    "text": "",
    "type": "variable container"
  }, {
    "id": 98,
    "text": "",
    "type": "require container"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 106,
    "text": "",
    "type": "global variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "global variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  } ]
}