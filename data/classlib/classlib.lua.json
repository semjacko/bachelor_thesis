{
  "_filename": "classlib.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/classlib/classlib.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 6,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 11
  }, {
    "from": 19,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 29,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 23,
    "label": "has",
    "to": 45
  }, {
    "from": 23,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 23,
    "label": "has",
    "to": 3
  }, {
    "from": 23,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 3
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 3
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 3
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 55
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 56
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 57
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 3
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 63,
    "label": "has",
    "to": 3
  }, {
    "from": 63,
    "label": "has",
    "to": 3
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 71,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 83
  }, {
    "from": 85,
    "label": "has",
    "to": 3
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 3
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 3
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 3
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 3
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 95,
    "label": "has",
    "to": 30
  }, {
    "from": 95,
    "label": "has",
    "to": 104
  }, {
    "from": 95,
    "label": "has",
    "to": 31
  }, {
    "from": 95,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 105,
    "label": "has",
    "to": 112
  }, {
    "from": 105,
    "label": "has",
    "to": 113
  }, {
    "from": 105,
    "label": "has",
    "to": 114
  }, {
    "from": 105,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 116,
    "label": "has",
    "to": 124
  }, {
    "from": 116,
    "label": "has",
    "to": 125
  }, {
    "from": 116,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 3
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 126,
    "label": "has",
    "to": 131
  }, {
    "from": 126,
    "label": "has",
    "to": 132
  }, {
    "from": 95,
    "label": "has",
    "to": 133
  }, {
    "from": 95,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 95,
    "label": "has",
    "to": 136
  }, {
    "from": 95,
    "label": "has",
    "to": 137
  }, {
    "from": 95,
    "label": "has",
    "to": 3
  }, {
    "from": 95,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 3
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 3
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 3
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 3
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 4
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 3
  }, {
    "from": 151,
    "label": "has",
    "to": 142
  }, {
    "from": 151,
    "label": "has",
    "to": 143
  }, {
    "from": 151,
    "label": "has",
    "to": 3
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 71,
    "label": "calls",
    "to": 71
  }, {
    "from": 63,
    "label": "calls",
    "to": 71
  }, {
    "from": 95,
    "label": "calls",
    "to": 160
  }, {
    "from": 95,
    "label": "calls",
    "to": 160
  }, {
    "from": 145,
    "label": "calls",
    "to": 160
  }, {
    "from": 6,
    "label": "calls",
    "to": 156
  }, {
    "from": 6,
    "label": "calls",
    "to": 156
  }, {
    "from": 95,
    "label": "calls",
    "to": 82
  }, {
    "from": 145,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 157
  }, {
    "from": 6,
    "label": "calls",
    "to": 155
  }, {
    "from": 6,
    "label": "calls",
    "to": 155
  }, {
    "from": 95,
    "label": "calls",
    "to": 159
  }, {
    "from": 23,
    "label": "calls",
    "to": 23
  }, {
    "from": 49,
    "label": "calls",
    "to": 23
  }, {
    "from": 53,
    "label": "calls",
    "to": 61
  }, {
    "from": 53,
    "label": "calls",
    "to": 61
  }, {
    "from": 23,
    "label": "calls",
    "to": 161
  }, {
    "from": 95,
    "label": "calls",
    "to": 161
  }, {
    "from": 141,
    "label": "calls",
    "to": 158
  }, {
    "from": 153,
    "label": "calls",
    "to": 163
  }, {
    "from": 23,
    "label": "calls",
    "to": 163
  }, {
    "from": 153,
    "label": "calls",
    "to": 163
  }, {
    "from": 95,
    "label": "calls",
    "to": 163
  }, {
    "from": 87,
    "label": "calls",
    "to": 85
  }, {
    "from": 91,
    "label": "calls",
    "to": 85
  }, {
    "from": 93,
    "label": "calls",
    "to": 85
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 153,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 165
  }, {
    "from": 61,
    "label": "calls",
    "to": 165
  }, {
    "from": 82,
    "label": "calls",
    "to": 165
  }, {
    "from": 85,
    "label": "calls",
    "to": 165
  }, {
    "from": 87,
    "label": "calls",
    "to": 165
  }, {
    "from": 95,
    "label": "calls",
    "to": 165
  }, {
    "from": 95,
    "label": "calls",
    "to": 165
  }, {
    "from": 61,
    "label": "calls",
    "to": 166
  }, {
    "from": 23,
    "label": "calls",
    "to": 164
  }, {
    "from": 23,
    "label": "calls",
    "to": 164
  }, {
    "from": 53,
    "label": "calls",
    "to": 164
  }, {
    "from": 95,
    "label": "calls",
    "to": 164
  }, {
    "from": 95,
    "label": "calls",
    "to": 164
  }, {
    "from": 95,
    "label": "calls",
    "to": 162
  }, {
    "from": 1,
    "label": "contains",
    "to": 153
  }, {
    "from": 153,
    "label": "declares",
    "to": 2
  }, {
    "from": 153,
    "label": "declares",
    "to": 6
  }, {
    "from": 153,
    "label": "declares",
    "to": 19
  }, {
    "from": 153,
    "label": "declares",
    "to": 21
  }, {
    "from": 153,
    "label": "declares",
    "to": 23
  }, {
    "from": 153,
    "label": "declares",
    "to": 49
  }, {
    "from": 153,
    "label": "declares",
    "to": 53
  }, {
    "from": 153,
    "label": "declares",
    "to": 61
  }, {
    "from": 153,
    "label": "declares",
    "to": 63
  }, {
    "from": 153,
    "label": "declares",
    "to": 71
  }, {
    "from": 153,
    "label": "declares",
    "to": 73
  }, {
    "from": 153,
    "label": "declares",
    "to": 82
  }, {
    "from": 153,
    "label": "declares",
    "to": 85
  }, {
    "from": 153,
    "label": "declares",
    "to": 87
  }, {
    "from": 153,
    "label": "declares",
    "to": 91
  }, {
    "from": 153,
    "label": "declares",
    "to": 93
  }, {
    "from": 153,
    "label": "declares",
    "to": 95
  }, {
    "from": 153,
    "label": "declares",
    "to": 139
  }, {
    "from": 153,
    "label": "declares",
    "to": 141
  }, {
    "from": 153,
    "label": "declares",
    "to": 145
  }, {
    "from": 153,
    "label": "declares",
    "to": 148
  }, {
    "from": 153,
    "label": "declares",
    "to": 150
  }, {
    "from": 153,
    "label": "declares",
    "to": 151
  }, {
    "from": 167,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 168
  }, {
    "from": 1,
    "label": "contains",
    "to": 169
  }, {
    "from": 168,
    "label": "initializes",
    "to": 170
  }, {
    "from": 168,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 172,
    "label": "assigns",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 172,
    "label": "assigns",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 172,
    "label": "assigns",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 172,
    "label": "assigns",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 172,
    "label": "assigns",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 172,
    "label": "assigns",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 172,
    "label": "assigns",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 172,
    "label": "assigns",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 172,
    "label": "assigns",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 172,
    "label": "assigns",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 172,
    "label": "assigns",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 168,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 196,
    "label": "assigns",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 196,
    "label": "assigns",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 168,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 168,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 168,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 168,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 167,
    "label": "requires",
    "to": 1
  }, {
    "from": 167,
    "label": "requires",
    "to": 1
  }, {
    "from": 167,
    "label": "requires",
    "to": 1
  }, {
    "from": 209,
    "label": "contains",
    "to": 154
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "classlib",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function invalid(operation)\r\n\t\treturn function()\r\n\t\t\terror('Invalid ' .. operation .. ' on ambiguous')\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "error('Invalid ' .. operation .. ' on ambiguous')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function class_mt:__newindex(name, value)\r\n\r\n\t-- Rename special user-set attributes\r\n\tif rename[name] then name = rename[name] end\r\n\r\n\t-- __user_get() needs an __index() handler\r\n\tif name == '__user_get' then\r\n\t\tself.__index = value and function(obj, k)\r\n\t\t\tlocal v = self[k]\r\n\t\t\tif v == nil and not reserved[k] then v = value(obj, k) end\r\n\t\t\treturn v\r\n\t\tend or self\r\n\r\n\t-- __user_set() needs a __newindex() handler\r\n\telseif name == '__user_set' then\r\n\t\tself.__newindex = value and function(obj, k, v)\r\n\t\t\tif reserved[k] or not value(obj, k, v) then rawset(obj, k, v) end\r\n\t\tend or nil\r\n\r\n\tend\r\n\r\n\t-- Assign the attribute\r\n\trawset(self, name, value)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if rename[name] then name = rename[name] end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "name = rename[name]",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if name == '__user_get' then\r\n\t\tself.__index = value and function(obj, k)\r\n\t\t\tlocal v = self[k]\r\n\t\t\tif v == nil and not reserved[k] then v = value(obj, k) end\r\n\t\t\treturn v\r\n\t\tend or self\r\n\r\n\t-- __user_set() needs a __newindex() handler\r\n\telseif name == '__user_set' then\r\n\t\tself.__newindex = value and function(obj, k, v)\r\n\t\t\tif reserved[k] or not value(obj, k, v) then rawset(obj, k, v) end\r\n\t\tend or nil\r\n\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "self.__index = value and function(obj, k)\r\n\t\t\tlocal v = self[k]\r\n\t\t\tif v == nil and not reserved[k] then v = value(obj, k) end\r\n\t\t\treturn v\r\n\t\tend or self",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local v = self[k]",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if v == nil and not reserved[k] then v = value(obj, k) end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "v = value(obj, k)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "self.__newindex = value and function(obj, k, v)\r\n\t\t\tif reserved[k] or not value(obj, k, v) then rawset(obj, k, v) end\r\n\t\tend or nil",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if reserved[k] or not value(obj, k, v) then rawset(obj, k, v) end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "rawset(obj, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "rawset(self, name, value)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function(obj, k)\r\n\t\t\tlocal v = self[k]\r\n\t\t\tif v == nil and not reserved[k] then v = value(obj, k) end\r\n\t\t\treturn v\r\n\t\tend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function(obj, k, v)\r\n\t\t\tif reserved[k] or not value(obj, k, v) then rawset(obj, k, v) end\r\n\t\tend",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function build(class, shared_objs, shared)\r\n\r\n\t-- If shared, look in the repository of shared objects\r\n\t-- and return any previous instance of this class.\r\n\tif shared then\r\n\t\tlocal prev_instance = shared_objs[class]\r\n\t\tif prev_instance then return prev_instance end\r\n\tend\r\n\r\n\t-- Create new object\r\n\tlocal obj = { __type = 'object' }\r\n\r\n\t-- Build child objects if there are base classes\r\n\tlocal nbases = #class.__bases\r\n\tif nbases > 0 then\r\n\r\n\t\t-- Repository for storing inherited base objects\r\n\t\tlocal inherited = {}\r\n\r\n\t\t-- List of ambiguous keys\r\n\t\tlocal ambiguous_keys = {}\r\n\r\n\t\t-- Build child objects for each base class\r\n\t\tfor i = 1, nbases do\r\n\t\t\tlocal base = class.__bases[i]\r\n\t\t\tlocal child = build(base, shared_objs, class.__shared[base])\r\n\t\t\tobj[base.__name] = child\r\n\r\n\t\t\t-- Get inherited grandchildren from this child\r\n\t\t\tfor c, grandchild in pairs(child) do\r\n\r\n\t\t\t\t-- We can only accept one inherited grandchild of each class,\r\n\t\t\t\t-- otherwise this is an ambiguous reference\r\n\t\t\t\tif not ambiguous_keys[c] then\r\n\t\t\t\t\tif not inherited[c] then inherited[c] = grandchild\r\n\t\t\t\t\telseif inherited[c] ~= grandchild then\r\n\t\t\t\t\t\tinherited[c] = ambiguous\r\n\t\t\t\t\t\ttable.insert(ambiguous_keys, c)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\t-- Accept inherited grandchildren if they don't collide with\r\n\t\t-- direct children\r\n\t\tfor k, v in pairs(inherited) do\r\n\t\t\tif not obj[k] then obj[k] = v end\r\n\t\tend\r\n\r\n\tend\r\n\r\n\t-- Object is ready\r\n\tsetmetatable(obj, class)\r\n\r\n\t-- If shared, add it to the repository of shared objects\r\n\tif shared then shared_objs[class] = obj end\r\n\r\n\treturn obj\r\n\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "if shared then\r\n\t\tlocal prev_instance = shared_objs[class]\r\n\t\tif prev_instance then return prev_instance end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local prev_instance = shared_objs[class]",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if prev_instance then return prev_instance end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local obj = { __type = 'object' }",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local nbases = #class.__bases",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if nbases > 0 then\r\n\r\n\t\t-- Repository for storing inherited base objects\r\n\t\tlocal inherited = {}\r\n\r\n\t\t-- List of ambiguous keys\r\n\t\tlocal ambiguous_keys = {}\r\n\r\n\t\t-- Build child objects for each base class\r\n\t\tfor i = 1, nbases do\r\n\t\t\tlocal base = class.__bases[i]\r\n\t\t\tlocal child = build(base, shared_objs, class.__shared[base])\r\n\t\t\tobj[base.__name] = child\r\n\r\n\t\t\t-- Get inherited grandchildren from this child\r\n\t\t\tfor c, grandchild in pairs(child) do\r\n\r\n\t\t\t\t-- We can only accept one inherited grandchild of each class,\r\n\t\t\t\t-- otherwise this is an ambiguous reference\r\n\t\t\t\tif not ambiguous_keys[c] then\r\n\t\t\t\t\tif not inherited[c] then inherited[c] = grandchild\r\n\t\t\t\t\telseif inherited[c] ~= grandchild then\r\n\t\t\t\t\t\tinherited[c] = ambiguous\r\n\t\t\t\t\t\ttable.insert(ambiguous_keys, c)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\r\n\t\t-- Accept inherited grandchildren if they don't collide with\r\n\t\t-- direct children\r\n\t\tfor k, v in pairs(inherited) do\r\n\t\t\tif not obj[k] then obj[k] = v end\r\n\t\tend\r\n\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local inherited = {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local ambiguous_keys = {}",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "for i = 1, nbases do\r\n\t\t\tlocal base = class.__bases[i]\r\n\t\t\tlocal child = build(base, shared_objs, class.__shared[base])\r\n\t\t\tobj[base.__name] = child\r\n\r\n\t\t\t-- Get inherited grandchildren from this child\r\n\t\t\tfor c, grandchild in pairs(child) do\r\n\r\n\t\t\t\t-- We can only accept one inherited grandchild of each class,\r\n\t\t\t\t-- otherwise this is an ambiguous reference\r\n\t\t\t\tif not ambiguous_keys[c] then\r\n\t\t\t\t\tif not inherited[c] then inherited[c] = grandchild\r\n\t\t\t\t\telseif inherited[c] ~= grandchild then\r\n\t\t\t\t\t\tinherited[c] = ambiguous\r\n\t\t\t\t\t\ttable.insert(ambiguous_keys, c)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 33,
    "text": "local base = class.__bases[i]",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local child = build(base, shared_objs, class.__shared[base])",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "obj[base.__name] = child",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "for c, grandchild in pairs(child) do\r\n\r\n\t\t\t\t-- We can only accept one inherited grandchild of each class,\r\n\t\t\t\t-- otherwise this is an ambiguous reference\r\n\t\t\t\tif not ambiguous_keys[c] then\r\n\t\t\t\t\tif not inherited[c] then inherited[c] = grandchild\r\n\t\t\t\t\telseif inherited[c] ~= grandchild then\r\n\t\t\t\t\t\tinherited[c] = ambiguous\r\n\t\t\t\t\t\ttable.insert(ambiguous_keys, c)\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "if not ambiguous_keys[c] then\r\n\t\t\t\t\tif not inherited[c] then inherited[c] = grandchild\r\n\t\t\t\t\telseif inherited[c] ~= grandchild then\r\n\t\t\t\t\t\tinherited[c] = ambiguous\r\n\t\t\t\t\t\ttable.insert(ambiguous_keys, c)\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "if not inherited[c] then inherited[c] = grandchild\r\n\t\t\t\t\telseif inherited[c] ~= grandchild then\r\n\t\t\t\t\t\tinherited[c] = ambiguous\r\n\t\t\t\t\t\ttable.insert(ambiguous_keys, c)\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "inherited[c] = grandchild",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "inherited[c] = ambiguous",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "table.insert(ambiguous_keys, c)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "for k, v in pairs(inherited) do\r\n\t\t\tif not obj[k] then obj[k] = v end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 43,
    "text": "if not obj[k] then obj[k] = v end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "obj[k] = v",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "setmetatable(obj, class)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "if shared then shared_objs[class] = obj end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "shared_objs[class] = obj",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function class_mt:__call(...)\r\n\tlocal obj = build(self, {}, false)\r\n\tobj:__init(...)\r\n\treturn obj\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "local obj = build(self, {}, false)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "obj:__init(...)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function class_mt:implements(class)\r\n\r\n\t-- Auxiliary function to determine if something is callable\r\n\tlocal function is_callable(v)\r\n\t\tif v == ambiguous then return false end\r\n\t\tif type(v) == 'function' then return true end\r\n\t\tlocal mt = getmetatable(v)\r\n\t\treturn mt and type(mt.__call) == 'function'\r\n\tend\r\n\r\n\t-- Check we have all the target's callables (except reserved names)\r\n\tfor k, v in pairs(class) do\r\n\t\tif not reserved[k] and is_callable(v) and not is_callable(self[k]) then\r\n\t\t\treturn false\r\n\t\tend\r\n\tend\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local function is_callable(v)\r\n\t\tif v == ambiguous then return false end\r\n\t\tif type(v) == 'function' then return true end\r\n\t\tlocal mt = getmetatable(v)\r\n\t\treturn mt and type(mt.__call) == 'function'\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 55,
    "text": "if v == ambiguous then return false end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "if type(v) == 'function' then return true end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "local mt = getmetatable(v)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "for k, v in pairs(class) do\r\n\t\tif not reserved[k] and is_callable(v) and not is_callable(self[k]) then\r\n\t\t\treturn false\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 59,
    "text": "if not reserved[k] and is_callable(v) and not is_callable(self[k]) then\r\n\t\t\treturn false\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function is_callable(v)\r\n\t\tif v == ambiguous then return false end\r\n\t\tif type(v) == 'function' then return true end\r\n\t\tlocal mt = getmetatable(v)\r\n\t\treturn mt and type(mt.__call) == 'function'\r\n\tend",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function class_mt:is_a(class)\r\n\r\n\t-- If our class is the target class this is trivially true\r\n\tif self.__class == class then return true end\r\n\r\n\t-- Auxiliary function to determine if a target class is one of a list of\r\n\t-- classes or one of their bases\r\n\tlocal function find(target, classlist)\r\n\t\tfor i = 1, #classlist do\r\n\t\t\tlocal class = classlist[i]\r\n\t\t\tif class == target or find(target, class.__bases) then\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn false\r\n\tend\r\n\r\n\t-- Check that we derive from the target\r\n\tif not find(class, self.__bases) then return false end\r\n\r\n\t-- Check that we implement the target's interface.\r\n\treturn self:implements(class)\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "if self.__class == class then return true end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "local function find(target, classlist)\r\n\t\tfor i = 1, #classlist do\r\n\t\t\tlocal class = classlist[i]\r\n\t\t\tif class == target or find(target, class.__bases) then\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn false\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 66,
    "text": "for i = 1, #classlist do\r\n\t\t\tlocal class = classlist[i]\r\n\t\t\tif class == target or find(target, class.__bases) then\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 67,
    "text": "local class = classlist[i]",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if class == target or find(target, class.__bases) then\r\n\t\t\t\treturn true\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "if not find(class, self.__bases) then return false end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "local function find(target, classlist)\r\n\t\tfor i = 1, #classlist do\r\n\t\t\tlocal class = classlist[i]\r\n\t\t\tif class == target or find(target, class.__bases) then\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\tend\r\n\t\treturn false\r\n\tend",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function class_mt:__init(...)\r\n\tif self.__initialized then return end\r\n\tif self.__user_init then self:__user_init(...) end\r\n\tfor i = 1, #self.__bases do\r\n\t\tlocal base = self.__bases[i]\r\n\t\tself[base.__name]:__init(...)\r\n\tend\r\n\tself.__initialized = true\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "if self.__initialized then return end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "if self.__user_init then self:__user_init(...) end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "self:__user_init(...)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "for i = 1, #self.__bases do\r\n\t\tlocal base = self.__bases[i]\r\n\t\tself[base.__name]:__init(...)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 78,
    "text": "local base = self.__bases[i]",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "self[base.__name]:__init(...)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "self.__initialized = true",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function typeof(value)\r\n\tlocal t = type(value)\r\n\treturn t =='table' and value.__type or t\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local t = type(value)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function classof(value)\r\n\tlocal t = type(value)\r\n\treturn t == 'table' and value.__class or nil\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function classname(value)\r\n\tif not classof(value) then return nil end\r\n\tlocal name = value.__name\r\n\treturn type(name) == 'string' and name or nil\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "if not classof(value) then return nil end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "local name = value.__name",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function implements(value, class)\r\n\treturn classof(value) and value:implements(class) or false\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function is_a(value, class)\r\n\treturn classof(value) and value:is_a(class) or false\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function mt:__call(...)\r\n\r\n\tlocal arg = {...}\r\n\r\n\t-- Create a new class\r\n\tlocal c =\r\n\t{\r\n\t\t__type = 'class',\r\n\t\t__bases = {},\r\n\t\t__shared = {}\r\n\t}\r\n\tc.__class = c\r\n\tc.__index = c\r\n\r\n\t-- A first string argument sets the name of the class.\r\n\tif type(arg[1]) == 'string' then\r\n\t\tc.__name = arg[1]\r\n\t\ttable.remove(arg, 1)\r\n\telse\r\n\t\tc.__name = c\r\n\tend\r\n\r\n\t-- Repository of inherited attributes\r\n\tlocal inherited = {}\r\n\tlocal from = {}\r\n\r\n\t-- List of ambiguous keys\r\n\tlocal ambiguous_keys = {}\r\n\r\n\t-- Inherit from the base classes\r\n\tfor i = 1, #arg do\r\n\t\tlocal base = arg[i]\r\n\r\n\t\t-- Get the base and whether it is inherited in shared mode\r\n\t\tlocal basetype = typeof(base)\r\n\t\tlocal shared = basetype == 'share'\r\n\t\tassert(basetype == 'class' or shared,\r\n\t\t\t\t'Base ' .. i .. ' is not a class or shared class')\r\n\t\tif shared then base = base.__class end\r\n\r\n\t\t-- Just in case, check this base is not repeated\r\n\t\tassert(c.__shared[base] == nil, 'Base ' .. i .. ' is duplicated')\r\n\r\n\t\t-- Accept it\r\n\t\tc.__bases[i] = base\r\n\t\tc.__shared[base] = shared\r\n\r\n\t\t-- Get methods that could be inherited from this base\r\n\t\tfor k, v in pairs(base) do\r\n\r\n\t\t\t-- Skip reserved and ambiguous methods\r\n\t\t\tif type(v) == 'function' and not reserved[k] and\r\n\t\t\t\tnot ambiguous_keys[k] then\r\n\r\n\t\t\t\t-- Where does this method come from?\r\n\t\t\t\tlocal new_from\r\n\r\n\t\t\t\t-- Check if the method was inherited by the base\r\n\t\t\t\tlocal base_inherited = base.__inherited[k]\r\n\t\t\t\tif base_inherited then\r\n\r\n\t\t\t\t\t-- If it has been redefined, cancel this inheritance\r\n\t\t\t\t\tif base_inherited ~= v then\t\t-- (1)\r\n\t\t\t\t\t\tbase.__inherited[k] = nil\r\n\t\t\t\t\t\tbase.__from[k] = nil\r\n\r\n\t\t\t\t\t-- It is still inherited, get it from the original\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tnew_from = base.__from[k]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- If it is not inherited by the base, it originates there\r\n\t\t\t\tnew_from = new_from or { class = base, shared = shared }\r\n\r\n\t\t\t\t-- Accept a first-time inheritance\r\n\t\t\t\tlocal current_from = from[k]\r\n\t\t\t\tif not current_from then\r\n\t\t\t\t\tfrom[k] = new_from\r\n\t\t\t\t\tlocal origin = new_from.class\r\n\r\n\t\t\t\t\t-- We assume this is an instance method (called with\r\n\t\t\t\t\t-- self as first argument) and wrap it so that it will\r\n\t\t\t\t\t-- receive the correct base object as self. For class\r\n\t\t\t\t\t-- functions this code is unusable.\r\n\t\t\t\t\tinherited[k] = function(self, ...)\r\n\t\t\t\t\t\treturn origin[k](self[origin.__name], ...)\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t-- Methods inherited more than once are ambiguous unless\r\n\t\t\t\t-- they originate in the same shared class.\r\n\t\t\t\telseif current_from.class ~= new_from.class or\r\n\t\t\t\t\t\tnot current_from.shared or not new_from.shared then\r\n\t\t\t\t\tinherited[k] = ambiguous\r\n\t\t\t\t\ttable.insert(ambiguous_keys, k)\r\n\t\t\t\t\tfrom[k] = nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\t-- Set the metatable now, it monitors attribute setting and does some\r\n\t-- special processing for some of them.\r\n\tsetmetatable(c, class_mt)\r\n\r\n\t-- Set inherited attributes in the class, they may be redefined afterwards\r\n\tfor k, v in pairs(inherited) do c[k] = v end\t-- checked at (1)\r\n\tc.__inherited = inherited\r\n\tc.__from = from\r\n\r\n\treturn c\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "local arg = {...}",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "local c =\r\n\t{\r\n\t\t__type = 'class',\r\n\t\t__bases = {},\r\n\t\t__shared = {}\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "c.__class = c",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "c.__index = c",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "if type(arg[1]) == 'string' then\r\n\t\tc.__name = arg[1]\r\n\t\ttable.remove(arg, 1)\r\n\telse\r\n\t\tc.__name = c\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "c.__name = arg[1]",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "table.remove(arg, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "c.__name = c",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "local from = {}",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "for i = 1, #arg do\r\n\t\tlocal base = arg[i]\r\n\r\n\t\t-- Get the base and whether it is inherited in shared mode\r\n\t\tlocal basetype = typeof(base)\r\n\t\tlocal shared = basetype == 'share'\r\n\t\tassert(basetype == 'class' or shared,\r\n\t\t\t\t'Base ' .. i .. ' is not a class or shared class')\r\n\t\tif shared then base = base.__class end\r\n\r\n\t\t-- Just in case, check this base is not repeated\r\n\t\tassert(c.__shared[base] == nil, 'Base ' .. i .. ' is duplicated')\r\n\r\n\t\t-- Accept it\r\n\t\tc.__bases[i] = base\r\n\t\tc.__shared[base] = shared\r\n\r\n\t\t-- Get methods that could be inherited from this base\r\n\t\tfor k, v in pairs(base) do\r\n\r\n\t\t\t-- Skip reserved and ambiguous methods\r\n\t\t\tif type(v) == 'function' and not reserved[k] and\r\n\t\t\t\tnot ambiguous_keys[k] then\r\n\r\n\t\t\t\t-- Where does this method come from?\r\n\t\t\t\tlocal new_from\r\n\r\n\t\t\t\t-- Check if the method was inherited by the base\r\n\t\t\t\tlocal base_inherited = base.__inherited[k]\r\n\t\t\t\tif base_inherited then\r\n\r\n\t\t\t\t\t-- If it has been redefined, cancel this inheritance\r\n\t\t\t\t\tif base_inherited ~= v then\t\t-- (1)\r\n\t\t\t\t\t\tbase.__inherited[k] = nil\r\n\t\t\t\t\t\tbase.__from[k] = nil\r\n\r\n\t\t\t\t\t-- It is still inherited, get it from the original\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tnew_from = base.__from[k]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- If it is not inherited by the base, it originates there\r\n\t\t\t\tnew_from = new_from or { class = base, shared = shared }\r\n\r\n\t\t\t\t-- Accept a first-time inheritance\r\n\t\t\t\tlocal current_from = from[k]\r\n\t\t\t\tif not current_from then\r\n\t\t\t\t\tfrom[k] = new_from\r\n\t\t\t\t\tlocal origin = new_from.class\r\n\r\n\t\t\t\t\t-- We assume this is an instance method (called with\r\n\t\t\t\t\t-- self as first argument) and wrap it so that it will\r\n\t\t\t\t\t-- receive the correct base object as self. For class\r\n\t\t\t\t\t-- functions this code is unusable.\r\n\t\t\t\t\tinherited[k] = function(self, ...)\r\n\t\t\t\t\t\treturn origin[k](self[origin.__name], ...)\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t-- Methods inherited more than once are ambiguous unless\r\n\t\t\t\t-- they originate in the same shared class.\r\n\t\t\t\telseif current_from.class ~= new_from.class or\r\n\t\t\t\t\t\tnot current_from.shared or not new_from.shared then\r\n\t\t\t\t\tinherited[k] = ambiguous\r\n\t\t\t\t\ttable.insert(ambiguous_keys, k)\r\n\t\t\t\t\tfrom[k] = nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 106,
    "text": "local base = arg[i]",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "local basetype = typeof(base)",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local shared = basetype == 'share'",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "assert(basetype == 'class' or shared,\r\n\t\t\t\t'Base ' .. i .. ' is not a class or shared class')",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "if shared then base = base.__class end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "base = base.__class",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "assert(c.__shared[base] == nil, 'Base ' .. i .. ' is duplicated')",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "c.__bases[i] = base",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "c.__shared[base] = shared",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "for k, v in pairs(base) do\r\n\r\n\t\t\t-- Skip reserved and ambiguous methods\r\n\t\t\tif type(v) == 'function' and not reserved[k] and\r\n\t\t\t\tnot ambiguous_keys[k] then\r\n\r\n\t\t\t\t-- Where does this method come from?\r\n\t\t\t\tlocal new_from\r\n\r\n\t\t\t\t-- Check if the method was inherited by the base\r\n\t\t\t\tlocal base_inherited = base.__inherited[k]\r\n\t\t\t\tif base_inherited then\r\n\r\n\t\t\t\t\t-- If it has been redefined, cancel this inheritance\r\n\t\t\t\t\tif base_inherited ~= v then\t\t-- (1)\r\n\t\t\t\t\t\tbase.__inherited[k] = nil\r\n\t\t\t\t\t\tbase.__from[k] = nil\r\n\r\n\t\t\t\t\t-- It is still inherited, get it from the original\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tnew_from = base.__from[k]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- If it is not inherited by the base, it originates there\r\n\t\t\t\tnew_from = new_from or { class = base, shared = shared }\r\n\r\n\t\t\t\t-- Accept a first-time inheritance\r\n\t\t\t\tlocal current_from = from[k]\r\n\t\t\t\tif not current_from then\r\n\t\t\t\t\tfrom[k] = new_from\r\n\t\t\t\t\tlocal origin = new_from.class\r\n\r\n\t\t\t\t\t-- We assume this is an instance method (called with\r\n\t\t\t\t\t-- self as first argument) and wrap it so that it will\r\n\t\t\t\t\t-- receive the correct base object as self. For class\r\n\t\t\t\t\t-- functions this code is unusable.\r\n\t\t\t\t\tinherited[k] = function(self, ...)\r\n\t\t\t\t\t\treturn origin[k](self[origin.__name], ...)\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t-- Methods inherited more than once are ambiguous unless\r\n\t\t\t\t-- they originate in the same shared class.\r\n\t\t\t\telseif current_from.class ~= new_from.class or\r\n\t\t\t\t\t\tnot current_from.shared or not new_from.shared then\r\n\t\t\t\t\tinherited[k] = ambiguous\r\n\t\t\t\t\ttable.insert(ambiguous_keys, k)\r\n\t\t\t\t\tfrom[k] = nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "if type(v) == 'function' and not reserved[k] and\r\n\t\t\t\tnot ambiguous_keys[k] then\r\n\r\n\t\t\t\t-- Where does this method come from?\r\n\t\t\t\tlocal new_from\r\n\r\n\t\t\t\t-- Check if the method was inherited by the base\r\n\t\t\t\tlocal base_inherited = base.__inherited[k]\r\n\t\t\t\tif base_inherited then\r\n\r\n\t\t\t\t\t-- If it has been redefined, cancel this inheritance\r\n\t\t\t\t\tif base_inherited ~= v then\t\t-- (1)\r\n\t\t\t\t\t\tbase.__inherited[k] = nil\r\n\t\t\t\t\t\tbase.__from[k] = nil\r\n\r\n\t\t\t\t\t-- It is still inherited, get it from the original\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tnew_from = base.__from[k]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- If it is not inherited by the base, it originates there\r\n\t\t\t\tnew_from = new_from or { class = base, shared = shared }\r\n\r\n\t\t\t\t-- Accept a first-time inheritance\r\n\t\t\t\tlocal current_from = from[k]\r\n\t\t\t\tif not current_from then\r\n\t\t\t\t\tfrom[k] = new_from\r\n\t\t\t\t\tlocal origin = new_from.class\r\n\r\n\t\t\t\t\t-- We assume this is an instance method (called with\r\n\t\t\t\t\t-- self as first argument) and wrap it so that it will\r\n\t\t\t\t\t-- receive the correct base object as self. For class\r\n\t\t\t\t\t-- functions this code is unusable.\r\n\t\t\t\t\tinherited[k] = function(self, ...)\r\n\t\t\t\t\t\treturn origin[k](self[origin.__name], ...)\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t-- Methods inherited more than once are ambiguous unless\r\n\t\t\t\t-- they originate in the same shared class.\r\n\t\t\t\telseif current_from.class ~= new_from.class or\r\n\t\t\t\t\t\tnot current_from.shared or not new_from.shared then\r\n\t\t\t\t\tinherited[k] = ambiguous\r\n\t\t\t\t\ttable.insert(ambiguous_keys, k)\r\n\t\t\t\t\tfrom[k] = nil\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "local new_from",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local base_inherited = base.__inherited[k]",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if base_inherited then\r\n\r\n\t\t\t\t\t-- If it has been redefined, cancel this inheritance\r\n\t\t\t\t\tif base_inherited ~= v then\t\t-- (1)\r\n\t\t\t\t\t\tbase.__inherited[k] = nil\r\n\t\t\t\t\t\tbase.__from[k] = nil\r\n\r\n\t\t\t\t\t-- It is still inherited, get it from the original\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tnew_from = base.__from[k]\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "if base_inherited ~= v then\t\t-- (1)\r\n\t\t\t\t\t\tbase.__inherited[k] = nil\r\n\t\t\t\t\t\tbase.__from[k] = nil\r\n\r\n\t\t\t\t\t-- It is still inherited, get it from the original\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tnew_from = base.__from[k]\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "base.__inherited[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "base.__from[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "new_from = base.__from[k]",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "new_from = new_from or { class = base, shared = shared }",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "local current_from = from[k]",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if not current_from then\r\n\t\t\t\t\tfrom[k] = new_from\r\n\t\t\t\t\tlocal origin = new_from.class\r\n\r\n\t\t\t\t\t-- We assume this is an instance method (called with\r\n\t\t\t\t\t-- self as first argument) and wrap it so that it will\r\n\t\t\t\t\t-- receive the correct base object as self. For class\r\n\t\t\t\t\t-- functions this code is unusable.\r\n\t\t\t\t\tinherited[k] = function(self, ...)\r\n\t\t\t\t\t\treturn origin[k](self[origin.__name], ...)\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t-- Methods inherited more than once are ambiguous unless\r\n\t\t\t\t-- they originate in the same shared class.\r\n\t\t\t\telseif current_from.class ~= new_from.class or\r\n\t\t\t\t\t\tnot current_from.shared or not new_from.shared then\r\n\t\t\t\t\tinherited[k] = ambiguous\r\n\t\t\t\t\ttable.insert(ambiguous_keys, k)\r\n\t\t\t\t\tfrom[k] = nil\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "from[k] = new_from",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "local origin = new_from.class",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "inherited[k] = function(self, ...)\r\n\t\t\t\t\t\treturn origin[k](self[origin.__name], ...)\r\n\t\t\t\t\tend",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "inherited[k] = ambiguous",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "table.insert(ambiguous_keys, k)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "from[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "setmetatable(c, class_mt)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "for k, v in pairs(inherited) do c[k] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 135,
    "text": "c[k] = v",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "c.__inherited = inherited",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "c.__from = from",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function(self, ...)\r\n\t\t\t\t\t\treturn origin[k](self[origin.__name], ...)\r\n\t\t\t\t\tend",
    "type": "function"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function mt:__index(name)\r\n\treturn function(...)\r\n\t\tlocal c = class(name, ...)\r\n\t\tgetfenv()[name] = c\r\n\t\treturn c\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "local c = class(name, ...)",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "getfenv()[name] = c",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function shared(class)\r\n\tassert(typeof(class) == 'class', 'Argument is not a class')\r\n\treturn { __type = 'share', __class = class }\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "assert(typeof(class) == 'class', 'Argument is not a class')",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function()\r\n\t\t\terror('Invalid ' .. operation .. ' on ambiguous')\r\n\t\tend",
    "type": "function"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function() return 'ambiguous' end",
    "type": "function"
  }, {
    "id": 151,
    "text": "function(...)\r\n\t\tlocal c = class(name, ...)\r\n\t\tgetfenv()[name] = c\r\n\t\treturn c\r\n\tend",
    "type": "function"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "",
    "type": "function container"
  }, {
    "id": 154,
    "text": "function class(...)\r\n\r\n\tlocal arg = {...}\r\n\r\n\t-- Create a new class\r\n\tlocal c =\r\n\t{\r\n\t\t__type = 'class',\r\n\t\t__bases = {},\r\n\t\t__shared = {}\r\n\t}\r\n\tc.__class = c\r\n\tc.__index = c\r\n\r\n\t-- Repository of inherited attributes\r\n\tlocal inherited = {}\r\n\tlocal from = {}\r\n\r\n\t-- List of ambiguous keys\r\n\tlocal ambiguous_keys = {}\r\n\r\n\t-- Inherit from the base classes\r\n\tfor i = 1, #arg do\r\n\t\tlocal base = arg[i]\r\n\r\n\t\t-- Get the base and whether it is inherited in shared mode\r\n\t\tlocal basetype = typeof(base)\r\n\t\tlocal shared = basetype == 'share'\r\n\t\tassert(basetype == 'class' or shared,\r\n\t\t\t\t'Base ' .. i .. ' is not a class or shared class')\r\n\t\tif shared then base = base.__class end\r\n\r\n\t\t-- Just in case, check this base is not repeated\r\n\t\tassert(c.__shared[base] == nil, 'Base ' .. i .. ' is duplicated')\r\n\r\n\t\t-- Accept it\r\n\t\tc.__bases[i] = base\r\n\t\tc.__shared[base] = shared\r\n\r\n\t\t-- Get methods that could be inherited from this base\r\n\t\tfor k, v in pairs(base) do\r\n\r\n\t\t\t-- Skip reserved and ambiguous methods\r\n\t\t\tif type(v) == 'function' and not reserved[k] and\r\n\t\t\t\tnot ambiguous_keys[k] then\r\n\r\n\t\t\t\t-- Where does this method come from?\r\n\t\t\t\tlocal new_from\r\n\r\n\t\t\t\t-- Check if the method was inherited by the base\r\n\t\t\t\tlocal base_inherited = base.__inherited[k]\r\n\t\t\t\tif base_inherited then\r\n\r\n\t\t\t\t\t-- If it has been redefined, cancel this inheritance\r\n\t\t\t\t\tif base_inherited ~= v then\t\t-- (1)\r\n\t\t\t\t\t\tbase.__inherited[k] = nil\r\n\t\t\t\t\t\tbase.__from[k] = nil\r\n\r\n\t\t\t\t\t-- It is still inherited, get it from the original\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tnew_from = base.__from[k]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\r\n\t\t\t\t-- If it is not inherited by the base, it originates there\r\n\t\t\t\tnew_from = new_from or { class = base, shared = shared }\r\n\r\n\t\t\t\t-- Accept a first-time inheritance\r\n\t\t\t\tlocal current_from = from[k]\r\n\t\t\t\tif not current_from then\r\n\t\t\t\t\tfrom[k] = new_from\r\n\t\t\t\t\tlocal origin = new_from.class\r\n\r\n\t\t\t\t\t-- We assume this is an instance method (called with\r\n\t\t\t\t\t-- self as first argument) and wrap it so that it will\r\n\t\t\t\t\t-- receive the correct base object as self. For class\r\n\t\t\t\t\t-- functions this code is unusable.\r\n\t\t\t\t\tinherited[k] = function(self, ...)\r\n\t\t\t\t\t\treturn origin[k](self[origin], ...)\r\n\t\t\t\t\tend\r\n\r\n\t\t\t\t-- Methods inherited more than once are ambiguous unless\r\n\t\t\t\t-- they originate in the same shared class.\r\n\t\t\t\telseif current_from.class ~= new_from.class or\r\n\t\t\t\t\t\tnot current_from.shared or not new_from.shared then\r\n\t\t\t\t\tinherited[k] = ambiguous\r\n\t\t\t\t\ttable.insert(ambiguous_keys, k)\r\n\t\t\t\t\tfrom[k] = nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\t-- Set the metatable now, it monitors attribute setting and does some\r\n\t-- special processing for some of them.\r\n\tsetmetatable(c, class_mt)\r\n\r\n\t-- Set inherited attributes in the class, they may be redefined afterwards\r\n\tfor k, v in pairs(inherited) do c[k] = v end\t-- checked at (1)\r\n\tc.__inherited = inherited\r\n\tc.__from = from\r\n\r\n\treturn c\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "value",
    "type": "global function"
  }, {
    "id": 156,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 157,
    "text": "error",
    "type": "global function"
  }, {
    "id": 158,
    "text": "class",
    "type": "global function"
  }, {
    "id": 159,
    "text": "origin[k]",
    "type": "global function"
  }, {
    "id": 160,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 161,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 162,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 163,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 164,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 165,
    "text": "type",
    "type": "global function"
  }, {
    "id": 166,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 167,
    "text": "",
    "type": "global variable"
  }, {
    "id": 168,
    "text": "",
    "type": "variable container"
  }, {
    "id": 169,
    "text": "",
    "type": "require container"
  }, {
    "id": 170,
    "text": "",
    "type": "local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 173,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 174,
    "text": "",
    "type": "boolean"
  }, {
    "id": 175,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 176,
    "text": "",
    "type": "boolean"
  }, {
    "id": 177,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 178,
    "text": "",
    "type": "boolean"
  }, {
    "id": 179,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 180,
    "text": "",
    "type": "boolean"
  }, {
    "id": 181,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 182,
    "text": "",
    "type": "boolean"
  }, {
    "id": 183,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 184,
    "text": "",
    "type": "boolean"
  }, {
    "id": 185,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 186,
    "text": "",
    "type": "boolean"
  }, {
    "id": 187,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 188,
    "text": "",
    "type": "boolean"
  }, {
    "id": 189,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 190,
    "text": "",
    "type": "boolean"
  }, {
    "id": 191,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 192,
    "text": "",
    "type": "boolean"
  }, {
    "id": 193,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 194,
    "text": "",
    "type": "boolean"
  }, {
    "id": 195,
    "text": "",
    "type": "local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 197,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 198,
    "text": "",
    "type": "string"
  }, {
    "id": 199,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 200,
    "text": "",
    "type": "string"
  }, {
    "id": 201,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 202,
    "text": "",
    "type": "string"
  }, {
    "id": 203,
    "text": "",
    "type": "local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 205,
    "text": "",
    "type": "local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 207,
    "text": "",
    "type": "global variable"
  }, {
    "id": 208,
    "text": "",
    "type": "n/a"
  }, {
    "id": 209,
    "text": "",
    "type": "global variable"
  }, {
    "id": 210,
    "text": "",
    "type": "n/a"
  } ]
}