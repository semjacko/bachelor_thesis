{
  "_filename": "ANSITerminal.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/diluculum/Lua/ANSITerminal.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 21
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 21
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 21
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 21
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 56
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 63
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 12,
    "label": "calls",
    "to": 71
  }, {
    "from": 18,
    "label": "calls",
    "to": 71
  }, {
    "from": 69,
    "label": "calls",
    "to": 73
  }, {
    "from": 2,
    "label": "calls",
    "to": 72
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 23,
    "label": "calls",
    "to": 70
  }, {
    "from": 28,
    "label": "calls",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 69,
    "label": "declares",
    "to": 2
  }, {
    "from": 69,
    "label": "declares",
    "to": 9
  }, {
    "from": 69,
    "label": "declares",
    "to": 12
  }, {
    "from": 69,
    "label": "declares",
    "to": 18
  }, {
    "from": 69,
    "label": "declares",
    "to": 23
  }, {
    "from": 69,
    "label": "declares",
    "to": 28
  }, {
    "from": 69,
    "label": "declares",
    "to": 33
  }, {
    "from": 69,
    "label": "declares",
    "to": 37
  }, {
    "from": 69,
    "label": "declares",
    "to": 41
  }, {
    "from": 69,
    "label": "declares",
    "to": 45
  }, {
    "from": 69,
    "label": "declares",
    "to": 49
  }, {
    "from": 69,
    "label": "declares",
    "to": 52
  }, {
    "from": 69,
    "label": "declares",
    "to": 55
  }, {
    "from": 69,
    "label": "declares",
    "to": 59
  }, {
    "from": 69,
    "label": "declares",
    "to": 62
  }, {
    "from": 69,
    "label": "declares",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 74,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 74,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 74,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 74,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 74,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 74,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 74,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 74,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 74,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 93,
    "label": "assigns",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 93,
    "label": "assigns",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 93,
    "label": "assigns",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 93,
    "label": "assigns",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 93,
    "label": "assigns",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 93,
    "label": "assigns",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 93,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 74,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 111,
    "label": "assigns",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 111,
    "label": "assigns",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 111,
    "label": "assigns",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 111,
    "label": "assigns",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 111,
    "label": "assigns",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 111,
    "label": "assigns",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 111,
    "label": "assigns",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 74,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 74,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 74,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 134,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ANSITerminal",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Terminal:new(file)\r\n   assert (file ~= nil, \"Terminal:new(): Passed 'nil' as 'file' parameter!\")\r\n\r\n   o = { file = file }\r\n   setmetatable (o, self)\r\n   self.__index = self\r\n   return o\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert (file ~= nil, \"Terminal:new(): Passed 'nil' as 'file' parameter!\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "o = { file = file }",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "setmetatable (o, self)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "self.__index = self",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function Terminal:write(what)\r\n   self.file:write(what)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "self.file:write(what)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function Terminal:applyState()\r\n   self.file:write (ANSICodes.reset..FGColorTable[self.fgColor]\r\n                    ..BGColorTable[self.bgColor])\r\n\r\n   for k,v in pairs{\"bold\", \"blink\", \"underline\", \"reverse\"} do\r\n      if self[v] then self.file:write (ANSICodes[v]) end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "self.file:write (ANSICodes.reset..FGColorTable[self.fgColor]\r\n                    ..BGColorTable[self.bgColor])",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "for k,v in pairs{\"bold\", \"blink\", \"underline\", \"reverse\"} do\r\n      if self[v] then self.file:write (ANSICodes[v]) end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "if self[v] then self.file:write (ANSICodes[v]) end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "self.file:write (ANSICodes[v])",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function Terminal:reset()\r\n   for k,v in pairs (Terminal) do\r\n      self[k] = v\r\n   end\r\n\r\n   self:applyState()\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "for k,v in pairs (Terminal) do\r\n      self[k] = v\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "self[k] = v",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "self:applyState()",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function Terminal:setFGColor(color)\r\n   assert (FGColorTable[color],\r\n           \"Terminal:setFGColor(): '\"..color..\"' is not a valid color!\")\r\n\r\n   self.fgColor = color\r\n   self.file:write(FGColorTable[self.fgColor])\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "assert (FGColorTable[color],\r\n           \"Terminal:setFGColor(): '\"..color..\"' is not a valid color!\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "self.fgColor = color",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "self.file:write(FGColorTable[self.fgColor])",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function Terminal:setBGColor(color)\r\n   assert (BGColorTable[color],\r\n           \"Terminal:setBGColor(): '\"..color..\"' is not a valid color!\")\r\n\r\n   self.bgColor = color\r\n   self.file:write(BGColorTable[self.bgColor])\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert (BGColorTable[color],\r\n           \"Terminal:setBGColor(): '\"..color..\"' is not a valid color!\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "self.bgColor = color",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "self.file:write(BGColorTable[self.bgColor])",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function Terminal:setBlink(blink)\r\n   if self.blink ~= blink then\r\n      self.blink = blink\r\n      self:applyState()\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "if self.blink ~= blink then\r\n      self.blink = blink\r\n      self:applyState()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "self.blink = blink",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function Terminal:setBold(bold)\r\n   if self.bold ~= bold then\r\n      self.bold = bold\r\n      self:applyState()\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if self.bold ~= bold then\r\n      self.bold = bold\r\n      self:applyState()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "self.bold = bold",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function Terminal:setUnderline(underline)\r\n   if self.underline ~= underline then\r\n      self.underline = underline\r\n      self:applyState()\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "if self.underline ~= underline then\r\n      self.underline = underline\r\n      self:applyState()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "self.underline = underline",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function Terminal:setReverse(reverse)\r\n   if self.reverse ~= reverse then\r\n      self.reverse = reverse\r\n      self:applyState()\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if self.reverse ~= reverse then\r\n      self.reverse = reverse\r\n      self:applyState()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "self.reverse = reverse",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function Terminal:clear()\r\n   self.file:write(ANSICodes.eraseDisplay)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "self.file:write(ANSICodes.eraseDisplay)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function Terminal:gotoXY(x,y)\r\n   self.file:write(\"\\27[\"..y..\";\"..x..\"H\")\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "self.file:write(\"\\27[\"..y..\";\"..x..\"H\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function Terminal:cursorUp(lines)\r\n   lines = lines or 1\r\n   self.file:write(\"\\27[\"..lines..\"A\")\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "lines = lines or 1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "self.file:write(\"\\27[\"..lines..\"A\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function Terminal:cursorDown(lines)\r\n   lines = lines or 1\r\n   self.file:write(\"\\27[\"..lines..\"B\")\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "self.file:write(\"\\27[\"..lines..\"B\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function Terminal:cursorRight(columns)\r\n   columns = columns or 1\r\n   self.file:write(\"\\27[\"..columns..\"C\")\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "columns = columns or 1",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "self.file:write(\"\\27[\"..columns..\"C\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function Terminal:cursorLeft(columns)\r\n   columns = columns or 1\r\n   self.file:write(\"\\27[\"..columns..\"D\")\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "self.file:write(\"\\27[\"..columns..\"D\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "",
    "type": "function container"
  }, {
    "id": 70,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 71,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 72,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 73,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 74,
    "text": "",
    "type": "variable container"
  }, {
    "id": 75,
    "text": "",
    "type": "require container"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "n/a"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "n/a"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 94,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 95,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 96,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 97,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 98,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 99,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 100,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 101,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 102,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 103,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 104,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 105,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 106,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 107,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 108,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 109,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 112,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 113,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 114,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 115,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 116,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 117,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 118,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 119,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 120,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 121,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 122,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 123,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 124,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 125,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 126,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 127,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 128,
    "text": "",
    "type": "global variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "global variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "global variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "global variable"
  } ]
}