{
  "_filename": "CommandLineParser.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/diluculum/Lua/CommandLineParser.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 25,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 25,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 42
  }, {
    "from": 25,
    "label": "has",
    "to": 48
  }, {
    "from": 25,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 52
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 52
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 25,
    "label": "has",
    "to": 42
  }, {
    "from": 25,
    "label": "has",
    "to": 42
  }, {
    "from": 25,
    "label": "has",
    "to": 42
  }, {
    "from": 25,
    "label": "has",
    "to": 42
  }, {
    "from": 25,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 25,
    "label": "has",
    "to": 42
  }, {
    "from": 25,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 28
  }, {
    "from": 69,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 69,
    "label": "has",
    "to": 36
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 71,
    "label": "has",
    "to": 42
  }, {
    "from": 71,
    "label": "has",
    "to": 42
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 44
  }, {
    "from": 73,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 73,
    "label": "has",
    "to": 42
  }, {
    "from": 73,
    "label": "has",
    "to": 42
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 42
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 69,
    "label": "calls",
    "to": 79
  }, {
    "from": 69,
    "label": "calls",
    "to": 79
  }, {
    "from": 69,
    "label": "calls",
    "to": 79
  }, {
    "from": 69,
    "label": "calls",
    "to": 79
  }, {
    "from": 2,
    "label": "calls",
    "to": 85
  }, {
    "from": 2,
    "label": "calls",
    "to": 85
  }, {
    "from": 69,
    "label": "calls",
    "to": 85
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 25,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 81
  }, {
    "from": 25,
    "label": "calls",
    "to": 81
  }, {
    "from": 25,
    "label": "calls",
    "to": 71
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 25,
    "label": "calls",
    "to": 69
  }, {
    "from": 73,
    "label": "calls",
    "to": 83
  }, {
    "from": 25,
    "label": "calls",
    "to": 90
  }, {
    "from": 25,
    "label": "calls",
    "to": 87
  }, {
    "from": 25,
    "label": "calls",
    "to": 86
  }, {
    "from": 25,
    "label": "calls",
    "to": 86
  }, {
    "from": 25,
    "label": "calls",
    "to": 86
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 89
  }, {
    "from": 73,
    "label": "calls",
    "to": 89
  }, {
    "from": 77,
    "label": "calls",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 25,
    "label": "calls",
    "to": 84
  }, {
    "from": 25,
    "label": "calls",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 77,
    "label": "declares",
    "to": 2
  }, {
    "from": 77,
    "label": "declares",
    "to": 25
  }, {
    "from": 77,
    "label": "declares",
    "to": 69
  }, {
    "from": 77,
    "label": "declares",
    "to": 71
  }, {
    "from": 77,
    "label": "declares",
    "to": 73
  }, {
    "from": 77,
    "label": "declares",
    "to": 75
  }, {
    "from": 78,
    "label": "calls",
    "to": 2
  }, {
    "from": 78,
    "label": "calls",
    "to": 75
  }, {
    "from": 78,
    "label": "calls",
    "to": 75
  }, {
    "from": 78,
    "label": "calls",
    "to": 75
  }, {
    "from": 78,
    "label": "calls",
    "to": 75
  }, {
    "from": 78,
    "label": "calls",
    "to": 75
  }, {
    "from": 78,
    "label": "calls",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 91
  }, {
    "from": 1,
    "label": "contains",
    "to": 92
  }, {
    "from": 91,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 91,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 91,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 91,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 91,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 91,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 91,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 91,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 91,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 91,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 91,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 91,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 91,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 91,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 91,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 91,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 125,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "CommandLineParser",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Init (options, shortDescription, usage)\r\n   -- Ensure that 'options' is in a proper format\r\n   assert (type(options) == \"table\", \"'options' parameter must be a table.\")\r\n\r\n   for k,v in ipairs (options) do\r\n      assert (type(v) == \"table\", \"All entries in 'options' must be tables.\")\r\n\r\n      assert (type(v[1]) == \"string\",\r\n              \"First element of an 'options' entry must be a string.\")\r\n\r\n      assert (v[2] == \"flag\" or v[2] == \"boolean\" or v[2] == \"string\"\r\n              or v[2] == \"number\",\r\n              \"Second element of an 'options' entry must be 'flag', \"\r\n              ..\"'boolean', 'string' or 'number' (got '\"..v[2]..\"').\")\r\n\r\n      assert (type(v[3]) == \"table\",\r\n              \"Third element of an 'options' entry must be a table.\")\r\n\r\n      for k2,v2 in ipairs (v[3]) do\r\n         assert (type(v2) == \"string\",\r\n                 \"Options (in 'options' third element) must be strings.\")\r\n         assert (string.sub(v2, 1, 1) == \"-\",\r\n                 \"Options (in 'options' third element) must begin with '-'\"\r\n                 ..\" (got '\"..v2..\"').\")\r\n      end\r\n\r\n      assert (type(v[4]) == \"string\",\r\n              \"Fourth element of an 'options' entry must be a string.\")\r\n\r\n      if v[2] ~= \"flag\" then\r\n         assert (type(v[5]) == v[2], \"Default values (in 'options' fifth \"\r\n                 ..\"element) must match the option type (and '\"..tostring(v[5])\r\n                 ..\"' is not a '\"..v[2]..\"').\")\r\n      end\r\n   end\r\n\r\n   -- Initialize global variables\r\n   OptionsTable = options\r\n   Usage = usage\r\n   ShortDescription = shortDescription\r\n\r\n   for k, optionDescription in pairs (OptionsTable) do\r\n      -- Populate an auxiliary table with options indexed by the option string\r\n      -- as the user is expected to type in the command-line.\r\n      for k2, option in pairs (optionDescription[3])do\r\n         OptionsByOption[option] = optionDescription\r\n      end\r\n\r\n      -- Populate the table of user-selected options with defaults\r\n      if optionDescription[2] == \"flag\" then\r\n         UserSelectedOptions[optionDescription[1]] = false\r\n      else\r\n         UserSelectedOptions[optionDescription[1]] = optionDescription[5]\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert (type(options) == \"table\", \"'options' parameter must be a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "for k,v in ipairs (options) do\r\n      assert (type(v) == \"table\", \"All entries in 'options' must be tables.\")\r\n\r\n      assert (type(v[1]) == \"string\",\r\n              \"First element of an 'options' entry must be a string.\")\r\n\r\n      assert (v[2] == \"flag\" or v[2] == \"boolean\" or v[2] == \"string\"\r\n              or v[2] == \"number\",\r\n              \"Second element of an 'options' entry must be 'flag', \"\r\n              ..\"'boolean', 'string' or 'number' (got '\"..v[2]..\"').\")\r\n\r\n      assert (type(v[3]) == \"table\",\r\n              \"Third element of an 'options' entry must be a table.\")\r\n\r\n      for k2,v2 in ipairs (v[3]) do\r\n         assert (type(v2) == \"string\",\r\n                 \"Options (in 'options' third element) must be strings.\")\r\n         assert (string.sub(v2, 1, 1) == \"-\",\r\n                 \"Options (in 'options' third element) must begin with '-'\"\r\n                 ..\" (got '\"..v2..\"').\")\r\n      end\r\n\r\n      assert (type(v[4]) == \"string\",\r\n              \"Fourth element of an 'options' entry must be a string.\")\r\n\r\n      if v[2] ~= \"flag\" then\r\n         assert (type(v[5]) == v[2], \"Default values (in 'options' fifth \"\r\n                 ..\"element) must match the option type (and '\"..tostring(v[5])\r\n                 ..\"' is not a '\"..v[2]..\"').\")\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "assert (type(v) == \"table\", \"All entries in 'options' must be tables.\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "assert (type(v[1]) == \"string\",\r\n              \"First element of an 'options' entry must be a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assert (v[2] == \"flag\" or v[2] == \"boolean\" or v[2] == \"string\"\r\n              or v[2] == \"number\",\r\n              \"Second element of an 'options' entry must be 'flag', \"\r\n              ..\"'boolean', 'string' or 'number' (got '\"..v[2]..\"').\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assert (type(v[3]) == \"table\",\r\n              \"Third element of an 'options' entry must be a table.\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "for k2,v2 in ipairs (v[3]) do\r\n         assert (type(v2) == \"string\",\r\n                 \"Options (in 'options' third element) must be strings.\")\r\n         assert (string.sub(v2, 1, 1) == \"-\",\r\n                 \"Options (in 'options' third element) must begin with '-'\"\r\n                 ..\" (got '\"..v2..\"').\")\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "assert (type(v2) == \"string\",\r\n                 \"Options (in 'options' third element) must be strings.\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert (string.sub(v2, 1, 1) == \"-\",\r\n                 \"Options (in 'options' third element) must begin with '-'\"\r\n                 ..\" (got '\"..v2..\"').\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert (type(v[4]) == \"string\",\r\n              \"Fourth element of an 'options' entry must be a string.\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "if v[2] ~= \"flag\" then\r\n         assert (type(v[5]) == v[2], \"Default values (in 'options' fifth \"\r\n                 ..\"element) must match the option type (and '\"..tostring(v[5])\r\n                 ..\"' is not a '\"..v[2]..\"').\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "assert (type(v[5]) == v[2], \"Default values (in 'options' fifth \"\r\n                 ..\"element) must match the option type (and '\"..tostring(v[5])\r\n                 ..\"' is not a '\"..v[2]..\"').\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "OptionsTable = options",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "Usage = usage",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "ShortDescription = shortDescription",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "for k, optionDescription in pairs (OptionsTable) do\r\n      -- Populate an auxiliary table with options indexed by the option string\r\n      -- as the user is expected to type in the command-line.\r\n      for k2, option in pairs (optionDescription[3])do\r\n         OptionsByOption[option] = optionDescription\r\n      end\r\n\r\n      -- Populate the table of user-selected options with defaults\r\n      if optionDescription[2] == \"flag\" then\r\n         UserSelectedOptions[optionDescription[1]] = false\r\n      else\r\n         UserSelectedOptions[optionDescription[1]] = optionDescription[5]\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "for k2, option in pairs (optionDescription[3])do\r\n         OptionsByOption[option] = optionDescription\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "OptionsByOption[option] = optionDescription",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if optionDescription[2] == \"flag\" then\r\n         UserSelectedOptions[optionDescription[1]] = false\r\n      else\r\n         UserSelectedOptions[optionDescription[1]] = optionDescription[5]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "UserSelectedOptions[optionDescription[1]] = false",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "UserSelectedOptions[optionDescription[1]] = optionDescription[5]",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function Parse(args)\r\n\r\n   assert (OptionsTable ~= nil, \"Parse: Command-line parser was not properly \"\r\n           ..\"initialized. Was 'CommandLineParser.Init()' called?\")\r\n\r\n   -- Prints an usage summary to the standard error.\r\n   local function printHelp()\r\n      io.stderr:write (\"Usage: \"..args[0]..\" \"..Usage..\"\\n\"..ShortDescription\r\n                       ..\"\\n\\nAvailable command-line options:\\n\")\r\n\r\n      for k,v in ipairs (OptionsTable) do\r\n         if v[2] == \"boolean\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <boolean>, \")\r\n                             ..\" <boolean>\\n\")\r\n         elseif v[2] == \"string\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <string>, \")\r\n                             ..\" <string>\\n\")\r\n         elseif v[2] == \"number\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <number>, \")\r\n                             ..\" <number> \\n\")\r\n         else\r\n            io.stderr:write (\"    \"..table.concat(v[3], \", \")..\"\\n\")\r\n         end\r\n\r\n         io.stderr:write (\"        \"..v[4]..\"\\n\")\r\n      end\r\n\r\n      io.stderr:write (\"    -h, --help\\n        Prints this help screen.\\n\")\r\n\r\n   end\r\n\r\n   -- Parses a boolean option parameter. 'cmdLine' is the command-line option\r\n   -- used (like \"--color\"). 'option' is the option name. And 'param' is the\r\n   -- parameter gotten by the option (e.g., \"true\").\r\n   -- On success, returns 'true'. On failure, prints an error message to\r\n   -- standard output and returns 'false'.\r\n   local function parseBoolean (cmdLine, option, param)\r\n      if param == \"true\" or param == \"yes\" then\r\n         UserSelectedOptions[option] = true\r\n      elseif param == \"false\" or param == \"no\" then\r\n         UserSelectedOptions[option] = false\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive boolean \"\r\n                          ..\"parameter ('true', 'false', 'yes' and 'no' \"\r\n                          ..\"are accepted).\\n\")\r\n         return false\r\n      end\r\n\r\n      return true\r\n   end\r\n\r\n\r\n   -- Parses a number option parameter. 'cmdLine' is the command-line option\r\n   -- used (like \"--count\"). 'option' is the option name. And 'param' is the\r\n   -- parameter gotten by the option (e.g., \"123\").\r\n   -- On success, returns 'true'. On failure, prints an error message to\r\n   -- standard output and returns 'false'.\r\n   local function parseNumber (cmdLine, option, param)\r\n      local num = tonumber(param)\r\n      if type(num) == \"number\" then\r\n         UserSelectedOptions[option] = num\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive a numeric \"\r\n                          ..\"parameter.\\n\")\r\n         return false\r\n      end\r\n\r\n      return true\r\n   end\r\n\r\n\r\n   local argsToRemove = { } -- indices of parsed parameters, to be removed\r\n                            -- from 'args'.\r\n\r\n   -- Check every parameter passed\r\n   for i = 1, table.getn(args) do\r\n      local arg = args[i]\r\n\r\n      -- If we got \"--\", stop parsing now\r\n      if arg == \"--\" then\r\n         table.insert (argsToRemove, 1, i)\r\n         break\r\n      end\r\n\r\n      -- Check for help flags\r\n      if arg == \"-h\" or arg == \"--help\" then\r\n         printHelp()\r\n         return false\r\n      end\r\n\r\n      -- If we got something starting with \"-\", treat as a command-line option\r\n      if string.sub (arg, 1, 1) == \"-\" then\r\n         if not OptionsByOption[arg] then\r\n            io.stderr:write(args[0]..\": '\"..arg..\"' is not a recognized option. \"\r\n                            ..\"Use '-h' or '--help' for help.\\n\")\r\n            return false\r\n         end\r\n\r\n         local option = OptionsByOption[arg]\r\n         table.insert (argsToRemove, 1, i)\r\n\r\n         if option[2] == \"flag\" then\r\n            UserSelectedOptions[option[1]] = true\r\n         else\r\n            i = i + 1\r\n            table.insert (argsToRemove, 1, i)\r\n\r\n            if option[2] == \"boolean\" then\r\n               if not parseBoolean (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            elseif option[2] == \"string\" then\r\n               UserSelectedOptions[option[1]] = args[i]\r\n            elseif option[2] == \"number\" then\r\n               if not parseNumber (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end\r\n\r\n   -- Remove from 'args' the parsed parameters\r\n   for k,v in pairs (argsToRemove) do\r\n      table.remove(args, v)\r\n   end\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "assert (OptionsTable ~= nil, \"Parse: Command-line parser was not properly \"\r\n           ..\"initialized. Was 'CommandLineParser.Init()' called?\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local function printHelp()\r\n      io.stderr:write (\"Usage: \"..args[0]..\" \"..Usage..\"\\n\"..ShortDescription\r\n                       ..\"\\n\\nAvailable command-line options:\\n\")\r\n\r\n      for k,v in ipairs (OptionsTable) do\r\n         if v[2] == \"boolean\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <boolean>, \")\r\n                             ..\" <boolean>\\n\")\r\n         elseif v[2] == \"string\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <string>, \")\r\n                             ..\" <string>\\n\")\r\n         elseif v[2] == \"number\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <number>, \")\r\n                             ..\" <number> \\n\")\r\n         else\r\n            io.stderr:write (\"    \"..table.concat(v[3], \", \")..\"\\n\")\r\n         end\r\n\r\n         io.stderr:write (\"        \"..v[4]..\"\\n\")\r\n      end\r\n\r\n      io.stderr:write (\"    -h, --help\\n        Prints this help screen.\\n\")\r\n\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 28,
    "text": "io.stderr:write (\"Usage: \"..args[0]..\" \"..Usage..\"\\n\"..ShortDescription\r\n                       ..\"\\n\\nAvailable command-line options:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "for k,v in ipairs (OptionsTable) do\r\n         if v[2] == \"boolean\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <boolean>, \")\r\n                             ..\" <boolean>\\n\")\r\n         elseif v[2] == \"string\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <string>, \")\r\n                             ..\" <string>\\n\")\r\n         elseif v[2] == \"number\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <number>, \")\r\n                             ..\" <number> \\n\")\r\n         else\r\n            io.stderr:write (\"    \"..table.concat(v[3], \", \")..\"\\n\")\r\n         end\r\n\r\n         io.stderr:write (\"        \"..v[4]..\"\\n\")\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "if v[2] == \"boolean\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <boolean>, \")\r\n                             ..\" <boolean>\\n\")\r\n         elseif v[2] == \"string\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <string>, \")\r\n                             ..\" <string>\\n\")\r\n         elseif v[2] == \"number\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <number>, \")\r\n                             ..\" <number> \\n\")\r\n         else\r\n            io.stderr:write (\"    \"..table.concat(v[3], \", \")..\"\\n\")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "io.stderr:write (\"    \"..table.concat(v[3], \" <boolean>, \")\r\n                             ..\" <boolean>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "io.stderr:write (\"    \"..table.concat(v[3], \" <string>, \")\r\n                             ..\" <string>\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "io.stderr:write (\"    \"..table.concat(v[3], \" <number>, \")\r\n                             ..\" <number> \\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "io.stderr:write (\"    \"..table.concat(v[3], \", \")..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "io.stderr:write (\"        \"..v[4]..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "io.stderr:write (\"    -h, --help\\n        Prints this help screen.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local function parseBoolean (cmdLine, option, param)\r\n      if param == \"true\" or param == \"yes\" then\r\n         UserSelectedOptions[option] = true\r\n      elseif param == \"false\" or param == \"no\" then\r\n         UserSelectedOptions[option] = false\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive boolean \"\r\n                          ..\"parameter ('true', 'false', 'yes' and 'no' \"\r\n                          ..\"are accepted).\\n\")\r\n         return false\r\n      end\r\n\r\n      return true\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 38,
    "text": "if param == \"true\" or param == \"yes\" then\r\n         UserSelectedOptions[option] = true\r\n      elseif param == \"false\" or param == \"no\" then\r\n         UserSelectedOptions[option] = false\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive boolean \"\r\n                          ..\"parameter ('true', 'false', 'yes' and 'no' \"\r\n                          ..\"are accepted).\\n\")\r\n         return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "UserSelectedOptions[option] = true",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "UserSelectedOptions[option] = false",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive boolean \"\r\n                          ..\"parameter ('true', 'false', 'yes' and 'no' \"\r\n                          ..\"are accepted).\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 43,
    "text": "local function parseNumber (cmdLine, option, param)\r\n      local num = tonumber(param)\r\n      if type(num) == \"number\" then\r\n         UserSelectedOptions[option] = num\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive a numeric \"\r\n                          ..\"parameter.\\n\")\r\n         return false\r\n      end\r\n\r\n      return true\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 44,
    "text": "local num = tonumber(param)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if type(num) == \"number\" then\r\n         UserSelectedOptions[option] = num\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive a numeric \"\r\n                          ..\"parameter.\\n\")\r\n         return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "UserSelectedOptions[option] = num",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive a numeric \"\r\n                          ..\"parameter.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local argsToRemove = { }",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "for i = 1, table.getn(args) do\r\n      local arg = args[i]\r\n\r\n      -- If we got \"--\", stop parsing now\r\n      if arg == \"--\" then\r\n         table.insert (argsToRemove, 1, i)\r\n         break\r\n      end\r\n\r\n      -- Check for help flags\r\n      if arg == \"-h\" or arg == \"--help\" then\r\n         printHelp()\r\n         return false\r\n      end\r\n\r\n      -- If we got something starting with \"-\", treat as a command-line option\r\n      if string.sub (arg, 1, 1) == \"-\" then\r\n         if not OptionsByOption[arg] then\r\n            io.stderr:write(args[0]..\": '\"..arg..\"' is not a recognized option. \"\r\n                            ..\"Use '-h' or '--help' for help.\\n\")\r\n            return false\r\n         end\r\n\r\n         local option = OptionsByOption[arg]\r\n         table.insert (argsToRemove, 1, i)\r\n\r\n         if option[2] == \"flag\" then\r\n            UserSelectedOptions[option[1]] = true\r\n         else\r\n            i = i + 1\r\n            table.insert (argsToRemove, 1, i)\r\n\r\n            if option[2] == \"boolean\" then\r\n               if not parseBoolean (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            elseif option[2] == \"string\" then\r\n               UserSelectedOptions[option[1]] = args[i]\r\n            elseif option[2] == \"number\" then\r\n               if not parseNumber (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 50,
    "text": "local arg = args[i]",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if arg == \"--\" then\r\n         table.insert (argsToRemove, 1, i)\r\n         break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "table.insert (argsToRemove, 1, i)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if arg == \"-h\" or arg == \"--help\" then\r\n         printHelp()\r\n         return false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "printHelp()",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "if string.sub (arg, 1, 1) == \"-\" then\r\n         if not OptionsByOption[arg] then\r\n            io.stderr:write(args[0]..\": '\"..arg..\"' is not a recognized option. \"\r\n                            ..\"Use '-h' or '--help' for help.\\n\")\r\n            return false\r\n         end\r\n\r\n         local option = OptionsByOption[arg]\r\n         table.insert (argsToRemove, 1, i)\r\n\r\n         if option[2] == \"flag\" then\r\n            UserSelectedOptions[option[1]] = true\r\n         else\r\n            i = i + 1\r\n            table.insert (argsToRemove, 1, i)\r\n\r\n            if option[2] == \"boolean\" then\r\n               if not parseBoolean (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            elseif option[2] == \"string\" then\r\n               UserSelectedOptions[option[1]] = args[i]\r\n            elseif option[2] == \"number\" then\r\n               if not parseNumber (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            end\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "if not OptionsByOption[arg] then\r\n            io.stderr:write(args[0]..\": '\"..arg..\"' is not a recognized option. \"\r\n                            ..\"Use '-h' or '--help' for help.\\n\")\r\n            return false\r\n         end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "io.stderr:write(args[0]..\": '\"..arg..\"' is not a recognized option. \"\r\n                            ..\"Use '-h' or '--help' for help.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "local option = OptionsByOption[arg]",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if option[2] == \"flag\" then\r\n            UserSelectedOptions[option[1]] = true\r\n         else\r\n            i = i + 1\r\n            table.insert (argsToRemove, 1, i)\r\n\r\n            if option[2] == \"boolean\" then\r\n               if not parseBoolean (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            elseif option[2] == \"string\" then\r\n               UserSelectedOptions[option[1]] = args[i]\r\n            elseif option[2] == \"number\" then\r\n               if not parseNumber (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "UserSelectedOptions[option[1]] = true",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if option[2] == \"boolean\" then\r\n               if not parseBoolean (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            elseif option[2] == \"string\" then\r\n               UserSelectedOptions[option[1]] = args[i]\r\n            elseif option[2] == \"number\" then\r\n               if not parseNumber (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "if not parseBoolean (arg, option[1], args[i]) then\r\n                  return false\r\n               end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "UserSelectedOptions[option[1]] = args[i]",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if not parseNumber (arg, option[1], args[i]) then\r\n                  return false\r\n               end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "for k,v in pairs (argsToRemove) do\r\n      table.remove(args, v)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 67,
    "text": "table.remove(args, v)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "local function printHelp()\r\n      io.stderr:write (\"Usage: \"..args[0]..\" \"..Usage..\"\\n\"..ShortDescription\r\n                       ..\"\\n\\nAvailable command-line options:\\n\")\r\n\r\n      for k,v in ipairs (OptionsTable) do\r\n         if v[2] == \"boolean\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <boolean>, \")\r\n                             ..\" <boolean>\\n\")\r\n         elseif v[2] == \"string\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <string>, \")\r\n                             ..\" <string>\\n\")\r\n         elseif v[2] == \"number\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <number>, \")\r\n                             ..\" <number> \\n\")\r\n         else\r\n            io.stderr:write (\"    \"..table.concat(v[3], \", \")..\"\\n\")\r\n         end\r\n\r\n         io.stderr:write (\"        \"..v[4]..\"\\n\")\r\n      end\r\n\r\n      io.stderr:write (\"    -h, --help\\n        Prints this help screen.\\n\")\r\n\r\n   end",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "local function parseBoolean (cmdLine, option, param)\r\n      if param == \"true\" or param == \"yes\" then\r\n         UserSelectedOptions[option] = true\r\n      elseif param == \"false\" or param == \"no\" then\r\n         UserSelectedOptions[option] = false\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive boolean \"\r\n                          ..\"parameter ('true', 'false', 'yes' and 'no' \"\r\n                          ..\"are accepted).\\n\")\r\n         return false\r\n      end\r\n\r\n      return true\r\n   end",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "local function parseNumber (cmdLine, option, param)\r\n      local num = tonumber(param)\r\n      if type(num) == \"number\" then\r\n         UserSelectedOptions[option] = num\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive a numeric \"\r\n                          ..\"parameter.\\n\")\r\n         return false\r\n      end\r\n\r\n      return true\r\n   end",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function GetOption(option)\r\n   return UserSelectedOptions[option]\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "",
    "type": "function container"
  }, {
    "id": 78,
    "text": "",
    "type": "function container"
  }, {
    "id": 79,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 80,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 81,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 82,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 83,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 84,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 85,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 86,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 87,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 88,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 89,
    "text": "type",
    "type": "global function"
  }, {
    "id": 90,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 91,
    "text": "",
    "type": "variable container"
  }, {
    "id": 92,
    "text": "",
    "type": "require container"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "keyword"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "string"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "string"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 123,
    "text": "",
    "type": "global variable"
  }, {
    "id": 124,
    "text": "",
    "type": "n/a"
  }, {
    "id": 125,
    "text": "",
    "type": "global variable"
  } ]
}