{
  "_filename": "Test_CommandLineParser.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/diluculum/Lua/Test_CommandLineParser.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "calls",
    "to": 2
  }, {
    "from": 5,
    "label": "calls",
    "to": 7
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 4
  }, {
    "from": 5,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 8
  }, {
    "from": 5,
    "label": "calls",
    "to": 6
  }, {
    "from": 5,
    "label": "calls",
    "to": 6
  }, {
    "from": 5,
    "label": "calls",
    "to": 6
  }, {
    "from": 5,
    "label": "calls",
    "to": 6
  }, {
    "from": 5,
    "label": "calls",
    "to": 6
  }, {
    "from": 5,
    "label": "calls",
    "to": 3
  }, {
    "from": 1,
    "label": "contains",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 11
  }, {
    "from": 1,
    "label": "contains",
    "to": 12
  }, {
    "from": 11,
    "label": "initializes",
    "to": 13
  }, {
    "from": 13,
    "label": "assigns",
    "to": 14
  }, {
    "from": 12,
    "label": "initializes",
    "to": 10
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Test_CommandLineParser",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Init (options, shortDescription, usage)\r\n   -- Ensure that 'options' is in a proper format\r\n   assert (type(options) == \"table\", \"'options' parameter must be a table.\")\r\n\r\n   for k,v in ipairs (options) do\r\n      assert (type(v) == \"table\", \"All entries in 'options' must be tables.\")\r\n\r\n      assert (type(v[1]) == \"string\",\r\n              \"First element of an 'options' entry must be a string.\")\r\n\r\n      assert (v[2] == \"flag\" or v[2] == \"boolean\" or v[2] == \"string\"\r\n              or v[2] == \"number\",\r\n              \"Second element of an 'options' entry must be 'flag', \"\r\n              ..\"'boolean', 'string' or 'number' (got '\"..v[2]..\"').\")\r\n\r\n      assert (type(v[3]) == \"table\",\r\n              \"Third element of an 'options' entry must be a table.\")\r\n\r\n      for k2,v2 in ipairs (v[3]) do\r\n         assert (type(v2) == \"string\",\r\n                 \"Options (in 'options' third element) must be strings.\")\r\n         assert (string.sub(v2, 1, 1) == \"-\",\r\n                 \"Options (in 'options' third element) must begin with '-'\"\r\n                 ..\" (got '\"..v2..\"').\")\r\n      end\r\n\r\n      assert (type(v[4]) == \"string\",\r\n              \"Fourth element of an 'options' entry must be a string.\")\r\n\r\n      if v[2] ~= \"flag\" then\r\n         assert (type(v[5]) == v[2], \"Default values (in 'options' fifth \"\r\n                 ..\"element) must match the option type (and '\"..tostring(v[5])\r\n                 ..\"' is not a '\"..v[2]..\"').\")\r\n      end\r\n   end\r\n\r\n   -- Initialize global variables\r\n   OptionsTable = options\r\n   Usage = usage\r\n   ShortDescription = shortDescription\r\n\r\n   for k, optionDescription in pairs (OptionsTable) do\r\n      -- Populate an auxiliary table with options indexed by the option string\r\n      -- as the user is expected to type in the command-line.\r\n      for k2, option in pairs (optionDescription[3])do\r\n         OptionsByOption[option] = optionDescription\r\n      end\r\n\r\n      -- Populate the table of user-selected options with defaults\r\n      if optionDescription[2] == \"flag\" then\r\n         UserSelectedOptions[optionDescription[1]] = false\r\n      else\r\n         UserSelectedOptions[optionDescription[1]] = optionDescription[5]\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function Parse(args)\r\n\r\n   assert (OptionsTable ~= nil, \"Parse: Command-line parser was not properly \"\r\n           ..\"initialized. Was 'CommandLineParser.Init()' called?\")\r\n\r\n   -- Prints an usage summary to the standard error.\r\n   local function printHelp()\r\n      io.stderr:write (\"Usage: \"..args[0]..\" \"..Usage..\"\\n\"..ShortDescription\r\n                       ..\"\\n\\nAvailable command-line options:\\n\")\r\n\r\n      for k,v in ipairs (OptionsTable) do\r\n         if v[2] == \"boolean\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <boolean>, \")\r\n                             ..\" <boolean>\\n\")\r\n         elseif v[2] == \"string\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <string>, \")\r\n                             ..\" <string>\\n\")\r\n         elseif v[2] == \"number\" then\r\n            io.stderr:write (\"    \"..table.concat(v[3], \" <number>, \")\r\n                             ..\" <number> \\n\")\r\n         else\r\n            io.stderr:write (\"    \"..table.concat(v[3], \", \")..\"\\n\")\r\n         end\r\n\r\n         io.stderr:write (\"        \"..v[4]..\"\\n\")\r\n      end\r\n\r\n      io.stderr:write (\"    -h, --help\\n        Prints this help screen.\\n\")\r\n\r\n   end\r\n\r\n   -- Parses a boolean option parameter. 'cmdLine' is the command-line option\r\n   -- used (like \"--color\"). 'option' is the option name. And 'param' is the\r\n   -- parameter gotten by the option (e.g., \"true\").\r\n   -- On success, returns 'true'. On failure, prints an error message to\r\n   -- standard output and returns 'false'.\r\n   local function parseBoolean (cmdLine, option, param)\r\n      if param == \"true\" or param == \"yes\" then\r\n         UserSelectedOptions[option] = true\r\n      elseif param == \"false\" or param == \"no\" then\r\n         UserSelectedOptions[option] = false\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive boolean \"\r\n                          ..\"parameter ('true', 'false', 'yes' and 'no' \"\r\n                          ..\"are accepted).\\n\")\r\n         return false\r\n      end\r\n\r\n      return true\r\n   end\r\n\r\n\r\n   -- Parses a number option parameter. 'cmdLine' is the command-line option\r\n   -- used (like \"--count\"). 'option' is the option name. And 'param' is the\r\n   -- parameter gotten by the option (e.g., \"123\").\r\n   -- On success, returns 'true'. On failure, prints an error message to\r\n   -- standard output and returns 'false'.\r\n   local function parseNumber (cmdLine, option, param)\r\n      local num = tonumber(param)\r\n      if type(num) == \"number\" then\r\n         UserSelectedOptions[option] = num\r\n      else\r\n         io.stderr:write (args[0]..\": '\"..cmdLine..\"' should receive a numeric \"\r\n                          ..\"parameter.\\n\")\r\n         return false\r\n      end\r\n\r\n      return true\r\n   end\r\n\r\n\r\n   local argsToRemove = { } -- indices of parsed parameters, to be removed\r\n                            -- from 'args'.\r\n\r\n   -- Check every parameter passed\r\n   for i = 1, table.getn(args) do\r\n      local arg = args[i]\r\n\r\n      -- If we got \"--\", stop parsing now\r\n      if arg == \"--\" then\r\n         table.insert (argsToRemove, 1, i)\r\n         break\r\n      end\r\n\r\n      -- Check for help flags\r\n      if arg == \"-h\" or arg == \"--help\" then\r\n         printHelp()\r\n         return false\r\n      end\r\n\r\n      -- If we got something starting with \"-\", treat as a command-line option\r\n      if string.sub (arg, 1, 1) == \"-\" then\r\n         if not OptionsByOption[arg] then\r\n            io.stderr:write(args[0]..\": '\"..arg..\"' is not a recognized option. \"\r\n                            ..\"Use '-h' or '--help' for help.\\n\")\r\n            return false\r\n         end\r\n\r\n         local option = OptionsByOption[arg]\r\n         table.insert (argsToRemove, 1, i)\r\n\r\n         if option[2] == \"flag\" then\r\n            UserSelectedOptions[option[1]] = true\r\n         else\r\n            i = i + 1\r\n            table.insert (argsToRemove, 1, i)\r\n\r\n            if option[2] == \"boolean\" then\r\n               if not parseBoolean (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            elseif option[2] == \"string\" then\r\n               UserSelectedOptions[option[1]] = args[i]\r\n            elseif option[2] == \"number\" then\r\n               if not parseNumber (arg, option[1], args[i]) then\r\n                  return false\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end\r\n\r\n   -- Remove from 'args' the parsed parameters\r\n   for k,v in pairs (argsToRemove) do\r\n      table.remove(args, v)\r\n   end\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function GetOption(option)\r\n   return UserSelectedOptions[option]\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 7,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 8,
    "text": "print",
    "type": "global function"
  }, {
    "id": 9,
    "text": "require",
    "type": "global function"
  }, {
    "id": 10,
    "text": "",
    "type": "global variable"
  }, {
    "id": 11,
    "text": "",
    "type": "variable container"
  }, {
    "id": 12,
    "text": "",
    "type": "require container"
  }, {
    "id": 13,
    "text": "",
    "type": "global variable"
  }, {
    "id": 14,
    "text": "",
    "type": "n/a"
  } ]
}