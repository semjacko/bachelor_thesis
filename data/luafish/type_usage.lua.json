{
  "_filename": "type_usage.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luafish/examples/type_usage.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "calls",
    "to": 25
  }, {
    "from": 12,
    "label": "calls",
    "to": 20
  }, {
    "from": 19,
    "label": "calls",
    "to": 20
  }, {
    "from": 19,
    "label": "calls",
    "to": 20
  }, {
    "from": 19,
    "label": "calls",
    "to": 20
  }, {
    "from": 19,
    "label": "calls",
    "to": 20
  }, {
    "from": 12,
    "label": "calls",
    "to": 28
  }, {
    "from": 12,
    "label": "calls",
    "to": 28
  }, {
    "from": 19,
    "label": "calls",
    "to": 28
  }, {
    "from": 12,
    "label": "calls",
    "to": 21
  }, {
    "from": 19,
    "label": "calls",
    "to": 21
  }, {
    "from": 19,
    "label": "calls",
    "to": 12
  }, {
    "from": 10,
    "label": "calls",
    "to": 23
  }, {
    "from": 19,
    "label": "calls",
    "to": 26
  }, {
    "from": 19,
    "label": "calls",
    "to": 26
  }, {
    "from": 19,
    "label": "calls",
    "to": 24
  }, {
    "from": 19,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 19,
    "label": "calls",
    "to": 24
  }, {
    "from": 19,
    "label": "calls",
    "to": 27
  }, {
    "from": 8,
    "label": "calls",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 19,
    "label": "declares",
    "to": 2
  }, {
    "from": 19,
    "label": "declares",
    "to": 5
  }, {
    "from": 19,
    "label": "declares",
    "to": 8
  }, {
    "from": 19,
    "label": "declares",
    "to": 10
  }, {
    "from": 19,
    "label": "declares",
    "to": 12
  }, {
    "from": 19,
    "label": "declares",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 29,
    "label": "initializes",
    "to": 31
  }, {
    "from": 31,
    "label": "assigns",
    "to": 32
  }, {
    "from": 29,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "assigns",
    "to": 34
  }, {
    "from": 29,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "type_usage",
    "type": "module"
  }, {
    "id": 2,
    "text": "function MACRO.SETTYPE(obj_ast, type_ast)\r\n    obj_ast.stype = type_ast[1]\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "obj_ast.stype = type_ast[1]",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function MACRO.TYPE(obj_ast)\r\n    return 'value', obj_ast.stype\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function MACRO.ISNUMBER(obj_ast)\r\n    return 'value', M.TNumber.isa(obj_ast.stype)\r\n  end",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function MACRO.ISFUNCTION(obj_ast)\r\n    return 'value', M.TFunction.isa(obj_ast.stype)\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function test(y)\r\n  SETTYPE(y, 'integer')\r\n  assert(TYPE(y) == 'integer')\r\n  print(TYPE(y))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "SETTYPE(y, 'integer')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert(TYPE(y) == 'integer')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "print(TYPE(y))",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n  -- SETTYPE and TYPE are macros evaluated\r\n  -- at compile time.  These respectively bind a static type\r\n  -- to a lexical and retrieve that type.\r\n\r\n  function MACRO.SETTYPE(obj_ast, type_ast)\r\n    obj_ast.stype = type_ast[1]\r\n  end\r\n  function MACRO.TYPE(obj_ast)\r\n    return 'value', obj_ast.stype\r\n  end\r\n  function MACRO.ISNUMBER(obj_ast)\r\n    return 'value', M.TNumber.isa(obj_ast.stype)\r\n  end\r\n  function MACRO.ISFUNCTION(obj_ast)\r\n    return 'value', M.TFunction.isa(obj_ast.stype)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "",
    "type": "function container"
  }, {
    "id": 20,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 21,
    "text": "print",
    "type": "global function"
  }, {
    "id": 22,
    "text": "M.TNumber.isa",
    "type": "global function"
  }, {
    "id": 23,
    "text": "M.TFunction.isa",
    "type": "global function"
  }, {
    "id": 24,
    "text": "SETTYPE",
    "type": "global function"
  }, {
    "id": 25,
    "text": "ONCOMPILE",
    "type": "global function"
  }, {
    "id": 26,
    "text": "ISNUMBER",
    "type": "global function"
  }, {
    "id": 27,
    "text": "ISFUNCTION",
    "type": "global function"
  }, {
    "id": 28,
    "text": "TYPE",
    "type": "global function"
  }, {
    "id": 29,
    "text": "",
    "type": "variable container"
  }, {
    "id": 30,
    "text": "",
    "type": "require container"
  }, {
    "id": 31,
    "text": "",
    "type": "local variable"
  }, {
    "id": 32,
    "text": "",
    "type": "number"
  }, {
    "id": 33,
    "text": "",
    "type": "local variable"
  }, {
    "id": 34,
    "text": "",
    "type": "string"
  }, {
    "id": 35,
    "text": "",
    "type": "local variable"
  }, {
    "id": 36,
    "text": "",
    "type": "number"
  } ]
}