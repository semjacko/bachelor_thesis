{
  "_filename": "square2.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luafish/examples/square2.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 8
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 15,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 8
  }, {
    "from": 29,
    "label": "has",
    "to": 8
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 8
  }, {
    "from": 34,
    "label": "has",
    "to": 20
  }, {
    "from": 34,
    "label": "has",
    "to": 21
  }, {
    "from": 34,
    "label": "has",
    "to": 22
  }, {
    "from": 34,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 25
  }, {
    "from": 36,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "calls",
    "to": 42
  }, {
    "from": 38,
    "label": "calls",
    "to": 42
  }, {
    "from": 15,
    "label": "calls",
    "to": 42
  }, {
    "from": 15,
    "label": "calls",
    "to": 42
  }, {
    "from": 15,
    "label": "calls",
    "to": 42
  }, {
    "from": 29,
    "label": "calls",
    "to": 42
  }, {
    "from": 38,
    "label": "calls",
    "to": 42
  }, {
    "from": 15,
    "label": "calls",
    "to": 41
  }, {
    "from": 15,
    "label": "calls",
    "to": 41
  }, {
    "from": 38,
    "label": "calls",
    "to": 44
  }, {
    "from": 15,
    "label": "calls",
    "to": 40
  }, {
    "from": 29,
    "label": "calls",
    "to": 39
  }, {
    "from": 15,
    "label": "calls",
    "to": 45
  }, {
    "from": 15,
    "label": "calls",
    "to": 45
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 5
  }, {
    "from": 15,
    "label": "calls",
    "to": 5
  }, {
    "from": 29,
    "label": "calls",
    "to": 5
  }, {
    "from": 29,
    "label": "calls",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "declares",
    "to": 3
  }, {
    "from": 38,
    "label": "declares",
    "to": 5
  }, {
    "from": 38,
    "label": "declares",
    "to": 10
  }, {
    "from": 38,
    "label": "declares",
    "to": 13
  }, {
    "from": 38,
    "label": "declares",
    "to": 15
  }, {
    "from": 38,
    "label": "declares",
    "to": 29
  }, {
    "from": 38,
    "label": "declares",
    "to": 33
  }, {
    "from": 38,
    "label": "declares",
    "to": 34
  }, {
    "from": 38,
    "label": "declares",
    "to": 36
  }, {
    "from": 46,
    "label": "requires",
    "to": 1
  }, {
    "from": 47,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 48,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 49,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 53
  }, {
    "from": 50,
    "label": "represents",
    "to": 54
  }, {
    "from": 53,
    "label": "provides",
    "to": 54
  }, {
    "from": 50,
    "label": "contains",
    "to": 10
  }, {
    "from": 50,
    "label": "contains",
    "to": 13
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "square2",
    "type": "module"
  }, {
    "id": 2,
    "text": "macro",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(...) print('ERROR:', ...) end",
    "type": "function"
  }, {
    "id": 4,
    "text": "print('ERROR:', ...)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "function(test,message)\r\n  if not test then report(message) else return true end\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "if not test then report(message) else return true end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "report(message)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function TSquare.bind(obj_ast)\r\n    obj_ast.stype = TSquare\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "obj_ast.stype = TSquare",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function TSquare.isa(obj_ast)\r\n    return 'value', obj_ast.stype == TSquare\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function TSquare:__index(k)\r\n    print('static __index', self, k)\r\n    if not is_method[k] then\r\n      report(tostring(k) .. ' not in ' .. tostring(TSquare))\r\n    end\r\n    if k == 'setcolor' then\r\n      return function(self, o, ...)\r\n        print('static call', self, o, ...)\r\n        check(self.stype == TSquare, 'first param must be TSquare')\r\n        check(Macro.TString.isa(o.stype), 'second param must be string')\r\n        if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end\r\n      end\r\n    else\r\n      return function(self, ...)\r\n        print('static call', self, ...)\r\n        if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end\r\n      end      \r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "print('static __index', self, k)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "if not is_method[k] then\r\n      report(tostring(k) .. ' not in ' .. tostring(TSquare))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "report(tostring(k) .. ' not in ' .. tostring(TSquare))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if k == 'setcolor' then\r\n      return function(self, o, ...)\r\n        print('static call', self, o, ...)\r\n        check(self.stype == TSquare, 'first param must be TSquare')\r\n        check(Macro.TString.isa(o.stype), 'second param must be string')\r\n        if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end\r\n      end\r\n    else\r\n      return function(self, ...)\r\n        print('static call', self, ...)\r\n        if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end\r\n      end      \r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "print('static call', self, o, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "check(self.stype == TSquare, 'first param must be TSquare')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "check(Macro.TString.isa(o.stype), 'second param must be string')",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "report('expected two arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "print('static call', self, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "report('expected zero arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function TSquare:__mul(other)\r\n    print('static __mul', self, other)\r\n    if not (check(stype == TSquare, 'first op must be TSquare') or\r\n            check(Macro.TNumber.isa(other), 'second op must be number'))\r\n    then return end\r\n    return TSquare\r\n  end",
    "type": "function"
  }, {
    "id": 30,
    "text": "print('static __mul', self, other)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if not (check(stype == TSquare, 'first op must be TSquare') or\r\n            check(Macro.TNumber.isa(other), 'second op must be number'))\r\n    then return end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function() return '[TSquare Class]' end",
    "type": "function"
  }, {
    "id": 34,
    "text": "function(self, o, ...)\r\n        print('static call', self, o, ...)\r\n        check(self.stype == TSquare, 'first param must be TSquare')\r\n        check(Macro.TString.isa(o.stype), 'second param must be string')\r\n        if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function(self, ...)\r\n        print('static call', self, ...)\r\n        if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "",
    "type": "function container"
  }, {
    "id": 39,
    "text": "function TNumber.isa(obj)\r\n  local mt = getmetatable(obj)\r\n  return (mt and mt.__index == TNumber) and true or false\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function TString.isa(obj)\r\n  local mt = getmetatable(obj)\r\n  return (mt and mt.__index == TString) and true or false\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 42,
    "text": "print",
    "type": "global function"
  }, {
    "id": 43,
    "text": "require",
    "type": "global function"
  }, {
    "id": 44,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 45,
    "text": "select",
    "type": "global function"
  }, {
    "id": 46,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "variable container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 52,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "interface container"
  }, {
    "id": 54,
    "text": "",
    "type": "interface"
  } ]
}