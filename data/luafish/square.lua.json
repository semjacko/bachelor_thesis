{
  "_filename": "square.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luafish/examples/square.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 8,
    "label": "has",
    "to": 21
  }, {
    "from": 8,
    "label": "has",
    "to": 21
  }, {
    "from": 8,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 21
  }, {
    "from": 32,
    "label": "has",
    "to": 13
  }, {
    "from": 32,
    "label": "has",
    "to": 14
  }, {
    "from": 32,
    "label": "has",
    "to": 15
  }, {
    "from": 32,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 18
  }, {
    "from": 34,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 3
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 21
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 36,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 8,
    "label": "has",
    "to": 21
  }, {
    "from": 8,
    "label": "has",
    "to": 21
  }, {
    "from": 36,
    "label": "has",
    "to": 43
  }, {
    "from": 36,
    "label": "has",
    "to": 44
  }, {
    "from": 36,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "calls",
    "to": 50
  }, {
    "from": 29,
    "label": "calls",
    "to": 23
  }, {
    "from": 46,
    "label": "calls",
    "to": 49
  }, {
    "from": 46,
    "label": "calls",
    "to": 49
  }, {
    "from": 8,
    "label": "calls",
    "to": 49
  }, {
    "from": 8,
    "label": "calls",
    "to": 49
  }, {
    "from": 8,
    "label": "calls",
    "to": 49
  }, {
    "from": 46,
    "label": "calls",
    "to": 49
  }, {
    "from": 46,
    "label": "calls",
    "to": 49
  }, {
    "from": 46,
    "label": "calls",
    "to": 49
  }, {
    "from": 8,
    "label": "calls",
    "to": 48
  }, {
    "from": 8,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 52
  }, {
    "from": 23,
    "label": "calls",
    "to": 52
  }, {
    "from": 8,
    "label": "calls",
    "to": 53
  }, {
    "from": 8,
    "label": "calls",
    "to": 53
  }, {
    "from": 8,
    "label": "calls",
    "to": 51
  }, {
    "from": 46,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 4
  }, {
    "from": 8,
    "label": "calls",
    "to": 4
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 46,
    "label": "declares",
    "to": 2
  }, {
    "from": 46,
    "label": "declares",
    "to": 4
  }, {
    "from": 46,
    "label": "declares",
    "to": 8
  }, {
    "from": 46,
    "label": "declares",
    "to": 23
  }, {
    "from": 46,
    "label": "declares",
    "to": 25
  }, {
    "from": 46,
    "label": "declares",
    "to": 26
  }, {
    "from": 46,
    "label": "declares",
    "to": 27
  }, {
    "from": 46,
    "label": "declares",
    "to": 29
  }, {
    "from": 46,
    "label": "declares",
    "to": 31
  }, {
    "from": 46,
    "label": "declares",
    "to": 32
  }, {
    "from": 46,
    "label": "declares",
    "to": 34
  }, {
    "from": 46,
    "label": "declares",
    "to": 36
  }, {
    "from": 1,
    "label": "declares",
    "to": 47
  }, {
    "from": 54,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 55,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 55,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 1,
    "label": "provides",
    "to": 61
  }, {
    "from": 57,
    "label": "represents",
    "to": 62
  }, {
    "from": 61,
    "label": "provides",
    "to": 62
  }, {
    "from": 57,
    "label": "contains",
    "to": 23
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 31
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "square",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(...) print('ERROR:', ...) end",
    "type": "function"
  }, {
    "id": 3,
    "text": "print('ERROR:', ...)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "function(test,message)\r\n    if not test then report(message) end\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "if not test then report(message) end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "report(message)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function TSquare:__index(k)\r\n    print('static __index', self, k)\r\n    if not is_method[k] then\r\n      report(tostring(k) .. ' not in ' .. tostring(TSquare))\r\n    end\r\n    if k == 'setcolor' then\r\n      return function(self, o, ...)\r\n        print('static call', self, o, ...)\r\n        check(self.stype == TSquare, 'first param must be TSquare')\r\n        check(M.TString.isa(o.stype), 'second param must be string')\r\n        if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end\r\n      end\r\n    else\r\n      return function(self, ...)\r\n        print('static call', self, ...)\r\n        if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end\r\n      end      \r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 9,
    "text": "print('static __index', self, k)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "if not is_method[k] then\r\n      report(tostring(k) .. ' not in ' .. tostring(TSquare))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "report(tostring(k) .. ' not in ' .. tostring(TSquare))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "if k == 'setcolor' then\r\n      return function(self, o, ...)\r\n        print('static call', self, o, ...)\r\n        check(self.stype == TSquare, 'first param must be TSquare')\r\n        check(M.TString.isa(o.stype), 'second param must be string')\r\n        if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end\r\n      end\r\n    else\r\n      return function(self, ...)\r\n        print('static call', self, ...)\r\n        if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end\r\n      end      \r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "print('static call', self, o, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "check(self.stype == TSquare, 'first param must be TSquare')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "check(M.TString.isa(o.stype), 'second param must be string')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "report('expected two arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "print('static call', self, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "report('expected zero arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function Square.create(length)\r\n  return setmetatable({length=length}, Square)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function Square:area(length) return self.length^2 end",
    "type": "function"
  }, {
    "id": 26,
    "text": "function Square:perimeter(length) return self.length*4 end",
    "type": "function"
  }, {
    "id": 27,
    "text": "function Square:setcolor(color) self.color = color end",
    "type": "function"
  }, {
    "id": 28,
    "text": "self.color = color",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "function Square:__mul(other, val)\r\n  return Square.create(self.length * val)\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function() return '[TSquare Class]' end",
    "type": "function"
  }, {
    "id": 32,
    "text": "function(self, o, ...)\r\n        print('static call', self, o, ...)\r\n        check(self.stype == TSquare, 'first param must be TSquare')\r\n        check(M.TString.isa(o.stype), 'second param must be string')\r\n        if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function(self, ...)\r\n        print('static call', self, ...)\r\n        if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end\r\n      end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function()\r\n  print 'square:begin compiletime'  -- trace\r\n\r\n  -- Helper functions.\r\n  local report = function(...) print('ERROR:', ...) end\r\n  local check = function(test,message)\r\n    if not test then report(message) end\r\n  end\r\n\r\n  -- Define static type TSquare.\r\n  local TSquare = {}\r\n  setmetatable(TSquare,\r\n      {__tostring = function() return '[TSquare Class]' end})\r\n  local is_method = {area=true,perimeter=true,setcolor=true}\r\n  function TSquare:__index(k)\r\n    print('static __index', self, k)\r\n    if not is_method[k] then\r\n      report(tostring(k) .. ' not in ' .. tostring(TSquare))\r\n    end\r\n    if k == 'setcolor' then\r\n      return function(self, o, ...)\r\n        print('static call', self, o, ...)\r\n        check(self.stype == TSquare, 'first param must be TSquare')\r\n        check(M.TString.isa(o.stype), 'second param must be string')\r\n        if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end\r\n      end\r\n    else\r\n      return function(self, ...)\r\n        print('static call', self, ...)\r\n        if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end\r\n      end      \r\n    end\r\n  end\r\n\r\n  -- Define compile-time macro to retrieve TSquare static type.\r\n  --function MACRO.GETSQUARE() return 'value', TSquare end\r\n  _G.TSquare = TSquare -- hack\r\n\r\n  print 'square:end compiletime'\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "print 'square:begin compiletime'",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local report = function(...) print('ERROR:', ...) end",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local check = function(test,message)\r\n    if not test then report(message) end\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local TSquare = {}",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "setmetatable(TSquare,\r\n      {__tostring = function() return '[TSquare Class]' end})",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local is_method = {area=true,perimeter=true,setcolor=true}",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "_G.TSquare = TSquare",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "print 'square:end compiletime'",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "",
    "type": "function container"
  }, {
    "id": 47,
    "text": "create",
    "type": "global function"
  }, {
    "id": 48,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 49,
    "text": "print",
    "type": "global function"
  }, {
    "id": 50,
    "text": "ONCOMPILE",
    "type": "global function"
  }, {
    "id": 51,
    "text": "M.TString.isa",
    "type": "global function"
  }, {
    "id": 52,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 53,
    "text": "select",
    "type": "global function"
  }, {
    "id": 54,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "variable container"
  }, {
    "id": 56,
    "text": "",
    "type": "require container"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 59,
    "text": "",
    "type": "global variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  }, {
    "id": 61,
    "text": "",
    "type": "interface container"
  }, {
    "id": 62,
    "text": "",
    "type": "interface"
  } ]
}