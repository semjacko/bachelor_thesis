{
  "_filename": "macro.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luafish/lib/luafish/macro.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "calls",
    "to": 66
  }, {
    "from": 5,
    "label": "calls",
    "to": 23
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 9
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 9
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 32
  }, {
    "from": 37,
    "label": "has",
    "to": 33
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 9
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 32
  }, {
    "from": 41,
    "label": "has",
    "to": 33
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 9
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 32
  }, {
    "from": 45,
    "label": "has",
    "to": 33
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 32
  }, {
    "from": 49,
    "label": "has",
    "to": 33
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 9
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 32
  }, {
    "from": 53,
    "label": "has",
    "to": 33
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 9
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 14
  }, {
    "from": 61,
    "label": "has",
    "to": 15
  }, {
    "from": 61,
    "label": "has",
    "to": 16
  }, {
    "from": 59,
    "label": "has",
    "to": 9
  }, {
    "from": 59,
    "label": "has",
    "to": 9
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 20
  }, {
    "from": 63,
    "label": "has",
    "to": 21
  }, {
    "from": 63,
    "label": "has",
    "to": 9
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 24
  }, {
    "from": 66,
    "label": "has",
    "to": 9
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 32
  }, {
    "from": 68,
    "label": "has",
    "to": 33
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 9
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 9
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 14
  }, {
    "from": 76,
    "label": "has",
    "to": 15
  }, {
    "from": 76,
    "label": "has",
    "to": 16
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 20
  }, {
    "from": 78,
    "label": "has",
    "to": 21
  }, {
    "from": 78,
    "label": "has",
    "to": 9
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 24
  }, {
    "from": 81,
    "label": "has",
    "to": 9
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 85,
    "label": "has",
    "to": 9
  }, {
    "from": 85,
    "label": "has",
    "to": 9
  }, {
    "from": 85,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 92,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 9
  }, {
    "from": 102,
    "label": "has",
    "to": 9
  }, {
    "from": 102,
    "label": "has",
    "to": 9
  }, {
    "from": 102,
    "label": "has",
    "to": 9
  }, {
    "from": 102,
    "label": "has",
    "to": 9
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 107,
    "label": "has",
    "to": 112
  }, {
    "from": 107,
    "label": "has",
    "to": 9
  }, {
    "from": 107,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 114,
    "label": "has",
    "to": 122
  }, {
    "from": 114,
    "label": "has",
    "to": 9
  }, {
    "from": 114,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 9
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 9
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 9
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 9
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 135,
    "label": "has",
    "to": 9
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 140,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 147,
    "label": "has",
    "to": 158
  }, {
    "from": 147,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 159,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 159,
    "label": "has",
    "to": 167
  }, {
    "from": 147,
    "label": "has",
    "to": 168
  }, {
    "from": 147,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 175
  }, {
    "from": 147,
    "label": "has",
    "to": 168
  }, {
    "from": 147,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 179,
    "label": "has",
    "to": 174
  }, {
    "from": 147,
    "label": "has",
    "to": 182
  }, {
    "from": 147,
    "label": "has",
    "to": 183
  }, {
    "from": 147,
    "label": "has",
    "to": 184
  }, {
    "from": 147,
    "label": "has",
    "to": 185
  }, {
    "from": 147,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 186,
    "label": "has",
    "to": 194
  }, {
    "from": 186,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 185
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 202,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 193
  }, {
    "from": 147,
    "label": "has",
    "to": 207
  }, {
    "from": 147,
    "label": "has",
    "to": 208
  }, {
    "from": 147,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 147,
    "label": "has",
    "to": 215
  }, {
    "from": 147,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 216,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 140,
    "label": "has",
    "to": 9
  }, {
    "from": 140,
    "label": "has",
    "to": 9
  }, {
    "from": 140,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 223,
    "label": "has",
    "to": 9
  }, {
    "from": 223,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 231,
    "label": "has",
    "to": 233
  }, {
    "from": 231,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 238
  }, {
    "from": 231,
    "label": "has",
    "to": 239
  }, {
    "from": 231,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 233
  }, {
    "from": 240,
    "label": "has",
    "to": 243
  }, {
    "from": 240,
    "label": "has",
    "to": 244
  }, {
    "from": 240,
    "label": "has",
    "to": 245
  }, {
    "from": 240,
    "label": "has",
    "to": 246
  }, {
    "from": 231,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 247,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 235
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 236
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 231,
    "label": "has",
    "to": 254
  }, {
    "from": 231,
    "label": "has",
    "to": 255
  }, {
    "from": 231,
    "label": "has",
    "to": 249
  }, {
    "from": 231,
    "label": "has",
    "to": 256
  }, {
    "from": 231,
    "label": "has",
    "to": 257
  }, {
    "from": 228,
    "label": "has",
    "to": 258
  }, {
    "from": 228,
    "label": "has",
    "to": 259
  }, {
    "from": 228,
    "label": "has",
    "to": 260
  }, {
    "from": 228,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 228,
    "label": "has",
    "to": 9
  }, {
    "from": 228,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 265,
    "label": "has",
    "to": 267
  }, {
    "from": 265,
    "label": "has",
    "to": 268
  }, {
    "from": 265,
    "label": "has",
    "to": 269
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 270,
    "label": "has",
    "to": 272
  }, {
    "from": 270,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 270,
    "label": "has",
    "to": 275
  }, {
    "from": 270,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 276,
    "label": "has",
    "to": 279
  }, {
    "from": 276,
    "label": "has",
    "to": 280
  }, {
    "from": 276,
    "label": "has",
    "to": 281
  }, {
    "from": 276,
    "label": "has",
    "to": 9
  }, {
    "from": 270,
    "label": "has",
    "to": 282
  }, {
    "from": 270,
    "label": "has",
    "to": 283
  }, {
    "from": 270,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 236
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 287,
    "label": "has",
    "to": 289
  }, {
    "from": 287,
    "label": "has",
    "to": 290
  }, {
    "from": 287,
    "label": "has",
    "to": 291
  }, {
    "from": 284,
    "label": "has",
    "to": 9
  }, {
    "from": 284,
    "label": "has",
    "to": 292
  }, {
    "from": 284,
    "label": "has",
    "to": 293
  }, {
    "from": 284,
    "label": "has",
    "to": 294
  }, {
    "from": 284,
    "label": "has",
    "to": 9
  }, {
    "from": 270,
    "label": "has",
    "to": 295
  }, {
    "from": 270,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 270,
    "label": "has",
    "to": 299
  }, {
    "from": 270,
    "label": "has",
    "to": 300
  }, {
    "from": 270,
    "label": "has",
    "to": 301
  }, {
    "from": 270,
    "label": "has",
    "to": 302
  }, {
    "from": 270,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 270,
    "label": "has",
    "to": 305
  }, {
    "from": 270,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 270,
    "label": "has",
    "to": 308
  }, {
    "from": 270,
    "label": "has",
    "to": 309
  }, {
    "from": 270,
    "label": "has",
    "to": 310
  }, {
    "from": 270,
    "label": "has",
    "to": 9
  }, {
    "from": 270,
    "label": "has",
    "to": 311
  }, {
    "from": 312,
    "label": "has",
    "to": 277
  }, {
    "from": 312,
    "label": "has",
    "to": 278
  }, {
    "from": 312,
    "label": "has",
    "to": 279
  }, {
    "from": 312,
    "label": "has",
    "to": 280
  }, {
    "from": 312,
    "label": "has",
    "to": 281
  }, {
    "from": 312,
    "label": "has",
    "to": 9
  }, {
    "from": 312,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 285
  }, {
    "from": 314,
    "label": "has",
    "to": 236
  }, {
    "from": 314,
    "label": "has",
    "to": 286
  }, {
    "from": 314,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 287,
    "label": "has",
    "to": 289
  }, {
    "from": 287,
    "label": "has",
    "to": 290
  }, {
    "from": 287,
    "label": "has",
    "to": 291
  }, {
    "from": 314,
    "label": "has",
    "to": 9
  }, {
    "from": 314,
    "label": "has",
    "to": 292
  }, {
    "from": 314,
    "label": "has",
    "to": 293
  }, {
    "from": 314,
    "label": "has",
    "to": 294
  }, {
    "from": 314,
    "label": "has",
    "to": 9
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 318,
    "label": "has",
    "to": 298
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 320,
    "label": "has",
    "to": 310
  }, {
    "from": 320,
    "label": "has",
    "to": 323
  }, {
    "from": 320,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 320,
    "label": "has",
    "to": 9
  }, {
    "from": 320,
    "label": "has",
    "to": 326
  }, {
    "from": 327,
    "label": "has",
    "to": 321
  }, {
    "from": 327,
    "label": "has",
    "to": 322
  }, {
    "from": 327,
    "label": "has",
    "to": 310
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 327,
    "label": "has",
    "to": 9
  }, {
    "from": 327,
    "label": "has",
    "to": 329
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 331,
    "label": "has",
    "to": 333
  }, {
    "from": 331,
    "label": "has",
    "to": 9
  }, {
    "from": 331,
    "label": "has",
    "to": 334
  }, {
    "from": 331,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 335,
    "label": "has",
    "to": 337
  }, {
    "from": 335,
    "label": "has",
    "to": 338
  }, {
    "from": 335,
    "label": "has",
    "to": 339
  }, {
    "from": 335,
    "label": "has",
    "to": 340
  }, {
    "from": 335,
    "label": "has",
    "to": 341
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 335,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 331,
    "label": "has",
    "to": 9
  }, {
    "from": 331,
    "label": "has",
    "to": 9
  }, {
    "from": 331,
    "label": "has",
    "to": 345
  }, {
    "from": 346,
    "label": "has",
    "to": 334
  }, {
    "from": 346,
    "label": "has",
    "to": 347
  }, {
    "from": 346,
    "label": "has",
    "to": 9
  }, {
    "from": 346,
    "label": "has",
    "to": 348
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 349,
    "label": "has",
    "to": 9
  }, {
    "from": 349,
    "label": "has",
    "to": 351
  }, {
    "from": 133,
    "label": "calls",
    "to": 376
  }, {
    "from": 92,
    "label": "calls",
    "to": 358
  }, {
    "from": 102,
    "label": "calls",
    "to": 358
  }, {
    "from": 312,
    "label": "calls",
    "to": 358
  }, {
    "from": 312,
    "label": "calls",
    "to": 358
  }, {
    "from": 314,
    "label": "calls",
    "to": 358
  }, {
    "from": 320,
    "label": "calls",
    "to": 358
  }, {
    "from": 320,
    "label": "calls",
    "to": 358
  }, {
    "from": 327,
    "label": "calls",
    "to": 358
  }, {
    "from": 140,
    "label": "calls",
    "to": 102
  }, {
    "from": 140,
    "label": "calls",
    "to": 102
  }, {
    "from": 8,
    "label": "calls",
    "to": 359
  }, {
    "from": 57,
    "label": "calls",
    "to": 359
  }, {
    "from": 72,
    "label": "calls",
    "to": 359
  }, {
    "from": 92,
    "label": "calls",
    "to": 359
  }, {
    "from": 140,
    "label": "calls",
    "to": 359
  }, {
    "from": 140,
    "label": "calls",
    "to": 359
  }, {
    "from": 140,
    "label": "calls",
    "to": 359
  }, {
    "from": 140,
    "label": "calls",
    "to": 359
  }, {
    "from": 63,
    "label": "calls",
    "to": 59
  }, {
    "from": 68,
    "label": "calls",
    "to": 59
  }, {
    "from": 140,
    "label": "calls",
    "to": 59
  }, {
    "from": 140,
    "label": "calls",
    "to": 379
  }, {
    "from": 140,
    "label": "calls",
    "to": 124
  }, {
    "from": 140,
    "label": "calls",
    "to": 124
  }, {
    "from": 140,
    "label": "calls",
    "to": 124
  }, {
    "from": 270,
    "label": "calls",
    "to": 265
  }, {
    "from": 102,
    "label": "calls",
    "to": 360
  }, {
    "from": 312,
    "label": "calls",
    "to": 360
  }, {
    "from": 140,
    "label": "calls",
    "to": 140
  }, {
    "from": 270,
    "label": "calls",
    "to": 140
  }, {
    "from": 78,
    "label": "calls",
    "to": 74
  }, {
    "from": 228,
    "label": "calls",
    "to": 74
  }, {
    "from": 228,
    "label": "calls",
    "to": 223
  }, {
    "from": 228,
    "label": "calls",
    "to": 223
  }, {
    "from": 228,
    "label": "calls",
    "to": 223
  }, {
    "from": 228,
    "label": "calls",
    "to": 223
  }, {
    "from": 140,
    "label": "calls",
    "to": 131
  }, {
    "from": 92,
    "label": "calls",
    "to": 361
  }, {
    "from": 124,
    "label": "calls",
    "to": 361
  }, {
    "from": 140,
    "label": "calls",
    "to": 361
  }, {
    "from": 228,
    "label": "calls",
    "to": 361
  }, {
    "from": 331,
    "label": "calls",
    "to": 85
  }, {
    "from": 346,
    "label": "calls",
    "to": 85
  }, {
    "from": 270,
    "label": "calls",
    "to": 107
  }, {
    "from": 140,
    "label": "calls",
    "to": 362
  }, {
    "from": 140,
    "label": "calls",
    "to": 362
  }, {
    "from": 270,
    "label": "calls",
    "to": 362
  }, {
    "from": 270,
    "label": "calls",
    "to": 362
  }, {
    "from": 270,
    "label": "calls",
    "to": 362
  }, {
    "from": 135,
    "label": "calls",
    "to": 377
  }, {
    "from": 102,
    "label": "calls",
    "to": 366
  }, {
    "from": 312,
    "label": "calls",
    "to": 366
  }, {
    "from": 270,
    "label": "calls",
    "to": 366
  }, {
    "from": 314,
    "label": "calls",
    "to": 363
  }, {
    "from": 320,
    "label": "calls",
    "to": 368
  }, {
    "from": 135,
    "label": "calls",
    "to": 133
  }, {
    "from": 140,
    "label": "calls",
    "to": 133
  }, {
    "from": 140,
    "label": "calls",
    "to": 133
  }, {
    "from": 320,
    "label": "calls",
    "to": 270
  }, {
    "from": 327,
    "label": "calls",
    "to": 270
  }, {
    "from": 223,
    "label": "calls",
    "to": 374
  }, {
    "from": 23,
    "label": "calls",
    "to": 382
  }, {
    "from": 66,
    "label": "calls",
    "to": 382
  }, {
    "from": 81,
    "label": "calls",
    "to": 382
  }, {
    "from": 270,
    "label": "calls",
    "to": 378
  }, {
    "from": 124,
    "label": "calls",
    "to": 114
  }, {
    "from": 140,
    "label": "calls",
    "to": 114
  }, {
    "from": 140,
    "label": "calls",
    "to": 114
  }, {
    "from": 140,
    "label": "calls",
    "to": 114
  }, {
    "from": 140,
    "label": "calls",
    "to": 114
  }, {
    "from": 140,
    "label": "calls",
    "to": 114
  }, {
    "from": 140,
    "label": "calls",
    "to": 114
  }, {
    "from": 140,
    "label": "calls",
    "to": 114
  }, {
    "from": 140,
    "label": "calls",
    "to": 114
  }, {
    "from": 135,
    "label": "calls",
    "to": 372
  }, {
    "from": 140,
    "label": "calls",
    "to": 372
  }, {
    "from": 140,
    "label": "calls",
    "to": 372
  }, {
    "from": 140,
    "label": "calls",
    "to": 372
  }, {
    "from": 316,
    "label": "calls",
    "to": 372
  }, {
    "from": 320,
    "label": "calls",
    "to": 372
  }, {
    "from": 124,
    "label": "calls",
    "to": 383
  }, {
    "from": 140,
    "label": "calls",
    "to": 383
  }, {
    "from": 140,
    "label": "calls",
    "to": 383
  }, {
    "from": 140,
    "label": "calls",
    "to": 383
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 92,
    "label": "calls",
    "to": 364
  }, {
    "from": 140,
    "label": "calls",
    "to": 364
  }, {
    "from": 312,
    "label": "calls",
    "to": 364
  }, {
    "from": 314,
    "label": "calls",
    "to": 364
  }, {
    "from": 314,
    "label": "calls",
    "to": 364
  }, {
    "from": 314,
    "label": "calls",
    "to": 364
  }, {
    "from": 314,
    "label": "calls",
    "to": 364
  }, {
    "from": 59,
    "label": "calls",
    "to": 66
  }, {
    "from": 18,
    "label": "calls",
    "to": 11
  }, {
    "from": 26,
    "label": "calls",
    "to": 11
  }, {
    "from": 31,
    "label": "calls",
    "to": 11
  }, {
    "from": 37,
    "label": "calls",
    "to": 11
  }, {
    "from": 41,
    "label": "calls",
    "to": 11
  }, {
    "from": 45,
    "label": "calls",
    "to": 11
  }, {
    "from": 49,
    "label": "calls",
    "to": 11
  }, {
    "from": 53,
    "label": "calls",
    "to": 11
  }, {
    "from": 140,
    "label": "calls",
    "to": 11
  }, {
    "from": 352,
    "label": "calls",
    "to": 367
  }, {
    "from": 352,
    "label": "calls",
    "to": 367
  }, {
    "from": 314,
    "label": "calls",
    "to": 367
  }, {
    "from": 314,
    "label": "calls",
    "to": 367
  }, {
    "from": 314,
    "label": "calls",
    "to": 367
  }, {
    "from": 331,
    "label": "calls",
    "to": 367
  }, {
    "from": 228,
    "label": "calls",
    "to": 228
  }, {
    "from": 265,
    "label": "calls",
    "to": 228
  }, {
    "from": 140,
    "label": "calls",
    "to": 129
  }, {
    "from": 74,
    "label": "calls",
    "to": 81
  }, {
    "from": 140,
    "label": "calls",
    "to": 81
  }, {
    "from": 140,
    "label": "calls",
    "to": 375
  }, {
    "from": 11,
    "label": "calls",
    "to": 369
  }, {
    "from": 59,
    "label": "calls",
    "to": 369
  }, {
    "from": 74,
    "label": "calls",
    "to": 369
  }, {
    "from": 92,
    "label": "calls",
    "to": 369
  }, {
    "from": 92,
    "label": "calls",
    "to": 369
  }, {
    "from": 92,
    "label": "calls",
    "to": 369
  }, {
    "from": 140,
    "label": "calls",
    "to": 369
  }, {
    "from": 140,
    "label": "calls",
    "to": 369
  }, {
    "from": 228,
    "label": "calls",
    "to": 369
  }, {
    "from": 11,
    "label": "calls",
    "to": 23
  }, {
    "from": 140,
    "label": "calls",
    "to": 365
  }, {
    "from": 349,
    "label": "calls",
    "to": 365
  }, {
    "from": 85,
    "label": "calls",
    "to": 370
  }, {
    "from": 270,
    "label": "calls",
    "to": 370
  }, {
    "from": 320,
    "label": "calls",
    "to": 370
  }, {
    "from": 327,
    "label": "calls",
    "to": 370
  }, {
    "from": 114,
    "label": "calls",
    "to": 318
  }, {
    "from": 140,
    "label": "calls",
    "to": 135
  }, {
    "from": 140,
    "label": "calls",
    "to": 135
  }, {
    "from": 140,
    "label": "calls",
    "to": 135
  }, {
    "from": 140,
    "label": "calls",
    "to": 373
  }, {
    "from": 140,
    "label": "calls",
    "to": 373
  }, {
    "from": 352,
    "label": "calls",
    "to": 380
  }, {
    "from": 11,
    "label": "calls",
    "to": 380
  }, {
    "from": 352,
    "label": "calls",
    "to": 380
  }, {
    "from": 59,
    "label": "calls",
    "to": 380
  }, {
    "from": 352,
    "label": "calls",
    "to": 380
  }, {
    "from": 74,
    "label": "calls",
    "to": 380
  }, {
    "from": 107,
    "label": "calls",
    "to": 380
  }, {
    "from": 312,
    "label": "calls",
    "to": 371
  }, {
    "from": 270,
    "label": "calls",
    "to": 371
  }, {
    "from": 331,
    "label": "calls",
    "to": 320
  }, {
    "from": 102,
    "label": "calls",
    "to": 357
  }, {
    "from": 312,
    "label": "calls",
    "to": 357
  }, {
    "from": 270,
    "label": "calls",
    "to": 357
  }, {
    "from": 312,
    "label": "calls",
    "to": 381
  }, {
    "from": 346,
    "label": "calls",
    "to": 327
  }, {
    "from": 92,
    "label": "calls",
    "to": 92
  }, {
    "from": 92,
    "label": "calls",
    "to": 92
  }, {
    "from": 92,
    "label": "calls",
    "to": 92
  }, {
    "from": 92,
    "label": "calls",
    "to": 92
  }, {
    "from": 140,
    "label": "calls",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 352
  }, {
    "from": 352,
    "label": "declares",
    "to": 8
  }, {
    "from": 352,
    "label": "declares",
    "to": 11
  }, {
    "from": 352,
    "label": "declares",
    "to": 18
  }, {
    "from": 352,
    "label": "declares",
    "to": 23
  }, {
    "from": 352,
    "label": "declares",
    "to": 26
  }, {
    "from": 352,
    "label": "declares",
    "to": 31
  }, {
    "from": 352,
    "label": "declares",
    "to": 37
  }, {
    "from": 352,
    "label": "declares",
    "to": 41
  }, {
    "from": 352,
    "label": "declares",
    "to": 45
  }, {
    "from": 352,
    "label": "declares",
    "to": 49
  }, {
    "from": 352,
    "label": "declares",
    "to": 53
  }, {
    "from": 352,
    "label": "declares",
    "to": 57
  }, {
    "from": 352,
    "label": "declares",
    "to": 59
  }, {
    "from": 352,
    "label": "declares",
    "to": 63
  }, {
    "from": 352,
    "label": "declares",
    "to": 66
  }, {
    "from": 352,
    "label": "declares",
    "to": 68
  }, {
    "from": 352,
    "label": "declares",
    "to": 72
  }, {
    "from": 352,
    "label": "declares",
    "to": 74
  }, {
    "from": 352,
    "label": "declares",
    "to": 78
  }, {
    "from": 352,
    "label": "declares",
    "to": 81
  }, {
    "from": 352,
    "label": "declares",
    "to": 83
  }, {
    "from": 352,
    "label": "declares",
    "to": 85
  }, {
    "from": 352,
    "label": "declares",
    "to": 92
  }, {
    "from": 352,
    "label": "declares",
    "to": 102
  }, {
    "from": 352,
    "label": "declares",
    "to": 107
  }, {
    "from": 352,
    "label": "declares",
    "to": 114
  }, {
    "from": 352,
    "label": "declares",
    "to": 124
  }, {
    "from": 352,
    "label": "declares",
    "to": 129
  }, {
    "from": 352,
    "label": "declares",
    "to": 131
  }, {
    "from": 352,
    "label": "declares",
    "to": 133
  }, {
    "from": 352,
    "label": "declares",
    "to": 135
  }, {
    "from": 352,
    "label": "declares",
    "to": 140
  }, {
    "from": 352,
    "label": "declares",
    "to": 223
  }, {
    "from": 352,
    "label": "declares",
    "to": 228
  }, {
    "from": 352,
    "label": "declares",
    "to": 265
  }, {
    "from": 352,
    "label": "declares",
    "to": 270
  }, {
    "from": 352,
    "label": "declares",
    "to": 312
  }, {
    "from": 352,
    "label": "declares",
    "to": 314
  }, {
    "from": 352,
    "label": "declares",
    "to": 316
  }, {
    "from": 352,
    "label": "declares",
    "to": 318
  }, {
    "from": 352,
    "label": "declares",
    "to": 320
  }, {
    "from": 352,
    "label": "declares",
    "to": 327
  }, {
    "from": 352,
    "label": "declares",
    "to": 330
  }, {
    "from": 352,
    "label": "declares",
    "to": 331
  }, {
    "from": 352,
    "label": "declares",
    "to": 346
  }, {
    "from": 352,
    "label": "declares",
    "to": 349
  }, {
    "from": 384,
    "label": "requires",
    "to": 1
  }, {
    "from": 385,
    "label": "requires",
    "to": 1
  }, {
    "from": 386,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 388
  }, {
    "from": 1,
    "label": "contains",
    "to": 389
  }, {
    "from": 388,
    "label": "initializes",
    "to": 390
  }, {
    "from": 390,
    "label": "assigns",
    "to": 391
  }, {
    "from": 388,
    "label": "initializes",
    "to": 392
  }, {
    "from": 392,
    "label": "assigns",
    "to": 393
  }, {
    "from": 388,
    "label": "initializes",
    "to": 394
  }, {
    "from": 394,
    "label": "assigns",
    "to": 395
  }, {
    "from": 388,
    "label": "initializes",
    "to": 396
  }, {
    "from": 396,
    "label": "assigns",
    "to": 397
  }, {
    "from": 388,
    "label": "initializes",
    "to": 398
  }, {
    "from": 398,
    "label": "assigns",
    "to": 399
  }, {
    "from": 388,
    "label": "initializes",
    "to": 400
  }, {
    "from": 400,
    "label": "assigns",
    "to": 401
  }, {
    "from": 388,
    "label": "initializes",
    "to": 402
  }, {
    "from": 402,
    "label": "assigns",
    "to": 403
  }, {
    "from": 388,
    "label": "initializes",
    "to": 404
  }, {
    "from": 404,
    "label": "assigns",
    "to": 405
  }, {
    "from": 388,
    "label": "initializes",
    "to": 406
  }, {
    "from": 406,
    "label": "assigns",
    "to": 407
  }, {
    "from": 407,
    "label": "assigns",
    "to": 408
  }, {
    "from": 408,
    "label": "assigns",
    "to": 409
  }, {
    "from": 407,
    "label": "assigns",
    "to": 410
  }, {
    "from": 410,
    "label": "assigns",
    "to": 411
  }, {
    "from": 407,
    "label": "assigns",
    "to": 412
  }, {
    "from": 412,
    "label": "assigns",
    "to": 413
  }, {
    "from": 407,
    "label": "assigns",
    "to": 414
  }, {
    "from": 414,
    "label": "assigns",
    "to": 415
  }, {
    "from": 407,
    "label": "assigns",
    "to": 416
  }, {
    "from": 416,
    "label": "assigns",
    "to": 417
  }, {
    "from": 388,
    "label": "initializes",
    "to": 418
  }, {
    "from": 418,
    "label": "assigns",
    "to": 419
  }, {
    "from": 419,
    "label": "assigns",
    "to": 420
  }, {
    "from": 420,
    "label": "assigns",
    "to": 421
  }, {
    "from": 419,
    "label": "assigns",
    "to": 422
  }, {
    "from": 422,
    "label": "assigns",
    "to": 423
  }, {
    "from": 419,
    "label": "assigns",
    "to": 424
  }, {
    "from": 424,
    "label": "assigns",
    "to": 425
  }, {
    "from": 419,
    "label": "assigns",
    "to": 426
  }, {
    "from": 426,
    "label": "assigns",
    "to": 427
  }, {
    "from": 419,
    "label": "assigns",
    "to": 428
  }, {
    "from": 428,
    "label": "assigns",
    "to": 429
  }, {
    "from": 419,
    "label": "assigns",
    "to": 430
  }, {
    "from": 430,
    "label": "assigns",
    "to": 431
  }, {
    "from": 419,
    "label": "assigns",
    "to": 432
  }, {
    "from": 432,
    "label": "assigns",
    "to": 433
  }, {
    "from": 419,
    "label": "assigns",
    "to": 434
  }, {
    "from": 434,
    "label": "assigns",
    "to": 435
  }, {
    "from": 419,
    "label": "assigns",
    "to": 436
  }, {
    "from": 436,
    "label": "assigns",
    "to": 437
  }, {
    "from": 419,
    "label": "assigns",
    "to": 438
  }, {
    "from": 438,
    "label": "assigns",
    "to": 439
  }, {
    "from": 419,
    "label": "assigns",
    "to": 440
  }, {
    "from": 440,
    "label": "assigns",
    "to": 441
  }, {
    "from": 419,
    "label": "assigns",
    "to": 442
  }, {
    "from": 442,
    "label": "assigns",
    "to": 443
  }, {
    "from": 419,
    "label": "assigns",
    "to": 444
  }, {
    "from": 444,
    "label": "assigns",
    "to": 445
  }, {
    "from": 388,
    "label": "initializes",
    "to": 446
  }, {
    "from": 446,
    "label": "assigns",
    "to": 447
  }, {
    "from": 447,
    "label": "assigns",
    "to": 448
  }, {
    "from": 448,
    "label": "assigns",
    "to": 449
  }, {
    "from": 447,
    "label": "assigns",
    "to": 450
  }, {
    "from": 450,
    "label": "assigns",
    "to": 451
  }, {
    "from": 388,
    "label": "initializes",
    "to": 452
  }, {
    "from": 452,
    "label": "assigns",
    "to": 453
  }, {
    "from": 453,
    "label": "assigns",
    "to": 454
  }, {
    "from": 454,
    "label": "assigns",
    "to": 455
  }, {
    "from": 453,
    "label": "assigns",
    "to": 456
  }, {
    "from": 456,
    "label": "assigns",
    "to": 457
  }, {
    "from": 453,
    "label": "assigns",
    "to": 458
  }, {
    "from": 458,
    "label": "assigns",
    "to": 459
  }, {
    "from": 453,
    "label": "assigns",
    "to": 460
  }, {
    "from": 460,
    "label": "assigns",
    "to": 461
  }, {
    "from": 453,
    "label": "assigns",
    "to": 462
  }, {
    "from": 462,
    "label": "assigns",
    "to": 463
  }, {
    "from": 453,
    "label": "assigns",
    "to": 464
  }, {
    "from": 464,
    "label": "assigns",
    "to": 465
  }, {
    "from": 388,
    "label": "initializes",
    "to": 466
  }, {
    "from": 466,
    "label": "assigns",
    "to": 467
  }, {
    "from": 388,
    "label": "initializes",
    "to": 468
  }, {
    "from": 468,
    "label": "assigns",
    "to": 469
  }, {
    "from": 388,
    "label": "initializes",
    "to": 470
  }, {
    "from": 470,
    "label": "assigns",
    "to": 471
  }, {
    "from": 388,
    "label": "initializes",
    "to": 472
  }, {
    "from": 472,
    "label": "assigns",
    "to": 473
  }, {
    "from": 389,
    "label": "initializes",
    "to": 474
  }, {
    "from": 474,
    "label": "requires",
    "to": 2
  }, {
    "from": 389,
    "label": "initializes",
    "to": 475
  }, {
    "from": 475,
    "label": "requires",
    "to": 3
  }, {
    "from": 389,
    "label": "initializes",
    "to": 476
  }, {
    "from": 476,
    "label": "requires",
    "to": 477
  }, {
    "from": 1,
    "label": "provides",
    "to": 478
  }, {
    "from": 387,
    "label": "represents",
    "to": 479
  }, {
    "from": 478,
    "label": "provides",
    "to": 479
  }, {
    "from": 480,
    "label": "requires",
    "to": 1
  }, {
    "from": 482,
    "label": "requires",
    "to": 1
  }, {
    "from": 484,
    "label": "requires",
    "to": 1
  }, {
    "from": 485,
    "label": "requires",
    "to": 1
  }, {
    "from": 487,
    "label": "requires",
    "to": 1
  }, {
    "from": 488,
    "label": "requires",
    "to": 1
  }, {
    "from": 392,
    "label": "contains",
    "to": 6
  }, {
    "from": 392,
    "label": "contains",
    "to": 7
  }, {
    "from": 394,
    "label": "contains",
    "to": 11
  }, {
    "from": 394,
    "label": "contains",
    "to": 18
  }, {
    "from": 394,
    "label": "contains",
    "to": 23
  }, {
    "from": 398,
    "label": "contains",
    "to": 59
  }, {
    "from": 398,
    "label": "contains",
    "to": 63
  }, {
    "from": 398,
    "label": "contains",
    "to": 66
  }, {
    "from": 402,
    "label": "contains",
    "to": 74
  }, {
    "from": 402,
    "label": "contains",
    "to": 78
  }, {
    "from": 402,
    "label": "contains",
    "to": 81
  }, {
    "from": 402,
    "label": "contains",
    "to": 83
  }, {
    "from": 387,
    "label": "contains",
    "to": 92
  }, {
    "from": 392,
    "label": "contains",
    "to": 92
  }, {
    "from": 481,
    "label": "contains",
    "to": 92
  }, {
    "from": 483,
    "label": "contains",
    "to": 92
  }, {
    "from": 486,
    "label": "contains",
    "to": 92
  }, {
    "from": 387,
    "label": "contains",
    "to": 102
  }, {
    "from": 392,
    "label": "contains",
    "to": 102
  }, {
    "from": 481,
    "label": "contains",
    "to": 102
  }, {
    "from": 483,
    "label": "contains",
    "to": 102
  }, {
    "from": 486,
    "label": "contains",
    "to": 102
  }, {
    "from": 387,
    "label": "contains",
    "to": 140
  }, {
    "from": 392,
    "label": "contains",
    "to": 140
  }, {
    "from": 481,
    "label": "contains",
    "to": 140
  }, {
    "from": 483,
    "label": "contains",
    "to": 140
  }, {
    "from": 486,
    "label": "contains",
    "to": 140
  }, {
    "from": 387,
    "label": "contains",
    "to": 265
  }, {
    "from": 392,
    "label": "contains",
    "to": 265
  }, {
    "from": 481,
    "label": "contains",
    "to": 265
  }, {
    "from": 483,
    "label": "contains",
    "to": 265
  }, {
    "from": 486,
    "label": "contains",
    "to": 265
  }, {
    "from": 387,
    "label": "contains",
    "to": 270
  }, {
    "from": 392,
    "label": "contains",
    "to": 270
  }, {
    "from": 481,
    "label": "contains",
    "to": 270
  }, {
    "from": 483,
    "label": "contains",
    "to": 270
  }, {
    "from": 486,
    "label": "contains",
    "to": 270
  }, {
    "from": 387,
    "label": "contains",
    "to": 320
  }, {
    "from": 392,
    "label": "contains",
    "to": 320
  }, {
    "from": 481,
    "label": "contains",
    "to": 320
  }, {
    "from": 483,
    "label": "contains",
    "to": 320
  }, {
    "from": 486,
    "label": "contains",
    "to": 320
  }, {
    "from": 387,
    "label": "contains",
    "to": 327
  }, {
    "from": 392,
    "label": "contains",
    "to": 327
  }, {
    "from": 481,
    "label": "contains",
    "to": 327
  }, {
    "from": 483,
    "label": "contains",
    "to": 327
  }, {
    "from": 486,
    "label": "contains",
    "to": 327
  }, {
    "from": 387,
    "label": "contains",
    "to": 331
  }, {
    "from": 392,
    "label": "contains",
    "to": 331
  }, {
    "from": 481,
    "label": "contains",
    "to": 331
  }, {
    "from": 483,
    "label": "contains",
    "to": 331
  }, {
    "from": 486,
    "label": "contains",
    "to": 331
  }, {
    "from": 387,
    "label": "contains",
    "to": 346
  }, {
    "from": 392,
    "label": "contains",
    "to": 346
  }, {
    "from": 481,
    "label": "contains",
    "to": 346
  }, {
    "from": 483,
    "label": "contains",
    "to": 346
  }, {
    "from": 486,
    "label": "contains",
    "to": 346
  }, {
    "from": 387,
    "label": "contains",
    "to": 349
  }, {
    "from": 392,
    "label": "contains",
    "to": 349
  }, {
    "from": 481,
    "label": "contains",
    "to": 349
  }, {
    "from": 483,
    "label": "contains",
    "to": 349
  }, {
    "from": 486,
    "label": "contains",
    "to": 349
  }, {
    "from": 392,
    "label": "contains",
    "to": 353
  }, {
    "from": 392,
    "label": "contains",
    "to": 354
  }, {
    "from": 392,
    "label": "contains",
    "to": 355
  }, {
    "from": 392,
    "label": "contains",
    "to": 356
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "macro",
    "type": "module"
  }, {
    "id": 2,
    "text": "parser",
    "type": "module"
  }, {
    "id": 3,
    "text": "serializer",
    "type": "module"
  }, {
    "id": 4,
    "text": "function TSquare:__index(k)\r\n    print('static __index', self, k)\r\n    if not is_method[k] then\r\n      report(tostring(k) .. ' not in ' .. tostring(TSquare))\r\n    end\r\n    if k == 'setcolor' then\r\n      return function(self, o, ...)\r\n        print('static call', self, o, ...)\r\n        check(self.stype == TSquare, 'first param must be TSquare')\r\n        check(Macro.TString.isa(o.stype), 'second param must be string')\r\n        if select('#', ...) ~= 0 then\r\n          report('expected two arguments')\r\n        end\r\n      end\r\n    else\r\n      return function(self, ...)\r\n        print('static call', self, ...)\r\n        if select('#', ...) ~= 0 then\r\n          report('expected zero arguments')\r\n        end\r\n      end      \r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function TSquare:__mul(other)\r\n    print('static __mul', self, other)\r\n    if not (check(stype == TSquare, 'first op must be TSquare') or\r\n            check(Macro.TNumber.isa(other), 'second op must be number'))\r\n    then return end\r\n    return TSquare\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function M.c_from_ast(ast)\r\n  assert(ast.tag == 'Block')\r\n  local cobj = to_c(ast)\r\n\r\n  return [[\r\n#include <stdio.h>\r\n]] .. (cobj.toplevel and cobj.toplevel or '') .. [[\r\nint main() {\r\n]] .. cobj[1] ..\r\n[[\r\nreturn 0;\r\n}\r\n]]\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function M.c_from_lua(input)\r\n  local Parser = require 'luafish.parser'\r\n  local p = Parser()\r\n  local ast = p:parse(input)\r\n  return M.c_from_ast(ast)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function TNumberMT:__tostring()\r\n  return 'Number[' .. tostring(self.value) .. ']'\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function TNumber.create(ast)\r\n  local self = setmetatable({}, {__index = TNumber})\r\n  if ast == nil then -- do nothing\r\n  elseif type(ast) == 'number' then\r\n    self.value = ast\r\n  elseif TNumber.isa(ast.stype) then\r\n    return ast.stype\r\n  elseif ast.tag == 'Number' then\r\n    local value = ast[1]\r\n    self.value = value\r\n  elseif ast.tag == 'Id' then\r\n    -- self.value not set\r\n  else\r\n    -- nothing\r\n  end\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local self = setmetatable({}, {__index = TNumber})",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if ast == nil then -- do nothing\r\n  elseif type(ast) == 'number' then\r\n    self.value = ast\r\n  elseif TNumber.isa(ast.stype) then\r\n    return ast.stype\r\n  elseif ast.tag == 'Number' then\r\n    local value = ast[1]\r\n    self.value = value\r\n  elseif ast.tag == 'Id' then\r\n    -- self.value not set\r\n  else\r\n    -- nothing\r\n  end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "self.value = ast",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local value = ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "self.value = value",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function TNumber.bind(ast)\r\n  local mtype = TNumber.create(ast)\r\n  ast.stype = mtype\r\n  ast.typed = true\r\n  return ast\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local mtype = TNumber.create(ast)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "ast.stype = mtype",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "ast.typed = true",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function TNumber.isa(obj)\r\n  local mt = getmetatable(obj)\r\n  return (mt and mt.__index == TNumber) and true or false\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local mt = getmetatable(obj)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function TNumber:__neg()\r\n  --print 'neg'\r\n  local value = self.value\r\n  if value then value = - value end\r\n  --print('nv', value)\r\n  return TNumber.create(value)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local value = self.value",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if value then value = - value end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "value = - value",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function TNumber:__add(other)\r\n  local value1, value2 = self and self.value, other and other.value\r\n  local value; if value1 and value2 then value = value1 + value2 end\r\n  return TNumber.create(value)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local value1, value2 = self and self.value, other and other.value",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local value",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if value1 and value2 then value = value1 + value2 end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "value = value1 + value2",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function TNumber:__sub(other)\r\n  local value1, value2 = self and self.value, other and other.value\r\n  local value; if value1 and value2 then value = value1 - value2 end\r\n  return TNumber.create(value)\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if value1 and value2 then value = value1 - value2 end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "value = value1 - value2",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function TNumber:__mul(other)\r\n  local value1, value2 = self and self.value, other and other.value\r\n  local value; if value1 and value2 then value = value1 * value2 end\r\n  return TNumber.create(value)\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "if value1 and value2 then value = value1 * value2 end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "value = value1 * value2",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function TNumber:__div(other)\r\n  local value1, value2 = self and self.value, other and other.value\r\n  local value; if value1 and value2 then value = value1 / value2 end\r\n  return TNumber.create(value)\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if value1 and value2 then value = value1 / value2 end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "value = value1 / value2",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function TNumber:__mod(other)\r\n  local value1, value2 = self and self.value, other and other.value\r\n  local value; if value1 and value2 then value = value1 % value2 end\r\n  return TNumber.create(value)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "if value1 and value2 then value = value1 % value2 end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "value = value1 % value2",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function TNumber:__pow(other)\r\n  local value1, value2 = self and self.value, other and other.value\r\n  local value; if value1 and value2 then value = value1 ^ value2 end\r\n  return TNumber.create(value)\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "if value1 and value2 then value = value1 ^ value2 end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "value = value1 ^ value2",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function TStringMT:__tostring()\r\n  return 'String[' .. tostring(self.value) .. ']'\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function TString.create(ast)\r\n  local self = setmetatable({}, {__index = TString})\r\n  if ast == nil then -- do nothing\r\n  elseif type(ast) == 'string' then\r\n    self.value = ast\r\n  elseif TString.isa(ast.stype) then\r\n    return ast.stype\r\n  elseif ast.tag == 'String' then\r\n    local value = ast[1]\r\n    self.value = value\r\n  elseif ast.tag == 'Id' then\r\n    -- self.value not set\r\n  else\r\n    -- nothing\r\n  end\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local self = setmetatable({}, {__index = TString})",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if ast == nil then -- do nothing\r\n  elseif type(ast) == 'string' then\r\n    self.value = ast\r\n  elseif TString.isa(ast.stype) then\r\n    return ast.stype\r\n  elseif ast.tag == 'String' then\r\n    local value = ast[1]\r\n    self.value = value\r\n  elseif ast.tag == 'Id' then\r\n    -- self.value not set\r\n  else\r\n    -- nothing\r\n  end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function TString.bind(ast)\r\n  local mtype = TString.create(ast)\r\n  ast.stype = mtype\r\n  ast.typed = true\r\n  return ast\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local mtype = TString.create(ast)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function TString.isa(obj)\r\n  local mt = getmetatable(obj)\r\n  return (mt and mt.__index == TString) and true or false\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function TString:__concat(other)\r\n  local value1, value2 = self and self.value, other and other.value\r\n  local value; if value1 and value2 then value = value1 .. value2 end\r\n  return TString.create(value)  \r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "if value1 and value2 then value = value1 .. value2 end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "value = value1 .. value2",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function TFunctionMT:__tostring()\r\n  return 'Function[' .. tostring(self.value) .. ']'\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function TFunction.create(ast)\r\n  local self = setmetatable({}, {__index = TFunction})\r\n  if ast == nil then -- do nothing\r\n  elseif type(ast) == 'string' then\r\n    self.value = ast\r\n  elseif TFunction.isa(ast.stype) then\r\n    return ast.stype\r\n  elseif ast.tag == 'String' then\r\n    local value = ast[1]\r\n    self.value = value\r\n  elseif ast.tag == 'Id' then\r\n    -- self.value not set\r\n  else\r\n    -- nothing\r\n  end\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local self = setmetatable({}, {__index = TFunction})",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if ast == nil then -- do nothing\r\n  elseif type(ast) == 'string' then\r\n    self.value = ast\r\n  elseif TFunction.isa(ast.stype) then\r\n    return ast.stype\r\n  elseif ast.tag == 'String' then\r\n    local value = ast[1]\r\n    self.value = value\r\n  elseif ast.tag == 'Id' then\r\n    -- self.value not set\r\n  else\r\n    -- nothing\r\n  end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function TFunction.bind(ast)\r\n  local mtype = TFunction.create(ast)\r\n  ast.stype = mtype\r\n  ast.typed = true\r\n  return ast\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local mtype = TFunction.create(ast)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function TFunction.isa(obj)\r\n  local mt = getmetatable(obj)\r\n  return (mt and mt.__index == TFunction) and true or false\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function TFunction.__call(obj)\r\n  --improve\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "local function locate(packagepath, name)\r\n  for pattern in packagepath:gfind(\"[^;]+\") do\r\n    local filename = pattern:gsub(\"%?\", name)\r\n    local f = io.open(filename)\r\n    if f then\r\n      f:close()\r\n      return filename\r\n    end\r\n  end\r\n  return nil\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "for pattern in packagepath:gfind(\"[^;]+\") do\r\n    local filename = pattern:gsub(\"%?\", name)\r\n    local f = io.open(filename)\r\n    if f then\r\n      f:close()\r\n      return filename\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 87,
    "text": "local filename = pattern:gsub(\"%?\", name)",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local f = io.open(filename)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if f then\r\n      f:close()\r\n      return filename\r\n    end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function M.object_to_ast(o)\r\n  if type(o) == 'string' then\r\n    return ASTNode {'String', o}\r\n  elseif type(o) == 'number' then\r\n    return ASTNode {'Number', o}\r\n  elseif o == nil then\r\n    return ASTNode {'Nil'}\r\n  elseif o == false then\r\n    return ASTNode {'False'}\r\n  elseif o == true then\r\n    return ASTNode {'True'}\r\n  elseif type(o) == 'table' then\r\n    --LIMITATION: only does numeric keys + tag since non-numeric keys can\r\n    -- be recursive\r\n    local elements = {}\r\n    elements[#elements+1] = 'Table'\r\n    if o.tag ~= nil then\r\n      elements[#elements+1] = ASTNode {'Field', M.object_to_ast 'tag', M.object_to_ast(o.tag)}\r\n    end\r\n    for k,v in ipairs(o) do\r\n      elements[#elements+1] = ASTNode {'Field',\r\n         M.object_to_ast(k), M.object_to_ast(v)}\r\n    end\r\n    return ASTNode(elements)\r\n  else\r\n    assert(false, \"NOT IMPLEMENTED for \" .. tostring(o))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "if type(o) == 'string' then\r\n    return ASTNode {'String', o}\r\n  elseif type(o) == 'number' then\r\n    return ASTNode {'Number', o}\r\n  elseif o == nil then\r\n    return ASTNode {'Nil'}\r\n  elseif o == false then\r\n    return ASTNode {'False'}\r\n  elseif o == true then\r\n    return ASTNode {'True'}\r\n  elseif type(o) == 'table' then\r\n    --LIMITATION: only does numeric keys + tag since non-numeric keys can\r\n    -- be recursive\r\n    local elements = {}\r\n    elements[#elements+1] = 'Table'\r\n    if o.tag ~= nil then\r\n      elements[#elements+1] = ASTNode {'Field', M.object_to_ast 'tag', M.object_to_ast(o.tag)}\r\n    end\r\n    for k,v in ipairs(o) do\r\n      elements[#elements+1] = ASTNode {'Field',\r\n         M.object_to_ast(k), M.object_to_ast(v)}\r\n    end\r\n    return ASTNode(elements)\r\n  else\r\n    assert(false, \"NOT IMPLEMENTED for \" .. tostring(o))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "local elements = {}",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "elements[#elements+1] = 'Table'",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if o.tag ~= nil then\r\n      elements[#elements+1] = ASTNode {'Field', M.object_to_ast 'tag', M.object_to_ast(o.tag)}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "elements[#elements+1] = ASTNode {'Field', M.object_to_ast 'tag', M.object_to_ast(o.tag)}",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "for k,v in ipairs(o) do\r\n      elements[#elements+1] = ASTNode {'Field',\r\n         M.object_to_ast(k), M.object_to_ast(v)}\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 99,
    "text": "elements[#elements+1] = ASTNode {'Field',\r\n         M.object_to_ast(k), M.object_to_ast(v)}",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "assert(false, \"NOT IMPLEMENTED for \" .. tostring(o))",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function M.ast_to_object(ast)\r\n  if ast.tag == 'String' or ast.tag == 'Number' then\r\n    return ast[1]\r\n  elseif ast.tag == 'Nil' then return nil\r\n  elseif ast.tag == 'False' then return false\r\n  elseif ast.tag == 'True' then return true\r\n  else\r\n    local code = LuaFishSerializer.ast_to_code(ast)\r\n    local func = assert(loadstring('return ' .. code))\r\n    return func()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "if ast.tag == 'String' or ast.tag == 'Number' then\r\n    return ast[1]\r\n  elseif ast.tag == 'Nil' then return nil\r\n  elseif ast.tag == 'False' then return false\r\n  elseif ast.tag == 'True' then return true\r\n  else\r\n    local code = LuaFishSerializer.ast_to_code(ast)\r\n    local func = assert(loadstring('return ' .. code))\r\n    return func()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "local code = LuaFishSerializer.ast_to_code(ast)",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local func = assert(loadstring('return ' .. code))",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "local function create_compile_environment()\r\n  local env = setmetatable({}, {__index = _G})\r\n  env.mdofile = M.dofile\r\n  env.mloadstring = M.loadstring\r\n  env.mrequire = M.require\r\n  env.MACRO = {}\r\n  return env\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "local env = setmetatable({}, {__index = _G})",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "env.mdofile = M.dofile",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "env.mloadstring = M.loadstring",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "env.mrequire = M.require",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "env.MACRO = {}",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "local function resolve(env, id_ast)\r\n  local obj_ast = id_ast\r\n  if id_ast.tag == 'Id' then\r\n    local obj_name = id_ast[1]\r\n    obj_ast = id_ast.scope[obj_name]\r\n    if not obj_ast then\r\n      if env.ONGLOBAL then\r\n        env.ONGLOBAL(obj_name)\r\n      end\r\n    end\r\n  end\r\n  if obj_ast then\r\n    return obj_ast\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "local obj_ast = id_ast",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if id_ast.tag == 'Id' then\r\n    local obj_name = id_ast[1]\r\n    obj_ast = id_ast.scope[obj_name]\r\n    if not obj_ast then\r\n      if env.ONGLOBAL then\r\n        env.ONGLOBAL(obj_name)\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "local obj_name = id_ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "obj_ast = id_ast.scope[obj_name]",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if not obj_ast then\r\n      if env.ONGLOBAL then\r\n        env.ONGLOBAL(obj_name)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "if env.ONGLOBAL then\r\n        env.ONGLOBAL(obj_name)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "env.ONGLOBAL(obj_name)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "if obj_ast then\r\n    return obj_ast\r\n  end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "local function resolve_args(env, arg_ast)\r\n  local args = {unpack(arg_ast)}\r\n  for i,v in ipairs(args) do\r\n    args[i] = resolve(env, v)\r\n  end\r\n  return args\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "local args = {unpack(arg_ast)}",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "for i,v in ipairs(args) do\r\n    args[i] = resolve(env, v)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 127,
    "text": "args[i] = resolve(env, v)",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "local function getbinhandler (op1, op2, event)\r\n  return op1.stype and op1.stype[event] or\r\n         op2.stype and op2.stype[event]\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "local function getunhandler (op1, event)\r\n  return op1.stype and op1.stype[event]\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "local function context(ast)\r\n  return string.format(\"At line %d column %d\", ast.nline, ast.ncol)\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "local function mypcall(ast, caller, ...)\r\n  local status, message = pcall(caller, ...)\r\n  if not status then\r\n    error(context(ast) .. \": \" .. message)\r\n  end\r\n  return message -- result value\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "local status, message = pcall(caller, ...)",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if not status then\r\n    error(context(ast) .. \": \" .. message)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "error(context(ast) .. \": \" .. message)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function M.process_macros(ast, env)\r\n  local macros = env.MACRO\r\n\r\n  -- evaluate children\r\n  for i,v in ipairs(ast) do\r\n    if type(v) == \"table\" then\r\n      local is_replace, replaced = M.process_macros(v, env)\r\n      if is_replace then\r\n        ast[i] = replaced\r\n      end\r\n    end\r\n  end\r\n\r\n  -- Evaluate compile-time expressions.\r\n  -- The order is to evalute children then parents.\r\n\r\n  if ast.tag == 'Index' then\r\n    local obj_ast, key_ast = resolve(env, ast[1]), ast[2]\r\n    if obj_ast and obj_ast.stype and obj_ast.stype.__index then\r\n      local result_type =\r\n         mypcall(ast, obj_ast.stype.__index, obj_ast.stype, M.ast_to_object(key_ast))\r\n      ast.stype = result_type -- may be nil\r\n    end\r\n  elseif ast.tag == 'Id' then\r\n    local macro_name = ast[1]\r\n    --print(macros.SETSQUARE,rawget(macros, 'SETSQUARE'),'ss', macro_name)\r\n\r\n    local macro = macros[macro_name]\r\n    if macro then\r\n      local obj = {tag='Macro', macro}\r\n      obj.scope = ast.scope -- copy\r\n      obj.last = ast.last\r\n      return true, obj\r\n    end\r\n    -- otherwise, non-macro Id\r\n  elseif ast.tag == 'Call' then\r\n    local macro = ast[1]\r\n    if macro.tag == 'Macro' then -- a macro\r\n      macro = macro[1]\r\n      local arg_ast = ast[2]\r\n      local args = resolve_args(env, arg_ast)\r\n      local a,b = macro(unpack(args))\r\n      if a == 'value' then a = M.object_to_ast(b)\r\n      elseif a == nil then a = ASTNode{'Block'}end\r\n      local res_ast = a\r\n      --print (\"M\", macro, macro_name, arg_ast, res_ast)\r\n      return true, res_ast\r\n    end\r\n    -- otherwise, non-macro call\r\n\r\n    local obj_ast = resolve(env, ast[1])\r\n    if obj_ast and obj_ast.stype then\r\n      if obj_ast.stype then\r\n        local caller = TFunction.isa(obj_ast.stype) and obj_ast.stype.__call or\r\n           type(obj_ast.stype) == 'function' and obj_ast.stype\r\n        if caller then\r\n          local args = resolve_args(env, ast[2])\r\n          ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n        else\r\n          error(\"not callable \" .. tostring(obj_ast) .. \" \" .. tostring(obj_ast.stype))\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'ColonCall' then  \r\n    -- note: this is like an Index followed by a Call with \"self\"\r\n    local obj_ast = resolve(env, ast[1])\r\n\r\n    if obj_ast and obj_ast.stype and obj_ast.stype.__index then\r\n      local key_ast = ast[2]\r\n      local caller =\r\n         obj_ast.stype.__index(obj_ast.stype, M.ast_to_object(key_ast)) -- may be il\r\n      if caller then\r\n        local args = resolve_args(env, ast[3])\r\n        table.insert(args, 1, obj_ast) -- self\r\n        ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n      end\r\n    end\r\n  elseif ast.tag == 'String' then\r\n    ast.stype = TString.create(ast)\r\n  elseif ast.tag == 'Number' then\r\n    ast.stype = TNumber.create(ast)\r\n  elseif ast.tag == 'Nil' then\r\n    ast.stype = 'nil'  -- note: 'nil' different from nil.\r\n  elseif ast.tag == 'True' or ast.tag == 'False' then\r\n    ast.stype = 'boolean'\r\n  elseif ast.tag == 'Op' then\r\n    if #ast == 2 then -- unary op\r\n      local a_ast = resolve(env, ast[2])\r\n      local event = unop_to_mt[ast[1]]\r\n      local h = getunhandler(a_ast, event)\r\n      if h then\r\n        ast.stype = h(a_ast.stype)\r\n      else -- unknown type\r\n        if a_ast.stype then\r\n          error(tostring(ast) .. ' - operation not defined')\r\n        end\r\n      end\r\n    else -- binary op\r\n      local a_ast, b_ast = resolve(env, ast[2]), resolve(env, ast[3])\r\n      if not a_ast or not b_ast then\r\n        if not a_ast then\r\n           print(context(ast) .. \": non-lexical \")\r\n        end\r\n        if not b_ast then\r\n          print(context(ast) .. \": non-lexical \")\r\n        end\r\n      else\r\n        if is_bool_binop[ast[1]] then\r\n          ast.stype = 'boolean'\r\n        else\r\n          local event = binop_to_mt[ast[1]]\r\n          local h = getbinhandler(a_ast, b_ast, event)\r\n          if h then\r\n            ast.stype = h(a_ast.stype, b_ast.stype)\r\n          elseif ast[1] == 'And' or ast[1] == 'Or' and\r\n                 a_ast.stype == b_ast.stype then\r\n            ast.stype = a_ast.stype\r\n          elseif a_ast.stype == 'number' or b_ast.stype == 'number' then\r\n            ast.stype = 'number'\r\n          else -- unknown type\r\n            if a_ast.stype and b_ast.stype then\r\n              error(tostring(ast) .. ' - operation not defined')\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'Parens' then\r\n    ast.stype = ast[1].stype\r\n  elseif ast.tag == 'Local' then\r\n    local vals_ast = ast[2]\r\n    if vals_ast then\r\n      for i=1,#vals_ast do\r\n        local val_ast = vals_ast[i]\r\n        --print(val_ast.stype)\r\n        if ast[1][i] then\r\n          ast[1][i].stype = val_ast.stype\r\n          ast[1][i].typed = val_ast.typed\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'Assign' then\r\n    local names_ast, vals_ast = ast[1], ast[2]\r\n    for i=1,#vals_ast do\r\n      local name_ast = resolve(env, names_ast[i])\r\n      local val_ast = resolve(env, vals_ast[i])\r\n      if name_ast and val_ast then\r\n        if not name_ast.typed then\r\n          name_ast.stype = val_ast.stype\r\n          -- unused: name_ast.typed = val_ast.typed\r\n        end\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "local macros = env.MACRO",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "for i,v in ipairs(ast) do\r\n    if type(v) == \"table\" then\r\n      local is_replace, replaced = M.process_macros(v, env)\r\n      if is_replace then\r\n        ast[i] = replaced\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 143,
    "text": "if type(v) == \"table\" then\r\n      local is_replace, replaced = M.process_macros(v, env)\r\n      if is_replace then\r\n        ast[i] = replaced\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "local is_replace, replaced = M.process_macros(v, env)",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "if is_replace then\r\n        ast[i] = replaced\r\n      end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "ast[i] = replaced",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "if ast.tag == 'Index' then\r\n    local obj_ast, key_ast = resolve(env, ast[1]), ast[2]\r\n    if obj_ast and obj_ast.stype and obj_ast.stype.__index then\r\n      local result_type =\r\n         mypcall(ast, obj_ast.stype.__index, obj_ast.stype, M.ast_to_object(key_ast))\r\n      ast.stype = result_type -- may be nil\r\n    end\r\n  elseif ast.tag == 'Id' then\r\n    local macro_name = ast[1]\r\n    --print(macros.SETSQUARE,rawget(macros, 'SETSQUARE'),'ss', macro_name)\r\n\r\n    local macro = macros[macro_name]\r\n    if macro then\r\n      local obj = {tag='Macro', macro}\r\n      obj.scope = ast.scope -- copy\r\n      obj.last = ast.last\r\n      return true, obj\r\n    end\r\n    -- otherwise, non-macro Id\r\n  elseif ast.tag == 'Call' then\r\n    local macro = ast[1]\r\n    if macro.tag == 'Macro' then -- a macro\r\n      macro = macro[1]\r\n      local arg_ast = ast[2]\r\n      local args = resolve_args(env, arg_ast)\r\n      local a,b = macro(unpack(args))\r\n      if a == 'value' then a = M.object_to_ast(b)\r\n      elseif a == nil then a = ASTNode{'Block'}end\r\n      local res_ast = a\r\n      --print (\"M\", macro, macro_name, arg_ast, res_ast)\r\n      return true, res_ast\r\n    end\r\n    -- otherwise, non-macro call\r\n\r\n    local obj_ast = resolve(env, ast[1])\r\n    if obj_ast and obj_ast.stype then\r\n      if obj_ast.stype then\r\n        local caller = TFunction.isa(obj_ast.stype) and obj_ast.stype.__call or\r\n           type(obj_ast.stype) == 'function' and obj_ast.stype\r\n        if caller then\r\n          local args = resolve_args(env, ast[2])\r\n          ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n        else\r\n          error(\"not callable \" .. tostring(obj_ast) .. \" \" .. tostring(obj_ast.stype))\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'ColonCall' then  \r\n    -- note: this is like an Index followed by a Call with \"self\"\r\n    local obj_ast = resolve(env, ast[1])\r\n\r\n    if obj_ast and obj_ast.stype and obj_ast.stype.__index then\r\n      local key_ast = ast[2]\r\n      local caller =\r\n         obj_ast.stype.__index(obj_ast.stype, M.ast_to_object(key_ast)) -- may be il\r\n      if caller then\r\n        local args = resolve_args(env, ast[3])\r\n        table.insert(args, 1, obj_ast) -- self\r\n        ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n      end\r\n    end\r\n  elseif ast.tag == 'String' then\r\n    ast.stype = TString.create(ast)\r\n  elseif ast.tag == 'Number' then\r\n    ast.stype = TNumber.create(ast)\r\n  elseif ast.tag == 'Nil' then\r\n    ast.stype = 'nil'  -- note: 'nil' different from nil.\r\n  elseif ast.tag == 'True' or ast.tag == 'False' then\r\n    ast.stype = 'boolean'\r\n  elseif ast.tag == 'Op' then\r\n    if #ast == 2 then -- unary op\r\n      local a_ast = resolve(env, ast[2])\r\n      local event = unop_to_mt[ast[1]]\r\n      local h = getunhandler(a_ast, event)\r\n      if h then\r\n        ast.stype = h(a_ast.stype)\r\n      else -- unknown type\r\n        if a_ast.stype then\r\n          error(tostring(ast) .. ' - operation not defined')\r\n        end\r\n      end\r\n    else -- binary op\r\n      local a_ast, b_ast = resolve(env, ast[2]), resolve(env, ast[3])\r\n      if not a_ast or not b_ast then\r\n        if not a_ast then\r\n           print(context(ast) .. \": non-lexical \")\r\n        end\r\n        if not b_ast then\r\n          print(context(ast) .. \": non-lexical \")\r\n        end\r\n      else\r\n        if is_bool_binop[ast[1]] then\r\n          ast.stype = 'boolean'\r\n        else\r\n          local event = binop_to_mt[ast[1]]\r\n          local h = getbinhandler(a_ast, b_ast, event)\r\n          if h then\r\n            ast.stype = h(a_ast.stype, b_ast.stype)\r\n          elseif ast[1] == 'And' or ast[1] == 'Or' and\r\n                 a_ast.stype == b_ast.stype then\r\n            ast.stype = a_ast.stype\r\n          elseif a_ast.stype == 'number' or b_ast.stype == 'number' then\r\n            ast.stype = 'number'\r\n          else -- unknown type\r\n            if a_ast.stype and b_ast.stype then\r\n              error(tostring(ast) .. ' - operation not defined')\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'Parens' then\r\n    ast.stype = ast[1].stype\r\n  elseif ast.tag == 'Local' then\r\n    local vals_ast = ast[2]\r\n    if vals_ast then\r\n      for i=1,#vals_ast do\r\n        local val_ast = vals_ast[i]\r\n        --print(val_ast.stype)\r\n        if ast[1][i] then\r\n          ast[1][i].stype = val_ast.stype\r\n          ast[1][i].typed = val_ast.typed\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'Assign' then\r\n    local names_ast, vals_ast = ast[1], ast[2]\r\n    for i=1,#vals_ast do\r\n      local name_ast = resolve(env, names_ast[i])\r\n      local val_ast = resolve(env, vals_ast[i])\r\n      if name_ast and val_ast then\r\n        if not name_ast.typed then\r\n          name_ast.stype = val_ast.stype\r\n          -- unused: name_ast.typed = val_ast.typed\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "local obj_ast, key_ast = resolve(env, ast[1]), ast[2]",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "if obj_ast and obj_ast.stype and obj_ast.stype.__index then\r\n      local result_type =\r\n         mypcall(ast, obj_ast.stype.__index, obj_ast.stype, M.ast_to_object(key_ast))\r\n      ast.stype = result_type -- may be nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "local result_type =\r\n         mypcall(ast, obj_ast.stype.__index, obj_ast.stype, M.ast_to_object(key_ast))",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "ast.stype = result_type",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "local macro_name = ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "local macro = macros[macro_name]",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if macro then\r\n      local obj = {tag='Macro', macro}\r\n      obj.scope = ast.scope -- copy\r\n      obj.last = ast.last\r\n      return true, obj\r\n    end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "local obj = {tag='Macro', macro}",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "obj.scope = ast.scope",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "obj.last = ast.last",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "local macro = ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "if macro.tag == 'Macro' then -- a macro\r\n      macro = macro[1]\r\n      local arg_ast = ast[2]\r\n      local args = resolve_args(env, arg_ast)\r\n      local a,b = macro(unpack(args))\r\n      if a == 'value' then a = M.object_to_ast(b)\r\n      elseif a == nil then a = ASTNode{'Block'}end\r\n      local res_ast = a\r\n      --print (\"M\", macro, macro_name, arg_ast, res_ast)\r\n      return true, res_ast\r\n    end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "macro = macro[1]",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "local arg_ast = ast[2]",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "local args = resolve_args(env, arg_ast)",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "local a,b = macro(unpack(args))",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "if a == 'value' then a = M.object_to_ast(b)\r\n      elseif a == nil then a = ASTNode{'Block'}end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "a = M.object_to_ast(b)",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "a = ASTNode{'Block'}",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "local res_ast = a",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local obj_ast = resolve(env, ast[1])",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if obj_ast and obj_ast.stype then\r\n      if obj_ast.stype then\r\n        local caller = TFunction.isa(obj_ast.stype) and obj_ast.stype.__call or\r\n           type(obj_ast.stype) == 'function' and obj_ast.stype\r\n        if caller then\r\n          local args = resolve_args(env, ast[2])\r\n          ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n        else\r\n          error(\"not callable \" .. tostring(obj_ast) .. \" \" .. tostring(obj_ast.stype))\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "if obj_ast.stype then\r\n        local caller = TFunction.isa(obj_ast.stype) and obj_ast.stype.__call or\r\n           type(obj_ast.stype) == 'function' and obj_ast.stype\r\n        if caller then\r\n          local args = resolve_args(env, ast[2])\r\n          ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n        else\r\n          error(\"not callable \" .. tostring(obj_ast) .. \" \" .. tostring(obj_ast.stype))\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "local caller = TFunction.isa(obj_ast.stype) and obj_ast.stype.__call or\r\n           type(obj_ast.stype) == 'function' and obj_ast.stype",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "if caller then\r\n          local args = resolve_args(env, ast[2])\r\n          ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n        else\r\n          error(\"not callable \" .. tostring(obj_ast) .. \" \" .. tostring(obj_ast.stype))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "local args = resolve_args(env, ast[2])",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "ast.stype = mypcall(ast, caller, unpack(args))",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "error(\"not callable \" .. tostring(obj_ast) .. \" \" .. tostring(obj_ast.stype))",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "if obj_ast and obj_ast.stype and obj_ast.stype.__index then\r\n      local key_ast = ast[2]\r\n      local caller =\r\n         obj_ast.stype.__index(obj_ast.stype, M.ast_to_object(key_ast)) -- may be il\r\n      if caller then\r\n        local args = resolve_args(env, ast[3])\r\n        table.insert(args, 1, obj_ast) -- self\r\n        ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "local key_ast = ast[2]",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "local caller =\r\n         obj_ast.stype.__index(obj_ast.stype, M.ast_to_object(key_ast))",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "if caller then\r\n        local args = resolve_args(env, ast[3])\r\n        table.insert(args, 1, obj_ast) -- self\r\n        ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "local args = resolve_args(env, ast[3])",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "table.insert(args, 1, obj_ast)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "ast.stype = TString.create(ast)",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "ast.stype = TNumber.create(ast)",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "ast.stype = 'nil'",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "ast.stype = 'boolean'",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "if #ast == 2 then -- unary op\r\n      local a_ast = resolve(env, ast[2])\r\n      local event = unop_to_mt[ast[1]]\r\n      local h = getunhandler(a_ast, event)\r\n      if h then\r\n        ast.stype = h(a_ast.stype)\r\n      else -- unknown type\r\n        if a_ast.stype then\r\n          error(tostring(ast) .. ' - operation not defined')\r\n        end\r\n      end\r\n    else -- binary op\r\n      local a_ast, b_ast = resolve(env, ast[2]), resolve(env, ast[3])\r\n      if not a_ast or not b_ast then\r\n        if not a_ast then\r\n           print(context(ast) .. \": non-lexical \")\r\n        end\r\n        if not b_ast then\r\n          print(context(ast) .. \": non-lexical \")\r\n        end\r\n      else\r\n        if is_bool_binop[ast[1]] then\r\n          ast.stype = 'boolean'\r\n        else\r\n          local event = binop_to_mt[ast[1]]\r\n          local h = getbinhandler(a_ast, b_ast, event)\r\n          if h then\r\n            ast.stype = h(a_ast.stype, b_ast.stype)\r\n          elseif ast[1] == 'And' or ast[1] == 'Or' and\r\n                 a_ast.stype == b_ast.stype then\r\n            ast.stype = a_ast.stype\r\n          elseif a_ast.stype == 'number' or b_ast.stype == 'number' then\r\n            ast.stype = 'number'\r\n          else -- unknown type\r\n            if a_ast.stype and b_ast.stype then\r\n              error(tostring(ast) .. ' - operation not defined')\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "local a_ast = resolve(env, ast[2])",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "local event = unop_to_mt[ast[1]]",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "local h = getunhandler(a_ast, event)",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "if h then\r\n        ast.stype = h(a_ast.stype)\r\n      else -- unknown type\r\n        if a_ast.stype then\r\n          error(tostring(ast) .. ' - operation not defined')\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "ast.stype = h(a_ast.stype)",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "if a_ast.stype then\r\n          error(tostring(ast) .. ' - operation not defined')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "error(tostring(ast) .. ' - operation not defined')",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "local a_ast, b_ast = resolve(env, ast[2]), resolve(env, ast[3])",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "if not a_ast or not b_ast then\r\n        if not a_ast then\r\n           print(context(ast) .. \": non-lexical \")\r\n        end\r\n        if not b_ast then\r\n          print(context(ast) .. \": non-lexical \")\r\n        end\r\n      else\r\n        if is_bool_binop[ast[1]] then\r\n          ast.stype = 'boolean'\r\n        else\r\n          local event = binop_to_mt[ast[1]]\r\n          local h = getbinhandler(a_ast, b_ast, event)\r\n          if h then\r\n            ast.stype = h(a_ast.stype, b_ast.stype)\r\n          elseif ast[1] == 'And' or ast[1] == 'Or' and\r\n                 a_ast.stype == b_ast.stype then\r\n            ast.stype = a_ast.stype\r\n          elseif a_ast.stype == 'number' or b_ast.stype == 'number' then\r\n            ast.stype = 'number'\r\n          else -- unknown type\r\n            if a_ast.stype and b_ast.stype then\r\n              error(tostring(ast) .. ' - operation not defined')\r\n            end\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "if not a_ast then\r\n           print(context(ast) .. \": non-lexical \")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "print(context(ast) .. \": non-lexical \")",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "if not b_ast then\r\n          print(context(ast) .. \": non-lexical \")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "if is_bool_binop[ast[1]] then\r\n          ast.stype = 'boolean'\r\n        else\r\n          local event = binop_to_mt[ast[1]]\r\n          local h = getbinhandler(a_ast, b_ast, event)\r\n          if h then\r\n            ast.stype = h(a_ast.stype, b_ast.stype)\r\n          elseif ast[1] == 'And' or ast[1] == 'Or' and\r\n                 a_ast.stype == b_ast.stype then\r\n            ast.stype = a_ast.stype\r\n          elseif a_ast.stype == 'number' or b_ast.stype == 'number' then\r\n            ast.stype = 'number'\r\n          else -- unknown type\r\n            if a_ast.stype and b_ast.stype then\r\n              error(tostring(ast) .. ' - operation not defined')\r\n            end\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "local event = binop_to_mt[ast[1]]",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "local h = getbinhandler(a_ast, b_ast, event)",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "if h then\r\n            ast.stype = h(a_ast.stype, b_ast.stype)\r\n          elseif ast[1] == 'And' or ast[1] == 'Or' and\r\n                 a_ast.stype == b_ast.stype then\r\n            ast.stype = a_ast.stype\r\n          elseif a_ast.stype == 'number' or b_ast.stype == 'number' then\r\n            ast.stype = 'number'\r\n          else -- unknown type\r\n            if a_ast.stype and b_ast.stype then\r\n              error(tostring(ast) .. ' - operation not defined')\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "ast.stype = h(a_ast.stype, b_ast.stype)",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "ast.stype = a_ast.stype",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "ast.stype = 'number'",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "if a_ast.stype and b_ast.stype then\r\n              error(tostring(ast) .. ' - operation not defined')\r\n            end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "ast.stype = ast[1].stype",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "local vals_ast = ast[2]",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "if vals_ast then\r\n      for i=1,#vals_ast do\r\n        local val_ast = vals_ast[i]\r\n        --print(val_ast.stype)\r\n        if ast[1][i] then\r\n          ast[1][i].stype = val_ast.stype\r\n          ast[1][i].typed = val_ast.typed\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "for i=1,#vals_ast do\r\n        local val_ast = vals_ast[i]\r\n        --print(val_ast.stype)\r\n        if ast[1][i] then\r\n          ast[1][i].stype = val_ast.stype\r\n          ast[1][i].typed = val_ast.typed\r\n        end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 211,
    "text": "local val_ast = vals_ast[i]",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "if ast[1][i] then\r\n          ast[1][i].stype = val_ast.stype\r\n          ast[1][i].typed = val_ast.typed\r\n        end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "ast[1][i].stype = val_ast.stype",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "ast[1][i].typed = val_ast.typed",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "local names_ast, vals_ast = ast[1], ast[2]",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "for i=1,#vals_ast do\r\n      local name_ast = resolve(env, names_ast[i])\r\n      local val_ast = resolve(env, vals_ast[i])\r\n      if name_ast and val_ast then\r\n        if not name_ast.typed then\r\n          name_ast.stype = val_ast.stype\r\n          -- unused: name_ast.typed = val_ast.typed\r\n        end\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 217,
    "text": "local name_ast = resolve(env, names_ast[i])",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "local val_ast = resolve(env, vals_ast[i])",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "if name_ast and val_ast then\r\n        if not name_ast.typed then\r\n          name_ast.stype = val_ast.stype\r\n          -- unused: name_ast.typed = val_ast.typed\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "if not name_ast.typed then\r\n          name_ast.stype = val_ast.stype\r\n          -- unused: name_ast.typed = val_ast.typed\r\n        end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "name_ast.stype = val_ast.stype",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "local function shallowcopytable(t)\r\n  local t2 = {}\r\n  for k,v in pairs(t) do t2[k] = v end\r\n  return t2\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "local t2 = {}",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "for k,v in pairs(t) do t2[k] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 226,
    "text": "t2[k] = v",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "local function helper(ast, scope, last_local)\r\n  -- note: unless this statement creates lexicals, the lexicals\r\n  -- of the next sibling will be identical to that in the current statement.\r\n\r\n  local childscope = scope\r\n  local child_last_local = last_local\r\n\r\n  if ast.tag == 'Local' then\r\n    local names_ast = ast[1]\r\n    scope = shallowcopytable(scope)\r\n    for i=1,#names_ast do  -- new lexicals\r\n      local name_ast = names_ast[i]\r\n      local name = name_ast[1]\r\n      --print('Local', name, scope)\r\n      scope[name] = name_ast\r\n      last_local = name_ast\r\n    end\r\n  elseif ast.tag == 'Function' or ast.tag == 'FunctionDef' or ast.tag == 'LocalFunctionDef' then\r\n    local params_ast = ast.tag == 'Function' and ast[1] or ast[2]\r\n\r\n    -- lexical function\r\n    if ast.tag == 'LocalFunctionDef' then\r\n      local funcname_ast = ast[1]\r\n      local funcname = funcname_ast[1]\r\n      scope = shallowcopytable(scope) -- new lexical\r\n      scope[funcname] = funcname_ast\r\n      last_local = funcname_ast\r\n      funcname_ast.stype = TFunction.create()\r\n\r\n      -- link variable name of lexical function\r\n      -- to its lexical parameters (for param argument type checking)\r\n      --OLD?\r\n      funcname_ast.params_ast = params_ast\r\n    end\r\n\r\n    -- process params\r\n    if #params_ast > 0 then\r\n      local names_ast = params_ast\r\n      childscope = shallowcopytable(scope)\r\n      for i=1,#names_ast do  -- new lexicals\r\n        local name_ast = names_ast[i]\r\n        if name_ast.tag ~= 'VARARG' then\r\n          local name = name_ast[1]\r\n          childscope[name] = name_ast\r\n          child_last_local = name_ast\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'For' or ast.tag == 'Forin' then\r\n    local var_ast = ast[1]\r\n    local var_name = var_ast[1]\r\n    childscope = shallowcopytable(scope)\r\n    childscope[var_name] = var_ast\r\n    child_last_local = var_ast\r\n  end\r\n\r\n  ast.scope = scope  -- store scope information in AST node.\r\n  ast.last = last_local -- store last defined local in AST node.\r\n\r\n  --print(\"s\",scope, scope.x)\r\n\r\n  -- handle children\r\n  local last_local = last_local\r\n  for i,v in ipairs(ast) do\r\n    if type(v) == \"table\" then\r\n      childscope, child_last_local\r\n        = helper(v, childscope, child_last_local)\r\n    end\r\n  end\r\n\r\n  return scope, last_local\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "local childscope = scope",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "local child_last_local = last_local",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "if ast.tag == 'Local' then\r\n    local names_ast = ast[1]\r\n    scope = shallowcopytable(scope)\r\n    for i=1,#names_ast do  -- new lexicals\r\n      local name_ast = names_ast[i]\r\n      local name = name_ast[1]\r\n      --print('Local', name, scope)\r\n      scope[name] = name_ast\r\n      last_local = name_ast\r\n    end\r\n  elseif ast.tag == 'Function' or ast.tag == 'FunctionDef' or ast.tag == 'LocalFunctionDef' then\r\n    local params_ast = ast.tag == 'Function' and ast[1] or ast[2]\r\n\r\n    -- lexical function\r\n    if ast.tag == 'LocalFunctionDef' then\r\n      local funcname_ast = ast[1]\r\n      local funcname = funcname_ast[1]\r\n      scope = shallowcopytable(scope) -- new lexical\r\n      scope[funcname] = funcname_ast\r\n      last_local = funcname_ast\r\n      funcname_ast.stype = TFunction.create()\r\n\r\n      -- link variable name of lexical function\r\n      -- to its lexical parameters (for param argument type checking)\r\n      --OLD?\r\n      funcname_ast.params_ast = params_ast\r\n    end\r\n\r\n    -- process params\r\n    if #params_ast > 0 then\r\n      local names_ast = params_ast\r\n      childscope = shallowcopytable(scope)\r\n      for i=1,#names_ast do  -- new lexicals\r\n        local name_ast = names_ast[i]\r\n        if name_ast.tag ~= 'VARARG' then\r\n          local name = name_ast[1]\r\n          childscope[name] = name_ast\r\n          child_last_local = name_ast\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'For' or ast.tag == 'Forin' then\r\n    local var_ast = ast[1]\r\n    local var_name = var_ast[1]\r\n    childscope = shallowcopytable(scope)\r\n    childscope[var_name] = var_ast\r\n    child_last_local = var_ast\r\n  end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "local names_ast = ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "scope = shallowcopytable(scope)",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "for i=1,#names_ast do  -- new lexicals\r\n      local name_ast = names_ast[i]\r\n      local name = name_ast[1]\r\n      --print('Local', name, scope)\r\n      scope[name] = name_ast\r\n      last_local = name_ast\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 235,
    "text": "local name_ast = names_ast[i]",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "local name = name_ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "scope[name] = name_ast",
    "type": "statement:assign"
  }, {
    "id": 238,
    "text": "last_local = name_ast",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "local params_ast = ast.tag == 'Function' and ast[1] or ast[2]",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "if ast.tag == 'LocalFunctionDef' then\r\n      local funcname_ast = ast[1]\r\n      local funcname = funcname_ast[1]\r\n      scope = shallowcopytable(scope) -- new lexical\r\n      scope[funcname] = funcname_ast\r\n      last_local = funcname_ast\r\n      funcname_ast.stype = TFunction.create()\r\n\r\n      -- link variable name of lexical function\r\n      -- to its lexical parameters (for param argument type checking)\r\n      --OLD?\r\n      funcname_ast.params_ast = params_ast\r\n    end",
    "type": "statement:if"
  }, {
    "id": 241,
    "text": "local funcname_ast = ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "local funcname = funcname_ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 243,
    "text": "scope[funcname] = funcname_ast",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "last_local = funcname_ast",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "funcname_ast.stype = TFunction.create()",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "funcname_ast.params_ast = params_ast",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "if #params_ast > 0 then\r\n      local names_ast = params_ast\r\n      childscope = shallowcopytable(scope)\r\n      for i=1,#names_ast do  -- new lexicals\r\n        local name_ast = names_ast[i]\r\n        if name_ast.tag ~= 'VARARG' then\r\n          local name = name_ast[1]\r\n          childscope[name] = name_ast\r\n          child_last_local = name_ast\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "local names_ast = params_ast",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "childscope = shallowcopytable(scope)",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "for i=1,#names_ast do  -- new lexicals\r\n        local name_ast = names_ast[i]\r\n        if name_ast.tag ~= 'VARARG' then\r\n          local name = name_ast[1]\r\n          childscope[name] = name_ast\r\n          child_last_local = name_ast\r\n        end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 251,
    "text": "if name_ast.tag ~= 'VARARG' then\r\n          local name = name_ast[1]\r\n          childscope[name] = name_ast\r\n          child_last_local = name_ast\r\n        end",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "childscope[name] = name_ast",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "child_last_local = name_ast",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "local var_ast = ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 255,
    "text": "local var_name = var_ast[1]",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "childscope[var_name] = var_ast",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "child_last_local = var_ast",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "ast.scope = scope",
    "type": "statement:assign"
  }, {
    "id": 259,
    "text": "ast.last = last_local",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "local last_local = last_local",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "for i,v in ipairs(ast) do\r\n    if type(v) == \"table\" then\r\n      childscope, child_last_local\r\n        = helper(v, childscope, child_last_local)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 262,
    "text": "if type(v) == \"table\" then\r\n      childscope, child_last_local\r\n        = helper(v, childscope, child_last_local)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 263,
    "text": "childscope, child_last_local\r\n        = helper(v, childscope, child_last_local)",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function M.resolve_lexical_scope(ast)\r\n  local scope = {}\r\n  local last_local = nil\r\n  helper(ast, scope, last_local)\r\nend",
    "type": "function"
  }, {
    "id": 266,
    "text": "local scope = {}",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "local last_local = nil",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "helper(ast, scope, last_local)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 270,
    "text": "function M.loadstring(code, chunkname, is_debug)\r\n  local parser = LuaFishParser()\r\n\r\n  local t = parser:parse(code)\r\n\r\n  if is_debug then print('DEBUG[AST.IN][', t, ']') end\r\n\r\n  local env = create_compile_environment()\r\n\r\n  local function macro_ONCOMPILE(func_ast)\r\n    assert(func_ast.tag == 'Function')\r\n\r\n    local func_code = LuaFishSerializer.ast_to_code(func_ast)\r\n\r\n    local func = assert(loadstring('return ' .. func_code,\r\n                                   (chunkname or '') .. '(ONCOMPILE)',\r\n                                    is_debug))\r\n    setfenv(func, getfenv(1))\r\n  \r\n    func()(func_ast.scope)\r\n\r\n    return ASTNode{'Block'} -- no nothing\r\n  end\r\n  setfenv(macro_ONCOMPILE, env)\r\n  env.MACRO.ONCOMPILE = macro_ONCOMPILE\r\n\r\n  local function macro_REQUIRE(name_ast)\r\n    assert(name_ast.tag == 'String')\r\n    local name = name_ast[1]\r\n\r\n    --print(name_ast.last, 'L')\r\n\r\n    --hack\r\n    local stype\r\n    if name == 'math' then\r\n      stype = require 'luafish.math'\r\n    elseif name == 'string' then\r\n      stype = require 'luafish.string'\r\n    elseif name == '_G' then\r\n      stype = _G\r\n    else\r\n      local m = require(name)\r\n      return m.init(env) --ok?\r\n    end\r\n\r\n\r\n\r\n    local result_ast = ASTNode{'Call', ASTNode{'Id', 'require'},\r\n           ASTNode{'ExpList', ASTNode{'String', name}}}\r\n    result_ast.stype = stype\r\n    result_ast.typed = true\r\n    return result_ast\r\n  end\r\n  env.MACRO.REQUIRE = macro_REQUIRE\r\n\r\n  local function macro_NOGLOBALS()\r\n    function env.ONGLOBAL(name)\r\n      error('global \"' .. name .. '\" used when globals are disabled')\r\n    end\r\n  end\r\n  env.MACRO.NOGLOBALS = macro_NOGLOBALS\r\n\r\n  env.M = M\r\n\r\n  M.resolve_lexical_scope(t)\r\n\r\n  M.process_macros(t, env)\r\n\r\n  if is_debug then print('DEBUG[AST.OUT][', t, ']') end\r\n\r\n  -- FIX- this should return nil and error message not raise an error\r\n  local code = LuaFishSerializer.ast_to_code(t)\r\n\r\n  if is_debug then print('DEBUG[CODE.OUT][', code, ']') end\r\n  local fh = io.open(\"out1\", 'w')\r\n  fh:write(code)\r\n  fh:close()\r\n  return loadstring(code, chunkname, is_debug)\r\nend",
    "type": "function"
  }, {
    "id": 271,
    "text": "local parser = LuaFishParser()",
    "type": "statement:localassign"
  }, {
    "id": 272,
    "text": "local t = parser:parse(code)",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "if is_debug then print('DEBUG[AST.IN][', t, ']') end",
    "type": "statement:if"
  }, {
    "id": 274,
    "text": "print('DEBUG[AST.IN][', t, ']')",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "local env = create_compile_environment()",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "local function macro_ONCOMPILE(func_ast)\r\n    assert(func_ast.tag == 'Function')\r\n\r\n    local func_code = LuaFishSerializer.ast_to_code(func_ast)\r\n\r\n    local func = assert(loadstring('return ' .. func_code,\r\n                                   (chunkname or '') .. '(ONCOMPILE)',\r\n                                    is_debug))\r\n    setfenv(func, getfenv(1))\r\n  \r\n    func()(func_ast.scope)\r\n\r\n    return ASTNode{'Block'} -- no nothing\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 277,
    "text": "assert(func_ast.tag == 'Function')",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "local func_code = LuaFishSerializer.ast_to_code(func_ast)",
    "type": "statement:localassign"
  }, {
    "id": 279,
    "text": "local func = assert(loadstring('return ' .. func_code,\r\n                                   (chunkname or '') .. '(ONCOMPILE)',\r\n                                    is_debug))",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "setfenv(func, getfenv(1))",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "func()(func_ast.scope)",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "setfenv(macro_ONCOMPILE, env)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "env.MACRO.ONCOMPILE = macro_ONCOMPILE",
    "type": "statement:assign"
  }, {
    "id": 284,
    "text": "local function macro_REQUIRE(name_ast)\r\n    assert(name_ast.tag == 'String')\r\n    local name = name_ast[1]\r\n\r\n    --print(name_ast.last, 'L')\r\n\r\n    --hack\r\n    local stype\r\n    if name == 'math' then\r\n      stype = require 'luafish.math'\r\n    elseif name == 'string' then\r\n      stype = require 'luafish.string'\r\n    elseif name == '_G' then\r\n      stype = _G\r\n    else\r\n      local m = require(name)\r\n      return m.init(env) --ok?\r\n    end\r\n\r\n\r\n\r\n    local result_ast = ASTNode{'Call', ASTNode{'Id', 'require'},\r\n           ASTNode{'ExpList', ASTNode{'String', name}}}\r\n    result_ast.stype = stype\r\n    result_ast.typed = true\r\n    return result_ast\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 285,
    "text": "assert(name_ast.tag == 'String')",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "local stype",
    "type": "statement:localassign"
  }, {
    "id": 287,
    "text": "if name == 'math' then\r\n      stype = require 'luafish.math'\r\n    elseif name == 'string' then\r\n      stype = require 'luafish.string'\r\n    elseif name == '_G' then\r\n      stype = _G\r\n    else\r\n      local m = require(name)\r\n      return m.init(env) --ok?\r\n    end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "stype = require 'luafish.math'",
    "type": "statement:assign"
  }, {
    "id": 289,
    "text": "stype = require 'luafish.string'",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "stype = _G",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "local m = require(name)",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "local result_ast = ASTNode{'Call', ASTNode{'Id', 'require'},\r\n           ASTNode{'ExpList', ASTNode{'String', name}}}",
    "type": "statement:localassign"
  }, {
    "id": 293,
    "text": "result_ast.stype = stype",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "result_ast.typed = true",
    "type": "statement:assign"
  }, {
    "id": 295,
    "text": "env.MACRO.REQUIRE = macro_REQUIRE",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "local function macro_NOGLOBALS()\r\n    function env.ONGLOBAL(name)\r\n      error('global \"' .. name .. '\" used when globals are disabled')\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 297,
    "text": "function env.ONGLOBAL(name)\r\n      error('global \"' .. name .. '\" used when globals are disabled')\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 298,
    "text": "error('global \"' .. name .. '\" used when globals are disabled')",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "env.MACRO.NOGLOBALS = macro_NOGLOBALS",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "env.M = M",
    "type": "statement:assign"
  }, {
    "id": 301,
    "text": "M.resolve_lexical_scope(t)",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "M.process_macros(t, env)",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "if is_debug then print('DEBUG[AST.OUT][', t, ']') end",
    "type": "statement:if"
  }, {
    "id": 304,
    "text": "print('DEBUG[AST.OUT][', t, ']')",
    "type": "statement:functioncall"
  }, {
    "id": 305,
    "text": "local code = LuaFishSerializer.ast_to_code(t)",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "if is_debug then print('DEBUG[CODE.OUT][', code, ']') end",
    "type": "statement:if"
  }, {
    "id": 307,
    "text": "print('DEBUG[CODE.OUT][', code, ']')",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "local fh = io.open(\"out1\", 'w')",
    "type": "statement:localassign"
  }, {
    "id": 309,
    "text": "fh:write(code)",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 311,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 312,
    "text": "local function macro_ONCOMPILE(func_ast)\r\n    assert(func_ast.tag == 'Function')\r\n\r\n    local func_code = LuaFishSerializer.ast_to_code(func_ast)\r\n\r\n    local func = assert(loadstring('return ' .. func_code,\r\n                                   (chunkname or '') .. '(ONCOMPILE)',\r\n                                    is_debug))\r\n    setfenv(func, getfenv(1))\r\n  \r\n    func()(func_ast.scope)\r\n\r\n    return ASTNode{'Block'} -- no nothing\r\n  end",
    "type": "function"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "local function macro_REQUIRE(name_ast)\r\n    assert(name_ast.tag == 'String')\r\n    local name = name_ast[1]\r\n\r\n    --print(name_ast.last, 'L')\r\n\r\n    --hack\r\n    local stype\r\n    if name == 'math' then\r\n      stype = require 'luafish.math'\r\n    elseif name == 'string' then\r\n      stype = require 'luafish.string'\r\n    elseif name == '_G' then\r\n      stype = _G\r\n    else\r\n      local m = require(name)\r\n      return m.init(env) --ok?\r\n    end\r\n\r\n\r\n\r\n    local result_ast = ASTNode{'Call', ASTNode{'Id', 'require'},\r\n           ASTNode{'ExpList', ASTNode{'String', name}}}\r\n    result_ast.stype = stype\r\n    result_ast.typed = true\r\n    return result_ast\r\n  end",
    "type": "function"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "local function macro_NOGLOBALS()\r\n    function env.ONGLOBAL(name)\r\n      error('global \"' .. name .. '\" used when globals are disabled')\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 317,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 318,
    "text": "function env.ONGLOBAL(name)\r\n      error('global \"' .. name .. '\" used when globals are disabled')\r\n    end",
    "type": "function"
  }, {
    "id": 319,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 320,
    "text": "function M.dofile(name, is_debug)\r\n  local fh = assert(io.open(name))\r\n  local code = fh:read'*a'\r\n  fh:close()\r\n\r\n  local f, message = assert(M.loadstring(code, name, is_debug))\r\n  if not f then error(message, 2) end\r\n\r\n  return f()\r\nend",
    "type": "function"
  }, {
    "id": 321,
    "text": "local fh = assert(io.open(name))",
    "type": "statement:localassign"
  }, {
    "id": 322,
    "text": "local code = fh:read'*a'",
    "type": "statement:localassign"
  }, {
    "id": 323,
    "text": "local f, message = assert(M.loadstring(code, name, is_debug))",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "if not f then error(message, 2) end",
    "type": "statement:if"
  }, {
    "id": 325,
    "text": "error(message, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 326,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 327,
    "text": "function M.loadfile(name, is_debug)\r\n  local fh = assert(io.open(name))\r\n  local code = fh:read'*a'\r\n  fh:close()\r\n\r\n  local f, message = M.loadstring(code, name, is_debug)\r\n  return f, message\r\nend",
    "type": "function"
  }, {
    "id": 328,
    "text": "local f, message = M.loadstring(code, name, is_debug)",
    "type": "statement:localassign"
  }, {
    "id": 329,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 330,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 331,
    "text": "function M.require(name, is_debug)\r\n  local pkg = package.loaded[name]\r\n  if pkg then return pkg end\r\n\r\n  local path = locate(package.path, name)\r\n  if path then -- macro-enabled loaded\r\n    package.loaded[name] = sentinel\r\n    local old_arg = _G.arg; _G.arg = {name} -- localize\r\n    pkg = M.dofile(path, is_debug)\r\n    _G.arg = old_arg -- restore\r\n    if pkg then\r\n      package.loaded[name] = pkg\r\n    end\r\n    if package.loaded[name] == sentinel then\r\n      package.loaded[name] = true\r\n    end\r\n    return package.loaded[name]\r\n  else\r\n    return require(name)  -- fallback\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 332,
    "text": "local pkg = package.loaded[name]",
    "type": "statement:localassign"
  }, {
    "id": 333,
    "text": "if pkg then return pkg end",
    "type": "statement:if"
  }, {
    "id": 334,
    "text": "local path = locate(package.path, name)",
    "type": "statement:localassign"
  }, {
    "id": 335,
    "text": "if path then -- macro-enabled loaded\r\n    package.loaded[name] = sentinel\r\n    local old_arg = _G.arg; _G.arg = {name} -- localize\r\n    pkg = M.dofile(path, is_debug)\r\n    _G.arg = old_arg -- restore\r\n    if pkg then\r\n      package.loaded[name] = pkg\r\n    end\r\n    if package.loaded[name] == sentinel then\r\n      package.loaded[name] = true\r\n    end\r\n    return package.loaded[name]\r\n  else\r\n    return require(name)  -- fallback\r\n  end",
    "type": "statement:if"
  }, {
    "id": 336,
    "text": "package.loaded[name] = sentinel",
    "type": "statement:assign"
  }, {
    "id": 337,
    "text": "local old_arg = _G.arg",
    "type": "statement:localassign"
  }, {
    "id": 338,
    "text": "_G.arg = {name}",
    "type": "statement:assign"
  }, {
    "id": 339,
    "text": "pkg = M.dofile(path, is_debug)",
    "type": "statement:assign"
  }, {
    "id": 340,
    "text": "_G.arg = old_arg",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "if pkg then\r\n      package.loaded[name] = pkg\r\n    end",
    "type": "statement:if"
  }, {
    "id": 342,
    "text": "package.loaded[name] = pkg",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "if package.loaded[name] == sentinel then\r\n      package.loaded[name] = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "package.loaded[name] = true",
    "type": "statement:assign"
  }, {
    "id": 345,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 346,
    "text": "function M.loader(name)\r\n  local path = locate(package.path, name)\r\n  if path then -- macro-enabled loaded\r\n    return M.loadfile(path)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 347,
    "text": "if path then -- macro-enabled loaded\r\n    return M.loadfile(path)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 348,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 349,
    "text": "function M.addloader()\r\n  table.insert(package.loaders, 1, M.loader)\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 350,
    "text": "table.insert(package.loaders, 1, M.loader)",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 352,
    "text": "",
    "type": "function container"
  }, {
    "id": 353,
    "text": "function M.get_linecol(s, i)\r\n  local nline, ncol = 1, 0\r\n  local was_nl = false\r\n  for k=1,i do\r\n    if was_nl then\r\n      nline = nline + 1\r\n      ncol = 0\r\n      was_nl = false\r\n    end\r\n    if s:match('^\\n', k) then\r\n      was_nl = true\r\n    end\r\n    ncol = ncol + 1\r\n  end\r\n  return nline, ncol\r\nend",
    "type": "function"
  }, {
    "id": 354,
    "text": "function M.update_linecol(s, i, i_last, nline, ncol)\r\n  i_last = i_last or 0\r\n  nline = nline or 0\r\n  ncol = ncol or 0\r\n\r\n  while i_last > i do -- reverse, go to start of previous line\r\n    repeat\r\n      i_last = i_last - 1\r\n    until i_last == 1 or s:match('^\\n',i_last)\r\n    nline = nline - 1\r\n    ncol = 0\r\n  end\r\n\r\n  for k=i_last+1,i do\r\n    if k == 1 or s:match('^\\n',k-1) then\r\n      nline = nline + 1\r\n      ncol = 0\r\n    end\r\n    ncol = ncol + 1\r\n  end\r\n  return i, nline, ncol\r\nend",
    "type": "function"
  }, {
    "id": 355,
    "text": "function M.ast_to_code(ast)\r\n  return convert(ast)\r\nend",
    "type": "function"
  }, {
    "id": 356,
    "text": "function M.init(env)\r\n  function env.MACRO.TYPE(type_ast)\r\n    assert(type_ast.last)\r\n    local mtype = type_ast[1]\r\n    type_ast.last.stype = mtype\r\n  end\r\n\r\n  function env.MACRO.TYPED(obj_ast)\r\n    obj_ast.typed = true\r\n    return obj_ast\r\n  end\r\n\r\n  env.MACRO.NUMBER = TNumber.bind\r\n  env.MACRO.STRING = TString.bind\r\nend",
    "type": "function"
  }, {
    "id": 357,
    "text": "ast_to_code",
    "type": "global function"
  }, {
    "id": 358,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 359,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 360,
    "text": "func",
    "type": "global function"
  }, {
    "id": 361,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 362,
    "text": "print",
    "type": "global function"
  }, {
    "id": 363,
    "text": "init",
    "type": "global function"
  }, {
    "id": 364,
    "text": "ASTNode",
    "type": "global function"
  }, {
    "id": 365,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 366,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 367,
    "text": "require",
    "type": "global function"
  }, {
    "id": 368,
    "text": "f",
    "type": "global function"
  }, {
    "id": 369,
    "text": "type",
    "type": "global function"
  }, {
    "id": 370,
    "text": "open",
    "type": "global function"
  }, {
    "id": 371,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 372,
    "text": "error",
    "type": "global function"
  }, {
    "id": 373,
    "text": "h",
    "type": "global function"
  }, {
    "id": 374,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 375,
    "text": "macro",
    "type": "global function"
  }, {
    "id": 376,
    "text": "format",
    "type": "global function"
  }, {
    "id": 377,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 378,
    "text": "LuaFishParser",
    "type": "global function"
  }, {
    "id": 379,
    "text": "obj_ast.stype.__index",
    "type": "global function"
  }, {
    "id": 380,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 381,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 382,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 383,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 384,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 385,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 386,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 387,
    "text": "",
    "type": "local variable"
  }, {
    "id": 388,
    "text": "",
    "type": "variable container"
  }, {
    "id": 389,
    "text": "",
    "type": "require container"
  }, {
    "id": 390,
    "text": "",
    "type": "local variable"
  }, {
    "id": 391,
    "text": "",
    "type": "n/a"
  }, {
    "id": 392,
    "text": "",
    "type": "local variable"
  }, {
    "id": 393,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 394,
    "text": "",
    "type": "local variable"
  }, {
    "id": 395,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 396,
    "text": "",
    "type": "local variable"
  }, {
    "id": 397,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 398,
    "text": "",
    "type": "local variable"
  }, {
    "id": 399,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 400,
    "text": "",
    "type": "local variable"
  }, {
    "id": 401,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 402,
    "text": "",
    "type": "local variable"
  }, {
    "id": 403,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 404,
    "text": "",
    "type": "local variable"
  }, {
    "id": 405,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 406,
    "text": "",
    "type": "local variable"
  }, {
    "id": 407,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 408,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 409,
    "text": "",
    "type": "boolean"
  }, {
    "id": 410,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 411,
    "text": "",
    "type": "boolean"
  }, {
    "id": 412,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 413,
    "text": "",
    "type": "boolean"
  }, {
    "id": 414,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 415,
    "text": "",
    "type": "boolean"
  }, {
    "id": 416,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 417,
    "text": "",
    "type": "boolean"
  }, {
    "id": 418,
    "text": "",
    "type": "local variable"
  }, {
    "id": 419,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 420,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 421,
    "text": "",
    "type": "string"
  }, {
    "id": 422,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 423,
    "text": "",
    "type": "string"
  }, {
    "id": 424,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 425,
    "text": "",
    "type": "string"
  }, {
    "id": 426,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 427,
    "text": "",
    "type": "string"
  }, {
    "id": 428,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 429,
    "text": "",
    "type": "string"
  }, {
    "id": 430,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 431,
    "text": "",
    "type": "string"
  }, {
    "id": 432,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 433,
    "text": "",
    "type": "string"
  }, {
    "id": 434,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 435,
    "text": "",
    "type": "string"
  }, {
    "id": 436,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 437,
    "text": "",
    "type": "string"
  }, {
    "id": 438,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 439,
    "text": "",
    "type": "string"
  }, {
    "id": 440,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 441,
    "text": "",
    "type": "string"
  }, {
    "id": 442,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 443,
    "text": "",
    "type": "string"
  }, {
    "id": 444,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 445,
    "text": "",
    "type": "string"
  }, {
    "id": 446,
    "text": "",
    "type": "local variable"
  }, {
    "id": 447,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 448,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 449,
    "text": "",
    "type": "string"
  }, {
    "id": 450,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 451,
    "text": "",
    "type": "string"
  }, {
    "id": 452,
    "text": "",
    "type": "local variable"
  }, {
    "id": 453,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 454,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 455,
    "text": "",
    "type": "boolean"
  }, {
    "id": 456,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 457,
    "text": "",
    "type": "boolean"
  }, {
    "id": 458,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 459,
    "text": "",
    "type": "boolean"
  }, {
    "id": 460,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 461,
    "text": "",
    "type": "boolean"
  }, {
    "id": 462,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 463,
    "text": "",
    "type": "boolean"
  }, {
    "id": 464,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 465,
    "text": "",
    "type": "boolean"
  }, {
    "id": 466,
    "text": "",
    "type": "local variable"
  }, {
    "id": 467,
    "text": "",
    "type": "n/a"
  }, {
    "id": 468,
    "text": "",
    "type": "global variable"
  }, {
    "id": 469,
    "text": "",
    "type": "n/a"
  }, {
    "id": 470,
    "text": "",
    "type": "global variable"
  }, {
    "id": 471,
    "text": "",
    "type": "n/a"
  }, {
    "id": 472,
    "text": "",
    "type": "global variable"
  }, {
    "id": 473,
    "text": "",
    "type": "n/a"
  }, {
    "id": 474,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 475,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 476,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 477,
    "text": "(name)",
    "type": "module"
  }, {
    "id": 478,
    "text": "",
    "type": "interface container"
  }, {
    "id": 479,
    "text": "",
    "type": "interface"
  }, {
    "id": 480,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 481,
    "text": "",
    "type": "local variable"
  }, {
    "id": 482,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 483,
    "text": "",
    "type": "local variable"
  }, {
    "id": 484,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 485,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 486,
    "text": "",
    "type": "local variable"
  }, {
    "id": 487,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 488,
    "text": "",
    "type": "require local variable"
  } ]
}