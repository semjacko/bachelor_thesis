{
  "_filename": "parser.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luafish/lib/luafish/parser.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 15
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 21
  }, {
    "from": 25,
    "label": "has",
    "to": 21
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 21
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 32,
    "label": "has",
    "to": 21
  }, {
    "from": 32,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 38
  }, {
    "from": 44,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 37
  }, {
    "from": 53,
    "label": "has",
    "to": 38
  }, {
    "from": 52,
    "label": "has",
    "to": 42
  }, {
    "from": 44,
    "label": "has",
    "to": 21
  }, {
    "from": 44,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 21
  }, {
    "from": 64,
    "label": "has",
    "to": 21
  }, {
    "from": 64,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 21
  }, {
    "from": 67,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 55,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 73
  }, {
    "from": 55,
    "label": "has",
    "to": 74
  }, {
    "from": 55,
    "label": "has",
    "to": 75
  }, {
    "from": 55,
    "label": "has",
    "to": 76
  }, {
    "from": 55,
    "label": "has",
    "to": 77
  }, {
    "from": 55,
    "label": "has",
    "to": 78
  }, {
    "from": 55,
    "label": "has",
    "to": 79
  }, {
    "from": 55,
    "label": "has",
    "to": 80
  }, {
    "from": 55,
    "label": "has",
    "to": 81
  }, {
    "from": 55,
    "label": "has",
    "to": 82
  }, {
    "from": 55,
    "label": "has",
    "to": 83
  }, {
    "from": 55,
    "label": "has",
    "to": 84
  }, {
    "from": 55,
    "label": "has",
    "to": 85
  }, {
    "from": 55,
    "label": "has",
    "to": 86
  }, {
    "from": 55,
    "label": "has",
    "to": 87
  }, {
    "from": 55,
    "label": "has",
    "to": 88
  }, {
    "from": 55,
    "label": "has",
    "to": 89
  }, {
    "from": 55,
    "label": "has",
    "to": 90
  }, {
    "from": 55,
    "label": "has",
    "to": 91
  }, {
    "from": 55,
    "label": "has",
    "to": 92
  }, {
    "from": 55,
    "label": "has",
    "to": 93
  }, {
    "from": 55,
    "label": "has",
    "to": 94
  }, {
    "from": 55,
    "label": "has",
    "to": 95
  }, {
    "from": 55,
    "label": "has",
    "to": 96
  }, {
    "from": 55,
    "label": "has",
    "to": 97
  }, {
    "from": 55,
    "label": "has",
    "to": 98
  }, {
    "from": 55,
    "label": "has",
    "to": 99
  }, {
    "from": 55,
    "label": "has",
    "to": 100
  }, {
    "from": 55,
    "label": "has",
    "to": 101
  }, {
    "from": 55,
    "label": "has",
    "to": 102
  }, {
    "from": 55,
    "label": "has",
    "to": 103
  }, {
    "from": 55,
    "label": "has",
    "to": 104
  }, {
    "from": 55,
    "label": "has",
    "to": 105
  }, {
    "from": 55,
    "label": "has",
    "to": 106
  }, {
    "from": 55,
    "label": "has",
    "to": 107
  }, {
    "from": 55,
    "label": "has",
    "to": 108
  }, {
    "from": 55,
    "label": "has",
    "to": 109
  }, {
    "from": 55,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 21
  }, {
    "from": 112,
    "label": "has",
    "to": 21
  }, {
    "from": 113,
    "label": "has",
    "to": 21
  }, {
    "from": 114,
    "label": "has",
    "to": 21
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 65
  }, {
    "from": 116,
    "label": "has",
    "to": 21
  }, {
    "from": 116,
    "label": "has",
    "to": 21
  }, {
    "from": 116,
    "label": "has",
    "to": 21
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 21
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 68
  }, {
    "from": 120,
    "label": "has",
    "to": 21
  }, {
    "from": 120,
    "label": "has",
    "to": 21
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 70
  }, {
    "from": 122,
    "label": "has",
    "to": 71
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 21
  }, {
    "from": 125,
    "label": "has",
    "to": 21
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 21
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 21
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 21
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 138,
    "label": "has",
    "to": 143
  }, {
    "from": 134,
    "label": "has",
    "to": 21
  }, {
    "from": 134,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 21
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 21
  }, {
    "from": 148,
    "label": "has",
    "to": 21
  }, {
    "from": 149,
    "label": "has",
    "to": 21
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 150,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 158,
    "label": "has",
    "to": 162
  }, {
    "from": 158,
    "label": "has",
    "to": 163
  }, {
    "from": 158,
    "label": "has",
    "to": 164
  }, {
    "from": 158,
    "label": "has",
    "to": 165
  }, {
    "from": 158,
    "label": "has",
    "to": 166
  }, {
    "from": 156,
    "label": "has",
    "to": 167
  }, {
    "from": 156,
    "label": "has",
    "to": 168
  }, {
    "from": 156,
    "label": "has",
    "to": 169
  }, {
    "from": 156,
    "label": "has",
    "to": 170
  }, {
    "from": 156,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 21
  }, {
    "from": 156,
    "label": "has",
    "to": 173
  }, {
    "from": 156,
    "label": "has",
    "to": 21
  }, {
    "from": 156,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 172
  }, {
    "from": 175,
    "label": "has",
    "to": 21
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 21
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 21
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 183,
    "label": "has",
    "to": 21
  }, {
    "from": 183,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 135
  }, {
    "from": 192,
    "label": "has",
    "to": 136
  }, {
    "from": 192,
    "label": "has",
    "to": 137
  }, {
    "from": 192,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 138,
    "label": "has",
    "to": 143
  }, {
    "from": 192,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 194
  }, {
    "from": 189,
    "label": "has",
    "to": 195
  }, {
    "from": 189,
    "label": "has",
    "to": 196
  }, {
    "from": 189,
    "label": "has",
    "to": 197
  }, {
    "from": 189,
    "label": "has",
    "to": 198
  }, {
    "from": 189,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 201
  }, {
    "from": 189,
    "label": "has",
    "to": 202
  }, {
    "from": 189,
    "label": "has",
    "to": 203
  }, {
    "from": 189,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 205
  }, {
    "from": 189,
    "label": "has",
    "to": 206
  }, {
    "from": 189,
    "label": "has",
    "to": 207
  }, {
    "from": 189,
    "label": "has",
    "to": 208
  }, {
    "from": 189,
    "label": "has",
    "to": 209
  }, {
    "from": 189,
    "label": "has",
    "to": 210
  }, {
    "from": 189,
    "label": "has",
    "to": 211
  }, {
    "from": 189,
    "label": "has",
    "to": 212
  }, {
    "from": 189,
    "label": "has",
    "to": 213
  }, {
    "from": 189,
    "label": "has",
    "to": 214
  }, {
    "from": 189,
    "label": "has",
    "to": 215
  }, {
    "from": 189,
    "label": "has",
    "to": 216
  }, {
    "from": 189,
    "label": "has",
    "to": 217
  }, {
    "from": 189,
    "label": "has",
    "to": 218
  }, {
    "from": 189,
    "label": "has",
    "to": 219
  }, {
    "from": 189,
    "label": "has",
    "to": 220
  }, {
    "from": 189,
    "label": "has",
    "to": 221
  }, {
    "from": 189,
    "label": "has",
    "to": 222
  }, {
    "from": 189,
    "label": "has",
    "to": 223
  }, {
    "from": 189,
    "label": "has",
    "to": 224
  }, {
    "from": 189,
    "label": "has",
    "to": 225
  }, {
    "from": 189,
    "label": "has",
    "to": 226
  }, {
    "from": 189,
    "label": "has",
    "to": 227
  }, {
    "from": 189,
    "label": "has",
    "to": 21
  }, {
    "from": 189,
    "label": "has",
    "to": 228
  }, {
    "from": 128,
    "label": "calls",
    "to": 125
  }, {
    "from": 229,
    "label": "calls",
    "to": 125
  }, {
    "from": 229,
    "label": "calls",
    "to": 125
  }, {
    "from": 229,
    "label": "calls",
    "to": 125
  }, {
    "from": 229,
    "label": "calls",
    "to": 125
  }, {
    "from": 14,
    "label": "calls",
    "to": 257
  }, {
    "from": 14,
    "label": "calls",
    "to": 257
  }, {
    "from": 25,
    "label": "calls",
    "to": 257
  }, {
    "from": 55,
    "label": "calls",
    "to": 257
  }, {
    "from": 229,
    "label": "calls",
    "to": 234
  }, {
    "from": 229,
    "label": "calls",
    "to": 234
  }, {
    "from": 229,
    "label": "calls",
    "to": 234
  }, {
    "from": 229,
    "label": "calls",
    "to": 234
  }, {
    "from": 229,
    "label": "calls",
    "to": 234
  }, {
    "from": 229,
    "label": "calls",
    "to": 234
  }, {
    "from": 229,
    "label": "calls",
    "to": 234
  }, {
    "from": 128,
    "label": "calls",
    "to": 235
  }, {
    "from": 156,
    "label": "calls",
    "to": 235
  }, {
    "from": 156,
    "label": "calls",
    "to": 235
  }, {
    "from": 229,
    "label": "calls",
    "to": 236
  }, {
    "from": 229,
    "label": "calls",
    "to": 236
  }, {
    "from": 229,
    "label": "calls",
    "to": 236
  }, {
    "from": 14,
    "label": "calls",
    "to": 237
  }, {
    "from": 156,
    "label": "calls",
    "to": 237
  }, {
    "from": 229,
    "label": "calls",
    "to": 237
  }, {
    "from": 229,
    "label": "calls",
    "to": 238
  }, {
    "from": 156,
    "label": "calls",
    "to": 233
  }, {
    "from": 156,
    "label": "calls",
    "to": 247
  }, {
    "from": 156,
    "label": "calls",
    "to": 239
  }, {
    "from": 14,
    "label": "calls",
    "to": 240
  }, {
    "from": 25,
    "label": "calls",
    "to": 240
  }, {
    "from": 150,
    "label": "calls",
    "to": 240
  }, {
    "from": 25,
    "label": "calls",
    "to": 25
  }, {
    "from": 55,
    "label": "calls",
    "to": 32
  }, {
    "from": 229,
    "label": "calls",
    "to": 23
  }, {
    "from": 55,
    "label": "calls",
    "to": 23
  }, {
    "from": 150,
    "label": "calls",
    "to": 150
  }, {
    "from": 156,
    "label": "calls",
    "to": 150
  }, {
    "from": 128,
    "label": "calls",
    "to": 250
  }, {
    "from": 55,
    "label": "calls",
    "to": 147
  }, {
    "from": 55,
    "label": "calls",
    "to": 147
  }, {
    "from": 229,
    "label": "calls",
    "to": 241
  }, {
    "from": 229,
    "label": "calls",
    "to": 241
  }, {
    "from": 156,
    "label": "calls",
    "to": 253
  }, {
    "from": 55,
    "label": "calls",
    "to": 116
  }, {
    "from": 55,
    "label": "calls",
    "to": 116
  }, {
    "from": 55,
    "label": "calls",
    "to": 254
  }, {
    "from": 156,
    "label": "calls",
    "to": 254
  }, {
    "from": 229,
    "label": "calls",
    "to": 255
  }, {
    "from": 55,
    "label": "calls",
    "to": 243
  }, {
    "from": 125,
    "label": "calls",
    "to": 243
  }, {
    "from": 229,
    "label": "calls",
    "to": 243
  }, {
    "from": 229,
    "label": "calls",
    "to": 243
  }, {
    "from": 229,
    "label": "calls",
    "to": 243
  }, {
    "from": 14,
    "label": "calls",
    "to": 246
  }, {
    "from": 25,
    "label": "calls",
    "to": 246
  }, {
    "from": 14,
    "label": "calls",
    "to": 252
  }, {
    "from": 25,
    "label": "calls",
    "to": 252
  }, {
    "from": 150,
    "label": "calls",
    "to": 252
  }, {
    "from": 156,
    "label": "calls",
    "to": 252
  }, {
    "from": 156,
    "label": "calls",
    "to": 252
  }, {
    "from": 175,
    "label": "calls",
    "to": 44
  }, {
    "from": 55,
    "label": "calls",
    "to": 120
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 112
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 242
  }, {
    "from": 55,
    "label": "calls",
    "to": 256
  }, {
    "from": 55,
    "label": "calls",
    "to": 256
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 55,
    "label": "calls",
    "to": 30
  }, {
    "from": 150,
    "label": "calls",
    "to": 175
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 55,
    "label": "calls",
    "to": 111
  }, {
    "from": 229,
    "label": "calls",
    "to": 244
  }, {
    "from": 30,
    "label": "calls",
    "to": 259
  }, {
    "from": 55,
    "label": "calls",
    "to": 259
  }, {
    "from": 55,
    "label": "calls",
    "to": 259
  }, {
    "from": 55,
    "label": "calls",
    "to": 259
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 258
  }, {
    "from": 55,
    "label": "calls",
    "to": 258
  }, {
    "from": 55,
    "label": "calls",
    "to": 258
  }, {
    "from": 55,
    "label": "calls",
    "to": 258
  }, {
    "from": 55,
    "label": "calls",
    "to": 258
  }, {
    "from": 55,
    "label": "calls",
    "to": 258
  }, {
    "from": 229,
    "label": "calls",
    "to": 55
  }, {
    "from": 229,
    "label": "calls",
    "to": 260
  }, {
    "from": 229,
    "label": "calls",
    "to": 260
  }, {
    "from": 229,
    "label": "calls",
    "to": 260
  }, {
    "from": 229,
    "label": "calls",
    "to": 260
  }, {
    "from": 55,
    "label": "calls",
    "to": 261
  }, {
    "from": 55,
    "label": "calls",
    "to": 261
  }, {
    "from": 229,
    "label": "calls",
    "to": 261
  }, {
    "from": 229,
    "label": "calls",
    "to": 261
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 113
  }, {
    "from": 30,
    "label": "calls",
    "to": 245
  }, {
    "from": 55,
    "label": "calls",
    "to": 245
  }, {
    "from": 55,
    "label": "calls",
    "to": 245
  }, {
    "from": 55,
    "label": "calls",
    "to": 245
  }, {
    "from": 55,
    "label": "calls",
    "to": 245
  }, {
    "from": 55,
    "label": "calls",
    "to": 245
  }, {
    "from": 55,
    "label": "calls",
    "to": 245
  }, {
    "from": 55,
    "label": "calls",
    "to": 245
  }, {
    "from": 229,
    "label": "calls",
    "to": 251
  }, {
    "from": 55,
    "label": "calls",
    "to": 249
  }, {
    "from": 55,
    "label": "calls",
    "to": 249
  }, {
    "from": 55,
    "label": "calls",
    "to": 249
  }, {
    "from": 55,
    "label": "calls",
    "to": 249
  }, {
    "from": 55,
    "label": "calls",
    "to": 249
  }, {
    "from": 55,
    "label": "calls",
    "to": 248
  }, {
    "from": 55,
    "label": "calls",
    "to": 248
  }, {
    "from": 55,
    "label": "calls",
    "to": 248
  }, {
    "from": 55,
    "label": "calls",
    "to": 248
  }, {
    "from": 55,
    "label": "calls",
    "to": 248
  }, {
    "from": 55,
    "label": "calls",
    "to": 248
  }, {
    "from": 55,
    "label": "calls",
    "to": 248
  }, {
    "from": 1,
    "label": "contains",
    "to": 229
  }, {
    "from": 229,
    "label": "declares",
    "to": 14
  }, {
    "from": 229,
    "label": "declares",
    "to": 23
  }, {
    "from": 229,
    "label": "declares",
    "to": 25
  }, {
    "from": 229,
    "label": "declares",
    "to": 30
  }, {
    "from": 229,
    "label": "declares",
    "to": 32
  }, {
    "from": 229,
    "label": "declares",
    "to": 44
  }, {
    "from": 229,
    "label": "declares",
    "to": 55
  }, {
    "from": 229,
    "label": "declares",
    "to": 111
  }, {
    "from": 229,
    "label": "declares",
    "to": 112
  }, {
    "from": 229,
    "label": "declares",
    "to": 113
  }, {
    "from": 229,
    "label": "declares",
    "to": 114
  }, {
    "from": 229,
    "label": "declares",
    "to": 116
  }, {
    "from": 229,
    "label": "declares",
    "to": 118
  }, {
    "from": 229,
    "label": "declares",
    "to": 120
  }, {
    "from": 229,
    "label": "declares",
    "to": 122
  }, {
    "from": 229,
    "label": "declares",
    "to": 124
  }, {
    "from": 229,
    "label": "declares",
    "to": 125
  }, {
    "from": 229,
    "label": "declares",
    "to": 127
  }, {
    "from": 229,
    "label": "declares",
    "to": 128
  }, {
    "from": 229,
    "label": "declares",
    "to": 132
  }, {
    "from": 229,
    "label": "declares",
    "to": 134
  }, {
    "from": 229,
    "label": "declares",
    "to": 145
  }, {
    "from": 229,
    "label": "declares",
    "to": 147
  }, {
    "from": 229,
    "label": "declares",
    "to": 148
  }, {
    "from": 229,
    "label": "declares",
    "to": 149
  }, {
    "from": 229,
    "label": "declares",
    "to": 150
  }, {
    "from": 229,
    "label": "declares",
    "to": 156
  }, {
    "from": 229,
    "label": "declares",
    "to": 175
  }, {
    "from": 229,
    "label": "declares",
    "to": 177
  }, {
    "from": 229,
    "label": "declares",
    "to": 181
  }, {
    "from": 229,
    "label": "declares",
    "to": 183
  }, {
    "from": 229,
    "label": "declares",
    "to": 189
  }, {
    "from": 262,
    "label": "requires",
    "to": 1
  }, {
    "from": 264,
    "label": "requires",
    "to": 1
  }, {
    "from": 266,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 267
  }, {
    "from": 1,
    "label": "contains",
    "to": 268
  }, {
    "from": 267,
    "label": "initializes",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 267,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 267,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 267,
    "label": "initializes",
    "to": 275
  }, {
    "from": 275,
    "label": "assigns",
    "to": 276
  }, {
    "from": 267,
    "label": "initializes",
    "to": 277
  }, {
    "from": 277,
    "label": "assigns",
    "to": 278
  }, {
    "from": 267,
    "label": "initializes",
    "to": 279
  }, {
    "from": 279,
    "label": "assigns",
    "to": 280
  }, {
    "from": 267,
    "label": "initializes",
    "to": 281
  }, {
    "from": 281,
    "label": "assigns",
    "to": 282
  }, {
    "from": 267,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "assigns",
    "to": 284
  }, {
    "from": 267,
    "label": "initializes",
    "to": 285
  }, {
    "from": 285,
    "label": "assigns",
    "to": 286
  }, {
    "from": 267,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "assigns",
    "to": 288
  }, {
    "from": 267,
    "label": "initializes",
    "to": 289
  }, {
    "from": 289,
    "label": "assigns",
    "to": 290
  }, {
    "from": 267,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 267,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 267,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 267,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 267,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 267,
    "label": "initializes",
    "to": 301
  }, {
    "from": 301,
    "label": "assigns",
    "to": 302
  }, {
    "from": 267,
    "label": "initializes",
    "to": 303
  }, {
    "from": 303,
    "label": "assigns",
    "to": 304
  }, {
    "from": 267,
    "label": "initializes",
    "to": 305
  }, {
    "from": 305,
    "label": "assigns",
    "to": 306
  }, {
    "from": 267,
    "label": "initializes",
    "to": 307
  }, {
    "from": 307,
    "label": "assigns",
    "to": 308
  }, {
    "from": 267,
    "label": "initializes",
    "to": 309
  }, {
    "from": 309,
    "label": "assigns",
    "to": 310
  }, {
    "from": 267,
    "label": "initializes",
    "to": 311
  }, {
    "from": 311,
    "label": "assigns",
    "to": 312
  }, {
    "from": 267,
    "label": "initializes",
    "to": 313
  }, {
    "from": 313,
    "label": "assigns",
    "to": 314
  }, {
    "from": 267,
    "label": "initializes",
    "to": 315
  }, {
    "from": 315,
    "label": "assigns",
    "to": 316
  }, {
    "from": 267,
    "label": "initializes",
    "to": 317
  }, {
    "from": 317,
    "label": "assigns",
    "to": 318
  }, {
    "from": 267,
    "label": "initializes",
    "to": 319
  }, {
    "from": 319,
    "label": "assigns",
    "to": 320
  }, {
    "from": 267,
    "label": "initializes",
    "to": 321
  }, {
    "from": 321,
    "label": "assigns",
    "to": 322
  }, {
    "from": 267,
    "label": "initializes",
    "to": 323
  }, {
    "from": 323,
    "label": "assigns",
    "to": 324
  }, {
    "from": 267,
    "label": "initializes",
    "to": 325
  }, {
    "from": 325,
    "label": "assigns",
    "to": 326
  }, {
    "from": 267,
    "label": "initializes",
    "to": 327
  }, {
    "from": 327,
    "label": "assigns",
    "to": 328
  }, {
    "from": 267,
    "label": "initializes",
    "to": 329
  }, {
    "from": 329,
    "label": "assigns",
    "to": 330
  }, {
    "from": 268,
    "label": "initializes",
    "to": 331
  }, {
    "from": 331,
    "label": "requires",
    "to": 232
  }, {
    "from": 1,
    "label": "provides",
    "to": 332
  }, {
    "from": 263,
    "label": "represents",
    "to": 333
  }, {
    "from": 332,
    "label": "provides",
    "to": 333
  }, {
    "from": 335,
    "label": "requires",
    "to": 1
  }, {
    "from": 337,
    "label": "requires",
    "to": 1
  }, {
    "from": 338,
    "label": "requires",
    "to": 1
  }, {
    "from": 287,
    "label": "contains",
    "to": 2
  }, {
    "from": 287,
    "label": "contains",
    "to": 3
  }, {
    "from": 287,
    "label": "contains",
    "to": 4
  }, {
    "from": 287,
    "label": "contains",
    "to": 5
  }, {
    "from": 287,
    "label": "contains",
    "to": 6
  }, {
    "from": 287,
    "label": "contains",
    "to": 7
  }, {
    "from": 287,
    "label": "contains",
    "to": 8
  }, {
    "from": 287,
    "label": "contains",
    "to": 9
  }, {
    "from": 287,
    "label": "contains",
    "to": 10
  }, {
    "from": 287,
    "label": "contains",
    "to": 11
  }, {
    "from": 287,
    "label": "contains",
    "to": 12
  }, {
    "from": 287,
    "label": "contains",
    "to": 13
  }, {
    "from": 263,
    "label": "contains",
    "to": 32
  }, {
    "from": 265,
    "label": "contains",
    "to": 32
  }, {
    "from": 287,
    "label": "contains",
    "to": 32
  }, {
    "from": 334,
    "label": "contains",
    "to": 32
  }, {
    "from": 336,
    "label": "contains",
    "to": 32
  }, {
    "from": 263,
    "label": "contains",
    "to": 44
  }, {
    "from": 265,
    "label": "contains",
    "to": 44
  }, {
    "from": 287,
    "label": "contains",
    "to": 44
  }, {
    "from": 334,
    "label": "contains",
    "to": 44
  }, {
    "from": 336,
    "label": "contains",
    "to": 44
  }, {
    "from": 287,
    "label": "contains",
    "to": 230
  }, {
    "from": 287,
    "label": "contains",
    "to": 231
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "parser",
    "type": "module"
  }, {
    "id": 2,
    "text": "function M.c_from_ast(ast)\r\n  assert(ast.tag == 'Block')\r\n  local cobj = to_c(ast)\r\n\r\n  return [[\r\n#include <stdio.h>\r\n]] .. (cobj.toplevel and cobj.toplevel or '') .. [[\r\nint main() {\r\n]] .. cobj[1] ..\r\n[[\r\nreturn 0;\r\n}\r\n]]\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function M.c_from_lua(input)\r\n  local Parser = require 'luafish.parser'\r\n  local p = Parser()\r\n  local ast = p:parse(input)\r\n  return M.c_from_ast(ast)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function M.object_to_ast(o)\r\n  if type(o) == 'string' then\r\n    return ASTNode {'String', o}\r\n  elseif type(o) == 'number' then\r\n    return ASTNode {'Number', o}\r\n  elseif o == nil then\r\n    return ASTNode {'Nil'}\r\n  elseif o == false then\r\n    return ASTNode {'False'}\r\n  elseif o == true then\r\n    return ASTNode {'True'}\r\n  elseif type(o) == 'table' then\r\n    --LIMITATION: only does numeric keys + tag since non-numeric keys can\r\n    -- be recursive\r\n    local elements = {}\r\n    elements[#elements+1] = 'Table'\r\n    if o.tag ~= nil then\r\n      elements[#elements+1] = ASTNode {'Field', M.object_to_ast 'tag', M.object_to_ast(o.tag)}\r\n    end\r\n    for k,v in ipairs(o) do\r\n      elements[#elements+1] = ASTNode {'Field',\r\n         M.object_to_ast(k), M.object_to_ast(v)}\r\n    end\r\n    return ASTNode(elements)\r\n  else\r\n    assert(false, \"NOT IMPLEMENTED for \" .. tostring(o))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function M.ast_to_object(ast)\r\n  if ast.tag == 'String' or ast.tag == 'Number' then\r\n    return ast[1]\r\n  elseif ast.tag == 'Nil' then return nil\r\n  elseif ast.tag == 'False' then return false\r\n  elseif ast.tag == 'True' then return true\r\n  else\r\n    local code = LuaFishSerializer.ast_to_code(ast)\r\n    local func = assert(loadstring('return ' .. code))\r\n    return func()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function M.process_macros(ast, env)\r\n  local macros = env.MACRO\r\n\r\n  -- evaluate children\r\n  for i,v in ipairs(ast) do\r\n    if type(v) == \"table\" then\r\n      local is_replace, replaced = M.process_macros(v, env)\r\n      if is_replace then\r\n        ast[i] = replaced\r\n      end\r\n    end\r\n  end\r\n\r\n  -- Evaluate compile-time expressions.\r\n  -- The order is to evalute children then parents.\r\n\r\n  if ast.tag == 'Index' then\r\n    local obj_ast, key_ast = resolve(env, ast[1]), ast[2]\r\n    if obj_ast and obj_ast.stype and obj_ast.stype.__index then\r\n      local result_type =\r\n         mypcall(ast, obj_ast.stype.__index, obj_ast.stype, M.ast_to_object(key_ast))\r\n      ast.stype = result_type -- may be nil\r\n    end\r\n  elseif ast.tag == 'Id' then\r\n    local macro_name = ast[1]\r\n    --print(macros.SETSQUARE,rawget(macros, 'SETSQUARE'),'ss', macro_name)\r\n\r\n    local macro = macros[macro_name]\r\n    if macro then\r\n      local obj = {tag='Macro', macro}\r\n      obj.scope = ast.scope -- copy\r\n      obj.last = ast.last\r\n      return true, obj\r\n    end\r\n    -- otherwise, non-macro Id\r\n  elseif ast.tag == 'Call' then\r\n    local macro = ast[1]\r\n    if macro.tag == 'Macro' then -- a macro\r\n      macro = macro[1]\r\n      local arg_ast = ast[2]\r\n      local args = resolve_args(env, arg_ast)\r\n      local a,b = macro(unpack(args))\r\n      if a == 'value' then a = M.object_to_ast(b)\r\n      elseif a == nil then a = ASTNode{'Block'}end\r\n      local res_ast = a\r\n      --print (\"M\", macro, macro_name, arg_ast, res_ast)\r\n      return true, res_ast\r\n    end\r\n    -- otherwise, non-macro call\r\n\r\n    local obj_ast = resolve(env, ast[1])\r\n    if obj_ast and obj_ast.stype then\r\n      if obj_ast.stype then\r\n        local caller = TFunction.isa(obj_ast.stype) and obj_ast.stype.__call or\r\n           type(obj_ast.stype) == 'function' and obj_ast.stype\r\n        if caller then\r\n          local args = resolve_args(env, ast[2])\r\n          ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n        else\r\n          error(\"not callable \" .. tostring(obj_ast) .. \" \" .. tostring(obj_ast.stype))\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'ColonCall' then  \r\n    -- note: this is like an Index followed by a Call with \"self\"\r\n    local obj_ast = resolve(env, ast[1])\r\n\r\n    if obj_ast and obj_ast.stype and obj_ast.stype.__index then\r\n      local key_ast = ast[2]\r\n      local caller =\r\n         obj_ast.stype.__index(obj_ast.stype, M.ast_to_object(key_ast)) -- may be il\r\n      if caller then\r\n        local args = resolve_args(env, ast[3])\r\n        table.insert(args, 1, obj_ast) -- self\r\n        ast.stype = mypcall(ast, caller, unpack(args)) -- may be nil\r\n      end\r\n    end\r\n  elseif ast.tag == 'String' then\r\n    ast.stype = TString.create(ast)\r\n  elseif ast.tag == 'Number' then\r\n    ast.stype = TNumber.create(ast)\r\n  elseif ast.tag == 'Nil' then\r\n    ast.stype = 'nil'  -- note: 'nil' different from nil.\r\n  elseif ast.tag == 'True' or ast.tag == 'False' then\r\n    ast.stype = 'boolean'\r\n  elseif ast.tag == 'Op' then\r\n    if #ast == 2 then -- unary op\r\n      local a_ast = resolve(env, ast[2])\r\n      local event = unop_to_mt[ast[1]]\r\n      local h = getunhandler(a_ast, event)\r\n      if h then\r\n        ast.stype = h(a_ast.stype)\r\n      else -- unknown type\r\n        if a_ast.stype then\r\n          error(tostring(ast) .. ' - operation not defined')\r\n        end\r\n      end\r\n    else -- binary op\r\n      local a_ast, b_ast = resolve(env, ast[2]), resolve(env, ast[3])\r\n      if not a_ast or not b_ast then\r\n        if not a_ast then\r\n           print(context(ast) .. \": non-lexical \")\r\n        end\r\n        if not b_ast then\r\n          print(context(ast) .. \": non-lexical \")\r\n        end\r\n      else\r\n        if is_bool_binop[ast[1]] then\r\n          ast.stype = 'boolean'\r\n        else\r\n          local event = binop_to_mt[ast[1]]\r\n          local h = getbinhandler(a_ast, b_ast, event)\r\n          if h then\r\n            ast.stype = h(a_ast.stype, b_ast.stype)\r\n          elseif ast[1] == 'And' or ast[1] == 'Or' and\r\n                 a_ast.stype == b_ast.stype then\r\n            ast.stype = a_ast.stype\r\n          elseif a_ast.stype == 'number' or b_ast.stype == 'number' then\r\n            ast.stype = 'number'\r\n          else -- unknown type\r\n            if a_ast.stype and b_ast.stype then\r\n              error(tostring(ast) .. ' - operation not defined')\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'Parens' then\r\n    ast.stype = ast[1].stype\r\n  elseif ast.tag == 'Local' then\r\n    local vals_ast = ast[2]\r\n    if vals_ast then\r\n      for i=1,#vals_ast do\r\n        local val_ast = vals_ast[i]\r\n        --print(val_ast.stype)\r\n        if ast[1][i] then\r\n          ast[1][i].stype = val_ast.stype\r\n          ast[1][i].typed = val_ast.typed\r\n        end\r\n      end\r\n    end\r\n  elseif ast.tag == 'Assign' then\r\n    local names_ast, vals_ast = ast[1], ast[2]\r\n    for i=1,#vals_ast do\r\n      local name_ast = resolve(env, names_ast[i])\r\n      local val_ast = resolve(env, vals_ast[i])\r\n      if name_ast and val_ast then\r\n        if not name_ast.typed then\r\n          name_ast.stype = val_ast.stype\r\n          -- unused: name_ast.typed = val_ast.typed\r\n        end\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function M.resolve_lexical_scope(ast)\r\n  local scope = {}\r\n  local last_local = nil\r\n  helper(ast, scope, last_local)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function M.loadstring(code, chunkname, is_debug)\r\n  local parser = LuaFishParser()\r\n\r\n  local t = parser:parse(code)\r\n\r\n  if is_debug then print('DEBUG[AST.IN][', t, ']') end\r\n\r\n  local env = create_compile_environment()\r\n\r\n  local function macro_ONCOMPILE(func_ast)\r\n    assert(func_ast.tag == 'Function')\r\n\r\n    local func_code = LuaFishSerializer.ast_to_code(func_ast)\r\n\r\n    local func = assert(loadstring('return ' .. func_code,\r\n                                   (chunkname or '') .. '(ONCOMPILE)',\r\n                                    is_debug))\r\n    setfenv(func, getfenv(1))\r\n  \r\n    func()(func_ast.scope)\r\n\r\n    return ASTNode{'Block'} -- no nothing\r\n  end\r\n  setfenv(macro_ONCOMPILE, env)\r\n  env.MACRO.ONCOMPILE = macro_ONCOMPILE\r\n\r\n  local function macro_REQUIRE(name_ast)\r\n    assert(name_ast.tag == 'String')\r\n    local name = name_ast[1]\r\n\r\n    --print(name_ast.last, 'L')\r\n\r\n    --hack\r\n    local stype\r\n    if name == 'math' then\r\n      stype = require 'luafish.math'\r\n    elseif name == 'string' then\r\n      stype = require 'luafish.string'\r\n    elseif name == '_G' then\r\n      stype = _G\r\n    else\r\n      local m = require(name)\r\n      return m.init(env) --ok?\r\n    end\r\n\r\n\r\n\r\n    local result_ast = ASTNode{'Call', ASTNode{'Id', 'require'},\r\n           ASTNode{'ExpList', ASTNode{'String', name}}}\r\n    result_ast.stype = stype\r\n    result_ast.typed = true\r\n    return result_ast\r\n  end\r\n  env.MACRO.REQUIRE = macro_REQUIRE\r\n\r\n  local function macro_NOGLOBALS()\r\n    function env.ONGLOBAL(name)\r\n      error('global \"' .. name .. '\" used when globals are disabled')\r\n    end\r\n  end\r\n  env.MACRO.NOGLOBALS = macro_NOGLOBALS\r\n\r\n  env.M = M\r\n\r\n  M.resolve_lexical_scope(t)\r\n\r\n  M.process_macros(t, env)\r\n\r\n  if is_debug then print('DEBUG[AST.OUT][', t, ']') end\r\n\r\n  -- FIX- this should return nil and error message not raise an error\r\n  local code = LuaFishSerializer.ast_to_code(t)\r\n\r\n  if is_debug then print('DEBUG[CODE.OUT][', code, ']') end\r\n  local fh = io.open(\"out1\", 'w')\r\n  fh:write(code)\r\n  fh:close()\r\n  return loadstring(code, chunkname, is_debug)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function M.dofile(name, is_debug)\r\n  local fh = assert(io.open(name))\r\n  local code = fh:read'*a'\r\n  fh:close()\r\n\r\n  local f, message = assert(M.loadstring(code, name, is_debug))\r\n  if not f then error(message, 2) end\r\n\r\n  return f()\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function M.loadfile(name, is_debug)\r\n  local fh = assert(io.open(name))\r\n  local code = fh:read'*a'\r\n  fh:close()\r\n\r\n  local f, message = M.loadstring(code, name, is_debug)\r\n  return f, message\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function M.require(name, is_debug)\r\n  local pkg = package.loaded[name]\r\n  if pkg then return pkg end\r\n\r\n  local path = locate(package.path, name)\r\n  if path then -- macro-enabled loaded\r\n    package.loaded[name] = sentinel\r\n    local old_arg = _G.arg; _G.arg = {name} -- localize\r\n    pkg = M.dofile(path, is_debug)\r\n    _G.arg = old_arg -- restore\r\n    if pkg then\r\n      package.loaded[name] = pkg\r\n    end\r\n    if package.loaded[name] == sentinel then\r\n      package.loaded[name] = true\r\n    end\r\n    return package.loaded[name]\r\n  else\r\n    return require(name)  -- fallback\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function M.loader(name)\r\n  local path = locate(package.path, name)\r\n  if path then -- macro-enabled loaded\r\n    return M.loadfile(path)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function M.addloader()\r\n  table.insert(package.loaders, 1, M.loader)\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function ASTNode:__tostring()\r\n  local ts = {}\r\n  ts[#ts+1] = 'tag=' .. string.format(\"%q\", self.tag)\r\n  for i,v in ipairs(self) do\r\n    if type(v) == \"string\" then\r\n      ts[#ts+1] = string.format(\"%q\", v)\r\n    else\r\n      ts[#ts+1] = tostring(v)\r\n    end\r\n  end\r\n  return '{' .. table.concat(ts, ',') .. '}'\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local ts = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "ts[#ts+1] = 'tag=' .. string.format(\"%q\", self.tag)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "for i,v in ipairs(self) do\r\n    if type(v) == \"string\" then\r\n      ts[#ts+1] = string.format(\"%q\", v)\r\n    else\r\n      ts[#ts+1] = tostring(v)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "if type(v) == \"string\" then\r\n      ts[#ts+1] = string.format(\"%q\", v)\r\n    else\r\n      ts[#ts+1] = tostring(v)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "ts[#ts+1] = string.format(\"%q\", v)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "ts[#ts+1] = tostring(v)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function short(s,i)\r\n  return \"[\" .. s:sub(i, i+40) .. \"...]\"\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function rtostring(t)\r\n  if type(t) == \"table\" then\r\n    local ts = {}\r\n    for i,v in ipairs(t) do\r\n      ts[i] = rtostring(v)\r\n    end\r\n    return \"{\" .. table.concat(ts, \",\") .. \"}\"\r\n  else\r\n    return string.format(\"%q\", t)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "if type(t) == \"table\" then\r\n    local ts = {}\r\n    for i,v in ipairs(t) do\r\n      ts[i] = rtostring(v)\r\n    end\r\n    return \"{\" .. table.concat(ts, \",\") .. \"}\"\r\n  else\r\n    return string.format(\"%q\", t)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "for i,v in ipairs(t) do\r\n      ts[i] = rtostring(v)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "ts[i] = rtostring(v)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function C2(value)\r\n  return Cp() * Cc(value)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function M.get_linecol(s, i)\r\n  local nline, ncol = 1, 0\r\n  local was_nl = false\r\n  for k=1,i do\r\n    if was_nl then\r\n      nline = nline + 1\r\n      ncol = 0\r\n      was_nl = false\r\n    end\r\n    if s:match('^\\n', k) then\r\n      was_nl = true\r\n    end\r\n    ncol = ncol + 1\r\n  end\r\n  return nline, ncol\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local nline, ncol = 1, 0",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local was_nl = false",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "for k=1,i do\r\n    if was_nl then\r\n      nline = nline + 1\r\n      ncol = 0\r\n      was_nl = false\r\n    end\r\n    if s:match('^\\n', k) then\r\n      was_nl = true\r\n    end\r\n    ncol = ncol + 1\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 36,
    "text": "if was_nl then\r\n      nline = nline + 1\r\n      ncol = 0\r\n      was_nl = false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "nline = nline + 1",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "ncol = 0",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "was_nl = false",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if s:match('^\\n', k) then\r\n      was_nl = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "was_nl = true",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "ncol = ncol + 1",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function M.update_linecol(s, i, i_last, nline, ncol)\r\n  i_last = i_last or 0\r\n  nline = nline or 0\r\n  ncol = ncol or 0\r\n\r\n  while i_last > i do -- reverse, go to start of previous line\r\n    repeat\r\n      i_last = i_last - 1\r\n    until i_last == 1 or s:match('^\\n',i_last)\r\n    nline = nline - 1\r\n    ncol = 0\r\n  end\r\n\r\n  for k=i_last+1,i do\r\n    if k == 1 or s:match('^\\n',k-1) then\r\n      nline = nline + 1\r\n      ncol = 0\r\n    end\r\n    ncol = ncol + 1\r\n  end\r\n  return i, nline, ncol\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "i_last = i_last or 0",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "nline = nline or 0",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "ncol = ncol or 0",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "while i_last > i do -- reverse, go to start of previous line\r\n    repeat\r\n      i_last = i_last - 1\r\n    until i_last == 1 or s:match('^\\n',i_last)\r\n    nline = nline - 1\r\n    ncol = 0\r\n  end",
    "type": "statement:while"
  }, {
    "id": 49,
    "text": "repeat\r\n      i_last = i_last - 1\r\n    until i_last == 1 or s:match('^\\n',i_last)",
    "type": "statement:repeat"
  }, {
    "id": 50,
    "text": "i_last = i_last - 1",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "nline = nline - 1",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "for k=i_last+1,i do\r\n    if k == 1 or s:match('^\\n',k-1) then\r\n      nline = nline + 1\r\n      ncol = 0\r\n    end\r\n    ncol = ncol + 1\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 53,
    "text": "if k == 1 or s:match('^\\n',k-1) then\r\n      nline = nline + 1\r\n      ncol = 0\r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function build_grammar(self)\r\n  local grammar = {'chunk'}\r\n\r\n  local name_simple =\r\n    ws^-1 * C(idsafe * (idsafe + digit)^0 - anykeyword * -idsafe)\r\n\r\n  local name =\r\n    (C2'Id' * name_simple)\r\n    / self.handle_identifier\r\n\r\n  local function keyword(name) return ws^-1 * P(name) * -idsafe end\r\n\r\n  local function op(name) return ws^-1 * P(name) end\r\n\r\n  -- capture op\r\n  local function cop(name) return ws^-1 * C(P(name)) end\r\n  \r\n  local function binop_helper(a, pos, op, b)\r\n    return self.handle_binop(pos, op, a, b)\r\n  end\r\n\r\n  local handle = {\r\n    Index = self.handle_index,\r\n    IndexShort = self.handle_indexshort,\r\n    Call = self.handle_call,\r\n    ColonCall = self.handle_coloncall\r\n  }\r\n  local function accum(a, pos, op, b, ...)\r\n    if op == nil then\r\n      return a\r\n    elseif op == \"ColonCall\" then\r\n      return accum(handle[op](pos, op, a, b, select(1, ...)), select(2, ...))\r\n    else\r\n      return accum((handle[op] or self.handle_binop)(pos, op, a, b), ...)\r\n    end\r\n  end\r\n\r\n  local function postfix_helper(a, pos, op, ...)\r\n    return handle[op](pos, op, a, ...)\r\n  end\r\n\r\n  -- right associative accumulate\r\n  local function raccum(a, pos, op, b, ...)\r\n    if op == nil then\r\n      return a\r\n    else\r\n      return self.handle_binop(pos, op, a, raccum(b, ...))\r\n    end\r\n  end\r\n\r\n  local function handle_unrecognized(s, i)\r\n    local nline, ncol = M.get_linecol(s, i)\r\n    error(string.format(\"At line %d col %d unrecognized [%s]\",\r\n                        nline, ncol, short(s,i)))\r\n  end\r\n\r\n  -- modified\r\n  grammar.chunk = (\r\n    V'block' *\r\n    (ws^-1 * #P(1) *\r\n     P(handle_unrecognized))^-1\r\n) / function(t) return ASTNode(t) end\r\n\r\n  -- modified\r\n  grammar.block = (\r\n  --    P(function(s,i) print(s:sub(i)) end) +\r\n      C2'Block' * (V'stat' * op';'^-1)^0 * (V'laststat' * op';'^-1)^-1\r\n  ) / self.handle_block\r\n\r\n  grammar.stat = (\r\n    (C2'Assign' * V'varlist' * op'=' * V'explist')\r\n        / self.handle_assign +\r\n    V'functioncall' +\r\n    (C2'Do' * keyword'do' * V'block' * keyword'end')\r\n        / self.handle_do +\r\n    (C2'While' * keyword'while' * V'exp' * keyword'do' *\r\n        V'block' * keyword'end')\r\n        / self.handle_while +\r\n    (C2'Repeat' * keyword'repeat' * V'block' * keyword'until' * V'exp')\r\n        / self.handle_repeat +\r\n    (C2'If' * keyword'if' * V'exp' * keyword'then' * V'block' *\r\n        (keyword'elseif' * V'exp' * keyword'then' * V'block')^0 *\r\n        (keyword'else' * V'block')^-1 *\r\n        keyword'end')\r\n        / self.handle_if +\r\n    (C2'For' * keyword'for' * name * op'=' * V'exp' * op',' * V'exp' *\r\n        (op',' * V'exp')^-1 * keyword'do' * V'block' * keyword'end')\r\n        / self.handle_for + \r\n    (C2'Forin' * keyword'for' * V'namelist' * keyword'in' * V'explist' *\r\n         keyword'do' * V'block' * keyword'end')\r\n         / self.handle_forin +\r\n    (C2'FunctionDef' * keyword'function' * V'funcname' * V'funcbody')\r\n         / self.handle_functiondef +\r\n    (C2'LocalFunctionDef' * keyword'local' * keyword'function' * name *\r\n         V'funcbody')\r\n         / self.handle_localfunctiondef +\r\n    (C2'Local' * keyword'local' * V'namelist' * (op'=' * V'explist')^-1)\r\n         / self.handle_local\r\n  ) / self.handle_stat\r\n\r\n  grammar.laststat =\r\n    (C2'Return' * keyword'return' * V'explist'^-1) / self.handle_return +\r\n    (C2'Break' * keyword'break') / self.handle_break\r\n\r\n  grammar.funcname =\r\n    (C2'FuncName' * name * (op'.' * name)^0 * (cop':' * name)^-1)\r\n        / self.handle_funcname\r\n\r\n  grammar.varlist =\r\n    (C2'VarList' * V'var' * (op',' * V'var')^0) / self.handle_varlist\r\n\r\n  -- modified. note: was left-recursive\r\n  grammar.var =\r\n    (V'prefixexp' * V'endindex') / accum +\r\n    name\r\n\r\n  grammar.namelist =\r\n    (C2'NameList' * name * (',' * name)^0) / self.handle_namelist\r\n\r\n  grammar.explist =\r\n    (C2'ExpList' * (V'exp' * op',')^0 * V'exp') / self.handle_explist\r\n\r\n  --modified\r\n  -- note: exp was left-recursive in binop.\r\n  grammar.exp =\r\n    Ca(V'orfactor' * (C2'Or' * keyword'or' * V'orfactor' / binop_helper)^0)\r\n\r\n  grammar.orfactor =\r\n    Ca(V'andfactor' * (C2'And' * keyword'and' * V'andfactor' / binop_helper)^0)\r\n\r\n  grammar.andfactor =\r\n    Ca(V'comparefactor' * (V'compareop' * V'comparefactor' / binop_helper)^0)\r\n\r\n  grammar.comparefactor =\r\n    (V'concatfactor' * (Cp() * cop'..' * V'concatfactor')^0) / raccum\r\n\r\n  grammar.concatfactor =\r\n    Ca(V'sumfactor' * (V'sumop' * V'sumfactor' / binop_helper)^-0)\r\n\r\n  grammar.sumfactor =\r\n    Ca(V'productfactor' * (V'productop' * V'productfactor' / binop_helper)^0)\r\n\r\n  grammar.productfactor =\r\n    (V'unaryop' * V'productfactor') / self.handle_unop +\r\n    V'unaryfactor'\r\n\r\n  --ok? productfactor usage allows x^-y^z\r\n  grammar.unaryfactor =\r\n    (V'term' * (Cp() * cop'^' * V'productfactor')^0) / raccum\r\n\r\n  grammar.compareop = Cp() * (\r\n    cop'<=' +\r\n    cop'<' +   -- order important\r\n    cop'>=' +\r\n    cop'>' +   -- order important\r\n    cop'~=' +\r\n    cop'=='\r\n  )\r\n\r\n  grammar.sumop = Cp() * (\r\n    cop'+' +\r\n    cop'-'\r\n  )\r\n\r\n  grammar.productop = Cp() * (\r\n    cop'*' +\r\n    cop'/' +\r\n    cop'%'\r\n  )\r\n\r\n  grammar.unaryop = Cp() * (\r\n    Cc'Not' * keyword'not' +\r\n    cop'#' +\r\n    Cc'Neg' * op'-'\r\n  )\r\n\r\n  -- modified\r\n  grammar.term =\r\n    (C2'Nil' * keyword'nil') / self.handle_nil + \r\n    (C2'False' * keyword'false') / self.handle_false +\r\n    (C2'True' * keyword'true') / self.handle_true +\r\n    (C2'Number' * ws^-1 * C(number)) / self.handle_number +\r\n    (C2'String' * ws^-1 * C(luastring)) / self.handle_string +\r\n    (C2'Dots' * op'...') / self.handle_dots +\r\n    V'function' +\r\n    Ca(V'prefixexp' * (V'postfix' / postfix_helper)^0) +   -- modified\r\n    V'tableconstructor'\r\n\r\n  --modified\r\n  grammar.prefixexp =\r\n    name +\r\n    (C2'Parens' * op'(' * V'exp' * op')') / self.handle_parens\r\n\r\n  --modified\r\n  grammar.postfixcall =\r\n    C2'Call' * V'args' +\r\n    C2'ColonCall' * op':' *\r\n        ((C2'String' * name_simple) / self.handle_string) * V'args'\r\n\r\n  -- modified\r\n  grammar.postfixindex =\r\n    C2'Index' * op'[' * V'exp' * op']' +\r\n    C2'IndexShort' * op'.' * ((C2'String' * name_simple) / self.handle_string)\r\n\r\n  --modified\r\n  grammar.postfix =\r\n    V'postfixcall' +\r\n    V'postfixindex'\r\n\r\n  --modified\r\n  grammar.endcall =\r\n    (V'postfix' * #V'postfix')^0 * V'postfixcall'\r\n\r\n  --modified\r\n  grammar.endindex =\r\n    (V'postfix' * #V'postfix')^0 * V'postfixindex'\r\n\r\n  -- modified (note: was left recusive)\r\n  grammar.functioncall =\r\n    (Ca(V'prefixexp' * (V'postfix' / postfix_helper * #V'postfix')^0) * V'postfixcall') / postfix_helper\r\n\r\n  grammar.args = (\r\n    op'(' * (grammar.explist + C2'ExpList' / self.handle_explist) * op')' + -- improve style?\r\n    (C2'ExpList' * V'tableconstructor') / self.handle_explist +  -- improve style?\r\n      -- improve style?\r\n    (C2'ExpList' * (C2'String' * ws^-1 * C(luastring) / self.handle_string)) /\r\n        self.handle_explist\r\n  ) / self.handle_args\r\n\r\n  grammar['function'] = (\r\n    C2'Function' * keyword'function' * V'funcbody'\r\n  ) / self.handle_function\r\n\r\n  grammar.funcbody =  -- improve style?\r\n     op'(' * (V'parlist' + C2'NameList' / self.handle_namelist) * op')'\r\n        * V'block' * keyword'end'\r\n\r\n  grammar.parlist = (C2'NameList' * (\r\n    name * (',' * name)^0\r\n         * (op',' * (C2'VARARG' * op'...') / self.handle_vararg)^-1 +\r\n    (C2'VARARG' * op'...') / self.handle_vararg\r\n  )) / self.handle_namelist\r\n\r\n  grammar.tableconstructor =\r\n    (C2'Table' * op'{' * V'fieldlist'^-1 * op'}') / self.handle_table\r\n\r\n  grammar.fieldlist =\r\n    V'field' * (V'fieldsep' * V'field')^0 * V'fieldsep'^-1\r\n\r\n  --FIX: handler call?\r\n  grammar.field = Cp() * (\r\n    op'[' * V'exp' * op']' * op'=' * V'exp' +\r\n    ((C2'String' * name_simple) / self.handle_string * op'=' * V'exp') +\r\n    Cc(true) * V'exp'\r\n  )\r\n\r\n  grammar.fieldsep =\r\n    op',' + op';'\r\n\r\n  self.grammar = grammar\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local grammar = {'chunk'}",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local name_simple =\r\n    ws^-1 * C(idsafe * (idsafe + digit)^0 - anykeyword * -idsafe)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local name =\r\n    (C2'Id' * name_simple)\r\n    / self.handle_identifier",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local function keyword(name) return ws^-1 * P(name) * -idsafe end",
    "type": "statement:localfunction"
  }, {
    "id": 60,
    "text": "local function op(name) return ws^-1 * P(name) end",
    "type": "statement:localfunction"
  }, {
    "id": 61,
    "text": "local function cop(name) return ws^-1 * C(P(name)) end",
    "type": "statement:localfunction"
  }, {
    "id": 62,
    "text": "local function binop_helper(a, pos, op, b)\r\n    return self.handle_binop(pos, op, a, b)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 63,
    "text": "local handle = {\r\n    Index = self.handle_index,\r\n    IndexShort = self.handle_indexshort,\r\n    Call = self.handle_call,\r\n    ColonCall = self.handle_coloncall\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local function accum(a, pos, op, b, ...)\r\n    if op == nil then\r\n      return a\r\n    elseif op == \"ColonCall\" then\r\n      return accum(handle[op](pos, op, a, b, select(1, ...)), select(2, ...))\r\n    else\r\n      return accum((handle[op] or self.handle_binop)(pos, op, a, b), ...)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 65,
    "text": "if op == nil then\r\n      return a\r\n    elseif op == \"ColonCall\" then\r\n      return accum(handle[op](pos, op, a, b, select(1, ...)), select(2, ...))\r\n    else\r\n      return accum((handle[op] or self.handle_binop)(pos, op, a, b), ...)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local function postfix_helper(a, pos, op, ...)\r\n    return handle[op](pos, op, a, ...)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 67,
    "text": "local function raccum(a, pos, op, b, ...)\r\n    if op == nil then\r\n      return a\r\n    else\r\n      return self.handle_binop(pos, op, a, raccum(b, ...))\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 68,
    "text": "if op == nil then\r\n      return a\r\n    else\r\n      return self.handle_binop(pos, op, a, raccum(b, ...))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local function handle_unrecognized(s, i)\r\n    local nline, ncol = M.get_linecol(s, i)\r\n    error(string.format(\"At line %d col %d unrecognized [%s]\",\r\n                        nline, ncol, short(s,i)))\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 70,
    "text": "local nline, ncol = M.get_linecol(s, i)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "error(string.format(\"At line %d col %d unrecognized [%s]\",\r\n                        nline, ncol, short(s,i)))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "grammar.chunk = (\r\n    V'block' *\r\n    (ws^-1 * #P(1) *\r\n     P(handle_unrecognized))^-1\r\n) / function(t) return ASTNode(t) end",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "grammar.block = (\r\n  --    P(function(s,i) print(s:sub(i)) end) +\r\n      C2'Block' * (V'stat' * op';'^-1)^0 * (V'laststat' * op';'^-1)^-1\r\n  ) / self.handle_block",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "grammar.stat = (\r\n    (C2'Assign' * V'varlist' * op'=' * V'explist')\r\n        / self.handle_assign +\r\n    V'functioncall' +\r\n    (C2'Do' * keyword'do' * V'block' * keyword'end')\r\n        / self.handle_do +\r\n    (C2'While' * keyword'while' * V'exp' * keyword'do' *\r\n        V'block' * keyword'end')\r\n        / self.handle_while +\r\n    (C2'Repeat' * keyword'repeat' * V'block' * keyword'until' * V'exp')\r\n        / self.handle_repeat +\r\n    (C2'If' * keyword'if' * V'exp' * keyword'then' * V'block' *\r\n        (keyword'elseif' * V'exp' * keyword'then' * V'block')^0 *\r\n        (keyword'else' * V'block')^-1 *\r\n        keyword'end')\r\n        / self.handle_if +\r\n    (C2'For' * keyword'for' * name * op'=' * V'exp' * op',' * V'exp' *\r\n        (op',' * V'exp')^-1 * keyword'do' * V'block' * keyword'end')\r\n        / self.handle_for + \r\n    (C2'Forin' * keyword'for' * V'namelist' * keyword'in' * V'explist' *\r\n         keyword'do' * V'block' * keyword'end')\r\n         / self.handle_forin +\r\n    (C2'FunctionDef' * keyword'function' * V'funcname' * V'funcbody')\r\n         / self.handle_functiondef +\r\n    (C2'LocalFunctionDef' * keyword'local' * keyword'function' * name *\r\n         V'funcbody')\r\n         / self.handle_localfunctiondef +\r\n    (C2'Local' * keyword'local' * V'namelist' * (op'=' * V'explist')^-1)\r\n         / self.handle_local\r\n  ) / self.handle_stat",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "grammar.laststat =\r\n    (C2'Return' * keyword'return' * V'explist'^-1) / self.handle_return +\r\n    (C2'Break' * keyword'break') / self.handle_break",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "grammar.funcname =\r\n    (C2'FuncName' * name * (op'.' * name)^0 * (cop':' * name)^-1)\r\n        / self.handle_funcname",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "grammar.varlist =\r\n    (C2'VarList' * V'var' * (op',' * V'var')^0) / self.handle_varlist",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "grammar.var =\r\n    (V'prefixexp' * V'endindex') / accum +\r\n    name",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "grammar.namelist =\r\n    (C2'NameList' * name * (',' * name)^0) / self.handle_namelist",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "grammar.explist =\r\n    (C2'ExpList' * (V'exp' * op',')^0 * V'exp') / self.handle_explist",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "grammar.exp =\r\n    Ca(V'orfactor' * (C2'Or' * keyword'or' * V'orfactor' / binop_helper)^0)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "grammar.orfactor =\r\n    Ca(V'andfactor' * (C2'And' * keyword'and' * V'andfactor' / binop_helper)^0)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "grammar.andfactor =\r\n    Ca(V'comparefactor' * (V'compareop' * V'comparefactor' / binop_helper)^0)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "grammar.comparefactor =\r\n    (V'concatfactor' * (Cp() * cop'..' * V'concatfactor')^0) / raccum",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "grammar.concatfactor =\r\n    Ca(V'sumfactor' * (V'sumop' * V'sumfactor' / binop_helper)^-0)",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "grammar.sumfactor =\r\n    Ca(V'productfactor' * (V'productop' * V'productfactor' / binop_helper)^0)",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "grammar.productfactor =\r\n    (V'unaryop' * V'productfactor') / self.handle_unop +\r\n    V'unaryfactor'",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "grammar.unaryfactor =\r\n    (V'term' * (Cp() * cop'^' * V'productfactor')^0) / raccum",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "grammar.compareop = Cp() * (\r\n    cop'<=' +\r\n    cop'<' +   -- order important\r\n    cop'>=' +\r\n    cop'>' +   -- order important\r\n    cop'~=' +\r\n    cop'=='\r\n  )",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "grammar.sumop = Cp() * (\r\n    cop'+' +\r\n    cop'-'\r\n  )",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "grammar.productop = Cp() * (\r\n    cop'*' +\r\n    cop'/' +\r\n    cop'%'\r\n  )",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "grammar.unaryop = Cp() * (\r\n    Cc'Not' * keyword'not' +\r\n    cop'#' +\r\n    Cc'Neg' * op'-'\r\n  )",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "grammar.term =\r\n    (C2'Nil' * keyword'nil') / self.handle_nil + \r\n    (C2'False' * keyword'false') / self.handle_false +\r\n    (C2'True' * keyword'true') / self.handle_true +\r\n    (C2'Number' * ws^-1 * C(number)) / self.handle_number +\r\n    (C2'String' * ws^-1 * C(luastring)) / self.handle_string +\r\n    (C2'Dots' * op'...') / self.handle_dots +\r\n    V'function' +\r\n    Ca(V'prefixexp' * (V'postfix' / postfix_helper)^0) +   -- modified\r\n    V'tableconstructor'",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "grammar.prefixexp =\r\n    name +\r\n    (C2'Parens' * op'(' * V'exp' * op')') / self.handle_parens",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "grammar.postfixcall =\r\n    C2'Call' * V'args' +\r\n    C2'ColonCall' * op':' *\r\n        ((C2'String' * name_simple) / self.handle_string) * V'args'",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "grammar.postfixindex =\r\n    C2'Index' * op'[' * V'exp' * op']' +\r\n    C2'IndexShort' * op'.' * ((C2'String' * name_simple) / self.handle_string)",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "grammar.postfix =\r\n    V'postfixcall' +\r\n    V'postfixindex'",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "grammar.endcall =\r\n    (V'postfix' * #V'postfix')^0 * V'postfixcall'",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "grammar.endindex =\r\n    (V'postfix' * #V'postfix')^0 * V'postfixindex'",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "grammar.functioncall =\r\n    (Ca(V'prefixexp' * (V'postfix' / postfix_helper * #V'postfix')^0) * V'postfixcall') / postfix_helper",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "grammar.args = (\r\n    op'(' * (grammar.explist + C2'ExpList' / self.handle_explist) * op')' + -- improve style?\r\n    (C2'ExpList' * V'tableconstructor') / self.handle_explist +  -- improve style?\r\n      -- improve style?\r\n    (C2'ExpList' * (C2'String' * ws^-1 * C(luastring) / self.handle_string)) /\r\n        self.handle_explist\r\n  ) / self.handle_args",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "grammar['function'] = (\r\n    C2'Function' * keyword'function' * V'funcbody'\r\n  ) / self.handle_function",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "grammar.funcbody =  -- improve style?\r\n     op'(' * (V'parlist' + C2'NameList' / self.handle_namelist) * op')'\r\n        * V'block' * keyword'end'",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "grammar.parlist = (C2'NameList' * (\r\n    name * (',' * name)^0\r\n         * (op',' * (C2'VARARG' * op'...') / self.handle_vararg)^-1 +\r\n    (C2'VARARG' * op'...') / self.handle_vararg\r\n  )) / self.handle_namelist",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "grammar.tableconstructor =\r\n    (C2'Table' * op'{' * V'fieldlist'^-1 * op'}') / self.handle_table",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "grammar.fieldlist =\r\n    V'field' * (V'fieldsep' * V'field')^0 * V'fieldsep'^-1",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "grammar.field = Cp() * (\r\n    op'[' * V'exp' * op']' * op'=' * V'exp' +\r\n    ((C2'String' * name_simple) / self.handle_string * op'=' * V'exp') +\r\n    Cc(true) * V'exp'\r\n  )",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "grammar.fieldsep =\r\n    op',' + op';'",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "self.grammar = grammar",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "local function keyword(name) return ws^-1 * P(name) * -idsafe end",
    "type": "function"
  }, {
    "id": 112,
    "text": "local function op(name) return ws^-1 * P(name) end",
    "type": "function"
  }, {
    "id": 113,
    "text": "local function cop(name) return ws^-1 * C(P(name)) end",
    "type": "function"
  }, {
    "id": 114,
    "text": "local function binop_helper(a, pos, op, b)\r\n    return self.handle_binop(pos, op, a, b)\r\n  end",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "local function accum(a, pos, op, b, ...)\r\n    if op == nil then\r\n      return a\r\n    elseif op == \"ColonCall\" then\r\n      return accum(handle[op](pos, op, a, b, select(1, ...)), select(2, ...))\r\n    else\r\n      return accum((handle[op] or self.handle_binop)(pos, op, a, b), ...)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "local function postfix_helper(a, pos, op, ...)\r\n    return handle[op](pos, op, a, ...)\r\n  end",
    "type": "function"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "local function raccum(a, pos, op, b, ...)\r\n    if op == nil then\r\n      return a\r\n    else\r\n      return self.handle_binop(pos, op, a, raccum(b, ...))\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function handle_unrecognized(s, i)\r\n    local nline, ncol = M.get_linecol(s, i)\r\n    error(string.format(\"At line %d col %d unrecognized [%s]\",\r\n                        nline, ncol, short(s,i)))\r\n  end",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function(t) return ASTNode(t) end",
    "type": "function"
  }, {
    "id": 125,
    "text": "local function generic_handle(pos, ...)\r\n    return ASTNode {pos=pos, ...}\r\n  end",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "local function identity_handle(...) return ... end",
    "type": "function"
  }, {
    "id": 128,
    "text": "local function eval_handle(pos, op, o)\r\n    if o:match(\"[%[%\\\"%\\']\") then\r\n      o = assert(loadstring('return ' .. o))()\r\n    end\r\n    return generic_handle(pos, op, o)\r\n  end",
    "type": "function"
  }, {
    "id": 129,
    "text": "if o:match(\"[%[%\\\"%\\']\") then\r\n      o = assert(loadstring('return ' .. o))()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "o = assert(loadstring('return ' .. o))()",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function(t)\r\n    --print(rtostring(t))\r\n    return t\r\n  end",
    "type": "function"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function(pos, id, ...)\r\n    local t = {pos=pos,id}\r\n    local i = 0\r\n    local n = select('#', ...)\r\n    for k=1,n,3 do\r\n      local pos2,k,v = select(k, ...)\r\n      if k == true then\r\n        i = i + 1\r\n        k = ASTNode{pos=pos2, 'Number', i} -- call handle_number?\r\n      end\r\n      t[#t+1] = ASTNode{pos=pos2, 'Field', k, v}\r\n    end\r\n    return ASTNode(t)\r\n  end",
    "type": "function"
  }, {
    "id": 135,
    "text": "local t = {pos=pos,id}",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local n = select('#', ...)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "for k=1,n,3 do\r\n      local pos2,k,v = select(k, ...)\r\n      if k == true then\r\n        i = i + 1\r\n        k = ASTNode{pos=pos2, 'Number', i} -- call handle_number?\r\n      end\r\n      t[#t+1] = ASTNode{pos=pos2, 'Field', k, v}\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 139,
    "text": "local pos2,k,v = select(k, ...)",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "if k == true then\r\n        i = i + 1\r\n        k = ASTNode{pos=pos2, 'Number', i} -- call handle_number?\r\n      end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "k = ASTNode{pos=pos2, 'Number', i}",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "t[#t+1] = ASTNode{pos=pos2, 'Field', k, v}",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function(pos, id, o)\r\n    return generic_handle(pos, id, tonumber(o))\r\n  end",
    "type": "function"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function(pos, ...) return generic_handle(pos, 'Op', ...) end",
    "type": "function"
  }, {
    "id": 148,
    "text": "function(pos, ...) return generic_handle(pos, 'Op', ...) end",
    "type": "function"
  }, {
    "id": 149,
    "text": "function(pos, op, ...) return generic_handle(pos, \"Index\", ...) end",
    "type": "function"
  }, {
    "id": 150,
    "text": "local function mark_linecols(ast, s, linecol)\r\n  if type(ast) == \"table\" then\r\n    ast.nline, ast.ncol = linecol(s, ast.pos)\r\n    for i,ast2 in ipairs(ast) do\r\n      mark_linecols(ast2, s, linecol)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "if type(ast) == \"table\" then\r\n    ast.nline, ast.ncol = linecol(s, ast.pos)\r\n    for i,ast2 in ipairs(ast) do\r\n      mark_linecols(ast2, s, linecol)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "ast.nline, ast.ncol = linecol(s, ast.pos)",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "for i,ast2 in ipairs(ast) do\r\n      mark_linecols(ast2, s, linecol)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 154,
    "text": "mark_linecols(ast2, s, linecol)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function M:parse(o)\r\n  local text\r\n  if io.type(o) then\r\n    text = o:read\"*a\"\r\n  elseif o == nil then\r\n    text = io.read\"*a\"\r\n  elseif type(o) == \"table\" then\r\n    local filename = assert(o[1], \"table must contain filename\")\r\n    local fh = assert(io.open(filename))\r\n    text = fh:read\"*a\"\r\n    fh:close()\r\n  elseif type(o) == \"string\" then\r\n    text = o\r\n  else\r\n    error(tostring(o) .. \" not a recognized type\", 2)\r\n  end\r\n\r\n  text = text:gsub(\"^#[^\\n]*\\n\", \"\", 1)  -- remove any shebang line\r\n                                         --FIX: and increase line number\r\n\r\n  self.s = text\r\n  \r\n  local result = lpeg.match(self.grammar, text)\r\n\r\n  -- add line numbers/columns\r\n  local ipos, nline, ncol = 0\r\n  local function linecol(s, i)\r\n    ipos, nline, ncol = M.update_linecol(s, i, ipos, nline, ncol)\r\n    return nline, ncol\r\n  end\r\n  mark_linecols(result, text, linecol)\r\n\r\n\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "local text",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if io.type(o) then\r\n    text = o:read\"*a\"\r\n  elseif o == nil then\r\n    text = io.read\"*a\"\r\n  elseif type(o) == \"table\" then\r\n    local filename = assert(o[1], \"table must contain filename\")\r\n    local fh = assert(io.open(filename))\r\n    text = fh:read\"*a\"\r\n    fh:close()\r\n  elseif type(o) == \"string\" then\r\n    text = o\r\n  else\r\n    error(tostring(o) .. \" not a recognized type\", 2)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "text = o:read\"*a\"",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "text = io.read\"*a\"",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "local filename = assert(o[1], \"table must contain filename\")",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "local fh = assert(io.open(filename))",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "text = fh:read\"*a\"",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "text = o",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "error(tostring(o) .. \" not a recognized type\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "text = text:gsub(\"^#[^\\n]*\\n\", \"\", 1)",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "self.s = text",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "local result = lpeg.match(self.grammar, text)",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "local ipos, nline, ncol = 0",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "local function linecol(s, i)\r\n    ipos, nline, ncol = M.update_linecol(s, i, ipos, nline, ncol)\r\n    return nline, ncol\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 172,
    "text": "ipos, nline, ncol = M.update_linecol(s, i, ipos, nline, ncol)",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "mark_linecols(result, text, linecol)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "local function linecol(s, i)\r\n    ipos, nline, ncol = M.update_linecol(s, i, ipos, nline, ncol)\r\n    return nline, ncol\r\n  end",
    "type": "function"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function(class, t) -- constructor\r\n  if not t.tag then\r\n    t.tag = table.remove(t, 1)\r\n  end\r\n  return setmetatable(t, ASTNode)\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "if not t.tag then\r\n    t.tag = table.remove(t, 1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "t.tag = table.remove(t, 1)",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "function(s,i)print(\"DEBUG\", short(s,i)) return i end",
    "type": "function"
  }, {
    "id": 182,
    "text": "print(\"DEBUG\", short(s,i))",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "function(input, index)\r\n   local level = input:match('^%[(=*)%[', index)\r\n   if level then\r\n      local _, stop = input:find(']' .. level .. ']', index, true)\r\n      if stop then return stop + 1 end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "local level = input:match('^%[(=*)%[', index)",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "if level then\r\n      local _, stop = input:find(']' .. level .. ']', index, true)\r\n      if stop then return stop + 1 end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "local _, stop = input:find(']' .. level .. ']', index, true)",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "if stop then return stop + 1 end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function()\r\n  local self = setmetatable({}, M)\r\n\r\n  local function generic_handle(pos, ...)\r\n    return ASTNode {pos=pos, ...}\r\n  end\r\n  local function identity_handle(...) return ... end\r\n  local function eval_handle(pos, op, o)\r\n    if o:match(\"[%[%\\\"%\\']\") then\r\n      o = assert(loadstring('return ' .. o))()\r\n    end\r\n    return generic_handle(pos, op, o)\r\n  end\r\n\r\n  self.handle_stat = function(t)\r\n    --print(rtostring(t))\r\n    return t\r\n  end\r\n  self.handle_table = function(pos, id, ...)\r\n    local t = {pos=pos,id}\r\n    local i = 0\r\n    local n = select('#', ...)\r\n    for k=1,n,3 do\r\n      local pos2,k,v = select(k, ...)\r\n      if k == true then\r\n        i = i + 1\r\n        k = ASTNode{pos=pos2, 'Number', i} -- call handle_number?\r\n      end\r\n      t[#t+1] = ASTNode{pos=pos2, 'Field', k, v}\r\n    end\r\n    return ASTNode(t)\r\n  end\r\n  self.handle_number = function(pos, id, o)\r\n    return generic_handle(pos, id, tonumber(o))\r\n  end\r\n  self.handle_string = eval_handle\r\n  self.handle_nil = generic_handle\r\n  self.handle_true = generic_handle\r\n  self.handle_false = generic_handle\r\n  self.handle_dots = generic_handle\r\n  self.handle_binop = function(pos, ...) return generic_handle(pos, 'Op', ...) end\r\n  self.handle_unop = function(pos, ...) return generic_handle(pos, 'Op', ...) end\r\n  self.handle_parens = generic_handle\r\n  self.handle_function = generic_handle\r\n  self.handle_index = generic_handle\r\n  self.handle_indexshort =\r\n      function(pos, op, ...) return generic_handle(pos, \"Index\", ...) end\r\n  self.handle_call = generic_handle\r\n  self.handle_coloncall = generic_handle\r\n  self.handle_identifier = generic_handle\r\n  self.handle_block = generic_handle\r\n  self.handle_local = generic_handle\r\n  self.handle_localfunctiondef = generic_handle\r\n  self.handle_functiondef = generic_handle\r\n  self.handle_assign = generic_handle\r\n  self.handle_do = generic_handle\r\n  self.handle_while = generic_handle\r\n  self.handle_repeat = generic_handle\r\n  self.handle_if = generic_handle\r\n  self.handle_for = generic_handle\r\n  self.handle_forin = generic_handle\r\n  self.handle_explist = generic_handle\r\n  self.handle_varlist = generic_handle\r\n  self.handle_namelist = generic_handle\r\n  self.handle_break = generic_handle\r\n  self.handle_return = generic_handle\r\n  self.handle_funcname = generic_handle\r\n  self.handle_vararg = generic_handle\r\n\r\n  self.handle_args = identity_handle\r\n\r\n  build_grammar(self)\r\n\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "local self = setmetatable({}, M)",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "self.handle_stat = function(t)\r\n    --print(rtostring(t))\r\n    return t\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "self.handle_table = function(pos, id, ...)\r\n    local t = {pos=pos,id}\r\n    local i = 0\r\n    local n = select('#', ...)\r\n    for k=1,n,3 do\r\n      local pos2,k,v = select(k, ...)\r\n      if k == true then\r\n        i = i + 1\r\n        k = ASTNode{pos=pos2, 'Number', i} -- call handle_number?\r\n      end\r\n      t[#t+1] = ASTNode{pos=pos2, 'Field', k, v}\r\n    end\r\n    return ASTNode(t)\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "self.handle_number = function(pos, id, o)\r\n    return generic_handle(pos, id, tonumber(o))\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "self.handle_string = eval_handle",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "self.handle_nil = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "self.handle_true = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "self.handle_false = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "self.handle_dots = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "self.handle_binop = function(pos, ...) return generic_handle(pos, 'Op', ...) end",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "self.handle_unop = function(pos, ...) return generic_handle(pos, 'Op', ...) end",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "self.handle_parens = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "self.handle_function = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "self.handle_index = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "self.handle_indexshort =\r\n      function(pos, op, ...) return generic_handle(pos, \"Index\", ...) end",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "self.handle_call = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "self.handle_coloncall = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "self.handle_identifier = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "self.handle_block = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "self.handle_local = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "self.handle_localfunctiondef = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "self.handle_functiondef = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "self.handle_assign = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "self.handle_do = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "self.handle_while = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "self.handle_repeat = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "self.handle_if = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "self.handle_for = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "self.handle_forin = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "self.handle_explist = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "self.handle_varlist = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 221,
    "text": "self.handle_namelist = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "self.handle_break = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 223,
    "text": "self.handle_return = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "self.handle_funcname = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 225,
    "text": "self.handle_vararg = generic_handle",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "self.handle_args = identity_handle",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "build_grammar(self)",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "",
    "type": "function container"
  }, {
    "id": 230,
    "text": "function M.ast_to_code(ast)\r\n  return convert(ast)\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "function M.init(env)\r\n  function env.MACRO.TYPE(type_ast)\r\n    assert(type_ast.last)\r\n    local mtype = type_ast[1]\r\n    type_ast.last.stype = mtype\r\n  end\r\n\r\n  function env.MACRO.TYPED(obj_ast)\r\n    obj_ast.typed = true\r\n    return obj_ast\r\n  end\r\n\r\n  env.MACRO.NUMBER = TNumber.bind\r\n  env.MACRO.STRING = TString.bind\r\nend",
    "type": "function"
  }, {
    "id": 232,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 233,
    "text": "match",
    "type": "global function"
  }, {
    "id": 234,
    "text": "S",
    "type": "global function"
  }, {
    "id": 235,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 236,
    "text": "R",
    "type": "global function"
  }, {
    "id": 237,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 238,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 239,
    "text": "type",
    "type": "global function"
  }, {
    "id": 240,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 241,
    "text": "print",
    "type": "global function"
  }, {
    "id": 242,
    "text": "V",
    "type": "global function"
  }, {
    "id": 243,
    "text": "ASTNode",
    "type": "global function"
  }, {
    "id": 244,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 245,
    "text": "Cp",
    "type": "global function"
  }, {
    "id": 246,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 247,
    "text": "read",
    "type": "global function"
  }, {
    "id": 248,
    "text": "Ca",
    "type": "global function"
  }, {
    "id": 249,
    "text": "C",
    "type": "global function"
  }, {
    "id": 250,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 251,
    "text": "require",
    "type": "global function"
  }, {
    "id": 252,
    "text": "type",
    "type": "global function"
  }, {
    "id": 253,
    "text": "open",
    "type": "global function"
  }, {
    "id": 254,
    "text": "error",
    "type": "global function"
  }, {
    "id": 255,
    "text": "M",
    "type": "global function"
  }, {
    "id": 256,
    "text": "handle[op]",
    "type": "global function"
  }, {
    "id": 257,
    "text": "format",
    "type": "global function"
  }, {
    "id": 258,
    "text": "P",
    "type": "global function"
  }, {
    "id": 259,
    "text": "Cc",
    "type": "global function"
  }, {
    "id": 260,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 261,
    "text": "select",
    "type": "global function"
  }, {
    "id": 262,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 263,
    "text": "",
    "type": "local variable"
  }, {
    "id": 264,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 265,
    "text": "",
    "type": "local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 267,
    "text": "",
    "type": "variable container"
  }, {
    "id": 268,
    "text": "",
    "type": "require container"
  }, {
    "id": 269,
    "text": "",
    "type": "local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "n/a"
  }, {
    "id": 271,
    "text": "",
    "type": "local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "n/a"
  }, {
    "id": 273,
    "text": "",
    "type": "local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "n/a"
  }, {
    "id": 275,
    "text": "",
    "type": "local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "n/a"
  }, {
    "id": 277,
    "text": "",
    "type": "local variable"
  }, {
    "id": 278,
    "text": "",
    "type": "n/a"
  }, {
    "id": 279,
    "text": "",
    "type": "local variable"
  }, {
    "id": 280,
    "text": "",
    "type": "n/a"
  }, {
    "id": 281,
    "text": "",
    "type": "local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "n/a"
  }, {
    "id": 283,
    "text": "",
    "type": "local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 285,
    "text": "",
    "type": "local variable"
  }, {
    "id": 286,
    "text": "",
    "type": "n/a"
  }, {
    "id": 287,
    "text": "",
    "type": "local variable"
  }, {
    "id": 288,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 289,
    "text": "",
    "type": "local variable"
  }, {
    "id": 290,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "n/a"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "unop"
  }, {
    "id": 295,
    "text": "",
    "type": "local variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "local variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  }, {
    "id": 301,
    "text": "",
    "type": "local variable"
  }, {
    "id": 302,
    "text": "",
    "type": "n/a"
  }, {
    "id": 303,
    "text": "",
    "type": "local variable"
  }, {
    "id": 304,
    "text": "",
    "type": "n/a"
  }, {
    "id": 305,
    "text": "",
    "type": "local variable"
  }, {
    "id": 306,
    "text": "",
    "type": "n/a"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "n/a"
  }, {
    "id": 309,
    "text": "",
    "type": "local variable"
  }, {
    "id": 310,
    "text": "",
    "type": "n/a"
  }, {
    "id": 311,
    "text": "",
    "type": "local variable"
  }, {
    "id": 312,
    "text": "",
    "type": "n/a"
  }, {
    "id": 313,
    "text": "",
    "type": "local variable"
  }, {
    "id": 314,
    "text": "",
    "type": "n/a"
  }, {
    "id": 315,
    "text": "",
    "type": "local variable"
  }, {
    "id": 316,
    "text": "",
    "type": "n/a"
  }, {
    "id": 317,
    "text": "",
    "type": "local variable"
  }, {
    "id": 318,
    "text": "",
    "type": "n/a"
  }, {
    "id": 319,
    "text": "",
    "type": "local variable"
  }, {
    "id": 320,
    "text": "",
    "type": "n/a"
  }, {
    "id": 321,
    "text": "",
    "type": "local variable"
  }, {
    "id": 322,
    "text": "",
    "type": "n/a"
  }, {
    "id": 323,
    "text": "",
    "type": "local variable"
  }, {
    "id": 324,
    "text": "",
    "type": "n/a"
  }, {
    "id": 325,
    "text": "",
    "type": "local variable"
  }, {
    "id": 326,
    "text": "",
    "type": "n/a"
  }, {
    "id": 327,
    "text": "",
    "type": "global variable"
  }, {
    "id": 328,
    "text": "",
    "type": "n/a"
  }, {
    "id": 329,
    "text": "",
    "type": "global variable"
  }, {
    "id": 330,
    "text": "",
    "type": "n/a"
  }, {
    "id": 331,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 332,
    "text": "",
    "type": "interface container"
  }, {
    "id": 333,
    "text": "",
    "type": "interface"
  }, {
    "id": 334,
    "text": "",
    "type": "local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 336,
    "text": "",
    "type": "local variable"
  }, {
    "id": 337,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 338,
    "text": "",
    "type": "require local variable"
  } ]
}