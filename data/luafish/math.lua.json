{
  "_filename": "math.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luafish/lib/luafish/math.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 19,
    "label": "has",
    "to": 28
  }, {
    "from": 19,
    "label": "has",
    "to": 29
  }, {
    "from": 19,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 19,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 31
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 36,
    "label": "has",
    "to": 44
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 47
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 47
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 8
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 27
  }, {
    "from": 56,
    "label": "has",
    "to": 28
  }, {
    "from": 56,
    "label": "has",
    "to": 29
  }, {
    "from": 56,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 56,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 31
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 36,
    "label": "has",
    "to": 44
  }, {
    "from": 56,
    "label": "has",
    "to": 8
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 19,
    "label": "calls",
    "to": 10
  }, {
    "from": 10,
    "label": "calls",
    "to": 3
  }, {
    "from": 10,
    "label": "calls",
    "to": 3
  }, {
    "from": 10,
    "label": "calls",
    "to": 89
  }, {
    "from": 19,
    "label": "calls",
    "to": 89
  }, {
    "from": 19,
    "label": "calls",
    "to": 89
  }, {
    "from": 19,
    "label": "calls",
    "to": 89
  }, {
    "from": 53,
    "label": "calls",
    "to": 89
  }, {
    "from": 10,
    "label": "calls",
    "to": 100
  }, {
    "from": 10,
    "label": "calls",
    "to": 100
  }, {
    "from": 46,
    "label": "calls",
    "to": 91
  }, {
    "from": 49,
    "label": "calls",
    "to": 91
  }, {
    "from": 58,
    "label": "calls",
    "to": 91
  }, {
    "from": 53,
    "label": "calls",
    "to": 90
  }, {
    "from": 58,
    "label": "calls",
    "to": 94
  }, {
    "from": 19,
    "label": "calls",
    "to": 96
  }, {
    "from": 3,
    "label": "calls",
    "to": 95
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 19,
    "label": "calls",
    "to": 101
  }, {
    "from": 19,
    "label": "calls",
    "to": 92
  }, {
    "from": 58,
    "label": "calls",
    "to": 92
  }, {
    "from": 58,
    "label": "calls",
    "to": 92
  }, {
    "from": 19,
    "label": "calls",
    "to": 98
  }, {
    "from": 19,
    "label": "calls",
    "to": 99
  }, {
    "from": 19,
    "label": "calls",
    "to": 99
  }, {
    "from": 19,
    "label": "calls",
    "to": 99
  }, {
    "from": 19,
    "label": "calls",
    "to": 99
  }, {
    "from": 19,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "contains",
    "to": 58
  }, {
    "from": 58,
    "label": "declares",
    "to": 3
  }, {
    "from": 58,
    "label": "declares",
    "to": 10
  }, {
    "from": 58,
    "label": "declares",
    "to": 19
  }, {
    "from": 58,
    "label": "declares",
    "to": 46
  }, {
    "from": 58,
    "label": "declares",
    "to": 49
  }, {
    "from": 58,
    "label": "declares",
    "to": 51
  }, {
    "from": 58,
    "label": "declares",
    "to": 53
  }, {
    "from": 58,
    "label": "declares",
    "to": 56
  }, {
    "from": 2,
    "label": "declares",
    "to": 97
  }, {
    "from": 2,
    "label": "contains",
    "to": 102
  }, {
    "from": 2,
    "label": "contains",
    "to": 103
  }, {
    "from": 102,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 102,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 102,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 102,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 102,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 102,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 102,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 102,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 102,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 102,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 102,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 102,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 102,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 102,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 102,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 102,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 102,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 102,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 102,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 102,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 102,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 102,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 102,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 102,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 102,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 102,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 102,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 102,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 102,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 102,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 103,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 165
  }, {
    "from": 106,
    "label": "represents",
    "to": 166
  }, {
    "from": 165,
    "label": "provides",
    "to": 166
  }, {
    "from": 108,
    "label": "contains",
    "to": 51
  }, {
    "from": 167,
    "label": "contains",
    "to": 51
  }, {
    "from": 106,
    "label": "contains",
    "to": 53
  }, {
    "from": 108,
    "label": "contains",
    "to": 59
  }, {
    "from": 108,
    "label": "contains",
    "to": 60
  }, {
    "from": 108,
    "label": "contains",
    "to": 61
  }, {
    "from": 108,
    "label": "contains",
    "to": 62
  }, {
    "from": 108,
    "label": "contains",
    "to": 63
  }, {
    "from": 108,
    "label": "contains",
    "to": 64
  }, {
    "from": 108,
    "label": "contains",
    "to": 65
  }, {
    "from": 108,
    "label": "contains",
    "to": 66
  }, {
    "from": 108,
    "label": "contains",
    "to": 67
  }, {
    "from": 108,
    "label": "contains",
    "to": 68
  }, {
    "from": 108,
    "label": "contains",
    "to": 69
  }, {
    "from": 108,
    "label": "contains",
    "to": 70
  }, {
    "from": 108,
    "label": "contains",
    "to": 71
  }, {
    "from": 108,
    "label": "contains",
    "to": 72
  }, {
    "from": 108,
    "label": "contains",
    "to": 73
  }, {
    "from": 108,
    "label": "contains",
    "to": 74
  }, {
    "from": 108,
    "label": "contains",
    "to": 75
  }, {
    "from": 108,
    "label": "contains",
    "to": 76
  }, {
    "from": 108,
    "label": "contains",
    "to": 77
  }, {
    "from": 108,
    "label": "contains",
    "to": 78
  }, {
    "from": 108,
    "label": "contains",
    "to": 79
  }, {
    "from": 108,
    "label": "contains",
    "to": 80
  }, {
    "from": 108,
    "label": "contains",
    "to": 81
  }, {
    "from": 108,
    "label": "contains",
    "to": 82
  }, {
    "from": 108,
    "label": "contains",
    "to": 83
  }, {
    "from": 108,
    "label": "contains",
    "to": 84
  }, {
    "from": 108,
    "label": "contains",
    "to": 85
  }, {
    "from": 108,
    "label": "contains",
    "to": 86
  }, {
    "from": 108,
    "label": "contains",
    "to": 87
  }, {
    "from": 108,
    "label": "contains",
    "to": 88
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "macro",
    "type": "module"
  }, {
    "id": 2,
    "text": "math",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function check_range(a, p)\r\n  if type(p) == 'table' and a.value then\r\n    local min, max = p[2], p[3]\r\n    if min == 0 and a.value < min then\r\n      return false, 'must be non-negative'\r\n    elseif min and a.value < min then\r\n      return false, 'must be no less than ' .. min\r\n    end\r\n    if max == 0 and a.value > max then\r\n      return false, 'must be non-positive'\r\n    elseif max and a.value > max then\r\n      return false, 'must be no greater than ' .. max\r\n    end\r\n   end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if type(p) == 'table' and a.value then\r\n    local min, max = p[2], p[3]\r\n    if min == 0 and a.value < min then\r\n      return false, 'must be non-negative'\r\n    elseif min and a.value < min then\r\n      return false, 'must be no less than ' .. min\r\n    end\r\n    if max == 0 and a.value > max then\r\n      return false, 'must be non-positive'\r\n    elseif max and a.value > max then\r\n      return false, 'must be no greater than ' .. max\r\n    end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "local min, max = p[2], p[3]",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if min == 0 and a.value < min then\r\n      return false, 'must be non-negative'\r\n    elseif min and a.value < min then\r\n      return false, 'must be no less than ' .. min\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "if max == 0 and a.value > max then\r\n      return false, 'must be non-positive'\r\n    elseif max and a.value > max then\r\n      return false, 'must be no greater than ' .. max\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function checkvar(a, p)\r\n  if a == nil then return true end -- unknown\r\n  if p == 'N' or type(p) == 'table' and p[1] == 'N' then\r\n    if not TNumber.isa(a) then\r\n      return false, 'must be a number'\r\n    end\r\n    local status, message = check_range(a, p)\r\n    if not status then return status, message end \r\n  elseif p == 'I' or type(p) == 'table' and p[1] == 'I' then\r\n    if not TNumber.isa(a) then\r\n      return false, 'must be an integer'\r\n    end\r\n    local status, message = check_range(a, p)\r\n    if not status then return status, message end\r\n  else\r\n    assert(false)\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "if a == nil then return true end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if p == 'N' or type(p) == 'table' and p[1] == 'N' then\r\n    if not TNumber.isa(a) then\r\n      return false, 'must be a number'\r\n    end\r\n    local status, message = check_range(a, p)\r\n    if not status then return status, message end \r\n  elseif p == 'I' or type(p) == 'table' and p[1] == 'I' then\r\n    if not TNumber.isa(a) then\r\n      return false, 'must be an integer'\r\n    end\r\n    local status, message = check_range(a, p)\r\n    if not status then return status, message end\r\n  else\r\n    assert(false)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "if not TNumber.isa(a) then\r\n      return false, 'must be a number'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "local status, message = check_range(a, p)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if not status then return status, message end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if not TNumber.isa(a) then\r\n      return false, 'must be an integer'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "assert(false)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function functioncheck(...)\r\n  local name = ...\r\n  local t = {select(2, ...)}  -- arg types\r\n\r\n  -- improve?\r\n  local obj = assert(loadstring('return ' .. name))()\r\n\r\n  local nparams = 0\r\n  for i=1,#t do\r\n    if t[i] == '->' then break end\r\n    nparams = nparams + 1\r\n  end\r\n\r\n  return function(...)\r\n    local n = select('#', ...)\r\n    assert(n == nparams, name .. ' expects ' .. nparams .. ' argument(s)')\r\n    local is_return = false\r\n    for i=1,n do\r\n      local a_ast = select(i, ...)\r\n      local p = t[i]\r\n      local status,message = checkvar(a_ast.stype,p)\r\n      if not status then error(name .. ' arg ' .. i .. ' ' .. message) end\r\n      -- FIX:improve to make more specific, including ranges\r\n    end\r\n\r\n    if nparams < #t then\r\n      assert(nparams+1+1 == #t, 'NOT IMPL')\r\n      --FIX: handle multiple returns?\r\n      --print(obj, ...)\r\n      local args = {}\r\n      local is_defined = true\r\n      for i=1,n do\r\n        local a_ast = select(i, ...)\r\n        args[i] = a_ast.stype and a_ast.stype.value\r\n        if args[i] == nil then is_defined = false; break end\r\n      end\r\n      if is_defined then      \r\n        return TNumber.create(obj(unpack(args))) -- fix:assumes no side effect like randomseed\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local name = ...",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local t = {select(2, ...)}",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local obj = assert(loadstring('return ' .. name))()",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local nparams = 0",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for i=1,#t do\r\n    if t[i] == '->' then break end\r\n    nparams = nparams + 1\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 25,
    "text": "if t[i] == '->' then break end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "nparams = nparams + 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "local n = select('#', ...)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assert(n == nparams, name .. ' expects ' .. nparams .. ' argument(s)')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local is_return = false",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for i=1,n do\r\n      local a_ast = select(i, ...)\r\n      local p = t[i]\r\n      local status,message = checkvar(a_ast.stype,p)\r\n      if not status then error(name .. ' arg ' .. i .. ' ' .. message) end\r\n      -- FIX:improve to make more specific, including ranges\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 31,
    "text": "local a_ast = select(i, ...)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local p = t[i]",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local status,message = checkvar(a_ast.stype,p)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if not status then error(name .. ' arg ' .. i .. ' ' .. message) end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "error(name .. ' arg ' .. i .. ' ' .. message)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if nparams < #t then\r\n      assert(nparams+1+1 == #t, 'NOT IMPL')\r\n      --FIX: handle multiple returns?\r\n      --print(obj, ...)\r\n      local args = {}\r\n      local is_defined = true\r\n      for i=1,n do\r\n        local a_ast = select(i, ...)\r\n        args[i] = a_ast.stype and a_ast.stype.value\r\n        if args[i] == nil then is_defined = false; break end\r\n      end\r\n      if is_defined then      \r\n        return TNumber.create(obj(unpack(args))) -- fix:assumes no side effect like randomseed\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "assert(nparams+1+1 == #t, 'NOT IMPL')",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local args = {}",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local is_defined = true",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "for i=1,n do\r\n        local a_ast = select(i, ...)\r\n        args[i] = a_ast.stype and a_ast.stype.value\r\n        if args[i] == nil then is_defined = false; break end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 41,
    "text": "args[i] = a_ast.stype and a_ast.stype.value",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if args[i] == nil then is_defined = false; break end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "is_defined = false",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if is_defined then      \r\n        return TNumber.create(obj(unpack(args))) -- fix:assumes no side effect like randomseed\r\n      end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function max(...)\r\n  print 'NOT IMPL'\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "print 'NOT IMPL'",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function min(...)\r\n  print 'NOT IMPL'\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n  print 'NOT IMPL'\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function tmath.__index(t, k)\r\n  assert(math[k], 'key ' .. tostring(k) .. ' not defined in math')\r\n\r\n  return funcs[k] \r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "assert(math[k], 'key ' .. tostring(k) .. ' not defined in math')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function(...)\r\n    local n = select('#', ...)\r\n    assert(n == nparams, name .. ' expects ' .. nparams .. ' argument(s)')\r\n    local is_return = false\r\n    for i=1,n do\r\n      local a_ast = select(i, ...)\r\n      local p = t[i]\r\n      local status,message = checkvar(a_ast.stype,p)\r\n      if not status then error(name .. ' arg ' .. i .. ' ' .. message) end\r\n      -- FIX:improve to make more specific, including ranges\r\n    end\r\n\r\n    if nparams < #t then\r\n      assert(nparams+1+1 == #t, 'NOT IMPL')\r\n      --FIX: handle multiple returns?\r\n      --print(obj, ...)\r\n      local args = {}\r\n      local is_defined = true\r\n      for i=1,n do\r\n        local a_ast = select(i, ...)\r\n        args[i] = a_ast.stype and a_ast.stype.value\r\n        if args[i] == nil then is_defined = false; break end\r\n      end\r\n      if is_defined then      \r\n        return TNumber.create(obj(unpack(args))) -- fix:assumes no side effect like randomseed\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "",
    "type": "function container"
  }, {
    "id": 59,
    "text": "function funcs.Block(ast)\r\n  local ts = {}\r\n  for i=1,#ast do\r\n    ts[#ts+1] = convert(ast[i])\r\n  end\r\n  return table.concat(ts, '\\n')\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "function funcs.Assign(ast)\r\n  local cnames = {}\r\n  local cvalues = {}\r\n  local names, values = ast[1], ast[2]\r\n  for i=1,#names do\r\n    cnames[#cnames+1] = convert(names[i])\r\n  end\r\n  for i=1,#values do\r\n    cvalues[#cvalues+1] = convert(values[i])\r\n  end\r\n\r\n  return table.concat(cnames, ',') .. '=' .. table.concat(cvalues, ',')  \r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "function funcs.Do(ast)\r\n  return 'do ' .. convert(ast[1]) .. ' end'\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "function funcs.While(ast)\r\n  return 'while ' .. convert(ast[1]) .. ' do ' .. convert(ast[2]) .. ' end'\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "function funcs.Repeat(ast)\r\n  return 'repeat ' .. convert(ast[1]) .. ' until ' .. convert(ast[2])\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "function funcs.If(ast)\r\n  local ts = {}\r\n  ts[#ts+1] = 'if '\r\n  ts[#ts+1] = convert(ast[1])\r\n  ts[#ts+1] = ' then '\r\n  ts[#ts+1] = convert(ast[2])\r\n  local i=3; while i <= #ast do\r\n    if i < #ast then\r\n      ts[#ts+1] = ' elseif '\r\n      ts[#ts+1] = convert(ast[i])\r\n      ts[#ts+1] = ' then '\r\n      ts[#ts+1] = convert(ast[i+1])\r\n      i = i + 2\r\n    else\r\n      ts[#ts+1] = ' else '\r\n      ts[#ts+1] = convert(ast[i])\r\n      i = i + 1\r\n    end\r\n  end\r\n  ts[#ts+1] = ' end'\r\n  return table.concat(ts, '')\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "function funcs.For(ast)\r\n  return 'for ' .. convert(ast[1]) .. ' = ' ..\r\n         convert(ast[2]) .. ',' .. convert(ast[3]) ..\r\n         (#ast == 5 and convert(ast[4]) or '') ..\r\n         ' do ' .. convert(ast[#ast]) .. ' end'\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "function funcs.Forin(ast)\r\n  return 'for ' .. convert(ast[1]) .. ' in ' .. convert(ast[2]) ..\r\n         ' do ' .. convert(ast[3]) .. ' end'\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "function funcs.FunctionDef(ast)\r\n  return 'function ' .. convert(ast[1]) .. '(' .. convert(ast[2]) .. ') ' ..\r\n         convert(ast[3]) .. ' end'\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "function funcs.LocalFunctionDef(ast)\r\n  return 'local ' .. funcs.FunctionDef(ast)\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "function funcs.Local(ast)\r\n  local cnames = {}\r\n  local cvalues = {}\r\n\r\n  local names, values = ast[1], ast[2]\r\n  for i=1,#names do\r\n    cnames[#cnames+1] = convert(names[i])\r\n  end\r\n  if values then\r\n    for i=1,#values do\r\n      cvalues[#cvalues+1] = convert(values[i])\r\n    end\r\n  end\r\n\r\n  return 'local ' ..  table.concat(cnames, ',') ..\r\n         (values and '=' .. table.concat(cvalues, ',') or '')\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "function funcs.Id(ast)\r\n  return ast[1]\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "function funcs.Nil(ast)\r\n  return 'nil'\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "function funcs.False(ast)\r\n  return 'false'\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "function funcs.True(ast)\r\n  return 'true'\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "function funcs.Dots(ast)\r\n  return '...'\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "function funcs.Number(ast)\r\n  -- TODO? NaN and +-INF?\r\n  return tostring(ast[1])\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "function funcs.String(ast)\r\n  return string.format(\"%q\", ast[1])\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "function funcs.Return(ast)\r\n  return 'return' .. (ast[1] and ' ' .. convert(ast[1]) or '') --FIX? if no list\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "function funcs.Break(ast)\r\n  return 'break'\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "function funcs.ExpList(ast)\r\n  local ts = {}\r\n  for i=1,#ast do\r\n    ts[#ts+1] = convert(ast[i])\r\n  end\r\n  return table.concat(ts, ',')\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "function funcs.Op(ast)\r\n  local id = ast[1]\r\n  local code = tocode[id]\r\n  if #ast == 3 then\r\n    return convert(ast[2]) .. ' ' .. code .. ' ' .. convert(ast[3])\r\n  elseif #ast == 2 then\r\n    return code .. ' ' .. convert(ast[2])\r\n  else assert(false) end\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "function funcs.Parens(ast)\r\n  return '(' .. convert(ast[1]) .. ')'\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "function funcs.Call(ast)\r\n  return convert(ast[1]) .. '(' .. convert(ast[2]) .. ')'\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "function funcs.ColonCall(ast)\r\n  return convert(ast[1]) .. ':' .. ast[2][1] ..\r\n    '(' .. convert(ast[3]) .. ')'\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "function funcs.Index(ast)\r\n  return convert(ast[1]) .. '[' .. convert(ast[2]) .. ']'\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "function funcs.IndexShort(ast)\r\n  return convert(ast[1]) .. '.' .. convert(ast[2])\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "function funcs.Function(ast)\r\n  return 'function(' .. convert(ast[1]) .. ') ' .. convert(ast[2]) .. ' end'\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "function funcs.FuncName(ast)\r\n  local ts = {}\r\n  local has_colon = false\r\n  for i=1,#ast do\r\n    local part_ast = ast[i]\r\n    if part_ast == ':' then -- colon part follows\r\n      has_colon = true\r\n      break\r\n    end\r\n    ts[#ts+1] = convert(part_ast)\r\n  end\r\n  return table.concat(ts, '.') ..\r\n      (has_colon and ':' .. convert(ast[#ast]) or '')\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "function funcs.Table(ast)\r\n  -- improve output style?\r\n  local ts = {}\r\n  for i=1,#ast do\r\n    local ele_ast = ast[i]\r\n    local key_ast, value_ast = ele_ast[1], ele_ast[2]\r\n    local key, value = convert(key_ast), convert(value_ast)\r\n    ts[#ts+1] = '[' .. key .. ']=' .. value\r\n  end\r\n  return '{' .. table.concat(ts,',') .. '}'\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 90,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 91,
    "text": "print",
    "type": "global function"
  }, {
    "id": 92,
    "text": "create",
    "type": "global function"
  }, {
    "id": 93,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 94,
    "text": "require",
    "type": "global function"
  }, {
    "id": 95,
    "text": "type",
    "type": "global function"
  }, {
    "id": 96,
    "text": "error",
    "type": "global function"
  }, {
    "id": 97,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 98,
    "text": "obj",
    "type": "global function"
  }, {
    "id": 99,
    "text": "select",
    "type": "global function"
  }, {
    "id": 100,
    "text": "isa",
    "type": "global function"
  }, {
    "id": 101,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 102,
    "text": "",
    "type": "variable container"
  }, {
    "id": 103,
    "text": "",
    "type": "require container"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 110,
    "text": "",
    "type": "global variable"
  }, {
    "id": 111,
    "text": "",
    "type": "n/a"
  }, {
    "id": 112,
    "text": "",
    "type": "global variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "global variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "global variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  }, {
    "id": 118,
    "text": "",
    "type": "global variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "global variable"
  }, {
    "id": 123,
    "text": "",
    "type": "n/a"
  }, {
    "id": 124,
    "text": "",
    "type": "global variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  }, {
    "id": 126,
    "text": "",
    "type": "global variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  }, {
    "id": 128,
    "text": "",
    "type": "global variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "global variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "global variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "global variable"
  }, {
    "id": 135,
    "text": "",
    "type": "n/a"
  }, {
    "id": 136,
    "text": "",
    "type": "global variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "global variable"
  }, {
    "id": 139,
    "text": "",
    "type": "n/a"
  }, {
    "id": 140,
    "text": "",
    "type": "global variable"
  }, {
    "id": 141,
    "text": "",
    "type": "n/a"
  }, {
    "id": 142,
    "text": "",
    "type": "global variable"
  }, {
    "id": 143,
    "text": "",
    "type": "n/a"
  }, {
    "id": 144,
    "text": "",
    "type": "global variable"
  }, {
    "id": 145,
    "text": "",
    "type": "n/a"
  }, {
    "id": 146,
    "text": "",
    "type": "global variable"
  }, {
    "id": 147,
    "text": "",
    "type": "n/a"
  }, {
    "id": 148,
    "text": "",
    "type": "global variable"
  }, {
    "id": 149,
    "text": "",
    "type": "n/a"
  }, {
    "id": 150,
    "text": "",
    "type": "global variable"
  }, {
    "id": 151,
    "text": "",
    "type": "n/a"
  }, {
    "id": 152,
    "text": "",
    "type": "global variable"
  }, {
    "id": 153,
    "text": "",
    "type": "n/a"
  }, {
    "id": 154,
    "text": "",
    "type": "global variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "global variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "global variable"
  }, {
    "id": 159,
    "text": "",
    "type": "n/a"
  }, {
    "id": 160,
    "text": "",
    "type": "global variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "global variable"
  }, {
    "id": 163,
    "text": "",
    "type": "n/a"
  }, {
    "id": 164,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "interface container"
  }, {
    "id": 166,
    "text": "",
    "type": "interface"
  }, {
    "id": 167,
    "text": "",
    "type": "local variable"
  } ]
}