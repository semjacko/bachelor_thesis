{
  "_filename": "alien.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/alien/src/alien.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 9
  }, {
    "from": 20,
    "label": "has",
    "to": 9
  }, {
    "from": 20,
    "label": "has",
    "to": 9
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 35,
    "label": "has",
    "to": 9
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 9
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 9
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 9
  }, {
    "from": 48,
    "label": "has",
    "to": 9
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 9
  }, {
    "from": 57,
    "label": "has",
    "to": 9
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 64,
    "label": "has",
    "to": 61
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 70,
    "label": "has",
    "to": 78
  }, {
    "from": 70,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 70,
    "label": "has",
    "to": 9
  }, {
    "from": 70,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 9
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 9
  }, {
    "from": 90,
    "label": "has",
    "to": 9
  }, {
    "from": 90,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 99,
    "label": "has",
    "to": 9
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 94
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 103,
    "label": "has",
    "to": 9
  }, {
    "from": 103,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 120
  }, {
    "from": 115,
    "label": "has",
    "to": 121
  }, {
    "from": 112,
    "label": "has",
    "to": 9
  }, {
    "from": 112,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 124,
    "label": "has",
    "to": 133
  }, {
    "from": 123,
    "label": "has",
    "to": 9
  }, {
    "from": 123,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 9
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 9
  }, {
    "from": 63,
    "label": "calls",
    "to": 174
  }, {
    "from": 30,
    "label": "calls",
    "to": 170
  }, {
    "from": 35,
    "label": "calls",
    "to": 170
  }, {
    "from": 57,
    "label": "calls",
    "to": 170
  }, {
    "from": 63,
    "label": "calls",
    "to": 170
  }, {
    "from": 70,
    "label": "calls",
    "to": 170
  }, {
    "from": 90,
    "label": "calls",
    "to": 170
  }, {
    "from": 90,
    "label": "calls",
    "to": 170
  }, {
    "from": 123,
    "label": "calls",
    "to": 170
  }, {
    "from": 2,
    "label": "calls",
    "to": 155
  }, {
    "from": 20,
    "label": "calls",
    "to": 163
  }, {
    "from": 112,
    "label": "calls",
    "to": 161
  }, {
    "from": 44,
    "label": "calls",
    "to": 168
  }, {
    "from": 112,
    "label": "calls",
    "to": 162
  }, {
    "from": 70,
    "label": "calls",
    "to": 150
  }, {
    "from": 70,
    "label": "calls",
    "to": 150
  }, {
    "from": 90,
    "label": "calls",
    "to": 150
  }, {
    "from": 44,
    "label": "calls",
    "to": 172
  }, {
    "from": 20,
    "label": "calls",
    "to": 164
  }, {
    "from": 20,
    "label": "calls",
    "to": 164
  }, {
    "from": 40,
    "label": "calls",
    "to": 164
  }, {
    "from": 140,
    "label": "calls",
    "to": 175
  }, {
    "from": 140,
    "label": "calls",
    "to": 175
  }, {
    "from": 103,
    "label": "calls",
    "to": 171
  }, {
    "from": 123,
    "label": "calls",
    "to": 171
  }, {
    "from": 15,
    "label": "calls",
    "to": 169
  }, {
    "from": 15,
    "label": "calls",
    "to": 169
  }, {
    "from": 20,
    "label": "calls",
    "to": 169
  }, {
    "from": 20,
    "label": "calls",
    "to": 169
  }, {
    "from": 70,
    "label": "calls",
    "to": 169
  }, {
    "from": 140,
    "label": "calls",
    "to": 173
  }, {
    "from": 70,
    "label": "calls",
    "to": 173
  }, {
    "from": 90,
    "label": "calls",
    "to": 173
  }, {
    "from": 30,
    "label": "calls",
    "to": 20
  }, {
    "from": 35,
    "label": "calls",
    "to": 20
  }, {
    "from": 35,
    "label": "calls",
    "to": 20
  }, {
    "from": 11,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 57,
    "label": "calls",
    "to": 165
  }, {
    "from": 63,
    "label": "calls",
    "to": 165
  }, {
    "from": 70,
    "label": "calls",
    "to": 165
  }, {
    "from": 70,
    "label": "calls",
    "to": 165
  }, {
    "from": 70,
    "label": "calls",
    "to": 165
  }, {
    "from": 70,
    "label": "calls",
    "to": 165
  }, {
    "from": 112,
    "label": "calls",
    "to": 166
  }, {
    "from": 112,
    "label": "calls",
    "to": 166
  }, {
    "from": 112,
    "label": "calls",
    "to": 151
  }, {
    "from": 140,
    "label": "calls",
    "to": 167
  }, {
    "from": 1,
    "label": "contains",
    "to": 140
  }, {
    "from": 140,
    "label": "declares",
    "to": 2
  }, {
    "from": 140,
    "label": "declares",
    "to": 11
  }, {
    "from": 140,
    "label": "declares",
    "to": 13
  }, {
    "from": 140,
    "label": "declares",
    "to": 15
  }, {
    "from": 140,
    "label": "declares",
    "to": 20
  }, {
    "from": 140,
    "label": "declares",
    "to": 30
  }, {
    "from": 140,
    "label": "declares",
    "to": 35
  }, {
    "from": 140,
    "label": "declares",
    "to": 40
  }, {
    "from": 140,
    "label": "declares",
    "to": 42
  }, {
    "from": 140,
    "label": "declares",
    "to": 44
  }, {
    "from": 140,
    "label": "declares",
    "to": 48
  }, {
    "from": 140,
    "label": "declares",
    "to": 51
  }, {
    "from": 140,
    "label": "declares",
    "to": 53
  }, {
    "from": 140,
    "label": "declares",
    "to": 57
  }, {
    "from": 140,
    "label": "declares",
    "to": 63
  }, {
    "from": 140,
    "label": "declares",
    "to": 70
  }, {
    "from": 140,
    "label": "declares",
    "to": 90
  }, {
    "from": 140,
    "label": "declares",
    "to": 99
  }, {
    "from": 140,
    "label": "declares",
    "to": 101
  }, {
    "from": 140,
    "label": "declares",
    "to": 103
  }, {
    "from": 140,
    "label": "declares",
    "to": 112
  }, {
    "from": 140,
    "label": "declares",
    "to": 123
  }, {
    "from": 140,
    "label": "declares",
    "to": 135
  }, {
    "from": 140,
    "label": "declares",
    "to": 139
  }, {
    "from": 1,
    "label": "declares",
    "to": 141
  }, {
    "from": 1,
    "label": "declares",
    "to": 142
  }, {
    "from": 1,
    "label": "declares",
    "to": 143
  }, {
    "from": 1,
    "label": "declares",
    "to": 144
  }, {
    "from": 1,
    "label": "declares",
    "to": 145
  }, {
    "from": 1,
    "label": "declares",
    "to": 146
  }, {
    "from": 1,
    "label": "declares",
    "to": 147
  }, {
    "from": 1,
    "label": "declares",
    "to": 148
  }, {
    "from": 1,
    "label": "declares",
    "to": 149
  }, {
    "from": 1,
    "label": "declares",
    "to": 150
  }, {
    "from": 1,
    "label": "declares",
    "to": 151
  }, {
    "from": 1,
    "label": "declares",
    "to": 152
  }, {
    "from": 1,
    "label": "declares",
    "to": 153
  }, {
    "from": 1,
    "label": "declares",
    "to": 156
  }, {
    "from": 1,
    "label": "declares",
    "to": 157
  }, {
    "from": 1,
    "label": "declares",
    "to": 158
  }, {
    "from": 1,
    "label": "declares",
    "to": 159
  }, {
    "from": 1,
    "label": "declares",
    "to": 160
  }, {
    "from": 1,
    "label": "declares",
    "to": 150
  }, {
    "from": 1,
    "label": "declares",
    "to": 166
  }, {
    "from": 1,
    "label": "declares",
    "to": 151
  }, {
    "from": 176,
    "label": "requires",
    "to": 1
  }, {
    "from": 176,
    "label": "requires",
    "to": 1
  }, {
    "from": 176,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 177
  }, {
    "from": 1,
    "label": "contains",
    "to": 178
  }, {
    "from": 177,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 177,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 177,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 177,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 177,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 177,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 177,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 177,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 177,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 177,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 177,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 177,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 177,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 177,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 177,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 177,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 177,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 178,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "requires",
    "to": 214
  }, {
    "from": 178,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "requires",
    "to": 154
  }, {
    "from": 176,
    "label": "requires",
    "to": 1
  }, {
    "from": 205,
    "label": "contains",
    "to": 11
  }, {
    "from": 205,
    "label": "contains",
    "to": 13
  }, {
    "from": 205,
    "label": "contains",
    "to": 15
  }, {
    "from": 203,
    "label": "contains",
    "to": 30
  }, {
    "from": 203,
    "label": "contains",
    "to": 35
  }, {
    "from": 203,
    "label": "contains",
    "to": 40
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "alien",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function find_library_helper(libname, opt)\r\n  local expr = '/[^() ]*lib' .. libname .. '%.so[^() ]*'\r\n  local cmd = '/sbin/ldconfig ' .. opt ..\r\n    ' 2>/dev/null | egrep -o \"' .. expr .. '\"'\r\n  local pipe = io.popen(cmd)\r\n  if pipe then\r\n    local res = pipe:read()\r\n    pipe:close()\r\n    return res and res:match(\"([^%s]*)\")\r\n  end\r\n  return nil\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local expr = '/[^() ]*lib' .. libname .. '%.so[^() ]*'",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local cmd = '/sbin/ldconfig ' .. opt ..\r\n    ' 2>/dev/null | egrep -o \"' .. expr .. '\"'",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local pipe = io.popen(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if pipe then\r\n    local res = pipe:read()\r\n    pipe:close()\r\n    return res and res:match(\"([^%s]*)\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "local res = pipe:read()",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "pipe:close()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function find_library.linux(libname)\r\n  return find_library_helper(libname, \"-p\")\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function find_library.bsd(libname)\r\n  return find_library_helper(libname, \"-r\")\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function find_library.darwin(libname)\r\n  local ok, lib = pcall(load, libname .. \".dylib\")\r\n  if ok then return lib end\r\n  ok, lib = pcall(load, libname .. \".framework/\" .. libname)\r\n  if ok then return lib end\r\n  return nil\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local ok, lib = pcall(load, libname .. \".dylib\")",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if ok then return lib end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "ok, lib = pcall(load, libname .. \".framework/\" .. libname)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function load_library_helper(libname, libext)\r\n  if libname:match(\"/\") or libname:match(\"%\" .. libext) then\r\n    return load(libname)\r\n  else\r\n    local ok, lib = pcall(load, \"lib\" .. libname .. libext)\r\n    if not ok then\r\n      ok, lib = pcall(load, \"./lib\" .. libname .. libext)\r\n      if not ok then\r\n        local name = find_library[alien.platform](libname)\r\n        if name then\r\n          lib = load(name)\r\n        else\r\n          return nil, \"library \" .. libname .. \" not found\"\r\n        end\r\n      end\r\n    end\r\n    return lib\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if libname:match(\"/\") or libname:match(\"%\" .. libext) then\r\n    return load(libname)\r\n  else\r\n    local ok, lib = pcall(load, \"lib\" .. libname .. libext)\r\n    if not ok then\r\n      ok, lib = pcall(load, \"./lib\" .. libname .. libext)\r\n      if not ok then\r\n        local name = find_library[alien.platform](libname)\r\n        if name then\r\n          lib = load(name)\r\n        else\r\n          return nil, \"library \" .. libname .. \" not found\"\r\n        end\r\n      end\r\n    end\r\n    return lib\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local ok, lib = pcall(load, \"lib\" .. libname .. libext)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if not ok then\r\n      ok, lib = pcall(load, \"./lib\" .. libname .. libext)\r\n      if not ok then\r\n        local name = find_library[alien.platform](libname)\r\n        if name then\r\n          lib = load(name)\r\n        else\r\n          return nil, \"library \" .. libname .. \" not found\"\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "ok, lib = pcall(load, \"./lib\" .. libname .. libext)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if not ok then\r\n        local name = find_library[alien.platform](libname)\r\n        if name then\r\n          lib = load(name)\r\n        else\r\n          return nil, \"library \" .. libname .. \" not found\"\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local name = find_library[alien.platform](libname)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if name then\r\n          lib = load(name)\r\n        else\r\n          return nil, \"library \" .. libname .. \" not found\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "lib = load(name)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function load_library.linux(libname)\r\n  local lib, errmsg = load_library_helper(libname, \".so\")\r\n  if not lib then error (errmsg) end\r\n  return lib\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local lib, errmsg = load_library_helper(libname, \".so\")",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if not lib then error (errmsg) end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "error (errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function load_library.darwin(libname)\r\n  local lib, errmsg = load_library_helper(libname, \".dylib\")\r\n  if not lib then\r\n    lib, errmsg = load_library_helper(libname, \".so\")\r\n  end\r\n  if not lib then error (errmsg) end\r\n  return lib\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local lib, errmsg = load_library_helper(libname, \".dylib\")",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if not lib then\r\n    lib, errmsg = load_library_helper(libname, \".so\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "lib, errmsg = load_library_helper(libname, \".so\")",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function load_library.windows(libname)\r\n  return load(libname)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function _M.load(libname)\r\n  return _M.loaded[libname]\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function _M.callback(f, ...)\r\n  local cb = callback(f)\r\n  cb.types(cb, ...)\r\n  return cb\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local cb = callback(f)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "cb.types(cb, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function array_next(arr, i)\r\n  if i < arr.length then\r\n    return i + 1, arr[i + 1]\r\n  else\r\n    return nil\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if i < arr.length then\r\n    return i + 1, arr[i + 1]\r\n  else\r\n    return nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function array_methods:ipairs()\r\n  return array_next, self, 0\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function array_methods:realloc(newlen)\r\n  self.buffer:realloc(newlen * self.size)\r\n  self.length = newlen\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "self.buffer:realloc(newlen * self.size)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "self.length = newlen",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function array_get(arr, key)\r\n  if type(key) == \"number\" then\r\n    if key < 1 or key > arr.length then\r\n      error(\"array access out of bounds\")\r\n    end\r\n    local offset = (key - 1) * arr.size + 1\r\n    return arr.buffer:get(offset, arr.type)\r\n  else\r\n    return array_methods[key]\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "if type(key) == \"number\" then\r\n    if key < 1 or key > arr.length then\r\n      error(\"array access out of bounds\")\r\n    end\r\n    local offset = (key - 1) * arr.size + 1\r\n    return arr.buffer:get(offset, arr.type)\r\n  else\r\n    return array_methods[key]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "if key < 1 or key > arr.length then\r\n      error(\"array access out of bounds\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "error(\"array access out of bounds\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "local offset = (key - 1) * arr.size + 1",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function array_set(arr, key, val)\r\n  if type(key) == \"number\" then\r\n    if key < 1 or key > arr.length then\r\n      error(\"array access out of bounds\")\r\n    end\r\n    local offset = (key - 1) * arr.size + 1\r\n    arr.buffer:set(offset, val, arr.type)\r\n    if arr.type == \"pointer\" then\r\n      arr.pinned[key] = val\r\n    end\r\n  else\r\n    rawset(arr, key, val)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "if type(key) == \"number\" then\r\n    if key < 1 or key > arr.length then\r\n      error(\"array access out of bounds\")\r\n    end\r\n    local offset = (key - 1) * arr.size + 1\r\n    arr.buffer:set(offset, val, arr.type)\r\n    if arr.type == \"pointer\" then\r\n      arr.pinned[key] = val\r\n    end\r\n  else\r\n    rawset(arr, key, val)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "arr.buffer:set(offset, val, arr.type)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if arr.type == \"pointer\" then\r\n      arr.pinned[key] = val\r\n    end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "arr.pinned[key] = val",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "rawset(arr, key, val)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function _M.array(t, length, init)\r\n  local ok, size = pcall(alien.sizeof, t)\r\n  if not ok then\r\n    error(\"type \" .. t .. \" does not exist\")\r\n  end\r\n  if type(length) == \"table\" then\r\n    init = length\r\n    length = #length\r\n  end\r\n  local arr = { type = t, length = length, size = size, pinned = {} }\r\n  -- FIXME: When Lua 5.1 support is dropped, add a __len metamethod\r\n  setmetatable(arr, { __index = array_get, __newindex = array_set })\r\n  if type(init) == \"userdata\" then\r\n    arr.buffer = init\r\n  else\r\n    arr.buffer = alien.buffer(size * length)\r\n    if type(init) == \"table\" then\r\n      for i = 1, length do\r\n        if type(init[i]) == \"string\" then\r\n          local offset = (i - 1) * size + 1\r\n          arr.pinned[i] = alien.buffer(#init[i] + 1)\r\n          arr.buffer:set(offset, arr.pinned[i], \"pointer\")\r\n        end\r\n        arr[i] = init[i]\r\n      end\r\n    end\r\n  end\r\n  return arr\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local ok, size = pcall(alien.sizeof, t)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if not ok then\r\n    error(\"type \" .. t .. \" does not exist\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "error(\"type \" .. t .. \" does not exist\")",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if type(length) == \"table\" then\r\n    init = length\r\n    length = #length\r\n  end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "init = length",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "length = #length",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "local arr = { type = t, length = length, size = size, pinned = {} }",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "setmetatable(arr, { __index = array_get, __newindex = array_set })",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "if type(init) == \"userdata\" then\r\n    arr.buffer = init\r\n  else\r\n    arr.buffer = alien.buffer(size * length)\r\n    if type(init) == \"table\" then\r\n      for i = 1, length do\r\n        if type(init[i]) == \"string\" then\r\n          local offset = (i - 1) * size + 1\r\n          arr.pinned[i] = alien.buffer(#init[i] + 1)\r\n          arr.buffer:set(offset, arr.pinned[i], \"pointer\")\r\n        end\r\n        arr[i] = init[i]\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "arr.buffer = init",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "arr.buffer = alien.buffer(size * length)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if type(init) == \"table\" then\r\n      for i = 1, length do\r\n        if type(init[i]) == \"string\" then\r\n          local offset = (i - 1) * size + 1\r\n          arr.pinned[i] = alien.buffer(#init[i] + 1)\r\n          arr.buffer:set(offset, arr.pinned[i], \"pointer\")\r\n        end\r\n        arr[i] = init[i]\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "for i = 1, length do\r\n        if type(init[i]) == \"string\" then\r\n          local offset = (i - 1) * size + 1\r\n          arr.pinned[i] = alien.buffer(#init[i] + 1)\r\n          arr.buffer:set(offset, arr.pinned[i], \"pointer\")\r\n        end\r\n        arr[i] = init[i]\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 84,
    "text": "if type(init[i]) == \"string\" then\r\n          local offset = (i - 1) * size + 1\r\n          arr.pinned[i] = alien.buffer(#init[i] + 1)\r\n          arr.buffer:set(offset, arr.pinned[i], \"pointer\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "local offset = (i - 1) * size + 1",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "arr.pinned[i] = alien.buffer(#init[i] + 1)",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "arr.buffer:set(offset, arr.pinned[i], \"pointer\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "arr[i] = init[i]",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "local function struct_new(s_proto, ptr)\r\n  local buf = alien.buffer(ptr or s_proto.size)\r\n  local function struct_get(_, key)\r\n    if s_proto.offsets[key] then\r\n      return buf:get(s_proto.offsets[key] + 1, s_proto.types[key])\r\n    else\r\n      error(\"field \" .. key .. \" does not exist\")\r\n    end\r\n  end\r\n  local function struct_set(_, key, val)\r\n    if s_proto.offsets[key] then\r\n      buf:set(s_proto.offsets[key] + 1, val, s_proto.types[key])\r\n    else\r\n      error(\"field \" .. key .. \" does not exist\")\r\n    end\r\n  end\r\n  return setmetatable({}, { __index = struct_get, __newindex = struct_set,\r\n                            __call = function () return buf end })\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local buf = alien.buffer(ptr or s_proto.size)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local function struct_get(_, key)\r\n    if s_proto.offsets[key] then\r\n      return buf:get(s_proto.offsets[key] + 1, s_proto.types[key])\r\n    else\r\n      error(\"field \" .. key .. \" does not exist\")\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 93,
    "text": "if s_proto.offsets[key] then\r\n      return buf:get(s_proto.offsets[key] + 1, s_proto.types[key])\r\n    else\r\n      error(\"field \" .. key .. \" does not exist\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "error(\"field \" .. key .. \" does not exist\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "local function struct_set(_, key, val)\r\n    if s_proto.offsets[key] then\r\n      buf:set(s_proto.offsets[key] + 1, val, s_proto.types[key])\r\n    else\r\n      error(\"field \" .. key .. \" does not exist\")\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 96,
    "text": "if s_proto.offsets[key] then\r\n      buf:set(s_proto.offsets[key] + 1, val, s_proto.types[key])\r\n    else\r\n      error(\"field \" .. key .. \" does not exist\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "buf:set(s_proto.offsets[key] + 1, val, s_proto.types[key])",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "local function struct_get(_, key)\r\n    if s_proto.offsets[key] then\r\n      return buf:get(s_proto.offsets[key] + 1, s_proto.types[key])\r\n    else\r\n      error(\"field \" .. key .. \" does not exist\")\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "local function struct_set(_, key, val)\r\n    if s_proto.offsets[key] then\r\n      buf:set(s_proto.offsets[key] + 1, val, s_proto.types[key])\r\n    else\r\n      error(\"field \" .. key .. \" does not exist\")\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "local function struct_byval(s_proto)\r\n  local types = {}\r\n  local size = s_proto.size\r\n  for i = 0, size - 1, 4 do\r\n    if size - i == 1 then\r\n      types[#types + 1] = \"char\"\r\n    elseif size - i == 2 then\r\n      types[#types + 1] = \"short\"\r\n    else\r\n      types[#types + 1] = \"int\"\r\n    end\r\n  end\r\n  return unpack(types)\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local types = {}",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local size = s_proto.size",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "for i = 0, size - 1, 4 do\r\n    if size - i == 1 then\r\n      types[#types + 1] = \"char\"\r\n    elseif size - i == 2 then\r\n      types[#types + 1] = \"short\"\r\n    else\r\n      types[#types + 1] = \"int\"\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 107,
    "text": "if size - i == 1 then\r\n      types[#types + 1] = \"char\"\r\n    elseif size - i == 2 then\r\n      types[#types + 1] = \"short\"\r\n    else\r\n      types[#types + 1] = \"int\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "types[#types + 1] = \"char\"",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "types[#types + 1] = \"short\"",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "types[#types + 1] = \"int\"",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function _M.defstruct(t)\r\n  local off = 0\r\n  local names, offsets, types = {}, {}, {}\r\n  for _, field in ipairs(t) do\r\n    local name, type = field[1], field[2]\r\n    names[#names + 1] = name\r\n    off = math.ceil(off / alien.align(type)) * alien.align(type)\r\n    offsets[name] = off\r\n    types[name] = type\r\n    off = off + alien.sizeof(type)\r\n  end\r\n  return { names = names, offsets = offsets, types = types, size = off, new = struct_new,\r\n           byval = struct_byval }\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local off = 0",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local names, offsets, types = {}, {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "for _, field in ipairs(t) do\r\n    local name, type = field[1], field[2]\r\n    names[#names + 1] = name\r\n    off = math.ceil(off / alien.align(type)) * alien.align(type)\r\n    offsets[name] = off\r\n    types[name] = type\r\n    off = off + alien.sizeof(type)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "local name, type = field[1], field[2]",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "names[#names + 1] = name",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "off = math.ceil(off / alien.align(type)) * alien.align(type)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "offsets[name] = off",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "types[name] = type",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "off = off + alien.sizeof(type)",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function _M.byval(buf)\r\n  if buf.size then\r\n    local size = buf.size\r\n    local types = { \"char\", \"short\"}\r\n    local vals = {}\r\n    for i = 1, size, 4 do\r\n      if size - i == 0 then\r\n        vals[#vals + 1] = buf:get(i, \"char\")\r\n      elseif size - i == 1 then\r\n        vals[#vals + 1] = buf:get(i, \"short\")\r\n      else\r\n        vals[#vals + 1] = buf:get(i, \"int\")\r\n      end\r\n    end\r\n    return unpack(vals)\r\n  else\r\n    error(\"this type of buffer can't be passed by value\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "if buf.size then\r\n    local size = buf.size\r\n    local types = { \"char\", \"short\"}\r\n    local vals = {}\r\n    for i = 1, size, 4 do\r\n      if size - i == 0 then\r\n        vals[#vals + 1] = buf:get(i, \"char\")\r\n      elseif size - i == 1 then\r\n        vals[#vals + 1] = buf:get(i, \"short\")\r\n      else\r\n        vals[#vals + 1] = buf:get(i, \"int\")\r\n      end\r\n    end\r\n    return unpack(vals)\r\n  else\r\n    error(\"this type of buffer can't be passed by value\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "local size = buf.size",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local types = { \"char\", \"short\"}",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local vals = {}",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "for i = 1, size, 4 do\r\n      if size - i == 0 then\r\n        vals[#vals + 1] = buf:get(i, \"char\")\r\n      elseif size - i == 1 then\r\n        vals[#vals + 1] = buf:get(i, \"short\")\r\n      else\r\n        vals[#vals + 1] = buf:get(i, \"int\")\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 129,
    "text": "if size - i == 0 then\r\n        vals[#vals + 1] = buf:get(i, \"char\")\r\n      elseif size - i == 1 then\r\n        vals[#vals + 1] = buf:get(i, \"short\")\r\n      else\r\n        vals[#vals + 1] = buf:get(i, \"int\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "vals[#vals + 1] = buf:get(i, \"char\")",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "vals[#vals + 1] = buf:get(i, \"short\")",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "vals[#vals + 1] = buf:get(i, \"int\")",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "error(\"this type of buffer can't be passed by value\")",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function (t, libname)\r\n                                      local lib = load_library[alien.platform](libname)\r\n                                      t[libname] = lib\r\n                                      return lib\r\n                                    end",
    "type": "function"
  }, {
    "id": 136,
    "text": "local lib = load_library[alien.platform](libname)",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "t[libname] = lib",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function () return buf end",
    "type": "function"
  }, {
    "id": 140,
    "text": "",
    "type": "function container"
  }, {
    "id": 141,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 142,
    "text": "rewrap",
    "type": "global function"
  }, {
    "id": 143,
    "text": "offset",
    "type": "global function"
  }, {
    "id": 144,
    "text": "unwrap",
    "type": "global function"
  }, {
    "id": 145,
    "text": "touint",
    "type": "global function"
  }, {
    "id": 146,
    "text": "funcptr",
    "type": "global function"
  }, {
    "id": 147,
    "text": "size",
    "type": "global function"
  }, {
    "id": 148,
    "text": "tag",
    "type": "global function"
  }, {
    "id": 149,
    "text": "toulong",
    "type": "global function"
  }, {
    "id": 150,
    "text": "buffer",
    "type": "global function"
  }, {
    "id": 151,
    "text": "sizeof",
    "type": "global function"
  }, {
    "id": 152,
    "text": "toushort",
    "type": "global function"
  }, {
    "id": 153,
    "text": "load",
    "type": "global function"
  }, {
    "id": 154,
    "text": "io",
    "type": "module"
  }, {
    "id": 155,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 156,
    "text": "defstruct",
    "type": "global function"
  }, {
    "id": 157,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 158,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 159,
    "text": "array",
    "type": "global function"
  }, {
    "id": 160,
    "text": "pack",
    "type": "global function"
  }, {
    "id": 161,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 162,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 163,
    "text": "platform]",
    "type": "global function"
  }, {
    "id": 164,
    "text": "load",
    "type": "global function"
  }, {
    "id": 165,
    "text": "type",
    "type": "global function"
  }, {
    "id": 166,
    "text": "align",
    "type": "global function"
  }, {
    "id": 167,
    "text": "platform]",
    "type": "global function"
  }, {
    "id": 168,
    "text": "types",
    "type": "global function"
  }, {
    "id": 169,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 170,
    "text": "error",
    "type": "global function"
  }, {
    "id": 171,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 172,
    "text": "callback",
    "type": "global function"
  }, {
    "id": 173,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 174,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 175,
    "text": "require",
    "type": "global function"
  }, {
    "id": 176,
    "text": "",
    "type": "global variable"
  }, {
    "id": 177,
    "text": "",
    "type": "variable container"
  }, {
    "id": 178,
    "text": "",
    "type": "require container"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "n/a"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "n/a"
  }, {
    "id": 195,
    "text": "",
    "type": "local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "n/a"
  }, {
    "id": 197,
    "text": "",
    "type": "local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "n/a"
  }, {
    "id": 199,
    "text": "",
    "type": "local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "n/a"
  }, {
    "id": 201,
    "text": "",
    "type": "local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "n/a"
  }, {
    "id": 203,
    "text": "",
    "type": "local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 205,
    "text": "",
    "type": "local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 207,
    "text": "",
    "type": "local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 209,
    "text": "",
    "type": "global variable"
  }, {
    "id": 210,
    "text": "",
    "type": "n/a"
  }, {
    "id": 211,
    "text": "",
    "type": "global variable"
  }, {
    "id": 212,
    "text": "",
    "type": "n/a"
  }, {
    "id": 213,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 214,
    "text": "alien_c",
    "type": "module"
  }, {
    "id": 215,
    "text": "",
    "type": "require local variable"
  } ]
}