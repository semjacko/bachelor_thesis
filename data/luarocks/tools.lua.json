{
  "_filename": "tools.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/fs/win32/tools.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 39,
    "label": "calls",
    "to": 179
  }, {
    "from": 39,
    "label": "calls",
    "to": 185
  }, {
    "from": 39,
    "label": "calls",
    "to": 185
  }, {
    "from": 39,
    "label": "calls",
    "to": 185
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 39,
    "label": "declares",
    "to": 13
  }, {
    "from": 39,
    "label": "declares",
    "to": 14
  }, {
    "from": 39,
    "label": "declares",
    "to": 15
  }, {
    "from": 39,
    "label": "declares",
    "to": 16
  }, {
    "from": 39,
    "label": "declares",
    "to": 17
  }, {
    "from": 39,
    "label": "declares",
    "to": 18
  }, {
    "from": 39,
    "label": "declares",
    "to": 19
  }, {
    "from": 39,
    "label": "declares",
    "to": 20
  }, {
    "from": 39,
    "label": "declares",
    "to": 21
  }, {
    "from": 39,
    "label": "declares",
    "to": 22
  }, {
    "from": 39,
    "label": "declares",
    "to": 23
  }, {
    "from": 39,
    "label": "declares",
    "to": 24
  }, {
    "from": 39,
    "label": "declares",
    "to": 25
  }, {
    "from": 39,
    "label": "declares",
    "to": 26
  }, {
    "from": 39,
    "label": "declares",
    "to": 27
  }, {
    "from": 39,
    "label": "declares",
    "to": 28
  }, {
    "from": 39,
    "label": "declares",
    "to": 29
  }, {
    "from": 39,
    "label": "declares",
    "to": 30
  }, {
    "from": 39,
    "label": "declares",
    "to": 31
  }, {
    "from": 39,
    "label": "declares",
    "to": 32
  }, {
    "from": 39,
    "label": "declares",
    "to": 33
  }, {
    "from": 39,
    "label": "declares",
    "to": 34
  }, {
    "from": 39,
    "label": "declares",
    "to": 35
  }, {
    "from": 39,
    "label": "declares",
    "to": 36
  }, {
    "from": 39,
    "label": "declares",
    "to": 37
  }, {
    "from": 39,
    "label": "declares",
    "to": 38
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 42
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 50,
    "label": "has",
    "to": 42
  }, {
    "from": 50,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 42
  }, {
    "from": 60,
    "label": "has",
    "to": 42
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 42
  }, {
    "from": 65,
    "label": "has",
    "to": 42
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 42
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 42
  }, {
    "from": 76,
    "label": "has",
    "to": 42
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 77
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 77
  }, {
    "from": 85,
    "label": "has",
    "to": 83
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 42
  }, {
    "from": 87,
    "label": "has",
    "to": 42
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 88
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 42
  }, {
    "from": 94,
    "label": "has",
    "to": 42
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 102,
    "label": "has",
    "to": 42
  }, {
    "from": 102,
    "label": "has",
    "to": 107
  }, {
    "from": 102,
    "label": "has",
    "to": 108
  }, {
    "from": 102,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 102,
    "label": "has",
    "to": 55
  }, {
    "from": 102,
    "label": "has",
    "to": 42
  }, {
    "from": 102,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 103
  }, {
    "from": 112,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 112,
    "label": "has",
    "to": 106
  }, {
    "from": 112,
    "label": "has",
    "to": 42
  }, {
    "from": 112,
    "label": "has",
    "to": 107
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 112,
    "label": "has",
    "to": 55
  }, {
    "from": 112,
    "label": "has",
    "to": 42
  }, {
    "from": 112,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 42
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 42
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 42
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 127
  }, {
    "from": 129,
    "label": "has",
    "to": 42
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 131,
    "label": "has",
    "to": 135
  }, {
    "from": 131,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 138,
    "label": "has",
    "to": 143
  }, {
    "from": 136,
    "label": "has",
    "to": 144
  }, {
    "from": 131,
    "label": "has",
    "to": 145
  }, {
    "from": 131,
    "label": "has",
    "to": 42
  }, {
    "from": 131,
    "label": "has",
    "to": 42
  }, {
    "from": 131,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 42
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 135
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 152,
    "label": "has",
    "to": 158
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 158
  }, {
    "from": 152,
    "label": "has",
    "to": 159
  }, {
    "from": 149,
    "label": "has",
    "to": 42
  }, {
    "from": 149,
    "label": "has",
    "to": 42
  }, {
    "from": 149,
    "label": "has",
    "to": 160
  }, {
    "from": 149,
    "label": "has",
    "to": 42
  }, {
    "from": 149,
    "label": "has",
    "to": 42
  }, {
    "from": 149,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 42
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 55
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 162,
    "label": "has",
    "to": 169
  }, {
    "from": 162,
    "label": "has",
    "to": 42
  }, {
    "from": 162,
    "label": "has",
    "to": 42
  }, {
    "from": 162,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 127
  }, {
    "from": 171,
    "label": "has",
    "to": 42
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 42
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 87,
    "label": "calls",
    "to": 6
  }, {
    "from": 129,
    "label": "calls",
    "to": 6
  }, {
    "from": 131,
    "label": "calls",
    "to": 6
  }, {
    "from": 131,
    "label": "calls",
    "to": 6
  }, {
    "from": 131,
    "label": "calls",
    "to": 6
  }, {
    "from": 173,
    "label": "calls",
    "to": 6
  }, {
    "from": 149,
    "label": "calls",
    "to": 40
  }, {
    "from": 149,
    "label": "calls",
    "to": 40
  }, {
    "from": 149,
    "label": "calls",
    "to": 40
  }, {
    "from": 40,
    "label": "calls",
    "to": 176
  }, {
    "from": 65,
    "label": "calls",
    "to": 176
  }, {
    "from": 76,
    "label": "calls",
    "to": 176
  }, {
    "from": 82,
    "label": "calls",
    "to": 176
  }, {
    "from": 85,
    "label": "calls",
    "to": 176
  }, {
    "from": 87,
    "label": "calls",
    "to": 176
  }, {
    "from": 94,
    "label": "calls",
    "to": 176
  }, {
    "from": 97,
    "label": "calls",
    "to": 176
  }, {
    "from": 97,
    "label": "calls",
    "to": 176
  }, {
    "from": 102,
    "label": "calls",
    "to": 176
  }, {
    "from": 112,
    "label": "calls",
    "to": 176
  }, {
    "from": 123,
    "label": "calls",
    "to": 176
  }, {
    "from": 126,
    "label": "calls",
    "to": 176
  }, {
    "from": 129,
    "label": "calls",
    "to": 176
  }, {
    "from": 131,
    "label": "calls",
    "to": 176
  }, {
    "from": 131,
    "label": "calls",
    "to": 176
  }, {
    "from": 149,
    "label": "calls",
    "to": 176
  }, {
    "from": 171,
    "label": "calls",
    "to": 176
  }, {
    "from": 162,
    "label": "calls",
    "to": 177
  }, {
    "from": 50,
    "label": "calls",
    "to": 183
  }, {
    "from": 102,
    "label": "calls",
    "to": 183
  }, {
    "from": 112,
    "label": "calls",
    "to": 183
  }, {
    "from": 162,
    "label": "calls",
    "to": 183
  }, {
    "from": 76,
    "label": "calls",
    "to": 4
  }, {
    "from": 149,
    "label": "calls",
    "to": 147
  }, {
    "from": 149,
    "label": "calls",
    "to": 147
  }, {
    "from": 60,
    "label": "calls",
    "to": 9
  }, {
    "from": 102,
    "label": "calls",
    "to": 9
  }, {
    "from": 112,
    "label": "calls",
    "to": 9
  }, {
    "from": 76,
    "label": "calls",
    "to": 7
  }, {
    "from": 82,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 94,
    "label": "calls",
    "to": 7
  }, {
    "from": 97,
    "label": "calls",
    "to": 7
  }, {
    "from": 121,
    "label": "calls",
    "to": 7
  }, {
    "from": 123,
    "label": "calls",
    "to": 7
  }, {
    "from": 126,
    "label": "calls",
    "to": 7
  }, {
    "from": 147,
    "label": "calls",
    "to": 7
  }, {
    "from": 149,
    "label": "calls",
    "to": 7
  }, {
    "from": 149,
    "label": "calls",
    "to": 7
  }, {
    "from": 149,
    "label": "calls",
    "to": 7
  }, {
    "from": 149,
    "label": "calls",
    "to": 7
  }, {
    "from": 149,
    "label": "calls",
    "to": 7
  }, {
    "from": 171,
    "label": "calls",
    "to": 7
  }, {
    "from": 39,
    "label": "calls",
    "to": 185
  }, {
    "from": 39,
    "label": "calls",
    "to": 185
  }, {
    "from": 39,
    "label": "calls",
    "to": 185
  }, {
    "from": 131,
    "label": "calls",
    "to": 10
  }, {
    "from": 50,
    "label": "calls",
    "to": 178
  }, {
    "from": 44,
    "label": "calls",
    "to": 5
  }, {
    "from": 50,
    "label": "calls",
    "to": 5
  }, {
    "from": 76,
    "label": "calls",
    "to": 5
  }, {
    "from": 82,
    "label": "calls",
    "to": 5
  }, {
    "from": 85,
    "label": "calls",
    "to": 5
  }, {
    "from": 87,
    "label": "calls",
    "to": 5
  }, {
    "from": 94,
    "label": "calls",
    "to": 5
  }, {
    "from": 94,
    "label": "calls",
    "to": 5
  }, {
    "from": 97,
    "label": "calls",
    "to": 5
  }, {
    "from": 97,
    "label": "calls",
    "to": 5
  }, {
    "from": 97,
    "label": "calls",
    "to": 5
  }, {
    "from": 102,
    "label": "calls",
    "to": 5
  }, {
    "from": 112,
    "label": "calls",
    "to": 5
  }, {
    "from": 121,
    "label": "calls",
    "to": 5
  }, {
    "from": 123,
    "label": "calls",
    "to": 5
  }, {
    "from": 126,
    "label": "calls",
    "to": 5
  }, {
    "from": 129,
    "label": "calls",
    "to": 5
  }, {
    "from": 131,
    "label": "calls",
    "to": 5
  }, {
    "from": 131,
    "label": "calls",
    "to": 5
  }, {
    "from": 131,
    "label": "calls",
    "to": 5
  }, {
    "from": 131,
    "label": "calls",
    "to": 5
  }, {
    "from": 131,
    "label": "calls",
    "to": 5
  }, {
    "from": 131,
    "label": "calls",
    "to": 5
  }, {
    "from": 131,
    "label": "calls",
    "to": 5
  }, {
    "from": 131,
    "label": "calls",
    "to": 5
  }, {
    "from": 147,
    "label": "calls",
    "to": 5
  }, {
    "from": 149,
    "label": "calls",
    "to": 5
  }, {
    "from": 39,
    "label": "calls",
    "to": 5
  }, {
    "from": 39,
    "label": "calls",
    "to": 5
  }, {
    "from": 39,
    "label": "calls",
    "to": 5
  }, {
    "from": 162,
    "label": "calls",
    "to": 5
  }, {
    "from": 171,
    "label": "calls",
    "to": 5
  }, {
    "from": 65,
    "label": "calls",
    "to": 180
  }, {
    "from": 70,
    "label": "calls",
    "to": 180
  }, {
    "from": 102,
    "label": "calls",
    "to": 180
  }, {
    "from": 112,
    "label": "calls",
    "to": 180
  }, {
    "from": 73,
    "label": "calls",
    "to": 181
  }, {
    "from": 60,
    "label": "calls",
    "to": 44
  }, {
    "from": 102,
    "label": "calls",
    "to": 44
  }, {
    "from": 112,
    "label": "calls",
    "to": 44
  }, {
    "from": 60,
    "label": "calls",
    "to": 182
  }, {
    "from": 131,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 179
  }, {
    "from": 131,
    "label": "calls",
    "to": 11
  }, {
    "from": 131,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 184
  }, {
    "from": 65,
    "label": "calls",
    "to": 184
  }, {
    "from": 102,
    "label": "calls",
    "to": 184
  }, {
    "from": 112,
    "label": "calls",
    "to": 184
  }, {
    "from": 131,
    "label": "calls",
    "to": 184
  }, {
    "from": 131,
    "label": "calls",
    "to": 184
  }, {
    "from": 149,
    "label": "calls",
    "to": 184
  }, {
    "from": 131,
    "label": "calls",
    "to": 8
  }, {
    "from": 65,
    "label": "calls",
    "to": 12
  }, {
    "from": 76,
    "label": "calls",
    "to": 12
  }, {
    "from": 102,
    "label": "calls",
    "to": 12
  }, {
    "from": 112,
    "label": "calls",
    "to": 12
  }, {
    "from": 50,
    "label": "calls",
    "to": 175
  }, {
    "from": 131,
    "label": "calls",
    "to": 175
  }, {
    "from": 162,
    "label": "calls",
    "to": 175
  }, {
    "from": 162,
    "label": "calls",
    "to": 175
  }, {
    "from": 39,
    "label": "declares",
    "to": 40
  }, {
    "from": 39,
    "label": "declares",
    "to": 44
  }, {
    "from": 39,
    "label": "declares",
    "to": 50
  }, {
    "from": 39,
    "label": "declares",
    "to": 60
  }, {
    "from": 39,
    "label": "declares",
    "to": 65
  }, {
    "from": 39,
    "label": "declares",
    "to": 70
  }, {
    "from": 39,
    "label": "declares",
    "to": 73
  }, {
    "from": 39,
    "label": "declares",
    "to": 76
  }, {
    "from": 39,
    "label": "declares",
    "to": 82
  }, {
    "from": 39,
    "label": "declares",
    "to": 85
  }, {
    "from": 39,
    "label": "declares",
    "to": 87
  }, {
    "from": 39,
    "label": "declares",
    "to": 94
  }, {
    "from": 39,
    "label": "declares",
    "to": 97
  }, {
    "from": 39,
    "label": "declares",
    "to": 102
  }, {
    "from": 39,
    "label": "declares",
    "to": 112
  }, {
    "from": 39,
    "label": "declares",
    "to": 121
  }, {
    "from": 39,
    "label": "declares",
    "to": 123
  }, {
    "from": 39,
    "label": "declares",
    "to": 126
  }, {
    "from": 39,
    "label": "declares",
    "to": 129
  }, {
    "from": 39,
    "label": "declares",
    "to": 131
  }, {
    "from": 39,
    "label": "declares",
    "to": 147
  }, {
    "from": 39,
    "label": "declares",
    "to": 149
  }, {
    "from": 39,
    "label": "declares",
    "to": 162
  }, {
    "from": 39,
    "label": "declares",
    "to": 171
  }, {
    "from": 39,
    "label": "declares",
    "to": 173
  }, {
    "from": 1,
    "label": "contains",
    "to": 189
  }, {
    "from": 1,
    "label": "contains",
    "to": 190
  }, {
    "from": 189,
    "label": "initializes",
    "to": 191
  }, {
    "from": 189,
    "label": "initializes",
    "to": 192
  }, {
    "from": 189,
    "label": "initializes",
    "to": 193
  }, {
    "from": 190,
    "label": "initializes",
    "to": 194
  }, {
    "from": 190,
    "label": "initializes",
    "to": 195
  }, {
    "from": 190,
    "label": "initializes",
    "to": 196
  }, {
    "from": 1,
    "label": "contains",
    "to": 197
  }, {
    "from": 1,
    "label": "contains",
    "to": 198
  }, {
    "from": 197,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 197,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 197,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 204,
    "label": "assigns",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 204,
    "label": "assigns",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 198,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "requires",
    "to": 188
  }, {
    "from": 198,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "requires",
    "to": 187
  }, {
    "from": 198,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "requires",
    "to": 186
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tools",
    "type": "module"
  }, {
    "id": 2,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function dir_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n   return (pathname:gsub(\"/*$\", \"\"):match(\"(.*)[/]+[^/]*\")) or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function normalize(name)\r\n   local protocol, pathname = split_url(name)\r\n   pathname = pathname:gsub(\"\\\\\", \"/\"):gsub(\"(.)/*$\", \"%1\"):gsub(\"//\", \"/\")\r\n   if protocol ~= \"file\" then pathname = protocol ..\"://\"..pathname end\r\n   return pathname\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function Q(arg)\r\n   assert(type(arg) == \"string\")\r\n\r\n   -- FIXME Unix-specific\r\n   return \"'\" .. arg:gsub(\"'\", \"'\\\\''\") .. \"'\"\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function execute(command, ...)\r\n   assert(type(command) == \"string\")\r\n   return fs.execute_string(quote_args(command, ...))\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function execute_quiet(command, ...)\r\n   assert(type(command) == \"string\")\r\n   if cfg.verbose then -- omit silencing output\r\n      return fs.execute_string(quote_args(command, ...))\r\n   else\r\n      return fs.execute_string(fs.quiet(quote_args(command, ...)))\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function execute_string(cmd)\r\n   local code = os.execute(cmd)\r\n   return (code == 0 or code == true)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function current_dir()\r\n   return lfs.currentdir()\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function change_dir(d)\r\n   table.insert(dir_stack, lfs.currentdir())\r\n   d = dir.normalize(d)\r\n   return lfs.chdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function pop_dir()\r\n   local d = table.remove(dir_stack)\r\n   if d then\r\n      lfs.chdir(d)\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local function command_at(directory, cmd)\r\n   return \"cd \" .. fs.Q(directory) .. \" && \" .. cmd\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function current_dir()\r\n   local pipe = io.popen(vars.PWD)\r\n   local current = pipe:read(\"*l\")\r\n   pipe:close()\r\n   for _, directory in ipairs(dir_stack) do\r\n      current = fs.absolute_name(directory, current)\r\n   end\r\n   return current\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function execute_string(cmd)\r\n   local code = os.execute(command_at(fs.current_dir(), cmd))\r\n   if code == 0 or code == true then\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function change_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   if fs.is_dir(directory) then\r\n      table.insert(dir_stack, directory)\r\n      return true\r\n   end\r\n   return nil, \"directory not found: \"..directory\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function change_dir_to_root()\r\n   table.insert(dir_stack, \"/\")\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function pop_dir()\r\n   local directory = table.remove(dir_stack)\r\n   return directory ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function make_dir(directory)\r\n   assert(directory)\r\n   local ok, err = fs.execute(vars.MKDIR..\" -p\", directory)\r\n   if not ok then\r\n      err = \"failed making directory \"..directory\r\n   end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function remove_dir_if_empty(directory)\r\n   assert(directory)\r\n   fs.execute_quiet(vars.RMDIR, directory)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function remove_dir_tree_if_empty(directory)\r\n   assert(directory)\r\n   fs.execute_quiet(vars.RMDIR, \"-p\", directory)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function copy(src, dest, perm)\r\n   assert(src and dest)\r\n   if fs.execute(vars.CP, src, dest) then\r\n      if perm then\r\n         if fs.is_dir(dest) then\r\n            dest = dir.path(dest, dir.base_name(src))\r\n         end\r\n         if fs.chmod(dest, perm) then\r\n            return true\r\n         else\r\n            return false, \"Failed setting permissions of \"..dest\r\n         end\r\n      end\r\n      return true\r\n   else\r\n      return false, \"Failed copying \"..src..\" to \"..dest\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function copy_contents(src, dest)\r\n   assert(src and dest)\r\n   if fs.execute_quiet(vars.CP..\" -pPR \"..fs.Q(src)..\"/* \"..fs.Q(dest)) then\r\n      return true\r\n   else\r\n      return false, \"Failed copying \"..src..\" to \"..dest\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function delete(arg)\r\n   assert(arg)\r\n   assert(arg:sub(1,1) == \"/\")\r\n   fs.execute_quiet(vars.RM, \"-rf\", arg)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function list_dir(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   local pipe = io.popen(command_at(at, vars.LS))\r\n   for file in pipe:lines() do\r\n      table.insert(result, file)\r\n   end\r\n   pipe:close()\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function find(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   local pipe = io.popen(command_at(at, vars.FIND..\" * 2>/dev/null\"))\r\n   for file in pipe:lines() do\r\n      table.insert(result, file)\r\n   end\r\n   pipe:close()\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function zip(zipfile, ...)\r\n   return fs.execute(vars.ZIP..\" -r\", zipfile, ...)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function unzip(zipfile)\r\n   assert(zipfile)\r\n   return fs.execute_quiet(vars.UNZIP, zipfile)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function exists(file)\r\n   assert(file)\r\n   return fs.execute(vars.TEST, \"-e\", file)\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   return fs.execute(vars.TEST, \"-d\", file)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "function is_file(file)\r\n   assert(file)\r\n   return fs.execute(vars.TEST, \"-f\", file)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "function download(url, filename, cache)\r\n   assert(type(url) == \"string\")\r\n   assert(type(filename) == \"string\" or not filename)\r\n\r\n   filename = fs.absolute_name(filename or dir.base_name(url))\r\n\r\n   local ok\r\n   if cfg.downloader == \"wget\" then\r\n      local wget_cmd = vars.WGET..\" --no-check-certificate --no-cache --user-agent='\"..cfg.user_agent..\" via wget' --quiet \"\r\n      if cache then\r\n         -- --timestamping is incompatible with --output-document,\r\n         -- but that's not a problem for our use cases.\r\n         fs.change_dir(dir.dir_name(filename))\r\n         ok = fs.execute(wget_cmd..\" --timestamping \", url)\r\n         fs.pop_dir()\r\n      elseif filename then\r\n         ok = fs.execute(wget_cmd..\" --output-document \"..fs.Q(filename), url)\r\n      else\r\n         ok = fs.execute(wget_cmd, url)\r\n      end\r\n   elseif cfg.downloader == \"curl\" then\r\n      ok = fs.execute_string(vars.CURL..\" -L --user-agent '\"..cfg.user_agent..\" via curl' \"..fs.Q(url)..\" 2> /dev/null 1> \"..fs.Q(filename))\r\n   end\r\n   if ok then\r\n      return true, filename\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function chmod(pathname, mode)\r\n   if mode then \r\n      return fs.execute(vars.CHMOD, mode, pathname)\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "function apply_patch(patchname)\r\n   return fs.execute(vars.PATCH..\" -p1 -f -i \", patchname)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function unpack_archive(archive)\r\n   assert(type(archive) == \"string\")\r\n\r\n   local ok\r\n   if archive:match(\"%.tar%.gz$\") or archive:match(\"%.tgz$\") then\r\n         ok = fs.execute_string(vars.GUNZIP..\" -c \"..archive..\"|\"..vars.TAR..\" -xf -\")\r\n   elseif archive:match(\"%.tar%.bz2$\") then\r\n         ok = fs.execute_string(vars.BUNZIP2..\" -c \"..archive..\"|tar -xf -\")\r\n   elseif archive:match(\"%.zip$\") then\r\n      ok = fs.execute(vars.UNZIP, archive)\r\n   elseif archive:match(\"%.lua$\") or archive:match(\"%.c$\") then\r\n      -- Ignore .lua and .c files; they don't need to be extracted.\r\n      return true\r\n   else\r\n      local ext = archive:match(\".*(%..*)\")\r\n      return false, \"Unrecognized filename extension \"..(ext or \"\")\r\n   end\r\n   if not ok then\r\n      return false, \"Failed extracting \"..archive\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function get_md5(file)\r\n   local cmd = md5_cmd[cfg.md5checker]\r\n   if not cmd then return nil, \"no MD5 checker command configured\" end\r\n   local pipe = io.popen(cmd..\" \"..fs.absolute_name(file))\r\n   local computed = pipe:read(\"*a\")\r\n   pipe:close()\r\n   if computed then\r\n      computed = computed:match(\"(\"..(\"%x\"):rep(32)..\")\")\r\n   end\r\n   if computed then return computed end\r\n   return nil, \"Failed to compute MD5 hash for file \"..tostring(fs.absolute_name(file))\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function get_permissions(filename)\r\n   local pipe = io.popen(vars.STAT..\" \"..vars.STATFLAG..\" \"..fs.Q(filename))\r\n   local ret = pipe:read(\"*l\")\r\n   pipe:close()\r\n   return ret\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function browser(url)\r\n   return fs.execute(cfg.web_browser, url)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "function container"
  }, {
    "id": 40,
    "text": "local function strip_extension(filename)\r\n   assert(type(filename) == \"string\")\r\n\r\n   return (filename:gsub(\"%.[^.]+$\", \"\")) or filename\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert(type(filename) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function command_at(directory, cmd)\r\n   local drive = directory:match(\"^([A-Za-z]:)\")\r\n   cmd = \"cd \" .. fs.Q(directory) .. \" & \" .. cmd\r\n   if drive then\r\n      cmd = drive .. \" & \" .. cmd\r\n   end\r\n   return cmd\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local drive = directory:match(\"^([A-Za-z]:)\")",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "cmd = \"cd \" .. fs.Q(directory) .. \" & \" .. cmd",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if drive then\r\n      cmd = drive .. \" & \" .. cmd\r\n   end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "cmd = drive .. \" & \" .. cmd",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function current_dir()\r\n   local current = cfg.cache_pwd\r\n   if not current then\r\n      local pipe = io.popen(fs.Q(vars.PWD))\r\n      current = pipe:read(\"*l\")\r\n      pipe:close()\r\n      cfg.cache_pwd = current\r\n   end\r\n   for _, directory in ipairs(dir_stack) do\r\n      current = fs.absolute_name(directory, current)\r\n   end\r\n   return current\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local current = cfg.cache_pwd",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if not current then\r\n      local pipe = io.popen(fs.Q(vars.PWD))\r\n      current = pipe:read(\"*l\")\r\n      pipe:close()\r\n      cfg.cache_pwd = current\r\n   end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local pipe = io.popen(fs.Q(vars.PWD))",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "current = pipe:read(\"*l\")",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "pipe:close()",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "cfg.cache_pwd = current",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "for _, directory in ipairs(dir_stack) do\r\n      current = fs.absolute_name(directory, current)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 58,
    "text": "current = fs.absolute_name(directory, current)",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function execute_string(cmd)\r\n   cmd = command_at(fs.current_dir(), cmd)\r\n   local code = os.execute(cmd)\r\n   if code == 0 or code == true then\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "cmd = command_at(fs.current_dir(), cmd)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "local code = os.execute(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if code == 0 or code == true then\r\n      return true\r\n   else\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function change_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   if fs.is_dir(directory) then\r\n      table.insert(dir_stack, directory)\r\n      return true\r\n   end\r\n   return nil, \"directory not found: \"..directory\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "assert(type(directory) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "if fs.is_dir(directory) then\r\n      table.insert(dir_stack, directory)\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "table.insert(dir_stack, directory)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function change_dir_to_root()\r\n   table.insert(dir_stack, \"/\")\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "table.insert(dir_stack, \"/\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function pop_dir()\r\n   local directory = table.remove(dir_stack)\r\n   return directory ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "local directory = table.remove(dir_stack)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function make_dir(directory)\r\n   assert(directory)\r\n   directory = dir.normalize(directory)\r\n   fs.execute_quiet(fs.Q(vars.MKDIR)..\" -p \", directory)\r\n   if not fs.is_dir(directory) then\r\n      return false, \"failed making directory \"..directory\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "assert(directory)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "directory = dir.normalize(directory)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "fs.execute_quiet(fs.Q(vars.MKDIR)..\" -p \", directory)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "if not fs.is_dir(directory) then\r\n      return false, \"failed making directory \"..directory\r\n   end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function remove_dir_if_empty(directory)\r\n   assert(directory)\r\n   fs.execute_quiet(fs.Q(vars.RMDIR), directory)\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "fs.execute_quiet(fs.Q(vars.RMDIR), directory)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function remove_dir_tree_if_empty(directory)\r\n   assert(directory)\r\n   fs.execute_quiet(fs.Q(vars.RMDIR), directory)\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function copy(src, dest)\r\n   assert(src and dest)\r\n   if dest:match(\"[/\\\\]$\") then dest = dest:sub(1, -2) end\r\n   local ok = fs.execute(fs.Q(vars.CP), src, dest)\r\n   if ok then\r\n      return true\r\n   else\r\n      return false, \"Failed copying \"..src..\" to \"..dest\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "assert(src and dest)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "if dest:match(\"[/\\\\]$\") then dest = dest:sub(1, -2) end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "dest = dest:sub(1, -2)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "local ok = fs.execute(fs.Q(vars.CP), src, dest)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if ok then\r\n      return true\r\n   else\r\n      return false, \"Failed copying \"..src..\" to \"..dest\r\n   end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function copy_contents(src, dest)\r\n   assert(src and dest)\r\n   if fs.execute_quiet(fs.Q(vars.CP)..\" -dR \"..src..\"\\\\*.* \"..fs.Q(dest)) then\r\n      return true\r\n   else\r\n      return false, \"Failed copying \"..src..\" to \"..dest\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "if fs.execute_quiet(fs.Q(vars.CP)..\" -dR \"..src..\"\\\\*.* \"..fs.Q(dest)) then\r\n      return true\r\n   else\r\n      return false, \"Failed copying \"..src..\" to \"..dest\r\n   end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function delete(arg)\r\n   assert(arg)\r\n   assert(arg:match(\"^[a-zA-Z]?:?[\\\\/]\"))\r\n   fs.execute_quiet(\"if exist \"..fs.Q(arg..\"\\\\\")..\" ( RMDIR /S /Q \"..fs.Q(arg)..\" ) else ( DEL /Q /F \"..fs.Q(arg)..\" )\")\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "assert(arg)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert(arg:match(\"^[a-zA-Z]?:?[\\\\/]\"))",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "fs.execute_quiet(\"if exist \"..fs.Q(arg..\"\\\\\")..\" ( RMDIR /S /Q \"..fs.Q(arg)..\" ) else ( DEL /Q /F \"..fs.Q(arg)..\" )\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function list_dir(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   local pipe = io.popen(command_at(at, fs.Q(vars.LS)))\r\n   for file in pipe:lines() do\r\n      table.insert(result, file)\r\n   end\r\n   pipe:close()\r\n\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "assert(type(at) == \"string\" or not at)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "if not at then\r\n      at = fs.current_dir()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "at = fs.current_dir()",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "if not fs.is_dir(at) then\r\n      return {}\r\n   end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local pipe = io.popen(command_at(at, fs.Q(vars.LS)))",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "for file in pipe:lines() do\r\n      table.insert(result, file)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 110,
    "text": "table.insert(result, file)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function find(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   local pipe = io.popen(command_at(at, fs.Q(vars.FIND)..\" 2> NUL\"))\r\n   for file in pipe:lines() do\r\n      -- Windows find is a bit different\r\n      local first_two = file:sub(1,2)\r\n      if first_two == \".\\\\\" or first_two == \"./\" then file=file:sub(3) end\r\n      if file ~= \".\" then\r\n         table.insert(result, (file:gsub(\"\\\\\", \"/\")))\r\n      end\r\n   end\r\n   pipe:close()\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local pipe = io.popen(command_at(at, fs.Q(vars.FIND)..\" 2> NUL\"))",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "for file in pipe:lines() do\r\n      -- Windows find is a bit different\r\n      local first_two = file:sub(1,2)\r\n      if first_two == \".\\\\\" or first_two == \"./\" then file=file:sub(3) end\r\n      if file ~= \".\" then\r\n         table.insert(result, (file:gsub(\"\\\\\", \"/\")))\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 115,
    "text": "local first_two = file:sub(1,2)",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if first_two == \".\\\\\" or first_two == \"./\" then file=file:sub(3) end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "file=file:sub(3)",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "if file ~= \".\" then\r\n         table.insert(result, (file:gsub(\"\\\\\", \"/\")))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "table.insert(result, (file:gsub(\"\\\\\", \"/\")))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function zip(zipfile, ...)\r\n   return fs.execute_quiet(fs.Q(vars.SEVENZ)..\" -aoa a -tzip\", zipfile, ...)\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function unzip(zipfile)\r\n   assert(zipfile)\r\n   return fs.execute_quiet(fs.Q(vars.SEVENZ)..\" -aoa x\", zipfile)\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "assert(zipfile)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   return fs.execute_quiet(\"if not exist \" .. fs.Q(file..\"\\\\\")..\" invalidcommandname\")\r\nend",
    "type": "function"
  }, {
    "id": 127,
    "text": "assert(file)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function is_file(file)\r\n   assert(file)\r\n   return fs.execute(fs.Q(vars.TEST)..\" -f\", file)\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function download(url, filename, cache)\r\n   assert(type(url) == \"string\")\r\n   assert(type(filename) == \"string\" or not filename)\r\n\r\n   filename = fs.absolute_name(filename or dir.base_name(url))\r\n\r\n   local ok   \r\n   if cfg.downloader == \"wget\" then\r\n      local wget_cmd = fs.Q(vars.WGET)..\" --no-check-certificate --no-cache --user-agent=\\\"\"..cfg.user_agent..\" via wget\\\" --quiet \"\r\n      if cache then\r\n         -- --timestamping is incompatible with --output-document,\r\n         -- but that's not a problem for our use cases.\r\n         fs.change_dir(dir.dir_name(filename))\r\n         ok = fs.execute(wget_cmd..\" --timestamping \"..fs.Q(url)..\" 2> NUL 1> NUL\")\r\n         fs.pop_dir()\r\n      elseif filename then\r\n         ok = fs.execute(wget_cmd..\" --output-document \"..fs.Q(filename)..\" \"..fs.Q(url)..\" 2> NUL 1> NUL\")\r\n      else\r\n         ok = fs.execute(wget_cmd..fs.Q(url)..\" 2> NUL 1> NUL\")\r\n      end\r\n   elseif cfg.downloader == \"curl\" then\r\n      ok = fs.execute_string(fs.Q(vars.CURL)..\" -L --user-agent \\\"\"..cfg.user_agent..\" via curl\\\" \"..fs.Q(url)..\" 2> NUL 1> \"..fs.Q(filename))\r\n   end\r\n   if ok then\r\n      return true, filename\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "assert(type(url) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "assert(type(filename) == \"string\" or not filename)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "filename = fs.absolute_name(filename or dir.base_name(url))",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "local ok",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "if cfg.downloader == \"wget\" then\r\n      local wget_cmd = fs.Q(vars.WGET)..\" --no-check-certificate --no-cache --user-agent=\\\"\"..cfg.user_agent..\" via wget\\\" --quiet \"\r\n      if cache then\r\n         -- --timestamping is incompatible with --output-document,\r\n         -- but that's not a problem for our use cases.\r\n         fs.change_dir(dir.dir_name(filename))\r\n         ok = fs.execute(wget_cmd..\" --timestamping \"..fs.Q(url)..\" 2> NUL 1> NUL\")\r\n         fs.pop_dir()\r\n      elseif filename then\r\n         ok = fs.execute(wget_cmd..\" --output-document \"..fs.Q(filename)..\" \"..fs.Q(url)..\" 2> NUL 1> NUL\")\r\n      else\r\n         ok = fs.execute(wget_cmd..fs.Q(url)..\" 2> NUL 1> NUL\")\r\n      end\r\n   elseif cfg.downloader == \"curl\" then\r\n      ok = fs.execute_string(fs.Q(vars.CURL)..\" -L --user-agent \\\"\"..cfg.user_agent..\" via curl\\\" \"..fs.Q(url)..\" 2> NUL 1> \"..fs.Q(filename))\r\n   end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "local wget_cmd = fs.Q(vars.WGET)..\" --no-check-certificate --no-cache --user-agent=\\\"\"..cfg.user_agent..\" via wget\\\" --quiet \"",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if cache then\r\n         -- --timestamping is incompatible with --output-document,\r\n         -- but that's not a problem for our use cases.\r\n         fs.change_dir(dir.dir_name(filename))\r\n         ok = fs.execute(wget_cmd..\" --timestamping \"..fs.Q(url)..\" 2> NUL 1> NUL\")\r\n         fs.pop_dir()\r\n      elseif filename then\r\n         ok = fs.execute(wget_cmd..\" --output-document \"..fs.Q(filename)..\" \"..fs.Q(url)..\" 2> NUL 1> NUL\")\r\n      else\r\n         ok = fs.execute(wget_cmd..fs.Q(url)..\" 2> NUL 1> NUL\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "fs.change_dir(dir.dir_name(filename))",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "ok = fs.execute(wget_cmd..\" --timestamping \"..fs.Q(url)..\" 2> NUL 1> NUL\")",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "fs.pop_dir()",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "ok = fs.execute(wget_cmd..\" --output-document \"..fs.Q(filename)..\" \"..fs.Q(url)..\" 2> NUL 1> NUL\")",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "ok = fs.execute(wget_cmd..fs.Q(url)..\" 2> NUL 1> NUL\")",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "ok = fs.execute_string(fs.Q(vars.CURL)..\" -L --user-agent \\\"\"..cfg.user_agent..\" via curl\\\" \"..fs.Q(url)..\" 2> NUL 1> \"..fs.Q(filename))",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "if ok then\r\n      return true, filename\r\n   else\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "local function gunzip(archive)\r\n  return fs.execute_quiet(fs.Q(vars.SEVENZ)..\" -aoa x\", archive)\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function unpack_archive(archive)\r\n   assert(type(archive) == \"string\")\r\n\r\n   local ok\r\n   local sevenzx = fs.Q(vars.SEVENZ)..\" -aoa x\"\r\n   if archive:match(\"%.tar%.gz$\") then\r\n      ok = gunzip(archive)\r\n      if ok then\r\n         ok = fs.execute_quiet(sevenzx, strip_extension(archive))\r\n      end\r\n   elseif archive:match(\"%.tgz$\") then\r\n      ok = gunzip(archive)\r\n      if ok then\r\n         ok = fs.execute_quiet(sevenzx, strip_extension(archive)..\".tar\")\r\n      end\r\n   elseif archive:match(\"%.tar%.bz2$\") then\r\n      ok = fs.execute_quiet(sevenzx, archive)\r\n      if ok then\r\n         ok = fs.execute_quiet(sevenzx, strip_extension(archive))\r\n      end\r\n   elseif archive:match(\"%.zip$\") then\r\n      ok = fs.execute_quiet(sevenzx, archive)\r\n   elseif archive:match(\"%.lua$\") or archive:match(\"%.c$\") then\r\n      -- Ignore .lua and .c files; they don't need to be extracted.\r\n      return true\r\n   else\r\n      local ext = archive:match(\".*(%..*)\")\r\n      return false, \"Unrecognized filename extension \"..(ext or \"\")\r\n   end\r\n   if not ok then\r\n      return false, \"Failed extracting \"..archive\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "assert(type(archive) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "local sevenzx = fs.Q(vars.SEVENZ)..\" -aoa x\"",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if archive:match(\"%.tar%.gz$\") then\r\n      ok = gunzip(archive)\r\n      if ok then\r\n         ok = fs.execute_quiet(sevenzx, strip_extension(archive))\r\n      end\r\n   elseif archive:match(\"%.tgz$\") then\r\n      ok = gunzip(archive)\r\n      if ok then\r\n         ok = fs.execute_quiet(sevenzx, strip_extension(archive)..\".tar\")\r\n      end\r\n   elseif archive:match(\"%.tar%.bz2$\") then\r\n      ok = fs.execute_quiet(sevenzx, archive)\r\n      if ok then\r\n         ok = fs.execute_quiet(sevenzx, strip_extension(archive))\r\n      end\r\n   elseif archive:match(\"%.zip$\") then\r\n      ok = fs.execute_quiet(sevenzx, archive)\r\n   elseif archive:match(\"%.lua$\") or archive:match(\"%.c$\") then\r\n      -- Ignore .lua and .c files; they don't need to be extracted.\r\n      return true\r\n   else\r\n      local ext = archive:match(\".*(%..*)\")\r\n      return false, \"Unrecognized filename extension \"..(ext or \"\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "ok = gunzip(archive)",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "if ok then\r\n         ok = fs.execute_quiet(sevenzx, strip_extension(archive))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "ok = fs.execute_quiet(sevenzx, strip_extension(archive))",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "if ok then\r\n         ok = fs.execute_quiet(sevenzx, strip_extension(archive)..\".tar\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "ok = fs.execute_quiet(sevenzx, strip_extension(archive)..\".tar\")",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "ok = fs.execute_quiet(sevenzx, archive)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "local ext = archive:match(\".*(%..*)\")",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "if not ok then\r\n      return false, \"Failed extracting \"..archive\r\n   end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function get_md5(file)\r\n   local cmd = md5_cmd[cfg.md5checker]\r\n   if not cmd then return nil, \"no MD5 checker command configured\" end\r\n   local pipe = io.popen(cmd..\" \"..fs.Q(fs.absolute_name(file)))\r\n   local computed = pipe:read(\"*a\")\r\n   pipe:close()\r\n   if computed then\r\n      computed = computed:match(\"(\"..(\"%x\"):rep(32)..\")\")\r\n   end\r\n   if computed then return computed end\r\n   return nil, \"Failed to compute MD5 hash for file \"..tostring(fs.absolute_name(file))\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "local cmd = md5_cmd[cfg.md5checker]",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "if not cmd then return nil, \"no MD5 checker command configured\" end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "local pipe = io.popen(cmd..\" \"..fs.Q(fs.absolute_name(file)))",
    "type": "statement:localassign"
  }, {
    "id": 166,
    "text": "local computed = pipe:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "if computed then\r\n      computed = computed:match(\"(\"..(\"%x\"):rep(32)..\")\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "computed = computed:match(\"(\"..(\"%x\"):rep(32)..\")\")",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "if computed then return computed end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function exists(file)\r\n   assert(file)\r\n   return fs.execute_quiet(\"if not exist \" .. fs.Q(file) .. \" invalidcommandname\")\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function browser(url)\r\n   return fs.execute(cfg.web_browser..\" \"..url)\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "absolute_name",
    "type": "global function"
  }, {
    "id": 176,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 177,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 178,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 179,
    "text": "module",
    "type": "global function"
  }, {
    "id": 180,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 181,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 182,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 183,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 184,
    "text": "type",
    "type": "global function"
  }, {
    "id": 185,
    "text": "require",
    "type": "global function"
  }, {
    "id": 186,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 187,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 188,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 189,
    "text": "",
    "type": "variable container"
  }, {
    "id": 190,
    "text": "",
    "type": "require container"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "variable container"
  }, {
    "id": 198,
    "text": "",
    "type": "require container"
  }, {
    "id": 199,
    "text": "",
    "type": "local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 201,
    "text": "",
    "type": "local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "n/a"
  }, {
    "id": 203,
    "text": "",
    "type": "local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 205,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 206,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 207,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 208,
    "text": "",
    "type": "string"
  }, {
    "id": 209,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 210,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 211,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "require local variable"
  } ]
}