{
  "_filename": "validate.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/validate.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 22
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 22
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 47,
    "label": "has",
    "to": 22
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 50,
    "label": "has",
    "to": 22
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 22
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 61,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 61,
    "label": "has",
    "to": 80
  }, {
    "from": 61,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 61,
    "label": "has",
    "to": 83
  }, {
    "from": 53,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 82
  }, {
    "from": 53,
    "label": "has",
    "to": 85
  }, {
    "from": 53,
    "label": "has",
    "to": 86
  }, {
    "from": 53,
    "label": "has",
    "to": 87
  }, {
    "from": 53,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 53,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 67
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 53,
    "label": "has",
    "to": 95
  }, {
    "from": 53,
    "label": "has",
    "to": 96
  }, {
    "from": 53,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 53,
    "label": "has",
    "to": 100
  }, {
    "from": 53,
    "label": "has",
    "to": 22
  }, {
    "from": 53,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 22
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 34,
    "label": "calls",
    "to": 13
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 16
  }, {
    "from": 102,
    "label": "calls",
    "to": 16
  }, {
    "from": 53,
    "label": "calls",
    "to": 10
  }, {
    "from": 34,
    "label": "calls",
    "to": 12
  }, {
    "from": 53,
    "label": "calls",
    "to": 114
  }, {
    "from": 53,
    "label": "calls",
    "to": 114
  }, {
    "from": 53,
    "label": "calls",
    "to": 114
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 115
  }, {
    "from": 53,
    "label": "calls",
    "to": 8
  }, {
    "from": 53,
    "label": "calls",
    "to": 8
  }, {
    "from": 53,
    "label": "calls",
    "to": 4
  }, {
    "from": 47,
    "label": "calls",
    "to": 3
  }, {
    "from": 53,
    "label": "calls",
    "to": 42
  }, {
    "from": 102,
    "label": "calls",
    "to": 53
  }, {
    "from": 53,
    "label": "calls",
    "to": 24
  }, {
    "from": 53,
    "label": "calls",
    "to": 34
  }, {
    "from": 53,
    "label": "calls",
    "to": 34
  }, {
    "from": 102,
    "label": "calls",
    "to": 15
  }, {
    "from": 53,
    "label": "calls",
    "to": 18
  }, {
    "from": 53,
    "label": "calls",
    "to": 18
  }, {
    "from": 107,
    "label": "calls",
    "to": 111
  }, {
    "from": 50,
    "label": "calls",
    "to": 11
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 53,
    "label": "calls",
    "to": 110
  }, {
    "from": 53,
    "label": "calls",
    "to": 110
  }, {
    "from": 53,
    "label": "calls",
    "to": 9
  }, {
    "from": 19,
    "label": "calls",
    "to": 112
  }, {
    "from": 53,
    "label": "calls",
    "to": 112
  }, {
    "from": 53,
    "label": "calls",
    "to": 112
  }, {
    "from": 24,
    "label": "calls",
    "to": 113
  }, {
    "from": 53,
    "label": "calls",
    "to": 47
  }, {
    "from": 53,
    "label": "calls",
    "to": 7
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 47,
    "label": "calls",
    "to": 17
  }, {
    "from": 50,
    "label": "calls",
    "to": 17
  }, {
    "from": 53,
    "label": "calls",
    "to": 50
  }, {
    "from": 53,
    "label": "calls",
    "to": 19
  }, {
    "from": 19,
    "label": "calls",
    "to": 5
  }, {
    "from": 42,
    "label": "calls",
    "to": 2
  }, {
    "from": 53,
    "label": "calls",
    "to": 14
  }, {
    "from": 53,
    "label": "calls",
    "to": 109
  }, {
    "from": 53,
    "label": "calls",
    "to": 109
  }, {
    "from": 53,
    "label": "calls",
    "to": 109
  }, {
    "from": 53,
    "label": "calls",
    "to": 108
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 107,
    "label": "declares",
    "to": 19
  }, {
    "from": 107,
    "label": "declares",
    "to": 24
  }, {
    "from": 107,
    "label": "declares",
    "to": 34
  }, {
    "from": 107,
    "label": "declares",
    "to": 42
  }, {
    "from": 107,
    "label": "declares",
    "to": 47
  }, {
    "from": 107,
    "label": "declares",
    "to": 50
  }, {
    "from": 107,
    "label": "declares",
    "to": 53
  }, {
    "from": 107,
    "label": "declares",
    "to": 102
  }, {
    "from": 1,
    "label": "contains",
    "to": 123
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 123,
    "label": "initializes",
    "to": 125
  }, {
    "from": 123,
    "label": "initializes",
    "to": 126
  }, {
    "from": 124,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "requires",
    "to": 119
  }, {
    "from": 124,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "requires",
    "to": 118
  }, {
    "from": 124,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "requires",
    "to": 120
  }, {
    "from": 124,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "requires",
    "to": 116
  }, {
    "from": 124,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "requires",
    "to": 122
  }, {
    "from": 124,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "requires",
    "to": 121
  }, {
    "from": 124,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "requires",
    "to": 117
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "validate",
    "type": "module"
  }, {
    "id": 2,
    "text": "function build_rockspec(rockspec_file, need_to_fetch, minimal_mode, deps_mode)\r\n   assert(type(rockspec_file) == \"string\")\r\n   assert(type(need_to_fetch) == \"boolean\")\r\n\r\n   local rockspec, err, errcode = fetch.load_rockspec(rockspec_file)\r\n   if err then\r\n      return nil, err, errcode\r\n   elseif not rockspec.build then\r\n      return nil, \"Rockspec error: build table not specified\"\r\n   elseif not rockspec.build.type then\r\n      return nil, \"Rockspec error: build type not specified\"\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      local ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then\r\n         return nil, err, errcode\r\n      end\r\n   end\r\n\r\n   local ok, err, errcode = deps.check_external_deps(rockspec, \"build\")\r\n   if err then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   local name, version = rockspec.name, rockspec.version\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n\r\n   if not minimal_mode then\r\n      local _, source_dir\r\n      if need_to_fetch then\r\n         ok, source_dir, errcode = fetch.fetch_sources(rockspec, true)\r\n         if not ok then\r\n            return nil, source_dir, errcode\r\n         end\r\n         local ok, err = fs.change_dir(source_dir)\r\n         if not ok then return nil, err end\r\n      elseif rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n      end\r\n      fs.change_dir(rockspec.source.dir)\r\n   end\r\n   \r\n   local dirs = {\r\n      lua = { name = path.lua_dir(name, version), is_module_path = true },\r\n      lib = { name = path.lib_dir(name, version), is_module_path = true },\r\n      conf = { name = path.conf_dir(name, version), is_module_path = false },\r\n      bin = { name = path.bin_dir(name, version), is_module_path = false },\r\n   }\r\n   \r\n   for _, d in pairs(dirs) do\r\n      local ok, err = fs.make_dir(d.name)\r\n      if not ok then return nil, err end\r\n   end\r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n\r\n   local build = rockspec.build\r\n   \r\n   if not minimal_mode then\r\n      ok, err = apply_patches(rockspec)\r\n      if err then\r\n         return nil, err\r\n      end\r\n   end\r\n   \r\n   if build.type ~= \"none\" then\r\n\r\n      -- Temporary compatibility\r\n      if build.type == \"module\" then\r\n         util.printout(\"Do not use 'module' as a build type. Use 'builtin' instead.\")\r\n         build.type = \"builtin\"\r\n      end\r\n\r\n      if cfg.accepted_build_types and util.array_contains(cfg.accepted_build_types, build.type) then\r\n         return nil, \"This rockspec uses the '\"..build.type..\"' build type, which is blocked by the 'accepted_build_types' setting in your LuaRocks configuration.\"\r\n      end\r\n\r\n      local build_type\r\n      ok, build_type = pcall(require, \"luarocks.build.\" .. build.type)\r\n      if not ok or not type(build_type) == \"table\" then\r\n         return nil, \"Failed initializing build back-end for build type '\"..build.type..\"': \"..build_type\r\n      end\r\n  \r\n      ok, err = build_type.run(rockspec)\r\n      if not ok then\r\n         return nil, \"Build error: \" .. err\r\n      end\r\n   end\r\n\r\n   if build.install then\r\n      for id, install_dir in pairs(dirs) do\r\n         ok, err = install_files(build.install[id], install_dir.name, install_dir.is_module_path)\r\n         if not ok then \r\n            return nil, err\r\n         end\r\n      end\r\n   end\r\n   \r\n   local copy_directories = build.copy_directories\r\n   local copying_default = false\r\n   if not copy_directories then\r\n      copy_directories = {\"doc\"}\r\n      copying_default = true\r\n   end\r\n\r\n   for _, copy_dir in pairs(copy_directories) do\r\n      if fs.is_dir(copy_dir) then\r\n         local dest = dir.path(path.install_dir(name, version), copy_dir)\r\n         fs.make_dir(dest)\r\n         fs.copy_contents(copy_dir, dest)\r\n      else\r\n         if not copying_default then\r\n            return nil, \"Directory '\"..copy_dir..\"' not found\"\r\n         end\r\n      end\r\n   end\r\n\r\n   for _, d in pairs(dirs) do\r\n      fs.remove_dir_if_empty(d.name)\r\n   end\r\n\r\n   fs.pop_dir()\r\n   \r\n   fs.copy(rockspec.local_filename, path.rockspec_file(name, version))\r\n   if need_to_fetch then\r\n      fs.pop_dir()\r\n   end\r\n\r\n   ok, err = manif.make_rock_manifest(name, version)\r\n   if err then return nil, err end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n\r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n\r\n   local license = \"\"\r\n   if rockspec.description and rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now built and installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function build_rock(rock_file, need_to_fetch, deps_mode)\r\n   assert(type(rock_file) == \"string\")\r\n   assert(type(need_to_fetch) == \"boolean\")\r\n  \r\n   local unpack_dir, err, errcode = fetch.fetch_and_unpack_rock(rock_file)\r\n   if not unpack_dir then\r\n      return nil, err, errcode\r\n   end\r\n   local rockspec_file = path.rockspec_name_from_rock(rock_file)\r\n   local ok, err = fs.change_dir(unpack_dir)\r\n   if not ok then return nil, err end\r\n   local ok, err, errcode = build_rockspec(rockspec_file, need_to_fetch, false, deps_mode)\r\n   fs.pop_dir()\r\n   return ok, err, errcode\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function split_url(url)\r\n   assert(type(url) == \"string\")\r\n   \r\n   local protocol, pathname = url:match(\"^([^:]*)://(.*)\")\r\n   if not protocol then\r\n      protocol = \"file\"\r\n      pathname = url\r\n   end\r\n   return protocol, pathname\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function make_temp_dir(name)\r\n   assert(type(name) == \"string\")\r\n   name = dir.normalize(name)\r\n\r\n   local temp_dir = (os.getenv(\"TMP\") or \"/tmp\") .. \"/luarocks_\" .. name:gsub(dir.separator, \"_\") .. \"-\" .. tostring(math.floor(math.random() * 10000))\r\n   local ok, err = fs.make_dir(temp_dir)\r\n   if ok then\r\n      return temp_dir\r\n   else\r\n      return nil, err\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function pop_dir()\r\n   local d = table.remove(dir_stack)\r\n   if d then\r\n      lfs.chdir(d)\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function delete(name)\r\n   name = dir.normalize(name)\r\n   recursive_delete(name)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function list_dir(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   at = dir.normalize(at)\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   for file in lfs.dir(at) do\r\n      if file ~= \".\" and file ~= \"..\" then\r\n         table.insert(result, file)\r\n      end\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function install_binary_rock(rock_file, deps_mode)\r\n   assert(type(rock_file) == \"string\")\r\n\r\n   local name, version, arch = path.parse_name(rock_file)\r\n   if not name then\r\n      return nil, \"Filename \"..rock_file..\" does not match format 'name-version-revision.arch.rock'.\"\r\n   end\r\n   \r\n   if arch ~= \"all\" and arch ~= cfg.arch then\r\n      return nil, \"Incompatible architecture \"..arch, \"arch\"\r\n   end\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n   \r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n   \r\n   local ok, err, errcode = fetch.fetch_and_unpack_rock(rock_file, path.install_dir(name, version))\r\n   if not ok then return nil, err, errcode end\r\n   \r\n   local rockspec, err, errcode = fetch.load_rockspec(path.rockspec_file(name, version))\r\n   if err then\r\n      return nil, \"Failed loading rockspec for installed package: \"..err, errcode\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      ok, err, errcode = deps.check_external_deps(rockspec, \"install\")\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   -- For compatibility with .rock files built with LuaRocks 1\r\n   if not fs.exists(path.rock_manifest_file(name, version)) then\r\n      ok, err = manif.make_rock_manifest(name, version)\r\n      if err then return nil, err end\r\n   end\r\n\r\n   if deps_mode ~= \"none\" then\r\n      ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   local wrap_bin_scripts = true\r\n   if rockspec.deploy and rockspec.deploy.wrap_bin_scripts == false then\r\n      wrap_bin_scripts = false\r\n   end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n\r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n   \r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n   \r\n   local license = \"\"\r\n   if rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function rocks_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.rocks_subdir)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.rocks_dir or dir.path(tree.root, cfg.rocks_subdir)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function deploy_bin_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, \"bin\")\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.bin_dir or dir.path(tree.root, \"bin\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function run_scheduled_functions()\r\n   local fs = require(\"luarocks.fs\")\r\n   fs.change_dir_to_root()\r\n   for i = #scheduled_functions, 1, -1 do\r\n      local item = scheduled_functions[i]\r\n      item.fn(unpack(item.args))\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function title(msg, porcelain, underline)\r\n   if porcelain then return end\r\n   printout()\r\n   printout(msg)\r\n   printout((underline or \"-\"):rep(#msg))\r\n   printout()\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local function save_settings(repo)\r\n   local protocol, path = dir.split_url(repo)\r\n   table.insert(cfg.rocks_servers, 1, protocol..\"://\"..path)\r\n   return {\r\n      root_dir = cfg.root_dir,\r\n      rocks_dir = cfg.rocks_dir,\r\n      deploy_bin_dir = cfg.deploy_bin_dir,\r\n      deploy_lua_dir = cfg.deploy_lua_dir,\r\n      deploy_lib_dir = cfg.deploy_lib_dir,\r\n   }\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local protocol, path = dir.split_url(repo)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "table.insert(cfg.rocks_servers, 1, protocol..\"://\"..path)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function restore_settings(settings)\r\n   cfg.root_dir = settings.root_dir\r\n   cfg.rocks_dir = settings.rocks_dir\r\n   cfg.deploy_bin_dir = settings.deploy_bin_dir\r\n   cfg.deploy_lua_dir = settings.deploy_lua_dir\r\n   cfg.deploy_lib_dir = settings.deploy_lib_dir\r\n   cfg.variables.ROCKS_TREE = settings.rocks_dir\r\n   cfg.variables.SCRIPTS_DIR = settings.deploy_bin_dir\r\n   table.remove(cfg.rocks_servers, 1)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "cfg.root_dir = settings.root_dir",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "cfg.rocks_dir = settings.rocks_dir",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "cfg.deploy_bin_dir = settings.deploy_bin_dir",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "cfg.deploy_lua_dir = settings.deploy_lua_dir",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "cfg.deploy_lib_dir = settings.deploy_lib_dir",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "cfg.variables.ROCKS_TREE = settings.rocks_dir",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "cfg.variables.SCRIPTS_DIR = settings.deploy_bin_dir",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "table.remove(cfg.rocks_servers, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function prepare_sandbox(file)\r\n   local root_dir = fs.make_temp_dir(file):gsub(\"/+$\", \"\")\r\n   cfg.root_dir = root_dir\r\n   cfg.rocks_dir = path.rocks_dir(root_dir)\r\n   cfg.deploy_bin_dir = path.deploy_bin_dir(root_dir)\r\n   cfg.variables.ROCKS_TREE = cfg.rocks_dir\r\n   cfg.variables.SCRIPTS_DIR = cfg.deploy_bin_dir\r\n   return root_dir\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "local root_dir = fs.make_temp_dir(file):gsub(\"/+$\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "cfg.root_dir = root_dir",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "cfg.rocks_dir = path.rocks_dir(root_dir)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "cfg.deploy_bin_dir = path.deploy_bin_dir(root_dir)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "cfg.variables.ROCKS_TREE = cfg.rocks_dir",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "cfg.variables.SCRIPTS_DIR = cfg.deploy_bin_dir",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function validate_rockspec(file)\r\n   local ok, err, errcode = build.build_rockspec(file, true, \"one\")\r\n   if not ok then\r\n      util.printerr(err)\r\n   end\r\n   return ok, err, errcode\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local ok, err, errcode = build.build_rockspec(file, true, \"one\")",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if not ok then\r\n      util.printerr(err)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "util.printerr(err)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function validate_src_rock(file)\r\n   local ok, err, errcode = build.build_rock(file, false, \"one\")\r\n   if not ok then\r\n      util.printerr(err)\r\n   end\r\n   return ok, err, errcode\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local ok, err, errcode = build.build_rock(file, false, \"one\")",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function validate_rock(file)\r\n   local ok, err, errcode = install.install_binary_rock(file, \"one\")\r\n   if not ok then\r\n      util.printerr(err)\r\n   end\r\n   return ok, err, errcode\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local ok, err, errcode = install.install_binary_rock(file, \"one\")",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function validate(repo, flags)\r\n   local results = {\r\n      ok = {}\r\n   }\r\n   local settings = save_settings(repo)\r\n   local sandbox\r\n   if flags[\"quick\"] then\r\n      sandbox = prepare_sandbox(\"luarocks_validate\")\r\n   end\r\n   if not fs.exists(repo) then\r\n      return nil, repo..\" is not a local repository.\"\r\n   end\r\n   for _, file in pairs(fs.list_dir(repo)) do for _=1,1 do\r\n      if file == \"manifest\" or file == \"index.html\" then\r\n         break -- continue for\r\n      end\r\n      local pathname = fs.absolute_name(dir.path(repo, file))\r\n      if not flags[\"quick\"] then\r\n         sandbox = prepare_sandbox(file)\r\n      end\r\n      local ok, err, errcode\r\n      util.printout()\r\n      util.printout(\"Verifying \"..pathname)\r\n      if file:match(\"%.rockspec$\") then\r\n         ok, err, errcode = validate_rockspec(pathname, \"one\")\r\n      elseif file:match(\"%.src%.rock$\") then\r\n         ok, err, errcode = validate_src_rock(pathname)\r\n      elseif file:match(\"%.rock$\") then\r\n         ok, err, errcode = validate_rock(pathname)\r\n      end\r\n      if ok then\r\n         table.insert(results.ok, {file=file} )\r\n      else\r\n         if not errcode then\r\n            errcode = \"misc\"\r\n         end\r\n         if not results[errcode] then\r\n            results[errcode] = {}\r\n         end\r\n         table.insert(results[errcode], {file=file, err=err} )\r\n      end\r\n      util.run_scheduled_functions()\r\n      if not flags[\"quick\"] then\r\n         fs.delete(sandbox)\r\n      end\r\n      repeat until not fs.pop_dir()\r\n   end end\r\n   if flags[\"quick\"] then\r\n      fs.delete(sandbox)\r\n   end\r\n   restore_settings(settings)\r\n   util.title(\"Results:\")\r\n   util.printout(\"OK: \"..tostring(#results.ok))\r\n   for _, entry in ipairs(results.ok) do\r\n      util.printout(entry.file)\r\n   end\r\n   for errcode, errors in pairs(results) do\r\n      if errcode ~= \"ok\" then\r\n         util.printout()\r\n         util.printout(errcode..\" errors: \"..tostring(#errors))\r\n         for _, entry in ipairs(errors) do\r\n            util.printout(entry.file, entry.err)\r\n         end\r\n      end\r\n   end\r\n\r\n   util.title(\"Summary:\")\r\n   local total = 0\r\n   for errcode, errors in pairs(results) do\r\n      util.printout(errcode..\": \"..tostring(#errors))\r\n      total = total + #errors\r\n   end\r\n   util.printout(\"Total: \"..total)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local results = {\r\n      ok = {}\r\n   }",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local settings = save_settings(repo)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local sandbox",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if flags[\"quick\"] then\r\n      sandbox = prepare_sandbox(\"luarocks_validate\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "sandbox = prepare_sandbox(\"luarocks_validate\")",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "if not fs.exists(repo) then\r\n      return nil, repo..\" is not a local repository.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "for _, file in pairs(fs.list_dir(repo)) do for _=1,1 do\r\n      if file == \"manifest\" or file == \"index.html\" then\r\n         break -- continue for\r\n      end\r\n      local pathname = fs.absolute_name(dir.path(repo, file))\r\n      if not flags[\"quick\"] then\r\n         sandbox = prepare_sandbox(file)\r\n      end\r\n      local ok, err, errcode\r\n      util.printout()\r\n      util.printout(\"Verifying \"..pathname)\r\n      if file:match(\"%.rockspec$\") then\r\n         ok, err, errcode = validate_rockspec(pathname, \"one\")\r\n      elseif file:match(\"%.src%.rock$\") then\r\n         ok, err, errcode = validate_src_rock(pathname)\r\n      elseif file:match(\"%.rock$\") then\r\n         ok, err, errcode = validate_rock(pathname)\r\n      end\r\n      if ok then\r\n         table.insert(results.ok, {file=file} )\r\n      else\r\n         if not errcode then\r\n            errcode = \"misc\"\r\n         end\r\n         if not results[errcode] then\r\n            results[errcode] = {}\r\n         end\r\n         table.insert(results[errcode], {file=file, err=err} )\r\n      end\r\n      util.run_scheduled_functions()\r\n      if not flags[\"quick\"] then\r\n         fs.delete(sandbox)\r\n      end\r\n      repeat until not fs.pop_dir()\r\n   end end",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "for _=1,1 do\r\n      if file == \"manifest\" or file == \"index.html\" then\r\n         break -- continue for\r\n      end\r\n      local pathname = fs.absolute_name(dir.path(repo, file))\r\n      if not flags[\"quick\"] then\r\n         sandbox = prepare_sandbox(file)\r\n      end\r\n      local ok, err, errcode\r\n      util.printout()\r\n      util.printout(\"Verifying \"..pathname)\r\n      if file:match(\"%.rockspec$\") then\r\n         ok, err, errcode = validate_rockspec(pathname, \"one\")\r\n      elseif file:match(\"%.src%.rock$\") then\r\n         ok, err, errcode = validate_src_rock(pathname)\r\n      elseif file:match(\"%.rock$\") then\r\n         ok, err, errcode = validate_rock(pathname)\r\n      end\r\n      if ok then\r\n         table.insert(results.ok, {file=file} )\r\n      else\r\n         if not errcode then\r\n            errcode = \"misc\"\r\n         end\r\n         if not results[errcode] then\r\n            results[errcode] = {}\r\n         end\r\n         table.insert(results[errcode], {file=file, err=err} )\r\n      end\r\n      util.run_scheduled_functions()\r\n      if not flags[\"quick\"] then\r\n         fs.delete(sandbox)\r\n      end\r\n      repeat until not fs.pop_dir()\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 62,
    "text": "if file == \"manifest\" or file == \"index.html\" then\r\n         break -- continue for\r\n      end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "local pathname = fs.absolute_name(dir.path(repo, file))",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if not flags[\"quick\"] then\r\n         sandbox = prepare_sandbox(file)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "sandbox = prepare_sandbox(file)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local ok, err, errcode",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "util.printout()",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "util.printout(\"Verifying \"..pathname)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "if file:match(\"%.rockspec$\") then\r\n         ok, err, errcode = validate_rockspec(pathname, \"one\")\r\n      elseif file:match(\"%.src%.rock$\") then\r\n         ok, err, errcode = validate_src_rock(pathname)\r\n      elseif file:match(\"%.rock$\") then\r\n         ok, err, errcode = validate_rock(pathname)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "ok, err, errcode = validate_rockspec(pathname, \"one\")",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "ok, err, errcode = validate_src_rock(pathname)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "ok, err, errcode = validate_rock(pathname)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "if ok then\r\n         table.insert(results.ok, {file=file} )\r\n      else\r\n         if not errcode then\r\n            errcode = \"misc\"\r\n         end\r\n         if not results[errcode] then\r\n            results[errcode] = {}\r\n         end\r\n         table.insert(results[errcode], {file=file, err=err} )\r\n      end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "table.insert(results.ok, {file=file} )",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "if not errcode then\r\n            errcode = \"misc\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "errcode = \"misc\"",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "if not results[errcode] then\r\n            results[errcode] = {}\r\n         end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "results[errcode] = {}",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "table.insert(results[errcode], {file=file, err=err} )",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "util.run_scheduled_functions()",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "if not flags[\"quick\"] then\r\n         fs.delete(sandbox)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "fs.delete(sandbox)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "repeat until not fs.pop_dir()",
    "type": "statement:repeat"
  }, {
    "id": 84,
    "text": "if flags[\"quick\"] then\r\n      fs.delete(sandbox)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "restore_settings(settings)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "util.title(\"Results:\")",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "util.printout(\"OK: \"..tostring(#results.ok))",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "for _, entry in ipairs(results.ok) do\r\n      util.printout(entry.file)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 89,
    "text": "util.printout(entry.file)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "for errcode, errors in pairs(results) do\r\n      if errcode ~= \"ok\" then\r\n         util.printout()\r\n         util.printout(errcode..\" errors: \"..tostring(#errors))\r\n         for _, entry in ipairs(errors) do\r\n            util.printout(entry.file, entry.err)\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 91,
    "text": "if errcode ~= \"ok\" then\r\n         util.printout()\r\n         util.printout(errcode..\" errors: \"..tostring(#errors))\r\n         for _, entry in ipairs(errors) do\r\n            util.printout(entry.file, entry.err)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "util.printout(errcode..\" errors: \"..tostring(#errors))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "for _, entry in ipairs(errors) do\r\n            util.printout(entry.file, entry.err)\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "util.printout(entry.file, entry.err)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "util.title(\"Summary:\")",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "local total = 0",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "for errcode, errors in pairs(results) do\r\n      util.printout(errcode..\": \"..tostring(#errors))\r\n      total = total + #errors\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 98,
    "text": "util.printout(errcode..\": \"..tostring(#errors))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "total = total + #errors",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "util.printout(\"Total: \"..total)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function run(...)\r\n   local flags, repo = util.parse_flags(...)\r\n   repo = repo or cfg.rocks_dir\r\n\r\n   util.printout(\"Verifying contents of \"..repo)\r\n\r\n   return validate(repo, flags)\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local flags, repo = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "repo = repo or cfg.rocks_dir",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "util.printout(\"Verifying contents of \"..repo)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "",
    "type": "function container"
  }, {
    "id": 108,
    "text": "absolute_name",
    "type": "global function"
  }, {
    "id": 109,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 110,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 111,
    "text": "module",
    "type": "global function"
  }, {
    "id": 112,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 113,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 114,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 115,
    "text": "require",
    "type": "global function"
  }, {
    "id": 116,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 117,
    "text": "util)",
    "type": "module"
  }, {
    "id": 118,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 119,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 120,
    "text": "path)",
    "type": "module"
  }, {
    "id": 121,
    "text": "install)",
    "type": "module"
  }, {
    "id": 122,
    "text": "build)",
    "type": "module"
  }, {
    "id": 123,
    "text": "",
    "type": "variable container"
  }, {
    "id": 124,
    "text": "",
    "type": "require container"
  }, {
    "id": 125,
    "text": "",
    "type": "global variable"
  }, {
    "id": 126,
    "text": "",
    "type": "global variable"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  } ]
}