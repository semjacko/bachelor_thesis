{
  "_filename": "pe-parser.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/win32/bin/pe-parser.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 11
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 23
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 11
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 35,
    "label": "has",
    "to": 11
  }, {
    "from": 35,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 11
  }, {
    "from": 48,
    "label": "has",
    "to": 11
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 11
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 11
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 11
  }, {
    "from": 64,
    "label": "has",
    "to": 71
  }, {
    "from": 64,
    "label": "has",
    "to": 72
  }, {
    "from": 64,
    "label": "has",
    "to": 73
  }, {
    "from": 64,
    "label": "has",
    "to": 74
  }, {
    "from": 64,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 11
  }, {
    "from": 64,
    "label": "has",
    "to": 76
  }, {
    "from": 64,
    "label": "has",
    "to": 77
  }, {
    "from": 64,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 78,
    "label": "has",
    "to": 86
  }, {
    "from": 78,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 78,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 64,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 64,
    "label": "has",
    "to": 97
  }, {
    "from": 64,
    "label": "has",
    "to": 98
  }, {
    "from": 64,
    "label": "has",
    "to": 99
  }, {
    "from": 64,
    "label": "has",
    "to": 100
  }, {
    "from": 64,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 64,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 64,
    "label": "has",
    "to": 11
  }, {
    "from": 64,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 11
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 115,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 115,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 115,
    "label": "has",
    "to": 137
  }, {
    "from": 115,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 115,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 141,
    "label": "has",
    "to": 147
  }, {
    "from": 141,
    "label": "has",
    "to": 148
  }, {
    "from": 141,
    "label": "has",
    "to": 11
  }, {
    "from": 141,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 149,
    "label": "has",
    "to": 154
  }, {
    "from": 141,
    "label": "has",
    "to": 11
  }, {
    "from": 141,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 141,
    "label": "has",
    "to": 11
  }, {
    "from": 141,
    "label": "has",
    "to": 11
  }, {
    "from": 141,
    "label": "has",
    "to": 158
  }, {
    "from": 28,
    "label": "calls",
    "to": 2
  }, {
    "from": 159,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 160
  }, {
    "from": 22,
    "label": "calls",
    "to": 160
  }, {
    "from": 28,
    "label": "calls",
    "to": 160
  }, {
    "from": 35,
    "label": "calls",
    "to": 160
  }, {
    "from": 159,
    "label": "calls",
    "to": 169
  }, {
    "from": 159,
    "label": "calls",
    "to": 169
  }, {
    "from": 159,
    "label": "calls",
    "to": 170
  }, {
    "from": 159,
    "label": "calls",
    "to": 22
  }, {
    "from": 159,
    "label": "calls",
    "to": 57
  }, {
    "from": 13,
    "label": "calls",
    "to": 161
  }, {
    "from": 2,
    "label": "calls",
    "to": 164
  }, {
    "from": 159,
    "label": "calls",
    "to": 35
  }, {
    "from": 159,
    "label": "calls",
    "to": 35
  }, {
    "from": 159,
    "label": "calls",
    "to": 35
  }, {
    "from": 159,
    "label": "calls",
    "to": 35
  }, {
    "from": 159,
    "label": "calls",
    "to": 35
  }, {
    "from": 159,
    "label": "calls",
    "to": 35
  }, {
    "from": 159,
    "label": "calls",
    "to": 35
  }, {
    "from": 35,
    "label": "calls",
    "to": 162
  }, {
    "from": 159,
    "label": "calls",
    "to": 162
  }, {
    "from": 159,
    "label": "calls",
    "to": 162
  }, {
    "from": 159,
    "label": "calls",
    "to": 162
  }, {
    "from": 159,
    "label": "calls",
    "to": 162
  }, {
    "from": 159,
    "label": "calls",
    "to": 162
  }, {
    "from": 159,
    "label": "calls",
    "to": 162
  }, {
    "from": 141,
    "label": "calls",
    "to": 162
  }, {
    "from": 141,
    "label": "calls",
    "to": 162
  }, {
    "from": 2,
    "label": "calls",
    "to": 165
  }, {
    "from": 2,
    "label": "calls",
    "to": 167
  }, {
    "from": 111,
    "label": "calls",
    "to": 167
  }, {
    "from": 159,
    "label": "calls",
    "to": 167
  }, {
    "from": 159,
    "label": "calls",
    "to": 167
  }, {
    "from": 159,
    "label": "calls",
    "to": 167
  }, {
    "from": 159,
    "label": "calls",
    "to": 167
  }, {
    "from": 159,
    "label": "calls",
    "to": 167
  }, {
    "from": 141,
    "label": "calls",
    "to": 141
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 159,
    "label": "calls",
    "to": 13
  }, {
    "from": 141,
    "label": "calls",
    "to": 64
  }, {
    "from": 13,
    "label": "calls",
    "to": 172
  }, {
    "from": 159,
    "label": "calls",
    "to": 172
  }, {
    "from": 159,
    "label": "calls",
    "to": 172
  }, {
    "from": 159,
    "label": "calls",
    "to": 172
  }, {
    "from": 159,
    "label": "calls",
    "to": 172
  }, {
    "from": 22,
    "label": "calls",
    "to": 168
  }, {
    "from": 28,
    "label": "calls",
    "to": 168
  }, {
    "from": 35,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 166
  }, {
    "from": 159,
    "label": "calls",
    "to": 111
  }, {
    "from": 159,
    "label": "calls",
    "to": 111
  }, {
    "from": 159,
    "label": "calls",
    "to": 111
  }, {
    "from": 159,
    "label": "calls",
    "to": 111
  }, {
    "from": 159,
    "label": "calls",
    "to": 111
  }, {
    "from": 159,
    "label": "calls",
    "to": 111
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 159,
    "label": "calls",
    "to": 171
  }, {
    "from": 2,
    "label": "calls",
    "to": 163
  }, {
    "from": 1,
    "label": "contains",
    "to": 159
  }, {
    "from": 159,
    "label": "declares",
    "to": 2
  }, {
    "from": 159,
    "label": "declares",
    "to": 13
  }, {
    "from": 159,
    "label": "declares",
    "to": 22
  }, {
    "from": 159,
    "label": "declares",
    "to": 28
  }, {
    "from": 159,
    "label": "declares",
    "to": 35
  }, {
    "from": 159,
    "label": "declares",
    "to": 48
  }, {
    "from": 159,
    "label": "declares",
    "to": 57
  }, {
    "from": 159,
    "label": "declares",
    "to": 64
  }, {
    "from": 159,
    "label": "declares",
    "to": 111
  }, {
    "from": 159,
    "label": "declares",
    "to": 115
  }, {
    "from": 159,
    "label": "declares",
    "to": 141
  }, {
    "from": 1,
    "label": "contains",
    "to": 173
  }, {
    "from": 1,
    "label": "contains",
    "to": 174
  }, {
    "from": 173,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 173,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 173,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 173,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 173,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 1,
    "label": "provides",
    "to": 185
  }, {
    "from": 175,
    "label": "represents",
    "to": 186
  }, {
    "from": 185,
    "label": "provides",
    "to": 186
  }, {
    "from": 175,
    "label": "contains",
    "to": 2
  }, {
    "from": 175,
    "label": "contains",
    "to": 13
  }, {
    "from": 175,
    "label": "contains",
    "to": 48
  }, {
    "from": 175,
    "label": "contains",
    "to": 64
  }, {
    "from": 175,
    "label": "contains",
    "to": 115
  }, {
    "from": 175,
    "label": "contains",
    "to": 141
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pe-parser",
    "type": "module"
  }, {
    "id": 2,
    "text": "function M.toHex(IN, len)\r\n    local B,K,OUT,I,D=16,\"0123456789abcdef\",\"\",0\r\n    while IN>0 do\r\n        I=I+1\r\n        IN,D=math.floor(IN/B),math.fmod(IN,B)+1\r\n        OUT=string.sub(K,D,D)..OUT\r\n    end\r\n    len = len or string.len(OUT)\r\n    if len<1 then len = 1 end\r\n    return (string.rep(\"0\",len) .. OUT):sub(-len,-1)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local B,K,OUT,I,D=16,\"0123456789abcdef\",\"\",0",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "while IN>0 do\r\n        I=I+1\r\n        IN,D=math.floor(IN/B),math.fmod(IN,B)+1\r\n        OUT=string.sub(K,D,D)..OUT\r\n    end",
    "type": "statement:while"
  }, {
    "id": 5,
    "text": "I=I+1",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "IN,D=math.floor(IN/B),math.fmod(IN,B)+1",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "OUT=string.sub(K,D,D)..OUT",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "len = len or string.len(OUT)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if len<1 then len = 1 end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "len = 1",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function M.toDec(IN)\r\n  assert(type(IN)==\"string\")\r\n  local OUT = 0\r\n  IN = IN:lower()\r\n  while #IN > 0 do\r\n    local b = string.find(\"0123456789abcdef\",IN:sub(1,1))\r\n    OUT = OUT * 16 + (b-1)\r\n    IN = IN:sub(2,-1)\r\n  end\r\n  return OUT\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert(type(IN)==\"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local OUT = 0",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "IN = IN:lower()",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "while #IN > 0 do\r\n    local b = string.find(\"0123456789abcdef\",IN:sub(1,1))\r\n    OUT = OUT * 16 + (b-1)\r\n    IN = IN:sub(2,-1)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 18,
    "text": "local b = string.find(\"0123456789abcdef\",IN:sub(1,1))",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "OUT = OUT * 16 + (b-1)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "IN = IN:sub(2,-1)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function get_int(str)\r\n  -- convert a byte-sequence to an integer\r\n  assert(str)\r\n  local r = 0\r\n  for i = #str, 1, -1 do\r\n    r = r*256 + string.byte(str,i,i)\r\n  end\r\n  return r\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "assert(str)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "local r = 0",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "for i = #str, 1, -1 do\r\n    r = r*256 + string.byte(str,i,i)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 26,
    "text": "r = r*256 + string.byte(str,i,i)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function get_hex(str)\r\n  -- convert a byte-sequence to a hex string\r\n  assert(str)\r\n  local r = \"\"\r\n  for i = #str, 1, -1 do\r\n    r = r .. M.toHex(string.byte(str,i,i),2)\r\n  end\r\n  while (#r > 1) and (r:sub(1,1) == \"0\") do\r\n    r = r:sub(2, -1)\r\n  end\r\n  return r\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local r = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for i = #str, 1, -1 do\r\n    r = r .. M.toHex(string.byte(str,i,i),2)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 31,
    "text": "r = r .. M.toHex(string.byte(str,i,i),2)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "while (#r > 1) and (r:sub(1,1) == \"0\") do\r\n    r = r:sub(2, -1)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 33,
    "text": "r = r:sub(2, -1)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function get_list(list, f, add_to)\r\n  -- list: list of tables with 'size' and 'name' and is_str\r\n  -- f: file to read from\r\n  -- add_to: table to add results to (optional)\r\n  local r = add_to or {}\r\n  for i, t in ipairs(list) do\r\n    assert(r[t.name] == nil, \"Value for '\"..t.name..\"' already set\")\r\n    local val,err = f:read(t.size)  -- read specified size in bytes\r\n    val = val or \"\\0\"    \r\n    if t.is_str then   -- entry is marked as a string value, read as such\r\n      for i = 1, #val do\r\n        if val:sub(i,i) == \"\\0\" then\r\n          r[t.name] = val:sub(1,i-1)\r\n          break\r\n        end\r\n      end\r\n      r[t.name] = r[t.name] or val\r\n    else  -- entry not marked, so always read as hex value\r\n      r[t.name] = get_hex(val)\r\n    end\r\n  end\r\n  return r\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local r = add_to or {}",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "for i, t in ipairs(list) do\r\n    assert(r[t.name] == nil, \"Value for '\"..t.name..\"' already set\")\r\n    local val,err = f:read(t.size)  -- read specified size in bytes\r\n    val = val or \"\\0\"    \r\n    if t.is_str then   -- entry is marked as a string value, read as such\r\n      for i = 1, #val do\r\n        if val:sub(i,i) == \"\\0\" then\r\n          r[t.name] = val:sub(1,i-1)\r\n          break\r\n        end\r\n      end\r\n      r[t.name] = r[t.name] or val\r\n    else  -- entry not marked, so always read as hex value\r\n      r[t.name] = get_hex(val)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "assert(r[t.name] == nil, \"Value for '\"..t.name..\"' already set\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local val,err = f:read(t.size)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "val = val or \"\\0\"",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "if t.is_str then   -- entry is marked as a string value, read as such\r\n      for i = 1, #val do\r\n        if val:sub(i,i) == \"\\0\" then\r\n          r[t.name] = val:sub(1,i-1)\r\n          break\r\n        end\r\n      end\r\n      r[t.name] = r[t.name] or val\r\n    else  -- entry not marked, so always read as hex value\r\n      r[t.name] = get_hex(val)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "for i = 1, #val do\r\n        if val:sub(i,i) == \"\\0\" then\r\n          r[t.name] = val:sub(1,i-1)\r\n          break\r\n        end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 43,
    "text": "if val:sub(i,i) == \"\\0\" then\r\n          r[t.name] = val:sub(1,i-1)\r\n          break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "r[t.name] = val:sub(1,i-1)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "r[t.name] = r[t.name] or val",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "r[t.name] = get_hex(val)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function(obj, RVA)\r\n  -- given an object with a section table, and an RVA, it returns\r\n  -- the fileoffset for the data\r\n  if type(RVA)==\"string\" then RVA = M.toDec(RVA) end\r\n  local section\r\n  for i, s in ipairs(obj.Sections) do\r\n    if M.toDec(s.VirtualAddress) <= RVA and M.toDec(s.VirtualAddress) + M.toDec(s.VirtualSize) >= RVA then\r\n      section = s\r\n      break\r\n    end\r\n  end\r\n  if not section then return nil, \"No match RVA with Section list, RVA out of bounds\" end\r\n  return RVA - M.toDec(section.VirtualAddress) + M.toDec(section.PointerToRawData)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if type(RVA)==\"string\" then RVA = M.toDec(RVA) end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "RVA = M.toDec(RVA)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local section",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "for i, s in ipairs(obj.Sections) do\r\n    if M.toDec(s.VirtualAddress) <= RVA and M.toDec(s.VirtualAddress) + M.toDec(s.VirtualSize) >= RVA then\r\n      section = s\r\n      break\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "if M.toDec(s.VirtualAddress) <= RVA and M.toDec(s.VirtualAddress) + M.toDec(s.VirtualSize) >= RVA then\r\n      section = s\r\n      break\r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "section = s",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if not section then return nil, \"No match RVA with Section list, RVA out of bounds\" end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function readstring(f)\r\n  -- reads a null-terminated string from the current file posistion\r\n  local name = \"\"\r\n  while true do\r\n    local c = f:read(1)\r\n    if c == \"\\0\" then break end\r\n    name = name .. c\r\n  end\r\n  return name\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local name = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "while true do\r\n    local c = f:read(1)\r\n    if c == \"\\0\" then break end\r\n    name = name .. c\r\n  end",
    "type": "statement:while"
  }, {
    "id": 60,
    "text": "local c = f:read(1)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if c == \"\\0\" then break end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "name = name .. c",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function(target)\r\n  \r\n  local list = {    -- list of known architectures\r\n    [332]   = \"x86\",       -- IMAGE_FILE_MACHINE_I386\r\n    [512]   = \"x86_64\",    -- IMAGE_FILE_MACHINE_IA64\r\n    [34404] = \"x86_64\",    -- IMAGE_FILE_MACHINE_AMD64\r\n  }\r\n  \r\n  local f, err = io.open(target, \"rb\")\r\n  if not f then return nil, err end\r\n  \r\n  local MZ = f:read(2)\r\n  if MZ ~= \"MZ\" then\r\n    f:close()\r\n    return nil, \"Not a valid image\"\r\n  end\r\n  \r\n  f:seek(\"set\", 60)                    -- position of PE header position\r\n  local peoffset = get_int(f:read(4))  -- read position of PE header\r\n  \r\n  f:seek(\"set\", peoffset)              -- move to position of PE header\r\n  local out = get_list({\r\n        { size = 4,\r\n          name = \"PEheader\",\r\n          is_str = true },\r\n        { size = 2,\r\n          name = \"Machine\" },\r\n        { size = 2,\r\n          name = \"NumberOfSections\"},\r\n        { size = 4,\r\n          name = \"TimeDateStamp\" },\r\n        { size = 4,\r\n          name = \"PointerToSymbolTable\"},\r\n        { size = 4,\r\n          name = \"NumberOfSymbols\"},\r\n        { size = 2,\r\n          name = \"SizeOfOptionalHeader\"},\r\n        { size = 2,\r\n          name = \"Characteristics\"},\r\n      }, f)\r\n  \r\n  if out.PEheader ~= \"PE\" then\r\n    f:close()\r\n    return nil, \"Invalid PE header\"\r\n  end\r\n  out.PEheader = nil  -- remove it, has no value\r\n  out.dump = M.dump  -- export dump function as a method\r\n  \r\n  if M.toDec(out.SizeOfOptionalHeader) > 0 then\r\n    -- parse optional header; standard\r\n    get_list({\r\n        { size = 2,\r\n          name = \"Magic\" },\r\n        { size = 1,\r\n          name = \"MajorLinkerVersion\"},\r\n        { size = 1,\r\n          name = \"MinorLinkerVersion\"},\r\n        { size = 4,\r\n          name = \"SizeOfCode\"},\r\n        { size = 4,\r\n          name = \"SizeOfInitializedData\"},\r\n        { size = 4,\r\n          name = \"SizeOfUninitializedData\"},\r\n        { size = 4,\r\n          name = \"AddressOfEntryPoint\"},\r\n        { size = 4,\r\n          name = \"BaseOfCode\"},\r\n      }, f, out)\r\n    local plus = (out.Magic == \"20b\")\r\n    if not plus then -- plain PE32, not PE32+\r\n      get_list({\r\n          { size = 4,\r\n            name = \"BaseOfData\" },\r\n        }, f, out)\r\n    end\r\n    -- parse optional header; windows-fields\r\n    local plussize = 4\r\n    if plus then plussize = 8 end\r\n    get_list({\r\n        { size = plussize,\r\n          name = \"ImageBase\"},\r\n        { size = 4,\r\n          name = \"SectionAlignment\"},\r\n        { size = 4,\r\n          name = \"FileAlignment\"},\r\n        { size = 2,\r\n          name = \"MajorOperatingSystemVersion\"},\r\n        { size = 2,\r\n          name = \"MinorOperatingSystemVersion\"},\r\n        { size = 2,\r\n          name = \"MajorImageVersion\"},\r\n        { size = 2,\r\n          name = \"MinorImageVersion\"},\r\n        { size = 2,\r\n          name = \"MajorSubsystemVersion\"},\r\n        { size = 2,\r\n          name = \"MinorSubsystemVersion\"},\r\n        { size = 4,\r\n          name = \"Win32VersionValue\"},\r\n        { size = 4,\r\n          name = \"SizeOfImage\"},\r\n        { size = 4,\r\n          name = \"SizeOfHeaders\"},\r\n        { size = 4,\r\n          name = \"CheckSum\"},\r\n        { size = 2,\r\n          name = \"Subsystem\"},\r\n        { size = 2,\r\n          name = \"DllCharacteristics\"},\r\n        { size = plussize,\r\n          name = \"SizeOfStackReserve\"},\r\n        { size = plussize,\r\n          name = \"SizeOfStackCommit\"},\r\n        { size = plussize,\r\n          name = \"SizeOfHeapReserve\"},\r\n        { size = plussize,\r\n          name = \"SizeOfHeapCommit\"},\r\n        { size = 4,\r\n          name = \"LoaderFlags\"},\r\n        { size = 4,\r\n          name = \"NumberOfRvaAndSizes\"},\r\n      }, f, out)\r\n    -- Read data directory entries\r\n    for i = 1, M.toDec(out.NumberOfRvaAndSizes) do\r\n      out.DataDirectory = out.DataDirectory or {}\r\n      out.DataDirectory[i] = get_list({\r\n          { size = 4,\r\n            name = \"VirtualAddress\"},\r\n          { size = 4,\r\n            name = \"Size\"},\r\n        }, f)\r\n    end\r\n    for i, name in ipairs{\"ExportTable\", \"ImportTable\", \"ResourceTable\",\r\n        \"ExceptionTable\", \"CertificateTable\", \"BaseRelocationTable\",\r\n        \"Debug\", \"Architecture\", \"GlobalPtr\", \"TLSTable\",\r\n        \"LoadConfigTable\", \"BoundImport\", \"IAT\",\r\n        \"DelayImportDescriptor\", \"CLRRuntimeHeader\", \"Reserved\"} do\r\n      out.DataDirectory[name] = out.DataDirectory[i]\r\n      if out.DataDirectory[name] then out.DataDirectory[name].name = name end\r\n    end\r\n  end\r\n  \r\n  -- parse section table\r\n  for i = 1, M.toDec(out.NumberOfSections) do\r\n    out.Sections = out.Sections or {}\r\n    out.Sections[i] = get_list({\r\n        { size = 8,\r\n          name = \"Name\",\r\n          is_str = true},\r\n        { size = 4,\r\n          name = \"VirtualSize\"},\r\n        { size = 4,\r\n          name = \"VirtualAddress\"},\r\n        { size = 4,\r\n          name = \"SizeOfRawData\"},\r\n        { size = 4,\r\n          name = \"PointerToRawData\"},\r\n        { size = 4,\r\n          name = \"PointerToRelocations\"},\r\n        { size = 4,\r\n          name = \"PointerToLinenumbers\"},\r\n        { size = 2,\r\n          name = \"NumberOfRelocations\"},\r\n        { size = 2,\r\n          name = \"NumberOfLinenumbers\"},\r\n        { size = 4,\r\n          name = \"Characteristics\"},\r\n      }, f)\r\n  end\r\n  -- we now have section data, so add RVA convertion method\r\n  out.get_fileoffset = M.get_fileoffset\r\n  \r\n  -- get the import table\r\n  f:seek(\"set\", out:get_fileoffset(out.DataDirectory.ImportTable.VirtualAddress))\r\n  local done = false\r\n  local cnt = 1\r\n  while not done do\r\n    local dll = get_list({\r\n          { size = 4,\r\n            name = \"ImportLookupTableRVA\"},\r\n          { size = 4,\r\n            name = \"TimeDateStamp\"},\r\n          { size = 4,\r\n            name = \"ForwarderChain\"},\r\n          { size = 4,\r\n            name = \"NameRVA\"},\r\n          { size = 4,\r\n            name = \"ImportAddressTableRVA\"},\r\n        }, f)\r\n    if M.toDec(dll.NameRVA) == 0 then\r\n      -- this is the final NULL entry, so we're done\r\n      done = true\r\n    else\r\n      -- store the import entry\r\n      out.DataDirectory.ImportTable[cnt] = dll\r\n      cnt = cnt + 1\r\n    end\r\n  end\r\n  -- resolve imported DLL names\r\n  for i, dll in ipairs(out.DataDirectory.ImportTable) do\r\n    f:seek(\"set\", out:get_fileoffset(dll.NameRVA))\r\n    dll.Name = readstring(f)\r\n  end\r\n  \r\n  f:close()\r\n  return out\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "local list = {    -- list of known architectures\r\n    [332]   = \"x86\",       -- IMAGE_FILE_MACHINE_I386\r\n    [512]   = \"x86_64\",    -- IMAGE_FILE_MACHINE_IA64\r\n    [34404] = \"x86_64\",    -- IMAGE_FILE_MACHINE_AMD64\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local f, err = io.open(target, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if not f then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "local MZ = f:read(2)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if MZ ~= \"MZ\" then\r\n    f:close()\r\n    return nil, \"Not a valid image\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "f:seek(\"set\", 60)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "local peoffset = get_int(f:read(4))",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "f:seek(\"set\", peoffset)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "local out = get_list({\r\n        { size = 4,\r\n          name = \"PEheader\",\r\n          is_str = true },\r\n        { size = 2,\r\n          name = \"Machine\" },\r\n        { size = 2,\r\n          name = \"NumberOfSections\"},\r\n        { size = 4,\r\n          name = \"TimeDateStamp\" },\r\n        { size = 4,\r\n          name = \"PointerToSymbolTable\"},\r\n        { size = 4,\r\n          name = \"NumberOfSymbols\"},\r\n        { size = 2,\r\n          name = \"SizeOfOptionalHeader\"},\r\n        { size = 2,\r\n          name = \"Characteristics\"},\r\n      }, f)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if out.PEheader ~= \"PE\" then\r\n    f:close()\r\n    return nil, \"Invalid PE header\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "out.PEheader = nil",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "out.dump = M.dump",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if M.toDec(out.SizeOfOptionalHeader) > 0 then\r\n    -- parse optional header; standard\r\n    get_list({\r\n        { size = 2,\r\n          name = \"Magic\" },\r\n        { size = 1,\r\n          name = \"MajorLinkerVersion\"},\r\n        { size = 1,\r\n          name = \"MinorLinkerVersion\"},\r\n        { size = 4,\r\n          name = \"SizeOfCode\"},\r\n        { size = 4,\r\n          name = \"SizeOfInitializedData\"},\r\n        { size = 4,\r\n          name = \"SizeOfUninitializedData\"},\r\n        { size = 4,\r\n          name = \"AddressOfEntryPoint\"},\r\n        { size = 4,\r\n          name = \"BaseOfCode\"},\r\n      }, f, out)\r\n    local plus = (out.Magic == \"20b\")\r\n    if not plus then -- plain PE32, not PE32+\r\n      get_list({\r\n          { size = 4,\r\n            name = \"BaseOfData\" },\r\n        }, f, out)\r\n    end\r\n    -- parse optional header; windows-fields\r\n    local plussize = 4\r\n    if plus then plussize = 8 end\r\n    get_list({\r\n        { size = plussize,\r\n          name = \"ImageBase\"},\r\n        { size = 4,\r\n          name = \"SectionAlignment\"},\r\n        { size = 4,\r\n          name = \"FileAlignment\"},\r\n        { size = 2,\r\n          name = \"MajorOperatingSystemVersion\"},\r\n        { size = 2,\r\n          name = \"MinorOperatingSystemVersion\"},\r\n        { size = 2,\r\n          name = \"MajorImageVersion\"},\r\n        { size = 2,\r\n          name = \"MinorImageVersion\"},\r\n        { size = 2,\r\n          name = \"MajorSubsystemVersion\"},\r\n        { size = 2,\r\n          name = \"MinorSubsystemVersion\"},\r\n        { size = 4,\r\n          name = \"Win32VersionValue\"},\r\n        { size = 4,\r\n          name = \"SizeOfImage\"},\r\n        { size = 4,\r\n          name = \"SizeOfHeaders\"},\r\n        { size = 4,\r\n          name = \"CheckSum\"},\r\n        { size = 2,\r\n          name = \"Subsystem\"},\r\n        { size = 2,\r\n          name = \"DllCharacteristics\"},\r\n        { size = plussize,\r\n          name = \"SizeOfStackReserve\"},\r\n        { size = plussize,\r\n          name = \"SizeOfStackCommit\"},\r\n        { size = plussize,\r\n          name = \"SizeOfHeapReserve\"},\r\n        { size = plussize,\r\n          name = \"SizeOfHeapCommit\"},\r\n        { size = 4,\r\n          name = \"LoaderFlags\"},\r\n        { size = 4,\r\n          name = \"NumberOfRvaAndSizes\"},\r\n      }, f, out)\r\n    -- Read data directory entries\r\n    for i = 1, M.toDec(out.NumberOfRvaAndSizes) do\r\n      out.DataDirectory = out.DataDirectory or {}\r\n      out.DataDirectory[i] = get_list({\r\n          { size = 4,\r\n            name = \"VirtualAddress\"},\r\n          { size = 4,\r\n            name = \"Size\"},\r\n        }, f)\r\n    end\r\n    for i, name in ipairs{\"ExportTable\", \"ImportTable\", \"ResourceTable\",\r\n        \"ExceptionTable\", \"CertificateTable\", \"BaseRelocationTable\",\r\n        \"Debug\", \"Architecture\", \"GlobalPtr\", \"TLSTable\",\r\n        \"LoadConfigTable\", \"BoundImport\", \"IAT\",\r\n        \"DelayImportDescriptor\", \"CLRRuntimeHeader\", \"Reserved\"} do\r\n      out.DataDirectory[name] = out.DataDirectory[i]\r\n      if out.DataDirectory[name] then out.DataDirectory[name].name = name end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "get_list({\r\n        { size = 2,\r\n          name = \"Magic\" },\r\n        { size = 1,\r\n          name = \"MajorLinkerVersion\"},\r\n        { size = 1,\r\n          name = \"MinorLinkerVersion\"},\r\n        { size = 4,\r\n          name = \"SizeOfCode\"},\r\n        { size = 4,\r\n          name = \"SizeOfInitializedData\"},\r\n        { size = 4,\r\n          name = \"SizeOfUninitializedData\"},\r\n        { size = 4,\r\n          name = \"AddressOfEntryPoint\"},\r\n        { size = 4,\r\n          name = \"BaseOfCode\"},\r\n      }, f, out)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "local plus = (out.Magic == \"20b\")",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "if not plus then -- plain PE32, not PE32+\r\n      get_list({\r\n          { size = 4,\r\n            name = \"BaseOfData\" },\r\n        }, f, out)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "get_list({\r\n          { size = 4,\r\n            name = \"BaseOfData\" },\r\n        }, f, out)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "local plussize = 4",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if plus then plussize = 8 end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "plussize = 8",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "get_list({\r\n        { size = plussize,\r\n          name = \"ImageBase\"},\r\n        { size = 4,\r\n          name = \"SectionAlignment\"},\r\n        { size = 4,\r\n          name = \"FileAlignment\"},\r\n        { size = 2,\r\n          name = \"MajorOperatingSystemVersion\"},\r\n        { size = 2,\r\n          name = \"MinorOperatingSystemVersion\"},\r\n        { size = 2,\r\n          name = \"MajorImageVersion\"},\r\n        { size = 2,\r\n          name = \"MinorImageVersion\"},\r\n        { size = 2,\r\n          name = \"MajorSubsystemVersion\"},\r\n        { size = 2,\r\n          name = \"MinorSubsystemVersion\"},\r\n        { size = 4,\r\n          name = \"Win32VersionValue\"},\r\n        { size = 4,\r\n          name = \"SizeOfImage\"},\r\n        { size = 4,\r\n          name = \"SizeOfHeaders\"},\r\n        { size = 4,\r\n          name = \"CheckSum\"},\r\n        { size = 2,\r\n          name = \"Subsystem\"},\r\n        { size = 2,\r\n          name = \"DllCharacteristics\"},\r\n        { size = plussize,\r\n          name = \"SizeOfStackReserve\"},\r\n        { size = plussize,\r\n          name = \"SizeOfStackCommit\"},\r\n        { size = plussize,\r\n          name = \"SizeOfHeapReserve\"},\r\n        { size = plussize,\r\n          name = \"SizeOfHeapCommit\"},\r\n        { size = 4,\r\n          name = \"LoaderFlags\"},\r\n        { size = 4,\r\n          name = \"NumberOfRvaAndSizes\"},\r\n      }, f, out)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "for i = 1, M.toDec(out.NumberOfRvaAndSizes) do\r\n      out.DataDirectory = out.DataDirectory or {}\r\n      out.DataDirectory[i] = get_list({\r\n          { size = 4,\r\n            name = \"VirtualAddress\"},\r\n          { size = 4,\r\n            name = \"Size\"},\r\n        }, f)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 88,
    "text": "out.DataDirectory = out.DataDirectory or {}",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "out.DataDirectory[i] = get_list({\r\n          { size = 4,\r\n            name = \"VirtualAddress\"},\r\n          { size = 4,\r\n            name = \"Size\"},\r\n        }, f)",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "for i, name in ipairs{\"ExportTable\", \"ImportTable\", \"ResourceTable\",\r\n        \"ExceptionTable\", \"CertificateTable\", \"BaseRelocationTable\",\r\n        \"Debug\", \"Architecture\", \"GlobalPtr\", \"TLSTable\",\r\n        \"LoadConfigTable\", \"BoundImport\", \"IAT\",\r\n        \"DelayImportDescriptor\", \"CLRRuntimeHeader\", \"Reserved\"} do\r\n      out.DataDirectory[name] = out.DataDirectory[i]\r\n      if out.DataDirectory[name] then out.DataDirectory[name].name = name end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 91,
    "text": "out.DataDirectory[name] = out.DataDirectory[i]",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "if out.DataDirectory[name] then out.DataDirectory[name].name = name end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "out.DataDirectory[name].name = name",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "for i = 1, M.toDec(out.NumberOfSections) do\r\n    out.Sections = out.Sections or {}\r\n    out.Sections[i] = get_list({\r\n        { size = 8,\r\n          name = \"Name\",\r\n          is_str = true},\r\n        { size = 4,\r\n          name = \"VirtualSize\"},\r\n        { size = 4,\r\n          name = \"VirtualAddress\"},\r\n        { size = 4,\r\n          name = \"SizeOfRawData\"},\r\n        { size = 4,\r\n          name = \"PointerToRawData\"},\r\n        { size = 4,\r\n          name = \"PointerToRelocations\"},\r\n        { size = 4,\r\n          name = \"PointerToLinenumbers\"},\r\n        { size = 2,\r\n          name = \"NumberOfRelocations\"},\r\n        { size = 2,\r\n          name = \"NumberOfLinenumbers\"},\r\n        { size = 4,\r\n          name = \"Characteristics\"},\r\n      }, f)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 95,
    "text": "out.Sections = out.Sections or {}",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "out.Sections[i] = get_list({\r\n        { size = 8,\r\n          name = \"Name\",\r\n          is_str = true},\r\n        { size = 4,\r\n          name = \"VirtualSize\"},\r\n        { size = 4,\r\n          name = \"VirtualAddress\"},\r\n        { size = 4,\r\n          name = \"SizeOfRawData\"},\r\n        { size = 4,\r\n          name = \"PointerToRawData\"},\r\n        { size = 4,\r\n          name = \"PointerToRelocations\"},\r\n        { size = 4,\r\n          name = \"PointerToLinenumbers\"},\r\n        { size = 2,\r\n          name = \"NumberOfRelocations\"},\r\n        { size = 2,\r\n          name = \"NumberOfLinenumbers\"},\r\n        { size = 4,\r\n          name = \"Characteristics\"},\r\n      }, f)",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "out.get_fileoffset = M.get_fileoffset",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "f:seek(\"set\", out:get_fileoffset(out.DataDirectory.ImportTable.VirtualAddress))",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "local done = false",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local cnt = 1",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "while not done do\r\n    local dll = get_list({\r\n          { size = 4,\r\n            name = \"ImportLookupTableRVA\"},\r\n          { size = 4,\r\n            name = \"TimeDateStamp\"},\r\n          { size = 4,\r\n            name = \"ForwarderChain\"},\r\n          { size = 4,\r\n            name = \"NameRVA\"},\r\n          { size = 4,\r\n            name = \"ImportAddressTableRVA\"},\r\n        }, f)\r\n    if M.toDec(dll.NameRVA) == 0 then\r\n      -- this is the final NULL entry, so we're done\r\n      done = true\r\n    else\r\n      -- store the import entry\r\n      out.DataDirectory.ImportTable[cnt] = dll\r\n      cnt = cnt + 1\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 102,
    "text": "local dll = get_list({\r\n          { size = 4,\r\n            name = \"ImportLookupTableRVA\"},\r\n          { size = 4,\r\n            name = \"TimeDateStamp\"},\r\n          { size = 4,\r\n            name = \"ForwarderChain\"},\r\n          { size = 4,\r\n            name = \"NameRVA\"},\r\n          { size = 4,\r\n            name = \"ImportAddressTableRVA\"},\r\n        }, f)",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "if M.toDec(dll.NameRVA) == 0 then\r\n      -- this is the final NULL entry, so we're done\r\n      done = true\r\n    else\r\n      -- store the import entry\r\n      out.DataDirectory.ImportTable[cnt] = dll\r\n      cnt = cnt + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "done = true",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "out.DataDirectory.ImportTable[cnt] = dll",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "cnt = cnt + 1",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "for i, dll in ipairs(out.DataDirectory.ImportTable) do\r\n    f:seek(\"set\", out:get_fileoffset(dll.NameRVA))\r\n    dll.Name = readstring(f)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 108,
    "text": "f:seek(\"set\", out:get_fileoffset(dll.NameRVA))",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "dll.Name = readstring(f)",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "local function pad(str, l, chr)\r\n  chr = chr or \" \"\r\n  l = l or 0\r\n  return string.rep(chr,l-#str)..str\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "chr = chr or \" \"",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "l = l or 0",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function(obj)\r\n  local l = 0\r\n  for k,v in pairs(obj) do if #k > l then l = #k end end\r\n  \r\n  for k,v in pairs(obj) do\r\n    if (M.const[k] and type(v)==\"string\") then\r\n      -- look up named value    \r\n      print(k..string.rep(\" \", l - #k + 1)..\": \"..M.const[k][v])\r\n    elseif M.const[k..\"_flags\"] then\r\n      -- flags should be listed\r\n      print(k..string.rep(\" \", l - #k + 1)..\": \"..v..\" (flag field)\")\r\n    else\r\n      -- regular values\r\n      if type(v) == \"number\" then\r\n        print(k..string.rep(\" \", l - #k + 1)..\": \"..v..\" (dec)\")\r\n      else\r\n        if (type(v)==\"string\") and (k ~= \"DataDirectory\") and (k ~= \"Sections\") then\r\n          print(k..string.rep(\" \", l - #k + 1)..\": \"..v)\r\n        end\r\n      end\r\n    end\r\n  end\r\n  \r\n  if obj.DataDirectory then\r\n    print(\"DataDirectory (RVA, size):\")\r\n    for i, v in ipairs(obj.DataDirectory) do\r\n      print(\"   Entry \"..M.toHex(i-1)..\" \"..pad(v.VirtualAddress,8,\"0\")..\" \"..pad(v.Size,8,\"0\")..\" \"..v.name)\r\n    end\r\n  end\r\n  \r\n  if obj.Sections then\r\n    print(\"Sections:\")\r\n    print(\"idx name     RVA      VSize    Offset   RawSize\")\r\n    for i, v in ipairs(obj.Sections) do\r\n      print(\"  \"..i..\" \"..v.Name.. string.rep(\" \",9-#v.Name)..pad(v.VirtualAddress,8,\"0\")..\" \"..pad(v.VirtualSize,8,\"0\")..\" \"..pad(v.PointerToRawData,8,\"0\")..\" \"..pad(v.SizeOfRawData,8,\"0\"))\r\n    end\r\n  end\r\n  \r\n  print(\"Imports:\")\r\n  for i, dll in ipairs(obj.DataDirectory.ImportTable) do\r\n    print(\"   \"..dll.Name)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "local l = 0",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "for k,v in pairs(obj) do if #k > l then l = #k end end",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "if #k > l then l = #k end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "l = #k",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "for k,v in pairs(obj) do\r\n    if (M.const[k] and type(v)==\"string\") then\r\n      -- look up named value    \r\n      print(k..string.rep(\" \", l - #k + 1)..\": \"..M.const[k][v])\r\n    elseif M.const[k..\"_flags\"] then\r\n      -- flags should be listed\r\n      print(k..string.rep(\" \", l - #k + 1)..\": \"..v..\" (flag field)\")\r\n    else\r\n      -- regular values\r\n      if type(v) == \"number\" then\r\n        print(k..string.rep(\" \", l - #k + 1)..\": \"..v..\" (dec)\")\r\n      else\r\n        if (type(v)==\"string\") and (k ~= \"DataDirectory\") and (k ~= \"Sections\") then\r\n          print(k..string.rep(\" \", l - #k + 1)..\": \"..v)\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 121,
    "text": "if (M.const[k] and type(v)==\"string\") then\r\n      -- look up named value    \r\n      print(k..string.rep(\" \", l - #k + 1)..\": \"..M.const[k][v])\r\n    elseif M.const[k..\"_flags\"] then\r\n      -- flags should be listed\r\n      print(k..string.rep(\" \", l - #k + 1)..\": \"..v..\" (flag field)\")\r\n    else\r\n      -- regular values\r\n      if type(v) == \"number\" then\r\n        print(k..string.rep(\" \", l - #k + 1)..\": \"..v..\" (dec)\")\r\n      else\r\n        if (type(v)==\"string\") and (k ~= \"DataDirectory\") and (k ~= \"Sections\") then\r\n          print(k..string.rep(\" \", l - #k + 1)..\": \"..v)\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "print(k..string.rep(\" \", l - #k + 1)..\": \"..M.const[k][v])",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "print(k..string.rep(\" \", l - #k + 1)..\": \"..v..\" (flag field)\")",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "if type(v) == \"number\" then\r\n        print(k..string.rep(\" \", l - #k + 1)..\": \"..v..\" (dec)\")\r\n      else\r\n        if (type(v)==\"string\") and (k ~= \"DataDirectory\") and (k ~= \"Sections\") then\r\n          print(k..string.rep(\" \", l - #k + 1)..\": \"..v)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "print(k..string.rep(\" \", l - #k + 1)..\": \"..v..\" (dec)\")",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "if (type(v)==\"string\") and (k ~= \"DataDirectory\") and (k ~= \"Sections\") then\r\n          print(k..string.rep(\" \", l - #k + 1)..\": \"..v)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "print(k..string.rep(\" \", l - #k + 1)..\": \"..v)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "if obj.DataDirectory then\r\n    print(\"DataDirectory (RVA, size):\")\r\n    for i, v in ipairs(obj.DataDirectory) do\r\n      print(\"   Entry \"..M.toHex(i-1)..\" \"..pad(v.VirtualAddress,8,\"0\")..\" \"..pad(v.Size,8,\"0\")..\" \"..v.name)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "print(\"DataDirectory (RVA, size):\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "for i, v in ipairs(obj.DataDirectory) do\r\n      print(\"   Entry \"..M.toHex(i-1)..\" \"..pad(v.VirtualAddress,8,\"0\")..\" \"..pad(v.Size,8,\"0\")..\" \"..v.name)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 131,
    "text": "print(\"   Entry \"..M.toHex(i-1)..\" \"..pad(v.VirtualAddress,8,\"0\")..\" \"..pad(v.Size,8,\"0\")..\" \"..v.name)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "if obj.Sections then\r\n    print(\"Sections:\")\r\n    print(\"idx name     RVA      VSize    Offset   RawSize\")\r\n    for i, v in ipairs(obj.Sections) do\r\n      print(\"  \"..i..\" \"..v.Name.. string.rep(\" \",9-#v.Name)..pad(v.VirtualAddress,8,\"0\")..\" \"..pad(v.VirtualSize,8,\"0\")..\" \"..pad(v.PointerToRawData,8,\"0\")..\" \"..pad(v.SizeOfRawData,8,\"0\"))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "print(\"Sections:\")",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "print(\"idx name     RVA      VSize    Offset   RawSize\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "for i, v in ipairs(obj.Sections) do\r\n      print(\"  \"..i..\" \"..v.Name.. string.rep(\" \",9-#v.Name)..pad(v.VirtualAddress,8,\"0\")..\" \"..pad(v.VirtualSize,8,\"0\")..\" \"..pad(v.PointerToRawData,8,\"0\")..\" \"..pad(v.SizeOfRawData,8,\"0\"))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 136,
    "text": "print(\"  \"..i..\" \"..v.Name.. string.rep(\" \",9-#v.Name)..pad(v.VirtualAddress,8,\"0\")..\" \"..pad(v.VirtualSize,8,\"0\")..\" \"..pad(v.PointerToRawData,8,\"0\")..\" \"..pad(v.SizeOfRawData,8,\"0\"))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "print(\"Imports:\")",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "for i, dll in ipairs(obj.DataDirectory.ImportTable) do\r\n    print(\"   \"..dll.Name)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 139,
    "text": "print(\"   \"..dll.Name)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function M.msvcrt(infile) \r\n  local path, file = infile:match(\"(.+)\\\\(.+)$\")\r\n  if not path then\r\n    path = \"\"\r\n    file = infile\r\n  else\r\n    path=path .. \"\\\\\"\r\n  end\r\n  local obj, err = M.parse(path..file)\r\n  if not obj then return obj, err end\r\n  \r\n  for i, dll in ipairs(obj.DataDirectory.ImportTable) do\r\n    dll = dll.Name:upper()\r\n\t  local result = dll:match('(MSVCR%d*)%.DLL')\r\n\t  if not result then\r\n\t    result = dll:match('(MSVCRT)%.DLL')\r\n\t  end\r\n    -- success, found it return name + binary where it was found\r\n    if result then return result, infile end\r\n  end\r\n  \r\n  -- not found, so traverse all imported dll's\r\n  for i, dll in ipairs(obj.DataDirectory.ImportTable) do\r\n    local rt, ref = M.msvcrt(path..dll.Name)\r\n    if rt then \r\n      return rt, ref  -- found it\r\n    end\r\n  end\r\n\r\n  return nil, \"No msvcrt found\"\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "local path, file = infile:match(\"(.+)\\\\(.+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "if not path then\r\n    path = \"\"\r\n    file = infile\r\n  else\r\n    path=path .. \"\\\\\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "path = \"\"",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "file = infile",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "path=path .. \"\\\\\"",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "local obj, err = M.parse(path..file)",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if not obj then return obj, err end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "for i, dll in ipairs(obj.DataDirectory.ImportTable) do\r\n    dll = dll.Name:upper()\r\n\t  local result = dll:match('(MSVCR%d*)%.DLL')\r\n\t  if not result then\r\n\t    result = dll:match('(MSVCRT)%.DLL')\r\n\t  end\r\n    -- success, found it return name + binary where it was found\r\n    if result then return result, infile end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 150,
    "text": "dll = dll.Name:upper()",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "local result = dll:match('(MSVCR%d*)%.DLL')",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "if not result then\r\n\t    result = dll:match('(MSVCRT)%.DLL')\r\n\t  end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "result = dll:match('(MSVCRT)%.DLL')",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "if result then return result, infile end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "for i, dll in ipairs(obj.DataDirectory.ImportTable) do\r\n    local rt, ref = M.msvcrt(path..dll.Name)\r\n    if rt then \r\n      return rt, ref  -- found it\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 156,
    "text": "local rt, ref = M.msvcrt(path..dll.Name)",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "if rt then \r\n      return rt, ref  -- found it\r\n    end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "",
    "type": "function container"
  }, {
    "id": 160,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 161,
    "text": "find",
    "type": "global function"
  }, {
    "id": 162,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 163,
    "text": "fmod",
    "type": "global function"
  }, {
    "id": 164,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 165,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 166,
    "text": "len",
    "type": "global function"
  }, {
    "id": 167,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 168,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 169,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 170,
    "text": "open",
    "type": "global function"
  }, {
    "id": 171,
    "text": "print",
    "type": "global function"
  }, {
    "id": 172,
    "text": "type",
    "type": "global function"
  }, {
    "id": 173,
    "text": "",
    "type": "variable container"
  }, {
    "id": 174,
    "text": "",
    "type": "require container"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 177,
    "text": "",
    "type": "global variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "global variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "global variable"
  }, {
    "id": 182,
    "text": "",
    "type": "n/a"
  }, {
    "id": 183,
    "text": "",
    "type": "global variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "interface container"
  }, {
    "id": 186,
    "text": "",
    "type": "interface"
  } ]
}