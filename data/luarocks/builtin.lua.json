{
  "_filename": "builtin.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/build/builtin.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 6,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 21,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 45,
    "label": "has",
    "to": 54
  }, {
    "from": 45,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 35
  }, {
    "from": 56,
    "label": "has",
    "to": 36
  }, {
    "from": 56,
    "label": "has",
    "to": 37
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 39
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 57,
    "label": "has",
    "to": 65
  }, {
    "from": 57,
    "label": "has",
    "to": 66
  }, {
    "from": 57,
    "label": "has",
    "to": 67
  }, {
    "from": 57,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 57,
    "label": "has",
    "to": 71
  }, {
    "from": 57,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 57,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 46
  }, {
    "from": 74,
    "label": "has",
    "to": 47
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 48
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 50
  }, {
    "from": 74,
    "label": "has",
    "to": 51
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 53
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 53
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 74,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 39
  }, {
    "from": 83,
    "label": "has",
    "to": 40
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 41
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 87
  }, {
    "from": 21,
    "label": "has",
    "to": 88
  }, {
    "from": 21,
    "label": "has",
    "to": 89
  }, {
    "from": 21,
    "label": "has",
    "to": 90
  }, {
    "from": 21,
    "label": "has",
    "to": 91
  }, {
    "from": 21,
    "label": "has",
    "to": 92
  }, {
    "from": 21,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 94,
    "label": "has",
    "to": 98
  }, {
    "from": 94,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 94,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 94,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 113,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 111,
    "label": "has",
    "to": 119
  }, {
    "from": 111,
    "label": "has",
    "to": 120
  }, {
    "from": 111,
    "label": "has",
    "to": 121
  }, {
    "from": 107,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 122,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 129,
    "label": "has",
    "to": 133
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 129,
    "label": "has",
    "to": 135
  }, {
    "from": 122,
    "label": "has",
    "to": 136
  }, {
    "from": 122,
    "label": "has",
    "to": 137
  }, {
    "from": 122,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 122,
    "label": "has",
    "to": 142
  }, {
    "from": 122,
    "label": "has",
    "to": 143
  }, {
    "from": 122,
    "label": "has",
    "to": 144
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 4
  }, {
    "from": 21,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 35
  }, {
    "from": 155,
    "label": "has",
    "to": 36
  }, {
    "from": 155,
    "label": "has",
    "to": 37
  }, {
    "from": 155,
    "label": "has",
    "to": 4
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 39
  }, {
    "from": 157,
    "label": "has",
    "to": 40
  }, {
    "from": 157,
    "label": "has",
    "to": 41
  }, {
    "from": 157,
    "label": "has",
    "to": 42
  }, {
    "from": 157,
    "label": "has",
    "to": 43
  }, {
    "from": 157,
    "label": "has",
    "to": 44
  }, {
    "from": 157,
    "label": "has",
    "to": 4
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 46
  }, {
    "from": 159,
    "label": "has",
    "to": 47
  }, {
    "from": 159,
    "label": "has",
    "to": 48
  }, {
    "from": 159,
    "label": "has",
    "to": 49
  }, {
    "from": 159,
    "label": "has",
    "to": 50
  }, {
    "from": 159,
    "label": "has",
    "to": 51
  }, {
    "from": 159,
    "label": "has",
    "to": 52
  }, {
    "from": 159,
    "label": "has",
    "to": 53
  }, {
    "from": 159,
    "label": "has",
    "to": 4
  }, {
    "from": 159,
    "label": "has",
    "to": 54
  }, {
    "from": 159,
    "label": "has",
    "to": 4
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 4
  }, {
    "from": 162,
    "label": "has",
    "to": 35
  }, {
    "from": 162,
    "label": "has",
    "to": 36
  }, {
    "from": 162,
    "label": "has",
    "to": 37
  }, {
    "from": 162,
    "label": "has",
    "to": 4
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 39
  }, {
    "from": 164,
    "label": "has",
    "to": 58
  }, {
    "from": 164,
    "label": "has",
    "to": 59
  }, {
    "from": 164,
    "label": "has",
    "to": 60
  }, {
    "from": 164,
    "label": "has",
    "to": 61
  }, {
    "from": 164,
    "label": "has",
    "to": 62
  }, {
    "from": 164,
    "label": "has",
    "to": 63
  }, {
    "from": 164,
    "label": "has",
    "to": 64
  }, {
    "from": 164,
    "label": "has",
    "to": 65
  }, {
    "from": 164,
    "label": "has",
    "to": 66
  }, {
    "from": 164,
    "label": "has",
    "to": 67
  }, {
    "from": 164,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 164,
    "label": "has",
    "to": 71
  }, {
    "from": 164,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 164,
    "label": "has",
    "to": 4
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 46
  }, {
    "from": 166,
    "label": "has",
    "to": 47
  }, {
    "from": 166,
    "label": "has",
    "to": 75
  }, {
    "from": 166,
    "label": "has",
    "to": 48
  }, {
    "from": 166,
    "label": "has",
    "to": 76
  }, {
    "from": 166,
    "label": "has",
    "to": 50
  }, {
    "from": 166,
    "label": "has",
    "to": 51
  }, {
    "from": 166,
    "label": "has",
    "to": 77
  }, {
    "from": 166,
    "label": "has",
    "to": 53
  }, {
    "from": 166,
    "label": "has",
    "to": 4
  }, {
    "from": 166,
    "label": "has",
    "to": 78
  }, {
    "from": 166,
    "label": "has",
    "to": 53
  }, {
    "from": 166,
    "label": "has",
    "to": 4
  }, {
    "from": 166,
    "label": "has",
    "to": 79
  }, {
    "from": 166,
    "label": "has",
    "to": 80
  }, {
    "from": 166,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 166,
    "label": "has",
    "to": 4
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 35
  }, {
    "from": 168,
    "label": "has",
    "to": 36
  }, {
    "from": 168,
    "label": "has",
    "to": 37
  }, {
    "from": 168,
    "label": "has",
    "to": 4
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 39
  }, {
    "from": 170,
    "label": "has",
    "to": 40
  }, {
    "from": 170,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 170,
    "label": "has",
    "to": 41
  }, {
    "from": 170,
    "label": "has",
    "to": 86
  }, {
    "from": 170,
    "label": "has",
    "to": 4
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "calls",
    "to": 196
  }, {
    "from": 21,
    "label": "calls",
    "to": 183
  }, {
    "from": 21,
    "label": "calls",
    "to": 183
  }, {
    "from": 21,
    "label": "calls",
    "to": 191
  }, {
    "from": 21,
    "label": "calls",
    "to": 180
  }, {
    "from": 21,
    "label": "calls",
    "to": 180
  }, {
    "from": 21,
    "label": "calls",
    "to": 181
  }, {
    "from": 153,
    "label": "calls",
    "to": 192
  }, {
    "from": 21,
    "label": "calls",
    "to": 177
  }, {
    "from": 21,
    "label": "calls",
    "to": 177
  }, {
    "from": 21,
    "label": "calls",
    "to": 177
  }, {
    "from": 21,
    "label": "calls",
    "to": 177
  }, {
    "from": 21,
    "label": "calls",
    "to": 177
  }, {
    "from": 21,
    "label": "calls",
    "to": 177
  }, {
    "from": 21,
    "label": "calls",
    "to": 177
  }, {
    "from": 21,
    "label": "calls",
    "to": 177
  }, {
    "from": 21,
    "label": "calls",
    "to": 177
  }, {
    "from": 21,
    "label": "calls",
    "to": 157
  }, {
    "from": 153,
    "label": "calls",
    "to": 190
  }, {
    "from": 153,
    "label": "calls",
    "to": 193
  }, {
    "from": 21,
    "label": "calls",
    "to": 193
  }, {
    "from": 21,
    "label": "calls",
    "to": 193
  }, {
    "from": 21,
    "label": "calls",
    "to": 189
  }, {
    "from": 21,
    "label": "calls",
    "to": 182
  }, {
    "from": 21,
    "label": "calls",
    "to": 175
  }, {
    "from": 21,
    "label": "calls",
    "to": 175
  }, {
    "from": 173,
    "label": "calls",
    "to": 194
  }, {
    "from": 21,
    "label": "calls",
    "to": 174
  }, {
    "from": 21,
    "label": "calls",
    "to": 174
  }, {
    "from": 2,
    "label": "calls",
    "to": 178
  }, {
    "from": 21,
    "label": "calls",
    "to": 198
  }, {
    "from": 21,
    "label": "calls",
    "to": 198
  }, {
    "from": 6,
    "label": "calls",
    "to": 199
  }, {
    "from": 21,
    "label": "calls",
    "to": 199
  }, {
    "from": 21,
    "label": "calls",
    "to": 199
  }, {
    "from": 6,
    "label": "calls",
    "to": 200
  }, {
    "from": 21,
    "label": "calls",
    "to": 185
  }, {
    "from": 21,
    "label": "calls",
    "to": 179
  }, {
    "from": 21,
    "label": "calls",
    "to": 179
  }, {
    "from": 21,
    "label": "calls",
    "to": 187
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 197
  }, {
    "from": 153,
    "label": "calls",
    "to": 195
  }, {
    "from": 21,
    "label": "calls",
    "to": 195
  }, {
    "from": 21,
    "label": "calls",
    "to": 159
  }, {
    "from": 21,
    "label": "calls",
    "to": 184
  }, {
    "from": 21,
    "label": "calls",
    "to": 202
  }, {
    "from": 153,
    "label": "calls",
    "to": 202
  }, {
    "from": 21,
    "label": "calls",
    "to": 202
  }, {
    "from": 21,
    "label": "calls",
    "to": 202
  }, {
    "from": 21,
    "label": "calls",
    "to": 202
  }, {
    "from": 21,
    "label": "calls",
    "to": 176
  }, {
    "from": 21,
    "label": "calls",
    "to": 155
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 153
  }, {
    "from": 21,
    "label": "calls",
    "to": 188
  }, {
    "from": 21,
    "label": "calls",
    "to": 188
  }, {
    "from": 21,
    "label": "calls",
    "to": 201
  }, {
    "from": 21,
    "label": "calls",
    "to": 201
  }, {
    "from": 21,
    "label": "calls",
    "to": 201
  }, {
    "from": 21,
    "label": "calls",
    "to": 201
  }, {
    "from": 21,
    "label": "calls",
    "to": 201
  }, {
    "from": 21,
    "label": "calls",
    "to": 201
  }, {
    "from": 21,
    "label": "calls",
    "to": 201
  }, {
    "from": 21,
    "label": "calls",
    "to": 201
  }, {
    "from": 21,
    "label": "calls",
    "to": 201
  }, {
    "from": 173,
    "label": "calls",
    "to": 203
  }, {
    "from": 173,
    "label": "calls",
    "to": 203
  }, {
    "from": 173,
    "label": "calls",
    "to": 203
  }, {
    "from": 173,
    "label": "calls",
    "to": 203
  }, {
    "from": 173,
    "label": "calls",
    "to": 203
  }, {
    "from": 21,
    "label": "calls",
    "to": 186
  }, {
    "from": 21,
    "label": "calls",
    "to": 6
  }, {
    "from": 21,
    "label": "calls",
    "to": 6
  }, {
    "from": 1,
    "label": "contains",
    "to": 173
  }, {
    "from": 173,
    "label": "declares",
    "to": 2
  }, {
    "from": 173,
    "label": "declares",
    "to": 6
  }, {
    "from": 173,
    "label": "declares",
    "to": 21
  }, {
    "from": 173,
    "label": "declares",
    "to": 153
  }, {
    "from": 173,
    "label": "declares",
    "to": 155
  }, {
    "from": 173,
    "label": "declares",
    "to": 157
  }, {
    "from": 173,
    "label": "declares",
    "to": 159
  }, {
    "from": 173,
    "label": "declares",
    "to": 161
  }, {
    "from": 173,
    "label": "declares",
    "to": 162
  }, {
    "from": 173,
    "label": "declares",
    "to": 164
  }, {
    "from": 173,
    "label": "declares",
    "to": 166
  }, {
    "from": 173,
    "label": "declares",
    "to": 168
  }, {
    "from": 173,
    "label": "declares",
    "to": 170
  }, {
    "from": 173,
    "label": "declares",
    "to": 172
  }, {
    "from": 1,
    "label": "contains",
    "to": 208
  }, {
    "from": 1,
    "label": "contains",
    "to": 209
  }, {
    "from": 209,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "requires",
    "to": 207
  }, {
    "from": 209,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "requires",
    "to": 212
  }, {
    "from": 209,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "requires",
    "to": 205
  }, {
    "from": 209,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "requires",
    "to": 204
  }, {
    "from": 209,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "requires",
    "to": 206
  }, {
    "from": 216,
    "label": "requires",
    "to": 212
  }, {
    "from": 217,
    "label": "requires",
    "to": 212
  }, {
    "from": 218,
    "label": "requires",
    "to": 212
  }, {
    "from": 219,
    "label": "requires",
    "to": 212
  }, {
    "from": 220,
    "label": "requires",
    "to": 212
  }, {
    "from": 221,
    "label": "requires",
    "to": 212
  }, {
    "from": 222,
    "label": "requires",
    "to": 212
  }, {
    "from": 223,
    "label": "requires",
    "to": 212
  }, {
    "from": 224,
    "label": "requires",
    "to": 212
  }, {
    "from": 225,
    "label": "requires",
    "to": 212
  }, {
    "from": 226,
    "label": "requires",
    "to": 212
  }, {
    "from": 227,
    "label": "requires",
    "to": 212
  }, {
    "from": 228,
    "label": "requires",
    "to": 212
  }, {
    "from": 229,
    "label": "requires",
    "to": 212
  }, {
    "from": 230,
    "label": "requires",
    "to": 212
  }, {
    "from": 231,
    "label": "requires",
    "to": 212
  }, {
    "from": 232,
    "label": "requires",
    "to": 212
  }, {
    "from": 233,
    "label": "requires",
    "to": 212
  }, {
    "from": 234,
    "label": "requires",
    "to": 212
  }, {
    "from": 235,
    "label": "requires",
    "to": 212
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "builtin",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function execute(...)\r\n   io.stdout:write(table.concat({...}, \" \")..\"\\n\")\r\n   return fs.execute(...)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "io.stdout:write(table.concat({...}, \" \")..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function make_rc(luafilename, rcfilename)\r\n   local rcfile = io.open(rcfilename, \"w\")\r\n   if not rcfile then\r\n      error(\"Could not open \"..rcfilename..\" for writing.\")\r\n   end\r\n   rcfile:write(\"STRINGTABLE\\r\\nBEGIN\\r\\n\")\r\n\r\n   local i = 1\r\n   for line in io.lines(luafilename) do\r\n      if not line:match(\"^#!\") then\r\n         rcfile:write(i .. \" \\\"\")\r\n         line = line:gsub(\"\\\\\", \"\\\\\\\\\"):gsub('\"', '\"\"'):gsub(\"[\\r\\n]+\", \"\")\r\n         rcfile:write(line .. \"\\\\r\\\\n\\\"\\r\\n\")\r\n         i = i + 1\r\n      end\r\n   end\r\n\r\n   rcfile:write(\"END\\r\\n\")\r\n\r\n   rcfile:close()\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local rcfile = io.open(rcfilename, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not rcfile then\r\n      error(\"Could not open \"..rcfilename..\" for writing.\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "error(\"Could not open \"..rcfilename..\" for writing.\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "rcfile:write(\"STRINGTABLE\\r\\nBEGIN\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "for line in io.lines(luafilename) do\r\n      if not line:match(\"^#!\") then\r\n         rcfile:write(i .. \" \\\"\")\r\n         line = line:gsub(\"\\\\\", \"\\\\\\\\\"):gsub('\"', '\"\"'):gsub(\"[\\r\\n]+\", \"\")\r\n         rcfile:write(line .. \"\\\\r\\\\n\\\"\\r\\n\")\r\n         i = i + 1\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "if not line:match(\"^#!\") then\r\n         rcfile:write(i .. \" \\\"\")\r\n         line = line:gsub(\"\\\\\", \"\\\\\\\\\"):gsub('\"', '\"\"'):gsub(\"[\\r\\n]+\", \"\")\r\n         rcfile:write(line .. \"\\\\r\\\\n\\\"\\r\\n\")\r\n         i = i + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "rcfile:write(i .. \" \\\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "line = line:gsub(\"\\\\\", \"\\\\\\\\\"):gsub('\"', '\"\"'):gsub(\"[\\r\\n]+\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "rcfile:write(line .. \"\\\\r\\\\n\\\"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "rcfile:write(\"END\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "rcfile:close()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function run(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n   local compile_object, compile_library, compile_wrapper_binary\r\n\r\n   local build = rockspec.build\r\n   local variables = rockspec.variables\r\n\r\n   local function add_flags(extras, flag, flags)\r\n      if flags then\r\n         if type(flags) ~= \"table\" then\r\n            flags = { tostring(flags) }\r\n         end\r\n         util.variable_substitutions(flags, variables)\r\n         for _, v in ipairs(flags) do\r\n            table.insert(extras, flag:format(v))\r\n         end\r\n      end\r\n   end\r\n\r\n   -- MinGW basically behaves the same as Unix\r\n   if cfg.is_platform(\"mingw32\") then\r\n         compile_object = function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR, \"-c\", source, \"-o\", object, unpack(extras))\r\n      end\r\n      compile_library = function (library, objects, libraries, libdirs)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-L%s\", libdirs)\r\n         add_flags(extras, \"-l%s\", libraries)\r\n         extras[#extras+1] = dir.path(variables.LUA_LIBDIR, variables.LUALIB)\r\n         extras[#extras+1] = \"-l\" .. (variables.MSVCRT or \"m\")\r\n         local ok = execute(variables.LD..\" \"..variables.LIBFLAG, \"-o\", library, unpack(extras))\r\n         return ok\r\n      end\r\n      compile_wrapper_binary = function(fullname, name)\r\n         local fullbasename = fullname:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local basename = name:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local rcname = basename..\".rc\"\r\n         local resname = basename..\".o\"\r\n         local wrapname = basename..\".exe\"\r\n         make_rc(fullname, fullbasename..\".rc\")\r\n         local ok = execute(variables.RC, \"-o\", resname, rcname)\r\n         if not ok then return ok end\r\n         ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR,\r\n                      \"-o\", wrapname, resname, variables.WRAPPER,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB),\r\n                      \"-l\" .. (variables.MSVCRT or \"m\"), \"-luser32\")\r\n         return ok, wrapname\r\n      end\r\n      compile_wrapper_binary = function(fullname, name) return true, name end\r\n\t-- MSVC specific commands\r\n\telseif cfg.is_platform(\"win32\") then\r\n      compile_object = function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-c\", \"-Fo\"..object, \"-I\"..variables.LUA_INCDIR, source, unpack(extras))\r\n      end\r\n      compile_library = function(library, objects, libraries, libdirs, name)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-libpath:%s\", libdirs)\r\n         add_flags(extras, \"%s.lib\", libraries)\r\n         local basename = dir.base_name(library):gsub(\".[^.]*$\", \"\")\r\n         local deffile = basename .. \".def\"\r\n         local def = io.open(dir.path(fs.current_dir(), deffile), \"w+\")\r\n         def:write(\"EXPORTS\\n\")\r\n         def:write(\"luaopen_\"..name:gsub(\"%.\", \"_\")..\"\\n\")\r\n         def:close()\r\n         local ok = execute(variables.LD, \"-dll\", \"-def:\"..deffile, \"-out:\"..library, dir.path(variables.LUA_LIBDIR, variables.LUALIB), unpack(extras))\r\n         local basedir = \"\"\r\n         if name:find(\"%.\") ~= nil then\r\n            basedir = name:gsub(\"%.%w+$\", \"\\\\\")\r\n            basedir = basedir:gsub(\"%.\", \"\\\\\")\r\n         end\r\n         local manifestfile = basedir .. basename..\".dll.manifest\"\r\n\r\n         if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..basedir..basename..\".dll;2\")\r\n         end\r\n         return ok\r\n      end\r\n      compile_wrapper_binary = function(fullname, name)\r\n         local fullbasename = fullname:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local basename = name:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local object = basename..\".obj\"\r\n         local rcname = basename..\".rc\"\r\n         local resname = basename..\".res\"\r\n         local wrapname = basename..\".exe\"\r\n         make_rc(fullname, fullbasename..\".rc\")\r\n         local ok = execute(variables.RC, \"-r\", \"-fo\"..resname, rcname)\r\n         if not ok then return ok end\r\n         ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-c\", \"-Fo\"..object,\r\n                      \"-I\"..variables.LUA_INCDIR, variables.WRAPPER)\r\n         if not ok then return ok end\r\n         ok = execute(variables.LD, \"-out:\"..wrapname, resname, object,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB), \"user32.lib\")\r\n         local manifestfile = wrapname..\".manifest\"\r\n         if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..wrapname..\";1\")\r\n         end\r\n         return ok, wrapname\r\n      end\r\n   else\r\n\t-- Unix, Linux, Cygwin\r\n      compile_object = function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR, \"-c\", source, \"-o\", object, unpack(extras))\r\n      end\r\n      compile_library = function (library, objects, libraries, libdirs)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-L%s\", libdirs)\r\n         if cfg.gcc_rpath then\r\n            add_flags(extras, \"-Wl,-rpath,%s:\", libdirs)\r\n         end\r\n         add_flags(extras, \"-l%s\", libraries)\r\n\t\t -- Link to Lua\r\n         add_flags(extras, \"-l%s\", variables.LUA_LIB)\r\n         return execute(variables.LD..\" \"..variables.LIBFLAG, \"-o\", library, \"-L\"..variables.LUA_LIBDIR, unpack(extras))\r\n      end\r\n      compile_wrapper_binary = function(fullname, name) return true, name end\r\n   end\r\n\r\n   local ok = true\r\n   local err = \"Build error\"\r\n   local built_modules = {}\r\n   local luadir = path.lua_dir(rockspec.name, rockspec.version)\r\n   local libdir = path.lib_dir(rockspec.name, rockspec.version)\r\n   local docdir = path.doc_dir(rockspec.name, rockspec.version)\r\n   -- On Windows, compiles an .exe for each Lua file in build.install.bin, and\r\n   -- replaces the filename with the .exe name. Strips the .lua extension if it exists,\r\n   -- otherwise just appends .exe to the name\r\n   if build.install and build.install.bin then\r\n     for i, name in ipairs(build.install.bin) do\r\n       local fullname = dir.path(fs.current_dir(), name)\r\n       local match = name:match(\"%.lua$\")\r\n       local basename = name:gsub(\"%.lua$\", \"\")\r\n       local file\r\n       if not match then\r\n          file = io.open(fullname)\r\n       end\r\n       if match or (file and file:read():match(\"#!.*lua.*\")) then\r\n          ok, name = compile_wrapper_binary(fullname, name)\r\n          if ok then\r\n             build.install.bin[i] = name\r\n          else\r\n             if file then file:close() end\r\n             return nil, \"Build error in wrapper binaries\"\r\n          end\r\n       end\r\n       if file then file:close() end\r\n     end\r\n   end\r\n   for name, info in pairs(build.modules) do\r\n      local moddir = path.module_to_path(name)\r\n      if type(info) == \"string\" then\r\n         local ext = info:match(\".([^.]+)$\")\r\n         if ext == \"lua\" then\r\n            local filename = dir.base_name(info)\r\n            if info:match(\"init%.lua$\") and not name:match(\"%.init$\") then\r\n               moddir = path.module_to_path(name..\".init\")\r\n            else\r\n               local basename = name:match(\"([^.]+)$\")\r\n               local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n               if basename ~= baseinfo then\r\n                  filename = basename..\".lua\"\r\n               end\r\n            end\r\n            local dest = dir.path(luadir, moddir, filename)\r\n            built_modules[info] = dest\r\n         else\r\n            info = {info}\r\n         end\r\n      end\r\n      if type(info) == \"table\" then\r\n         local objects = {}\r\n         local sources = info.sources\r\n         if info[1] then sources = info end\r\n         if type(sources) == \"string\" then sources = {sources} end\r\n         for _, source in ipairs(sources) do\r\n            local object = source:gsub(\".[^.]*$\", \".\"..cfg.obj_extension)\r\n            if not object then\r\n               object = source..\".\"..cfg.obj_extension\r\n            end\r\n            ok = compile_object(object, source, info.defines, info.incdirs)\r\n            if not ok then\r\n               return nil, \"Failed compiling object \"..object\r\n            end\r\n            table.insert(objects, object)\r\n         end\r\n         if not ok then break end\r\n         local module_name = name:match(\"([^.]*)$\")..\".\"..util.matchquote(cfg.lib_extension)\r\n         if moddir ~= \"\" then\r\n            module_name = dir.path(moddir, module_name)\r\n            local ok, err = fs.make_dir(moddir)\r\n            if not ok then return nil, err end\r\n         end\r\n         built_modules[module_name] = dir.path(libdir, module_name)\r\n         ok = compile_library(module_name, objects, info.libraries, info.libdirs, name)\r\n         if not ok then\r\n            return nil, \"Failed compiling module \"..module_name\r\n         end\r\n      end\r\n   end\r\n   for name, dest in pairs(built_modules) do\r\n      fs.make_dir(dir.dir_name(dest))\r\n      ok = fs.copy(name, dest)\r\n      if not ok then\r\n         return nil, \"Failed installing \"..name..\" in \"..dest\r\n      end\r\n   end\r\n   if fs.is_dir(\"lua\") then\r\n      local ok, err = fs.copy_contents(\"lua\", luadir)\r\n      if not ok then\r\n         return nil, \"Failed copying contents of 'lua' directory: \"..err\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "assert(type(rockspec) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local compile_object, compile_library, compile_wrapper_binary",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local build = rockspec.build",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local variables = rockspec.variables",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local function add_flags(extras, flag, flags)\r\n      if flags then\r\n         if type(flags) ~= \"table\" then\r\n            flags = { tostring(flags) }\r\n         end\r\n         util.variable_substitutions(flags, variables)\r\n         for _, v in ipairs(flags) do\r\n            table.insert(extras, flag:format(v))\r\n         end\r\n      end\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 27,
    "text": "if flags then\r\n         if type(flags) ~= \"table\" then\r\n            flags = { tostring(flags) }\r\n         end\r\n         util.variable_substitutions(flags, variables)\r\n         for _, v in ipairs(flags) do\r\n            table.insert(extras, flag:format(v))\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "if type(flags) ~= \"table\" then\r\n            flags = { tostring(flags) }\r\n         end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "flags = { tostring(flags) }",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "util.variable_substitutions(flags, variables)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "for _, v in ipairs(flags) do\r\n            table.insert(extras, flag:format(v))\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "table.insert(extras, flag:format(v))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if cfg.is_platform(\"mingw32\") then\r\n         compile_object = function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR, \"-c\", source, \"-o\", object, unpack(extras))\r\n      end\r\n      compile_library = function (library, objects, libraries, libdirs)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-L%s\", libdirs)\r\n         add_flags(extras, \"-l%s\", libraries)\r\n         extras[#extras+1] = dir.path(variables.LUA_LIBDIR, variables.LUALIB)\r\n         extras[#extras+1] = \"-l\" .. (variables.MSVCRT or \"m\")\r\n         local ok = execute(variables.LD..\" \"..variables.LIBFLAG, \"-o\", library, unpack(extras))\r\n         return ok\r\n      end\r\n      compile_wrapper_binary = function(fullname, name)\r\n         local fullbasename = fullname:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local basename = name:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local rcname = basename..\".rc\"\r\n         local resname = basename..\".o\"\r\n         local wrapname = basename..\".exe\"\r\n         make_rc(fullname, fullbasename..\".rc\")\r\n         local ok = execute(variables.RC, \"-o\", resname, rcname)\r\n         if not ok then return ok end\r\n         ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR,\r\n                      \"-o\", wrapname, resname, variables.WRAPPER,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB),\r\n                      \"-l\" .. (variables.MSVCRT or \"m\"), \"-luser32\")\r\n         return ok, wrapname\r\n      end\r\n      compile_wrapper_binary = function(fullname, name) return true, name end\r\n\t-- MSVC specific commands\r\n\telseif cfg.is_platform(\"win32\") then\r\n      compile_object = function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-c\", \"-Fo\"..object, \"-I\"..variables.LUA_INCDIR, source, unpack(extras))\r\n      end\r\n      compile_library = function(library, objects, libraries, libdirs, name)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-libpath:%s\", libdirs)\r\n         add_flags(extras, \"%s.lib\", libraries)\r\n         local basename = dir.base_name(library):gsub(\".[^.]*$\", \"\")\r\n         local deffile = basename .. \".def\"\r\n         local def = io.open(dir.path(fs.current_dir(), deffile), \"w+\")\r\n         def:write(\"EXPORTS\\n\")\r\n         def:write(\"luaopen_\"..name:gsub(\"%.\", \"_\")..\"\\n\")\r\n         def:close()\r\n         local ok = execute(variables.LD, \"-dll\", \"-def:\"..deffile, \"-out:\"..library, dir.path(variables.LUA_LIBDIR, variables.LUALIB), unpack(extras))\r\n         local basedir = \"\"\r\n         if name:find(\"%.\") ~= nil then\r\n            basedir = name:gsub(\"%.%w+$\", \"\\\\\")\r\n            basedir = basedir:gsub(\"%.\", \"\\\\\")\r\n         end\r\n         local manifestfile = basedir .. basename..\".dll.manifest\"\r\n\r\n         if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..basedir..basename..\".dll;2\")\r\n         end\r\n         return ok\r\n      end\r\n      compile_wrapper_binary = function(fullname, name)\r\n         local fullbasename = fullname:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local basename = name:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local object = basename..\".obj\"\r\n         local rcname = basename..\".rc\"\r\n         local resname = basename..\".res\"\r\n         local wrapname = basename..\".exe\"\r\n         make_rc(fullname, fullbasename..\".rc\")\r\n         local ok = execute(variables.RC, \"-r\", \"-fo\"..resname, rcname)\r\n         if not ok then return ok end\r\n         ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-c\", \"-Fo\"..object,\r\n                      \"-I\"..variables.LUA_INCDIR, variables.WRAPPER)\r\n         if not ok then return ok end\r\n         ok = execute(variables.LD, \"-out:\"..wrapname, resname, object,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB), \"user32.lib\")\r\n         local manifestfile = wrapname..\".manifest\"\r\n         if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..wrapname..\";1\")\r\n         end\r\n         return ok, wrapname\r\n      end\r\n   else\r\n\t-- Unix, Linux, Cygwin\r\n      compile_object = function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR, \"-c\", source, \"-o\", object, unpack(extras))\r\n      end\r\n      compile_library = function (library, objects, libraries, libdirs)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-L%s\", libdirs)\r\n         if cfg.gcc_rpath then\r\n            add_flags(extras, \"-Wl,-rpath,%s:\", libdirs)\r\n         end\r\n         add_flags(extras, \"-l%s\", libraries)\r\n\t\t -- Link to Lua\r\n         add_flags(extras, \"-l%s\", variables.LUA_LIB)\r\n         return execute(variables.LD..\" \"..variables.LIBFLAG, \"-o\", library, \"-L\"..variables.LUA_LIBDIR, unpack(extras))\r\n      end\r\n      compile_wrapper_binary = function(fullname, name) return true, name end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "compile_object = function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR, \"-c\", source, \"-o\", object, unpack(extras))\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local extras = {}",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "add_flags(extras, \"-D%s\", defines)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "add_flags(extras, \"-I%s\", incdirs)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "compile_library = function (library, objects, libraries, libdirs)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-L%s\", libdirs)\r\n         add_flags(extras, \"-l%s\", libraries)\r\n         extras[#extras+1] = dir.path(variables.LUA_LIBDIR, variables.LUALIB)\r\n         extras[#extras+1] = \"-l\" .. (variables.MSVCRT or \"m\")\r\n         local ok = execute(variables.LD..\" \"..variables.LIBFLAG, \"-o\", library, unpack(extras))\r\n         return ok\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "local extras = { unpack(objects) }",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "add_flags(extras, \"-L%s\", libdirs)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "add_flags(extras, \"-l%s\", libraries)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "extras[#extras+1] = dir.path(variables.LUA_LIBDIR, variables.LUALIB)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "extras[#extras+1] = \"-l\" .. (variables.MSVCRT or \"m\")",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "local ok = execute(variables.LD..\" \"..variables.LIBFLAG, \"-o\", library, unpack(extras))",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "compile_wrapper_binary = function(fullname, name)\r\n         local fullbasename = fullname:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local basename = name:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local rcname = basename..\".rc\"\r\n         local resname = basename..\".o\"\r\n         local wrapname = basename..\".exe\"\r\n         make_rc(fullname, fullbasename..\".rc\")\r\n         local ok = execute(variables.RC, \"-o\", resname, rcname)\r\n         if not ok then return ok end\r\n         ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR,\r\n                      \"-o\", wrapname, resname, variables.WRAPPER,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB),\r\n                      \"-l\" .. (variables.MSVCRT or \"m\"), \"-luser32\")\r\n         return ok, wrapname\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "local fullbasename = fullname:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local basename = name:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local rcname = basename..\".rc\"",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local resname = basename..\".o\"",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local wrapname = basename..\".exe\"",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "make_rc(fullname, fullbasename..\".rc\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local ok = execute(variables.RC, \"-o\", resname, rcname)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if not ok then return ok end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR,\r\n                      \"-o\", wrapname, resname, variables.WRAPPER,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB),\r\n                      \"-l\" .. (variables.MSVCRT or \"m\"), \"-luser32\")",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "compile_wrapper_binary = function(fullname, name) return true, name end",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "compile_object = function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-c\", \"-Fo\"..object, \"-I\"..variables.LUA_INCDIR, source, unpack(extras))\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "compile_library = function(library, objects, libraries, libdirs, name)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-libpath:%s\", libdirs)\r\n         add_flags(extras, \"%s.lib\", libraries)\r\n         local basename = dir.base_name(library):gsub(\".[^.]*$\", \"\")\r\n         local deffile = basename .. \".def\"\r\n         local def = io.open(dir.path(fs.current_dir(), deffile), \"w+\")\r\n         def:write(\"EXPORTS\\n\")\r\n         def:write(\"luaopen_\"..name:gsub(\"%.\", \"_\")..\"\\n\")\r\n         def:close()\r\n         local ok = execute(variables.LD, \"-dll\", \"-def:\"..deffile, \"-out:\"..library, dir.path(variables.LUA_LIBDIR, variables.LUALIB), unpack(extras))\r\n         local basedir = \"\"\r\n         if name:find(\"%.\") ~= nil then\r\n            basedir = name:gsub(\"%.%w+$\", \"\\\\\")\r\n            basedir = basedir:gsub(\"%.\", \"\\\\\")\r\n         end\r\n         local manifestfile = basedir .. basename..\".dll.manifest\"\r\n\r\n         if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..basedir..basename..\".dll;2\")\r\n         end\r\n         return ok\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "add_flags(extras, \"-libpath:%s\", libdirs)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "add_flags(extras, \"%s.lib\", libraries)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local basename = dir.base_name(library):gsub(\".[^.]*$\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local deffile = basename .. \".def\"",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "local def = io.open(dir.path(fs.current_dir(), deffile), \"w+\")",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "def:write(\"EXPORTS\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "def:write(\"luaopen_\"..name:gsub(\"%.\", \"_\")..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "def:close()",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "local ok = execute(variables.LD, \"-dll\", \"-def:\"..deffile, \"-out:\"..library, dir.path(variables.LUA_LIBDIR, variables.LUALIB), unpack(extras))",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local basedir = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if name:find(\"%.\") ~= nil then\r\n            basedir = name:gsub(\"%.%w+$\", \"\\\\\")\r\n            basedir = basedir:gsub(\"%.\", \"\\\\\")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "basedir = name:gsub(\"%.%w+$\", \"\\\\\")",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "basedir = basedir:gsub(\"%.\", \"\\\\\")",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "local manifestfile = basedir .. basename..\".dll.manifest\"",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..basedir..basename..\".dll;2\")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..basedir..basename..\".dll;2\")",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "compile_wrapper_binary = function(fullname, name)\r\n         local fullbasename = fullname:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local basename = name:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local object = basename..\".obj\"\r\n         local rcname = basename..\".rc\"\r\n         local resname = basename..\".res\"\r\n         local wrapname = basename..\".exe\"\r\n         make_rc(fullname, fullbasename..\".rc\")\r\n         local ok = execute(variables.RC, \"-r\", \"-fo\"..resname, rcname)\r\n         if not ok then return ok end\r\n         ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-c\", \"-Fo\"..object,\r\n                      \"-I\"..variables.LUA_INCDIR, variables.WRAPPER)\r\n         if not ok then return ok end\r\n         ok = execute(variables.LD, \"-out:\"..wrapname, resname, object,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB), \"user32.lib\")\r\n         local manifestfile = wrapname..\".manifest\"\r\n         if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..wrapname..\";1\")\r\n         end\r\n         return ok, wrapname\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "local object = basename..\".obj\"",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local resname = basename..\".res\"",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local ok = execute(variables.RC, \"-r\", \"-fo\"..resname, rcname)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-c\", \"-Fo\"..object,\r\n                      \"-I\"..variables.LUA_INCDIR, variables.WRAPPER)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "ok = execute(variables.LD, \"-out:\"..wrapname, resname, object,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB), \"user32.lib\")",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "local manifestfile = wrapname..\".manifest\"",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..wrapname..\";1\")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..wrapname..\";1\")",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "compile_library = function (library, objects, libraries, libdirs)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-L%s\", libdirs)\r\n         if cfg.gcc_rpath then\r\n            add_flags(extras, \"-Wl,-rpath,%s:\", libdirs)\r\n         end\r\n         add_flags(extras, \"-l%s\", libraries)\r\n\t\t -- Link to Lua\r\n         add_flags(extras, \"-l%s\", variables.LUA_LIB)\r\n         return execute(variables.LD..\" \"..variables.LIBFLAG, \"-o\", library, \"-L\"..variables.LUA_LIBDIR, unpack(extras))\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "if cfg.gcc_rpath then\r\n            add_flags(extras, \"-Wl,-rpath,%s:\", libdirs)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "add_flags(extras, \"-Wl,-rpath,%s:\", libdirs)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "add_flags(extras, \"-l%s\", variables.LUA_LIB)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "local ok = true",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local err = \"Build error\"",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local built_modules = {}",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local luadir = path.lua_dir(rockspec.name, rockspec.version)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local libdir = path.lib_dir(rockspec.name, rockspec.version)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "local docdir = path.doc_dir(rockspec.name, rockspec.version)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if build.install and build.install.bin then\r\n     for i, name in ipairs(build.install.bin) do\r\n       local fullname = dir.path(fs.current_dir(), name)\r\n       local match = name:match(\"%.lua$\")\r\n       local basename = name:gsub(\"%.lua$\", \"\")\r\n       local file\r\n       if not match then\r\n          file = io.open(fullname)\r\n       end\r\n       if match or (file and file:read():match(\"#!.*lua.*\")) then\r\n          ok, name = compile_wrapper_binary(fullname, name)\r\n          if ok then\r\n             build.install.bin[i] = name\r\n          else\r\n             if file then file:close() end\r\n             return nil, \"Build error in wrapper binaries\"\r\n          end\r\n       end\r\n       if file then file:close() end\r\n     end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "for i, name in ipairs(build.install.bin) do\r\n       local fullname = dir.path(fs.current_dir(), name)\r\n       local match = name:match(\"%.lua$\")\r\n       local basename = name:gsub(\"%.lua$\", \"\")\r\n       local file\r\n       if not match then\r\n          file = io.open(fullname)\r\n       end\r\n       if match or (file and file:read():match(\"#!.*lua.*\")) then\r\n          ok, name = compile_wrapper_binary(fullname, name)\r\n          if ok then\r\n             build.install.bin[i] = name\r\n          else\r\n             if file then file:close() end\r\n             return nil, \"Build error in wrapper binaries\"\r\n          end\r\n       end\r\n       if file then file:close() end\r\n     end",
    "type": "statement:genericfor"
  }, {
    "id": 95,
    "text": "local fullname = dir.path(fs.current_dir(), name)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "local match = name:match(\"%.lua$\")",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "local basename = name:gsub(\"%.lua$\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local file",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "if not match then\r\n          file = io.open(fullname)\r\n       end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "file = io.open(fullname)",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "if match or (file and file:read():match(\"#!.*lua.*\")) then\r\n          ok, name = compile_wrapper_binary(fullname, name)\r\n          if ok then\r\n             build.install.bin[i] = name\r\n          else\r\n             if file then file:close() end\r\n             return nil, \"Build error in wrapper binaries\"\r\n          end\r\n       end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "ok, name = compile_wrapper_binary(fullname, name)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "if ok then\r\n             build.install.bin[i] = name\r\n          else\r\n             if file then file:close() end\r\n             return nil, \"Build error in wrapper binaries\"\r\n          end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "build.install.bin[i] = name",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "if file then file:close() end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "for name, info in pairs(build.modules) do\r\n      local moddir = path.module_to_path(name)\r\n      if type(info) == \"string\" then\r\n         local ext = info:match(\".([^.]+)$\")\r\n         if ext == \"lua\" then\r\n            local filename = dir.base_name(info)\r\n            if info:match(\"init%.lua$\") and not name:match(\"%.init$\") then\r\n               moddir = path.module_to_path(name..\".init\")\r\n            else\r\n               local basename = name:match(\"([^.]+)$\")\r\n               local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n               if basename ~= baseinfo then\r\n                  filename = basename..\".lua\"\r\n               end\r\n            end\r\n            local dest = dir.path(luadir, moddir, filename)\r\n            built_modules[info] = dest\r\n         else\r\n            info = {info}\r\n         end\r\n      end\r\n      if type(info) == \"table\" then\r\n         local objects = {}\r\n         local sources = info.sources\r\n         if info[1] then sources = info end\r\n         if type(sources) == \"string\" then sources = {sources} end\r\n         for _, source in ipairs(sources) do\r\n            local object = source:gsub(\".[^.]*$\", \".\"..cfg.obj_extension)\r\n            if not object then\r\n               object = source..\".\"..cfg.obj_extension\r\n            end\r\n            ok = compile_object(object, source, info.defines, info.incdirs)\r\n            if not ok then\r\n               return nil, \"Failed compiling object \"..object\r\n            end\r\n            table.insert(objects, object)\r\n         end\r\n         if not ok then break end\r\n         local module_name = name:match(\"([^.]*)$\")..\".\"..util.matchquote(cfg.lib_extension)\r\n         if moddir ~= \"\" then\r\n            module_name = dir.path(moddir, module_name)\r\n            local ok, err = fs.make_dir(moddir)\r\n            if not ok then return nil, err end\r\n         end\r\n         built_modules[module_name] = dir.path(libdir, module_name)\r\n         ok = compile_library(module_name, objects, info.libraries, info.libdirs, name)\r\n         if not ok then\r\n            return nil, \"Failed compiling module \"..module_name\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 108,
    "text": "local moddir = path.module_to_path(name)",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if type(info) == \"string\" then\r\n         local ext = info:match(\".([^.]+)$\")\r\n         if ext == \"lua\" then\r\n            local filename = dir.base_name(info)\r\n            if info:match(\"init%.lua$\") and not name:match(\"%.init$\") then\r\n               moddir = path.module_to_path(name..\".init\")\r\n            else\r\n               local basename = name:match(\"([^.]+)$\")\r\n               local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n               if basename ~= baseinfo then\r\n                  filename = basename..\".lua\"\r\n               end\r\n            end\r\n            local dest = dir.path(luadir, moddir, filename)\r\n            built_modules[info] = dest\r\n         else\r\n            info = {info}\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "local ext = info:match(\".([^.]+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if ext == \"lua\" then\r\n            local filename = dir.base_name(info)\r\n            if info:match(\"init%.lua$\") and not name:match(\"%.init$\") then\r\n               moddir = path.module_to_path(name..\".init\")\r\n            else\r\n               local basename = name:match(\"([^.]+)$\")\r\n               local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n               if basename ~= baseinfo then\r\n                  filename = basename..\".lua\"\r\n               end\r\n            end\r\n            local dest = dir.path(luadir, moddir, filename)\r\n            built_modules[info] = dest\r\n         else\r\n            info = {info}\r\n         end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "local filename = dir.base_name(info)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if info:match(\"init%.lua$\") and not name:match(\"%.init$\") then\r\n               moddir = path.module_to_path(name..\".init\")\r\n            else\r\n               local basename = name:match(\"([^.]+)$\")\r\n               local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n               if basename ~= baseinfo then\r\n                  filename = basename..\".lua\"\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "moddir = path.module_to_path(name..\".init\")",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "local basename = name:match(\"([^.]+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "local baseinfo = filename:gsub(\"%.lua$\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "if basename ~= baseinfo then\r\n                  filename = basename..\".lua\"\r\n               end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "filename = basename..\".lua\"",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "local dest = dir.path(luadir, moddir, filename)",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "built_modules[info] = dest",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "info = {info}",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "if type(info) == \"table\" then\r\n         local objects = {}\r\n         local sources = info.sources\r\n         if info[1] then sources = info end\r\n         if type(sources) == \"string\" then sources = {sources} end\r\n         for _, source in ipairs(sources) do\r\n            local object = source:gsub(\".[^.]*$\", \".\"..cfg.obj_extension)\r\n            if not object then\r\n               object = source..\".\"..cfg.obj_extension\r\n            end\r\n            ok = compile_object(object, source, info.defines, info.incdirs)\r\n            if not ok then\r\n               return nil, \"Failed compiling object \"..object\r\n            end\r\n            table.insert(objects, object)\r\n         end\r\n         if not ok then break end\r\n         local module_name = name:match(\"([^.]*)$\")..\".\"..util.matchquote(cfg.lib_extension)\r\n         if moddir ~= \"\" then\r\n            module_name = dir.path(moddir, module_name)\r\n            local ok, err = fs.make_dir(moddir)\r\n            if not ok then return nil, err end\r\n         end\r\n         built_modules[module_name] = dir.path(libdir, module_name)\r\n         ok = compile_library(module_name, objects, info.libraries, info.libdirs, name)\r\n         if not ok then\r\n            return nil, \"Failed compiling module \"..module_name\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "local objects = {}",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "local sources = info.sources",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "if info[1] then sources = info end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "sources = info",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if type(sources) == \"string\" then sources = {sources} end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "sources = {sources}",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "for _, source in ipairs(sources) do\r\n            local object = source:gsub(\".[^.]*$\", \".\"..cfg.obj_extension)\r\n            if not object then\r\n               object = source..\".\"..cfg.obj_extension\r\n            end\r\n            ok = compile_object(object, source, info.defines, info.incdirs)\r\n            if not ok then\r\n               return nil, \"Failed compiling object \"..object\r\n            end\r\n            table.insert(objects, object)\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 130,
    "text": "local object = source:gsub(\".[^.]*$\", \".\"..cfg.obj_extension)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if not object then\r\n               object = source..\".\"..cfg.obj_extension\r\n            end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "object = source..\".\"..cfg.obj_extension",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "ok = compile_object(object, source, info.defines, info.incdirs)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "if not ok then\r\n               return nil, \"Failed compiling object \"..object\r\n            end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "table.insert(objects, object)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "if not ok then break end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "local module_name = name:match(\"([^.]*)$\")..\".\"..util.matchquote(cfg.lib_extension)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if moddir ~= \"\" then\r\n            module_name = dir.path(moddir, module_name)\r\n            local ok, err = fs.make_dir(moddir)\r\n            if not ok then return nil, err end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "module_name = dir.path(moddir, module_name)",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "local ok, err = fs.make_dir(moddir)",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "built_modules[module_name] = dir.path(libdir, module_name)",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "ok = compile_library(module_name, objects, info.libraries, info.libdirs, name)",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "if not ok then\r\n            return nil, \"Failed compiling module \"..module_name\r\n         end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "for name, dest in pairs(built_modules) do\r\n      fs.make_dir(dir.dir_name(dest))\r\n      ok = fs.copy(name, dest)\r\n      if not ok then\r\n         return nil, \"Failed installing \"..name..\" in \"..dest\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 146,
    "text": "fs.make_dir(dir.dir_name(dest))",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "ok = fs.copy(name, dest)",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "if not ok then\r\n         return nil, \"Failed installing \"..name..\" in \"..dest\r\n      end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "if fs.is_dir(\"lua\") then\r\n      local ok, err = fs.copy_contents(\"lua\", luadir)\r\n      if not ok then\r\n         return nil, \"Failed copying contents of 'lua' directory: \"..err\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "local ok, err = fs.copy_contents(\"lua\", luadir)",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "if not ok then\r\n         return nil, \"Failed copying contents of 'lua' directory: \"..err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "local function add_flags(extras, flag, flags)\r\n      if flags then\r\n         if type(flags) ~= \"table\" then\r\n            flags = { tostring(flags) }\r\n         end\r\n         util.variable_substitutions(flags, variables)\r\n         for _, v in ipairs(flags) do\r\n            table.insert(extras, flag:format(v))\r\n         end\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR, \"-c\", source, \"-o\", object, unpack(extras))\r\n      end",
    "type": "function"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function (library, objects, libraries, libdirs)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-L%s\", libdirs)\r\n         add_flags(extras, \"-l%s\", libraries)\r\n         extras[#extras+1] = dir.path(variables.LUA_LIBDIR, variables.LUALIB)\r\n         extras[#extras+1] = \"-l\" .. (variables.MSVCRT or \"m\")\r\n         local ok = execute(variables.LD..\" \"..variables.LIBFLAG, \"-o\", library, unpack(extras))\r\n         return ok\r\n      end",
    "type": "function"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function(fullname, name)\r\n         local fullbasename = fullname:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local basename = name:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local rcname = basename..\".rc\"\r\n         local resname = basename..\".o\"\r\n         local wrapname = basename..\".exe\"\r\n         make_rc(fullname, fullbasename..\".rc\")\r\n         local ok = execute(variables.RC, \"-o\", resname, rcname)\r\n         if not ok then return ok end\r\n         ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR,\r\n                      \"-o\", wrapname, resname, variables.WRAPPER,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB),\r\n                      \"-l\" .. (variables.MSVCRT or \"m\"), \"-luser32\")\r\n         return ok, wrapname\r\n      end",
    "type": "function"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function(fullname, name) return true, name end",
    "type": "function"
  }, {
    "id": 162,
    "text": "function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-c\", \"-Fo\"..object, \"-I\"..variables.LUA_INCDIR, source, unpack(extras))\r\n      end",
    "type": "function"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function(library, objects, libraries, libdirs, name)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-libpath:%s\", libdirs)\r\n         add_flags(extras, \"%s.lib\", libraries)\r\n         local basename = dir.base_name(library):gsub(\".[^.]*$\", \"\")\r\n         local deffile = basename .. \".def\"\r\n         local def = io.open(dir.path(fs.current_dir(), deffile), \"w+\")\r\n         def:write(\"EXPORTS\\n\")\r\n         def:write(\"luaopen_\"..name:gsub(\"%.\", \"_\")..\"\\n\")\r\n         def:close()\r\n         local ok = execute(variables.LD, \"-dll\", \"-def:\"..deffile, \"-out:\"..library, dir.path(variables.LUA_LIBDIR, variables.LUALIB), unpack(extras))\r\n         local basedir = \"\"\r\n         if name:find(\"%.\") ~= nil then\r\n            basedir = name:gsub(\"%.%w+$\", \"\\\\\")\r\n            basedir = basedir:gsub(\"%.\", \"\\\\\")\r\n         end\r\n         local manifestfile = basedir .. basename..\".dll.manifest\"\r\n\r\n         if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..basedir..basename..\".dll;2\")\r\n         end\r\n         return ok\r\n      end",
    "type": "function"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function(fullname, name)\r\n         local fullbasename = fullname:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local basename = name:gsub(\"%.lua$\", \"\"):gsub(\"/\", \"\\\\\")\r\n         local object = basename..\".obj\"\r\n         local rcname = basename..\".rc\"\r\n         local resname = basename..\".res\"\r\n         local wrapname = basename..\".exe\"\r\n         make_rc(fullname, fullbasename..\".rc\")\r\n         local ok = execute(variables.RC, \"-r\", \"-fo\"..resname, rcname)\r\n         if not ok then return ok end\r\n         ok = execute(variables.CC..\" \"..variables.CFLAGS, \"-c\", \"-Fo\"..object,\r\n                      \"-I\"..variables.LUA_INCDIR, variables.WRAPPER)\r\n         if not ok then return ok end\r\n         ok = execute(variables.LD, \"-out:\"..wrapname, resname, object,\r\n                      dir.path(variables.LUA_LIBDIR, variables.LUALIB), \"user32.lib\")\r\n         local manifestfile = wrapname..\".manifest\"\r\n         if ok and fs.exists(manifestfile) then\r\n            ok = execute(variables.MT, \"-manifest\", manifestfile, \"-outputresource:\"..wrapname..\";1\")\r\n         end\r\n         return ok, wrapname\r\n      end",
    "type": "function"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "function(object, source, defines, incdirs)\r\n         local extras = {}\r\n         add_flags(extras, \"-D%s\", defines)\r\n         add_flags(extras, \"-I%s\", incdirs)\r\n         return execute(variables.CC..\" \"..variables.CFLAGS, \"-I\"..variables.LUA_INCDIR, \"-c\", source, \"-o\", object, unpack(extras))\r\n      end",
    "type": "function"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function (library, objects, libraries, libdirs)\r\n         local extras = { unpack(objects) }\r\n         add_flags(extras, \"-L%s\", libdirs)\r\n         if cfg.gcc_rpath then\r\n            add_flags(extras, \"-Wl,-rpath,%s:\", libdirs)\r\n         end\r\n         add_flags(extras, \"-l%s\", libraries)\r\n\t\t -- Link to Lua\r\n         add_flags(extras, \"-l%s\", variables.LUA_LIB)\r\n         return execute(variables.LD..\" \"..variables.LIBFLAG, \"-o\", library, \"-L\"..variables.LUA_LIBDIR, unpack(extras))\r\n      end",
    "type": "function"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "function(fullname, name) return true, name end",
    "type": "function"
  }, {
    "id": 173,
    "text": "",
    "type": "function container"
  }, {
    "id": 174,
    "text": "function is_platform(query)\r\n   assert(type(query) == \"string\")\r\n\r\n   for _, platform in ipairs(platforms) do\r\n      if platform == query then\r\n         return true\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "function dir_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n   return (pathname:gsub(\"/*$\", \"\"):match(\"(.*)[/]+[^/]*\")) or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "function execute(command, ...)\r\n   assert(type(command) == \"string\")\r\n   return fs.execute_string(quote_args(command, ...))\r\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "function current_dir()\r\n   return lfs.currentdir()\r\nend",
    "type": "function"
  }, {
    "id": 180,
    "text": "function make_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   directory = dir.normalize(directory)\r\n   local path = nil\r\n   if directory:sub(2, 2) == \":\" then\r\n     path = directory:sub(1, 2)\r\n     directory = directory:sub(4)\r\n   else\r\n     if directory:match(\"^/\") then\r\n        path = \"\"\r\n     end\r\n   end\r\n   for d in directory:gmatch(\"([^\"..dir.separator..\"]+)\"..dir.separator..\"*\") do\r\n      path = path and path .. dir.separator .. d or d\r\n      local mode = lfs.attributes(path, \"mode\")\r\n      if not mode then\r\n         local ok, err = lfs.mkdir(path)\r\n         if not ok then\r\n            return false, err\r\n         end\r\n      elseif mode ~= \"directory\" then\r\n         return false, path..\" is not a directory\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "function copy(src, dest, perms)\r\n   assert(src and dest)\r\n   src = dir.normalize(src)\r\n   dest = dir.normalize(dest)\r\n   local destmode = lfs.attributes(dest, \"mode\")\r\n   if destmode == \"directory\" then\r\n      dest = dir.path(dest, dir.base_name(src))\r\n   end\r\n   if not perms then perms = fs.get_permissions(src) end\r\n   local src_h, err = io.open(src, \"rb\")\r\n   if not src_h then return nil, err end\r\n   local dest_h, err = io.open(dest, \"w+b\")\r\n   if not dest_h then src_h:close() return nil, err end\r\n   while true do\r\n      local block = src_h:read(8192)\r\n      if not block then break end\r\n      dest_h:write(block)\r\n   end\r\n   src_h:close()\r\n   dest_h:close()\r\n   fs.chmod(dest, perms)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "function copy_contents(src, dest)\r\n   assert(src and dest)\r\n   src = dir.normalize(src)\r\n   dest = dir.normalize(dest)\r\n   assert(lfs.attributes(src, \"mode\") == \"directory\")\r\n\r\n   for file in lfs.dir(src) do\r\n      if file ~= \".\" and file ~= \"..\" then\r\n         local ok = recursive_copy(dir.path(src, file), dest)\r\n         if not ok then\r\n            return false, \"Failed copying \"..src..\" to \"..dest\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 185,
    "text": "function lib_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, \"lib\")\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "function lua_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, \"lua\")\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "function doc_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, \"doc\")\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "function module_to_path(mod)\r\n   assert(type(mod) == \"string\")\r\n   return (mod:gsub(\"[^.]*$\", \"\"):gsub(\"%.\", dir.separator))\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "function matchquote(s)\r\n   return (s:gsub(\"[?%-+*%[%].%%()$^]\",\"%%%1\"))\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "function variable_substitutions(tbl, vars)\r\n   assert(type(tbl) == \"table\")\r\n   assert(type(vars) == \"table\")\r\n   \r\n   local updated = {}\r\n   for k, v in pairs(tbl) do\r\n      if type(v) == \"string\" then\r\n         updated[k] = v:gsub(var_format_pattern, vars)\r\n         if warn_failed_matches(updated[k]) then\r\n            updated[k] = updated[k]:gsub(var_format_pattern, \"\")\r\n         end\r\n      end\r\n   end\r\n   for k, v in pairs(updated) do\r\n      tbl[k] = v\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 192,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 193,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 194,
    "text": "module",
    "type": "global function"
  }, {
    "id": 195,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 196,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 197,
    "text": "lines",
    "type": "global function"
  }, {
    "id": 198,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 199,
    "text": "open",
    "type": "global function"
  }, {
    "id": 200,
    "text": "error",
    "type": "global function"
  }, {
    "id": 201,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 202,
    "text": "type",
    "type": "global function"
  }, {
    "id": 203,
    "text": "require",
    "type": "global function"
  }, {
    "id": 204,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 205,
    "text": "util)",
    "type": "module"
  }, {
    "id": 206,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 207,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 208,
    "text": "",
    "type": "variable container"
  }, {
    "id": 209,
    "text": "",
    "type": "require container"
  }, {
    "id": 210,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 212,
    "text": "path)",
    "type": "module"
  }, {
    "id": 213,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 231,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "require local variable"
  } ]
}