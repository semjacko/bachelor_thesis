{
  "_filename": "cvs.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/fetch/cvs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 20
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 21
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 22
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 23
  }, {
    "from": 3,
    "label": "calls",
    "to": 29
  }, {
    "from": 3,
    "label": "calls",
    "to": 26
  }, {
    "from": 3,
    "label": "calls",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 30
  }, {
    "from": 3,
    "label": "calls",
    "to": 27
  }, {
    "from": 3,
    "label": "calls",
    "to": 2
  }, {
    "from": 3,
    "label": "calls",
    "to": 25
  }, {
    "from": 24,
    "label": "calls",
    "to": 31
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 3,
    "label": "calls",
    "to": 33
  }, {
    "from": 24,
    "label": "calls",
    "to": 35
  }, {
    "from": 24,
    "label": "calls",
    "to": 35
  }, {
    "from": 24,
    "label": "calls",
    "to": 35
  }, {
    "from": 3,
    "label": "calls",
    "to": 32
  }, {
    "from": 3,
    "label": "calls",
    "to": 32
  }, {
    "from": 3,
    "label": "calls",
    "to": 34
  }, {
    "from": 3,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 24
  }, {
    "from": 24,
    "label": "declares",
    "to": 3
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 40,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "requires",
    "to": 38
  }, {
    "from": 40,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "requires",
    "to": 37
  }, {
    "from": 40,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "requires",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cvs",
    "type": "module"
  }, {
    "id": 2,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function get_sources(rockspec, extract, dest_dir)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(dest_dir) == \"string\" or not dest_dir)\r\n\r\n   local name_version = rockspec.name .. \"-\" .. rockspec.version\r\n   local module = rockspec.source.module or dir.base_name(rockspec.source.url)\r\n   local command = {rockspec.variables.CVS, \"-d\"..rockspec.source.pathname, \"export\", module}\r\n   if rockspec.source.tag then\r\n      table.insert(command, 4, \"-r\")\r\n      table.insert(command, 5, rockspec.source.tag)\r\n   end\r\n   local store_dir\r\n   if not dest_dir then\r\n      store_dir = fs.make_temp_dir(name_version)\r\n      if not store_dir then\r\n         return nil, \"Failed creating temporary directory.\"\r\n      end\r\n      util.schedule_function(fs.delete, store_dir)\r\n   else\r\n      store_dir = dest_dir\r\n   end\r\n   local ok, err = fs.change_dir(store_dir)\r\n   if not ok then return nil, err end\r\n   if not fs.execute(unpack(command)) then\r\n      return nil, \"Failed fetching files from CVS.\"\r\n   end\r\n   fs.pop_dir()\r\n   return module, store_dir\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert(type(rockspec) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "assert(type(dest_dir) == \"string\" or not dest_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local name_version = rockspec.name .. \"-\" .. rockspec.version",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local module = rockspec.source.module or dir.base_name(rockspec.source.url)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local command = {rockspec.variables.CVS, \"-d\"..rockspec.source.pathname, \"export\", module}",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if rockspec.source.tag then\r\n      table.insert(command, 4, \"-r\")\r\n      table.insert(command, 5, rockspec.source.tag)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "table.insert(command, 4, \"-r\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "table.insert(command, 5, rockspec.source.tag)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local store_dir",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if not dest_dir then\r\n      store_dir = fs.make_temp_dir(name_version)\r\n      if not store_dir then\r\n         return nil, \"Failed creating temporary directory.\"\r\n      end\r\n      util.schedule_function(fs.delete, store_dir)\r\n   else\r\n      store_dir = dest_dir\r\n   end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "store_dir = fs.make_temp_dir(name_version)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if not store_dir then\r\n         return nil, \"Failed creating temporary directory.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "util.schedule_function(fs.delete, store_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "store_dir = dest_dir",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 19,
    "text": "local ok, err = fs.change_dir(store_dir)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "if not fs.execute(unpack(command)) then\r\n      return nil, \"Failed fetching files from CVS.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "fs.pop_dir()",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "",
    "type": "function container"
  }, {
    "id": 25,
    "text": "function make_temp_dir(name)\r\n   assert(type(name) == \"string\")\r\n   name = dir.normalize(name)\r\n\r\n   local temp_dir = (os.getenv(\"TMP\") or \"/tmp\") .. \"/luarocks_\" .. name:gsub(dir.separator, \"_\") .. \"-\" .. tostring(math.floor(math.random() * 10000))\r\n   local ok, err = fs.make_dir(temp_dir)\r\n   if ok then\r\n      return temp_dir\r\n   else\r\n      return nil, err\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function execute(command, ...)\r\n   assert(type(command) == \"string\")\r\n   return fs.execute_string(quote_args(command, ...))\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function change_dir(d)\r\n   table.insert(dir_stack, lfs.currentdir())\r\n   d = dir.normalize(d)\r\n   return lfs.chdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function pop_dir()\r\n   local d = table.remove(dir_stack)\r\n   if d then\r\n      lfs.chdir(d)\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function schedule_function(f, ...)\r\n   assert(type(f) == \"function\")\r\n   \r\n   local item = { fn = f, args = {...} }\r\n   table.insert(scheduled_functions, item)\r\n   return item\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 31,
    "text": "module",
    "type": "global function"
  }, {
    "id": 32,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 33,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 34,
    "text": "type",
    "type": "global function"
  }, {
    "id": 35,
    "text": "require",
    "type": "global function"
  }, {
    "id": 36,
    "text": "util)",
    "type": "module"
  }, {
    "id": 37,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 38,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 39,
    "text": "",
    "type": "variable container"
  }, {
    "id": 40,
    "text": "",
    "type": "require container"
  }, {
    "id": 41,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 43,
    "text": "",
    "type": "require local variable"
  } ]
}