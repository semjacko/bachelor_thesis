{
  "_filename": "unpack.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/unpack.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 16
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 17
  }, {
    "from": 28,
    "label": "has",
    "to": 18
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 21
  }, {
    "from": 35,
    "label": "has",
    "to": 25
  }, {
    "from": 35,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 19
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 19
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 21
  }, {
    "from": 40,
    "label": "has",
    "to": 19
  }, {
    "from": 40,
    "label": "has",
    "to": 52
  }, {
    "from": 40,
    "label": "has",
    "to": 53
  }, {
    "from": 40,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 40,
    "label": "has",
    "to": 57
  }, {
    "from": 40,
    "label": "has",
    "to": 19
  }, {
    "from": 40,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 58,
    "label": "has",
    "to": 63
  }, {
    "from": 58,
    "label": "has",
    "to": 64
  }, {
    "from": 58,
    "label": "has",
    "to": 65
  }, {
    "from": 40,
    "label": "has",
    "to": 19
  }, {
    "from": 40,
    "label": "has",
    "to": 66
  }, {
    "from": 40,
    "label": "has",
    "to": 19
  }, {
    "from": 40,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 19
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 19
  }, {
    "from": 68,
    "label": "has",
    "to": 19
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 28,
    "label": "calls",
    "to": 2
  }, {
    "from": 40,
    "label": "calls",
    "to": 12
  }, {
    "from": 14,
    "label": "calls",
    "to": 83
  }, {
    "from": 14,
    "label": "calls",
    "to": 83
  }, {
    "from": 28,
    "label": "calls",
    "to": 83
  }, {
    "from": 28,
    "label": "calls",
    "to": 83
  }, {
    "from": 40,
    "label": "calls",
    "to": 83
  }, {
    "from": 68,
    "label": "calls",
    "to": 83
  }, {
    "from": 40,
    "label": "calls",
    "to": 10
  }, {
    "from": 40,
    "label": "calls",
    "to": 11
  }, {
    "from": 40,
    "label": "calls",
    "to": 14
  }, {
    "from": 40,
    "label": "calls",
    "to": 4
  }, {
    "from": 40,
    "label": "calls",
    "to": 77
  }, {
    "from": 40,
    "label": "calls",
    "to": 76
  }, {
    "from": 75,
    "label": "calls",
    "to": 86
  }, {
    "from": 75,
    "label": "calls",
    "to": 86
  }, {
    "from": 75,
    "label": "calls",
    "to": 86
  }, {
    "from": 75,
    "label": "calls",
    "to": 86
  }, {
    "from": 75,
    "label": "calls",
    "to": 86
  }, {
    "from": 68,
    "label": "calls",
    "to": 86
  }, {
    "from": 68,
    "label": "calls",
    "to": 80
  }, {
    "from": 68,
    "label": "calls",
    "to": 40
  }, {
    "from": 40,
    "label": "calls",
    "to": 79
  }, {
    "from": 40,
    "label": "calls",
    "to": 79
  }, {
    "from": 40,
    "label": "calls",
    "to": 79
  }, {
    "from": 40,
    "label": "calls",
    "to": 79
  }, {
    "from": 14,
    "label": "calls",
    "to": 85
  }, {
    "from": 14,
    "label": "calls",
    "to": 85
  }, {
    "from": 28,
    "label": "calls",
    "to": 85
  }, {
    "from": 28,
    "label": "calls",
    "to": 85
  }, {
    "from": 40,
    "label": "calls",
    "to": 85
  }, {
    "from": 68,
    "label": "calls",
    "to": 85
  }, {
    "from": 68,
    "label": "calls",
    "to": 85
  }, {
    "from": 14,
    "label": "calls",
    "to": 8
  }, {
    "from": 14,
    "label": "calls",
    "to": 8
  }, {
    "from": 28,
    "label": "calls",
    "to": 8
  }, {
    "from": 28,
    "label": "calls",
    "to": 8
  }, {
    "from": 28,
    "label": "calls",
    "to": 5
  }, {
    "from": 14,
    "label": "calls",
    "to": 6
  }, {
    "from": 28,
    "label": "calls",
    "to": 6
  }, {
    "from": 75,
    "label": "calls",
    "to": 84
  }, {
    "from": 40,
    "label": "calls",
    "to": 3
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 40,
    "label": "calls",
    "to": 28
  }, {
    "from": 14,
    "label": "calls",
    "to": 9
  }, {
    "from": 14,
    "label": "calls",
    "to": 9
  }, {
    "from": 28,
    "label": "calls",
    "to": 9
  }, {
    "from": 68,
    "label": "calls",
    "to": 13
  }, {
    "from": 28,
    "label": "calls",
    "to": 82
  }, {
    "from": 68,
    "label": "calls",
    "to": 78
  }, {
    "from": 40,
    "label": "calls",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 75,
    "label": "declares",
    "to": 14
  }, {
    "from": 75,
    "label": "declares",
    "to": 28
  }, {
    "from": 75,
    "label": "declares",
    "to": 40
  }, {
    "from": 75,
    "label": "declares",
    "to": 68
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 94
  }, {
    "from": 93,
    "label": "initializes",
    "to": 95
  }, {
    "from": 93,
    "label": "initializes",
    "to": 96
  }, {
    "from": 93,
    "label": "initializes",
    "to": 97
  }, {
    "from": 94,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 88
  }, {
    "from": 94,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 90
  }, {
    "from": 94,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "requires",
    "to": 87
  }, {
    "from": 94,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "requires",
    "to": 92
  }, {
    "from": 94,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "requires",
    "to": 89
  }, {
    "from": 94,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "requires",
    "to": 91
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "unpack",
    "type": "module"
  }, {
    "id": 2,
    "text": "function apply_patches(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n\r\n   local build = rockspec.build\r\n   if build.extra_files then\r\n      extract_from_rockspec(build.extra_files)\r\n   end\r\n   if build.patches then\r\n      extract_from_rockspec(build.patches)\r\n      for patch, patchdata in util.sortedpairs(build.patches) do\r\n         util.printout(\"Applying patch \"..patch..\"...\")\r\n         local ok, err = fs.apply_patch(tostring(patch), patchdata)\r\n         if not ok then\r\n            return nil, \"Failed applying patch \"..patch\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function fetch_and_unpack_rock(rock_file, dest)\r\n   assert(type(rock_file) == \"string\")\r\n   assert(type(dest) == \"string\" or not dest)\r\n\r\n   local name = dir.base_name(rock_file):match(\"(.*)%.[^.]*%.rock\")\r\n   \r\n   local rock_file, err, errcode = fetch_url_at_temp_dir(rock_file,\"luarocks-rock-\"..name)\r\n   if not rock_file then\r\n      return nil, \"Could not fetch rock file: \" .. err, errcode\r\n   end\r\n\r\n   rock_file = fs.absolute_name(rock_file)\r\n   local unpack_dir\r\n   if dest then\r\n      unpack_dir = dest\r\n      local ok, err = fs.make_dir(unpack_dir)\r\n      if not ok then\r\n         return nil, \"Failed unpacking rock file: \" .. err\r\n      end\r\n   else\r\n      unpack_dir = fs.make_temp_dir(name)\r\n   end\r\n   if not dest then\r\n      util.schedule_function(fs.delete, unpack_dir)\r\n   end\r\n   local ok, err = fs.change_dir(unpack_dir)\r\n   if not ok then return nil, err end\r\n   ok = fs.unzip(rock_file)\r\n   if not ok then\r\n      return nil, \"Failed unpacking rock file: \" .. rock_file\r\n   end\r\n   fs.pop_dir()\r\n   return unpack_dir\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function load_rockspec(filename, location)\r\n   assert(type(filename) == \"string\")\r\n\r\n   local name\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      name = \"rockspec\"\r\n   else\r\n      name = basename:match(\"(.*)%.rockspec\")\r\n      if not name then\r\n         return nil, \"Filename '\"..filename..\"' does not look like a rockspec.\"\r\n      end\r\n   end\r\n   \r\n   local err, errcode\r\n   if location then\r\n      local ok, err = fs.change_dir(location)\r\n      if not ok then return nil, err end\r\n      filename, err = fetch_url(filename)\r\n      fs.pop_dir()\r\n   else\r\n      filename, err, errcode = fetch_url_at_temp_dir(filename,\"luarocks-rockspec-\"..name)\r\n   end\r\n   if not filename then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   return load_local_rockspec(filename)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function fetch_sources(rockspec, extract, dest_dir)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(extract) == \"boolean\")\r\n   assert(type(dest_dir) == \"string\" or not dest_dir)\r\n\r\n   local protocol = rockspec.source.protocol\r\n   local ok, proto\r\n   if is_basic_protocol(protocol) then\r\n      proto = require(\"luarocks.fetch\")\r\n   else\r\n      ok, proto = pcall(require, \"luarocks.fetch.\"..protocol:gsub(\"[+-]\", \"_\"))\r\n      if not ok then\r\n         return nil, \"Unknown protocol \"..protocol\r\n      end\r\n   end\r\n   \r\n   if cfg.only_sources_from\r\n   and rockspec.source.pathname\r\n   and #rockspec.source.pathname > 0 then\r\n      if #cfg.only_sources_from == 0 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- download from remote servers disabled\"\r\n      elseif rockspec.source.pathname:find(cfg.only_sources_from, 1, true) ~= 1 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- only downloading from \"..cfg.only_sources_from\r\n      end\r\n   end\r\n   return proto.get_sources(rockspec, extract, dest_dir)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function change_dir(d)\r\n   table.insert(dir_stack, lfs.currentdir())\r\n   d = dir.normalize(d)\r\n   return lfs.chdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function pop_dir()\r\n   local d = table.remove(dir_stack)\r\n   if d then\r\n      lfs.chdir(d)\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function make_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   directory = dir.normalize(directory)\r\n   local path = nil\r\n   if directory:sub(2, 2) == \":\" then\r\n     path = directory:sub(1, 2)\r\n     directory = directory:sub(4)\r\n   else\r\n     if directory:match(\"^/\") then\r\n        path = \"\"\r\n     end\r\n   end\r\n   for d in directory:gmatch(\"([^\"..dir.separator..\"]+)\"..dir.separator..\"*\") do\r\n      path = path and path .. dir.separator .. d or d\r\n      local mode = lfs.attributes(path, \"mode\")\r\n      if not mode then\r\n         local ok, err = lfs.mkdir(path)\r\n         if not ok then\r\n            return false, err\r\n         end\r\n      elseif mode ~= \"directory\" then\r\n         return false, path..\" is not a directory\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function copy(src, dest, perms)\r\n   assert(src and dest)\r\n   src = dir.normalize(src)\r\n   dest = dir.normalize(dest)\r\n   local destmode = lfs.attributes(dest, \"mode\")\r\n   if destmode == \"directory\" then\r\n      dest = dir.path(dest, dir.base_name(src))\r\n   end\r\n   if not perms then perms = fs.get_permissions(src) end\r\n   local src_h, err = io.open(src, \"rb\")\r\n   if not src_h then return nil, err end\r\n   local dest_h, err = io.open(dest, \"w+b\")\r\n   if not dest_h then src_h:close() return nil, err end\r\n   while true do\r\n      local block = src_h:read(8192)\r\n      if not block then break end\r\n      dest_h:write(block)\r\n   end\r\n   src_h:close()\r\n   dest_h:close()\r\n   fs.chmod(dest, perms)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function act_on_src_or_rockspec(action, name, version, ...)\r\n   assert(type(action) == \"function\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   local query = make_query(name, version)\r\n   query.arch = \"src|rockspec\"\r\n   local results, err = find_suitable_rock(query)\r\n   if type(results) == \"string\" then\r\n      return action(results, ...)\r\n   else\r\n      return nil, \"Could not find a result named \"..name..(version and \" \"..version or \"\")..\".\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local function unpack_rockspec(rockspec_file, dir_name)\r\n   assert(type(rockspec_file) == \"string\")\r\n   assert(type(dir_name) == \"string\")\r\n\r\n   local rockspec, err = fetch.load_rockspec(rockspec_file)\r\n   if not rockspec then\r\n      return nil, \"Failed loading rockspec \"..rockspec_file..\": \"..err\r\n   end\r\n   local ok, err = fs.change_dir(dir_name)\r\n   if not ok then return nil, err end\r\n   local ok, sources_dir = fetch.fetch_sources(rockspec, true, \".\")\r\n   if not ok then\r\n      return nil, sources_dir\r\n   end\r\n   ok, err = fs.change_dir(sources_dir)\r\n   if not ok then return nil, err end\r\n   build.apply_patches(rockspec)\r\n   fs.pop_dir()\r\n   fs.pop_dir()\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "assert(type(rockspec_file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert(type(dir_name) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "local rockspec, err = fetch.load_rockspec(rockspec_file)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if not rockspec then\r\n      return nil, \"Failed loading rockspec \"..rockspec_file..\": \"..err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "local ok, err = fs.change_dir(dir_name)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local ok, sources_dir = fetch.fetch_sources(rockspec, true, \".\")",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if not ok then\r\n      return nil, sources_dir\r\n   end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "ok, err = fs.change_dir(sources_dir)",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "build.apply_patches(rockspec)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "fs.pop_dir()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function unpack_rock(rock_file, dir_name, kind)\r\n   assert(type(rock_file) == \"string\")\r\n   assert(type(dir_name) == \"string\")\r\n\r\n   local ok, err, errcode = fetch.fetch_and_unpack_rock(rock_file, dir_name)\r\n   if not ok then\r\n      return nil, \"Failed unzipping rock \"..rock_file, errcode\r\n   end\r\n   ok, err = fs.change_dir(dir_name)\r\n   if not ok then return nil, err end\r\n   local rockspec_file = dir_name..\".rockspec\"\r\n   local rockspec, err = fetch.load_rockspec(rockspec_file)\r\n   if not rockspec then\r\n      return nil, \"Failed loading rockspec \"..rockspec_file..\": \"..err\r\n   end\r\n   if kind == \"src\" then\r\n      if rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n         ok, err = fs.change_dir(rockspec.source.dir)\r\n         if not ok then return nil, err end\r\n         build.apply_patches(rockspec)\r\n         fs.pop_dir()\r\n      end\r\n   end\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert(type(rock_file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local ok, err, errcode = fetch.fetch_and_unpack_rock(rock_file, dir_name)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if not ok then\r\n      return nil, \"Failed unzipping rock \"..rock_file, errcode\r\n   end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "ok, err = fs.change_dir(dir_name)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "local rockspec_file = dir_name..\".rockspec\"",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if kind == \"src\" then\r\n      if rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n         ok, err = fs.change_dir(rockspec.source.dir)\r\n         if not ok then return nil, err end\r\n         build.apply_patches(rockspec)\r\n         fs.pop_dir()\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n         ok, err = fs.change_dir(rockspec.source.dir)\r\n         if not ok then return nil, err end\r\n         build.apply_patches(rockspec)\r\n         fs.pop_dir()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "local ok, err = fs.unpack_archive(rockspec.source.file)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if not ok then\r\n            return nil, err\r\n         end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "ok, err = fs.change_dir(rockspec.source.dir)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function run_unpacker(file, force)\r\n   assert(type(file) == \"string\")\r\n   \r\n   local base_name = dir.base_name(file)\r\n   local dir_name, kind, extension = base_name:match(\"(.*)%.([^.]+)%.(rock)$\")\r\n   if not extension then\r\n      dir_name, extension = base_name:match(\"(.*)%.(rockspec)$\")\r\n      kind = \"rockspec\"\r\n   end\r\n   if not extension then\r\n      return nil, file..\" does not seem to be a valid filename.\"\r\n   end\r\n\r\n   local exists = fs.exists(dir_name)\r\n   if exists and not force then\r\n      return nil, \"Directory \"..dir_name..\" already exists.\"\r\n   end\r\n   if not exists then\r\n      local ok, err = fs.make_dir(dir_name)\r\n      if not ok then return nil, err end\r\n   end\r\n   local rollback = util.schedule_function(fs.delete, fs.absolute_name(dir_name))\r\n\r\n   local rockspec, err\r\n   if extension == \"rock\" then\r\n      rockspec, err = unpack_rock(file, dir_name, kind)\r\n   elseif extension == \"rockspec\" then\r\n      rockspec, err = unpack_rockspec(file, dir_name)\r\n   end\r\n   if not rockspec then\r\n      return nil, err\r\n   end\r\n   if kind == \"src\" or kind == \"rockspec\" then\r\n      if rockspec.source.dir ~= \".\" then\r\n         local ok = fs.copy(rockspec.local_filename, rockspec.source.dir)\r\n         if not ok then\r\n            return nil, \"Failed copying unpacked rockspec into unpacked source directory.\"\r\n         end\r\n      end\r\n      util.printout()   \r\n      util.printout(\"Done. You may now enter directory \")\r\n      util.printout(dir.path(dir_name, rockspec.source.dir))\r\n      util.printout(\"and type 'luarocks make' to build.\")\r\n   end\r\n   util.remove_scheduled_function(rollback)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert(type(file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local base_name = dir.base_name(file)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local dir_name, kind, extension = base_name:match(\"(.*)%.([^.]+)%.(rock)$\")",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if not extension then\r\n      dir_name, extension = base_name:match(\"(.*)%.(rockspec)$\")\r\n      kind = \"rockspec\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "dir_name, extension = base_name:match(\"(.*)%.(rockspec)$\")",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "kind = \"rockspec\"",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if not extension then\r\n      return nil, file..\" does not seem to be a valid filename.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local exists = fs.exists(dir_name)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if exists and not force then\r\n      return nil, \"Directory \"..dir_name..\" already exists.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "if not exists then\r\n      local ok, err = fs.make_dir(dir_name)\r\n      if not ok then return nil, err end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "local ok, err = fs.make_dir(dir_name)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local rollback = util.schedule_function(fs.delete, fs.absolute_name(dir_name))",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local rockspec, err",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if extension == \"rock\" then\r\n      rockspec, err = unpack_rock(file, dir_name, kind)\r\n   elseif extension == \"rockspec\" then\r\n      rockspec, err = unpack_rockspec(file, dir_name)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "rockspec, err = unpack_rock(file, dir_name, kind)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "rockspec, err = unpack_rockspec(file, dir_name)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if not rockspec then\r\n      return nil, err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "if kind == \"src\" or kind == \"rockspec\" then\r\n      if rockspec.source.dir ~= \".\" then\r\n         local ok = fs.copy(rockspec.local_filename, rockspec.source.dir)\r\n         if not ok then\r\n            return nil, \"Failed copying unpacked rockspec into unpacked source directory.\"\r\n         end\r\n      end\r\n      util.printout()   \r\n      util.printout(\"Done. You may now enter directory \")\r\n      util.printout(dir.path(dir_name, rockspec.source.dir))\r\n      util.printout(\"and type 'luarocks make' to build.\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "if rockspec.source.dir ~= \".\" then\r\n         local ok = fs.copy(rockspec.local_filename, rockspec.source.dir)\r\n         if not ok then\r\n            return nil, \"Failed copying unpacked rockspec into unpacked source directory.\"\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "local ok = fs.copy(rockspec.local_filename, rockspec.source.dir)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if not ok then\r\n            return nil, \"Failed copying unpacked rockspec into unpacked source directory.\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "util.printout()",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "util.printout(\"Done. You may now enter directory \")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "util.printout(dir.path(dir_name, rockspec.source.dir))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "util.printout(\"and type 'luarocks make' to build.\")",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "util.remove_scheduled_function(rollback)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n\r\n   assert(type(version) == \"string\" or not version)\r\n   if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"unpack\")\r\n   end\r\n\r\n   if name:match(\".*%.rock\") or name:match(\".*%.rockspec\") then\r\n      return run_unpacker(name, flags[\"force\"])\r\n   else\r\n      local search = require(\"luarocks.search\")\r\n      return search.act_on_src_or_rockspec(run_unpacker, name, version)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local flags, name, version = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "assert(type(version) == \"string\" or not version)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"unpack\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "if name:match(\".*%.rock\") or name:match(\".*%.rockspec\") then\r\n      return run_unpacker(name, flags[\"force\"])\r\n   else\r\n      local search = require(\"luarocks.search\")\r\n      return search.act_on_src_or_rockspec(run_unpacker, name, version)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "local search = require(\"luarocks.search\")",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "",
    "type": "function container"
  }, {
    "id": 76,
    "text": "function schedule_function(f, ...)\r\n   assert(type(f) == \"function\")\r\n   \r\n   local item = { fn = f, args = {...} }\r\n   table.insert(scheduled_functions, item)\r\n   return item\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "function remove_scheduled_function(item)\r\n   for k, v in pairs(scheduled_functions) do\r\n      if v == item then\r\n         table.remove(scheduled_functions, k)\r\n         return\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "function see_help(command, program)\r\n   return \"See '\"..this_program(program or \"luarocks\")..' help '..command..\"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "absolute_name",
    "type": "global function"
  }, {
    "id": 82,
    "text": "unpack_archive",
    "type": "global function"
  }, {
    "id": 83,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 84,
    "text": "module",
    "type": "global function"
  }, {
    "id": 85,
    "text": "type",
    "type": "global function"
  }, {
    "id": 86,
    "text": "require",
    "type": "global function"
  }, {
    "id": 87,
    "text": "util)",
    "type": "module"
  }, {
    "id": 88,
    "text": "fetch)",
    "type": "module"
  }, {
    "id": 89,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 90,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 91,
    "text": "search)",
    "type": "module"
  }, {
    "id": 92,
    "text": "build)",
    "type": "module"
  }, {
    "id": 93,
    "text": "",
    "type": "variable container"
  }, {
    "id": 94,
    "text": "",
    "type": "require container"
  }, {
    "id": 95,
    "text": "",
    "type": "global variable"
  }, {
    "id": 96,
    "text": "",
    "type": "global variable"
  }, {
    "id": 97,
    "text": "",
    "type": "global variable"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "require local variable"
  } ]
}