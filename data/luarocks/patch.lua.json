{
  "_filename": "patch.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/tools/patch.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 79
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 23
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 28
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 23
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 8
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 50,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 50,
    "label": "has",
    "to": 66
  }, {
    "from": 50,
    "label": "has",
    "to": 67
  }, {
    "from": 50,
    "label": "has",
    "to": 68
  }, {
    "from": 50,
    "label": "has",
    "to": 8
  }, {
    "from": 50,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 70,
    "label": "has",
    "to": 8
  }, {
    "from": 70,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 79,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 79,
    "label": "has",
    "to": 88
  }, {
    "from": 79,
    "label": "has",
    "to": 89
  }, {
    "from": 79,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 79,
    "label": "has",
    "to": 93
  }, {
    "from": 79,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 94,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 100,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 100,
    "label": "has",
    "to": 109
  }, {
    "from": 100,
    "label": "has",
    "to": 110
  }, {
    "from": 100,
    "label": "has",
    "to": 111
  }, {
    "from": 100,
    "label": "has",
    "to": 112
  }, {
    "from": 100,
    "label": "has",
    "to": 113
  }, {
    "from": 100,
    "label": "has",
    "to": 114
  }, {
    "from": 99,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 111
  }, {
    "from": 115,
    "label": "has",
    "to": 112
  }, {
    "from": 115,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 111
  }, {
    "from": 115,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 94,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 98
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 94,
    "label": "has",
    "to": 128
  }, {
    "from": 94,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 113
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 130,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 113
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 130,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 113
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 133
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 130,
    "label": "has",
    "to": 137
  }, {
    "from": 130,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 113
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 133
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 142,
    "label": "has",
    "to": 137
  }, {
    "from": 142,
    "label": "has",
    "to": 146
  }, {
    "from": 142,
    "label": "has",
    "to": 147
  }, {
    "from": 142,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 113
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 137
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 148,
    "label": "has",
    "to": 151
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 148,
    "label": "has",
    "to": 153
  }, {
    "from": 148,
    "label": "has",
    "to": 154
  }, {
    "from": 148,
    "label": "has",
    "to": 155
  }, {
    "from": 148,
    "label": "has",
    "to": 125
  }, {
    "from": 148,
    "label": "has",
    "to": 156
  }, {
    "from": 94,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 113
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 137
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 159,
    "label": "has",
    "to": 164
  }, {
    "from": 159,
    "label": "has",
    "to": 165
  }, {
    "from": 159,
    "label": "has",
    "to": 166
  }, {
    "from": 159,
    "label": "has",
    "to": 167
  }, {
    "from": 159,
    "label": "has",
    "to": 168
  }, {
    "from": 159,
    "label": "has",
    "to": 169
  }, {
    "from": 159,
    "label": "has",
    "to": 170
  }, {
    "from": 159,
    "label": "has",
    "to": 171
  }, {
    "from": 79,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 113
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 79,
    "label": "has",
    "to": 176
  }, {
    "from": 79,
    "label": "has",
    "to": 177
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 79,
    "label": "has",
    "to": 179
  }, {
    "from": 79,
    "label": "has",
    "to": 180
  }, {
    "from": 79,
    "label": "has",
    "to": 8
  }, {
    "from": 79,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 95
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 194
  }, {
    "from": 185,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 196,
    "label": "has",
    "to": 200
  }, {
    "from": 196,
    "label": "has",
    "to": 201
  }, {
    "from": 196,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 185,
    "label": "has",
    "to": 205
  }, {
    "from": 182,
    "label": "has",
    "to": 8
  }, {
    "from": 182,
    "label": "has",
    "to": 8
  }, {
    "from": 182,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 207,
    "label": "has",
    "to": 210
  }, {
    "from": 207,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 211,
    "label": "has",
    "to": 214
  }, {
    "from": 207,
    "label": "has",
    "to": 180
  }, {
    "from": 207,
    "label": "has",
    "to": 8
  }, {
    "from": 207,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 216,
    "label": "has",
    "to": 219
  }, {
    "from": 216,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 216,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 217
  }, {
    "from": 223,
    "label": "has",
    "to": 218
  }, {
    "from": 223,
    "label": "has",
    "to": 219
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 224,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 192
  }, {
    "from": 231,
    "label": "has",
    "to": 95
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 226
  }, {
    "from": 231,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 226
  }, {
    "from": 223,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 223,
    "label": "has",
    "to": 8
  }, {
    "from": 223,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 238,
    "label": "has",
    "to": 243
  }, {
    "from": 238,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 248,
    "label": "has",
    "to": 251
  }, {
    "from": 246,
    "label": "has",
    "to": 252
  }, {
    "from": 246,
    "label": "has",
    "to": 253
  }, {
    "from": 244,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 253
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 253
  }, {
    "from": 255,
    "label": "has",
    "to": 258
  }, {
    "from": 255,
    "label": "has",
    "to": 176
  }, {
    "from": 255,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 255,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 262,
    "label": "has",
    "to": 268
  }, {
    "from": 238,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 252
  }, {
    "from": 238,
    "label": "has",
    "to": 270
  }, {
    "from": 238,
    "label": "has",
    "to": 271
  }, {
    "from": 238,
    "label": "has",
    "to": 8
  }, {
    "from": 238,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 8
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 273,
    "label": "has",
    "to": 8
  }, {
    "from": 273,
    "label": "has",
    "to": 277
  }, {
    "from": 278,
    "label": "has",
    "to": 81
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 278,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 280,
    "label": "has",
    "to": 283
  }, {
    "from": 280,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 287,
    "label": "has",
    "to": 113
  }, {
    "from": 287,
    "label": "has",
    "to": 289
  }, {
    "from": 280,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 290,
    "label": "has",
    "to": 113
  }, {
    "from": 290,
    "label": "has",
    "to": 289
  }, {
    "from": 280,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 292,
    "label": "has",
    "to": 294
  }, {
    "from": 292,
    "label": "has",
    "to": 295
  }, {
    "from": 292,
    "label": "has",
    "to": 296
  }, {
    "from": 292,
    "label": "has",
    "to": 297
  }, {
    "from": 292,
    "label": "has",
    "to": 298
  }, {
    "from": 292,
    "label": "has",
    "to": 299
  }, {
    "from": 292,
    "label": "has",
    "to": 300
  }, {
    "from": 292,
    "label": "has",
    "to": 301
  }, {
    "from": 292,
    "label": "has",
    "to": 302
  }, {
    "from": 292,
    "label": "has",
    "to": 303
  }, {
    "from": 292,
    "label": "has",
    "to": 304
  }, {
    "from": 292,
    "label": "has",
    "to": 93
  }, {
    "from": 292,
    "label": "has",
    "to": 305
  }, {
    "from": 292,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 95
  }, {
    "from": 306,
    "label": "has",
    "to": 282
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 289
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 307,
    "label": "has",
    "to": 312
  }, {
    "from": 307,
    "label": "has",
    "to": 313
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 307,
    "label": "has",
    "to": 316
  }, {
    "from": 306,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 318,
    "label": "has",
    "to": 319
  }, {
    "from": 318,
    "label": "has",
    "to": 320
  }, {
    "from": 318,
    "label": "has",
    "to": 321
  }, {
    "from": 318,
    "label": "has",
    "to": 322
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 322,
    "label": "has",
    "to": 289
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 306,
    "label": "has",
    "to": 325
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 325,
    "label": "has",
    "to": 321
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 325,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 323
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 329,
    "label": "has",
    "to": 324
  }, {
    "from": 292,
    "label": "has",
    "to": 331
  }, {
    "from": 331,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 332,
    "label": "has",
    "to": 113
  }, {
    "from": 292,
    "label": "has",
    "to": 334
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 335,
    "label": "has",
    "to": 336
  }, {
    "from": 335,
    "label": "has",
    "to": 337
  }, {
    "from": 335,
    "label": "has",
    "to": 113
  }, {
    "from": 292,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 113
  }, {
    "from": 340,
    "label": "has",
    "to": 342
  }, {
    "from": 340,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 343,
    "label": "has",
    "to": 345
  }, {
    "from": 343,
    "label": "has",
    "to": 346
  }, {
    "from": 343,
    "label": "has",
    "to": 347
  }, {
    "from": 343,
    "label": "has",
    "to": 348
  }, {
    "from": 343,
    "label": "has",
    "to": 349
  }, {
    "from": 343,
    "label": "has",
    "to": 113
  }, {
    "from": 278,
    "label": "has",
    "to": 8
  }, {
    "from": 278,
    "label": "has",
    "to": 350
  }, {
    "from": 351,
    "label": "has",
    "to": 44
  }, {
    "from": 351,
    "label": "has",
    "to": 8
  }, {
    "from": 351,
    "label": "has",
    "to": 45
  }, {
    "from": 351,
    "label": "has",
    "to": 46
  }, {
    "from": 351,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 351,
    "label": "has",
    "to": 8
  }, {
    "from": 351,
    "label": "has",
    "to": 352
  }, {
    "from": 353,
    "label": "has",
    "to": 48
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 355,
    "label": "has",
    "to": 54
  }, {
    "from": 355,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 355,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 355,
    "label": "has",
    "to": 66
  }, {
    "from": 355,
    "label": "has",
    "to": 67
  }, {
    "from": 355,
    "label": "has",
    "to": 68
  }, {
    "from": 355,
    "label": "has",
    "to": 8
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 357,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 357,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 227,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 192
  }, {
    "from": 231,
    "label": "has",
    "to": 95
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 226
  }, {
    "from": 231,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 226
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 79,
    "label": "calls",
    "to": 374
  }, {
    "from": 182,
    "label": "calls",
    "to": 374
  }, {
    "from": 182,
    "label": "calls",
    "to": 374
  }, {
    "from": 223,
    "label": "calls",
    "to": 374
  }, {
    "from": 238,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 374
  }, {
    "from": 278,
    "label": "calls",
    "to": 25
  }, {
    "from": 79,
    "label": "calls",
    "to": 10
  }, {
    "from": 79,
    "label": "calls",
    "to": 10
  }, {
    "from": 79,
    "label": "calls",
    "to": 10
  }, {
    "from": 238,
    "label": "calls",
    "to": 10
  }, {
    "from": 238,
    "label": "calls",
    "to": 10
  }, {
    "from": 238,
    "label": "calls",
    "to": 10
  }, {
    "from": 79,
    "label": "calls",
    "to": 363
  }, {
    "from": 79,
    "label": "calls",
    "to": 363
  }, {
    "from": 79,
    "label": "calls",
    "to": 363
  }, {
    "from": 79,
    "label": "calls",
    "to": 363
  }, {
    "from": 278,
    "label": "calls",
    "to": 223
  }, {
    "from": 79,
    "label": "calls",
    "to": 7
  }, {
    "from": 79,
    "label": "calls",
    "to": 7
  }, {
    "from": 79,
    "label": "calls",
    "to": 7
  }, {
    "from": 79,
    "label": "calls",
    "to": 7
  }, {
    "from": 79,
    "label": "calls",
    "to": 7
  }, {
    "from": 79,
    "label": "calls",
    "to": 7
  }, {
    "from": 79,
    "label": "calls",
    "to": 7
  }, {
    "from": 182,
    "label": "calls",
    "to": 7
  }, {
    "from": 182,
    "label": "calls",
    "to": 7
  }, {
    "from": 223,
    "label": "calls",
    "to": 7
  }, {
    "from": 223,
    "label": "calls",
    "to": 7
  }, {
    "from": 238,
    "label": "calls",
    "to": 7
  }, {
    "from": 238,
    "label": "calls",
    "to": 7
  }, {
    "from": 238,
    "label": "calls",
    "to": 7
  }, {
    "from": 79,
    "label": "calls",
    "to": 4
  }, {
    "from": 79,
    "label": "calls",
    "to": 4
  }, {
    "from": 278,
    "label": "calls",
    "to": 4
  }, {
    "from": 278,
    "label": "calls",
    "to": 373
  }, {
    "from": 223,
    "label": "calls",
    "to": 365
  }, {
    "from": 238,
    "label": "calls",
    "to": 366
  }, {
    "from": 238,
    "label": "calls",
    "to": 366
  }, {
    "from": 238,
    "label": "calls",
    "to": 366
  }, {
    "from": 359,
    "label": "calls",
    "to": 367
  }, {
    "from": 37,
    "label": "calls",
    "to": 26
  }, {
    "from": 79,
    "label": "calls",
    "to": 43
  }, {
    "from": 79,
    "label": "calls",
    "to": 70
  }, {
    "from": 79,
    "label": "calls",
    "to": 70
  }, {
    "from": 278,
    "label": "calls",
    "to": 361
  }, {
    "from": 32,
    "label": "calls",
    "to": 369
  }, {
    "from": 278,
    "label": "calls",
    "to": 273
  }, {
    "from": 278,
    "label": "calls",
    "to": 273
  }, {
    "from": 14,
    "label": "calls",
    "to": 375
  }, {
    "from": 238,
    "label": "calls",
    "to": 375
  }, {
    "from": 238,
    "label": "calls",
    "to": 375
  }, {
    "from": 19,
    "label": "calls",
    "to": 376
  }, {
    "from": 26,
    "label": "calls",
    "to": 376
  }, {
    "from": 32,
    "label": "calls",
    "to": 376
  }, {
    "from": 79,
    "label": "calls",
    "to": 376
  }, {
    "from": 207,
    "label": "calls",
    "to": 376
  }, {
    "from": 238,
    "label": "calls",
    "to": 376
  }, {
    "from": 238,
    "label": "calls",
    "to": 376
  }, {
    "from": 223,
    "label": "calls",
    "to": 377
  }, {
    "from": 223,
    "label": "calls",
    "to": 377
  }, {
    "from": 223,
    "label": "calls",
    "to": 377
  }, {
    "from": 223,
    "label": "calls",
    "to": 377
  }, {
    "from": 79,
    "label": "calls",
    "to": 14
  }, {
    "from": 79,
    "label": "calls",
    "to": 14
  }, {
    "from": 79,
    "label": "calls",
    "to": 14
  }, {
    "from": 79,
    "label": "calls",
    "to": 14
  }, {
    "from": 79,
    "label": "calls",
    "to": 14
  }, {
    "from": 278,
    "label": "calls",
    "to": 370
  }, {
    "from": 278,
    "label": "calls",
    "to": 370
  }, {
    "from": 216,
    "label": "calls",
    "to": 182
  }, {
    "from": 278,
    "label": "calls",
    "to": 207
  }, {
    "from": 278,
    "label": "calls",
    "to": 216
  }, {
    "from": 278,
    "label": "calls",
    "to": 19
  }, {
    "from": 278,
    "label": "calls",
    "to": 19
  }, {
    "from": 278,
    "label": "calls",
    "to": 19
  }, {
    "from": 79,
    "label": "calls",
    "to": 362
  }, {
    "from": 207,
    "label": "calls",
    "to": 362
  }, {
    "from": 238,
    "label": "calls",
    "to": 362
  }, {
    "from": 238,
    "label": "calls",
    "to": 362
  }, {
    "from": 278,
    "label": "calls",
    "to": 362
  }, {
    "from": 278,
    "label": "calls",
    "to": 362
  }, {
    "from": 278,
    "label": "calls",
    "to": 362
  }, {
    "from": 278,
    "label": "calls",
    "to": 362
  }, {
    "from": 79,
    "label": "calls",
    "to": 364
  }, {
    "from": 182,
    "label": "calls",
    "to": 364
  }, {
    "from": 216,
    "label": "calls",
    "to": 364
  }, {
    "from": 223,
    "label": "calls",
    "to": 364
  }, {
    "from": 223,
    "label": "calls",
    "to": 364
  }, {
    "from": 238,
    "label": "calls",
    "to": 364
  }, {
    "from": 238,
    "label": "calls",
    "to": 364
  }, {
    "from": 278,
    "label": "calls",
    "to": 364
  }, {
    "from": 278,
    "label": "calls",
    "to": 364
  }, {
    "from": 278,
    "label": "calls",
    "to": 364
  }, {
    "from": 278,
    "label": "calls",
    "to": 364
  }, {
    "from": 79,
    "label": "calls",
    "to": 371
  }, {
    "from": 79,
    "label": "calls",
    "to": 371
  }, {
    "from": 79,
    "label": "calls",
    "to": 371
  }, {
    "from": 79,
    "label": "calls",
    "to": 371
  }, {
    "from": 79,
    "label": "calls",
    "to": 371
  }, {
    "from": 79,
    "label": "calls",
    "to": 371
  }, {
    "from": 79,
    "label": "calls",
    "to": 371
  }, {
    "from": 79,
    "label": "calls",
    "to": 371
  }, {
    "from": 79,
    "label": "calls",
    "to": 371
  }, {
    "from": 207,
    "label": "calls",
    "to": 371
  }, {
    "from": 79,
    "label": "calls",
    "to": 372
  }, {
    "from": 79,
    "label": "calls",
    "to": 372
  }, {
    "from": 79,
    "label": "calls",
    "to": 372
  }, {
    "from": 79,
    "label": "calls",
    "to": 372
  }, {
    "from": 182,
    "label": "calls",
    "to": 372
  }, {
    "from": 182,
    "label": "calls",
    "to": 372
  }, {
    "from": 207,
    "label": "calls",
    "to": 368
  }, {
    "from": 278,
    "label": "calls",
    "to": 238
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 5
  }, {
    "from": 182,
    "label": "calls",
    "to": 5
  }, {
    "from": 223,
    "label": "calls",
    "to": 5
  }, {
    "from": 278,
    "label": "calls",
    "to": 5
  }, {
    "from": 278,
    "label": "calls",
    "to": 5
  }, {
    "from": 278,
    "label": "calls",
    "to": 5
  }, {
    "from": 278,
    "label": "calls",
    "to": 5
  }, {
    "from": 278,
    "label": "calls",
    "to": 5
  }, {
    "from": 278,
    "label": "calls",
    "to": 5
  }, {
    "from": 278,
    "label": "calls",
    "to": 5
  }, {
    "from": 278,
    "label": "calls",
    "to": 5
  }, {
    "from": 278,
    "label": "calls",
    "to": 5
  }, {
    "from": 79,
    "label": "calls",
    "to": 360
  }, {
    "from": 79,
    "label": "calls",
    "to": 360
  }, {
    "from": 79,
    "label": "calls",
    "to": 360
  }, {
    "from": 79,
    "label": "calls",
    "to": 360
  }, {
    "from": 79,
    "label": "calls",
    "to": 50
  }, {
    "from": 207,
    "label": "calls",
    "to": 50
  }, {
    "from": 238,
    "label": "calls",
    "to": 50
  }, {
    "from": 278,
    "label": "calls",
    "to": 37
  }, {
    "from": 79,
    "label": "calls",
    "to": 3
  }, {
    "from": 79,
    "label": "calls",
    "to": 3
  }, {
    "from": 79,
    "label": "calls",
    "to": 3
  }, {
    "from": 238,
    "label": "calls",
    "to": 3
  }, {
    "from": 278,
    "label": "calls",
    "to": 3
  }, {
    "from": 278,
    "label": "calls",
    "to": 3
  }, {
    "from": 359,
    "label": "calls",
    "to": 378
  }, {
    "from": 359,
    "label": "calls",
    "to": 378
  }, {
    "from": 182,
    "label": "calls",
    "to": 12
  }, {
    "from": 182,
    "label": "calls",
    "to": 12
  }, {
    "from": 223,
    "label": "calls",
    "to": 12
  }, {
    "from": 223,
    "label": "calls",
    "to": 12
  }, {
    "from": 238,
    "label": "calls",
    "to": 12
  }, {
    "from": 278,
    "label": "calls",
    "to": 12
  }, {
    "from": 278,
    "label": "calls",
    "to": 12
  }, {
    "from": 278,
    "label": "calls",
    "to": 12
  }, {
    "from": 37,
    "label": "calls",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 359
  }, {
    "from": 359,
    "label": "declares",
    "to": 3
  }, {
    "from": 359,
    "label": "declares",
    "to": 4
  }, {
    "from": 359,
    "label": "declares",
    "to": 5
  }, {
    "from": 359,
    "label": "declares",
    "to": 7
  }, {
    "from": 359,
    "label": "declares",
    "to": 10
  }, {
    "from": 359,
    "label": "declares",
    "to": 12
  }, {
    "from": 359,
    "label": "declares",
    "to": 14
  }, {
    "from": 359,
    "label": "declares",
    "to": 19
  }, {
    "from": 359,
    "label": "declares",
    "to": 25
  }, {
    "from": 359,
    "label": "declares",
    "to": 26
  }, {
    "from": 359,
    "label": "declares",
    "to": 32
  }, {
    "from": 359,
    "label": "declares",
    "to": 37
  }, {
    "from": 359,
    "label": "declares",
    "to": 43
  }, {
    "from": 359,
    "label": "declares",
    "to": 50
  }, {
    "from": 359,
    "label": "declares",
    "to": 70
  }, {
    "from": 359,
    "label": "declares",
    "to": 79
  }, {
    "from": 359,
    "label": "declares",
    "to": 182
  }, {
    "from": 359,
    "label": "declares",
    "to": 207
  }, {
    "from": 359,
    "label": "declares",
    "to": 216
  }, {
    "from": 359,
    "label": "declares",
    "to": 223
  }, {
    "from": 359,
    "label": "declares",
    "to": 238
  }, {
    "from": 359,
    "label": "declares",
    "to": 273
  }, {
    "from": 359,
    "label": "declares",
    "to": 278
  }, {
    "from": 359,
    "label": "declares",
    "to": 351
  }, {
    "from": 359,
    "label": "declares",
    "to": 353
  }, {
    "from": 359,
    "label": "declares",
    "to": 355
  }, {
    "from": 359,
    "label": "declares",
    "to": 357
  }, {
    "from": 1,
    "label": "contains",
    "to": 381
  }, {
    "from": 1,
    "label": "contains",
    "to": 382
  }, {
    "from": 381,
    "label": "initializes",
    "to": 383
  }, {
    "from": 383,
    "label": "assigns",
    "to": 384
  }, {
    "from": 381,
    "label": "initializes",
    "to": 385
  }, {
    "from": 385,
    "label": "assigns",
    "to": 386
  }, {
    "from": 381,
    "label": "initializes",
    "to": 387
  }, {
    "from": 387,
    "label": "assigns",
    "to": 388
  }, {
    "from": 381,
    "label": "initializes",
    "to": 389
  }, {
    "from": 389,
    "label": "assigns",
    "to": 390
  }, {
    "from": 381,
    "label": "initializes",
    "to": 391
  }, {
    "from": 391,
    "label": "assigns",
    "to": 392
  }, {
    "from": 381,
    "label": "initializes",
    "to": 393
  }, {
    "from": 393,
    "label": "assigns",
    "to": 394
  }, {
    "from": 381,
    "label": "initializes",
    "to": 395
  }, {
    "from": 395,
    "label": "assigns",
    "to": 396
  }, {
    "from": 382,
    "label": "initializes",
    "to": 397
  }, {
    "from": 397,
    "label": "requires",
    "to": 380
  }, {
    "from": 382,
    "label": "initializes",
    "to": 398
  }, {
    "from": 398,
    "label": "requires",
    "to": 379
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "patch",
    "type": "module"
  }, {
    "id": 2,
    "text": "function apply_patch(patchname, patchdata)\r\n   local p, all_ok = patch.read_patch(patchname, patchdata)\r\n   if not all_ok then\r\n      return nil, \"Failed reading patch \"..patchname\r\n   end\r\n   if p then\r\n      return patch.apply_patch(p, 1)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function debug(s) end",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function info(s) end",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function warning(s) io.stderr:write(s .. '\\n') end",
    "type": "function"
  }, {
    "id": 6,
    "text": "io.stderr:write(s .. '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local function startswith(s, s2)\r\n  return s:sub(1, #s2) == s2\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function endswith(s, s2)\r\n  return #s >= #s2 and s:sub(#s-#s2+1) == s2\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function endlstrip(s)\r\n  return s:gsub('[\\r\\n]+$', '')\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function table_copy(t)\r\n  local t2 = {}\r\n  for k,v in pairs(t) do t2[k] = v end\r\n  return t2\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local t2 = {}",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for k,v in pairs(t) do t2[k] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "t2[k] = v",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function exists(filename)\r\n  local fh = io.open(filename)\r\n  local result = fh ~= nil\r\n  if fh then fh:close() end\r\n  return result\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local fh = io.open(filename)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local result = fh ~= nil",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if fh then fh:close() end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function isfile() return true end",
    "type": "function"
  }, {
    "id": 26,
    "text": "local function read_file(filename)\r\n  local fh, err, oserr = io.open(filename, 'rb')\r\n  if not fh then return fh, err, oserr end\r\n  local data, err, oserr = fh:read'*a'\r\n  fh:close()\r\n  if not data then return nil, err, oserr end\r\n  return data\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local fh, err, oserr = io.open(filename, 'rb')",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if not fh then return fh, err, oserr end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "local data, err, oserr = fh:read'*a'",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if not data then return nil, err, oserr end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function write_file(filename, data)\r\n  local fh, err, oserr = io.open(filename 'wb')\r\n  if not fh then return fh, err, oserr end\r\n  local status, err, oserr = fh:write(data)\r\n  fh:close()\r\n  if not status then return nil, err, oserr end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local fh, err, oserr = io.open(filename 'wb')",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local status, err, oserr = fh:write(data)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if not status then return nil, err, oserr end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function file_copy(src, dest)\r\n  local data, err, oserr = read_file(src)\r\n  if not data then return data, err, oserr end\r\n  local status, err, oserr = write_file(dest)\r\n  if not status then return status, err, oserr end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local data, err, oserr = read_file(src)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if not data then return data, err, oserr end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local status, err, oserr = write_file(dest)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if not status then return status, err, oserr end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function string_as_file(s)\r\n   return {\r\n      at = 0,\r\n      str = s,\r\n      len = #s,\r\n      eof = false,\r\n      read = function(self, n)\r\n         if self.eof then return nil end\r\n         local chunk = self.str:sub(self.at, self.at + n - 1)\r\n         self.at = self.at + n\r\n         if self.at > self.len then\r\n            self.eof = true\r\n         end\r\n         return chunk\r\n      end,\r\n      close = function(self)\r\n         self.eof = true\r\n      end,\r\n   }\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "if self.eof then return nil end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local chunk = self.str:sub(self.at, self.at + n - 1)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "self.at = self.at + n",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if self.at > self.len then\r\n            self.eof = true\r\n         end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "self.eof = true",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function file_lines(f)\r\n  local CHUNK_SIZE = 1024\r\n  local buffer = \"\"\r\n  local pos_beg = 1\r\n  return function()\r\n    local pos, chars\r\n    while 1 do\r\n      pos, chars = buffer:match('()([\\r\\n].)', pos_beg)\r\n      if pos or not f then\r\n        break\r\n      elseif f then\r\n        local chunk = f:read(CHUNK_SIZE)\r\n        if chunk then\r\n          buffer = buffer:sub(pos_beg) .. chunk\r\n          pos_beg = 1\r\n        else\r\n          f = nil\r\n        end\r\n      end\r\n    end\r\n    if not pos then\r\n      pos = #buffer\r\n    elseif chars == '\\r\\n' then\r\n      pos = pos + 1\r\n    end\r\n    local line = buffer:sub(pos_beg, pos)\r\n    pos_beg = pos + 1\r\n    if #line > 0 then\r\n      return line\r\n    end    \r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local CHUNK_SIZE = 1024",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local buffer = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local pos_beg = 1",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local pos, chars",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "while 1 do\r\n      pos, chars = buffer:match('()([\\r\\n].)', pos_beg)\r\n      if pos or not f then\r\n        break\r\n      elseif f then\r\n        local chunk = f:read(CHUNK_SIZE)\r\n        if chunk then\r\n          buffer = buffer:sub(pos_beg) .. chunk\r\n          pos_beg = 1\r\n        else\r\n          f = nil\r\n        end\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 56,
    "text": "pos, chars = buffer:match('()([\\r\\n].)', pos_beg)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if pos or not f then\r\n        break\r\n      elseif f then\r\n        local chunk = f:read(CHUNK_SIZE)\r\n        if chunk then\r\n          buffer = buffer:sub(pos_beg) .. chunk\r\n          pos_beg = 1\r\n        else\r\n          f = nil\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "local chunk = f:read(CHUNK_SIZE)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if chunk then\r\n          buffer = buffer:sub(pos_beg) .. chunk\r\n          pos_beg = 1\r\n        else\r\n          f = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "buffer = buffer:sub(pos_beg) .. chunk",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "pos_beg = 1",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "f = nil",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if not pos then\r\n      pos = #buffer\r\n    elseif chars == '\\r\\n' then\r\n      pos = pos + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "pos = #buffer",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "pos = pos + 1",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local line = buffer:sub(pos_beg, pos)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "pos_beg = pos + 1",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if #line > 0 then\r\n      return line\r\n    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function match_linerange(line)\r\n  local m1, m2, m3, m4 =      line:match(\"^@@ %-(%d+),(%d+) %+(%d+),(%d+)\")\r\n  if not m1 then m1, m3, m4 = line:match(\"^@@ %-(%d+) %+(%d+),(%d+)\") end\r\n  if not m1 then m1, m2, m3 = line:match(\"^@@ %-(%d+),(%d+) %+(%d+)\") end\r\n  if not m1 then m1, m3     = line:match(\"^@@ %-(%d+) %+(%d+)\") end\r\n  return m1, m2, m3, m4\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local m1, m2, m3, m4 =      line:match(\"^@@ %-(%d+),(%d+) %+(%d+),(%d+)\")",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if not m1 then m1, m3, m4 = line:match(\"^@@ %-(%d+) %+(%d+),(%d+)\") end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "m1, m3, m4 = line:match(\"^@@ %-(%d+) %+(%d+),(%d+)\")",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if not m1 then m1, m2, m3 = line:match(\"^@@ %-(%d+),(%d+) %+(%d+)\") end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "m1, m2, m3 = line:match(\"^@@ %-(%d+),(%d+) %+(%d+)\")",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if not m1 then m1, m3     = line:match(\"^@@ %-(%d+) %+(%d+)\") end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "m1, m3     = line:match(\"^@@ %-(%d+) %+(%d+)\")",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function read_patch(filename, data)\r\n  -- define possible file regions that will direct the parser flow\r\n  local state = 'header'\r\n    -- 'header'    - comments before the patch body\r\n    -- 'filenames' - lines starting with --- and +++\r\n    -- 'hunkhead'  - @@ -R +R @@ sequence\r\n    -- 'hunkbody'\r\n    -- 'hunkskip'  - skipping invalid hunk mode\r\n\r\n  local all_ok = true\r\n  local lineends = {lf=0, crlf=0, cr=0}\r\n  local files = {source={}, target={}, hunks={}, fileends={}, hunkends={}}\r\n  local nextfileno = 0\r\n  local nexthunkno = 0    --: even if index starts with 0 user messages\r\n                          --  number hunks from 1\r\n\r\n  -- hunkinfo holds parsed values, hunkactual - calculated\r\n  local hunkinfo = {\r\n    startsrc=nil, linessrc=nil, starttgt=nil, linestgt=nil,\r\n    invalid=false, text={}\r\n  }\r\n  local hunkactual = {linessrc=nil, linestgt=nil}\r\n\r\n  info(format(\"reading patch %s\", filename))\r\n\r\n  local fp\r\n  if data then\r\n    fp = string_as_file(data)\r\n  else\r\n    fp = filename == '-' and io.stdin or assert(io.open(filename, \"rb\"))\r\n  end\r\n  local lineno = 0\r\n\r\n  for line in file_lines(fp) do\r\n    lineno = lineno + 1\r\n    if state == 'header' then\r\n      if startswith(line, \"--- \") then\r\n        state = 'filenames'\r\n      end\r\n      -- state is 'header' or 'filenames'\r\n    end\r\n    if state == 'hunkbody' then\r\n      -- skip hunkskip and hunkbody code until definition of hunkhead read\r\n\r\n      -- process line first\r\n      if line:match\"^[- +\\\\]\" or line:match\"^[\\r\\n]*$\" then\r\n          -- gather stats about line endings\r\n          local he = files.hunkends[nextfileno]\r\n          if endswith(line, \"\\r\\n\") then\r\n            he.crlf = he.crlf + 1\r\n          elseif endswith(line, \"\\n\") then\r\n            he.lf = he.lf + 1\r\n          elseif endswith(line, \"\\r\") then\r\n            he.cr = he.cr + 1\r\n          end\r\n          if startswith(line, \"-\") then\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n          elseif startswith(line, \"+\") then\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          elseif startswith(line, \"\\\\\") then\r\n            -- nothing\r\n          else\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          end\r\n          table.insert(hunkinfo.text, line)\r\n          -- todo: handle \\ No newline cases\r\n      else\r\n          warning(format(\"invalid hunk no.%d at %d for target file %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))\r\n          -- add hunk status node\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          files.hunks[nextfileno][nexthunkno].invalid = true\r\n          all_ok = false\r\n          state = 'hunkskip'\r\n      end\r\n\r\n      -- check exit conditions\r\n      if hunkactual.linessrc > hunkinfo.linessrc or\r\n         hunkactual.linestgt > hunkinfo.linestgt\r\n      then\r\n          warning(format(\"extra hunk no.%d lines at %d for target %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))\r\n          -- add hunk status node\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          files.hunks[nextfileno][nexthunkno].invalid = true\r\n          state = 'hunkskip'\r\n      elseif hunkinfo.linessrc == hunkactual.linessrc and\r\n             hunkinfo.linestgt == hunkactual.linestgt\r\n      then\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          state = 'hunkskip'\r\n\r\n          -- detect mixed window/unix line ends\r\n          local ends = files.hunkends[nextfileno]\r\n          if (ends.cr~=0 and 1 or 0) + (ends.crlf~=0 and 1 or 0) +\r\n             (ends.lf~=0 and 1 or 0) > 1\r\n          then\r\n            warning(format(\"inconsistent line ends in patch hunks for %s\",\r\n                    files.source[nextfileno]))\r\n          end\r\n          if debugmode then\r\n            local debuglines = {crlf=ends.crlf, lf=ends.lf, cr=ends.cr,\r\n                  file=files.target[nextfileno], hunk=nexthunkno}\r\n            debug(format(\"crlf: %(crlf)d  lf: %(lf)d  cr: %(cr)d\\t \" ..\r\n                         \"- file: %(file)s hunk: %(hunk)d\", debuglines))\r\n          end\r\n      end\r\n      -- state is 'hunkbody' or 'hunkskip'\r\n    end\r\n\r\n    if state == 'hunkskip' then\r\n      if match_linerange(line) then\r\n        state = 'hunkhead'\r\n      elseif startswith(line, \"--- \") then\r\n        state = 'filenames'\r\n        if debugmode and #files.source > 0 then\r\n            debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                         files.source[nextfileno]))\r\n        end\r\n      end\r\n      -- state is 'hunkskip', 'hunkhead', or 'filenames'\r\n    end\r\n    local advance\r\n    if state == 'filenames' then\r\n      if startswith(line, \"--- \") then\r\n        if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n          -- double source filename line is encountered\r\n          -- attempt to restart from this second line\r\n        end\r\n        -- Accept a space as a terminator, like GNU patch does.\r\n        -- Breaks patches containing filenames with spaces...\r\n        -- FIXME Figure out what does GNU patch do in those cases.\r\n        local match = line:match(\"^%-%-%- ([^ \\t\\r\\n]+)\")\r\n        if not match then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid filename at line %d\", lineno+1))\r\n          state = 'header'\r\n        else\r\n          table.insert(files.source, match)\r\n        end\r\n      elseif not startswith(line, \"+++ \") then\r\n        if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no target for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n        else\r\n          -- this should be unreachable\r\n          warning(\"skipping invalid target patch\")\r\n        end\r\n        state = 'header'\r\n      else\r\n        if util.array_contains(files.target, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch - double target at line %d\",\r\n                         lineno+1))\r\n          table.remove(files.source, nextfileno+1)\r\n          table.remove(files.target, nextfileno+1)\r\n          nextfileno = nextfileno - 1\r\n          -- double target filename line is encountered\r\n          -- switch back to header state\r\n          state = 'header'\r\n        else\r\n          -- Accept a space as a terminator, like GNU patch does.\r\n          -- Breaks patches containing filenames with spaces...\r\n          -- FIXME Figure out what does GNU patch do in those cases.\r\n          local re_filename = \"^%+%+%+ ([^ \\t\\r\\n]+)\"\r\n          local match = line:match(re_filename)\r\n          if not match then\r\n            all_ok = false\r\n            warning(format(\r\n              \"skipping invalid patch - no target filename at line %d\",\r\n              lineno+1))\r\n            state = 'header'\r\n          else\r\n            table.insert(files.target, match)\r\n            nextfileno = nextfileno + 1\r\n            nexthunkno = 0\r\n            table.insert(files.hunks, {})\r\n            table.insert(files.hunkends, table_copy(lineends))\r\n            table.insert(files.fileends, table_copy(lineends))\r\n            state = 'hunkhead'\r\n            advance = true\r\n          end\r\n        end\r\n      end\r\n      -- state is 'filenames', 'header', or ('hunkhead' with advance)\r\n    end\r\n    if not advance and state == 'hunkhead' then\r\n      local m1, m2, m3, m4 = match_linerange(line)\r\n      if not m1 then\r\n        if not util.array_contains(files.hunks, nextfileno-1) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no hunks for file %s\",\r\n                         files.target[nextfileno]))\r\n        end\r\n        state = 'header'\r\n      else\r\n        hunkinfo.startsrc = tonumber(m1)\r\n        hunkinfo.linessrc = tonumber(m2 or 1)\r\n        hunkinfo.starttgt = tonumber(m3)\r\n        hunkinfo.linestgt = tonumber(m4 or 1)\r\n        hunkinfo.invalid = false\r\n        hunkinfo.text = {}\r\n\r\n        hunkactual.linessrc = 0\r\n        hunkactual.linestgt = 0\r\n\r\n        state = 'hunkbody'\r\n        nexthunkno = nexthunkno + 1\r\n      end\r\n      -- state is 'header' or 'hunkbody'\r\n    end\r\n  end\r\n  if state ~= 'hunkskip' then\r\n    warning(format(\"patch file incomplete - %s\", filename))\r\n    all_ok = false\r\n    -- os.exit(?)\r\n  else\r\n    -- duplicated message when an eof is reached\r\n    if debugmode and #files.source > 0 then\r\n      debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                   files.source[nextfileno]))\r\n    end\r\n  end\r\n\r\n  local sum = 0; for _,hset in ipairs(files.hunks) do sum = sum + #hset end\r\n  info(format(\"total files: %d  total hunks: %d\", #files.source, sum))\r\n  fp:close()\r\n  return files, all_ok\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "local state = 'header'",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local all_ok = true",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local lineends = {lf=0, crlf=0, cr=0}",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "local files = {source={}, target={}, hunks={}, fileends={}, hunkends={}}",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local nextfileno = 0",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local nexthunkno = 0",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local hunkinfo = {\r\n    startsrc=nil, linessrc=nil, starttgt=nil, linestgt=nil,\r\n    invalid=false, text={}\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local hunkactual = {linessrc=nil, linestgt=nil}",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "info(format(\"reading patch %s\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "local fp",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if data then\r\n    fp = string_as_file(data)\r\n  else\r\n    fp = filename == '-' and io.stdin or assert(io.open(filename, \"rb\"))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "fp = string_as_file(data)",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "fp = filename == '-' and io.stdin or assert(io.open(filename, \"rb\"))",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "local lineno = 0",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "for line in file_lines(fp) do\r\n    lineno = lineno + 1\r\n    if state == 'header' then\r\n      if startswith(line, \"--- \") then\r\n        state = 'filenames'\r\n      end\r\n      -- state is 'header' or 'filenames'\r\n    end\r\n    if state == 'hunkbody' then\r\n      -- skip hunkskip and hunkbody code until definition of hunkhead read\r\n\r\n      -- process line first\r\n      if line:match\"^[- +\\\\]\" or line:match\"^[\\r\\n]*$\" then\r\n          -- gather stats about line endings\r\n          local he = files.hunkends[nextfileno]\r\n          if endswith(line, \"\\r\\n\") then\r\n            he.crlf = he.crlf + 1\r\n          elseif endswith(line, \"\\n\") then\r\n            he.lf = he.lf + 1\r\n          elseif endswith(line, \"\\r\") then\r\n            he.cr = he.cr + 1\r\n          end\r\n          if startswith(line, \"-\") then\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n          elseif startswith(line, \"+\") then\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          elseif startswith(line, \"\\\\\") then\r\n            -- nothing\r\n          else\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          end\r\n          table.insert(hunkinfo.text, line)\r\n          -- todo: handle \\ No newline cases\r\n      else\r\n          warning(format(\"invalid hunk no.%d at %d for target file %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))\r\n          -- add hunk status node\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          files.hunks[nextfileno][nexthunkno].invalid = true\r\n          all_ok = false\r\n          state = 'hunkskip'\r\n      end\r\n\r\n      -- check exit conditions\r\n      if hunkactual.linessrc > hunkinfo.linessrc or\r\n         hunkactual.linestgt > hunkinfo.linestgt\r\n      then\r\n          warning(format(\"extra hunk no.%d lines at %d for target %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))\r\n          -- add hunk status node\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          files.hunks[nextfileno][nexthunkno].invalid = true\r\n          state = 'hunkskip'\r\n      elseif hunkinfo.linessrc == hunkactual.linessrc and\r\n             hunkinfo.linestgt == hunkactual.linestgt\r\n      then\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          state = 'hunkskip'\r\n\r\n          -- detect mixed window/unix line ends\r\n          local ends = files.hunkends[nextfileno]\r\n          if (ends.cr~=0 and 1 or 0) + (ends.crlf~=0 and 1 or 0) +\r\n             (ends.lf~=0 and 1 or 0) > 1\r\n          then\r\n            warning(format(\"inconsistent line ends in patch hunks for %s\",\r\n                    files.source[nextfileno]))\r\n          end\r\n          if debugmode then\r\n            local debuglines = {crlf=ends.crlf, lf=ends.lf, cr=ends.cr,\r\n                  file=files.target[nextfileno], hunk=nexthunkno}\r\n            debug(format(\"crlf: %(crlf)d  lf: %(lf)d  cr: %(cr)d\\t \" ..\r\n                         \"- file: %(file)s hunk: %(hunk)d\", debuglines))\r\n          end\r\n      end\r\n      -- state is 'hunkbody' or 'hunkskip'\r\n    end\r\n\r\n    if state == 'hunkskip' then\r\n      if match_linerange(line) then\r\n        state = 'hunkhead'\r\n      elseif startswith(line, \"--- \") then\r\n        state = 'filenames'\r\n        if debugmode and #files.source > 0 then\r\n            debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                         files.source[nextfileno]))\r\n        end\r\n      end\r\n      -- state is 'hunkskip', 'hunkhead', or 'filenames'\r\n    end\r\n    local advance\r\n    if state == 'filenames' then\r\n      if startswith(line, \"--- \") then\r\n        if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n          -- double source filename line is encountered\r\n          -- attempt to restart from this second line\r\n        end\r\n        -- Accept a space as a terminator, like GNU patch does.\r\n        -- Breaks patches containing filenames with spaces...\r\n        -- FIXME Figure out what does GNU patch do in those cases.\r\n        local match = line:match(\"^%-%-%- ([^ \\t\\r\\n]+)\")\r\n        if not match then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid filename at line %d\", lineno+1))\r\n          state = 'header'\r\n        else\r\n          table.insert(files.source, match)\r\n        end\r\n      elseif not startswith(line, \"+++ \") then\r\n        if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no target for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n        else\r\n          -- this should be unreachable\r\n          warning(\"skipping invalid target patch\")\r\n        end\r\n        state = 'header'\r\n      else\r\n        if util.array_contains(files.target, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch - double target at line %d\",\r\n                         lineno+1))\r\n          table.remove(files.source, nextfileno+1)\r\n          table.remove(files.target, nextfileno+1)\r\n          nextfileno = nextfileno - 1\r\n          -- double target filename line is encountered\r\n          -- switch back to header state\r\n          state = 'header'\r\n        else\r\n          -- Accept a space as a terminator, like GNU patch does.\r\n          -- Breaks patches containing filenames with spaces...\r\n          -- FIXME Figure out what does GNU patch do in those cases.\r\n          local re_filename = \"^%+%+%+ ([^ \\t\\r\\n]+)\"\r\n          local match = line:match(re_filename)\r\n          if not match then\r\n            all_ok = false\r\n            warning(format(\r\n              \"skipping invalid patch - no target filename at line %d\",\r\n              lineno+1))\r\n            state = 'header'\r\n          else\r\n            table.insert(files.target, match)\r\n            nextfileno = nextfileno + 1\r\n            nexthunkno = 0\r\n            table.insert(files.hunks, {})\r\n            table.insert(files.hunkends, table_copy(lineends))\r\n            table.insert(files.fileends, table_copy(lineends))\r\n            state = 'hunkhead'\r\n            advance = true\r\n          end\r\n        end\r\n      end\r\n      -- state is 'filenames', 'header', or ('hunkhead' with advance)\r\n    end\r\n    if not advance and state == 'hunkhead' then\r\n      local m1, m2, m3, m4 = match_linerange(line)\r\n      if not m1 then\r\n        if not util.array_contains(files.hunks, nextfileno-1) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no hunks for file %s\",\r\n                         files.target[nextfileno]))\r\n        end\r\n        state = 'header'\r\n      else\r\n        hunkinfo.startsrc = tonumber(m1)\r\n        hunkinfo.linessrc = tonumber(m2 or 1)\r\n        hunkinfo.starttgt = tonumber(m3)\r\n        hunkinfo.linestgt = tonumber(m4 or 1)\r\n        hunkinfo.invalid = false\r\n        hunkinfo.text = {}\r\n\r\n        hunkactual.linessrc = 0\r\n        hunkactual.linestgt = 0\r\n\r\n        state = 'hunkbody'\r\n        nexthunkno = nexthunkno + 1\r\n      end\r\n      -- state is 'header' or 'hunkbody'\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 95,
    "text": "lineno = lineno + 1",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if state == 'header' then\r\n      if startswith(line, \"--- \") then\r\n        state = 'filenames'\r\n      end\r\n      -- state is 'header' or 'filenames'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "if startswith(line, \"--- \") then\r\n        state = 'filenames'\r\n      end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "state = 'filenames'",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if state == 'hunkbody' then\r\n      -- skip hunkskip and hunkbody code until definition of hunkhead read\r\n\r\n      -- process line first\r\n      if line:match\"^[- +\\\\]\" or line:match\"^[\\r\\n]*$\" then\r\n          -- gather stats about line endings\r\n          local he = files.hunkends[nextfileno]\r\n          if endswith(line, \"\\r\\n\") then\r\n            he.crlf = he.crlf + 1\r\n          elseif endswith(line, \"\\n\") then\r\n            he.lf = he.lf + 1\r\n          elseif endswith(line, \"\\r\") then\r\n            he.cr = he.cr + 1\r\n          end\r\n          if startswith(line, \"-\") then\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n          elseif startswith(line, \"+\") then\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          elseif startswith(line, \"\\\\\") then\r\n            -- nothing\r\n          else\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          end\r\n          table.insert(hunkinfo.text, line)\r\n          -- todo: handle \\ No newline cases\r\n      else\r\n          warning(format(\"invalid hunk no.%d at %d for target file %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))\r\n          -- add hunk status node\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          files.hunks[nextfileno][nexthunkno].invalid = true\r\n          all_ok = false\r\n          state = 'hunkskip'\r\n      end\r\n\r\n      -- check exit conditions\r\n      if hunkactual.linessrc > hunkinfo.linessrc or\r\n         hunkactual.linestgt > hunkinfo.linestgt\r\n      then\r\n          warning(format(\"extra hunk no.%d lines at %d for target %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))\r\n          -- add hunk status node\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          files.hunks[nextfileno][nexthunkno].invalid = true\r\n          state = 'hunkskip'\r\n      elseif hunkinfo.linessrc == hunkactual.linessrc and\r\n             hunkinfo.linestgt == hunkactual.linestgt\r\n      then\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          state = 'hunkskip'\r\n\r\n          -- detect mixed window/unix line ends\r\n          local ends = files.hunkends[nextfileno]\r\n          if (ends.cr~=0 and 1 or 0) + (ends.crlf~=0 and 1 or 0) +\r\n             (ends.lf~=0 and 1 or 0) > 1\r\n          then\r\n            warning(format(\"inconsistent line ends in patch hunks for %s\",\r\n                    files.source[nextfileno]))\r\n          end\r\n          if debugmode then\r\n            local debuglines = {crlf=ends.crlf, lf=ends.lf, cr=ends.cr,\r\n                  file=files.target[nextfileno], hunk=nexthunkno}\r\n            debug(format(\"crlf: %(crlf)d  lf: %(lf)d  cr: %(cr)d\\t \" ..\r\n                         \"- file: %(file)s hunk: %(hunk)d\", debuglines))\r\n          end\r\n      end\r\n      -- state is 'hunkbody' or 'hunkskip'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "if line:match\"^[- +\\\\]\" or line:match\"^[\\r\\n]*$\" then\r\n          -- gather stats about line endings\r\n          local he = files.hunkends[nextfileno]\r\n          if endswith(line, \"\\r\\n\") then\r\n            he.crlf = he.crlf + 1\r\n          elseif endswith(line, \"\\n\") then\r\n            he.lf = he.lf + 1\r\n          elseif endswith(line, \"\\r\") then\r\n            he.cr = he.cr + 1\r\n          end\r\n          if startswith(line, \"-\") then\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n          elseif startswith(line, \"+\") then\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          elseif startswith(line, \"\\\\\") then\r\n            -- nothing\r\n          else\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          end\r\n          table.insert(hunkinfo.text, line)\r\n          -- todo: handle \\ No newline cases\r\n      else\r\n          warning(format(\"invalid hunk no.%d at %d for target file %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))\r\n          -- add hunk status node\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          files.hunks[nextfileno][nexthunkno].invalid = true\r\n          all_ok = false\r\n          state = 'hunkskip'\r\n      end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "local he = files.hunkends[nextfileno]",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if endswith(line, \"\\r\\n\") then\r\n            he.crlf = he.crlf + 1\r\n          elseif endswith(line, \"\\n\") then\r\n            he.lf = he.lf + 1\r\n          elseif endswith(line, \"\\r\") then\r\n            he.cr = he.cr + 1\r\n          end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "he.crlf = he.crlf + 1",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "he.lf = he.lf + 1",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "he.cr = he.cr + 1",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "if startswith(line, \"-\") then\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n          elseif startswith(line, \"+\") then\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          elseif startswith(line, \"\\\\\") then\r\n            -- nothing\r\n          else\r\n            hunkactual.linessrc = hunkactual.linessrc + 1\r\n            hunkactual.linestgt = hunkactual.linestgt + 1\r\n          end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "hunkactual.linessrc = hunkactual.linessrc + 1",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "hunkactual.linestgt = hunkactual.linestgt + 1",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "table.insert(hunkinfo.text, line)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "warning(format(\"invalid hunk no.%d at %d for target file %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "table.insert(files.hunks[nextfileno], table_copy(hunkinfo))",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "files.hunks[nextfileno][nexthunkno].invalid = true",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "all_ok = false",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "state = 'hunkskip'",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "if hunkactual.linessrc > hunkinfo.linessrc or\r\n         hunkactual.linestgt > hunkinfo.linestgt\r\n      then\r\n          warning(format(\"extra hunk no.%d lines at %d for target %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))\r\n          -- add hunk status node\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          files.hunks[nextfileno][nexthunkno].invalid = true\r\n          state = 'hunkskip'\r\n      elseif hunkinfo.linessrc == hunkactual.linessrc and\r\n             hunkinfo.linestgt == hunkactual.linestgt\r\n      then\r\n          table.insert(files.hunks[nextfileno], table_copy(hunkinfo))\r\n          state = 'hunkskip'\r\n\r\n          -- detect mixed window/unix line ends\r\n          local ends = files.hunkends[nextfileno]\r\n          if (ends.cr~=0 and 1 or 0) + (ends.crlf~=0 and 1 or 0) +\r\n             (ends.lf~=0 and 1 or 0) > 1\r\n          then\r\n            warning(format(\"inconsistent line ends in patch hunks for %s\",\r\n                    files.source[nextfileno]))\r\n          end\r\n          if debugmode then\r\n            local debuglines = {crlf=ends.crlf, lf=ends.lf, cr=ends.cr,\r\n                  file=files.target[nextfileno], hunk=nexthunkno}\r\n            debug(format(\"crlf: %(crlf)d  lf: %(lf)d  cr: %(cr)d\\t \" ..\r\n                         \"- file: %(file)s hunk: %(hunk)d\", debuglines))\r\n          end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "warning(format(\"extra hunk no.%d lines at %d for target %s\",\r\n                         nexthunkno, lineno, files.target[nextfileno]))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "local ends = files.hunkends[nextfileno]",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "if (ends.cr~=0 and 1 or 0) + (ends.crlf~=0 and 1 or 0) +\r\n             (ends.lf~=0 and 1 or 0) > 1\r\n          then\r\n            warning(format(\"inconsistent line ends in patch hunks for %s\",\r\n                    files.source[nextfileno]))\r\n          end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "warning(format(\"inconsistent line ends in patch hunks for %s\",\r\n                    files.source[nextfileno]))",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "if debugmode then\r\n            local debuglines = {crlf=ends.crlf, lf=ends.lf, cr=ends.cr,\r\n                  file=files.target[nextfileno], hunk=nexthunkno}\r\n            debug(format(\"crlf: %(crlf)d  lf: %(lf)d  cr: %(cr)d\\t \" ..\r\n                         \"- file: %(file)s hunk: %(hunk)d\", debuglines))\r\n          end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "local debuglines = {crlf=ends.crlf, lf=ends.lf, cr=ends.cr,\r\n                  file=files.target[nextfileno], hunk=nexthunkno}",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "debug(format(\"crlf: %(crlf)d  lf: %(lf)d  cr: %(cr)d\\t \" ..\r\n                         \"- file: %(file)s hunk: %(hunk)d\", debuglines))",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "if state == 'hunkskip' then\r\n      if match_linerange(line) then\r\n        state = 'hunkhead'\r\n      elseif startswith(line, \"--- \") then\r\n        state = 'filenames'\r\n        if debugmode and #files.source > 0 then\r\n            debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                         files.source[nextfileno]))\r\n        end\r\n      end\r\n      -- state is 'hunkskip', 'hunkhead', or 'filenames'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "if match_linerange(line) then\r\n        state = 'hunkhead'\r\n      elseif startswith(line, \"--- \") then\r\n        state = 'filenames'\r\n        if debugmode and #files.source > 0 then\r\n            debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                         files.source[nextfileno]))\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "state = 'hunkhead'",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "if debugmode and #files.source > 0 then\r\n            debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                         files.source[nextfileno]))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                         files.source[nextfileno]))",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "local advance",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "if state == 'filenames' then\r\n      if startswith(line, \"--- \") then\r\n        if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n          -- double source filename line is encountered\r\n          -- attempt to restart from this second line\r\n        end\r\n        -- Accept a space as a terminator, like GNU patch does.\r\n        -- Breaks patches containing filenames with spaces...\r\n        -- FIXME Figure out what does GNU patch do in those cases.\r\n        local match = line:match(\"^%-%-%- ([^ \\t\\r\\n]+)\")\r\n        if not match then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid filename at line %d\", lineno+1))\r\n          state = 'header'\r\n        else\r\n          table.insert(files.source, match)\r\n        end\r\n      elseif not startswith(line, \"+++ \") then\r\n        if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no target for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n        else\r\n          -- this should be unreachable\r\n          warning(\"skipping invalid target patch\")\r\n        end\r\n        state = 'header'\r\n      else\r\n        if util.array_contains(files.target, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch - double target at line %d\",\r\n                         lineno+1))\r\n          table.remove(files.source, nextfileno+1)\r\n          table.remove(files.target, nextfileno+1)\r\n          nextfileno = nextfileno - 1\r\n          -- double target filename line is encountered\r\n          -- switch back to header state\r\n          state = 'header'\r\n        else\r\n          -- Accept a space as a terminator, like GNU patch does.\r\n          -- Breaks patches containing filenames with spaces...\r\n          -- FIXME Figure out what does GNU patch do in those cases.\r\n          local re_filename = \"^%+%+%+ ([^ \\t\\r\\n]+)\"\r\n          local match = line:match(re_filename)\r\n          if not match then\r\n            all_ok = false\r\n            warning(format(\r\n              \"skipping invalid patch - no target filename at line %d\",\r\n              lineno+1))\r\n            state = 'header'\r\n          else\r\n            table.insert(files.target, match)\r\n            nextfileno = nextfileno + 1\r\n            nexthunkno = 0\r\n            table.insert(files.hunks, {})\r\n            table.insert(files.hunkends, table_copy(lineends))\r\n            table.insert(files.fileends, table_copy(lineends))\r\n            state = 'hunkhead'\r\n            advance = true\r\n          end\r\n        end\r\n      end\r\n      -- state is 'filenames', 'header', or ('hunkhead' with advance)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "if startswith(line, \"--- \") then\r\n        if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n          -- double source filename line is encountered\r\n          -- attempt to restart from this second line\r\n        end\r\n        -- Accept a space as a terminator, like GNU patch does.\r\n        -- Breaks patches containing filenames with spaces...\r\n        -- FIXME Figure out what does GNU patch do in those cases.\r\n        local match = line:match(\"^%-%-%- ([^ \\t\\r\\n]+)\")\r\n        if not match then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid filename at line %d\", lineno+1))\r\n          state = 'header'\r\n        else\r\n          table.insert(files.source, match)\r\n        end\r\n      elseif not startswith(line, \"+++ \") then\r\n        if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no target for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n        else\r\n          -- this should be unreachable\r\n          warning(\"skipping invalid target patch\")\r\n        end\r\n        state = 'header'\r\n      else\r\n        if util.array_contains(files.target, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch - double target at line %d\",\r\n                         lineno+1))\r\n          table.remove(files.source, nextfileno+1)\r\n          table.remove(files.target, nextfileno+1)\r\n          nextfileno = nextfileno - 1\r\n          -- double target filename line is encountered\r\n          -- switch back to header state\r\n          state = 'header'\r\n        else\r\n          -- Accept a space as a terminator, like GNU patch does.\r\n          -- Breaks patches containing filenames with spaces...\r\n          -- FIXME Figure out what does GNU patch do in those cases.\r\n          local re_filename = \"^%+%+%+ ([^ \\t\\r\\n]+)\"\r\n          local match = line:match(re_filename)\r\n          if not match then\r\n            all_ok = false\r\n            warning(format(\r\n              \"skipping invalid patch - no target filename at line %d\",\r\n              lineno+1))\r\n            state = 'header'\r\n          else\r\n            table.insert(files.target, match)\r\n            nextfileno = nextfileno + 1\r\n            nexthunkno = 0\r\n            table.insert(files.hunks, {})\r\n            table.insert(files.hunkends, table_copy(lineends))\r\n            table.insert(files.fileends, table_copy(lineends))\r\n            state = 'hunkhead'\r\n            advance = true\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n          -- double source filename line is encountered\r\n          -- attempt to restart from this second line\r\n        end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "warning(format(\"skipping invalid patch for %s\",\r\n                         files.source[nextfileno+1]))",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "table.remove(files.source, nextfileno+1)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "local match = line:match(\"^%-%-%- ([^ \\t\\r\\n]+)\")",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "if not match then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid filename at line %d\", lineno+1))\r\n          state = 'header'\r\n        else\r\n          table.insert(files.source, match)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "warning(format(\"skipping invalid filename at line %d\", lineno+1))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "state = 'header'",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "table.insert(files.source, match)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "if util.array_contains(files.source, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no target for %s\",\r\n                         files.source[nextfileno+1]))\r\n          table.remove(files.source, nextfileno+1)\r\n        else\r\n          -- this should be unreachable\r\n          warning(\"skipping invalid target patch\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "warning(format(\"skipping invalid patch with no target for %s\",\r\n                         files.source[nextfileno+1]))",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "warning(\"skipping invalid target patch\")",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "if util.array_contains(files.target, nextfileno) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch - double target at line %d\",\r\n                         lineno+1))\r\n          table.remove(files.source, nextfileno+1)\r\n          table.remove(files.target, nextfileno+1)\r\n          nextfileno = nextfileno - 1\r\n          -- double target filename line is encountered\r\n          -- switch back to header state\r\n          state = 'header'\r\n        else\r\n          -- Accept a space as a terminator, like GNU patch does.\r\n          -- Breaks patches containing filenames with spaces...\r\n          -- FIXME Figure out what does GNU patch do in those cases.\r\n          local re_filename = \"^%+%+%+ ([^ \\t\\r\\n]+)\"\r\n          local match = line:match(re_filename)\r\n          if not match then\r\n            all_ok = false\r\n            warning(format(\r\n              \"skipping invalid patch - no target filename at line %d\",\r\n              lineno+1))\r\n            state = 'header'\r\n          else\r\n            table.insert(files.target, match)\r\n            nextfileno = nextfileno + 1\r\n            nexthunkno = 0\r\n            table.insert(files.hunks, {})\r\n            table.insert(files.hunkends, table_copy(lineends))\r\n            table.insert(files.fileends, table_copy(lineends))\r\n            state = 'hunkhead'\r\n            advance = true\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "warning(format(\"skipping invalid patch - double target at line %d\",\r\n                         lineno+1))",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "table.remove(files.target, nextfileno+1)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "nextfileno = nextfileno - 1",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "local re_filename = \"^%+%+%+ ([^ \\t\\r\\n]+)\"",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "local match = line:match(re_filename)",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "if not match then\r\n            all_ok = false\r\n            warning(format(\r\n              \"skipping invalid patch - no target filename at line %d\",\r\n              lineno+1))\r\n            state = 'header'\r\n          else\r\n            table.insert(files.target, match)\r\n            nextfileno = nextfileno + 1\r\n            nexthunkno = 0\r\n            table.insert(files.hunks, {})\r\n            table.insert(files.hunkends, table_copy(lineends))\r\n            table.insert(files.fileends, table_copy(lineends))\r\n            state = 'hunkhead'\r\n            advance = true\r\n          end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "warning(format(\r\n              \"skipping invalid patch - no target filename at line %d\",\r\n              lineno+1))",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "table.insert(files.target, match)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "nextfileno = nextfileno + 1",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "nexthunkno = 0",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "table.insert(files.hunks, {})",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "table.insert(files.hunkends, table_copy(lineends))",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "table.insert(files.fileends, table_copy(lineends))",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "advance = true",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "if not advance and state == 'hunkhead' then\r\n      local m1, m2, m3, m4 = match_linerange(line)\r\n      if not m1 then\r\n        if not util.array_contains(files.hunks, nextfileno-1) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no hunks for file %s\",\r\n                         files.target[nextfileno]))\r\n        end\r\n        state = 'header'\r\n      else\r\n        hunkinfo.startsrc = tonumber(m1)\r\n        hunkinfo.linessrc = tonumber(m2 or 1)\r\n        hunkinfo.starttgt = tonumber(m3)\r\n        hunkinfo.linestgt = tonumber(m4 or 1)\r\n        hunkinfo.invalid = false\r\n        hunkinfo.text = {}\r\n\r\n        hunkactual.linessrc = 0\r\n        hunkactual.linestgt = 0\r\n\r\n        state = 'hunkbody'\r\n        nexthunkno = nexthunkno + 1\r\n      end\r\n      -- state is 'header' or 'hunkbody'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "local m1, m2, m3, m4 = match_linerange(line)",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "if not m1 then\r\n        if not util.array_contains(files.hunks, nextfileno-1) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no hunks for file %s\",\r\n                         files.target[nextfileno]))\r\n        end\r\n        state = 'header'\r\n      else\r\n        hunkinfo.startsrc = tonumber(m1)\r\n        hunkinfo.linessrc = tonumber(m2 or 1)\r\n        hunkinfo.starttgt = tonumber(m3)\r\n        hunkinfo.linestgt = tonumber(m4 or 1)\r\n        hunkinfo.invalid = false\r\n        hunkinfo.text = {}\r\n\r\n        hunkactual.linessrc = 0\r\n        hunkactual.linestgt = 0\r\n\r\n        state = 'hunkbody'\r\n        nexthunkno = nexthunkno + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "if not util.array_contains(files.hunks, nextfileno-1) then\r\n          all_ok = false\r\n          warning(format(\"skipping invalid patch with no hunks for file %s\",\r\n                         files.target[nextfileno]))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "warning(format(\"skipping invalid patch with no hunks for file %s\",\r\n                         files.target[nextfileno]))",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "hunkinfo.startsrc = tonumber(m1)",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "hunkinfo.linessrc = tonumber(m2 or 1)",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "hunkinfo.starttgt = tonumber(m3)",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "hunkinfo.linestgt = tonumber(m4 or 1)",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "hunkinfo.invalid = false",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "hunkinfo.text = {}",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "hunkactual.linessrc = 0",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "hunkactual.linestgt = 0",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "state = 'hunkbody'",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "nexthunkno = nexthunkno + 1",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "if state ~= 'hunkskip' then\r\n    warning(format(\"patch file incomplete - %s\", filename))\r\n    all_ok = false\r\n    -- os.exit(?)\r\n  else\r\n    -- duplicated message when an eof is reached\r\n    if debugmode and #files.source > 0 then\r\n      debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                   files.source[nextfileno]))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "warning(format(\"patch file incomplete - %s\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "if debugmode and #files.source > 0 then\r\n      debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                   files.source[nextfileno]))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "debug(format(\"- %2d hunks for %s\", #files.hunks[nextfileno],\r\n                   files.source[nextfileno]))",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "local sum = 0",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "for _,hset in ipairs(files.hunks) do sum = sum + #hset end",
    "type": "statement:genericfor"
  }, {
    "id": 178,
    "text": "sum = sum + #hset",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "info(format(\"total files: %d  total hunks: %d\", #files.source, sum))",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "fp:close()",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "local function find_hunk(file, h, hno)\r\n  for fuzz=0,2 do\r\n    local lineno = h.startsrc\r\n    for i=0,#file do\r\n      local found = true\r\n      local location = lineno\r\n      local total = #h.text - fuzz\r\n      for l, hline in ipairs(h.text) do\r\n        if l > fuzz then\r\n          -- todo: \\ No newline at the end of file\r\n          if startswith(hline, \" \") or startswith(hline, \"-\") then\r\n            local line = file[lineno]\r\n            lineno = lineno + 1\r\n            if not line or #line == 0 then\r\n              found = false\r\n              break\r\n            end\r\n            if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n              found = false\r\n              break\r\n            end\r\n          end\r\n        end\r\n      end\r\n      if found then\r\n        local offset = location - h.startsrc - fuzz\r\n        if offset ~= 0 then\r\n          warning(format(\"Hunk %d found at offset %d%s...\", hno, offset, fuzz == 0 and \"\" or format(\" (fuzz %d)\", fuzz)))\r\n        end\r\n        h.startsrc = location\r\n        h.starttgt = h.starttgt + offset\r\n        for i=1,fuzz do\r\n           table.remove(h.text, 1)\r\n           table.remove(h.text, #h.text)\r\n        end\r\n        return true\r\n      end\r\n      lineno = i\r\n    end\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "for fuzz=0,2 do\r\n    local lineno = h.startsrc\r\n    for i=0,#file do\r\n      local found = true\r\n      local location = lineno\r\n      local total = #h.text - fuzz\r\n      for l, hline in ipairs(h.text) do\r\n        if l > fuzz then\r\n          -- todo: \\ No newline at the end of file\r\n          if startswith(hline, \" \") or startswith(hline, \"-\") then\r\n            local line = file[lineno]\r\n            lineno = lineno + 1\r\n            if not line or #line == 0 then\r\n              found = false\r\n              break\r\n            end\r\n            if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n              found = false\r\n              break\r\n            end\r\n          end\r\n        end\r\n      end\r\n      if found then\r\n        local offset = location - h.startsrc - fuzz\r\n        if offset ~= 0 then\r\n          warning(format(\"Hunk %d found at offset %d%s...\", hno, offset, fuzz == 0 and \"\" or format(\" (fuzz %d)\", fuzz)))\r\n        end\r\n        h.startsrc = location\r\n        h.starttgt = h.starttgt + offset\r\n        for i=1,fuzz do\r\n           table.remove(h.text, 1)\r\n           table.remove(h.text, #h.text)\r\n        end\r\n        return true\r\n      end\r\n      lineno = i\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 184,
    "text": "local lineno = h.startsrc",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "for i=0,#file do\r\n      local found = true\r\n      local location = lineno\r\n      local total = #h.text - fuzz\r\n      for l, hline in ipairs(h.text) do\r\n        if l > fuzz then\r\n          -- todo: \\ No newline at the end of file\r\n          if startswith(hline, \" \") or startswith(hline, \"-\") then\r\n            local line = file[lineno]\r\n            lineno = lineno + 1\r\n            if not line or #line == 0 then\r\n              found = false\r\n              break\r\n            end\r\n            if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n              found = false\r\n              break\r\n            end\r\n          end\r\n        end\r\n      end\r\n      if found then\r\n        local offset = location - h.startsrc - fuzz\r\n        if offset ~= 0 then\r\n          warning(format(\"Hunk %d found at offset %d%s...\", hno, offset, fuzz == 0 and \"\" or format(\" (fuzz %d)\", fuzz)))\r\n        end\r\n        h.startsrc = location\r\n        h.starttgt = h.starttgt + offset\r\n        for i=1,fuzz do\r\n           table.remove(h.text, 1)\r\n           table.remove(h.text, #h.text)\r\n        end\r\n        return true\r\n      end\r\n      lineno = i\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 186,
    "text": "local found = true",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "local location = lineno",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "local total = #h.text - fuzz",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "for l, hline in ipairs(h.text) do\r\n        if l > fuzz then\r\n          -- todo: \\ No newline at the end of file\r\n          if startswith(hline, \" \") or startswith(hline, \"-\") then\r\n            local line = file[lineno]\r\n            lineno = lineno + 1\r\n            if not line or #line == 0 then\r\n              found = false\r\n              break\r\n            end\r\n            if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n              found = false\r\n              break\r\n            end\r\n          end\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 190,
    "text": "if l > fuzz then\r\n          -- todo: \\ No newline at the end of file\r\n          if startswith(hline, \" \") or startswith(hline, \"-\") then\r\n            local line = file[lineno]\r\n            lineno = lineno + 1\r\n            if not line or #line == 0 then\r\n              found = false\r\n              break\r\n            end\r\n            if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n              found = false\r\n              break\r\n            end\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "if startswith(hline, \" \") or startswith(hline, \"-\") then\r\n            local line = file[lineno]\r\n            lineno = lineno + 1\r\n            if not line or #line == 0 then\r\n              found = false\r\n              break\r\n            end\r\n            if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n              found = false\r\n              break\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "local line = file[lineno]",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "if not line or #line == 0 then\r\n              found = false\r\n              break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "found = false",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n              found = false\r\n              break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "if found then\r\n        local offset = location - h.startsrc - fuzz\r\n        if offset ~= 0 then\r\n          warning(format(\"Hunk %d found at offset %d%s...\", hno, offset, fuzz == 0 and \"\" or format(\" (fuzz %d)\", fuzz)))\r\n        end\r\n        h.startsrc = location\r\n        h.starttgt = h.starttgt + offset\r\n        for i=1,fuzz do\r\n           table.remove(h.text, 1)\r\n           table.remove(h.text, #h.text)\r\n        end\r\n        return true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "local offset = location - h.startsrc - fuzz",
    "type": "statement:localassign"
  }, {
    "id": 198,
    "text": "if offset ~= 0 then\r\n          warning(format(\"Hunk %d found at offset %d%s...\", hno, offset, fuzz == 0 and \"\" or format(\" (fuzz %d)\", fuzz)))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "warning(format(\"Hunk %d found at offset %d%s...\", hno, offset, fuzz == 0 and \"\" or format(\" (fuzz %d)\", fuzz)))",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "h.startsrc = location",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "h.starttgt = h.starttgt + offset",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "for i=1,fuzz do\r\n           table.remove(h.text, 1)\r\n           table.remove(h.text, #h.text)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 203,
    "text": "table.remove(h.text, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "table.remove(h.text, #h.text)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "lineno = i",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "local function load_file(filename)\r\n  local fp = assert(io.open(filename))\r\n  local file = {}\r\n  local readline = file_lines(fp)\r\n  while true do\r\n    local line = readline()\r\n    if not line then break end\r\n    table.insert(file, line)\r\n  end\r\n  fp:close()\r\n  return file\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "local fp = assert(io.open(filename))",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "local file = {}",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "local readline = file_lines(fp)",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "while true do\r\n    local line = readline()\r\n    if not line then break end\r\n    table.insert(file, line)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 212,
    "text": "local line = readline()",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "if not line then break end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "table.insert(file, line)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "local function find_hunks(file, hunks)\r\n  local matched = true\r\n  local lineno = 1\r\n  local hno = nil\r\n  for hno, h in ipairs(hunks) do\r\n    find_hunk(file, h, hno)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 217,
    "text": "local matched = true",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "local lineno = 1",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "local hno = nil",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "for hno, h in ipairs(hunks) do\r\n    find_hunk(file, h, hno)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 221,
    "text": "find_hunk(file, h, hno)",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "local function check_patched(file, hunks)\r\n  local matched = true\r\n  local lineno = 1\r\n  local hno = nil\r\n  local ok, err = pcall(function()\r\n    if #file == 0 then\r\n      error 'nomatch'\r\n    end\r\n    for hno, h in ipairs(hunks) do\r\n      -- skip to line just before hunk starts\r\n      if #file < h.starttgt then\r\n         error 'nomatch'\r\n      end\r\n      lineno = h.starttgt\r\n      for _, hline in ipairs(h.text) do\r\n        -- todo: \\ No newline at the end of file\r\n        if not startswith(hline, \"-\") and not startswith(hline, \"\\\\\") then\r\n          local line = file[lineno]\r\n          lineno = lineno + 1\r\n          if #line == 0 then\r\n            error 'nomatch'\r\n          end\r\n          if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n            warning(format(\"file is not patched - failed hunk: %d\", hno))\r\n            error 'nomatch'\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end)\r\n  if err == 'nomatch' then\r\n    matched = false\r\n  end\r\n    -- todo: display failed hunk, i.e. expected/found\r\n\r\n  return matched\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "local ok, err = pcall(function()\r\n    if #file == 0 then\r\n      error 'nomatch'\r\n    end\r\n    for hno, h in ipairs(hunks) do\r\n      -- skip to line just before hunk starts\r\n      if #file < h.starttgt then\r\n         error 'nomatch'\r\n      end\r\n      lineno = h.starttgt\r\n      for _, hline in ipairs(h.text) do\r\n        -- todo: \\ No newline at the end of file\r\n        if not startswith(hline, \"-\") and not startswith(hline, \"\\\\\") then\r\n          local line = file[lineno]\r\n          lineno = lineno + 1\r\n          if #line == 0 then\r\n            error 'nomatch'\r\n          end\r\n          if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n            warning(format(\"file is not patched - failed hunk: %d\", hno))\r\n            error 'nomatch'\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "if #file == 0 then\r\n      error 'nomatch'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "error 'nomatch'",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "for hno, h in ipairs(hunks) do\r\n      -- skip to line just before hunk starts\r\n      if #file < h.starttgt then\r\n         error 'nomatch'\r\n      end\r\n      lineno = h.starttgt\r\n      for _, hline in ipairs(h.text) do\r\n        -- todo: \\ No newline at the end of file\r\n        if not startswith(hline, \"-\") and not startswith(hline, \"\\\\\") then\r\n          local line = file[lineno]\r\n          lineno = lineno + 1\r\n          if #line == 0 then\r\n            error 'nomatch'\r\n          end\r\n          if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n            warning(format(\"file is not patched - failed hunk: %d\", hno))\r\n            error 'nomatch'\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 228,
    "text": "if #file < h.starttgt then\r\n         error 'nomatch'\r\n      end",
    "type": "statement:if"
  }, {
    "id": 229,
    "text": "lineno = h.starttgt",
    "type": "statement:assign"
  }, {
    "id": 230,
    "text": "for _, hline in ipairs(h.text) do\r\n        -- todo: \\ No newline at the end of file\r\n        if not startswith(hline, \"-\") and not startswith(hline, \"\\\\\") then\r\n          local line = file[lineno]\r\n          lineno = lineno + 1\r\n          if #line == 0 then\r\n            error 'nomatch'\r\n          end\r\n          if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n            warning(format(\"file is not patched - failed hunk: %d\", hno))\r\n            error 'nomatch'\r\n          end\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 231,
    "text": "if not startswith(hline, \"-\") and not startswith(hline, \"\\\\\") then\r\n          local line = file[lineno]\r\n          lineno = lineno + 1\r\n          if #line == 0 then\r\n            error 'nomatch'\r\n          end\r\n          if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n            warning(format(\"file is not patched - failed hunk: %d\", hno))\r\n            error 'nomatch'\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "if #line == 0 then\r\n            error 'nomatch'\r\n          end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n            warning(format(\"file is not patched - failed hunk: %d\", hno))\r\n            error 'nomatch'\r\n          end",
    "type": "statement:if"
  }, {
    "id": 234,
    "text": "warning(format(\"file is not patched - failed hunk: %d\", hno))",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "if err == 'nomatch' then\r\n    matched = false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "matched = false",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "local function patch_hunks(srcname, tgtname, hunks)\r\n  local src = assert(io.open(srcname, \"rb\"))\r\n  local tgt = assert(io.open(tgtname, \"wb\"))\r\n\r\n  local src_readline = file_lines(src)\r\n\r\n  -- todo: detect linefeeds early - in apply_files routine\r\n  --       to handle cases when patch starts right from the first\r\n  --       line and no lines are processed. At the moment substituted\r\n  --       lineends may not be the same at the start and at the end\r\n  --       of patching. Also issue a warning about mixed lineends\r\n\r\n  local srclineno = 1\r\n  local lineends = {['\\n']=0, ['\\r\\n']=0, ['\\r']=0}\r\n  for hno, h in ipairs(hunks) do\r\n    debug(format(\"processing hunk %d for file %s\", hno, tgtname))\r\n    -- skip to line just before hunk starts\r\n    while srclineno < h.startsrc do\r\n      local line = src_readline()\r\n      -- Python 'U' mode works only with text files\r\n      if endswith(line, \"\\r\\n\") then\r\n        lineends[\"\\r\\n\"] = lineends[\"\\r\\n\"] + 1\r\n      elseif endswith(line, \"\\n\") then\r\n        lineends[\"\\n\"] = lineends[\"\\n\"] + 1\r\n      elseif endswith(line, \"\\r\") then\r\n        lineends[\"\\r\"] = lineends[\"\\r\"] + 1\r\n      end\r\n      tgt:write(line)\r\n      srclineno = srclineno + 1\r\n    end\r\n\r\n    for _,hline in ipairs(h.text) do\r\n      -- todo: check \\ No newline at the end of file\r\n      if startswith(hline, \"-\") or startswith(hline, \"\\\\\") then\r\n        src_readline()\r\n        srclineno = srclineno + 1\r\n      else\r\n        if not startswith(hline, \"+\") then\r\n          src_readline()\r\n          srclineno = srclineno + 1\r\n        end\r\n        local line2write = hline:sub(2)\r\n        -- detect if line ends are consistent in source file\r\n        local sum = 0\r\n        for k,v in pairs(lineends) do if v > 0 then sum=sum+1 end end\r\n        if sum == 1 then\r\n          local newline\r\n          for k,v in pairs(lineends) do if v ~= 0 then newline = k end end\r\n          tgt:write(endlstrip(line2write) .. newline)\r\n        else -- newlines are mixed or unknown\r\n          tgt:write(line2write)\r\n        end\r\n      end\r\n    end\r\n  end\r\n  for line in src_readline do\r\n    tgt:write(line)\r\n  end\r\n  tgt:close()\r\n  src:close()\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 239,
    "text": "local src = assert(io.open(srcname, \"rb\"))",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "local tgt = assert(io.open(tgtname, \"wb\"))",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "local src_readline = file_lines(src)",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "local srclineno = 1",
    "type": "statement:localassign"
  }, {
    "id": 243,
    "text": "local lineends = {['\\n']=0, ['\\r\\n']=0, ['\\r']=0}",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "for hno, h in ipairs(hunks) do\r\n    debug(format(\"processing hunk %d for file %s\", hno, tgtname))\r\n    -- skip to line just before hunk starts\r\n    while srclineno < h.startsrc do\r\n      local line = src_readline()\r\n      -- Python 'U' mode works only with text files\r\n      if endswith(line, \"\\r\\n\") then\r\n        lineends[\"\\r\\n\"] = lineends[\"\\r\\n\"] + 1\r\n      elseif endswith(line, \"\\n\") then\r\n        lineends[\"\\n\"] = lineends[\"\\n\"] + 1\r\n      elseif endswith(line, \"\\r\") then\r\n        lineends[\"\\r\"] = lineends[\"\\r\"] + 1\r\n      end\r\n      tgt:write(line)\r\n      srclineno = srclineno + 1\r\n    end\r\n\r\n    for _,hline in ipairs(h.text) do\r\n      -- todo: check \\ No newline at the end of file\r\n      if startswith(hline, \"-\") or startswith(hline, \"\\\\\") then\r\n        src_readline()\r\n        srclineno = srclineno + 1\r\n      else\r\n        if not startswith(hline, \"+\") then\r\n          src_readline()\r\n          srclineno = srclineno + 1\r\n        end\r\n        local line2write = hline:sub(2)\r\n        -- detect if line ends are consistent in source file\r\n        local sum = 0\r\n        for k,v in pairs(lineends) do if v > 0 then sum=sum+1 end end\r\n        if sum == 1 then\r\n          local newline\r\n          for k,v in pairs(lineends) do if v ~= 0 then newline = k end end\r\n          tgt:write(endlstrip(line2write) .. newline)\r\n        else -- newlines are mixed or unknown\r\n          tgt:write(line2write)\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 245,
    "text": "debug(format(\"processing hunk %d for file %s\", hno, tgtname))",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "while srclineno < h.startsrc do\r\n      local line = src_readline()\r\n      -- Python 'U' mode works only with text files\r\n      if endswith(line, \"\\r\\n\") then\r\n        lineends[\"\\r\\n\"] = lineends[\"\\r\\n\"] + 1\r\n      elseif endswith(line, \"\\n\") then\r\n        lineends[\"\\n\"] = lineends[\"\\n\"] + 1\r\n      elseif endswith(line, \"\\r\") then\r\n        lineends[\"\\r\"] = lineends[\"\\r\"] + 1\r\n      end\r\n      tgt:write(line)\r\n      srclineno = srclineno + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 247,
    "text": "local line = src_readline()",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "if endswith(line, \"\\r\\n\") then\r\n        lineends[\"\\r\\n\"] = lineends[\"\\r\\n\"] + 1\r\n      elseif endswith(line, \"\\n\") then\r\n        lineends[\"\\n\"] = lineends[\"\\n\"] + 1\r\n      elseif endswith(line, \"\\r\") then\r\n        lineends[\"\\r\"] = lineends[\"\\r\"] + 1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "lineends[\"\\r\\n\"] = lineends[\"\\r\\n\"] + 1",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "lineends[\"\\n\"] = lineends[\"\\n\"] + 1",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "lineends[\"\\r\"] = lineends[\"\\r\"] + 1",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "tgt:write(line)",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "srclineno = srclineno + 1",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "for _,hline in ipairs(h.text) do\r\n      -- todo: check \\ No newline at the end of file\r\n      if startswith(hline, \"-\") or startswith(hline, \"\\\\\") then\r\n        src_readline()\r\n        srclineno = srclineno + 1\r\n      else\r\n        if not startswith(hline, \"+\") then\r\n          src_readline()\r\n          srclineno = srclineno + 1\r\n        end\r\n        local line2write = hline:sub(2)\r\n        -- detect if line ends are consistent in source file\r\n        local sum = 0\r\n        for k,v in pairs(lineends) do if v > 0 then sum=sum+1 end end\r\n        if sum == 1 then\r\n          local newline\r\n          for k,v in pairs(lineends) do if v ~= 0 then newline = k end end\r\n          tgt:write(endlstrip(line2write) .. newline)\r\n        else -- newlines are mixed or unknown\r\n          tgt:write(line2write)\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 255,
    "text": "if startswith(hline, \"-\") or startswith(hline, \"\\\\\") then\r\n        src_readline()\r\n        srclineno = srclineno + 1\r\n      else\r\n        if not startswith(hline, \"+\") then\r\n          src_readline()\r\n          srclineno = srclineno + 1\r\n        end\r\n        local line2write = hline:sub(2)\r\n        -- detect if line ends are consistent in source file\r\n        local sum = 0\r\n        for k,v in pairs(lineends) do if v > 0 then sum=sum+1 end end\r\n        if sum == 1 then\r\n          local newline\r\n          for k,v in pairs(lineends) do if v ~= 0 then newline = k end end\r\n          tgt:write(endlstrip(line2write) .. newline)\r\n        else -- newlines are mixed or unknown\r\n          tgt:write(line2write)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 256,
    "text": "src_readline()",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "if not startswith(hline, \"+\") then\r\n          src_readline()\r\n          srclineno = srclineno + 1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "local line2write = hline:sub(2)",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "for k,v in pairs(lineends) do if v > 0 then sum=sum+1 end end",
    "type": "statement:genericfor"
  }, {
    "id": 260,
    "text": "if v > 0 then sum=sum+1 end",
    "type": "statement:if"
  }, {
    "id": 261,
    "text": "sum=sum+1",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "if sum == 1 then\r\n          local newline\r\n          for k,v in pairs(lineends) do if v ~= 0 then newline = k end end\r\n          tgt:write(endlstrip(line2write) .. newline)\r\n        else -- newlines are mixed or unknown\r\n          tgt:write(line2write)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 263,
    "text": "local newline",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "for k,v in pairs(lineends) do if v ~= 0 then newline = k end end",
    "type": "statement:genericfor"
  }, {
    "id": 265,
    "text": "if v ~= 0 then newline = k end",
    "type": "statement:if"
  }, {
    "id": 266,
    "text": "newline = k",
    "type": "statement:assign"
  }, {
    "id": 267,
    "text": "tgt:write(endlstrip(line2write) .. newline)",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "tgt:write(line2write)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "for line in src_readline do\r\n    tgt:write(line)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 270,
    "text": "tgt:close()",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "src:close()",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "local function strip_dirs(filename, strip)\r\n  if strip == nil then return filename end\r\n  for i=1,strip do\r\n    filename=filename:gsub(\"^[^/]*/\", \"\")\r\n  end\r\n  return filename\r\nend",
    "type": "function"
  }, {
    "id": 274,
    "text": "if strip == nil then return filename end",
    "type": "statement:if"
  }, {
    "id": 275,
    "text": "for i=1,strip do\r\n    filename=filename:gsub(\"^[^/]*/\", \"\")\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 276,
    "text": "filename=filename:gsub(\"^[^/]*/\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 278,
    "text": "function apply_patch(patch, strip)\r\n  local all_ok = true\r\n  local total = #patch.source\r\n  for fileno, filename in ipairs(patch.source) do\r\n    filename = strip_dirs(filename, strip)\r\n    local continue\r\n    local f2patch = filename\r\n    if not exists(f2patch) then\r\n      f2patch = strip_dirs(patch.target[fileno], strip)\r\n      f2patch = fs.absolute_name(f2patch)\r\n      if not exists(f2patch) then  --FIX:if f2patch nil\r\n        warning(format(\"source/target file does not exist\\n--- %s\\n+++ %s\",\r\n                filename, f2patch))\r\n        all_ok = false\r\n        continue = true\r\n      end\r\n    end\r\n    if not continue and not isfile(f2patch) then\r\n      warning(format(\"not a file - %s\", f2patch))\r\n      all_ok = false\r\n      continue = true\r\n    end\r\n    if not continue then\r\n\r\n    filename = f2patch\r\n\r\n    info(format(\"processing %d/%d:\\t %s\", fileno, total, filename))\r\n\r\n    -- validate before patching\r\n    local hunks = patch.hunks[fileno]\r\n    local file = load_file(filename)\r\n    local hunkno = 1\r\n    local hunk = hunks[hunkno]\r\n    local hunkfind = {}\r\n    local hunkreplace = {}\r\n    local validhunks = 0\r\n    local canpatch = false\r\n    local hunklineno\r\n    local isbreak\r\n    local lineno = 0\r\n\r\n    find_hunks(file, hunks)\r\n\r\n    for _, line in ipairs(file) do\r\n      lineno = lineno + 1\r\n      local continue\r\n      if not hunk or lineno < hunk.startsrc then\r\n        continue = true\r\n      elseif lineno == hunk.startsrc then\r\n        hunkfind = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '-' then\r\n          hunkfind[#hunkfind+1] = endlstrip(x:sub(2))\r\n        end end\r\n        hunkreplace = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '+' then\r\n          hunkreplace[#hunkreplace+1] = endlstrip(x:sub(2))\r\n        end end\r\n        --pprint(hunkreplace)\r\n        hunklineno = 1\r\n\r\n        -- todo \\ No newline at end of file\r\n      end\r\n      -- check hunks in source file\r\n      if not continue and lineno < hunk.startsrc + #hunkfind - 1 then\r\n        if endlstrip(line) == hunkfind[hunklineno] then\r\n          hunklineno = hunklineno + 1\r\n        else\r\n          debug(format(\"hunk no.%d doesn't match source file %s\",\r\n                       hunkno, filename))\r\n          -- file may be already patched, but check other hunks anyway\r\n          hunkno = hunkno + 1\r\n          if hunkno <= #hunks then\r\n            hunk = hunks[hunkno]\r\n            continue = true\r\n          else\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end\r\n      -- check if processed line is the last line\r\n      if not continue and lineno == hunk.startsrc + #hunkfind - 1 then\r\n        debug(format(\"file %s hunk no.%d -- is ready to be patched\",\r\n                     filename, hunkno))\r\n        hunkno = hunkno + 1\r\n        validhunks = validhunks + 1\r\n        if hunkno <= #hunks then\r\n          hunk = hunks[hunkno]\r\n        else\r\n          if validhunks == #hunks then\r\n            -- patch file\r\n            canpatch = true\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end\r\n    end\r\n    if not isbreak then\r\n      if hunkno <= #hunks then\r\n        warning(format(\"premature end of source file %s at hunk %d\",\r\n                       filename, hunkno))\r\n        all_ok = false\r\n      end\r\n    end\r\n    if validhunks < #hunks then\r\n      if check_patched(file, hunks) then\r\n        warning(format(\"already patched  %s\", filename))\r\n      else\r\n        warning(format(\"source file is different - %s\", filename))\r\n        all_ok = false\r\n      end\r\n    end\r\n    if canpatch then\r\n      local backupname = filename .. \".orig\"\r\n      if exists(backupname) then\r\n        warning(format(\"can't backup original file to %s - aborting\",\r\n                       backupname))\r\n        all_ok = false\r\n      else\r\n        assert(os.rename(filename, backupname))\r\n        if patch_hunks(backupname, filename, hunks) then\r\n          warning(format(\"successfully patched %s\", filename))\r\n          assert(os.remove(backupname))\r\n        else\r\n          warning(format(\"error patching file %s\", filename))\r\n          assert(file_copy(filename, filename .. \".invalid\"))\r\n          warning(format(\"invalid version is saved to %s\",\r\n                         filename .. \".invalid\"))\r\n          -- todo: proper rejects\r\n          assert(os.rename(backupname, filename))\r\n          all_ok = false\r\n        end\r\n      end\r\n    end\r\n\r\n    end -- if not continue\r\n  end -- for\r\n  -- todo: check for premature eof\r\n  return all_ok\r\nend",
    "type": "function"
  }, {
    "id": 279,
    "text": "local total = #patch.source",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "for fileno, filename in ipairs(patch.source) do\r\n    filename = strip_dirs(filename, strip)\r\n    local continue\r\n    local f2patch = filename\r\n    if not exists(f2patch) then\r\n      f2patch = strip_dirs(patch.target[fileno], strip)\r\n      f2patch = fs.absolute_name(f2patch)\r\n      if not exists(f2patch) then  --FIX:if f2patch nil\r\n        warning(format(\"source/target file does not exist\\n--- %s\\n+++ %s\",\r\n                filename, f2patch))\r\n        all_ok = false\r\n        continue = true\r\n      end\r\n    end\r\n    if not continue and not isfile(f2patch) then\r\n      warning(format(\"not a file - %s\", f2patch))\r\n      all_ok = false\r\n      continue = true\r\n    end\r\n    if not continue then\r\n\r\n    filename = f2patch\r\n\r\n    info(format(\"processing %d/%d:\\t %s\", fileno, total, filename))\r\n\r\n    -- validate before patching\r\n    local hunks = patch.hunks[fileno]\r\n    local file = load_file(filename)\r\n    local hunkno = 1\r\n    local hunk = hunks[hunkno]\r\n    local hunkfind = {}\r\n    local hunkreplace = {}\r\n    local validhunks = 0\r\n    local canpatch = false\r\n    local hunklineno\r\n    local isbreak\r\n    local lineno = 0\r\n\r\n    find_hunks(file, hunks)\r\n\r\n    for _, line in ipairs(file) do\r\n      lineno = lineno + 1\r\n      local continue\r\n      if not hunk or lineno < hunk.startsrc then\r\n        continue = true\r\n      elseif lineno == hunk.startsrc then\r\n        hunkfind = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '-' then\r\n          hunkfind[#hunkfind+1] = endlstrip(x:sub(2))\r\n        end end\r\n        hunkreplace = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '+' then\r\n          hunkreplace[#hunkreplace+1] = endlstrip(x:sub(2))\r\n        end end\r\n        --pprint(hunkreplace)\r\n        hunklineno = 1\r\n\r\n        -- todo \\ No newline at end of file\r\n      end\r\n      -- check hunks in source file\r\n      if not continue and lineno < hunk.startsrc + #hunkfind - 1 then\r\n        if endlstrip(line) == hunkfind[hunklineno] then\r\n          hunklineno = hunklineno + 1\r\n        else\r\n          debug(format(\"hunk no.%d doesn't match source file %s\",\r\n                       hunkno, filename))\r\n          -- file may be already patched, but check other hunks anyway\r\n          hunkno = hunkno + 1\r\n          if hunkno <= #hunks then\r\n            hunk = hunks[hunkno]\r\n            continue = true\r\n          else\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end\r\n      -- check if processed line is the last line\r\n      if not continue and lineno == hunk.startsrc + #hunkfind - 1 then\r\n        debug(format(\"file %s hunk no.%d -- is ready to be patched\",\r\n                     filename, hunkno))\r\n        hunkno = hunkno + 1\r\n        validhunks = validhunks + 1\r\n        if hunkno <= #hunks then\r\n          hunk = hunks[hunkno]\r\n        else\r\n          if validhunks == #hunks then\r\n            -- patch file\r\n            canpatch = true\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end\r\n    end\r\n    if not isbreak then\r\n      if hunkno <= #hunks then\r\n        warning(format(\"premature end of source file %s at hunk %d\",\r\n                       filename, hunkno))\r\n        all_ok = false\r\n      end\r\n    end\r\n    if validhunks < #hunks then\r\n      if check_patched(file, hunks) then\r\n        warning(format(\"already patched  %s\", filename))\r\n      else\r\n        warning(format(\"source file is different - %s\", filename))\r\n        all_ok = false\r\n      end\r\n    end\r\n    if canpatch then\r\n      local backupname = filename .. \".orig\"\r\n      if exists(backupname) then\r\n        warning(format(\"can't backup original file to %s - aborting\",\r\n                       backupname))\r\n        all_ok = false\r\n      else\r\n        assert(os.rename(filename, backupname))\r\n        if patch_hunks(backupname, filename, hunks) then\r\n          warning(format(\"successfully patched %s\", filename))\r\n          assert(os.remove(backupname))\r\n        else\r\n          warning(format(\"error patching file %s\", filename))\r\n          assert(file_copy(filename, filename .. \".invalid\"))\r\n          warning(format(\"invalid version is saved to %s\",\r\n                         filename .. \".invalid\"))\r\n          -- todo: proper rejects\r\n          assert(os.rename(backupname, filename))\r\n          all_ok = false\r\n        end\r\n      end\r\n    end\r\n\r\n    end -- if not continue\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 281,
    "text": "filename = strip_dirs(filename, strip)",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "local continue",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "local f2patch = filename",
    "type": "statement:localassign"
  }, {
    "id": 284,
    "text": "if not exists(f2patch) then\r\n      f2patch = strip_dirs(patch.target[fileno], strip)\r\n      f2patch = fs.absolute_name(f2patch)\r\n      if not exists(f2patch) then  --FIX:if f2patch nil\r\n        warning(format(\"source/target file does not exist\\n--- %s\\n+++ %s\",\r\n                filename, f2patch))\r\n        all_ok = false\r\n        continue = true\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 285,
    "text": "f2patch = strip_dirs(patch.target[fileno], strip)",
    "type": "statement:assign"
  }, {
    "id": 286,
    "text": "f2patch = fs.absolute_name(f2patch)",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "if not exists(f2patch) then  --FIX:if f2patch nil\r\n        warning(format(\"source/target file does not exist\\n--- %s\\n+++ %s\",\r\n                filename, f2patch))\r\n        all_ok = false\r\n        continue = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 288,
    "text": "warning(format(\"source/target file does not exist\\n--- %s\\n+++ %s\",\r\n                filename, f2patch))",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "continue = true",
    "type": "statement:assign"
  }, {
    "id": 290,
    "text": "if not continue and not isfile(f2patch) then\r\n      warning(format(\"not a file - %s\", f2patch))\r\n      all_ok = false\r\n      continue = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 291,
    "text": "warning(format(\"not a file - %s\", f2patch))",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "if not continue then\r\n\r\n    filename = f2patch\r\n\r\n    info(format(\"processing %d/%d:\\t %s\", fileno, total, filename))\r\n\r\n    -- validate before patching\r\n    local hunks = patch.hunks[fileno]\r\n    local file = load_file(filename)\r\n    local hunkno = 1\r\n    local hunk = hunks[hunkno]\r\n    local hunkfind = {}\r\n    local hunkreplace = {}\r\n    local validhunks = 0\r\n    local canpatch = false\r\n    local hunklineno\r\n    local isbreak\r\n    local lineno = 0\r\n\r\n    find_hunks(file, hunks)\r\n\r\n    for _, line in ipairs(file) do\r\n      lineno = lineno + 1\r\n      local continue\r\n      if not hunk or lineno < hunk.startsrc then\r\n        continue = true\r\n      elseif lineno == hunk.startsrc then\r\n        hunkfind = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '-' then\r\n          hunkfind[#hunkfind+1] = endlstrip(x:sub(2))\r\n        end end\r\n        hunkreplace = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '+' then\r\n          hunkreplace[#hunkreplace+1] = endlstrip(x:sub(2))\r\n        end end\r\n        --pprint(hunkreplace)\r\n        hunklineno = 1\r\n\r\n        -- todo \\ No newline at end of file\r\n      end\r\n      -- check hunks in source file\r\n      if not continue and lineno < hunk.startsrc + #hunkfind - 1 then\r\n        if endlstrip(line) == hunkfind[hunklineno] then\r\n          hunklineno = hunklineno + 1\r\n        else\r\n          debug(format(\"hunk no.%d doesn't match source file %s\",\r\n                       hunkno, filename))\r\n          -- file may be already patched, but check other hunks anyway\r\n          hunkno = hunkno + 1\r\n          if hunkno <= #hunks then\r\n            hunk = hunks[hunkno]\r\n            continue = true\r\n          else\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end\r\n      -- check if processed line is the last line\r\n      if not continue and lineno == hunk.startsrc + #hunkfind - 1 then\r\n        debug(format(\"file %s hunk no.%d -- is ready to be patched\",\r\n                     filename, hunkno))\r\n        hunkno = hunkno + 1\r\n        validhunks = validhunks + 1\r\n        if hunkno <= #hunks then\r\n          hunk = hunks[hunkno]\r\n        else\r\n          if validhunks == #hunks then\r\n            -- patch file\r\n            canpatch = true\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end\r\n    end\r\n    if not isbreak then\r\n      if hunkno <= #hunks then\r\n        warning(format(\"premature end of source file %s at hunk %d\",\r\n                       filename, hunkno))\r\n        all_ok = false\r\n      end\r\n    end\r\n    if validhunks < #hunks then\r\n      if check_patched(file, hunks) then\r\n        warning(format(\"already patched  %s\", filename))\r\n      else\r\n        warning(format(\"source file is different - %s\", filename))\r\n        all_ok = false\r\n      end\r\n    end\r\n    if canpatch then\r\n      local backupname = filename .. \".orig\"\r\n      if exists(backupname) then\r\n        warning(format(\"can't backup original file to %s - aborting\",\r\n                       backupname))\r\n        all_ok = false\r\n      else\r\n        assert(os.rename(filename, backupname))\r\n        if patch_hunks(backupname, filename, hunks) then\r\n          warning(format(\"successfully patched %s\", filename))\r\n          assert(os.remove(backupname))\r\n        else\r\n          warning(format(\"error patching file %s\", filename))\r\n          assert(file_copy(filename, filename .. \".invalid\"))\r\n          warning(format(\"invalid version is saved to %s\",\r\n                         filename .. \".invalid\"))\r\n          -- todo: proper rejects\r\n          assert(os.rename(backupname, filename))\r\n          all_ok = false\r\n        end\r\n      end\r\n    end\r\n\r\n    end",
    "type": "statement:if"
  }, {
    "id": 293,
    "text": "filename = f2patch",
    "type": "statement:assign"
  }, {
    "id": 294,
    "text": "info(format(\"processing %d/%d:\\t %s\", fileno, total, filename))",
    "type": "statement:functioncall"
  }, {
    "id": 295,
    "text": "local hunks = patch.hunks[fileno]",
    "type": "statement:localassign"
  }, {
    "id": 296,
    "text": "local file = load_file(filename)",
    "type": "statement:localassign"
  }, {
    "id": 297,
    "text": "local hunkno = 1",
    "type": "statement:localassign"
  }, {
    "id": 298,
    "text": "local hunk = hunks[hunkno]",
    "type": "statement:localassign"
  }, {
    "id": 299,
    "text": "local hunkfind = {}",
    "type": "statement:localassign"
  }, {
    "id": 300,
    "text": "local hunkreplace = {}",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "local validhunks = 0",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "local canpatch = false",
    "type": "statement:localassign"
  }, {
    "id": 303,
    "text": "local hunklineno",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "local isbreak",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "find_hunks(file, hunks)",
    "type": "statement:functioncall"
  }, {
    "id": 306,
    "text": "for _, line in ipairs(file) do\r\n      lineno = lineno + 1\r\n      local continue\r\n      if not hunk or lineno < hunk.startsrc then\r\n        continue = true\r\n      elseif lineno == hunk.startsrc then\r\n        hunkfind = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '-' then\r\n          hunkfind[#hunkfind+1] = endlstrip(x:sub(2))\r\n        end end\r\n        hunkreplace = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '+' then\r\n          hunkreplace[#hunkreplace+1] = endlstrip(x:sub(2))\r\n        end end\r\n        --pprint(hunkreplace)\r\n        hunklineno = 1\r\n\r\n        -- todo \\ No newline at end of file\r\n      end\r\n      -- check hunks in source file\r\n      if not continue and lineno < hunk.startsrc + #hunkfind - 1 then\r\n        if endlstrip(line) == hunkfind[hunklineno] then\r\n          hunklineno = hunklineno + 1\r\n        else\r\n          debug(format(\"hunk no.%d doesn't match source file %s\",\r\n                       hunkno, filename))\r\n          -- file may be already patched, but check other hunks anyway\r\n          hunkno = hunkno + 1\r\n          if hunkno <= #hunks then\r\n            hunk = hunks[hunkno]\r\n            continue = true\r\n          else\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end\r\n      -- check if processed line is the last line\r\n      if not continue and lineno == hunk.startsrc + #hunkfind - 1 then\r\n        debug(format(\"file %s hunk no.%d -- is ready to be patched\",\r\n                     filename, hunkno))\r\n        hunkno = hunkno + 1\r\n        validhunks = validhunks + 1\r\n        if hunkno <= #hunks then\r\n          hunk = hunks[hunkno]\r\n        else\r\n          if validhunks == #hunks then\r\n            -- patch file\r\n            canpatch = true\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 307,
    "text": "if not hunk or lineno < hunk.startsrc then\r\n        continue = true\r\n      elseif lineno == hunk.startsrc then\r\n        hunkfind = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '-' then\r\n          hunkfind[#hunkfind+1] = endlstrip(x:sub(2))\r\n        end end\r\n        hunkreplace = {}\r\n        for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '+' then\r\n          hunkreplace[#hunkreplace+1] = endlstrip(x:sub(2))\r\n        end end\r\n        --pprint(hunkreplace)\r\n        hunklineno = 1\r\n\r\n        -- todo \\ No newline at end of file\r\n      end",
    "type": "statement:if"
  }, {
    "id": 308,
    "text": "hunkfind = {}",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '-' then\r\n          hunkfind[#hunkfind+1] = endlstrip(x:sub(2))\r\n        end end",
    "type": "statement:genericfor"
  }, {
    "id": 310,
    "text": "if x:sub(1,1) == ' ' or x:sub(1,1) == '-' then\r\n          hunkfind[#hunkfind+1] = endlstrip(x:sub(2))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "hunkfind[#hunkfind+1] = endlstrip(x:sub(2))",
    "type": "statement:assign"
  }, {
    "id": 312,
    "text": "hunkreplace = {}",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "for _,x in ipairs(hunk.text) do\r\n        if x:sub(1,1) == ' ' or x:sub(1,1) == '+' then\r\n          hunkreplace[#hunkreplace+1] = endlstrip(x:sub(2))\r\n        end end",
    "type": "statement:genericfor"
  }, {
    "id": 314,
    "text": "if x:sub(1,1) == ' ' or x:sub(1,1) == '+' then\r\n          hunkreplace[#hunkreplace+1] = endlstrip(x:sub(2))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 315,
    "text": "hunkreplace[#hunkreplace+1] = endlstrip(x:sub(2))",
    "type": "statement:assign"
  }, {
    "id": 316,
    "text": "hunklineno = 1",
    "type": "statement:assign"
  }, {
    "id": 317,
    "text": "if not continue and lineno < hunk.startsrc + #hunkfind - 1 then\r\n        if endlstrip(line) == hunkfind[hunklineno] then\r\n          hunklineno = hunklineno + 1\r\n        else\r\n          debug(format(\"hunk no.%d doesn't match source file %s\",\r\n                       hunkno, filename))\r\n          -- file may be already patched, but check other hunks anyway\r\n          hunkno = hunkno + 1\r\n          if hunkno <= #hunks then\r\n            hunk = hunks[hunkno]\r\n            continue = true\r\n          else\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 318,
    "text": "if endlstrip(line) == hunkfind[hunklineno] then\r\n          hunklineno = hunklineno + 1\r\n        else\r\n          debug(format(\"hunk no.%d doesn't match source file %s\",\r\n                       hunkno, filename))\r\n          -- file may be already patched, but check other hunks anyway\r\n          hunkno = hunkno + 1\r\n          if hunkno <= #hunks then\r\n            hunk = hunks[hunkno]\r\n            continue = true\r\n          else\r\n            isbreak = true; break\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 319,
    "text": "hunklineno = hunklineno + 1",
    "type": "statement:assign"
  }, {
    "id": 320,
    "text": "debug(format(\"hunk no.%d doesn't match source file %s\",\r\n                       hunkno, filename))",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "hunkno = hunkno + 1",
    "type": "statement:assign"
  }, {
    "id": 322,
    "text": "if hunkno <= #hunks then\r\n            hunk = hunks[hunkno]\r\n            continue = true\r\n          else\r\n            isbreak = true; break\r\n          end",
    "type": "statement:if"
  }, {
    "id": 323,
    "text": "hunk = hunks[hunkno]",
    "type": "statement:assign"
  }, {
    "id": 324,
    "text": "isbreak = true",
    "type": "statement:assign"
  }, {
    "id": 325,
    "text": "if not continue and lineno == hunk.startsrc + #hunkfind - 1 then\r\n        debug(format(\"file %s hunk no.%d -- is ready to be patched\",\r\n                     filename, hunkno))\r\n        hunkno = hunkno + 1\r\n        validhunks = validhunks + 1\r\n        if hunkno <= #hunks then\r\n          hunk = hunks[hunkno]\r\n        else\r\n          if validhunks == #hunks then\r\n            -- patch file\r\n            canpatch = true\r\n            isbreak = true; break\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 326,
    "text": "debug(format(\"file %s hunk no.%d -- is ready to be patched\",\r\n                     filename, hunkno))",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "validhunks = validhunks + 1",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "if hunkno <= #hunks then\r\n          hunk = hunks[hunkno]\r\n        else\r\n          if validhunks == #hunks then\r\n            -- patch file\r\n            canpatch = true\r\n            isbreak = true; break\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 329,
    "text": "if validhunks == #hunks then\r\n            -- patch file\r\n            canpatch = true\r\n            isbreak = true; break\r\n          end",
    "type": "statement:if"
  }, {
    "id": 330,
    "text": "canpatch = true",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "if not isbreak then\r\n      if hunkno <= #hunks then\r\n        warning(format(\"premature end of source file %s at hunk %d\",\r\n                       filename, hunkno))\r\n        all_ok = false\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 332,
    "text": "if hunkno <= #hunks then\r\n        warning(format(\"premature end of source file %s at hunk %d\",\r\n                       filename, hunkno))\r\n        all_ok = false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 333,
    "text": "warning(format(\"premature end of source file %s at hunk %d\",\r\n                       filename, hunkno))",
    "type": "statement:functioncall"
  }, {
    "id": 334,
    "text": "if validhunks < #hunks then\r\n      if check_patched(file, hunks) then\r\n        warning(format(\"already patched  %s\", filename))\r\n      else\r\n        warning(format(\"source file is different - %s\", filename))\r\n        all_ok = false\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "if check_patched(file, hunks) then\r\n        warning(format(\"already patched  %s\", filename))\r\n      else\r\n        warning(format(\"source file is different - %s\", filename))\r\n        all_ok = false\r\n      end",
    "type": "statement:if"
  }, {
    "id": 336,
    "text": "warning(format(\"already patched  %s\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "warning(format(\"source file is different - %s\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "if canpatch then\r\n      local backupname = filename .. \".orig\"\r\n      if exists(backupname) then\r\n        warning(format(\"can't backup original file to %s - aborting\",\r\n                       backupname))\r\n        all_ok = false\r\n      else\r\n        assert(os.rename(filename, backupname))\r\n        if patch_hunks(backupname, filename, hunks) then\r\n          warning(format(\"successfully patched %s\", filename))\r\n          assert(os.remove(backupname))\r\n        else\r\n          warning(format(\"error patching file %s\", filename))\r\n          assert(file_copy(filename, filename .. \".invalid\"))\r\n          warning(format(\"invalid version is saved to %s\",\r\n                         filename .. \".invalid\"))\r\n          -- todo: proper rejects\r\n          assert(os.rename(backupname, filename))\r\n          all_ok = false\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 339,
    "text": "local backupname = filename .. \".orig\"",
    "type": "statement:localassign"
  }, {
    "id": 340,
    "text": "if exists(backupname) then\r\n        warning(format(\"can't backup original file to %s - aborting\",\r\n                       backupname))\r\n        all_ok = false\r\n      else\r\n        assert(os.rename(filename, backupname))\r\n        if patch_hunks(backupname, filename, hunks) then\r\n          warning(format(\"successfully patched %s\", filename))\r\n          assert(os.remove(backupname))\r\n        else\r\n          warning(format(\"error patching file %s\", filename))\r\n          assert(file_copy(filename, filename .. \".invalid\"))\r\n          warning(format(\"invalid version is saved to %s\",\r\n                         filename .. \".invalid\"))\r\n          -- todo: proper rejects\r\n          assert(os.rename(backupname, filename))\r\n          all_ok = false\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 341,
    "text": "warning(format(\"can't backup original file to %s - aborting\",\r\n                       backupname))",
    "type": "statement:functioncall"
  }, {
    "id": 342,
    "text": "assert(os.rename(filename, backupname))",
    "type": "statement:functioncall"
  }, {
    "id": 343,
    "text": "if patch_hunks(backupname, filename, hunks) then\r\n          warning(format(\"successfully patched %s\", filename))\r\n          assert(os.remove(backupname))\r\n        else\r\n          warning(format(\"error patching file %s\", filename))\r\n          assert(file_copy(filename, filename .. \".invalid\"))\r\n          warning(format(\"invalid version is saved to %s\",\r\n                         filename .. \".invalid\"))\r\n          -- todo: proper rejects\r\n          assert(os.rename(backupname, filename))\r\n          all_ok = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "warning(format(\"successfully patched %s\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "assert(os.remove(backupname))",
    "type": "statement:functioncall"
  }, {
    "id": 346,
    "text": "warning(format(\"error patching file %s\", filename))",
    "type": "statement:functioncall"
  }, {
    "id": 347,
    "text": "assert(file_copy(filename, filename .. \".invalid\"))",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "warning(format(\"invalid version is saved to %s\",\r\n                         filename .. \".invalid\"))",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "assert(os.rename(backupname, filename))",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 351,
    "text": "function(self, n)\r\n         if self.eof then return nil end\r\n         local chunk = self.str:sub(self.at, self.at + n - 1)\r\n         self.at = self.at + n\r\n         if self.at > self.len then\r\n            self.eof = true\r\n         end\r\n         return chunk\r\n      end",
    "type": "function"
  }, {
    "id": 352,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 353,
    "text": "function(self)\r\n         self.eof = true\r\n      end",
    "type": "function"
  }, {
    "id": 354,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 355,
    "text": "function()\r\n    local pos, chars\r\n    while 1 do\r\n      pos, chars = buffer:match('()([\\r\\n].)', pos_beg)\r\n      if pos or not f then\r\n        break\r\n      elseif f then\r\n        local chunk = f:read(CHUNK_SIZE)\r\n        if chunk then\r\n          buffer = buffer:sub(pos_beg) .. chunk\r\n          pos_beg = 1\r\n        else\r\n          f = nil\r\n        end\r\n      end\r\n    end\r\n    if not pos then\r\n      pos = #buffer\r\n    elseif chars == '\\r\\n' then\r\n      pos = pos + 1\r\n    end\r\n    local line = buffer:sub(pos_beg, pos)\r\n    pos_beg = pos + 1\r\n    if #line > 0 then\r\n      return line\r\n    end    \r\n  end",
    "type": "function"
  }, {
    "id": 356,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 357,
    "text": "function()\r\n    if #file == 0 then\r\n      error 'nomatch'\r\n    end\r\n    for hno, h in ipairs(hunks) do\r\n      -- skip to line just before hunk starts\r\n      if #file < h.starttgt then\r\n         error 'nomatch'\r\n      end\r\n      lineno = h.starttgt\r\n      for _, hline in ipairs(h.text) do\r\n        -- todo: \\ No newline at the end of file\r\n        if not startswith(hline, \"-\") and not startswith(hline, \"\\\\\") then\r\n          local line = file[lineno]\r\n          lineno = lineno + 1\r\n          if #line == 0 then\r\n            error 'nomatch'\r\n          end\r\n          if endlstrip(line) ~= endlstrip(hline:sub(2)) then\r\n            warning(format(\"file is not patched - failed hunk: %d\", hno))\r\n            error 'nomatch'\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 358,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 359,
    "text": "",
    "type": "function container"
  }, {
    "id": 360,
    "text": "function array_contains(tbl, value)\r\n   for _, v in ipairs(tbl) do\r\n      if v == value then\r\n         return true\r\n      end\r\n   end\r\n   return false\r\nend",
    "type": "function"
  }, {
    "id": 361,
    "text": "absolute_name",
    "type": "global function"
  }, {
    "id": 362,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 363,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 364,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 365,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 366,
    "text": "src_readline",
    "type": "global function"
  }, {
    "id": 367,
    "text": "module",
    "type": "global function"
  }, {
    "id": 368,
    "text": "readline",
    "type": "global function"
  }, {
    "id": 369,
    "text": "filename",
    "type": "global function"
  }, {
    "id": 370,
    "text": "rename",
    "type": "global function"
  }, {
    "id": 371,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 372,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 373,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 374,
    "text": "format",
    "type": "global function"
  }, {
    "id": 375,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 376,
    "text": "open",
    "type": "global function"
  }, {
    "id": 377,
    "text": "error",
    "type": "global function"
  }, {
    "id": 378,
    "text": "require",
    "type": "global function"
  }, {
    "id": 379,
    "text": "util)",
    "type": "module"
  }, {
    "id": 380,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 381,
    "text": "",
    "type": "variable container"
  }, {
    "id": 382,
    "text": "",
    "type": "require container"
  }, {
    "id": 383,
    "text": "",
    "type": "local variable"
  }, {
    "id": 384,
    "text": "",
    "type": "string"
  }, {
    "id": 385,
    "text": "",
    "type": "local variable"
  }, {
    "id": 386,
    "text": "",
    "type": "n/a"
  }, {
    "id": 387,
    "text": "",
    "type": "local variable"
  }, {
    "id": 388,
    "text": "",
    "type": "n/a"
  }, {
    "id": 389,
    "text": "",
    "type": "local variable"
  }, {
    "id": 390,
    "text": "",
    "type": "n/a"
  }, {
    "id": 391,
    "text": "",
    "type": "local variable"
  }, {
    "id": 392,
    "text": "",
    "type": "n/a"
  }, {
    "id": 393,
    "text": "",
    "type": "local variable"
  }, {
    "id": 394,
    "text": "",
    "type": "n/a"
  }, {
    "id": 395,
    "text": "",
    "type": "local variable"
  }, {
    "id": 396,
    "text": "",
    "type": "boolean"
  }, {
    "id": 397,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 398,
    "text": "",
    "type": "require local variable"
  } ]
}