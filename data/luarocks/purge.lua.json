{
  "_filename": "purge.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/purge.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 7,
    "label": "has",
    "to": 17
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 7,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 7,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 7,
    "label": "calls",
    "to": 3
  }, {
    "from": 7,
    "label": "calls",
    "to": 4
  }, {
    "from": 7,
    "label": "calls",
    "to": 38
  }, {
    "from": 7,
    "label": "calls",
    "to": 36
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 40
  }, {
    "from": 7,
    "label": "calls",
    "to": 40
  }, {
    "from": 7,
    "label": "calls",
    "to": 37
  }, {
    "from": 7,
    "label": "calls",
    "to": 34
  }, {
    "from": 7,
    "label": "calls",
    "to": 41
  }, {
    "from": 7,
    "label": "calls",
    "to": 41
  }, {
    "from": 7,
    "label": "calls",
    "to": 39
  }, {
    "from": 7,
    "label": "calls",
    "to": 39
  }, {
    "from": 7,
    "label": "calls",
    "to": 35
  }, {
    "from": 7,
    "label": "calls",
    "to": 5
  }, {
    "from": 7,
    "label": "calls",
    "to": 44
  }, {
    "from": 33,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 45
  }, {
    "from": 33,
    "label": "calls",
    "to": 45
  }, {
    "from": 7,
    "label": "calls",
    "to": 6
  }, {
    "from": 33,
    "label": "calls",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 33,
    "label": "declares",
    "to": 7
  }, {
    "from": 33,
    "label": "declares",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 55,
    "label": "initializes",
    "to": 57
  }, {
    "from": 55,
    "label": "initializes",
    "to": 58
  }, {
    "from": 55,
    "label": "initializes",
    "to": 59
  }, {
    "from": 56,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 47
  }, {
    "from": 56,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "requires",
    "to": 49
  }, {
    "from": 56,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "requires",
    "to": 50
  }, {
    "from": 56,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 53
  }, {
    "from": 56,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "requires",
    "to": 52
  }, {
    "from": 56,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "requires",
    "to": 51
  }, {
    "from": 56,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "requires",
    "to": 48
  }, {
    "from": 56,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "requires",
    "to": 46
  }, {
    "from": 56,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "requires",
    "to": 54
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "purge",
    "type": "module"
  }, {
    "id": 2,
    "text": "function compare_versions(a, b)\r\n   return parse_version(a) > parse_version(b)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function check_command_permissions(flags)\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   local ok = true\r\n   local err = \"\"\r\n   for _, dir in ipairs { cfg.rocks_dir, root_dir } do\r\n      if fs.exists(dir) and not fs.is_writable(dir) then\r\n         ok = false\r\n         err = \"Your user does not have write permissions in \" .. dir\r\n         break\r\n      end\r\n   end\r\n   local root_parent = dir.dir_name(root_dir)\r\n   if ok and not fs.exists(root_dir) and not fs.is_writable(root_parent) then\r\n      ok = false\r\n      err = root_dir..\" does not exist and your user does not have write permissions in \" .. root_parent\r\n   end\r\n   if ok then\r\n      return true\r\n   else\r\n      if flags[\"local\"] then\r\n         err = err .. \" \\n-- please check your permissions.\"\r\n      else\r\n         err = err .. \" \\n-- you may want to run as a privileged user or use your local tree with --local.\"\r\n      end\r\n      return nil, err\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function make_manifest(repo, deps_mode, remote)\r\n   assert(type(repo) == \"string\")\r\n   assert(type(deps_mode) == \"string\")\r\n\r\n   if deps_mode == \"none\" then deps_mode = cfg.deps_mode end\r\n\r\n   if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end\r\n\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   query.arch = \"any\"\r\n   local results = search.disk_search(repo, query)\r\n   local manifest = { repository = {}, modules = {}, commands = {} }\r\n\r\n   manif_core.manifest_cache[repo] = manifest\r\n\r\n   local dep_handler = nil\r\n   if not remote then\r\n      dep_handler = function(manifest)\r\n         update_dependencies(manifest, deps_mode)\r\n      end\r\n   end\r\n   local ok, err = store_results(results, manifest, dep_handler)\r\n   if not ok then return nil, err end\r\n\r\n   if remote then\r\n      local cache = {}\r\n      for luaver in util.lua_versions() do\r\n         local vmanifest = { repository = {}, modules = {}, commands = {} }\r\n         local dep_handler = function(manifest)\r\n            filter_by_lua_version(manifest, luaver, repo, cache)\r\n         end\r\n         local ok, err = store_results(results, vmanifest, dep_handler)\r\n         save_table(repo, \"manifest-\"..luaver, vmanifest)\r\n      end\r\n   end\r\n\r\n   return save_table(repo, \"manifest\", manifest)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function rocks_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.rocks_subdir)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.rocks_dir or dir.path(tree.root, cfg.rocks_subdir)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function run(...)\r\n   local flags = util.parse_flags(...)\r\n   \r\n   local tree = flags[\"tree\"]\r\n\r\n   if type(tree) ~= \"string\" then\r\n      return nil, \"The --tree argument is mandatory. \"..util.see_help(\"purge\")\r\n   end\r\n   \r\n   local results = {}\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   if not fs.is_dir(tree) then\r\n      return nil, \"Directory not found: \"..tree\r\n   end\r\n\r\n   local ok, err = fs.check_command_permissions(flags)\r\n   if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n\r\n   search.manifest_search(results, path.rocks_dir(tree), query)\r\n\r\n   local sort = function(a,b) return deps.compare_versions(b,a) end\r\n   if flags[\"old-versions\"] then\r\n      sort = deps.compare_versions\r\n   end\r\n\r\n   for package, versions in util.sortedpairs(results) do\r\n      for version, repositories in util.sortedpairs(versions, sort) do\r\n         if flags[\"old-versions\"] then\r\n            util.printout(\"Keeping \"..package..\" \"..version..\"...\")\r\n            local ok, err = remove.remove_other_versions(package, version, flags[\"force\"])\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n            break\r\n         else\r\n            util.printout(\"Removing \"..package..\" \"..version..\"...\")\r\n            local ok, err = repos.delete_version(package, version, true)\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return manif.make_manifest(cfg.rocks_dir, \"one\")\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local flags = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local tree = flags[\"tree\"]",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if type(tree) ~= \"string\" then\r\n      return nil, \"The --tree argument is mandatory. \"..util.see_help(\"purge\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local query = search.make_query(\"\")",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "query.exact_name = false",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if not fs.is_dir(tree) then\r\n      return nil, \"Directory not found: \"..tree\r\n   end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local ok, err = fs.check_command_permissions(flags)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "search.manifest_search(results, path.rocks_dir(tree), query)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local sort = function(a,b) return deps.compare_versions(b,a) end",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if flags[\"old-versions\"] then\r\n      sort = deps.compare_versions\r\n   end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "sort = deps.compare_versions",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "for package, versions in util.sortedpairs(results) do\r\n      for version, repositories in util.sortedpairs(versions, sort) do\r\n         if flags[\"old-versions\"] then\r\n            util.printout(\"Keeping \"..package..\" \"..version..\"...\")\r\n            local ok, err = remove.remove_other_versions(package, version, flags[\"force\"])\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n            break\r\n         else\r\n            util.printout(\"Removing \"..package..\" \"..version..\"...\")\r\n            local ok, err = repos.delete_version(package, version, true)\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "for version, repositories in util.sortedpairs(versions, sort) do\r\n         if flags[\"old-versions\"] then\r\n            util.printout(\"Keeping \"..package..\" \"..version..\"...\")\r\n            local ok, err = remove.remove_other_versions(package, version, flags[\"force\"])\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n            break\r\n         else\r\n            util.printout(\"Removing \"..package..\" \"..version..\"...\")\r\n            local ok, err = repos.delete_version(package, version, true)\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "if flags[\"old-versions\"] then\r\n            util.printout(\"Keeping \"..package..\" \"..version..\"...\")\r\n            local ok, err = remove.remove_other_versions(package, version, flags[\"force\"])\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n            break\r\n         else\r\n            util.printout(\"Removing \"..package..\" \"..version..\"...\")\r\n            local ok, err = repos.delete_version(package, version, true)\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "util.printout(\"Keeping \"..package..\" \"..version..\"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "local ok, err = remove.remove_other_versions(package, version, flags[\"force\"])",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if not ok then\r\n               util.printerr(err)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "util.printerr(err)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "util.printout(\"Removing \"..package..\" \"..version..\"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "local ok, err = repos.delete_version(package, version, true)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(a,b) return deps.compare_versions(b,a) end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "function container"
  }, {
    "id": 34,
    "text": "function remove_other_versions(name, version, force)\r\n   local results = {}\r\n   search.manifest_search(results, cfg.rocks_dir, { name = name, exact_name = true, constraints = {{ op = \"~=\", version = version}} })\r\n   if results[name] then\r\n      return remove_search_results(results, name, cfg.deps_mode, force)\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function delete_version(name, version, quick)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local function delete_deployed_file_tree(file_tree, deploy_dir, suffix)\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local versioned = path.versioned_name(target, deploy_dir, name, version)\r\n            local ok, name, err = delete_suffixed(versioned, suffix)\r\n            if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end\r\n            if err == \"fail\" then return nil, name end\r\n            ok, name, err = delete_suffixed(target, suffix)\r\n            if err == \"fail\" then return nil, name end\r\n            if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(target))\r\n            return true\r\n         end\r\n      )\r\n   end\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end\r\n   \r\n   local ok, err = true\r\n   if rock_manifest.bin then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.bin, cfg.deploy_bin_dir, cfg.wrapper_suffix)\r\n   end\r\n   if ok and rock_manifest.lua then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lua, cfg.deploy_lua_dir)\r\n   end\r\n   if ok and rock_manifest.lib then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lib, cfg.deploy_lib_dir)\r\n   end\r\n   if err then return nil, err end\r\n\r\n   fs.delete(path.install_dir(name, version))\r\n   if not get_installed_versions(name) then\r\n      fs.delete(dir.path(cfg.rocks_dir, name))\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function manifest_search(results, repo, query)\r\n   assert(type(results) == \"table\")\r\n   assert(type(repo) == \"string\")\r\n   assert(type(query) == \"table\")\r\n   \r\n   query_arch_as_table(query)\r\n   local manifest, err = manif.load_manifest(repo)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest: \"..err\r\n   end\r\n   for name, versions in pairs(manifest.repository) do\r\n      for version, items in pairs(versions) do\r\n         for _, item in ipairs(items) do\r\n            store_if_match(results, repo, name, version, item.arch, query)\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function make_query(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n   \r\n   local query = {\r\n      name = name,\r\n      constraints = {}\r\n   }\r\n   if version then\r\n      table.insert(query.constraints, { op = \"==\", version = deps.parse_version(version)})\r\n   end\r\n   return query\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "function sortedpairs(tbl, sort_function)\r\n   return coroutine.wrap(function() sortedpairs_iterator(tbl, sort_function) end)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "function see_help(command, program)\r\n   return \"See '\"..this_program(program or \"luarocks\")..' help '..command..\"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "module",
    "type": "global function"
  }, {
    "id": 44,
    "text": "type",
    "type": "global function"
  }, {
    "id": 45,
    "text": "require",
    "type": "global function"
  }, {
    "id": 46,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 47,
    "text": "util)",
    "type": "module"
  }, {
    "id": 48,
    "text": "manif)",
    "type": "module"
  }, {
    "id": 49,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 50,
    "text": "path)",
    "type": "module"
  }, {
    "id": 51,
    "text": "repos)",
    "type": "module"
  }, {
    "id": 52,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 53,
    "text": "search)",
    "type": "module"
  }, {
    "id": 54,
    "text": "remove)",
    "type": "module"
  }, {
    "id": 55,
    "text": "",
    "type": "variable container"
  }, {
    "id": 56,
    "text": "",
    "type": "require container"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "",
    "type": "global variable"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "require local variable"
  } ]
}