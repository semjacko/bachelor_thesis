{
  "_filename": "index.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/index.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 3,
    "label": "calls",
    "to": 23
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 6,
    "label": "has",
    "to": 21
  }, {
    "from": 6,
    "label": "has",
    "to": 21
  }, {
    "from": 6,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 21
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 31,
    "label": "has",
    "to": 43
  }, {
    "from": 28,
    "label": "has",
    "to": 44
  }, {
    "from": 28,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 45,
    "label": "has",
    "to": 54
  }, {
    "from": 28,
    "label": "has",
    "to": 55
  }, {
    "from": 23,
    "label": "has",
    "to": 56
  }, {
    "from": 23,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 23,
    "label": "has",
    "to": 59
  }, {
    "from": 23,
    "label": "has",
    "to": 60
  }, {
    "from": 23,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 21
  }, {
    "from": 6,
    "label": "calls",
    "to": 72
  }, {
    "from": 23,
    "label": "calls",
    "to": 72
  }, {
    "from": 23,
    "label": "calls",
    "to": 5
  }, {
    "from": 6,
    "label": "calls",
    "to": 71
  }, {
    "from": 6,
    "label": "calls",
    "to": 71
  }, {
    "from": 23,
    "label": "calls",
    "to": 71
  }, {
    "from": 23,
    "label": "calls",
    "to": 6
  }, {
    "from": 23,
    "label": "calls",
    "to": 73
  }, {
    "from": 23,
    "label": "calls",
    "to": 4
  }, {
    "from": 23,
    "label": "calls",
    "to": 4
  }, {
    "from": 23,
    "label": "calls",
    "to": 66
  }, {
    "from": 6,
    "label": "calls",
    "to": 67
  }, {
    "from": 6,
    "label": "calls",
    "to": 67
  }, {
    "from": 6,
    "label": "calls",
    "to": 67
  }, {
    "from": 23,
    "label": "calls",
    "to": 67
  }, {
    "from": 23,
    "label": "calls",
    "to": 67
  }, {
    "from": 63,
    "label": "calls",
    "to": 70
  }, {
    "from": 23,
    "label": "calls",
    "to": 68
  }, {
    "from": 23,
    "label": "calls",
    "to": 74
  }, {
    "from": 63,
    "label": "calls",
    "to": 75
  }, {
    "from": 63,
    "label": "calls",
    "to": 75
  }, {
    "from": 63,
    "label": "calls",
    "to": 75
  }, {
    "from": 63,
    "label": "calls",
    "to": 75
  }, {
    "from": 63,
    "label": "calls",
    "to": 75
  }, {
    "from": 63,
    "label": "calls",
    "to": 75
  }, {
    "from": 23,
    "label": "calls",
    "to": 69
  }, {
    "from": 23,
    "label": "calls",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 63
  }, {
    "from": 63,
    "label": "declares",
    "to": 6
  }, {
    "from": 63,
    "label": "declares",
    "to": 23
  }, {
    "from": 63,
    "label": "declares",
    "to": 62
  }, {
    "from": 64,
    "label": "calls",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 83
  }, {
    "from": 82,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 82,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 82,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 82,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 82,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 82,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 82,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 83,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 76
  }, {
    "from": 83,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 79
  }, {
    "from": 83,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "requires",
    "to": 80
  }, {
    "from": 83,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "requires",
    "to": 81
  }, {
    "from": 83,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "requires",
    "to": 77
  }, {
    "from": 83,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "requires",
    "to": 78
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 62
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "index",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function add_files_to_server(refresh, rockfiles, server, upload_server)\r\n   assert(type(refresh) == \"boolean\" or not refresh)\r\n   assert(type(rockfiles) == \"table\")\r\n   assert(type(server) == \"string\")\r\n   assert(type(upload_server) == \"table\" or not upload_server)\r\n   \r\n   local download_url, login_url = cache.get_server_urls(server, upload_server)\r\n   local at = fs.current_dir()\r\n   local refresh_fn = refresh and cache.refresh_local_cache or cache.split_server_url\r\n   \r\n   local local_cache, protocol, server_path, user, password = refresh_fn(server, download_url, cfg.upload_user, cfg.upload_password)\r\n   if not local_cache then\r\n      return nil, protocol\r\n   end\r\n   if protocol == \"file\" then\r\n      return nil, \"Server \"..server..\" is not recognized, check your configuration.\"\r\n   end\r\n   \r\n   if not login_url then\r\n      login_url = protocol..\"://\"..server_path\r\n   end\r\n   \r\n   local ok, err = fs.change_dir(at)\r\n   if not ok then return nil, err end\r\n   \r\n   local files = {}\r\n   for i, rockfile in ipairs(rockfiles) do\r\n      if fs.exists(rockfile) then\r\n         util.printout(\"Copying file \"..rockfile..\" to \"..local_cache..\"...\")\r\n         local absolute = fs.absolute_name(rockfile)\r\n         fs.copy(absolute, local_cache)\r\n         table.insert(files, dir.base_name(absolute))\r\n      else\r\n         util.printerr(\"File \"..rockfile..\" not found\")\r\n      end\r\n   end\r\n   if #files == 0 then\r\n      return nil, \"No files found\"\r\n   end\r\n\r\n   local ok, err = fs.change_dir(local_cache)\r\n   if not ok then return nil, err end\r\n\r\n   util.printout(\"Updating manifest...\")\r\n   manif.make_manifest(local_cache, \"one\", true)\r\n   \r\n   manif.zip_manifests()\r\n   \r\n   util.printout(\"Updating index.html...\")\r\n   index.make_index(local_cache)\r\n\r\n   local login_info = \"\"\r\n   if user then login_info = \" -u \"..user end\r\n   if password then login_info = login_info..\":\"..password end\r\n   if not login_url:match(\"/$\") then\r\n      login_url = login_url .. \"/\"\r\n   end\r\n\r\n   table.insert(files, \"index.html\")\r\n   table.insert(files, \"manifest\")\r\n   for ver in util.lua_versions() do\r\n      table.insert(files, \"manifest-\"..ver)\r\n      table.insert(files, \"manifest-\"..ver..\".zip\")\r\n   end\r\n\r\n   -- TODO abstract away explicit 'curl' call\r\n\r\n   local cmd\r\n   if protocol == \"rsync\" then\r\n      local srv, path = server_path:match(\"([^/]+)(/.+)\")\r\n      cmd = cfg.variables.RSYNC..\" \"..cfg.variables.RSYNCFLAGS..\" -e ssh \"..local_cache..\"/ \"..user..\"@\"..srv..\":\"..path..\"/\"\r\n   elseif upload_server and upload_server.sftp then\r\n      local part1, part2 = upload_server.sftp:match(\"^([^/]*)/(.*)$\")\r\n      cmd = cfg.variables.SCP..\" \"..table.concat(files, \" \")..\" \"..user..\"@\"..part1..\":/\"..part2\r\n   else\r\n      cmd = cfg.variables.CURL..\" \"..login_info..\" -T '{\"..table.concat(files, \",\")..\"}' \"..login_url\r\n   end\r\n\r\n   util.printout(cmd)\r\n   fs.execute(cmd)\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function remove_files_from_server(refresh, rockfiles, server, upload_server)\r\n   assert(type(refresh) == \"boolean\" or not refresh)\r\n   assert(type(rockfiles) == \"table\")\r\n   assert(type(server) == \"string\")\r\n   assert(type(upload_server) == \"table\" or not upload_server)\r\n\r\n   local download_url, login_url = cache.get_server_urls(server, upload_server)\r\n   local at = fs.current_dir()\r\n   local refresh_fn = refresh and cache.refresh_local_cache or cache.split_server_url\r\n   \r\n   local local_cache, protocol, server_path, user, password = refresh_fn(server, download_url, cfg.upload_user, cfg.upload_password)\r\n   if not local_cache then\r\n      return nil, protocol\r\n   end\r\n   if protocol ~= \"rsync\" then\r\n      return nil, \"This command requires 'rsync', check your configuration.\"\r\n   end\r\n   \r\n   local ok, err = fs.change_dir(at)\r\n   if not ok then return nil, err end\r\n   \r\n   local nr_files = 0\r\n   for i, rockfile in ipairs(rockfiles) do\r\n      local basename = dir.base_name(rockfile)\r\n      local file = dir.path(local_cache, basename)\r\n      util.printout(\"Removing file \"..file..\"...\")\r\n      fs.delete(file)\r\n      if not fs.exists(file) then\r\n         nr_files = nr_files + 1\r\n      else\r\n         util.printerr(\"Failed removing \"..file)\r\n      end\r\n   end\r\n   if nr_files == 0 then\r\n      return nil, \"No files removed.\"\r\n   end\r\n\r\n   local ok, err = fs.change_dir(local_cache)\r\n   if not ok then return nil, err end\r\n\r\n   util.printout(\"Updating manifest...\")\r\n   manif.make_manifest(local_cache, \"one\", true)\r\n   util.printout(\"Updating index.html...\")\r\n   index.make_index(local_cache)\r\n\r\n   local srv, path = server_path:match(\"([^/]+)(/.+)\")\r\n   local cmd = cfg.variables.RSYNC..\" \"..cfg.variables.RSYNCFLAGS..\" --delete -e ssh \"..local_cache..\"/ \"..user..\"@\"..srv..\":\"..path..\"/\"\r\n\r\n   util.printout(cmd)\r\n   fs.execute(cmd)\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function format_external_dependencies(rockspec)\r\n   if rockspec.external_dependencies then\r\n      local deplist = {}\r\n      local listed_set = {}\r\n      local plats = nil\r\n      for name, desc in util.sortedpairs(rockspec.external_dependencies) do\r\n         if name ~= \"platforms\" then\r\n            table.insert(deplist, name:lower())\r\n            listed_set[name] = true\r\n         else\r\n            plats = desc\r\n         end\r\n      end\r\n      if plats then\r\n         for plat, entries in util.sortedpairs(plats) do\r\n            for name, desc in util.sortedpairs(entries) do\r\n               if not listed_set[name] then\r\n                  table.insert(deplist, name:lower() .. \" (on \"..plat..\")\")\r\n               end\r\n            end\r\n         end\r\n      end\r\n      return '<p><b>External dependencies:</b> ' .. table.concat(deplist, ',&nbsp;').. '</p>'\r\n   else\r\n      return \"\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if rockspec.external_dependencies then\r\n      local deplist = {}\r\n      local listed_set = {}\r\n      local plats = nil\r\n      for name, desc in util.sortedpairs(rockspec.external_dependencies) do\r\n         if name ~= \"platforms\" then\r\n            table.insert(deplist, name:lower())\r\n            listed_set[name] = true\r\n         else\r\n            plats = desc\r\n         end\r\n      end\r\n      if plats then\r\n         for plat, entries in util.sortedpairs(plats) do\r\n            for name, desc in util.sortedpairs(entries) do\r\n               if not listed_set[name] then\r\n                  table.insert(deplist, name:lower() .. \" (on \"..plat..\")\")\r\n               end\r\n            end\r\n         end\r\n      end\r\n      return '<p><b>External dependencies:</b> ' .. table.concat(deplist, ',&nbsp;').. '</p>'\r\n   else\r\n      return \"\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "local deplist = {}",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local listed_set = {}",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local plats = nil",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "for name, desc in util.sortedpairs(rockspec.external_dependencies) do\r\n         if name ~= \"platforms\" then\r\n            table.insert(deplist, name:lower())\r\n            listed_set[name] = true\r\n         else\r\n            plats = desc\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "if name ~= \"platforms\" then\r\n            table.insert(deplist, name:lower())\r\n            listed_set[name] = true\r\n         else\r\n            plats = desc\r\n         end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "table.insert(deplist, name:lower())",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "listed_set[name] = true",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "plats = desc",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if plats then\r\n         for plat, entries in util.sortedpairs(plats) do\r\n            for name, desc in util.sortedpairs(entries) do\r\n               if not listed_set[name] then\r\n                  table.insert(deplist, name:lower() .. \" (on \"..plat..\")\")\r\n               end\r\n            end\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "for plat, entries in util.sortedpairs(plats) do\r\n            for name, desc in util.sortedpairs(entries) do\r\n               if not listed_set[name] then\r\n                  table.insert(deplist, name:lower() .. \" (on \"..plat..\")\")\r\n               end\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "for name, desc in util.sortedpairs(entries) do\r\n               if not listed_set[name] then\r\n                  table.insert(deplist, name:lower() .. \" (on \"..plat..\")\")\r\n               end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if not listed_set[name] then\r\n                  table.insert(deplist, name:lower() .. \" (on \"..plat..\")\")\r\n               end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "table.insert(deplist, name:lower() .. \" (on \"..plat..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function make_index(repo)\r\n   if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end\r\n   local manifest = manif.load_manifest(repo)\r\n   local out = io.open(dir.path(repo, \"index.html\"), \"w\")\r\n   \r\n   out:write(index_header)\r\n   for package, version_list in util.sortedpairs(manifest.repository) do\r\n      local latest_rockspec = nil\r\n      local output = index_package_begin\r\n      for version, data in util.sortedpairs(version_list, deps.compare_versions) do\r\n         local versions = {}\r\n         output = output..version..':&nbsp;'\r\n         table.sort(data, function(a,b) return a.arch < b.arch end)\r\n         for _, item in ipairs(data) do\r\n            local file\r\n            if item.arch == 'rockspec' then\r\n               file = (\"%s-%s.rockspec\"):format(package, version)\r\n               if not latest_rockspec then latest_rockspec = file end\r\n            else\r\n               file = (\"%s-%s.%s.rock\"):format(package, version, item.arch)\r\n            end\r\n            table.insert(versions, '<a href=\"'..file..'\">'..item.arch..'</a>')\r\n         end\r\n         output = output .. table.concat(versions, ',&nbsp;') .. '<br/>'\r\n      end\r\n      output = output .. index_package_end\r\n      if latest_rockspec then\r\n         local rockspec = persist.load_into_table(dir.path(repo, latest_rockspec))\r\n         local descript = rockspec.description or {}\r\n         local vars = {\r\n            anchor = package,\r\n            package = rockspec.package,\r\n            original = rockspec.source.url,\r\n            summary = descript.summary or \"\",\r\n            detailed = descript.detailed or \"\",\r\n            license = descript.license or \"N/A\",\r\n            homepage = descript.homepage and ('| <a href=\"'..descript.homepage..'\"'..ext_url_target..'>project homepage</a>') or \"\",\r\n            externaldependencies = format_external_dependencies(rockspec)\r\n         }\r\n         vars.detailed = vars.detailed:gsub(\"\\n\\n\", \"</p><p>\"):gsub(\"%s+\", \" \")\r\n         vars.detailed = vars.detailed:gsub(\"(https?://[a-zA-Z0-9%.%%-_%+%[%]=%?&/$@;:]+)\", '<a href=\"%1\"'..ext_url_target..'>%1</a>')\r\n         output = output:gsub(\"$(%w+)\", vars)\r\n      else\r\n         output = output:gsub(\"$anchor\", package)\r\n         output = output:gsub(\"$package\", package)\r\n         output = output:gsub(\"$(%w+)\", \"\")\r\n      end\r\n      out:write(output)\r\n   end\r\n   out:write(index_footer_begin)\r\n   for ver in util.lua_versions() do\r\n      out:write((index_manifest_ver:gsub(\"$VER\", ver)))\r\n   end\r\n   out:write(index_footer_end)\r\n   out:close()\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local manifest = manif.load_manifest(repo)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local out = io.open(dir.path(repo, \"index.html\"), \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "out:write(index_header)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "for package, version_list in util.sortedpairs(manifest.repository) do\r\n      local latest_rockspec = nil\r\n      local output = index_package_begin\r\n      for version, data in util.sortedpairs(version_list, deps.compare_versions) do\r\n         local versions = {}\r\n         output = output..version..':&nbsp;'\r\n         table.sort(data, function(a,b) return a.arch < b.arch end)\r\n         for _, item in ipairs(data) do\r\n            local file\r\n            if item.arch == 'rockspec' then\r\n               file = (\"%s-%s.rockspec\"):format(package, version)\r\n               if not latest_rockspec then latest_rockspec = file end\r\n            else\r\n               file = (\"%s-%s.%s.rock\"):format(package, version, item.arch)\r\n            end\r\n            table.insert(versions, '<a href=\"'..file..'\">'..item.arch..'</a>')\r\n         end\r\n         output = output .. table.concat(versions, ',&nbsp;') .. '<br/>'\r\n      end\r\n      output = output .. index_package_end\r\n      if latest_rockspec then\r\n         local rockspec = persist.load_into_table(dir.path(repo, latest_rockspec))\r\n         local descript = rockspec.description or {}\r\n         local vars = {\r\n            anchor = package,\r\n            package = rockspec.package,\r\n            original = rockspec.source.url,\r\n            summary = descript.summary or \"\",\r\n            detailed = descript.detailed or \"\",\r\n            license = descript.license or \"N/A\",\r\n            homepage = descript.homepage and ('| <a href=\"'..descript.homepage..'\"'..ext_url_target..'>project homepage</a>') or \"\",\r\n            externaldependencies = format_external_dependencies(rockspec)\r\n         }\r\n         vars.detailed = vars.detailed:gsub(\"\\n\\n\", \"</p><p>\"):gsub(\"%s+\", \" \")\r\n         vars.detailed = vars.detailed:gsub(\"(https?://[a-zA-Z0-9%.%%-_%+%[%]=%?&/$@;:]+)\", '<a href=\"%1\"'..ext_url_target..'>%1</a>')\r\n         output = output:gsub(\"$(%w+)\", vars)\r\n      else\r\n         output = output:gsub(\"$anchor\", package)\r\n         output = output:gsub(\"$package\", package)\r\n         output = output:gsub(\"$(%w+)\", \"\")\r\n      end\r\n      out:write(output)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 29,
    "text": "local latest_rockspec = nil",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local output = index_package_begin",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for version, data in util.sortedpairs(version_list, deps.compare_versions) do\r\n         local versions = {}\r\n         output = output..version..':&nbsp;'\r\n         table.sort(data, function(a,b) return a.arch < b.arch end)\r\n         for _, item in ipairs(data) do\r\n            local file\r\n            if item.arch == 'rockspec' then\r\n               file = (\"%s-%s.rockspec\"):format(package, version)\r\n               if not latest_rockspec then latest_rockspec = file end\r\n            else\r\n               file = (\"%s-%s.%s.rock\"):format(package, version, item.arch)\r\n            end\r\n            table.insert(versions, '<a href=\"'..file..'\">'..item.arch..'</a>')\r\n         end\r\n         output = output .. table.concat(versions, ',&nbsp;') .. '<br/>'\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "local versions = {}",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "output = output..version..':&nbsp;'",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "table.sort(data, function(a,b) return a.arch < b.arch end)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "for _, item in ipairs(data) do\r\n            local file\r\n            if item.arch == 'rockspec' then\r\n               file = (\"%s-%s.rockspec\"):format(package, version)\r\n               if not latest_rockspec then latest_rockspec = file end\r\n            else\r\n               file = (\"%s-%s.%s.rock\"):format(package, version, item.arch)\r\n            end\r\n            table.insert(versions, '<a href=\"'..file..'\">'..item.arch..'</a>')\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "local file",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if item.arch == 'rockspec' then\r\n               file = (\"%s-%s.rockspec\"):format(package, version)\r\n               if not latest_rockspec then latest_rockspec = file end\r\n            else\r\n               file = (\"%s-%s.%s.rock\"):format(package, version, item.arch)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "file = (\"%s-%s.rockspec\"):format(package, version)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if not latest_rockspec then latest_rockspec = file end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "latest_rockspec = file",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "file = (\"%s-%s.%s.rock\"):format(package, version, item.arch)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "table.insert(versions, '<a href=\"'..file..'\">'..item.arch..'</a>')",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "output = output .. table.concat(versions, ',&nbsp;') .. '<br/>'",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "output = output .. index_package_end",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if latest_rockspec then\r\n         local rockspec = persist.load_into_table(dir.path(repo, latest_rockspec))\r\n         local descript = rockspec.description or {}\r\n         local vars = {\r\n            anchor = package,\r\n            package = rockspec.package,\r\n            original = rockspec.source.url,\r\n            summary = descript.summary or \"\",\r\n            detailed = descript.detailed or \"\",\r\n            license = descript.license or \"N/A\",\r\n            homepage = descript.homepage and ('| <a href=\"'..descript.homepage..'\"'..ext_url_target..'>project homepage</a>') or \"\",\r\n            externaldependencies = format_external_dependencies(rockspec)\r\n         }\r\n         vars.detailed = vars.detailed:gsub(\"\\n\\n\", \"</p><p>\"):gsub(\"%s+\", \" \")\r\n         vars.detailed = vars.detailed:gsub(\"(https?://[a-zA-Z0-9%.%%-_%+%[%]=%?&/$@;:]+)\", '<a href=\"%1\"'..ext_url_target..'>%1</a>')\r\n         output = output:gsub(\"$(%w+)\", vars)\r\n      else\r\n         output = output:gsub(\"$anchor\", package)\r\n         output = output:gsub(\"$package\", package)\r\n         output = output:gsub(\"$(%w+)\", \"\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "local rockspec = persist.load_into_table(dir.path(repo, latest_rockspec))",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local descript = rockspec.description or {}",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local vars = {\r\n            anchor = package,\r\n            package = rockspec.package,\r\n            original = rockspec.source.url,\r\n            summary = descript.summary or \"\",\r\n            detailed = descript.detailed or \"\",\r\n            license = descript.license or \"N/A\",\r\n            homepage = descript.homepage and ('| <a href=\"'..descript.homepage..'\"'..ext_url_target..'>project homepage</a>') or \"\",\r\n            externaldependencies = format_external_dependencies(rockspec)\r\n         }",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "vars.detailed = vars.detailed:gsub(\"\\n\\n\", \"</p><p>\"):gsub(\"%s+\", \" \")",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "vars.detailed = vars.detailed:gsub(\"(https?://[a-zA-Z0-9%.%%-_%+%[%]=%?&/$@;:]+)\", '<a href=\"%1\"'..ext_url_target..'>%1</a>')",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "output = output:gsub(\"$(%w+)\", vars)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "output = output:gsub(\"$anchor\", package)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "output = output:gsub(\"$package\", package)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "output = output:gsub(\"$(%w+)\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "out:write(output)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "out:write(index_footer_begin)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "for ver in util.lua_versions() do\r\n      out:write((index_manifest_ver:gsub(\"$VER\", ver)))\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 58,
    "text": "out:write((index_manifest_ver:gsub(\"$VER\", ver)))",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "out:write(index_footer_end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "out:close()",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function(a,b) return a.arch < b.arch end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "function container"
  }, {
    "id": 64,
    "text": "function run(...)\r\n   local flags, repo = util.parse_flags(...)\r\n\r\n   assert(type(repo) == \"string\" or not repo)\r\n   repo = repo or cfg.rocks_dir\r\n  \r\n   util.printout(\"Making manifest for \"..repo)\r\n   \r\n   if repo:match(\"/lib/luarocks\") and not flags[\"local-tree\"] then\r\n      util.warning(\"This looks like a local rocks tree, but you did not pass --local-tree.\")\r\n   end\r\n   \r\n   local ok, err = manif.make_manifest(repo, deps.get_deps_mode(flags), not flags[\"local-tree\"])\r\n   if ok and not flags[\"local-tree\"] then\r\n      util.printout(\"Generating index.html for \"..repo)\r\n      index.make_index(repo)\r\n   end\r\n   if flags[\"local-tree\"] then\r\n      for luaver in util.lua_versions() do\r\n         fs.delete(dir.path(repo, \"manifest-\"..luaver))\r\n      end\r\n   end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "function load_manifest(repo_url)\r\n   assert(type(repo_url) == \"string\")\r\n\r\n   if manif_core.manifest_cache[repo_url] then\r\n      return manif_core.manifest_cache[repo_url]\r\n   end\r\n   \r\n   local filenames = {\r\n      \"manifest-\"..cfg.lua_version..\".zip\",\r\n      \"manifest-\"..cfg.lua_version,\r\n      \"manifest\",\r\n   }\r\n\r\n   local protocol, repodir = dir.split_url(repo_url)\r\n   local pathname\r\n   if protocol == \"file\" then\r\n      for _, filename in ipairs(filenames) do\r\n         pathname = dir.path(repodir, filename)\r\n         if fs.exists(pathname) then\r\n            break\r\n         end\r\n      end\r\n   else\r\n      local err\r\n      for _, filename in ipairs(filenames) do\r\n         pathname, err = fetch_manifest_from(repo_url, filename)\r\n         if pathname then\r\n            break\r\n         end\r\n      end\r\n      if not pathname then \r\n         return nil, err\r\n      end\r\n   end\r\n   if pathname:match(\".*%.zip$\") then\r\n      pathname = fs.absolute_name(pathname)\r\n      local dir = dir.dir_name(pathname)\r\n      fs.change_dir(dir)\r\n      local nozip = pathname:match(\"(.*)%.zip$\")\r\n      fs.delete(nozip)\r\n      local ok = fs.unzip(pathname)\r\n      fs.pop_dir()\r\n      if not ok then\r\n         fs.delete(pathname)\r\n         fs.delete(pathname..\".timestamp\")\r\n         return nil, \"Failed extracting manifest file\"\r\n      end\r\n      pathname = nozip\r\n   end\r\n   return manif_core.manifest_loader(pathname, repo_url)\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "function load_into_table(filename, tbl)\r\n   assert(type(filename) == \"string\")\r\n   assert(type(tbl) == \"table\" or not tbl)\r\n\r\n   local result, chunk, ran, err\r\n   local result = tbl or {}\r\n   if _VERSION == \"Lua 5.1\" then -- Lua 5.1\r\n      chunk, err = loadfile(filename)\r\n      if chunk then\r\n         setfenv(chunk, result)\r\n         ran, err = pcall(chunk)\r\n      end\r\n   else -- Lua 5.2\r\n      chunk, err = loadfile(filename, \"t\", result)\r\n      if chunk then\r\n         ran, err = pcall(chunk)\r\n      end\r\n   end\r\n   \r\n   if not chunk then\r\n      if err:sub(1,5) ~= filename:sub(1,5) then\r\n         return false, err\r\n      end\r\n      return nil, \"Error loading file: \"..err\r\n   end\r\n   if not ran then\r\n      return nil, \"Error running file: \"..err\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "function sortedpairs(tbl, sort_function)\r\n   return coroutine.wrap(function() sortedpairs_iterator(tbl, sort_function) end)\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "function lua_versions()\r\n   local versions = { \"5.1\", \"5.2\" }\r\n   local i = 0\r\n   return function()\r\n      i = i + 1\r\n      return versions[i]\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 70,
    "text": "module",
    "type": "global function"
  }, {
    "id": 71,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 72,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 73,
    "text": "open",
    "type": "global function"
  }, {
    "id": 74,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 75,
    "text": "require",
    "type": "global function"
  }, {
    "id": 76,
    "text": "util)",
    "type": "module"
  }, {
    "id": 77,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 78,
    "text": "manif)",
    "type": "module"
  }, {
    "id": 79,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 80,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 81,
    "text": "persist)",
    "type": "module"
  }, {
    "id": 82,
    "text": "",
    "type": "variable container"
  }, {
    "id": 83,
    "text": "",
    "type": "require container"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "string"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "string"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "string"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "string"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "string"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "string"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "string"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "require local variable"
  } ]
}