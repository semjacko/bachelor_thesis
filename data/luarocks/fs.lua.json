{
  "_filename": "fs.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/fs.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 21,
    "label": "has",
    "to": 11
  }, {
    "from": 21,
    "label": "has",
    "to": 12
  }, {
    "from": 21,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "calls",
    "to": 33
  }, {
    "from": 28,
    "label": "calls",
    "to": 37
  }, {
    "from": 28,
    "label": "calls",
    "to": 31
  }, {
    "from": 28,
    "label": "calls",
    "to": 31
  }, {
    "from": 23,
    "label": "calls",
    "to": 34
  }, {
    "from": 28,
    "label": "calls",
    "to": 35
  }, {
    "from": 28,
    "label": "calls",
    "to": 35
  }, {
    "from": 28,
    "label": "calls",
    "to": 35
  }, {
    "from": 28,
    "label": "calls",
    "to": 35
  }, {
    "from": 28,
    "label": "calls",
    "to": 35
  }, {
    "from": 28,
    "label": "calls",
    "to": 29
  }, {
    "from": 28,
    "label": "calls",
    "to": 29
  }, {
    "from": 28,
    "label": "calls",
    "to": 29
  }, {
    "from": 28,
    "label": "calls",
    "to": 39
  }, {
    "from": 28,
    "label": "calls",
    "to": 23
  }, {
    "from": 28,
    "label": "calls",
    "to": 23
  }, {
    "from": 28,
    "label": "calls",
    "to": 23
  }, {
    "from": 28,
    "label": "calls",
    "to": 32
  }, {
    "from": 28,
    "label": "calls",
    "to": 16
  }, {
    "from": 28,
    "label": "calls",
    "to": 36
  }, {
    "from": 28,
    "label": "calls",
    "to": 38
  }, {
    "from": 28,
    "label": "calls",
    "to": 40
  }, {
    "from": 28,
    "label": "calls",
    "to": 40
  }, {
    "from": 28,
    "label": "calls",
    "to": 30
  }, {
    "from": 28,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 28,
    "label": "declares",
    "to": 2
  }, {
    "from": 28,
    "label": "declares",
    "to": 4
  }, {
    "from": 28,
    "label": "declares",
    "to": 9
  }, {
    "from": 28,
    "label": "declares",
    "to": 16
  }, {
    "from": 28,
    "label": "declares",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 42,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 42,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 42,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 42,
    "label": "initializes",
    "to": 50
  }, {
    "from": 42,
    "label": "initializes",
    "to": 51
  }, {
    "from": 42,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 42,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 42,
    "label": "initializes",
    "to": 56
  }, {
    "from": 42,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 43,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "requires",
    "to": 41
  }, {
    "from": 43,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 61
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "fs",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(...) return { n = select(\"#\", ...), ... } end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "function(one, two)\r\n    if two == nil then\r\n      print(\"\\nio.popen: \", one)\r\n    else\r\n      print(\"\\nio.popen: \", one, \"Mode:\", two)\r\n    end\r\n    return old_popen(one, two)\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "if two == nil then\r\n      print(\"\\nio.popen: \", one)\r\n    else\r\n      print(\"\\nio.popen: \", one, \"Mode:\", two)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "print(\"\\nio.popen: \", one)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "print(\"\\nio.popen: \", one, \"Mode:\", two)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function(cmd)\r\n    print(\"\\nos.execute: \", cmd)\r\n    local code = pack(old_exec(cmd))\r\n    print(\"Results: \"..tostring(code.n))\r\n    for i = 1,code.n do\r\n      print(\"  \"..tostring(i)..\" (\"..type(code[i])..\"): \"..tostring(code[i]))\r\n    end\r\n    return unpack(code, 1, code.n)    \r\n  end",
    "type": "function"
  }, {
    "id": 10,
    "text": "print(\"\\nos.execute: \", cmd)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "local code = pack(old_exec(cmd))",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "print(\"Results: \"..tostring(code.n))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "for i = 1,code.n do\r\n      print(\"  \"..tostring(i)..\" (\"..type(code[i])..\"): \"..tostring(code[i]))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 14,
    "text": "print(\"  \"..tostring(i)..\" (\"..type(code[i])..\"): \"..tostring(code[i]))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function()    -- patch io.popen and os.execute to display commands in verbose mode\r\n  if old_popen or old_exec then return end\r\n  old_popen = io.popen\r\n  io.popen = function(one, two)\r\n    if two == nil then\r\n      print(\"\\nio.popen: \", one)\r\n    else\r\n      print(\"\\nio.popen: \", one, \"Mode:\", two)\r\n    end\r\n    return old_popen(one, two)\r\n  end\r\n  \r\n  old_exec = os.execute\r\n  os.execute = function(cmd)\r\n    print(\"\\nos.execute: \", cmd)\r\n    local code = pack(old_exec(cmd))\r\n    print(\"Results: \"..tostring(code.n))\r\n    for i = 1,code.n do\r\n      print(\"  \"..tostring(i)..\" (\"..type(code[i])..\"): \"..tostring(code[i]))\r\n    end\r\n    return unpack(code, 1, code.n)    \r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "if old_popen or old_exec then return end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "old_popen = io.popen",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "io.popen = function(one, two)\r\n    if two == nil then\r\n      print(\"\\nio.popen: \", one)\r\n    else\r\n      print(\"\\nio.popen: \", one, \"Mode:\", two)\r\n    end\r\n    return old_popen(one, two)\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "old_exec = os.execute",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "os.execute = function(cmd)\r\n    print(\"\\nos.execute: \", cmd)\r\n    local code = pack(old_exec(cmd))\r\n    print(\"Results: \"..tostring(code.n))\r\n    for i = 1,code.n do\r\n      print(\"  \"..tostring(i)..\" (\"..type(code[i])..\"): \"..tostring(code[i]))\r\n    end\r\n    return unpack(code, 1, code.n)    \r\n  end",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function load_fns(fs_table)\r\n   for name, fn in pairs(fs_table) do\r\n      if not _M[name] then\r\n         _M[name] = fn\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "for name, fn in pairs(fs_table) do\r\n      if not _M[name] then\r\n         _M[name] = fn\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "if not _M[name] then\r\n         _M[name] = fn\r\n      end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "_M[name] = fn",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "",
    "type": "function container"
  }, {
    "id": 29,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 30,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 31,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 32,
    "text": "module",
    "type": "global function"
  }, {
    "id": 33,
    "text": "old_popen",
    "type": "global function"
  }, {
    "id": 34,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 35,
    "text": "print",
    "type": "global function"
  }, {
    "id": 36,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 37,
    "text": "old_exec",
    "type": "global function"
  }, {
    "id": 38,
    "text": "type",
    "type": "global function"
  }, {
    "id": 39,
    "text": "select",
    "type": "global function"
  }, {
    "id": 40,
    "text": "require",
    "type": "global function"
  }, {
    "id": 41,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "keyword"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 61,
    "text": "lua)",
    "type": "module"
  } ]
}