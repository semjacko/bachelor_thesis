{
  "_filename": "loader.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/loader.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 14
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 14
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 17,
    "label": "has",
    "to": 14
  }, {
    "from": 17,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 14
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 14
  }, {
    "from": 39,
    "label": "has",
    "to": 14
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 20
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 21
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 49,
    "label": "has",
    "to": 56
  }, {
    "from": 49,
    "label": "has",
    "to": 57
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 14
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 14
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 14
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 14
  }, {
    "from": 70,
    "label": "has",
    "to": 14
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 75,
    "label": "has",
    "to": 65
  }, {
    "from": 75,
    "label": "has",
    "to": 14
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 4,
    "label": "calls",
    "to": 78
  }, {
    "from": 39,
    "label": "calls",
    "to": 86
  }, {
    "from": 17,
    "label": "calls",
    "to": 87
  }, {
    "from": 62,
    "label": "calls",
    "to": 80
  }, {
    "from": 45,
    "label": "calls",
    "to": 82
  }, {
    "from": 45,
    "label": "calls",
    "to": 82
  }, {
    "from": 45,
    "label": "calls",
    "to": 82
  }, {
    "from": 45,
    "label": "calls",
    "to": 88
  }, {
    "from": 17,
    "label": "calls",
    "to": 2
  }, {
    "from": 45,
    "label": "calls",
    "to": 2
  }, {
    "from": 45,
    "label": "calls",
    "to": 90
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 45,
    "label": "calls",
    "to": 92
  }, {
    "from": 4,
    "label": "calls",
    "to": 83
  }, {
    "from": 17,
    "label": "calls",
    "to": 83
  }, {
    "from": 17,
    "label": "calls",
    "to": 83
  }, {
    "from": 17,
    "label": "calls",
    "to": 83
  }, {
    "from": 39,
    "label": "calls",
    "to": 83
  }, {
    "from": 45,
    "label": "calls",
    "to": 83
  }, {
    "from": 45,
    "label": "calls",
    "to": 83
  }, {
    "from": 70,
    "label": "calls",
    "to": 62
  }, {
    "from": 4,
    "label": "calls",
    "to": 85
  }, {
    "from": 45,
    "label": "calls",
    "to": 85
  }, {
    "from": 77,
    "label": "calls",
    "to": 85
  }, {
    "from": 45,
    "label": "calls",
    "to": 93
  }, {
    "from": 70,
    "label": "calls",
    "to": 39
  }, {
    "from": 45,
    "label": "calls",
    "to": 89
  }, {
    "from": 17,
    "label": "calls",
    "to": 4
  }, {
    "from": 45,
    "label": "calls",
    "to": 4
  }, {
    "from": 77,
    "label": "calls",
    "to": 84
  }, {
    "from": 4,
    "label": "calls",
    "to": 79
  }, {
    "from": 62,
    "label": "calls",
    "to": 81
  }, {
    "from": 39,
    "label": "calls",
    "to": 91
  }, {
    "from": 77,
    "label": "calls",
    "to": 94
  }, {
    "from": 77,
    "label": "calls",
    "to": 94
  }, {
    "from": 77,
    "label": "calls",
    "to": 94
  }, {
    "from": 77,
    "label": "calls",
    "to": 94
  }, {
    "from": 62,
    "label": "calls",
    "to": 45
  }, {
    "from": 67,
    "label": "calls",
    "to": 45
  }, {
    "from": 17,
    "label": "calls",
    "to": 17
  }, {
    "from": 70,
    "label": "calls",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 77,
    "label": "declares",
    "to": 4
  }, {
    "from": 77,
    "label": "declares",
    "to": 17
  }, {
    "from": 77,
    "label": "declares",
    "to": 37
  }, {
    "from": 77,
    "label": "declares",
    "to": 39
  }, {
    "from": 77,
    "label": "declares",
    "to": 45
  }, {
    "from": 77,
    "label": "declares",
    "to": 62
  }, {
    "from": 77,
    "label": "declares",
    "to": 67
  }, {
    "from": 77,
    "label": "declares",
    "to": 70
  }, {
    "from": 77,
    "label": "declares",
    "to": 75
  }, {
    "from": 1,
    "label": "contains",
    "to": 99
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 99,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 99,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 99,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 99,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 99,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 99,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 99,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 99,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 99,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 99,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 99,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 99,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 99,
    "label": "initializes",
    "to": 125
  }, {
    "from": 100,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "requires",
    "to": 96
  }, {
    "from": 100,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "requires",
    "to": 98
  }, {
    "from": 100,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "requires",
    "to": 97
  }, {
    "from": 100,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "requires",
    "to": 95
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "loader",
    "type": "module"
  }, {
    "id": 2,
    "text": "function parse_version(vstring)\r\n   if not vstring then return nil end\r\n   assert(type(vstring) == \"string\")\r\n\r\n   local cached = version_cache[vstring]\r\n   if cached then\r\n      return cached\r\n   end\r\n\r\n   local version = {}\r\n   local i = 1\r\n\r\n   local function add_token(number)\r\n      version[i] = version[i] and version[i] + number/100000 or number\r\n      i = i + 1\r\n   end\r\n   \r\n   -- trim leading and trailing spaces\r\n   vstring = vstring:match(\"^%s*(.*)%s*$\")\r\n   version.string = vstring\r\n   -- store revision separately if any\r\n   local main, revision = vstring:match(\"(.*)%-(%d+)$\")\r\n   if revision then\r\n      vstring = main\r\n      version.revision = tonumber(revision)\r\n   end\r\n   while #vstring > 0 do\r\n      -- extract a number\r\n      local token, rest = vstring:match(\"^(%d+)[%.%-%_]*(.*)\")\r\n      if token then\r\n         add_token(tonumber(token))\r\n      else\r\n         -- extract a word\r\n         token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")\r\n         if not token then\r\n            util.printerr(\"Warning: version number '\"..vstring..\"' could not be parsed.\")\r\n            version[i] = 0\r\n            break\r\n         end\r\n         local last = #version\r\n         version[i] = deltas[token] or (token:byte() / 1000)\r\n      end\r\n      vstring = rest\r\n   end\r\n   setmetatable(version, version_mt)\r\n   version_cache[vstring] = version\r\n   return version\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function match_constraints(version, constraints)\r\n   assert(type(version) == \"table\")\r\n   assert(type(constraints) == \"table\")\r\n   local ok = true\r\n   setmetatable(version, version_mt)\r\n   for _, constr in pairs(constraints) do\r\n      if type(constr.version) == \"string\" then\r\n         constr.version = parse_version(constr.version)\r\n      end\r\n      local constr_version, constr_op = constr.version, constr.op\r\n      setmetatable(constr_version, version_mt)\r\n      if     constr_op == \"==\" then ok = version == constr_version\r\n      elseif constr_op == \"~=\" then ok = version ~= constr_version\r\n      elseif constr_op == \">\"  then ok = version >  constr_version\r\n      elseif constr_op == \"<\"  then ok = version <  constr_version\r\n      elseif constr_op == \">=\" then ok = version >= constr_version\r\n      elseif constr_op == \"<=\" then ok = version <= constr_version\r\n      elseif constr_op == \"~>\" then ok = partial_match(version, constr_version)\r\n      end\r\n      if not ok then break end\r\n   end\r\n   return ok\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function load_rocks_trees() \r\n   local any_ok = false\r\n   local trees = {}\r\n   for _, tree in ipairs(cfg.rocks_trees) do\r\n      local manifest, err = manif_core.load_local_manifest(path.rocks_dir(tree))\r\n      if manifest then\r\n         any_ok = true\r\n         table.insert(trees, {tree=tree, manifest=manifest})\r\n      end\r\n   end\r\n   if not any_ok then\r\n      rocks_trees = false\r\n      return false\r\n   end\r\n   rocks_trees = trees\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local any_ok = false",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local trees = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for _, tree in ipairs(cfg.rocks_trees) do\r\n      local manifest, err = manif_core.load_local_manifest(path.rocks_dir(tree))\r\n      if manifest then\r\n         any_ok = true\r\n         table.insert(trees, {tree=tree, manifest=manifest})\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "local manifest, err = manif_core.load_local_manifest(path.rocks_dir(tree))",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if manifest then\r\n         any_ok = true\r\n         table.insert(trees, {tree=tree, manifest=manifest})\r\n      end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "any_ok = true",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "table.insert(trees, {tree=tree, manifest=manifest})",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "if not any_ok then\r\n      rocks_trees = false\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "rocks_trees = false",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "rocks_trees = trees",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function add_context(name, version)\r\n   -- assert(type(name) == \"string\")\r\n   -- assert(type(version) == \"string\")\r\n\r\n   if context[name] then\r\n      return\r\n   end\r\n   context[name] = version\r\n\r\n   if not rocks_trees and not load_rocks_trees() then\r\n      return nil\r\n   end\r\n\r\n   local providers = {}\r\n   for _, tree in ipairs(rocks_trees) do\r\n      local manifest = tree.manifest\r\n\r\n      local pkgdeps\r\n      if manifest.dependencies and manifest.dependencies[name] then\r\n         pkgdeps = manifest.dependencies[name][version]\r\n      end\r\n      if not pkgdeps then\r\n         return nil\r\n      end\r\n      for _, dep in ipairs(pkgdeps) do\r\n         local pkg, constraints = dep.name, dep.constraints\r\n   \r\n         for _, tree in ipairs(rocks_trees) do\r\n            local entries = tree.manifest.repository[pkg]\r\n            if entries then\r\n               for version, pkgs in pairs(entries) do\r\n                  if (not constraints) or deps.match_constraints(deps.parse_version(version), constraints) then\r\n                     add_context(pkg, version)\r\n                  end\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if context[name] then\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "context[name] = version",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if not rocks_trees and not load_rocks_trees() then\r\n      return nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "local providers = {}",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "for _, tree in ipairs(rocks_trees) do\r\n      local manifest = tree.manifest\r\n\r\n      local pkgdeps\r\n      if manifest.dependencies and manifest.dependencies[name] then\r\n         pkgdeps = manifest.dependencies[name][version]\r\n      end\r\n      if not pkgdeps then\r\n         return nil\r\n      end\r\n      for _, dep in ipairs(pkgdeps) do\r\n         local pkg, constraints = dep.name, dep.constraints\r\n   \r\n         for _, tree in ipairs(rocks_trees) do\r\n            local entries = tree.manifest.repository[pkg]\r\n            if entries then\r\n               for version, pkgs in pairs(entries) do\r\n                  if (not constraints) or deps.match_constraints(deps.parse_version(version), constraints) then\r\n                     add_context(pkg, version)\r\n                  end\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "local manifest = tree.manifest",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local pkgdeps",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if manifest.dependencies and manifest.dependencies[name] then\r\n         pkgdeps = manifest.dependencies[name][version]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "pkgdeps = manifest.dependencies[name][version]",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if not pkgdeps then\r\n         return nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "for _, dep in ipairs(pkgdeps) do\r\n         local pkg, constraints = dep.name, dep.constraints\r\n   \r\n         for _, tree in ipairs(rocks_trees) do\r\n            local entries = tree.manifest.repository[pkg]\r\n            if entries then\r\n               for version, pkgs in pairs(entries) do\r\n                  if (not constraints) or deps.match_constraints(deps.parse_version(version), constraints) then\r\n                     add_context(pkg, version)\r\n                  end\r\n               end\r\n            end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 29,
    "text": "local pkg, constraints = dep.name, dep.constraints",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for _, tree in ipairs(rocks_trees) do\r\n            local entries = tree.manifest.repository[pkg]\r\n            if entries then\r\n               for version, pkgs in pairs(entries) do\r\n                  if (not constraints) or deps.match_constraints(deps.parse_version(version), constraints) then\r\n                     add_context(pkg, version)\r\n                  end\r\n               end\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "local entries = tree.manifest.repository[pkg]",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if entries then\r\n               for version, pkgs in pairs(entries) do\r\n                  if (not constraints) or deps.match_constraints(deps.parse_version(version), constraints) then\r\n                     add_context(pkg, version)\r\n                  end\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "for version, pkgs in pairs(entries) do\r\n                  if (not constraints) or deps.match_constraints(deps.parse_version(version), constraints) then\r\n                     add_context(pkg, version)\r\n                  end\r\n               end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "if (not constraints) or deps.match_constraints(deps.parse_version(version), constraints) then\r\n                     add_context(pkg, version)\r\n                  end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "add_context(pkg, version)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function sort_versions(a,b)\r\n   return a.version > b.version\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function call_other_loaders(module, name, version, module_name)\r\n   for i, loader in ipairs(package.loaders) do\r\n      if loader ~= luarocks_loader then\r\n         local results = { loader(module_name) }\r\n         if type(results[1]) == \"function\" then\r\n            return unpack(results)\r\n         end\r\n      end\r\n   end\r\n   return \"Failed loading module \"..module..\" in LuaRocks rock \"..name..\" \"..version\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "for i, loader in ipairs(package.loaders) do\r\n      if loader ~= luarocks_loader then\r\n         local results = { loader(module_name) }\r\n         if type(results[1]) == \"function\" then\r\n            return unpack(results)\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "if loader ~= luarocks_loader then\r\n         local results = { loader(module_name) }\r\n         if type(results[1]) == \"function\" then\r\n            return unpack(results)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local results = { loader(module_name) }",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if type(results[1]) == \"function\" then\r\n            return unpack(results)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function select_module(module, filter_module_name)\r\n   --assert(type(module) == \"string\")\r\n   --assert(type(filter_module_name) == \"function\")\r\n\r\n   if not rocks_trees and not load_rocks_trees() then\r\n      return nil\r\n   end\r\n\r\n   local providers = {}\r\n   for _, tree in ipairs(rocks_trees) do\r\n      local entries = tree.manifest.modules[module]\r\n      if entries then\r\n         for i, entry in ipairs(entries) do\r\n            local name, version = entry:match(\"^([^/]*)/(.*)$\")\r\n            local module_name = tree.manifest.repository[name][version][1].modules[module]\r\n            if type(module_name) ~= \"string\" then\r\n               error(\"Invalid data in manifest file for module \"..tostring(module)..\" (invalid data for \"..tostring(name)..\" \"..tostring(version)..\")\")\r\n            end\r\n            module_name = filter_module_name(module_name, name, version, tree.tree, i)\r\n            if context[name] == version then\r\n               return name, version, module_name\r\n            end\r\n            version = deps.parse_version(version)\r\n            table.insert(providers, {name = name, version = version, module_name = module_name})\r\n         end\r\n      end\r\n   end\r\n\r\n   if next(providers) then\r\n      table.sort(providers, sort_versions)\r\n      local first = providers[1]\r\n      return first.name, first.version.string, first.module_name\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "for _, tree in ipairs(rocks_trees) do\r\n      local entries = tree.manifest.modules[module]\r\n      if entries then\r\n         for i, entry in ipairs(entries) do\r\n            local name, version = entry:match(\"^([^/]*)/(.*)$\")\r\n            local module_name = tree.manifest.repository[name][version][1].modules[module]\r\n            if type(module_name) ~= \"string\" then\r\n               error(\"Invalid data in manifest file for module \"..tostring(module)..\" (invalid data for \"..tostring(name)..\" \"..tostring(version)..\")\")\r\n            end\r\n            module_name = filter_module_name(module_name, name, version, tree.tree, i)\r\n            if context[name] == version then\r\n               return name, version, module_name\r\n            end\r\n            version = deps.parse_version(version)\r\n            table.insert(providers, {name = name, version = version, module_name = module_name})\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "local entries = tree.manifest.modules[module]",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if entries then\r\n         for i, entry in ipairs(entries) do\r\n            local name, version = entry:match(\"^([^/]*)/(.*)$\")\r\n            local module_name = tree.manifest.repository[name][version][1].modules[module]\r\n            if type(module_name) ~= \"string\" then\r\n               error(\"Invalid data in manifest file for module \"..tostring(module)..\" (invalid data for \"..tostring(name)..\" \"..tostring(version)..\")\")\r\n            end\r\n            module_name = filter_module_name(module_name, name, version, tree.tree, i)\r\n            if context[name] == version then\r\n               return name, version, module_name\r\n            end\r\n            version = deps.parse_version(version)\r\n            table.insert(providers, {name = name, version = version, module_name = module_name})\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "for i, entry in ipairs(entries) do\r\n            local name, version = entry:match(\"^([^/]*)/(.*)$\")\r\n            local module_name = tree.manifest.repository[name][version][1].modules[module]\r\n            if type(module_name) ~= \"string\" then\r\n               error(\"Invalid data in manifest file for module \"..tostring(module)..\" (invalid data for \"..tostring(name)..\" \"..tostring(version)..\")\")\r\n            end\r\n            module_name = filter_module_name(module_name, name, version, tree.tree, i)\r\n            if context[name] == version then\r\n               return name, version, module_name\r\n            end\r\n            version = deps.parse_version(version)\r\n            table.insert(providers, {name = name, version = version, module_name = module_name})\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 50,
    "text": "local name, version = entry:match(\"^([^/]*)/(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local module_name = tree.manifest.repository[name][version][1].modules[module]",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if type(module_name) ~= \"string\" then\r\n               error(\"Invalid data in manifest file for module \"..tostring(module)..\" (invalid data for \"..tostring(name)..\" \"..tostring(version)..\")\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "error(\"Invalid data in manifest file for module \"..tostring(module)..\" (invalid data for \"..tostring(name)..\" \"..tostring(version)..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "module_name = filter_module_name(module_name, name, version, tree.tree, i)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if context[name] == version then\r\n               return name, version, module_name\r\n            end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "version = deps.parse_version(version)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "table.insert(providers, {name = name, version = version, module_name = module_name})",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "if next(providers) then\r\n      table.sort(providers, sort_versions)\r\n      local first = providers[1]\r\n      return first.name, first.version.string, first.module_name\r\n   end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "table.sort(providers, sort_versions)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local first = providers[1]",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "local function pick_module(module)\r\n   return\r\n      select_module(module, function(module_name, name, version, tree, i)\r\n         if i > 1 then\r\n            module_name = path.versioned_name(module_name, \"\", name, version)\r\n         end\r\n         module_name = path.path_to_module(module_name)\r\n         return module_name\r\n      end)\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "if i > 1 then\r\n            module_name = path.versioned_name(module_name, \"\", name, version)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "module_name = path.versioned_name(module_name, \"\", name, version)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "module_name = path.path_to_module(module_name)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function which(module)\r\n   local name, version, module_name = select_module(module, path.which_i)\r\n   return module_name\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "local name, version, module_name = select_module(module, path.which_i)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function luarocks_loader(module)\r\n   local name, version, module_name = pick_module(module)\r\n   if not name then\r\n      return \"No LuaRocks module found for \"..module\r\n   else\r\n      add_context(name, version)\r\n      return call_other_loaders(module, name, version, module_name)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local name, version, module_name = pick_module(module)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if not name then\r\n      return \"No LuaRocks module found for \"..module\r\n   else\r\n      add_context(name, version)\r\n      return call_other_loaders(module, name, version, module_name)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "add_context(name, version)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function(module_name, name, version, tree, i)\r\n         if i > 1 then\r\n            module_name = path.versioned_name(module_name, \"\", name, version)\r\n         end\r\n         module_name = path.path_to_module(module_name)\r\n         return module_name\r\n      end",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "",
    "type": "function container"
  }, {
    "id": 78,
    "text": "function load_local_manifest(repo_url)\r\n   assert(type(repo_url) == \"string\")\r\n\r\n   if manifest_cache[repo_url] then\r\n      return manifest_cache[repo_url]\r\n   end\r\n\r\n   local pathname = dir.path(repo_url, \"manifest\")\r\n\r\n   return manifest_loader(pathname, repo_url, true)\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "function rocks_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.rocks_subdir)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.rocks_dir or dir.path(tree.root, cfg.rocks_subdir)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "function path_to_module(file)\r\n   assert(type(file) == \"string\")\r\n\r\n   local name = file:match(\"(.*)%.\"..cfg.lua_extension..\"$\")\r\n   if name then\r\n      name = name:gsub(dir.separator, \".\")\r\n      local init = name:match(\"(.*)%.init$\")\r\n      if init then\r\n         name = init\r\n      end\r\n   else\r\n      name = file:match(\"(.*)%.\"..cfg.lib_extension..\"$\")\r\n      if name then\r\n         name = name:gsub(dir.separator, \".\")\r\n      end\r\n   end\r\n   if not name then name = file end\r\n   name = name:gsub(\"^%.+\", \"\"):gsub(\"%.+$\", \"\")\r\n   return name\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "function versioned_name(file, prefix, name, version)\r\n   assert(type(file) == \"string\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local rest = file:sub(#prefix+1):gsub(\"^/*\", \"\")\r\n   local name_version = (name..\"_\"..version):gsub(\"%-\", \"_\"):gsub(\"%.\", \"_\")\r\n   return dir.path(prefix, name_version..\"-\"..rest)\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 83,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 84,
    "text": "module",
    "type": "global function"
  }, {
    "id": 85,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 86,
    "text": "loader",
    "type": "global function"
  }, {
    "id": 87,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 88,
    "text": "error",
    "type": "global function"
  }, {
    "id": 89,
    "text": "filter_module_name",
    "type": "global function"
  }, {
    "id": 90,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 91,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 92,
    "text": "type",
    "type": "global function"
  }, {
    "id": 93,
    "text": "next",
    "type": "global function"
  }, {
    "id": 94,
    "text": "require",
    "type": "global function"
  }, {
    "id": 95,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 96,
    "text": "path)",
    "type": "module"
  }, {
    "id": 97,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 98,
    "text": "manif_core)",
    "type": "module"
  }, {
    "id": 99,
    "text": "",
    "type": "variable container"
  }, {
    "id": 100,
    "text": "",
    "type": "require container"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "n/a"
  }, {
    "id": 123,
    "text": "",
    "type": "global variable"
  }, {
    "id": 124,
    "text": "",
    "type": "n/a"
  }, {
    "id": 125,
    "text": "",
    "type": "global variable"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  } ]
}