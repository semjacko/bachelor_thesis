{
  "_filename": "doc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/doc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 18
  }, {
    "from": 4,
    "label": "has",
    "to": 19
  }, {
    "from": 4,
    "label": "has",
    "to": 20
  }, {
    "from": 4,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 4,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 17
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 28
  }, {
    "from": 4,
    "label": "has",
    "to": 29
  }, {
    "from": 4,
    "label": "has",
    "to": 30
  }, {
    "from": 4,
    "label": "has",
    "to": 31
  }, {
    "from": 4,
    "label": "has",
    "to": 32
  }, {
    "from": 4,
    "label": "has",
    "to": 33
  }, {
    "from": 4,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 4,
    "label": "has",
    "to": 42
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 44,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 59
  }, {
    "from": 4,
    "label": "calls",
    "to": 65
  }, {
    "from": 4,
    "label": "calls",
    "to": 64
  }, {
    "from": 4,
    "label": "calls",
    "to": 67
  }, {
    "from": 4,
    "label": "calls",
    "to": 74
  }, {
    "from": 4,
    "label": "calls",
    "to": 2
  }, {
    "from": 4,
    "label": "calls",
    "to": 2
  }, {
    "from": 4,
    "label": "calls",
    "to": 61
  }, {
    "from": 4,
    "label": "calls",
    "to": 62
  }, {
    "from": 4,
    "label": "calls",
    "to": 69
  }, {
    "from": 4,
    "label": "calls",
    "to": 70
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 71
  }, {
    "from": 4,
    "label": "calls",
    "to": 71
  }, {
    "from": 4,
    "label": "calls",
    "to": 71
  }, {
    "from": 60,
    "label": "calls",
    "to": 73
  }, {
    "from": 4,
    "label": "calls",
    "to": 63
  }, {
    "from": 4,
    "label": "calls",
    "to": 72
  }, {
    "from": 4,
    "label": "calls",
    "to": 72
  }, {
    "from": 4,
    "label": "calls",
    "to": 72
  }, {
    "from": 4,
    "label": "calls",
    "to": 72
  }, {
    "from": 4,
    "label": "calls",
    "to": 72
  }, {
    "from": 4,
    "label": "calls",
    "to": 72
  }, {
    "from": 60,
    "label": "calls",
    "to": 75
  }, {
    "from": 60,
    "label": "calls",
    "to": 75
  }, {
    "from": 60,
    "label": "calls",
    "to": 75
  }, {
    "from": 60,
    "label": "calls",
    "to": 75
  }, {
    "from": 60,
    "label": "calls",
    "to": 75
  }, {
    "from": 60,
    "label": "calls",
    "to": 75
  }, {
    "from": 4,
    "label": "calls",
    "to": 3
  }, {
    "from": 4,
    "label": "calls",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 60,
    "label": "declares",
    "to": 4
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 81,
    "label": "initializes",
    "to": 83
  }, {
    "from": 81,
    "label": "initializes",
    "to": 84
  }, {
    "from": 82,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 76
  }, {
    "from": 82,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "requires",
    "to": 87
  }, {
    "from": 82,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "requires",
    "to": 80
  }, {
    "from": 82,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "requires",
    "to": 78
  }, {
    "from": 82,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "requires",
    "to": 77
  }, {
    "from": 82,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 79
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "doc",
    "type": "module"
  }, {
    "id": 2,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function normalize(name)\r\n   local protocol, pathname = split_url(name)\r\n   pathname = pathname:gsub(\"\\\\\", \"/\"):gsub(\"(.)/*$\", \"%1\"):gsub(\"//\", \"/\")\r\n   if protocol ~= \"file\" then pathname = protocol ..\"://\"..pathname end\r\n   return pathname\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if not name then\r\n      return nil, \"Argument missing. \"..util.see_help(\"doc\")\r\n   end\r\n\r\n   local repo\r\n   name, version, repo = show.pick_installed_rock(name, version, flags[\"tree\"])\r\n   if not name then\r\n      return nil, version\r\n   end\r\n   \r\n   local rockspec, err = fetch.load_local_rockspec(path.rockspec_file(name, version, repo))\r\n   if not rockspec then return nil,err end\r\n   local descript = rockspec.description or {}\r\n\r\n   if flags[\"homepage\"] then\r\n      if not descript.homepage then\r\n         return nil, \"No 'homepage' field in rockspec for \"..name..\" \"..version\r\n      end\r\n      util.printout(\"Opening \"..descript.homepage..\" ...\")\r\n      fs.browser(descript.homepage)\r\n      return true\r\n   end\r\n\r\n   local directory = path.install_dir(name,version,repo)\r\n   \r\n   local docdir\r\n   local directories = { \"doc\", \"docs\" }\r\n   for _, d in ipairs(directories) do\r\n      local dirname = dir.path(directory, d)\r\n      if fs.is_dir(dirname) then\r\n         docdir = dirname\r\n         break\r\n      end\r\n   end\r\n   if not docdir then\r\n      if descript.homepage and not flags[\"list\"] then\r\n         util.printout(\"Local documentation directory not found -- opening \"..descript.homepage..\" ...\")\r\n         fs.browser(descript.homepage)\r\n         return true\r\n      end\r\n      return nil, \"Documentation directory not found for \"..name..\" \"..version\r\n   end\r\n\r\n   docdir = dir.normalize(docdir):gsub(\"/+\", \"/\")\r\n   local files = fs.find(docdir)\r\n   local htmlpatt = \"%.html?$\"\r\n   local extensions = { htmlpatt, \"%.md$\", \"%.txt$\",  \"%.textile$\", \"\" }\r\n   local basenames = { \"index\", \"readme\", \"manual\" }\r\n   \r\n   local porcelain = flags[\"porcelain\"]\r\n   if #files > 0 then\r\n      util.title(\"Documentation files for \"..name..\" \"..version, porcelain)\r\n      if porcelain then\r\n         for _, file in ipairs(files) do\r\n            util.printout(docdir..\"/\"..file)\r\n         end\r\n      else\r\n         util.printout(docdir..\"/\")\r\n         for _, file in ipairs(files) do\r\n            util.printout(\"\\t\"..file)\r\n         end\r\n      end\r\n   end\r\n   \r\n   if flags[\"list\"] then\r\n      return true\r\n   end\r\n   \r\n   for _, extension in ipairs(extensions) do\r\n      for _, basename in ipairs(basenames) do\r\n         local filename = basename..extension\r\n         local found\r\n         for _, file in ipairs(files) do\r\n            if file:lower():match(filename) and ((not found) or #file < #found) then\r\n               found = file\r\n            end\r\n         end\r\n         if found then\r\n            local pathname = dir.path(docdir, found)\r\n            util.printout()\r\n            util.printout(\"Opening \"..pathname..\" ...\")\r\n            util.printout()\r\n            local ok = fs.browser(pathname)\r\n            if not ok and not pathname:match(htmlpatt) then\r\n               local fd = io.open(pathname, \"r\")\r\n               util.printout(fd:read(\"*a\"))\r\n               fd:close()\r\n            end\r\n            return true\r\n         end\r\n      end\r\n   end\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local flags, name, version = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if not name then\r\n      return nil, \"Argument missing. \"..util.see_help(\"doc\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "local repo",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "name, version, repo = show.pick_installed_rock(name, version, flags[\"tree\"])",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "if not name then\r\n      return nil, version\r\n   end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "local rockspec, err = fetch.load_local_rockspec(path.rockspec_file(name, version, repo))",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not rockspec then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "local descript = rockspec.description or {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if flags[\"homepage\"] then\r\n      if not descript.homepage then\r\n         return nil, \"No 'homepage' field in rockspec for \"..name..\" \"..version\r\n      end\r\n      util.printout(\"Opening \"..descript.homepage..\" ...\")\r\n      fs.browser(descript.homepage)\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if not descript.homepage then\r\n         return nil, \"No 'homepage' field in rockspec for \"..name..\" \"..version\r\n      end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "util.printout(\"Opening \"..descript.homepage..\" ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "fs.browser(descript.homepage)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local directory = path.install_dir(name,version,repo)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local docdir",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local directories = { \"doc\", \"docs\" }",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "for _, d in ipairs(directories) do\r\n      local dirname = dir.path(directory, d)\r\n      if fs.is_dir(dirname) then\r\n         docdir = dirname\r\n         break\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 22,
    "text": "local dirname = dir.path(directory, d)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if fs.is_dir(dirname) then\r\n         docdir = dirname\r\n         break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "docdir = dirname",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if not docdir then\r\n      if descript.homepage and not flags[\"list\"] then\r\n         util.printout(\"Local documentation directory not found -- opening \"..descript.homepage..\" ...\")\r\n         fs.browser(descript.homepage)\r\n         return true\r\n      end\r\n      return nil, \"Documentation directory not found for \"..name..\" \"..version\r\n   end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if descript.homepage and not flags[\"list\"] then\r\n         util.printout(\"Local documentation directory not found -- opening \"..descript.homepage..\" ...\")\r\n         fs.browser(descript.homepage)\r\n         return true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "util.printout(\"Local documentation directory not found -- opening \"..descript.homepage..\" ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "docdir = dir.normalize(docdir):gsub(\"/+\", \"/\")",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local files = fs.find(docdir)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local htmlpatt = \"%.html?$\"",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local extensions = { htmlpatt, \"%.md$\", \"%.txt$\",  \"%.textile$\", \"\" }",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local basenames = { \"index\", \"readme\", \"manual\" }",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local porcelain = flags[\"porcelain\"]",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if #files > 0 then\r\n      util.title(\"Documentation files for \"..name..\" \"..version, porcelain)\r\n      if porcelain then\r\n         for _, file in ipairs(files) do\r\n            util.printout(docdir..\"/\"..file)\r\n         end\r\n      else\r\n         util.printout(docdir..\"/\")\r\n         for _, file in ipairs(files) do\r\n            util.printout(\"\\t\"..file)\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "util.title(\"Documentation files for \"..name..\" \"..version, porcelain)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if porcelain then\r\n         for _, file in ipairs(files) do\r\n            util.printout(docdir..\"/\"..file)\r\n         end\r\n      else\r\n         util.printout(docdir..\"/\")\r\n         for _, file in ipairs(files) do\r\n            util.printout(\"\\t\"..file)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "for _, file in ipairs(files) do\r\n            util.printout(docdir..\"/\"..file)\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "util.printout(docdir..\"/\"..file)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "util.printout(docdir..\"/\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "for _, file in ipairs(files) do\r\n            util.printout(\"\\t\"..file)\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "util.printout(\"\\t\"..file)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "if flags[\"list\"] then\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "for _, extension in ipairs(extensions) do\r\n      for _, basename in ipairs(basenames) do\r\n         local filename = basename..extension\r\n         local found\r\n         for _, file in ipairs(files) do\r\n            if file:lower():match(filename) and ((not found) or #file < #found) then\r\n               found = file\r\n            end\r\n         end\r\n         if found then\r\n            local pathname = dir.path(docdir, found)\r\n            util.printout()\r\n            util.printout(\"Opening \"..pathname..\" ...\")\r\n            util.printout()\r\n            local ok = fs.browser(pathname)\r\n            if not ok and not pathname:match(htmlpatt) then\r\n               local fd = io.open(pathname, \"r\")\r\n               util.printout(fd:read(\"*a\"))\r\n               fd:close()\r\n            end\r\n            return true\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "for _, basename in ipairs(basenames) do\r\n         local filename = basename..extension\r\n         local found\r\n         for _, file in ipairs(files) do\r\n            if file:lower():match(filename) and ((not found) or #file < #found) then\r\n               found = file\r\n            end\r\n         end\r\n         if found then\r\n            local pathname = dir.path(docdir, found)\r\n            util.printout()\r\n            util.printout(\"Opening \"..pathname..\" ...\")\r\n            util.printout()\r\n            local ok = fs.browser(pathname)\r\n            if not ok and not pathname:match(htmlpatt) then\r\n               local fd = io.open(pathname, \"r\")\r\n               util.printout(fd:read(\"*a\"))\r\n               fd:close()\r\n            end\r\n            return true\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "local filename = basename..extension",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local found",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "for _, file in ipairs(files) do\r\n            if file:lower():match(filename) and ((not found) or #file < #found) then\r\n               found = file\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "if file:lower():match(filename) and ((not found) or #file < #found) then\r\n               found = file\r\n            end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "found = file",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "if found then\r\n            local pathname = dir.path(docdir, found)\r\n            util.printout()\r\n            util.printout(\"Opening \"..pathname..\" ...\")\r\n            util.printout()\r\n            local ok = fs.browser(pathname)\r\n            if not ok and not pathname:match(htmlpatt) then\r\n               local fd = io.open(pathname, \"r\")\r\n               util.printout(fd:read(\"*a\"))\r\n               fd:close()\r\n            end\r\n            return true\r\n         end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "local pathname = dir.path(docdir, found)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "util.printout()",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "util.printout(\"Opening \"..pathname..\" ...\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "local ok = fs.browser(pathname)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if not ok and not pathname:match(htmlpatt) then\r\n               local fd = io.open(pathname, \"r\")\r\n               util.printout(fd:read(\"*a\"))\r\n               fd:close()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local fd = io.open(pathname, \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "util.printout(fd:read(\"*a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "fd:close()",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "",
    "type": "function container"
  }, {
    "id": 61,
    "text": "function load_local_rockspec(filename, quick)\r\n   assert(type(filename) == \"string\")\r\n   filename = fs.absolute_name(filename)\r\n   local rockspec, err = persist.load_into_table(filename)\r\n   if not rockspec then\r\n      return nil, \"Could not load rockspec file \"..filename..\" (\"..err..\")\"\r\n   end\r\n\r\n   local ok, err = true, nil\r\n   if not quick then\r\n      ok, err = type_check.type_check_rockspec(rockspec)\r\n      if not ok then\r\n         return nil, filename..\": \"..err\r\n      end\r\n   end\r\n   \r\n   if rockspec.rockspec_format then\r\n      if deps.compare_versions(rockspec.rockspec_format, type_check.rockspec_format) then\r\n         return nil, \"Rockspec format \"..rockspec.rockspec_format..\" is not supported, please upgrade LuaRocks.\"\r\n      end\r\n   end\r\n\r\n   util.platform_overrides(rockspec.build)\r\n   util.platform_overrides(rockspec.dependencies)\r\n   util.platform_overrides(rockspec.external_dependencies)\r\n   util.platform_overrides(rockspec.source)\r\n   util.platform_overrides(rockspec.hooks)\r\n\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      rockspec.name = rockspec.package:lower()\r\n   else\r\n      rockspec.name = basename:match(\"(.*)-[^-]*-[0-9]*\")\r\n      if not rockspec.name then\r\n         return nil, \"Expected filename in format 'name-version-revision.rockspec'.\"\r\n      end\r\n   end\r\n\r\n   local protocol, pathname = dir.split_url(rockspec.source.url)\r\n   if is_basic_protocol(protocol) then\r\n      rockspec.source.file = rockspec.source.file or dir.base_name(rockspec.source.url)\r\n   end\r\n   rockspec.source.protocol, rockspec.source.pathname = protocol, pathname\r\n\r\n   -- Temporary compatibility\r\n   if rockspec.source.cvs_module then rockspec.source.module = rockspec.source.cvs_module end\r\n   if rockspec.source.cvs_tag then rockspec.source.tag = rockspec.source.cvs_tag end\r\n\r\n   local name_version = rockspec.package:lower() .. \"-\" .. rockspec.version\r\n   if basename ~= \"rockspec\" and basename ~= name_version .. \".rockspec\" then\r\n      return nil, \"Inconsistency between rockspec filename (\"..basename..\") and its contents (\"..name_version..\".rockspec).\"\r\n   end\r\n\r\n   rockspec.local_filename = filename\r\n   local filebase = rockspec.source.file or rockspec.source.url\r\n   local base = url_to_base_dir(filebase)\r\n   rockspec.source.dir = rockspec.source.dir\r\n                      or rockspec.source.module\r\n                      or ((filebase:match(\".lua$\") or filebase:match(\".c$\")) and \".\")\r\n                      or base\r\n   if rockspec.dependencies then\r\n      for i = 1, #rockspec.dependencies do\r\n         local parsed, err = deps.parse_dep(rockspec.dependencies[i])\r\n         if not parsed then\r\n            return nil, \"Parse error processing dependency '\"..rockspec.dependencies[i]..\"': \"..tostring(err)\r\n         end\r\n         rockspec.dependencies[i] = parsed\r\n      end\r\n   else\r\n      rockspec.dependencies = {}\r\n   end\r\n   if not quick then\r\n      path.configure_paths(rockspec)\r\n   end\r\n\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "function find(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   at = dir.normalize(at)\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   recursive_find(at, \"\", result)\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "function install_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version)\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "function rockspec_file(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, name..\"-\"..version..\".rockspec\")\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "function pick_installed_rock(name, version, tree)\r\n   local results = {}\r\n   local query = search.make_query(name, version)\r\n   query.exact_name = true\r\n   local tree_map = {}\r\n   local trees = cfg.rocks_trees\r\n   if tree then\r\n      trees = { tree }\r\n   end\r\n   for _, tree in ipairs(trees) do\r\n      local rocks_dir = path.rocks_dir(tree)\r\n      tree_map[rocks_dir] = tree\r\n      search.manifest_search(results, rocks_dir, query)\r\n   end\r\n\r\n   if not next(results) then --\r\n      return nil,\"cannot find package \"..name..\" \"..(version or \"\")..\"\\nUse 'list' to find installed rocks.\"\r\n   end\r\n\r\n   version = nil\r\n   local repo_url\r\n   local package, versions = util.sortedpairs(results)()\r\n   --question: what do we do about multiple versions? This should\r\n   --give us the latest version on the last repo (which is usually the global one)\r\n   for vs, repositories in util.sortedpairs(versions, deps.compare_versions) do\r\n      if not version then version = vs end\r\n      for _, rp in ipairs(repositories) do repo_url = rp.repo end\r\n   end\r\n\r\n   local repo = tree_map[repo_url]\r\n   return name, version, repo, repo_url\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "function title(msg, porcelain, underline)\r\n   if porcelain then return end\r\n   printout()\r\n   printout(msg)\r\n   printout((underline or \"-\"):rep(#msg))\r\n   printout()\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "function see_help(command, program)\r\n   return \"See '\"..this_program(program or \"luarocks\")..' help '..command..\"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "browser",
    "type": "global function"
  }, {
    "id": 72,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 73,
    "text": "module",
    "type": "global function"
  }, {
    "id": 74,
    "text": "open",
    "type": "global function"
  }, {
    "id": 75,
    "text": "require",
    "type": "global function"
  }, {
    "id": 76,
    "text": "util)",
    "type": "module"
  }, {
    "id": 77,
    "text": "fetch)",
    "type": "module"
  }, {
    "id": 78,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 79,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 80,
    "text": "path)",
    "type": "module"
  }, {
    "id": 81,
    "text": "",
    "type": "variable container"
  }, {
    "id": 82,
    "text": "",
    "type": "require container"
  }, {
    "id": 83,
    "text": "",
    "type": "global variable"
  }, {
    "id": 84,
    "text": "",
    "type": "global variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 87,
    "text": "show)",
    "type": "module"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  } ]
}