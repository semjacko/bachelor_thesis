{
  "_filename": "zip.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/tools/zip.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 27
  }, {
    "from": 14,
    "label": "has",
    "to": 28
  }, {
    "from": 14,
    "label": "has",
    "to": 29
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 12
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 31,
    "label": "has",
    "to": 12
  }, {
    "from": 31,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 32
  }, {
    "from": 40,
    "label": "has",
    "to": 12
  }, {
    "from": 40,
    "label": "has",
    "to": 33
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 40,
    "label": "has",
    "to": 52
  }, {
    "from": 40,
    "label": "has",
    "to": 53
  }, {
    "from": 40,
    "label": "has",
    "to": 54
  }, {
    "from": 40,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 40,
    "label": "has",
    "to": 57
  }, {
    "from": 40,
    "label": "has",
    "to": 58
  }, {
    "from": 40,
    "label": "has",
    "to": 12
  }, {
    "from": 40,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 60,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 67
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 60,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 60,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 75
  }, {
    "from": 60,
    "label": "has",
    "to": 12
  }, {
    "from": 60,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 41
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 44
  }, {
    "from": 85,
    "label": "has",
    "to": 45
  }, {
    "from": 85,
    "label": "has",
    "to": 46
  }, {
    "from": 85,
    "label": "has",
    "to": 47
  }, {
    "from": 85,
    "label": "has",
    "to": 48
  }, {
    "from": 85,
    "label": "has",
    "to": 49
  }, {
    "from": 85,
    "label": "has",
    "to": 50
  }, {
    "from": 85,
    "label": "has",
    "to": 51
  }, {
    "from": 85,
    "label": "has",
    "to": 52
  }, {
    "from": 85,
    "label": "has",
    "to": 53
  }, {
    "from": 85,
    "label": "has",
    "to": 45
  }, {
    "from": 85,
    "label": "has",
    "to": 45
  }, {
    "from": 85,
    "label": "has",
    "to": 45
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 54
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 45
  }, {
    "from": 82,
    "label": "has",
    "to": 45
  }, {
    "from": 82,
    "label": "has",
    "to": 92
  }, {
    "from": 82,
    "label": "has",
    "to": 92
  }, {
    "from": 82,
    "label": "has",
    "to": 93
  }, {
    "from": 82,
    "label": "has",
    "to": 94
  }, {
    "from": 82,
    "label": "has",
    "to": 45
  }, {
    "from": 82,
    "label": "has",
    "to": 95
  }, {
    "from": 82,
    "label": "has",
    "to": 12
  }, {
    "from": 82,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 12
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 97,
    "label": "has",
    "to": 105
  }, {
    "from": 97,
    "label": "has",
    "to": 106
  }, {
    "from": 97,
    "label": "has",
    "to": 107
  }, {
    "from": 97,
    "label": "has",
    "to": 12
  }, {
    "from": 97,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 12
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 114,
    "label": "has",
    "to": 119
  }, {
    "from": 109,
    "label": "has",
    "to": 121
  }, {
    "from": 109,
    "label": "has",
    "to": 122
  }, {
    "from": 109,
    "label": "has",
    "to": 12
  }, {
    "from": 109,
    "label": "has",
    "to": 12
  }, {
    "from": 109,
    "label": "has",
    "to": 123
  }, {
    "from": 6,
    "label": "calls",
    "to": 131
  }, {
    "from": 109,
    "label": "calls",
    "to": 4
  }, {
    "from": 109,
    "label": "calls",
    "to": 133
  }, {
    "from": 109,
    "label": "calls",
    "to": 133
  }, {
    "from": 60,
    "label": "calls",
    "to": 134
  }, {
    "from": 97,
    "label": "calls",
    "to": 134
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 3
  }, {
    "from": 40,
    "label": "calls",
    "to": 128
  }, {
    "from": 82,
    "label": "calls",
    "to": 128
  }, {
    "from": 6,
    "label": "calls",
    "to": 130
  }, {
    "from": 31,
    "label": "calls",
    "to": 130
  }, {
    "from": 40,
    "label": "calls",
    "to": 130
  }, {
    "from": 109,
    "label": "calls",
    "to": 5
  }, {
    "from": 124,
    "label": "calls",
    "to": 135
  }, {
    "from": 124,
    "label": "calls",
    "to": 135
  }, {
    "from": 124,
    "label": "calls",
    "to": 135
  }, {
    "from": 109,
    "label": "calls",
    "to": 97
  }, {
    "from": 6,
    "label": "calls",
    "to": 132
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 6
  }, {
    "from": 124,
    "label": "calls",
    "to": 129
  }, {
    "from": 31,
    "label": "calls",
    "to": 126
  }, {
    "from": 31,
    "label": "calls",
    "to": 127
  }, {
    "from": 60,
    "label": "calls",
    "to": 125
  }, {
    "from": 97,
    "label": "calls",
    "to": 125
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 124,
    "label": "declares",
    "to": 6
  }, {
    "from": 124,
    "label": "declares",
    "to": 14
  }, {
    "from": 124,
    "label": "declares",
    "to": 31
  }, {
    "from": 124,
    "label": "declares",
    "to": 40
  }, {
    "from": 124,
    "label": "declares",
    "to": 60
  }, {
    "from": 124,
    "label": "declares",
    "to": 82
  }, {
    "from": 124,
    "label": "declares",
    "to": 97
  }, {
    "from": 124,
    "label": "declares",
    "to": 109
  }, {
    "from": 1,
    "label": "contains",
    "to": 138
  }, {
    "from": 1,
    "label": "contains",
    "to": 139
  }, {
    "from": 139,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "requires",
    "to": 141
  }, {
    "from": 139,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "requires",
    "to": 137
  }, {
    "from": 139,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "requires",
    "to": 136
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "zip",
    "type": "module"
  }, {
    "id": 2,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function find(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   at = dir.normalize(at)\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   recursive_find(at, \"\", result)\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function is_file(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"file\"\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function number_to_bytestring(number, nbytes)\r\n   local out = {}\r\n   for i = 1, nbytes do\r\n      local byte = number % 256\r\n      table.insert(out, string.char(byte))\r\n      number = (number - byte) / 256\r\n   end\r\n   return table.concat(out)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for i = 1, nbytes do\r\n      local byte = number % 256\r\n      table.insert(out, string.char(byte))\r\n      number = (number - byte) / 256\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 9,
    "text": "local byte = number % 256",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "table.insert(out, string.char(byte))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "number = (number - byte) / 256",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function zipwriter_open_new_file_in_zip(self, filename)\r\n   if self.in_open_file then\r\n      self:close_file_in_zip()\r\n      return nil\r\n   end\r\n   local lfh = {}\r\n   self.local_file_header = lfh\r\n   lfh.last_mod_file_time = 0 -- TODO\r\n   lfh.last_mod_file_date = 0 -- TODO\r\n   lfh.crc32 = 0 -- initial value\r\n   lfh.compressed_size = 0 -- unknown yet\r\n   lfh.uncompressed_size = 0 -- unknown yet\r\n   lfh.file_name_length = #filename\r\n   lfh.extra_field_length = 0\r\n   lfh.file_name = filename:gsub(\"\\\\\", \"/\")\r\n   lfh.external_attr = 0 -- TODO properly store permissions\r\n   self.in_open_file = true\r\n   self.data = {}\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "if self.in_open_file then\r\n      self:close_file_in_zip()\r\n      return nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "self:close_file_in_zip()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "local lfh = {}",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "self.local_file_header = lfh",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "lfh.last_mod_file_time = 0",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "lfh.last_mod_file_date = 0",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "lfh.crc32 = 0",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "lfh.compressed_size = 0",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "lfh.uncompressed_size = 0",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "lfh.file_name_length = #filename",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "lfh.extra_field_length = 0",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "lfh.file_name = filename:gsub(\"\\\\\", \"/\")",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "lfh.external_attr = 0",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "self.in_open_file = true",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "self.data = {}",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function zipwriter_write_file_in_zip(self, buf)\r\n   if not self.in_open_file then\r\n      return nil\r\n   end\r\n   local lfh = self.local_file_header\r\n   local cbuf = zlib.compress(buf):sub(3, -5)\r\n   lfh.crc32 = zlib.crc32(lfh.crc32, buf)\r\n   lfh.compressed_size = lfh.compressed_size + #cbuf\r\n   lfh.uncompressed_size = lfh.uncompressed_size + #buf\r\n   table.insert(self.data, cbuf)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "if not self.in_open_file then\r\n      return nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local lfh = self.local_file_header",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local cbuf = zlib.compress(buf):sub(3, -5)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "lfh.crc32 = zlib.crc32(lfh.crc32, buf)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "lfh.compressed_size = lfh.compressed_size + #cbuf",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "lfh.uncompressed_size = lfh.uncompressed_size + #buf",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "table.insert(self.data, cbuf)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function zipwriter_close_file_in_zip(self)\r\n   local zh = self.ziphandle\r\n   \r\n   if not self.in_open_file then\r\n      return nil\r\n   end\r\n\r\n   -- Local file header\r\n   local lfh = self.local_file_header\r\n   lfh.offset = zh:seek()\r\n   zh:write(number_to_bytestring(0x04034b50, 4)) -- signature\r\n   zh:write(number_to_bytestring(20, 2)) -- version needed to extract: 2.0\r\n   zh:write(number_to_bytestring(0, 2)) -- general purpose bit flag\r\n   zh:write(number_to_bytestring(8, 2)) -- compression method: deflate\r\n   zh:write(number_to_bytestring(lfh.last_mod_file_time, 2))\r\n   zh:write(number_to_bytestring(lfh.last_mod_file_date, 2))\r\n   zh:write(number_to_bytestring(lfh.crc32, 4))\r\n   zh:write(number_to_bytestring(lfh.compressed_size, 4))\r\n   zh:write(number_to_bytestring(lfh.uncompressed_size, 4))\r\n   zh:write(number_to_bytestring(lfh.file_name_length, 2))\r\n   zh:write(number_to_bytestring(lfh.extra_field_length, 2))\r\n   zh:write(lfh.file_name)\r\n\r\n   -- File data   \r\n   for _, cbuf in ipairs(self.data) do\r\n      zh:write(cbuf)\r\n   end\r\n   \r\n   -- Data descriptor\r\n   zh:write(number_to_bytestring(lfh.crc32, 4))\r\n   zh:write(number_to_bytestring(lfh.compressed_size, 4))\r\n   zh:write(number_to_bytestring(lfh.uncompressed_size, 4))\r\n   \r\n   table.insert(self.files, lfh)\r\n   self.in_open_file = false\r\n   \r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local zh = self.ziphandle",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "lfh.offset = zh:seek()",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "zh:write(number_to_bytestring(0x04034b50, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "zh:write(number_to_bytestring(20, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "zh:write(number_to_bytestring(0, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "zh:write(number_to_bytestring(8, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "zh:write(number_to_bytestring(lfh.last_mod_file_time, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "zh:write(number_to_bytestring(lfh.last_mod_file_date, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "zh:write(number_to_bytestring(lfh.crc32, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "zh:write(number_to_bytestring(lfh.compressed_size, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "zh:write(number_to_bytestring(lfh.uncompressed_size, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "zh:write(number_to_bytestring(lfh.file_name_length, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "zh:write(number_to_bytestring(lfh.extra_field_length, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "zh:write(lfh.file_name)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "for _, cbuf in ipairs(self.data) do\r\n      zh:write(cbuf)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "zh:write(cbuf)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "table.insert(self.files, lfh)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "self.in_open_file = false",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "local function zipwriter_add(self, file)\r\n   local fin\r\n   local ok, err = self:open_new_file_in_zip(file)\r\n   if not ok then\r\n      err = \"error in opening \"..file..\" in zipfile\"\r\n   else\r\n      fin = io.open(fs.absolute_name(file), \"rb\")\r\n      if not fin then\r\n         ok = false\r\n         err = \"error opening \"..file..\" for reading\"\r\n      end\r\n   end\r\n   if ok then\r\n      local buf = fin:read(\"*a\")\r\n      if not buf then\r\n         err = \"error reading \"..file\r\n         ok = false\r\n      else\r\n         ok = self:write_file_in_zip(buf)\r\n         if not ok then\r\n            err = \"error in writing \"..file..\" in the zipfile\"\r\n         end\r\n      end\r\n   end\r\n   if fin then\r\n      fin:close()\r\n   end\r\n   if ok then\r\n      ok = self:close_file_in_zip()\r\n      if not ok then\r\n         err = \"error in writing \"..file..\" in the zipfile\"\r\n      end\r\n   end\r\n   return ok == true, err\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local fin",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "local ok, err = self:open_new_file_in_zip(file)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if not ok then\r\n      err = \"error in opening \"..file..\" in zipfile\"\r\n   else\r\n      fin = io.open(fs.absolute_name(file), \"rb\")\r\n      if not fin then\r\n         ok = false\r\n         err = \"error opening \"..file..\" for reading\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "err = \"error in opening \"..file..\" in zipfile\"",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "fin = io.open(fs.absolute_name(file), \"rb\")",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if not fin then\r\n         ok = false\r\n         err = \"error opening \"..file..\" for reading\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "ok = false",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "err = \"error opening \"..file..\" for reading\"",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "if ok then\r\n      local buf = fin:read(\"*a\")\r\n      if not buf then\r\n         err = \"error reading \"..file\r\n         ok = false\r\n      else\r\n         ok = self:write_file_in_zip(buf)\r\n         if not ok then\r\n            err = \"error in writing \"..file..\" in the zipfile\"\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "local buf = fin:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if not buf then\r\n         err = \"error reading \"..file\r\n         ok = false\r\n      else\r\n         ok = self:write_file_in_zip(buf)\r\n         if not ok then\r\n            err = \"error in writing \"..file..\" in the zipfile\"\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "err = \"error reading \"..file",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "ok = self:write_file_in_zip(buf)",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if not ok then\r\n            err = \"error in writing \"..file..\" in the zipfile\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "err = \"error in writing \"..file..\" in the zipfile\"",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if fin then\r\n      fin:close()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "fin:close()",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "if ok then\r\n      ok = self:close_file_in_zip()\r\n      if not ok then\r\n         err = \"error in writing \"..file..\" in the zipfile\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "ok = self:close_file_in_zip()",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if not ok then\r\n         err = \"error in writing \"..file..\" in the zipfile\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function zipwriter_close(self)\r\n   local zh = self.ziphandle\r\n   \r\n   local central_directory_offset = zh:seek()\r\n   \r\n   local size_of_central_directory = 0\r\n   -- Central directory structure\r\n   for _, lfh in ipairs(self.files) do\r\n      zh:write(number_to_bytestring(0x02014b50, 4)) -- signature\r\n      zh:write(number_to_bytestring(3, 2)) -- version made by: UNIX\r\n      zh:write(number_to_bytestring(20, 2)) -- version needed to extract: 2.0\r\n      zh:write(number_to_bytestring(0, 2)) -- general purpose bit flag\r\n      zh:write(number_to_bytestring(8, 2)) -- compression method: deflate\r\n      zh:write(number_to_bytestring(lfh.last_mod_file_time, 2))\r\n      zh:write(number_to_bytestring(lfh.last_mod_file_date, 2))\r\n      zh:write(number_to_bytestring(lfh.crc32, 4))\r\n      zh:write(number_to_bytestring(lfh.compressed_size, 4))\r\n      zh:write(number_to_bytestring(lfh.uncompressed_size, 4))\r\n      zh:write(number_to_bytestring(lfh.file_name_length, 2))\r\n      zh:write(number_to_bytestring(lfh.extra_field_length, 2))\r\n      zh:write(number_to_bytestring(0, 2)) -- file comment length\r\n      zh:write(number_to_bytestring(0, 2)) -- disk number start\r\n      zh:write(number_to_bytestring(0, 2)) -- internal file attributes\r\n      zh:write(number_to_bytestring(lfh.external_attr, 4)) -- external file attributes\r\n      zh:write(number_to_bytestring(lfh.offset, 4)) -- relative offset of local header\r\n      zh:write(lfh.file_name)\r\n      size_of_central_directory = size_of_central_directory + 46 + lfh.file_name_length\r\n   end\r\n   \r\n   -- End of central directory record\r\n   zh:write(number_to_bytestring(0x06054b50, 4)) -- signature\r\n   zh:write(number_to_bytestring(0, 2)) -- number of this disk\r\n   zh:write(number_to_bytestring(0, 2)) -- number of disk with start of central directory\r\n   zh:write(number_to_bytestring(#self.files, 2)) -- total number of entries in the central dir on this disk\r\n   zh:write(number_to_bytestring(#self.files, 2)) -- total number of entries in the central dir\r\n   zh:write(number_to_bytestring(size_of_central_directory, 4))\r\n   zh:write(number_to_bytestring(central_directory_offset, 4))\r\n   zh:write(number_to_bytestring(0, 2)) -- zip file comment length\r\n   zh:close()\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local central_directory_offset = zh:seek()",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local size_of_central_directory = 0",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "for _, lfh in ipairs(self.files) do\r\n      zh:write(number_to_bytestring(0x02014b50, 4)) -- signature\r\n      zh:write(number_to_bytestring(3, 2)) -- version made by: UNIX\r\n      zh:write(number_to_bytestring(20, 2)) -- version needed to extract: 2.0\r\n      zh:write(number_to_bytestring(0, 2)) -- general purpose bit flag\r\n      zh:write(number_to_bytestring(8, 2)) -- compression method: deflate\r\n      zh:write(number_to_bytestring(lfh.last_mod_file_time, 2))\r\n      zh:write(number_to_bytestring(lfh.last_mod_file_date, 2))\r\n      zh:write(number_to_bytestring(lfh.crc32, 4))\r\n      zh:write(number_to_bytestring(lfh.compressed_size, 4))\r\n      zh:write(number_to_bytestring(lfh.uncompressed_size, 4))\r\n      zh:write(number_to_bytestring(lfh.file_name_length, 2))\r\n      zh:write(number_to_bytestring(lfh.extra_field_length, 2))\r\n      zh:write(number_to_bytestring(0, 2)) -- file comment length\r\n      zh:write(number_to_bytestring(0, 2)) -- disk number start\r\n      zh:write(number_to_bytestring(0, 2)) -- internal file attributes\r\n      zh:write(number_to_bytestring(lfh.external_attr, 4)) -- external file attributes\r\n      zh:write(number_to_bytestring(lfh.offset, 4)) -- relative offset of local header\r\n      zh:write(lfh.file_name)\r\n      size_of_central_directory = size_of_central_directory + 46 + lfh.file_name_length\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 86,
    "text": "zh:write(number_to_bytestring(0x02014b50, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "zh:write(number_to_bytestring(3, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "zh:write(number_to_bytestring(lfh.external_attr, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "zh:write(number_to_bytestring(lfh.offset, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "size_of_central_directory = size_of_central_directory + 46 + lfh.file_name_length",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "zh:write(number_to_bytestring(0x06054b50, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "zh:write(number_to_bytestring(#self.files, 2))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "zh:write(number_to_bytestring(size_of_central_directory, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "zh:write(number_to_bytestring(central_directory_offset, 4))",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "zh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function new_zipwriter(name)\r\n   \r\n   local zw = {}\r\n  \r\n   zw.ziphandle = io.open(fs.absolute_name(name), \"wb\")\r\n   if not zw.ziphandle then\r\n      return nil\r\n   end\r\n   zw.files = {}\r\n   zw.in_open_file = false\r\n   \r\n   zw.add = zipwriter_add\r\n   zw.close = zipwriter_close\r\n   zw.open_new_file_in_zip = zipwriter_open_new_file_in_zip\r\n   zw.write_file_in_zip = zipwriter_write_file_in_zip\r\n   zw.close_file_in_zip = zipwriter_close_file_in_zip\r\n\r\n   return zw\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local zw = {}",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "zw.ziphandle = io.open(fs.absolute_name(name), \"wb\")",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "if not zw.ziphandle then\r\n      return nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "zw.files = {}",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "zw.in_open_file = false",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "zw.add = zipwriter_add",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "zw.close = zipwriter_close",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "zw.open_new_file_in_zip = zipwriter_open_new_file_in_zip",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "zw.write_file_in_zip = zipwriter_write_file_in_zip",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "zw.close_file_in_zip = zipwriter_close_file_in_zip",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function zip(zipfile, ...)\r\n   local zw = new_zipwriter(zipfile)\r\n   if not zw then\r\n      return nil, \"error opening \"..zipfile\r\n   end\r\n\r\n   local ok, err\r\n   for _, file in pairs({...}) do\r\n      if fs.is_dir(file) then\r\n         for _, entry in pairs(fs.find(file)) do\r\n            local fullname = dir.path(file, entry)\r\n            if fs.is_file(fullname) then\r\n               ok, err = zw:add(fullname)\r\n               if not ok then break end\r\n            end\r\n         end\r\n      else\r\n         ok, err = zw:add(file)\r\n         if not ok then break end\r\n      end\r\n   end\r\n\r\n   local ok = zw:close()\r\n   if not ok then\r\n      return false, \"error closing \"..zipfile\r\n   end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "local zw = new_zipwriter(zipfile)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if not zw then\r\n      return nil, \"error opening \"..zipfile\r\n   end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "for _, file in pairs({...}) do\r\n      if fs.is_dir(file) then\r\n         for _, entry in pairs(fs.find(file)) do\r\n            local fullname = dir.path(file, entry)\r\n            if fs.is_file(fullname) then\r\n               ok, err = zw:add(fullname)\r\n               if not ok then break end\r\n            end\r\n         end\r\n      else\r\n         ok, err = zw:add(file)\r\n         if not ok then break end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 114,
    "text": "if fs.is_dir(file) then\r\n         for _, entry in pairs(fs.find(file)) do\r\n            local fullname = dir.path(file, entry)\r\n            if fs.is_file(fullname) then\r\n               ok, err = zw:add(fullname)\r\n               if not ok then break end\r\n            end\r\n         end\r\n      else\r\n         ok, err = zw:add(file)\r\n         if not ok then break end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "for _, entry in pairs(fs.find(file)) do\r\n            local fullname = dir.path(file, entry)\r\n            if fs.is_file(fullname) then\r\n               ok, err = zw:add(fullname)\r\n               if not ok then break end\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "local fullname = dir.path(file, entry)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "if fs.is_file(fullname) then\r\n               ok, err = zw:add(fullname)\r\n               if not ok then break end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "ok, err = zw:add(fullname)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if not ok then break end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "ok, err = zw:add(file)",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "local ok = zw:close()",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if not ok then\r\n      return false, \"error closing \"..zipfile\r\n   end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "",
    "type": "function container"
  }, {
    "id": 125,
    "text": "absolute_name",
    "type": "global function"
  }, {
    "id": 126,
    "text": "crc32",
    "type": "global function"
  }, {
    "id": 127,
    "text": "compress",
    "type": "global function"
  }, {
    "id": 128,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 129,
    "text": "module",
    "type": "global function"
  }, {
    "id": 130,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 131,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 132,
    "text": "char",
    "type": "global function"
  }, {
    "id": 133,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 134,
    "text": "open",
    "type": "global function"
  }, {
    "id": 135,
    "text": "require",
    "type": "global function"
  }, {
    "id": 136,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 137,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 138,
    "text": "",
    "type": "variable container"
  }, {
    "id": 139,
    "text": "",
    "type": "require container"
  }, {
    "id": 140,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 141,
    "text": "(zlib)",
    "type": "module"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "require local variable"
  } ]
}