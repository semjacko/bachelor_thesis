{
  "_filename": "unix.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/fs/unix.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 11
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 19,
    "label": "has",
    "to": 28
  }, {
    "from": 19,
    "label": "has",
    "to": 29
  }, {
    "from": 19,
    "label": "has",
    "to": 30
  }, {
    "from": 19,
    "label": "has",
    "to": 31
  }, {
    "from": 19,
    "label": "has",
    "to": 32
  }, {
    "from": 19,
    "label": "has",
    "to": 33
  }, {
    "from": 19,
    "label": "has",
    "to": 11
  }, {
    "from": 19,
    "label": "has",
    "to": 11
  }, {
    "from": 19,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 11
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 11
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 11
  }, {
    "from": 35,
    "label": "has",
    "to": 11
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 11
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 11
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 19,
    "label": "calls",
    "to": 9
  }, {
    "from": 19,
    "label": "calls",
    "to": 8
  }, {
    "from": 13,
    "label": "calls",
    "to": 51
  }, {
    "from": 13,
    "label": "calls",
    "to": 51
  }, {
    "from": 19,
    "label": "calls",
    "to": 51
  }, {
    "from": 19,
    "label": "calls",
    "to": 51
  }, {
    "from": 44,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 54
  }, {
    "from": 35,
    "label": "calls",
    "to": 54
  }, {
    "from": 19,
    "label": "calls",
    "to": 4
  }, {
    "from": 13,
    "label": "calls",
    "to": 6
  }, {
    "from": 46,
    "label": "calls",
    "to": 53
  }, {
    "from": 48,
    "label": "calls",
    "to": 55
  }, {
    "from": 48,
    "label": "calls",
    "to": 57
  }, {
    "from": 35,
    "label": "calls",
    "to": 49
  }, {
    "from": 19,
    "label": "calls",
    "to": 2
  }, {
    "from": 48,
    "label": "calls",
    "to": 52
  }, {
    "from": 19,
    "label": "calls",
    "to": 3
  }, {
    "from": 13,
    "label": "calls",
    "to": 56
  }, {
    "from": 13,
    "label": "calls",
    "to": 56
  }, {
    "from": 19,
    "label": "calls",
    "to": 56
  }, {
    "from": 19,
    "label": "calls",
    "to": 56
  }, {
    "from": 19,
    "label": "calls",
    "to": 5
  }, {
    "from": 19,
    "label": "calls",
    "to": 5
  }, {
    "from": 19,
    "label": "calls",
    "to": 5
  }, {
    "from": 19,
    "label": "calls",
    "to": 5
  }, {
    "from": 19,
    "label": "calls",
    "to": 50
  }, {
    "from": 19,
    "label": "calls",
    "to": 50
  }, {
    "from": 19,
    "label": "calls",
    "to": 50
  }, {
    "from": 19,
    "label": "calls",
    "to": 50
  }, {
    "from": 19,
    "label": "calls",
    "to": 50
  }, {
    "from": 48,
    "label": "calls",
    "to": 58
  }, {
    "from": 48,
    "label": "calls",
    "to": 58
  }, {
    "from": 48,
    "label": "calls",
    "to": 58
  }, {
    "from": 48,
    "label": "calls",
    "to": 58
  }, {
    "from": 48,
    "label": "calls",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 48,
    "label": "declares",
    "to": 10
  }, {
    "from": 48,
    "label": "declares",
    "to": 13
  }, {
    "from": 48,
    "label": "declares",
    "to": 19
  }, {
    "from": 48,
    "label": "declares",
    "to": 35
  }, {
    "from": 48,
    "label": "declares",
    "to": 44
  }, {
    "from": 48,
    "label": "declares",
    "to": 46
  }, {
    "from": 1,
    "label": "contains",
    "to": 63
  }, {
    "from": 1,
    "label": "contains",
    "to": 64
  }, {
    "from": 63,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 63,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 63,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 63,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 63,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 63,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 63,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 63,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 64,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 62
  }, {
    "from": 64,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "requires",
    "to": 59
  }, {
    "from": 64,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 61
  }, {
    "from": 64,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "requires",
    "to": 62
  }, {
    "from": 64,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 60
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "unix",
    "type": "module"
  }, {
    "id": 2,
    "text": "function package_paths()\r\n   local new_path, new_cpath = { extra_luarocks_module_dir }, {}\r\n   for _,tree in ipairs(rocks_trees) do\r\n     if type(tree) == \"string\" then\r\n        table.insert(new_path, 1, tree..lua_modules_path..\"/?.lua;\"..tree..lua_modules_path..\"/?/init.lua\")\r\n        table.insert(new_cpath, 1, tree..lib_modules_path..\"/?.\"..lib_extension)\r\n     else\r\n        table.insert(new_path, 1, (tree.lua_dir or tree.root..lua_modules_path)..\"/?.lua;\"..\r\n           (tree.lua_dir or tree.root..lua_modules_path)..\"/?/init.lua\")\r\n        table.insert(new_cpath, 1, (tree.lib_dir or tree.root..lib_modules_path)..\"/?.\"..lib_extension)\r\n     end\r\n   end\r\n   return table.concat(new_path, \";\"), table.concat(new_cpath, \";\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function Q(arg)\r\n   assert(type(arg) == \"string\")\r\n\r\n   -- FIXME Unix-specific\r\n   return \"'\" .. arg:gsub(\"'\", \"'\\\\''\") .. \"'\"\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function current_dir()\r\n   return lfs.currentdir()\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function copy(src, dest, perms)\r\n   assert(src and dest)\r\n   src = dir.normalize(src)\r\n   dest = dir.normalize(dest)\r\n   local destmode = lfs.attributes(dest, \"mode\")\r\n   if destmode == \"directory\" then\r\n      dest = dir.path(dest, dir.base_name(src))\r\n   end\r\n   if not perms then perms = fs.get_permissions(src) end\r\n   local src_h, err = io.open(src, \"rb\")\r\n   if not src_h then return nil, err end\r\n   local dest_h, err = io.open(dest, \"w+b\")\r\n   if not dest_h then src_h:close() return nil, err end\r\n   while true do\r\n      local block = src_h:read(8192)\r\n      if not block then break end\r\n      dest_h:write(block)\r\n   end\r\n   src_h:close()\r\n   dest_h:close()\r\n   fs.chmod(dest, perms)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function chmod(file, mode)\r\n   -- LuaPosix (as of 5.1.15) does not support octal notation...\r\n   if mode:sub(1,1) == \"0\" then\r\n      local new_mode = {}\r\n      for c in mode:sub(2):gmatch(\".\") do\r\n         table.insert(new_mode, octal_to_rwx[c])\r\n      end\r\n      mode = table.concat(new_mode)\r\n   end\r\n   local err = posix.chmod(file, mode)\r\n   return err == 0\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function quiet(cmd)\r\n   return cmd..\" 1> /dev/null 2> /dev/null\"\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function absolute_name(pathname, relative_to)\r\n   assert(type(pathname) == \"string\")\r\n   assert(type(relative_to) == \"string\" or not relative_to)\r\n\r\n   relative_to = relative_to or fs.current_dir()\r\n   if pathname:sub(1,1) == \"/\" then\r\n      return pathname\r\n   else\r\n      return relative_to .. \"/\" .. pathname\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert(type(pathname) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert(type(relative_to) == \"string\" or not relative_to)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "relative_to = relative_to or fs.current_dir()",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if pathname:sub(1,1) == \"/\" then\r\n      return pathname\r\n   else\r\n      return relative_to .. \"/\" .. pathname\r\n   end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function wrap_script(file, dest, name, version)\r\n   assert(type(file) == \"string\")\r\n   assert(type(dest) == \"string\")\r\n   \r\n   local base = dir.base_name(file)\r\n   local wrapname = fs.is_dir(dest) and dest..\"/\"..base or dest\r\n   local lpath, lcpath = cfg.package_paths()\r\n   local wrapper = io.open(wrapname, \"w\")\r\n   if not wrapper then\r\n      return nil, \"Could not open \"..wrapname..\" for writing.\"\r\n   end\r\n   wrapper:write(\"#!/bin/sh\\n\\n\")\r\n   local lua = dir.path(cfg.variables[\"LUA_BINDIR\"], cfg.lua_interpreter)\r\n   local ppaths = \"package.path=\"..util.LQ(lpath..\";\")..\"..package.path; package.cpath=\"..util.LQ(lcpath..\";\")..\"..package.cpath\"\r\n   local addctx = \"local k,l,_=pcall(require,\"..util.LQ(\"luarocks.loader\")..\") _=k and l.add_context(\"..util.LQ(name)..\",\"..util.LQ(version)..\")\"\r\n   wrapper:write('exec '..fs.Q(lua)..' -e '..fs.Q(ppaths)..' -e '..fs.Q(addctx)..' '..fs.Q(file)..' \"$@\"\\n')\r\n   wrapper:close()\r\n   if fs.chmod(wrapname, \"0755\") then\r\n      return true\r\n   else\r\n      return nil, \"Could not make \"..wrapname..\" executable.\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "assert(type(file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert(type(dest) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local base = dir.base_name(file)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local wrapname = fs.is_dir(dest) and dest..\"/\"..base or dest",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local lpath, lcpath = cfg.package_paths()",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local wrapper = io.open(wrapname, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if not wrapper then\r\n      return nil, \"Could not open \"..wrapname..\" for writing.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "wrapper:write(\"#!/bin/sh\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local lua = dir.path(cfg.variables[\"LUA_BINDIR\"], cfg.lua_interpreter)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local ppaths = \"package.path=\"..util.LQ(lpath..\";\")..\"..package.path; package.cpath=\"..util.LQ(lcpath..\";\")..\"..package.cpath\"",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local addctx = \"local k,l,_=pcall(require,\"..util.LQ(\"luarocks.loader\")..\") _=k and l.add_context(\"..util.LQ(name)..\",\"..util.LQ(version)..\")\"",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "wrapper:write('exec '..fs.Q(lua)..' -e '..fs.Q(ppaths)..' -e '..fs.Q(addctx)..' '..fs.Q(file)..' \"$@\"\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "wrapper:close()",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if fs.chmod(wrapname, \"0755\") then\r\n      return true\r\n   else\r\n      return nil, \"Could not make \"..wrapname..\" executable.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function is_actual_binary(filename)\r\n   if filename:match(\"%.lua$\") then\r\n      return false\r\n   end\r\n   local file = io.open(filename)\r\n   if not file then\r\n      return true\r\n   end\r\n   local first = file:read(2)\r\n   file:close()\r\n   if not first then\r\n      util.printerr(\"Warning: could not read \"..filename)\r\n      return true\r\n   end\r\n   return first ~= \"#!\"\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "if filename:match(\"%.lua$\") then\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local file = io.open(filename)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if not file then\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local first = file:read(2)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "if not first then\r\n      util.printerr(\"Warning: could not read \"..filename)\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "util.printerr(\"Warning: could not read \"..filename)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function copy_binary(filename, dest) \r\n   return fs.copy(filename, dest, \"0755\")\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function replace_file(old_file, new_file)\r\n   return os.rename(new_file, old_file)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "",
    "type": "function container"
  }, {
    "id": 49,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "function LQ(s)\r\n   return (\"%q\"):format(s)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 52,
    "text": "module",
    "type": "global function"
  }, {
    "id": 53,
    "text": "rename",
    "type": "global function"
  }, {
    "id": 54,
    "text": "open",
    "type": "global function"
  }, {
    "id": 55,
    "text": "randomseed",
    "type": "global function"
  }, {
    "id": 56,
    "text": "type",
    "type": "global function"
  }, {
    "id": 57,
    "text": "time",
    "type": "global function"
  }, {
    "id": 58,
    "text": "require",
    "type": "global function"
  }, {
    "id": 59,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 60,
    "text": "util)",
    "type": "module"
  }, {
    "id": 61,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 62,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 63,
    "text": "",
    "type": "variable container"
  }, {
    "id": 64,
    "text": "",
    "type": "require container"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "n/a"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  } ]
}