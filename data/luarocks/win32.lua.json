{
  "_filename": "win32.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/fs/win32.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 12
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 12
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 12
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 21
  }, {
    "from": 30,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 30,
    "label": "has",
    "to": 24
  }, {
    "from": 30,
    "label": "has",
    "to": 12
  }, {
    "from": 30,
    "label": "has",
    "to": 25
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 12
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 12
  }, {
    "from": 33,
    "label": "has",
    "to": 12
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 39,
    "label": "has",
    "to": 46
  }, {
    "from": 39,
    "label": "has",
    "to": 47
  }, {
    "from": 39,
    "label": "has",
    "to": 12
  }, {
    "from": 39,
    "label": "has",
    "to": 48
  }, {
    "from": 39,
    "label": "has",
    "to": 49
  }, {
    "from": 39,
    "label": "has",
    "to": 50
  }, {
    "from": 39,
    "label": "has",
    "to": 51
  }, {
    "from": 39,
    "label": "has",
    "to": 52
  }, {
    "from": 39,
    "label": "has",
    "to": 53
  }, {
    "from": 39,
    "label": "has",
    "to": 12
  }, {
    "from": 39,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 12
  }, {
    "from": 55,
    "label": "has",
    "to": 12
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 12
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 65,
    "label": "has",
    "to": 72
  }, {
    "from": 59,
    "label": "has",
    "to": 12
  }, {
    "from": 59,
    "label": "has",
    "to": 12
  }, {
    "from": 59,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 12
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 12
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 12
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 86,
    "label": "has",
    "to": 94
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 81,
    "label": "has",
    "to": 12
  }, {
    "from": 81,
    "label": "has",
    "to": 96
  }, {
    "from": 39,
    "label": "calls",
    "to": 10
  }, {
    "from": 81,
    "label": "calls",
    "to": 10
  }, {
    "from": 97,
    "label": "calls",
    "to": 108
  }, {
    "from": 59,
    "label": "calls",
    "to": 8
  }, {
    "from": 39,
    "label": "calls",
    "to": 105
  }, {
    "from": 59,
    "label": "calls",
    "to": 105
  }, {
    "from": 81,
    "label": "calls",
    "to": 105
  }, {
    "from": 81,
    "label": "calls",
    "to": 105
  }, {
    "from": 39,
    "label": "calls",
    "to": 5
  }, {
    "from": 81,
    "label": "calls",
    "to": 5
  }, {
    "from": 33,
    "label": "calls",
    "to": 7
  }, {
    "from": 78,
    "label": "calls",
    "to": 102
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 20,
    "label": "calls",
    "to": 100
  }, {
    "from": 30,
    "label": "calls",
    "to": 100
  }, {
    "from": 33,
    "label": "calls",
    "to": 100
  }, {
    "from": 33,
    "label": "calls",
    "to": 100
  }, {
    "from": 39,
    "label": "calls",
    "to": 100
  }, {
    "from": 39,
    "label": "calls",
    "to": 100
  }, {
    "from": 81,
    "label": "calls",
    "to": 100
  }, {
    "from": 59,
    "label": "calls",
    "to": 4
  }, {
    "from": 78,
    "label": "calls",
    "to": 103
  }, {
    "from": 81,
    "label": "calls",
    "to": 103
  }, {
    "from": 39,
    "label": "calls",
    "to": 99
  }, {
    "from": 39,
    "label": "calls",
    "to": 99
  }, {
    "from": 39,
    "label": "calls",
    "to": 99
  }, {
    "from": 39,
    "label": "calls",
    "to": 99
  }, {
    "from": 39,
    "label": "calls",
    "to": 3
  }, {
    "from": 59,
    "label": "calls",
    "to": 3
  }, {
    "from": 81,
    "label": "calls",
    "to": 9
  }, {
    "from": 97,
    "label": "calls",
    "to": 101
  }, {
    "from": 81,
    "label": "calls",
    "to": 6
  }, {
    "from": 20,
    "label": "calls",
    "to": 106
  }, {
    "from": 30,
    "label": "calls",
    "to": 106
  }, {
    "from": 33,
    "label": "calls",
    "to": 106
  }, {
    "from": 33,
    "label": "calls",
    "to": 106
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 39,
    "label": "calls",
    "to": 106
  }, {
    "from": 97,
    "label": "calls",
    "to": 107
  }, {
    "from": 97,
    "label": "calls",
    "to": 107
  }, {
    "from": 97,
    "label": "calls",
    "to": 107
  }, {
    "from": 97,
    "label": "calls",
    "to": 107
  }, {
    "from": 97,
    "label": "calls",
    "to": 104
  }, {
    "from": 39,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 97
  }, {
    "from": 97,
    "label": "declares",
    "to": 11
  }, {
    "from": 97,
    "label": "declares",
    "to": 13
  }, {
    "from": 97,
    "label": "declares",
    "to": 14
  }, {
    "from": 97,
    "label": "declares",
    "to": 16
  }, {
    "from": 97,
    "label": "declares",
    "to": 18
  }, {
    "from": 97,
    "label": "declares",
    "to": 20
  }, {
    "from": 97,
    "label": "declares",
    "to": 30
  }, {
    "from": 97,
    "label": "declares",
    "to": 33
  }, {
    "from": 97,
    "label": "declares",
    "to": 39
  }, {
    "from": 97,
    "label": "declares",
    "to": 55
  }, {
    "from": 97,
    "label": "declares",
    "to": 59
  }, {
    "from": 97,
    "label": "declares",
    "to": 74
  }, {
    "from": 97,
    "label": "declares",
    "to": 76
  }, {
    "from": 97,
    "label": "declares",
    "to": 78
  }, {
    "from": 97,
    "label": "declares",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 113
  }, {
    "from": 1,
    "label": "contains",
    "to": 114
  }, {
    "from": 113,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 113,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 113,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 113,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 122,
    "label": "assigns",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 113,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 113,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 114,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "requires",
    "to": 112
  }, {
    "from": 114,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "requires",
    "to": 109
  }, {
    "from": 114,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "requires",
    "to": 111
  }, {
    "from": 114,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "requires",
    "to": 110
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "win32",
    "type": "module"
  }, {
    "id": 2,
    "text": "function package_paths()\r\n   local new_path, new_cpath = { extra_luarocks_module_dir }, {}\r\n   for _,tree in ipairs(rocks_trees) do\r\n     if type(tree) == \"string\" then\r\n        table.insert(new_path, 1, tree..lua_modules_path..\"/?.lua;\"..tree..lua_modules_path..\"/?/init.lua\")\r\n        table.insert(new_cpath, 1, tree..lib_modules_path..\"/?.\"..lib_extension)\r\n     else\r\n        table.insert(new_path, 1, (tree.lua_dir or tree.root..lua_modules_path)..\"/?.lua;\"..\r\n           (tree.lua_dir or tree.root..lua_modules_path)..\"/?/init.lua\")\r\n        table.insert(new_cpath, 1, (tree.lib_dir or tree.root..lib_modules_path)..\"/?.\"..lib_extension)\r\n     end\r\n   end\r\n   return table.concat(new_path, \";\"), table.concat(new_cpath, \";\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function dir_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n   return (pathname:gsub(\"/*$\", \"\"):match(\"(.*)[/]+[^/]*\")) or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function normalize(name)\r\n   local protocol, pathname = split_url(name)\r\n   pathname = pathname:gsub(\"\\\\\", \"/\"):gsub(\"(.)/*$\", \"%1\"):gsub(\"//\", \"/\")\r\n   if protocol ~= \"file\" then pathname = protocol ..\"://\"..pathname end\r\n   return pathname\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function current_dir()\r\n   return lfs.currentdir()\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function copy(src, dest, perms)\r\n   assert(src and dest)\r\n   src = dir.normalize(src)\r\n   dest = dir.normalize(dest)\r\n   local destmode = lfs.attributes(dest, \"mode\")\r\n   if destmode == \"directory\" then\r\n      dest = dir.path(dest, dir.base_name(src))\r\n   end\r\n   if not perms then perms = fs.get_permissions(src) end\r\n   local src_h, err = io.open(src, \"rb\")\r\n   if not src_h then return nil, err end\r\n   local dest_h, err = io.open(dest, \"w+b\")\r\n   if not dest_h then src_h:close() return nil, err end\r\n   while true do\r\n      local block = src_h:read(8192)\r\n      if not block then break end\r\n      dest_h:write(block)\r\n   end\r\n   src_h:close()\r\n   dest_h:close()\r\n   fs.chmod(dest, perms)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function(cmd, ...) return _popen(_prefix..cmd, ...) end",
    "type": "function"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "function(cmd, ...) return _execute(_prefix..cmd, ...) end",
    "type": "function"
  }, {
    "id": 14,
    "text": "function quiet(cmd)\r\n   return cmd..\" 2> NUL 1> NUL\"\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function q_escaper(bs, q)\r\n  return (\"\\\\\"):rep(2*#bs-1) .. (q or \"\\\\\")\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function p_escaper(bs)\r\n   return bs .. bs .. '\"%\"'\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function Q(arg)\r\n   assert(type(arg) == \"string\")\r\n   -- Quote DIR for Windows\r\n   if arg:match(\"^[%.a-zA-Z]?:?[\\\\/]\")  then\r\n      arg = arg:gsub(\"/\", \"\\\\\")\r\n   end\r\n   if arg == \"\\\\\" then\r\n      return '\\\\' -- CHDIR needs special handling for root dir\r\n   end\r\n    -- URLs and anything else\r\n   arg = arg:gsub('(\\\\+)(\")', q_escaper)\r\n   arg = arg:gsub('(\\\\+)$', q_escaper)\r\n   arg = arg:gsub('\"', win_escape_chars)\r\n   arg = arg:gsub('(\\\\*)%%', p_escaper)\r\n   return '\"' .. arg .. '\"'\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert(type(arg) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if arg:match(\"^[%.a-zA-Z]?:?[\\\\/]\")  then\r\n      arg = arg:gsub(\"/\", \"\\\\\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "arg = arg:gsub(\"/\", \"\\\\\")",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if arg == \"\\\\\" then\r\n      return '\\\\' -- CHDIR needs special handling for root dir\r\n   end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "arg = arg:gsub('(\\\\+)(\")', q_escaper)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "arg = arg:gsub('(\\\\+)$', q_escaper)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "arg = arg:gsub('\"', win_escape_chars)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "arg = arg:gsub('(\\\\*)%%', p_escaper)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function Qb(arg)\r\n   assert(type(arg) == \"string\")\r\n   -- Quote DIR for Windows\r\n   if arg:match(\"^[%.a-zA-Z]?:?[\\\\/]\")  then\r\n      arg = arg:gsub(\"/\", \"\\\\\")\r\n   end\r\n   if arg == \"\\\\\" then\r\n      return '\\\\' -- CHDIR needs special handling for root dir\r\n   end\r\n   -- URLs and anything else\r\n   arg = arg:gsub('(\\\\+)(\")', q_escaper)\r\n   arg = arg:gsub('(\\\\+)$', q_escaper)\r\n   arg = arg:gsub('[%%\"]', win_escape_chars)\r\n   return '\"' .. arg .. '\"'\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "arg = arg:gsub('[%%\"]', win_escape_chars)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function absolute_name(pathname, relative_to)\r\n   assert(type(pathname) == \"string\")\r\n   assert(type(relative_to) == \"string\" or not relative_to)\r\n\r\n   relative_to = relative_to or fs.current_dir()\r\n   -- FIXME I'm not sure this first \\\\ should be there at all.\r\n   -- What are the Windows rules for drive letters?\r\n   if pathname:match(\"^[\\\\.a-zA-Z]?:?[\\\\/]\") then\r\n      return pathname\r\n   else\r\n      return relative_to .. \"/\" .. pathname\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "assert(type(pathname) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert(type(relative_to) == \"string\" or not relative_to)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "relative_to = relative_to or fs.current_dir()",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if pathname:match(\"^[\\\\.a-zA-Z]?:?[\\\\/]\") then\r\n      return pathname\r\n   else\r\n      return relative_to .. \"/\" .. pathname\r\n   end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function wrap_script(file, dest, name, version)\r\n   assert(type(file) == \"string\")\r\n   assert(type(dest) == \"string\")\r\n\r\n   local base = dir.base_name(file)\r\n   local wrapname = fs.is_dir(dest) and dest..\"/\"..base or dest\r\n   wrapname = wrapname..\".bat\"\r\n   local lpath, lcpath = cfg.package_paths()\r\n   local wrapper = io.open(wrapname, \"w\")\r\n   if not wrapper then\r\n      return nil, \"Could not open \"..wrapname..\" for writing.\"\r\n   end\r\n   wrapper:write(\"@echo off\\n\")\r\n   local lua = dir.path(cfg.variables[\"LUA_BINDIR\"], cfg.lua_interpreter)\r\n   local ppaths = \"package.path=\"..util.LQ(lpath..\";\")..\"..package.path; package.cpath=\"..util.LQ(lcpath..\";\")..\"..package.cpath\"\r\n   local addctx = \"local k,l,_=pcall(require,\"..util.LQ(\"luarocks.loader\")..\") _=k and l.add_context(\"..util.LQ(name)..\",\"..util.LQ(version)..\")\"\r\n   wrapper:write(fs.Qb(lua)..' -e '..fs.Qb(ppaths)..' -e '..fs.Qb(addctx)..' '..fs.Qb(file)..' %*\\n')\r\n   wrapper:close()\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "assert(type(file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert(type(dest) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local base = dir.base_name(file)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local wrapname = fs.is_dir(dest) and dest..\"/\"..base or dest",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "wrapname = wrapname..\".bat\"",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "local lpath, lcpath = cfg.package_paths()",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local wrapper = io.open(wrapname, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if not wrapper then\r\n      return nil, \"Could not open \"..wrapname..\" for writing.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "wrapper:write(\"@echo off\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local lua = dir.path(cfg.variables[\"LUA_BINDIR\"], cfg.lua_interpreter)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local ppaths = \"package.path=\"..util.LQ(lpath..\";\")..\"..package.path; package.cpath=\"..util.LQ(lcpath..\";\")..\"..package.cpath\"",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local addctx = \"local k,l,_=pcall(require,\"..util.LQ(\"luarocks.loader\")..\") _=k and l.add_context(\"..util.LQ(name)..\",\"..util.LQ(version)..\")\"",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "wrapper:write(fs.Qb(lua)..' -e '..fs.Qb(ppaths)..' -e '..fs.Qb(addctx)..' '..fs.Qb(file)..' %*\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "wrapper:close()",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function is_actual_binary(name)\r\n   name = name:lower()\r\n   if name:match(\"%.bat$\") or name:match(\"%.exe$\") then\r\n      return true\r\n   end\r\n   return false\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "name = name:lower()",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if name:match(\"%.bat$\") or name:match(\"%.exe$\") then\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function copy_binary(filename, dest) \r\n   local ok, err = fs.copy(filename, dest)\r\n   if not ok then\r\n      return nil, err\r\n   end\r\n   local exe_pattern = \"%.[Ee][Xx][Ee]$\"\r\n   local base = dir.base_name(filename)\r\n   local dest = dir.dir_name(dest)\r\n   if base:match(exe_pattern) then\r\n      base = base:gsub(exe_pattern, \".lua\")\r\n      local helpname = dest..\"/\"..base\r\n      local helper = io.open(helpname, \"w\")\r\n      if not helper then\r\n         return nil, \"Could not open \"..helpname..\" for writing.\"\r\n      end\r\n      helper:write('package.path=\\\"'..package.path:gsub(\"\\\\\",\"\\\\\\\\\")..';\\\"..package.path\\n')\r\n      helper:write('package.cpath=\\\"'..package.path:gsub(\"\\\\\",\"\\\\\\\\\")..';\\\"..package.cpath\\n')\r\n      helper:close()\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local ok, err = fs.copy(filename, dest)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if not ok then\r\n      return nil, err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "local exe_pattern = \"%.[Ee][Xx][Ee]$\"",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local base = dir.base_name(filename)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local dest = dir.dir_name(dest)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if base:match(exe_pattern) then\r\n      base = base:gsub(exe_pattern, \".lua\")\r\n      local helpname = dest..\"/\"..base\r\n      local helper = io.open(helpname, \"w\")\r\n      if not helper then\r\n         return nil, \"Could not open \"..helpname..\" for writing.\"\r\n      end\r\n      helper:write('package.path=\\\"'..package.path:gsub(\"\\\\\",\"\\\\\\\\\")..';\\\"..package.path\\n')\r\n      helper:write('package.cpath=\\\"'..package.path:gsub(\"\\\\\",\"\\\\\\\\\")..';\\\"..package.cpath\\n')\r\n      helper:close()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "base = base:gsub(exe_pattern, \".lua\")",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "local helpname = dest..\"/\"..base",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local helper = io.open(helpname, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if not helper then\r\n         return nil, \"Could not open \"..helpname..\" for writing.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "helper:write('package.path=\\\"'..package.path:gsub(\"\\\\\",\"\\\\\\\\\")..';\\\"..package.path\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "helper:write('package.cpath=\\\"'..package.path:gsub(\"\\\\\",\"\\\\\\\\\")..';\\\"..package.cpath\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "helper:close()",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function chmod(filename, mode)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function get_permissions(filename)\r\n   return \"\"\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function replace_file(old_file, new_file)\r\n   os.remove(old_file)\r\n   return os.rename(new_file, old_file)\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "os.remove(old_file)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function is_writable(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   local result\r\n   local tmpname = 'tmpluarockstestwritable.deleteme'\r\n   if fs.is_dir(file) then\r\n      local file2 = dir.path(file, tmpname)\r\n      local fh = io.open(file2, 'wb')\r\n      result = fh ~= nil\r\n      if fh then fh:close() end\r\n      if result then\r\n         -- the above test might give a false positive when writing to\r\n         -- c:\\program files\\ because of VirtualStore redirection on Vista and up\r\n         -- So check whether it's really there\r\n         result = fs.exists(file2)\r\n      end\r\n      os.remove(file2)\r\n   else\r\n      local fh = io.open(file, 'r+b')\r\n      result = fh ~= nil\r\n      if fh then fh:close() end\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "assert(file)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "file = dir.normalize(file)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "local result",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local tmpname = 'tmpluarockstestwritable.deleteme'",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if fs.is_dir(file) then\r\n      local file2 = dir.path(file, tmpname)\r\n      local fh = io.open(file2, 'wb')\r\n      result = fh ~= nil\r\n      if fh then fh:close() end\r\n      if result then\r\n         -- the above test might give a false positive when writing to\r\n         -- c:\\program files\\ because of VirtualStore redirection on Vista and up\r\n         -- So check whether it's really there\r\n         result = fs.exists(file2)\r\n      end\r\n      os.remove(file2)\r\n   else\r\n      local fh = io.open(file, 'r+b')\r\n      result = fh ~= nil\r\n      if fh then fh:close() end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "local file2 = dir.path(file, tmpname)",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local fh = io.open(file2, 'wb')",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "result = fh ~= nil",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "if fh then fh:close() end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "if result then\r\n         -- the above test might give a false positive when writing to\r\n         -- c:\\program files\\ because of VirtualStore redirection on Vista and up\r\n         -- So check whether it's really there\r\n         result = fs.exists(file2)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "result = fs.exists(file2)",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "os.remove(file2)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "local fh = io.open(file, 'r+b')",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "",
    "type": "function container"
  }, {
    "id": 98,
    "text": "function LQ(s)\r\n   return (\"%q\"):format(s)\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "Qb",
    "type": "global function"
  }, {
    "id": 100,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 101,
    "text": "module",
    "type": "global function"
  }, {
    "id": 102,
    "text": "rename",
    "type": "global function"
  }, {
    "id": 103,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 104,
    "text": "_popen",
    "type": "global function"
  }, {
    "id": 105,
    "text": "open",
    "type": "global function"
  }, {
    "id": 106,
    "text": "type",
    "type": "global function"
  }, {
    "id": 107,
    "text": "require",
    "type": "global function"
  }, {
    "id": 108,
    "text": "_execute",
    "type": "global function"
  }, {
    "id": 109,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 110,
    "text": "util)",
    "type": "module"
  }, {
    "id": 111,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 112,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 113,
    "text": "",
    "type": "variable container"
  }, {
    "id": 114,
    "text": "",
    "type": "require container"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "string"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 123,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 124,
    "text": "",
    "type": "string"
  }, {
    "id": 125,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 126,
    "text": "",
    "type": "string"
  }, {
    "id": 127,
    "text": "",
    "type": "global variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "global variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  } ]
}