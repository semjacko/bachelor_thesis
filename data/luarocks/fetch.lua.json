{
  "_filename": "fetch.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/fetch.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 104
  }, {
    "from": 2,
    "label": "calls",
    "to": 139
  }, {
    "from": 3,
    "label": "calls",
    "to": 38
  }, {
    "from": 6,
    "label": "calls",
    "to": 60
  }, {
    "from": 10,
    "label": "calls",
    "to": 60
  }, {
    "from": 11,
    "label": "calls",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 17
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 19
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 38,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 38,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 38,
    "label": "has",
    "to": 53
  }, {
    "from": 38,
    "label": "has",
    "to": 33
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 38,
    "label": "has",
    "to": 54
  }, {
    "from": 38,
    "label": "has",
    "to": 55
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 38,
    "label": "has",
    "to": 35
  }, {
    "from": 38,
    "label": "has",
    "to": 14
  }, {
    "from": 38,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 14
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 71
  }, {
    "from": 60,
    "label": "has",
    "to": 72
  }, {
    "from": 60,
    "label": "has",
    "to": 73
  }, {
    "from": 60,
    "label": "has",
    "to": 74
  }, {
    "from": 60,
    "label": "has",
    "to": 75
  }, {
    "from": 60,
    "label": "has",
    "to": 76
  }, {
    "from": 60,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 81
  }, {
    "from": 60,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 60,
    "label": "has",
    "to": 84
  }, {
    "from": 60,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 60,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 60,
    "label": "has",
    "to": 89
  }, {
    "from": 60,
    "label": "has",
    "to": 90
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 91
  }, {
    "from": 60,
    "label": "has",
    "to": 92
  }, {
    "from": 60,
    "label": "has",
    "to": 93
  }, {
    "from": 60,
    "label": "has",
    "to": 94
  }, {
    "from": 60,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 61
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 76
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 14
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 104,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 33
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 35
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 104,
    "label": "has",
    "to": 14
  }, {
    "from": 104,
    "label": "has",
    "to": 115
  }, {
    "from": 104,
    "label": "has",
    "to": 14
  }, {
    "from": 104,
    "label": "has",
    "to": 14
  }, {
    "from": 104,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 117,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 125,
    "label": "has",
    "to": 35
  }, {
    "from": 125,
    "label": "has",
    "to": 129
  }, {
    "from": 125,
    "label": "has",
    "to": 130
  }, {
    "from": 117,
    "label": "has",
    "to": 14
  }, {
    "from": 117,
    "label": "has",
    "to": 131
  }, {
    "from": 117,
    "label": "has",
    "to": 14
  }, {
    "from": 117,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 117,
    "label": "has",
    "to": 14
  }, {
    "from": 117,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 33
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 35
  }, {
    "from": 117,
    "label": "has",
    "to": 14
  }, {
    "from": 117,
    "label": "has",
    "to": 14
  }, {
    "from": 117,
    "label": "has",
    "to": 14
  }, {
    "from": 117,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 118
  }, {
    "from": 139,
    "label": "has",
    "to": 119
  }, {
    "from": 139,
    "label": "has",
    "to": 120
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 139,
    "label": "has",
    "to": 14
  }, {
    "from": 139,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 139,
    "label": "has",
    "to": 14
  }, {
    "from": 139,
    "label": "has",
    "to": 14
  }, {
    "from": 139,
    "label": "has",
    "to": 14
  }, {
    "from": 139,
    "label": "has",
    "to": 148
  }, {
    "from": 24,
    "label": "calls",
    "to": 173
  }, {
    "from": 38,
    "label": "calls",
    "to": 173
  }, {
    "from": 60,
    "label": "calls",
    "to": 4
  }, {
    "from": 24,
    "label": "calls",
    "to": 155
  }, {
    "from": 117,
    "label": "calls",
    "to": 155
  }, {
    "from": 16,
    "label": "calls",
    "to": 179
  }, {
    "from": 16,
    "label": "calls",
    "to": 179
  }, {
    "from": 24,
    "label": "calls",
    "to": 179
  }, {
    "from": 24,
    "label": "calls",
    "to": 179
  }, {
    "from": 24,
    "label": "calls",
    "to": 179
  }, {
    "from": 38,
    "label": "calls",
    "to": 179
  }, {
    "from": 38,
    "label": "calls",
    "to": 179
  }, {
    "from": 60,
    "label": "calls",
    "to": 179
  }, {
    "from": 104,
    "label": "calls",
    "to": 179
  }, {
    "from": 117,
    "label": "calls",
    "to": 179
  }, {
    "from": 117,
    "label": "calls",
    "to": 179
  }, {
    "from": 117,
    "label": "calls",
    "to": 179
  }, {
    "from": 139,
    "label": "calls",
    "to": 179
  }, {
    "from": 139,
    "label": "calls",
    "to": 179
  }, {
    "from": 139,
    "label": "calls",
    "to": 179
  }, {
    "from": 38,
    "label": "calls",
    "to": 154
  }, {
    "from": 139,
    "label": "calls",
    "to": 12
  }, {
    "from": 60,
    "label": "calls",
    "to": 180
  }, {
    "from": 24,
    "label": "calls",
    "to": 16
  }, {
    "from": 104,
    "label": "calls",
    "to": 16
  }, {
    "from": 117,
    "label": "calls",
    "to": 16
  }, {
    "from": 60,
    "label": "calls",
    "to": 167
  }, {
    "from": 60,
    "label": "calls",
    "to": 5
  }, {
    "from": 16,
    "label": "calls",
    "to": 13
  }, {
    "from": 60,
    "label": "calls",
    "to": 13
  }, {
    "from": 139,
    "label": "calls",
    "to": 13
  }, {
    "from": 149,
    "label": "calls",
    "to": 184
  }, {
    "from": 149,
    "label": "calls",
    "to": 184
  }, {
    "from": 149,
    "label": "calls",
    "to": 184
  }, {
    "from": 149,
    "label": "calls",
    "to": 184
  }, {
    "from": 149,
    "label": "calls",
    "to": 184
  }, {
    "from": 149,
    "label": "calls",
    "to": 184
  }, {
    "from": 149,
    "label": "calls",
    "to": 184
  }, {
    "from": 149,
    "label": "calls",
    "to": 184
  }, {
    "from": 139,
    "label": "calls",
    "to": 184
  }, {
    "from": 16,
    "label": "calls",
    "to": 157
  }, {
    "from": 60,
    "label": "calls",
    "to": 166
  }, {
    "from": 24,
    "label": "calls",
    "to": 153
  }, {
    "from": 38,
    "label": "calls",
    "to": 153
  }, {
    "from": 104,
    "label": "calls",
    "to": 153
  }, {
    "from": 117,
    "label": "calls",
    "to": 153
  }, {
    "from": 117,
    "label": "calls",
    "to": 153
  }, {
    "from": 24,
    "label": "calls",
    "to": 150
  }, {
    "from": 38,
    "label": "calls",
    "to": 150
  }, {
    "from": 24,
    "label": "calls",
    "to": 8
  }, {
    "from": 38,
    "label": "calls",
    "to": 24
  }, {
    "from": 104,
    "label": "calls",
    "to": 24
  }, {
    "from": 117,
    "label": "calls",
    "to": 24
  }, {
    "from": 149,
    "label": "calls",
    "to": 182
  }, {
    "from": 60,
    "label": "calls",
    "to": 57
  }, {
    "from": 117,
    "label": "calls",
    "to": 151
  }, {
    "from": 24,
    "label": "calls",
    "to": 7
  }, {
    "from": 38,
    "label": "calls",
    "to": 7
  }, {
    "from": 57,
    "label": "calls",
    "to": 7
  }, {
    "from": 60,
    "label": "calls",
    "to": 7
  }, {
    "from": 60,
    "label": "calls",
    "to": 7
  }, {
    "from": 104,
    "label": "calls",
    "to": 7
  }, {
    "from": 24,
    "label": "calls",
    "to": 152
  }, {
    "from": 38,
    "label": "calls",
    "to": 152
  }, {
    "from": 104,
    "label": "calls",
    "to": 152
  }, {
    "from": 117,
    "label": "calls",
    "to": 152
  }, {
    "from": 117,
    "label": "calls",
    "to": 152
  }, {
    "from": 38,
    "label": "calls",
    "to": 156
  }, {
    "from": 139,
    "label": "calls",
    "to": 181
  }, {
    "from": 60,
    "label": "calls",
    "to": 170
  }, {
    "from": 104,
    "label": "calls",
    "to": 60
  }, {
    "from": 16,
    "label": "calls",
    "to": 9
  }, {
    "from": 24,
    "label": "calls",
    "to": 9
  }, {
    "from": 60,
    "label": "calls",
    "to": 9
  }, {
    "from": 16,
    "label": "calls",
    "to": 183
  }, {
    "from": 16,
    "label": "calls",
    "to": 183
  }, {
    "from": 24,
    "label": "calls",
    "to": 183
  }, {
    "from": 24,
    "label": "calls",
    "to": 183
  }, {
    "from": 24,
    "label": "calls",
    "to": 183
  }, {
    "from": 38,
    "label": "calls",
    "to": 183
  }, {
    "from": 38,
    "label": "calls",
    "to": 183
  }, {
    "from": 60,
    "label": "calls",
    "to": 183
  }, {
    "from": 104,
    "label": "calls",
    "to": 183
  }, {
    "from": 117,
    "label": "calls",
    "to": 183
  }, {
    "from": 117,
    "label": "calls",
    "to": 183
  }, {
    "from": 117,
    "label": "calls",
    "to": 183
  }, {
    "from": 139,
    "label": "calls",
    "to": 183
  }, {
    "from": 139,
    "label": "calls",
    "to": 183
  }, {
    "from": 139,
    "label": "calls",
    "to": 183
  }, {
    "from": 117,
    "label": "calls",
    "to": 178
  }, {
    "from": 60,
    "label": "calls",
    "to": 174
  }, {
    "from": 60,
    "label": "calls",
    "to": 174
  }, {
    "from": 60,
    "label": "calls",
    "to": 174
  }, {
    "from": 60,
    "label": "calls",
    "to": 174
  }, {
    "from": 60,
    "label": "calls",
    "to": 174
  }, {
    "from": 16,
    "label": "calls",
    "to": 177
  }, {
    "from": 24,
    "label": "calls",
    "to": 177
  }, {
    "from": 38,
    "label": "calls",
    "to": 177
  }, {
    "from": 60,
    "label": "calls",
    "to": 177
  }, {
    "from": 1,
    "label": "contains",
    "to": 149
  }, {
    "from": 149,
    "label": "declares",
    "to": 13
  }, {
    "from": 149,
    "label": "declares",
    "to": 16
  }, {
    "from": 149,
    "label": "declares",
    "to": 24
  }, {
    "from": 149,
    "label": "declares",
    "to": 38
  }, {
    "from": 149,
    "label": "declares",
    "to": 57
  }, {
    "from": 149,
    "label": "declares",
    "to": 60
  }, {
    "from": 149,
    "label": "declares",
    "to": 104
  }, {
    "from": 149,
    "label": "declares",
    "to": 117
  }, {
    "from": 149,
    "label": "declares",
    "to": 139
  }, {
    "from": 158,
    "label": "calls",
    "to": 38
  }, {
    "from": 158,
    "label": "calls",
    "to": 104
  }, {
    "from": 159,
    "label": "calls",
    "to": 60
  }, {
    "from": 160,
    "label": "calls",
    "to": 104
  }, {
    "from": 161,
    "label": "calls",
    "to": 16
  }, {
    "from": 162,
    "label": "calls",
    "to": 60
  }, {
    "from": 164,
    "label": "calls",
    "to": 60
  }, {
    "from": 163,
    "label": "calls",
    "to": 24
  }, {
    "from": 164,
    "label": "calls",
    "to": 104
  }, {
    "from": 163,
    "label": "calls",
    "to": 57
  }, {
    "from": 165,
    "label": "calls",
    "to": 104
  }, {
    "from": 165,
    "label": "calls",
    "to": 139
  }, {
    "from": 168,
    "label": "calls",
    "to": 104
  }, {
    "from": 169,
    "label": "calls",
    "to": 60
  }, {
    "from": 172,
    "label": "calls",
    "to": 38
  }, {
    "from": 171,
    "label": "calls",
    "to": 104
  }, {
    "from": 172,
    "label": "calls",
    "to": 104
  }, {
    "from": 171,
    "label": "calls",
    "to": 139
  }, {
    "from": 175,
    "label": "calls",
    "to": 139
  }, {
    "from": 175,
    "label": "calls",
    "to": 13
  }, {
    "from": 176,
    "label": "calls",
    "to": 13
  }, {
    "from": 176,
    "label": "calls",
    "to": 13
  }, {
    "from": 175,
    "label": "calls",
    "to": 57
  }, {
    "from": 1,
    "label": "contains",
    "to": 193
  }, {
    "from": 1,
    "label": "contains",
    "to": 194
  }, {
    "from": 194,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "requires",
    "to": 188
  }, {
    "from": 194,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "requires",
    "to": 187
  }, {
    "from": 194,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "requires",
    "to": 192
  }, {
    "from": 194,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "requires",
    "to": 189
  }, {
    "from": 194,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "requires",
    "to": 190
  }, {
    "from": 194,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "requires",
    "to": 191
  }, {
    "from": 194,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "requires",
    "to": 186
  }, {
    "from": 194,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "requires",
    "to": 185
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "fetch",
    "type": "module"
  }, {
    "id": 2,
    "text": "function build_rockspec(rockspec_file, need_to_fetch, minimal_mode, deps_mode)\r\n   assert(type(rockspec_file) == \"string\")\r\n   assert(type(need_to_fetch) == \"boolean\")\r\n\r\n   local rockspec, err, errcode = fetch.load_rockspec(rockspec_file)\r\n   if err then\r\n      return nil, err, errcode\r\n   elseif not rockspec.build then\r\n      return nil, \"Rockspec error: build table not specified\"\r\n   elseif not rockspec.build.type then\r\n      return nil, \"Rockspec error: build type not specified\"\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      local ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then\r\n         return nil, err, errcode\r\n      end\r\n   end\r\n\r\n   local ok, err, errcode = deps.check_external_deps(rockspec, \"build\")\r\n   if err then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   local name, version = rockspec.name, rockspec.version\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n\r\n   if not minimal_mode then\r\n      local _, source_dir\r\n      if need_to_fetch then\r\n         ok, source_dir, errcode = fetch.fetch_sources(rockspec, true)\r\n         if not ok then\r\n            return nil, source_dir, errcode\r\n         end\r\n         local ok, err = fs.change_dir(source_dir)\r\n         if not ok then return nil, err end\r\n      elseif rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n      end\r\n      fs.change_dir(rockspec.source.dir)\r\n   end\r\n   \r\n   local dirs = {\r\n      lua = { name = path.lua_dir(name, version), is_module_path = true },\r\n      lib = { name = path.lib_dir(name, version), is_module_path = true },\r\n      conf = { name = path.conf_dir(name, version), is_module_path = false },\r\n      bin = { name = path.bin_dir(name, version), is_module_path = false },\r\n   }\r\n   \r\n   for _, d in pairs(dirs) do\r\n      local ok, err = fs.make_dir(d.name)\r\n      if not ok then return nil, err end\r\n   end\r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n\r\n   local build = rockspec.build\r\n   \r\n   if not minimal_mode then\r\n      ok, err = apply_patches(rockspec)\r\n      if err then\r\n         return nil, err\r\n      end\r\n   end\r\n   \r\n   if build.type ~= \"none\" then\r\n\r\n      -- Temporary compatibility\r\n      if build.type == \"module\" then\r\n         util.printout(\"Do not use 'module' as a build type. Use 'builtin' instead.\")\r\n         build.type = \"builtin\"\r\n      end\r\n\r\n      if cfg.accepted_build_types and util.array_contains(cfg.accepted_build_types, build.type) then\r\n         return nil, \"This rockspec uses the '\"..build.type..\"' build type, which is blocked by the 'accepted_build_types' setting in your LuaRocks configuration.\"\r\n      end\r\n\r\n      local build_type\r\n      ok, build_type = pcall(require, \"luarocks.build.\" .. build.type)\r\n      if not ok or not type(build_type) == \"table\" then\r\n         return nil, \"Failed initializing build back-end for build type '\"..build.type..\"': \"..build_type\r\n      end\r\n  \r\n      ok, err = build_type.run(rockspec)\r\n      if not ok then\r\n         return nil, \"Build error: \" .. err\r\n      end\r\n   end\r\n\r\n   if build.install then\r\n      for id, install_dir in pairs(dirs) do\r\n         ok, err = install_files(build.install[id], install_dir.name, install_dir.is_module_path)\r\n         if not ok then \r\n            return nil, err\r\n         end\r\n      end\r\n   end\r\n   \r\n   local copy_directories = build.copy_directories\r\n   local copying_default = false\r\n   if not copy_directories then\r\n      copy_directories = {\"doc\"}\r\n      copying_default = true\r\n   end\r\n\r\n   for _, copy_dir in pairs(copy_directories) do\r\n      if fs.is_dir(copy_dir) then\r\n         local dest = dir.path(path.install_dir(name, version), copy_dir)\r\n         fs.make_dir(dest)\r\n         fs.copy_contents(copy_dir, dest)\r\n      else\r\n         if not copying_default then\r\n            return nil, \"Directory '\"..copy_dir..\"' not found\"\r\n         end\r\n      end\r\n   end\r\n\r\n   for _, d in pairs(dirs) do\r\n      fs.remove_dir_if_empty(d.name)\r\n   end\r\n\r\n   fs.pop_dir()\r\n   \r\n   fs.copy(rockspec.local_filename, path.rockspec_file(name, version))\r\n   if need_to_fetch then\r\n      fs.pop_dir()\r\n   end\r\n\r\n   ok, err = manif.make_rock_manifest(name, version)\r\n   if err then return nil, err end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n\r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n\r\n   local license = \"\"\r\n   if rockspec.description and rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now built and installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function build_rock(rock_file, need_to_fetch, deps_mode)\r\n   assert(type(rock_file) == \"string\")\r\n   assert(type(need_to_fetch) == \"boolean\")\r\n  \r\n   local unpack_dir, err, errcode = fetch.fetch_and_unpack_rock(rock_file)\r\n   if not unpack_dir then\r\n      return nil, err, errcode\r\n   end\r\n   local rockspec_file = path.rockspec_name_from_rock(rock_file)\r\n   local ok, err = fs.change_dir(unpack_dir)\r\n   if not ok then return nil, err end\r\n   local ok, err, errcode = build_rockspec(rockspec_file, need_to_fetch, false, deps_mode)\r\n   fs.pop_dir()\r\n   return ok, err, errcode\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function compare_versions(a, b)\r\n   return parse_version(a) > parse_version(b)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function parse_dep(dep)\r\n   assert(type(dep) == \"string\")\r\n\r\n   local name, rest = dep:match(\"^%s*([a-zA-Z0-9][a-zA-Z0-9%.%-%_]*)%s*(.*)\")\r\n   if not name then return nil, \"failed to extract dependency name from '\"..tostring(dep)..\"'\" end\r\n   local constraints, err = parse_constraints(rest)\r\n   if not constraints then return nil, err end\r\n   return { name = name, constraints = constraints }\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function scan_deps(results, missing, manifest, name, version, deps_mode)\r\n   assert(type(results) == \"table\")\r\n   assert(type(missing) == \"table\")\r\n   assert(type(manifest) == \"table\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local fetch = require(\"luarocks.fetch\")\r\n\r\n   local err\r\n   if results[name] then\r\n      return results, missing\r\n   end\r\n   if not manifest.dependencies then manifest.dependencies = {} end\r\n   local dependencies = manifest.dependencies\r\n   if not dependencies[name] then dependencies[name] = {} end\r\n   local dependencies_name = dependencies[name]\r\n   local deplist = dependencies_name[version]\r\n   local rockspec, err\r\n   if not deplist then\r\n      rockspec, err = fetch.load_local_rockspec(path.rockspec_file(name, version), false)\r\n      if err then\r\n         missing[name..\" \"..version] = err\r\n         return results, missing\r\n      end\r\n      dependencies_name[version] = rockspec.dependencies\r\n   else\r\n      rockspec = { dependencies = deplist }\r\n   end\r\n   local matched, failures = match_deps(rockspec, nil, deps_mode)\r\n   results[name] = results\r\n   for _, match in pairs(matched) do\r\n      results, missing = scan_deps(results, missing, manifest, match.name, match.version, deps_mode)\r\n   end\r\n   if next(failures) then\r\n      for _, failure in pairs(failures) do\r\n         missing[show_dep(failure)] = \"failed\"\r\n      end\r\n   end\r\n   results[name] = version\r\n   return results, missing\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function dir_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n   return (pathname:gsub(\"/*$\", \"\"):match(\"(.*)[/]+[^/]*\")) or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function split_url(url)\r\n   assert(type(url) == \"string\")\r\n   \r\n   local protocol, pathname = url:match(\"^([^:]*)://(.*)\")\r\n   if not protocol then\r\n      protocol = \"file\"\r\n      pathname = url\r\n   end\r\n   return protocol, pathname\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if not name then\r\n      return nil, \"Argument missing. \"..util.see_help(\"doc\")\r\n   end\r\n\r\n   local repo\r\n   name, version, repo = show.pick_installed_rock(name, version, flags[\"tree\"])\r\n   if not name then\r\n      return nil, version\r\n   end\r\n   \r\n   local rockspec, err = fetch.load_local_rockspec(path.rockspec_file(name, version, repo))\r\n   if not rockspec then return nil,err end\r\n   local descript = rockspec.description or {}\r\n\r\n   if flags[\"homepage\"] then\r\n      if not descript.homepage then\r\n         return nil, \"No 'homepage' field in rockspec for \"..name..\" \"..version\r\n      end\r\n      util.printout(\"Opening \"..descript.homepage..\" ...\")\r\n      fs.browser(descript.homepage)\r\n      return true\r\n   end\r\n\r\n   local directory = path.install_dir(name,version,repo)\r\n   \r\n   local docdir\r\n   local directories = { \"doc\", \"docs\" }\r\n   for _, d in ipairs(directories) do\r\n      local dirname = dir.path(directory, d)\r\n      if fs.is_dir(dirname) then\r\n         docdir = dirname\r\n         break\r\n      end\r\n   end\r\n   if not docdir then\r\n      if descript.homepage and not flags[\"list\"] then\r\n         util.printout(\"Local documentation directory not found -- opening \"..descript.homepage..\" ...\")\r\n         fs.browser(descript.homepage)\r\n         return true\r\n      end\r\n      return nil, \"Documentation directory not found for \"..name..\" \"..version\r\n   end\r\n\r\n   docdir = dir.normalize(docdir):gsub(\"/+\", \"/\")\r\n   local files = fs.find(docdir)\r\n   local htmlpatt = \"%.html?$\"\r\n   local extensions = { htmlpatt, \"%.md$\", \"%.txt$\",  \"%.textile$\", \"\" }\r\n   local basenames = { \"index\", \"readme\", \"manual\" }\r\n   \r\n   local porcelain = flags[\"porcelain\"]\r\n   if #files > 0 then\r\n      util.title(\"Documentation files for \"..name..\" \"..version, porcelain)\r\n      if porcelain then\r\n         for _, file in ipairs(files) do\r\n            util.printout(docdir..\"/\"..file)\r\n         end\r\n      else\r\n         util.printout(docdir..\"/\")\r\n         for _, file in ipairs(files) do\r\n            util.printout(\"\\t\"..file)\r\n         end\r\n      end\r\n   end\r\n   \r\n   if flags[\"list\"] then\r\n      return true\r\n   end\r\n   \r\n   for _, extension in ipairs(extensions) do\r\n      for _, basename in ipairs(basenames) do\r\n         local filename = basename..extension\r\n         local found\r\n         for _, file in ipairs(files) do\r\n            if file:lower():match(filename) and ((not found) or #file < #found) then\r\n               found = file\r\n            end\r\n         end\r\n         if found then\r\n            local pathname = dir.path(docdir, found)\r\n            util.printout()\r\n            util.printout(\"Opening \"..pathname..\" ...\")\r\n            util.printout()\r\n            local ok = fs.browser(pathname)\r\n            if not ok and not pathname:match(htmlpatt) then\r\n               local fd = io.open(pathname, \"r\")\r\n               util.printout(fd:read(\"*a\"))\r\n               fd:close()\r\n            end\r\n            return true\r\n         end\r\n      end\r\n   end\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function get_file(filename)\r\n   local protocol, pathname = dir.split_url(filename)\r\n   if protocol == \"file\" then\r\n      local ok, err = fs.copy(pathname, fs.current_dir())\r\n      if ok then\r\n         return pathname\r\n      else\r\n         return nil, err\r\n      end\r\n   else\r\n      return fetch.fetch_url(filename)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function get_sources(rockspec, extract, dest_dir)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(dest_dir) == \"string\" or not dest_dir)\r\n\r\n   local git_cmd = rockspec.variables.GIT\r\n   local name_version = rockspec.name .. \"-\" .. rockspec.version\r\n   local module = dir.base_name(rockspec.source.url)\r\n   -- Strip off .git from base name if present\r\n   module = module:gsub(\"%.git$\", \"\")\r\n\r\n   local store_dir\r\n   if not dest_dir then\r\n      store_dir = fs.make_temp_dir(name_version)\r\n      if not store_dir then\r\n         return nil, \"Failed creating temporary directory.\"\r\n      end\r\n      util.schedule_function(fs.delete, store_dir)\r\n   else\r\n      store_dir = dest_dir\r\n   end\r\n   store_dir = fs.absolute_name(store_dir)\r\n   local ok, err = fs.change_dir(store_dir)\r\n   if not ok then return nil, err end\r\n\r\n   local command = {git_cmd, \"clone\", \"--depth=1\", rockspec.source.url, module}\r\n   local tag_or_branch = rockspec.source.tag or rockspec.source.branch\r\n   -- If the tag or branch is explicitly set to \"master\" in the rockspec, then\r\n   -- we can avoid passing it to Git since it's the default.\r\n   if tag_or_branch == \"master\" then tag_or_branch = nil end\r\n   if tag_or_branch then\r\n      if git_can_clone_by_tag(git_cmd) then\r\n         -- The argument to `--branch` can actually be a branch or a tag as of\r\n         -- Git 1.7.10.\r\n         table.insert(command, 4, \"--branch=\" .. tag_or_branch)\r\n      end\r\n   end\r\n   if not fs.execute(unpack(command)) then\r\n      return nil, \"Failed cloning git repository.\"\r\n   end\r\n   local ok, err = fs.change_dir(module)\r\n   if not ok then return nil, err end\r\n   if tag_or_branch and not git_can_clone_by_tag() then\r\n      local checkout_command = {git_cmd, \"checkout\", tag_or_branch}\r\n      if not fs.execute(unpack(checkout_command)) then\r\n         return nil, 'Failed to check out the \"' .. tag_or_branch ..'\" tag or branch.'\r\n      end\r\n   end\r\n\r\n   fs.delete(dir.path(store_dir, module, \".git\"))\r\n   fs.delete(dir.path(store_dir, module, \".gitignore\"))\r\n   fs.pop_dir()\r\n   fs.pop_dir()\r\n   return module, store_dir\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function is_basic_protocol(protocol, remote)\r\n   return protocol == \"http\" or protocol == \"https\" or protocol == \"ftp\" or (not remote and protocol == \"file\")\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function fetch_url(url, filename, cache)\r\n   assert(type(url) == \"string\")\r\n   assert(type(filename) == \"string\" or not filename)\r\n\r\n   local protocol, pathname = dir.split_url(url)\r\n   if protocol == \"file\" then\r\n      return fs.absolute_name(pathname)\r\n   elseif is_basic_protocol(protocol, true) then\r\n      local ok, filename = fs.download(url, filename, cache)\r\n      if not ok then\r\n         return nil, \"Failed downloading \"..url..(filename and \" - \"..filename or \"\"), \"network\"\r\n      end\r\n      return filename\r\n   else\r\n      return nil, \"Unsupported protocol \"..protocol\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "assert(type(url) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert(type(filename) == \"string\" or not filename)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local protocol, pathname = dir.split_url(url)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if protocol == \"file\" then\r\n      return fs.absolute_name(pathname)\r\n   elseif is_basic_protocol(protocol, true) then\r\n      local ok, filename = fs.download(url, filename, cache)\r\n      if not ok then\r\n         return nil, \"Failed downloading \"..url..(filename and \" - \"..filename or \"\"), \"network\"\r\n      end\r\n      return filename\r\n   else\r\n      return nil, \"Unsupported protocol \"..protocol\r\n   end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "local ok, filename = fs.download(url, filename, cache)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if not ok then\r\n         return nil, \"Failed downloading \"..url..(filename and \" - \"..filename or \"\"), \"network\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function fetch_url_at_temp_dir(url, tmpname, filename)\r\n   assert(type(url) == \"string\")\r\n   assert(type(tmpname) == \"string\")\r\n   assert(type(filename) == \"string\" or not filename)\r\n   filename = filename or dir.base_name(url)\r\n\r\n   local protocol, pathname = dir.split_url(url)\r\n   if protocol == \"file\" then\r\n      if fs.exists(pathname) then\r\n         return pathname, dir.dir_name(fs.absolute_name(pathname))\r\n      else\r\n         return nil, \"File not found: \"..pathname\r\n      end\r\n   else\r\n      local temp_dir, err = fs.make_temp_dir(tmpname)\r\n      if not temp_dir then\r\n         return nil, \"Failed creating temporary directory \"..tmpname..\": \"..err\r\n      end\r\n      util.schedule_function(fs.delete, temp_dir)\r\n      local ok, err = fs.change_dir(temp_dir)\r\n      if not ok then return nil, err end\r\n      local file, err, errcode = fetch_url(url, filename)\r\n      fs.pop_dir()\r\n      if not file then\r\n         return nil, \"Error fetching file: \"..err, errcode\r\n      end\r\n      return file, temp_dir\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "assert(type(tmpname) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "filename = filename or dir.base_name(url)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if protocol == \"file\" then\r\n      if fs.exists(pathname) then\r\n         return pathname, dir.dir_name(fs.absolute_name(pathname))\r\n      else\r\n         return nil, \"File not found: \"..pathname\r\n      end\r\n   else\r\n      local temp_dir, err = fs.make_temp_dir(tmpname)\r\n      if not temp_dir then\r\n         return nil, \"Failed creating temporary directory \"..tmpname..\": \"..err\r\n      end\r\n      util.schedule_function(fs.delete, temp_dir)\r\n      local ok, err = fs.change_dir(temp_dir)\r\n      if not ok then return nil, err end\r\n      local file, err, errcode = fetch_url(url, filename)\r\n      fs.pop_dir()\r\n      if not file then\r\n         return nil, \"Error fetching file: \"..err, errcode\r\n      end\r\n      return file, temp_dir\r\n   end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "if fs.exists(pathname) then\r\n         return pathname, dir.dir_name(fs.absolute_name(pathname))\r\n      else\r\n         return nil, \"File not found: \"..pathname\r\n      end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "local temp_dir, err = fs.make_temp_dir(tmpname)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if not temp_dir then\r\n         return nil, \"Failed creating temporary directory \"..tmpname..\": \"..err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "util.schedule_function(fs.delete, temp_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local ok, err = fs.change_dir(temp_dir)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "local file, err, errcode = fetch_url(url, filename)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "fs.pop_dir()",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "if not file then\r\n         return nil, \"Error fetching file: \"..err, errcode\r\n      end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function fetch_and_unpack_rock(rock_file, dest)\r\n   assert(type(rock_file) == \"string\")\r\n   assert(type(dest) == \"string\" or not dest)\r\n\r\n   local name = dir.base_name(rock_file):match(\"(.*)%.[^.]*%.rock\")\r\n   \r\n   local rock_file, err, errcode = fetch_url_at_temp_dir(rock_file,\"luarocks-rock-\"..name)\r\n   if not rock_file then\r\n      return nil, \"Could not fetch rock file: \" .. err, errcode\r\n   end\r\n\r\n   rock_file = fs.absolute_name(rock_file)\r\n   local unpack_dir\r\n   if dest then\r\n      unpack_dir = dest\r\n      local ok, err = fs.make_dir(unpack_dir)\r\n      if not ok then\r\n         return nil, \"Failed unpacking rock file: \" .. err\r\n      end\r\n   else\r\n      unpack_dir = fs.make_temp_dir(name)\r\n   end\r\n   if not dest then\r\n      util.schedule_function(fs.delete, unpack_dir)\r\n   end\r\n   local ok, err = fs.change_dir(unpack_dir)\r\n   if not ok then return nil, err end\r\n   ok = fs.unzip(rock_file)\r\n   if not ok then\r\n      return nil, \"Failed unpacking rock file: \" .. rock_file\r\n   end\r\n   fs.pop_dir()\r\n   return unpack_dir\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "assert(type(rock_file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert(type(dest) == \"string\" or not dest)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local name = dir.base_name(rock_file):match(\"(.*)%.[^.]*%.rock\")",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local rock_file, err, errcode = fetch_url_at_temp_dir(rock_file,\"luarocks-rock-\"..name)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if not rock_file then\r\n      return nil, \"Could not fetch rock file: \" .. err, errcode\r\n   end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "rock_file = fs.absolute_name(rock_file)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "local unpack_dir",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if dest then\r\n      unpack_dir = dest\r\n      local ok, err = fs.make_dir(unpack_dir)\r\n      if not ok then\r\n         return nil, \"Failed unpacking rock file: \" .. err\r\n      end\r\n   else\r\n      unpack_dir = fs.make_temp_dir(name)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "unpack_dir = dest",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local ok, err = fs.make_dir(unpack_dir)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if not ok then\r\n         return nil, \"Failed unpacking rock file: \" .. err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "unpack_dir = fs.make_temp_dir(name)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if not dest then\r\n      util.schedule_function(fs.delete, unpack_dir)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "util.schedule_function(fs.delete, unpack_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local ok, err = fs.change_dir(unpack_dir)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "ok = fs.unzip(rock_file)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if not ok then\r\n      return nil, \"Failed unpacking rock file: \" .. rock_file\r\n   end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function url_to_base_dir(url)\r\n   local base = dir.base_name(url)\r\n   return base:gsub(\"%.[^.]*$\", \"\"):gsub(\"%.tar$\", \"\")\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local base = dir.base_name(url)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function load_local_rockspec(filename, quick)\r\n   assert(type(filename) == \"string\")\r\n   filename = fs.absolute_name(filename)\r\n   local rockspec, err = persist.load_into_table(filename)\r\n   if not rockspec then\r\n      return nil, \"Could not load rockspec file \"..filename..\" (\"..err..\")\"\r\n   end\r\n\r\n   local ok, err = true, nil\r\n   if not quick then\r\n      ok, err = type_check.type_check_rockspec(rockspec)\r\n      if not ok then\r\n         return nil, filename..\": \"..err\r\n      end\r\n   end\r\n   \r\n   if rockspec.rockspec_format then\r\n      if deps.compare_versions(rockspec.rockspec_format, type_check.rockspec_format) then\r\n         return nil, \"Rockspec format \"..rockspec.rockspec_format..\" is not supported, please upgrade LuaRocks.\"\r\n      end\r\n   end\r\n\r\n   util.platform_overrides(rockspec.build)\r\n   util.platform_overrides(rockspec.dependencies)\r\n   util.platform_overrides(rockspec.external_dependencies)\r\n   util.platform_overrides(rockspec.source)\r\n   util.platform_overrides(rockspec.hooks)\r\n\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      rockspec.name = rockspec.package:lower()\r\n   else\r\n      rockspec.name = basename:match(\"(.*)-[^-]*-[0-9]*\")\r\n      if not rockspec.name then\r\n         return nil, \"Expected filename in format 'name-version-revision.rockspec'.\"\r\n      end\r\n   end\r\n\r\n   local protocol, pathname = dir.split_url(rockspec.source.url)\r\n   if is_basic_protocol(protocol) then\r\n      rockspec.source.file = rockspec.source.file or dir.base_name(rockspec.source.url)\r\n   end\r\n   rockspec.source.protocol, rockspec.source.pathname = protocol, pathname\r\n\r\n   -- Temporary compatibility\r\n   if rockspec.source.cvs_module then rockspec.source.module = rockspec.source.cvs_module end\r\n   if rockspec.source.cvs_tag then rockspec.source.tag = rockspec.source.cvs_tag end\r\n\r\n   local name_version = rockspec.package:lower() .. \"-\" .. rockspec.version\r\n   if basename ~= \"rockspec\" and basename ~= name_version .. \".rockspec\" then\r\n      return nil, \"Inconsistency between rockspec filename (\"..basename..\") and its contents (\"..name_version..\".rockspec).\"\r\n   end\r\n\r\n   rockspec.local_filename = filename\r\n   local filebase = rockspec.source.file or rockspec.source.url\r\n   local base = url_to_base_dir(filebase)\r\n   rockspec.source.dir = rockspec.source.dir\r\n                      or rockspec.source.module\r\n                      or ((filebase:match(\".lua$\") or filebase:match(\".c$\")) and \".\")\r\n                      or base\r\n   if rockspec.dependencies then\r\n      for i = 1, #rockspec.dependencies do\r\n         local parsed, err = deps.parse_dep(rockspec.dependencies[i])\r\n         if not parsed then\r\n            return nil, \"Parse error processing dependency '\"..rockspec.dependencies[i]..\"': \"..tostring(err)\r\n         end\r\n         rockspec.dependencies[i] = parsed\r\n      end\r\n   else\r\n      rockspec.dependencies = {}\r\n   end\r\n   if not quick then\r\n      path.configure_paths(rockspec)\r\n   end\r\n\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "assert(type(filename) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "filename = fs.absolute_name(filename)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "local rockspec, err = persist.load_into_table(filename)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if not rockspec then\r\n      return nil, \"Could not load rockspec file \"..filename..\" (\"..err..\")\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "local ok, err = true, nil",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if not quick then\r\n      ok, err = type_check.type_check_rockspec(rockspec)\r\n      if not ok then\r\n         return nil, filename..\": \"..err\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "ok, err = type_check.type_check_rockspec(rockspec)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if not ok then\r\n         return nil, filename..\": \"..err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "if rockspec.rockspec_format then\r\n      if deps.compare_versions(rockspec.rockspec_format, type_check.rockspec_format) then\r\n         return nil, \"Rockspec format \"..rockspec.rockspec_format..\" is not supported, please upgrade LuaRocks.\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "if deps.compare_versions(rockspec.rockspec_format, type_check.rockspec_format) then\r\n         return nil, \"Rockspec format \"..rockspec.rockspec_format..\" is not supported, please upgrade LuaRocks.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "util.platform_overrides(rockspec.build)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "util.platform_overrides(rockspec.dependencies)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "util.platform_overrides(rockspec.external_dependencies)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "util.platform_overrides(rockspec.source)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "util.platform_overrides(rockspec.hooks)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "local basename = dir.base_name(filename)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if basename == \"rockspec\" then\r\n      rockspec.name = rockspec.package:lower()\r\n   else\r\n      rockspec.name = basename:match(\"(.*)-[^-]*-[0-9]*\")\r\n      if not rockspec.name then\r\n         return nil, \"Expected filename in format 'name-version-revision.rockspec'.\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "rockspec.name = rockspec.package:lower()",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "rockspec.name = basename:match(\"(.*)-[^-]*-[0-9]*\")",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if not rockspec.name then\r\n         return nil, \"Expected filename in format 'name-version-revision.rockspec'.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "local protocol, pathname = dir.split_url(rockspec.source.url)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if is_basic_protocol(protocol) then\r\n      rockspec.source.file = rockspec.source.file or dir.base_name(rockspec.source.url)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "rockspec.source.file = rockspec.source.file or dir.base_name(rockspec.source.url)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "rockspec.source.protocol, rockspec.source.pathname = protocol, pathname",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "if rockspec.source.cvs_module then rockspec.source.module = rockspec.source.cvs_module end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "rockspec.source.module = rockspec.source.cvs_module",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "if rockspec.source.cvs_tag then rockspec.source.tag = rockspec.source.cvs_tag end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "rockspec.source.tag = rockspec.source.cvs_tag",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "local name_version = rockspec.package:lower() .. \"-\" .. rockspec.version",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if basename ~= \"rockspec\" and basename ~= name_version .. \".rockspec\" then\r\n      return nil, \"Inconsistency between rockspec filename (\"..basename..\") and its contents (\"..name_version..\".rockspec).\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "rockspec.local_filename = filename",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local filebase = rockspec.source.file or rockspec.source.url",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local base = url_to_base_dir(filebase)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "rockspec.source.dir = rockspec.source.dir\r\n                      or rockspec.source.module\r\n                      or ((filebase:match(\".lua$\") or filebase:match(\".c$\")) and \".\")\r\n                      or base",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if rockspec.dependencies then\r\n      for i = 1, #rockspec.dependencies do\r\n         local parsed, err = deps.parse_dep(rockspec.dependencies[i])\r\n         if not parsed then\r\n            return nil, \"Parse error processing dependency '\"..rockspec.dependencies[i]..\"': \"..tostring(err)\r\n         end\r\n         rockspec.dependencies[i] = parsed\r\n      end\r\n   else\r\n      rockspec.dependencies = {}\r\n   end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "for i = 1, #rockspec.dependencies do\r\n         local parsed, err = deps.parse_dep(rockspec.dependencies[i])\r\n         if not parsed then\r\n            return nil, \"Parse error processing dependency '\"..rockspec.dependencies[i]..\"': \"..tostring(err)\r\n         end\r\n         rockspec.dependencies[i] = parsed\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 97,
    "text": "local parsed, err = deps.parse_dep(rockspec.dependencies[i])",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if not parsed then\r\n            return nil, \"Parse error processing dependency '\"..rockspec.dependencies[i]..\"': \"..tostring(err)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "rockspec.dependencies[i] = parsed",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "rockspec.dependencies = {}",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "if not quick then\r\n      path.configure_paths(rockspec)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "path.configure_paths(rockspec)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function load_rockspec(filename, location)\r\n   assert(type(filename) == \"string\")\r\n\r\n   local name\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      name = \"rockspec\"\r\n   else\r\n      name = basename:match(\"(.*)%.rockspec\")\r\n      if not name then\r\n         return nil, \"Filename '\"..filename..\"' does not look like a rockspec.\"\r\n      end\r\n   end\r\n   \r\n   local err, errcode\r\n   if location then\r\n      local ok, err = fs.change_dir(location)\r\n      if not ok then return nil, err end\r\n      filename, err = fetch_url(filename)\r\n      fs.pop_dir()\r\n   else\r\n      filename, err, errcode = fetch_url_at_temp_dir(filename,\"luarocks-rockspec-\"..name)\r\n   end\r\n   if not filename then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   return load_local_rockspec(filename)\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if basename == \"rockspec\" then\r\n      name = \"rockspec\"\r\n   else\r\n      name = basename:match(\"(.*)%.rockspec\")\r\n      if not name then\r\n         return nil, \"Filename '\"..filename..\"' does not look like a rockspec.\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "name = \"rockspec\"",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "name = basename:match(\"(.*)%.rockspec\")",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "if not name then\r\n         return nil, \"Filename '\"..filename..\"' does not look like a rockspec.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "local err, errcode",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if location then\r\n      local ok, err = fs.change_dir(location)\r\n      if not ok then return nil, err end\r\n      filename, err = fetch_url(filename)\r\n      fs.pop_dir()\r\n   else\r\n      filename, err, errcode = fetch_url_at_temp_dir(filename,\"luarocks-rockspec-\"..name)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "local ok, err = fs.change_dir(location)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "filename, err = fetch_url(filename)",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "filename, err, errcode = fetch_url_at_temp_dir(filename,\"luarocks-rockspec-\"..name)",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "if not filename then\r\n      return nil, err, errcode\r\n   end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function get_sources(rockspec, extract, dest_dir)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(extract) == \"boolean\")\r\n   assert(type(dest_dir) == \"string\" or not dest_dir)\r\n\r\n   local url = rockspec.source.url\r\n   local name = rockspec.name..\"-\"..rockspec.version\r\n   local filename = rockspec.source.file\r\n   local source_file, store_dir, err, errcode\r\n   if dest_dir then\r\n      local ok, err = fs.change_dir(dest_dir)\r\n      if not ok then return nil, err, \"dest_dir\" end\r\n      source_file, err, errcode = fetch_url(url, filename)\r\n      fs.pop_dir()\r\n      store_dir = dest_dir\r\n   else\r\n      source_file, store_dir, errcode = fetch_url_at_temp_dir(url, \"luarocks-source-\"..name, filename)\r\n   end\r\n   if not source_file then\r\n      return nil, err or store_dir, errcode\r\n   end\r\n   if rockspec.source.md5 then\r\n      if not fs.check_md5(source_file, rockspec.source.md5) then\r\n         return nil, \"MD5 check for \"..filename..\" has failed.\", \"md5\"\r\n      end\r\n   end\r\n   if extract then\r\n      local ok, err = fs.change_dir(store_dir)\r\n      if not ok then return nil, err end\r\n      fs.unpack_archive(rockspec.source.file)\r\n      if not fs.exists(rockspec.source.dir) then\r\n         return nil, \"Directory \"..rockspec.source.dir..\" not found inside archive \"..rockspec.source.file, \"source.dir\", source_file, store_dir\r\n      end\r\n      fs.pop_dir()\r\n   end\r\n   return source_file, store_dir\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "assert(type(rockspec) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert(type(extract) == \"boolean\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "assert(type(dest_dir) == \"string\" or not dest_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "local url = rockspec.source.url",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local name = rockspec.name..\"-\"..rockspec.version",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "local filename = rockspec.source.file",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "local source_file, store_dir, err, errcode",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "if dest_dir then\r\n      local ok, err = fs.change_dir(dest_dir)\r\n      if not ok then return nil, err, \"dest_dir\" end\r\n      source_file, err, errcode = fetch_url(url, filename)\r\n      fs.pop_dir()\r\n      store_dir = dest_dir\r\n   else\r\n      source_file, store_dir, errcode = fetch_url_at_temp_dir(url, \"luarocks-source-\"..name, filename)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "local ok, err = fs.change_dir(dest_dir)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "if not ok then return nil, err, \"dest_dir\" end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "source_file, err, errcode = fetch_url(url, filename)",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "store_dir = dest_dir",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "source_file, store_dir, errcode = fetch_url_at_temp_dir(url, \"luarocks-source-\"..name, filename)",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "if not source_file then\r\n      return nil, err or store_dir, errcode\r\n   end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "if rockspec.source.md5 then\r\n      if not fs.check_md5(source_file, rockspec.source.md5) then\r\n         return nil, \"MD5 check for \"..filename..\" has failed.\", \"md5\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "if not fs.check_md5(source_file, rockspec.source.md5) then\r\n         return nil, \"MD5 check for \"..filename..\" has failed.\", \"md5\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "if extract then\r\n      local ok, err = fs.change_dir(store_dir)\r\n      if not ok then return nil, err end\r\n      fs.unpack_archive(rockspec.source.file)\r\n      if not fs.exists(rockspec.source.dir) then\r\n         return nil, \"Directory \"..rockspec.source.dir..\" not found inside archive \"..rockspec.source.file, \"source.dir\", source_file, store_dir\r\n      end\r\n      fs.pop_dir()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "local ok, err = fs.change_dir(store_dir)",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "fs.unpack_archive(rockspec.source.file)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "if not fs.exists(rockspec.source.dir) then\r\n         return nil, \"Directory \"..rockspec.source.dir..\" not found inside archive \"..rockspec.source.file, \"source.dir\", source_file, store_dir\r\n      end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function fetch_sources(rockspec, extract, dest_dir)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(extract) == \"boolean\")\r\n   assert(type(dest_dir) == \"string\" or not dest_dir)\r\n\r\n   local protocol = rockspec.source.protocol\r\n   local ok, proto\r\n   if is_basic_protocol(protocol) then\r\n      proto = require(\"luarocks.fetch\")\r\n   else\r\n      ok, proto = pcall(require, \"luarocks.fetch.\"..protocol:gsub(\"[+-]\", \"_\"))\r\n      if not ok then\r\n         return nil, \"Unknown protocol \"..protocol\r\n      end\r\n   end\r\n   \r\n   if cfg.only_sources_from\r\n   and rockspec.source.pathname\r\n   and #rockspec.source.pathname > 0 then\r\n      if #cfg.only_sources_from == 0 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- download from remote servers disabled\"\r\n      elseif rockspec.source.pathname:find(cfg.only_sources_from, 1, true) ~= 1 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- only downloading from \"..cfg.only_sources_from\r\n      end\r\n   end\r\n   return proto.get_sources(rockspec, extract, dest_dir)\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "local protocol = rockspec.source.protocol",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "local ok, proto",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "if is_basic_protocol(protocol) then\r\n      proto = require(\"luarocks.fetch\")\r\n   else\r\n      ok, proto = pcall(require, \"luarocks.fetch.\"..protocol:gsub(\"[+-]\", \"_\"))\r\n      if not ok then\r\n         return nil, \"Unknown protocol \"..protocol\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "proto = require(\"luarocks.fetch\")",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "ok, proto = pcall(require, \"luarocks.fetch.\"..protocol:gsub(\"[+-]\", \"_\"))",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "if not ok then\r\n         return nil, \"Unknown protocol \"..protocol\r\n      end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "if cfg.only_sources_from\r\n   and rockspec.source.pathname\r\n   and #rockspec.source.pathname > 0 then\r\n      if #cfg.only_sources_from == 0 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- download from remote servers disabled\"\r\n      elseif rockspec.source.pathname:find(cfg.only_sources_from, 1, true) ~= 1 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- only downloading from \"..cfg.only_sources_from\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 147,
    "text": "if #cfg.only_sources_from == 0 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- download from remote servers disabled\"\r\n      elseif rockspec.source.pathname:find(cfg.only_sources_from, 1, true) ~= 1 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- only downloading from \"..cfg.only_sources_from\r\n      end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "",
    "type": "function container"
  }, {
    "id": 150,
    "text": "function make_temp_dir(name)\r\n   assert(type(name) == \"string\")\r\n   name = dir.normalize(name)\r\n\r\n   local temp_dir = (os.getenv(\"TMP\") or \"/tmp\") .. \"/luarocks_\" .. name:gsub(dir.separator, \"_\") .. \"-\" .. tostring(math.floor(math.random() * 10000))\r\n   local ok, err = fs.make_dir(temp_dir)\r\n   if ok then\r\n      return temp_dir\r\n   else\r\n      return nil, err\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "function check_md5(file, md5sum)\r\n   file = dir.normalize(file)\r\n   local computed, msg = fs.get_md5(file)\r\n   if not computed then\r\n      return false, msg\r\n   end\r\n   if computed:match(\"^\"..md5sum) then\r\n      return true\r\n   else\r\n      return false, \"Mismatch MD5 hash for file \"..file\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "function change_dir(d)\r\n   table.insert(dir_stack, lfs.currentdir())\r\n   d = dir.normalize(d)\r\n   return lfs.chdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "function pop_dir()\r\n   local d = table.remove(dir_stack)\r\n   if d then\r\n      lfs.chdir(d)\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "function make_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   directory = dir.normalize(directory)\r\n   local path = nil\r\n   if directory:sub(2, 2) == \":\" then\r\n     path = directory:sub(1, 2)\r\n     directory = directory:sub(4)\r\n   else\r\n     if directory:match(\"^/\") then\r\n        path = \"\"\r\n     end\r\n   end\r\n   for d in directory:gmatch(\"([^\"..dir.separator..\"]+)\"..dir.separator..\"*\") do\r\n      path = path and path .. dir.separator .. d or d\r\n      local mode = lfs.attributes(path, \"mode\")\r\n      if not mode then\r\n         local ok, err = lfs.mkdir(path)\r\n         if not ok then\r\n            return false, err\r\n         end\r\n      elseif mode ~= \"directory\" then\r\n         return false, path..\" is not a directory\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "function unzip(zipfile)\r\n   local zipfile, err = luazip.open(zipfile)\r\n   if not zipfile then return nil, err end\r\n   local files = zipfile:files()\r\n   local file = files()\r\n   repeat\r\n      if file.filename:sub(#file.filename) == \"/\" then\r\n         local ok, err = fs.make_dir(dir.path(fs.current_dir(), file.filename))\r\n         if not ok then return nil, err end\r\n      else\r\n         local rf, err = zipfile:open(file.filename)\r\n         if not rf then zipfile:close(); return nil, err end\r\n         local contents = rf:read(\"*a\")\r\n         rf:close()\r\n         local wf, err = io.open(dir.path(fs.current_dir(), file.filename), \"wb\")\r\n         if not wf then zipfile:close(); return nil, err end\r\n         wf:write(contents)\r\n         wf:close()\r\n      end\r\n      file = files()\r\n   until not file\r\n   zipfile:close()\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "function download(url, filename, cache)\r\n   assert(type(url) == \"string\")\r\n   assert(type(filename) == \"string\" or not filename)\r\n\r\n   filename = fs.absolute_name(filename or dir.base_name(url))\r\n   \r\n   local content, err\r\n   if util.starts_with(url, \"http:\") then\r\n      content, err = http_request(url, http, cache and filename)\r\n   elseif util.starts_with(url, \"ftp:\") then\r\n      content, err = ftp.get(url)\r\n   elseif util.starts_with(url, \"https:\") then\r\n      if luasec_ok then\r\n         content, err = http_request(url, https, cache and filename)\r\n      else\r\n         err = \"Unsupported protocol - install luasec to get HTTPS support.\"\r\n      end\r\n   else\r\n      err = \"Unsupported protocol\"\r\n   end\r\n   if cache and content == true then\r\n      return true, filename\r\n   end\r\n   if not content then\r\n      return false, tostring(err)\r\n   end\r\n   local file = io.open(filename, \"wb\")\r\n   if not file then return false end\r\n   file:write(content)\r\n   file:close()\r\n   return true, filename\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "function install_binary_rock(rock_file, deps_mode)\r\n   assert(type(rock_file) == \"string\")\r\n\r\n   local name, version, arch = path.parse_name(rock_file)\r\n   if not name then\r\n      return nil, \"Filename \"..rock_file..\" does not match format 'name-version-revision.arch.rock'.\"\r\n   end\r\n   \r\n   if arch ~= \"all\" and arch ~= cfg.arch then\r\n      return nil, \"Incompatible architecture \"..arch, \"arch\"\r\n   end\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n   \r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n   \r\n   local ok, err, errcode = fetch.fetch_and_unpack_rock(rock_file, path.install_dir(name, version))\r\n   if not ok then return nil, err, errcode end\r\n   \r\n   local rockspec, err, errcode = fetch.load_rockspec(path.rockspec_file(name, version))\r\n   if err then\r\n      return nil, \"Failed loading rockspec for installed package: \"..err, errcode\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      ok, err, errcode = deps.check_external_deps(rockspec, \"install\")\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   -- For compatibility with .rock files built with LuaRocks 1\r\n   if not fs.exists(path.rock_manifest_file(name, version)) then\r\n      ok, err = manif.make_rock_manifest(name, version)\r\n      if err then return nil, err end\r\n   end\r\n\r\n   if deps_mode ~= \"none\" then\r\n      ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   local wrap_bin_scripts = true\r\n   if rockspec.deploy and rockspec.deploy.wrap_bin_scripts == false then\r\n      wrap_bin_scripts = false\r\n   end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n\r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n   \r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n   \r\n   local license = \"\"\r\n   if rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "function run(...)\r\n   local flags, input = util.parse_flags(...)\r\n   \r\n   if not input then\r\n      return nil, \"Argument missing. \"..util.see_help(\"lint\")\r\n   end\r\n   \r\n   local filename = input\r\n   if not input:match(\".rockspec$\") then\r\n      local err\r\n      filename, err = download.download(\"rockspec\", input)\r\n      if not filename then\r\n         return nil, err\r\n      end\r\n   end\r\n\r\n   local rs, err = fetch.load_local_rockspec(filename)\r\n   if not rs then\r\n      return nil, \"Failed loading rockspec: \"..err\r\n   end\r\n\r\n   local ok = true\r\n   \r\n   -- This should have been done in the type checker, \r\n   -- but it would break compatibility of other commands.\r\n   -- Making 'lint' alone be stricter shouldn't be a problem,\r\n   -- because extra-strict checks is what lint-type commands\r\n   -- are all about.\r\n   if not rs.description.license then\r\n      util.printerr(\"Rockspec has no license field.\")\r\n      ok = false\r\n   end\r\n\r\n   return ok, ok or filename..\" failed consistency checks.\"\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "function run(...)\r\n   local flags, rockspec = util.parse_flags(...)\r\n   assert(type(rockspec) == \"string\" or not rockspec)\r\n   \r\n   if not rockspec then\r\n      local files = fs.list_dir(fs.current_dir())\r\n      for _, file in pairs(files) do\r\n         if file:match(\"rockspec$\") then\r\n            if rockspec then\r\n               return nil, \"Please specify which rockspec file to use.\"\r\n            else\r\n               rockspec = file\r\n            end\r\n         end\r\n      end\r\n      if not rockspec then\r\n         return nil, \"Argument missing: please specify a rockspec to use on current directory.\"\r\n      end\r\n   end\r\n   if not rockspec:match(\"rockspec$\") then\r\n      return nil, \"Invalid argument: 'make' takes a rockspec as a parameter. \"..util.see_help(\"make\")\r\n   end\r\n\r\n   if flags[\"pack-binary-rock\"] then\r\n      local rspec, err, errcode = fetch.load_rockspec(rockspec)\r\n      if not rspec then\r\n         return nil, err\r\n      end\r\n      return pack.pack_binary_rock(rspec.name, rspec.version, build.build_rockspec, rockspec, false, true, deps.get_deps_mode(flags))\r\n   else\r\n      local ok, err = fs.check_command_permissions(flags)\r\n      if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n      ok, err = build.build_rockspec(rockspec, false, true, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "local function fetch_manifest_from(repo_url, filename)\r\n   local url = dir.path(repo_url, filename)\r\n   local name = repo_url:gsub(\"[/:]\",\"_\")\r\n   local cache_dir = dir.path(cfg.local_cache, name)\r\n   local ok = fs.make_dir(cache_dir)\r\n   if not ok then\r\n      return nil, \"Failed creating temporary cache directory \"..cache_dir\r\n   end\r\n   local file, err, errcode = fetch.fetch_url(url, dir.path(cache_dir, filename), true)\r\n   if not file then\r\n      return nil, \"Failed fetching manifest for \"..repo_url..(err and \" - \"..err or \"\"), errcode\r\n   end\r\n   return file\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local function filter_by_lua_version(manifest, lua_version, repodir, cache)\r\n   assert(type(manifest) == \"table\")\r\n   assert(type(repodir) == \"string\")\r\n   assert((not cache) or type(cache) == \"table\")\r\n   \r\n   cache = cache or {}\r\n   lua_version = deps.parse_version(lua_version)\r\n   for pkg, versions in pairs(manifest.repository) do\r\n      local to_remove = {}\r\n      for version, repositories in pairs(versions) do\r\n         for _, repo in ipairs(repositories) do\r\n            if repo.arch == \"rockspec\" then\r\n               local pathname = dir.path(repodir, pkg..\"-\"..version..\".rockspec\")\r\n               local rockspec, err = cache[pathname]\r\n               if not rockspec then\r\n                  rockspec, err = fetch.load_local_rockspec(pathname, true)\r\n               end\r\n               if rockspec then\r\n                  cache[pathname] = rockspec\r\n                  for _, dep in ipairs(rockspec.dependencies) do\r\n                     if dep.name == \"lua\" then \r\n                        if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end\r\n                        break\r\n                     end\r\n                  end\r\n               else\r\n                  util.printerr(\"Error loading rockspec for \"..pkg..\" \"..version..\": \"..err)\r\n               end\r\n            end\r\n         end\r\n      end\r\n      if next(to_remove) then\r\n         for _, incompat in ipairs(to_remove) do\r\n            versions[incompat] = nil\r\n         end\r\n         if not next(versions) then\r\n            manifest.repository[pkg] = nil\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "local function check_url_and_update_md5(out_rs, out_name)\r\n   local old_md5 = out_rs.source.md5\r\n   out_rs.source.md5 = nil\r\n   local file, temp_dir = fetch.fetch_url_at_temp_dir(out_rs.source.url, \"luarocks-new-version-\"..out_name)\r\n   if not file then\r\n      util.printerr(\"Warning: invalid URL - \"..temp_dir)\r\n      return true\r\n   end\r\n   util.printout(\"File successfully downloaded. Updating MD5 checksum...\")\r\n   out_rs.source.md5 = fs.get_md5(file)\r\n   local ok, err = fs.change_dir(temp_dir)\r\n   if not ok then return nil, err end\r\n   fs.unpack_archive(file)\r\n   local base_dir = out_rs.source.dir or fetch.url_to_base_dir(out_rs.source.url)\r\n   if not fs.exists(base_dir) then\r\n      util.printerr(\"Directory \"..base_dir..\" not found\")\r\n      local files = fs.list_dir()\r\n      if files[1] and fs.is_dir(files[1]) then\r\n         util.printerr(\"Found \"..files[1])\r\n         out_rs.source.dir = files[1]\r\n      end\r\n   end\r\n   fs.pop_dir()\r\n   return out_rs.source.md5 ~= old_md5\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "function run(...)\r\n   local flags, input, version, url = util.parse_flags(...)\r\n   if not input then\r\n      return nil, \"Missing arguments: expected program or rockspec. \"..util.see_help(\"new_version\")\r\n   end\r\n   assert(type(input) == \"string\")\r\n   \r\n   local filename = input\r\n   if not input:match(\".rockspec$\") then\r\n      local err\r\n      filename, err = download.download(\"rockspec\", input)\r\n      if not filename then\r\n         return nil, err\r\n      end\r\n   end\r\n   \r\n   local valid_rs, err = fetch.load_rockspec(filename)\r\n   if not valid_rs then\r\n      return nil, err\r\n   end\r\n\r\n   local old_ver, old_rev = valid_rs.version:match(\"(.*)%-(%d+)$\")\r\n   local new_ver, new_rev\r\n   \r\n   if version then\r\n      new_ver, new_rev = version:match(\"(.*)%-(%d+)$\")\r\n      new_rev = tonumber(new_rev)\r\n      if not new_rev then\r\n         new_ver = version\r\n         new_rev = 1\r\n      end\r\n   else\r\n      new_ver = old_ver\r\n      new_rev = tonumber(old_rev) + 1\r\n   end\r\n   local new_rockver = new_ver:gsub(\"-\", \"\")\r\n   \r\n   local out_rs = persist.load_into_table(filename)\r\n   local out_name = out_rs.package:lower()\r\n   out_rs.version = new_rockver..\"-\"..new_rev\r\n\r\n   local ok, err = update_source_section(out_rs, out_name, url, old_ver, new_ver)\r\n   if not ok then return nil, err end\r\n\r\n   if out_rs.build and out_rs.build.type == \"module\" then\r\n      out_rs.build.type = \"builtin\"\r\n   end\r\n   \r\n   local out_filename = out_name..\"-\"..new_rockver..\"-\"..new_rev..\".rockspec\"\r\n   \r\n   persist.save_from_table(out_filename, out_rs, type_check.rockspec_order)\r\n   \r\n   util.printout(\"Wrote \"..out_filename)\r\n\r\n   local valid_out_rs, err = fetch.load_local_rockspec(out_filename)\r\n   if not valid_out_rs then\r\n      return nil, \"Failed loading generated rockspec: \"..err\r\n   end\r\n   \r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "local function pack_source_rock(rockspec_file)\r\n   assert(type(rockspec_file) == \"string\")\r\n\r\n   local rockspec, err = fetch.load_rockspec(rockspec_file)\r\n   if err then\r\n      return nil, \"Error loading rockspec: \"..err\r\n   end\r\n   rockspec_file = rockspec.local_filename\r\n\r\n   local name_version = rockspec.name .. \"-\" .. rockspec.version\r\n   local rock_file = fs.absolute_name(name_version .. \".src.rock\")\r\n\r\n   local source_file, source_dir = fetch.fetch_sources(rockspec, false)\r\n   if not source_file then\r\n      return nil, source_dir\r\n   end\r\n   local ok, err = fs.change_dir(source_dir)\r\n   if not ok then return nil, err end\r\n\r\n   fs.delete(rock_file)\r\n   fs.copy(rockspec_file, source_dir)\r\n   if not fs.zip(rock_file, dir.base_name(rockspec_file), dir.base_name(source_file)) then\r\n      return nil, \"Failed packing \"..rock_file\r\n   end\r\n   fs.pop_dir()\r\n\r\n   return rock_file\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "function configure_paths(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n   local vars = {}\r\n   for k,v in pairs(cfg.variables) do\r\n      vars[k] = v\r\n   end\r\n   local name, version = rockspec.name, rockspec.version\r\n   vars.PREFIX = install_dir(name, version)\r\n   vars.LUADIR = lua_dir(name, version)\r\n   vars.LIBDIR = lib_dir(name, version)\r\n   vars.CONFDIR = conf_dir(name, version)\r\n   vars.BINDIR = bin_dir(name, version)\r\n   vars.DOCDIR = doc_dir(name, version)\r\n   rockspec.variables = vars\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "function load_into_table(filename, tbl)\r\n   assert(type(filename) == \"string\")\r\n   assert(type(tbl) == \"table\" or not tbl)\r\n\r\n   local result, chunk, ran, err\r\n   local result = tbl or {}\r\n   if _VERSION == \"Lua 5.1\" then -- Lua 5.1\r\n      chunk, err = loadfile(filename)\r\n      if chunk then\r\n         setfenv(chunk, result)\r\n         ran, err = pcall(chunk)\r\n      end\r\n   else -- Lua 5.2\r\n      chunk, err = loadfile(filename, \"t\", result)\r\n      if chunk then\r\n         ran, err = pcall(chunk)\r\n      end\r\n   end\r\n   \r\n   if not chunk then\r\n      if err:sub(1,5) ~= filename:sub(1,5) then\r\n         return false, err\r\n      end\r\n      return nil, \"Error loading file: \"..err\r\n   end\r\n   if not ran then\r\n      return nil, \"Error running file: \"..err\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "local function check_dependents(name, versions, deps_mode)\r\n   local dependents = {}\r\n   local blacklist = {}\r\n   blacklist[name] = {}\r\n   for version, _ in pairs(versions) do\r\n      blacklist[name][version] = true\r\n   end\r\n   local local_rocks = {}\r\n   local query_all = search.make_query(\"\")\r\n   query_all.exact_name = false\r\n   search.manifest_search(local_rocks, cfg.rocks_dir, query_all)\r\n   local_rocks[name] = nil\r\n   for rock_name, rock_versions in pairs(local_rocks) do\r\n      for rock_version, _ in pairs(rock_versions) do\r\n         local rockspec, err = fetch.load_rockspec(path.rockspec_file(rock_name, rock_version))\r\n         if rockspec then\r\n            local _, missing = deps.match_deps(rockspec, blacklist, deps_mode)\r\n            if missing[name] then\r\n               table.insert(dependents, { name = rock_name, version = rock_version })\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return dependents\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if not name then\r\n      return nil, \"Argument missing. \"..util.see_help(\"show\")\r\n   end\r\n   \r\n   local repo, repo_url\r\n   name, version, repo, repo_url = pick_installed_rock(name, version, flags[\"tree\"])\r\n   if not name then\r\n      return nil, version\r\n   end\r\n\r\n   local directory = path.install_dir(name,version,repo)\r\n   local rockspec_file = path.rockspec_file(name, version, repo)\r\n   local rockspec, err = fetch.load_local_rockspec(rockspec_file)\r\n   if not rockspec then return nil,err end\r\n\r\n   local descript = rockspec.description or {}\r\n   local manifest, err = manif.load_manifest(repo_url)\r\n   if not manifest then return nil,err end\r\n   local minfo = manifest.repository[name][version][1]\r\n\r\n   if flags[\"rock-tree\"] then util.printout(path.rocks_tree_to_string(repo))\r\n   elseif flags[\"rock-dir\"] then util.printout(directory)\r\n   elseif flags[\"home\"] then util.printout(descript.homepage)\r\n   elseif flags[\"modules\"] then util.printout(keys_as_string(minfo.modules))\r\n   elseif flags[\"deps\"] then util.printout(keys_as_string(minfo.dependencies))\r\n   elseif flags[\"rockspec\"] then util.printout(rockspec_file)\r\n   elseif flags[\"mversion\"] then util.printout(version)\r\n   else\r\n      util.printout()\r\n      util.printout(rockspec.package..\" \"..rockspec.version..\" - \"..(descript.summary or \"\"))\r\n      util.printout()\r\n      if descript.detailed then\r\n         util.printout(format_text(descript.detailed))\r\n         util.printout()\r\n      end\r\n      if descript.license then\r\n         util.printout(\"License: \", descript.license)\r\n      end\r\n      if descript.homepage then\r\n         util.printout(\"Homepage: \", descript.homepage)\r\n      end\r\n      util.printout(\"Installed in: \", path.rocks_tree_to_string(repo))\r\n      if next(minfo.modules) then\r\n         util.printout()\r\n         util.printout(\"Modules:\")\r\n         for mod, filename in util.sortedpairs(minfo.modules) do\r\n            util.printout(\"\\t\"..mod..\" (\"..path.which(mod, filename, name, version, repo, manifest)..\")\")\r\n         end\r\n      end\r\n      if next(minfo.dependencies) then\r\n         util.printout()\r\n         util.printout(\"Depends on:\")\r\n         util.printout(\"\\t\"..keys_as_string(minfo.dependencies, \"\\n\\t\"))\r\n      end\r\n      util.printout()\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "function type_check_rockspec(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n   if rockspec.rockspec_format then\r\n      -- relies on global state\r\n      load_extensions()\r\n   end\r\n   return type_check_table(rockspec, rockspec_types, \"\")\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "local function unpack_rockspec(rockspec_file, dir_name)\r\n   assert(type(rockspec_file) == \"string\")\r\n   assert(type(dir_name) == \"string\")\r\n\r\n   local rockspec, err = fetch.load_rockspec(rockspec_file)\r\n   if not rockspec then\r\n      return nil, \"Failed loading rockspec \"..rockspec_file..\": \"..err\r\n   end\r\n   local ok, err = fs.change_dir(dir_name)\r\n   if not ok then return nil, err end\r\n   local ok, sources_dir = fetch.fetch_sources(rockspec, true, \".\")\r\n   if not ok then\r\n      return nil, sources_dir\r\n   end\r\n   ok, err = fs.change_dir(sources_dir)\r\n   if not ok then return nil, err end\r\n   build.apply_patches(rockspec)\r\n   fs.pop_dir()\r\n   fs.pop_dir()\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "local function unpack_rock(rock_file, dir_name, kind)\r\n   assert(type(rock_file) == \"string\")\r\n   assert(type(dir_name) == \"string\")\r\n\r\n   local ok, err, errcode = fetch.fetch_and_unpack_rock(rock_file, dir_name)\r\n   if not ok then\r\n      return nil, \"Failed unzipping rock \"..rock_file, errcode\r\n   end\r\n   ok, err = fs.change_dir(dir_name)\r\n   if not ok then return nil, err end\r\n   local rockspec_file = dir_name..\".rockspec\"\r\n   local rockspec, err = fetch.load_rockspec(rockspec_file)\r\n   if not rockspec then\r\n      return nil, \"Failed loading rockspec \"..rockspec_file..\": \"..err\r\n   end\r\n   if kind == \"src\" then\r\n      if rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n         ok, err = fs.change_dir(rockspec.source.dir)\r\n         if not ok then return nil, err end\r\n         build.apply_patches(rockspec)\r\n         fs.pop_dir()\r\n      end\r\n   end\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 173,
    "text": "function schedule_function(f, ...)\r\n   assert(type(f) == \"function\")\r\n   \r\n   local item = { fn = f, args = {...} }\r\n   table.insert(scheduled_functions, item)\r\n   return item\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "function platform_overrides(tbl)\r\n   assert(type(tbl) == \"table\" or not tbl)\r\n   \r\n   local cfg = require(\"luarocks.cfg\")\r\n   \r\n   if not tbl then return end\r\n   \r\n   if tbl.platforms then\r\n      for _, platform in ipairs(cfg.platforms) do\r\n         local platform_tbl = tbl.platforms[platform]\r\n         if platform_tbl then\r\n            deep_merge(tbl, platform_tbl)\r\n         end\r\n      end\r\n   end\r\n   tbl.platforms = nil\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "local function get_url(rockspec)\r\n   local url = rockspec.source.url\r\n   local file, temp_dir, err_code, err_file, err_temp_dir = fetch.fetch_sources(rockspec, false)\r\n   if err_code == \"source.dir\" then\r\n      file, temp_dir = err_file, err_temp_dir\r\n   elseif not file then\r\n      util.warning(\"Could not fetch sources - \"..temp_dir)\r\n      return false\r\n   end\r\n   util.printout(\"File successfully downloaded. Making checksum and checking base dir...\")\r\n   local md5 = nil\r\n   if fetch.is_basic_protocol(rockspec.source.protocol) then\r\n      rockspec.source.md5 = fs.get_md5(file)\r\n   end\r\n   local ok, err = fs.change_dir(temp_dir)\r\n   if not ok then return false end\r\n   fs.unpack_archive(file)\r\n   local base_dir = fetch.url_to_base_dir(url)\r\n   if not fs.exists(base_dir) then\r\n      util.printerr(\"Directory \"..base_dir..\" not found\")\r\n      local files = fs.list_dir()\r\n      if files[1] and fs.is_dir(files[1]) then\r\n         util.printerr(\"Found \"..files[1])\r\n         base_dir = files[1]\r\n      end\r\n   end\r\n   fs.pop_dir()\r\n   return true, base_dir, temp_dir\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "function run(...)\r\n   local flags, name, version, url_or_dir = util.parse_flags(...)\r\n   \r\n   if not name then\r\n      return nil, \"Missing arguments. \"..util.see_help(\"write_rockspec\")\r\n   end\r\n\r\n   if name and not version then\r\n      url_or_dir = name\r\n      name = nil\r\n   elseif not url_or_dir then\r\n      url_or_dir = version\r\n   end\r\n\r\n   if flags[\"tag\"] == true then\r\n      return nil, \"Incorrect usage: --tag requires an argument. \"..util.see_help(\"write_rockspec\")\r\n   end\r\n   \r\n   if flags[\"tag\"] then\r\n      if not version then\r\n         version = flags[\"tag\"]:gsub(\"^v\", \"\")\r\n      end\r\n   end\r\n   \r\n   local protocol, pathname = dir.split_url(url_or_dir)\r\n   if not fetch.is_basic_protocol(protocol) then\r\n      if not name then\r\n         name = dir.base_name(url_or_dir):gsub(\"%.[^.]+$\", \"\")\r\n      end\r\n      if not version then\r\n         version = \"scm\"\r\n      end\r\n   elseif protocol ~= \"file\" then\r\n      local filename = dir.base_name(url_or_dir)\r\n      local newname, newversion = filename:match(\"(.*)-([^-]+)\")\r\n      if (not name) and newname then\r\n         name = newname\r\n      end\r\n      if (not version) and newversion then\r\n         version = newversion:gsub(\".[a-z]+$\", \"\"):gsub(\".tar$\", \"\")\r\n      end\r\n      if not (name and version) then\r\n         return nil, \"Missing name and version arguments. \"..util.see_help(\"write_rockspec\")\r\n      end\r\n   elseif not version then\r\n      return nil, \"Missing name and version arguments. \"..util.see_help(\"write_rockspec\")\r\n   end\r\n\r\n   local filename = flags[\"output\"] or dir.path(fs.current_dir(), name:lower()..\"-\"..version..\"-1.rockspec\")\r\n   \r\n   if not flags[\"homepage\"] and url_or_dir:match(\"^git://github.com\") then\r\n      flags[\"homepage\"] = \"http://\"..url_or_dir:match(\"^[^:]+://(.*)\")\r\n   end\r\n\r\n   local rockspec = {\r\n      package = name,\r\n      name = name:lower(),\r\n      version = version..\"-1\",\r\n      source = {\r\n         url = \"*** please add URL for source tarball, zip or repository here ***\",\r\n         tag = flags[\"tag\"],\r\n      },\r\n      description = {\r\n         summary = flags[\"summary\"] or \"*** please specify description summary ***\",\r\n         detailed = flags[\"detailed\"] or \"*** please enter a detailed description ***\",\r\n         homepage = flags[\"homepage\"] or \"*** please enter a project homepage ***\",\r\n         license = flags[\"license\"] or \"*** please specify a license ***\",\r\n      },\r\n      dependencies = {},\r\n      build = {},\r\n   }\r\n   path.configure_paths(rockspec)\r\n   rockspec.source.protocol = protocol\r\n   \r\n   configure_lua_version(rockspec, flags[\"lua-version\"])\r\n   \r\n   local local_dir = url_or_dir\r\n\r\n   if url_or_dir:match(\"://\") then\r\n      rockspec.source.url = url_or_dir\r\n      rockspec.source.file = dir.base_name(url_or_dir)\r\n      rockspec.source.dir = \"dummy\"\r\n      if not fetch.is_basic_protocol(rockspec.source.protocol) then\r\n         if version ~= \"scm\" then\r\n            rockspec.source.tag = flags[\"tag\"] or \"v\" .. version\r\n         end\r\n      end\r\n      rockspec.source.dir = nil\r\n      local ok, base_dir, temp_dir = get_url(rockspec)\r\n      if ok then\r\n         if base_dir ~= dir.base_name(url_or_dir) then\r\n            rockspec.source.dir = base_dir\r\n         end\r\n      end\r\n      if base_dir then\r\n         local_dir = dir.path(temp_dir, base_dir)\r\n      else\r\n         local_dir = nil\r\n      end\r\n   end\r\n   \r\n   if not local_dir then\r\n      local_dir = \".\"\r\n   end\r\n   \r\n   local libs = nil\r\n   if flags[\"lib\"] then\r\n      libs = {}\r\n      rockspec.external_dependencies = {}\r\n      for lib in flags[\"lib\"]:gmatch(\"([^,]+)\") do\r\n         table.insert(libs, lib)\r\n         rockspec.external_dependencies[lib:upper()] = {\r\n            library = lib\r\n         }\r\n      end\r\n   end\r\n\r\n   local ok, err = fs.change_dir(local_dir)\r\n   if not ok then return nil, \"Failed reaching files from project - error entering directory \"..local_dir end\r\n\r\n   detect_description(rockspec)\r\n\r\n   local is_mit = show_license(rockspec)\r\n   \r\n   if is_mit and not flags[\"license\"] then\r\n      rockspec.description.license = \"MIT\"\r\n   end\r\n   \r\n   fill_as_builtin(rockspec, libs)\r\n      \r\n   rockspec_cleanup(rockspec)\r\n   \r\n   persist.save_from_table(filename, rockspec, type_check.rockspec_order)\r\n\r\n   util.printout()   \r\n   util.printout(\"Wrote template at \"..filename..\" -- you should now edit and finish it.\")\r\n   util.printout()   \r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "absolute_name",
    "type": "global function"
  }, {
    "id": 178,
    "text": "unpack_archive",
    "type": "global function"
  }, {
    "id": 179,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 180,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 181,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 182,
    "text": "module",
    "type": "global function"
  }, {
    "id": 183,
    "text": "type",
    "type": "global function"
  }, {
    "id": 184,
    "text": "require",
    "type": "global function"
  }, {
    "id": 185,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 186,
    "text": "util)",
    "type": "module"
  }, {
    "id": 187,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 188,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 189,
    "text": "path)",
    "type": "module"
  }, {
    "id": 190,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 191,
    "text": "persist)",
    "type": "module"
  }, {
    "id": 192,
    "text": "type_check)",
    "type": "module"
  }, {
    "id": 193,
    "text": "",
    "type": "variable container"
  }, {
    "id": 194,
    "text": "",
    "type": "require container"
  }, {
    "id": 195,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "require local variable"
  } ]
}