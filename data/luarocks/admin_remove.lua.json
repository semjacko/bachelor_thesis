{
  "_filename": "admin_remove.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/admin_remove.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 2,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "has",
    "to": 31
  }, {
    "from": 2,
    "label": "has",
    "to": 32
  }, {
    "from": 2,
    "label": "has",
    "to": 33
  }, {
    "from": 2,
    "label": "has",
    "to": 34
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 12
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 12
  }, {
    "from": 36,
    "label": "has",
    "to": 12
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 36,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 62
  }, {
    "from": 2,
    "label": "calls",
    "to": 49
  }, {
    "from": 36,
    "label": "calls",
    "to": 58
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 2,
    "label": "calls",
    "to": 56
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 50
  }, {
    "from": 36,
    "label": "calls",
    "to": 63
  }, {
    "from": 2,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 57
  }, {
    "from": 2,
    "label": "calls",
    "to": 60
  }, {
    "from": 43,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 36,
    "label": "calls",
    "to": 44
  }, {
    "from": 36,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "declares",
    "to": 2
  }, {
    "from": 43,
    "label": "declares",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 74,
    "label": "initializes",
    "to": 76
  }, {
    "from": 74,
    "label": "initializes",
    "to": 77
  }, {
    "from": 74,
    "label": "initializes",
    "to": 78
  }, {
    "from": 75,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "requires",
    "to": 66
  }, {
    "from": 75,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "requires",
    "to": 67
  }, {
    "from": 75,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 68
  }, {
    "from": 75,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "requires",
    "to": 69
  }, {
    "from": 75,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 70
  }, {
    "from": 75,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "requires",
    "to": 71
  }, {
    "from": 75,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 72
  }, {
    "from": 75,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "requires",
    "to": 73
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "admin_remove",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function remove_files_from_server(refresh, rockfiles, server, upload_server)\r\n   assert(type(refresh) == \"boolean\" or not refresh)\r\n   assert(type(rockfiles) == \"table\")\r\n   assert(type(server) == \"string\")\r\n   assert(type(upload_server) == \"table\" or not upload_server)\r\n\r\n   local download_url, login_url = cache.get_server_urls(server, upload_server)\r\n   local at = fs.current_dir()\r\n   local refresh_fn = refresh and cache.refresh_local_cache or cache.split_server_url\r\n   \r\n   local local_cache, protocol, server_path, user, password = refresh_fn(server, download_url, cfg.upload_user, cfg.upload_password)\r\n   if not local_cache then\r\n      return nil, protocol\r\n   end\r\n   if protocol ~= \"rsync\" then\r\n      return nil, \"This command requires 'rsync', check your configuration.\"\r\n   end\r\n   \r\n   local ok, err = fs.change_dir(at)\r\n   if not ok then return nil, err end\r\n   \r\n   local nr_files = 0\r\n   for i, rockfile in ipairs(rockfiles) do\r\n      local basename = dir.base_name(rockfile)\r\n      local file = dir.path(local_cache, basename)\r\n      util.printout(\"Removing file \"..file..\"...\")\r\n      fs.delete(file)\r\n      if not fs.exists(file) then\r\n         nr_files = nr_files + 1\r\n      else\r\n         util.printerr(\"Failed removing \"..file)\r\n      end\r\n   end\r\n   if nr_files == 0 then\r\n      return nil, \"No files removed.\"\r\n   end\r\n\r\n   local ok, err = fs.change_dir(local_cache)\r\n   if not ok then return nil, err end\r\n\r\n   util.printout(\"Updating manifest...\")\r\n   manif.make_manifest(local_cache, \"one\", true)\r\n   util.printout(\"Updating index.html...\")\r\n   index.make_index(local_cache)\r\n\r\n   local srv, path = server_path:match(\"([^/]+)(/.+)\")\r\n   local cmd = cfg.variables.RSYNC..\" \"..cfg.variables.RSYNCFLAGS..\" --delete -e ssh \"..local_cache..\"/ \"..user..\"@\"..srv..\":\"..path..\"/\"\r\n\r\n   util.printout(cmd)\r\n   fs.execute(cmd)\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert(type(refresh) == \"boolean\" or not refresh)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "assert(type(rockfiles) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "assert(type(server) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "assert(type(upload_server) == \"table\" or not upload_server)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local download_url, login_url = cache.get_server_urls(server, upload_server)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local at = fs.current_dir()",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local refresh_fn = refresh and cache.refresh_local_cache or cache.split_server_url",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local local_cache, protocol, server_path, user, password = refresh_fn(server, download_url, cfg.upload_user, cfg.upload_password)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if not local_cache then\r\n      return nil, protocol\r\n   end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "if protocol ~= \"rsync\" then\r\n      return nil, \"This command requires 'rsync', check your configuration.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "local ok, err = fs.change_dir(at)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local nr_files = 0",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for i, rockfile in ipairs(rockfiles) do\r\n      local basename = dir.base_name(rockfile)\r\n      local file = dir.path(local_cache, basename)\r\n      util.printout(\"Removing file \"..file..\"...\")\r\n      fs.delete(file)\r\n      if not fs.exists(file) then\r\n         nr_files = nr_files + 1\r\n      else\r\n         util.printerr(\"Failed removing \"..file)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "local basename = dir.base_name(rockfile)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local file = dir.path(local_cache, basename)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "util.printout(\"Removing file \"..file..\"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "fs.delete(file)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "if not fs.exists(file) then\r\n         nr_files = nr_files + 1\r\n      else\r\n         util.printerr(\"Failed removing \"..file)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "nr_files = nr_files + 1",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "util.printerr(\"Failed removing \"..file)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if nr_files == 0 then\r\n      return nil, \"No files removed.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local ok, err = fs.change_dir(local_cache)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "util.printout(\"Updating manifest...\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "manif.make_manifest(local_cache, \"one\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "util.printout(\"Updating index.html...\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "index.make_index(local_cache)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "local srv, path = server_path:match(\"([^/]+)(/.+)\")",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local cmd = cfg.variables.RSYNC..\" \"..cfg.variables.RSYNCFLAGS..\" --delete -e ssh \"..local_cache..\"/ \"..user..\"@\"..srv..\":\"..path..\"/\"",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "util.printout(cmd)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "fs.execute(cmd)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function run(...)\r\n   local files = { util.parse_flags(...) }\r\n   local flags = table.remove(files, 1)\r\n   if #files < 1 then\r\n      return nil, \"Argument missing. \"..util.see_help(\"remove\", \"luarocks-admin\")\r\n   end\r\n   local server, server_table = cache.get_upload_server(flags[\"server\"])\r\n   if not server then return nil, server_table end\r\n   return remove_files_from_server(not flags[\"no-refresh\"], files, server, server_table)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local files = { util.parse_flags(...) }",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local flags = table.remove(files, 1)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if #files < 1 then\r\n      return nil, \"Argument missing. \"..util.see_help(\"remove\", \"luarocks-admin\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local server, server_table = cache.get_upload_server(flags[\"server\"])",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if not server then return nil, server_table end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "",
    "type": "function container"
  }, {
    "id": 44,
    "text": "function get_upload_server(server)\r\n   if not server then server = cfg.upload_server end\r\n   if not server then\r\n      return nil, \"No server specified and no default configured with upload_server.\"\r\n   end\r\n   return server, cfg.upload_servers and cfg.upload_servers[server]\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "function get_server_urls(server, upload_server)\r\n   local download_url = server\r\n   local login_url = nil\r\n   if upload_server then\r\n      if upload_server.rsync then download_url = \"rsync://\"..upload_server.rsync\r\n      elseif upload_server.http then download_url = \"http://\"..upload_server.http\r\n      elseif upload_server.ftp then download_url = \"ftp://\"..upload_server.ftp\r\n      end\r\n      \r\n      if upload_server.ftp then login_url = \"ftp://\"..upload_server.ftp\r\n      elseif upload_server.sftp then login_url = \"sftp://\"..upload_server.sftp\r\n      end\r\n   end\r\n   return download_url, login_url\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "function execute(command, ...)\r\n   assert(type(command) == \"string\")\r\n   return fs.execute_string(quote_args(command, ...))\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "function current_dir()\r\n   return lfs.currentdir()\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "function change_dir(d)\r\n   table.insert(dir_stack, lfs.currentdir())\r\n   d = dir.normalize(d)\r\n   return lfs.chdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "function delete(name)\r\n   name = dir.normalize(name)\r\n   recursive_delete(name)\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "function make_index(repo)\r\n   if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end\r\n   local manifest = manif.load_manifest(repo)\r\n   local out = io.open(dir.path(repo, \"index.html\"), \"w\")\r\n   \r\n   out:write(index_header)\r\n   for package, version_list in util.sortedpairs(manifest.repository) do\r\n      local latest_rockspec = nil\r\n      local output = index_package_begin\r\n      for version, data in util.sortedpairs(version_list, deps.compare_versions) do\r\n         local versions = {}\r\n         output = output..version..':&nbsp;'\r\n         table.sort(data, function(a,b) return a.arch < b.arch end)\r\n         for _, item in ipairs(data) do\r\n            local file\r\n            if item.arch == 'rockspec' then\r\n               file = (\"%s-%s.rockspec\"):format(package, version)\r\n               if not latest_rockspec then latest_rockspec = file end\r\n            else\r\n               file = (\"%s-%s.%s.rock\"):format(package, version, item.arch)\r\n            end\r\n            table.insert(versions, '<a href=\"'..file..'\">'..item.arch..'</a>')\r\n         end\r\n         output = output .. table.concat(versions, ',&nbsp;') .. '<br/>'\r\n      end\r\n      output = output .. index_package_end\r\n      if latest_rockspec then\r\n         local rockspec = persist.load_into_table(dir.path(repo, latest_rockspec))\r\n         local descript = rockspec.description or {}\r\n         local vars = {\r\n            anchor = package,\r\n            package = rockspec.package,\r\n            original = rockspec.source.url,\r\n            summary = descript.summary or \"\",\r\n            detailed = descript.detailed or \"\",\r\n            license = descript.license or \"N/A\",\r\n            homepage = descript.homepage and ('| <a href=\"'..descript.homepage..'\"'..ext_url_target..'>project homepage</a>') or \"\",\r\n            externaldependencies = format_external_dependencies(rockspec)\r\n         }\r\n         vars.detailed = vars.detailed:gsub(\"\\n\\n\", \"</p><p>\"):gsub(\"%s+\", \" \")\r\n         vars.detailed = vars.detailed:gsub(\"(https?://[a-zA-Z0-9%.%%-_%+%[%]=%?&/$@;:]+)\", '<a href=\"%1\"'..ext_url_target..'>%1</a>')\r\n         output = output:gsub(\"$(%w+)\", vars)\r\n      else\r\n         output = output:gsub(\"$anchor\", package)\r\n         output = output:gsub(\"$package\", package)\r\n         output = output:gsub(\"$(%w+)\", \"\")\r\n      end\r\n      out:write(output)\r\n   end\r\n   out:write(index_footer_begin)\r\n   for ver in util.lua_versions() do\r\n      out:write((index_manifest_ver:gsub(\"$VER\", ver)))\r\n   end\r\n   out:write(index_footer_end)\r\n   out:close()\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "function make_manifest(repo, deps_mode, remote)\r\n   assert(type(repo) == \"string\")\r\n   assert(type(deps_mode) == \"string\")\r\n\r\n   if deps_mode == \"none\" then deps_mode = cfg.deps_mode end\r\n\r\n   if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end\r\n\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   query.arch = \"any\"\r\n   local results = search.disk_search(repo, query)\r\n   local manifest = { repository = {}, modules = {}, commands = {} }\r\n\r\n   manif_core.manifest_cache[repo] = manifest\r\n\r\n   local dep_handler = nil\r\n   if not remote then\r\n      dep_handler = function(manifest)\r\n         update_dependencies(manifest, deps_mode)\r\n      end\r\n   end\r\n   local ok, err = store_results(results, manifest, dep_handler)\r\n   if not ok then return nil, err end\r\n\r\n   if remote then\r\n      local cache = {}\r\n      for luaver in util.lua_versions() do\r\n         local vmanifest = { repository = {}, modules = {}, commands = {} }\r\n         local dep_handler = function(manifest)\r\n            filter_by_lua_version(manifest, luaver, repo, cache)\r\n         end\r\n         local ok, err = store_results(results, vmanifest, dep_handler)\r\n         save_table(repo, \"manifest-\"..luaver, vmanifest)\r\n      end\r\n   end\r\n\r\n   return save_table(repo, \"manifest\", manifest)\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "function see_help(command, program)\r\n   return \"See '\"..this_program(program or \"luarocks\")..' help '..command..\"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 60,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 61,
    "text": "module",
    "type": "global function"
  }, {
    "id": 62,
    "text": "refresh_fn",
    "type": "global function"
  }, {
    "id": 63,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 64,
    "text": "type",
    "type": "global function"
  }, {
    "id": 65,
    "text": "require",
    "type": "global function"
  }, {
    "id": 66,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 67,
    "text": "util)",
    "type": "module"
  }, {
    "id": 68,
    "text": "fetch)",
    "type": "module"
  }, {
    "id": 69,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 70,
    "text": "manif)",
    "type": "module"
  }, {
    "id": 71,
    "text": "index)",
    "type": "module"
  }, {
    "id": 72,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 73,
    "text": "cache)",
    "type": "module"
  }, {
    "id": 74,
    "text": "",
    "type": "variable container"
  }, {
    "id": 75,
    "text": "",
    "type": "require container"
  }, {
    "id": 76,
    "text": "",
    "type": "global variable"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "global variable"
  }, {
    "id": 79,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  } ]
}