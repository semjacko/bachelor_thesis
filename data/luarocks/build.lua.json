{
  "_filename": "build.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/build.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 11,
    "label": "has",
    "to": 20
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 21
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 22
  }, {
    "from": 6,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 32,
    "label": "has",
    "to": 24
  }, {
    "from": 32,
    "label": "has",
    "to": 24
  }, {
    "from": 32,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 53
  }, {
    "from": 44,
    "label": "has",
    "to": 54
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 55
  }, {
    "from": 44,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 44,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 58,
    "label": "has",
    "to": 66
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 67
  }, {
    "from": 44,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 14
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 44,
    "label": "has",
    "to": 34
  }, {
    "from": 44,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 83
  }, {
    "from": 76,
    "label": "has",
    "to": 84
  }, {
    "from": 76,
    "label": "has",
    "to": 85
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 90
  }, {
    "from": 44,
    "label": "has",
    "to": 91
  }, {
    "from": 44,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 44,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 44,
    "label": "has",
    "to": 103
  }, {
    "from": 44,
    "label": "has",
    "to": 104
  }, {
    "from": 44,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 103
  }, {
    "from": 44,
    "label": "has",
    "to": 106
  }, {
    "from": 44,
    "label": "has",
    "to": 107
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 108
  }, {
    "from": 44,
    "label": "has",
    "to": 107
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 109
  }, {
    "from": 44,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 57
  }, {
    "from": 44,
    "label": "has",
    "to": 111
  }, {
    "from": 44,
    "label": "has",
    "to": 107
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 112
  }, {
    "from": 44,
    "label": "has",
    "to": 107
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 113
  }, {
    "from": 44,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 44,
    "label": "has",
    "to": 116
  }, {
    "from": 44,
    "label": "has",
    "to": 117
  }, {
    "from": 44,
    "label": "has",
    "to": 118
  }, {
    "from": 44,
    "label": "has",
    "to": 109
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 46
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 24
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 120,
    "label": "has",
    "to": 125
  }, {
    "from": 120,
    "label": "has",
    "to": 14
  }, {
    "from": 120,
    "label": "has",
    "to": 24
  }, {
    "from": 120,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 103
  }, {
    "from": 120,
    "label": "has",
    "to": 24
  }, {
    "from": 120,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 128,
    "label": "has",
    "to": 24
  }, {
    "from": 128,
    "label": "has",
    "to": 24
  }, {
    "from": 128,
    "label": "has",
    "to": 24
  }, {
    "from": 128,
    "label": "has",
    "to": 24
  }, {
    "from": 128,
    "label": "has",
    "to": 24
  }, {
    "from": 128,
    "label": "has",
    "to": 24
  }, {
    "from": 128,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 24
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 137,
    "label": "has",
    "to": 14
  }, {
    "from": 137,
    "label": "has",
    "to": 141
  }, {
    "from": 137,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 133,
    "label": "has",
    "to": 24
  }, {
    "from": 133,
    "label": "has",
    "to": 24
  }, {
    "from": 133,
    "label": "has",
    "to": 24
  }, {
    "from": 133,
    "label": "has",
    "to": 24
  }, {
    "from": 133,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 71
  }, {
    "from": 147,
    "label": "has",
    "to": 72
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 57
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 32,
    "label": "calls",
    "to": 26
  }, {
    "from": 32,
    "label": "calls",
    "to": 26
  }, {
    "from": 44,
    "label": "calls",
    "to": 175
  }, {
    "from": 44,
    "label": "calls",
    "to": 170
  }, {
    "from": 2,
    "label": "calls",
    "to": 209
  }, {
    "from": 2,
    "label": "calls",
    "to": 209
  }, {
    "from": 32,
    "label": "calls",
    "to": 209
  }, {
    "from": 44,
    "label": "calls",
    "to": 209
  }, {
    "from": 44,
    "label": "calls",
    "to": 209
  }, {
    "from": 120,
    "label": "calls",
    "to": 209
  }, {
    "from": 120,
    "label": "calls",
    "to": 209
  }, {
    "from": 133,
    "label": "calls",
    "to": 209
  }, {
    "from": 2,
    "label": "calls",
    "to": 165
  }, {
    "from": 2,
    "label": "calls",
    "to": 165
  }, {
    "from": 2,
    "label": "calls",
    "to": 165
  }, {
    "from": 44,
    "label": "calls",
    "to": 165
  }, {
    "from": 44,
    "label": "calls",
    "to": 165
  }, {
    "from": 44,
    "label": "calls",
    "to": 2
  }, {
    "from": 44,
    "label": "calls",
    "to": 176
  }, {
    "from": 128,
    "label": "calls",
    "to": 120
  }, {
    "from": 128,
    "label": "calls",
    "to": 120
  }, {
    "from": 133,
    "label": "calls",
    "to": 188
  }, {
    "from": 44,
    "label": "calls",
    "to": 184
  }, {
    "from": 2,
    "label": "calls",
    "to": 156
  }, {
    "from": 2,
    "label": "calls",
    "to": 156
  }, {
    "from": 32,
    "label": "calls",
    "to": 200
  }, {
    "from": 128,
    "label": "calls",
    "to": 194
  }, {
    "from": 44,
    "label": "calls",
    "to": 208
  }, {
    "from": 44,
    "label": "calls",
    "to": 197
  }, {
    "from": 44,
    "label": "calls",
    "to": 197
  }, {
    "from": 133,
    "label": "calls",
    "to": 199
  }, {
    "from": 44,
    "label": "calls",
    "to": 166
  }, {
    "from": 44,
    "label": "calls",
    "to": 166
  }, {
    "from": 44,
    "label": "calls",
    "to": 152
  }, {
    "from": 44,
    "label": "calls",
    "to": 189
  }, {
    "from": 44,
    "label": "calls",
    "to": 180
  }, {
    "from": 44,
    "label": "calls",
    "to": 191
  }, {
    "from": 44,
    "label": "calls",
    "to": 186
  }, {
    "from": 133,
    "label": "calls",
    "to": 154
  }, {
    "from": 133,
    "label": "calls",
    "to": 154
  }, {
    "from": 2,
    "label": "calls",
    "to": 216
  }, {
    "from": 2,
    "label": "calls",
    "to": 216
  }, {
    "from": 2,
    "label": "calls",
    "to": 216
  }, {
    "from": 32,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 44,
    "label": "calls",
    "to": 216
  }, {
    "from": 120,
    "label": "calls",
    "to": 216
  }, {
    "from": 120,
    "label": "calls",
    "to": 216
  }, {
    "from": 133,
    "label": "calls",
    "to": 216
  }, {
    "from": 133,
    "label": "calls",
    "to": 216
  }, {
    "from": 32,
    "label": "calls",
    "to": 171
  }, {
    "from": 44,
    "label": "calls",
    "to": 182
  }, {
    "from": 120,
    "label": "calls",
    "to": 178
  }, {
    "from": 2,
    "label": "calls",
    "to": 167
  }, {
    "from": 44,
    "label": "calls",
    "to": 167
  }, {
    "from": 2,
    "label": "calls",
    "to": 158
  }, {
    "from": 2,
    "label": "calls",
    "to": 158
  }, {
    "from": 2,
    "label": "calls",
    "to": 158
  }, {
    "from": 2,
    "label": "calls",
    "to": 158
  }, {
    "from": 26,
    "label": "calls",
    "to": 158
  }, {
    "from": 44,
    "label": "calls",
    "to": 158
  }, {
    "from": 44,
    "label": "calls",
    "to": 153
  }, {
    "from": 44,
    "label": "calls",
    "to": 168
  }, {
    "from": 44,
    "label": "calls",
    "to": 160
  }, {
    "from": 44,
    "label": "calls",
    "to": 202
  }, {
    "from": 133,
    "label": "calls",
    "to": 202
  }, {
    "from": 44,
    "label": "calls",
    "to": 161
  }, {
    "from": 44,
    "label": "calls",
    "to": 193
  }, {
    "from": 44,
    "label": "calls",
    "to": 193
  }, {
    "from": 32,
    "label": "calls",
    "to": 210
  }, {
    "from": 133,
    "label": "calls",
    "to": 172
  }, {
    "from": 44,
    "label": "calls",
    "to": 181
  }, {
    "from": 44,
    "label": "calls",
    "to": 181
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 151,
    "label": "calls",
    "to": 217
  }, {
    "from": 128,
    "label": "calls",
    "to": 217
  }, {
    "from": 128,
    "label": "calls",
    "to": 217
  }, {
    "from": 2,
    "label": "calls",
    "to": 213
  }, {
    "from": 26,
    "label": "calls",
    "to": 213
  }, {
    "from": 44,
    "label": "calls",
    "to": 213
  }, {
    "from": 44,
    "label": "calls",
    "to": 213
  }, {
    "from": 44,
    "label": "calls",
    "to": 213
  }, {
    "from": 44,
    "label": "calls",
    "to": 213
  }, {
    "from": 44,
    "label": "calls",
    "to": 192
  }, {
    "from": 44,
    "label": "calls",
    "to": 190
  }, {
    "from": 151,
    "label": "calls",
    "to": 212
  }, {
    "from": 128,
    "label": "calls",
    "to": 155
  }, {
    "from": 44,
    "label": "calls",
    "to": 183
  }, {
    "from": 44,
    "label": "calls",
    "to": 185
  }, {
    "from": 26,
    "label": "calls",
    "to": 162
  }, {
    "from": 44,
    "label": "calls",
    "to": 179
  }, {
    "from": 26,
    "label": "calls",
    "to": 214
  }, {
    "from": 133,
    "label": "calls",
    "to": 128
  }, {
    "from": 133,
    "label": "calls",
    "to": 177
  }, {
    "from": 128,
    "label": "calls",
    "to": 173
  }, {
    "from": 44,
    "label": "calls",
    "to": 215
  }, {
    "from": 32,
    "label": "calls",
    "to": 201
  }, {
    "from": 44,
    "label": "calls",
    "to": 201
  }, {
    "from": 44,
    "label": "calls",
    "to": 201
  }, {
    "from": 44,
    "label": "calls",
    "to": 201
  }, {
    "from": 120,
    "label": "calls",
    "to": 159
  }, {
    "from": 120,
    "label": "calls",
    "to": 44
  }, {
    "from": 128,
    "label": "calls",
    "to": 44
  }, {
    "from": 133,
    "label": "calls",
    "to": 204
  }, {
    "from": 44,
    "label": "calls",
    "to": 198
  }, {
    "from": 44,
    "label": "calls",
    "to": 198
  }, {
    "from": 44,
    "label": "calls",
    "to": 169
  }, {
    "from": 2,
    "label": "calls",
    "to": 157
  }, {
    "from": 44,
    "label": "calls",
    "to": 205
  }, {
    "from": 44,
    "label": "calls",
    "to": 164
  }, {
    "from": 44,
    "label": "calls",
    "to": 164
  }, {
    "from": 120,
    "label": "calls",
    "to": 164
  }, {
    "from": 2,
    "label": "calls",
    "to": 187
  }, {
    "from": 44,
    "label": "calls",
    "to": 163
  }, {
    "from": 44,
    "label": "calls",
    "to": 163
  }, {
    "from": 120,
    "label": "calls",
    "to": 163
  }, {
    "from": 151,
    "label": "calls",
    "to": 203
  }, {
    "from": 44,
    "label": "calls",
    "to": 211
  }, {
    "from": 44,
    "label": "calls",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 151
  }, {
    "from": 151,
    "label": "declares",
    "to": 2
  }, {
    "from": 151,
    "label": "declares",
    "to": 26
  }, {
    "from": 151,
    "label": "declares",
    "to": 32
  }, {
    "from": 151,
    "label": "declares",
    "to": 44
  }, {
    "from": 151,
    "label": "declares",
    "to": 120
  }, {
    "from": 151,
    "label": "declares",
    "to": 128
  }, {
    "from": 151,
    "label": "declares",
    "to": 133
  }, {
    "from": 151,
    "label": "declares",
    "to": 147
  }, {
    "from": 151,
    "label": "declares",
    "to": 149
  }, {
    "from": 174,
    "label": "calls",
    "to": 44
  }, {
    "from": 195,
    "label": "calls",
    "to": 32
  }, {
    "from": 196,
    "label": "calls",
    "to": 32
  }, {
    "from": 207,
    "label": "calls",
    "to": 120
  }, {
    "from": 206,
    "label": "calls",
    "to": 44
  }, {
    "from": 1,
    "label": "contains",
    "to": 225
  }, {
    "from": 1,
    "label": "contains",
    "to": 226
  }, {
    "from": 225,
    "label": "initializes",
    "to": 227
  }, {
    "from": 225,
    "label": "initializes",
    "to": 228
  }, {
    "from": 225,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 226,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "requires",
    "to": 232
  }, {
    "from": 226,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "requires",
    "to": 224
  }, {
    "from": 226,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "requires",
    "to": 219
  }, {
    "from": 226,
    "label": "initializes",
    "to": 235
  }, {
    "from": 235,
    "label": "requires",
    "to": 236
  }, {
    "from": 226,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "requires",
    "to": 220
  }, {
    "from": 226,
    "label": "initializes",
    "to": 238
  }, {
    "from": 238,
    "label": "requires",
    "to": 223
  }, {
    "from": 226,
    "label": "initializes",
    "to": 239
  }, {
    "from": 239,
    "label": "requires",
    "to": 221
  }, {
    "from": 226,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "requires",
    "to": 241
  }, {
    "from": 226,
    "label": "initializes",
    "to": 242
  }, {
    "from": 242,
    "label": "requires",
    "to": 222
  }, {
    "from": 226,
    "label": "initializes",
    "to": 243
  }, {
    "from": 243,
    "label": "requires",
    "to": 244
  }, {
    "from": 226,
    "label": "initializes",
    "to": 245
  }, {
    "from": 245,
    "label": "requires",
    "to": 246
  }, {
    "from": 226,
    "label": "initializes",
    "to": 247
  }, {
    "from": 247,
    "label": "requires",
    "to": 218
  }, {
    "from": 226,
    "label": "initializes",
    "to": 248
  }, {
    "from": 248,
    "label": "requires",
    "to": 249
  }, {
    "from": 226,
    "label": "initializes",
    "to": 250
  }, {
    "from": 250,
    "label": "requires",
    "to": 244
  }, {
    "from": 251,
    "label": "requires",
    "to": 241
  }, {
    "from": 252,
    "label": "requires",
    "to": 244
  }, {
    "from": 253,
    "label": "requires",
    "to": 249
  }, {
    "from": 254,
    "label": "requires",
    "to": 244
  }, {
    "from": 255,
    "label": "requires",
    "to": 241
  }, {
    "from": 256,
    "label": "requires",
    "to": 241
  }, {
    "from": 257,
    "label": "requires",
    "to": 236
  }, {
    "from": 258,
    "label": "requires",
    "to": 241
  }, {
    "from": 259,
    "label": "requires",
    "to": 246
  }, {
    "from": 260,
    "label": "requires",
    "to": 244
  }, {
    "from": 261,
    "label": "requires",
    "to": 244
  }, {
    "from": 262,
    "label": "requires",
    "to": 241
  }, {
    "from": 263,
    "label": "requires",
    "to": 232
  }, {
    "from": 264,
    "label": "requires",
    "to": 246
  }, {
    "from": 265,
    "label": "requires",
    "to": 241
  }, {
    "from": 266,
    "label": "requires",
    "to": 241
  }, {
    "from": 267,
    "label": "requires",
    "to": 244
  }, {
    "from": 268,
    "label": "requires",
    "to": 236
  }, {
    "from": 269,
    "label": "requires",
    "to": 241
  }, {
    "from": 270,
    "label": "requires",
    "to": 236
  }, {
    "from": 271,
    "label": "requires",
    "to": 244
  }, {
    "from": 272,
    "label": "requires",
    "to": 241
  }, {
    "from": 273,
    "label": "requires",
    "to": 244
  }, {
    "from": 274,
    "label": "requires",
    "to": 241
  }, {
    "from": 275,
    "label": "requires",
    "to": 236
  }, {
    "from": 276,
    "label": "requires",
    "to": 246
  }, {
    "from": 277,
    "label": "requires",
    "to": 244
  }, {
    "from": 278,
    "label": "requires",
    "to": 241
  }, {
    "from": 279,
    "label": "requires",
    "to": 236
  }, {
    "from": 280,
    "label": "requires",
    "to": 241
  }, {
    "from": 281,
    "label": "requires",
    "to": 241
  }, {
    "from": 282,
    "label": "requires",
    "to": 244
  }, {
    "from": 283,
    "label": "requires",
    "to": 241
  }, {
    "from": 284,
    "label": "requires",
    "to": 244
  }, {
    "from": 285,
    "label": "requires",
    "to": 249
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "build",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function install_files(files, location, is_module_path)\r\n   assert(type(files) == \"table\" or not files)\r\n   assert(type(location) == \"string\")\r\n   if files then\r\n      for k, file in pairs(files) do\r\n         local dest = location\r\n         local filename = dir.base_name(file)\r\n         if type(k) == \"string\" then\r\n            local modname = k\r\n            if is_module_path then\r\n               dest = dir.path(location, path.module_to_path(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               if filename:match(\"%.lua$\") then\r\n                  local basename = modname:match(\"([^.]+)$\")\r\n                  local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n                  if basename ~= baseinfo then\r\n                     filename = basename..\".lua\"\r\n                  end\r\n               end\r\n            else\r\n               dest = dir.path(location, dir.dir_name(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               filename = dir.base_name(modname)\r\n            end\r\n         else\r\n            local ok, err = fs.make_dir(dest)\r\n            if not ok then return nil, err end\r\n         end\r\n         local ok = fs.copy(dir.path(file), dir.path(dest, filename))\r\n         if not ok then\r\n            return nil, \"Failed copying \"..file\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert(type(files) == \"table\" or not files)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "assert(type(location) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "if files then\r\n      for k, file in pairs(files) do\r\n         local dest = location\r\n         local filename = dir.base_name(file)\r\n         if type(k) == \"string\" then\r\n            local modname = k\r\n            if is_module_path then\r\n               dest = dir.path(location, path.module_to_path(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               if filename:match(\"%.lua$\") then\r\n                  local basename = modname:match(\"([^.]+)$\")\r\n                  local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n                  if basename ~= baseinfo then\r\n                     filename = basename..\".lua\"\r\n                  end\r\n               end\r\n            else\r\n               dest = dir.path(location, dir.dir_name(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               filename = dir.base_name(modname)\r\n            end\r\n         else\r\n            local ok, err = fs.make_dir(dest)\r\n            if not ok then return nil, err end\r\n         end\r\n         local ok = fs.copy(dir.path(file), dir.path(dest, filename))\r\n         if not ok then\r\n            return nil, \"Failed copying \"..file\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "for k, file in pairs(files) do\r\n         local dest = location\r\n         local filename = dir.base_name(file)\r\n         if type(k) == \"string\" then\r\n            local modname = k\r\n            if is_module_path then\r\n               dest = dir.path(location, path.module_to_path(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               if filename:match(\"%.lua$\") then\r\n                  local basename = modname:match(\"([^.]+)$\")\r\n                  local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n                  if basename ~= baseinfo then\r\n                     filename = basename..\".lua\"\r\n                  end\r\n               end\r\n            else\r\n               dest = dir.path(location, dir.dir_name(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               filename = dir.base_name(modname)\r\n            end\r\n         else\r\n            local ok, err = fs.make_dir(dest)\r\n            if not ok then return nil, err end\r\n         end\r\n         local ok = fs.copy(dir.path(file), dir.path(dest, filename))\r\n         if not ok then\r\n            return nil, \"Failed copying \"..file\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "local dest = location",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local filename = dir.base_name(file)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if type(k) == \"string\" then\r\n            local modname = k\r\n            if is_module_path then\r\n               dest = dir.path(location, path.module_to_path(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               if filename:match(\"%.lua$\") then\r\n                  local basename = modname:match(\"([^.]+)$\")\r\n                  local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n                  if basename ~= baseinfo then\r\n                     filename = basename..\".lua\"\r\n                  end\r\n               end\r\n            else\r\n               dest = dir.path(location, dir.dir_name(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               filename = dir.base_name(modname)\r\n            end\r\n         else\r\n            local ok, err = fs.make_dir(dest)\r\n            if not ok then return nil, err end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local modname = k",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if is_module_path then\r\n               dest = dir.path(location, path.module_to_path(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               if filename:match(\"%.lua$\") then\r\n                  local basename = modname:match(\"([^.]+)$\")\r\n                  local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n                  if basename ~= baseinfo then\r\n                     filename = basename..\".lua\"\r\n                  end\r\n               end\r\n            else\r\n               dest = dir.path(location, dir.dir_name(modname))\r\n               local ok, err = fs.make_dir(dest)\r\n               if not ok then return nil, err end\r\n               filename = dir.base_name(modname)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "dest = dir.path(location, path.module_to_path(modname))",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "local ok, err = fs.make_dir(dest)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if filename:match(\"%.lua$\") then\r\n                  local basename = modname:match(\"([^.]+)$\")\r\n                  local baseinfo = filename:gsub(\"%.lua$\", \"\")\r\n                  if basename ~= baseinfo then\r\n                     filename = basename..\".lua\"\r\n                  end\r\n               end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local basename = modname:match(\"([^.]+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local baseinfo = filename:gsub(\"%.lua$\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if basename ~= baseinfo then\r\n                     filename = basename..\".lua\"\r\n                  end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "filename = basename..\".lua\"",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "dest = dir.path(location, dir.dir_name(modname))",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "filename = dir.base_name(modname)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "local ok = fs.copy(dir.path(file), dir.path(dest, filename))",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if not ok then\r\n            return nil, \"Failed copying \"..file\r\n         end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function extract_from_rockspec(files)\r\n   for name, content in pairs(files) do\r\n      local fd = io.open(dir.path(fs.current_dir(), name), \"w+\")\r\n      fd:write(content)\r\n      fd:close()\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "for name, content in pairs(files) do\r\n      local fd = io.open(dir.path(fs.current_dir(), name), \"w+\")\r\n      fd:write(content)\r\n      fd:close()\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 28,
    "text": "local fd = io.open(dir.path(fs.current_dir(), name), \"w+\")",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "fd:write(content)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "fd:close()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function apply_patches(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n\r\n   local build = rockspec.build\r\n   if build.extra_files then\r\n      extract_from_rockspec(build.extra_files)\r\n   end\r\n   if build.patches then\r\n      extract_from_rockspec(build.patches)\r\n      for patch, patchdata in util.sortedpairs(build.patches) do\r\n         util.printout(\"Applying patch \"..patch..\"...\")\r\n         local ok, err = fs.apply_patch(tostring(patch), patchdata)\r\n         if not ok then\r\n            return nil, \"Failed applying patch \"..patch\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "assert(type(rockspec) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local build = rockspec.build",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if build.extra_files then\r\n      extract_from_rockspec(build.extra_files)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "extract_from_rockspec(build.extra_files)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if build.patches then\r\n      extract_from_rockspec(build.patches)\r\n      for patch, patchdata in util.sortedpairs(build.patches) do\r\n         util.printout(\"Applying patch \"..patch..\"...\")\r\n         local ok, err = fs.apply_patch(tostring(patch), patchdata)\r\n         if not ok then\r\n            return nil, \"Failed applying patch \"..patch\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "extract_from_rockspec(build.patches)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "for patch, patchdata in util.sortedpairs(build.patches) do\r\n         util.printout(\"Applying patch \"..patch..\"...\")\r\n         local ok, err = fs.apply_patch(tostring(patch), patchdata)\r\n         if not ok then\r\n            return nil, \"Failed applying patch \"..patch\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 40,
    "text": "util.printout(\"Applying patch \"..patch..\"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local ok, err = fs.apply_patch(tostring(patch), patchdata)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if not ok then\r\n            return nil, \"Failed applying patch \"..patch\r\n         end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function build_rockspec(rockspec_file, need_to_fetch, minimal_mode, deps_mode)\r\n   assert(type(rockspec_file) == \"string\")\r\n   assert(type(need_to_fetch) == \"boolean\")\r\n\r\n   local rockspec, err, errcode = fetch.load_rockspec(rockspec_file)\r\n   if err then\r\n      return nil, err, errcode\r\n   elseif not rockspec.build then\r\n      return nil, \"Rockspec error: build table not specified\"\r\n   elseif not rockspec.build.type then\r\n      return nil, \"Rockspec error: build type not specified\"\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      local ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then\r\n         return nil, err, errcode\r\n      end\r\n   end\r\n\r\n   local ok, err, errcode = deps.check_external_deps(rockspec, \"build\")\r\n   if err then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   local name, version = rockspec.name, rockspec.version\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n\r\n   if not minimal_mode then\r\n      local _, source_dir\r\n      if need_to_fetch then\r\n         ok, source_dir, errcode = fetch.fetch_sources(rockspec, true)\r\n         if not ok then\r\n            return nil, source_dir, errcode\r\n         end\r\n         local ok, err = fs.change_dir(source_dir)\r\n         if not ok then return nil, err end\r\n      elseif rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n      end\r\n      fs.change_dir(rockspec.source.dir)\r\n   end\r\n   \r\n   local dirs = {\r\n      lua = { name = path.lua_dir(name, version), is_module_path = true },\r\n      lib = { name = path.lib_dir(name, version), is_module_path = true },\r\n      conf = { name = path.conf_dir(name, version), is_module_path = false },\r\n      bin = { name = path.bin_dir(name, version), is_module_path = false },\r\n   }\r\n   \r\n   for _, d in pairs(dirs) do\r\n      local ok, err = fs.make_dir(d.name)\r\n      if not ok then return nil, err end\r\n   end\r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n\r\n   local build = rockspec.build\r\n   \r\n   if not minimal_mode then\r\n      ok, err = apply_patches(rockspec)\r\n      if err then\r\n         return nil, err\r\n      end\r\n   end\r\n   \r\n   if build.type ~= \"none\" then\r\n\r\n      -- Temporary compatibility\r\n      if build.type == \"module\" then\r\n         util.printout(\"Do not use 'module' as a build type. Use 'builtin' instead.\")\r\n         build.type = \"builtin\"\r\n      end\r\n\r\n      if cfg.accepted_build_types and util.array_contains(cfg.accepted_build_types, build.type) then\r\n         return nil, \"This rockspec uses the '\"..build.type..\"' build type, which is blocked by the 'accepted_build_types' setting in your LuaRocks configuration.\"\r\n      end\r\n\r\n      local build_type\r\n      ok, build_type = pcall(require, \"luarocks.build.\" .. build.type)\r\n      if not ok or not type(build_type) == \"table\" then\r\n         return nil, \"Failed initializing build back-end for build type '\"..build.type..\"': \"..build_type\r\n      end\r\n  \r\n      ok, err = build_type.run(rockspec)\r\n      if not ok then\r\n         return nil, \"Build error: \" .. err\r\n      end\r\n   end\r\n\r\n   if build.install then\r\n      for id, install_dir in pairs(dirs) do\r\n         ok, err = install_files(build.install[id], install_dir.name, install_dir.is_module_path)\r\n         if not ok then \r\n            return nil, err\r\n         end\r\n      end\r\n   end\r\n   \r\n   local copy_directories = build.copy_directories\r\n   local copying_default = false\r\n   if not copy_directories then\r\n      copy_directories = {\"doc\"}\r\n      copying_default = true\r\n   end\r\n\r\n   for _, copy_dir in pairs(copy_directories) do\r\n      if fs.is_dir(copy_dir) then\r\n         local dest = dir.path(path.install_dir(name, version), copy_dir)\r\n         fs.make_dir(dest)\r\n         fs.copy_contents(copy_dir, dest)\r\n      else\r\n         if not copying_default then\r\n            return nil, \"Directory '\"..copy_dir..\"' not found\"\r\n         end\r\n      end\r\n   end\r\n\r\n   for _, d in pairs(dirs) do\r\n      fs.remove_dir_if_empty(d.name)\r\n   end\r\n\r\n   fs.pop_dir()\r\n   \r\n   fs.copy(rockspec.local_filename, path.rockspec_file(name, version))\r\n   if need_to_fetch then\r\n      fs.pop_dir()\r\n   end\r\n\r\n   ok, err = manif.make_rock_manifest(name, version)\r\n   if err then return nil, err end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n\r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n\r\n   local license = \"\"\r\n   if rockspec.description and rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now built and installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "assert(type(rockspec_file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert(type(need_to_fetch) == \"boolean\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local rockspec, err, errcode = fetch.load_rockspec(rockspec_file)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if err then\r\n      return nil, err, errcode\r\n   elseif not rockspec.build then\r\n      return nil, \"Rockspec error: build table not specified\"\r\n   elseif not rockspec.build.type then\r\n      return nil, \"Rockspec error: build type not specified\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      local ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then\r\n         return nil, err, errcode\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "util.printerr(\"Warning: skipping dependency checks.\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "local ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if err then\r\n         return nil, err, errcode\r\n      end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local ok, err, errcode = deps.check_external_deps(rockspec, \"build\")",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if err then\r\n      return nil, err, errcode\r\n   end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local name, version = rockspec.name, rockspec.version",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "repos.delete_version(name, version)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "if not minimal_mode then\r\n      local _, source_dir\r\n      if need_to_fetch then\r\n         ok, source_dir, errcode = fetch.fetch_sources(rockspec, true)\r\n         if not ok then\r\n            return nil, source_dir, errcode\r\n         end\r\n         local ok, err = fs.change_dir(source_dir)\r\n         if not ok then return nil, err end\r\n      elseif rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n      end\r\n      fs.change_dir(rockspec.source.dir)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "local _, source_dir",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if need_to_fetch then\r\n         ok, source_dir, errcode = fetch.fetch_sources(rockspec, true)\r\n         if not ok then\r\n            return nil, source_dir, errcode\r\n         end\r\n         local ok, err = fs.change_dir(source_dir)\r\n         if not ok then return nil, err end\r\n      elseif rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "ok, source_dir, errcode = fetch.fetch_sources(rockspec, true)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if not ok then\r\n            return nil, source_dir, errcode\r\n         end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "local ok, err = fs.change_dir(source_dir)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local ok, err = fs.unpack_archive(rockspec.source.file)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if not ok then\r\n            return nil, err\r\n         end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "fs.change_dir(rockspec.source.dir)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "local dirs = {\r\n      lua = { name = path.lua_dir(name, version), is_module_path = true },\r\n      lib = { name = path.lib_dir(name, version), is_module_path = true },\r\n      conf = { name = path.conf_dir(name, version), is_module_path = false },\r\n      bin = { name = path.bin_dir(name, version), is_module_path = false },\r\n   }",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "for _, d in pairs(dirs) do\r\n      local ok, err = fs.make_dir(d.name)\r\n      if not ok then return nil, err end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 69,
    "text": "local ok, err = fs.make_dir(d.name)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "fs.delete(path.install_dir(name, version))",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "fs.remove_dir_if_empty(path.versions_dir(name))",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if not minimal_mode then\r\n      ok, err = apply_patches(rockspec)\r\n      if err then\r\n         return nil, err\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "ok, err = apply_patches(rockspec)",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "if err then\r\n         return nil, err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "if build.type ~= \"none\" then\r\n\r\n      -- Temporary compatibility\r\n      if build.type == \"module\" then\r\n         util.printout(\"Do not use 'module' as a build type. Use 'builtin' instead.\")\r\n         build.type = \"builtin\"\r\n      end\r\n\r\n      if cfg.accepted_build_types and util.array_contains(cfg.accepted_build_types, build.type) then\r\n         return nil, \"This rockspec uses the '\"..build.type..\"' build type, which is blocked by the 'accepted_build_types' setting in your LuaRocks configuration.\"\r\n      end\r\n\r\n      local build_type\r\n      ok, build_type = pcall(require, \"luarocks.build.\" .. build.type)\r\n      if not ok or not type(build_type) == \"table\" then\r\n         return nil, \"Failed initializing build back-end for build type '\"..build.type..\"': \"..build_type\r\n      end\r\n  \r\n      ok, err = build_type.run(rockspec)\r\n      if not ok then\r\n         return nil, \"Build error: \" .. err\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "if build.type == \"module\" then\r\n         util.printout(\"Do not use 'module' as a build type. Use 'builtin' instead.\")\r\n         build.type = \"builtin\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "util.printout(\"Do not use 'module' as a build type. Use 'builtin' instead.\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "build.type = \"builtin\"",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if cfg.accepted_build_types and util.array_contains(cfg.accepted_build_types, build.type) then\r\n         return nil, \"This rockspec uses the '\"..build.type..\"' build type, which is blocked by the 'accepted_build_types' setting in your LuaRocks configuration.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "local build_type",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "ok, build_type = pcall(require, \"luarocks.build.\" .. build.type)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "if not ok or not type(build_type) == \"table\" then\r\n         return nil, \"Failed initializing build back-end for build type '\"..build.type..\"': \"..build_type\r\n      end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "ok, err = build_type.run(rockspec)",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "if not ok then\r\n         return nil, \"Build error: \" .. err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "if build.install then\r\n      for id, install_dir in pairs(dirs) do\r\n         ok, err = install_files(build.install[id], install_dir.name, install_dir.is_module_path)\r\n         if not ok then \r\n            return nil, err\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "for id, install_dir in pairs(dirs) do\r\n         ok, err = install_files(build.install[id], install_dir.name, install_dir.is_module_path)\r\n         if not ok then \r\n            return nil, err\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 88,
    "text": "ok, err = install_files(build.install[id], install_dir.name, install_dir.is_module_path)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if not ok then \r\n            return nil, err\r\n         end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "local copy_directories = build.copy_directories",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local copying_default = false",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if not copy_directories then\r\n      copy_directories = {\"doc\"}\r\n      copying_default = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "copy_directories = {\"doc\"}",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "copying_default = true",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "for _, copy_dir in pairs(copy_directories) do\r\n      if fs.is_dir(copy_dir) then\r\n         local dest = dir.path(path.install_dir(name, version), copy_dir)\r\n         fs.make_dir(dest)\r\n         fs.copy_contents(copy_dir, dest)\r\n      else\r\n         if not copying_default then\r\n            return nil, \"Directory '\"..copy_dir..\"' not found\"\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 96,
    "text": "if fs.is_dir(copy_dir) then\r\n         local dest = dir.path(path.install_dir(name, version), copy_dir)\r\n         fs.make_dir(dest)\r\n         fs.copy_contents(copy_dir, dest)\r\n      else\r\n         if not copying_default then\r\n            return nil, \"Directory '\"..copy_dir..\"' not found\"\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "local dest = dir.path(path.install_dir(name, version), copy_dir)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "fs.make_dir(dest)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "fs.copy_contents(copy_dir, dest)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "if not copying_default then\r\n            return nil, \"Directory '\"..copy_dir..\"' not found\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "for _, d in pairs(dirs) do\r\n      fs.remove_dir_if_empty(d.name)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 102,
    "text": "fs.remove_dir_if_empty(d.name)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "fs.pop_dir()",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "fs.copy(rockspec.local_filename, path.rockspec_file(name, version))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "if need_to_fetch then\r\n      fs.pop_dir()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "ok, err = manif.make_rock_manifest(name, version)",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "util.remove_scheduled_function(rollback)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "ok, err = repos.run_hook(rockspec, \"post_install\")",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "ok, err = manif.update_manifest(name, version, nil, deps_mode)",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "local license = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "if rockspec.description and rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "license = (\"(license: \"..rockspec.description.license..\")\")",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "local root_dir = path.root_dir(cfg.rocks_dir)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "util.printout()",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "util.printout(name..\" \"..version..\" is now built and installed in \"..root_dir..\" \"..license)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function build_rock(rock_file, need_to_fetch, deps_mode)\r\n   assert(type(rock_file) == \"string\")\r\n   assert(type(need_to_fetch) == \"boolean\")\r\n  \r\n   local unpack_dir, err, errcode = fetch.fetch_and_unpack_rock(rock_file)\r\n   if not unpack_dir then\r\n      return nil, err, errcode\r\n   end\r\n   local rockspec_file = path.rockspec_name_from_rock(rock_file)\r\n   local ok, err = fs.change_dir(unpack_dir)\r\n   if not ok then return nil, err end\r\n   local ok, err, errcode = build_rockspec(rockspec_file, need_to_fetch, false, deps_mode)\r\n   fs.pop_dir()\r\n   return ok, err, errcode\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "assert(type(rock_file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "local unpack_dir, err, errcode = fetch.fetch_and_unpack_rock(rock_file)",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "if not unpack_dir then\r\n      return nil, err, errcode\r\n   end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "local rockspec_file = path.rockspec_name_from_rock(rock_file)",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local ok, err = fs.change_dir(unpack_dir)",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local ok, err, errcode = build_rockspec(rockspec_file, need_to_fetch, false, deps_mode)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "local function do_build(name, version, deps_mode)\r\n   if name:match(\"%.rockspec$\") then\r\n      return build_rockspec(name, true, false, deps_mode)\r\n   elseif name:match(\"%.src%.rock$\") then\r\n      return build_rock(name, false, deps_mode)\r\n   elseif name:match(\"%.all%.rock$\") then\r\n      local install = require(\"luarocks.install\")\r\n      return install.install_binary_rock(name, deps_mode)\r\n   elseif name:match(\"%.rock$\") then\r\n      return build_rock(name, true, deps_mode)\r\n   elseif not name:match(dir.separator) then\r\n      local search = require(\"luarocks.search\")\r\n      return search.act_on_src_or_rockspec(run, name:lower(), version, deps.deps_mode_to_flag(deps_mode))\r\n   end\r\n   return nil, \"Don't know what to do with \"..name\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "if name:match(\"%.rockspec$\") then\r\n      return build_rockspec(name, true, false, deps_mode)\r\n   elseif name:match(\"%.src%.rock$\") then\r\n      return build_rock(name, false, deps_mode)\r\n   elseif name:match(\"%.all%.rock$\") then\r\n      local install = require(\"luarocks.install\")\r\n      return install.install_binary_rock(name, deps_mode)\r\n   elseif name:match(\"%.rock$\") then\r\n      return build_rock(name, true, deps_mode)\r\n   elseif not name:match(dir.separator) then\r\n      local search = require(\"luarocks.search\")\r\n      return search.act_on_src_or_rockspec(run, name:lower(), version, deps.deps_mode_to_flag(deps_mode))\r\n   end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "local install = require(\"luarocks.install\")",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "local search = require(\"luarocks.search\")",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"build\")\r\n   end\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   if flags[\"pack-binary-rock\"] then\r\n      return pack.pack_binary_rock(name, version, do_build, name, version, deps.get_deps_mode(flags))\r\n   else\r\n      local ok, err = fs.check_command_permissions(flags)\r\n      if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n      ok, err = do_build(name, version, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "local flags, name, version = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"build\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "assert(type(version) == \"string\" or not version)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "if flags[\"pack-binary-rock\"] then\r\n      return pack.pack_binary_rock(name, version, do_build, name, version, deps.get_deps_mode(flags))\r\n   else\r\n      local ok, err = fs.check_command_permissions(flags)\r\n      if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n      ok, err = do_build(name, version, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "local ok, err = fs.check_command_permissions(flags)",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "ok, err = do_build(name, version, deps.get_deps_mode(flags))",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "local name, version = ok, err",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if not ok then util.printerr(err) end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "util.printerr(err)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function()\r\n      repos.delete_version(name, version)\r\n   end",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "",
    "type": "function container"
  }, {
    "id": 152,
    "text": "function fulfill_dependencies(rockspec, deps_mode)\r\n\r\n   local search = require(\"luarocks.search\")\r\n   local install = require(\"luarocks.install\")\r\n\r\n   if rockspec.supported_platforms then\r\n      if not platforms_set then\r\n         platforms_set = values_set(cfg.platforms)\r\n      end\r\n      local supported = nil\r\n      for _, plat in pairs(rockspec.supported_platforms) do\r\n         local neg, plat = plat:match(\"^(!?)(.*)\")\r\n         if neg == \"!\" then\r\n            if platforms_set[plat] then\r\n               return nil, \"This rockspec for \"..rockspec.package..\" does not support \"..plat..\" platforms.\"\r\n            end\r\n         else\r\n            if platforms_set[plat] then\r\n               supported = true\r\n            else\r\n               if supported == nil then\r\n                  supported = false\r\n               end\r\n            end\r\n         end\r\n      end\r\n      if supported == false then\r\n         local plats = table.concat(cfg.platforms, \", \")\r\n         return nil, \"This rockspec for \"..rockspec.package..\" does not support \"..plats..\" platforms.\"\r\n      end\r\n   end\r\n\r\n   local _, missing, no_upgrade = match_deps(rockspec, nil, deps_mode)\r\n\r\n   if next(no_upgrade) then\r\n      util.printerr(\"Missing dependencies for \"..rockspec.name..\" \"..rockspec.version..\":\")\r\n      for _, dep in pairs(no_upgrade) do\r\n         util.printerr(show_dep(dep))\r\n      end\r\n      if next(missing) then\r\n         for _, dep in pairs(missing) do\r\n            util.printerr(show_dep(dep))\r\n         end\r\n      end\r\n      util.printerr()\r\n      for _, dep in pairs(no_upgrade) do\r\n         util.printerr(\"This version of \"..rockspec.name..\" is designed for use with\")\r\n         util.printerr(show_dep(dep)..\", but is configured to avoid upgrading it\")\r\n         util.printerr(\"automatically. Please upgrade \"..dep.name..\" with\")\r\n         util.printerr(\"   luarocks install \"..dep.name)\r\n         util.printerr(\"or choose an older version of \"..rockspec.name..\" with\")\r\n         util.printerr(\"   luarocks search \"..rockspec.name)\r\n      end\r\n      return nil, \"Failed matching dependencies.\"\r\n   end\r\n\r\n   if next(missing) then\r\n      util.printerr()\r\n      util.printerr(\"Missing dependencies for \"..rockspec.name..\":\")\r\n      for _, dep in pairs(missing) do\r\n         util.printerr(show_dep(dep))\r\n      end\r\n      util.printerr()\r\n\r\n      for _, dep in pairs(missing) do\r\n         -- Double-check in case dependency was filled during recursion.\r\n         if not match_dep(dep, nil, deps_mode) then\r\n            local rock = search.find_suitable_rock(dep)\r\n            if not rock then\r\n               return nil, \"Could not satisfy dependency: \"..show_dep(dep)\r\n            end\r\n            local ok, err, errcode = install.run(rock)\r\n            if not ok then\r\n               return nil, \"Failed installing dependency: \"..rock..\" - \"..err, errcode\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "function check_external_deps(rockspec, mode)\r\n   assert(type(rockspec) == \"table\")\r\n\r\n   local fs = require(\"luarocks.fs\")\r\n   \r\n   local vars = rockspec.variables\r\n   local patterns = cfg.external_deps_patterns\r\n   local subdirs = cfg.external_deps_subdirs\r\n   if mode == \"install\" then\r\n      patterns = cfg.runtime_external_deps_patterns\r\n      subdirs = cfg.runtime_external_deps_subdirs\r\n   end\r\n   if rockspec.external_dependencies then\r\n      for name, files in pairs(rockspec.external_dependencies) do\r\n         local ok = true\r\n         local failed_file = nil\r\n         local failed_dirname = nil\r\n         for _, extdir in ipairs(cfg.external_deps_dirs) do\r\n            ok = true\r\n            local prefix = vars[name..\"_DIR\"]\r\n            local dirs = {\r\n               BINDIR = { subdir = subdirs.bin, testfile = \"program\", pattern = patterns.bin },\r\n               INCDIR = { subdir = subdirs.include, testfile = \"header\", pattern = patterns.include },\r\n               LIBDIR = { subdir = subdirs.lib, testfile = \"library\", pattern = patterns.lib }\r\n            }\r\n            if mode == \"install\" then\r\n               dirs.INCDIR = nil\r\n            end\r\n            if not prefix then\r\n               prefix = extdir\r\n            end\r\n            if type(prefix) == \"table\" then\r\n               if prefix.bin then\r\n                  dirs.BINDIR.subdir = prefix.bin\r\n               end\r\n               if prefix.include then\r\n                  if dirs.INCDIR then\r\n                     dirs.INCDIR.subdir = prefix.include\r\n                  end\r\n               end\r\n               if prefix.lib then\r\n                  dirs.LIBDIR.subdir = prefix.lib\r\n               end\r\n               prefix = prefix.prefix\r\n            end\r\n            for dirname, dirdata in pairs(dirs) do\r\n               local paths\r\n               local path_var_value = vars[name..\"_\"..dirname]\r\n               if path_var_value then\r\n                  paths = { path_var_value }\r\n               elseif type(dirdata.subdir) == \"table\" then\r\n                  paths = {}\r\n                  for i,v in ipairs(dirdata.subdir) do\r\n                     paths[i] = dir.path(prefix, v)\r\n                  end\r\n               else\r\n                  paths = { dir.path(prefix, dirdata.subdir) }\r\n               end\r\n               dirdata.dir = paths[1]\r\n               local file = files[dirdata.testfile]\r\n               if file then\r\n                  local files = {}\r\n                  if not file:match(\"%.\") then\r\n                     add_all_patterns(file, dirdata.pattern, files)\r\n                  else\r\n                     for _, pattern in ipairs(dirdata.pattern) do\r\n                        local matched = deconstruct_pattern(file, pattern)\r\n                        if matched then\r\n                           add_all_patterns(matched, dirdata.pattern, files)\r\n                        end\r\n                     end\r\n                     table.insert(files, file)\r\n                  end\r\n                  local found = false\r\n                  failed_file = nil\r\n                  for _, f in pairs(files) do\r\n                     -- small convenience hack\r\n                     if f:match(\"%.so$\") or f:match(\"%.dylib$\") or f:match(\"%.dll$\") then\r\n                        f = f:gsub(\"%.[^.]+$\", \".\"..cfg.external_lib_extension)\r\n                     end\r\n                     for _, d in ipairs(paths) do\r\n                        if f:match(\"%*\") then\r\n                           local replaced = f:gsub(\"%.\", \"%%.\"):gsub(\"%*\", \".*\")\r\n                           for _, entry in ipairs(fs.list_dir(d)) do\r\n                              if entry:match(replaced) then\r\n                                 found = true\r\n                                 break\r\n                              end\r\n                           end\r\n                        else\r\n                           found = fs.is_file(dir.path(d, f))\r\n                        end\r\n                        if found then\r\n                           dirdata.dir = d\r\n                           break\r\n                        end\r\n                     end\r\n                     if found then\r\n                        break\r\n                     else\r\n                        if failed_file then\r\n                           failed_file = failed_file .. \", or \" .. f\r\n                        else\r\n                           failed_file = f\r\n                        end\r\n                     end\r\n                  end\r\n                  if not found then\r\n                     ok = false\r\n                     failed_dirname = dirname\r\n                     break\r\n                  end\r\n               end\r\n            end\r\n            if ok then\r\n               for dirname, dirdata in pairs(dirs) do\r\n                  vars[name..\"_\"..dirname] = dirdata.dir\r\n               end\r\n               vars[name..\"_DIR\"] = prefix\r\n               break\r\n            end\r\n         end\r\n         if not ok then\r\n            return nil, \"Could not find expected file \"..failed_file..\" for \"..name..\" -- you may have to install \"..name..\" in your system and/or pass \"..name..\"_DIR or \"..name..\"_\"..failed_dirname..\" to the luarocks command. Example: luarocks install \"..rockspec.name..\" \"..name..\"_DIR=/usr/local\", \"dependency\"\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "function get_deps_mode(flags)\r\n   if flags[\"deps-mode\"] then\r\n      return flags[\"deps-mode\"]\r\n   else\r\n      return cfg.deps_mode\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "function deps_mode_to_flag(deps_mode)\r\n   return \"--deps-mode=\"..deps_mode\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "function dir_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n   return (pathname:gsub(\"/*$\", \"\"):match(\"(.*)[/]+[^/]*\")) or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "function fetch_and_unpack_rock(rock_file, dest)\r\n   assert(type(rock_file) == \"string\")\r\n   assert(type(dest) == \"string\" or not dest)\r\n\r\n   local name = dir.base_name(rock_file):match(\"(.*)%.[^.]*%.rock\")\r\n   \r\n   local rock_file, err, errcode = fetch_url_at_temp_dir(rock_file,\"luarocks-rock-\"..name)\r\n   if not rock_file then\r\n      return nil, \"Could not fetch rock file: \" .. err, errcode\r\n   end\r\n\r\n   rock_file = fs.absolute_name(rock_file)\r\n   local unpack_dir\r\n   if dest then\r\n      unpack_dir = dest\r\n      local ok, err = fs.make_dir(unpack_dir)\r\n      if not ok then\r\n         return nil, \"Failed unpacking rock file: \" .. err\r\n      end\r\n   else\r\n      unpack_dir = fs.make_temp_dir(name)\r\n   end\r\n   if not dest then\r\n      util.schedule_function(fs.delete, unpack_dir)\r\n   end\r\n   local ok, err = fs.change_dir(unpack_dir)\r\n   if not ok then return nil, err end\r\n   ok = fs.unzip(rock_file)\r\n   if not ok then\r\n      return nil, \"Failed unpacking rock file: \" .. rock_file\r\n   end\r\n   fs.pop_dir()\r\n   return unpack_dir\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "function load_rockspec(filename, location)\r\n   assert(type(filename) == \"string\")\r\n\r\n   local name\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      name = \"rockspec\"\r\n   else\r\n      name = basename:match(\"(.*)%.rockspec\")\r\n      if not name then\r\n         return nil, \"Filename '\"..filename..\"' does not look like a rockspec.\"\r\n      end\r\n   end\r\n   \r\n   local err, errcode\r\n   if location then\r\n      local ok, err = fs.change_dir(location)\r\n      if not ok then return nil, err end\r\n      filename, err = fetch_url(filename)\r\n      fs.pop_dir()\r\n   else\r\n      filename, err, errcode = fetch_url_at_temp_dir(filename,\"luarocks-rockspec-\"..name)\r\n   end\r\n   if not filename then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   return load_local_rockspec(filename)\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "function fetch_sources(rockspec, extract, dest_dir)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(extract) == \"boolean\")\r\n   assert(type(dest_dir) == \"string\" or not dest_dir)\r\n\r\n   local protocol = rockspec.source.protocol\r\n   local ok, proto\r\n   if is_basic_protocol(protocol) then\r\n      proto = require(\"luarocks.fetch\")\r\n   else\r\n      ok, proto = pcall(require, \"luarocks.fetch.\"..protocol:gsub(\"[+-]\", \"_\"))\r\n      if not ok then\r\n         return nil, \"Unknown protocol \"..protocol\r\n      end\r\n   end\r\n   \r\n   if cfg.only_sources_from\r\n   and rockspec.source.pathname\r\n   and #rockspec.source.pathname > 0 then\r\n      if #cfg.only_sources_from == 0 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- download from remote servers disabled\"\r\n      elseif rockspec.source.pathname:find(cfg.only_sources_from, 1, true) ~= 1 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- only downloading from \"..cfg.only_sources_from\r\n      end\r\n   end\r\n   return proto.get_sources(rockspec, extract, dest_dir)\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "function current_dir()\r\n   return lfs.currentdir()\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "function change_dir(d)\r\n   table.insert(dir_stack, lfs.currentdir())\r\n   d = dir.normalize(d)\r\n   return lfs.chdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "function pop_dir()\r\n   local d = table.remove(dir_stack)\r\n   if d then\r\n      lfs.chdir(d)\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "function make_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   directory = dir.normalize(directory)\r\n   local path = nil\r\n   if directory:sub(2, 2) == \":\" then\r\n     path = directory:sub(1, 2)\r\n     directory = directory:sub(4)\r\n   else\r\n     if directory:match(\"^/\") then\r\n        path = \"\"\r\n     end\r\n   end\r\n   for d in directory:gmatch(\"([^\"..dir.separator..\"]+)\"..dir.separator..\"*\") do\r\n      path = path and path .. dir.separator .. d or d\r\n      local mode = lfs.attributes(path, \"mode\")\r\n      if not mode then\r\n         local ok, err = lfs.mkdir(path)\r\n         if not ok then\r\n            return false, err\r\n         end\r\n      elseif mode ~= \"directory\" then\r\n         return false, path..\" is not a directory\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "function remove_dir_if_empty(d)\r\n   assert(d)\r\n   d = dir.normalize(d)\r\n   lfs.rmdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "function copy(src, dest, perms)\r\n   assert(src and dest)\r\n   src = dir.normalize(src)\r\n   dest = dir.normalize(dest)\r\n   local destmode = lfs.attributes(dest, \"mode\")\r\n   if destmode == \"directory\" then\r\n      dest = dir.path(dest, dir.base_name(src))\r\n   end\r\n   if not perms then perms = fs.get_permissions(src) end\r\n   local src_h, err = io.open(src, \"rb\")\r\n   if not src_h then return nil, err end\r\n   local dest_h, err = io.open(dest, \"w+b\")\r\n   if not dest_h then src_h:close() return nil, err end\r\n   while true do\r\n      local block = src_h:read(8192)\r\n      if not block then break end\r\n      dest_h:write(block)\r\n   end\r\n   src_h:close()\r\n   dest_h:close()\r\n   fs.chmod(dest, perms)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "function copy_contents(src, dest)\r\n   assert(src and dest)\r\n   src = dir.normalize(src)\r\n   dest = dir.normalize(dest)\r\n   assert(lfs.attributes(src, \"mode\") == \"directory\")\r\n\r\n   for file in lfs.dir(src) do\r\n      if file ~= \".\" and file ~= \"..\" then\r\n         local ok = recursive_copy(dir.path(src, file), dest)\r\n         if not ok then\r\n            return false, \"Failed copying \"..src..\" to \"..dest\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "function delete(name)\r\n   name = dir.normalize(name)\r\n   recursive_delete(name)\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 171,
    "text": "function apply_patch(patchname, patchdata)\r\n   local p, all_ok = patch.read_patch(patchname, patchdata)\r\n   if not all_ok then\r\n      return nil, \"Failed reading patch \"..patchname\r\n   end\r\n   if p then\r\n      return patch.apply_patch(p, 1)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 172,
    "text": "function check_command_permissions(flags)\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   local ok = true\r\n   local err = \"\"\r\n   for _, dir in ipairs { cfg.rocks_dir, root_dir } do\r\n      if fs.exists(dir) and not fs.is_writable(dir) then\r\n         ok = false\r\n         err = \"Your user does not have write permissions in \" .. dir\r\n         break\r\n      end\r\n   end\r\n   local root_parent = dir.dir_name(root_dir)\r\n   if ok and not fs.exists(root_dir) and not fs.is_writable(root_parent) then\r\n      ok = false\r\n      err = root_dir..\" does not exist and your user does not have write permissions in \" .. root_parent\r\n   end\r\n   if ok then\r\n      return true\r\n   else\r\n      if flags[\"local\"] then\r\n         err = err .. \" \\n-- please check your permissions.\"\r\n      else\r\n         err = err .. \" \\n-- you may want to run as a privileged user or use your local tree with --local.\"\r\n      end\r\n      return nil, err\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 173,
    "text": "function install_binary_rock(rock_file, deps_mode)\r\n   assert(type(rock_file) == \"string\")\r\n\r\n   local name, version, arch = path.parse_name(rock_file)\r\n   if not name then\r\n      return nil, \"Filename \"..rock_file..\" does not match format 'name-version-revision.arch.rock'.\"\r\n   end\r\n   \r\n   if arch ~= \"all\" and arch ~= cfg.arch then\r\n      return nil, \"Incompatible architecture \"..arch, \"arch\"\r\n   end\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n   \r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n   \r\n   local ok, err, errcode = fetch.fetch_and_unpack_rock(rock_file, path.install_dir(name, version))\r\n   if not ok then return nil, err, errcode end\r\n   \r\n   local rockspec, err, errcode = fetch.load_rockspec(path.rockspec_file(name, version))\r\n   if err then\r\n      return nil, \"Failed loading rockspec for installed package: \"..err, errcode\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      ok, err, errcode = deps.check_external_deps(rockspec, \"install\")\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   -- For compatibility with .rock files built with LuaRocks 1\r\n   if not fs.exists(path.rock_manifest_file(name, version)) then\r\n      ok, err = manif.make_rock_manifest(name, version)\r\n      if err then return nil, err end\r\n   end\r\n\r\n   if deps_mode ~= \"none\" then\r\n      ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   local wrap_bin_scripts = true\r\n   if rockspec.deploy and rockspec.deploy.wrap_bin_scripts == false then\r\n      wrap_bin_scripts = false\r\n   end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n\r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n   \r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n   \r\n   local license = \"\"\r\n   if rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "function run(...)\r\n   local flags, rockspec = util.parse_flags(...)\r\n   assert(type(rockspec) == \"string\" or not rockspec)\r\n   \r\n   if not rockspec then\r\n      local files = fs.list_dir(fs.current_dir())\r\n      for _, file in pairs(files) do\r\n         if file:match(\"rockspec$\") then\r\n            if rockspec then\r\n               return nil, \"Please specify which rockspec file to use.\"\r\n            else\r\n               rockspec = file\r\n            end\r\n         end\r\n      end\r\n      if not rockspec then\r\n         return nil, \"Argument missing: please specify a rockspec to use on current directory.\"\r\n      end\r\n   end\r\n   if not rockspec:match(\"rockspec$\") then\r\n      return nil, \"Invalid argument: 'make' takes a rockspec as a parameter. \"..util.see_help(\"make\")\r\n   end\r\n\r\n   if flags[\"pack-binary-rock\"] then\r\n      local rspec, err, errcode = fetch.load_rockspec(rockspec)\r\n      if not rspec then\r\n         return nil, err\r\n      end\r\n      return pack.pack_binary_rock(rspec.name, rspec.version, build.build_rockspec, rockspec, false, true, deps.get_deps_mode(flags))\r\n   else\r\n      local ok, err = fs.check_command_permissions(flags)\r\n      if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n      ok, err = build.build_rockspec(rockspec, false, true, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "function make_rock_manifest(name, version)\r\n   local install_dir = path.install_dir(name, version)\r\n   local rock_manifest = path.rock_manifest_file(name, version)\r\n   local tree = {}\r\n   for _, file in ipairs(fs.find(install_dir)) do\r\n      local full_path = dir.path(install_dir, file)\r\n      local walk = tree\r\n      local last\r\n      local last_name\r\n      for name in file:gmatch(\"[^/]+\") do\r\n         local next = walk[name]\r\n         if not next then\r\n            next = {}\r\n            walk[name] = next\r\n         end\r\n         last = walk\r\n         last_name = name\r\n         walk = next\r\n      end\r\n      if fs.is_file(full_path) then\r\n         local sum, err = fs.get_md5(full_path)\r\n         if not sum then\r\n            return nil, \"Failed producing checksum: \"..tostring(err)\r\n         end\r\n         last[last_name] = sum\r\n      end\r\n   end\r\n   local rock_manifest = { rock_manifest=tree }\r\n   rock_manifest_cache[name..\"/\"..version] = rock_manifest\r\n   save_table(install_dir, \"rock_manifest\", rock_manifest )\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "function update_manifest(name, version, repo, deps_mode)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   repo = path.rocks_dir(repo or cfg.root_dir)\r\n   assert(type(deps_mode) == \"string\")\r\n   \r\n   if deps_mode == \"none\" then deps_mode = cfg.deps_mode end\r\n\r\n   util.printout(\"Updating manifest for \"..repo)\r\n\r\n   local manifest, err = load_manifest(repo)\r\n   if not manifest then\r\n      util.printerr(\"No existing manifest. Attempting to rebuild...\")\r\n      local ok, err = make_manifest(repo, deps_mode)\r\n      if not ok then\r\n         return nil, err\r\n      end\r\n      manifest, err = load_manifest(repo)\r\n      if not manifest then\r\n         return nil, err\r\n      end\r\n   end\r\n\r\n   local results = {[name] = {[version] = {{arch = \"installed\", repo = repo}}}}\r\n\r\n   local dep_handler = function(manifest)\r\n      update_dependencies(manifest, deps_mode)\r\n   end\r\n   local ok, err = store_results(results, manifest, dep_handler)\r\n   if not ok then return nil, err end\r\n\r\n   return save_table(repo, \"manifest\", manifest)\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "function pack_binary_rock(name, version, cmd, ...)\r\n\r\n   -- The --pack-binary-rock option for \"luarocks build\" basically performs\r\n   -- \"luarocks build\" on a temporary tree and then \"luarocks pack\". The\r\n   -- alternative would require refactoring parts of luarocks.build and\r\n   -- luarocks.pack, which would save a few file operations: the idea would be\r\n   -- to shave off the final deploy steps from the build phase and the initial\r\n   -- collect steps from the pack phase.\r\n\r\n   local temp_dir, err = fs.make_temp_dir(\"luarocks-build-pack-\"..dir.base_name(name))\r\n   if not temp_dir then\r\n      return nil, \"Failed creating temporary directory: \"..err\r\n   end\r\n   util.schedule_function(fs.delete, temp_dir)\r\n\r\n   path.use_tree(temp_dir)\r\n   local ok, err = cmd(...)\r\n   if not ok then\r\n      return nil, err\r\n   end\r\n   local rname, rversion = path.parse_name(name)\r\n   if not rname then\r\n      rname, rversion = name, version\r\n   end\r\n   return do_pack_binary_rock(rname, rversion)\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "function rockspec_name_from_rock(rock_name)\r\n   assert(type(rock_name) == \"string\")\r\n   local base_name = dir.base_name(rock_name)\r\n   return base_name:match(\"(.*)%.[^.]*.rock\") .. \".rockspec\"\r\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "function root_dir(rocks_dir)\r\n   assert(type(rocks_dir) == \"string\")\r\n   return rocks_dir:match(\"(.*)\" .. util.matchquote(cfg.rocks_subdir) .. \".*$\")\r\nend",
    "type": "function"
  }, {
    "id": 180,
    "text": "function versions_dir(name, tree)\r\n   assert(type(name) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name)\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "function install_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version)\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "function rockspec_file(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, name..\"-\"..version..\".rockspec\")\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "function lib_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, \"lib\")\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "function lua_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, \"lua\")\r\nend",
    "type": "function"
  }, {
    "id": 185,
    "text": "function conf_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, \"conf\")\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "function bin_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, \"bin\")\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "function module_to_path(mod)\r\n   assert(type(mod) == \"string\")\r\n   return (mod:gsub(\"[^.]*$\", \"\"):gsub(\"%.\", dir.separator))\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "function remove_other_versions(name, version, force)\r\n   local results = {}\r\n   search.manifest_search(results, cfg.rocks_dir, { name = name, exact_name = true, constraints = {{ op = \"~=\", version = version}} })\r\n   if results[name] then\r\n      return remove_search_results(results, name, cfg.deps_mode, force)\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 189,
    "text": "function is_installed(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n      \r\n   return fs.is_dir(path.install_dir(name, version))\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "function run_hook(rockspec, hook_name)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(hook_name) == \"string\")\r\n\r\n   local hooks = rockspec.hooks\r\n   if not hooks then\r\n      return true\r\n   end\r\n   \r\n   if cfg.hooks_enabled == false then\r\n      return nil, \"This rockspec contains hooks, which are blocked by the 'hooks_enabled' setting in your LuaRocks configuration.\"\r\n   end\r\n   \r\n   if not hooks.substituted_variables then\r\n      util.variable_substitutions(hooks, rockspec.variables)\r\n      hooks.substituted_variables = true\r\n   end\r\n   local hook = hooks[hook_name]\r\n   if hook then\r\n      util.printout(hook)\r\n      if not fs.execute(hook) then\r\n         return nil, \"Failed running \"..hook_name..\" hook.\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 191,
    "text": "function should_wrap_bin_scripts(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n\r\n   if cfg.wrap_bin_scripts ~= nil then\r\n      return cfg.wrap_bin_scripts\r\n   end\r\n   if rockspec.deploy and rockspec.deploy.wrap_bin_scripts == false then\r\n      return false\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "function deploy_files(name, version, wrap_bin_scripts)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   assert(type(wrap_bin_scripts) == \"boolean\")\r\n\r\n   local function deploy_file_tree(file_tree, path_fn, deploy_dir, move_fn)\r\n      local source_dir = path_fn(name, version)\r\n      if not move_fn then\r\n         move_fn = fs.move\r\n      end\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local source = dir.path(source_dir, parent_path, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local ok, err\r\n            if fs.exists(target) then\r\n               local new_target, err = resolve_conflict(target, deploy_dir, name, version)\r\n               if err == \"untracked\" then\r\n                  local backup = target\r\n                  repeat\r\n                     backup = backup..\"~\"\r\n                  until not fs.exists(backup) -- slight race condition here, but shouldn't be a problem.\r\n                  util.printerr(\"Warning: \"..target..\" is not tracked by this installation of LuaRocks. Moving it to \"..backup)\r\n                  fs.move(target, backup)\r\n               elseif err then\r\n                  return nil, err..\" Cannot install new version.\"\r\n               else\r\n                  target = new_target\r\n               end\r\n            end\r\n            ok, err = fs.make_dir(dir.dir_name(target))\r\n            if not ok then return nil, err end\r\n            ok, err = move_fn(source, target, name, version)\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(source))\r\n            if not ok then return nil, err end\r\n            return true\r\n         end\r\n      )\r\n   end\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   \r\n   local ok, err = true\r\n   if rock_manifest.bin then\r\n      local move_bin_fn = wrap_bin_scripts and install_binary or fs.copy_binary\r\n      ok, err = deploy_file_tree(rock_manifest.bin, path.bin_dir, cfg.deploy_bin_dir, move_bin_fn)\r\n   end\r\n   if ok and rock_manifest.lua then\r\n      ok, err = deploy_file_tree(rock_manifest.lua, path.lua_dir, cfg.deploy_lua_dir)\r\n   end\r\n   if ok and rock_manifest.lib then\r\n      ok, err = deploy_file_tree(rock_manifest.lib, path.lib_dir, cfg.deploy_lib_dir)\r\n   end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 193,
    "text": "function delete_version(name, version, quick)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local function delete_deployed_file_tree(file_tree, deploy_dir, suffix)\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local versioned = path.versioned_name(target, deploy_dir, name, version)\r\n            local ok, name, err = delete_suffixed(versioned, suffix)\r\n            if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end\r\n            if err == \"fail\" then return nil, name end\r\n            ok, name, err = delete_suffixed(target, suffix)\r\n            if err == \"fail\" then return nil, name end\r\n            if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(target))\r\n            return true\r\n         end\r\n      )\r\n   end\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end\r\n   \r\n   local ok, err = true\r\n   if rock_manifest.bin then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.bin, cfg.deploy_bin_dir, cfg.wrapper_suffix)\r\n   end\r\n   if ok and rock_manifest.lua then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lua, cfg.deploy_lua_dir)\r\n   end\r\n   if ok and rock_manifest.lib then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lib, cfg.deploy_lib_dir)\r\n   end\r\n   if err then return nil, err end\r\n\r\n   fs.delete(path.install_dir(name, version))\r\n   if not get_installed_versions(name) then\r\n      fs.delete(dir.path(cfg.rocks_dir, name))\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "function act_on_src_or_rockspec(action, name, version, ...)\r\n   assert(type(action) == \"function\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   local query = make_query(name, version)\r\n   query.arch = \"src|rockspec\"\r\n   local results, err = find_suitable_rock(query)\r\n   if type(results) == \"string\" then\r\n      return action(results, ...)\r\n   else\r\n      return nil, \"Could not find a result named \"..name..(version and \" \"..version or \"\")..\".\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 195,
    "text": "local function unpack_rockspec(rockspec_file, dir_name)\r\n   assert(type(rockspec_file) == \"string\")\r\n   assert(type(dir_name) == \"string\")\r\n\r\n   local rockspec, err = fetch.load_rockspec(rockspec_file)\r\n   if not rockspec then\r\n      return nil, \"Failed loading rockspec \"..rockspec_file..\": \"..err\r\n   end\r\n   local ok, err = fs.change_dir(dir_name)\r\n   if not ok then return nil, err end\r\n   local ok, sources_dir = fetch.fetch_sources(rockspec, true, \".\")\r\n   if not ok then\r\n      return nil, sources_dir\r\n   end\r\n   ok, err = fs.change_dir(sources_dir)\r\n   if not ok then return nil, err end\r\n   build.apply_patches(rockspec)\r\n   fs.pop_dir()\r\n   fs.pop_dir()\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "local function unpack_rock(rock_file, dir_name, kind)\r\n   assert(type(rock_file) == \"string\")\r\n   assert(type(dir_name) == \"string\")\r\n\r\n   local ok, err, errcode = fetch.fetch_and_unpack_rock(rock_file, dir_name)\r\n   if not ok then\r\n      return nil, \"Failed unzipping rock \"..rock_file, errcode\r\n   end\r\n   ok, err = fs.change_dir(dir_name)\r\n   if not ok then return nil, err end\r\n   local rockspec_file = dir_name..\".rockspec\"\r\n   local rockspec, err = fetch.load_rockspec(rockspec_file)\r\n   if not rockspec then\r\n      return nil, \"Failed loading rockspec \"..rockspec_file..\": \"..err\r\n   end\r\n   if kind == \"src\" then\r\n      if rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n         ok, err = fs.change_dir(rockspec.source.dir)\r\n         if not ok then return nil, err end\r\n         build.apply_patches(rockspec)\r\n         fs.pop_dir()\r\n      end\r\n   end\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 197,
    "text": "function schedule_function(f, ...)\r\n   assert(type(f) == \"function\")\r\n   \r\n   local item = { fn = f, args = {...} }\r\n   table.insert(scheduled_functions, item)\r\n   return item\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "function remove_scheduled_function(item)\r\n   for k, v in pairs(scheduled_functions) do\r\n      if v == item then\r\n         table.remove(scheduled_functions, k)\r\n         return\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 199,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "function sortedpairs(tbl, sort_function)\r\n   return coroutine.wrap(function() sortedpairs_iterator(tbl, sort_function) end)\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 202,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 203,
    "text": "function deps_mode_help(program)\r\n   return [[\r\n--deps-mode=<mode>  How to handle dependencies. Four modes are supported:\r\n                    * all - use all trees from the rocks_trees list\r\n                      for finding dependencies\r\n                    * one - use only the current tree (possibly set\r\n                      with --tree)\r\n                    * order - use trees based on order (use the current\r\n                      tree and all trees below it on the rocks_trees list)\r\n                    * none - ignore dependencies altogether.\r\n                    The default mode may be set with the deps_mode entry\r\n                    in the configuration file.\r\n                    The current default is \"]]..cfg.deps_mode..[[\".\r\n                    Type ']]..this_program(program or \"luarocks\")..[[' with no arguments to see\r\n                    your list of rocks trees.\r\n]]\r\nend",
    "type": "function"
  }, {
    "id": 204,
    "text": "function see_help(command, program)\r\n   return \"See '\"..this_program(program or \"luarocks\")..' help '..command..\"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 205,
    "text": "function array_contains(tbl, value)\r\n   for _, v in ipairs(tbl) do\r\n      if v == value then\r\n         return true\r\n      end\r\n   end\r\n   return false\r\nend",
    "type": "function"
  }, {
    "id": 206,
    "text": "local function validate_rockspec(file)\r\n   local ok, err, errcode = build.build_rockspec(file, true, \"one\")\r\n   if not ok then\r\n      util.printerr(err)\r\n   end\r\n   return ok, err, errcode\r\nend",
    "type": "function"
  }, {
    "id": 207,
    "text": "local function validate_src_rock(file)\r\n   local ok, err, errcode = build.build_rock(file, false, \"one\")\r\n   if not ok then\r\n      util.printerr(err)\r\n   end\r\n   return ok, err, errcode\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "unpack_archive",
    "type": "global function"
  }, {
    "id": 209,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 210,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 211,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 212,
    "text": "module",
    "type": "global function"
  }, {
    "id": 213,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 214,
    "text": "open",
    "type": "global function"
  }, {
    "id": 215,
    "text": "run",
    "type": "global function"
  }, {
    "id": 216,
    "text": "type",
    "type": "global function"
  }, {
    "id": 217,
    "text": "require",
    "type": "global function"
  }, {
    "id": 218,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 219,
    "text": "util)",
    "type": "module"
  }, {
    "id": 220,
    "text": "fetch)",
    "type": "module"
  }, {
    "id": 221,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 222,
    "text": "manif)",
    "type": "module"
  }, {
    "id": 223,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 224,
    "text": "path)",
    "type": "module"
  }, {
    "id": 225,
    "text": "",
    "type": "variable container"
  }, {
    "id": 226,
    "text": "",
    "type": "require container"
  }, {
    "id": 227,
    "text": "",
    "type": "global variable"
  }, {
    "id": 228,
    "text": "",
    "type": "global variable"
  }, {
    "id": 229,
    "text": "",
    "type": "global variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 232,
    "text": "pack)",
    "type": "module"
  }, {
    "id": 233,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 236,
    "text": "repos)",
    "type": "module"
  }, {
    "id": 237,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 239,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 241,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 242,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 243,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 244,
    "text": "search)",
    "type": "module"
  }, {
    "id": 245,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 246,
    "text": "remove)",
    "type": "module"
  }, {
    "id": 247,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 248,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 249,
    "text": "install)",
    "type": "module"
  }, {
    "id": 250,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 251,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 252,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 257,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 258,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 259,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 261,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 263,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 264,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 265,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 267,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 269,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 271,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 273,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 275,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 277,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 278,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 279,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 280,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 281,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 283,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 285,
    "text": "",
    "type": "require local variable"
  } ]
}