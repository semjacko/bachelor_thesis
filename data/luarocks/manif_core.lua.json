{
  "_filename": "manif_core.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/manif_core.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 21
  }, {
    "from": 4,
    "label": "calls",
    "to": 16
  }, {
    "from": 5,
    "label": "calls",
    "to": 7
  }, {
    "from": 6,
    "label": "calls",
    "to": 16
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 21,
    "label": "has",
    "to": 29
  }, {
    "from": 21,
    "label": "has",
    "to": 30
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 21,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 26
  }, {
    "from": 32,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 7,
    "label": "calls",
    "to": 38
  }, {
    "from": 16,
    "label": "calls",
    "to": 41
  }, {
    "from": 21,
    "label": "calls",
    "to": 41
  }, {
    "from": 21,
    "label": "calls",
    "to": 41
  }, {
    "from": 21,
    "label": "calls",
    "to": 40
  }, {
    "from": 21,
    "label": "calls",
    "to": 44
  }, {
    "from": 16,
    "label": "calls",
    "to": 7
  }, {
    "from": 16,
    "label": "calls",
    "to": 3
  }, {
    "from": 7,
    "label": "calls",
    "to": 37
  }, {
    "from": 21,
    "label": "calls",
    "to": 16
  }, {
    "from": 34,
    "label": "calls",
    "to": 42
  }, {
    "from": 21,
    "label": "calls",
    "to": 35
  }, {
    "from": 16,
    "label": "calls",
    "to": 43
  }, {
    "from": 21,
    "label": "calls",
    "to": 43
  }, {
    "from": 21,
    "label": "calls",
    "to": 43
  }, {
    "from": 34,
    "label": "calls",
    "to": 45
  }, {
    "from": 34,
    "label": "calls",
    "to": 45
  }, {
    "from": 34,
    "label": "calls",
    "to": 45
  }, {
    "from": 34,
    "label": "calls",
    "to": 45
  }, {
    "from": 34,
    "label": "calls",
    "to": 45
  }, {
    "from": 34,
    "label": "calls",
    "to": 45
  }, {
    "from": 21,
    "label": "calls",
    "to": 39
  }, {
    "from": 21,
    "label": "calls",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "declares",
    "to": 7
  }, {
    "from": 34,
    "label": "declares",
    "to": 16
  }, {
    "from": 34,
    "label": "declares",
    "to": 21
  }, {
    "from": 34,
    "label": "declares",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 52,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 53,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "requires",
    "to": 50
  }, {
    "from": 53,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "requires",
    "to": 51
  }, {
    "from": 53,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "requires",
    "to": 48
  }, {
    "from": 53,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "requires",
    "to": 47
  }, {
    "from": 53,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 46
  }, {
    "from": 53,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "requires",
    "to": 49
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 32
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "manif_core",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function match_dep(dep, blacklist, deps_mode)\r\n   assert(type(dep) == \"table\")\r\n\r\n   local versions = cfg.rocks_provided[dep.name]\r\n   if cfg.rocks_provided[dep.name] then\r\n      -- provided rocks have higher priority than manifest's rocks\r\n      versions = { cfg.rocks_provided[dep.name] }\r\n   else\r\n      versions = manif_core.get_versions(dep.name, deps_mode)\r\n   end\r\n   if not versions then\r\n      return nil\r\n   end\r\n   if blacklist then\r\n      local i = 1\r\n      while versions[i] do\r\n         if blacklist[versions[i]] then\r\n            table.remove(versions, i)\r\n         else\r\n            i = i + 1\r\n         end\r\n      end\r\n   end\r\n   local candidates = {}\r\n   for _, vstring in ipairs(versions) do\r\n      local version = parse_version(vstring)\r\n      if match_constraints(version, dep.constraints) then\r\n         table.insert(candidates, version)\r\n      end\r\n   end\r\n   if #candidates == 0 then\r\n      return nil\r\n   else\r\n      table.sort(candidates)\r\n      return {\r\n         name = dep.name,\r\n         version = candidates[#candidates].string\r\n      }\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function load_rocks_trees() \r\n   local any_ok = false\r\n   local trees = {}\r\n   for _, tree in ipairs(cfg.rocks_trees) do\r\n      local manifest, err = manif_core.load_local_manifest(path.rocks_dir(tree))\r\n      if manifest then\r\n         any_ok = true\r\n         table.insert(trees, {tree=tree, manifest=manifest})\r\n      end\r\n   end\r\n   if not any_ok then\r\n      rocks_trees = false\r\n      return false\r\n   end\r\n   rocks_trees = trees\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function load_manifest(repo_url)\r\n   assert(type(repo_url) == \"string\")\r\n\r\n   if manif_core.manifest_cache[repo_url] then\r\n      return manif_core.manifest_cache[repo_url]\r\n   end\r\n   \r\n   local filenames = {\r\n      \"manifest-\"..cfg.lua_version..\".zip\",\r\n      \"manifest-\"..cfg.lua_version,\r\n      \"manifest\",\r\n   }\r\n\r\n   local protocol, repodir = dir.split_url(repo_url)\r\n   local pathname\r\n   if protocol == \"file\" then\r\n      for _, filename in ipairs(filenames) do\r\n         pathname = dir.path(repodir, filename)\r\n         if fs.exists(pathname) then\r\n            break\r\n         end\r\n      end\r\n   else\r\n      local err\r\n      for _, filename in ipairs(filenames) do\r\n         pathname, err = fetch_manifest_from(repo_url, filename)\r\n         if pathname then\r\n            break\r\n         end\r\n      end\r\n      if not pathname then \r\n         return nil, err\r\n      end\r\n   end\r\n   if pathname:match(\".*%.zip$\") then\r\n      pathname = fs.absolute_name(pathname)\r\n      local dir = dir.dir_name(pathname)\r\n      fs.change_dir(dir)\r\n      local nozip = pathname:match(\"(.*)%.zip$\")\r\n      fs.delete(nozip)\r\n      local ok = fs.unzip(pathname)\r\n      fs.pop_dir()\r\n      if not ok then\r\n         fs.delete(pathname)\r\n         fs.delete(pathname..\".timestamp\")\r\n         return nil, \"Failed extracting manifest file\"\r\n      end\r\n      pathname = nozip\r\n   end\r\n   return manif_core.manifest_loader(pathname, repo_url)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function find_providers(file, root)\r\n   assert(type(file) == \"string\")\r\n   root = root or cfg.root_dir\r\n\r\n   local manifest, err = manif_core.load_local_manifest(path.rocks_dir(root))\r\n   if not manifest then\r\n      return nil, \"untracked\"\r\n   end\r\n   local deploy_bin = path.deploy_bin_dir(root)\r\n   local deploy_lua = path.deploy_lua_dir(root)\r\n   local deploy_lib = path.deploy_lib_dir(root)\r\n   local key, manifest_tbl\r\n\r\n   if util.starts_with(file, deploy_lua) then\r\n      manifest_tbl = manifest.modules\r\n      key = path.path_to_module(file:sub(#deploy_lua+1):gsub(\"\\\\\", \"/\"))\r\n   elseif util.starts_with(file, deploy_lib) then\r\n      manifest_tbl = manifest.modules\r\n      key = path.path_to_module(file:sub(#deploy_lib+1):gsub(\"\\\\\", \"/\"))\r\n   elseif util.starts_with(file, deploy_bin) then\r\n      manifest_tbl = manifest.commands\r\n      key = file:sub(#deploy_bin+1):gsub(\"^[\\\\/]*\", \"\")\r\n   else\r\n      assert(false, \"Assertion failed: '\"..file..\"' is not a deployed file.\")\r\n   end\r\n\r\n   local providers = manifest_tbl[key]\r\n   if not providers then\r\n      return nil, \"untracked\"\r\n   end\r\n   return providers\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function manifest_loader(file, repo_url, quick)\r\n   local manifest, err = persist.load_into_table(file)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest for \"..repo_url..\": \"..err\r\n   end\r\n   if not quick then\r\n      local ok, err = type_check.type_check_manifest(manifest)\r\n      if not ok then\r\n         return nil, \"Error checking manifest: \"..err\r\n      end\r\n   end\r\n\r\n   manifest_cache[repo_url] = manifest\r\n   return manifest\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local manifest, err = persist.load_into_table(file)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if not manifest then\r\n      return nil, \"Failed loading manifest for \"..repo_url..\": \"..err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "if not quick then\r\n      local ok, err = type_check.type_check_manifest(manifest)\r\n      if not ok then\r\n         return nil, \"Error checking manifest: \"..err\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "local ok, err = type_check.type_check_manifest(manifest)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if not ok then\r\n         return nil, \"Error checking manifest: \"..err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "manifest_cache[repo_url] = manifest",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function load_local_manifest(repo_url)\r\n   assert(type(repo_url) == \"string\")\r\n\r\n   if manifest_cache[repo_url] then\r\n      return manifest_cache[repo_url]\r\n   end\r\n\r\n   local pathname = dir.path(repo_url, \"manifest\")\r\n\r\n   return manifest_loader(pathname, repo_url, true)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "assert(type(repo_url) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "if manifest_cache[repo_url] then\r\n      return manifest_cache[repo_url]\r\n   end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "local pathname = dir.path(repo_url, \"manifest\")",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function get_versions(name, deps_mode)\r\n   assert(type(name) == \"string\")\r\n   assert(type(deps_mode) == \"string\")\r\n   \r\n   local manifest = {}\r\n   path.map_trees(deps_mode, function(tree)\r\n      local loaded = load_local_manifest(path.rocks_dir(tree))\r\n      if loaded then\r\n         util.deep_merge(manifest, loaded)\r\n      end\r\n   end)\r\n   \r\n   local item = next(manifest) and manifest.repository[name]\r\n   if item then\r\n      return util.keys(item)\r\n   end\r\n   return {}\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "assert(type(name) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert(type(deps_mode) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "local manifest = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "path.map_trees(deps_mode, function(tree)\r\n      local loaded = load_local_manifest(path.rocks_dir(tree))\r\n      if loaded then\r\n         util.deep_merge(manifest, loaded)\r\n      end\r\n   end)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "local loaded = load_local_manifest(path.rocks_dir(tree))",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if loaded then\r\n         util.deep_merge(manifest, loaded)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "util.deep_merge(manifest, loaded)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "local item = next(manifest) and manifest.repository[name]",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if item then\r\n      return util.keys(item)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(tree)\r\n      local loaded = load_local_manifest(path.rocks_dir(tree))\r\n      if loaded then\r\n         util.deep_merge(manifest, loaded)\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "",
    "type": "function container"
  }, {
    "id": 35,
    "text": "function rocks_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.rocks_subdir)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.rocks_dir or dir.path(tree.root, cfg.rocks_subdir)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function map_trees(deps_mode, fn, ...)\r\n   local result = {}\r\n   if deps_mode == \"one\" then\r\n      table.insert(result, (fn(cfg.root_dir, ...)) or 0)\r\n   elseif deps_mode == \"all\" or deps_mode == \"order\" then\r\n      local use = false\r\n      if deps_mode == \"all\" then\r\n         use = true\r\n      end\r\n      for _, tree in ipairs(cfg.rocks_trees) do\r\n         if dir.normalize(rocks_tree_to_string(tree)) == dir.normalize(rocks_tree_to_string(cfg.root_dir)) then\r\n            use = true\r\n         end\r\n         if use then\r\n            table.insert(result, (fn(tree, ...)) or 0)\r\n         end\r\n      end\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function load_into_table(filename, tbl)\r\n   assert(type(filename) == \"string\")\r\n   assert(type(tbl) == \"table\" or not tbl)\r\n\r\n   local result, chunk, ran, err\r\n   local result = tbl or {}\r\n   if _VERSION == \"Lua 5.1\" then -- Lua 5.1\r\n      chunk, err = loadfile(filename)\r\n      if chunk then\r\n         setfenv(chunk, result)\r\n         ran, err = pcall(chunk)\r\n      end\r\n   else -- Lua 5.2\r\n      chunk, err = loadfile(filename, \"t\", result)\r\n      if chunk then\r\n         ran, err = pcall(chunk)\r\n      end\r\n   end\r\n   \r\n   if not chunk then\r\n      if err:sub(1,5) ~= filename:sub(1,5) then\r\n         return false, err\r\n      end\r\n      return nil, \"Error loading file: \"..err\r\n   end\r\n   if not ran then\r\n      return nil, \"Error running file: \"..err\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function type_check_manifest(manifest)\r\n   assert(type(manifest) == \"table\")\r\n   return type_check_table(manifest, manifest_types, \"\")\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "function deep_merge(dst, src)\r\n   for k, v in pairs(src) do\r\n      if type(v) == \"table\" then\r\n         if not dst[k] then\r\n            dst[k] = {}\r\n         end\r\n         if type(dst[k]) == \"table\" then\r\n            deep_merge(dst[k], v)\r\n         else\r\n            dst[k] = v\r\n         end\r\n      else\r\n         dst[k] = v\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function keys(tbl)\r\n   local ks = {}\r\n   for k,_ in pairs(tbl) do\r\n      table.insert(ks, k)\r\n   end\r\n   return ks\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 42,
    "text": "module",
    "type": "global function"
  }, {
    "id": 43,
    "text": "type",
    "type": "global function"
  }, {
    "id": 44,
    "text": "next",
    "type": "global function"
  }, {
    "id": 45,
    "text": "require",
    "type": "global function"
  }, {
    "id": 46,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 47,
    "text": "util)",
    "type": "module"
  }, {
    "id": 48,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 49,
    "text": "path)",
    "type": "module"
  }, {
    "id": 50,
    "text": "persist)",
    "type": "module"
  }, {
    "id": 51,
    "text": "type_check)",
    "type": "module"
  }, {
    "id": 52,
    "text": "",
    "type": "variable container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "global variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  } ]
}