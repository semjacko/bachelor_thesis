{
  "_filename": "type_check.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/type_check.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 5
  }, {
    "from": 3,
    "label": "calls",
    "to": 35
  }, {
    "from": 4,
    "label": "calls",
    "to": 40
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 19
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 19
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "calls",
    "to": 44
  }, {
    "from": 43,
    "label": "calls",
    "to": 44
  }, {
    "from": 35,
    "label": "calls",
    "to": 44
  }, {
    "from": 40,
    "label": "calls",
    "to": 44
  }, {
    "from": 43,
    "label": "calls",
    "to": 48
  }, {
    "from": 43,
    "label": "calls",
    "to": 48
  }, {
    "from": 43,
    "label": "calls",
    "to": 5
  }, {
    "from": 35,
    "label": "calls",
    "to": 5
  }, {
    "from": 9,
    "label": "calls",
    "to": 46
  }, {
    "from": 43,
    "label": "calls",
    "to": 47
  }, {
    "from": 9,
    "label": "calls",
    "to": 21
  }, {
    "from": 35,
    "label": "calls",
    "to": 21
  }, {
    "from": 40,
    "label": "calls",
    "to": 21
  }, {
    "from": 9,
    "label": "calls",
    "to": 49
  }, {
    "from": 9,
    "label": "calls",
    "to": 49
  }, {
    "from": 9,
    "label": "calls",
    "to": 49
  }, {
    "from": 9,
    "label": "calls",
    "to": 49
  }, {
    "from": 43,
    "label": "calls",
    "to": 49
  }, {
    "from": 43,
    "label": "calls",
    "to": 49
  }, {
    "from": 43,
    "label": "calls",
    "to": 49
  }, {
    "from": 35,
    "label": "calls",
    "to": 49
  }, {
    "from": 40,
    "label": "calls",
    "to": 49
  }, {
    "from": 43,
    "label": "calls",
    "to": 9
  }, {
    "from": 43,
    "label": "calls",
    "to": 50
  }, {
    "from": 9,
    "label": "calls",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "declares",
    "to": 5
  }, {
    "from": 43,
    "label": "declares",
    "to": 9
  }, {
    "from": 43,
    "label": "declares",
    "to": 21
  }, {
    "from": 43,
    "label": "declares",
    "to": 35
  }, {
    "from": 43,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 52,
    "label": "initializes",
    "to": 54
  }, {
    "from": 52,
    "label": "initializes",
    "to": 55
  }, {
    "from": 52,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 52,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 52,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 52,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 52,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 52,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 52,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 52,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 52,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 53,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "requires",
    "to": 51
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "type_check",
    "type": "module"
  }, {
    "id": 2,
    "text": "function run_command(...)\r\n   local args = {...}\r\n   local cmdline_vars = {}\r\n   for i = #args, 1, -1 do\r\n      local arg = args[i]\r\n      if arg:match(\"^[^-][^=]*=\") then\r\n         local var, val = arg:match(\"^([A-Z_][A-Z0-9_]*)=(.*)\")\r\n         if val then\r\n            cmdline_vars[var] = val\r\n            table.remove(args, i)\r\n         else\r\n            die(\"Invalid assignment: \"..arg)\r\n         end\r\n      end\r\n   end\r\n   local nonflags = { util.parse_flags(unpack(args)) }\r\n   local flags = table.remove(nonflags, 1)\r\n   \r\n   if flags[\"from\"] then flags[\"server\"] = flags[\"from\"] end\r\n   if flags[\"only-from\"] then flags[\"only-server\"] = flags[\"only-from\"] end\r\n   if flags[\"only-sources-from\"] then flags[\"only-sources\"] = flags[\"only-sources-from\"] end\r\n   if flags[\"to\"] then flags[\"tree\"] = flags[\"to\"] end\r\n   if flags[\"nodeps\"] then\r\n      flags[\"deps-mode\"] = \"none\"\r\n      table.insert(args, \"--deps-mode=none\")\r\n   end\r\n   \r\n   cfg.flags = flags\r\n\r\n   local command\r\n   \r\n   if flags[\"verbose\"] then   -- setting it in the config file will kick-in earlier in the process\r\n      cfg.verbose = true\r\n      local fs = require(\"luarocks.fs\")\r\n      fs.verbose()\r\n   end\r\n\r\n   if flags[\"version\"] then\r\n      util.printout(program..\" \"..cfg.program_version)\r\n      util.printout(program_description)\r\n      util.printout()\r\n      os.exit(cfg.errorcodes.OK)\r\n   elseif flags[\"help\"] or #nonflags == 0 then\r\n      command = \"help\"\r\n      args = nonflags\r\n   else\r\n      command = nonflags[1]\r\n      for i, arg in ipairs(args) do\r\n         if arg == command then\r\n            table.remove(args, i)\r\n            break\r\n         end\r\n      end\r\n   end\r\n   command = command:gsub(\"-\", \"_\")\r\n\r\n   if flags[\"extensions\"] then\r\n      cfg.use_extensions = true\r\n      local type_check = require(\"luarocks.type_check\")\r\n      type_check.load_extensions()\r\n   end\r\n   \r\n   if cfg.local_by_default then\r\n      flags[\"local\"] = true\r\n   end\r\n\r\n   if flags[\"deps-mode\"] and not deps.check_deps_mode_flag(flags[\"deps-mode\"]) then\r\n      die(\"Invalid entry for --deps-mode.\")\r\n   end\r\n   \r\n   if flags[\"tree\"] then\r\n      if flags[\"tree\"] == true or flags[\"tree\"] == \"\" then\r\n         die(\"Argument error: use --tree=<path>\")\r\n      end\r\n      local named = false\r\n      for _, tree in ipairs(cfg.rocks_trees) do\r\n         if type(tree) == \"table\" and flags[\"tree\"] == tree.name then\r\n            if not tree.root then\r\n               die(\"Configuration error: tree '\"..tree.name..\"' has no 'root' field.\")\r\n            end\r\n            replace_tree(flags, args, tree.root)\r\n            named = true\r\n            break\r\n         end\r\n      end\r\n      if not named then\r\n         local fs = require(\"luarocks.fs\")\r\n         local root_dir = fs.absolute_name(flags[\"tree\"])\r\n         replace_tree(flags, args, root_dir)\r\n      end\r\n   elseif flags[\"local\"] then\r\n      replace_tree(flags, args, cfg.home_tree)\r\n   else\r\n      local trees = cfg.rocks_trees\r\n      path.use_tree(trees[#trees])\r\n   end\r\n\r\n   if type(cfg.root_dir) == \"string\" then\r\n     cfg.root_dir = cfg.root_dir:gsub(\"/+$\", \"\")\r\n   else\r\n     cfg.root_dir.root = cfg.root_dir.root:gsub(\"/+$\", \"\")\r\n   end\r\n   cfg.rocks_dir = cfg.rocks_dir:gsub(\"/+$\", \"\")\r\n   cfg.deploy_bin_dir = cfg.deploy_bin_dir:gsub(\"/+$\", \"\")\r\n   cfg.deploy_lua_dir = cfg.deploy_lua_dir:gsub(\"/+$\", \"\")\r\n   cfg.deploy_lib_dir = cfg.deploy_lib_dir:gsub(\"/+$\", \"\")\r\n   \r\n   cfg.variables.ROCKS_TREE = cfg.rocks_dir\r\n   cfg.variables.SCRIPTS_DIR = cfg.deploy_bin_dir\r\n\r\n   if flags[\"server\"] then\r\n      if flags[\"server\"] == true then\r\n         die(\"Argument error: use --server=<url>\")\r\n      end\r\n      local protocol, path = dir.split_url(flags[\"server\"])\r\n      table.insert(cfg.rocks_servers, 1, protocol..\"://\"..path)\r\n   end\r\n   \r\n   if flags[\"only-server\"] then\r\n      if flags[\"only-server\"] == true then\r\n         die(\"Argument error: use --only-server=<url>\")\r\n      end\r\n      cfg.rocks_servers = { flags[\"only-server\"] }\r\n   end\r\n\r\n   if flags[\"only-sources\"] then\r\n      cfg.only_sources_from = flags[\"only-sources\"]\r\n   end\r\n  \r\n   if command ~= \"help\" then\r\n      for k, v in pairs(cmdline_vars) do\r\n         cfg.variables[k] = v\r\n      end\r\n   end\r\n   \r\n   if commands[command] then\r\n      -- TODO the interface of run should be modified, to receive the\r\n      -- flags table and the (possibly unpacked) nonflags arguments.\r\n      -- This would remove redundant parsing of arguments.\r\n      -- I'm not changing this now to avoid messing with the run()\r\n      -- interface, which I know some people use (even though\r\n      -- I never published it as a public API...)\r\n      local cmd = require(commands[command])\r\n      local xp, ok, err, exitcode = xpcall(function() return cmd.run(unpack(args)) end, function(err)\r\n         die(debug.traceback(\"LuaRocks \"..cfg.program_version\r\n            ..\" bug (please report at luarocks-developers@lists.sourceforge.net).\\n\"\r\n            ..err, 2))\r\n      end)\r\n      if xp and (not ok) then\r\n         die(err, exitcode)\r\n      end\r\n   else\r\n      die(\"Unknown command: \"..command)\r\n   end\r\n   util.run_scheduled_functions()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function load_local_rockspec(filename, quick)\r\n   assert(type(filename) == \"string\")\r\n   filename = fs.absolute_name(filename)\r\n   local rockspec, err = persist.load_into_table(filename)\r\n   if not rockspec then\r\n      return nil, \"Could not load rockspec file \"..filename..\" (\"..err..\")\"\r\n   end\r\n\r\n   local ok, err = true, nil\r\n   if not quick then\r\n      ok, err = type_check.type_check_rockspec(rockspec)\r\n      if not ok then\r\n         return nil, filename..\": \"..err\r\n      end\r\n   end\r\n   \r\n   if rockspec.rockspec_format then\r\n      if deps.compare_versions(rockspec.rockspec_format, type_check.rockspec_format) then\r\n         return nil, \"Rockspec format \"..rockspec.rockspec_format..\" is not supported, please upgrade LuaRocks.\"\r\n      end\r\n   end\r\n\r\n   util.platform_overrides(rockspec.build)\r\n   util.platform_overrides(rockspec.dependencies)\r\n   util.platform_overrides(rockspec.external_dependencies)\r\n   util.platform_overrides(rockspec.source)\r\n   util.platform_overrides(rockspec.hooks)\r\n\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      rockspec.name = rockspec.package:lower()\r\n   else\r\n      rockspec.name = basename:match(\"(.*)-[^-]*-[0-9]*\")\r\n      if not rockspec.name then\r\n         return nil, \"Expected filename in format 'name-version-revision.rockspec'.\"\r\n      end\r\n   end\r\n\r\n   local protocol, pathname = dir.split_url(rockspec.source.url)\r\n   if is_basic_protocol(protocol) then\r\n      rockspec.source.file = rockspec.source.file or dir.base_name(rockspec.source.url)\r\n   end\r\n   rockspec.source.protocol, rockspec.source.pathname = protocol, pathname\r\n\r\n   -- Temporary compatibility\r\n   if rockspec.source.cvs_module then rockspec.source.module = rockspec.source.cvs_module end\r\n   if rockspec.source.cvs_tag then rockspec.source.tag = rockspec.source.cvs_tag end\r\n\r\n   local name_version = rockspec.package:lower() .. \"-\" .. rockspec.version\r\n   if basename ~= \"rockspec\" and basename ~= name_version .. \".rockspec\" then\r\n      return nil, \"Inconsistency between rockspec filename (\"..basename..\") and its contents (\"..name_version..\".rockspec).\"\r\n   end\r\n\r\n   rockspec.local_filename = filename\r\n   local filebase = rockspec.source.file or rockspec.source.url\r\n   local base = url_to_base_dir(filebase)\r\n   rockspec.source.dir = rockspec.source.dir\r\n                      or rockspec.source.module\r\n                      or ((filebase:match(\".lua$\") or filebase:match(\".c$\")) and \".\")\r\n                      or base\r\n   if rockspec.dependencies then\r\n      for i = 1, #rockspec.dependencies do\r\n         local parsed, err = deps.parse_dep(rockspec.dependencies[i])\r\n         if not parsed then\r\n            return nil, \"Parse error processing dependency '\"..rockspec.dependencies[i]..\"': \"..tostring(err)\r\n         end\r\n         rockspec.dependencies[i] = parsed\r\n      end\r\n   else\r\n      rockspec.dependencies = {}\r\n   end\r\n   if not quick then\r\n      path.configure_paths(rockspec)\r\n   end\r\n\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function manifest_loader(file, repo_url, quick)\r\n   local manifest, err = persist.load_into_table(file)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest for \"..repo_url..\": \"..err\r\n   end\r\n   if not quick then\r\n      local ok, err = type_check.type_check_manifest(manifest)\r\n      if not ok then\r\n         return nil, \"Error checking manifest: \"..err\r\n      end\r\n   end\r\n\r\n   manifest_cache[repo_url] = manifest\r\n   return manifest\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function load_extensions()\r\n   rockspec_format = \"1.1\"\r\n   rockspec_types.deploy = {\r\n      wrap_bin_scripts = true,\r\n   }\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "rockspec_format = \"1.1\"",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "rockspec_types.deploy = {\r\n      wrap_bin_scripts = true,\r\n   }",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function type_check_item(name, item, expected, context)\r\n   name = tostring(name)\r\n\r\n   local item_type = type(item)\r\n   local expected_type = type(expected)\r\n   if expected_type == \"number\" then\r\n      if not tonumber(item) then\r\n         return nil, \"Type mismatch on field \"..context..name..\": expected a number\"\r\n      end\r\n   elseif expected_type == \"string\" then\r\n      if type(item) ~= \"string\" then\r\n         return nil, \"Type mismatch on field \"..context..name..\": expected a string\"\r\n      end\r\n      if expected ~= \"string\" then\r\n         if item_type ~= \"string\" then\r\n            return nil, \"Type mismatch on field \"..context..name..\": expected a string, got a \"..type(item)\r\n         elseif not item:match(\"^\"..expected..\"$\") then\r\n            return nil, \"Type mismatch on field \"..context..name..\": invalid value \"..item..\" does not match '\"..expected..\"'\"\r\n         end\r\n      end\r\n   elseif expected_type == \"table\" then\r\n      if item_type ~= expected_type then\r\n         return nil, \"Type mismatch on field \"..context..name..\": expected a table\"\r\n      else\r\n         return type_check_table(item, expected, context..name..\".\")\r\n      end\r\n   elseif item_type ~= expected_type then\r\n      return nil, \"Type mismatch on field \"..context..name..\": expected a \"..expected_type\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "name = tostring(name)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local item_type = type(item)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local expected_type = type(expected)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if expected_type == \"number\" then\r\n      if not tonumber(item) then\r\n         return nil, \"Type mismatch on field \"..context..name..\": expected a number\"\r\n      end\r\n   elseif expected_type == \"string\" then\r\n      if type(item) ~= \"string\" then\r\n         return nil, \"Type mismatch on field \"..context..name..\": expected a string\"\r\n      end\r\n      if expected ~= \"string\" then\r\n         if item_type ~= \"string\" then\r\n            return nil, \"Type mismatch on field \"..context..name..\": expected a string, got a \"..type(item)\r\n         elseif not item:match(\"^\"..expected..\"$\") then\r\n            return nil, \"Type mismatch on field \"..context..name..\": invalid value \"..item..\" does not match '\"..expected..\"'\"\r\n         end\r\n      end\r\n   elseif expected_type == \"table\" then\r\n      if item_type ~= expected_type then\r\n         return nil, \"Type mismatch on field \"..context..name..\": expected a table\"\r\n      else\r\n         return type_check_table(item, expected, context..name..\".\")\r\n      end\r\n   elseif item_type ~= expected_type then\r\n      return nil, \"Type mismatch on field \"..context..name..\": expected a \"..expected_type\r\n   end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "if not tonumber(item) then\r\n         return nil, \"Type mismatch on field \"..context..name..\": expected a number\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if type(item) ~= \"string\" then\r\n         return nil, \"Type mismatch on field \"..context..name..\": expected a string\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if expected ~= \"string\" then\r\n         if item_type ~= \"string\" then\r\n            return nil, \"Type mismatch on field \"..context..name..\": expected a string, got a \"..type(item)\r\n         elseif not item:match(\"^\"..expected..\"$\") then\r\n            return nil, \"Type mismatch on field \"..context..name..\": invalid value \"..item..\" does not match '\"..expected..\"'\"\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "if item_type ~= \"string\" then\r\n            return nil, \"Type mismatch on field \"..context..name..\": expected a string, got a \"..type(item)\r\n         elseif not item:match(\"^\"..expected..\"$\") then\r\n            return nil, \"Type mismatch on field \"..context..name..\": invalid value \"..item..\" does not match '\"..expected..\"'\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "if item_type ~= expected_type then\r\n         return nil, \"Type mismatch on field \"..context..name..\": expected a table\"\r\n      else\r\n         return type_check_table(item, expected, context..name..\".\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function(tbl, types, context)\r\n   assert(type(tbl) == \"table\")\r\n   assert(type(types) == \"table\")\r\n   for k, v in pairs(tbl) do\r\n      local t = types[k] or (type(k) == \"string\" and types[\"MUST_\"..k]) or types.ANY\r\n      if t then \r\n         local ok, err = type_check_item(k, v, t, context)\r\n         if not ok then return nil, err end\r\n      elseif types.MORE then\r\n         -- Accept unknown field\r\n      else\r\n         if not cfg.accept_unknown_fields then\r\n            return nil, \"Unknown field \"..k\r\n         end\r\n      end\r\n   end\r\n   for k, v in pairs(types) do\r\n      local mandatory_key = k:match(\"^MUST_(.+)\")\r\n      if mandatory_key then\r\n         if not tbl[mandatory_key] then\r\n            return nil, \"Mandatory field \"..context..mandatory_key..\" is missing.\"\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "assert(type(tbl) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert(type(types) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "for k, v in pairs(tbl) do\r\n      local t = types[k] or (type(k) == \"string\" and types[\"MUST_\"..k]) or types.ANY\r\n      if t then \r\n         local ok, err = type_check_item(k, v, t, context)\r\n         if not ok then return nil, err end\r\n      elseif types.MORE then\r\n         -- Accept unknown field\r\n      else\r\n         if not cfg.accept_unknown_fields then\r\n            return nil, \"Unknown field \"..k\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "local t = types[k] or (type(k) == \"string\" and types[\"MUST_\"..k]) or types.ANY",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if t then \r\n         local ok, err = type_check_item(k, v, t, context)\r\n         if not ok then return nil, err end\r\n      elseif types.MORE then\r\n         -- Accept unknown field\r\n      else\r\n         if not cfg.accept_unknown_fields then\r\n            return nil, \"Unknown field \"..k\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local ok, err = type_check_item(k, v, t, context)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "if not cfg.accept_unknown_fields then\r\n            return nil, \"Unknown field \"..k\r\n         end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "for k, v in pairs(types) do\r\n      local mandatory_key = k:match(\"^MUST_(.+)\")\r\n      if mandatory_key then\r\n         if not tbl[mandatory_key] then\r\n            return nil, \"Mandatory field \"..context..mandatory_key..\" is missing.\"\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "local mandatory_key = k:match(\"^MUST_(.+)\")",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if mandatory_key then\r\n         if not tbl[mandatory_key] then\r\n            return nil, \"Mandatory field \"..context..mandatory_key..\" is missing.\"\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "if not tbl[mandatory_key] then\r\n            return nil, \"Mandatory field \"..context..mandatory_key..\" is missing.\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function type_check_rockspec(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n   if rockspec.rockspec_format then\r\n      -- relies on global state\r\n      load_extensions()\r\n   end\r\n   return type_check_table(rockspec, rockspec_types, \"\")\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "assert(type(rockspec) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if rockspec.rockspec_format then\r\n      -- relies on global state\r\n      load_extensions()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "load_extensions()",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function type_check_manifest(manifest)\r\n   assert(type(manifest) == \"table\")\r\n   return type_check_table(manifest, manifest_types, \"\")\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert(type(manifest) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "",
    "type": "function container"
  }, {
    "id": 44,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 45,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 46,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 47,
    "text": "module",
    "type": "global function"
  }, {
    "id": 48,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 49,
    "text": "type",
    "type": "global function"
  }, {
    "id": 50,
    "text": "require",
    "type": "global function"
  }, {
    "id": 51,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 52,
    "text": "",
    "type": "variable container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "global variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "global variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "global variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "global variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "global variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "global variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "require local variable"
  } ]
}