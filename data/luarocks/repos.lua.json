{
  "_filename": "repos.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/repos.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 146
  }, {
    "from": 2,
    "label": "calls",
    "to": 146
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 66
  }, {
    "from": 14,
    "label": "calls",
    "to": 146
  }, {
    "from": 14,
    "label": "calls",
    "to": 146
  }, {
    "from": 14,
    "label": "calls",
    "to": 66
  }, {
    "from": 14,
    "label": "calls",
    "to": 105
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 30
  }, {
    "from": 18,
    "label": "calls",
    "to": 60
  }, {
    "from": 23,
    "label": "calls",
    "to": 146
  }, {
    "from": 24,
    "label": "calls",
    "to": 146
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 28
  }, {
    "from": 36,
    "label": "has",
    "to": 28
  }, {
    "from": 36,
    "label": "has",
    "to": 28
  }, {
    "from": 33,
    "label": "has",
    "to": 28
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 43,
    "label": "has",
    "to": 28
  }, {
    "from": 43,
    "label": "has",
    "to": 28
  }, {
    "from": 43,
    "label": "has",
    "to": 28
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 28
  }, {
    "from": 45,
    "label": "has",
    "to": 28
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 28
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 31
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 28
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 51
  }, {
    "from": 57,
    "label": "has",
    "to": 31
  }, {
    "from": 57,
    "label": "has",
    "to": 52
  }, {
    "from": 57,
    "label": "has",
    "to": 53
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 28
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 26
  }, {
    "from": 60,
    "label": "has",
    "to": 31
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 28
  }, {
    "from": 60,
    "label": "has",
    "to": 28
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 28
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 28
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 66,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 66,
    "label": "has",
    "to": 28
  }, {
    "from": 66,
    "label": "has",
    "to": 28
  }, {
    "from": 66,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 80,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 80,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 80,
    "label": "has",
    "to": 28
  }, {
    "from": 80,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 28
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 40
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 93,
    "label": "has",
    "to": 28
  }, {
    "from": 93,
    "label": "has",
    "to": 28
  }, {
    "from": 93,
    "label": "has",
    "to": 28
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 67
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 28
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 28
  }, {
    "from": 101,
    "label": "has",
    "to": 28
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 26
  }, {
    "from": 105,
    "label": "has",
    "to": 31
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 28
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 107,
    "label": "has",
    "to": 112
  }, {
    "from": 107,
    "label": "has",
    "to": 113
  }, {
    "from": 107,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 116,
    "label": "has",
    "to": 122
  }, {
    "from": 107,
    "label": "has",
    "to": 28
  }, {
    "from": 107,
    "label": "has",
    "to": 123
  }, {
    "from": 107,
    "label": "has",
    "to": 40
  }, {
    "from": 107,
    "label": "has",
    "to": 28
  }, {
    "from": 107,
    "label": "has",
    "to": 124
  }, {
    "from": 107,
    "label": "has",
    "to": 125
  }, {
    "from": 107,
    "label": "has",
    "to": 40
  }, {
    "from": 107,
    "label": "has",
    "to": 28
  }, {
    "from": 107,
    "label": "has",
    "to": 28
  }, {
    "from": 105,
    "label": "has",
    "to": 61
  }, {
    "from": 105,
    "label": "has",
    "to": 126
  }, {
    "from": 105,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 105,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 105,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 105,
    "label": "has",
    "to": 28
  }, {
    "from": 105,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 108
  }, {
    "from": 135,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 135,
    "label": "has",
    "to": 28
  }, {
    "from": 135,
    "label": "has",
    "to": 111
  }, {
    "from": 135,
    "label": "has",
    "to": 112
  }, {
    "from": 135,
    "label": "has",
    "to": 113
  }, {
    "from": 135,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 116,
    "label": "has",
    "to": 122
  }, {
    "from": 135,
    "label": "has",
    "to": 28
  }, {
    "from": 135,
    "label": "has",
    "to": 123
  }, {
    "from": 135,
    "label": "has",
    "to": 40
  }, {
    "from": 135,
    "label": "has",
    "to": 28
  }, {
    "from": 135,
    "label": "has",
    "to": 124
  }, {
    "from": 135,
    "label": "has",
    "to": 125
  }, {
    "from": 135,
    "label": "has",
    "to": 40
  }, {
    "from": 135,
    "label": "has",
    "to": 28
  }, {
    "from": 135,
    "label": "has",
    "to": 28
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 137,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 137,
    "label": "has",
    "to": 28
  }, {
    "from": 137,
    "label": "has",
    "to": 28
  }, {
    "from": 137,
    "label": "has",
    "to": 28
  }, {
    "from": 137,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 26
  }, {
    "from": 146,
    "label": "has",
    "to": 31
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 28
  }, {
    "from": 147,
    "label": "has",
    "to": 112
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 28
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 28
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 28
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 159
  }, {
    "from": 147,
    "label": "has",
    "to": 28
  }, {
    "from": 146,
    "label": "has",
    "to": 61
  }, {
    "from": 146,
    "label": "has",
    "to": 160
  }, {
    "from": 146,
    "label": "has",
    "to": 28
  }, {
    "from": 146,
    "label": "has",
    "to": 126
  }, {
    "from": 146,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 146,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 146,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 146,
    "label": "has",
    "to": 167
  }, {
    "from": 146,
    "label": "has",
    "to": 28
  }, {
    "from": 146,
    "label": "has",
    "to": 168
  }, {
    "from": 146,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 146,
    "label": "has",
    "to": 28
  }, {
    "from": 146,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 28
  }, {
    "from": 172,
    "label": "has",
    "to": 112
  }, {
    "from": 172,
    "label": "has",
    "to": 148
  }, {
    "from": 172,
    "label": "has",
    "to": 149
  }, {
    "from": 172,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 172,
    "label": "has",
    "to": 28
  }, {
    "from": 172,
    "label": "has",
    "to": 152
  }, {
    "from": 172,
    "label": "has",
    "to": 28
  }, {
    "from": 172,
    "label": "has",
    "to": 153
  }, {
    "from": 172,
    "label": "has",
    "to": 152
  }, {
    "from": 172,
    "label": "has",
    "to": 28
  }, {
    "from": 172,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 151
  }, {
    "from": 172,
    "label": "has",
    "to": 159
  }, {
    "from": 172,
    "label": "has",
    "to": 28
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 47
  }, {
    "from": 174,
    "label": "has",
    "to": 48
  }, {
    "from": 174,
    "label": "has",
    "to": 28
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 111
  }, {
    "from": 176,
    "label": "has",
    "to": 112
  }, {
    "from": 176,
    "label": "has",
    "to": 113
  }, {
    "from": 176,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 116,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 116,
    "label": "has",
    "to": 122
  }, {
    "from": 176,
    "label": "has",
    "to": 28
  }, {
    "from": 176,
    "label": "has",
    "to": 123
  }, {
    "from": 176,
    "label": "has",
    "to": 40
  }, {
    "from": 176,
    "label": "has",
    "to": 28
  }, {
    "from": 176,
    "label": "has",
    "to": 124
  }, {
    "from": 176,
    "label": "has",
    "to": 125
  }, {
    "from": 176,
    "label": "has",
    "to": 40
  }, {
    "from": 176,
    "label": "has",
    "to": 28
  }, {
    "from": 176,
    "label": "has",
    "to": 28
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 112
  }, {
    "from": 178,
    "label": "has",
    "to": 148
  }, {
    "from": 178,
    "label": "has",
    "to": 149
  }, {
    "from": 178,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 178,
    "label": "has",
    "to": 28
  }, {
    "from": 178,
    "label": "has",
    "to": 152
  }, {
    "from": 178,
    "label": "has",
    "to": 28
  }, {
    "from": 178,
    "label": "has",
    "to": 153
  }, {
    "from": 178,
    "label": "has",
    "to": 152
  }, {
    "from": 178,
    "label": "has",
    "to": 28
  }, {
    "from": 178,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 151
  }, {
    "from": 178,
    "label": "has",
    "to": 159
  }, {
    "from": 178,
    "label": "has",
    "to": 28
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 93,
    "label": "calls",
    "to": 3
  }, {
    "from": 30,
    "label": "calls",
    "to": 12
  }, {
    "from": 25,
    "label": "calls",
    "to": 187
  }, {
    "from": 30,
    "label": "calls",
    "to": 187
  }, {
    "from": 30,
    "label": "calls",
    "to": 187
  }, {
    "from": 33,
    "label": "calls",
    "to": 187
  }, {
    "from": 33,
    "label": "calls",
    "to": 187
  }, {
    "from": 50,
    "label": "calls",
    "to": 187
  }, {
    "from": 50,
    "label": "calls",
    "to": 187
  }, {
    "from": 57,
    "label": "calls",
    "to": 187
  }, {
    "from": 57,
    "label": "calls",
    "to": 187
  }, {
    "from": 60,
    "label": "calls",
    "to": 187
  }, {
    "from": 60,
    "label": "calls",
    "to": 187
  }, {
    "from": 66,
    "label": "calls",
    "to": 187
  }, {
    "from": 66,
    "label": "calls",
    "to": 187
  }, {
    "from": 80,
    "label": "calls",
    "to": 187
  }, {
    "from": 80,
    "label": "calls",
    "to": 187
  }, {
    "from": 101,
    "label": "calls",
    "to": 187
  }, {
    "from": 105,
    "label": "calls",
    "to": 187
  }, {
    "from": 105,
    "label": "calls",
    "to": 187
  }, {
    "from": 105,
    "label": "calls",
    "to": 187
  }, {
    "from": 146,
    "label": "calls",
    "to": 187
  }, {
    "from": 146,
    "label": "calls",
    "to": 187
  }, {
    "from": 93,
    "label": "calls",
    "to": 7
  }, {
    "from": 135,
    "label": "calls",
    "to": 7
  }, {
    "from": 45,
    "label": "calls",
    "to": 21
  }, {
    "from": 60,
    "label": "calls",
    "to": 5
  }, {
    "from": 135,
    "label": "calls",
    "to": 5
  }, {
    "from": 135,
    "label": "calls",
    "to": 5
  }, {
    "from": 172,
    "label": "calls",
    "to": 5
  }, {
    "from": 146,
    "label": "calls",
    "to": 5
  }, {
    "from": 93,
    "label": "calls",
    "to": 16
  }, {
    "from": 135,
    "label": "calls",
    "to": 191
  }, {
    "from": 66,
    "label": "calls",
    "to": 181
  }, {
    "from": 33,
    "label": "calls",
    "to": 192
  }, {
    "from": 60,
    "label": "calls",
    "to": 186
  }, {
    "from": 80,
    "label": "calls",
    "to": 185
  }, {
    "from": 137,
    "label": "calls",
    "to": 188
  }, {
    "from": 135,
    "label": "calls",
    "to": 8
  }, {
    "from": 172,
    "label": "calls",
    "to": 8
  }, {
    "from": 172,
    "label": "calls",
    "to": 8
  }, {
    "from": 172,
    "label": "calls",
    "to": 8
  }, {
    "from": 45,
    "label": "calls",
    "to": 33
  }, {
    "from": 135,
    "label": "calls",
    "to": 33
  }, {
    "from": 172,
    "label": "calls",
    "to": 33
  }, {
    "from": 135,
    "label": "calls",
    "to": 183
  }, {
    "from": 180,
    "label": "calls",
    "to": 189
  }, {
    "from": 93,
    "label": "calls",
    "to": 22
  }, {
    "from": 93,
    "label": "calls",
    "to": 22
  }, {
    "from": 172,
    "label": "calls",
    "to": 22
  }, {
    "from": 172,
    "label": "calls",
    "to": 22
  }, {
    "from": 33,
    "label": "calls",
    "to": 43
  }, {
    "from": 33,
    "label": "calls",
    "to": 43
  }, {
    "from": 66,
    "label": "calls",
    "to": 6
  }, {
    "from": 30,
    "label": "calls",
    "to": 20
  }, {
    "from": 146,
    "label": "calls",
    "to": 20
  }, {
    "from": 33,
    "label": "calls",
    "to": 193
  }, {
    "from": 60,
    "label": "calls",
    "to": 193
  }, {
    "from": 80,
    "label": "calls",
    "to": 194
  }, {
    "from": 146,
    "label": "calls",
    "to": 172
  }, {
    "from": 146,
    "label": "calls",
    "to": 172
  }, {
    "from": 146,
    "label": "calls",
    "to": 172
  }, {
    "from": 172,
    "label": "calls",
    "to": 137
  }, {
    "from": 172,
    "label": "calls",
    "to": 137
  }, {
    "from": 25,
    "label": "calls",
    "to": 19
  }, {
    "from": 105,
    "label": "calls",
    "to": 135
  }, {
    "from": 105,
    "label": "calls",
    "to": 135
  }, {
    "from": 105,
    "label": "calls",
    "to": 135
  }, {
    "from": 135,
    "label": "calls",
    "to": 190
  }, {
    "from": 66,
    "label": "calls",
    "to": 182
  }, {
    "from": 50,
    "label": "calls",
    "to": 45
  }, {
    "from": 50,
    "label": "calls",
    "to": 45
  }, {
    "from": 57,
    "label": "calls",
    "to": 45
  }, {
    "from": 180,
    "label": "calls",
    "to": 196
  }, {
    "from": 180,
    "label": "calls",
    "to": 196
  }, {
    "from": 180,
    "label": "calls",
    "to": 196
  }, {
    "from": 180,
    "label": "calls",
    "to": 196
  }, {
    "from": 180,
    "label": "calls",
    "to": 196
  }, {
    "from": 180,
    "label": "calls",
    "to": 196
  }, {
    "from": 180,
    "label": "calls",
    "to": 196
  }, {
    "from": 25,
    "label": "calls",
    "to": 195
  }, {
    "from": 30,
    "label": "calls",
    "to": 195
  }, {
    "from": 30,
    "label": "calls",
    "to": 195
  }, {
    "from": 33,
    "label": "calls",
    "to": 195
  }, {
    "from": 33,
    "label": "calls",
    "to": 195
  }, {
    "from": 33,
    "label": "calls",
    "to": 195
  }, {
    "from": 50,
    "label": "calls",
    "to": 195
  }, {
    "from": 50,
    "label": "calls",
    "to": 195
  }, {
    "from": 57,
    "label": "calls",
    "to": 195
  }, {
    "from": 57,
    "label": "calls",
    "to": 195
  }, {
    "from": 60,
    "label": "calls",
    "to": 195
  }, {
    "from": 60,
    "label": "calls",
    "to": 195
  }, {
    "from": 66,
    "label": "calls",
    "to": 195
  }, {
    "from": 66,
    "label": "calls",
    "to": 195
  }, {
    "from": 80,
    "label": "calls",
    "to": 195
  }, {
    "from": 80,
    "label": "calls",
    "to": 195
  }, {
    "from": 101,
    "label": "calls",
    "to": 195
  }, {
    "from": 105,
    "label": "calls",
    "to": 195
  }, {
    "from": 105,
    "label": "calls",
    "to": 195
  }, {
    "from": 105,
    "label": "calls",
    "to": 195
  }, {
    "from": 146,
    "label": "calls",
    "to": 195
  }, {
    "from": 146,
    "label": "calls",
    "to": 195
  }, {
    "from": 135,
    "label": "calls",
    "to": 93
  }, {
    "from": 25,
    "label": "calls",
    "to": 10
  }, {
    "from": 93,
    "label": "calls",
    "to": 4
  }, {
    "from": 135,
    "label": "calls",
    "to": 4
  }, {
    "from": 135,
    "label": "calls",
    "to": 4
  }, {
    "from": 172,
    "label": "calls",
    "to": 4
  }, {
    "from": 172,
    "label": "calls",
    "to": 4
  }, {
    "from": 172,
    "label": "calls",
    "to": 4
  }, {
    "from": 93,
    "label": "calls",
    "to": 13
  }, {
    "from": 135,
    "label": "calls",
    "to": 13
  }, {
    "from": 172,
    "label": "calls",
    "to": 13
  }, {
    "from": 50,
    "label": "calls",
    "to": 15
  }, {
    "from": 57,
    "label": "calls",
    "to": 15
  }, {
    "from": 60,
    "label": "calls",
    "to": 15
  }, {
    "from": 105,
    "label": "calls",
    "to": 15
  }, {
    "from": 146,
    "label": "calls",
    "to": 15
  }, {
    "from": 135,
    "label": "calls",
    "to": 11
  }, {
    "from": 135,
    "label": "calls",
    "to": 11
  }, {
    "from": 137,
    "label": "calls",
    "to": 11
  }, {
    "from": 137,
    "label": "calls",
    "to": 11
  }, {
    "from": 146,
    "label": "calls",
    "to": 25
  }, {
    "from": 172,
    "label": "calls",
    "to": 17
  }, {
    "from": 80,
    "label": "calls",
    "to": 184
  }, {
    "from": 137,
    "label": "calls",
    "to": 9
  }, {
    "from": 146,
    "label": "calls",
    "to": 9
  }, {
    "from": 146,
    "label": "calls",
    "to": 9
  }, {
    "from": 1,
    "label": "contains",
    "to": 180
  }, {
    "from": 180,
    "label": "declares",
    "to": 25
  }, {
    "from": 180,
    "label": "declares",
    "to": 30
  }, {
    "from": 180,
    "label": "declares",
    "to": 33
  }, {
    "from": 180,
    "label": "declares",
    "to": 43
  }, {
    "from": 180,
    "label": "declares",
    "to": 45
  }, {
    "from": 180,
    "label": "declares",
    "to": 50
  }, {
    "from": 180,
    "label": "declares",
    "to": 57
  }, {
    "from": 180,
    "label": "declares",
    "to": 60
  }, {
    "from": 180,
    "label": "declares",
    "to": 66
  }, {
    "from": 180,
    "label": "declares",
    "to": 80
  }, {
    "from": 180,
    "label": "declares",
    "to": 93
  }, {
    "from": 180,
    "label": "declares",
    "to": 101
  }, {
    "from": 180,
    "label": "declares",
    "to": 105
  }, {
    "from": 180,
    "label": "declares",
    "to": 135
  }, {
    "from": 180,
    "label": "declares",
    "to": 137
  }, {
    "from": 180,
    "label": "declares",
    "to": 146
  }, {
    "from": 180,
    "label": "declares",
    "to": 172
  }, {
    "from": 180,
    "label": "declares",
    "to": 174
  }, {
    "from": 180,
    "label": "declares",
    "to": 176
  }, {
    "from": 180,
    "label": "declares",
    "to": 178
  }, {
    "from": 1,
    "label": "contains",
    "to": 204
  }, {
    "from": 1,
    "label": "contains",
    "to": 205
  }, {
    "from": 205,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "requires",
    "to": 201
  }, {
    "from": 205,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "requires",
    "to": 202
  }, {
    "from": 205,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "requires",
    "to": 197
  }, {
    "from": 205,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "requires",
    "to": 198
  }, {
    "from": 205,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "requires",
    "to": 199
  }, {
    "from": 205,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "requires",
    "to": 200
  }, {
    "from": 205,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "requires",
    "to": 203
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "repos",
    "type": "module"
  }, {
    "id": 2,
    "text": "function build_rockspec(rockspec_file, need_to_fetch, minimal_mode, deps_mode)\r\n   assert(type(rockspec_file) == \"string\")\r\n   assert(type(need_to_fetch) == \"boolean\")\r\n\r\n   local rockspec, err, errcode = fetch.load_rockspec(rockspec_file)\r\n   if err then\r\n      return nil, err, errcode\r\n   elseif not rockspec.build then\r\n      return nil, \"Rockspec error: build table not specified\"\r\n   elseif not rockspec.build.type then\r\n      return nil, \"Rockspec error: build type not specified\"\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      local ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then\r\n         return nil, err, errcode\r\n      end\r\n   end\r\n\r\n   local ok, err, errcode = deps.check_external_deps(rockspec, \"build\")\r\n   if err then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   local name, version = rockspec.name, rockspec.version\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n\r\n   if not minimal_mode then\r\n      local _, source_dir\r\n      if need_to_fetch then\r\n         ok, source_dir, errcode = fetch.fetch_sources(rockspec, true)\r\n         if not ok then\r\n            return nil, source_dir, errcode\r\n         end\r\n         local ok, err = fs.change_dir(source_dir)\r\n         if not ok then return nil, err end\r\n      elseif rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n      end\r\n      fs.change_dir(rockspec.source.dir)\r\n   end\r\n   \r\n   local dirs = {\r\n      lua = { name = path.lua_dir(name, version), is_module_path = true },\r\n      lib = { name = path.lib_dir(name, version), is_module_path = true },\r\n      conf = { name = path.conf_dir(name, version), is_module_path = false },\r\n      bin = { name = path.bin_dir(name, version), is_module_path = false },\r\n   }\r\n   \r\n   for _, d in pairs(dirs) do\r\n      local ok, err = fs.make_dir(d.name)\r\n      if not ok then return nil, err end\r\n   end\r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n\r\n   local build = rockspec.build\r\n   \r\n   if not minimal_mode then\r\n      ok, err = apply_patches(rockspec)\r\n      if err then\r\n         return nil, err\r\n      end\r\n   end\r\n   \r\n   if build.type ~= \"none\" then\r\n\r\n      -- Temporary compatibility\r\n      if build.type == \"module\" then\r\n         util.printout(\"Do not use 'module' as a build type. Use 'builtin' instead.\")\r\n         build.type = \"builtin\"\r\n      end\r\n\r\n      if cfg.accepted_build_types and util.array_contains(cfg.accepted_build_types, build.type) then\r\n         return nil, \"This rockspec uses the '\"..build.type..\"' build type, which is blocked by the 'accepted_build_types' setting in your LuaRocks configuration.\"\r\n      end\r\n\r\n      local build_type\r\n      ok, build_type = pcall(require, \"luarocks.build.\" .. build.type)\r\n      if not ok or not type(build_type) == \"table\" then\r\n         return nil, \"Failed initializing build back-end for build type '\"..build.type..\"': \"..build_type\r\n      end\r\n  \r\n      ok, err = build_type.run(rockspec)\r\n      if not ok then\r\n         return nil, \"Build error: \" .. err\r\n      end\r\n   end\r\n\r\n   if build.install then\r\n      for id, install_dir in pairs(dirs) do\r\n         ok, err = install_files(build.install[id], install_dir.name, install_dir.is_module_path)\r\n         if not ok then \r\n            return nil, err\r\n         end\r\n      end\r\n   end\r\n   \r\n   local copy_directories = build.copy_directories\r\n   local copying_default = false\r\n   if not copy_directories then\r\n      copy_directories = {\"doc\"}\r\n      copying_default = true\r\n   end\r\n\r\n   for _, copy_dir in pairs(copy_directories) do\r\n      if fs.is_dir(copy_dir) then\r\n         local dest = dir.path(path.install_dir(name, version), copy_dir)\r\n         fs.make_dir(dest)\r\n         fs.copy_contents(copy_dir, dest)\r\n      else\r\n         if not copying_default then\r\n            return nil, \"Directory '\"..copy_dir..\"' not found\"\r\n         end\r\n      end\r\n   end\r\n\r\n   for _, d in pairs(dirs) do\r\n      fs.remove_dir_if_empty(d.name)\r\n   end\r\n\r\n   fs.pop_dir()\r\n   \r\n   fs.copy(rockspec.local_filename, path.rockspec_file(name, version))\r\n   if need_to_fetch then\r\n      fs.pop_dir()\r\n   end\r\n\r\n   ok, err = manif.make_rock_manifest(name, version)\r\n   if err then return nil, err end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n\r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n\r\n   local license = \"\"\r\n   if rockspec.description and rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now built and installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function compare_versions(a, b)\r\n   return parse_version(a) > parse_version(b)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function dir_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n   return (pathname:gsub(\"/*$\", \"\"):match(\"(.*)[/]+[^/]*\")) or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function execute(command, ...)\r\n   assert(type(command) == \"string\")\r\n   return fs.execute_string(quote_args(command, ...))\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function make_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   directory = dir.normalize(directory)\r\n   local path = nil\r\n   if directory:sub(2, 2) == \":\" then\r\n     path = directory:sub(1, 2)\r\n     directory = directory:sub(4)\r\n   else\r\n     if directory:match(\"^/\") then\r\n        path = \"\"\r\n     end\r\n   end\r\n   for d in directory:gmatch(\"([^\"..dir.separator..\"]+)\"..dir.separator..\"*\") do\r\n      path = path and path .. dir.separator .. d or d\r\n      local mode = lfs.attributes(path, \"mode\")\r\n      if not mode then\r\n         local ok, err = lfs.mkdir(path)\r\n         if not ok then\r\n            return false, err\r\n         end\r\n      elseif mode ~= \"directory\" then\r\n         return false, path..\" is not a directory\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function remove_dir_tree_if_empty(d)\r\n   assert(d)\r\n   d = dir.normalize(d)\r\n   for i=1,10 do\r\n      lfs.rmdir(d)\r\n      d = dir.dir_name(d)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function delete(name)\r\n   name = dir.normalize(name)\r\n   recursive_delete(name)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function list_dir(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   at = dir.normalize(at)\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   for file in lfs.dir(at) do\r\n      if file ~= \".\" and file ~= \"..\" then\r\n         table.insert(result, file)\r\n      end\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function move(src, dest)\r\n   assert(src and dest)\r\n   if fs.exists(dest) and not fs.is_dir(dest) then\r\n      return false, \"File already exists: \"..dest\r\n   end\r\n   local ok, err = fs.copy(src, dest)\r\n   if not ok then\r\n      return false, err\r\n   end\r\n   fs.delete(src)\r\n   if fs.exists(src) then\r\n      return false, \"Failed move: could not delete \"..src..\" after copy.\"\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function install_binary_rock(rock_file, deps_mode)\r\n   assert(type(rock_file) == \"string\")\r\n\r\n   local name, version, arch = path.parse_name(rock_file)\r\n   if not name then\r\n      return nil, \"Filename \"..rock_file..\" does not match format 'name-version-revision.arch.rock'.\"\r\n   end\r\n   \r\n   if arch ~= \"all\" and arch ~= cfg.arch then\r\n      return nil, \"Incompatible architecture \"..arch, \"arch\"\r\n   end\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n   \r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n   \r\n   local ok, err, errcode = fetch.fetch_and_unpack_rock(rock_file, path.install_dir(name, version))\r\n   if not ok then return nil, err, errcode end\r\n   \r\n   local rockspec, err, errcode = fetch.load_rockspec(path.rockspec_file(name, version))\r\n   if err then\r\n      return nil, \"Failed loading rockspec for installed package: \"..err, errcode\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      ok, err, errcode = deps.check_external_deps(rockspec, \"install\")\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   -- For compatibility with .rock files built with LuaRocks 1\r\n   if not fs.exists(path.rock_manifest_file(name, version)) then\r\n      ok, err = manif.make_rock_manifest(name, version)\r\n      if err then return nil, err end\r\n   end\r\n\r\n   if deps_mode ~= \"none\" then\r\n      ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   local wrap_bin_scripts = true\r\n   if rockspec.deploy and rockspec.deploy.wrap_bin_scripts == false then\r\n      wrap_bin_scripts = false\r\n   end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n\r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n   \r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n   \r\n   local license = \"\"\r\n   if rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function load_rock_manifest(name, version, root)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local name_version = name..\"/\"..version\r\n   if rock_manifest_cache[name_version] then\r\n      return rock_manifest_cache[name_version].rock_manifest\r\n   end\r\n   local pathname = path.rock_manifest_file(name, version, root)\r\n   local rock_manifest = persist.load_into_table(pathname)\r\n   if not rock_manifest then return nil end\r\n   rock_manifest_cache[name_version] = rock_manifest\r\n   return rock_manifest.rock_manifest\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function find_current_provider(file, root)\r\n   local providers, err = find_providers(file, root)\r\n   if not providers then return nil, err end\r\n   return providers[1]:match(\"([^/]*)/([^/]*)\")\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function find_next_provider(file, root)\r\n   local providers, err = find_providers(file, root)\r\n   if not providers then return nil, err end\r\n   if providers[2] then\r\n      return providers[2]:match(\"([^/]*)/([^/]*)\")\r\n   else\r\n      return nil\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local function do_pack_binary_rock(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   local query = search.make_query(name, version)\r\n   query.exact_name = true\r\n   local results = {}\r\n   \r\n   search.manifest_search(results, cfg.rocks_dir, query)\r\n   \r\n   if not next(results) then\r\n      return nil, \"'\"..name..\"' does not seem to be an installed rock.\"\r\n   end\r\n   \r\n   local versions = results[name]\r\n   \r\n   if not version then\r\n      local first = next(versions)\r\n      if next(versions, first) then\r\n         return nil, \"Please specify which version of '\"..name..\"' to pack.\"\r\n      end\r\n      version = first\r\n   end\r\n   if not version:match(\"[^-]+%-%d+\") then\r\n      return nil, \"Expected version \"..version..\" in version-revision format.\"\r\n   end\r\n   \r\n   local info = versions[version][1]\r\n   \r\n   local root = path.root_dir(info.repo)\r\n   local prefix = path.install_dir(name, version, root)\r\n   if not fs.exists(prefix) then\r\n      return nil, \"'\"..name..\" \"..version..\"' does not seem to be an installed rock.\"\r\n   end\r\n   \r\n   local rock_manifest = manif.load_rock_manifest(name, version, root)\r\n   if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end\r\n\r\n   local name_version = name .. \"-\" .. version\r\n   local rock_file = fs.absolute_name(name_version .. \".\"..cfg.arch..\".rock\")\r\n   \r\n   local temp_dir = fs.make_temp_dir(\"pack\")\r\n   fs.copy_contents(prefix, temp_dir)\r\n\r\n   local is_binary = false\r\n   if rock_manifest.lib then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lib, path.deploy_lib_dir(root), dir.path(temp_dir, \"lib\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n      is_binary = true\r\n   end\r\n   if rock_manifest.lua then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lua, path.deploy_lua_dir(root), dir.path(temp_dir, \"lua\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n   end\r\n   \r\n   local ok, err = fs.change_dir(temp_dir)\r\n   if not ok then return nil, err end\r\n   if not is_binary and not repos.has_binaries(name, version) then\r\n      rock_file = rock_file:gsub(\"%.\"..cfg.arch:gsub(\"%-\",\"%%-\")..\"%.\", \".all.\")\r\n   end\r\n   fs.delete(rock_file)\r\n   if not fs.zip(rock_file, unpack(fs.list_dir())) then\r\n      return nil, \"Failed packing \"..rock_file\r\n   end\r\n   fs.pop_dir()\r\n   fs.delete(temp_dir)\r\n   return rock_file\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function versions_dir(name, tree)\r\n   assert(type(name) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function install_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function path_to_module(file)\r\n   assert(type(file) == \"string\")\r\n\r\n   local name = file:match(\"(.*)%.\"..cfg.lua_extension..\"$\")\r\n   if name then\r\n      name = name:gsub(dir.separator, \".\")\r\n      local init = name:match(\"(.*)%.init$\")\r\n      if init then\r\n         name = init\r\n      end\r\n   else\r\n      name = file:match(\"(.*)%.\"..cfg.lib_extension..\"$\")\r\n      if name then\r\n         name = name:gsub(dir.separator, \".\")\r\n      end\r\n   end\r\n   if not name then name = file end\r\n   name = name:gsub(\"^%.+\", \"\"):gsub(\"%.+$\", \"\")\r\n   return name\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function versioned_name(file, prefix, name, version)\r\n   assert(type(file) == \"string\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local rest = file:sub(#prefix+1):gsub(\"^/*\", \"\")\r\n   local name_version = (name..\"_\"..version):gsub(\"%-\", \"_\"):gsub(\"%.\", \"_\")\r\n   return dir.path(prefix, name_version..\"-\"..rest)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function run(...)\r\n   local flags = util.parse_flags(...)\r\n   \r\n   local tree = flags[\"tree\"]\r\n\r\n   if type(tree) ~= \"string\" then\r\n      return nil, \"The --tree argument is mandatory. \"..util.see_help(\"purge\")\r\n   end\r\n   \r\n   local results = {}\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   if not fs.is_dir(tree) then\r\n      return nil, \"Directory not found: \"..tree\r\n   end\r\n\r\n   local ok, err = fs.check_command_permissions(flags)\r\n   if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n\r\n   search.manifest_search(results, path.rocks_dir(tree), query)\r\n\r\n   local sort = function(a,b) return deps.compare_versions(b,a) end\r\n   if flags[\"old-versions\"] then\r\n      sort = deps.compare_versions\r\n   end\r\n\r\n   for package, versions in util.sortedpairs(results) do\r\n      for version, repositories in util.sortedpairs(versions, sort) do\r\n         if flags[\"old-versions\"] then\r\n            util.printout(\"Keeping \"..package..\" \"..version..\"...\")\r\n            local ok, err = remove.remove_other_versions(package, version, flags[\"force\"])\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n            break\r\n         else\r\n            util.printout(\"Removing \"..package..\" \"..version..\"...\")\r\n            local ok, err = repos.delete_version(package, version, true)\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return manif.make_manifest(cfg.rocks_dir, \"one\")\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local function delete_versions(name, versions) \r\n\r\n   for version, _ in pairs(versions) do\r\n      util.printout(\"Removing \"..name..\" \"..version..\"...\")\r\n      local ok, err = repos.delete_version(name, version)\r\n      if not ok then return nil, err end\r\n   end\r\n   \r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local function get_installed_versions(name)\r\n   assert(type(name) == \"string\")\r\n   \r\n   local dirs = fs.list_dir(path.versions_dir(name))\r\n   return (dirs and #dirs > 0) and dirs or nil\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "assert(type(name) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local dirs = fs.list_dir(path.versions_dir(name))",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function is_installed(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n      \r\n   return fs.is_dir(path.install_dir(name, version))\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "assert(type(version) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function recurse_rock_manifest_tree(file_tree, action) \r\n   assert(type(file_tree) == \"table\")\r\n   assert(type(action) == \"function\")\r\n   local function do_recurse_rock_manifest_tree(tree, parent_path, parent_module)\r\n      \r\n      for file, sub in pairs(tree) do\r\n         if type(sub) == \"table\" then\r\n            local ok, err = do_recurse_rock_manifest_tree(sub, parent_path..file..\"/\", parent_module..file..\".\")\r\n            if not ok then return nil, err end\r\n         else\r\n            local ok, err = action(parent_path, parent_module, file)\r\n            if not ok then return nil, err end\r\n         end\r\n      end\r\n      return true\r\n   end\r\n   return do_recurse_rock_manifest_tree(file_tree, \"\", \"\")\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "assert(type(file_tree) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert(type(action) == \"function\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "local function do_recurse_rock_manifest_tree(tree, parent_path, parent_module)\r\n      \r\n      for file, sub in pairs(tree) do\r\n         if type(sub) == \"table\" then\r\n            local ok, err = do_recurse_rock_manifest_tree(sub, parent_path..file..\"/\", parent_module..file..\".\")\r\n            if not ok then return nil, err end\r\n         else\r\n            local ok, err = action(parent_path, parent_module, file)\r\n            if not ok then return nil, err end\r\n         end\r\n      end\r\n      return true\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 37,
    "text": "for file, sub in pairs(tree) do\r\n         if type(sub) == \"table\" then\r\n            local ok, err = do_recurse_rock_manifest_tree(sub, parent_path..file..\"/\", parent_module..file..\".\")\r\n            if not ok then return nil, err end\r\n         else\r\n            local ok, err = action(parent_path, parent_module, file)\r\n            if not ok then return nil, err end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "if type(sub) == \"table\" then\r\n            local ok, err = do_recurse_rock_manifest_tree(sub, parent_path..file..\"/\", parent_module..file..\".\")\r\n            if not ok then return nil, err end\r\n         else\r\n            local ok, err = action(parent_path, parent_module, file)\r\n            if not ok then return nil, err end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local ok, err = do_recurse_rock_manifest_tree(sub, parent_path..file..\"/\", parent_module..file..\".\")",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "local ok, err = action(parent_path, parent_module, file)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function do_recurse_rock_manifest_tree(tree, parent_path, parent_module)\r\n      \r\n      for file, sub in pairs(tree) do\r\n         if type(sub) == \"table\" then\r\n            local ok, err = do_recurse_rock_manifest_tree(sub, parent_path..file..\"/\", parent_module..file..\".\")\r\n            if not ok then return nil, err end\r\n         else\r\n            local ok, err = action(parent_path, parent_module, file)\r\n            if not ok then return nil, err end\r\n         end\r\n      end\r\n      return true\r\n   end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function store_package_data(result, name, file_tree)\r\n   if not file_tree then return end\r\n   return recurse_rock_manifest_tree(file_tree, \r\n      function(parent_path, parent_module, file)\r\n         local pathname = parent_path..file\r\n         result[path.path_to_module(pathname)] = pathname\r\n         return true\r\n      end\r\n   )\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if not file_tree then return end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "local pathname = parent_path..file",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "result[path.path_to_module(pathname)] = pathname",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function package_modules(package, version)\r\n   assert(type(package) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local result = {}\r\n   local rock_manifest = manif.load_rock_manifest(package, version)\r\n   store_package_data(result, package, rock_manifest.lib)\r\n   store_package_data(result, package, rock_manifest.lua)\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "assert(type(package) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local rock_manifest = manif.load_rock_manifest(package, version)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "store_package_data(result, package, rock_manifest.lib)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "store_package_data(result, package, rock_manifest.lua)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function package_commands(package, version)\r\n   assert(type(package) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local result = {}\r\n   local rock_manifest = manif.load_rock_manifest(package, version)\r\n   store_package_data(result, package, rock_manifest.bin)\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "store_package_data(result, package, rock_manifest.bin)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function has_binaries(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   if rock_manifest.bin then\r\n      for name, md5 in pairs(rock_manifest.bin) do\r\n         -- TODO verify that it is the same file. If it isn't, find the actual command.\r\n         if fs.is_actual_binary(dir.path(cfg.deploy_bin_dir, name)) then\r\n            return true\r\n         end\r\n      end\r\n   end\r\n   return false\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local rock_manifest = manif.load_rock_manifest(name, version)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if rock_manifest.bin then\r\n      for name, md5 in pairs(rock_manifest.bin) do\r\n         -- TODO verify that it is the same file. If it isn't, find the actual command.\r\n         if fs.is_actual_binary(dir.path(cfg.deploy_bin_dir, name)) then\r\n            return true\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "for name, md5 in pairs(rock_manifest.bin) do\r\n         -- TODO verify that it is the same file. If it isn't, find the actual command.\r\n         if fs.is_actual_binary(dir.path(cfg.deploy_bin_dir, name)) then\r\n            return true\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 64,
    "text": "if fs.is_actual_binary(dir.path(cfg.deploy_bin_dir, name)) then\r\n            return true\r\n         end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function run_hook(rockspec, hook_name)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(hook_name) == \"string\")\r\n\r\n   local hooks = rockspec.hooks\r\n   if not hooks then\r\n      return true\r\n   end\r\n   \r\n   if cfg.hooks_enabled == false then\r\n      return nil, \"This rockspec contains hooks, which are blocked by the 'hooks_enabled' setting in your LuaRocks configuration.\"\r\n   end\r\n   \r\n   if not hooks.substituted_variables then\r\n      util.variable_substitutions(hooks, rockspec.variables)\r\n      hooks.substituted_variables = true\r\n   end\r\n   local hook = hooks[hook_name]\r\n   if hook then\r\n      util.printout(hook)\r\n      if not fs.execute(hook) then\r\n         return nil, \"Failed running \"..hook_name..\" hook.\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "assert(type(rockspec) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert(type(hook_name) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local hooks = rockspec.hooks",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if not hooks then\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "if cfg.hooks_enabled == false then\r\n      return nil, \"This rockspec contains hooks, which are blocked by the 'hooks_enabled' setting in your LuaRocks configuration.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "if not hooks.substituted_variables then\r\n      util.variable_substitutions(hooks, rockspec.variables)\r\n      hooks.substituted_variables = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "util.variable_substitutions(hooks, rockspec.variables)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "hooks.substituted_variables = true",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "local hook = hooks[hook_name]",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if hook then\r\n      util.printout(hook)\r\n      if not fs.execute(hook) then\r\n         return nil, \"Failed running \"..hook_name..\" hook.\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "util.printout(hook)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "if not fs.execute(hook) then\r\n         return nil, \"Failed running \"..hook_name..\" hook.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "local function install_binary(source, target, name, version)\r\n   assert(type(source) == \"string\")\r\n   assert(type(target) == \"string\")\r\n\r\n   local match = source:match(\"%.lua$\")\r\n   local file, ok, err\r\n   if not match then\r\n      file = io.open(source)\r\n   end\r\n   if match or (file and file:read():match(\"^#!.*lua.*\")) then\r\n      ok, err = fs.wrap_script(source, target, name, version)\r\n   else\r\n      ok, err = fs.copy_binary(source, target)\r\n   end\r\n   if file then file:close() end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "assert(type(source) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert(type(target) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "local match = source:match(\"%.lua$\")",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local file, ok, err",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if not match then\r\n      file = io.open(source)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "file = io.open(source)",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "if match or (file and file:read():match(\"^#!.*lua.*\")) then\r\n      ok, err = fs.wrap_script(source, target, name, version)\r\n   else\r\n      ok, err = fs.copy_binary(source, target)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "ok, err = fs.wrap_script(source, target, name, version)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "ok, err = fs.copy_binary(source, target)",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "if file then file:close() end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "local function resolve_conflict(target, deploy_dir, name, version)\r\n   local cname, cversion = manif.find_current_provider(target)\r\n   if not cname then\r\n      return nil, cversion\r\n   end\r\n   if name ~= cname or deps.compare_versions(version, cversion) then\r\n      local versioned = path.versioned_name(target, deploy_dir, cname, cversion)\r\n      local ok, err = fs.make_dir(dir.dir_name(versioned))\r\n      if not ok then return nil, err end\r\n      fs.move(target, versioned)\r\n      return target\r\n   else\r\n      return path.versioned_name(target, deploy_dir, name, version)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "local cname, cversion = manif.find_current_provider(target)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if not cname then\r\n      return nil, cversion\r\n   end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "if name ~= cname or deps.compare_versions(version, cversion) then\r\n      local versioned = path.versioned_name(target, deploy_dir, cname, cversion)\r\n      local ok, err = fs.make_dir(dir.dir_name(versioned))\r\n      if not ok then return nil, err end\r\n      fs.move(target, versioned)\r\n      return target\r\n   else\r\n      return path.versioned_name(target, deploy_dir, name, version)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "local versioned = path.versioned_name(target, deploy_dir, cname, cversion)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local ok, err = fs.make_dir(dir.dir_name(versioned))",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "fs.move(target, versioned)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function should_wrap_bin_scripts(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n\r\n   if cfg.wrap_bin_scripts ~= nil then\r\n      return cfg.wrap_bin_scripts\r\n   end\r\n   if rockspec.deploy and rockspec.deploy.wrap_bin_scripts == false then\r\n      return false\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "if cfg.wrap_bin_scripts ~= nil then\r\n      return cfg.wrap_bin_scripts\r\n   end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "if rockspec.deploy and rockspec.deploy.wrap_bin_scripts == false then\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function deploy_files(name, version, wrap_bin_scripts)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   assert(type(wrap_bin_scripts) == \"boolean\")\r\n\r\n   local function deploy_file_tree(file_tree, path_fn, deploy_dir, move_fn)\r\n      local source_dir = path_fn(name, version)\r\n      if not move_fn then\r\n         move_fn = fs.move\r\n      end\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local source = dir.path(source_dir, parent_path, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local ok, err\r\n            if fs.exists(target) then\r\n               local new_target, err = resolve_conflict(target, deploy_dir, name, version)\r\n               if err == \"untracked\" then\r\n                  local backup = target\r\n                  repeat\r\n                     backup = backup..\"~\"\r\n                  until not fs.exists(backup) -- slight race condition here, but shouldn't be a problem.\r\n                  util.printerr(\"Warning: \"..target..\" is not tracked by this installation of LuaRocks. Moving it to \"..backup)\r\n                  fs.move(target, backup)\r\n               elseif err then\r\n                  return nil, err..\" Cannot install new version.\"\r\n               else\r\n                  target = new_target\r\n               end\r\n            end\r\n            ok, err = fs.make_dir(dir.dir_name(target))\r\n            if not ok then return nil, err end\r\n            ok, err = move_fn(source, target, name, version)\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(source))\r\n            if not ok then return nil, err end\r\n            return true\r\n         end\r\n      )\r\n   end\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   \r\n   local ok, err = true\r\n   if rock_manifest.bin then\r\n      local move_bin_fn = wrap_bin_scripts and install_binary or fs.copy_binary\r\n      ok, err = deploy_file_tree(rock_manifest.bin, path.bin_dir, cfg.deploy_bin_dir, move_bin_fn)\r\n   end\r\n   if ok and rock_manifest.lua then\r\n      ok, err = deploy_file_tree(rock_manifest.lua, path.lua_dir, cfg.deploy_lua_dir)\r\n   end\r\n   if ok and rock_manifest.lib then\r\n      ok, err = deploy_file_tree(rock_manifest.lib, path.lib_dir, cfg.deploy_lib_dir)\r\n   end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "assert(type(wrap_bin_scripts) == \"boolean\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "local function deploy_file_tree(file_tree, path_fn, deploy_dir, move_fn)\r\n      local source_dir = path_fn(name, version)\r\n      if not move_fn then\r\n         move_fn = fs.move\r\n      end\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local source = dir.path(source_dir, parent_path, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local ok, err\r\n            if fs.exists(target) then\r\n               local new_target, err = resolve_conflict(target, deploy_dir, name, version)\r\n               if err == \"untracked\" then\r\n                  local backup = target\r\n                  repeat\r\n                     backup = backup..\"~\"\r\n                  until not fs.exists(backup) -- slight race condition here, but shouldn't be a problem.\r\n                  util.printerr(\"Warning: \"..target..\" is not tracked by this installation of LuaRocks. Moving it to \"..backup)\r\n                  fs.move(target, backup)\r\n               elseif err then\r\n                  return nil, err..\" Cannot install new version.\"\r\n               else\r\n                  target = new_target\r\n               end\r\n            end\r\n            ok, err = fs.make_dir(dir.dir_name(target))\r\n            if not ok then return nil, err end\r\n            ok, err = move_fn(source, target, name, version)\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(source))\r\n            if not ok then return nil, err end\r\n            return true\r\n         end\r\n      )\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 108,
    "text": "local source_dir = path_fn(name, version)",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if not move_fn then\r\n         move_fn = fs.move\r\n      end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "move_fn = fs.move",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "local source = dir.path(source_dir, parent_path, file)",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "local target = dir.path(deploy_dir, parent_path, file)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "local ok, err",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "if fs.exists(target) then\r\n               local new_target, err = resolve_conflict(target, deploy_dir, name, version)\r\n               if err == \"untracked\" then\r\n                  local backup = target\r\n                  repeat\r\n                     backup = backup..\"~\"\r\n                  until not fs.exists(backup) -- slight race condition here, but shouldn't be a problem.\r\n                  util.printerr(\"Warning: \"..target..\" is not tracked by this installation of LuaRocks. Moving it to \"..backup)\r\n                  fs.move(target, backup)\r\n               elseif err then\r\n                  return nil, err..\" Cannot install new version.\"\r\n               else\r\n                  target = new_target\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "local new_target, err = resolve_conflict(target, deploy_dir, name, version)",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if err == \"untracked\" then\r\n                  local backup = target\r\n                  repeat\r\n                     backup = backup..\"~\"\r\n                  until not fs.exists(backup) -- slight race condition here, but shouldn't be a problem.\r\n                  util.printerr(\"Warning: \"..target..\" is not tracked by this installation of LuaRocks. Moving it to \"..backup)\r\n                  fs.move(target, backup)\r\n               elseif err then\r\n                  return nil, err..\" Cannot install new version.\"\r\n               else\r\n                  target = new_target\r\n               end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "local backup = target",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "repeat\r\n                     backup = backup..\"~\"\r\n                  until not fs.exists(backup)",
    "type": "statement:repeat"
  }, {
    "id": 119,
    "text": "backup = backup..\"~\"",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "util.printerr(\"Warning: \"..target..\" is not tracked by this installation of LuaRocks. Moving it to \"..backup)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "fs.move(target, backup)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "target = new_target",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "ok, err = fs.make_dir(dir.dir_name(target))",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "ok, err = move_fn(source, target, name, version)",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "fs.remove_dir_tree_if_empty(dir.dir_name(source))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "local ok, err = true",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "if rock_manifest.bin then\r\n      local move_bin_fn = wrap_bin_scripts and install_binary or fs.copy_binary\r\n      ok, err = deploy_file_tree(rock_manifest.bin, path.bin_dir, cfg.deploy_bin_dir, move_bin_fn)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "local move_bin_fn = wrap_bin_scripts and install_binary or fs.copy_binary",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "ok, err = deploy_file_tree(rock_manifest.bin, path.bin_dir, cfg.deploy_bin_dir, move_bin_fn)",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "if ok and rock_manifest.lua then\r\n      ok, err = deploy_file_tree(rock_manifest.lua, path.lua_dir, cfg.deploy_lua_dir)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "ok, err = deploy_file_tree(rock_manifest.lua, path.lua_dir, cfg.deploy_lua_dir)",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "if ok and rock_manifest.lib then\r\n      ok, err = deploy_file_tree(rock_manifest.lib, path.lib_dir, cfg.deploy_lib_dir)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "ok, err = deploy_file_tree(rock_manifest.lib, path.lib_dir, cfg.deploy_lib_dir)",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "local function deploy_file_tree(file_tree, path_fn, deploy_dir, move_fn)\r\n      local source_dir = path_fn(name, version)\r\n      if not move_fn then\r\n         move_fn = fs.move\r\n      end\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local source = dir.path(source_dir, parent_path, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local ok, err\r\n            if fs.exists(target) then\r\n               local new_target, err = resolve_conflict(target, deploy_dir, name, version)\r\n               if err == \"untracked\" then\r\n                  local backup = target\r\n                  repeat\r\n                     backup = backup..\"~\"\r\n                  until not fs.exists(backup) -- slight race condition here, but shouldn't be a problem.\r\n                  util.printerr(\"Warning: \"..target..\" is not tracked by this installation of LuaRocks. Moving it to \"..backup)\r\n                  fs.move(target, backup)\r\n               elseif err then\r\n                  return nil, err..\" Cannot install new version.\"\r\n               else\r\n                  target = new_target\r\n               end\r\n            end\r\n            ok, err = fs.make_dir(dir.dir_name(target))\r\n            if not ok then return nil, err end\r\n            ok, err = move_fn(source, target, name, version)\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(source))\r\n            if not ok then return nil, err end\r\n            return true\r\n         end\r\n      )\r\n   end",
    "type": "function"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "local function delete_suffixed(filename, suffix)\r\n   local filenames = { filename }\r\n   if suffix and suffix ~= \"\" then filenames = { filename..suffix, filename } end\r\n   for _, name in ipairs(filenames) do\r\n      if fs.exists(name) then\r\n         fs.delete(name)\r\n         if fs.exists(name) then\r\n            return nil, \"Failed deleting \"..name, \"fail\"\r\n         end\r\n         return true, name\r\n      end\r\n   end\r\n   return false, \"File not found\", \"not found\"\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "local filenames = { filename }",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "if suffix and suffix ~= \"\" then filenames = { filename..suffix, filename } end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "filenames = { filename..suffix, filename }",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "for _, name in ipairs(filenames) do\r\n      if fs.exists(name) then\r\n         fs.delete(name)\r\n         if fs.exists(name) then\r\n            return nil, \"Failed deleting \"..name, \"fail\"\r\n         end\r\n         return true, name\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 142,
    "text": "if fs.exists(name) then\r\n         fs.delete(name)\r\n         if fs.exists(name) then\r\n            return nil, \"Failed deleting \"..name, \"fail\"\r\n         end\r\n         return true, name\r\n      end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "fs.delete(name)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "if fs.exists(name) then\r\n            return nil, \"Failed deleting \"..name, \"fail\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function delete_version(name, version, quick)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local function delete_deployed_file_tree(file_tree, deploy_dir, suffix)\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local versioned = path.versioned_name(target, deploy_dir, name, version)\r\n            local ok, name, err = delete_suffixed(versioned, suffix)\r\n            if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end\r\n            if err == \"fail\" then return nil, name end\r\n            ok, name, err = delete_suffixed(target, suffix)\r\n            if err == \"fail\" then return nil, name end\r\n            if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(target))\r\n            return true\r\n         end\r\n      )\r\n   end\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end\r\n   \r\n   local ok, err = true\r\n   if rock_manifest.bin then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.bin, cfg.deploy_bin_dir, cfg.wrapper_suffix)\r\n   end\r\n   if ok and rock_manifest.lua then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lua, cfg.deploy_lua_dir)\r\n   end\r\n   if ok and rock_manifest.lib then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lib, cfg.deploy_lib_dir)\r\n   end\r\n   if err then return nil, err end\r\n\r\n   fs.delete(path.install_dir(name, version))\r\n   if not get_installed_versions(name) then\r\n      fs.delete(dir.path(cfg.rocks_dir, name))\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "local function delete_deployed_file_tree(file_tree, deploy_dir, suffix)\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local versioned = path.versioned_name(target, deploy_dir, name, version)\r\n            local ok, name, err = delete_suffixed(versioned, suffix)\r\n            if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end\r\n            if err == \"fail\" then return nil, name end\r\n            ok, name, err = delete_suffixed(target, suffix)\r\n            if err == \"fail\" then return nil, name end\r\n            if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(target))\r\n            return true\r\n         end\r\n      )\r\n   end",
    "type": "statement:localfunction"
  }, {
    "id": 148,
    "text": "local versioned = path.versioned_name(target, deploy_dir, name, version)",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "local ok, name, err = delete_suffixed(versioned, suffix)",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "fs.remove_dir_tree_if_empty(dir.dir_name(versioned))",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "if err == \"fail\" then return nil, name end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "ok, name, err = delete_suffixed(target, suffix)",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "local next_name, next_version = manif.find_next_provider(target)",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "fs.move(versioned, name)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "fs.remove_dir_tree_if_empty(dir.dir_name(target))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "if rock_manifest.bin then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.bin, cfg.deploy_bin_dir, cfg.wrapper_suffix)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "ok, err = delete_deployed_file_tree(rock_manifest.bin, cfg.deploy_bin_dir, cfg.wrapper_suffix)",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "if ok and rock_manifest.lua then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lua, cfg.deploy_lua_dir)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "ok, err = delete_deployed_file_tree(rock_manifest.lua, cfg.deploy_lua_dir)",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "if ok and rock_manifest.lib then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lib, cfg.deploy_lib_dir)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "ok, err = delete_deployed_file_tree(rock_manifest.lib, cfg.deploy_lib_dir)",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "fs.delete(path.install_dir(name, version))",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "if not get_installed_versions(name) then\r\n      fs.delete(dir.path(cfg.rocks_dir, name))\r\n   end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "fs.delete(dir.path(cfg.rocks_dir, name))",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "local function delete_deployed_file_tree(file_tree, deploy_dir, suffix)\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local versioned = path.versioned_name(target, deploy_dir, name, version)\r\n            local ok, name, err = delete_suffixed(versioned, suffix)\r\n            if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end\r\n            if err == \"fail\" then return nil, name end\r\n            ok, name, err = delete_suffixed(target, suffix)\r\n            if err == \"fail\" then return nil, name end\r\n            if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(target))\r\n            return true\r\n         end\r\n      )\r\n   end",
    "type": "function"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function(parent_path, parent_module, file)\r\n         local pathname = parent_path..file\r\n         result[path.path_to_module(pathname)] = pathname\r\n         return true\r\n      end",
    "type": "function"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function(parent_path, parent_module, file)\r\n            local source = dir.path(source_dir, parent_path, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local ok, err\r\n            if fs.exists(target) then\r\n               local new_target, err = resolve_conflict(target, deploy_dir, name, version)\r\n               if err == \"untracked\" then\r\n                  local backup = target\r\n                  repeat\r\n                     backup = backup..\"~\"\r\n                  until not fs.exists(backup) -- slight race condition here, but shouldn't be a problem.\r\n                  util.printerr(\"Warning: \"..target..\" is not tracked by this installation of LuaRocks. Moving it to \"..backup)\r\n                  fs.move(target, backup)\r\n               elseif err then\r\n                  return nil, err..\" Cannot install new version.\"\r\n               else\r\n                  target = new_target\r\n               end\r\n            end\r\n            ok, err = fs.make_dir(dir.dir_name(target))\r\n            if not ok then return nil, err end\r\n            ok, err = move_fn(source, target, name, version)\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(source))\r\n            if not ok then return nil, err end\r\n            return true\r\n         end",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "function(parent_path, parent_module, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local versioned = path.versioned_name(target, deploy_dir, name, version)\r\n            local ok, name, err = delete_suffixed(versioned, suffix)\r\n            if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end\r\n            if err == \"fail\" then return nil, name end\r\n            ok, name, err = delete_suffixed(target, suffix)\r\n            if err == \"fail\" then return nil, name end\r\n            if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(target))\r\n            return true\r\n         end",
    "type": "function"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "",
    "type": "function container"
  }, {
    "id": 181,
    "text": "function variable_substitutions(tbl, vars)\r\n   assert(type(tbl) == \"table\")\r\n   assert(type(vars) == \"table\")\r\n   \r\n   local updated = {}\r\n   for k, v in pairs(tbl) do\r\n      if type(v) == \"string\" then\r\n         updated[k] = v:gsub(var_format_pattern, vars)\r\n         if warn_failed_matches(updated[k]) then\r\n            updated[k] = updated[k]:gsub(var_format_pattern, \"\")\r\n         end\r\n      end\r\n   end\r\n   for k, v in pairs(updated) do\r\n      tbl[k] = v\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "copy_binary",
    "type": "global function"
  }, {
    "id": 185,
    "text": "wrap_script",
    "type": "global function"
  }, {
    "id": 186,
    "text": "is_actual_binary",
    "type": "global function"
  }, {
    "id": 187,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 188,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 189,
    "text": "module",
    "type": "global function"
  }, {
    "id": 190,
    "text": "move_fn",
    "type": "global function"
  }, {
    "id": 191,
    "text": "path_fn",
    "type": "global function"
  }, {
    "id": 192,
    "text": "action",
    "type": "global function"
  }, {
    "id": 193,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 194,
    "text": "open",
    "type": "global function"
  }, {
    "id": 195,
    "text": "type",
    "type": "global function"
  }, {
    "id": 196,
    "text": "require",
    "type": "global function"
  }, {
    "id": 197,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 198,
    "text": "util)",
    "type": "module"
  }, {
    "id": 199,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 200,
    "text": "manif)",
    "type": "module"
  }, {
    "id": 201,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 202,
    "text": "path)",
    "type": "module"
  }, {
    "id": 203,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 204,
    "text": "",
    "type": "variable container"
  }, {
    "id": 205,
    "text": "",
    "type": "require container"
  }, {
    "id": 206,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "require local variable"
  } ]
}