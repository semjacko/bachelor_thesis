{
  "_filename": "help.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/help.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 16,
    "label": "has",
    "to": 27
  }, {
    "from": 16,
    "label": "has",
    "to": 28
  }, {
    "from": 16,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 16,
    "label": "has",
    "to": 33
  }, {
    "from": 16,
    "label": "has",
    "to": 34
  }, {
    "from": 16,
    "label": "has",
    "to": 35
  }, {
    "from": 16,
    "label": "has",
    "to": 36
  }, {
    "from": 16,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 16,
    "label": "has",
    "to": 40
  }, {
    "from": 16,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 16,
    "label": "has",
    "to": 46
  }, {
    "from": 16,
    "label": "has",
    "to": 47
  }, {
    "from": 16,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 18
  }, {
    "from": 48,
    "label": "has",
    "to": 19
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 21
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 56
  }, {
    "from": 4,
    "label": "calls",
    "to": 60
  }, {
    "from": 7,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 60
  }, {
    "from": 14,
    "label": "calls",
    "to": 4
  }, {
    "from": 14,
    "label": "calls",
    "to": 4
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 58
  }, {
    "from": 14,
    "label": "calls",
    "to": 59
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 14,
    "label": "calls",
    "to": 10
  }, {
    "from": 14,
    "label": "calls",
    "to": 10
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 14,
    "label": "calls",
    "to": 3
  }, {
    "from": 14,
    "label": "calls",
    "to": 3
  }, {
    "from": 14,
    "label": "calls",
    "to": 3
  }, {
    "from": 14,
    "label": "calls",
    "to": 3
  }, {
    "from": 14,
    "label": "calls",
    "to": 64
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 14,
    "label": "calls",
    "to": 65
  }, {
    "from": 14,
    "label": "calls",
    "to": 65
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 14,
    "label": "calls",
    "to": 62
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 57,
    "label": "declares",
    "to": 4
  }, {
    "from": 57,
    "label": "declares",
    "to": 7
  }, {
    "from": 57,
    "label": "declares",
    "to": 10
  }, {
    "from": 57,
    "label": "declares",
    "to": 14
  }, {
    "from": 1,
    "label": "contains",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 70,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 70,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 70,
    "label": "initializes",
    "to": 76
  }, {
    "from": 70,
    "label": "initializes",
    "to": 77
  }, {
    "from": 71,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "requires",
    "to": 67
  }, {
    "from": 71,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "requires",
    "to": 66
  }, {
    "from": 71,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "requires",
    "to": 68
  }, {
    "from": 71,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 82
  }, {
    "from": 71,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 69
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "help",
    "type": "module"
  }, {
    "id": 2,
    "text": "function which_config()\r\n   return sys_config_file, sys_config_ok, home_config_file, home_config_ok\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function normalize(name)\r\n   local protocol, pathname = split_url(name)\r\n   pathname = pathname:gsub(\"\\\\\", \"/\"):gsub(\"(.)/*$\", \"%1\"):gsub(\"//\", \"/\")\r\n   if protocol ~= \"file\" then pathname = protocol ..\"://\"..pathname end\r\n   return pathname\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function print_banner()\r\n   util.printout(\"\\nLuaRocks \"..cfg.program_version..\", a module deployment system for Lua\")\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "util.printout(\"\\nLuaRocks \"..cfg.program_version..\", a module deployment system for Lua\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function print_section(section)\r\n   util.printout(\"\\n\"..section)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "util.printout(\"\\n\"..section)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function get_status(status)\r\n   if status then\r\n      return \"ok\"\r\n   elseif status == false then\r\n      return \"not found\"\r\n   else\r\n      return \"failed\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "if status then\r\n      return \"ok\"\r\n   elseif status == false then\r\n      return \"not found\"\r\n   else\r\n      return \"failed\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function run(...)\r\n   local flags, command = util.parse_flags(...)\r\n\r\n   if not command then\r\n      local sys_file, sys_ok, home_file, home_ok = cfg.which_config()\r\n      print_banner()\r\n      print_section(\"NAME\")\r\n      util.printout(\"\\t\"..program..[[ - ]]..program_description)\r\n      print_section(\"SYNOPSIS\")\r\n      util.printout(\"\\t\"..program..[[ [--from=<server> | --only-from=<server>] [--to=<tree>] [VAR=VALUE]... <command> [<argument>] ]])\r\n      print_section(\"GENERAL OPTIONS\")\r\n      util.printout([[\r\n\tThese apply to all commands, as appropriate:\r\n\r\n\t--server=<server>      Fetch rocks/rockspecs from this server\r\n\t                       (takes priority over config file)\r\n\t--only-server=<server> Fetch rocks/rockspecs from this server only\r\n\t                       (overrides any entries in the config file)\r\n\t--only-sources=<url>   Restrict downloads to paths matching the\r\n\t                       given URL.\r\n\t--tree=<tree>          Which tree to operate on.\r\n\t--local                Use the tree in the user's home directory.\r\n\t                       To enable it, see ']]..program..[[ help path'.]])\r\n      print_section(\"VARIABLES\")\r\n      util.printout([[\r\n\tVariables from the \"variables\" table of the configuration file\r\n\tcan be overriden with VAR=VALUE assignments.]])\r\n      print_section(\"COMMANDS\")\r\n      local names = {}\r\n      for name, command in util.sortedpairs(commands) do\r\n         local cmd = require(command)\r\n         util.printout(\"\", name)\r\n         util.printout(\"\\t\", cmd.help_summary)\r\n      end\r\n      print_section(\"CONFIGURATION\")\r\n      util.printout(\"\\tLua version: \" .. cfg.lua_version)\r\n      util.printout(\"\\tConfiguration files:\")\r\n      util.printout(\"\\t\\tSystem: \".. dir.normalize(sys_file) .. \" (\" .. get_status(sys_ok) ..\")\")\r\n      if home_file then\r\n         util.printout(\"\\t\\tUser  : \".. dir.normalize(home_file) .. \" (\" .. get_status(home_ok) ..\")\\n\")\r\n      else\r\n         util.printout(\"\\t\\tUser  : disabled in this LuaRocks installation.\\n\")\r\n      end\r\n      util.printout(\"\\tRocks trees in use: \")\r\n      for _, tree in ipairs(cfg.rocks_trees) do\r\n      \tif type(tree) == \"string\" then\r\n      \t   util.printout(\"\\t\\t\"..dir.normalize(tree))\r\n      \telse\r\n      \t   local name = tree.name and \" (\\\"\"..tree.name..\"\\\")\" or \"\"\r\n      \t   util.printout(\"\\t\\t\"..dir.normalize(tree.root)..name)\r\n      \tend\r\n      end\r\n   else\r\n      command = command:gsub(\"-\", \"_\")\r\n      local cmd = require(commands[command])\r\n      if cmd then\r\n         local arguments = cmd.help_arguments or \"<argument>\"\r\n         print_banner()\r\n         print_section(\"NAME\")\r\n         util.printout(\"\\t\"..program..\" \"..command..\" - \"..cmd.help_summary)\r\n         print_section(\"SYNOPSIS\")\r\n         util.printout(\"\\t\"..program..\" \"..command..\" \"..arguments)\r\n         print_section(\"DESCRIPTION\")\r\n         util.printout(\"\",(cmd.help:gsub(\"\\n\",\"\\n\\t\"):gsub(\"\\n\\t$\",\"\")))\r\n         print_section(\"SEE ALSO\")\r\n         util.printout(\"\",\"'\"..program..\" help' for general options and configuration.\\n\")\r\n      else\r\n         return nil, \"Unknown command '\"..command..\"'\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local flags, command = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if not command then\r\n      local sys_file, sys_ok, home_file, home_ok = cfg.which_config()\r\n      print_banner()\r\n      print_section(\"NAME\")\r\n      util.printout(\"\\t\"..program..[[ - ]]..program_description)\r\n      print_section(\"SYNOPSIS\")\r\n      util.printout(\"\\t\"..program..[[ [--from=<server> | --only-from=<server>] [--to=<tree>] [VAR=VALUE]... <command> [<argument>] ]])\r\n      print_section(\"GENERAL OPTIONS\")\r\n      util.printout([[\r\n\tThese apply to all commands, as appropriate:\r\n\r\n\t--server=<server>      Fetch rocks/rockspecs from this server\r\n\t                       (takes priority over config file)\r\n\t--only-server=<server> Fetch rocks/rockspecs from this server only\r\n\t                       (overrides any entries in the config file)\r\n\t--only-sources=<url>   Restrict downloads to paths matching the\r\n\t                       given URL.\r\n\t--tree=<tree>          Which tree to operate on.\r\n\t--local                Use the tree in the user's home directory.\r\n\t                       To enable it, see ']]..program..[[ help path'.]])\r\n      print_section(\"VARIABLES\")\r\n      util.printout([[\r\n\tVariables from the \"variables\" table of the configuration file\r\n\tcan be overriden with VAR=VALUE assignments.]])\r\n      print_section(\"COMMANDS\")\r\n      local names = {}\r\n      for name, command in util.sortedpairs(commands) do\r\n         local cmd = require(command)\r\n         util.printout(\"\", name)\r\n         util.printout(\"\\t\", cmd.help_summary)\r\n      end\r\n      print_section(\"CONFIGURATION\")\r\n      util.printout(\"\\tLua version: \" .. cfg.lua_version)\r\n      util.printout(\"\\tConfiguration files:\")\r\n      util.printout(\"\\t\\tSystem: \".. dir.normalize(sys_file) .. \" (\" .. get_status(sys_ok) ..\")\")\r\n      if home_file then\r\n         util.printout(\"\\t\\tUser  : \".. dir.normalize(home_file) .. \" (\" .. get_status(home_ok) ..\")\\n\")\r\n      else\r\n         util.printout(\"\\t\\tUser  : disabled in this LuaRocks installation.\\n\")\r\n      end\r\n      util.printout(\"\\tRocks trees in use: \")\r\n      for _, tree in ipairs(cfg.rocks_trees) do\r\n      \tif type(tree) == \"string\" then\r\n      \t   util.printout(\"\\t\\t\"..dir.normalize(tree))\r\n      \telse\r\n      \t   local name = tree.name and \" (\\\"\"..tree.name..\"\\\")\" or \"\"\r\n      \t   util.printout(\"\\t\\t\"..dir.normalize(tree.root)..name)\r\n      \tend\r\n      end\r\n   else\r\n      command = command:gsub(\"-\", \"_\")\r\n      local cmd = require(commands[command])\r\n      if cmd then\r\n         local arguments = cmd.help_arguments or \"<argument>\"\r\n         print_banner()\r\n         print_section(\"NAME\")\r\n         util.printout(\"\\t\"..program..\" \"..command..\" - \"..cmd.help_summary)\r\n         print_section(\"SYNOPSIS\")\r\n         util.printout(\"\\t\"..program..\" \"..command..\" \"..arguments)\r\n         print_section(\"DESCRIPTION\")\r\n         util.printout(\"\",(cmd.help:gsub(\"\\n\",\"\\n\\t\"):gsub(\"\\n\\t$\",\"\")))\r\n         print_section(\"SEE ALSO\")\r\n         util.printout(\"\",\"'\"..program..\" help' for general options and configuration.\\n\")\r\n      else\r\n         return nil, \"Unknown command '\"..command..\"'\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local sys_file, sys_ok, home_file, home_ok = cfg.which_config()",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "print_banner()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "print_section(\"NAME\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "util.printout(\"\\t\"..program..[[ - ]]..program_description)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "print_section(\"SYNOPSIS\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "util.printout(\"\\t\"..program..[[ [--from=<server> | --only-from=<server>] [--to=<tree>] [VAR=VALUE]... <command> [<argument>] ]])",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "print_section(\"GENERAL OPTIONS\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "util.printout([[\r\n\tThese apply to all commands, as appropriate:\r\n\r\n\t--server=<server>      Fetch rocks/rockspecs from this server\r\n\t                       (takes priority over config file)\r\n\t--only-server=<server> Fetch rocks/rockspecs from this server only\r\n\t                       (overrides any entries in the config file)\r\n\t--only-sources=<url>   Restrict downloads to paths matching the\r\n\t                       given URL.\r\n\t--tree=<tree>          Which tree to operate on.\r\n\t--local                Use the tree in the user's home directory.\r\n\t                       To enable it, see ']]..program..[[ help path'.]])",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "print_section(\"VARIABLES\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "util.printout([[\r\n\tVariables from the \"variables\" table of the configuration file\r\n\tcan be overriden with VAR=VALUE assignments.]])",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "print_section(\"COMMANDS\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local names = {}",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "for name, command in util.sortedpairs(commands) do\r\n         local cmd = require(command)\r\n         util.printout(\"\", name)\r\n         util.printout(\"\\t\", cmd.help_summary)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "local cmd = require(command)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "util.printout(\"\", name)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "util.printout(\"\\t\", cmd.help_summary)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "print_section(\"CONFIGURATION\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "util.printout(\"\\tLua version: \" .. cfg.lua_version)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "util.printout(\"\\tConfiguration files:\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "util.printout(\"\\t\\tSystem: \".. dir.normalize(sys_file) .. \" (\" .. get_status(sys_ok) ..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if home_file then\r\n         util.printout(\"\\t\\tUser  : \".. dir.normalize(home_file) .. \" (\" .. get_status(home_ok) ..\")\\n\")\r\n      else\r\n         util.printout(\"\\t\\tUser  : disabled in this LuaRocks installation.\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "util.printout(\"\\t\\tUser  : \".. dir.normalize(home_file) .. \" (\" .. get_status(home_ok) ..\")\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "util.printout(\"\\t\\tUser  : disabled in this LuaRocks installation.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "util.printout(\"\\tRocks trees in use: \")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "for _, tree in ipairs(cfg.rocks_trees) do\r\n      \tif type(tree) == \"string\" then\r\n      \t   util.printout(\"\\t\\t\"..dir.normalize(tree))\r\n      \telse\r\n      \t   local name = tree.name and \" (\\\"\"..tree.name..\"\\\")\" or \"\"\r\n      \t   util.printout(\"\\t\\t\"..dir.normalize(tree.root)..name)\r\n      \tend\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "if type(tree) == \"string\" then\r\n      \t   util.printout(\"\\t\\t\"..dir.normalize(tree))\r\n      \telse\r\n      \t   local name = tree.name and \" (\\\"\"..tree.name..\"\\\")\" or \"\"\r\n      \t   util.printout(\"\\t\\t\"..dir.normalize(tree.root)..name)\r\n      \tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "util.printout(\"\\t\\t\"..dir.normalize(tree))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local name = tree.name and \" (\\\"\"..tree.name..\"\\\")\" or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "util.printout(\"\\t\\t\"..dir.normalize(tree.root)..name)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "command = command:gsub(\"-\", \"_\")",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local cmd = require(commands[command])",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if cmd then\r\n         local arguments = cmd.help_arguments or \"<argument>\"\r\n         print_banner()\r\n         print_section(\"NAME\")\r\n         util.printout(\"\\t\"..program..\" \"..command..\" - \"..cmd.help_summary)\r\n         print_section(\"SYNOPSIS\")\r\n         util.printout(\"\\t\"..program..\" \"..command..\" \"..arguments)\r\n         print_section(\"DESCRIPTION\")\r\n         util.printout(\"\",(cmd.help:gsub(\"\\n\",\"\\n\\t\"):gsub(\"\\n\\t$\",\"\")))\r\n         print_section(\"SEE ALSO\")\r\n         util.printout(\"\",\"'\"..program..\" help' for general options and configuration.\\n\")\r\n      else\r\n         return nil, \"Unknown command '\"..command..\"'\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "local arguments = cmd.help_arguments or \"<argument>\"",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "util.printout(\"\\t\"..program..\" \"..command..\" - \"..cmd.help_summary)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "util.printout(\"\\t\"..program..\" \"..command..\" \"..arguments)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "print_section(\"DESCRIPTION\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "util.printout(\"\",(cmd.help:gsub(\"\\n\",\"\\n\\t\"):gsub(\"\\n\\t$\",\"\")))",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "print_section(\"SEE ALSO\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "util.printout(\"\",\"'\"..program..\" help' for general options and configuration.\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "",
    "type": "function container"
  }, {
    "id": 58,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "function sortedpairs(tbl, sort_function)\r\n   return coroutine.wrap(function() sortedpairs_iterator(tbl, sort_function) end)\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "function this_program(default)\r\n   local i = 1\r\n   local last, cur = default, default\r\n   while i do\r\n      local dbg = debug.getinfo(i,\"S\")\r\n      if not dbg then break end\r\n      last = cur\r\n      cur = dbg.source\r\n      i=i+1\r\n   end\r\n   return last:sub(2)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 63,
    "text": "module",
    "type": "global function"
  }, {
    "id": 64,
    "text": "type",
    "type": "global function"
  }, {
    "id": 65,
    "text": "require",
    "type": "global function"
  }, {
    "id": 66,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 67,
    "text": "util)",
    "type": "module"
  }, {
    "id": 68,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 69,
    "text": "(commands[command])",
    "type": "module"
  }, {
    "id": 70,
    "text": "",
    "type": "variable container"
  }, {
    "id": 71,
    "text": "",
    "type": "require container"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "global variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "global variable"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 82,
    "text": "(command)",
    "type": "module"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  } ]
}