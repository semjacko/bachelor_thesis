{
  "_filename": "cmake.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/build/cmake.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 34
  }, {
    "from": 25,
    "label": "calls",
    "to": 36
  }, {
    "from": 25,
    "label": "calls",
    "to": 36
  }, {
    "from": 25,
    "label": "calls",
    "to": 36
  }, {
    "from": 25,
    "label": "calls",
    "to": 32
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 25,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 41,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "requires",
    "to": 39
  }, {
    "from": 41,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "requires",
    "to": 38
  }, {
    "from": 41,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "requires",
    "to": 37
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cmake",
    "type": "module"
  }, {
    "id": 2,
    "text": "function run(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n   local build = rockspec.build\r\n   local variables = build.variables or {}\r\n   \r\n   -- Pass Env variables\r\n   variables.CMAKE_MODULE_PATH=os.getenv(\"CMAKE_MODULE_PATH\")\r\n   variables.CMAKE_LIBRARY_PATH=os.getenv(\"CMAKE_LIBRARY_PATH\")\r\n   variables.CMAKE_INCLUDE_PATH=os.getenv(\"CMAKE_INCLUDE_PATH\")\r\n\r\n   util.variable_substitutions(variables, rockspec.variables)\r\n\r\n   if not fs.execute_quiet(rockspec.variables.CMAKE, \"--help\") then\r\n      return nil, \"'\"..rockspec.variables.CMAKE..\"' program not found. Is cmake installed? You may want to edit variables.CMAKE\"\r\n   end\r\n   \r\n   -- If inline cmake is present create CMakeLists.txt from it.\r\n   if type(build.cmake) == \"string\" then\r\n      local cmake = assert(io.open(fs.current_dir()..\"/CMakeLists.txt\", \"w\"))\r\n      cmake:write(build.cmake)\r\n      cmake:close()\r\n   end\r\n\r\n\r\n   -- Execute cmake with variables.\r\n   local args = \"\"\r\n   if cfg.cmake_generator then\r\n      args = args .. ' -G\"'..cfg.cmake_generator.. '\"'\r\n   end\r\n   for k,v in pairs(variables) do\r\n      args = args .. ' -D' ..k.. '=\"' ..v.. '\"'\r\n   end\r\n\r\n   if not fs.execute_string(rockspec.variables.CMAKE..\" . \" ..args) then\r\n      return nil, \"Failed cmake.\"\r\n   end\r\n   \r\n   if not fs.execute_string(rockspec.variables.MAKE..\" -fMakefile\") then\r\n      return nil, \"Failed building.\"\r\n   end\r\n\r\n   if not fs.execute_string(rockspec.variables.MAKE..\" -fMakefile install\") then\r\n      return nil, \"Failed installing.\"\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert(type(rockspec) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local build = rockspec.build",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local variables = build.variables or {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "variables.CMAKE_MODULE_PATH=os.getenv(\"CMAKE_MODULE_PATH\")",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "variables.CMAKE_LIBRARY_PATH=os.getenv(\"CMAKE_LIBRARY_PATH\")",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "variables.CMAKE_INCLUDE_PATH=os.getenv(\"CMAKE_INCLUDE_PATH\")",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "util.variable_substitutions(variables, rockspec.variables)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "if not fs.execute_quiet(rockspec.variables.CMAKE, \"--help\") then\r\n      return nil, \"'\"..rockspec.variables.CMAKE..\"' program not found. Is cmake installed? You may want to edit variables.CMAKE\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "if type(build.cmake) == \"string\" then\r\n      local cmake = assert(io.open(fs.current_dir()..\"/CMakeLists.txt\", \"w\"))\r\n      cmake:write(build.cmake)\r\n      cmake:close()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "local cmake = assert(io.open(fs.current_dir()..\"/CMakeLists.txt\", \"w\"))",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "cmake:write(build.cmake)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "cmake:close()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "local args = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if cfg.cmake_generator then\r\n      args = args .. ' -G\"'..cfg.cmake_generator.. '\"'\r\n   end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "args = args .. ' -G\"'..cfg.cmake_generator.. '\"'",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "for k,v in pairs(variables) do\r\n      args = args .. ' -D' ..k.. '=\"' ..v.. '\"'\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "args = args .. ' -D' ..k.. '=\"' ..v.. '\"'",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if not fs.execute_string(rockspec.variables.CMAKE..\" . \" ..args) then\r\n      return nil, \"Failed cmake.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if not fs.execute_string(rockspec.variables.MAKE..\" -fMakefile\") then\r\n      return nil, \"Failed building.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if not fs.execute_string(rockspec.variables.MAKE..\" -fMakefile install\") then\r\n      return nil, \"Failed installing.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "",
    "type": "function container"
  }, {
    "id": 26,
    "text": "function execute_quiet(command, ...)\r\n   assert(type(command) == \"string\")\r\n   if cfg.verbose then -- omit silencing output\r\n      return fs.execute_string(quote_args(command, ...))\r\n   else\r\n      return fs.execute_string(fs.quiet(quote_args(command, ...)))\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function execute_string(cmd)\r\n   local code = os.execute(cmd)\r\n   return (code == 0 or code == true)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function current_dir()\r\n   return lfs.currentdir()\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function variable_substitutions(tbl, vars)\r\n   assert(type(tbl) == \"table\")\r\n   assert(type(vars) == \"table\")\r\n   \r\n   local updated = {}\r\n   for k, v in pairs(tbl) do\r\n      if type(v) == \"string\" then\r\n         updated[k] = v:gsub(var_format_pattern, vars)\r\n         if warn_failed_matches(updated[k]) then\r\n            updated[k] = updated[k]:gsub(var_format_pattern, \"\")\r\n         end\r\n      end\r\n   end\r\n   for k, v in pairs(updated) do\r\n      tbl[k] = v\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 31,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 32,
    "text": "module",
    "type": "global function"
  }, {
    "id": 33,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 34,
    "text": "open",
    "type": "global function"
  }, {
    "id": 35,
    "text": "type",
    "type": "global function"
  }, {
    "id": 36,
    "text": "require",
    "type": "global function"
  }, {
    "id": 37,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 38,
    "text": "util)",
    "type": "module"
  }, {
    "id": 39,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 40,
    "text": "",
    "type": "variable container"
  }, {
    "id": 41,
    "text": "",
    "type": "require container"
  }, {
    "id": 42,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 43,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "require local variable"
  } ]
}