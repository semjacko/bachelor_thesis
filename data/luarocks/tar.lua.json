{
  "_filename": "tar.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/tools/tar.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 9
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 28,
    "label": "has",
    "to": 40
  }, {
    "from": 28,
    "label": "has",
    "to": 41
  }, {
    "from": 28,
    "label": "has",
    "to": 42
  }, {
    "from": 28,
    "label": "has",
    "to": 43
  }, {
    "from": 28,
    "label": "has",
    "to": 44
  }, {
    "from": 28,
    "label": "has",
    "to": 45
  }, {
    "from": 28,
    "label": "has",
    "to": 46
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 47
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 48
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 9
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 56,
    "label": "has",
    "to": 64
  }, {
    "from": 56,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 56,
    "label": "has",
    "to": 74
  }, {
    "from": 56,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 75,
    "label": "has",
    "to": 82
  }, {
    "from": 75,
    "label": "has",
    "to": 83
  }, {
    "from": 75,
    "label": "has",
    "to": 84
  }, {
    "from": 75,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 50,
    "label": "has",
    "to": 9
  }, {
    "from": 50,
    "label": "has",
    "to": 9
  }, {
    "from": 50,
    "label": "has",
    "to": 9
  }, {
    "from": 50,
    "label": "has",
    "to": 87
  }, {
    "from": 28,
    "label": "calls",
    "to": 7
  }, {
    "from": 50,
    "label": "calls",
    "to": 6
  }, {
    "from": 50,
    "label": "calls",
    "to": 90
  }, {
    "from": 50,
    "label": "calls",
    "to": 90
  }, {
    "from": 50,
    "label": "calls",
    "to": 4
  }, {
    "from": 50,
    "label": "calls",
    "to": 4
  }, {
    "from": 50,
    "label": "calls",
    "to": 94
  }, {
    "from": 50,
    "label": "calls",
    "to": 94
  }, {
    "from": 50,
    "label": "calls",
    "to": 3
  }, {
    "from": 11,
    "label": "calls",
    "to": 91
  }, {
    "from": 50,
    "label": "calls",
    "to": 92
  }, {
    "from": 28,
    "label": "calls",
    "to": 20
  }, {
    "from": 50,
    "label": "calls",
    "to": 20
  }, {
    "from": 50,
    "label": "calls",
    "to": 5
  }, {
    "from": 50,
    "label": "calls",
    "to": 89
  }, {
    "from": 50,
    "label": "calls",
    "to": 28
  }, {
    "from": 88,
    "label": "calls",
    "to": 93
  }, {
    "from": 28,
    "label": "calls",
    "to": 11
  }, {
    "from": 28,
    "label": "calls",
    "to": 11
  }, {
    "from": 28,
    "label": "calls",
    "to": 11
  }, {
    "from": 28,
    "label": "calls",
    "to": 11
  }, {
    "from": 28,
    "label": "calls",
    "to": 11
  }, {
    "from": 28,
    "label": "calls",
    "to": 11
  }, {
    "from": 28,
    "label": "calls",
    "to": 11
  }, {
    "from": 50,
    "label": "calls",
    "to": 95
  }, {
    "from": 50,
    "label": "calls",
    "to": 95
  }, {
    "from": 88,
    "label": "calls",
    "to": 96
  }, {
    "from": 88,
    "label": "calls",
    "to": 96
  }, {
    "from": 88,
    "label": "calls",
    "to": 96
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 50,
    "label": "calls",
    "to": 26
  }, {
    "from": 50,
    "label": "calls",
    "to": 26
  }, {
    "from": 50,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 88
  }, {
    "from": 88,
    "label": "declares",
    "to": 7
  }, {
    "from": 88,
    "label": "declares",
    "to": 11
  }, {
    "from": 88,
    "label": "declares",
    "to": 20
  }, {
    "from": 88,
    "label": "declares",
    "to": 26
  }, {
    "from": 88,
    "label": "declares",
    "to": 28
  }, {
    "from": 88,
    "label": "declares",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 100,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 101,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "requires",
    "to": 99
  }, {
    "from": 101,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "requires",
    "to": 98
  }, {
    "from": 101,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "requires",
    "to": 97
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tar",
    "type": "module"
  }, {
    "id": 2,
    "text": "function dir_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n   return (pathname:gsub(\"/*$\", \"\"):match(\"(.*)[/]+[^/]*\")) or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function make_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   directory = dir.normalize(directory)\r\n   local path = nil\r\n   if directory:sub(2, 2) == \":\" then\r\n     path = directory:sub(1, 2)\r\n     directory = directory:sub(4)\r\n   else\r\n     if directory:match(\"^/\") then\r\n        path = \"\"\r\n     end\r\n   end\r\n   for d in directory:gmatch(\"([^\"..dir.separator..\"]+)\"..dir.separator..\"*\") do\r\n      path = path and path .. dir.separator .. d or d\r\n      local mode = lfs.attributes(path, \"mode\")\r\n      if not mode then\r\n         local ok, err = lfs.mkdir(path)\r\n         if not ok then\r\n            return false, err\r\n         end\r\n      elseif mode ~= \"directory\" then\r\n         return false, path..\" is not a directory\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function set_time(file, time)\r\n   file = dir.normalize(file)\r\n   return lfs.touch(file, time)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function chmod(file, mode)\r\n   -- LuaPosix (as of 5.1.15) does not support octal notation...\r\n   if mode:sub(1,1) == \"0\" then\r\n      local new_mode = {}\r\n      for c in mode:sub(2):gmatch(\".\") do\r\n         table.insert(new_mode, octal_to_rwx[c])\r\n      end\r\n      mode = table.concat(new_mode)\r\n   end\r\n   local err = posix.chmod(file, mode)\r\n   return err == 0\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function get_typeflag(flag)\r\n   if flag == \"0\" or flag == \"\\0\" then return \"file\"\r\n   elseif flag == \"1\" then return \"link\"\r\n   elseif flag == \"2\" then return \"symlink\" -- \"reserved\" in POSIX, \"symlink\" in GNU\r\n   elseif flag == \"3\" then return \"character\"\r\n   elseif flag == \"4\" then return \"block\"\r\n   elseif flag == \"5\" then return \"directory\"\r\n   elseif flag == \"6\" then return \"fifo\"\r\n   elseif flag == \"7\" then return \"contiguous\" -- \"reserved\" in POSIX, \"contiguous\" in GNU\r\n   elseif flag == \"x\" then return \"next file\"\r\n   elseif flag == \"g\" then return \"global extended header\"\r\n   elseif flag == \"L\" then return \"long name\"\r\n   elseif flag == \"K\" then return \"long link name\"\r\n   end\r\n   return \"unknown\"\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if flag == \"0\" or flag == \"\\0\" then return \"file\"\r\n   elseif flag == \"1\" then return \"link\"\r\n   elseif flag == \"2\" then return \"symlink\" -- \"reserved\" in POSIX, \"symlink\" in GNU\r\n   elseif flag == \"3\" then return \"character\"\r\n   elseif flag == \"4\" then return \"block\"\r\n   elseif flag == \"5\" then return \"directory\"\r\n   elseif flag == \"6\" then return \"fifo\"\r\n   elseif flag == \"7\" then return \"contiguous\" -- \"reserved\" in POSIX, \"contiguous\" in GNU\r\n   elseif flag == \"x\" then return \"next file\"\r\n   elseif flag == \"g\" then return \"global extended header\"\r\n   elseif flag == \"L\" then return \"long name\"\r\n   elseif flag == \"K\" then return \"long link name\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function octal_to_number(octal)\r\n   local exp = 0\r\n   local number = 0\r\n   for i = #octal,1,-1 do\r\n      local digit = tonumber(octal:sub(i,i)) \r\n      if not digit then break end\r\n      number = number + (digit * 8^exp)\r\n      exp = exp + 1\r\n   end\r\n   return number\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local exp = 0",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local number = 0",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "for i = #octal,1,-1 do\r\n      local digit = tonumber(octal:sub(i,i)) \r\n      if not digit then break end\r\n      number = number + (digit * 8^exp)\r\n      exp = exp + 1\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 15,
    "text": "local digit = tonumber(octal:sub(i,i))",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if not digit then break end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "number = number + (digit * 8^exp)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "exp = exp + 1",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function checksum_header(block)\r\n   local sum = 256\r\n   for i = 1,148 do\r\n      sum = sum + block:byte(i)\r\n   end\r\n   for i = 157,500 do\r\n      sum = sum + block:byte(i)\r\n   end\r\n   return sum\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local sum = 256",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "for i = 1,148 do\r\n      sum = sum + block:byte(i)\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 23,
    "text": "sum = sum + block:byte(i)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "for i = 157,500 do\r\n      sum = sum + block:byte(i)\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function nullterm(s)\r\n   return s:match(\"^[^%z]*\")\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function read_header_block(block)\r\n   local header = {}\r\n   header.name = nullterm(block:sub(1,100))\r\n   header.mode = nullterm(block:sub(101,108))\r\n   header.uid = octal_to_number(nullterm(block:sub(109,116)))\r\n   header.gid = octal_to_number(nullterm(block:sub(117,124)))\r\n   header.size = octal_to_number(nullterm(block:sub(125,136)))\r\n   header.mtime = octal_to_number(nullterm(block:sub(137,148)))\r\n   header.chksum = octal_to_number(nullterm(block:sub(149,156)))\r\n   header.typeflag = get_typeflag(block:sub(157,157))\r\n   header.linkname = nullterm(block:sub(158,257))\r\n   header.magic = block:sub(258,263)\r\n   header.version = block:sub(264,265)\r\n   header.uname = nullterm(block:sub(266,297))\r\n   header.gname = nullterm(block:sub(298,329))\r\n   header.devmajor = octal_to_number(nullterm(block:sub(330,337)))\r\n   header.devminor = octal_to_number(nullterm(block:sub(338,345)))\r\n   header.prefix = block:sub(346,500)\r\n   if header.magic ~= \"ustar \" and header.magic ~= \"ustar\\0\" then\r\n      return false, \"Invalid header magic \"..header.magic\r\n   end\r\n   if header.version ~= \"00\" and header.version ~= \" \\0\" then\r\n      return false, \"Unknown version \"..header.version\r\n   end\r\n   if not checksum_header(block) == header.chksum then\r\n      return false, \"Failed header checksum\"\r\n   end\r\n   return header\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local header = {}",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "header.name = nullterm(block:sub(1,100))",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "header.mode = nullterm(block:sub(101,108))",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "header.uid = octal_to_number(nullterm(block:sub(109,116)))",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "header.gid = octal_to_number(nullterm(block:sub(117,124)))",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "header.size = octal_to_number(nullterm(block:sub(125,136)))",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "header.mtime = octal_to_number(nullterm(block:sub(137,148)))",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "header.chksum = octal_to_number(nullterm(block:sub(149,156)))",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "header.typeflag = get_typeflag(block:sub(157,157))",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "header.linkname = nullterm(block:sub(158,257))",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "header.magic = block:sub(258,263)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "header.version = block:sub(264,265)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "header.uname = nullterm(block:sub(266,297))",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "header.gname = nullterm(block:sub(298,329))",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "header.devmajor = octal_to_number(nullterm(block:sub(330,337)))",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "header.devminor = octal_to_number(nullterm(block:sub(338,345)))",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "header.prefix = block:sub(346,500)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "if header.magic ~= \"ustar \" and header.magic ~= \"ustar\\0\" then\r\n      return false, \"Invalid header magic \"..header.magic\r\n   end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "if header.version ~= \"00\" and header.version ~= \" \\0\" then\r\n      return false, \"Unknown version \"..header.version\r\n   end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "if not checksum_header(block) == header.chksum then\r\n      return false, \"Failed header checksum\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function untar(filename, destdir)\r\n   assert(type(filename) == \"string\")\r\n   assert(type(destdir) == \"string\")\r\n\r\n   local tar_handle = io.open(filename, \"r\")\r\n   if not tar_handle then return nil, \"Error opening file \"..filename end\r\n   \r\n   local long_name, long_link_name\r\n   while true do\r\n      local block\r\n      repeat \r\n         block = tar_handle:read(blocksize)\r\n      until (not block) or checksum_header(block) > 256\r\n      if not block then break end\r\n      local header, err = read_header_block(block)\r\n      if not header then\r\n         util.printerr(err)\r\n      end\r\n\r\n      local file_data = tar_handle:read(math.ceil(header.size / blocksize) * blocksize):sub(1,header.size)\r\n\r\n      if header.typeflag == \"long name\" then\r\n         long_name = nullterm(file_data)\r\n      elseif header.typeflag == \"long link name\" then\r\n         long_link_name = nullterm(file_data)\r\n      else\r\n         if long_name then\r\n            header.name = long_name\r\n            long_name = nil\r\n         end\r\n         if long_link_name then\r\n            header.name = long_link_name\r\n            long_link_name = nil\r\n         end\r\n      end\r\n      local pathname = dir.path(destdir, header.name)\r\n      if header.typeflag == \"directory\" then\r\n         local ok, err = fs.make_dir(pathname)\r\n         if not ok then return nil, err end\r\n      elseif header.typeflag == \"file\" then\r\n         local dirname = dir.dir_name(pathname)\r\n         if dirname ~= \"\" then\r\n            local ok, err = fs.make_dir(dirname)\r\n            if not ok then return nil, err end\r\n         end\r\n         local file_handle = io.open(pathname, \"wb\")\r\n         file_handle:write(file_data)\r\n         file_handle:close()\r\n         fs.set_time(pathname, header.mtime)\r\n         if fs.chmod then\r\n            fs.chmod(pathname, header.mode)\r\n         end\r\n      end\r\n      --[[\r\n      for k,v in pairs(header) do\r\n         util.printout(\"[\\\"\"..tostring(k)..\"\\\"] = \"..(type(v)==\"number\" and v or \"\\\"\"..v:gsub(\"%z\", \"\\\\0\")..\"\\\"\"))\r\n      end\r\n      util.printout()\r\n      --]]\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "assert(type(filename) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert(type(destdir) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local tar_handle = io.open(filename, \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if not tar_handle then return nil, \"Error opening file \"..filename end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local long_name, long_link_name",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "while true do\r\n      local block\r\n      repeat \r\n         block = tar_handle:read(blocksize)\r\n      until (not block) or checksum_header(block) > 256\r\n      if not block then break end\r\n      local header, err = read_header_block(block)\r\n      if not header then\r\n         util.printerr(err)\r\n      end\r\n\r\n      local file_data = tar_handle:read(math.ceil(header.size / blocksize) * blocksize):sub(1,header.size)\r\n\r\n      if header.typeflag == \"long name\" then\r\n         long_name = nullterm(file_data)\r\n      elseif header.typeflag == \"long link name\" then\r\n         long_link_name = nullterm(file_data)\r\n      else\r\n         if long_name then\r\n            header.name = long_name\r\n            long_name = nil\r\n         end\r\n         if long_link_name then\r\n            header.name = long_link_name\r\n            long_link_name = nil\r\n         end\r\n      end\r\n      local pathname = dir.path(destdir, header.name)\r\n      if header.typeflag == \"directory\" then\r\n         local ok, err = fs.make_dir(pathname)\r\n         if not ok then return nil, err end\r\n      elseif header.typeflag == \"file\" then\r\n         local dirname = dir.dir_name(pathname)\r\n         if dirname ~= \"\" then\r\n            local ok, err = fs.make_dir(dirname)\r\n            if not ok then return nil, err end\r\n         end\r\n         local file_handle = io.open(pathname, \"wb\")\r\n         file_handle:write(file_data)\r\n         file_handle:close()\r\n         fs.set_time(pathname, header.mtime)\r\n         if fs.chmod then\r\n            fs.chmod(pathname, header.mode)\r\n         end\r\n      end\r\n      --[[\r\n      for k,v in pairs(header) do\r\n         util.printout(\"[\\\"\"..tostring(k)..\"\\\"] = \"..(type(v)==\"number\" and v or \"\\\"\"..v:gsub(\"%z\", \"\\\\0\")..\"\\\"\"))\r\n      end\r\n      util.printout()\r\n      --]]\r\n   end",
    "type": "statement:while"
  }, {
    "id": 57,
    "text": "local block",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "repeat \r\n         block = tar_handle:read(blocksize)\r\n      until (not block) or checksum_header(block) > 256",
    "type": "statement:repeat"
  }, {
    "id": 59,
    "text": "block = tar_handle:read(blocksize)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if not block then break end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "local header, err = read_header_block(block)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if not header then\r\n         util.printerr(err)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "util.printerr(err)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "local file_data = tar_handle:read(math.ceil(header.size / blocksize) * blocksize):sub(1,header.size)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if header.typeflag == \"long name\" then\r\n         long_name = nullterm(file_data)\r\n      elseif header.typeflag == \"long link name\" then\r\n         long_link_name = nullterm(file_data)\r\n      else\r\n         if long_name then\r\n            header.name = long_name\r\n            long_name = nil\r\n         end\r\n         if long_link_name then\r\n            header.name = long_link_name\r\n            long_link_name = nil\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "long_name = nullterm(file_data)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "long_link_name = nullterm(file_data)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if long_name then\r\n            header.name = long_name\r\n            long_name = nil\r\n         end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "header.name = long_name",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "long_name = nil",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "if long_link_name then\r\n            header.name = long_link_name\r\n            long_link_name = nil\r\n         end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "header.name = long_link_name",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "long_link_name = nil",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "local pathname = dir.path(destdir, header.name)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if header.typeflag == \"directory\" then\r\n         local ok, err = fs.make_dir(pathname)\r\n         if not ok then return nil, err end\r\n      elseif header.typeflag == \"file\" then\r\n         local dirname = dir.dir_name(pathname)\r\n         if dirname ~= \"\" then\r\n            local ok, err = fs.make_dir(dirname)\r\n            if not ok then return nil, err end\r\n         end\r\n         local file_handle = io.open(pathname, \"wb\")\r\n         file_handle:write(file_data)\r\n         file_handle:close()\r\n         fs.set_time(pathname, header.mtime)\r\n         if fs.chmod then\r\n            fs.chmod(pathname, header.mode)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "local ok, err = fs.make_dir(pathname)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "local dirname = dir.dir_name(pathname)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if dirname ~= \"\" then\r\n            local ok, err = fs.make_dir(dirname)\r\n            if not ok then return nil, err end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "local ok, err = fs.make_dir(dirname)",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local file_handle = io.open(pathname, \"wb\")",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "file_handle:write(file_data)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "file_handle:close()",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "fs.set_time(pathname, header.mtime)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "if fs.chmod then\r\n            fs.chmod(pathname, header.mode)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "fs.chmod(pathname, header.mode)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "",
    "type": "function container"
  }, {
    "id": 89,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 91,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 92,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 93,
    "text": "module",
    "type": "global function"
  }, {
    "id": 94,
    "text": "open",
    "type": "global function"
  }, {
    "id": 95,
    "text": "type",
    "type": "global function"
  }, {
    "id": 96,
    "text": "require",
    "type": "global function"
  }, {
    "id": 97,
    "text": "util)",
    "type": "module"
  }, {
    "id": 98,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 99,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 100,
    "text": "",
    "type": "variable container"
  }, {
    "id": 101,
    "text": "",
    "type": "require container"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "number"
  }, {
    "id": 104,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "require local variable"
  } ]
}