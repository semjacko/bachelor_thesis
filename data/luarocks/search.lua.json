{
  "_filename": "search.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/search.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 149
  }, {
    "from": 5,
    "label": "calls",
    "to": 119
  }, {
    "from": 9,
    "label": "calls",
    "to": 99
  }, {
    "from": 9,
    "label": "calls",
    "to": 125
  }, {
    "from": 9,
    "label": "calls",
    "to": 119
  }, {
    "from": 9,
    "label": "calls",
    "to": 82
  }, {
    "from": 12,
    "label": "calls",
    "to": 119
  }, {
    "from": 12,
    "label": "calls",
    "to": 99
  }, {
    "from": 12,
    "label": "calls",
    "to": 125
  }, {
    "from": 13,
    "label": "calls",
    "to": 74
  }, {
    "from": 13,
    "label": "calls",
    "to": 125
  }, {
    "from": 13,
    "label": "calls",
    "to": 99
  }, {
    "from": 15,
    "label": "calls",
    "to": 99
  }, {
    "from": 15,
    "label": "calls",
    "to": 59
  }, {
    "from": 16,
    "label": "calls",
    "to": 74
  }, {
    "from": 16,
    "label": "calls",
    "to": 99
  }, {
    "from": 19,
    "label": "calls",
    "to": 74
  }, {
    "from": 19,
    "label": "calls",
    "to": 99
  }, {
    "from": 20,
    "label": "calls",
    "to": 74
  }, {
    "from": 21,
    "label": "calls",
    "to": 74
  }, {
    "from": 22,
    "label": "calls",
    "to": 74
  }, {
    "from": 20,
    "label": "calls",
    "to": 99
  }, {
    "from": 22,
    "label": "calls",
    "to": 99
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 23,
    "label": "has",
    "to": 35
  }, {
    "from": 23,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 37,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 37,
    "label": "has",
    "to": 47
  }, {
    "from": 37,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 39
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 35
  }, {
    "from": 49,
    "label": "has",
    "to": 35
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 42
  }, {
    "from": 59,
    "label": "has",
    "to": 50
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 59,
    "label": "has",
    "to": 35
  }, {
    "from": 59,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 38
  }, {
    "from": 74,
    "label": "has",
    "to": 42
  }, {
    "from": 74,
    "label": "has",
    "to": 50
  }, {
    "from": 74,
    "label": "has",
    "to": 64
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 35
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 35
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 50
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 82,
    "label": "has",
    "to": 94
  }, {
    "from": 82,
    "label": "has",
    "to": 95
  }, {
    "from": 82,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 82,
    "label": "has",
    "to": 35
  }, {
    "from": 82,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 39
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 35
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 39
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 105,
    "label": "has",
    "to": 112
  }, {
    "from": 105,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 105,
    "label": "has",
    "to": 35
  }, {
    "from": 105,
    "label": "has",
    "to": 35
  }, {
    "from": 105,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 50
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 35
  }, {
    "from": 119,
    "label": "has",
    "to": 35
  }, {
    "from": 119,
    "label": "has",
    "to": 35
  }, {
    "from": 119,
    "label": "has",
    "to": 35
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 38
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 127,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 125,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 139,
    "label": "has",
    "to": 35
  }, {
    "from": 139,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 39
  }, {
    "from": 149,
    "label": "has",
    "to": 100
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 149,
    "label": "has",
    "to": 153
  }, {
    "from": 149,
    "label": "has",
    "to": 154
  }, {
    "from": 149,
    "label": "has",
    "to": 35
  }, {
    "from": 149,
    "label": "has",
    "to": 35
  }, {
    "from": 149,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 35
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 156,
    "label": "has",
    "to": 162
  }, {
    "from": 156,
    "label": "has",
    "to": 163
  }, {
    "from": 156,
    "label": "has",
    "to": 164
  }, {
    "from": 156,
    "label": "has",
    "to": 165
  }, {
    "from": 156,
    "label": "has",
    "to": 166
  }, {
    "from": 156,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 156,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 156,
    "label": "has",
    "to": 35
  }, {
    "from": 156,
    "label": "has",
    "to": 173
  }, {
    "from": 59,
    "label": "calls",
    "to": 11
  }, {
    "from": 37,
    "label": "calls",
    "to": 183
  }, {
    "from": 37,
    "label": "calls",
    "to": 183
  }, {
    "from": 37,
    "label": "calls",
    "to": 183
  }, {
    "from": 37,
    "label": "calls",
    "to": 183
  }, {
    "from": 37,
    "label": "calls",
    "to": 183
  }, {
    "from": 49,
    "label": "calls",
    "to": 183
  }, {
    "from": 49,
    "label": "calls",
    "to": 183
  }, {
    "from": 59,
    "label": "calls",
    "to": 183
  }, {
    "from": 59,
    "label": "calls",
    "to": 183
  }, {
    "from": 59,
    "label": "calls",
    "to": 183
  }, {
    "from": 74,
    "label": "calls",
    "to": 183
  }, {
    "from": 74,
    "label": "calls",
    "to": 183
  }, {
    "from": 74,
    "label": "calls",
    "to": 183
  }, {
    "from": 82,
    "label": "calls",
    "to": 183
  }, {
    "from": 99,
    "label": "calls",
    "to": 183
  }, {
    "from": 99,
    "label": "calls",
    "to": 183
  }, {
    "from": 105,
    "label": "calls",
    "to": 183
  }, {
    "from": 105,
    "label": "calls",
    "to": 183
  }, {
    "from": 119,
    "label": "calls",
    "to": 183
  }, {
    "from": 125,
    "label": "calls",
    "to": 183
  }, {
    "from": 125,
    "label": "calls",
    "to": 183
  }, {
    "from": 149,
    "label": "calls",
    "to": 183
  }, {
    "from": 149,
    "label": "calls",
    "to": 183
  }, {
    "from": 149,
    "label": "calls",
    "to": 183
  }, {
    "from": 59,
    "label": "calls",
    "to": 6
  }, {
    "from": 105,
    "label": "calls",
    "to": 18
  }, {
    "from": 156,
    "label": "calls",
    "to": 139
  }, {
    "from": 125,
    "label": "calls",
    "to": 8
  }, {
    "from": 149,
    "label": "calls",
    "to": 119
  }, {
    "from": 149,
    "label": "calls",
    "to": 187
  }, {
    "from": 119,
    "label": "calls",
    "to": 82
  }, {
    "from": 156,
    "label": "calls",
    "to": 82
  }, {
    "from": 74,
    "label": "calls",
    "to": 184
  }, {
    "from": 82,
    "label": "calls",
    "to": 184
  }, {
    "from": 82,
    "label": "calls",
    "to": 184
  }, {
    "from": 105,
    "label": "calls",
    "to": 184
  }, {
    "from": 125,
    "label": "calls",
    "to": 184
  }, {
    "from": 139,
    "label": "calls",
    "to": 184
  }, {
    "from": 149,
    "label": "calls",
    "to": 99
  }, {
    "from": 156,
    "label": "calls",
    "to": 99
  }, {
    "from": 119,
    "label": "calls",
    "to": 105
  }, {
    "from": 82,
    "label": "calls",
    "to": 74
  }, {
    "from": 125,
    "label": "calls",
    "to": 178
  }, {
    "from": 125,
    "label": "calls",
    "to": 178
  }, {
    "from": 53,
    "label": "calls",
    "to": 49
  }, {
    "from": 53,
    "label": "calls",
    "to": 37
  }, {
    "from": 139,
    "label": "calls",
    "to": 37
  }, {
    "from": 59,
    "label": "calls",
    "to": 23
  }, {
    "from": 74,
    "label": "calls",
    "to": 23
  }, {
    "from": 59,
    "label": "calls",
    "to": 188
  }, {
    "from": 59,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 74,
    "label": "calls",
    "to": 188
  }, {
    "from": 82,
    "label": "calls",
    "to": 188
  }, {
    "from": 105,
    "label": "calls",
    "to": 188
  }, {
    "from": 139,
    "label": "calls",
    "to": 188
  }, {
    "from": 139,
    "label": "calls",
    "to": 188
  }, {
    "from": 53,
    "label": "calls",
    "to": 3
  }, {
    "from": 99,
    "label": "calls",
    "to": 3
  }, {
    "from": 105,
    "label": "calls",
    "to": 3
  }, {
    "from": 74,
    "label": "calls",
    "to": 14
  }, {
    "from": 156,
    "label": "calls",
    "to": 125
  }, {
    "from": 156,
    "label": "calls",
    "to": 125
  }, {
    "from": 156,
    "label": "calls",
    "to": 182
  }, {
    "from": 59,
    "label": "calls",
    "to": 53
  }, {
    "from": 59,
    "label": "calls",
    "to": 53
  }, {
    "from": 74,
    "label": "calls",
    "to": 53
  }, {
    "from": 82,
    "label": "calls",
    "to": 53
  }, {
    "from": 125,
    "label": "calls",
    "to": 179
  }, {
    "from": 125,
    "label": "calls",
    "to": 179
  }, {
    "from": 125,
    "label": "calls",
    "to": 179
  }, {
    "from": 125,
    "label": "calls",
    "to": 179
  }, {
    "from": 59,
    "label": "calls",
    "to": 10
  }, {
    "from": 59,
    "label": "calls",
    "to": 10
  }, {
    "from": 59,
    "label": "calls",
    "to": 17
  }, {
    "from": 53,
    "label": "calls",
    "to": 4
  }, {
    "from": 37,
    "label": "calls",
    "to": 186
  }, {
    "from": 99,
    "label": "calls",
    "to": 186
  }, {
    "from": 105,
    "label": "calls",
    "to": 186
  }, {
    "from": 156,
    "label": "calls",
    "to": 181
  }, {
    "from": 156,
    "label": "calls",
    "to": 181
  }, {
    "from": 156,
    "label": "calls",
    "to": 181
  }, {
    "from": 174,
    "label": "calls",
    "to": 185
  }, {
    "from": 105,
    "label": "calls",
    "to": 189
  }, {
    "from": 82,
    "label": "calls",
    "to": 7
  }, {
    "from": 82,
    "label": "calls",
    "to": 180
  }, {
    "from": 23,
    "label": "calls",
    "to": 190
  }, {
    "from": 37,
    "label": "calls",
    "to": 190
  }, {
    "from": 37,
    "label": "calls",
    "to": 190
  }, {
    "from": 37,
    "label": "calls",
    "to": 190
  }, {
    "from": 37,
    "label": "calls",
    "to": 190
  }, {
    "from": 37,
    "label": "calls",
    "to": 190
  }, {
    "from": 49,
    "label": "calls",
    "to": 190
  }, {
    "from": 49,
    "label": "calls",
    "to": 190
  }, {
    "from": 59,
    "label": "calls",
    "to": 190
  }, {
    "from": 59,
    "label": "calls",
    "to": 190
  }, {
    "from": 59,
    "label": "calls",
    "to": 190
  }, {
    "from": 74,
    "label": "calls",
    "to": 190
  }, {
    "from": 74,
    "label": "calls",
    "to": 190
  }, {
    "from": 74,
    "label": "calls",
    "to": 190
  }, {
    "from": 82,
    "label": "calls",
    "to": 190
  }, {
    "from": 82,
    "label": "calls",
    "to": 190
  }, {
    "from": 99,
    "label": "calls",
    "to": 190
  }, {
    "from": 99,
    "label": "calls",
    "to": 190
  }, {
    "from": 105,
    "label": "calls",
    "to": 190
  }, {
    "from": 105,
    "label": "calls",
    "to": 190
  }, {
    "from": 119,
    "label": "calls",
    "to": 190
  }, {
    "from": 125,
    "label": "calls",
    "to": 190
  }, {
    "from": 125,
    "label": "calls",
    "to": 190
  }, {
    "from": 149,
    "label": "calls",
    "to": 190
  }, {
    "from": 149,
    "label": "calls",
    "to": 190
  }, {
    "from": 149,
    "label": "calls",
    "to": 190
  }, {
    "from": 149,
    "label": "calls",
    "to": 190
  }, {
    "from": 156,
    "label": "calls",
    "to": 190
  }, {
    "from": 174,
    "label": "calls",
    "to": 192
  }, {
    "from": 174,
    "label": "calls",
    "to": 192
  }, {
    "from": 174,
    "label": "calls",
    "to": 192
  }, {
    "from": 174,
    "label": "calls",
    "to": 192
  }, {
    "from": 174,
    "label": "calls",
    "to": 192
  }, {
    "from": 174,
    "label": "calls",
    "to": 192
  }, {
    "from": 59,
    "label": "calls",
    "to": 192
  }, {
    "from": 156,
    "label": "calls",
    "to": 177
  }, {
    "from": 119,
    "label": "calls",
    "to": 191
  }, {
    "from": 119,
    "label": "calls",
    "to": 191
  }, {
    "from": 156,
    "label": "calls",
    "to": 191
  }, {
    "from": 156,
    "label": "calls",
    "to": 191
  }, {
    "from": 1,
    "label": "contains",
    "to": 174
  }, {
    "from": 174,
    "label": "declares",
    "to": 23
  }, {
    "from": 174,
    "label": "declares",
    "to": 37
  }, {
    "from": 174,
    "label": "declares",
    "to": 49
  }, {
    "from": 174,
    "label": "declares",
    "to": 53
  }, {
    "from": 174,
    "label": "declares",
    "to": 59
  }, {
    "from": 174,
    "label": "declares",
    "to": 74
  }, {
    "from": 174,
    "label": "declares",
    "to": 82
  }, {
    "from": 174,
    "label": "declares",
    "to": 99
  }, {
    "from": 174,
    "label": "declares",
    "to": 105
  }, {
    "from": 174,
    "label": "declares",
    "to": 119
  }, {
    "from": 174,
    "label": "declares",
    "to": 125
  }, {
    "from": 174,
    "label": "declares",
    "to": 139
  }, {
    "from": 174,
    "label": "declares",
    "to": 149
  }, {
    "from": 174,
    "label": "declares",
    "to": 156
  }, {
    "from": 175,
    "label": "calls",
    "to": 99
  }, {
    "from": 175,
    "label": "calls",
    "to": 74
  }, {
    "from": 176,
    "label": "calls",
    "to": 149
  }, {
    "from": 1,
    "label": "contains",
    "to": 200
  }, {
    "from": 1,
    "label": "contains",
    "to": 201
  }, {
    "from": 200,
    "label": "initializes",
    "to": 202
  }, {
    "from": 200,
    "label": "initializes",
    "to": 203
  }, {
    "from": 200,
    "label": "initializes",
    "to": 204
  }, {
    "from": 201,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "requires",
    "to": 195
  }, {
    "from": 201,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "requires",
    "to": 198
  }, {
    "from": 201,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "requires",
    "to": 196
  }, {
    "from": 201,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "requires",
    "to": 199
  }, {
    "from": 201,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "requires",
    "to": 193
  }, {
    "from": 201,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "requires",
    "to": 194
  }, {
    "from": 201,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "requires",
    "to": 197
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "search",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function do_build(name, version, deps_mode)\r\n   if name:match(\"%.rockspec$\") then\r\n      return build_rockspec(name, true, false, deps_mode)\r\n   elseif name:match(\"%.src%.rock$\") then\r\n      return build_rock(name, false, deps_mode)\r\n   elseif name:match(\"%.all%.rock$\") then\r\n      local install = require(\"luarocks.install\")\r\n      return install.install_binary_rock(name, deps_mode)\r\n   elseif name:match(\"%.rock$\") then\r\n      return build_rock(name, true, deps_mode)\r\n   elseif not name:match(dir.separator) then\r\n      local search = require(\"luarocks.search\")\r\n      return search.act_on_src_or_rockspec(run, name:lower(), version, deps.deps_mode_to_flag(deps_mode))\r\n   end\r\n   return nil, \"Don't know what to do with \"..name\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function parse_version(vstring)\r\n   if not vstring then return nil end\r\n   assert(type(vstring) == \"string\")\r\n\r\n   local cached = version_cache[vstring]\r\n   if cached then\r\n      return cached\r\n   end\r\n\r\n   local version = {}\r\n   local i = 1\r\n\r\n   local function add_token(number)\r\n      version[i] = version[i] and version[i] + number/100000 or number\r\n      i = i + 1\r\n   end\r\n   \r\n   -- trim leading and trailing spaces\r\n   vstring = vstring:match(\"^%s*(.*)%s*$\")\r\n   version.string = vstring\r\n   -- store revision separately if any\r\n   local main, revision = vstring:match(\"(.*)%-(%d+)$\")\r\n   if revision then\r\n      vstring = main\r\n      version.revision = tonumber(revision)\r\n   end\r\n   while #vstring > 0 do\r\n      -- extract a number\r\n      local token, rest = vstring:match(\"^(%d+)[%.%-%_]*(.*)\")\r\n      if token then\r\n         add_token(tonumber(token))\r\n      else\r\n         -- extract a word\r\n         token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")\r\n         if not token then\r\n            util.printerr(\"Warning: version number '\"..vstring..\"' could not be parsed.\")\r\n            version[i] = 0\r\n            break\r\n         end\r\n         local last = #version\r\n         version[i] = deltas[token] or (token:byte() / 1000)\r\n      end\r\n      vstring = rest\r\n   end\r\n   setmetatable(version, version_mt)\r\n   version_cache[vstring] = version\r\n   return version\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function match_constraints(version, constraints)\r\n   assert(type(version) == \"table\")\r\n   assert(type(constraints) == \"table\")\r\n   local ok = true\r\n   setmetatable(version, version_mt)\r\n   for _, constr in pairs(constraints) do\r\n      if type(constr.version) == \"string\" then\r\n         constr.version = parse_version(constr.version)\r\n      end\r\n      local constr_version, constr_op = constr.version, constr.op\r\n      setmetatable(constr_version, version_mt)\r\n      if     constr_op == \"==\" then ok = version == constr_version\r\n      elseif constr_op == \"~=\" then ok = version ~= constr_version\r\n      elseif constr_op == \">\"  then ok = version >  constr_version\r\n      elseif constr_op == \"<\"  then ok = version <  constr_version\r\n      elseif constr_op == \">=\" then ok = version >= constr_version\r\n      elseif constr_op == \"<=\" then ok = version <= constr_version\r\n      elseif constr_op == \"~>\" then ok = partial_match(version, constr_version)\r\n      end\r\n      if not ok then break end\r\n   end\r\n   return ok\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function fulfill_dependencies(rockspec, deps_mode)\r\n\r\n   local search = require(\"luarocks.search\")\r\n   local install = require(\"luarocks.install\")\r\n\r\n   if rockspec.supported_platforms then\r\n      if not platforms_set then\r\n         platforms_set = values_set(cfg.platforms)\r\n      end\r\n      local supported = nil\r\n      for _, plat in pairs(rockspec.supported_platforms) do\r\n         local neg, plat = plat:match(\"^(!?)(.*)\")\r\n         if neg == \"!\" then\r\n            if platforms_set[plat] then\r\n               return nil, \"This rockspec for \"..rockspec.package..\" does not support \"..plat..\" platforms.\"\r\n            end\r\n         else\r\n            if platforms_set[plat] then\r\n               supported = true\r\n            else\r\n               if supported == nil then\r\n                  supported = false\r\n               end\r\n            end\r\n         end\r\n      end\r\n      if supported == false then\r\n         local plats = table.concat(cfg.platforms, \", \")\r\n         return nil, \"This rockspec for \"..rockspec.package..\" does not support \"..plats..\" platforms.\"\r\n      end\r\n   end\r\n\r\n   local _, missing, no_upgrade = match_deps(rockspec, nil, deps_mode)\r\n\r\n   if next(no_upgrade) then\r\n      util.printerr(\"Missing dependencies for \"..rockspec.name..\" \"..rockspec.version..\":\")\r\n      for _, dep in pairs(no_upgrade) do\r\n         util.printerr(show_dep(dep))\r\n      end\r\n      if next(missing) then\r\n         for _, dep in pairs(missing) do\r\n            util.printerr(show_dep(dep))\r\n         end\r\n      end\r\n      util.printerr()\r\n      for _, dep in pairs(no_upgrade) do\r\n         util.printerr(\"This version of \"..rockspec.name..\" is designed for use with\")\r\n         util.printerr(show_dep(dep)..\", but is configured to avoid upgrading it\")\r\n         util.printerr(\"automatically. Please upgrade \"..dep.name..\" with\")\r\n         util.printerr(\"   luarocks install \"..dep.name)\r\n         util.printerr(\"or choose an older version of \"..rockspec.name..\" with\")\r\n         util.printerr(\"   luarocks search \"..rockspec.name)\r\n      end\r\n      return nil, \"Failed matching dependencies.\"\r\n   end\r\n\r\n   if next(missing) then\r\n      util.printerr()\r\n      util.printerr(\"Missing dependencies for \"..rockspec.name..\":\")\r\n      for _, dep in pairs(missing) do\r\n         util.printerr(show_dep(dep))\r\n      end\r\n      util.printerr()\r\n\r\n      for _, dep in pairs(missing) do\r\n         -- Double-check in case dependency was filled during recursion.\r\n         if not match_dep(dep, nil, deps_mode) then\r\n            local rock = search.find_suitable_rock(dep)\r\n            if not rock then\r\n               return nil, \"Could not satisfy dependency: \"..show_dep(dep)\r\n            end\r\n            local ok, err, errcode = install.run(rock)\r\n            if not ok then\r\n               return nil, \"Failed installing dependency: \"..rock..\" - \"..err, errcode\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function split_url(url)\r\n   assert(type(url) == \"string\")\r\n   \r\n   local protocol, pathname = url:match(\"^([^:]*)://(.*)\")\r\n   if not protocol then\r\n      protocol = \"file\"\r\n      pathname = url\r\n   end\r\n   return protocol, pathname\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function normalize(name)\r\n   local protocol, pathname = split_url(name)\r\n   pathname = pathname:gsub(\"\\\\\", \"/\"):gsub(\"(.)/*$\", \"%1\"):gsub(\"//\", \"/\")\r\n   if protocol ~= \"file\" then pathname = protocol ..\"://\"..pathname end\r\n   return pathname\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function download(arch, name, version, all)\r\n   local results, err\r\n   local query = search.make_query(name, version)\r\n   if arch then query.arch = arch end\r\n   if all then\r\n      if name == \"\" then query.exact_name = false end\r\n      results = search.search_repos(query)\r\n   else\r\n      results, err = search.find_suitable_rock(query)\r\n   end\r\n   if type(results) == \"string\" then\r\n      return get_file(results)\r\n   elseif type(results) == \"table\" and next(results) then\r\n      if all then\r\n         local all_ok = true\r\n         local any_err = \"\"\r\n         for name, result in pairs(results) do\r\n            for version, versions in pairs(result) do\r\n               for _,items in pairs(versions) do\r\n                  local filename = path.make_url(items.repo, name, version, items.arch)\r\n                  local ok, err = get_file(filename)\r\n                  if not ok then\r\n                     all_ok = false\r\n                     any_err = any_err .. \"\\n\" .. err\r\n                  end\r\n               end\r\n            end\r\n         end\r\n         return all_ok, any_err\r\n      else\r\n         util.printerr(\"Multiple search results were returned.\")\r\n         util.title(\"Search results:\")\r\n         search.print_results(results)\r\n         return nil, \"Please narrow your query or use --all.\"\r\n      end\r\n   end\r\n   return nil, \"Could not find a result named \"..name..(version and \" \"..version or \"\")..\".\"\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function list_dir(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   at = dir.normalize(at)\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   for file in lfs.dir(at) do\r\n      if file ~= \".\" and file ~= \"..\" then\r\n         table.insert(result, file)\r\n      end\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"install\")\r\n   end\r\n\r\n   local ok, err = fs.check_command_permissions(flags)\r\n   if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n\r\n   if name:match(\"%.rockspec$\") or name:match(\"%.src%.rock$\") then\r\n      util.printout(\"Using \"..name..\"... switching to 'build' mode\")\r\n      local build = require(\"luarocks.build\")\r\n      return build.run(name, util.forward_flags(flags, \"local\", \"keep\", \"deps-mode\"))\r\n   elseif name:match(\"%.rock$\") then\r\n      ok, err = install_binary_rock(name, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   else\r\n      local search = require(\"luarocks.search\")\r\n      local results, err = search.find_suitable_rock(search.make_query(name:lower(), version))\r\n      if err then\r\n         return nil, err\r\n      elseif type(results) == \"string\" then\r\n         local url = results\r\n         util.printout(\"Installing \"..url..\"...\")\r\n         return run(url, util.forward_flags(flags))\r\n      else\r\n         util.printout()\r\n         util.printerr(\"Could not determine which rock to install.\")\r\n         util.title(\"Search results:\")\r\n         search.print_results(results)\r\n         return nil, (next(results) and \"Please narrow your query.\" or \"No results found.\")\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function run(...)\r\n   local flags, filter, version = util.parse_flags(...)\r\n   local results = {}\r\n   local query = search.make_query(filter and filter:lower() or \"\", version)\r\n   query.exact_name = false\r\n   local trees = cfg.rocks_trees\r\n   if flags[\"tree\"] then\r\n      trees = { flags[\"tree\"] }\r\n   end\r\n   for _, tree in ipairs(trees) do\r\n      search.manifest_search(results, path.rocks_dir(tree), query)\r\n   end\r\n   util.title(\"Installed rocks:\", flags[\"porcelain\"])\r\n   search.print_results(results, flags[\"porcelain\"])\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function load_manifest(repo_url)\r\n   assert(type(repo_url) == \"string\")\r\n\r\n   if manif_core.manifest_cache[repo_url] then\r\n      return manif_core.manifest_cache[repo_url]\r\n   end\r\n   \r\n   local filenames = {\r\n      \"manifest-\"..cfg.lua_version..\".zip\",\r\n      \"manifest-\"..cfg.lua_version,\r\n      \"manifest\",\r\n   }\r\n\r\n   local protocol, repodir = dir.split_url(repo_url)\r\n   local pathname\r\n   if protocol == \"file\" then\r\n      for _, filename in ipairs(filenames) do\r\n         pathname = dir.path(repodir, filename)\r\n         if fs.exists(pathname) then\r\n            break\r\n         end\r\n      end\r\n   else\r\n      local err\r\n      for _, filename in ipairs(filenames) do\r\n         pathname, err = fetch_manifest_from(repo_url, filename)\r\n         if pathname then\r\n            break\r\n         end\r\n      end\r\n      if not pathname then \r\n         return nil, err\r\n      end\r\n   end\r\n   if pathname:match(\".*%.zip$\") then\r\n      pathname = fs.absolute_name(pathname)\r\n      local dir = dir.dir_name(pathname)\r\n      fs.change_dir(dir)\r\n      local nozip = pathname:match(\"(.*)%.zip$\")\r\n      fs.delete(nozip)\r\n      local ok = fs.unzip(pathname)\r\n      fs.pop_dir()\r\n      if not ok then\r\n         fs.delete(pathname)\r\n         fs.delete(pathname..\".timestamp\")\r\n         return nil, \"Failed extracting manifest file\"\r\n      end\r\n      pathname = nozip\r\n   end\r\n   return manif_core.manifest_loader(pathname, repo_url)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function make_manifest(repo, deps_mode, remote)\r\n   assert(type(repo) == \"string\")\r\n   assert(type(deps_mode) == \"string\")\r\n\r\n   if deps_mode == \"none\" then deps_mode = cfg.deps_mode end\r\n\r\n   if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end\r\n\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   query.arch = \"any\"\r\n   local results = search.disk_search(repo, query)\r\n   local manifest = { repository = {}, modules = {}, commands = {} }\r\n\r\n   manif_core.manifest_cache[repo] = manifest\r\n\r\n   local dep_handler = nil\r\n   if not remote then\r\n      dep_handler = function(manifest)\r\n         update_dependencies(manifest, deps_mode)\r\n      end\r\n   end\r\n   local ok, err = store_results(results, manifest, dep_handler)\r\n   if not ok then return nil, err end\r\n\r\n   if remote then\r\n      local cache = {}\r\n      for luaver in util.lua_versions() do\r\n         local vmanifest = { repository = {}, modules = {}, commands = {} }\r\n         local dep_handler = function(manifest)\r\n            filter_by_lua_version(manifest, luaver, repo, cache)\r\n         end\r\n         local ok, err = store_results(results, vmanifest, dep_handler)\r\n         save_table(repo, \"manifest-\"..luaver, vmanifest)\r\n      end\r\n   end\r\n\r\n   return save_table(repo, \"manifest\", manifest)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local function do_pack_binary_rock(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   local query = search.make_query(name, version)\r\n   query.exact_name = true\r\n   local results = {}\r\n   \r\n   search.manifest_search(results, cfg.rocks_dir, query)\r\n   \r\n   if not next(results) then\r\n      return nil, \"'\"..name..\"' does not seem to be an installed rock.\"\r\n   end\r\n   \r\n   local versions = results[name]\r\n   \r\n   if not version then\r\n      local first = next(versions)\r\n      if next(versions, first) then\r\n         return nil, \"Please specify which version of '\"..name..\"' to pack.\"\r\n      end\r\n      version = first\r\n   end\r\n   if not version:match(\"[^-]+%-%d+\") then\r\n      return nil, \"Expected version \"..version..\" in version-revision format.\"\r\n   end\r\n   \r\n   local info = versions[version][1]\r\n   \r\n   local root = path.root_dir(info.repo)\r\n   local prefix = path.install_dir(name, version, root)\r\n   if not fs.exists(prefix) then\r\n      return nil, \"'\"..name..\" \"..version..\"' does not seem to be an installed rock.\"\r\n   end\r\n   \r\n   local rock_manifest = manif.load_rock_manifest(name, version, root)\r\n   if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end\r\n\r\n   local name_version = name .. \"-\" .. version\r\n   local rock_file = fs.absolute_name(name_version .. \".\"..cfg.arch..\".rock\")\r\n   \r\n   local temp_dir = fs.make_temp_dir(\"pack\")\r\n   fs.copy_contents(prefix, temp_dir)\r\n\r\n   local is_binary = false\r\n   if rock_manifest.lib then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lib, path.deploy_lib_dir(root), dir.path(temp_dir, \"lib\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n      is_binary = true\r\n   end\r\n   if rock_manifest.lua then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lua, path.deploy_lua_dir(root), dir.path(temp_dir, \"lua\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n   end\r\n   \r\n   local ok, err = fs.change_dir(temp_dir)\r\n   if not ok then return nil, err end\r\n   if not is_binary and not repos.has_binaries(name, version) then\r\n      rock_file = rock_file:gsub(\"%.\"..cfg.arch:gsub(\"%-\",\"%%-\")..\"%.\", \".all.\")\r\n   end\r\n   fs.delete(rock_file)\r\n   if not fs.zip(rock_file, unpack(fs.list_dir())) then\r\n      return nil, \"Failed packing \"..rock_file\r\n   end\r\n   fs.pop_dir()\r\n   fs.delete(temp_dir)\r\n   return rock_file\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function parse_name(file_name)\r\n   assert(type(file_name) == \"string\")\r\n   if file_name:match(\"%.rock$\") then\r\n      return dir.base_name(file_name):match(\"(.*)-([^-]+-%d+)%.([^.]+)%.rock$\")\r\n   else\r\n      return dir.base_name(file_name):match(\"(.*)-([^-]+-%d+)%.(rockspec)\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function make_url(pathname, name, version, arch)\r\n   assert(type(pathname) == \"string\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   assert(type(arch) == \"string\")\r\n\r\n   local filename = name..\"-\"..version\r\n   if arch == \"installed\" then\r\n      filename = dir.path(name, version, filename..\".rockspec\")\r\n   elseif arch == \"rockspec\" then\r\n      filename = filename..\".rockspec\"\r\n   else\r\n      filename = filename..\".\"..arch..\".rock\"\r\n   end\r\n   return dir.path(pathname, filename)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function run(...)\r\n   local flags = util.parse_flags(...)\r\n   \r\n   local tree = flags[\"tree\"]\r\n\r\n   if type(tree) ~= \"string\" then\r\n      return nil, \"The --tree argument is mandatory. \"..util.see_help(\"purge\")\r\n   end\r\n   \r\n   local results = {}\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   if not fs.is_dir(tree) then\r\n      return nil, \"Directory not found: \"..tree\r\n   end\r\n\r\n   local ok, err = fs.check_command_permissions(flags)\r\n   if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n\r\n   search.manifest_search(results, path.rocks_dir(tree), query)\r\n\r\n   local sort = function(a,b) return deps.compare_versions(b,a) end\r\n   if flags[\"old-versions\"] then\r\n      sort = deps.compare_versions\r\n   end\r\n\r\n   for package, versions in util.sortedpairs(results) do\r\n      for version, repositories in util.sortedpairs(versions, sort) do\r\n         if flags[\"old-versions\"] then\r\n            util.printout(\"Keeping \"..package..\" \"..version..\"...\")\r\n            local ok, err = remove.remove_other_versions(package, version, flags[\"force\"])\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n            break\r\n         else\r\n            util.printout(\"Removing \"..package..\" \"..version..\"...\")\r\n            local ok, err = repos.delete_version(package, version, true)\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return manif.make_manifest(cfg.rocks_dir, \"one\")\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local function check_dependents(name, versions, deps_mode)\r\n   local dependents = {}\r\n   local blacklist = {}\r\n   blacklist[name] = {}\r\n   for version, _ in pairs(versions) do\r\n      blacklist[name][version] = true\r\n   end\r\n   local local_rocks = {}\r\n   local query_all = search.make_query(\"\")\r\n   query_all.exact_name = false\r\n   search.manifest_search(local_rocks, cfg.rocks_dir, query_all)\r\n   local_rocks[name] = nil\r\n   for rock_name, rock_versions in pairs(local_rocks) do\r\n      for rock_version, _ in pairs(rock_versions) do\r\n         local rockspec, err = fetch.load_rockspec(path.rockspec_file(rock_name, rock_version))\r\n         if rockspec then\r\n            local _, missing = deps.match_deps(rockspec, blacklist, deps_mode)\r\n            if missing[name] then\r\n               table.insert(dependents, { name = rock_name, version = rock_version })\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return dependents\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function remove_other_versions(name, version, force)\r\n   local results = {}\r\n   search.manifest_search(results, cfg.rocks_dir, { name = name, exact_name = true, constraints = {{ op = \"~=\", version = version}} })\r\n   if results[name] then\r\n      return remove_search_results(results, name, cfg.deps_mode, force)\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   \r\n   if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing, see help.\"\r\n   end\r\n   \r\n   local deps_mode = flags[\"deps-mode\"] or cfg.deps_mode\r\n   \r\n   local ok, err = fs.check_command_permissions(flags)\r\n   if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n   \r\n   local rock_type = name:match(\"%.(rock)$\") or name:match(\"%.(rockspec)$\")\r\n   local filename = name\r\n   if rock_type then\r\n      name, version = path.parse_name(filename)\r\n      if not name then return nil, \"Invalid \"..rock_type..\" filename: \"..filename end\r\n   end\r\n\r\n   local results = {}\r\n   search.manifest_search(results, cfg.rocks_dir, search.make_query(name, version))\r\n   if not results[name] then\r\n      return nil, \"Could not find rock '\"..name..(version and \" \"..version or \"\")..\"' in local tree.\"\r\n   end\r\n\r\n   return remove_search_results(results, name, deps_mode, flags[\"force\"])\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local function query_arch_as_table(query)\r\n   local format = type(query.arch)\r\n   if format == \"table\" then\r\n      return\r\n   elseif format == \"nil\" then\r\n      local accept = {}\r\n      accept[\"src\"] = true\r\n      accept[\"all\"] = true\r\n      accept[\"rockspec\"] = true\r\n      accept[\"installed\"] = true\r\n      accept[cfg.arch] = true\r\n      query.arch = accept\r\n   elseif format == \"string\" then\r\n      local accept = {}\r\n      for a in query.arch:gmatch(\"[%w_-]+\") do\r\n         accept[a] = true\r\n      end\r\n      query.arch = accept\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local format = type(query.arch)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if format == \"table\" then\r\n      return\r\n   elseif format == \"nil\" then\r\n      local accept = {}\r\n      accept[\"src\"] = true\r\n      accept[\"all\"] = true\r\n      accept[\"rockspec\"] = true\r\n      accept[\"installed\"] = true\r\n      accept[cfg.arch] = true\r\n      query.arch = accept\r\n   elseif format == \"string\" then\r\n      local accept = {}\r\n      for a in query.arch:gmatch(\"[%w_-]+\") do\r\n         accept[a] = true\r\n      end\r\n      query.arch = accept\r\n   end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local accept = {}",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "accept[\"src\"] = true",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "accept[\"all\"] = true",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "accept[\"rockspec\"] = true",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "accept[\"installed\"] = true",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "accept[cfg.arch] = true",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "query.arch = accept",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "for a in query.arch:gmatch(\"[%w_-]+\") do\r\n         accept[a] = true\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "accept[a] = true",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function store_result(results, name, version, arch, repo)\r\n   assert(type(results) == \"table\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   assert(type(arch) == \"string\")\r\n   assert(type(repo) == \"string\")\r\n   \r\n   if not results[name] then results[name] = {} end\r\n   if not results[name][version] then results[name][version] = {} end\r\n   table.insert(results[name][version], {\r\n      arch = arch,\r\n      repo = repo\r\n   })\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "assert(type(results) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert(type(name) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert(type(version) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert(type(arch) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert(type(repo) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if not results[name] then results[name] = {} end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "results[name] = {}",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if not results[name][version] then results[name][version] = {} end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "results[name][version] = {}",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "table.insert(results[name][version], {\r\n      arch = arch,\r\n      repo = repo\r\n   })",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "local function match_name(query, name)\r\n   assert(type(query) == \"table\")\r\n   assert(type(name) == \"string\")\r\n   if query.exact_name == false then\r\n      return name:find(query.name, 0, true) and true or false\r\n   else\r\n      return name == query.name\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "assert(type(query) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "if query.exact_name == false then\r\n      return name:find(query.name, 0, true) and true or false\r\n   else\r\n      return name == query.name\r\n   end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function store_if_match(results, repo, name, version, arch, query)\r\n   if match_name(query, name) then\r\n      if query.arch[arch] or query.arch[\"any\"] then\r\n         if deps.match_constraints(deps.parse_version(version), query.constraints) then\r\n            store_result(results, name, version, arch, repo)\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "if match_name(query, name) then\r\n      if query.arch[arch] or query.arch[\"any\"] then\r\n         if deps.match_constraints(deps.parse_version(version), query.constraints) then\r\n            store_result(results, name, version, arch, repo)\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if query.arch[arch] or query.arch[\"any\"] then\r\n         if deps.match_constraints(deps.parse_version(version), query.constraints) then\r\n            store_result(results, name, version, arch, repo)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "if deps.match_constraints(deps.parse_version(version), query.constraints) then\r\n            store_result(results, name, version, arch, repo)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "store_result(results, name, version, arch, repo)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function disk_search(repo, query, results)\r\n   assert(type(repo) == \"string\")\r\n   assert(type(query) == \"table\")\r\n   assert(type(results) == \"table\" or not results)\r\n   \r\n   local fs = require(\"luarocks.fs\")\r\n     \r\n   if not results then\r\n      results = {}\r\n   end\r\n   query_arch_as_table(query)\r\n   \r\n   for _, name in pairs(fs.list_dir(repo)) do\r\n      local pathname = dir.path(repo, name)\r\n      local rname, rversion, rarch = path.parse_name(name)\r\n\r\n      if rname and (pathname:match(\".rockspec$\") or pathname:match(\".rock$\")) then\r\n         store_if_match(results, repo, rname, rversion, rarch, query)\r\n      elseif fs.is_dir(pathname) then\r\n         for _, version in pairs(fs.list_dir(pathname)) do\r\n            if version:match(\"-%d+$\") then\r\n               store_if_match(results, repo, name, version, \"installed\", query)\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return results\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "assert(type(results) == \"table\" or not results)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "local fs = require(\"luarocks.fs\")",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if not results then\r\n      results = {}\r\n   end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "results = {}",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "query_arch_as_table(query)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "for _, name in pairs(fs.list_dir(repo)) do\r\n      local pathname = dir.path(repo, name)\r\n      local rname, rversion, rarch = path.parse_name(name)\r\n\r\n      if rname and (pathname:match(\".rockspec$\") or pathname:match(\".rock$\")) then\r\n         store_if_match(results, repo, rname, rversion, rarch, query)\r\n      elseif fs.is_dir(pathname) then\r\n         for _, version in pairs(fs.list_dir(pathname)) do\r\n            if version:match(\"-%d+$\") then\r\n               store_if_match(results, repo, name, version, \"installed\", query)\r\n            end\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 66,
    "text": "local pathname = dir.path(repo, name)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local rname, rversion, rarch = path.parse_name(name)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if rname and (pathname:match(\".rockspec$\") or pathname:match(\".rock$\")) then\r\n         store_if_match(results, repo, rname, rversion, rarch, query)\r\n      elseif fs.is_dir(pathname) then\r\n         for _, version in pairs(fs.list_dir(pathname)) do\r\n            if version:match(\"-%d+$\") then\r\n               store_if_match(results, repo, name, version, \"installed\", query)\r\n            end\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "store_if_match(results, repo, rname, rversion, rarch, query)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "for _, version in pairs(fs.list_dir(pathname)) do\r\n            if version:match(\"-%d+$\") then\r\n               store_if_match(results, repo, name, version, \"installed\", query)\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 71,
    "text": "if version:match(\"-%d+$\") then\r\n               store_if_match(results, repo, name, version, \"installed\", query)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "store_if_match(results, repo, name, version, \"installed\", query)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function manifest_search(results, repo, query)\r\n   assert(type(results) == \"table\")\r\n   assert(type(repo) == \"string\")\r\n   assert(type(query) == \"table\")\r\n   \r\n   query_arch_as_table(query)\r\n   local manifest, err = manif.load_manifest(repo)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest: \"..err\r\n   end\r\n   for name, versions in pairs(manifest.repository) do\r\n      for version, items in pairs(versions) do\r\n         for _, item in ipairs(items) do\r\n            store_if_match(results, repo, name, version, item.arch, query)\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local manifest, err = manif.load_manifest(repo)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if not manifest then\r\n      return nil, \"Failed loading manifest: \"..err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "for name, versions in pairs(manifest.repository) do\r\n      for version, items in pairs(versions) do\r\n         for _, item in ipairs(items) do\r\n            store_if_match(results, repo, name, version, item.arch, query)\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 78,
    "text": "for version, items in pairs(versions) do\r\n         for _, item in ipairs(items) do\r\n            store_if_match(results, repo, name, version, item.arch, query)\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 79,
    "text": "for _, item in ipairs(items) do\r\n            store_if_match(results, repo, name, version, item.arch, query)\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 80,
    "text": "store_if_match(results, repo, name, version, item.arch, query)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function search_repos(query)\r\n   assert(type(query) == \"table\")\r\n\r\n   local results = {}\r\n   for _, repo in ipairs(cfg.rocks_servers) do\r\n      if type(repo) == \"string\" then\r\n         repo = { repo }\r\n      end\r\n      for _, mirror in ipairs(repo) do\r\n         local protocol, pathname = dir.split_url(mirror)\r\n         if protocol == \"file\" then\r\n            mirror = pathname\r\n         end\r\n         local ok, err = manifest_search(results, mirror, query)\r\n         if ok then\r\n            break\r\n         else\r\n            util.warning(\"Failed searching manifest: \"..err)\r\n         end\r\n      end\r\n   end\r\n   -- search through rocks in cfg.rocks_provided\r\n   local provided_repo = \"provided by VM or rocks_provided\"\r\n   local name, versions\r\n   for name, versions in pairs(cfg.rocks_provided) do\r\n      store_if_match(results, provided_repo, name, versions, \"installed\", query)\r\n   end\r\n   return results\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "for _, repo in ipairs(cfg.rocks_servers) do\r\n      if type(repo) == \"string\" then\r\n         repo = { repo }\r\n      end\r\n      for _, mirror in ipairs(repo) do\r\n         local protocol, pathname = dir.split_url(mirror)\r\n         if protocol == \"file\" then\r\n            mirror = pathname\r\n         end\r\n         local ok, err = manifest_search(results, mirror, query)\r\n         if ok then\r\n            break\r\n         else\r\n            util.warning(\"Failed searching manifest: \"..err)\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 85,
    "text": "if type(repo) == \"string\" then\r\n         repo = { repo }\r\n      end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "repo = { repo }",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "for _, mirror in ipairs(repo) do\r\n         local protocol, pathname = dir.split_url(mirror)\r\n         if protocol == \"file\" then\r\n            mirror = pathname\r\n         end\r\n         local ok, err = manifest_search(results, mirror, query)\r\n         if ok then\r\n            break\r\n         else\r\n            util.warning(\"Failed searching manifest: \"..err)\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 88,
    "text": "local protocol, pathname = dir.split_url(mirror)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if protocol == \"file\" then\r\n            mirror = pathname\r\n         end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "mirror = pathname",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "local ok, err = manifest_search(results, mirror, query)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if ok then\r\n            break\r\n         else\r\n            util.warning(\"Failed searching manifest: \"..err)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "util.warning(\"Failed searching manifest: \"..err)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "local provided_repo = \"provided by VM or rocks_provided\"",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local name, versions",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "for name, versions in pairs(cfg.rocks_provided) do\r\n      store_if_match(results, provided_repo, name, versions, \"installed\", query)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "store_if_match(results, provided_repo, name, versions, \"installed\", query)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function make_query(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n   \r\n   local query = {\r\n      name = name,\r\n      constraints = {}\r\n   }\r\n   if version then\r\n      table.insert(query.constraints, { op = \"==\", version = deps.parse_version(version)})\r\n   end\r\n   return query\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "assert(type(version) == \"string\" or not version)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local query = {\r\n      name = name,\r\n      constraints = {}\r\n   }",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if version then\r\n      table.insert(query.constraints, { op = \"==\", version = deps.parse_version(version)})\r\n   end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "table.insert(query.constraints, { op = \"==\", version = deps.parse_version(version)})",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "local function pick_latest_version(name, versions)\r\n   assert(type(name) == \"string\")\r\n   assert(type(versions) == \"table\")\r\n\r\n   local vtables = {}\r\n   for v, _ in pairs(versions) do\r\n      table.insert(vtables, deps.parse_version(v))\r\n   end\r\n   table.sort(vtables)\r\n   local version = vtables[#vtables].string\r\n   local items = versions[version]\r\n   if items then\r\n      local pick = 1\r\n      for i, item in ipairs(items) do\r\n         if (item.arch == 'src' and items[pick].arch == 'rockspec')\r\n         or (item.arch ~= 'src' and item.arch ~= 'rockspec') then\r\n            pick = i\r\n         end\r\n      end\r\n      return path.make_url(items[pick].repo, name, version, items[pick].arch)\r\n   end\r\n   return nil\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "assert(type(versions) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "local vtables = {}",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "for v, _ in pairs(versions) do\r\n      table.insert(vtables, deps.parse_version(v))\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 109,
    "text": "table.insert(vtables, deps.parse_version(v))",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "table.sort(vtables)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "local version = vtables[#vtables].string",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "local items = versions[version]",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if items then\r\n      local pick = 1\r\n      for i, item in ipairs(items) do\r\n         if (item.arch == 'src' and items[pick].arch == 'rockspec')\r\n         or (item.arch ~= 'src' and item.arch ~= 'rockspec') then\r\n            pick = i\r\n         end\r\n      end\r\n      return path.make_url(items[pick].repo, name, version, items[pick].arch)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "local pick = 1",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "for i, item in ipairs(items) do\r\n         if (item.arch == 'src' and items[pick].arch == 'rockspec')\r\n         or (item.arch ~= 'src' and item.arch ~= 'rockspec') then\r\n            pick = i\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "if (item.arch == 'src' and items[pick].arch == 'rockspec')\r\n         or (item.arch ~= 'src' and item.arch ~= 'rockspec') then\r\n            pick = i\r\n         end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "pick = i",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function find_suitable_rock(query)\r\n   assert(type(query) == \"table\")\r\n   \r\n   local results = search_repos(query)\r\n   local first = next(results)\r\n   if not first then\r\n      return nil, \"No results matching query were found.\"\r\n   elseif not next(results, first) then\r\n      if cfg.rocks_provided[query.name] ~= nil then\r\n         -- do not install versions that listed in cfg.rocks_provided\r\n         return nil, \"Rock \"..query.name..\r\n                     \" \"..cfg.rocks_provided[query.name]..\r\n                     \" was found but it is provided by VM or 'rocks_provided' in the config file.\"\r\n      end\r\n      return pick_latest_version(query.name, results[first])\r\n   else\r\n      return results\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "local results = search_repos(query)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local first = next(results)",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if not first then\r\n      return nil, \"No results matching query were found.\"\r\n   elseif not next(results, first) then\r\n      if cfg.rocks_provided[query.name] ~= nil then\r\n         -- do not install versions that listed in cfg.rocks_provided\r\n         return nil, \"Rock \"..query.name..\r\n                     \" \"..cfg.rocks_provided[query.name]..\r\n                     \" was found but it is provided by VM or 'rocks_provided' in the config file.\"\r\n      end\r\n      return pick_latest_version(query.name, results[first])\r\n   else\r\n      return results\r\n   end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "if cfg.rocks_provided[query.name] ~= nil then\r\n         -- do not install versions that listed in cfg.rocks_provided\r\n         return nil, \"Rock \"..query.name..\r\n                     \" \"..cfg.rocks_provided[query.name]..\r\n                     \" was found but it is provided by VM or 'rocks_provided' in the config file.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function print_results(results, porcelain)\r\n   assert(type(results) == \"table\")\r\n   assert(type(porcelain) == \"boolean\" or not porcelain)\r\n   \r\n   for package, versions in util.sortedpairs(results) do\r\n      if not porcelain then\r\n         util.printout(package)\r\n      end\r\n      for version, repos in util.sortedpairs(versions, deps.compare_versions) do\r\n         for _, repo in ipairs(repos) do\r\n            repo.repo = dir.normalize(repo.repo)\r\n            if porcelain then\r\n               util.printout(package, version, repo.arch, repo.repo)\r\n            else\r\n               util.printout(\"   \"..version..\" (\"..repo.arch..\") - \"..repo.repo)\r\n            end\r\n         end\r\n      end\r\n      if not porcelain then\r\n         util.printout()\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "assert(type(porcelain) == \"boolean\" or not porcelain)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "for package, versions in util.sortedpairs(results) do\r\n      if not porcelain then\r\n         util.printout(package)\r\n      end\r\n      for version, repos in util.sortedpairs(versions, deps.compare_versions) do\r\n         for _, repo in ipairs(repos) do\r\n            repo.repo = dir.normalize(repo.repo)\r\n            if porcelain then\r\n               util.printout(package, version, repo.arch, repo.repo)\r\n            else\r\n               util.printout(\"   \"..version..\" (\"..repo.arch..\") - \"..repo.repo)\r\n            end\r\n         end\r\n      end\r\n      if not porcelain then\r\n         util.printout()\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 128,
    "text": "if not porcelain then\r\n         util.printout(package)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "util.printout(package)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "for version, repos in util.sortedpairs(versions, deps.compare_versions) do\r\n         for _, repo in ipairs(repos) do\r\n            repo.repo = dir.normalize(repo.repo)\r\n            if porcelain then\r\n               util.printout(package, version, repo.arch, repo.repo)\r\n            else\r\n               util.printout(\"   \"..version..\" (\"..repo.arch..\") - \"..repo.repo)\r\n            end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 131,
    "text": "for _, repo in ipairs(repos) do\r\n            repo.repo = dir.normalize(repo.repo)\r\n            if porcelain then\r\n               util.printout(package, version, repo.arch, repo.repo)\r\n            else\r\n               util.printout(\"   \"..version..\" (\"..repo.arch..\") - \"..repo.repo)\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 132,
    "text": "repo.repo = dir.normalize(repo.repo)",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "if porcelain then\r\n               util.printout(package, version, repo.arch, repo.repo)\r\n            else\r\n               util.printout(\"   \"..version..\" (\"..repo.arch..\") - \"..repo.repo)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "util.printout(package, version, repo.arch, repo.repo)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "util.printout(\"   \"..version..\" (\"..repo.arch..\") - \"..repo.repo)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "if not porcelain then\r\n         util.printout()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "util.printout()",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "local function split_source_and_binary_results(results)\r\n   local sources, binaries = {}, {}\r\n   for name, versions in pairs(results) do\r\n      for version, repositories in pairs(versions) do\r\n         for _, repo in ipairs(repositories) do\r\n            local where = sources\r\n            if repo.arch == \"all\" or repo.arch == cfg.arch then\r\n               where = binaries\r\n            end\r\n            store_result(where, name, version, repo.arch, repo.repo)\r\n         end\r\n      end\r\n   end\r\n   return sources, binaries\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "local sources, binaries = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "for name, versions in pairs(results) do\r\n      for version, repositories in pairs(versions) do\r\n         for _, repo in ipairs(repositories) do\r\n            local where = sources\r\n            if repo.arch == \"all\" or repo.arch == cfg.arch then\r\n               where = binaries\r\n            end\r\n            store_result(where, name, version, repo.arch, repo.repo)\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 142,
    "text": "for version, repositories in pairs(versions) do\r\n         for _, repo in ipairs(repositories) do\r\n            local where = sources\r\n            if repo.arch == \"all\" or repo.arch == cfg.arch then\r\n               where = binaries\r\n            end\r\n            store_result(where, name, version, repo.arch, repo.repo)\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 143,
    "text": "for _, repo in ipairs(repositories) do\r\n            local where = sources\r\n            if repo.arch == \"all\" or repo.arch == cfg.arch then\r\n               where = binaries\r\n            end\r\n            store_result(where, name, version, repo.arch, repo.repo)\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 144,
    "text": "local where = sources",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "if repo.arch == \"all\" or repo.arch == cfg.arch then\r\n               where = binaries\r\n            end",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "where = binaries",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "store_result(where, name, version, repo.arch, repo.repo)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function act_on_src_or_rockspec(action, name, version, ...)\r\n   assert(type(action) == \"function\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   local query = make_query(name, version)\r\n   query.arch = \"src|rockspec\"\r\n   local results, err = find_suitable_rock(query)\r\n   if type(results) == \"string\" then\r\n      return action(results, ...)\r\n   else\r\n      return nil, \"Could not find a result named \"..name..(version and \" \"..version or \"\")..\".\"\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "assert(type(action) == \"function\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "local query = make_query(name, version)",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "query.arch = \"src|rockspec\"",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "local results, err = find_suitable_rock(query)",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if type(results) == \"string\" then\r\n      return action(results, ...)\r\n   else\r\n      return nil, \"Could not find a result named \"..name..(version and \" \"..version or \"\")..\".\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   \r\n   if flags[\"all\"] then\r\n      name, version = \"\", nil\r\n   end\r\n\r\n   if type(name) ~= \"string\" and not flags[\"all\"] then\r\n      return nil, \"Enter name and version or use --all. \"..util.see_help(\"search\")\r\n   end\r\n   \r\n   local query = make_query(name:lower(), version)\r\n   query.exact_name = false\r\n   local results, err = search_repos(query)\r\n   local porcelain = flags[\"porcelain\"]\r\n   util.title(\"Search results:\", porcelain, \"=\")\r\n   local sources, binaries = split_source_and_binary_results(results)\r\n   if next(sources) and not flags[\"binary\"] then\r\n      util.title(\"Rockspecs and source rocks:\", porcelain)\r\n      print_results(sources, porcelain)\r\n   end\r\n   if next(binaries) and not flags[\"source\"] then    \r\n      util.title(\"Binary and pure-Lua rocks:\", porcelain)\r\n      print_results(binaries, porcelain)\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "local flags, name, version = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if flags[\"all\"] then\r\n      name, version = \"\", nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "name, version = \"\", nil",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "if type(name) ~= \"string\" and not flags[\"all\"] then\r\n      return nil, \"Enter name and version or use --all. \"..util.see_help(\"search\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "local query = make_query(name:lower(), version)",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "query.exact_name = false",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "local results, err = search_repos(query)",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "local porcelain = flags[\"porcelain\"]",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "util.title(\"Search results:\", porcelain, \"=\")",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "local sources, binaries = split_source_and_binary_results(results)",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "if next(sources) and not flags[\"binary\"] then\r\n      util.title(\"Rockspecs and source rocks:\", porcelain)\r\n      print_results(sources, porcelain)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "util.title(\"Rockspecs and source rocks:\", porcelain)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "print_results(sources, porcelain)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "if next(binaries) and not flags[\"source\"] then    \r\n      util.title(\"Binary and pure-Lua rocks:\", porcelain)\r\n      print_results(binaries, porcelain)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "util.title(\"Binary and pure-Lua rocks:\", porcelain)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "print_results(binaries, porcelain)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "",
    "type": "function container"
  }, {
    "id": 175,
    "text": "function pick_installed_rock(name, version, tree)\r\n   local results = {}\r\n   local query = search.make_query(name, version)\r\n   query.exact_name = true\r\n   local tree_map = {}\r\n   local trees = cfg.rocks_trees\r\n   if tree then\r\n      trees = { tree }\r\n   end\r\n   for _, tree in ipairs(trees) do\r\n      local rocks_dir = path.rocks_dir(tree)\r\n      tree_map[rocks_dir] = tree\r\n      search.manifest_search(results, rocks_dir, query)\r\n   end\r\n\r\n   if not next(results) then --\r\n      return nil,\"cannot find package \"..name..\" \"..(version or \"\")..\"\\nUse 'list' to find installed rocks.\"\r\n   end\r\n\r\n   version = nil\r\n   local repo_url\r\n   local package, versions = util.sortedpairs(results)()\r\n   --question: what do we do about multiple versions? This should\r\n   --give us the latest version on the last repo (which is usually the global one)\r\n   for vs, repositories in util.sortedpairs(versions, deps.compare_versions) do\r\n      if not version then version = vs end\r\n      for _, rp in ipairs(repositories) do repo_url = rp.repo end\r\n   end\r\n\r\n   local repo = tree_map[repo_url]\r\n   return name, version, repo, repo_url\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n\r\n   assert(type(version) == \"string\" or not version)\r\n   if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"unpack\")\r\n   end\r\n\r\n   if name:match(\".*%.rock\") or name:match(\".*%.rockspec\") then\r\n      return run_unpacker(name, flags[\"force\"])\r\n   else\r\n      local search = require(\"luarocks.search\")\r\n      return search.act_on_src_or_rockspec(run_unpacker, name, version)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "function sortedpairs(tbl, sort_function)\r\n   return coroutine.wrap(function() sortedpairs_iterator(tbl, sort_function) end)\r\nend",
    "type": "function"
  }, {
    "id": 179,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 180,
    "text": "function warning(msg)\r\n   printerr(\"Warning: \"..msg)\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "function title(msg, porcelain, underline)\r\n   if porcelain then return end\r\n   printout()\r\n   printout(msg)\r\n   printout((underline or \"-\"):rep(#msg))\r\n   printout()\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "function see_help(command, program)\r\n   return \"See '\"..this_program(program or \"luarocks\")..' help '..command..\"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 184,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 185,
    "text": "module",
    "type": "global function"
  }, {
    "id": 186,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 187,
    "text": "action",
    "type": "global function"
  }, {
    "id": 188,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 189,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 190,
    "text": "type",
    "type": "global function"
  }, {
    "id": 191,
    "text": "next",
    "type": "global function"
  }, {
    "id": 192,
    "text": "require",
    "type": "global function"
  }, {
    "id": 193,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 194,
    "text": "util)",
    "type": "module"
  }, {
    "id": 195,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 196,
    "text": "manif)",
    "type": "module"
  }, {
    "id": 197,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 198,
    "text": "path)",
    "type": "module"
  }, {
    "id": 199,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 200,
    "text": "",
    "type": "variable container"
  }, {
    "id": 201,
    "text": "",
    "type": "require container"
  }, {
    "id": 202,
    "text": "",
    "type": "global variable"
  }, {
    "id": 203,
    "text": "",
    "type": "global variable"
  }, {
    "id": 204,
    "text": "",
    "type": "global variable"
  }, {
    "id": 205,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "require local variable"
  } ]
}