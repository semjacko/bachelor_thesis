{
  "_filename": "show.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/show.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "calls",
    "to": 40
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 16
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 16
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 40,
    "label": "has",
    "to": 52
  }, {
    "from": 40,
    "label": "has",
    "to": 16
  }, {
    "from": 40,
    "label": "has",
    "to": 53
  }, {
    "from": 40,
    "label": "has",
    "to": 54
  }, {
    "from": 40,
    "label": "has",
    "to": 55
  }, {
    "from": 40,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 40,
    "label": "has",
    "to": 61
  }, {
    "from": 40,
    "label": "has",
    "to": 16
  }, {
    "from": 40,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 16
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 16
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 63,
    "label": "has",
    "to": 71
  }, {
    "from": 63,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 16
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 63,
    "label": "has",
    "to": 74
  }, {
    "from": 63,
    "label": "has",
    "to": 75
  }, {
    "from": 63,
    "label": "has",
    "to": 16
  }, {
    "from": 63,
    "label": "has",
    "to": 76
  }, {
    "from": 63,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 77,
    "label": "has",
    "to": 84
  }, {
    "from": 77,
    "label": "has",
    "to": 85
  }, {
    "from": 77,
    "label": "has",
    "to": 86
  }, {
    "from": 77,
    "label": "has",
    "to": 85
  }, {
    "from": 77,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 85
  }, {
    "from": 77,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 77,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 77,
    "label": "has",
    "to": 93
  }, {
    "from": 77,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 85
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 77,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 85
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 77,
    "label": "has",
    "to": 85
  }, {
    "from": 63,
    "label": "has",
    "to": 16
  }, {
    "from": 63,
    "label": "has",
    "to": 101
  }, {
    "from": 34,
    "label": "calls",
    "to": 8
  }, {
    "from": 15,
    "label": "calls",
    "to": 113
  }, {
    "from": 28,
    "label": "calls",
    "to": 113
  }, {
    "from": 63,
    "label": "calls",
    "to": 10
  }, {
    "from": 15,
    "label": "calls",
    "to": 104
  }, {
    "from": 18,
    "label": "calls",
    "to": 109
  }, {
    "from": 34,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 110
  }, {
    "from": 28,
    "label": "calls",
    "to": 108
  }, {
    "from": 63,
    "label": "calls",
    "to": 4
  }, {
    "from": 18,
    "label": "calls",
    "to": 18
  }, {
    "from": 28,
    "label": "calls",
    "to": 18
  }, {
    "from": 63,
    "label": "calls",
    "to": 28
  }, {
    "from": 102,
    "label": "calls",
    "to": 112
  }, {
    "from": 63,
    "label": "calls",
    "to": 15
  }, {
    "from": 63,
    "label": "calls",
    "to": 15
  }, {
    "from": 63,
    "label": "calls",
    "to": 15
  }, {
    "from": 63,
    "label": "calls",
    "to": 107
  }, {
    "from": 63,
    "label": "calls",
    "to": 40
  }, {
    "from": 28,
    "label": "calls",
    "to": 111
  }, {
    "from": 40,
    "label": "calls",
    "to": 111
  }, {
    "from": 40,
    "label": "calls",
    "to": 111
  }, {
    "from": 63,
    "label": "calls",
    "to": 5
  }, {
    "from": 40,
    "label": "calls",
    "to": 14
  }, {
    "from": 40,
    "label": "calls",
    "to": 114
  }, {
    "from": 63,
    "label": "calls",
    "to": 114
  }, {
    "from": 63,
    "label": "calls",
    "to": 114
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 63,
    "label": "calls",
    "to": 106
  }, {
    "from": 40,
    "label": "calls",
    "to": 105
  }, {
    "from": 40,
    "label": "calls",
    "to": 105
  }, {
    "from": 63,
    "label": "calls",
    "to": 105
  }, {
    "from": 63,
    "label": "calls",
    "to": 103
  }, {
    "from": 63,
    "label": "calls",
    "to": 11
  }, {
    "from": 40,
    "label": "calls",
    "to": 6
  }, {
    "from": 40,
    "label": "calls",
    "to": 13
  }, {
    "from": 63,
    "label": "calls",
    "to": 7
  }, {
    "from": 63,
    "label": "calls",
    "to": 7
  }, {
    "from": 102,
    "label": "calls",
    "to": 115
  }, {
    "from": 102,
    "label": "calls",
    "to": 115
  }, {
    "from": 102,
    "label": "calls",
    "to": 115
  }, {
    "from": 102,
    "label": "calls",
    "to": 115
  }, {
    "from": 102,
    "label": "calls",
    "to": 115
  }, {
    "from": 102,
    "label": "calls",
    "to": 115
  }, {
    "from": 102,
    "label": "calls",
    "to": 115
  }, {
    "from": 102,
    "label": "calls",
    "to": 115
  }, {
    "from": 63,
    "label": "calls",
    "to": 12
  }, {
    "from": 34,
    "label": "calls",
    "to": 9
  }, {
    "from": 1,
    "label": "contains",
    "to": 102
  }, {
    "from": 102,
    "label": "declares",
    "to": 15
  }, {
    "from": 102,
    "label": "declares",
    "to": 18
  }, {
    "from": 102,
    "label": "declares",
    "to": 28
  }, {
    "from": 102,
    "label": "declares",
    "to": 34
  }, {
    "from": 102,
    "label": "declares",
    "to": 40
  }, {
    "from": 102,
    "label": "declares",
    "to": 63
  }, {
    "from": 1,
    "label": "contains",
    "to": 124
  }, {
    "from": 1,
    "label": "contains",
    "to": 125
  }, {
    "from": 124,
    "label": "initializes",
    "to": 126
  }, {
    "from": 124,
    "label": "initializes",
    "to": 127
  }, {
    "from": 125,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "requires",
    "to": 123
  }, {
    "from": 125,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "requires",
    "to": 116
  }, {
    "from": 125,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "requires",
    "to": 117
  }, {
    "from": 125,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "requires",
    "to": 121
  }, {
    "from": 125,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "requires",
    "to": 119
  }, {
    "from": 125,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "requires",
    "to": 122
  }, {
    "from": 125,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "requires",
    "to": 118
  }, {
    "from": 125,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "requires",
    "to": 120
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "show",
    "type": "module"
  }, {
    "id": 2,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if not name then\r\n      return nil, \"Argument missing. \"..util.see_help(\"doc\")\r\n   end\r\n\r\n   local repo\r\n   name, version, repo = show.pick_installed_rock(name, version, flags[\"tree\"])\r\n   if not name then\r\n      return nil, version\r\n   end\r\n   \r\n   local rockspec, err = fetch.load_local_rockspec(path.rockspec_file(name, version, repo))\r\n   if not rockspec then return nil,err end\r\n   local descript = rockspec.description or {}\r\n\r\n   if flags[\"homepage\"] then\r\n      if not descript.homepage then\r\n         return nil, \"No 'homepage' field in rockspec for \"..name..\" \"..version\r\n      end\r\n      util.printout(\"Opening \"..descript.homepage..\" ...\")\r\n      fs.browser(descript.homepage)\r\n      return true\r\n   end\r\n\r\n   local directory = path.install_dir(name,version,repo)\r\n   \r\n   local docdir\r\n   local directories = { \"doc\", \"docs\" }\r\n   for _, d in ipairs(directories) do\r\n      local dirname = dir.path(directory, d)\r\n      if fs.is_dir(dirname) then\r\n         docdir = dirname\r\n         break\r\n      end\r\n   end\r\n   if not docdir then\r\n      if descript.homepage and not flags[\"list\"] then\r\n         util.printout(\"Local documentation directory not found -- opening \"..descript.homepage..\" ...\")\r\n         fs.browser(descript.homepage)\r\n         return true\r\n      end\r\n      return nil, \"Documentation directory not found for \"..name..\" \"..version\r\n   end\r\n\r\n   docdir = dir.normalize(docdir):gsub(\"/+\", \"/\")\r\n   local files = fs.find(docdir)\r\n   local htmlpatt = \"%.html?$\"\r\n   local extensions = { htmlpatt, \"%.md$\", \"%.txt$\",  \"%.textile$\", \"\" }\r\n   local basenames = { \"index\", \"readme\", \"manual\" }\r\n   \r\n   local porcelain = flags[\"porcelain\"]\r\n   if #files > 0 then\r\n      util.title(\"Documentation files for \"..name..\" \"..version, porcelain)\r\n      if porcelain then\r\n         for _, file in ipairs(files) do\r\n            util.printout(docdir..\"/\"..file)\r\n         end\r\n      else\r\n         util.printout(docdir..\"/\")\r\n         for _, file in ipairs(files) do\r\n            util.printout(\"\\t\"..file)\r\n         end\r\n      end\r\n   end\r\n   \r\n   if flags[\"list\"] then\r\n      return true\r\n   end\r\n   \r\n   for _, extension in ipairs(extensions) do\r\n      for _, basename in ipairs(basenames) do\r\n         local filename = basename..extension\r\n         local found\r\n         for _, file in ipairs(files) do\r\n            if file:lower():match(filename) and ((not found) or #file < #found) then\r\n               found = file\r\n            end\r\n         end\r\n         if found then\r\n            local pathname = dir.path(docdir, found)\r\n            util.printout()\r\n            util.printout(\"Opening \"..pathname..\" ...\")\r\n            util.printout()\r\n            local ok = fs.browser(pathname)\r\n            if not ok and not pathname:match(htmlpatt) then\r\n               local fd = io.open(pathname, \"r\")\r\n               util.printout(fd:read(\"*a\"))\r\n               fd:close()\r\n            end\r\n            return true\r\n         end\r\n      end\r\n   end\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function load_local_rockspec(filename, quick)\r\n   assert(type(filename) == \"string\")\r\n   filename = fs.absolute_name(filename)\r\n   local rockspec, err = persist.load_into_table(filename)\r\n   if not rockspec then\r\n      return nil, \"Could not load rockspec file \"..filename..\" (\"..err..\")\"\r\n   end\r\n\r\n   local ok, err = true, nil\r\n   if not quick then\r\n      ok, err = type_check.type_check_rockspec(rockspec)\r\n      if not ok then\r\n         return nil, filename..\": \"..err\r\n      end\r\n   end\r\n   \r\n   if rockspec.rockspec_format then\r\n      if deps.compare_versions(rockspec.rockspec_format, type_check.rockspec_format) then\r\n         return nil, \"Rockspec format \"..rockspec.rockspec_format..\" is not supported, please upgrade LuaRocks.\"\r\n      end\r\n   end\r\n\r\n   util.platform_overrides(rockspec.build)\r\n   util.platform_overrides(rockspec.dependencies)\r\n   util.platform_overrides(rockspec.external_dependencies)\r\n   util.platform_overrides(rockspec.source)\r\n   util.platform_overrides(rockspec.hooks)\r\n\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      rockspec.name = rockspec.package:lower()\r\n   else\r\n      rockspec.name = basename:match(\"(.*)-[^-]*-[0-9]*\")\r\n      if not rockspec.name then\r\n         return nil, \"Expected filename in format 'name-version-revision.rockspec'.\"\r\n      end\r\n   end\r\n\r\n   local protocol, pathname = dir.split_url(rockspec.source.url)\r\n   if is_basic_protocol(protocol) then\r\n      rockspec.source.file = rockspec.source.file or dir.base_name(rockspec.source.url)\r\n   end\r\n   rockspec.source.protocol, rockspec.source.pathname = protocol, pathname\r\n\r\n   -- Temporary compatibility\r\n   if rockspec.source.cvs_module then rockspec.source.module = rockspec.source.cvs_module end\r\n   if rockspec.source.cvs_tag then rockspec.source.tag = rockspec.source.cvs_tag end\r\n\r\n   local name_version = rockspec.package:lower() .. \"-\" .. rockspec.version\r\n   if basename ~= \"rockspec\" and basename ~= name_version .. \".rockspec\" then\r\n      return nil, \"Inconsistency between rockspec filename (\"..basename..\") and its contents (\"..name_version..\".rockspec).\"\r\n   end\r\n\r\n   rockspec.local_filename = filename\r\n   local filebase = rockspec.source.file or rockspec.source.url\r\n   local base = url_to_base_dir(filebase)\r\n   rockspec.source.dir = rockspec.source.dir\r\n                      or rockspec.source.module\r\n                      or ((filebase:match(\".lua$\") or filebase:match(\".c$\")) and \".\")\r\n                      or base\r\n   if rockspec.dependencies then\r\n      for i = 1, #rockspec.dependencies do\r\n         local parsed, err = deps.parse_dep(rockspec.dependencies[i])\r\n         if not parsed then\r\n            return nil, \"Parse error processing dependency '\"..rockspec.dependencies[i]..\"': \"..tostring(err)\r\n         end\r\n         rockspec.dependencies[i] = parsed\r\n      end\r\n   else\r\n      rockspec.dependencies = {}\r\n   end\r\n   if not quick then\r\n      path.configure_paths(rockspec)\r\n   end\r\n\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function load_manifest(repo_url)\r\n   assert(type(repo_url) == \"string\")\r\n\r\n   if manif_core.manifest_cache[repo_url] then\r\n      return manif_core.manifest_cache[repo_url]\r\n   end\r\n   \r\n   local filenames = {\r\n      \"manifest-\"..cfg.lua_version..\".zip\",\r\n      \"manifest-\"..cfg.lua_version,\r\n      \"manifest\",\r\n   }\r\n\r\n   local protocol, repodir = dir.split_url(repo_url)\r\n   local pathname\r\n   if protocol == \"file\" then\r\n      for _, filename in ipairs(filenames) do\r\n         pathname = dir.path(repodir, filename)\r\n         if fs.exists(pathname) then\r\n            break\r\n         end\r\n      end\r\n   else\r\n      local err\r\n      for _, filename in ipairs(filenames) do\r\n         pathname, err = fetch_manifest_from(repo_url, filename)\r\n         if pathname then\r\n            break\r\n         end\r\n      end\r\n      if not pathname then \r\n         return nil, err\r\n      end\r\n   end\r\n   if pathname:match(\".*%.zip$\") then\r\n      pathname = fs.absolute_name(pathname)\r\n      local dir = dir.dir_name(pathname)\r\n      fs.change_dir(dir)\r\n      local nozip = pathname:match(\"(.*)%.zip$\")\r\n      fs.delete(nozip)\r\n      local ok = fs.unzip(pathname)\r\n      fs.pop_dir()\r\n      if not ok then\r\n         fs.delete(pathname)\r\n         fs.delete(pathname..\".timestamp\")\r\n         return nil, \"Failed extracting manifest file\"\r\n      end\r\n      pathname = nozip\r\n   end\r\n   return manif_core.manifest_loader(pathname, repo_url)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function rocks_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.rocks_subdir)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.rocks_dir or dir.path(tree.root, cfg.rocks_subdir)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function rocks_tree_to_string(tree)\r\n   if type(tree) == \"string\" then\r\n      return tree\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.root\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function deploy_lua_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.lua_modules_path)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.lua_dir or dir.path(tree.root, cfg.lua_modules_path)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function deploy_lib_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.lib_modules_path)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.lib_dir or dir.path(tree.root, cfg.lib_modules_path)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function install_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function rockspec_file(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, name..\"-\"..version..\".rockspec\")\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function which(module_name, filename, name, version, tree, manifest)\r\n   local versions = manifest.modules[module_name]\r\n   assert(versions)\r\n   for i, name_version in ipairs(versions) do\r\n      if name_version == name..\"/\"..version then\r\n         return which_i(filename, name, version, tree, i):gsub(\"//\", \"/\")\r\n      end\r\n   end\r\n   assert(false)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function manifest_search(results, repo, query)\r\n   assert(type(results) == \"table\")\r\n   assert(type(repo) == \"string\")\r\n   assert(type(query) == \"table\")\r\n   \r\n   query_arch_as_table(query)\r\n   local manifest, err = manif.load_manifest(repo)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest: \"..err\r\n   end\r\n   for name, versions in pairs(manifest.repository) do\r\n      for version, items in pairs(versions) do\r\n         for _, item in ipairs(items) do\r\n            store_if_match(results, repo, name, version, item.arch, query)\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function make_query(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n   \r\n   local query = {\r\n      name = name,\r\n      constraints = {}\r\n   }\r\n   if version then\r\n      table.insert(query.constraints, { op = \"==\", version = deps.parse_version(version)})\r\n   end\r\n   return query\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local function keys_as_string(t, sep)\r\n    return table.concat(util.keys(t), sep or \" \")\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function word_wrap(line) \r\n   local width = tonumber(os.getenv(\"COLUMNS\")) or 80\r\n   if width > 80 then width = 80 end\r\n   if #line > width then\r\n      local brk = width\r\n      while brk > 0 and line:sub(brk, brk) ~= \" \" do\r\n         brk = brk - 1\r\n      end\r\n      if brk > 0 then\r\n         return line:sub(1, brk-1) .. \"\\n\" .. word_wrap(line:sub(brk+1))\r\n      end\r\n   end\r\n   return line\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local width = tonumber(os.getenv(\"COLUMNS\")) or 80",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if width > 80 then width = 80 end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "width = 80",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if #line > width then\r\n      local brk = width\r\n      while brk > 0 and line:sub(brk, brk) ~= \" \" do\r\n         brk = brk - 1\r\n      end\r\n      if brk > 0 then\r\n         return line:sub(1, brk-1) .. \"\\n\" .. word_wrap(line:sub(brk+1))\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local brk = width",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "while brk > 0 and line:sub(brk, brk) ~= \" \" do\r\n         brk = brk - 1\r\n      end",
    "type": "statement:while"
  }, {
    "id": 25,
    "text": "brk = brk - 1",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if brk > 0 then\r\n         return line:sub(1, brk-1) .. \"\\n\" .. word_wrap(line:sub(brk+1))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function format_text(text)\r\n   text = text:gsub(\"^%s*\",\"\"):gsub(\"%s$\", \"\"):gsub(\"\\n[ \\t]+\",\"\\n\"):gsub(\"([^\\n])\\n([^\\n])\",\"%1 %2\")\r\n   local paragraphs = util.split_string(text, \"\\n\\n\")\r\n   for n, line in ipairs(paragraphs) do\r\n      paragraphs[n] = word_wrap(line)\r\n   end\r\n   return (table.concat(paragraphs, \"\\n\\n\"):gsub(\"%s$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "text = text:gsub(\"^%s*\",\"\"):gsub(\"%s$\", \"\"):gsub(\"\\n[ \\t]+\",\"\\n\"):gsub(\"([^\\n])\\n([^\\n])\",\"%1 %2\")",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local paragraphs = util.split_string(text, \"\\n\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for n, line in ipairs(paragraphs) do\r\n      paragraphs[n] = word_wrap(line)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "paragraphs[n] = word_wrap(line)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function module_name(mod, filename, name, version, repo, manifest)\r\n   local base_dir\r\n   if filename:match(\"%.lua$\") then\r\n      base_dir = path.deploy_lua_dir(repo)\r\n   else\r\n      base_dir = path.deploy_lib_dir(repo)\r\n   end\r\n   \r\n   return dir.path(base_dir, filename)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "local base_dir",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if filename:match(\"%.lua$\") then\r\n      base_dir = path.deploy_lua_dir(repo)\r\n   else\r\n      base_dir = path.deploy_lib_dir(repo)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "base_dir = path.deploy_lua_dir(repo)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "base_dir = path.deploy_lib_dir(repo)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function pick_installed_rock(name, version, tree)\r\n   local results = {}\r\n   local query = search.make_query(name, version)\r\n   query.exact_name = true\r\n   local tree_map = {}\r\n   local trees = cfg.rocks_trees\r\n   if tree then\r\n      trees = { tree }\r\n   end\r\n   for _, tree in ipairs(trees) do\r\n      local rocks_dir = path.rocks_dir(tree)\r\n      tree_map[rocks_dir] = tree\r\n      search.manifest_search(results, rocks_dir, query)\r\n   end\r\n\r\n   if not next(results) then --\r\n      return nil,\"cannot find package \"..name..\" \"..(version or \"\")..\"\\nUse 'list' to find installed rocks.\"\r\n   end\r\n\r\n   version = nil\r\n   local repo_url\r\n   local package, versions = util.sortedpairs(results)()\r\n   --question: what do we do about multiple versions? This should\r\n   --give us the latest version on the last repo (which is usually the global one)\r\n   for vs, repositories in util.sortedpairs(versions, deps.compare_versions) do\r\n      if not version then version = vs end\r\n      for _, rp in ipairs(repositories) do repo_url = rp.repo end\r\n   end\r\n\r\n   local repo = tree_map[repo_url]\r\n   return name, version, repo, repo_url\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local query = search.make_query(name, version)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "query.exact_name = true",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "local tree_map = {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local trees = cfg.rocks_trees",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if tree then\r\n      trees = { tree }\r\n   end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "trees = { tree }",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "for _, tree in ipairs(trees) do\r\n      local rocks_dir = path.rocks_dir(tree)\r\n      tree_map[rocks_dir] = tree\r\n      search.manifest_search(results, rocks_dir, query)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "local rocks_dir = path.rocks_dir(tree)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "tree_map[rocks_dir] = tree",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "search.manifest_search(results, rocks_dir, query)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "if not next(results) then --\r\n      return nil,\"cannot find package \"..name..\" \"..(version or \"\")..\"\\nUse 'list' to find installed rocks.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "version = nil",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "local repo_url",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local package, versions = util.sortedpairs(results)()",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for vs, repositories in util.sortedpairs(versions, deps.compare_versions) do\r\n      if not version then version = vs end\r\n      for _, rp in ipairs(repositories) do repo_url = rp.repo end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "if not version then version = vs end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "version = vs",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "for _, rp in ipairs(repositories) do repo_url = rp.repo end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "repo_url = rp.repo",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "local repo = tree_map[repo_url]",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if not name then\r\n      return nil, \"Argument missing. \"..util.see_help(\"show\")\r\n   end\r\n   \r\n   local repo, repo_url\r\n   name, version, repo, repo_url = pick_installed_rock(name, version, flags[\"tree\"])\r\n   if not name then\r\n      return nil, version\r\n   end\r\n\r\n   local directory = path.install_dir(name,version,repo)\r\n   local rockspec_file = path.rockspec_file(name, version, repo)\r\n   local rockspec, err = fetch.load_local_rockspec(rockspec_file)\r\n   if not rockspec then return nil,err end\r\n\r\n   local descript = rockspec.description or {}\r\n   local manifest, err = manif.load_manifest(repo_url)\r\n   if not manifest then return nil,err end\r\n   local minfo = manifest.repository[name][version][1]\r\n\r\n   if flags[\"rock-tree\"] then util.printout(path.rocks_tree_to_string(repo))\r\n   elseif flags[\"rock-dir\"] then util.printout(directory)\r\n   elseif flags[\"home\"] then util.printout(descript.homepage)\r\n   elseif flags[\"modules\"] then util.printout(keys_as_string(minfo.modules))\r\n   elseif flags[\"deps\"] then util.printout(keys_as_string(minfo.dependencies))\r\n   elseif flags[\"rockspec\"] then util.printout(rockspec_file)\r\n   elseif flags[\"mversion\"] then util.printout(version)\r\n   else\r\n      util.printout()\r\n      util.printout(rockspec.package..\" \"..rockspec.version..\" - \"..(descript.summary or \"\"))\r\n      util.printout()\r\n      if descript.detailed then\r\n         util.printout(format_text(descript.detailed))\r\n         util.printout()\r\n      end\r\n      if descript.license then\r\n         util.printout(\"License: \", descript.license)\r\n      end\r\n      if descript.homepage then\r\n         util.printout(\"Homepage: \", descript.homepage)\r\n      end\r\n      util.printout(\"Installed in: \", path.rocks_tree_to_string(repo))\r\n      if next(minfo.modules) then\r\n         util.printout()\r\n         util.printout(\"Modules:\")\r\n         for mod, filename in util.sortedpairs(minfo.modules) do\r\n            util.printout(\"\\t\"..mod..\" (\"..path.which(mod, filename, name, version, repo, manifest)..\")\")\r\n         end\r\n      end\r\n      if next(minfo.dependencies) then\r\n         util.printout()\r\n         util.printout(\"Depends on:\")\r\n         util.printout(\"\\t\"..keys_as_string(minfo.dependencies, \"\\n\\t\"))\r\n      end\r\n      util.printout()\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local flags, name, version = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if not name then\r\n      return nil, \"Argument missing. \"..util.see_help(\"show\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local repo, repo_url",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "name, version, repo, repo_url = pick_installed_rock(name, version, flags[\"tree\"])",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if not name then\r\n      return nil, version\r\n   end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local directory = path.install_dir(name,version,repo)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local rockspec_file = path.rockspec_file(name, version, repo)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local rockspec, err = fetch.load_local_rockspec(rockspec_file)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if not rockspec then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "local descript = rockspec.description or {}",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local manifest, err = manif.load_manifest(repo_url)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if not manifest then return nil,err end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "local minfo = manifest.repository[name][version][1]",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if flags[\"rock-tree\"] then util.printout(path.rocks_tree_to_string(repo))\r\n   elseif flags[\"rock-dir\"] then util.printout(directory)\r\n   elseif flags[\"home\"] then util.printout(descript.homepage)\r\n   elseif flags[\"modules\"] then util.printout(keys_as_string(minfo.modules))\r\n   elseif flags[\"deps\"] then util.printout(keys_as_string(minfo.dependencies))\r\n   elseif flags[\"rockspec\"] then util.printout(rockspec_file)\r\n   elseif flags[\"mversion\"] then util.printout(version)\r\n   else\r\n      util.printout()\r\n      util.printout(rockspec.package..\" \"..rockspec.version..\" - \"..(descript.summary or \"\"))\r\n      util.printout()\r\n      if descript.detailed then\r\n         util.printout(format_text(descript.detailed))\r\n         util.printout()\r\n      end\r\n      if descript.license then\r\n         util.printout(\"License: \", descript.license)\r\n      end\r\n      if descript.homepage then\r\n         util.printout(\"Homepage: \", descript.homepage)\r\n      end\r\n      util.printout(\"Installed in: \", path.rocks_tree_to_string(repo))\r\n      if next(minfo.modules) then\r\n         util.printout()\r\n         util.printout(\"Modules:\")\r\n         for mod, filename in util.sortedpairs(minfo.modules) do\r\n            util.printout(\"\\t\"..mod..\" (\"..path.which(mod, filename, name, version, repo, manifest)..\")\")\r\n         end\r\n      end\r\n      if next(minfo.dependencies) then\r\n         util.printout()\r\n         util.printout(\"Depends on:\")\r\n         util.printout(\"\\t\"..keys_as_string(minfo.dependencies, \"\\n\\t\"))\r\n      end\r\n      util.printout()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "util.printout(path.rocks_tree_to_string(repo))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "util.printout(directory)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "util.printout(descript.homepage)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "util.printout(keys_as_string(minfo.modules))",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "util.printout(keys_as_string(minfo.dependencies))",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "util.printout(rockspec_file)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "util.printout(version)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "util.printout()",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "util.printout(rockspec.package..\" \"..rockspec.version..\" - \"..(descript.summary or \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "if descript.detailed then\r\n         util.printout(format_text(descript.detailed))\r\n         util.printout()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "util.printout(format_text(descript.detailed))",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "if descript.license then\r\n         util.printout(\"License: \", descript.license)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "util.printout(\"License: \", descript.license)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "if descript.homepage then\r\n         util.printout(\"Homepage: \", descript.homepage)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "util.printout(\"Homepage: \", descript.homepage)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "util.printout(\"Installed in: \", path.rocks_tree_to_string(repo))",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "if next(minfo.modules) then\r\n         util.printout()\r\n         util.printout(\"Modules:\")\r\n         for mod, filename in util.sortedpairs(minfo.modules) do\r\n            util.printout(\"\\t\"..mod..\" (\"..path.which(mod, filename, name, version, repo, manifest)..\")\")\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "util.printout(\"Modules:\")",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "for mod, filename in util.sortedpairs(minfo.modules) do\r\n            util.printout(\"\\t\"..mod..\" (\"..path.which(mod, filename, name, version, repo, manifest)..\")\")\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "util.printout(\"\\t\"..mod..\" (\"..path.which(mod, filename, name, version, repo, manifest)..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if next(minfo.dependencies) then\r\n         util.printout()\r\n         util.printout(\"Depends on:\")\r\n         util.printout(\"\\t\"..keys_as_string(minfo.dependencies, \"\\n\\t\"))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "util.printout(\"Depends on:\")",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "util.printout(\"\\t\"..keys_as_string(minfo.dependencies, \"\\n\\t\"))",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "",
    "type": "function container"
  }, {
    "id": 103,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "function keys(tbl)\r\n   local ks = {}\r\n   for k,_ in pairs(tbl) do\r\n      table.insert(ks, k)\r\n   end\r\n   return ks\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "function sortedpairs(tbl, sort_function)\r\n   return coroutine.wrap(function() sortedpairs_iterator(tbl, sort_function) end)\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "function see_help(command, program)\r\n   return \"See '\"..this_program(program or \"luarocks\")..' help '..command..\"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "function split_string(str, delim, maxNb)\r\n   -- Eliminate bad cases...\r\n   if string.find(str, delim) == nil then\r\n      return { str }\r\n   end\r\n   if maxNb == nil or maxNb < 1 then\r\n      maxNb = 0    -- No limit\r\n   end\r\n   local result = {}\r\n   local pat = \"(.-)\" .. delim .. \"()\"\r\n   local nb = 0\r\n   local lastPos\r\n   for part, pos in string.gmatch(str, pat) do\r\n      nb = nb + 1\r\n      result[nb] = part\r\n      lastPos = pos\r\n      if nb == maxNb then break end\r\n   end\r\n   -- Handle the last field\r\n   if nb ~= maxNb then\r\n      result[nb + 1] = string.sub(str, lastPos)\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 110,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 111,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 112,
    "text": "module",
    "type": "global function"
  }, {
    "id": 113,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 114,
    "text": "next",
    "type": "global function"
  }, {
    "id": 115,
    "text": "require",
    "type": "global function"
  }, {
    "id": 116,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 117,
    "text": "util)",
    "type": "module"
  }, {
    "id": 118,
    "text": "fetch)",
    "type": "module"
  }, {
    "id": 119,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 120,
    "text": "manif)",
    "type": "module"
  }, {
    "id": 121,
    "text": "path)",
    "type": "module"
  }, {
    "id": 122,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 123,
    "text": "search)",
    "type": "module"
  }, {
    "id": 124,
    "text": "",
    "type": "variable container"
  }, {
    "id": 125,
    "text": "",
    "type": "require container"
  }, {
    "id": 126,
    "text": "",
    "type": "global variable"
  }, {
    "id": 127,
    "text": "",
    "type": "global variable"
  }, {
    "id": 128,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  } ]
}