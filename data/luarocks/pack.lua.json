{
  "_filename": "pack.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/pack.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 85
  }, {
    "from": 17,
    "label": "calls",
    "to": 85
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 19,
    "label": "has",
    "to": 28
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 29
  }, {
    "from": 19,
    "label": "has",
    "to": 30
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 31
  }, {
    "from": 19,
    "label": "has",
    "to": 32
  }, {
    "from": 19,
    "label": "has",
    "to": 33
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 34
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 30
  }, {
    "from": 36,
    "label": "has",
    "to": 23
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 30
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 36,
    "label": "has",
    "to": 23
  }, {
    "from": 36,
    "label": "has",
    "to": 23
  }, {
    "from": 36,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 61
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 62
  }, {
    "from": 48,
    "label": "has",
    "to": 63
  }, {
    "from": 48,
    "label": "has",
    "to": 64
  }, {
    "from": 48,
    "label": "has",
    "to": 65
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 66
  }, {
    "from": 48,
    "label": "has",
    "to": 67
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 68
  }, {
    "from": 48,
    "label": "has",
    "to": 69
  }, {
    "from": 48,
    "label": "has",
    "to": 70
  }, {
    "from": 48,
    "label": "has",
    "to": 71
  }, {
    "from": 48,
    "label": "has",
    "to": 72
  }, {
    "from": 48,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 75
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 79
  }, {
    "from": 48,
    "label": "has",
    "to": 30
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 48,
    "label": "has",
    "to": 31
  }, {
    "from": 48,
    "label": "has",
    "to": 82
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 34
  }, {
    "from": 48,
    "label": "has",
    "to": 83
  }, {
    "from": 48,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 23
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 85,
    "label": "has",
    "to": 91
  }, {
    "from": 85,
    "label": "has",
    "to": 23
  }, {
    "from": 85,
    "label": "has",
    "to": 92
  }, {
    "from": 85,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 85,
    "label": "has",
    "to": 23
  }, {
    "from": 85,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 50
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 23
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 96,
    "label": "has",
    "to": 23
  }, {
    "from": 96,
    "label": "has",
    "to": 23
  }, {
    "from": 96,
    "label": "has",
    "to": 105
  }, {
    "from": 48,
    "label": "calls",
    "to": 109
  }, {
    "from": 36,
    "label": "calls",
    "to": 15
  }, {
    "from": 48,
    "label": "calls",
    "to": 15
  }, {
    "from": 48,
    "label": "calls",
    "to": 18
  }, {
    "from": 36,
    "label": "calls",
    "to": 10
  }, {
    "from": 19,
    "label": "calls",
    "to": 11
  }, {
    "from": 36,
    "label": "calls",
    "to": 11
  }, {
    "from": 36,
    "label": "calls",
    "to": 11
  }, {
    "from": 36,
    "label": "calls",
    "to": 4
  }, {
    "from": 36,
    "label": "calls",
    "to": 4
  }, {
    "from": 48,
    "label": "calls",
    "to": 4
  }, {
    "from": 48,
    "label": "calls",
    "to": 4
  }, {
    "from": 48,
    "label": "calls",
    "to": 115
  }, {
    "from": 85,
    "label": "calls",
    "to": 123
  }, {
    "from": 48,
    "label": "calls",
    "to": 12
  }, {
    "from": 19,
    "label": "calls",
    "to": 5
  }, {
    "from": 19,
    "label": "calls",
    "to": 3
  }, {
    "from": 19,
    "label": "calls",
    "to": 3
  }, {
    "from": 85,
    "label": "calls",
    "to": 3
  }, {
    "from": 19,
    "label": "calls",
    "to": 6
  }, {
    "from": 106,
    "label": "calls",
    "to": 124
  }, {
    "from": 36,
    "label": "calls",
    "to": 112
  }, {
    "from": 19,
    "label": "calls",
    "to": 121
  }, {
    "from": 48,
    "label": "calls",
    "to": 121
  }, {
    "from": 85,
    "label": "calls",
    "to": 117
  }, {
    "from": 48,
    "label": "calls",
    "to": 110
  }, {
    "from": 96,
    "label": "calls",
    "to": 118
  }, {
    "from": 19,
    "label": "calls",
    "to": 13
  }, {
    "from": 48,
    "label": "calls",
    "to": 13
  }, {
    "from": 48,
    "label": "calls",
    "to": 13
  }, {
    "from": 19,
    "label": "calls",
    "to": 122
  }, {
    "from": 48,
    "label": "calls",
    "to": 122
  }, {
    "from": 48,
    "label": "calls",
    "to": 122
  }, {
    "from": 96,
    "label": "calls",
    "to": 122
  }, {
    "from": 19,
    "label": "calls",
    "to": 8
  }, {
    "from": 48,
    "label": "calls",
    "to": 8
  }, {
    "from": 48,
    "label": "calls",
    "to": 107
  }, {
    "from": 85,
    "label": "calls",
    "to": 48
  }, {
    "from": 96,
    "label": "calls",
    "to": 48
  }, {
    "from": 96,
    "label": "calls",
    "to": 119
  }, {
    "from": 48,
    "label": "calls",
    "to": 126
  }, {
    "from": 96,
    "label": "calls",
    "to": 120
  }, {
    "from": 48,
    "label": "calls",
    "to": 108
  }, {
    "from": 48,
    "label": "calls",
    "to": 14
  }, {
    "from": 48,
    "label": "calls",
    "to": 114
  }, {
    "from": 85,
    "label": "calls",
    "to": 111
  }, {
    "from": 48,
    "label": "calls",
    "to": 128
  }, {
    "from": 48,
    "label": "calls",
    "to": 128
  }, {
    "from": 48,
    "label": "calls",
    "to": 128
  }, {
    "from": 48,
    "label": "calls",
    "to": 116
  }, {
    "from": 19,
    "label": "calls",
    "to": 16
  }, {
    "from": 48,
    "label": "calls",
    "to": 16
  }, {
    "from": 36,
    "label": "calls",
    "to": 36
  }, {
    "from": 48,
    "label": "calls",
    "to": 36
  }, {
    "from": 48,
    "label": "calls",
    "to": 36
  }, {
    "from": 48,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 9
  }, {
    "from": 48,
    "label": "calls",
    "to": 9
  }, {
    "from": 96,
    "label": "calls",
    "to": 19
  }, {
    "from": 19,
    "label": "calls",
    "to": 127
  }, {
    "from": 36,
    "label": "calls",
    "to": 127
  }, {
    "from": 48,
    "label": "calls",
    "to": 127
  }, {
    "from": 48,
    "label": "calls",
    "to": 127
  }, {
    "from": 96,
    "label": "calls",
    "to": 127
  }, {
    "from": 96,
    "label": "calls",
    "to": 127
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 106,
    "label": "calls",
    "to": 129
  }, {
    "from": 36,
    "label": "calls",
    "to": 125
  }, {
    "from": 85,
    "label": "calls",
    "to": 113
  }, {
    "from": 1,
    "label": "contains",
    "to": 106
  }, {
    "from": 106,
    "label": "declares",
    "to": 19
  }, {
    "from": 106,
    "label": "declares",
    "to": 36
  }, {
    "from": 106,
    "label": "declares",
    "to": 48
  }, {
    "from": 106,
    "label": "declares",
    "to": 85
  }, {
    "from": 106,
    "label": "declares",
    "to": 96
  }, {
    "from": 1,
    "label": "contains",
    "to": 139
  }, {
    "from": 1,
    "label": "contains",
    "to": 140
  }, {
    "from": 139,
    "label": "initializes",
    "to": 141
  }, {
    "from": 139,
    "label": "initializes",
    "to": 142
  }, {
    "from": 139,
    "label": "initializes",
    "to": 143
  }, {
    "from": 140,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "requires",
    "to": 136
  }, {
    "from": 140,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "requires",
    "to": 137
  }, {
    "from": 140,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "requires",
    "to": 132
  }, {
    "from": 140,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "requires",
    "to": 135
  }, {
    "from": 140,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "requires",
    "to": 130
  }, {
    "from": 140,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "requires",
    "to": 131
  }, {
    "from": 140,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "requires",
    "to": 133
  }, {
    "from": 140,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "requires",
    "to": 134
  }, {
    "from": 140,
    "label": "initializes",
    "to": 152
  }, {
    "from": 152,
    "label": "requires",
    "to": 138
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pack",
    "type": "module"
  }, {
    "id": 2,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"build\")\r\n   end\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   if flags[\"pack-binary-rock\"] then\r\n      return pack.pack_binary_rock(name, version, do_build, name, version, deps.get_deps_mode(flags))\r\n   else\r\n      local ok, err = fs.check_command_permissions(flags)\r\n      if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n      ok, err = do_build(name, version, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function load_rockspec(filename, location)\r\n   assert(type(filename) == \"string\")\r\n\r\n   local name\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      name = \"rockspec\"\r\n   else\r\n      name = basename:match(\"(.*)%.rockspec\")\r\n      if not name then\r\n         return nil, \"Filename '\"..filename..\"' does not look like a rockspec.\"\r\n      end\r\n   end\r\n   \r\n   local err, errcode\r\n   if location then\r\n      local ok, err = fs.change_dir(location)\r\n      if not ok then return nil, err end\r\n      filename, err = fetch_url(filename)\r\n      fs.pop_dir()\r\n   else\r\n      filename, err, errcode = fetch_url_at_temp_dir(filename,\"luarocks-rockspec-\"..name)\r\n   end\r\n   if not filename then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   return load_local_rockspec(filename)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function fetch_sources(rockspec, extract, dest_dir)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(extract) == \"boolean\")\r\n   assert(type(dest_dir) == \"string\" or not dest_dir)\r\n\r\n   local protocol = rockspec.source.protocol\r\n   local ok, proto\r\n   if is_basic_protocol(protocol) then\r\n      proto = require(\"luarocks.fetch\")\r\n   else\r\n      ok, proto = pcall(require, \"luarocks.fetch.\"..protocol:gsub(\"[+-]\", \"_\"))\r\n      if not ok then\r\n         return nil, \"Unknown protocol \"..protocol\r\n      end\r\n   end\r\n   \r\n   if cfg.only_sources_from\r\n   and rockspec.source.pathname\r\n   and #rockspec.source.pathname > 0 then\r\n      if #cfg.only_sources_from == 0 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- download from remote servers disabled\"\r\n      elseif rockspec.source.pathname:find(cfg.only_sources_from, 1, true) ~= 1 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- only downloading from \"..cfg.only_sources_from\r\n      end\r\n   end\r\n   return proto.get_sources(rockspec, extract, dest_dir)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function make_temp_dir(name)\r\n   assert(type(name) == \"string\")\r\n   name = dir.normalize(name)\r\n\r\n   local temp_dir = (os.getenv(\"TMP\") or \"/tmp\") .. \"/luarocks_\" .. name:gsub(dir.separator, \"_\") .. \"-\" .. tostring(math.floor(math.random() * 10000))\r\n   local ok, err = fs.make_dir(temp_dir)\r\n   if ok then\r\n      return temp_dir\r\n   else\r\n      return nil, err\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function change_dir(d)\r\n   table.insert(dir_stack, lfs.currentdir())\r\n   d = dir.normalize(d)\r\n   return lfs.chdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function pop_dir()\r\n   local d = table.remove(dir_stack)\r\n   if d then\r\n      lfs.chdir(d)\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function make_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   directory = dir.normalize(directory)\r\n   local path = nil\r\n   if directory:sub(2, 2) == \":\" then\r\n     path = directory:sub(1, 2)\r\n     directory = directory:sub(4)\r\n   else\r\n     if directory:match(\"^/\") then\r\n        path = \"\"\r\n     end\r\n   end\r\n   for d in directory:gmatch(\"([^\"..dir.separator..\"]+)\"..dir.separator..\"*\") do\r\n      path = path and path .. dir.separator .. d or d\r\n      local mode = lfs.attributes(path, \"mode\")\r\n      if not mode then\r\n         local ok, err = lfs.mkdir(path)\r\n         if not ok then\r\n            return false, err\r\n         end\r\n      elseif mode ~= \"directory\" then\r\n         return false, path..\" is not a directory\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function copy(src, dest, perms)\r\n   assert(src and dest)\r\n   src = dir.normalize(src)\r\n   dest = dir.normalize(dest)\r\n   local destmode = lfs.attributes(dest, \"mode\")\r\n   if destmode == \"directory\" then\r\n      dest = dir.path(dest, dir.base_name(src))\r\n   end\r\n   if not perms then perms = fs.get_permissions(src) end\r\n   local src_h, err = io.open(src, \"rb\")\r\n   if not src_h then return nil, err end\r\n   local dest_h, err = io.open(dest, \"w+b\")\r\n   if not dest_h then src_h:close() return nil, err end\r\n   while true do\r\n      local block = src_h:read(8192)\r\n      if not block then break end\r\n      dest_h:write(block)\r\n   end\r\n   src_h:close()\r\n   dest_h:close()\r\n   fs.chmod(dest, perms)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function copy_contents(src, dest)\r\n   assert(src and dest)\r\n   src = dir.normalize(src)\r\n   dest = dir.normalize(dest)\r\n   assert(lfs.attributes(src, \"mode\") == \"directory\")\r\n\r\n   for file in lfs.dir(src) do\r\n      if file ~= \".\" and file ~= \"..\" then\r\n         local ok = recursive_copy(dir.path(src, file), dest)\r\n         if not ok then\r\n            return false, \"Failed copying \"..src..\" to \"..dest\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function delete(name)\r\n   name = dir.normalize(name)\r\n   recursive_delete(name)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function list_dir(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   at = dir.normalize(at)\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   for file in lfs.dir(at) do\r\n      if file ~= \".\" and file ~= \"..\" then\r\n         table.insert(result, file)\r\n      end\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function zip(zipfile, ...)\r\n   return lrzip.zip(zipfile, ...)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function run(...)\r\n   local flags, rockspec = util.parse_flags(...)\r\n   assert(type(rockspec) == \"string\" or not rockspec)\r\n   \r\n   if not rockspec then\r\n      local files = fs.list_dir(fs.current_dir())\r\n      for _, file in pairs(files) do\r\n         if file:match(\"rockspec$\") then\r\n            if rockspec then\r\n               return nil, \"Please specify which rockspec file to use.\"\r\n            else\r\n               rockspec = file\r\n            end\r\n         end\r\n      end\r\n      if not rockspec then\r\n         return nil, \"Argument missing: please specify a rockspec to use on current directory.\"\r\n      end\r\n   end\r\n   if not rockspec:match(\"rockspec$\") then\r\n      return nil, \"Invalid argument: 'make' takes a rockspec as a parameter. \"..util.see_help(\"make\")\r\n   end\r\n\r\n   if flags[\"pack-binary-rock\"] then\r\n      local rspec, err, errcode = fetch.load_rockspec(rockspec)\r\n      if not rspec then\r\n         return nil, err\r\n      end\r\n      return pack.pack_binary_rock(rspec.name, rspec.version, build.build_rockspec, rockspec, false, true, deps.get_deps_mode(flags))\r\n   else\r\n      local ok, err = fs.check_command_permissions(flags)\r\n      if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n      ok, err = build.build_rockspec(rockspec, false, true, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function load_rock_manifest(name, version, root)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local name_version = name..\"/\"..version\r\n   if rock_manifest_cache[name_version] then\r\n      return rock_manifest_cache[name_version].rock_manifest\r\n   end\r\n   local pathname = path.rock_manifest_file(name, version, root)\r\n   local rock_manifest = persist.load_into_table(pathname)\r\n   if not rock_manifest then return nil end\r\n   rock_manifest_cache[name_version] = rock_manifest\r\n   return rock_manifest.rock_manifest\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local function pack_source_rock(rockspec_file)\r\n   assert(type(rockspec_file) == \"string\")\r\n\r\n   local rockspec, err = fetch.load_rockspec(rockspec_file)\r\n   if err then\r\n      return nil, \"Error loading rockspec: \"..err\r\n   end\r\n   rockspec_file = rockspec.local_filename\r\n\r\n   local name_version = rockspec.name .. \"-\" .. rockspec.version\r\n   local rock_file = fs.absolute_name(name_version .. \".src.rock\")\r\n\r\n   local source_file, source_dir = fetch.fetch_sources(rockspec, false)\r\n   if not source_file then\r\n      return nil, source_dir\r\n   end\r\n   local ok, err = fs.change_dir(source_dir)\r\n   if not ok then return nil, err end\r\n\r\n   fs.delete(rock_file)\r\n   fs.copy(rockspec_file, source_dir)\r\n   if not fs.zip(rock_file, dir.base_name(rockspec_file), dir.base_name(source_file)) then\r\n      return nil, \"Failed packing \"..rock_file\r\n   end\r\n   fs.pop_dir()\r\n\r\n   return rock_file\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "assert(type(rockspec_file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "local rockspec, err = fetch.load_rockspec(rockspec_file)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if err then\r\n      return nil, \"Error loading rockspec: \"..err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 24,
    "text": "rockspec_file = rockspec.local_filename",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local name_version = rockspec.name .. \"-\" .. rockspec.version",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local rock_file = fs.absolute_name(name_version .. \".src.rock\")",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local source_file, source_dir = fetch.fetch_sources(rockspec, false)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if not source_file then\r\n      return nil, source_dir\r\n   end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "local ok, err = fs.change_dir(source_dir)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "fs.delete(rock_file)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "fs.copy(rockspec_file, source_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if not fs.zip(rock_file, dir.base_name(rockspec_file), dir.base_name(source_file)) then\r\n      return nil, \"Failed packing \"..rock_file\r\n   end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "fs.pop_dir()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function copy_back_files(name, version, file_tree, deploy_dir, pack_dir)\r\n   local ok, err = fs.make_dir(pack_dir)\r\n   if not ok then return nil, err end\r\n   for file, sub in pairs(file_tree) do\r\n      local source = dir.path(deploy_dir, file)\r\n      local target = dir.path(pack_dir, file)\r\n      if type(sub) == \"table\" then\r\n         local ok, err = copy_back_files(name, version, sub, source, target)\r\n         if not ok then return nil, err end\r\n      else\r\n         local versioned = path.versioned_name(source, deploy_dir, name, version)\r\n         if fs.exists(versioned) then\r\n            fs.copy(versioned, target)\r\n         else\r\n            fs.copy(source, target)\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local ok, err = fs.make_dir(pack_dir)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "for file, sub in pairs(file_tree) do\r\n      local source = dir.path(deploy_dir, file)\r\n      local target = dir.path(pack_dir, file)\r\n      if type(sub) == \"table\" then\r\n         local ok, err = copy_back_files(name, version, sub, source, target)\r\n         if not ok then return nil, err end\r\n      else\r\n         local versioned = path.versioned_name(source, deploy_dir, name, version)\r\n         if fs.exists(versioned) then\r\n            fs.copy(versioned, target)\r\n         else\r\n            fs.copy(source, target)\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 39,
    "text": "local source = dir.path(deploy_dir, file)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local target = dir.path(pack_dir, file)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if type(sub) == \"table\" then\r\n         local ok, err = copy_back_files(name, version, sub, source, target)\r\n         if not ok then return nil, err end\r\n      else\r\n         local versioned = path.versioned_name(source, deploy_dir, name, version)\r\n         if fs.exists(versioned) then\r\n            fs.copy(versioned, target)\r\n         else\r\n            fs.copy(source, target)\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local ok, err = copy_back_files(name, version, sub, source, target)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local versioned = path.versioned_name(source, deploy_dir, name, version)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if fs.exists(versioned) then\r\n            fs.copy(versioned, target)\r\n         else\r\n            fs.copy(source, target)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "fs.copy(versioned, target)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "fs.copy(source, target)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function do_pack_binary_rock(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   local query = search.make_query(name, version)\r\n   query.exact_name = true\r\n   local results = {}\r\n   \r\n   search.manifest_search(results, cfg.rocks_dir, query)\r\n   \r\n   if not next(results) then\r\n      return nil, \"'\"..name..\"' does not seem to be an installed rock.\"\r\n   end\r\n   \r\n   local versions = results[name]\r\n   \r\n   if not version then\r\n      local first = next(versions)\r\n      if next(versions, first) then\r\n         return nil, \"Please specify which version of '\"..name..\"' to pack.\"\r\n      end\r\n      version = first\r\n   end\r\n   if not version:match(\"[^-]+%-%d+\") then\r\n      return nil, \"Expected version \"..version..\" in version-revision format.\"\r\n   end\r\n   \r\n   local info = versions[version][1]\r\n   \r\n   local root = path.root_dir(info.repo)\r\n   local prefix = path.install_dir(name, version, root)\r\n   if not fs.exists(prefix) then\r\n      return nil, \"'\"..name..\" \"..version..\"' does not seem to be an installed rock.\"\r\n   end\r\n   \r\n   local rock_manifest = manif.load_rock_manifest(name, version, root)\r\n   if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end\r\n\r\n   local name_version = name .. \"-\" .. version\r\n   local rock_file = fs.absolute_name(name_version .. \".\"..cfg.arch..\".rock\")\r\n   \r\n   local temp_dir = fs.make_temp_dir(\"pack\")\r\n   fs.copy_contents(prefix, temp_dir)\r\n\r\n   local is_binary = false\r\n   if rock_manifest.lib then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lib, path.deploy_lib_dir(root), dir.path(temp_dir, \"lib\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n      is_binary = true\r\n   end\r\n   if rock_manifest.lua then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lua, path.deploy_lua_dir(root), dir.path(temp_dir, \"lua\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n   end\r\n   \r\n   local ok, err = fs.change_dir(temp_dir)\r\n   if not ok then return nil, err end\r\n   if not is_binary and not repos.has_binaries(name, version) then\r\n      rock_file = rock_file:gsub(\"%.\"..cfg.arch:gsub(\"%-\",\"%%-\")..\"%.\", \".all.\")\r\n   end\r\n   fs.delete(rock_file)\r\n   if not fs.zip(rock_file, unpack(fs.list_dir())) then\r\n      return nil, \"Failed packing \"..rock_file\r\n   end\r\n   fs.pop_dir()\r\n   fs.delete(temp_dir)\r\n   return rock_file\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert(type(name) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "assert(type(version) == \"string\" or not version)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "local query = search.make_query(name, version)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "query.exact_name = true",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "search.manifest_search(results, cfg.rocks_dir, query)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "if not next(results) then\r\n      return nil, \"'\"..name..\"' does not seem to be an installed rock.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local versions = results[name]",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if not version then\r\n      local first = next(versions)\r\n      if next(versions, first) then\r\n         return nil, \"Please specify which version of '\"..name..\"' to pack.\"\r\n      end\r\n      version = first\r\n   end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "local first = next(versions)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if next(versions, first) then\r\n         return nil, \"Please specify which version of '\"..name..\"' to pack.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "version = first",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if not version:match(\"[^-]+%-%d+\") then\r\n      return nil, \"Expected version \"..version..\" in version-revision format.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "local info = versions[version][1]",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local root = path.root_dir(info.repo)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local prefix = path.install_dir(name, version, root)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if not fs.exists(prefix) then\r\n      return nil, \"'\"..name..\" \"..version..\"' does not seem to be an installed rock.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local rock_manifest = manif.load_rock_manifest(name, version, root)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "local name_version = name .. \"-\" .. version",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local rock_file = fs.absolute_name(name_version .. \".\"..cfg.arch..\".rock\")",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local temp_dir = fs.make_temp_dir(\"pack\")",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "fs.copy_contents(prefix, temp_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "local is_binary = false",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if rock_manifest.lib then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lib, path.deploy_lib_dir(root), dir.path(temp_dir, \"lib\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n      is_binary = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local ok, err = copy_back_files(name, version, rock_manifest.lib, path.deploy_lib_dir(root), dir.path(temp_dir, \"lib\"))",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if not ok then return nil, \"Failed copying back files: \" .. err end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "is_binary = true",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "if rock_manifest.lua then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lua, path.deploy_lua_dir(root), dir.path(temp_dir, \"lua\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "local ok, err = copy_back_files(name, version, rock_manifest.lua, path.deploy_lua_dir(root), dir.path(temp_dir, \"lua\"))",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local ok, err = fs.change_dir(temp_dir)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if not is_binary and not repos.has_binaries(name, version) then\r\n      rock_file = rock_file:gsub(\"%.\"..cfg.arch:gsub(\"%-\",\"%%-\")..\"%.\", \".all.\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "rock_file = rock_file:gsub(\"%.\"..cfg.arch:gsub(\"%-\",\"%%-\")..\"%.\", \".all.\")",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if not fs.zip(rock_file, unpack(fs.list_dir())) then\r\n      return nil, \"Failed packing \"..rock_file\r\n   end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "fs.delete(temp_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function pack_binary_rock(name, version, cmd, ...)\r\n\r\n   -- The --pack-binary-rock option for \"luarocks build\" basically performs\r\n   -- \"luarocks build\" on a temporary tree and then \"luarocks pack\". The\r\n   -- alternative would require refactoring parts of luarocks.build and\r\n   -- luarocks.pack, which would save a few file operations: the idea would be\r\n   -- to shave off the final deploy steps from the build phase and the initial\r\n   -- collect steps from the pack phase.\r\n\r\n   local temp_dir, err = fs.make_temp_dir(\"luarocks-build-pack-\"..dir.base_name(name))\r\n   if not temp_dir then\r\n      return nil, \"Failed creating temporary directory: \"..err\r\n   end\r\n   util.schedule_function(fs.delete, temp_dir)\r\n\r\n   path.use_tree(temp_dir)\r\n   local ok, err = cmd(...)\r\n   if not ok then\r\n      return nil, err\r\n   end\r\n   local rname, rversion = path.parse_name(name)\r\n   if not rname then\r\n      rname, rversion = name, version\r\n   end\r\n   return do_pack_binary_rock(rname, rversion)\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "local temp_dir, err = fs.make_temp_dir(\"luarocks-build-pack-\"..dir.base_name(name))",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "if not temp_dir then\r\n      return nil, \"Failed creating temporary directory: \"..err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "util.schedule_function(fs.delete, temp_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "path.use_tree(temp_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local ok, err = cmd(...)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if not ok then\r\n      return nil, err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "local rname, rversion = path.parse_name(name)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if not rname then\r\n      rname, rversion = name, version\r\n   end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "rname, rversion = name, version",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function run(...)\r\n   local flags, arg, version = util.parse_flags(...)\r\n   assert(type(version) == \"string\" or not version)\r\n   if type(arg) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"pack\")\r\n   end\r\n\r\n   local file, err\r\n   if arg:match(\".*%.rockspec\") then\r\n      file, err = pack_source_rock(arg)\r\n   else\r\n      file, err = do_pack_binary_rock(arg, version)\r\n   end\r\n   if err then\r\n      return nil, err\r\n   else\r\n      util.printout(\"Packed: \"..file)\r\n      return true\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local flags, arg, version = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if type(arg) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"pack\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "local file, err",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if arg:match(\".*%.rockspec\") then\r\n      file, err = pack_source_rock(arg)\r\n   else\r\n      file, err = do_pack_binary_rock(arg, version)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "file, err = pack_source_rock(arg)",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "file, err = do_pack_binary_rock(arg, version)",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "if err then\r\n      return nil, err\r\n   else\r\n      util.printout(\"Packed: \"..file)\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "util.printout(\"Packed: \"..file)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "",
    "type": "function container"
  }, {
    "id": 107,
    "text": "function root_dir(rocks_dir)\r\n   assert(type(rocks_dir) == \"string\")\r\n   return rocks_dir:match(\"(.*)\" .. util.matchquote(cfg.rocks_subdir) .. \".*$\")\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "function deploy_lua_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.lua_modules_path)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.lua_dir or dir.path(tree.root, cfg.lua_modules_path)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "function deploy_lib_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.lib_modules_path)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.lib_dir or dir.path(tree.root, cfg.lib_modules_path)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "function install_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version)\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "function parse_name(file_name)\r\n   assert(type(file_name) == \"string\")\r\n   if file_name:match(\"%.rock$\") then\r\n      return dir.base_name(file_name):match(\"(.*)-([^-]+-%d+)%.([^.]+)%.rock$\")\r\n   else\r\n      return dir.base_name(file_name):match(\"(.*)-([^-]+-%d+)%.(rockspec)\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "function versioned_name(file, prefix, name, version)\r\n   assert(type(file) == \"string\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local rest = file:sub(#prefix+1):gsub(\"^/*\", \"\")\r\n   local name_version = (name..\"_\"..version):gsub(\"%-\", \"_\"):gsub(\"%.\", \"_\")\r\n   return dir.path(prefix, name_version..\"-\"..rest)\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "function use_tree(tree)\r\n   cfg.root_dir = tree\r\n   cfg.rocks_dir = rocks_dir(tree)\r\n   cfg.deploy_bin_dir = deploy_bin_dir(tree)\r\n   cfg.deploy_lua_dir = deploy_lua_dir(tree)\r\n   cfg.deploy_lib_dir = deploy_lib_dir(tree)\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "function has_binaries(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   if rock_manifest.bin then\r\n      for name, md5 in pairs(rock_manifest.bin) do\r\n         -- TODO verify that it is the same file. If it isn't, find the actual command.\r\n         if fs.is_actual_binary(dir.path(cfg.deploy_bin_dir, name)) then\r\n            return true\r\n         end\r\n      end\r\n   end\r\n   return false\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "function manifest_search(results, repo, query)\r\n   assert(type(results) == \"table\")\r\n   assert(type(repo) == \"string\")\r\n   assert(type(query) == \"table\")\r\n   \r\n   query_arch_as_table(query)\r\n   local manifest, err = manif.load_manifest(repo)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest: \"..err\r\n   end\r\n   for name, versions in pairs(manifest.repository) do\r\n      for version, items in pairs(versions) do\r\n         for _, item in ipairs(items) do\r\n            store_if_match(results, repo, name, version, item.arch, query)\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "function make_query(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n   \r\n   local query = {\r\n      name = name,\r\n      constraints = {}\r\n   }\r\n   if version then\r\n      table.insert(query.constraints, { op = \"==\", version = deps.parse_version(version)})\r\n   end\r\n   return query\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "function schedule_function(f, ...)\r\n   assert(type(f) == \"function\")\r\n   \r\n   local item = { fn = f, args = {...} }\r\n   table.insert(scheduled_functions, item)\r\n   return item\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "function see_help(command, program)\r\n   return \"See '\"..this_program(program or \"luarocks\")..' help '..command..\"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "absolute_name",
    "type": "global function"
  }, {
    "id": 122,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 123,
    "text": "cmd",
    "type": "global function"
  }, {
    "id": 124,
    "text": "module",
    "type": "global function"
  }, {
    "id": 125,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 126,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 127,
    "text": "type",
    "type": "global function"
  }, {
    "id": 128,
    "text": "next",
    "type": "global function"
  }, {
    "id": 129,
    "text": "require",
    "type": "global function"
  }, {
    "id": 130,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 131,
    "text": "util)",
    "type": "module"
  }, {
    "id": 132,
    "text": "fetch)",
    "type": "module"
  }, {
    "id": 133,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 134,
    "text": "manif)",
    "type": "module"
  }, {
    "id": 135,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 136,
    "text": "path)",
    "type": "module"
  }, {
    "id": 137,
    "text": "repos)",
    "type": "module"
  }, {
    "id": 138,
    "text": "search)",
    "type": "module"
  }, {
    "id": 139,
    "text": "",
    "type": "variable container"
  }, {
    "id": 140,
    "text": "",
    "type": "require container"
  }, {
    "id": 141,
    "text": "",
    "type": "global variable"
  }, {
    "id": 142,
    "text": "",
    "type": "global variable"
  }, {
    "id": 143,
    "text": "",
    "type": "global variable"
  }, {
    "id": 144,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "require local variable"
  } ]
}