{
  "_filename": "persist.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/persist.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 9
  }, {
    "from": 2,
    "label": "calls",
    "to": 9
  }, {
    "from": 2,
    "label": "calls",
    "to": 9
  }, {
    "from": 2,
    "label": "calls",
    "to": 9
  }, {
    "from": 2,
    "label": "calls",
    "to": 9
  }, {
    "from": 3,
    "label": "calls",
    "to": 9
  }, {
    "from": 4,
    "label": "calls",
    "to": 9
  }, {
    "from": 5,
    "label": "calls",
    "to": 82
  }, {
    "from": 6,
    "label": "calls",
    "to": 9
  }, {
    "from": 7,
    "label": "calls",
    "to": 9
  }, {
    "from": 8,
    "label": "calls",
    "to": 9
  }, {
    "from": 8,
    "label": "calls",
    "to": 82
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 9,
    "label": "has",
    "to": 24
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 9,
    "label": "has",
    "to": 23
  }, {
    "from": 9,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 27,
    "label": "has",
    "to": 38
  }, {
    "from": 26,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 53,
    "label": "has",
    "to": 61
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 46,
    "label": "has",
    "to": 65
  }, {
    "from": 40,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 69
  }, {
    "from": 40,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 63
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 67
  }, {
    "from": 71,
    "label": "has",
    "to": 23
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 23
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 78
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 23
  }, {
    "from": 82,
    "label": "has",
    "to": 79
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 23
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 75,
    "label": "calls",
    "to": 95
  }, {
    "from": 9,
    "label": "calls",
    "to": 90
  }, {
    "from": 9,
    "label": "calls",
    "to": 90
  }, {
    "from": 75,
    "label": "calls",
    "to": 94
  }, {
    "from": 87,
    "label": "calls",
    "to": 26
  }, {
    "from": 40,
    "label": "calls",
    "to": 26
  }, {
    "from": 26,
    "label": "calls",
    "to": 91
  }, {
    "from": 87,
    "label": "calls",
    "to": 91
  }, {
    "from": 87,
    "label": "calls",
    "to": 93
  }, {
    "from": 9,
    "label": "calls",
    "to": 92
  }, {
    "from": 9,
    "label": "calls",
    "to": 92
  }, {
    "from": 9,
    "label": "calls",
    "to": 97
  }, {
    "from": 87,
    "label": "calls",
    "to": 88
  }, {
    "from": 40,
    "label": "calls",
    "to": 88
  }, {
    "from": 9,
    "label": "calls",
    "to": 96
  }, {
    "from": 9,
    "label": "calls",
    "to": 96
  }, {
    "from": 9,
    "label": "calls",
    "to": 99
  }, {
    "from": 9,
    "label": "calls",
    "to": 99
  }, {
    "from": 26,
    "label": "calls",
    "to": 99
  }, {
    "from": 26,
    "label": "calls",
    "to": 99
  }, {
    "from": 87,
    "label": "calls",
    "to": 99
  }, {
    "from": 87,
    "label": "calls",
    "to": 99
  }, {
    "from": 87,
    "label": "calls",
    "to": 100
  }, {
    "from": 26,
    "label": "calls",
    "to": 40
  }, {
    "from": 87,
    "label": "calls",
    "to": 40
  }, {
    "from": 75,
    "label": "calls",
    "to": 40
  }, {
    "from": 82,
    "label": "calls",
    "to": 40
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 1,
    "label": "contains",
    "to": 87
  }, {
    "from": 87,
    "label": "declares",
    "to": 9
  }, {
    "from": 87,
    "label": "declares",
    "to": 26
  }, {
    "from": 87,
    "label": "declares",
    "to": 40
  }, {
    "from": 87,
    "label": "declares",
    "to": 71
  }, {
    "from": 87,
    "label": "declares",
    "to": 75
  }, {
    "from": 87,
    "label": "declares",
    "to": 81
  }, {
    "from": 87,
    "label": "declares",
    "to": 82
  }, {
    "from": 89,
    "label": "calls",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 102
  }, {
    "from": 1,
    "label": "contains",
    "to": 103
  }, {
    "from": 102,
    "label": "initializes",
    "to": 104
  }, {
    "from": 102,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 103,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "requires",
    "to": 101
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "persist",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "function load_local_rockspec(filename, quick)\r\n   assert(type(filename) == \"string\")\r\n   filename = fs.absolute_name(filename)\r\n   local rockspec, err = persist.load_into_table(filename)\r\n   if not rockspec then\r\n      return nil, \"Could not load rockspec file \"..filename..\" (\"..err..\")\"\r\n   end\r\n\r\n   local ok, err = true, nil\r\n   if not quick then\r\n      ok, err = type_check.type_check_rockspec(rockspec)\r\n      if not ok then\r\n         return nil, filename..\": \"..err\r\n      end\r\n   end\r\n   \r\n   if rockspec.rockspec_format then\r\n      if deps.compare_versions(rockspec.rockspec_format, type_check.rockspec_format) then\r\n         return nil, \"Rockspec format \"..rockspec.rockspec_format..\" is not supported, please upgrade LuaRocks.\"\r\n      end\r\n   end\r\n\r\n   util.platform_overrides(rockspec.build)\r\n   util.platform_overrides(rockspec.dependencies)\r\n   util.platform_overrides(rockspec.external_dependencies)\r\n   util.platform_overrides(rockspec.source)\r\n   util.platform_overrides(rockspec.hooks)\r\n\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      rockspec.name = rockspec.package:lower()\r\n   else\r\n      rockspec.name = basename:match(\"(.*)-[^-]*-[0-9]*\")\r\n      if not rockspec.name then\r\n         return nil, \"Expected filename in format 'name-version-revision.rockspec'.\"\r\n      end\r\n   end\r\n\r\n   local protocol, pathname = dir.split_url(rockspec.source.url)\r\n   if is_basic_protocol(protocol) then\r\n      rockspec.source.file = rockspec.source.file or dir.base_name(rockspec.source.url)\r\n   end\r\n   rockspec.source.protocol, rockspec.source.pathname = protocol, pathname\r\n\r\n   -- Temporary compatibility\r\n   if rockspec.source.cvs_module then rockspec.source.module = rockspec.source.cvs_module end\r\n   if rockspec.source.cvs_tag then rockspec.source.tag = rockspec.source.cvs_tag end\r\n\r\n   local name_version = rockspec.package:lower() .. \"-\" .. rockspec.version\r\n   if basename ~= \"rockspec\" and basename ~= name_version .. \".rockspec\" then\r\n      return nil, \"Inconsistency between rockspec filename (\"..basename..\") and its contents (\"..name_version..\".rockspec).\"\r\n   end\r\n\r\n   rockspec.local_filename = filename\r\n   local filebase = rockspec.source.file or rockspec.source.url\r\n   local base = url_to_base_dir(filebase)\r\n   rockspec.source.dir = rockspec.source.dir\r\n                      or rockspec.source.module\r\n                      or ((filebase:match(\".lua$\") or filebase:match(\".c$\")) and \".\")\r\n                      or base\r\n   if rockspec.dependencies then\r\n      for i = 1, #rockspec.dependencies do\r\n         local parsed, err = deps.parse_dep(rockspec.dependencies[i])\r\n         if not parsed then\r\n            return nil, \"Parse error processing dependency '\"..rockspec.dependencies[i]..\"': \"..tostring(err)\r\n         end\r\n         rockspec.dependencies[i] = parsed\r\n      end\r\n   else\r\n      rockspec.dependencies = {}\r\n   end\r\n   if not quick then\r\n      path.configure_paths(rockspec)\r\n   end\r\n\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function make_index(repo)\r\n   if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end\r\n   local manifest = manif.load_manifest(repo)\r\n   local out = io.open(dir.path(repo, \"index.html\"), \"w\")\r\n   \r\n   out:write(index_header)\r\n   for package, version_list in util.sortedpairs(manifest.repository) do\r\n      local latest_rockspec = nil\r\n      local output = index_package_begin\r\n      for version, data in util.sortedpairs(version_list, deps.compare_versions) do\r\n         local versions = {}\r\n         output = output..version..':&nbsp;'\r\n         table.sort(data, function(a,b) return a.arch < b.arch end)\r\n         for _, item in ipairs(data) do\r\n            local file\r\n            if item.arch == 'rockspec' then\r\n               file = (\"%s-%s.rockspec\"):format(package, version)\r\n               if not latest_rockspec then latest_rockspec = file end\r\n            else\r\n               file = (\"%s-%s.%s.rock\"):format(package, version, item.arch)\r\n            end\r\n            table.insert(versions, '<a href=\"'..file..'\">'..item.arch..'</a>')\r\n         end\r\n         output = output .. table.concat(versions, ',&nbsp;') .. '<br/>'\r\n      end\r\n      output = output .. index_package_end\r\n      if latest_rockspec then\r\n         local rockspec = persist.load_into_table(dir.path(repo, latest_rockspec))\r\n         local descript = rockspec.description or {}\r\n         local vars = {\r\n            anchor = package,\r\n            package = rockspec.package,\r\n            original = rockspec.source.url,\r\n            summary = descript.summary or \"\",\r\n            detailed = descript.detailed or \"\",\r\n            license = descript.license or \"N/A\",\r\n            homepage = descript.homepage and ('| <a href=\"'..descript.homepage..'\"'..ext_url_target..'>project homepage</a>') or \"\",\r\n            externaldependencies = format_external_dependencies(rockspec)\r\n         }\r\n         vars.detailed = vars.detailed:gsub(\"\\n\\n\", \"</p><p>\"):gsub(\"%s+\", \" \")\r\n         vars.detailed = vars.detailed:gsub(\"(https?://[a-zA-Z0-9%.%%-_%+%[%]=%?&/$@;:]+)\", '<a href=\"%1\"'..ext_url_target..'>%1</a>')\r\n         output = output:gsub(\"$(%w+)\", vars)\r\n      else\r\n         output = output:gsub(\"$anchor\", package)\r\n         output = output:gsub(\"$package\", package)\r\n         output = output:gsub(\"$(%w+)\", \"\")\r\n      end\r\n      out:write(output)\r\n   end\r\n   out:write(index_footer_begin)\r\n   for ver in util.lua_versions() do\r\n      out:write((index_manifest_ver:gsub(\"$VER\", ver)))\r\n   end\r\n   out:write(index_footer_end)\r\n   out:close()\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function save_table(where, name, tbl)\r\n   assert(type(where) == \"string\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(tbl) == \"table\")\r\n\r\n   local filename = dir.path(where, name)\r\n   local ok, err = persist.save_from_table(filename..\".tmp\", tbl)\r\n   if ok then\r\n      ok, err = fs.replace_file(filename, filename..\".tmp\")\r\n   end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function load_rock_manifest(name, version, root)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local name_version = name..\"/\"..version\r\n   if rock_manifest_cache[name_version] then\r\n      return rock_manifest_cache[name_version].rock_manifest\r\n   end\r\n   local pathname = path.rock_manifest_file(name, version, root)\r\n   local rock_manifest = persist.load_into_table(pathname)\r\n   if not rock_manifest then return nil end\r\n   rock_manifest_cache[name_version] = rock_manifest\r\n   return rock_manifest.rock_manifest\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function manifest_loader(file, repo_url, quick)\r\n   local manifest, err = persist.load_into_table(file)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest for \"..repo_url..\": \"..err\r\n   end\r\n   if not quick then\r\n      local ok, err = type_check.type_check_manifest(manifest)\r\n      if not ok then\r\n         return nil, \"Error checking manifest: \"..err\r\n      end\r\n   end\r\n\r\n   manifest_cache[repo_url] = manifest\r\n   return manifest\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function run(...)\r\n   local flags, input, version, url = util.parse_flags(...)\r\n   if not input then\r\n      return nil, \"Missing arguments: expected program or rockspec. \"..util.see_help(\"new_version\")\r\n   end\r\n   assert(type(input) == \"string\")\r\n   \r\n   local filename = input\r\n   if not input:match(\".rockspec$\") then\r\n      local err\r\n      filename, err = download.download(\"rockspec\", input)\r\n      if not filename then\r\n         return nil, err\r\n      end\r\n   end\r\n   \r\n   local valid_rs, err = fetch.load_rockspec(filename)\r\n   if not valid_rs then\r\n      return nil, err\r\n   end\r\n\r\n   local old_ver, old_rev = valid_rs.version:match(\"(.*)%-(%d+)$\")\r\n   local new_ver, new_rev\r\n   \r\n   if version then\r\n      new_ver, new_rev = version:match(\"(.*)%-(%d+)$\")\r\n      new_rev = tonumber(new_rev)\r\n      if not new_rev then\r\n         new_ver = version\r\n         new_rev = 1\r\n      end\r\n   else\r\n      new_ver = old_ver\r\n      new_rev = tonumber(old_rev) + 1\r\n   end\r\n   local new_rockver = new_ver:gsub(\"-\", \"\")\r\n   \r\n   local out_rs = persist.load_into_table(filename)\r\n   local out_name = out_rs.package:lower()\r\n   out_rs.version = new_rockver..\"-\"..new_rev\r\n\r\n   local ok, err = update_source_section(out_rs, out_name, url, old_ver, new_ver)\r\n   if not ok then return nil, err end\r\n\r\n   if out_rs.build and out_rs.build.type == \"module\" then\r\n      out_rs.build.type = \"builtin\"\r\n   end\r\n   \r\n   local out_filename = out_name..\"-\"..new_rockver..\"-\"..new_rev..\".rockspec\"\r\n   \r\n   persist.save_from_table(out_filename, out_rs, type_check.rockspec_order)\r\n   \r\n   util.printout(\"Wrote \"..out_filename)\r\n\r\n   local valid_out_rs, err = fetch.load_local_rockspec(out_filename)\r\n   if not valid_out_rs then\r\n      return nil, \"Failed loading generated rockspec: \"..err\r\n   end\r\n   \r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function load_into_table(filename, tbl)\r\n   assert(type(filename) == \"string\")\r\n   assert(type(tbl) == \"table\" or not tbl)\r\n\r\n   local result, chunk, ran, err\r\n   local result = tbl or {}\r\n   if _VERSION == \"Lua 5.1\" then -- Lua 5.1\r\n      chunk, err = loadfile(filename)\r\n      if chunk then\r\n         setfenv(chunk, result)\r\n         ran, err = pcall(chunk)\r\n      end\r\n   else -- Lua 5.2\r\n      chunk, err = loadfile(filename, \"t\", result)\r\n      if chunk then\r\n         ran, err = pcall(chunk)\r\n      end\r\n   end\r\n   \r\n   if not chunk then\r\n      if err:sub(1,5) ~= filename:sub(1,5) then\r\n         return false, err\r\n      end\r\n      return nil, \"Error loading file: \"..err\r\n   end\r\n   if not ran then\r\n      return nil, \"Error running file: \"..err\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "assert(type(filename) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert(type(tbl) == \"table\" or not tbl)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local result, chunk, ran, err",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local result = tbl or {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if _VERSION == \"Lua 5.1\" then -- Lua 5.1\r\n      chunk, err = loadfile(filename)\r\n      if chunk then\r\n         setfenv(chunk, result)\r\n         ran, err = pcall(chunk)\r\n      end\r\n   else -- Lua 5.2\r\n      chunk, err = loadfile(filename, \"t\", result)\r\n      if chunk then\r\n         ran, err = pcall(chunk)\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "chunk, err = loadfile(filename)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if chunk then\r\n         setfenv(chunk, result)\r\n         ran, err = pcall(chunk)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "setfenv(chunk, result)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "ran, err = pcall(chunk)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "chunk, err = loadfile(filename, \"t\", result)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if chunk then\r\n         ran, err = pcall(chunk)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "if not chunk then\r\n      if err:sub(1,5) ~= filename:sub(1,5) then\r\n         return false, err\r\n      end\r\n      return nil, \"Error loading file: \"..err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if err:sub(1,5) ~= filename:sub(1,5) then\r\n         return false, err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 24,
    "text": "if not ran then\r\n      return nil, \"Error running file: \"..err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function write_value(out, v, level, sub_order)\r\n   if type(v) == \"table\" then\r\n      write_table(out, v, level + 1, sub_order)\r\n   elseif type(v) == \"string\" then\r\n      if v:match(\"\\n\") then\r\n         local open, close = \"[[\", \"]]\"\r\n         local equals = 0\r\n         while v:find(open,1,true) or v:find(close,1,true) do\r\n            equals = equals + 1\r\n            local eqs = (\"=\"):rep(equals)\r\n            open, close = \"[\"..eqs..\"[\", \"]\"..eqs..\"]\"\r\n         end\r\n         out:write(open..\"\\n\"..v..close)\r\n      else\r\n         out:write(\"\\\"\"..v:gsub(\"\\\"\", \"\\\\\\\"\")..\"\\\"\")\r\n      end\r\n   else\r\n      out:write(tostring(v))\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "if type(v) == \"table\" then\r\n      write_table(out, v, level + 1, sub_order)\r\n   elseif type(v) == \"string\" then\r\n      if v:match(\"\\n\") then\r\n         local open, close = \"[[\", \"]]\"\r\n         local equals = 0\r\n         while v:find(open,1,true) or v:find(close,1,true) do\r\n            equals = equals + 1\r\n            local eqs = (\"=\"):rep(equals)\r\n            open, close = \"[\"..eqs..\"[\", \"]\"..eqs..\"]\"\r\n         end\r\n         out:write(open..\"\\n\"..v..close)\r\n      else\r\n         out:write(\"\\\"\"..v:gsub(\"\\\"\", \"\\\\\\\"\")..\"\\\"\")\r\n      end\r\n   else\r\n      out:write(tostring(v))\r\n   end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "write_table(out, v, level + 1, sub_order)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if v:match(\"\\n\") then\r\n         local open, close = \"[[\", \"]]\"\r\n         local equals = 0\r\n         while v:find(open,1,true) or v:find(close,1,true) do\r\n            equals = equals + 1\r\n            local eqs = (\"=\"):rep(equals)\r\n            open, close = \"[\"..eqs..\"[\", \"]\"..eqs..\"]\"\r\n         end\r\n         out:write(open..\"\\n\"..v..close)\r\n      else\r\n         out:write(\"\\\"\"..v:gsub(\"\\\"\", \"\\\\\\\"\")..\"\\\"\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local open, close = \"[[\", \"]]\"",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local equals = 0",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "while v:find(open,1,true) or v:find(close,1,true) do\r\n            equals = equals + 1\r\n            local eqs = (\"=\"):rep(equals)\r\n            open, close = \"[\"..eqs..\"[\", \"]\"..eqs..\"]\"\r\n         end",
    "type": "statement:while"
  }, {
    "id": 33,
    "text": "equals = equals + 1",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "local eqs = (\"=\"):rep(equals)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "open, close = \"[\"..eqs..\"[\", \"]\"..eqs..\"]\"",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "out:write(open..\"\\n\"..v..close)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "out:write(\"\\\"\"..v:gsub(\"\\\"\", \"\\\\\\\"\")..\"\\\"\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "out:write(tostring(v))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function(out, tbl, level, field_order)\r\n   out:write(\"{\")\r\n   local sep = \"\\n\"\r\n   local indentation = \"   \"\r\n   local indent = true\r\n   local i = 1\r\n   for k, v, sub_order in util.sortedpairs(tbl, field_order) do\r\n      out:write(sep)\r\n      if indent then\r\n         for n = 1,level do out:write(indentation) end\r\n      end\r\n      sep = \",\\n\"\r\n      indent = true\r\n      if type(k) == \"number\" then\r\n         if k ~= i then\r\n            out:write(\"[\"..tostring(k)..\"]=\")\r\n         else\r\n            i = i + 1\r\n         end\r\n         indent = false\r\n         sep = \", \"\r\n      elseif type(k) == \"table\" then\r\n         out:write(\"[\")\r\n         write_table(out, k, level + 1)\r\n         out:write(\"] = \")\r\n      else\r\n         if k:match(\"^[a-zA-Z_][a-zA-Z0-9_]*$\") then\r\n            out:write(k..\" = \")\r\n         else\r\n            out:write(\"['\"..k:gsub(\"'\", \"\\\\'\")..\"'] = \") \r\n         end\r\n      end\r\n      write_value(out, v, level, sub_order)\r\n   end\r\n   if sep ~= \"\\n\" then\r\n      out:write(\"\\n\")\r\n      for n = 1,level-1 do out:write(indentation) end\r\n   end\r\n   out:write(\"}\")\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "out:write(\"{\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local sep = \"\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local indentation = \"   \"",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local indent = true",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "for k, v, sub_order in util.sortedpairs(tbl, field_order) do\r\n      out:write(sep)\r\n      if indent then\r\n         for n = 1,level do out:write(indentation) end\r\n      end\r\n      sep = \",\\n\"\r\n      indent = true\r\n      if type(k) == \"number\" then\r\n         if k ~= i then\r\n            out:write(\"[\"..tostring(k)..\"]=\")\r\n         else\r\n            i = i + 1\r\n         end\r\n         indent = false\r\n         sep = \", \"\r\n      elseif type(k) == \"table\" then\r\n         out:write(\"[\")\r\n         write_table(out, k, level + 1)\r\n         out:write(\"] = \")\r\n      else\r\n         if k:match(\"^[a-zA-Z_][a-zA-Z0-9_]*$\") then\r\n            out:write(k..\" = \")\r\n         else\r\n            out:write(\"['\"..k:gsub(\"'\", \"\\\\'\")..\"'] = \") \r\n         end\r\n      end\r\n      write_value(out, v, level, sub_order)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "out:write(sep)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "if indent then\r\n         for n = 1,level do out:write(indentation) end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "for n = 1,level do out:write(indentation) end",
    "type": "statement:numericfor"
  }, {
    "id": 50,
    "text": "out:write(indentation)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "sep = \",\\n\"",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "indent = true",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if type(k) == \"number\" then\r\n         if k ~= i then\r\n            out:write(\"[\"..tostring(k)..\"]=\")\r\n         else\r\n            i = i + 1\r\n         end\r\n         indent = false\r\n         sep = \", \"\r\n      elseif type(k) == \"table\" then\r\n         out:write(\"[\")\r\n         write_table(out, k, level + 1)\r\n         out:write(\"] = \")\r\n      else\r\n         if k:match(\"^[a-zA-Z_][a-zA-Z0-9_]*$\") then\r\n            out:write(k..\" = \")\r\n         else\r\n            out:write(\"['\"..k:gsub(\"'\", \"\\\\'\")..\"'] = \") \r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "if k ~= i then\r\n            out:write(\"[\"..tostring(k)..\"]=\")\r\n         else\r\n            i = i + 1\r\n         end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "out:write(\"[\"..tostring(k)..\"]=\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "indent = false",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "sep = \", \"",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "out:write(\"[\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "write_table(out, k, level + 1)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "out:write(\"] = \")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "if k:match(\"^[a-zA-Z_][a-zA-Z0-9_]*$\") then\r\n            out:write(k..\" = \")\r\n         else\r\n            out:write(\"['\"..k:gsub(\"'\", \"\\\\'\")..\"'] = \") \r\n         end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "out:write(k..\" = \")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "out:write(\"['\"..k:gsub(\"'\", \"\\\\'\")..\"'] = \")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "write_value(out, v, level, sub_order)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if sep ~= \"\\n\" then\r\n      out:write(\"\\n\")\r\n      for n = 1,level-1 do out:write(indentation) end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "out:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "for n = 1,level-1 do out:write(indentation) end",
    "type": "statement:numericfor"
  }, {
    "id": 69,
    "text": "out:write(\"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "local function write_table(out, tbl, field_order)\r\n   for k, v, sub_order in util.sortedpairs(tbl, field_order) do\r\n      out:write(k..\" = \")\r\n      write_value(out, v, 0, sub_order)\r\n      out:write(\"\\n\")\r\n   end\r\n   return out\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "for k, v, sub_order in util.sortedpairs(tbl, field_order) do\r\n      out:write(k..\" = \")\r\n      write_value(out, v, 0, sub_order)\r\n      out:write(\"\\n\")\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "write_value(out, v, 0, sub_order)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function save_from_table_to_string(tbl, field_order)\r\n   local out = {buffer = {}}\r\n   function out:write(data) table.insert(self.buffer, data) end\r\n   write_table(out, tbl, field_order)\r\n   return table.concat(out.buffer)\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "local out = {buffer = {}}",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "function out:write(data) table.insert(self.buffer, data) end",
    "type": "statement:globalfunction"
  }, {
    "id": 78,
    "text": "table.insert(self.buffer, data)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "write_table(out, tbl, field_order)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function out:write(data) table.insert(self.buffer, data) end",
    "type": "function"
  }, {
    "id": 82,
    "text": "function save_from_table(filename, tbl, field_order)\r\n   local out = io.open(filename, \"w\")\r\n   if not out then\r\n      return nil, \"Cannot create file at \"..filename\r\n   end\r\n   write_table(out, tbl, field_order)\r\n   out:close()\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local out = io.open(filename, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if not out then\r\n      return nil, \"Cannot create file at \"..filename\r\n   end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "out:close()",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "",
    "type": "function container"
  }, {
    "id": 88,
    "text": "function sortedpairs(tbl, sort_function)\r\n   return coroutine.wrap(function() sortedpairs_iterator(tbl, sort_function) end)\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "function run(...)\r\n   local flags, name, version, url_or_dir = util.parse_flags(...)\r\n   \r\n   if not name then\r\n      return nil, \"Missing arguments. \"..util.see_help(\"write_rockspec\")\r\n   end\r\n\r\n   if name and not version then\r\n      url_or_dir = name\r\n      name = nil\r\n   elseif not url_or_dir then\r\n      url_or_dir = version\r\n   end\r\n\r\n   if flags[\"tag\"] == true then\r\n      return nil, \"Incorrect usage: --tag requires an argument. \"..util.see_help(\"write_rockspec\")\r\n   end\r\n   \r\n   if flags[\"tag\"] then\r\n      if not version then\r\n         version = flags[\"tag\"]:gsub(\"^v\", \"\")\r\n      end\r\n   end\r\n   \r\n   local protocol, pathname = dir.split_url(url_or_dir)\r\n   if not fetch.is_basic_protocol(protocol) then\r\n      if not name then\r\n         name = dir.base_name(url_or_dir):gsub(\"%.[^.]+$\", \"\")\r\n      end\r\n      if not version then\r\n         version = \"scm\"\r\n      end\r\n   elseif protocol ~= \"file\" then\r\n      local filename = dir.base_name(url_or_dir)\r\n      local newname, newversion = filename:match(\"(.*)-([^-]+)\")\r\n      if (not name) and newname then\r\n         name = newname\r\n      end\r\n      if (not version) and newversion then\r\n         version = newversion:gsub(\".[a-z]+$\", \"\"):gsub(\".tar$\", \"\")\r\n      end\r\n      if not (name and version) then\r\n         return nil, \"Missing name and version arguments. \"..util.see_help(\"write_rockspec\")\r\n      end\r\n   elseif not version then\r\n      return nil, \"Missing name and version arguments. \"..util.see_help(\"write_rockspec\")\r\n   end\r\n\r\n   local filename = flags[\"output\"] or dir.path(fs.current_dir(), name:lower()..\"-\"..version..\"-1.rockspec\")\r\n   \r\n   if not flags[\"homepage\"] and url_or_dir:match(\"^git://github.com\") then\r\n      flags[\"homepage\"] = \"http://\"..url_or_dir:match(\"^[^:]+://(.*)\")\r\n   end\r\n\r\n   local rockspec = {\r\n      package = name,\r\n      name = name:lower(),\r\n      version = version..\"-1\",\r\n      source = {\r\n         url = \"*** please add URL for source tarball, zip or repository here ***\",\r\n         tag = flags[\"tag\"],\r\n      },\r\n      description = {\r\n         summary = flags[\"summary\"] or \"*** please specify description summary ***\",\r\n         detailed = flags[\"detailed\"] or \"*** please enter a detailed description ***\",\r\n         homepage = flags[\"homepage\"] or \"*** please enter a project homepage ***\",\r\n         license = flags[\"license\"] or \"*** please specify a license ***\",\r\n      },\r\n      dependencies = {},\r\n      build = {},\r\n   }\r\n   path.configure_paths(rockspec)\r\n   rockspec.source.protocol = protocol\r\n   \r\n   configure_lua_version(rockspec, flags[\"lua-version\"])\r\n   \r\n   local local_dir = url_or_dir\r\n\r\n   if url_or_dir:match(\"://\") then\r\n      rockspec.source.url = url_or_dir\r\n      rockspec.source.file = dir.base_name(url_or_dir)\r\n      rockspec.source.dir = \"dummy\"\r\n      if not fetch.is_basic_protocol(rockspec.source.protocol) then\r\n         if version ~= \"scm\" then\r\n            rockspec.source.tag = flags[\"tag\"] or \"v\" .. version\r\n         end\r\n      end\r\n      rockspec.source.dir = nil\r\n      local ok, base_dir, temp_dir = get_url(rockspec)\r\n      if ok then\r\n         if base_dir ~= dir.base_name(url_or_dir) then\r\n            rockspec.source.dir = base_dir\r\n         end\r\n      end\r\n      if base_dir then\r\n         local_dir = dir.path(temp_dir, base_dir)\r\n      else\r\n         local_dir = nil\r\n      end\r\n   end\r\n   \r\n   if not local_dir then\r\n      local_dir = \".\"\r\n   end\r\n   \r\n   local libs = nil\r\n   if flags[\"lib\"] then\r\n      libs = {}\r\n      rockspec.external_dependencies = {}\r\n      for lib in flags[\"lib\"]:gmatch(\"([^,]+)\") do\r\n         table.insert(libs, lib)\r\n         rockspec.external_dependencies[lib:upper()] = {\r\n            library = lib\r\n         }\r\n      end\r\n   end\r\n\r\n   local ok, err = fs.change_dir(local_dir)\r\n   if not ok then return nil, \"Failed reaching files from project - error entering directory \"..local_dir end\r\n\r\n   detect_description(rockspec)\r\n\r\n   local is_mit = show_license(rockspec)\r\n   \r\n   if is_mit and not flags[\"license\"] then\r\n      rockspec.description.license = \"MIT\"\r\n   end\r\n   \r\n   fill_as_builtin(rockspec, libs)\r\n      \r\n   rockspec_cleanup(rockspec)\r\n   \r\n   persist.save_from_table(filename, rockspec, type_check.rockspec_order)\r\n\r\n   util.printout()   \r\n   util.printout(\"Wrote template at \"..filename..\" -- you should now edit and finish it.\")\r\n   util.printout()   \r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 91,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 92,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 93,
    "text": "module",
    "type": "global function"
  }, {
    "id": 94,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 95,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 96,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 97,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 98,
    "text": "open",
    "type": "global function"
  }, {
    "id": 99,
    "text": "type",
    "type": "global function"
  }, {
    "id": 100,
    "text": "require",
    "type": "global function"
  }, {
    "id": 101,
    "text": "util)",
    "type": "module"
  }, {
    "id": 102,
    "text": "",
    "type": "variable container"
  }, {
    "id": 103,
    "text": "",
    "type": "require container"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "global variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "require local variable"
  } ]
}