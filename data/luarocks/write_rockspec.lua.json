{
  "_filename": "write_rockspec.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/write_rockspec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 40
  }, {
    "from": 28,
    "label": "has",
    "to": 41
  }, {
    "from": 28,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 28,
    "label": "has",
    "to": 48
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 26
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 57,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 57,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 26
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 26
  }, {
    "from": 81,
    "label": "has",
    "to": 60
  }, {
    "from": 81,
    "label": "has",
    "to": 61
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 81,
    "label": "has",
    "to": 86
  }, {
    "from": 81,
    "label": "has",
    "to": 87
  }, {
    "from": 81,
    "label": "has",
    "to": 26
  }, {
    "from": 81,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 83
  }, {
    "from": 89,
    "label": "has",
    "to": 26
  }, {
    "from": 89,
    "label": "has",
    "to": 60
  }, {
    "from": 89,
    "label": "has",
    "to": 61
  }, {
    "from": 89,
    "label": "has",
    "to": 26
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 92,
    "label": "has",
    "to": 100
  }, {
    "from": 92,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 92,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 92,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 92,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 48
  }, {
    "from": 92,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 26
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 128,
    "label": "has",
    "to": 135
  }, {
    "from": 128,
    "label": "has",
    "to": 26
  }, {
    "from": 128,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 128,
    "label": "has",
    "to": 139
  }, {
    "from": 128,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 140,
    "label": "has",
    "to": 145
  }, {
    "from": 140,
    "label": "has",
    "to": 146
  }, {
    "from": 140,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 140,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 140,
    "label": "has",
    "to": 151
  }, {
    "from": 128,
    "label": "has",
    "to": 26
  }, {
    "from": 128,
    "label": "has",
    "to": 26
  }, {
    "from": 128,
    "label": "has",
    "to": 152
  }, {
    "from": 128,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 128,
    "label": "has",
    "to": 155
  }, {
    "from": 128,
    "label": "has",
    "to": 156
  }, {
    "from": 128,
    "label": "has",
    "to": 157
  }, {
    "from": 128,
    "label": "has",
    "to": 158
  }, {
    "from": 128,
    "label": "has",
    "to": 159
  }, {
    "from": 128,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 160,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 160,
    "label": "has",
    "to": 167
  }, {
    "from": 160,
    "label": "has",
    "to": 168
  }, {
    "from": 160,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 160,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 128,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 128,
    "label": "has",
    "to": 177
  }, {
    "from": 128,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 178,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 128,
    "label": "has",
    "to": 184
  }, {
    "from": 128,
    "label": "has",
    "to": 185
  }, {
    "from": 128,
    "label": "has",
    "to": 26
  }, {
    "from": 128,
    "label": "has",
    "to": 186
  }, {
    "from": 128,
    "label": "has",
    "to": 187
  }, {
    "from": 128,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 128,
    "label": "has",
    "to": 190
  }, {
    "from": 128,
    "label": "has",
    "to": 191
  }, {
    "from": 128,
    "label": "has",
    "to": 192
  }, {
    "from": 128,
    "label": "has",
    "to": 87
  }, {
    "from": 128,
    "label": "has",
    "to": 193
  }, {
    "from": 128,
    "label": "has",
    "to": 87
  }, {
    "from": 128,
    "label": "has",
    "to": 26
  }, {
    "from": 128,
    "label": "has",
    "to": 194
  }, {
    "from": 128,
    "label": "calls",
    "to": 17
  }, {
    "from": 28,
    "label": "calls",
    "to": 13
  }, {
    "from": 92,
    "label": "calls",
    "to": 16
  }, {
    "from": 92,
    "label": "calls",
    "to": 16
  }, {
    "from": 128,
    "label": "calls",
    "to": 57
  }, {
    "from": 25,
    "label": "calls",
    "to": 3
  }, {
    "from": 128,
    "label": "calls",
    "to": 3
  }, {
    "from": 128,
    "label": "calls",
    "to": 3
  }, {
    "from": 92,
    "label": "calls",
    "to": 89
  }, {
    "from": 92,
    "label": "calls",
    "to": 197
  }, {
    "from": 92,
    "label": "calls",
    "to": 197
  }, {
    "from": 92,
    "label": "calls",
    "to": 197
  }, {
    "from": 92,
    "label": "calls",
    "to": 197
  }, {
    "from": 128,
    "label": "calls",
    "to": 92
  }, {
    "from": 128,
    "label": "calls",
    "to": 28
  }, {
    "from": 28,
    "label": "calls",
    "to": 15
  }, {
    "from": 128,
    "label": "calls",
    "to": 2
  }, {
    "from": 128,
    "label": "calls",
    "to": 2
  }, {
    "from": 128,
    "label": "calls",
    "to": 2
  }, {
    "from": 128,
    "label": "calls",
    "to": 2
  }, {
    "from": 28,
    "label": "calls",
    "to": 7
  }, {
    "from": 73,
    "label": "calls",
    "to": 200
  }, {
    "from": 128,
    "label": "calls",
    "to": 4
  }, {
    "from": 28,
    "label": "calls",
    "to": 196
  }, {
    "from": 81,
    "label": "calls",
    "to": 73
  }, {
    "from": 128,
    "label": "calls",
    "to": 19
  }, {
    "from": 25,
    "label": "calls",
    "to": 201
  }, {
    "from": 128,
    "label": "calls",
    "to": 81
  }, {
    "from": 92,
    "label": "calls",
    "to": 12
  }, {
    "from": 28,
    "label": "calls",
    "to": 5
  }, {
    "from": 128,
    "label": "calls",
    "to": 5
  }, {
    "from": 128,
    "label": "calls",
    "to": 5
  }, {
    "from": 81,
    "label": "calls",
    "to": 23
  }, {
    "from": 128,
    "label": "calls",
    "to": 50
  }, {
    "from": 28,
    "label": "calls",
    "to": 22
  }, {
    "from": 50,
    "label": "calls",
    "to": 22
  }, {
    "from": 25,
    "label": "calls",
    "to": 8
  }, {
    "from": 128,
    "label": "calls",
    "to": 8
  }, {
    "from": 28,
    "label": "calls",
    "to": 11
  }, {
    "from": 50,
    "label": "calls",
    "to": 24
  }, {
    "from": 128,
    "label": "calls",
    "to": 24
  }, {
    "from": 128,
    "label": "calls",
    "to": 24
  }, {
    "from": 128,
    "label": "calls",
    "to": 24
  }, {
    "from": 128,
    "label": "calls",
    "to": 24
  }, {
    "from": 50,
    "label": "calls",
    "to": 199
  }, {
    "from": 50,
    "label": "calls",
    "to": 199
  }, {
    "from": 50,
    "label": "calls",
    "to": 199
  }, {
    "from": 92,
    "label": "calls",
    "to": 199
  }, {
    "from": 128,
    "label": "calls",
    "to": 199
  }, {
    "from": 195,
    "label": "calls",
    "to": 202
  }, {
    "from": 195,
    "label": "calls",
    "to": 202
  }, {
    "from": 195,
    "label": "calls",
    "to": 202
  }, {
    "from": 195,
    "label": "calls",
    "to": 202
  }, {
    "from": 195,
    "label": "calls",
    "to": 202
  }, {
    "from": 195,
    "label": "calls",
    "to": 202
  }, {
    "from": 195,
    "label": "calls",
    "to": 202
  }, {
    "from": 28,
    "label": "calls",
    "to": 14
  }, {
    "from": 92,
    "label": "calls",
    "to": 14
  }, {
    "from": 92,
    "label": "calls",
    "to": 14
  }, {
    "from": 195,
    "label": "calls",
    "to": 198
  }, {
    "from": 57,
    "label": "calls",
    "to": 25
  }, {
    "from": 57,
    "label": "calls",
    "to": 25
  }, {
    "from": 81,
    "label": "calls",
    "to": 25
  }, {
    "from": 81,
    "label": "calls",
    "to": 25
  }, {
    "from": 81,
    "label": "calls",
    "to": 25
  }, {
    "from": 89,
    "label": "calls",
    "to": 25
  }, {
    "from": 28,
    "label": "calls",
    "to": 6
  }, {
    "from": 28,
    "label": "calls",
    "to": 10
  }, {
    "from": 92,
    "label": "calls",
    "to": 10
  }, {
    "from": 128,
    "label": "calls",
    "to": 122
  }, {
    "from": 28,
    "label": "calls",
    "to": 21
  }, {
    "from": 28,
    "label": "calls",
    "to": 21
  }, {
    "from": 128,
    "label": "calls",
    "to": 18
  }, {
    "from": 28,
    "label": "calls",
    "to": 20
  }, {
    "from": 81,
    "label": "calls",
    "to": 20
  }, {
    "from": 81,
    "label": "calls",
    "to": 20
  }, {
    "from": 128,
    "label": "calls",
    "to": 20
  }, {
    "from": 128,
    "label": "calls",
    "to": 20
  }, {
    "from": 128,
    "label": "calls",
    "to": 20
  }, {
    "from": 28,
    "label": "calls",
    "to": 9
  }, {
    "from": 92,
    "label": "calls",
    "to": 9
  }, {
    "from": 128,
    "label": "calls",
    "to": 9
  }, {
    "from": 1,
    "label": "contains",
    "to": 195
  }, {
    "from": 195,
    "label": "declares",
    "to": 25
  }, {
    "from": 195,
    "label": "declares",
    "to": 28
  }, {
    "from": 195,
    "label": "declares",
    "to": 50
  }, {
    "from": 195,
    "label": "declares",
    "to": 57
  }, {
    "from": 195,
    "label": "declares",
    "to": 73
  }, {
    "from": 195,
    "label": "declares",
    "to": 81
  }, {
    "from": 195,
    "label": "declares",
    "to": 89
  }, {
    "from": 195,
    "label": "declares",
    "to": 92
  }, {
    "from": 195,
    "label": "declares",
    "to": 122
  }, {
    "from": 195,
    "label": "declares",
    "to": 128
  }, {
    "from": 1,
    "label": "contains",
    "to": 210
  }, {
    "from": 1,
    "label": "contains",
    "to": 211
  }, {
    "from": 210,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 213,
    "label": "assigns",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 210,
    "label": "initializes",
    "to": 218
  }, {
    "from": 210,
    "label": "initializes",
    "to": 219
  }, {
    "from": 210,
    "label": "initializes",
    "to": 220
  }, {
    "from": 211,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "requires",
    "to": 205
  }, {
    "from": 211,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "requires",
    "to": 204
  }, {
    "from": 211,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "requires",
    "to": 206
  }, {
    "from": 211,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "requires",
    "to": 207
  }, {
    "from": 211,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "requires",
    "to": 208
  }, {
    "from": 211,
    "label": "initializes",
    "to": 226
  }, {
    "from": 226,
    "label": "requires",
    "to": 209
  }, {
    "from": 211,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "requires",
    "to": 203
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "write_rockspec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function base_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n\r\n   local base = pathname:gsub(\"[/\\\\]*$\", \"\"):match(\".*[/\\\\]([^/\\\\]*)\")\r\n   return base or pathname\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function split_url(url)\r\n   assert(type(url) == \"string\")\r\n   \r\n   local protocol, pathname = url:match(\"^([^:]*)://(.*)\")\r\n   if not protocol then\r\n      protocol = \"file\"\r\n      pathname = url\r\n   end\r\n   return protocol, pathname\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function is_basic_protocol(protocol, remote)\r\n   return protocol == \"http\" or protocol == \"https\" or protocol == \"ftp\" or (not remote and protocol == \"file\")\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function url_to_base_dir(url)\r\n   local base = dir.base_name(url)\r\n   return base:gsub(\"%.[^.]*$\", \"\"):gsub(\"%.tar$\", \"\")\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function fetch_sources(rockspec, extract, dest_dir)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(extract) == \"boolean\")\r\n   assert(type(dest_dir) == \"string\" or not dest_dir)\r\n\r\n   local protocol = rockspec.source.protocol\r\n   local ok, proto\r\n   if is_basic_protocol(protocol) then\r\n      proto = require(\"luarocks.fetch\")\r\n   else\r\n      ok, proto = pcall(require, \"luarocks.fetch.\"..protocol:gsub(\"[+-]\", \"_\"))\r\n      if not ok then\r\n         return nil, \"Unknown protocol \"..protocol\r\n      end\r\n   end\r\n   \r\n   if cfg.only_sources_from\r\n   and rockspec.source.pathname\r\n   and #rockspec.source.pathname > 0 then\r\n      if #cfg.only_sources_from == 0 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- download from remote servers disabled\"\r\n      elseif rockspec.source.pathname:find(cfg.only_sources_from, 1, true) ~= 1 then\r\n         return nil, \"Can't download \"..rockspec.source.url..\" -- only downloading from \"..cfg.only_sources_from\r\n      end\r\n   end\r\n   return proto.get_sources(rockspec, extract, dest_dir)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function current_dir()\r\n   return lfs.currentdir()\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function change_dir(d)\r\n   table.insert(dir_stack, lfs.currentdir())\r\n   d = dir.normalize(d)\r\n   return lfs.chdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function pop_dir()\r\n   local d = table.remove(dir_stack)\r\n   if d then\r\n      lfs.chdir(d)\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function list_dir(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   at = dir.normalize(at)\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   for file in lfs.dir(at) do\r\n      if file ~= \".\" and file ~= \"..\" then\r\n         table.insert(result, file)\r\n      end\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function find(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   at = dir.normalize(at)\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   recursive_find(at, \"\", result)\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function get_md5(file)\r\n   file = fs.absolute_name(file)\r\n   local file = io.open(file, \"rb\")\r\n   if not file then return nil, \"Failed to open file for reading: \"..file end\r\n   local computed = md5.sumhexa(file:read(\"*a\"))\r\n   file:close()\r\n   if computed then return computed end\r\n   return nil, \"Failed to compute MD5 hash for file \"..file\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function path_to_module(file)\r\n   assert(type(file) == \"string\")\r\n\r\n   local name = file:match(\"(.*)%.\"..cfg.lua_extension..\"$\")\r\n   if name then\r\n      name = name:gsub(dir.separator, \".\")\r\n      local init = name:match(\"(.*)%.init$\")\r\n      if init then\r\n         name = init\r\n      end\r\n   else\r\n      name = file:match(\"(.*)%.\"..cfg.lib_extension..\"$\")\r\n      if name then\r\n         name = name:gsub(dir.separator, \".\")\r\n      end\r\n   end\r\n   if not name then name = file end\r\n   name = name:gsub(\"^%.+\", \"\"):gsub(\"%.+$\", \"\")\r\n   return name\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function configure_paths(rockspec)\r\n   assert(type(rockspec) == \"table\")\r\n   local vars = {}\r\n   for k,v in pairs(cfg.variables) do\r\n      vars[k] = v\r\n   end\r\n   local name, version = rockspec.name, rockspec.version\r\n   vars.PREFIX = install_dir(name, version)\r\n   vars.LUADIR = lua_dir(name, version)\r\n   vars.LIBDIR = lib_dir(name, version)\r\n   vars.CONFDIR = conf_dir(name, version)\r\n   vars.BINDIR = bin_dir(name, version)\r\n   vars.DOCDIR = doc_dir(name, version)\r\n   rockspec.variables = vars\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function save_from_table(filename, tbl, field_order)\r\n   local out = io.open(filename, \"w\")\r\n   if not out then\r\n      return nil, \"Cannot create file at \"..filename\r\n   end\r\n   write_table(out, tbl, field_order)\r\n   out:close()\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function warning(msg)\r\n   printerr(\"Warning: \"..msg)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function title(msg, porcelain, underline)\r\n   if porcelain then return end\r\n   printout()\r\n   printout(msg)\r\n   printout((underline or \"-\"):rep(#msg))\r\n   printout()\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function see_help(command, program)\r\n   return \"See '\"..this_program(program or \"luarocks\")..' help '..command..\"'.\"\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local function open_file(name)\r\n   return io.open(dir.path(fs.current_dir(), name), \"r\")\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function get_url(rockspec)\r\n   local url = rockspec.source.url\r\n   local file, temp_dir, err_code, err_file, err_temp_dir = fetch.fetch_sources(rockspec, false)\r\n   if err_code == \"source.dir\" then\r\n      file, temp_dir = err_file, err_temp_dir\r\n   elseif not file then\r\n      util.warning(\"Could not fetch sources - \"..temp_dir)\r\n      return false\r\n   end\r\n   util.printout(\"File successfully downloaded. Making checksum and checking base dir...\")\r\n   local md5 = nil\r\n   if fetch.is_basic_protocol(rockspec.source.protocol) then\r\n      rockspec.source.md5 = fs.get_md5(file)\r\n   end\r\n   local ok, err = fs.change_dir(temp_dir)\r\n   if not ok then return false end\r\n   fs.unpack_archive(file)\r\n   local base_dir = fetch.url_to_base_dir(url)\r\n   if not fs.exists(base_dir) then\r\n      util.printerr(\"Directory \"..base_dir..\" not found\")\r\n      local files = fs.list_dir()\r\n      if files[1] and fs.is_dir(files[1]) then\r\n         util.printerr(\"Found \"..files[1])\r\n         base_dir = files[1]\r\n      end\r\n   end\r\n   fs.pop_dir()\r\n   return true, base_dir, temp_dir\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local url = rockspec.source.url",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local file, temp_dir, err_code, err_file, err_temp_dir = fetch.fetch_sources(rockspec, false)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if err_code == \"source.dir\" then\r\n      file, temp_dir = err_file, err_temp_dir\r\n   elseif not file then\r\n      util.warning(\"Could not fetch sources - \"..temp_dir)\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "file, temp_dir = err_file, err_temp_dir",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "util.warning(\"Could not fetch sources - \"..temp_dir)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "util.printout(\"File successfully downloaded. Making checksum and checking base dir...\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "local md5 = nil",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if fetch.is_basic_protocol(rockspec.source.protocol) then\r\n      rockspec.source.md5 = fs.get_md5(file)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "rockspec.source.md5 = fs.get_md5(file)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "local ok, err = fs.change_dir(temp_dir)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if not ok then return false end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "fs.unpack_archive(file)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local base_dir = fetch.url_to_base_dir(url)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if not fs.exists(base_dir) then\r\n      util.printerr(\"Directory \"..base_dir..\" not found\")\r\n      local files = fs.list_dir()\r\n      if files[1] and fs.is_dir(files[1]) then\r\n         util.printerr(\"Found \"..files[1])\r\n         base_dir = files[1]\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "util.printerr(\"Directory \"..base_dir..\" not found\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local files = fs.list_dir()",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if files[1] and fs.is_dir(files[1]) then\r\n         util.printerr(\"Found \"..files[1])\r\n         base_dir = files[1]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "util.printerr(\"Found \"..files[1])",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "base_dir = files[1]",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "fs.pop_dir()",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function configure_lua_version(rockspec, luaver)\r\n   if luaver == \"5.1\" then\r\n      table.insert(rockspec.dependencies, \"lua ~> 5.1\")\r\n   elseif luaver == \"5.2\" then\r\n      table.insert(rockspec.dependencies, \"lua ~> 5.2\")\r\n   elseif luaver == \"5.1,5.2\" then\r\n      table.insert(rockspec.dependencies, \"lua >= 5.1, < 5.3\")\r\n   else\r\n      util.warning(\"Please specify supported Lua version with --lua-version=<ver>. \"..util.see_help(\"write_rockspec\"))\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "if luaver == \"5.1\" then\r\n      table.insert(rockspec.dependencies, \"lua ~> 5.1\")\r\n   elseif luaver == \"5.2\" then\r\n      table.insert(rockspec.dependencies, \"lua ~> 5.2\")\r\n   elseif luaver == \"5.1,5.2\" then\r\n      table.insert(rockspec.dependencies, \"lua >= 5.1, < 5.3\")\r\n   else\r\n      util.warning(\"Please specify supported Lua version with --lua-version=<ver>. \"..util.see_help(\"write_rockspec\"))\r\n   end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "table.insert(rockspec.dependencies, \"lua ~> 5.1\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "table.insert(rockspec.dependencies, \"lua ~> 5.2\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "table.insert(rockspec.dependencies, \"lua >= 5.1, < 5.3\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "util.warning(\"Please specify supported Lua version with --lua-version=<ver>. \"..util.see_help(\"write_rockspec\"))",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function detect_description(rockspec)\r\n   local fd = open_file(\"README.md\") or open_file(\"README\")\r\n   if not fd then return end\r\n   local data = fd:read(\"*a\")\r\n   fd:close()\r\n   local paragraph = data:match(\"\\n\\n([^%[].-)\\n\\n\")\r\n   if not paragraph then paragraph = data:match(\"\\n\\n(.*)\") end\r\n   if paragraph then\r\n      if #paragraph < 80 then\r\n         rockspec.description.summary = paragraph:gsub(\"\\n\", \"\")\r\n         rockspec.description.detailed = paragraph\r\n      else\r\n         local summary = paragraph:gsub(\"\\n\", \" \"):match(\"([^.]*%.) \")\r\n         if summary then\r\n            rockspec.description.summary = summary:gsub(\"\\n\", \"\")\r\n         end\r\n         rockspec.description.detailed = paragraph\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local fd = open_file(\"README.md\") or open_file(\"README\")",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if not fd then return end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "local data = fd:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "fd:close()",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "local paragraph = data:match(\"\\n\\n([^%[].-)\\n\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if not paragraph then paragraph = data:match(\"\\n\\n(.*)\") end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "paragraph = data:match(\"\\n\\n(.*)\")",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if paragraph then\r\n      if #paragraph < 80 then\r\n         rockspec.description.summary = paragraph:gsub(\"\\n\", \"\")\r\n         rockspec.description.detailed = paragraph\r\n      else\r\n         local summary = paragraph:gsub(\"\\n\", \" \"):match(\"([^.]*%.) \")\r\n         if summary then\r\n            rockspec.description.summary = summary:gsub(\"\\n\", \"\")\r\n         end\r\n         rockspec.description.detailed = paragraph\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "if #paragraph < 80 then\r\n         rockspec.description.summary = paragraph:gsub(\"\\n\", \"\")\r\n         rockspec.description.detailed = paragraph\r\n      else\r\n         local summary = paragraph:gsub(\"\\n\", \" \"):match(\"([^.]*%.) \")\r\n         if summary then\r\n            rockspec.description.summary = summary:gsub(\"\\n\", \"\")\r\n         end\r\n         rockspec.description.detailed = paragraph\r\n      end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "rockspec.description.summary = paragraph:gsub(\"\\n\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "rockspec.description.detailed = paragraph",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "local summary = paragraph:gsub(\"\\n\", \" \"):match(\"([^.]*%.) \")",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if summary then\r\n            rockspec.description.summary = summary:gsub(\"\\n\", \"\")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "rockspec.description.summary = summary:gsub(\"\\n\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "local function detect_mit_license(data)\r\n   local strip_copyright = (data:gsub(\"Copyright [^\\n]*\\n\", \"\"))\r\n   local sum = 0\r\n   for i = 1, #strip_copyright do\r\n      local num = string.byte(strip_copyright:sub(i,i))\r\n      if num > 32 and num <= 128 then\r\n         sum = sum + num\r\n      end\r\n   end\r\n   return sum == 78656\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "local strip_copyright = (data:gsub(\"Copyright [^\\n]*\\n\", \"\"))",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local sum = 0",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "for i = 1, #strip_copyright do\r\n      local num = string.byte(strip_copyright:sub(i,i))\r\n      if num > 32 and num <= 128 then\r\n         sum = sum + num\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 77,
    "text": "local num = string.byte(strip_copyright:sub(i,i))",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if num > 32 and num <= 128 then\r\n         sum = sum + num\r\n      end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "sum = sum + num",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "local function show_license(rockspec)\r\n   local fd = open_file(\"COPYING\") or open_file(\"LICENSE\") or open_file(\"MIT-LICENSE.txt\")\r\n   if not fd then return nil end\r\n   local data = fd:read(\"*a\")\r\n   fd:close()\r\n   local is_mit = detect_mit_license(data)\r\n   util.title(\"License for \"..rockspec.package..\":\")\r\n   util.printout(data)\r\n   util.printout()\r\n   return is_mit\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "local fd = open_file(\"COPYING\") or open_file(\"LICENSE\") or open_file(\"MIT-LICENSE.txt\")",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "if not fd then return nil end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "local is_mit = detect_mit_license(data)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "util.title(\"License for \"..rockspec.package..\":\")",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "util.printout(data)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "util.printout()",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "local function get_cmod_name(file)\r\n   local fd = open_file(file)\r\n   if not fd then return nil end\r\n   local data = fd:read(\"*a\")\r\n   fd:close()\r\n   return (data:match(\"int%s+luaopen_([a-zA-Z0-9_]+)\"))\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "local fd = open_file(file)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "local function fill_as_builtin(rockspec, libs)\r\n   rockspec.build.type = \"builtin\"\r\n   rockspec.build.modules = {}\r\n   local prefix = \"\"\r\n\r\n   for _, parent in ipairs({\"src\", \"lua\"}) do\r\n      if fs.is_dir(parent) then\r\n         fs.change_dir(parent)\r\n         prefix = parent..\"/\"\r\n         break\r\n      end\r\n   end\r\n   \r\n   local incdirs, libdirs\r\n   if libs then\r\n      incdirs, libdirs = {}, {}\r\n      for _, lib in ipairs(libs) do\r\n         local upper = lib:upper()\r\n         incdirs[#incdirs+1] = \"$(\"..upper..\"_INCDIR)\"\r\n         libdirs[#libdirs+1] = \"$(\"..upper..\"_LIBDIR)\"\r\n      end\r\n   end\r\n\r\n   for _, file in ipairs(fs.find()) do\r\n      local luamod = file:match(\"(.*)%.lua$\")\r\n      if luamod and not luamod_blacklist[luamod] then\r\n         rockspec.build.modules[path.path_to_module(file)] = prefix..file\r\n      else\r\n         local cmod = file:match(\"(.*)%.c$\")\r\n         if cmod then\r\n            local modname = get_cmod_name(file) or path.path_to_module(file:gsub(\"%.c$\", \".lua\"))\r\n            rockspec.build.modules[modname] = {\r\n               sources = prefix..file,\r\n               libraries = libs,\r\n               incdirs = incdirs,\r\n               libdirs = libdirs,\r\n            }\r\n         end\r\n      end\r\n   end\r\n   \r\n   for _, directory in ipairs({ \"doc\", \"docs\", \"samples\", \"tests\" }) do\r\n      if fs.is_dir(directory) then\r\n         if not rockspec.build.copy_directories then\r\n            rockspec.build.copy_directories = {}\r\n         end\r\n         table.insert(rockspec.build.copy_directories, directory)\r\n      end\r\n   end\r\n   \r\n   if prefix ~= \"\" then\r\n      fs.pop_dir()\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "rockspec.build.type = \"builtin\"",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "rockspec.build.modules = {}",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "local prefix = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "for _, parent in ipairs({\"src\", \"lua\"}) do\r\n      if fs.is_dir(parent) then\r\n         fs.change_dir(parent)\r\n         prefix = parent..\"/\"\r\n         break\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "if fs.is_dir(parent) then\r\n         fs.change_dir(parent)\r\n         prefix = parent..\"/\"\r\n         break\r\n      end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "fs.change_dir(parent)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "prefix = parent..\"/\"",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "local incdirs, libdirs",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "if libs then\r\n      incdirs, libdirs = {}, {}\r\n      for _, lib in ipairs(libs) do\r\n         local upper = lib:upper()\r\n         incdirs[#incdirs+1] = \"$(\"..upper..\"_INCDIR)\"\r\n         libdirs[#libdirs+1] = \"$(\"..upper..\"_LIBDIR)\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "incdirs, libdirs = {}, {}",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "for _, lib in ipairs(libs) do\r\n         local upper = lib:upper()\r\n         incdirs[#incdirs+1] = \"$(\"..upper..\"_INCDIR)\"\r\n         libdirs[#libdirs+1] = \"$(\"..upper..\"_LIBDIR)\"\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 104,
    "text": "local upper = lib:upper()",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "incdirs[#incdirs+1] = \"$(\"..upper..\"_INCDIR)\"",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "libdirs[#libdirs+1] = \"$(\"..upper..\"_LIBDIR)\"",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "for _, file in ipairs(fs.find()) do\r\n      local luamod = file:match(\"(.*)%.lua$\")\r\n      if luamod and not luamod_blacklist[luamod] then\r\n         rockspec.build.modules[path.path_to_module(file)] = prefix..file\r\n      else\r\n         local cmod = file:match(\"(.*)%.c$\")\r\n         if cmod then\r\n            local modname = get_cmod_name(file) or path.path_to_module(file:gsub(\"%.c$\", \".lua\"))\r\n            rockspec.build.modules[modname] = {\r\n               sources = prefix..file,\r\n               libraries = libs,\r\n               incdirs = incdirs,\r\n               libdirs = libdirs,\r\n            }\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 108,
    "text": "local luamod = file:match(\"(.*)%.lua$\")",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if luamod and not luamod_blacklist[luamod] then\r\n         rockspec.build.modules[path.path_to_module(file)] = prefix..file\r\n      else\r\n         local cmod = file:match(\"(.*)%.c$\")\r\n         if cmod then\r\n            local modname = get_cmod_name(file) or path.path_to_module(file:gsub(\"%.c$\", \".lua\"))\r\n            rockspec.build.modules[modname] = {\r\n               sources = prefix..file,\r\n               libraries = libs,\r\n               incdirs = incdirs,\r\n               libdirs = libdirs,\r\n            }\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "rockspec.build.modules[path.path_to_module(file)] = prefix..file",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "local cmod = file:match(\"(.*)%.c$\")",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "if cmod then\r\n            local modname = get_cmod_name(file) or path.path_to_module(file:gsub(\"%.c$\", \".lua\"))\r\n            rockspec.build.modules[modname] = {\r\n               sources = prefix..file,\r\n               libraries = libs,\r\n               incdirs = incdirs,\r\n               libdirs = libdirs,\r\n            }\r\n         end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "local modname = get_cmod_name(file) or path.path_to_module(file:gsub(\"%.c$\", \".lua\"))",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "rockspec.build.modules[modname] = {\r\n               sources = prefix..file,\r\n               libraries = libs,\r\n               incdirs = incdirs,\r\n               libdirs = libdirs,\r\n            }",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "for _, directory in ipairs({ \"doc\", \"docs\", \"samples\", \"tests\" }) do\r\n      if fs.is_dir(directory) then\r\n         if not rockspec.build.copy_directories then\r\n            rockspec.build.copy_directories = {}\r\n         end\r\n         table.insert(rockspec.build.copy_directories, directory)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "if fs.is_dir(directory) then\r\n         if not rockspec.build.copy_directories then\r\n            rockspec.build.copy_directories = {}\r\n         end\r\n         table.insert(rockspec.build.copy_directories, directory)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "if not rockspec.build.copy_directories then\r\n            rockspec.build.copy_directories = {}\r\n         end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "rockspec.build.copy_directories = {}",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "table.insert(rockspec.build.copy_directories, directory)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "if prefix ~= \"\" then\r\n      fs.pop_dir()\r\n   end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function rockspec_cleanup(rockspec)\r\n   rockspec.source.file = nil\r\n   rockspec.source.protocol = nil\r\n   rockspec.variables = nil\r\n   rockspec.name = nil\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "rockspec.source.file = nil",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "rockspec.source.protocol = nil",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "rockspec.variables = nil",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "rockspec.name = nil",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function run(...)\r\n   local flags, name, version, url_or_dir = util.parse_flags(...)\r\n   \r\n   if not name then\r\n      return nil, \"Missing arguments. \"..util.see_help(\"write_rockspec\")\r\n   end\r\n\r\n   if name and not version then\r\n      url_or_dir = name\r\n      name = nil\r\n   elseif not url_or_dir then\r\n      url_or_dir = version\r\n   end\r\n\r\n   if flags[\"tag\"] == true then\r\n      return nil, \"Incorrect usage: --tag requires an argument. \"..util.see_help(\"write_rockspec\")\r\n   end\r\n   \r\n   if flags[\"tag\"] then\r\n      if not version then\r\n         version = flags[\"tag\"]:gsub(\"^v\", \"\")\r\n      end\r\n   end\r\n   \r\n   local protocol, pathname = dir.split_url(url_or_dir)\r\n   if not fetch.is_basic_protocol(protocol) then\r\n      if not name then\r\n         name = dir.base_name(url_or_dir):gsub(\"%.[^.]+$\", \"\")\r\n      end\r\n      if not version then\r\n         version = \"scm\"\r\n      end\r\n   elseif protocol ~= \"file\" then\r\n      local filename = dir.base_name(url_or_dir)\r\n      local newname, newversion = filename:match(\"(.*)-([^-]+)\")\r\n      if (not name) and newname then\r\n         name = newname\r\n      end\r\n      if (not version) and newversion then\r\n         version = newversion:gsub(\".[a-z]+$\", \"\"):gsub(\".tar$\", \"\")\r\n      end\r\n      if not (name and version) then\r\n         return nil, \"Missing name and version arguments. \"..util.see_help(\"write_rockspec\")\r\n      end\r\n   elseif not version then\r\n      return nil, \"Missing name and version arguments. \"..util.see_help(\"write_rockspec\")\r\n   end\r\n\r\n   local filename = flags[\"output\"] or dir.path(fs.current_dir(), name:lower()..\"-\"..version..\"-1.rockspec\")\r\n   \r\n   if not flags[\"homepage\"] and url_or_dir:match(\"^git://github.com\") then\r\n      flags[\"homepage\"] = \"http://\"..url_or_dir:match(\"^[^:]+://(.*)\")\r\n   end\r\n\r\n   local rockspec = {\r\n      package = name,\r\n      name = name:lower(),\r\n      version = version..\"-1\",\r\n      source = {\r\n         url = \"*** please add URL for source tarball, zip or repository here ***\",\r\n         tag = flags[\"tag\"],\r\n      },\r\n      description = {\r\n         summary = flags[\"summary\"] or \"*** please specify description summary ***\",\r\n         detailed = flags[\"detailed\"] or \"*** please enter a detailed description ***\",\r\n         homepage = flags[\"homepage\"] or \"*** please enter a project homepage ***\",\r\n         license = flags[\"license\"] or \"*** please specify a license ***\",\r\n      },\r\n      dependencies = {},\r\n      build = {},\r\n   }\r\n   path.configure_paths(rockspec)\r\n   rockspec.source.protocol = protocol\r\n   \r\n   configure_lua_version(rockspec, flags[\"lua-version\"])\r\n   \r\n   local local_dir = url_or_dir\r\n\r\n   if url_or_dir:match(\"://\") then\r\n      rockspec.source.url = url_or_dir\r\n      rockspec.source.file = dir.base_name(url_or_dir)\r\n      rockspec.source.dir = \"dummy\"\r\n      if not fetch.is_basic_protocol(rockspec.source.protocol) then\r\n         if version ~= \"scm\" then\r\n            rockspec.source.tag = flags[\"tag\"] or \"v\" .. version\r\n         end\r\n      end\r\n      rockspec.source.dir = nil\r\n      local ok, base_dir, temp_dir = get_url(rockspec)\r\n      if ok then\r\n         if base_dir ~= dir.base_name(url_or_dir) then\r\n            rockspec.source.dir = base_dir\r\n         end\r\n      end\r\n      if base_dir then\r\n         local_dir = dir.path(temp_dir, base_dir)\r\n      else\r\n         local_dir = nil\r\n      end\r\n   end\r\n   \r\n   if not local_dir then\r\n      local_dir = \".\"\r\n   end\r\n   \r\n   local libs = nil\r\n   if flags[\"lib\"] then\r\n      libs = {}\r\n      rockspec.external_dependencies = {}\r\n      for lib in flags[\"lib\"]:gmatch(\"([^,]+)\") do\r\n         table.insert(libs, lib)\r\n         rockspec.external_dependencies[lib:upper()] = {\r\n            library = lib\r\n         }\r\n      end\r\n   end\r\n\r\n   local ok, err = fs.change_dir(local_dir)\r\n   if not ok then return nil, \"Failed reaching files from project - error entering directory \"..local_dir end\r\n\r\n   detect_description(rockspec)\r\n\r\n   local is_mit = show_license(rockspec)\r\n   \r\n   if is_mit and not flags[\"license\"] then\r\n      rockspec.description.license = \"MIT\"\r\n   end\r\n   \r\n   fill_as_builtin(rockspec, libs)\r\n      \r\n   rockspec_cleanup(rockspec)\r\n   \r\n   persist.save_from_table(filename, rockspec, type_check.rockspec_order)\r\n\r\n   util.printout()   \r\n   util.printout(\"Wrote template at \"..filename..\" -- you should now edit and finish it.\")\r\n   util.printout()   \r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local flags, name, version, url_or_dir = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "if not name then\r\n      return nil, \"Missing arguments. \"..util.see_help(\"write_rockspec\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "if name and not version then\r\n      url_or_dir = name\r\n      name = nil\r\n   elseif not url_or_dir then\r\n      url_or_dir = version\r\n   end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "url_or_dir = name",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "name = nil",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "url_or_dir = version",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "if flags[\"tag\"] == true then\r\n      return nil, \"Incorrect usage: --tag requires an argument. \"..util.see_help(\"write_rockspec\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "if flags[\"tag\"] then\r\n      if not version then\r\n         version = flags[\"tag\"]:gsub(\"^v\", \"\")\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "if not version then\r\n         version = flags[\"tag\"]:gsub(\"^v\", \"\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "version = flags[\"tag\"]:gsub(\"^v\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "local protocol, pathname = dir.split_url(url_or_dir)",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "if not fetch.is_basic_protocol(protocol) then\r\n      if not name then\r\n         name = dir.base_name(url_or_dir):gsub(\"%.[^.]+$\", \"\")\r\n      end\r\n      if not version then\r\n         version = \"scm\"\r\n      end\r\n   elseif protocol ~= \"file\" then\r\n      local filename = dir.base_name(url_or_dir)\r\n      local newname, newversion = filename:match(\"(.*)-([^-]+)\")\r\n      if (not name) and newname then\r\n         name = newname\r\n      end\r\n      if (not version) and newversion then\r\n         version = newversion:gsub(\".[a-z]+$\", \"\"):gsub(\".tar$\", \"\")\r\n      end\r\n      if not (name and version) then\r\n         return nil, \"Missing name and version arguments. \"..util.see_help(\"write_rockspec\")\r\n      end\r\n   elseif not version then\r\n      return nil, \"Missing name and version arguments. \"..util.see_help(\"write_rockspec\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "if not name then\r\n         name = dir.base_name(url_or_dir):gsub(\"%.[^.]+$\", \"\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "name = dir.base_name(url_or_dir):gsub(\"%.[^.]+$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "if not version then\r\n         version = \"scm\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "version = \"scm\"",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "local filename = dir.base_name(url_or_dir)",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "local newname, newversion = filename:match(\"(.*)-([^-]+)\")",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "if (not name) and newname then\r\n         name = newname\r\n      end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "name = newname",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "if (not version) and newversion then\r\n         version = newversion:gsub(\".[a-z]+$\", \"\"):gsub(\".tar$\", \"\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "version = newversion:gsub(\".[a-z]+$\", \"\"):gsub(\".tar$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "if not (name and version) then\r\n         return nil, \"Missing name and version arguments. \"..util.see_help(\"write_rockspec\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "local filename = flags[\"output\"] or dir.path(fs.current_dir(), name:lower()..\"-\"..version..\"-1.rockspec\")",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "if not flags[\"homepage\"] and url_or_dir:match(\"^git://github.com\") then\r\n      flags[\"homepage\"] = \"http://\"..url_or_dir:match(\"^[^:]+://(.*)\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "flags[\"homepage\"] = \"http://\"..url_or_dir:match(\"^[^:]+://(.*)\")",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "local rockspec = {\r\n      package = name,\r\n      name = name:lower(),\r\n      version = version..\"-1\",\r\n      source = {\r\n         url = \"*** please add URL for source tarball, zip or repository here ***\",\r\n         tag = flags[\"tag\"],\r\n      },\r\n      description = {\r\n         summary = flags[\"summary\"] or \"*** please specify description summary ***\",\r\n         detailed = flags[\"detailed\"] or \"*** please enter a detailed description ***\",\r\n         homepage = flags[\"homepage\"] or \"*** please enter a project homepage ***\",\r\n         license = flags[\"license\"] or \"*** please specify a license ***\",\r\n      },\r\n      dependencies = {},\r\n      build = {},\r\n   }",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "path.configure_paths(rockspec)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "rockspec.source.protocol = protocol",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "configure_lua_version(rockspec, flags[\"lua-version\"])",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "local local_dir = url_or_dir",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "if url_or_dir:match(\"://\") then\r\n      rockspec.source.url = url_or_dir\r\n      rockspec.source.file = dir.base_name(url_or_dir)\r\n      rockspec.source.dir = \"dummy\"\r\n      if not fetch.is_basic_protocol(rockspec.source.protocol) then\r\n         if version ~= \"scm\" then\r\n            rockspec.source.tag = flags[\"tag\"] or \"v\" .. version\r\n         end\r\n      end\r\n      rockspec.source.dir = nil\r\n      local ok, base_dir, temp_dir = get_url(rockspec)\r\n      if ok then\r\n         if base_dir ~= dir.base_name(url_or_dir) then\r\n            rockspec.source.dir = base_dir\r\n         end\r\n      end\r\n      if base_dir then\r\n         local_dir = dir.path(temp_dir, base_dir)\r\n      else\r\n         local_dir = nil\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "rockspec.source.url = url_or_dir",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "rockspec.source.file = dir.base_name(url_or_dir)",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "rockspec.source.dir = \"dummy\"",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "if not fetch.is_basic_protocol(rockspec.source.protocol) then\r\n         if version ~= \"scm\" then\r\n            rockspec.source.tag = flags[\"tag\"] or \"v\" .. version\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "if version ~= \"scm\" then\r\n            rockspec.source.tag = flags[\"tag\"] or \"v\" .. version\r\n         end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "rockspec.source.tag = flags[\"tag\"] or \"v\" .. version",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "rockspec.source.dir = nil",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "local ok, base_dir, temp_dir = get_url(rockspec)",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if ok then\r\n         if base_dir ~= dir.base_name(url_or_dir) then\r\n            rockspec.source.dir = base_dir\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "if base_dir ~= dir.base_name(url_or_dir) then\r\n            rockspec.source.dir = base_dir\r\n         end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "rockspec.source.dir = base_dir",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "if base_dir then\r\n         local_dir = dir.path(temp_dir, base_dir)\r\n      else\r\n         local_dir = nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "local_dir = dir.path(temp_dir, base_dir)",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "local_dir = nil",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "if not local_dir then\r\n      local_dir = \".\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "local_dir = \".\"",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "local libs = nil",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if flags[\"lib\"] then\r\n      libs = {}\r\n      rockspec.external_dependencies = {}\r\n      for lib in flags[\"lib\"]:gmatch(\"([^,]+)\") do\r\n         table.insert(libs, lib)\r\n         rockspec.external_dependencies[lib:upper()] = {\r\n            library = lib\r\n         }\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "libs = {}",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "rockspec.external_dependencies = {}",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "for lib in flags[\"lib\"]:gmatch(\"([^,]+)\") do\r\n         table.insert(libs, lib)\r\n         rockspec.external_dependencies[lib:upper()] = {\r\n            library = lib\r\n         }\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 182,
    "text": "table.insert(libs, lib)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "rockspec.external_dependencies[lib:upper()] = {\r\n            library = lib\r\n         }",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "local ok, err = fs.change_dir(local_dir)",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "if not ok then return nil, \"Failed reaching files from project - error entering directory \"..local_dir end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "detect_description(rockspec)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "local is_mit = show_license(rockspec)",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "if is_mit and not flags[\"license\"] then\r\n      rockspec.description.license = \"MIT\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 189,
    "text": "rockspec.description.license = \"MIT\"",
    "type": "statement:assign"
  }, {
    "id": 190,
    "text": "fill_as_builtin(rockspec, libs)",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "rockspec_cleanup(rockspec)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "persist.save_from_table(filename, rockspec, type_check.rockspec_order)",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "util.printout(\"Wrote template at \"..filename..\" -- you should now edit and finish it.\")",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "",
    "type": "function container"
  }, {
    "id": 196,
    "text": "unpack_archive",
    "type": "global function"
  }, {
    "id": 197,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 198,
    "text": "module",
    "type": "global function"
  }, {
    "id": 199,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 200,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 201,
    "text": "open",
    "type": "global function"
  }, {
    "id": 202,
    "text": "require",
    "type": "global function"
  }, {
    "id": 203,
    "text": "util)",
    "type": "module"
  }, {
    "id": 204,
    "text": "fetch)",
    "type": "module"
  }, {
    "id": 205,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 206,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 207,
    "text": "path)",
    "type": "module"
  }, {
    "id": 208,
    "text": "persist)",
    "type": "module"
  }, {
    "id": 209,
    "text": "type_check)",
    "type": "module"
  }, {
    "id": 210,
    "text": "",
    "type": "variable container"
  }, {
    "id": 211,
    "text": "",
    "type": "require container"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 214,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 215,
    "text": "",
    "type": "boolean"
  }, {
    "id": 216,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 217,
    "text": "",
    "type": "boolean"
  }, {
    "id": 218,
    "text": "",
    "type": "global variable"
  }, {
    "id": 219,
    "text": "",
    "type": "global variable"
  }, {
    "id": 220,
    "text": "",
    "type": "global variable"
  }, {
    "id": 221,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "require local variable"
  } ]
}