{
  "_filename": "manif.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/manif.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 253
  }, {
    "from": 2,
    "label": "calls",
    "to": 208
  }, {
    "from": 3,
    "label": "calls",
    "to": 208
  }, {
    "from": 4,
    "label": "calls",
    "to": 48
  }, {
    "from": 4,
    "label": "calls",
    "to": 238
  }, {
    "from": 26,
    "label": "calls",
    "to": 82
  }, {
    "from": 27,
    "label": "calls",
    "to": 238
  }, {
    "from": 27,
    "label": "calls",
    "to": 48
  }, {
    "from": 28,
    "label": "calls",
    "to": 208
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 29,
    "label": "has",
    "to": 37
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 31
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 37
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 39,
    "label": "has",
    "to": 37
  }, {
    "from": 39,
    "label": "has",
    "to": 46
  }, {
    "from": 39,
    "label": "has",
    "to": 37
  }, {
    "from": 39,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 52,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 48,
    "label": "has",
    "to": 37
  }, {
    "from": 48,
    "label": "has",
    "to": 69
  }, {
    "from": 48,
    "label": "has",
    "to": 70
  }, {
    "from": 48,
    "label": "has",
    "to": 71
  }, {
    "from": 48,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 37
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 37
  }, {
    "from": 73,
    "label": "has",
    "to": 37
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 37
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 88,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 82,
    "label": "has",
    "to": 37
  }, {
    "from": 82,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 97,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 97,
    "label": "has",
    "to": 108
  }, {
    "from": 82,
    "label": "has",
    "to": 37
  }, {
    "from": 82,
    "label": "has",
    "to": 37
  }, {
    "from": 82,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 40
  }, {
    "from": 110,
    "label": "has",
    "to": 32
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 110,
    "label": "has",
    "to": 37
  }, {
    "from": 110,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 121,
    "label": "has",
    "to": 125
  }, {
    "from": 121,
    "label": "has",
    "to": 37
  }, {
    "from": 121,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 32
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 136,
    "label": "has",
    "to": 139
  }, {
    "from": 127,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 148,
    "label": "has",
    "to": 151
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 141,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 142
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 158,
    "label": "has",
    "to": 162
  }, {
    "from": 158,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 167,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 172,
    "label": "has",
    "to": 178
  }, {
    "from": 163,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 179,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 158,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 142
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 188,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 195,
    "label": "has",
    "to": 199
  }, {
    "from": 192,
    "label": "has",
    "to": 200
  }, {
    "from": 190,
    "label": "has",
    "to": 201
  }, {
    "from": 188,
    "label": "has",
    "to": 202
  }, {
    "from": 185,
    "label": "has",
    "to": 37
  }, {
    "from": 185,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 185,
    "label": "has",
    "to": 205
  }, {
    "from": 185,
    "label": "has",
    "to": 206
  }, {
    "from": 185,
    "label": "has",
    "to": 37
  }, {
    "from": 185,
    "label": "has",
    "to": 207
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 143
  }, {
    "from": 208,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 208,
    "label": "has",
    "to": 212
  }, {
    "from": 208,
    "label": "has",
    "to": 37
  }, {
    "from": 208,
    "label": "has",
    "to": 213
  }, {
    "from": 208,
    "label": "has",
    "to": 214
  }, {
    "from": 208,
    "label": "has",
    "to": 215
  }, {
    "from": 208,
    "label": "has",
    "to": 216
  }, {
    "from": 208,
    "label": "has",
    "to": 217
  }, {
    "from": 208,
    "label": "has",
    "to": 218
  }, {
    "from": 208,
    "label": "has",
    "to": 219
  }, {
    "from": 208,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 208,
    "label": "has",
    "to": 223
  }, {
    "from": 208,
    "label": "has",
    "to": 224
  }, {
    "from": 208,
    "label": "has",
    "to": 37
  }, {
    "from": 208,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 227,
    "label": "has",
    "to": 232
  }, {
    "from": 208,
    "label": "has",
    "to": 37
  }, {
    "from": 208,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 222
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 236,
    "label": "has",
    "to": 230
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 238,
    "label": "has",
    "to": 31
  }, {
    "from": 238,
    "label": "has",
    "to": 40
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 143
  }, {
    "from": 238,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 242,
    "label": "has",
    "to": 244
  }, {
    "from": 242,
    "label": "has",
    "to": 245
  }, {
    "from": 242,
    "label": "has",
    "to": 246
  }, {
    "from": 242,
    "label": "has",
    "to": 247
  }, {
    "from": 238,
    "label": "has",
    "to": 37
  }, {
    "from": 238,
    "label": "has",
    "to": 37
  }, {
    "from": 238,
    "label": "has",
    "to": 248
  }, {
    "from": 238,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 222
  }, {
    "from": 238,
    "label": "has",
    "to": 223
  }, {
    "from": 238,
    "label": "has",
    "to": 224
  }, {
    "from": 238,
    "label": "has",
    "to": 37
  }, {
    "from": 238,
    "label": "has",
    "to": 37
  }, {
    "from": 238,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 222
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 254,
    "label": "has",
    "to": 258
  }, {
    "from": 253,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 260,
    "label": "has",
    "to": 262
  }, {
    "from": 260,
    "label": "has",
    "to": 263
  }, {
    "from": 260,
    "label": "has",
    "to": 264
  }, {
    "from": 260,
    "label": "has",
    "to": 37
  }, {
    "from": 260,
    "label": "has",
    "to": 265
  }, {
    "from": 260,
    "label": "has",
    "to": 266
  }, {
    "from": 260,
    "label": "has",
    "to": 267
  }, {
    "from": 260,
    "label": "has",
    "to": 268
  }, {
    "from": 260,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 272
  }, {
    "from": 269,
    "label": "has",
    "to": 273
  }, {
    "from": 269,
    "label": "has",
    "to": 274
  }, {
    "from": 269,
    "label": "has",
    "to": 275
  }, {
    "from": 260,
    "label": "has",
    "to": 276
  }, {
    "from": 260,
    "label": "has",
    "to": 277
  }, {
    "from": 260,
    "label": "has",
    "to": 37
  }, {
    "from": 260,
    "label": "has",
    "to": 37
  }, {
    "from": 260,
    "label": "has",
    "to": 278
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 279,
    "label": "has",
    "to": 281
  }, {
    "from": 279,
    "label": "has",
    "to": 37
  }, {
    "from": 279,
    "label": "has",
    "to": 37
  }, {
    "from": 279,
    "label": "has",
    "to": 282
  }, {
    "from": 283,
    "label": "has",
    "to": 280
  }, {
    "from": 283,
    "label": "has",
    "to": 281
  }, {
    "from": 283,
    "label": "has",
    "to": 37
  }, {
    "from": 283,
    "label": "has",
    "to": 284
  }, {
    "from": 283,
    "label": "has",
    "to": 37
  }, {
    "from": 283,
    "label": "has",
    "to": 37
  }, {
    "from": 283,
    "label": "has",
    "to": 285
  }, {
    "from": 260,
    "label": "calls",
    "to": 291
  }, {
    "from": 121,
    "label": "calls",
    "to": 6
  }, {
    "from": 82,
    "label": "calls",
    "to": 20
  }, {
    "from": 29,
    "label": "calls",
    "to": 318
  }, {
    "from": 29,
    "label": "calls",
    "to": 318
  }, {
    "from": 29,
    "label": "calls",
    "to": 318
  }, {
    "from": 39,
    "label": "calls",
    "to": 318
  }, {
    "from": 39,
    "label": "calls",
    "to": 318
  }, {
    "from": 82,
    "label": "calls",
    "to": 318
  }, {
    "from": 110,
    "label": "calls",
    "to": 318
  }, {
    "from": 110,
    "label": "calls",
    "to": 318
  }, {
    "from": 110,
    "label": "calls",
    "to": 318
  }, {
    "from": 110,
    "label": "calls",
    "to": 318
  }, {
    "from": 121,
    "label": "calls",
    "to": 318
  }, {
    "from": 121,
    "label": "calls",
    "to": 318
  }, {
    "from": 127,
    "label": "calls",
    "to": 318
  }, {
    "from": 141,
    "label": "calls",
    "to": 318
  }, {
    "from": 141,
    "label": "calls",
    "to": 318
  }, {
    "from": 158,
    "label": "calls",
    "to": 318
  }, {
    "from": 158,
    "label": "calls",
    "to": 318
  }, {
    "from": 158,
    "label": "calls",
    "to": 318
  }, {
    "from": 185,
    "label": "calls",
    "to": 318
  }, {
    "from": 185,
    "label": "calls",
    "to": 318
  }, {
    "from": 185,
    "label": "calls",
    "to": 318
  }, {
    "from": 208,
    "label": "calls",
    "to": 318
  }, {
    "from": 208,
    "label": "calls",
    "to": 318
  }, {
    "from": 238,
    "label": "calls",
    "to": 318
  }, {
    "from": 238,
    "label": "calls",
    "to": 318
  }, {
    "from": 238,
    "label": "calls",
    "to": 318
  }, {
    "from": 260,
    "label": "calls",
    "to": 318
  }, {
    "from": 260,
    "label": "calls",
    "to": 318
  }, {
    "from": 73,
    "label": "calls",
    "to": 17
  }, {
    "from": 73,
    "label": "calls",
    "to": 12
  }, {
    "from": 48,
    "label": "calls",
    "to": 319
  }, {
    "from": 29,
    "label": "calls",
    "to": 10
  }, {
    "from": 48,
    "label": "calls",
    "to": 10
  }, {
    "from": 73,
    "label": "calls",
    "to": 10
  }, {
    "from": 73,
    "label": "calls",
    "to": 10
  }, {
    "from": 73,
    "label": "calls",
    "to": 10
  }, {
    "from": 82,
    "label": "calls",
    "to": 10
  }, {
    "from": 158,
    "label": "calls",
    "to": 10
  }, {
    "from": 253,
    "label": "calls",
    "to": 10
  }, {
    "from": 208,
    "label": "calls",
    "to": 158
  }, {
    "from": 48,
    "label": "calls",
    "to": 22
  }, {
    "from": 82,
    "label": "calls",
    "to": 24
  }, {
    "from": 110,
    "label": "calls",
    "to": 325
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 286,
    "label": "calls",
    "to": 329
  }, {
    "from": 82,
    "label": "calls",
    "to": 287
  }, {
    "from": 39,
    "label": "calls",
    "to": 295
  }, {
    "from": 48,
    "label": "calls",
    "to": 295
  }, {
    "from": 82,
    "label": "calls",
    "to": 16
  }, {
    "from": 279,
    "label": "calls",
    "to": 260
  }, {
    "from": 283,
    "label": "calls",
    "to": 260
  }, {
    "from": 29,
    "label": "calls",
    "to": 298
  }, {
    "from": 48,
    "label": "calls",
    "to": 320
  }, {
    "from": 82,
    "label": "calls",
    "to": 320
  }, {
    "from": 82,
    "label": "calls",
    "to": 320
  }, {
    "from": 141,
    "label": "calls",
    "to": 320
  }, {
    "from": 158,
    "label": "calls",
    "to": 320
  }, {
    "from": 158,
    "label": "calls",
    "to": 320
  }, {
    "from": 158,
    "label": "calls",
    "to": 320
  }, {
    "from": 185,
    "label": "calls",
    "to": 320
  }, {
    "from": 29,
    "label": "calls",
    "to": 317
  }, {
    "from": 82,
    "label": "calls",
    "to": 15
  }, {
    "from": 48,
    "label": "calls",
    "to": 25
  }, {
    "from": 260,
    "label": "calls",
    "to": 296
  }, {
    "from": 260,
    "label": "calls",
    "to": 296
  }, {
    "from": 29,
    "label": "calls",
    "to": 327
  }, {
    "from": 29,
    "label": "calls",
    "to": 327
  }, {
    "from": 29,
    "label": "calls",
    "to": 327
  }, {
    "from": 39,
    "label": "calls",
    "to": 327
  }, {
    "from": 39,
    "label": "calls",
    "to": 327
  }, {
    "from": 82,
    "label": "calls",
    "to": 327
  }, {
    "from": 110,
    "label": "calls",
    "to": 327
  }, {
    "from": 110,
    "label": "calls",
    "to": 327
  }, {
    "from": 110,
    "label": "calls",
    "to": 327
  }, {
    "from": 110,
    "label": "calls",
    "to": 327
  }, {
    "from": 121,
    "label": "calls",
    "to": 327
  }, {
    "from": 121,
    "label": "calls",
    "to": 327
  }, {
    "from": 127,
    "label": "calls",
    "to": 327
  }, {
    "from": 141,
    "label": "calls",
    "to": 327
  }, {
    "from": 141,
    "label": "calls",
    "to": 327
  }, {
    "from": 158,
    "label": "calls",
    "to": 327
  }, {
    "from": 158,
    "label": "calls",
    "to": 327
  }, {
    "from": 158,
    "label": "calls",
    "to": 327
  }, {
    "from": 185,
    "label": "calls",
    "to": 327
  }, {
    "from": 185,
    "label": "calls",
    "to": 327
  }, {
    "from": 185,
    "label": "calls",
    "to": 327
  }, {
    "from": 208,
    "label": "calls",
    "to": 327
  }, {
    "from": 208,
    "label": "calls",
    "to": 327
  }, {
    "from": 238,
    "label": "calls",
    "to": 327
  }, {
    "from": 238,
    "label": "calls",
    "to": 327
  }, {
    "from": 238,
    "label": "calls",
    "to": 327
  }, {
    "from": 260,
    "label": "calls",
    "to": 327
  }, {
    "from": 141,
    "label": "calls",
    "to": 315
  }, {
    "from": 141,
    "label": "calls",
    "to": 315
  }, {
    "from": 158,
    "label": "calls",
    "to": 315
  }, {
    "from": 238,
    "label": "calls",
    "to": 315
  }, {
    "from": 127,
    "label": "calls",
    "to": 328
  }, {
    "from": 158,
    "label": "calls",
    "to": 328
  }, {
    "from": 158,
    "label": "calls",
    "to": 328
  }, {
    "from": 286,
    "label": "calls",
    "to": 321
  }, {
    "from": 82,
    "label": "calls",
    "to": 11
  }, {
    "from": 110,
    "label": "calls",
    "to": 322
  }, {
    "from": 158,
    "label": "calls",
    "to": 322
  }, {
    "from": 185,
    "label": "calls",
    "to": 322
  }, {
    "from": 127,
    "label": "calls",
    "to": 326
  }, {
    "from": 110,
    "label": "calls",
    "to": 324
  }, {
    "from": 127,
    "label": "calls",
    "to": 324
  }, {
    "from": 141,
    "label": "calls",
    "to": 324
  }, {
    "from": 141,
    "label": "calls",
    "to": 324
  }, {
    "from": 141,
    "label": "calls",
    "to": 324
  }, {
    "from": 158,
    "label": "calls",
    "to": 324
  }, {
    "from": 158,
    "label": "calls",
    "to": 324
  }, {
    "from": 185,
    "label": "calls",
    "to": 324
  }, {
    "from": 185,
    "label": "calls",
    "to": 324
  }, {
    "from": 82,
    "label": "calls",
    "to": 316
  }, {
    "from": 127,
    "label": "calls",
    "to": 323
  }, {
    "from": 208,
    "label": "calls",
    "to": 141
  }, {
    "from": 238,
    "label": "calls",
    "to": 141
  }, {
    "from": 260,
    "label": "calls",
    "to": 288
  }, {
    "from": 141,
    "label": "calls",
    "to": 8
  }, {
    "from": 238,
    "label": "calls",
    "to": 208
  }, {
    "from": 158,
    "label": "calls",
    "to": 13
  }, {
    "from": 82,
    "label": "calls",
    "to": 18
  }, {
    "from": 82,
    "label": "calls",
    "to": 18
  }, {
    "from": 82,
    "label": "calls",
    "to": 18
  }, {
    "from": 253,
    "label": "calls",
    "to": 18
  }, {
    "from": 48,
    "label": "calls",
    "to": 294
  }, {
    "from": 82,
    "label": "calls",
    "to": 73
  }, {
    "from": 185,
    "label": "calls",
    "to": 110
  }, {
    "from": 185,
    "label": "calls",
    "to": 110
  }, {
    "from": 158,
    "label": "calls",
    "to": 5
  }, {
    "from": 253,
    "label": "calls",
    "to": 14
  }, {
    "from": 185,
    "label": "calls",
    "to": 127
  }, {
    "from": 185,
    "label": "calls",
    "to": 127
  }, {
    "from": 48,
    "label": "calls",
    "to": 19
  }, {
    "from": 238,
    "label": "calls",
    "to": 290
  }, {
    "from": 260,
    "label": "calls",
    "to": 290
  }, {
    "from": 39,
    "label": "calls",
    "to": 297
  }, {
    "from": 185,
    "label": "calls",
    "to": 234
  }, {
    "from": 208,
    "label": "calls",
    "to": 21
  }, {
    "from": 238,
    "label": "calls",
    "to": 314
  }, {
    "from": 208,
    "label": "calls",
    "to": 310
  }, {
    "from": 48,
    "label": "calls",
    "to": 29
  }, {
    "from": 208,
    "label": "calls",
    "to": 29
  }, {
    "from": 208,
    "label": "calls",
    "to": 29
  }, {
    "from": 238,
    "label": "calls",
    "to": 29
  }, {
    "from": 158,
    "label": "calls",
    "to": 7
  }, {
    "from": 208,
    "label": "calls",
    "to": 312
  }, {
    "from": 253,
    "label": "calls",
    "to": 312
  }, {
    "from": 253,
    "label": "calls",
    "to": 23
  }, {
    "from": 82,
    "label": "calls",
    "to": 9
  }, {
    "from": 238,
    "label": "calls",
    "to": 82
  }, {
    "from": 238,
    "label": "calls",
    "to": 82
  }, {
    "from": 185,
    "label": "calls",
    "to": 39
  }, {
    "from": 260,
    "label": "calls",
    "to": 313
  }, {
    "from": 260,
    "label": "calls",
    "to": 313
  }, {
    "from": 260,
    "label": "calls",
    "to": 313
  }, {
    "from": 208,
    "label": "calls",
    "to": 185
  }, {
    "from": 208,
    "label": "calls",
    "to": 185
  }, {
    "from": 238,
    "label": "calls",
    "to": 185
  }, {
    "from": 208,
    "label": "calls",
    "to": 308
  }, {
    "from": 260,
    "label": "calls",
    "to": 293
  }, {
    "from": 260,
    "label": "calls",
    "to": 292
  }, {
    "from": 1,
    "label": "contains",
    "to": 286
  }, {
    "from": 286,
    "label": "declares",
    "to": 29
  }, {
    "from": 286,
    "label": "declares",
    "to": 39
  }, {
    "from": 286,
    "label": "declares",
    "to": 48
  }, {
    "from": 286,
    "label": "declares",
    "to": 73
  }, {
    "from": 286,
    "label": "declares",
    "to": 82
  }, {
    "from": 286,
    "label": "declares",
    "to": 110
  }, {
    "from": 286,
    "label": "declares",
    "to": 121
  }, {
    "from": 286,
    "label": "declares",
    "to": 127
  }, {
    "from": 286,
    "label": "declares",
    "to": 141
  }, {
    "from": 286,
    "label": "declares",
    "to": 158
  }, {
    "from": 286,
    "label": "declares",
    "to": 185
  }, {
    "from": 286,
    "label": "declares",
    "to": 208
  }, {
    "from": 286,
    "label": "declares",
    "to": 234
  }, {
    "from": 286,
    "label": "declares",
    "to": 236
  }, {
    "from": 286,
    "label": "declares",
    "to": 238
  }, {
    "from": 286,
    "label": "declares",
    "to": 251
  }, {
    "from": 286,
    "label": "declares",
    "to": 253
  }, {
    "from": 286,
    "label": "declares",
    "to": 260
  }, {
    "from": 286,
    "label": "declares",
    "to": 279
  }, {
    "from": 286,
    "label": "declares",
    "to": 283
  }, {
    "from": 289,
    "label": "calls",
    "to": 39
  }, {
    "from": 299,
    "label": "calls",
    "to": 208
  }, {
    "from": 300,
    "label": "calls",
    "to": 208
  }, {
    "from": 304,
    "label": "calls",
    "to": 279
  }, {
    "from": 301,
    "label": "calls",
    "to": 39
  }, {
    "from": 302,
    "label": "calls",
    "to": 39
  }, {
    "from": 303,
    "label": "calls",
    "to": 39
  }, {
    "from": 305,
    "label": "calls",
    "to": 39
  }, {
    "from": 306,
    "label": "calls",
    "to": 39
  }, {
    "from": 307,
    "label": "calls",
    "to": 283
  }, {
    "from": 309,
    "label": "calls",
    "to": 82
  }, {
    "from": 311,
    "label": "calls",
    "to": 82
  }, {
    "from": 1,
    "label": "contains",
    "to": 341
  }, {
    "from": 1,
    "label": "contains",
    "to": 342
  }, {
    "from": 341,
    "label": "initializes",
    "to": 343
  }, {
    "from": 343,
    "label": "assigns",
    "to": 344
  }, {
    "from": 342,
    "label": "initializes",
    "to": 345
  }, {
    "from": 345,
    "label": "requires",
    "to": 340
  }, {
    "from": 342,
    "label": "initializes",
    "to": 346
  }, {
    "from": 346,
    "label": "requires",
    "to": 339
  }, {
    "from": 342,
    "label": "initializes",
    "to": 347
  }, {
    "from": 347,
    "label": "requires",
    "to": 332
  }, {
    "from": 342,
    "label": "initializes",
    "to": 348
  }, {
    "from": 348,
    "label": "requires",
    "to": 333
  }, {
    "from": 342,
    "label": "initializes",
    "to": 349
  }, {
    "from": 349,
    "label": "requires",
    "to": 334
  }, {
    "from": 342,
    "label": "initializes",
    "to": 350
  }, {
    "from": 350,
    "label": "requires",
    "to": 338
  }, {
    "from": 342,
    "label": "initializes",
    "to": 351
  }, {
    "from": 351,
    "label": "requires",
    "to": 331
  }, {
    "from": 342,
    "label": "initializes",
    "to": 352
  }, {
    "from": 352,
    "label": "requires",
    "to": 330
  }, {
    "from": 342,
    "label": "initializes",
    "to": 353
  }, {
    "from": 353,
    "label": "requires",
    "to": 335
  }, {
    "from": 342,
    "label": "initializes",
    "to": 354
  }, {
    "from": 354,
    "label": "requires",
    "to": 336
  }, {
    "from": 342,
    "label": "initializes",
    "to": 355
  }, {
    "from": 355,
    "label": "requires",
    "to": 337
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "manif",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function add_files_to_server(refresh, rockfiles, server, upload_server)\r\n   assert(type(refresh) == \"boolean\" or not refresh)\r\n   assert(type(rockfiles) == \"table\")\r\n   assert(type(server) == \"string\")\r\n   assert(type(upload_server) == \"table\" or not upload_server)\r\n   \r\n   local download_url, login_url = cache.get_server_urls(server, upload_server)\r\n   local at = fs.current_dir()\r\n   local refresh_fn = refresh and cache.refresh_local_cache or cache.split_server_url\r\n   \r\n   local local_cache, protocol, server_path, user, password = refresh_fn(server, download_url, cfg.upload_user, cfg.upload_password)\r\n   if not local_cache then\r\n      return nil, protocol\r\n   end\r\n   if protocol == \"file\" then\r\n      return nil, \"Server \"..server..\" is not recognized, check your configuration.\"\r\n   end\r\n   \r\n   if not login_url then\r\n      login_url = protocol..\"://\"..server_path\r\n   end\r\n   \r\n   local ok, err = fs.change_dir(at)\r\n   if not ok then return nil, err end\r\n   \r\n   local files = {}\r\n   for i, rockfile in ipairs(rockfiles) do\r\n      if fs.exists(rockfile) then\r\n         util.printout(\"Copying file \"..rockfile..\" to \"..local_cache..\"...\")\r\n         local absolute = fs.absolute_name(rockfile)\r\n         fs.copy(absolute, local_cache)\r\n         table.insert(files, dir.base_name(absolute))\r\n      else\r\n         util.printerr(\"File \"..rockfile..\" not found\")\r\n      end\r\n   end\r\n   if #files == 0 then\r\n      return nil, \"No files found\"\r\n   end\r\n\r\n   local ok, err = fs.change_dir(local_cache)\r\n   if not ok then return nil, err end\r\n\r\n   util.printout(\"Updating manifest...\")\r\n   manif.make_manifest(local_cache, \"one\", true)\r\n   \r\n   manif.zip_manifests()\r\n   \r\n   util.printout(\"Updating index.html...\")\r\n   index.make_index(local_cache)\r\n\r\n   local login_info = \"\"\r\n   if user then login_info = \" -u \"..user end\r\n   if password then login_info = login_info..\":\"..password end\r\n   if not login_url:match(\"/$\") then\r\n      login_url = login_url .. \"/\"\r\n   end\r\n\r\n   table.insert(files, \"index.html\")\r\n   table.insert(files, \"manifest\")\r\n   for ver in util.lua_versions() do\r\n      table.insert(files, \"manifest-\"..ver)\r\n      table.insert(files, \"manifest-\"..ver..\".zip\")\r\n   end\r\n\r\n   -- TODO abstract away explicit 'curl' call\r\n\r\n   local cmd\r\n   if protocol == \"rsync\" then\r\n      local srv, path = server_path:match(\"([^/]+)(/.+)\")\r\n      cmd = cfg.variables.RSYNC..\" \"..cfg.variables.RSYNCFLAGS..\" -e ssh \"..local_cache..\"/ \"..user..\"@\"..srv..\":\"..path..\"/\"\r\n   elseif upload_server and upload_server.sftp then\r\n      local part1, part2 = upload_server.sftp:match(\"^([^/]*)/(.*)$\")\r\n      cmd = cfg.variables.SCP..\" \"..table.concat(files, \" \")..\" \"..user..\"@\"..part1..\":/\"..part2\r\n   else\r\n      cmd = cfg.variables.CURL..\" \"..login_info..\" -T '{\"..table.concat(files, \",\")..\"}' \"..login_url\r\n   end\r\n\r\n   util.printout(cmd)\r\n   fs.execute(cmd)\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function remove_files_from_server(refresh, rockfiles, server, upload_server)\r\n   assert(type(refresh) == \"boolean\" or not refresh)\r\n   assert(type(rockfiles) == \"table\")\r\n   assert(type(server) == \"string\")\r\n   assert(type(upload_server) == \"table\" or not upload_server)\r\n\r\n   local download_url, login_url = cache.get_server_urls(server, upload_server)\r\n   local at = fs.current_dir()\r\n   local refresh_fn = refresh and cache.refresh_local_cache or cache.split_server_url\r\n   \r\n   local local_cache, protocol, server_path, user, password = refresh_fn(server, download_url, cfg.upload_user, cfg.upload_password)\r\n   if not local_cache then\r\n      return nil, protocol\r\n   end\r\n   if protocol ~= \"rsync\" then\r\n      return nil, \"This command requires 'rsync', check your configuration.\"\r\n   end\r\n   \r\n   local ok, err = fs.change_dir(at)\r\n   if not ok then return nil, err end\r\n   \r\n   local nr_files = 0\r\n   for i, rockfile in ipairs(rockfiles) do\r\n      local basename = dir.base_name(rockfile)\r\n      local file = dir.path(local_cache, basename)\r\n      util.printout(\"Removing file \"..file..\"...\")\r\n      fs.delete(file)\r\n      if not fs.exists(file) then\r\n         nr_files = nr_files + 1\r\n      else\r\n         util.printerr(\"Failed removing \"..file)\r\n      end\r\n   end\r\n   if nr_files == 0 then\r\n      return nil, \"No files removed.\"\r\n   end\r\n\r\n   local ok, err = fs.change_dir(local_cache)\r\n   if not ok then return nil, err end\r\n\r\n   util.printout(\"Updating manifest...\")\r\n   manif.make_manifest(local_cache, \"one\", true)\r\n   util.printout(\"Updating index.html...\")\r\n   index.make_index(local_cache)\r\n\r\n   local srv, path = server_path:match(\"([^/]+)(/.+)\")\r\n   local cmd = cfg.variables.RSYNC..\" \"..cfg.variables.RSYNCFLAGS..\" --delete -e ssh \"..local_cache..\"/ \"..user..\"@\"..srv..\":\"..path..\"/\"\r\n\r\n   util.printout(cmd)\r\n   fs.execute(cmd)\r\n\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function build_rockspec(rockspec_file, need_to_fetch, minimal_mode, deps_mode)\r\n   assert(type(rockspec_file) == \"string\")\r\n   assert(type(need_to_fetch) == \"boolean\")\r\n\r\n   local rockspec, err, errcode = fetch.load_rockspec(rockspec_file)\r\n   if err then\r\n      return nil, err, errcode\r\n   elseif not rockspec.build then\r\n      return nil, \"Rockspec error: build table not specified\"\r\n   elseif not rockspec.build.type then\r\n      return nil, \"Rockspec error: build type not specified\"\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      local ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then\r\n         return nil, err, errcode\r\n      end\r\n   end\r\n\r\n   local ok, err, errcode = deps.check_external_deps(rockspec, \"build\")\r\n   if err then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   local name, version = rockspec.name, rockspec.version\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n\r\n   if not minimal_mode then\r\n      local _, source_dir\r\n      if need_to_fetch then\r\n         ok, source_dir, errcode = fetch.fetch_sources(rockspec, true)\r\n         if not ok then\r\n            return nil, source_dir, errcode\r\n         end\r\n         local ok, err = fs.change_dir(source_dir)\r\n         if not ok then return nil, err end\r\n      elseif rockspec.source.file then\r\n         local ok, err = fs.unpack_archive(rockspec.source.file)\r\n         if not ok then\r\n            return nil, err\r\n         end\r\n      end\r\n      fs.change_dir(rockspec.source.dir)\r\n   end\r\n   \r\n   local dirs = {\r\n      lua = { name = path.lua_dir(name, version), is_module_path = true },\r\n      lib = { name = path.lib_dir(name, version), is_module_path = true },\r\n      conf = { name = path.conf_dir(name, version), is_module_path = false },\r\n      bin = { name = path.bin_dir(name, version), is_module_path = false },\r\n   }\r\n   \r\n   for _, d in pairs(dirs) do\r\n      local ok, err = fs.make_dir(d.name)\r\n      if not ok then return nil, err end\r\n   end\r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n\r\n   local build = rockspec.build\r\n   \r\n   if not minimal_mode then\r\n      ok, err = apply_patches(rockspec)\r\n      if err then\r\n         return nil, err\r\n      end\r\n   end\r\n   \r\n   if build.type ~= \"none\" then\r\n\r\n      -- Temporary compatibility\r\n      if build.type == \"module\" then\r\n         util.printout(\"Do not use 'module' as a build type. Use 'builtin' instead.\")\r\n         build.type = \"builtin\"\r\n      end\r\n\r\n      if cfg.accepted_build_types and util.array_contains(cfg.accepted_build_types, build.type) then\r\n         return nil, \"This rockspec uses the '\"..build.type..\"' build type, which is blocked by the 'accepted_build_types' setting in your LuaRocks configuration.\"\r\n      end\r\n\r\n      local build_type\r\n      ok, build_type = pcall(require, \"luarocks.build.\" .. build.type)\r\n      if not ok or not type(build_type) == \"table\" then\r\n         return nil, \"Failed initializing build back-end for build type '\"..build.type..\"': \"..build_type\r\n      end\r\n  \r\n      ok, err = build_type.run(rockspec)\r\n      if not ok then\r\n         return nil, \"Build error: \" .. err\r\n      end\r\n   end\r\n\r\n   if build.install then\r\n      for id, install_dir in pairs(dirs) do\r\n         ok, err = install_files(build.install[id], install_dir.name, install_dir.is_module_path)\r\n         if not ok then \r\n            return nil, err\r\n         end\r\n      end\r\n   end\r\n   \r\n   local copy_directories = build.copy_directories\r\n   local copying_default = false\r\n   if not copy_directories then\r\n      copy_directories = {\"doc\"}\r\n      copying_default = true\r\n   end\r\n\r\n   for _, copy_dir in pairs(copy_directories) do\r\n      if fs.is_dir(copy_dir) then\r\n         local dest = dir.path(path.install_dir(name, version), copy_dir)\r\n         fs.make_dir(dest)\r\n         fs.copy_contents(copy_dir, dest)\r\n      else\r\n         if not copying_default then\r\n            return nil, \"Directory '\"..copy_dir..\"' not found\"\r\n         end\r\n      end\r\n   end\r\n\r\n   for _, d in pairs(dirs) do\r\n      fs.remove_dir_if_empty(d.name)\r\n   end\r\n\r\n   fs.pop_dir()\r\n   \r\n   fs.copy(rockspec.local_filename, path.rockspec_file(name, version))\r\n   if need_to_fetch then\r\n      fs.pop_dir()\r\n   end\r\n\r\n   ok, err = manif.make_rock_manifest(name, version)\r\n   if err then return nil, err end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n\r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n\r\n   local license = \"\"\r\n   if rockspec.description and rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now built and installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function parse_version(vstring)\r\n   if not vstring then return nil end\r\n   assert(type(vstring) == \"string\")\r\n\r\n   local cached = version_cache[vstring]\r\n   if cached then\r\n      return cached\r\n   end\r\n\r\n   local version = {}\r\n   local i = 1\r\n\r\n   local function add_token(number)\r\n      version[i] = version[i] and version[i] + number/100000 or number\r\n      i = i + 1\r\n   end\r\n   \r\n   -- trim leading and trailing spaces\r\n   vstring = vstring:match(\"^%s*(.*)%s*$\")\r\n   version.string = vstring\r\n   -- store revision separately if any\r\n   local main, revision = vstring:match(\"(.*)%-(%d+)$\")\r\n   if revision then\r\n      vstring = main\r\n      version.revision = tonumber(revision)\r\n   end\r\n   while #vstring > 0 do\r\n      -- extract a number\r\n      local token, rest = vstring:match(\"^(%d+)[%.%-%_]*(.*)\")\r\n      if token then\r\n         add_token(tonumber(token))\r\n      else\r\n         -- extract a word\r\n         token, rest = vstring:match(\"^(%a+)[%.%-%_]*(.*)\")\r\n         if not token then\r\n            util.printerr(\"Warning: version number '\"..vstring..\"' could not be parsed.\")\r\n            version[i] = 0\r\n            break\r\n         end\r\n         local last = #version\r\n         version[i] = deltas[token] or (token:byte() / 1000)\r\n      end\r\n      vstring = rest\r\n   end\r\n   setmetatable(version, version_mt)\r\n   version_cache[vstring] = version\r\n   return version\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function compare_versions(a, b)\r\n   return parse_version(a) > parse_version(b)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function match_constraints(version, constraints)\r\n   assert(type(version) == \"table\")\r\n   assert(type(constraints) == \"table\")\r\n   local ok = true\r\n   setmetatable(version, version_mt)\r\n   for _, constr in pairs(constraints) do\r\n      if type(constr.version) == \"string\" then\r\n         constr.version = parse_version(constr.version)\r\n      end\r\n      local constr_version, constr_op = constr.version, constr.op\r\n      setmetatable(constr_version, version_mt)\r\n      if     constr_op == \"==\" then ok = version == constr_version\r\n      elseif constr_op == \"~=\" then ok = version ~= constr_version\r\n      elseif constr_op == \">\"  then ok = version >  constr_version\r\n      elseif constr_op == \"<\"  then ok = version <  constr_version\r\n      elseif constr_op == \">=\" then ok = version >= constr_version\r\n      elseif constr_op == \"<=\" then ok = version <= constr_version\r\n      elseif constr_op == \"~>\" then ok = partial_match(version, constr_version)\r\n      end\r\n      if not ok then break end\r\n   end\r\n   return ok\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function scan_deps(results, missing, manifest, name, version, deps_mode)\r\n   assert(type(results) == \"table\")\r\n   assert(type(missing) == \"table\")\r\n   assert(type(manifest) == \"table\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local fetch = require(\"luarocks.fetch\")\r\n\r\n   local err\r\n   if results[name] then\r\n      return results, missing\r\n   end\r\n   if not manifest.dependencies then manifest.dependencies = {} end\r\n   local dependencies = manifest.dependencies\r\n   if not dependencies[name] then dependencies[name] = {} end\r\n   local dependencies_name = dependencies[name]\r\n   local deplist = dependencies_name[version]\r\n   local rockspec, err\r\n   if not deplist then\r\n      rockspec, err = fetch.load_local_rockspec(path.rockspec_file(name, version), false)\r\n      if err then\r\n         missing[name..\" \"..version] = err\r\n         return results, missing\r\n      end\r\n      dependencies_name[version] = rockspec.dependencies\r\n   else\r\n      rockspec = { dependencies = deplist }\r\n   end\r\n   local matched, failures = match_deps(rockspec, nil, deps_mode)\r\n   results[name] = results\r\n   for _, match in pairs(matched) do\r\n      results, missing = scan_deps(results, missing, manifest, match.name, match.version, deps_mode)\r\n   end\r\n   if next(failures) then\r\n      for _, failure in pairs(failures) do\r\n         missing[show_dep(failure)] = \"failed\"\r\n      end\r\n   end\r\n   results[name] = version\r\n   return results, missing\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function dir_name(pathname)\r\n   assert(type(pathname) == \"string\")\r\n   return (pathname:gsub(\"/*$\", \"\"):match(\"(.*)[/]+[^/]*\")) or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function path(...)\r\n   local t = {...}\r\n   while t[1] == \"\" do\r\n      table.remove(t, 1)\r\n   end\r\n   return (table.concat(t, \"/\"):gsub(\"([^:])/+\", \"%1/\"):gsub(\"^/+\", \"/\"):gsub(\"/*$\", \"\"))\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function split_url(url)\r\n   assert(type(url) == \"string\")\r\n   \r\n   local protocol, pathname = url:match(\"^([^:]*)://(.*)\")\r\n   if not protocol then\r\n      protocol = \"file\"\r\n      pathname = url\r\n   end\r\n   return protocol, pathname\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function fetch_url(url, filename, cache)\r\n   assert(type(url) == \"string\")\r\n   assert(type(filename) == \"string\" or not filename)\r\n\r\n   local protocol, pathname = dir.split_url(url)\r\n   if protocol == \"file\" then\r\n      return fs.absolute_name(pathname)\r\n   elseif is_basic_protocol(protocol, true) then\r\n      local ok, filename = fs.download(url, filename, cache)\r\n      if not ok then\r\n         return nil, \"Failed downloading \"..url..(filename and \" - \"..filename or \"\"), \"network\"\r\n      end\r\n      return filename\r\n   else\r\n      return nil, \"Unsupported protocol \"..protocol\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function load_local_rockspec(filename, quick)\r\n   assert(type(filename) == \"string\")\r\n   filename = fs.absolute_name(filename)\r\n   local rockspec, err = persist.load_into_table(filename)\r\n   if not rockspec then\r\n      return nil, \"Could not load rockspec file \"..filename..\" (\"..err..\")\"\r\n   end\r\n\r\n   local ok, err = true, nil\r\n   if not quick then\r\n      ok, err = type_check.type_check_rockspec(rockspec)\r\n      if not ok then\r\n         return nil, filename..\": \"..err\r\n      end\r\n   end\r\n   \r\n   if rockspec.rockspec_format then\r\n      if deps.compare_versions(rockspec.rockspec_format, type_check.rockspec_format) then\r\n         return nil, \"Rockspec format \"..rockspec.rockspec_format..\" is not supported, please upgrade LuaRocks.\"\r\n      end\r\n   end\r\n\r\n   util.platform_overrides(rockspec.build)\r\n   util.platform_overrides(rockspec.dependencies)\r\n   util.platform_overrides(rockspec.external_dependencies)\r\n   util.platform_overrides(rockspec.source)\r\n   util.platform_overrides(rockspec.hooks)\r\n\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      rockspec.name = rockspec.package:lower()\r\n   else\r\n      rockspec.name = basename:match(\"(.*)-[^-]*-[0-9]*\")\r\n      if not rockspec.name then\r\n         return nil, \"Expected filename in format 'name-version-revision.rockspec'.\"\r\n      end\r\n   end\r\n\r\n   local protocol, pathname = dir.split_url(rockspec.source.url)\r\n   if is_basic_protocol(protocol) then\r\n      rockspec.source.file = rockspec.source.file or dir.base_name(rockspec.source.url)\r\n   end\r\n   rockspec.source.protocol, rockspec.source.pathname = protocol, pathname\r\n\r\n   -- Temporary compatibility\r\n   if rockspec.source.cvs_module then rockspec.source.module = rockspec.source.cvs_module end\r\n   if rockspec.source.cvs_tag then rockspec.source.tag = rockspec.source.cvs_tag end\r\n\r\n   local name_version = rockspec.package:lower() .. \"-\" .. rockspec.version\r\n   if basename ~= \"rockspec\" and basename ~= name_version .. \".rockspec\" then\r\n      return nil, \"Inconsistency between rockspec filename (\"..basename..\") and its contents (\"..name_version..\".rockspec).\"\r\n   end\r\n\r\n   rockspec.local_filename = filename\r\n   local filebase = rockspec.source.file or rockspec.source.url\r\n   local base = url_to_base_dir(filebase)\r\n   rockspec.source.dir = rockspec.source.dir\r\n                      or rockspec.source.module\r\n                      or ((filebase:match(\".lua$\") or filebase:match(\".c$\")) and \".\")\r\n                      or base\r\n   if rockspec.dependencies then\r\n      for i = 1, #rockspec.dependencies do\r\n         local parsed, err = deps.parse_dep(rockspec.dependencies[i])\r\n         if not parsed then\r\n            return nil, \"Parse error processing dependency '\"..rockspec.dependencies[i]..\"': \"..tostring(err)\r\n         end\r\n         rockspec.dependencies[i] = parsed\r\n      end\r\n   else\r\n      rockspec.dependencies = {}\r\n   end\r\n   if not quick then\r\n      path.configure_paths(rockspec)\r\n   end\r\n\r\n   return rockspec\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function current_dir()\r\n   return lfs.currentdir()\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function change_dir(d)\r\n   table.insert(dir_stack, lfs.currentdir())\r\n   d = dir.normalize(d)\r\n   return lfs.chdir(d)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function pop_dir()\r\n   local d = table.remove(dir_stack)\r\n   if d then\r\n      lfs.chdir(d)\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function make_dir(directory)\r\n   assert(type(directory) == \"string\")\r\n   directory = dir.normalize(directory)\r\n   local path = nil\r\n   if directory:sub(2, 2) == \":\" then\r\n     path = directory:sub(1, 2)\r\n     directory = directory:sub(4)\r\n   else\r\n     if directory:match(\"^/\") then\r\n        path = \"\"\r\n     end\r\n   end\r\n   for d in directory:gmatch(\"([^\"..dir.separator..\"]+)\"..dir.separator..\"*\") do\r\n      path = path and path .. dir.separator .. d or d\r\n      local mode = lfs.attributes(path, \"mode\")\r\n      if not mode then\r\n         local ok, err = lfs.mkdir(path)\r\n         if not ok then\r\n            return false, err\r\n         end\r\n      elseif mode ~= \"directory\" then\r\n         return false, path..\" is not a directory\"\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function delete(name)\r\n   name = dir.normalize(name)\r\n   recursive_delete(name)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function find(at)\r\n   assert(type(at) == \"string\" or not at)\r\n   if not at then\r\n      at = fs.current_dir()\r\n   end\r\n   at = dir.normalize(at)\r\n   if not fs.is_dir(at) then\r\n      return {}\r\n   end\r\n   local result = {}\r\n   recursive_find(at, \"\", result)\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function exists(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return type(lfs.attributes(file)) == \"table\"\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function is_dir(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"directory\"\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function is_file(file)\r\n   assert(file)\r\n   file = dir.normalize(file)\r\n   return lfs.attributes(file, \"mode\") == \"file\"\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function zip(zipfile, ...)\r\n   return lrzip.zip(zipfile, ...)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function unzip(zipfile)\r\n   local zipfile, err = luazip.open(zipfile)\r\n   if not zipfile then return nil, err end\r\n   local files = zipfile:files()\r\n   local file = files()\r\n   repeat\r\n      if file.filename:sub(#file.filename) == \"/\" then\r\n         local ok, err = fs.make_dir(dir.path(fs.current_dir(), file.filename))\r\n         if not ok then return nil, err end\r\n      else\r\n         local rf, err = zipfile:open(file.filename)\r\n         if not rf then zipfile:close(); return nil, err end\r\n         local contents = rf:read(\"*a\")\r\n         rf:close()\r\n         local wf, err = io.open(dir.path(fs.current_dir(), file.filename), \"wb\")\r\n         if not wf then zipfile:close(); return nil, err end\r\n         wf:write(contents)\r\n         wf:close()\r\n      end\r\n      file = files()\r\n   until not file\r\n   zipfile:close()\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function get_md5(file)\r\n   file = fs.absolute_name(file)\r\n   local file = io.open(file, \"rb\")\r\n   if not file then return nil, \"Failed to open file for reading: \"..file end\r\n   local computed = md5.sumhexa(file:read(\"*a\"))\r\n   file:close()\r\n   if computed then return computed end\r\n   return nil, \"Failed to compute MD5 hash for file \"..file\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function make_index(repo)\r\n   if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end\r\n   local manifest = manif.load_manifest(repo)\r\n   local out = io.open(dir.path(repo, \"index.html\"), \"w\")\r\n   \r\n   out:write(index_header)\r\n   for package, version_list in util.sortedpairs(manifest.repository) do\r\n      local latest_rockspec = nil\r\n      local output = index_package_begin\r\n      for version, data in util.sortedpairs(version_list, deps.compare_versions) do\r\n         local versions = {}\r\n         output = output..version..':&nbsp;'\r\n         table.sort(data, function(a,b) return a.arch < b.arch end)\r\n         for _, item in ipairs(data) do\r\n            local file\r\n            if item.arch == 'rockspec' then\r\n               file = (\"%s-%s.rockspec\"):format(package, version)\r\n               if not latest_rockspec then latest_rockspec = file end\r\n            else\r\n               file = (\"%s-%s.%s.rock\"):format(package, version, item.arch)\r\n            end\r\n            table.insert(versions, '<a href=\"'..file..'\">'..item.arch..'</a>')\r\n         end\r\n         output = output .. table.concat(versions, ',&nbsp;') .. '<br/>'\r\n      end\r\n      output = output .. index_package_end\r\n      if latest_rockspec then\r\n         local rockspec = persist.load_into_table(dir.path(repo, latest_rockspec))\r\n         local descript = rockspec.description or {}\r\n         local vars = {\r\n            anchor = package,\r\n            package = rockspec.package,\r\n            original = rockspec.source.url,\r\n            summary = descript.summary or \"\",\r\n            detailed = descript.detailed or \"\",\r\n            license = descript.license or \"N/A\",\r\n            homepage = descript.homepage and ('| <a href=\"'..descript.homepage..'\"'..ext_url_target..'>project homepage</a>') or \"\",\r\n            externaldependencies = format_external_dependencies(rockspec)\r\n         }\r\n         vars.detailed = vars.detailed:gsub(\"\\n\\n\", \"</p><p>\"):gsub(\"%s+\", \" \")\r\n         vars.detailed = vars.detailed:gsub(\"(https?://[a-zA-Z0-9%.%%-_%+%[%]=%?&/$@;:]+)\", '<a href=\"%1\"'..ext_url_target..'>%1</a>')\r\n         output = output:gsub(\"$(%w+)\", vars)\r\n      else\r\n         output = output:gsub(\"$anchor\", package)\r\n         output = output:gsub(\"$package\", package)\r\n         output = output:gsub(\"$(%w+)\", \"\")\r\n      end\r\n      out:write(output)\r\n   end\r\n   out:write(index_footer_begin)\r\n   for ver in util.lua_versions() do\r\n      out:write((index_manifest_ver:gsub(\"$VER\", ver)))\r\n   end\r\n   out:write(index_footer_end)\r\n   out:close()\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function install_binary_rock(rock_file, deps_mode)\r\n   assert(type(rock_file) == \"string\")\r\n\r\n   local name, version, arch = path.parse_name(rock_file)\r\n   if not name then\r\n      return nil, \"Filename \"..rock_file..\" does not match format 'name-version-revision.arch.rock'.\"\r\n   end\r\n   \r\n   if arch ~= \"all\" and arch ~= cfg.arch then\r\n      return nil, \"Incompatible architecture \"..arch, \"arch\"\r\n   end\r\n   if repos.is_installed(name, version) then\r\n      repos.delete_version(name, version)\r\n   end\r\n   \r\n   local rollback = util.schedule_function(function()\r\n      fs.delete(path.install_dir(name, version))\r\n      fs.remove_dir_if_empty(path.versions_dir(name))\r\n   end)\r\n   \r\n   local ok, err, errcode = fetch.fetch_and_unpack_rock(rock_file, path.install_dir(name, version))\r\n   if not ok then return nil, err, errcode end\r\n   \r\n   local rockspec, err, errcode = fetch.load_rockspec(path.rockspec_file(name, version))\r\n   if err then\r\n      return nil, \"Failed loading rockspec for installed package: \"..err, errcode\r\n   end\r\n\r\n   if deps_mode == \"none\" then\r\n      util.printerr(\"Warning: skipping dependency checks.\")\r\n   else\r\n      ok, err, errcode = deps.check_external_deps(rockspec, \"install\")\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   -- For compatibility with .rock files built with LuaRocks 1\r\n   if not fs.exists(path.rock_manifest_file(name, version)) then\r\n      ok, err = manif.make_rock_manifest(name, version)\r\n      if err then return nil, err end\r\n   end\r\n\r\n   if deps_mode ~= \"none\" then\r\n      ok, err, errcode = deps.fulfill_dependencies(rockspec, deps_mode)\r\n      if err then return nil, err, errcode end\r\n   end\r\n\r\n   local wrap_bin_scripts = true\r\n   if rockspec.deploy and rockspec.deploy.wrap_bin_scripts == false then\r\n      wrap_bin_scripts = false\r\n   end\r\n\r\n   ok, err = repos.deploy_files(name, version, repos.should_wrap_bin_scripts(rockspec))\r\n   if err then return nil, err end\r\n\r\n   util.remove_scheduled_function(rollback)\r\n   rollback = util.schedule_function(function()\r\n      repos.delete_version(name, version)\r\n   end)\r\n\r\n   ok, err = repos.run_hook(rockspec, \"post_install\")\r\n   if err then return nil, err end\r\n   \r\n   ok, err = manif.update_manifest(name, version, nil, deps_mode)\r\n   if err then return nil, err end\r\n   \r\n   local license = \"\"\r\n   if rockspec.description.license then\r\n      license = (\"(license: \"..rockspec.description.license..\")\")\r\n   end\r\n\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   util.printout()\r\n   util.printout(name..\" \"..version..\" is now installed in \"..root_dir..\" \"..license)\r\n   \r\n   util.remove_scheduled_function(rollback)\r\n   return name, version\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function run(...)\r\n   local flags, repo = util.parse_flags(...)\r\n\r\n   assert(type(repo) == \"string\" or not repo)\r\n   repo = repo or cfg.rocks_dir\r\n  \r\n   util.printout(\"Making manifest for \"..repo)\r\n   \r\n   if repo:match(\"/lib/luarocks\") and not flags[\"local-tree\"] then\r\n      util.warning(\"This looks like a local rocks tree, but you did not pass --local-tree.\")\r\n   end\r\n   \r\n   local ok, err = manif.make_manifest(repo, deps.get_deps_mode(flags), not flags[\"local-tree\"])\r\n   if ok and not flags[\"local-tree\"] then\r\n      util.printout(\"Generating index.html for \"..repo)\r\n      index.make_index(repo)\r\n   end\r\n   if flags[\"local-tree\"] then\r\n      for luaver in util.lua_versions() do\r\n         fs.delete(dir.path(repo, \"manifest-\"..luaver))\r\n      end\r\n   end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local function save_table(where, name, tbl)\r\n   assert(type(where) == \"string\")\r\n   assert(type(name) == \"string\")\r\n   assert(type(tbl) == \"table\")\r\n\r\n   local filename = dir.path(where, name)\r\n   local ok, err = persist.save_from_table(filename..\".tmp\", tbl)\r\n   if ok then\r\n      ok, err = fs.replace_file(filename, filename..\".tmp\")\r\n   end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert(type(where) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert(type(name) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert(type(tbl) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local filename = dir.path(where, name)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local ok, err = persist.save_from_table(filename..\".tmp\", tbl)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if ok then\r\n      ok, err = fs.replace_file(filename, filename..\".tmp\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "ok, err = fs.replace_file(filename, filename..\".tmp\")",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function load_rock_manifest(name, version, root)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local name_version = name..\"/\"..version\r\n   if rock_manifest_cache[name_version] then\r\n      return rock_manifest_cache[name_version].rock_manifest\r\n   end\r\n   local pathname = path.rock_manifest_file(name, version, root)\r\n   local rock_manifest = persist.load_into_table(pathname)\r\n   if not rock_manifest then return nil end\r\n   rock_manifest_cache[name_version] = rock_manifest\r\n   return rock_manifest.rock_manifest\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "assert(type(version) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "local name_version = name..\"/\"..version",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if rock_manifest_cache[name_version] then\r\n      return rock_manifest_cache[name_version].rock_manifest\r\n   end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "local pathname = path.rock_manifest_file(name, version, root)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local rock_manifest = persist.load_into_table(pathname)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if not rock_manifest then return nil end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "rock_manifest_cache[name_version] = rock_manifest",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function make_rock_manifest(name, version)\r\n   local install_dir = path.install_dir(name, version)\r\n   local rock_manifest = path.rock_manifest_file(name, version)\r\n   local tree = {}\r\n   for _, file in ipairs(fs.find(install_dir)) do\r\n      local full_path = dir.path(install_dir, file)\r\n      local walk = tree\r\n      local last\r\n      local last_name\r\n      for name in file:gmatch(\"[^/]+\") do\r\n         local next = walk[name]\r\n         if not next then\r\n            next = {}\r\n            walk[name] = next\r\n         end\r\n         last = walk\r\n         last_name = name\r\n         walk = next\r\n      end\r\n      if fs.is_file(full_path) then\r\n         local sum, err = fs.get_md5(full_path)\r\n         if not sum then\r\n            return nil, \"Failed producing checksum: \"..tostring(err)\r\n         end\r\n         last[last_name] = sum\r\n      end\r\n   end\r\n   local rock_manifest = { rock_manifest=tree }\r\n   rock_manifest_cache[name..\"/\"..version] = rock_manifest\r\n   save_table(install_dir, \"rock_manifest\", rock_manifest )\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local install_dir = path.install_dir(name, version)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local rock_manifest = path.rock_manifest_file(name, version)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local tree = {}",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "for _, file in ipairs(fs.find(install_dir)) do\r\n      local full_path = dir.path(install_dir, file)\r\n      local walk = tree\r\n      local last\r\n      local last_name\r\n      for name in file:gmatch(\"[^/]+\") do\r\n         local next = walk[name]\r\n         if not next then\r\n            next = {}\r\n            walk[name] = next\r\n         end\r\n         last = walk\r\n         last_name = name\r\n         walk = next\r\n      end\r\n      if fs.is_file(full_path) then\r\n         local sum, err = fs.get_md5(full_path)\r\n         if not sum then\r\n            return nil, \"Failed producing checksum: \"..tostring(err)\r\n         end\r\n         last[last_name] = sum\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "local full_path = dir.path(install_dir, file)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local walk = tree",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local last",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local last_name",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "for name in file:gmatch(\"[^/]+\") do\r\n         local next = walk[name]\r\n         if not next then\r\n            next = {}\r\n            walk[name] = next\r\n         end\r\n         last = walk\r\n         last_name = name\r\n         walk = next\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 58,
    "text": "local next = walk[name]",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if not next then\r\n            next = {}\r\n            walk[name] = next\r\n         end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "next = {}",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "walk[name] = next",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "last = walk",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "last_name = name",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "walk = next",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if fs.is_file(full_path) then\r\n         local sum, err = fs.get_md5(full_path)\r\n         if not sum then\r\n            return nil, \"Failed producing checksum: \"..tostring(err)\r\n         end\r\n         last[last_name] = sum\r\n      end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local sum, err = fs.get_md5(full_path)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if not sum then\r\n            return nil, \"Failed producing checksum: \"..tostring(err)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "last[last_name] = sum",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "local rock_manifest = { rock_manifest=tree }",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "rock_manifest_cache[name..\"/\"..version] = rock_manifest",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "save_table(install_dir, \"rock_manifest\", rock_manifest )",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "local function fetch_manifest_from(repo_url, filename)\r\n   local url = dir.path(repo_url, filename)\r\n   local name = repo_url:gsub(\"[/:]\",\"_\")\r\n   local cache_dir = dir.path(cfg.local_cache, name)\r\n   local ok = fs.make_dir(cache_dir)\r\n   if not ok then\r\n      return nil, \"Failed creating temporary cache directory \"..cache_dir\r\n   end\r\n   local file, err, errcode = fetch.fetch_url(url, dir.path(cache_dir, filename), true)\r\n   if not file then\r\n      return nil, \"Failed fetching manifest for \"..repo_url..(err and \" - \"..err or \"\"), errcode\r\n   end\r\n   return file\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "local url = dir.path(repo_url, filename)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local name = repo_url:gsub(\"[/:]\",\"_\")",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local cache_dir = dir.path(cfg.local_cache, name)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local ok = fs.make_dir(cache_dir)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if not ok then\r\n      return nil, \"Failed creating temporary cache directory \"..cache_dir\r\n   end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "local file, err, errcode = fetch.fetch_url(url, dir.path(cache_dir, filename), true)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if not file then\r\n      return nil, \"Failed fetching manifest for \"..repo_url..(err and \" - \"..err or \"\"), errcode\r\n   end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function load_manifest(repo_url)\r\n   assert(type(repo_url) == \"string\")\r\n\r\n   if manif_core.manifest_cache[repo_url] then\r\n      return manif_core.manifest_cache[repo_url]\r\n   end\r\n   \r\n   local filenames = {\r\n      \"manifest-\"..cfg.lua_version..\".zip\",\r\n      \"manifest-\"..cfg.lua_version,\r\n      \"manifest\",\r\n   }\r\n\r\n   local protocol, repodir = dir.split_url(repo_url)\r\n   local pathname\r\n   if protocol == \"file\" then\r\n      for _, filename in ipairs(filenames) do\r\n         pathname = dir.path(repodir, filename)\r\n         if fs.exists(pathname) then\r\n            break\r\n         end\r\n      end\r\n   else\r\n      local err\r\n      for _, filename in ipairs(filenames) do\r\n         pathname, err = fetch_manifest_from(repo_url, filename)\r\n         if pathname then\r\n            break\r\n         end\r\n      end\r\n      if not pathname then \r\n         return nil, err\r\n      end\r\n   end\r\n   if pathname:match(\".*%.zip$\") then\r\n      pathname = fs.absolute_name(pathname)\r\n      local dir = dir.dir_name(pathname)\r\n      fs.change_dir(dir)\r\n      local nozip = pathname:match(\"(.*)%.zip$\")\r\n      fs.delete(nozip)\r\n      local ok = fs.unzip(pathname)\r\n      fs.pop_dir()\r\n      if not ok then\r\n         fs.delete(pathname)\r\n         fs.delete(pathname..\".timestamp\")\r\n         return nil, \"Failed extracting manifest file\"\r\n      end\r\n      pathname = nozip\r\n   end\r\n   return manif_core.manifest_loader(pathname, repo_url)\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "assert(type(repo_url) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "if manif_core.manifest_cache[repo_url] then\r\n      return manif_core.manifest_cache[repo_url]\r\n   end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "local filenames = {\r\n      \"manifest-\"..cfg.lua_version..\".zip\",\r\n      \"manifest-\"..cfg.lua_version,\r\n      \"manifest\",\r\n   }",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local protocol, repodir = dir.split_url(repo_url)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local pathname",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if protocol == \"file\" then\r\n      for _, filename in ipairs(filenames) do\r\n         pathname = dir.path(repodir, filename)\r\n         if fs.exists(pathname) then\r\n            break\r\n         end\r\n      end\r\n   else\r\n      local err\r\n      for _, filename in ipairs(filenames) do\r\n         pathname, err = fetch_manifest_from(repo_url, filename)\r\n         if pathname then\r\n            break\r\n         end\r\n      end\r\n      if not pathname then \r\n         return nil, err\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "for _, filename in ipairs(filenames) do\r\n         pathname = dir.path(repodir, filename)\r\n         if fs.exists(pathname) then\r\n            break\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "pathname = dir.path(repodir, filename)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "if fs.exists(pathname) then\r\n            break\r\n         end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "for _, filename in ipairs(filenames) do\r\n         pathname, err = fetch_manifest_from(repo_url, filename)\r\n         if pathname then\r\n            break\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "pathname, err = fetch_manifest_from(repo_url, filename)",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if pathname then\r\n            break\r\n         end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "if not pathname then \r\n         return nil, err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "if pathname:match(\".*%.zip$\") then\r\n      pathname = fs.absolute_name(pathname)\r\n      local dir = dir.dir_name(pathname)\r\n      fs.change_dir(dir)\r\n      local nozip = pathname:match(\"(.*)%.zip$\")\r\n      fs.delete(nozip)\r\n      local ok = fs.unzip(pathname)\r\n      fs.pop_dir()\r\n      if not ok then\r\n         fs.delete(pathname)\r\n         fs.delete(pathname..\".timestamp\")\r\n         return nil, \"Failed extracting manifest file\"\r\n      end\r\n      pathname = nozip\r\n   end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "pathname = fs.absolute_name(pathname)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "local dir = dir.dir_name(pathname)",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "fs.change_dir(dir)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local nozip = pathname:match(\"(.*)%.zip$\")",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "fs.delete(nozip)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "local ok = fs.unzip(pathname)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "fs.pop_dir()",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "if not ok then\r\n         fs.delete(pathname)\r\n         fs.delete(pathname..\".timestamp\")\r\n         return nil, \"Failed extracting manifest file\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "fs.delete(pathname)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "fs.delete(pathname..\".timestamp\")",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "pathname = nozip",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "local function store_package_items(itemsfn, pkg, version, tbl)\r\n   assert(type(itemsfn) == \"function\")\r\n   assert(type(pkg) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   assert(type(tbl) == \"table\")\r\n\r\n   local pkg_version = pkg..\"/\"..version\r\n   local result = {}\r\n\r\n   for item, path in pairs(itemsfn(pkg, version)) do\r\n      result[item] = path\r\n      if not tbl[item] then\r\n         tbl[item] = {}\r\n      end\r\n      table.insert(tbl[item], pkg_version)\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "assert(type(itemsfn) == \"function\")",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert(type(pkg) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "local pkg_version = pkg..\"/\"..version",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "for item, path in pairs(itemsfn(pkg, version)) do\r\n      result[item] = path\r\n      if not tbl[item] then\r\n         tbl[item] = {}\r\n      end\r\n      table.insert(tbl[item], pkg_version)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "result[item] = path",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "if not tbl[item] then\r\n         tbl[item] = {}\r\n      end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "tbl[item] = {}",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "table.insert(tbl[item], pkg_version)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "local function sort_pkgs(a, b)\r\n   assert(type(a) == \"string\")\r\n   assert(type(b) == \"string\")\r\n\r\n   local na, va = a:match(\"(.*)/(.*)$\")\r\n   local nb, vb = b:match(\"(.*)/(.*)$\")\r\n\r\n   return (na == nb) and deps.compare_versions(va, vb) or na < nb\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "assert(type(a) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "assert(type(b) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "local na, va = a:match(\"(.*)/(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local nb, vb = b:match(\"(.*)/(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "local function sort_package_matching_table(tbl)\r\n   assert(type(tbl) == \"table\")\r\n\r\n   if next(tbl) then\r\n      for item, pkgs in pairs(tbl) do\r\n         if #pkgs > 1 then\r\n            table.sort(pkgs, sort_pkgs)\r\n            -- Remove duplicates from the sorted array.\r\n            local prev = nil\r\n            local i = 1\r\n            while pkgs[i] do\r\n               local curr = pkgs[i]\r\n               if curr == prev then\r\n                  table.remove(pkgs, i)\r\n               else\r\n                  prev = curr\r\n                  i = i + 1\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "if next(tbl) then\r\n      for item, pkgs in pairs(tbl) do\r\n         if #pkgs > 1 then\r\n            table.sort(pkgs, sort_pkgs)\r\n            -- Remove duplicates from the sorted array.\r\n            local prev = nil\r\n            local i = 1\r\n            while pkgs[i] do\r\n               local curr = pkgs[i]\r\n               if curr == prev then\r\n                  table.remove(pkgs, i)\r\n               else\r\n                  prev = curr\r\n                  i = i + 1\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "for item, pkgs in pairs(tbl) do\r\n         if #pkgs > 1 then\r\n            table.sort(pkgs, sort_pkgs)\r\n            -- Remove duplicates from the sorted array.\r\n            local prev = nil\r\n            local i = 1\r\n            while pkgs[i] do\r\n               local curr = pkgs[i]\r\n               if curr == prev then\r\n                  table.remove(pkgs, i)\r\n               else\r\n                  prev = curr\r\n                  i = i + 1\r\n               end\r\n            end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 130,
    "text": "if #pkgs > 1 then\r\n            table.sort(pkgs, sort_pkgs)\r\n            -- Remove duplicates from the sorted array.\r\n            local prev = nil\r\n            local i = 1\r\n            while pkgs[i] do\r\n               local curr = pkgs[i]\r\n               if curr == prev then\r\n                  table.remove(pkgs, i)\r\n               else\r\n                  prev = curr\r\n                  i = i + 1\r\n               end\r\n            end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "table.sort(pkgs, sort_pkgs)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "local prev = nil",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "while pkgs[i] do\r\n               local curr = pkgs[i]\r\n               if curr == prev then\r\n                  table.remove(pkgs, i)\r\n               else\r\n                  prev = curr\r\n                  i = i + 1\r\n               end\r\n            end",
    "type": "statement:while"
  }, {
    "id": 135,
    "text": "local curr = pkgs[i]",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "if curr == prev then\r\n                  table.remove(pkgs, i)\r\n               else\r\n                  prev = curr\r\n                  i = i + 1\r\n               end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "table.remove(pkgs, i)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "prev = curr",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "local function update_dependencies(manifest, deps_mode)\r\n   assert(type(manifest) == \"table\")\r\n   assert(type(deps_mode) == \"string\")\r\n   \r\n   for pkg, versions in pairs(manifest.repository) do\r\n      for version, repositories in pairs(versions) do\r\n         local current = pkg..\" \"..version\r\n         for _, repo in ipairs(repositories) do\r\n            if repo.arch == \"installed\" then\r\n               local missing\r\n               repo.dependencies, missing = deps.scan_deps({}, {}, manifest, pkg, version, deps_mode)\r\n               repo.dependencies[pkg] = nil\r\n               if missing then\r\n                  for miss, err in pairs(missing) do\r\n                     if miss == current then\r\n                        util.printerr(\"Tree inconsistency detected: \"..current..\" has no rockspec. \"..err)\r\n                     else\r\n                        util.printerr(\"Missing dependency for \"..pkg..\" \"..version..\": \"..miss)\r\n                     end\r\n                  end\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "assert(type(manifest) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "assert(type(deps_mode) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "for pkg, versions in pairs(manifest.repository) do\r\n      for version, repositories in pairs(versions) do\r\n         local current = pkg..\" \"..version\r\n         for _, repo in ipairs(repositories) do\r\n            if repo.arch == \"installed\" then\r\n               local missing\r\n               repo.dependencies, missing = deps.scan_deps({}, {}, manifest, pkg, version, deps_mode)\r\n               repo.dependencies[pkg] = nil\r\n               if missing then\r\n                  for miss, err in pairs(missing) do\r\n                     if miss == current then\r\n                        util.printerr(\"Tree inconsistency detected: \"..current..\" has no rockspec. \"..err)\r\n                     else\r\n                        util.printerr(\"Missing dependency for \"..pkg..\" \"..version..\": \"..miss)\r\n                     end\r\n                  end\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 145,
    "text": "for version, repositories in pairs(versions) do\r\n         local current = pkg..\" \"..version\r\n         for _, repo in ipairs(repositories) do\r\n            if repo.arch == \"installed\" then\r\n               local missing\r\n               repo.dependencies, missing = deps.scan_deps({}, {}, manifest, pkg, version, deps_mode)\r\n               repo.dependencies[pkg] = nil\r\n               if missing then\r\n                  for miss, err in pairs(missing) do\r\n                     if miss == current then\r\n                        util.printerr(\"Tree inconsistency detected: \"..current..\" has no rockspec. \"..err)\r\n                     else\r\n                        util.printerr(\"Missing dependency for \"..pkg..\" \"..version..\": \"..miss)\r\n                     end\r\n                  end\r\n               end\r\n            end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 146,
    "text": "local current = pkg..\" \"..version",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "for _, repo in ipairs(repositories) do\r\n            if repo.arch == \"installed\" then\r\n               local missing\r\n               repo.dependencies, missing = deps.scan_deps({}, {}, manifest, pkg, version, deps_mode)\r\n               repo.dependencies[pkg] = nil\r\n               if missing then\r\n                  for miss, err in pairs(missing) do\r\n                     if miss == current then\r\n                        util.printerr(\"Tree inconsistency detected: \"..current..\" has no rockspec. \"..err)\r\n                     else\r\n                        util.printerr(\"Missing dependency for \"..pkg..\" \"..version..\": \"..miss)\r\n                     end\r\n                  end\r\n               end\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 148,
    "text": "if repo.arch == \"installed\" then\r\n               local missing\r\n               repo.dependencies, missing = deps.scan_deps({}, {}, manifest, pkg, version, deps_mode)\r\n               repo.dependencies[pkg] = nil\r\n               if missing then\r\n                  for miss, err in pairs(missing) do\r\n                     if miss == current then\r\n                        util.printerr(\"Tree inconsistency detected: \"..current..\" has no rockspec. \"..err)\r\n                     else\r\n                        util.printerr(\"Missing dependency for \"..pkg..\" \"..version..\": \"..miss)\r\n                     end\r\n                  end\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "local missing",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "repo.dependencies, missing = deps.scan_deps({}, {}, manifest, pkg, version, deps_mode)",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "repo.dependencies[pkg] = nil",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "if missing then\r\n                  for miss, err in pairs(missing) do\r\n                     if miss == current then\r\n                        util.printerr(\"Tree inconsistency detected: \"..current..\" has no rockspec. \"..err)\r\n                     else\r\n                        util.printerr(\"Missing dependency for \"..pkg..\" \"..version..\": \"..miss)\r\n                     end\r\n                  end\r\n               end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "for miss, err in pairs(missing) do\r\n                     if miss == current then\r\n                        util.printerr(\"Tree inconsistency detected: \"..current..\" has no rockspec. \"..err)\r\n                     else\r\n                        util.printerr(\"Missing dependency for \"..pkg..\" \"..version..\": \"..miss)\r\n                     end\r\n                  end",
    "type": "statement:genericfor"
  }, {
    "id": 154,
    "text": "if miss == current then\r\n                        util.printerr(\"Tree inconsistency detected: \"..current..\" has no rockspec. \"..err)\r\n                     else\r\n                        util.printerr(\"Missing dependency for \"..pkg..\" \"..version..\": \"..miss)\r\n                     end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "util.printerr(\"Tree inconsistency detected: \"..current..\" has no rockspec. \"..err)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "util.printerr(\"Missing dependency for \"..pkg..\" \"..version..\": \"..miss)",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "local function filter_by_lua_version(manifest, lua_version, repodir, cache)\r\n   assert(type(manifest) == \"table\")\r\n   assert(type(repodir) == \"string\")\r\n   assert((not cache) or type(cache) == \"table\")\r\n   \r\n   cache = cache or {}\r\n   lua_version = deps.parse_version(lua_version)\r\n   for pkg, versions in pairs(manifest.repository) do\r\n      local to_remove = {}\r\n      for version, repositories in pairs(versions) do\r\n         for _, repo in ipairs(repositories) do\r\n            if repo.arch == \"rockspec\" then\r\n               local pathname = dir.path(repodir, pkg..\"-\"..version..\".rockspec\")\r\n               local rockspec, err = cache[pathname]\r\n               if not rockspec then\r\n                  rockspec, err = fetch.load_local_rockspec(pathname, true)\r\n               end\r\n               if rockspec then\r\n                  cache[pathname] = rockspec\r\n                  for _, dep in ipairs(rockspec.dependencies) do\r\n                     if dep.name == \"lua\" then \r\n                        if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end\r\n                        break\r\n                     end\r\n                  end\r\n               else\r\n                  util.printerr(\"Error loading rockspec for \"..pkg..\" \"..version..\": \"..err)\r\n               end\r\n            end\r\n         end\r\n      end\r\n      if next(to_remove) then\r\n         for _, incompat in ipairs(to_remove) do\r\n            versions[incompat] = nil\r\n         end\r\n         if not next(versions) then\r\n            manifest.repository[pkg] = nil\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "assert(type(repodir) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "assert((not cache) or type(cache) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "cache = cache or {}",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "lua_version = deps.parse_version(lua_version)",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "for pkg, versions in pairs(manifest.repository) do\r\n      local to_remove = {}\r\n      for version, repositories in pairs(versions) do\r\n         for _, repo in ipairs(repositories) do\r\n            if repo.arch == \"rockspec\" then\r\n               local pathname = dir.path(repodir, pkg..\"-\"..version..\".rockspec\")\r\n               local rockspec, err = cache[pathname]\r\n               if not rockspec then\r\n                  rockspec, err = fetch.load_local_rockspec(pathname, true)\r\n               end\r\n               if rockspec then\r\n                  cache[pathname] = rockspec\r\n                  for _, dep in ipairs(rockspec.dependencies) do\r\n                     if dep.name == \"lua\" then \r\n                        if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end\r\n                        break\r\n                     end\r\n                  end\r\n               else\r\n                  util.printerr(\"Error loading rockspec for \"..pkg..\" \"..version..\": \"..err)\r\n               end\r\n            end\r\n         end\r\n      end\r\n      if next(to_remove) then\r\n         for _, incompat in ipairs(to_remove) do\r\n            versions[incompat] = nil\r\n         end\r\n         if not next(versions) then\r\n            manifest.repository[pkg] = nil\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 164,
    "text": "local to_remove = {}",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "for version, repositories in pairs(versions) do\r\n         for _, repo in ipairs(repositories) do\r\n            if repo.arch == \"rockspec\" then\r\n               local pathname = dir.path(repodir, pkg..\"-\"..version..\".rockspec\")\r\n               local rockspec, err = cache[pathname]\r\n               if not rockspec then\r\n                  rockspec, err = fetch.load_local_rockspec(pathname, true)\r\n               end\r\n               if rockspec then\r\n                  cache[pathname] = rockspec\r\n                  for _, dep in ipairs(rockspec.dependencies) do\r\n                     if dep.name == \"lua\" then \r\n                        if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end\r\n                        break\r\n                     end\r\n                  end\r\n               else\r\n                  util.printerr(\"Error loading rockspec for \"..pkg..\" \"..version..\": \"..err)\r\n               end\r\n            end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 166,
    "text": "for _, repo in ipairs(repositories) do\r\n            if repo.arch == \"rockspec\" then\r\n               local pathname = dir.path(repodir, pkg..\"-\"..version..\".rockspec\")\r\n               local rockspec, err = cache[pathname]\r\n               if not rockspec then\r\n                  rockspec, err = fetch.load_local_rockspec(pathname, true)\r\n               end\r\n               if rockspec then\r\n                  cache[pathname] = rockspec\r\n                  for _, dep in ipairs(rockspec.dependencies) do\r\n                     if dep.name == \"lua\" then \r\n                        if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end\r\n                        break\r\n                     end\r\n                  end\r\n               else\r\n                  util.printerr(\"Error loading rockspec for \"..pkg..\" \"..version..\": \"..err)\r\n               end\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 167,
    "text": "if repo.arch == \"rockspec\" then\r\n               local pathname = dir.path(repodir, pkg..\"-\"..version..\".rockspec\")\r\n               local rockspec, err = cache[pathname]\r\n               if not rockspec then\r\n                  rockspec, err = fetch.load_local_rockspec(pathname, true)\r\n               end\r\n               if rockspec then\r\n                  cache[pathname] = rockspec\r\n                  for _, dep in ipairs(rockspec.dependencies) do\r\n                     if dep.name == \"lua\" then \r\n                        if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end\r\n                        break\r\n                     end\r\n                  end\r\n               else\r\n                  util.printerr(\"Error loading rockspec for \"..pkg..\" \"..version..\": \"..err)\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "local pathname = dir.path(repodir, pkg..\"-\"..version..\".rockspec\")",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "local rockspec, err = cache[pathname]",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "if not rockspec then\r\n                  rockspec, err = fetch.load_local_rockspec(pathname, true)\r\n               end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "rockspec, err = fetch.load_local_rockspec(pathname, true)",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "if rockspec then\r\n                  cache[pathname] = rockspec\r\n                  for _, dep in ipairs(rockspec.dependencies) do\r\n                     if dep.name == \"lua\" then \r\n                        if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end\r\n                        break\r\n                     end\r\n                  end\r\n               else\r\n                  util.printerr(\"Error loading rockspec for \"..pkg..\" \"..version..\": \"..err)\r\n               end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "cache[pathname] = rockspec",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "for _, dep in ipairs(rockspec.dependencies) do\r\n                     if dep.name == \"lua\" then \r\n                        if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end\r\n                        break\r\n                     end\r\n                  end",
    "type": "statement:genericfor"
  }, {
    "id": 175,
    "text": "if dep.name == \"lua\" then \r\n                        if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end\r\n                        break\r\n                     end",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "if not deps.match_constraints(lua_version, dep.constraints) then\r\n                           table.insert(to_remove, version)\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "table.insert(to_remove, version)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "util.printerr(\"Error loading rockspec for \"..pkg..\" \"..version..\": \"..err)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "if next(to_remove) then\r\n         for _, incompat in ipairs(to_remove) do\r\n            versions[incompat] = nil\r\n         end\r\n         if not next(versions) then\r\n            manifest.repository[pkg] = nil\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "for _, incompat in ipairs(to_remove) do\r\n            versions[incompat] = nil\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 181,
    "text": "versions[incompat] = nil",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "if not next(versions) then\r\n            manifest.repository[pkg] = nil\r\n         end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "manifest.repository[pkg] = nil",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "local function store_results(results, manifest, dep_handler)\r\n   assert(type(results) == \"table\")\r\n   assert(type(manifest) == \"table\")\r\n   assert((not dep_handler) or type(dep_handler) == \"function\")\r\n\r\n   for name, versions in pairs(results) do\r\n      local pkgtable = manifest.repository[name] or {}\r\n      for version, entries in pairs(versions) do\r\n         local versiontable = {}\r\n         for _, entry in ipairs(entries) do\r\n            local entrytable = {}\r\n            entrytable.arch = entry.arch\r\n            if entry.arch == \"installed\" then\r\n               local rock_manifest = load_rock_manifest(name, version)\r\n               if not rock_manifest then\r\n                  return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n               end\r\n               entrytable.modules = store_package_items(repos.package_modules, name, version, manifest.modules)\r\n               entrytable.commands = store_package_items(repos.package_commands, name, version, manifest.commands)\r\n            end\r\n            table.insert(versiontable, entrytable)\r\n         end\r\n         pkgtable[version] = versiontable\r\n      end\r\n      manifest.repository[name] = pkgtable\r\n   end\r\n   if dep_handler then\r\n      dep_handler(manifest)\r\n   end\r\n   sort_package_matching_table(manifest.modules)\r\n   sort_package_matching_table(manifest.commands)\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "assert(type(results) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "assert((not dep_handler) or type(dep_handler) == \"function\")",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "for name, versions in pairs(results) do\r\n      local pkgtable = manifest.repository[name] or {}\r\n      for version, entries in pairs(versions) do\r\n         local versiontable = {}\r\n         for _, entry in ipairs(entries) do\r\n            local entrytable = {}\r\n            entrytable.arch = entry.arch\r\n            if entry.arch == \"installed\" then\r\n               local rock_manifest = load_rock_manifest(name, version)\r\n               if not rock_manifest then\r\n                  return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n               end\r\n               entrytable.modules = store_package_items(repos.package_modules, name, version, manifest.modules)\r\n               entrytable.commands = store_package_items(repos.package_commands, name, version, manifest.commands)\r\n            end\r\n            table.insert(versiontable, entrytable)\r\n         end\r\n         pkgtable[version] = versiontable\r\n      end\r\n      manifest.repository[name] = pkgtable\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 189,
    "text": "local pkgtable = manifest.repository[name] or {}",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "for version, entries in pairs(versions) do\r\n         local versiontable = {}\r\n         for _, entry in ipairs(entries) do\r\n            local entrytable = {}\r\n            entrytable.arch = entry.arch\r\n            if entry.arch == \"installed\" then\r\n               local rock_manifest = load_rock_manifest(name, version)\r\n               if not rock_manifest then\r\n                  return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n               end\r\n               entrytable.modules = store_package_items(repos.package_modules, name, version, manifest.modules)\r\n               entrytable.commands = store_package_items(repos.package_commands, name, version, manifest.commands)\r\n            end\r\n            table.insert(versiontable, entrytable)\r\n         end\r\n         pkgtable[version] = versiontable\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 191,
    "text": "local versiontable = {}",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "for _, entry in ipairs(entries) do\r\n            local entrytable = {}\r\n            entrytable.arch = entry.arch\r\n            if entry.arch == \"installed\" then\r\n               local rock_manifest = load_rock_manifest(name, version)\r\n               if not rock_manifest then\r\n                  return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n               end\r\n               entrytable.modules = store_package_items(repos.package_modules, name, version, manifest.modules)\r\n               entrytable.commands = store_package_items(repos.package_commands, name, version, manifest.commands)\r\n            end\r\n            table.insert(versiontable, entrytable)\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 193,
    "text": "local entrytable = {}",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "entrytable.arch = entry.arch",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "if entry.arch == \"installed\" then\r\n               local rock_manifest = load_rock_manifest(name, version)\r\n               if not rock_manifest then\r\n                  return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n               end\r\n               entrytable.modules = store_package_items(repos.package_modules, name, version, manifest.modules)\r\n               entrytable.commands = store_package_items(repos.package_commands, name, version, manifest.commands)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "local rock_manifest = load_rock_manifest(name, version)",
    "type": "statement:localassign"
  }, {
    "id": 197,
    "text": "if not rock_manifest then\r\n                  return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n               end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "entrytable.modules = store_package_items(repos.package_modules, name, version, manifest.modules)",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "entrytable.commands = store_package_items(repos.package_commands, name, version, manifest.commands)",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "table.insert(versiontable, entrytable)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "pkgtable[version] = versiontable",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "manifest.repository[name] = pkgtable",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "if dep_handler then\r\n      dep_handler(manifest)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "dep_handler(manifest)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "sort_package_matching_table(manifest.modules)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "sort_package_matching_table(manifest.commands)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 208,
    "text": "function make_manifest(repo, deps_mode, remote)\r\n   assert(type(repo) == \"string\")\r\n   assert(type(deps_mode) == \"string\")\r\n\r\n   if deps_mode == \"none\" then deps_mode = cfg.deps_mode end\r\n\r\n   if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end\r\n\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   query.arch = \"any\"\r\n   local results = search.disk_search(repo, query)\r\n   local manifest = { repository = {}, modules = {}, commands = {} }\r\n\r\n   manif_core.manifest_cache[repo] = manifest\r\n\r\n   local dep_handler = nil\r\n   if not remote then\r\n      dep_handler = function(manifest)\r\n         update_dependencies(manifest, deps_mode)\r\n      end\r\n   end\r\n   local ok, err = store_results(results, manifest, dep_handler)\r\n   if not ok then return nil, err end\r\n\r\n   if remote then\r\n      local cache = {}\r\n      for luaver in util.lua_versions() do\r\n         local vmanifest = { repository = {}, modules = {}, commands = {} }\r\n         local dep_handler = function(manifest)\r\n            filter_by_lua_version(manifest, luaver, repo, cache)\r\n         end\r\n         local ok, err = store_results(results, vmanifest, dep_handler)\r\n         save_table(repo, \"manifest-\"..luaver, vmanifest)\r\n      end\r\n   end\r\n\r\n   return save_table(repo, \"manifest\", manifest)\r\nend",
    "type": "function"
  }, {
    "id": 209,
    "text": "assert(type(repo) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "if deps_mode == \"none\" then deps_mode = cfg.deps_mode end",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "deps_mode = cfg.deps_mode",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "local query = search.make_query(\"\")",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "query.exact_name = false",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "query.arch = \"any\"",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "local results = search.disk_search(repo, query)",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "local manifest = { repository = {}, modules = {}, commands = {} }",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "manif_core.manifest_cache[repo] = manifest",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "local dep_handler = nil",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "if not remote then\r\n      dep_handler = function(manifest)\r\n         update_dependencies(manifest, deps_mode)\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "dep_handler = function(manifest)\r\n         update_dependencies(manifest, deps_mode)\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "update_dependencies(manifest, deps_mode)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "local ok, err = store_results(results, manifest, dep_handler)",
    "type": "statement:localassign"
  }, {
    "id": 224,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "if remote then\r\n      local cache = {}\r\n      for luaver in util.lua_versions() do\r\n         local vmanifest = { repository = {}, modules = {}, commands = {} }\r\n         local dep_handler = function(manifest)\r\n            filter_by_lua_version(manifest, luaver, repo, cache)\r\n         end\r\n         local ok, err = store_results(results, vmanifest, dep_handler)\r\n         save_table(repo, \"manifest-\"..luaver, vmanifest)\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "local cache = {}",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "for luaver in util.lua_versions() do\r\n         local vmanifest = { repository = {}, modules = {}, commands = {} }\r\n         local dep_handler = function(manifest)\r\n            filter_by_lua_version(manifest, luaver, repo, cache)\r\n         end\r\n         local ok, err = store_results(results, vmanifest, dep_handler)\r\n         save_table(repo, \"manifest-\"..luaver, vmanifest)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 228,
    "text": "local vmanifest = { repository = {}, modules = {}, commands = {} }",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "local dep_handler = function(manifest)\r\n            filter_by_lua_version(manifest, luaver, repo, cache)\r\n         end",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "filter_by_lua_version(manifest, luaver, repo, cache)",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "local ok, err = store_results(results, vmanifest, dep_handler)",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "save_table(repo, \"manifest-\"..luaver, vmanifest)",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function(manifest)\r\n         update_dependencies(manifest, deps_mode)\r\n      end",
    "type": "function"
  }, {
    "id": 235,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 236,
    "text": "function(manifest)\r\n            filter_by_lua_version(manifest, luaver, repo, cache)\r\n         end",
    "type": "function"
  }, {
    "id": 237,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 238,
    "text": "function update_manifest(name, version, repo, deps_mode)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   repo = path.rocks_dir(repo or cfg.root_dir)\r\n   assert(type(deps_mode) == \"string\")\r\n   \r\n   if deps_mode == \"none\" then deps_mode = cfg.deps_mode end\r\n\r\n   util.printout(\"Updating manifest for \"..repo)\r\n\r\n   local manifest, err = load_manifest(repo)\r\n   if not manifest then\r\n      util.printerr(\"No existing manifest. Attempting to rebuild...\")\r\n      local ok, err = make_manifest(repo, deps_mode)\r\n      if not ok then\r\n         return nil, err\r\n      end\r\n      manifest, err = load_manifest(repo)\r\n      if not manifest then\r\n         return nil, err\r\n      end\r\n   end\r\n\r\n   local results = {[name] = {[version] = {{arch = \"installed\", repo = repo}}}}\r\n\r\n   local dep_handler = function(manifest)\r\n      update_dependencies(manifest, deps_mode)\r\n   end\r\n   local ok, err = store_results(results, manifest, dep_handler)\r\n   if not ok then return nil, err end\r\n\r\n   return save_table(repo, \"manifest\", manifest)\r\nend",
    "type": "function"
  }, {
    "id": 239,
    "text": "repo = path.rocks_dir(repo or cfg.root_dir)",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "util.printout(\"Updating manifest for \"..repo)",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "local manifest, err = load_manifest(repo)",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "if not manifest then\r\n      util.printerr(\"No existing manifest. Attempting to rebuild...\")\r\n      local ok, err = make_manifest(repo, deps_mode)\r\n      if not ok then\r\n         return nil, err\r\n      end\r\n      manifest, err = load_manifest(repo)\r\n      if not manifest then\r\n         return nil, err\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "util.printerr(\"No existing manifest. Attempting to rebuild...\")",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "local ok, err = make_manifest(repo, deps_mode)",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "if not ok then\r\n         return nil, err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "manifest, err = load_manifest(repo)",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "if not manifest then\r\n         return nil, err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "local results = {[name] = {[version] = {{arch = \"installed\", repo = repo}}}}",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "local dep_handler = function(manifest)\r\n      update_dependencies(manifest, deps_mode)\r\n   end",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function(manifest)\r\n      update_dependencies(manifest, deps_mode)\r\n   end",
    "type": "function"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "function zip_manifests()\r\n   for ver in util.lua_versions() do\r\n      local file = \"manifest-\"..ver\r\n      local zip = file..\".zip\"\r\n      fs.delete(dir.path(fs.current_dir(), zip))\r\n      fs.zip(zip, file)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 254,
    "text": "for ver in util.lua_versions() do\r\n      local file = \"manifest-\"..ver\r\n      local zip = file..\".zip\"\r\n      fs.delete(dir.path(fs.current_dir(), zip))\r\n      fs.zip(zip, file)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 255,
    "text": "local file = \"manifest-\"..ver",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "local zip = file..\".zip\"",
    "type": "statement:localassign"
  }, {
    "id": 257,
    "text": "fs.delete(dir.path(fs.current_dir(), zip))",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "fs.zip(zip, file)",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "local function find_providers(file, root)\r\n   assert(type(file) == \"string\")\r\n   root = root or cfg.root_dir\r\n\r\n   local manifest, err = manif_core.load_local_manifest(path.rocks_dir(root))\r\n   if not manifest then\r\n      return nil, \"untracked\"\r\n   end\r\n   local deploy_bin = path.deploy_bin_dir(root)\r\n   local deploy_lua = path.deploy_lua_dir(root)\r\n   local deploy_lib = path.deploy_lib_dir(root)\r\n   local key, manifest_tbl\r\n\r\n   if util.starts_with(file, deploy_lua) then\r\n      manifest_tbl = manifest.modules\r\n      key = path.path_to_module(file:sub(#deploy_lua+1):gsub(\"\\\\\", \"/\"))\r\n   elseif util.starts_with(file, deploy_lib) then\r\n      manifest_tbl = manifest.modules\r\n      key = path.path_to_module(file:sub(#deploy_lib+1):gsub(\"\\\\\", \"/\"))\r\n   elseif util.starts_with(file, deploy_bin) then\r\n      manifest_tbl = manifest.commands\r\n      key = file:sub(#deploy_bin+1):gsub(\"^[\\\\/]*\", \"\")\r\n   else\r\n      assert(false, \"Assertion failed: '\"..file..\"' is not a deployed file.\")\r\n   end\r\n\r\n   local providers = manifest_tbl[key]\r\n   if not providers then\r\n      return nil, \"untracked\"\r\n   end\r\n   return providers\r\nend",
    "type": "function"
  }, {
    "id": 261,
    "text": "assert(type(file) == \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "root = root or cfg.root_dir",
    "type": "statement:assign"
  }, {
    "id": 263,
    "text": "local manifest, err = manif_core.load_local_manifest(path.rocks_dir(root))",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "if not manifest then\r\n      return nil, \"untracked\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "local deploy_bin = path.deploy_bin_dir(root)",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "local deploy_lua = path.deploy_lua_dir(root)",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "local deploy_lib = path.deploy_lib_dir(root)",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "local key, manifest_tbl",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "if util.starts_with(file, deploy_lua) then\r\n      manifest_tbl = manifest.modules\r\n      key = path.path_to_module(file:sub(#deploy_lua+1):gsub(\"\\\\\", \"/\"))\r\n   elseif util.starts_with(file, deploy_lib) then\r\n      manifest_tbl = manifest.modules\r\n      key = path.path_to_module(file:sub(#deploy_lib+1):gsub(\"\\\\\", \"/\"))\r\n   elseif util.starts_with(file, deploy_bin) then\r\n      manifest_tbl = manifest.commands\r\n      key = file:sub(#deploy_bin+1):gsub(\"^[\\\\/]*\", \"\")\r\n   else\r\n      assert(false, \"Assertion failed: '\"..file..\"' is not a deployed file.\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "manifest_tbl = manifest.modules",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "key = path.path_to_module(file:sub(#deploy_lua+1):gsub(\"\\\\\", \"/\"))",
    "type": "statement:assign"
  }, {
    "id": 272,
    "text": "key = path.path_to_module(file:sub(#deploy_lib+1):gsub(\"\\\\\", \"/\"))",
    "type": "statement:assign"
  }, {
    "id": 273,
    "text": "manifest_tbl = manifest.commands",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "key = file:sub(#deploy_bin+1):gsub(\"^[\\\\/]*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 275,
    "text": "assert(false, \"Assertion failed: '\"..file..\"' is not a deployed file.\")",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "local providers = manifest_tbl[key]",
    "type": "statement:localassign"
  }, {
    "id": 277,
    "text": "if not providers then\r\n      return nil, \"untracked\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 278,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 279,
    "text": "function find_current_provider(file, root)\r\n   local providers, err = find_providers(file, root)\r\n   if not providers then return nil, err end\r\n   return providers[1]:match(\"([^/]*)/([^/]*)\")\r\nend",
    "type": "function"
  }, {
    "id": 280,
    "text": "local providers, err = find_providers(file, root)",
    "type": "statement:localassign"
  }, {
    "id": 281,
    "text": "if not providers then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 282,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 283,
    "text": "function find_next_provider(file, root)\r\n   local providers, err = find_providers(file, root)\r\n   if not providers then return nil, err end\r\n   if providers[2] then\r\n      return providers[2]:match(\"([^/]*)/([^/]*)\")\r\n   else\r\n      return nil\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 284,
    "text": "if providers[2] then\r\n      return providers[2]:match(\"([^/]*)/([^/]*)\")\r\n   else\r\n      return nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 285,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 286,
    "text": "",
    "type": "function container"
  }, {
    "id": 287,
    "text": "function manifest_loader(file, repo_url, quick)\r\n   local manifest, err = persist.load_into_table(file)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest for \"..repo_url..\": \"..err\r\n   end\r\n   if not quick then\r\n      local ok, err = type_check.type_check_manifest(manifest)\r\n      if not ok then\r\n         return nil, \"Error checking manifest: \"..err\r\n      end\r\n   end\r\n\r\n   manifest_cache[repo_url] = manifest\r\n   return manifest\r\nend",
    "type": "function"
  }, {
    "id": 288,
    "text": "function load_local_manifest(repo_url)\r\n   assert(type(repo_url) == \"string\")\r\n\r\n   if manifest_cache[repo_url] then\r\n      return manifest_cache[repo_url]\r\n   end\r\n\r\n   local pathname = dir.path(repo_url, \"manifest\")\r\n\r\n   return manifest_loader(pathname, repo_url, true)\r\nend",
    "type": "function"
  }, {
    "id": 289,
    "text": "local function do_pack_binary_rock(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   local query = search.make_query(name, version)\r\n   query.exact_name = true\r\n   local results = {}\r\n   \r\n   search.manifest_search(results, cfg.rocks_dir, query)\r\n   \r\n   if not next(results) then\r\n      return nil, \"'\"..name..\"' does not seem to be an installed rock.\"\r\n   end\r\n   \r\n   local versions = results[name]\r\n   \r\n   if not version then\r\n      local first = next(versions)\r\n      if next(versions, first) then\r\n         return nil, \"Please specify which version of '\"..name..\"' to pack.\"\r\n      end\r\n      version = first\r\n   end\r\n   if not version:match(\"[^-]+%-%d+\") then\r\n      return nil, \"Expected version \"..version..\" in version-revision format.\"\r\n   end\r\n   \r\n   local info = versions[version][1]\r\n   \r\n   local root = path.root_dir(info.repo)\r\n   local prefix = path.install_dir(name, version, root)\r\n   if not fs.exists(prefix) then\r\n      return nil, \"'\"..name..\" \"..version..\"' does not seem to be an installed rock.\"\r\n   end\r\n   \r\n   local rock_manifest = manif.load_rock_manifest(name, version, root)\r\n   if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end\r\n\r\n   local name_version = name .. \"-\" .. version\r\n   local rock_file = fs.absolute_name(name_version .. \".\"..cfg.arch..\".rock\")\r\n   \r\n   local temp_dir = fs.make_temp_dir(\"pack\")\r\n   fs.copy_contents(prefix, temp_dir)\r\n\r\n   local is_binary = false\r\n   if rock_manifest.lib then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lib, path.deploy_lib_dir(root), dir.path(temp_dir, \"lib\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n      is_binary = true\r\n   end\r\n   if rock_manifest.lua then\r\n      local ok, err = copy_back_files(name, version, rock_manifest.lua, path.deploy_lua_dir(root), dir.path(temp_dir, \"lua\"))\r\n      if not ok then return nil, \"Failed copying back files: \" .. err end\r\n   end\r\n   \r\n   local ok, err = fs.change_dir(temp_dir)\r\n   if not ok then return nil, err end\r\n   if not is_binary and not repos.has_binaries(name, version) then\r\n      rock_file = rock_file:gsub(\"%.\"..cfg.arch:gsub(\"%-\",\"%%-\")..\"%.\", \".all.\")\r\n   end\r\n   fs.delete(rock_file)\r\n   if not fs.zip(rock_file, unpack(fs.list_dir())) then\r\n      return nil, \"Failed packing \"..rock_file\r\n   end\r\n   fs.pop_dir()\r\n   fs.delete(temp_dir)\r\n   return rock_file\r\nend",
    "type": "function"
  }, {
    "id": 290,
    "text": "function rocks_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.rocks_subdir)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.rocks_dir or dir.path(tree.root, cfg.rocks_subdir)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 291,
    "text": "function deploy_bin_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, \"bin\")\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.bin_dir or dir.path(tree.root, \"bin\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 292,
    "text": "function deploy_lua_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.lua_modules_path)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.lua_dir or dir.path(tree.root, cfg.lua_modules_path)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 293,
    "text": "function deploy_lib_dir(tree)\r\n   if type(tree) == \"string\" then\r\n      return dir.path(tree, cfg.lib_modules_path)\r\n   else\r\n      assert(type(tree) == \"table\")\r\n      return tree.lib_dir or dir.path(tree.root, cfg.lib_modules_path)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 294,
    "text": "function install_dir(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version)\r\nend",
    "type": "function"
  }, {
    "id": 295,
    "text": "function rock_manifest_file(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, \"rock_manifest\")\r\nend",
    "type": "function"
  }, {
    "id": 296,
    "text": "function path_to_module(file)\r\n   assert(type(file) == \"string\")\r\n\r\n   local name = file:match(\"(.*)%.\"..cfg.lua_extension..\"$\")\r\n   if name then\r\n      name = name:gsub(dir.separator, \".\")\r\n      local init = name:match(\"(.*)%.init$\")\r\n      if init then\r\n         name = init\r\n      end\r\n   else\r\n      name = file:match(\"(.*)%.\"..cfg.lib_extension..\"$\")\r\n      if name then\r\n         name = name:gsub(dir.separator, \".\")\r\n      end\r\n   end\r\n   if not name then name = file end\r\n   name = name:gsub(\"^%.+\", \"\"):gsub(\"%.+$\", \"\")\r\n   return name\r\nend",
    "type": "function"
  }, {
    "id": 297,
    "text": "function load_into_table(filename, tbl)\r\n   assert(type(filename) == \"string\")\r\n   assert(type(tbl) == \"table\" or not tbl)\r\n\r\n   local result, chunk, ran, err\r\n   local result = tbl or {}\r\n   if _VERSION == \"Lua 5.1\" then -- Lua 5.1\r\n      chunk, err = loadfile(filename)\r\n      if chunk then\r\n         setfenv(chunk, result)\r\n         ran, err = pcall(chunk)\r\n      end\r\n   else -- Lua 5.2\r\n      chunk, err = loadfile(filename, \"t\", result)\r\n      if chunk then\r\n         ran, err = pcall(chunk)\r\n      end\r\n   end\r\n   \r\n   if not chunk then\r\n      if err:sub(1,5) ~= filename:sub(1,5) then\r\n         return false, err\r\n      end\r\n      return nil, \"Error loading file: \"..err\r\n   end\r\n   if not ran then\r\n      return nil, \"Error running file: \"..err\r\n   end\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 298,
    "text": "function save_from_table(filename, tbl, field_order)\r\n   local out = io.open(filename, \"w\")\r\n   if not out then\r\n      return nil, \"Cannot create file at \"..filename\r\n   end\r\n   write_table(out, tbl, field_order)\r\n   out:close()\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 299,
    "text": "function run(...)\r\n   local flags = util.parse_flags(...)\r\n   \r\n   local tree = flags[\"tree\"]\r\n\r\n   if type(tree) ~= \"string\" then\r\n      return nil, \"The --tree argument is mandatory. \"..util.see_help(\"purge\")\r\n   end\r\n   \r\n   local results = {}\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   if not fs.is_dir(tree) then\r\n      return nil, \"Directory not found: \"..tree\r\n   end\r\n\r\n   local ok, err = fs.check_command_permissions(flags)\r\n   if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n\r\n   search.manifest_search(results, path.rocks_dir(tree), query)\r\n\r\n   local sort = function(a,b) return deps.compare_versions(b,a) end\r\n   if flags[\"old-versions\"] then\r\n      sort = deps.compare_versions\r\n   end\r\n\r\n   for package, versions in util.sortedpairs(results) do\r\n      for version, repositories in util.sortedpairs(versions, sort) do\r\n         if flags[\"old-versions\"] then\r\n            util.printout(\"Keeping \"..package..\" \"..version..\"...\")\r\n            local ok, err = remove.remove_other_versions(package, version, flags[\"force\"])\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n            break\r\n         else\r\n            util.printout(\"Removing \"..package..\" \"..version..\"...\")\r\n            local ok, err = repos.delete_version(package, version, true)\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return manif.make_manifest(cfg.rocks_dir, \"one\")\r\nend",
    "type": "function"
  }, {
    "id": 300,
    "text": "function remove_search_results(results, name, deps_mode, force) \r\n   local versions = results[name]\r\n\r\n   local version = next(versions)\r\n   local second = next(versions, version)\r\n   \r\n   local dependents = {}\r\n   if force ~= \"fast\" then\r\n      util.printout(\"Checking stability of dependencies on the absence of\")\r\n      util.printout(name..\" \"..table.concat(util.keys(versions), \", \")..\"...\")\r\n      util.printout()\r\n      dependents = check_dependents(name, versions, deps_mode)\r\n   end\r\n   \r\n   if #dependents > 0 then\r\n      if force then\r\n         util.printerr(\"The following packages may be broken by this forced removal:\")\r\n         for _, dependent in ipairs(dependents) do\r\n            util.printerr(dependent.name..\" \"..dependent.version)\r\n         end\r\n         util.printerr()\r\n      else\r\n         if not second then\r\n            util.printerr(\"Will not remove \"..name..\" \"..version..\".\")\r\n            util.printerr(\"Removing it would break dependencies for: \")\r\n         else\r\n            util.printerr(\"Will not remove installed versions of \"..name..\".\")\r\n            util.printerr(\"Removing them would break dependencies for: \")\r\n         end\r\n         for _, dependent in ipairs(dependents) do\r\n            util.printerr(dependent.name..\" \"..dependent.version)\r\n         end\r\n         util.printerr()\r\n         util.printerr(\"Use --force to force removal (warning: this may break modules).\")\r\n         return nil, \"Failed removing.\"\r\n      end\r\n   end\r\n   \r\n   local ok, err = delete_versions(name, versions)\r\n   if not ok then return nil, err end\r\n   ok, err = manif.make_manifest(cfg.rocks_dir, deps_mode)\r\n   if not ok then return nil, err end\r\n\r\n   util.printout(\"Removal successful.\")\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 301,
    "text": "function package_modules(package, version)\r\n   assert(type(package) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local result = {}\r\n   local rock_manifest = manif.load_rock_manifest(package, version)\r\n   store_package_data(result, package, rock_manifest.lib)\r\n   store_package_data(result, package, rock_manifest.lua)\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 302,
    "text": "function package_commands(package, version)\r\n   assert(type(package) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local result = {}\r\n   local rock_manifest = manif.load_rock_manifest(package, version)\r\n   store_package_data(result, package, rock_manifest.bin)\r\n   return result\r\nend",
    "type": "function"
  }, {
    "id": 303,
    "text": "function has_binaries(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   if rock_manifest.bin then\r\n      for name, md5 in pairs(rock_manifest.bin) do\r\n         -- TODO verify that it is the same file. If it isn't, find the actual command.\r\n         if fs.is_actual_binary(dir.path(cfg.deploy_bin_dir, name)) then\r\n            return true\r\n         end\r\n      end\r\n   end\r\n   return false\r\nend",
    "type": "function"
  }, {
    "id": 304,
    "text": "local function resolve_conflict(target, deploy_dir, name, version)\r\n   local cname, cversion = manif.find_current_provider(target)\r\n   if not cname then\r\n      return nil, cversion\r\n   end\r\n   if name ~= cname or deps.compare_versions(version, cversion) then\r\n      local versioned = path.versioned_name(target, deploy_dir, cname, cversion)\r\n      local ok, err = fs.make_dir(dir.dir_name(versioned))\r\n      if not ok then return nil, err end\r\n      fs.move(target, versioned)\r\n      return target\r\n   else\r\n      return path.versioned_name(target, deploy_dir, name, version)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 305,
    "text": "function deploy_files(name, version, wrap_bin_scripts)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   assert(type(wrap_bin_scripts) == \"boolean\")\r\n\r\n   local function deploy_file_tree(file_tree, path_fn, deploy_dir, move_fn)\r\n      local source_dir = path_fn(name, version)\r\n      if not move_fn then\r\n         move_fn = fs.move\r\n      end\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local source = dir.path(source_dir, parent_path, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local ok, err\r\n            if fs.exists(target) then\r\n               local new_target, err = resolve_conflict(target, deploy_dir, name, version)\r\n               if err == \"untracked\" then\r\n                  local backup = target\r\n                  repeat\r\n                     backup = backup..\"~\"\r\n                  until not fs.exists(backup) -- slight race condition here, but shouldn't be a problem.\r\n                  util.printerr(\"Warning: \"..target..\" is not tracked by this installation of LuaRocks. Moving it to \"..backup)\r\n                  fs.move(target, backup)\r\n               elseif err then\r\n                  return nil, err..\" Cannot install new version.\"\r\n               else\r\n                  target = new_target\r\n               end\r\n            end\r\n            ok, err = fs.make_dir(dir.dir_name(target))\r\n            if not ok then return nil, err end\r\n            ok, err = move_fn(source, target, name, version)\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(source))\r\n            if not ok then return nil, err end\r\n            return true\r\n         end\r\n      )\r\n   end\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   \r\n   local ok, err = true\r\n   if rock_manifest.bin then\r\n      local move_bin_fn = wrap_bin_scripts and install_binary or fs.copy_binary\r\n      ok, err = deploy_file_tree(rock_manifest.bin, path.bin_dir, cfg.deploy_bin_dir, move_bin_fn)\r\n   end\r\n   if ok and rock_manifest.lua then\r\n      ok, err = deploy_file_tree(rock_manifest.lua, path.lua_dir, cfg.deploy_lua_dir)\r\n   end\r\n   if ok and rock_manifest.lib then\r\n      ok, err = deploy_file_tree(rock_manifest.lib, path.lib_dir, cfg.deploy_lib_dir)\r\n   end\r\n   return ok, err\r\nend",
    "type": "function"
  }, {
    "id": 306,
    "text": "function delete_version(name, version, quick)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local function delete_deployed_file_tree(file_tree, deploy_dir, suffix)\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local versioned = path.versioned_name(target, deploy_dir, name, version)\r\n            local ok, name, err = delete_suffixed(versioned, suffix)\r\n            if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end\r\n            if err == \"fail\" then return nil, name end\r\n            ok, name, err = delete_suffixed(target, suffix)\r\n            if err == \"fail\" then return nil, name end\r\n            if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(target))\r\n            return true\r\n         end\r\n      )\r\n   end\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end\r\n   \r\n   local ok, err = true\r\n   if rock_manifest.bin then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.bin, cfg.deploy_bin_dir, cfg.wrapper_suffix)\r\n   end\r\n   if ok and rock_manifest.lua then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lua, cfg.deploy_lua_dir)\r\n   end\r\n   if ok and rock_manifest.lib then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lib, cfg.deploy_lib_dir)\r\n   end\r\n   if err then return nil, err end\r\n\r\n   fs.delete(path.install_dir(name, version))\r\n   if not get_installed_versions(name) then\r\n      fs.delete(dir.path(cfg.rocks_dir, name))\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 307,
    "text": "local function delete_deployed_file_tree(file_tree, deploy_dir, suffix)\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local versioned = path.versioned_name(target, deploy_dir, name, version)\r\n            local ok, name, err = delete_suffixed(versioned, suffix)\r\n            if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end\r\n            if err == \"fail\" then return nil, name end\r\n            ok, name, err = delete_suffixed(target, suffix)\r\n            if err == \"fail\" then return nil, name end\r\n            if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(target))\r\n            return true\r\n         end\r\n      )\r\n   end",
    "type": "function"
  }, {
    "id": 308,
    "text": "function disk_search(repo, query, results)\r\n   assert(type(repo) == \"string\")\r\n   assert(type(query) == \"table\")\r\n   assert(type(results) == \"table\" or not results)\r\n   \r\n   local fs = require(\"luarocks.fs\")\r\n     \r\n   if not results then\r\n      results = {}\r\n   end\r\n   query_arch_as_table(query)\r\n   \r\n   for _, name in pairs(fs.list_dir(repo)) do\r\n      local pathname = dir.path(repo, name)\r\n      local rname, rversion, rarch = path.parse_name(name)\r\n\r\n      if rname and (pathname:match(\".rockspec$\") or pathname:match(\".rock$\")) then\r\n         store_if_match(results, repo, rname, rversion, rarch, query)\r\n      elseif fs.is_dir(pathname) then\r\n         for _, version in pairs(fs.list_dir(pathname)) do\r\n            if version:match(\"-%d+$\") then\r\n               store_if_match(results, repo, name, version, \"installed\", query)\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return results\r\nend",
    "type": "function"
  }, {
    "id": 309,
    "text": "function manifest_search(results, repo, query)\r\n   assert(type(results) == \"table\")\r\n   assert(type(repo) == \"string\")\r\n   assert(type(query) == \"table\")\r\n   \r\n   query_arch_as_table(query)\r\n   local manifest, err = manif.load_manifest(repo)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest: \"..err\r\n   end\r\n   for name, versions in pairs(manifest.repository) do\r\n      for version, items in pairs(versions) do\r\n         for _, item in ipairs(items) do\r\n            store_if_match(results, repo, name, version, item.arch, query)\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 310,
    "text": "function make_query(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n   \r\n   local query = {\r\n      name = name,\r\n      constraints = {}\r\n   }\r\n   if version then\r\n      table.insert(query.constraints, { op = \"==\", version = deps.parse_version(version)})\r\n   end\r\n   return query\r\nend",
    "type": "function"
  }, {
    "id": 311,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if not name then\r\n      return nil, \"Argument missing. \"..util.see_help(\"show\")\r\n   end\r\n   \r\n   local repo, repo_url\r\n   name, version, repo, repo_url = pick_installed_rock(name, version, flags[\"tree\"])\r\n   if not name then\r\n      return nil, version\r\n   end\r\n\r\n   local directory = path.install_dir(name,version,repo)\r\n   local rockspec_file = path.rockspec_file(name, version, repo)\r\n   local rockspec, err = fetch.load_local_rockspec(rockspec_file)\r\n   if not rockspec then return nil,err end\r\n\r\n   local descript = rockspec.description or {}\r\n   local manifest, err = manif.load_manifest(repo_url)\r\n   if not manifest then return nil,err end\r\n   local minfo = manifest.repository[name][version][1]\r\n\r\n   if flags[\"rock-tree\"] then util.printout(path.rocks_tree_to_string(repo))\r\n   elseif flags[\"rock-dir\"] then util.printout(directory)\r\n   elseif flags[\"home\"] then util.printout(descript.homepage)\r\n   elseif flags[\"modules\"] then util.printout(keys_as_string(minfo.modules))\r\n   elseif flags[\"deps\"] then util.printout(keys_as_string(minfo.dependencies))\r\n   elseif flags[\"rockspec\"] then util.printout(rockspec_file)\r\n   elseif flags[\"mversion\"] then util.printout(version)\r\n   else\r\n      util.printout()\r\n      util.printout(rockspec.package..\" \"..rockspec.version..\" - \"..(descript.summary or \"\"))\r\n      util.printout()\r\n      if descript.detailed then\r\n         util.printout(format_text(descript.detailed))\r\n         util.printout()\r\n      end\r\n      if descript.license then\r\n         util.printout(\"License: \", descript.license)\r\n      end\r\n      if descript.homepage then\r\n         util.printout(\"Homepage: \", descript.homepage)\r\n      end\r\n      util.printout(\"Installed in: \", path.rocks_tree_to_string(repo))\r\n      if next(minfo.modules) then\r\n         util.printout()\r\n         util.printout(\"Modules:\")\r\n         for mod, filename in util.sortedpairs(minfo.modules) do\r\n            util.printout(\"\\t\"..mod..\" (\"..path.which(mod, filename, name, version, repo, manifest)..\")\")\r\n         end\r\n      end\r\n      if next(minfo.dependencies) then\r\n         util.printout()\r\n         util.printout(\"Depends on:\")\r\n         util.printout(\"\\t\"..keys_as_string(minfo.dependencies, \"\\n\\t\"))\r\n      end\r\n      util.printout()\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 312,
    "text": "function lua_versions()\r\n   local versions = { \"5.1\", \"5.2\" }\r\n   local i = 0\r\n   return function()\r\n      i = i + 1\r\n      return versions[i]\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 313,
    "text": "function starts_with(s, prefix)\r\n   return s:sub(1,#prefix) == prefix\r\nend",
    "type": "function"
  }, {
    "id": 314,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 315,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 316,
    "text": "absolute_name",
    "type": "global function"
  }, {
    "id": 317,
    "text": "replace_file",
    "type": "global function"
  }, {
    "id": 318,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 319,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 320,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 321,
    "text": "module",
    "type": "global function"
  }, {
    "id": 322,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 323,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 324,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 325,
    "text": "itemsfn",
    "type": "global function"
  }, {
    "id": 326,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 327,
    "text": "type",
    "type": "global function"
  }, {
    "id": 328,
    "text": "next",
    "type": "global function"
  }, {
    "id": 329,
    "text": "require",
    "type": "global function"
  }, {
    "id": 330,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 331,
    "text": "util)",
    "type": "module"
  }, {
    "id": 332,
    "text": "fetch)",
    "type": "module"
  }, {
    "id": 333,
    "text": "dir)",
    "type": "module"
  }, {
    "id": 334,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 335,
    "text": "path)",
    "type": "module"
  }, {
    "id": 336,
    "text": "repos)",
    "type": "module"
  }, {
    "id": 337,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 338,
    "text": "search)",
    "type": "module"
  }, {
    "id": 339,
    "text": "persist)",
    "type": "module"
  }, {
    "id": 340,
    "text": "manif_core)",
    "type": "module"
  }, {
    "id": 341,
    "text": "",
    "type": "variable container"
  }, {
    "id": 342,
    "text": "",
    "type": "require container"
  }, {
    "id": 343,
    "text": "",
    "type": "global variable"
  }, {
    "id": 344,
    "text": "",
    "type": "n/a"
  }, {
    "id": 345,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 346,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 347,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 348,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 349,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 350,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 351,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 352,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 353,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 354,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 355,
    "text": "",
    "type": "require local variable"
  } ]
}