{
  "_filename": "remove.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luarocks/src/luarocks/remove.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 63
  }, {
    "from": 6,
    "label": "calls",
    "to": 63
  }, {
    "from": 7,
    "label": "calls",
    "to": 63
  }, {
    "from": 11,
    "label": "calls",
    "to": 63
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 12,
    "label": "has",
    "to": 30
  }, {
    "from": 12,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 38,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 38,
    "label": "has",
    "to": 30
  }, {
    "from": 38,
    "label": "has",
    "to": 59
  }, {
    "from": 38,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 30
  }, {
    "from": 38,
    "label": "has",
    "to": 60
  }, {
    "from": 38,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 30
  }, {
    "from": 38,
    "label": "has",
    "to": 61
  }, {
    "from": 38,
    "label": "has",
    "to": 30
  }, {
    "from": 38,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 30
  }, {
    "from": 63,
    "label": "has",
    "to": 30
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 30
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 30
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 68,
    "label": "has",
    "to": 30
  }, {
    "from": 68,
    "label": "has",
    "to": 64
  }, {
    "from": 68,
    "label": "has",
    "to": 79
  }, {
    "from": 68,
    "label": "has",
    "to": 80
  }, {
    "from": 68,
    "label": "has",
    "to": 30
  }, {
    "from": 68,
    "label": "has",
    "to": 30
  }, {
    "from": 68,
    "label": "has",
    "to": 81
  }, {
    "from": 12,
    "label": "calls",
    "to": 9
  }, {
    "from": 68,
    "label": "calls",
    "to": 5
  }, {
    "from": 68,
    "label": "calls",
    "to": 86
  }, {
    "from": 63,
    "label": "calls",
    "to": 38
  }, {
    "from": 68,
    "label": "calls",
    "to": 38
  }, {
    "from": 12,
    "label": "calls",
    "to": 84
  }, {
    "from": 63,
    "label": "calls",
    "to": 84
  }, {
    "from": 68,
    "label": "calls",
    "to": 84
  }, {
    "from": 38,
    "label": "calls",
    "to": 94
  }, {
    "from": 82,
    "label": "calls",
    "to": 92
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 82,
    "label": "calls",
    "to": 98
  }, {
    "from": 68,
    "label": "calls",
    "to": 10
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 38,
    "label": "calls",
    "to": 87
  }, {
    "from": 38,
    "label": "calls",
    "to": 91
  }, {
    "from": 38,
    "label": "calls",
    "to": 91
  }, {
    "from": 38,
    "label": "calls",
    "to": 12
  }, {
    "from": 12,
    "label": "calls",
    "to": 85
  }, {
    "from": 68,
    "label": "calls",
    "to": 85
  }, {
    "from": 38,
    "label": "calls",
    "to": 97
  }, {
    "from": 38,
    "label": "calls",
    "to": 97
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 93
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 89
  }, {
    "from": 38,
    "label": "calls",
    "to": 32
  }, {
    "from": 32,
    "label": "calls",
    "to": 83
  }, {
    "from": 38,
    "label": "calls",
    "to": 8
  }, {
    "from": 68,
    "label": "calls",
    "to": 96
  }, {
    "from": 82,
    "label": "calls",
    "to": 90
  }, {
    "from": 32,
    "label": "calls",
    "to": 88
  }, {
    "from": 38,
    "label": "calls",
    "to": 88
  }, {
    "from": 38,
    "label": "calls",
    "to": 88
  }, {
    "from": 38,
    "label": "calls",
    "to": 88
  }, {
    "from": 38,
    "label": "calls",
    "to": 88
  }, {
    "from": 12,
    "label": "calls",
    "to": 95
  }, {
    "from": 12,
    "label": "calls",
    "to": 95
  }, {
    "from": 12,
    "label": "calls",
    "to": 95
  }, {
    "from": 32,
    "label": "calls",
    "to": 95
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 82,
    "label": "declares",
    "to": 12
  }, {
    "from": 82,
    "label": "declares",
    "to": 32
  }, {
    "from": 82,
    "label": "declares",
    "to": 38
  }, {
    "from": 82,
    "label": "declares",
    "to": 63
  }, {
    "from": 82,
    "label": "declares",
    "to": 68
  }, {
    "from": 1,
    "label": "contains",
    "to": 108
  }, {
    "from": 1,
    "label": "contains",
    "to": 109
  }, {
    "from": 108,
    "label": "initializes",
    "to": 110
  }, {
    "from": 108,
    "label": "initializes",
    "to": 111
  }, {
    "from": 108,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 109,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "requires",
    "to": 107
  }, {
    "from": 109,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "requires",
    "to": 106
  }, {
    "from": 109,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "requires",
    "to": 101
  }, {
    "from": 109,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "requires",
    "to": 105
  }, {
    "from": 109,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "requires",
    "to": 104
  }, {
    "from": 109,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "requires",
    "to": 100
  }, {
    "from": 109,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "requires",
    "to": 99
  }, {
    "from": 109,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "requires",
    "to": 102
  }, {
    "from": 109,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 103
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "remove",
    "type": "module"
  }, {
    "id": 2,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"build\")\r\n   end\r\n   assert(type(version) == \"string\" or not version)\r\n\r\n   if flags[\"pack-binary-rock\"] then\r\n      return pack.pack_binary_rock(name, version, do_build, name, version, deps.get_deps_mode(flags))\r\n   else\r\n      local ok, err = fs.check_command_permissions(flags)\r\n      if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n      ok, err = do_build(name, version, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function match_deps(rockspec, blacklist, deps_mode)\r\n   assert(type(rockspec) == \"table\")\r\n   assert(type(blacklist) == \"table\" or not blacklist)\r\n   local matched, missing, no_upgrade = {}, {}, {}\r\n   \r\n   for _, dep in ipairs(rockspec.dependencies) do\r\n      local found = match_dep(dep, blacklist and blacklist[dep.name] or nil, deps_mode)\r\n      if found then\r\n         if not cfg.rocks_provided[dep.name] then\r\n            matched[dep] = found\r\n         end\r\n      else\r\n         if dep.constraints[1] and dep.constraints[1].no_upgrade then\r\n            no_upgrade[dep.name] = dep\r\n         else\r\n            missing[dep.name] = dep\r\n         end\r\n      end\r\n   end\r\n   return matched, missing, no_upgrade\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function load_rockspec(filename, location)\r\n   assert(type(filename) == \"string\")\r\n\r\n   local name\r\n   local basename = dir.base_name(filename)\r\n   if basename == \"rockspec\" then\r\n      name = \"rockspec\"\r\n   else\r\n      name = basename:match(\"(.*)%.rockspec\")\r\n      if not name then\r\n         return nil, \"Filename '\"..filename..\"' does not look like a rockspec.\"\r\n      end\r\n   end\r\n   \r\n   local err, errcode\r\n   if location then\r\n      local ok, err = fs.change_dir(location)\r\n      if not ok then return nil, err end\r\n      filename, err = fetch_url(filename)\r\n      fs.pop_dir()\r\n   else\r\n      filename, err, errcode = fetch_url_at_temp_dir(filename,\"luarocks-rockspec-\"..name)\r\n   end\r\n   if not filename then\r\n      return nil, err, errcode\r\n   end\r\n\r\n   return load_local_rockspec(filename)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function check_command_permissions(flags)\r\n   local root_dir = path.root_dir(cfg.rocks_dir)\r\n   local ok = true\r\n   local err = \"\"\r\n   for _, dir in ipairs { cfg.rocks_dir, root_dir } do\r\n      if fs.exists(dir) and not fs.is_writable(dir) then\r\n         ok = false\r\n         err = \"Your user does not have write permissions in \" .. dir\r\n         break\r\n      end\r\n   end\r\n   local root_parent = dir.dir_name(root_dir)\r\n   if ok and not fs.exists(root_dir) and not fs.is_writable(root_parent) then\r\n      ok = false\r\n      err = root_dir..\" does not exist and your user does not have write permissions in \" .. root_parent\r\n   end\r\n   if ok then\r\n      return true\r\n   else\r\n      if flags[\"local\"] then\r\n         err = err .. \" \\n-- please check your permissions.\"\r\n      else\r\n         err = err .. \" \\n-- you may want to run as a privileged user or use your local tree with --local.\"\r\n      end\r\n      return nil, err\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing. \"..util.see_help(\"install\")\r\n   end\r\n\r\n   local ok, err = fs.check_command_permissions(flags)\r\n   if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n\r\n   if name:match(\"%.rockspec$\") or name:match(\"%.src%.rock$\") then\r\n      util.printout(\"Using \"..name..\"... switching to 'build' mode\")\r\n      local build = require(\"luarocks.build\")\r\n      return build.run(name, util.forward_flags(flags, \"local\", \"keep\", \"deps-mode\"))\r\n   elseif name:match(\"%.rock$\") then\r\n      ok, err = install_binary_rock(name, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   else\r\n      local search = require(\"luarocks.search\")\r\n      local results, err = search.find_suitable_rock(search.make_query(name:lower(), version))\r\n      if err then\r\n         return nil, err\r\n      elseif type(results) == \"string\" then\r\n         local url = results\r\n         util.printout(\"Installing \"..url..\"...\")\r\n         return run(url, util.forward_flags(flags))\r\n      else\r\n         util.printout()\r\n         util.printerr(\"Could not determine which rock to install.\")\r\n         util.title(\"Search results:\")\r\n         search.print_results(results)\r\n         return nil, (next(results) and \"Please narrow your query.\" or \"No results found.\")\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function run(...)\r\n   local flags, rockspec = util.parse_flags(...)\r\n   assert(type(rockspec) == \"string\" or not rockspec)\r\n   \r\n   if not rockspec then\r\n      local files = fs.list_dir(fs.current_dir())\r\n      for _, file in pairs(files) do\r\n         if file:match(\"rockspec$\") then\r\n            if rockspec then\r\n               return nil, \"Please specify which rockspec file to use.\"\r\n            else\r\n               rockspec = file\r\n            end\r\n         end\r\n      end\r\n      if not rockspec then\r\n         return nil, \"Argument missing: please specify a rockspec to use on current directory.\"\r\n      end\r\n   end\r\n   if not rockspec:match(\"rockspec$\") then\r\n      return nil, \"Invalid argument: 'make' takes a rockspec as a parameter. \"..util.see_help(\"make\")\r\n   end\r\n\r\n   if flags[\"pack-binary-rock\"] then\r\n      local rspec, err, errcode = fetch.load_rockspec(rockspec)\r\n      if not rspec then\r\n         return nil, err\r\n      end\r\n      return pack.pack_binary_rock(rspec.name, rspec.version, build.build_rockspec, rockspec, false, true, deps.get_deps_mode(flags))\r\n   else\r\n      local ok, err = fs.check_command_permissions(flags)\r\n      if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n      ok, err = build.build_rockspec(rockspec, false, true, deps.get_deps_mode(flags))\r\n      if not ok then return nil, err end\r\n      local name, version = ok, err\r\n      if (not flags[\"keep\"]) and not cfg.keep_other_versions then\r\n         local ok, err = remove.remove_other_versions(name, version, flags[\"force\"])\r\n         if not ok then util.printerr(err) end\r\n      end\r\n      return name, version\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function make_manifest(repo, deps_mode, remote)\r\n   assert(type(repo) == \"string\")\r\n   assert(type(deps_mode) == \"string\")\r\n\r\n   if deps_mode == \"none\" then deps_mode = cfg.deps_mode end\r\n\r\n   if not fs.is_dir(repo) then\r\n      return nil, \"Cannot access repository at \"..repo\r\n   end\r\n\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   query.arch = \"any\"\r\n   local results = search.disk_search(repo, query)\r\n   local manifest = { repository = {}, modules = {}, commands = {} }\r\n\r\n   manif_core.manifest_cache[repo] = manifest\r\n\r\n   local dep_handler = nil\r\n   if not remote then\r\n      dep_handler = function(manifest)\r\n         update_dependencies(manifest, deps_mode)\r\n      end\r\n   end\r\n   local ok, err = store_results(results, manifest, dep_handler)\r\n   if not ok then return nil, err end\r\n\r\n   if remote then\r\n      local cache = {}\r\n      for luaver in util.lua_versions() do\r\n         local vmanifest = { repository = {}, modules = {}, commands = {} }\r\n         local dep_handler = function(manifest)\r\n            filter_by_lua_version(manifest, luaver, repo, cache)\r\n         end\r\n         local ok, err = store_results(results, vmanifest, dep_handler)\r\n         save_table(repo, \"manifest-\"..luaver, vmanifest)\r\n      end\r\n   end\r\n\r\n   return save_table(repo, \"manifest\", manifest)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function rockspec_file(name, version, tree)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n   tree = tree or cfg.root_dir\r\n   return dir.path(rocks_dir(tree), name, version, name..\"-\"..version..\".rockspec\")\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function parse_name(file_name)\r\n   assert(type(file_name) == \"string\")\r\n   if file_name:match(\"%.rock$\") then\r\n      return dir.base_name(file_name):match(\"(.*)-([^-]+-%d+)%.([^.]+)%.rock$\")\r\n   else\r\n      return dir.base_name(file_name):match(\"(.*)-([^-]+-%d+)%.(rockspec)\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function run(...)\r\n   local flags = util.parse_flags(...)\r\n   \r\n   local tree = flags[\"tree\"]\r\n\r\n   if type(tree) ~= \"string\" then\r\n      return nil, \"The --tree argument is mandatory. \"..util.see_help(\"purge\")\r\n   end\r\n   \r\n   local results = {}\r\n   local query = search.make_query(\"\")\r\n   query.exact_name = false\r\n   if not fs.is_dir(tree) then\r\n      return nil, \"Directory not found: \"..tree\r\n   end\r\n\r\n   local ok, err = fs.check_command_permissions(flags)\r\n   if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n\r\n   search.manifest_search(results, path.rocks_dir(tree), query)\r\n\r\n   local sort = function(a,b) return deps.compare_versions(b,a) end\r\n   if flags[\"old-versions\"] then\r\n      sort = deps.compare_versions\r\n   end\r\n\r\n   for package, versions in util.sortedpairs(results) do\r\n      for version, repositories in util.sortedpairs(versions, sort) do\r\n         if flags[\"old-versions\"] then\r\n            util.printout(\"Keeping \"..package..\" \"..version..\"...\")\r\n            local ok, err = remove.remove_other_versions(package, version, flags[\"force\"])\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n            break\r\n         else\r\n            util.printout(\"Removing \"..package..\" \"..version..\"...\")\r\n            local ok, err = repos.delete_version(package, version, true)\r\n            if not ok then\r\n               util.printerr(err)\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return manif.make_manifest(cfg.rocks_dir, \"one\")\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local function check_dependents(name, versions, deps_mode)\r\n   local dependents = {}\r\n   local blacklist = {}\r\n   blacklist[name] = {}\r\n   for version, _ in pairs(versions) do\r\n      blacklist[name][version] = true\r\n   end\r\n   local local_rocks = {}\r\n   local query_all = search.make_query(\"\")\r\n   query_all.exact_name = false\r\n   search.manifest_search(local_rocks, cfg.rocks_dir, query_all)\r\n   local_rocks[name] = nil\r\n   for rock_name, rock_versions in pairs(local_rocks) do\r\n      for rock_version, _ in pairs(rock_versions) do\r\n         local rockspec, err = fetch.load_rockspec(path.rockspec_file(rock_name, rock_version))\r\n         if rockspec then\r\n            local _, missing = deps.match_deps(rockspec, blacklist, deps_mode)\r\n            if missing[name] then\r\n               table.insert(dependents, { name = rock_name, version = rock_version })\r\n            end\r\n         end\r\n      end\r\n   end\r\n   return dependents\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local dependents = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local blacklist = {}",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "blacklist[name] = {}",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "for version, _ in pairs(versions) do\r\n      blacklist[name][version] = true\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "blacklist[name][version] = true",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local local_rocks = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local query_all = search.make_query(\"\")",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "query_all.exact_name = false",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "search.manifest_search(local_rocks, cfg.rocks_dir, query_all)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local_rocks[name] = nil",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "for rock_name, rock_versions in pairs(local_rocks) do\r\n      for rock_version, _ in pairs(rock_versions) do\r\n         local rockspec, err = fetch.load_rockspec(path.rockspec_file(rock_name, rock_version))\r\n         if rockspec then\r\n            local _, missing = deps.match_deps(rockspec, blacklist, deps_mode)\r\n            if missing[name] then\r\n               table.insert(dependents, { name = rock_name, version = rock_version })\r\n            end\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "for rock_version, _ in pairs(rock_versions) do\r\n         local rockspec, err = fetch.load_rockspec(path.rockspec_file(rock_name, rock_version))\r\n         if rockspec then\r\n            local _, missing = deps.match_deps(rockspec, blacklist, deps_mode)\r\n            if missing[name] then\r\n               table.insert(dependents, { name = rock_name, version = rock_version })\r\n            end\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "local rockspec, err = fetch.load_rockspec(path.rockspec_file(rock_name, rock_version))",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if rockspec then\r\n            local _, missing = deps.match_deps(rockspec, blacklist, deps_mode)\r\n            if missing[name] then\r\n               table.insert(dependents, { name = rock_name, version = rock_version })\r\n            end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local _, missing = deps.match_deps(rockspec, blacklist, deps_mode)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if missing[name] then\r\n               table.insert(dependents, { name = rock_name, version = rock_version })\r\n            end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "table.insert(dependents, { name = rock_name, version = rock_version })",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function delete_versions(name, versions) \r\n\r\n   for version, _ in pairs(versions) do\r\n      util.printout(\"Removing \"..name..\" \"..version..\"...\")\r\n      local ok, err = repos.delete_version(name, version)\r\n      if not ok then return nil, err end\r\n   end\r\n   \r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "for version, _ in pairs(versions) do\r\n      util.printout(\"Removing \"..name..\" \"..version..\"...\")\r\n      local ok, err = repos.delete_version(name, version)\r\n      if not ok then return nil, err end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "util.printout(\"Removing \"..name..\" \"..version..\"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "local ok, err = repos.delete_version(name, version)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function remove_search_results(results, name, deps_mode, force) \r\n   local versions = results[name]\r\n\r\n   local version = next(versions)\r\n   local second = next(versions, version)\r\n   \r\n   local dependents = {}\r\n   if force ~= \"fast\" then\r\n      util.printout(\"Checking stability of dependencies on the absence of\")\r\n      util.printout(name..\" \"..table.concat(util.keys(versions), \", \")..\"...\")\r\n      util.printout()\r\n      dependents = check_dependents(name, versions, deps_mode)\r\n   end\r\n   \r\n   if #dependents > 0 then\r\n      if force then\r\n         util.printerr(\"The following packages may be broken by this forced removal:\")\r\n         for _, dependent in ipairs(dependents) do\r\n            util.printerr(dependent.name..\" \"..dependent.version)\r\n         end\r\n         util.printerr()\r\n      else\r\n         if not second then\r\n            util.printerr(\"Will not remove \"..name..\" \"..version..\".\")\r\n            util.printerr(\"Removing it would break dependencies for: \")\r\n         else\r\n            util.printerr(\"Will not remove installed versions of \"..name..\".\")\r\n            util.printerr(\"Removing them would break dependencies for: \")\r\n         end\r\n         for _, dependent in ipairs(dependents) do\r\n            util.printerr(dependent.name..\" \"..dependent.version)\r\n         end\r\n         util.printerr()\r\n         util.printerr(\"Use --force to force removal (warning: this may break modules).\")\r\n         return nil, \"Failed removing.\"\r\n      end\r\n   end\r\n   \r\n   local ok, err = delete_versions(name, versions)\r\n   if not ok then return nil, err end\r\n   ok, err = manif.make_manifest(cfg.rocks_dir, deps_mode)\r\n   if not ok then return nil, err end\r\n\r\n   util.printout(\"Removal successful.\")\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local versions = results[name]",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local version = next(versions)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local second = next(versions, version)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if force ~= \"fast\" then\r\n      util.printout(\"Checking stability of dependencies on the absence of\")\r\n      util.printout(name..\" \"..table.concat(util.keys(versions), \", \")..\"...\")\r\n      util.printout()\r\n      dependents = check_dependents(name, versions, deps_mode)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "util.printout(\"Checking stability of dependencies on the absence of\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "util.printout(name..\" \"..table.concat(util.keys(versions), \", \")..\"...\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "util.printout()",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "dependents = check_dependents(name, versions, deps_mode)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if #dependents > 0 then\r\n      if force then\r\n         util.printerr(\"The following packages may be broken by this forced removal:\")\r\n         for _, dependent in ipairs(dependents) do\r\n            util.printerr(dependent.name..\" \"..dependent.version)\r\n         end\r\n         util.printerr()\r\n      else\r\n         if not second then\r\n            util.printerr(\"Will not remove \"..name..\" \"..version..\".\")\r\n            util.printerr(\"Removing it would break dependencies for: \")\r\n         else\r\n            util.printerr(\"Will not remove installed versions of \"..name..\".\")\r\n            util.printerr(\"Removing them would break dependencies for: \")\r\n         end\r\n         for _, dependent in ipairs(dependents) do\r\n            util.printerr(dependent.name..\" \"..dependent.version)\r\n         end\r\n         util.printerr()\r\n         util.printerr(\"Use --force to force removal (warning: this may break modules).\")\r\n         return nil, \"Failed removing.\"\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "if force then\r\n         util.printerr(\"The following packages may be broken by this forced removal:\")\r\n         for _, dependent in ipairs(dependents) do\r\n            util.printerr(dependent.name..\" \"..dependent.version)\r\n         end\r\n         util.printerr()\r\n      else\r\n         if not second then\r\n            util.printerr(\"Will not remove \"..name..\" \"..version..\".\")\r\n            util.printerr(\"Removing it would break dependencies for: \")\r\n         else\r\n            util.printerr(\"Will not remove installed versions of \"..name..\".\")\r\n            util.printerr(\"Removing them would break dependencies for: \")\r\n         end\r\n         for _, dependent in ipairs(dependents) do\r\n            util.printerr(dependent.name..\" \"..dependent.version)\r\n         end\r\n         util.printerr()\r\n         util.printerr(\"Use --force to force removal (warning: this may break modules).\")\r\n         return nil, \"Failed removing.\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "util.printerr(\"The following packages may be broken by this forced removal:\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "for _, dependent in ipairs(dependents) do\r\n            util.printerr(dependent.name..\" \"..dependent.version)\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "util.printerr(dependent.name..\" \"..dependent.version)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "util.printerr()",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if not second then\r\n            util.printerr(\"Will not remove \"..name..\" \"..version..\".\")\r\n            util.printerr(\"Removing it would break dependencies for: \")\r\n         else\r\n            util.printerr(\"Will not remove installed versions of \"..name..\".\")\r\n            util.printerr(\"Removing them would break dependencies for: \")\r\n         end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "util.printerr(\"Will not remove \"..name..\" \"..version..\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "util.printerr(\"Removing it would break dependencies for: \")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "util.printerr(\"Will not remove installed versions of \"..name..\".\")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "util.printerr(\"Removing them would break dependencies for: \")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "util.printerr(\"Use --force to force removal (warning: this may break modules).\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "local ok, err = delete_versions(name, versions)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "ok, err = manif.make_manifest(cfg.rocks_dir, deps_mode)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "util.printout(\"Removal successful.\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function remove_other_versions(name, version, force)\r\n   local results = {}\r\n   search.manifest_search(results, cfg.rocks_dir, { name = name, exact_name = true, constraints = {{ op = \"~=\", version = version}} })\r\n   if results[name] then\r\n      return remove_search_results(results, name, cfg.deps_mode, force)\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "search.manifest_search(results, cfg.rocks_dir, { name = name, exact_name = true, constraints = {{ op = \"~=\", version = version}} })",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if results[name] then\r\n      return remove_search_results(results, name, cfg.deps_mode, force)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function run(...)\r\n   local flags, name, version = util.parse_flags(...)\r\n   \r\n   if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing, see help.\"\r\n   end\r\n   \r\n   local deps_mode = flags[\"deps-mode\"] or cfg.deps_mode\r\n   \r\n   local ok, err = fs.check_command_permissions(flags)\r\n   if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end\r\n   \r\n   local rock_type = name:match(\"%.(rock)$\") or name:match(\"%.(rockspec)$\")\r\n   local filename = name\r\n   if rock_type then\r\n      name, version = path.parse_name(filename)\r\n      if not name then return nil, \"Invalid \"..rock_type..\" filename: \"..filename end\r\n   end\r\n\r\n   local results = {}\r\n   search.manifest_search(results, cfg.rocks_dir, search.make_query(name, version))\r\n   if not results[name] then\r\n      return nil, \"Could not find rock '\"..name..(version and \" \"..version or \"\")..\"' in local tree.\"\r\n   end\r\n\r\n   return remove_search_results(results, name, deps_mode, flags[\"force\"])\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local flags, name, version = util.parse_flags(...)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if type(name) ~= \"string\" then\r\n      return nil, \"Argument missing, see help.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "local deps_mode = flags[\"deps-mode\"] or cfg.deps_mode",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local ok, err = fs.check_command_permissions(flags)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if not ok then return nil, err, cfg.errorcodes.PERMISSIONDENIED end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local rock_type = name:match(\"%.(rock)$\") or name:match(\"%.(rockspec)$\")",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local filename = name",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if rock_type then\r\n      name, version = path.parse_name(filename)\r\n      if not name then return nil, \"Invalid \"..rock_type..\" filename: \"..filename end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "name, version = path.parse_name(filename)",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if not name then return nil, \"Invalid \"..rock_type..\" filename: \"..filename end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "search.manifest_search(results, cfg.rocks_dir, search.make_query(name, version))",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "if not results[name] then\r\n      return nil, \"Could not find rock '\"..name..(version and \" \"..version or \"\")..\"' in local tree.\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "",
    "type": "function container"
  }, {
    "id": 83,
    "text": "function delete_version(name, version, quick)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\")\r\n\r\n   local function delete_deployed_file_tree(file_tree, deploy_dir, suffix)\r\n      return recurse_rock_manifest_tree(file_tree, \r\n         function(parent_path, parent_module, file)\r\n            local target = dir.path(deploy_dir, parent_path, file)\r\n            local versioned = path.versioned_name(target, deploy_dir, name, version)\r\n            local ok, name, err = delete_suffixed(versioned, suffix)\r\n            if ok then\r\n               fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               return true\r\n            end\r\n            if err == \"fail\" then return nil, name end\r\n            ok, name, err = delete_suffixed(target, suffix)\r\n            if err == \"fail\" then return nil, name end\r\n            if not quick then\r\n               local next_name, next_version = manif.find_next_provider(target)\r\n               if next_name then\r\n                  local versioned = path.versioned_name(name, deploy_dir, next_name, next_version)\r\n                  fs.move(versioned, name)\r\n                  fs.remove_dir_tree_if_empty(dir.dir_name(versioned))\r\n               end\r\n            end\r\n            fs.remove_dir_tree_if_empty(dir.dir_name(target))\r\n            return true\r\n         end\r\n      )\r\n   end\r\n\r\n   local rock_manifest = manif.load_rock_manifest(name, version)\r\n   if not rock_manifest then\r\n      return nil, \"rock_manifest file not found for \"..name..\" \"..version..\" - not a LuaRocks 2 tree?\"\r\n   end\r\n   \r\n   local ok, err = true\r\n   if rock_manifest.bin then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.bin, cfg.deploy_bin_dir, cfg.wrapper_suffix)\r\n   end\r\n   if ok and rock_manifest.lua then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lua, cfg.deploy_lua_dir)\r\n   end\r\n   if ok and rock_manifest.lib then\r\n      ok, err = delete_deployed_file_tree(rock_manifest.lib, cfg.deploy_lib_dir)\r\n   end\r\n   if err then return nil, err end\r\n\r\n   fs.delete(path.install_dir(name, version))\r\n   if not get_installed_versions(name) then\r\n      fs.delete(dir.path(cfg.rocks_dir, name))\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "function manifest_search(results, repo, query)\r\n   assert(type(results) == \"table\")\r\n   assert(type(repo) == \"string\")\r\n   assert(type(query) == \"table\")\r\n   \r\n   query_arch_as_table(query)\r\n   local manifest, err = manif.load_manifest(repo)\r\n   if not manifest then\r\n      return nil, \"Failed loading manifest: \"..err\r\n   end\r\n   for name, versions in pairs(manifest.repository) do\r\n      for version, items in pairs(versions) do\r\n         for _, item in ipairs(items) do\r\n            store_if_match(results, repo, name, version, item.arch, query)\r\n         end\r\n      end\r\n   end\r\n   return true\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "function make_query(name, version)\r\n   assert(type(name) == \"string\")\r\n   assert(type(version) == \"string\" or not version)\r\n   \r\n   local query = {\r\n      name = name,\r\n      constraints = {}\r\n   }\r\n   if version then\r\n      table.insert(query.constraints, { op = \"==\", version = deps.parse_version(version)})\r\n   end\r\n   return query\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "function parse_flags(...)\r\n   local args = {...}\r\n   local flags = {}\r\n   for i = #args, 1, -1 do\r\n      local flag = args[i]:match(\"^%-%-(.*)\")\r\n      if flag then\r\n         local var,val = flag:match(\"([a-z_%-]*)=(.*)\")\r\n         if val then\r\n            flags[var] = val\r\n         else\r\n            flags[flag] = true\r\n         end\r\n         table.remove(args, i)\r\n      end\r\n   end\r\n   return flags, unpack(args)\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "function keys(tbl)\r\n   local ks = {}\r\n   for k,_ in pairs(tbl) do\r\n      table.insert(ks, k)\r\n   end\r\n   return ks\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "function printout(...)\r\n   io.stdout:write(table.concat({...},\"\\t\"))\r\n   io.stdout:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "function printerr(...)\r\n   io.stderr:write(table.concat({...},\"\\t\"))\r\n   io.stderr:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "function deps_mode_help(program)\r\n   return [[\r\n--deps-mode=<mode>  How to handle dependencies. Four modes are supported:\r\n                    * all - use all trees from the rocks_trees list\r\n                      for finding dependencies\r\n                    * one - use only the current tree (possibly set\r\n                      with --tree)\r\n                    * order - use trees based on order (use the current\r\n                      tree and all trees below it on the rocks_trees list)\r\n                    * none - ignore dependencies altogether.\r\n                    The default mode may be set with the deps_mode entry\r\n                    in the configuration file.\r\n                    The current default is \"]]..cfg.deps_mode..[[\".\r\n                    Type ']]..this_program(program or \"luarocks\")..[[' with no arguments to see\r\n                    your list of rocks trees.\r\n]]\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 92,
    "text": "module",
    "type": "global function"
  }, {
    "id": 93,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 94,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 95,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 96,
    "text": "type",
    "type": "global function"
  }, {
    "id": 97,
    "text": "next",
    "type": "global function"
  }, {
    "id": 98,
    "text": "require",
    "type": "global function"
  }, {
    "id": 99,
    "text": "cfg)",
    "type": "module"
  }, {
    "id": 100,
    "text": "util)",
    "type": "module"
  }, {
    "id": 101,
    "text": "fetch)",
    "type": "module"
  }, {
    "id": 102,
    "text": "manif)",
    "type": "module"
  }, {
    "id": 103,
    "text": "fs)",
    "type": "module"
  }, {
    "id": 104,
    "text": "path)",
    "type": "module"
  }, {
    "id": 105,
    "text": "repos)",
    "type": "module"
  }, {
    "id": 106,
    "text": "deps)",
    "type": "module"
  }, {
    "id": 107,
    "text": "search)",
    "type": "module"
  }, {
    "id": 108,
    "text": "",
    "type": "variable container"
  }, {
    "id": 109,
    "text": "",
    "type": "require container"
  }, {
    "id": 110,
    "text": "",
    "type": "global variable"
  }, {
    "id": 111,
    "text": "",
    "type": "global variable"
  }, {
    "id": 112,
    "text": "",
    "type": "global variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  } ]
}