{
  "_filename": "LuaXML.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luaxml/LuaXML.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 4
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 27,
    "label": "has",
    "to": 44
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 4
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 3
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 12
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 12
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 54,
    "label": "has",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 8,
    "label": "calls",
    "to": 70
  }, {
    "from": 8,
    "label": "calls",
    "to": 70
  }, {
    "from": 16,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 20,
    "label": "calls",
    "to": 70
  }, {
    "from": 54,
    "label": "calls",
    "to": 70
  }, {
    "from": 54,
    "label": "calls",
    "to": 70
  }, {
    "from": 54,
    "label": "calls",
    "to": 70
  }, {
    "from": 54,
    "label": "calls",
    "to": 70
  }, {
    "from": 54,
    "label": "calls",
    "to": 70
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 8,
    "label": "calls",
    "to": 72
  }, {
    "from": 8,
    "label": "calls",
    "to": 72
  }, {
    "from": 54,
    "label": "calls",
    "to": 72
  }, {
    "from": 54,
    "label": "calls",
    "to": 72
  }, {
    "from": 20,
    "label": "calls",
    "to": 73
  }, {
    "from": 20,
    "label": "calls",
    "to": 20
  }, {
    "from": 20,
    "label": "calls",
    "to": 20
  }, {
    "from": 46,
    "label": "calls",
    "to": 20
  }, {
    "from": 46,
    "label": "calls",
    "to": 74
  }, {
    "from": 20,
    "label": "calls",
    "to": 75
  }, {
    "from": 20,
    "label": "calls",
    "to": 75
  }, {
    "from": 20,
    "label": "calls",
    "to": 75
  }, {
    "from": 69,
    "label": "calls",
    "to": 76
  }, {
    "from": 20,
    "label": "calls",
    "to": 79
  }, {
    "from": 54,
    "label": "calls",
    "to": 79
  }, {
    "from": 20,
    "label": "calls",
    "to": 71
  }, {
    "from": 20,
    "label": "calls",
    "to": 71
  }, {
    "from": 20,
    "label": "calls",
    "to": 71
  }, {
    "from": 20,
    "label": "calls",
    "to": 71
  }, {
    "from": 69,
    "label": "calls",
    "to": 77
  }, {
    "from": 46,
    "label": "calls",
    "to": 78
  }, {
    "from": 54,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 69
  }, {
    "from": 69,
    "label": "declares",
    "to": 2
  }, {
    "from": 69,
    "label": "declares",
    "to": 8
  }, {
    "from": 69,
    "label": "declares",
    "to": 16
  }, {
    "from": 69,
    "label": "declares",
    "to": 20
  }, {
    "from": 69,
    "label": "declares",
    "to": 46
  }, {
    "from": 69,
    "label": "declares",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 80,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 80,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 80,
    "label": "initializes",
    "to": 86
  }, {
    "from": 81,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "requires",
    "to": 88
  }, {
    "from": 89,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "requires",
    "to": 90
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "LuaXML",
    "type": "module"
  }, {
    "id": 2,
    "text": "function tag(var,tag)\r\n  if base.type(var)~=\"table\" then return end\r\n  if base.type(tag)==\"nil\" then \r\n    return var[TAG]\r\n  end\r\n  var[TAG] = tag\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if base.type(var)~=\"table\" then return end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "if base.type(tag)==\"nil\" then \r\n    return var[TAG]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "var[TAG] = tag",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function new(arg)\r\n  if base.type(arg)==\"table\" then \r\n    base.setmetatable(arg,{__index=xml, __tostring=xml.str})\r\n\treturn arg\r\n  end\r\n  local var={}\r\n  base.setmetatable(var,{__index=xml, __tostring=xml.str})\r\n  if base.type(arg)==\"string\" then var[TAG]=arg end\r\n  return var\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if base.type(arg)==\"table\" then \r\n    base.setmetatable(arg,{__index=xml, __tostring=xml.str})\r\n\treturn arg\r\n  end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "base.setmetatable(arg,{__index=xml, __tostring=xml.str})",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "local var={}",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "base.setmetatable(var,{__index=xml, __tostring=xml.str})",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "if base.type(arg)==\"string\" then var[TAG]=arg end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "var[TAG]=arg",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function append(var,tag)\r\n  if base.type(var)~=\"table\" then return end\r\n  local newVar = new(tag)\r\n  var[#var+1] = newVar\r\n  return newVar\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local newVar = new(tag)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "var[#var+1] = newVar",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function str(var,indent,tagValue)\r\n  if base.type(var)==\"nil\" then return end\r\n  local indent = indent or 0\r\n  local indentStr=\"\"\r\n  for i = 1,indent do indentStr=indentStr..\"  \" end\r\n  local tableStr=\"\"\r\n  \r\n  if base.type(var)==\"table\" then\r\n    local tag = var[0] or tagValue or base.type(var)\r\n    local s = indentStr..\"<\"..tag\r\n    for k,v in base.pairs(var) do -- attributes \r\n      if base.type(k)==\"string\" then\r\n        if base.type(v)==\"table\" and k~=\"_M\" then --  otherwise recursiveness imminent\r\n          tableStr = tableStr..str(v,indent+1,k)\r\n        else\r\n          s = s..\" \"..k..\"=\\\"\"..encode(base.tostring(v))..\"\\\"\"\r\n        end\r\n      end\r\n    end\r\n    if #var==0 and #tableStr==0 then\r\n      s = s..\" />\\n\"\r\n    elseif #var==1 and base.type(var[1])~=\"table\" and #tableStr==0 then -- single element\r\n      s = s..\">\"..encode(base.tostring(var[1]))..\"</\"..tag..\">\\n\"\r\n    else\r\n      s = s..\">\\n\"\r\n      for k,v in base.ipairs(var) do -- elements\r\n        if base.type(v)==\"string\" then\r\n          s = s..indentStr..\"  \"..encode(v)..\" \\n\"\r\n        else\r\n          s = s..str(v,indent+1)\r\n        end\r\n      end\r\n      s=s..tableStr..indentStr..\"</\"..tag..\">\\n\"\r\n    end\r\n    return s\r\n  else\r\n    local tag = base.type(var)\r\n    return indentStr..\"<\"..tag..\"> \"..encode(base.tostring(var))..\" </\"..tag..\">\\n\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if base.type(var)==\"nil\" then return end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local indent = indent or 0",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local indentStr=\"\"",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for i = 1,indent do indentStr=indentStr..\"  \" end",
    "type": "statement:numericfor"
  }, {
    "id": 25,
    "text": "indentStr=indentStr..\"  \"",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local tableStr=\"\"",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if base.type(var)==\"table\" then\r\n    local tag = var[0] or tagValue or base.type(var)\r\n    local s = indentStr..\"<\"..tag\r\n    for k,v in base.pairs(var) do -- attributes \r\n      if base.type(k)==\"string\" then\r\n        if base.type(v)==\"table\" and k~=\"_M\" then --  otherwise recursiveness imminent\r\n          tableStr = tableStr..str(v,indent+1,k)\r\n        else\r\n          s = s..\" \"..k..\"=\\\"\"..encode(base.tostring(v))..\"\\\"\"\r\n        end\r\n      end\r\n    end\r\n    if #var==0 and #tableStr==0 then\r\n      s = s..\" />\\n\"\r\n    elseif #var==1 and base.type(var[1])~=\"table\" and #tableStr==0 then -- single element\r\n      s = s..\">\"..encode(base.tostring(var[1]))..\"</\"..tag..\">\\n\"\r\n    else\r\n      s = s..\">\\n\"\r\n      for k,v in base.ipairs(var) do -- elements\r\n        if base.type(v)==\"string\" then\r\n          s = s..indentStr..\"  \"..encode(v)..\" \\n\"\r\n        else\r\n          s = s..str(v,indent+1)\r\n        end\r\n      end\r\n      s=s..tableStr..indentStr..\"</\"..tag..\">\\n\"\r\n    end\r\n    return s\r\n  else\r\n    local tag = base.type(var)\r\n    return indentStr..\"<\"..tag..\"> \"..encode(base.tostring(var))..\" </\"..tag..\">\\n\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local tag = var[0] or tagValue or base.type(var)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local s = indentStr..\"<\"..tag",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for k,v in base.pairs(var) do -- attributes \r\n      if base.type(k)==\"string\" then\r\n        if base.type(v)==\"table\" and k~=\"_M\" then --  otherwise recursiveness imminent\r\n          tableStr = tableStr..str(v,indent+1,k)\r\n        else\r\n          s = s..\" \"..k..\"=\\\"\"..encode(base.tostring(v))..\"\\\"\"\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "if base.type(k)==\"string\" then\r\n        if base.type(v)==\"table\" and k~=\"_M\" then --  otherwise recursiveness imminent\r\n          tableStr = tableStr..str(v,indent+1,k)\r\n        else\r\n          s = s..\" \"..k..\"=\\\"\"..encode(base.tostring(v))..\"\\\"\"\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "if base.type(v)==\"table\" and k~=\"_M\" then --  otherwise recursiveness imminent\r\n          tableStr = tableStr..str(v,indent+1,k)\r\n        else\r\n          s = s..\" \"..k..\"=\\\"\"..encode(base.tostring(v))..\"\\\"\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "tableStr = tableStr..str(v,indent+1,k)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "s = s..\" \"..k..\"=\\\"\"..encode(base.tostring(v))..\"\\\"\"",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if #var==0 and #tableStr==0 then\r\n      s = s..\" />\\n\"\r\n    elseif #var==1 and base.type(var[1])~=\"table\" and #tableStr==0 then -- single element\r\n      s = s..\">\"..encode(base.tostring(var[1]))..\"</\"..tag..\">\\n\"\r\n    else\r\n      s = s..\">\\n\"\r\n      for k,v in base.ipairs(var) do -- elements\r\n        if base.type(v)==\"string\" then\r\n          s = s..indentStr..\"  \"..encode(v)..\" \\n\"\r\n        else\r\n          s = s..str(v,indent+1)\r\n        end\r\n      end\r\n      s=s..tableStr..indentStr..\"</\"..tag..\">\\n\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "s = s..\" />\\n\"",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "s = s..\">\"..encode(base.tostring(var[1]))..\"</\"..tag..\">\\n\"",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "s = s..\">\\n\"",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "for k,v in base.ipairs(var) do -- elements\r\n        if base.type(v)==\"string\" then\r\n          s = s..indentStr..\"  \"..encode(v)..\" \\n\"\r\n        else\r\n          s = s..str(v,indent+1)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 40,
    "text": "if base.type(v)==\"string\" then\r\n          s = s..indentStr..\"  \"..encode(v)..\" \\n\"\r\n        else\r\n          s = s..str(v,indent+1)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "s = s..indentStr..\"  \"..encode(v)..\" \\n\"",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "s = s..str(v,indent+1)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "s=s..tableStr..indentStr..\"</\"..tag..\">\\n\"",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "local tag = base.type(var)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function save(var,filename)\r\n  if not var then return end\r\n  if not filename or #filename==0 then return end\r\n  local file = base.io.open(filename,\"w\")\r\n  file:write(\"<?xml version=\\\"1.0\\\"?>\\n<!-- file \\\"\",filename, \"\\\", generated by LuaXML -->\\n\\n\")\r\n  file:write(str(var))\r\n  base.io.close(file)\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "if not var then return end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "if not filename or #filename==0 then return end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "local file = base.io.open(filename,\"w\")",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "file:write(\"<?xml version=\\\"1.0\\\"?>\\n<!-- file \\\"\",filename, \"\\\", generated by LuaXML -->\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "file:write(str(var))",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "base.io.close(file)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function find(var, tag, attributeKey,attributeValue)\r\n  -- check input:\r\n  if base.type(var)~=\"table\" then return end\r\n  if base.type(tag)==\"string\" and #tag==0 then tag=nil end\r\n  if base.type(attributeKey)~=\"string\" or #attributeKey==0 then attributeKey=nil end\r\n  if base.type(attributeValue)==\"string\" and #attributeValue==0 then attributeValue=nil end\r\n  -- compare this table:\r\n  if tag~=nil then\r\n    if var[0]==tag and ( attributeValue == nil or var[attributeKey]==attributeValue ) then\r\n      base.setmetatable(var,{__index=xml, __tostring=xml.str})\r\n      return var\r\n    end\r\n  else\r\n    if attributeValue == nil or var[attributeKey]==attributeValue then\r\n      base.setmetatable(var,{__index=xml, __tostring=xml.str})\r\n      return var\r\n    end\r\n  end\r\n  -- recursively parse subtags:\r\n  for k,v in base.ipairs(var) do\r\n    if base.type(v)==\"table\" then\r\n      local ret = find(v, tag, attributeKey,attributeValue)\r\n      if ret ~= nil then return ret end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "if base.type(tag)==\"string\" and #tag==0 then tag=nil end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "tag=nil",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if base.type(attributeKey)~=\"string\" or #attributeKey==0 then attributeKey=nil end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "attributeKey=nil",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "if base.type(attributeValue)==\"string\" and #attributeValue==0 then attributeValue=nil end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "attributeValue=nil",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if tag~=nil then\r\n    if var[0]==tag and ( attributeValue == nil or var[attributeKey]==attributeValue ) then\r\n      base.setmetatable(var,{__index=xml, __tostring=xml.str})\r\n      return var\r\n    end\r\n  else\r\n    if attributeValue == nil or var[attributeKey]==attributeValue then\r\n      base.setmetatable(var,{__index=xml, __tostring=xml.str})\r\n      return var\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "if var[0]==tag and ( attributeValue == nil or var[attributeKey]==attributeValue ) then\r\n      base.setmetatable(var,{__index=xml, __tostring=xml.str})\r\n      return var\r\n    end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "if attributeValue == nil or var[attributeKey]==attributeValue then\r\n      base.setmetatable(var,{__index=xml, __tostring=xml.str})\r\n      return var\r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "for k,v in base.ipairs(var) do\r\n    if base.type(v)==\"table\" then\r\n      local ret = find(v, tag, attributeKey,attributeValue)\r\n      if ret ~= nil then return ret end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 65,
    "text": "if base.type(v)==\"table\" then\r\n      local ret = find(v, tag, attributeKey,attributeValue)\r\n      if ret ~= nil then return ret end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local ret = find(v, tag, attributeKey,attributeValue)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if ret ~= nil then return ret end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "",
    "type": "function container"
  }, {
    "id": 70,
    "text": "type",
    "type": "global function"
  }, {
    "id": 71,
    "text": "encode",
    "type": "global function"
  }, {
    "id": 72,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 73,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 74,
    "text": "base.io.close",
    "type": "global function"
  }, {
    "id": 75,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 76,
    "text": "module",
    "type": "global function"
  }, {
    "id": 77,
    "text": "require",
    "type": "global function"
  }, {
    "id": 78,
    "text": "base.io.open",
    "type": "global function"
  }, {
    "id": 79,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 80,
    "text": "",
    "type": "variable container"
  }, {
    "id": 81,
    "text": "",
    "type": "require container"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "global variable"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "(LuaXML_lib)",
    "type": "module"
  }, {
    "id": 89,
    "text": "",
    "type": "require container"
  }, {
    "id": 90,
    "text": "(LuaXML)",
    "type": "module"
  } ]
}