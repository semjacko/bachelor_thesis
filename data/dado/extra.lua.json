{
  "_filename": "extra.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/dado/src/table/extra.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 20
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "has",
    "to": 22
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 5
  }, {
    "from": 13,
    "label": "has",
    "to": 6
  }, {
    "from": 13,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 10
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 6
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 8
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 11
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 43
  }, {
    "from": 13,
    "label": "calls",
    "to": 43
  }, {
    "from": 30,
    "label": "calls",
    "to": 43
  }, {
    "from": 13,
    "label": "calls",
    "to": 40
  }, {
    "from": 13,
    "label": "calls",
    "to": 40
  }, {
    "from": 13,
    "label": "calls",
    "to": 40
  }, {
    "from": 13,
    "label": "calls",
    "to": 40
  }, {
    "from": 13,
    "label": "calls",
    "to": 40
  }, {
    "from": 13,
    "label": "calls",
    "to": 40
  }, {
    "from": 13,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 13,
    "label": "calls",
    "to": 48
  }, {
    "from": 30,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 13,
    "label": "calls",
    "to": 41
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 13,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 13,
    "label": "calls",
    "to": 44
  }, {
    "from": 30,
    "label": "calls",
    "to": 44
  }, {
    "from": 30,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 49
  }, {
    "from": 13,
    "label": "calls",
    "to": 49
  }, {
    "from": 30,
    "label": "calls",
    "to": 49
  }, {
    "from": 13,
    "label": "calls",
    "to": 46
  }, {
    "from": 13,
    "label": "calls",
    "to": 46
  }, {
    "from": 13,
    "label": "calls",
    "to": 46
  }, {
    "from": 13,
    "label": "calls",
    "to": 46
  }, {
    "from": 13,
    "label": "calls",
    "to": 46
  }, {
    "from": 13,
    "label": "calls",
    "to": 46
  }, {
    "from": 13,
    "label": "calls",
    "to": 46
  }, {
    "from": 38,
    "label": "calls",
    "to": 45
  }, {
    "from": 38,
    "label": "calls",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "declares",
    "to": 2
  }, {
    "from": 38,
    "label": "declares",
    "to": 13
  }, {
    "from": 38,
    "label": "declares",
    "to": 30
  }, {
    "from": 39,
    "label": "calls",
    "to": 30
  }, {
    "from": 39,
    "label": "calls",
    "to": 30
  }, {
    "from": 39,
    "label": "calls",
    "to": 30
  }, {
    "from": 39,
    "label": "calls",
    "to": 2
  }, {
    "from": 39,
    "label": "calls",
    "to": 2
  }, {
    "from": 39,
    "label": "calls",
    "to": 2
  }, {
    "from": 51,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 52,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 52,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 52,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 52,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 52,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 53,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "requires",
    "to": 50
  }, {
    "from": 53,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "requires",
    "to": 42
  }, {
    "from": 1,
    "label": "provides",
    "to": 66
  }, {
    "from": 66,
    "label": "provides",
    "to": 67
  }, {
    "from": 66,
    "label": "provides",
    "to": 68
  }, {
    "from": 66,
    "label": "provides",
    "to": 69
  }, {
    "from": 2,
    "label": "represents",
    "to": 70
  }, {
    "from": 66,
    "label": "provides",
    "to": 70
  }, {
    "from": 13,
    "label": "represents",
    "to": 71
  }, {
    "from": 66,
    "label": "provides",
    "to": 71
  }, {
    "from": 30,
    "label": "represents",
    "to": 72
  }, {
    "from": 66,
    "label": "provides",
    "to": 72
  }, {
    "from": 73,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "extra",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function fullconcat (tab, kvsep, pairssep, kfilter, vfilter)\r\n\tpairssep = pairssep or ','\r\n\tlocal formatstring = \"%s\"..(kvsep or '=')..\"%s\"\r\n\tlocal l = {}\r\n\tlocal i = 0\r\n\tfor key, val in pairs (tab) do\r\n\t\ti = i+1\r\n\t\tl[i] = strformat (formatstring,\r\n\t\t\tkfilter and kfilter(key) or key,\r\n\t\t\tvfilter and vfilter(val) or val)\r\n\tend\r\n\ttsort (l)\r\n\treturn tconcat (l, pairssep)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "pairssep = pairssep or ','",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local formatstring = \"%s\"..(kvsep or '=')..\"%s\"",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local l = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for key, val in pairs (tab) do\r\n\t\ti = i+1\r\n\t\tl[i] = strformat (formatstring,\r\n\t\t\tkfilter and kfilter(key) or key,\r\n\t\t\tvfilter and vfilter(val) or val)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "l[i] = strformat (formatstring,\r\n\t\t\tkfilter and kfilter(key) or key,\r\n\t\t\tvfilter and vfilter(val) or val)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "tsort (l)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function pfullconcat (tab, kvsep, pairssep, kfilter, vfilter)\r\n\tlocal tt = type(tab)\r\n\tassert (tt == \"table\",\r\n\t\t\"Bad argument #1 to 'pfullconcat' (table expected, got \"..tt..\")\")\r\n\tlocal tkv = type(kvsep)\r\n\tassert (tkv == \"nil\" or tkv == \"string\" or tkv == \"number\",\r\n\t\t\"Bad argument #2to 'pfullconcat' (string expected, got \"..tkv..\")\")\r\n\tlocal tp = type(pairssep)\r\n\tassert (tp == \"nil\" or tp == \"string\" or tp == \"number\",\r\n\t\t\"Bad argument #3 to 'pfullconcat' (string expected, got \"..tp..\")\")\r\n\tlocal tkf = type(kfilter)\r\n\tassert (tkf == \"nil\" or tkf == \"function\",\r\n\t\t\"Bad argument #4 to 'pfullconcat' (function expected, got \"..tkf..\")\")\r\n\tlocal tkv = type(vfilter)\r\n\tassert (tkv == \"nil\" or tkv == \"function\",\r\n\t\t\"Bad argument $5 to 'pfullconcat' (function expected, got \"..tkv..\")\")\r\n\tpairssep = pairssep or ','\r\n\tlocal formatstring = \"%s\"..(kvsep or '=')..\"%s\"\r\n\tlocal l = {}\r\n\tlocal i = 0\r\n\tfor key, val in pairs (tab) do\r\n\t\tlocal tk = type(key)\r\n\t\tassert (tk == \"string\" or tk == \"number\",\r\n\t\t\t\"Bad key type (string expected, got \"..tk..\")\")\r\n\t\tlocal tv = type(val)\r\n\t\tassert (tv == \"string\" or tv == \"number\",\r\n\t\t\t\"Bad value type on key \"..key..\" (string expected, got \"..tv..\")\")\r\n\t\ti = i+1\r\n\t\tl[i] = strformat (formatstring,\r\n\t\t\tkfilter and kfilter(key) or key,\r\n\t\t\tvfilter and vfilter(val) or val)\r\n\tend\r\n\ttsort (l)\r\n\treturn tconcat (l, pairssep)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local tt = type(tab)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "assert (tt == \"table\",\r\n\t\t\"Bad argument #1 to 'pfullconcat' (table expected, got \"..tt..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "local tkv = type(kvsep)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "assert (tkv == \"nil\" or tkv == \"string\" or tkv == \"number\",\r\n\t\t\"Bad argument #2to 'pfullconcat' (string expected, got \"..tkv..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local tp = type(pairssep)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "assert (tp == \"nil\" or tp == \"string\" or tp == \"number\",\r\n\t\t\"Bad argument #3 to 'pfullconcat' (string expected, got \"..tp..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local tkf = type(kfilter)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "assert (tkf == \"nil\" or tkf == \"function\",\r\n\t\t\"Bad argument #4 to 'pfullconcat' (function expected, got \"..tkf..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local tkv = type(vfilter)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "assert (tkv == \"nil\" or tkv == \"function\",\r\n\t\t\"Bad argument $5 to 'pfullconcat' (function expected, got \"..tkv..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "for key, val in pairs (tab) do\r\n\t\tlocal tk = type(key)\r\n\t\tassert (tk == \"string\" or tk == \"number\",\r\n\t\t\t\"Bad key type (string expected, got \"..tk..\")\")\r\n\t\tlocal tv = type(val)\r\n\t\tassert (tv == \"string\" or tv == \"number\",\r\n\t\t\t\"Bad value type on key \"..key..\" (string expected, got \"..tv..\")\")\r\n\t\ti = i+1\r\n\t\tl[i] = strformat (formatstring,\r\n\t\t\tkfilter and kfilter(key) or key,\r\n\t\t\tvfilter and vfilter(val) or val)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "local tk = type(key)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "assert (tk == \"string\" or tk == \"number\",\r\n\t\t\t\"Bad key type (string expected, got \"..tk..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local tv = type(val)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assert (tv == \"string\" or tv == \"number\",\r\n\t\t\t\"Bad value type on key \"..key..\" (string expected, got \"..tv..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function twostr (tab, ksep, vsep, kfilter, vfilter)\r\n\tksep  = ksep or ','\r\n\tvsep  = vsep or ','\r\n\tlocal k, v = {}, {}\r\n\tlocal i = 0\r\n\tfor key, val in pairs (tab) do\r\n\t\ti = i+1\r\n\t\tk[i] = kfilter and kfilter(key) or key\r\n\t\tv[i] = vfilter and vfilter(val) or val\r\n\tend\r\n\treturn tconcat (k, ksep), tconcat (v, vsep)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "ksep  = ksep or ','",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "vsep  = vsep or ','",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "local k, v = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "for key, val in pairs (tab) do\r\n\t\ti = i+1\r\n\t\tk[i] = kfilter and kfilter(key) or key\r\n\t\tv[i] = vfilter and vfilter(val) or val\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "k[i] = kfilter and kfilter(key) or key",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "v[i] = vfilter and vfilter(val) or val",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "",
    "type": "function container"
  }, {
    "id": 39,
    "text": "",
    "type": "function container"
  }, {
    "id": 40,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 41,
    "text": "tsort",
    "type": "global function"
  }, {
    "id": 42,
    "text": "string",
    "type": "module"
  }, {
    "id": 43,
    "text": "kfilter",
    "type": "global function"
  }, {
    "id": 44,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 45,
    "text": "require",
    "type": "global function"
  }, {
    "id": 46,
    "text": "type",
    "type": "global function"
  }, {
    "id": 47,
    "text": "strformat",
    "type": "global function"
  }, {
    "id": 48,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 49,
    "text": "vfilter",
    "type": "global function"
  }, {
    "id": 50,
    "text": "table",
    "type": "module"
  }, {
    "id": 51,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "variable container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "interface container"
  }, {
    "id": 67,
    "text": "",
    "type": "interface"
  }, {
    "id": 68,
    "text": "",
    "type": "interface"
  }, {
    "id": 69,
    "text": "",
    "type": "interface"
  }, {
    "id": 70,
    "text": "",
    "type": "interface"
  }, {
    "id": 71,
    "text": "",
    "type": "interface"
  }, {
    "id": 72,
    "text": "",
    "type": "interface"
  }, {
    "id": 73,
    "text": "",
    "type": "require local variable"
  } ]
}