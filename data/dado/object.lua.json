{
  "_filename": "object.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/dado/src/dado/object.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 19
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 9
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 9
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 9
  }, {
    "from": 44,
    "label": "has",
    "to": 9
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 9
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 50,
    "label": "has",
    "to": 59
  }, {
    "from": 50,
    "label": "has",
    "to": 9
  }, {
    "from": 50,
    "label": "has",
    "to": 60
  }, {
    "from": 11,
    "label": "calls",
    "to": 3
  }, {
    "from": 11,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 65
  }, {
    "from": 11,
    "label": "calls",
    "to": 65
  }, {
    "from": 3,
    "label": "calls",
    "to": 66
  }, {
    "from": 18,
    "label": "calls",
    "to": 73
  }, {
    "from": 36,
    "label": "calls",
    "to": 73
  }, {
    "from": 61,
    "label": "calls",
    "to": 67
  }, {
    "from": 24,
    "label": "calls",
    "to": 62
  }, {
    "from": 24,
    "label": "calls",
    "to": 18
  }, {
    "from": 3,
    "label": "calls",
    "to": 72
  }, {
    "from": 30,
    "label": "calls",
    "to": 71
  }, {
    "from": 47,
    "label": "calls",
    "to": 71
  }, {
    "from": 3,
    "label": "calls",
    "to": 63
  }, {
    "from": 24,
    "label": "calls",
    "to": 63
  }, {
    "from": 36,
    "label": "calls",
    "to": 63
  }, {
    "from": 61,
    "label": "calls",
    "to": 70
  }, {
    "from": 61,
    "label": "calls",
    "to": 69
  }, {
    "from": 61,
    "label": "calls",
    "to": 68
  }, {
    "from": 61,
    "label": "calls",
    "to": 68
  }, {
    "from": 61,
    "label": "calls",
    "to": 68
  }, {
    "from": 3,
    "label": "calls",
    "to": 74
  }, {
    "from": 18,
    "label": "calls",
    "to": 74
  }, {
    "from": 61,
    "label": "calls",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 61,
    "label": "declares",
    "to": 3
  }, {
    "from": 61,
    "label": "declares",
    "to": 11
  }, {
    "from": 61,
    "label": "declares",
    "to": 18
  }, {
    "from": 61,
    "label": "declares",
    "to": 24
  }, {
    "from": 61,
    "label": "declares",
    "to": 30
  }, {
    "from": 61,
    "label": "declares",
    "to": 36
  }, {
    "from": 61,
    "label": "declares",
    "to": 40
  }, {
    "from": 61,
    "label": "declares",
    "to": 42
  }, {
    "from": 61,
    "label": "declares",
    "to": 44
  }, {
    "from": 61,
    "label": "declares",
    "to": 47
  }, {
    "from": 61,
    "label": "declares",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 75,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 75,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 75,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 75,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 75,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 75,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 75,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 75,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 75,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 76,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "requires",
    "to": 2
  }, {
    "from": 76,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 64
  }, {
    "from": 76,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 100
  }, {
    "from": 1,
    "label": "provides",
    "to": 101
  }, {
    "from": 101,
    "label": "provides",
    "to": 102
  }, {
    "from": 101,
    "label": "provides",
    "to": 103
  }, {
    "from": 101,
    "label": "provides",
    "to": 104
  }, {
    "from": 11,
    "label": "represents",
    "to": 105
  }, {
    "from": 101,
    "label": "provides",
    "to": 105
  }, {
    "from": 30,
    "label": "represents",
    "to": 106
  }, {
    "from": 101,
    "label": "provides",
    "to": 106
  }, {
    "from": 36,
    "label": "represents",
    "to": 107
  }, {
    "from": 101,
    "label": "provides",
    "to": 107
  }, {
    "from": 40,
    "label": "represents",
    "to": 108
  }, {
    "from": 101,
    "label": "provides",
    "to": 108
  }, {
    "from": 42,
    "label": "represents",
    "to": 109
  }, {
    "from": 101,
    "label": "provides",
    "to": 109
  }, {
    "from": 44,
    "label": "represents",
    "to": 110
  }, {
    "from": 101,
    "label": "provides",
    "to": 110
  }, {
    "from": 47,
    "label": "represents",
    "to": 111
  }, {
    "from": 101,
    "label": "provides",
    "to": 111
  }, {
    "from": 40,
    "label": "represents",
    "to": 112
  }, {
    "from": 42,
    "label": "represents",
    "to": 113
  }, {
    "from": 114,
    "label": "requires",
    "to": 100
  }, {
    "from": 115,
    "label": "requires",
    "to": 1
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 96
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "object",
    "type": "module"
  }, {
    "id": 2,
    "text": "sql",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function build_expression (self, keys)\r\n\tlocal where = {}\r\n\tfor i, key_name in ipairs (keys) do\r\n\t\tlocal k = rawget (self, key_name)\r\n\t\tif not k then\r\n\t\t\treturn nil\r\n\t\tend\r\n\t\twhere[i] = strformat (\"%s = %s\", key_name, sqlquote (k))\r\n\tend\r\n\treturn concat (where, \" AND \")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local where = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for i, key_name in ipairs (keys) do\r\n\t\tlocal k = rawget (self, key_name)\r\n\t\tif not k then\r\n\t\t\treturn nil\r\n\t\tend\r\n\t\twhere[i] = strformat (\"%s = %s\", key_name, sqlquote (k))\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "local k = rawget (self, key_name)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if not k then\r\n\t\t\treturn nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "where[i] = strformat (\"%s = %s\", key_name, sqlquote (k))",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function db_identification (self)\r\n\tlocal cond = build_expression (self, self.key_name)\r\n\tif cond then\r\n\t\treturn cond\r\n\tend\r\n\tfor i, key in ipairs (self.alternate_keys) do\r\n\t\tcond = build_expression (self, key)\r\n\t\tif cond then\r\n\t\t\treturn cond\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local cond = build_expression (self, self.key_name)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if cond then\r\n\t\treturn cond\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "for i, key in ipairs (self.alternate_keys) do\r\n\t\tcond = build_expression (self, key)\r\n\t\tif cond then\r\n\t\t\treturn cond\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "cond = build_expression (self, key)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if cond then\r\n\t\t\treturn cond\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function db_fields_list (self)\r\n\tlocal r = {}\r\n\tfor col, val in pairs (self.db_fields) do\r\n\t\tif val == true then\r\n\t\t\tr[#r+1] = col\r\n\t\tend\r\n\tend\r\n\treturn concat (r, ',')\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local r = {}",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "for col, val in pairs (self.db_fields) do\r\n\t\tif val == true then\r\n\t\t\tr[#r+1] = col\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "if val == true then\r\n\t\t\tr[#r+1] = col\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "r[#r+1] = col",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function db_load (self, attr)\r\n\t-- Loads all attributes from the database\r\n\tlocal stmt = sqlselect (db_fields_list(self), self.table_name,\r\n\t\tself:db_identification ())\r\n\tlocal cur = self.__dado:assertexec (stmt)\r\n\tself.loaded = cur:fetch (self, \"a\")\r\n\tcur:close ()\r\n\t-- avoid infinite recursion loop if attribute is NULL at the database\r\n\treturn attr and rawget (self, attr)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local stmt = sqlselect (db_fields_list(self), self.table_name,\r\n\t\tself:db_identification ())",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local cur = self.__dado:assertexec (stmt)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "self.loaded = cur:fetch (self, \"a\")",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "cur:close ()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function new (class, dado, o)\r\n\to = o or {}\r\n\to.__class = class\r\n\to.__dado = dado\r\n\tsetmetatable(o, mt)\r\n\treturn o\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "o = o or {}",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "o.__class = class",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "o.__dado = dado",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "setmetatable(o, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function rawdata (self)\r\n\tlocal r = {}\r\n\tfor field, f in pairs (self.db_fields) do\r\n\t\tr[field] = rawget (self, field)\r\n\tend\r\n\treturn r\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "for field, f in pairs (self.db_fields) do\r\n\t\tr[field] = rawget (self, field)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "r[field] = rawget (self, field)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function insert (self)\r\n\treturn self.__dado:insert (self.table_name, self:rawdata ()) == 1\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function update (self)\r\n\treturn self.__dado:update (self.table_name, self:rawdata (), self:db_identification ()) == 1\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function save (self)\r\n\tif self.loaded then\r\n\t\treturn self:update ()\r\n\telse\r\n\t\treturn self:insert ()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "if self.loaded then\r\n\t\treturn self:update ()\r\n\telse\r\n\t\treturn self:insert ()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function class (self, c)\r\n\tsetmetatable (c, { __index = self })\r\n\treturn c\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "setmetatable (c, { __index = self })",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function (self, attr)\r\n\t\tlocal res\r\n\t\t-- attributes from database\r\n\t\tif attr ~= \"db_fields\" and self.db_fields then\r\n\t\t\tlocal load = self.db_fields[attr]\r\n\t\t\tif type(load) == \"function\" then\r\n\t\t\t\tres = load(self, attr) -- Customized way to load value\r\n\t\t\telseif load == true then\r\n\t\t\t\tres = db_load (self, attr) -- Default way to load value\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- inherit from class\r\n\t\tif not res and self.__class then\r\n\t\t\tres = self.__class[attr]\r\n\t\tend\r\n\t\t-- stores the inherited or fetched value in the object\r\n\t\trawset (self, attr, res)\r\n\t\treturn res\r\n\tend",
    "type": "function"
  }, {
    "id": 51,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if attr ~= \"db_fields\" and self.db_fields then\r\n\t\t\tlocal load = self.db_fields[attr]\r\n\t\t\tif type(load) == \"function\" then\r\n\t\t\t\tres = load(self, attr) -- Customized way to load value\r\n\t\t\telseif load == true then\r\n\t\t\t\tres = db_load (self, attr) -- Default way to load value\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local load = self.db_fields[attr]",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if type(load) == \"function\" then\r\n\t\t\t\tres = load(self, attr) -- Customized way to load value\r\n\t\t\telseif load == true then\r\n\t\t\t\tres = db_load (self, attr) -- Default way to load value\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "res = load(self, attr)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "res = db_load (self, attr)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if not res and self.__class then\r\n\t\t\tres = self.__class[attr]\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "res = self.__class[attr]",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "rawset (self, attr, res)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "",
    "type": "function container"
  }, {
    "id": 62,
    "text": "sqlselect",
    "type": "global function"
  }, {
    "id": 63,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 64,
    "text": "string",
    "type": "module"
  }, {
    "id": 65,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 66,
    "text": "sqlquote",
    "type": "global function"
  }, {
    "id": 67,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 68,
    "text": "require",
    "type": "global function"
  }, {
    "id": 69,
    "text": "type",
    "type": "global function"
  }, {
    "id": 70,
    "text": "load",
    "type": "global function"
  }, {
    "id": 71,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 72,
    "text": "strformat",
    "type": "global function"
  }, {
    "id": 73,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 74,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 75,
    "text": "",
    "type": "variable container"
  }, {
    "id": 76,
    "text": "",
    "type": "require container"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 95,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 96,
    "text": "",
    "type": "function"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "table",
    "type": "module"
  }, {
    "id": 101,
    "text": "",
    "type": "interface container"
  }, {
    "id": 102,
    "text": "",
    "type": "interface"
  }, {
    "id": 103,
    "text": "",
    "type": "interface"
  }, {
    "id": 104,
    "text": "",
    "type": "interface"
  }, {
    "id": 105,
    "text": "",
    "type": "interface"
  }, {
    "id": 106,
    "text": "",
    "type": "interface"
  }, {
    "id": 107,
    "text": "",
    "type": "interface"
  }, {
    "id": 108,
    "text": "",
    "type": "interface"
  }, {
    "id": 109,
    "text": "",
    "type": "interface"
  }, {
    "id": 110,
    "text": "",
    "type": "interface"
  }, {
    "id": 111,
    "text": "",
    "type": "interface"
  }, {
    "id": 112,
    "text": "",
    "type": "interface"
  }, {
    "id": 113,
    "text": "",
    "type": "interface"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  } ]
}