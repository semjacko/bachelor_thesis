{
  "_filename": "sql.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/dado/src/dado/sql.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 7
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 7
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 7
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 35
  }, {
    "from": 38,
    "label": "has",
    "to": 7
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 13,
    "label": "calls",
    "to": 5
  }, {
    "from": 13,
    "label": "calls",
    "to": 5
  }, {
    "from": 13,
    "label": "calls",
    "to": 49
  }, {
    "from": 18,
    "label": "calls",
    "to": 50
  }, {
    "from": 34,
    "label": "calls",
    "to": 50
  }, {
    "from": 5,
    "label": "calls",
    "to": 47
  }, {
    "from": 5,
    "label": "calls",
    "to": 47
  }, {
    "from": 29,
    "label": "calls",
    "to": 24
  }, {
    "from": 24,
    "label": "calls",
    "to": 53
  }, {
    "from": 31,
    "label": "calls",
    "to": 53
  }, {
    "from": 31,
    "label": "calls",
    "to": 53
  }, {
    "from": 34,
    "label": "calls",
    "to": 53
  }, {
    "from": 38,
    "label": "calls",
    "to": 53
  }, {
    "from": 13,
    "label": "calls",
    "to": 52
  }, {
    "from": 20,
    "label": "calls",
    "to": 52
  }, {
    "from": 40,
    "label": "calls",
    "to": 51
  }, {
    "from": 40,
    "label": "calls",
    "to": 51
  }, {
    "from": 20,
    "label": "calls",
    "to": 46
  }, {
    "from": 31,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 40,
    "label": "declares",
    "to": 5
  }, {
    "from": 40,
    "label": "declares",
    "to": 13
  }, {
    "from": 40,
    "label": "declares",
    "to": 18
  }, {
    "from": 40,
    "label": "declares",
    "to": 20
  }, {
    "from": 40,
    "label": "declares",
    "to": 24
  }, {
    "from": 40,
    "label": "declares",
    "to": 29
  }, {
    "from": 40,
    "label": "declares",
    "to": 31
  }, {
    "from": 40,
    "label": "declares",
    "to": 34
  }, {
    "from": 40,
    "label": "declares",
    "to": 38
  }, {
    "from": 44,
    "label": "calls",
    "to": 24
  }, {
    "from": 41,
    "label": "calls",
    "to": 38
  }, {
    "from": 43,
    "label": "calls",
    "to": 34
  }, {
    "from": 42,
    "label": "calls",
    "to": 31
  }, {
    "from": 45,
    "label": "calls",
    "to": 24
  }, {
    "from": 45,
    "label": "calls",
    "to": 24
  }, {
    "from": 45,
    "label": "calls",
    "to": 24
  }, {
    "from": 45,
    "label": "calls",
    "to": 24
  }, {
    "from": 45,
    "label": "calls",
    "to": 38
  }, {
    "from": 45,
    "label": "calls",
    "to": 38
  }, {
    "from": 45,
    "label": "calls",
    "to": 18
  }, {
    "from": 45,
    "label": "calls",
    "to": 18
  }, {
    "from": 45,
    "label": "calls",
    "to": 18
  }, {
    "from": 45,
    "label": "calls",
    "to": 31
  }, {
    "from": 45,
    "label": "calls",
    "to": 31
  }, {
    "from": 45,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 34
  }, {
    "from": 45,
    "label": "calls",
    "to": 34
  }, {
    "from": 45,
    "label": "calls",
    "to": 29
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 13
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 45,
    "label": "calls",
    "to": 20
  }, {
    "from": 55,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 56,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 56,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 56,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 56,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 56,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 56,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 56,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 57,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "requires",
    "to": 48
  }, {
    "from": 57,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 74
  }, {
    "from": 74,
    "label": "provides",
    "to": 75
  }, {
    "from": 74,
    "label": "provides",
    "to": 76
  }, {
    "from": 74,
    "label": "provides",
    "to": 77
  }, {
    "from": 13,
    "label": "represents",
    "to": 78
  }, {
    "from": 74,
    "label": "provides",
    "to": 78
  }, {
    "from": 5,
    "label": "represents",
    "to": 79
  }, {
    "from": 74,
    "label": "provides",
    "to": 79
  }, {
    "from": 18,
    "label": "represents",
    "to": 80
  }, {
    "from": 74,
    "label": "provides",
    "to": 80
  }, {
    "from": 20,
    "label": "represents",
    "to": 81
  }, {
    "from": 74,
    "label": "provides",
    "to": 81
  }, {
    "from": 24,
    "label": "represents",
    "to": 82
  }, {
    "from": 74,
    "label": "provides",
    "to": 82
  }, {
    "from": 29,
    "label": "represents",
    "to": 83
  }, {
    "from": 74,
    "label": "provides",
    "to": 83
  }, {
    "from": 3,
    "label": "represents",
    "to": 84
  }, {
    "from": 74,
    "label": "provides",
    "to": 84
  }, {
    "from": 4,
    "label": "represents",
    "to": 85
  }, {
    "from": 74,
    "label": "provides",
    "to": 85
  }, {
    "from": 38,
    "label": "represents",
    "to": 86
  }, {
    "from": 74,
    "label": "provides",
    "to": 86
  }, {
    "from": 87,
    "label": "requires",
    "to": 1
  }, {
    "from": 88,
    "label": "requires",
    "to": 1
  }, {
    "from": 89,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sql",
    "type": "module"
  }, {
    "id": 2,
    "text": "extra",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function insert (self)\r\n\treturn self.__dado:insert (self.table_name, self:rawdata ()) == 1\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function update (self)\r\n\treturn self.__dado:update (self.table_name, self:rawdata (), self:db_identification ()) == 1\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function escape (s, char, sub)\r\n\tif not s then return end\r\n\tchar = char or \"%s\"\r\n\tsub = sub or \"\\\\%1\"\r\n\ts = gsub (s, \"[%z\\1\\2\\3\\4\\5\\6\\7\\8\\11\\12\\14\\15\\16\\17\\18\\19\\20\\21\\22\\23\\24\\25\\26\\27\\28\\29\\30\\31]\", \"\")\r\n\ts = gsub (s, \"(\"..char..\")\", sub)\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if not s then return end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "char = char or \"%s\"",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "sub = sub or \"\\\\%1\"",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "s = gsub (s, \"[%z\\1\\2\\3\\4\\5\\6\\7\\8\\11\\12\\14\\15\\16\\17\\18\\19\\20\\21\\22\\23\\24\\25\\26\\27\\28\\29\\30\\31]\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "s = gsub (s, \"(\"..char..\")\", sub)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function quote (s, quote, sub)\r\n\tquote = quote or \"'\"\r\n\tsub = sub or \"\\\\'\"\r\n\tif type(s) == \"number\" or strfind (s, \"^(%b())$\") then\r\n\t\treturn s\r\n\telse\r\n\t\treturn quote..escape (escape (s, \"\\\\\", \"\\\\\\\\\"), quote, sub)..quote\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "quote = quote or \"'\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "sub = sub or \"\\\\'\"",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if type(s) == \"number\" or strfind (s, \"^(%b())$\") then\r\n\t\treturn s\r\n\telse\r\n\t\treturn quote..escape (escape (s, \"\\\\\", \"\\\\\\\\\"), quote, sub)..quote\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function AND (tab)\r\n\treturn tabfullconcat (tab, \"=\", \" AND \", nil, quote)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function isinteger (id)\r\n\tlocal tid = type(id)\r\n\tif tid == \"string\" then\r\n\t\treturn (not id:match\"%a\") and (tonumber(id) ~= nil)\r\n\telse\r\n\t\treturn tid == \"number\"\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local tid = type(id)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if tid == \"string\" then\r\n\t\treturn (not id:match\"%a\") and (tonumber(id) ~= nil)\r\n\telse\r\n\t\treturn tid == \"number\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function select (columns, tabname, cond, extra)\r\n\ttabname  = tabname and (\" from \"..tabname) or \"\"\r\n\tcond     = cond and (\" where \"..cond) or \"\"\r\n\textra    = extra and (\" \"..extra) or \"\"\r\n\treturn strformat (\"select %s%s%s%s\", columns, tabname, cond, extra)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "tabname  = tabname and (\" from \"..tabname) or \"\"",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "cond     = cond and (\" where \"..cond) or \"\"",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "extra    = extra and (\" \"..extra) or \"\"",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function subselect (columns, tabname, cond, extra)\r\n\treturn \"(\"..select (columns, tabname, cond, extra)..\")\"\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function insert (tabname, contents)\r\n\tif contents then\r\n\t\treturn strformat (\"insert into %s (%s) values (%s)\",\r\n\t\t\ttabname, tabtwostr (contents, ',', ',', nil, quote))\r\n\telse\r\n\t\treturn strformat (\"insert into %s\", tabname)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "if contents then\r\n\t\treturn strformat (\"insert into %s (%s) values (%s)\",\r\n\t\t\ttabname, tabtwostr (contents, ',', ',', nil, quote))\r\n\telse\r\n\t\treturn strformat (\"insert into %s\", tabname)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function update (tabname, contents, cond)\r\n\tcond = cond and (\" where \"..cond) or \"\"\r\n\tlocal set = contents\r\n\t\tand \" set \"..tabfullconcat (contents, '=', ',', nil, quote)\r\n\t\tor \"\"\r\n\treturn strformat (\"update %s%s%s\", tabname, set, cond)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "cond = cond and (\" where \"..cond) or \"\"",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local set = contents\r\n\t\tand \" set \"..tabfullconcat (contents, '=', ',', nil, quote)\r\n\t\tor \"\"",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function delete (tabname, cond)\r\n\tcond = cond and (\" where \"..cond) or \"\"\r\n\treturn strformat (\"delete from %s%s\", tabname, cond)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "",
    "type": "function container"
  }, {
    "id": 41,
    "text": "function _M.delete (self, tabname, cond)\r\n\treturn self:assertexec (sql.delete (tabname, cond))\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "function _M.insert (self, tabname, contents)\r\n\treturn self:assertexec (sql.insert (tabname, contents))\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "function _M.update (self, tabname, contents, cond)\r\n\treturn self:assertexec (sql.update (tabname, contents, cond))\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "function _M.select (self, columns, tabname, cond, extra, mode)\r\n\tlocal stmt = sql.select (columns, tabname, cond, extra)\r\n\tlocal cur = self:assertexec (stmt)\r\n\treturn function ()\r\n\t\t-- This table must be created inside this function or it could\r\n\t\t-- make `selectall' to return the same row every time.\r\n\t\tlocal t\r\n\t\tif mode then t = {} end\r\n\t\treturn cur:fetch (t, mode)\r\n\tend, cur\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "function container"
  }, {
    "id": 46,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 47,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 48,
    "text": "string",
    "type": "module"
  }, {
    "id": 49,
    "text": "strfind",
    "type": "global function"
  }, {
    "id": 50,
    "text": "tabfullconcat",
    "type": "global function"
  }, {
    "id": 51,
    "text": "require",
    "type": "global function"
  }, {
    "id": 52,
    "text": "type",
    "type": "global function"
  }, {
    "id": 53,
    "text": "strformat",
    "type": "global function"
  }, {
    "id": 54,
    "text": "tabtwostr",
    "type": "global function"
  }, {
    "id": 55,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "variable container"
  }, {
    "id": 57,
    "text": "",
    "type": "require container"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "n/a"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "interface container"
  }, {
    "id": 75,
    "text": "",
    "type": "interface"
  }, {
    "id": 76,
    "text": "",
    "type": "interface"
  }, {
    "id": 77,
    "text": "",
    "type": "interface"
  }, {
    "id": 78,
    "text": "",
    "type": "interface"
  }, {
    "id": 79,
    "text": "",
    "type": "interface"
  }, {
    "id": 80,
    "text": "",
    "type": "interface"
  }, {
    "id": 81,
    "text": "",
    "type": "interface"
  }, {
    "id": 82,
    "text": "",
    "type": "interface"
  }, {
    "id": 83,
    "text": "",
    "type": "interface"
  }, {
    "id": 84,
    "text": "",
    "type": "interface"
  }, {
    "id": 85,
    "text": "",
    "type": "interface"
  }, {
    "id": 86,
    "text": "",
    "type": "interface"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  } ]
}