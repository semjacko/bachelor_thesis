{
  "_filename": "dado.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/dado/src/dado.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 9
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 9
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 9
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 53,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 49,
    "label": "has",
    "to": 9
  }, {
    "from": 49,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 64,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 31
  }, {
    "from": 71,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 71,
    "label": "has",
    "to": 9
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 28,
    "label": "calls",
    "to": 3
  }, {
    "from": 22,
    "label": "calls",
    "to": 6
  }, {
    "from": 49,
    "label": "calls",
    "to": 43
  }, {
    "from": 47,
    "label": "calls",
    "to": 80
  }, {
    "from": 47,
    "label": "calls",
    "to": 80
  }, {
    "from": 49,
    "label": "calls",
    "to": 80
  }, {
    "from": 49,
    "label": "calls",
    "to": 78
  }, {
    "from": 49,
    "label": "calls",
    "to": 77
  }, {
    "from": 43,
    "label": "calls",
    "to": 82
  }, {
    "from": 64,
    "label": "calls",
    "to": 82
  }, {
    "from": 7,
    "label": "calls",
    "to": 79
  }, {
    "from": 49,
    "label": "calls",
    "to": 79
  }, {
    "from": 49,
    "label": "calls",
    "to": 79
  }, {
    "from": 49,
    "label": "calls",
    "to": 79
  }, {
    "from": 26,
    "label": "calls",
    "to": 5
  }, {
    "from": 17,
    "label": "calls",
    "to": 83
  }, {
    "from": 47,
    "label": "calls",
    "to": 83
  }, {
    "from": 73,
    "label": "calls",
    "to": 81
  }, {
    "from": 73,
    "label": "calls",
    "to": 81
  }, {
    "from": 49,
    "label": "calls",
    "to": 47
  }, {
    "from": 24,
    "label": "calls",
    "to": 4
  }, {
    "from": 2,
    "label": "contains",
    "to": 73
  }, {
    "from": 73,
    "label": "declares",
    "to": 7
  }, {
    "from": 73,
    "label": "declares",
    "to": 11
  }, {
    "from": 73,
    "label": "declares",
    "to": 13
  }, {
    "from": 73,
    "label": "declares",
    "to": 15
  }, {
    "from": 73,
    "label": "declares",
    "to": 17
  }, {
    "from": 73,
    "label": "declares",
    "to": 22
  }, {
    "from": 73,
    "label": "declares",
    "to": 24
  }, {
    "from": 73,
    "label": "declares",
    "to": 26
  }, {
    "from": 73,
    "label": "declares",
    "to": 28
  }, {
    "from": 73,
    "label": "declares",
    "to": 35
  }, {
    "from": 73,
    "label": "declares",
    "to": 43
  }, {
    "from": 73,
    "label": "declares",
    "to": 47
  }, {
    "from": 73,
    "label": "declares",
    "to": 49
  }, {
    "from": 73,
    "label": "declares",
    "to": 64
  }, {
    "from": 73,
    "label": "declares",
    "to": 71
  }, {
    "from": 2,
    "label": "declares",
    "to": 74
  }, {
    "from": 2,
    "label": "declares",
    "to": 75
  }, {
    "from": 2,
    "label": "contains",
    "to": 84
  }, {
    "from": 2,
    "label": "contains",
    "to": 85
  }, {
    "from": 84,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 84,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 84,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 84,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 84,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 84,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 97,
    "label": "assigns",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 97,
    "label": "assigns",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 84,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 84,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 85,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 76
  }, {
    "from": 85,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 112
  }, {
    "from": 96,
    "label": "represents",
    "to": 113
  }, {
    "from": 112,
    "label": "provides",
    "to": 113
  }, {
    "from": 114,
    "label": "requires",
    "to": 2
  }, {
    "from": 115,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sql",
    "type": "module"
  }, {
    "id": 2,
    "text": "dado",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function select (columns, tabname, cond, extra)\r\n\ttabname  = tabname and (\" from \"..tabname) or \"\"\r\n\tcond     = cond and (\" where \"..cond) or \"\"\r\n\textra    = extra and (\" \"..extra) or \"\"\r\n\treturn strformat (\"select %s%s%s%s\", columns, tabname, cond, extra)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function insert (tabname, contents)\r\n\tif contents then\r\n\t\treturn strformat (\"insert into %s (%s) values (%s)\",\r\n\t\t\ttabname, tabtwostr (contents, ',', ',', nil, quote))\r\n\telse\r\n\t\treturn strformat (\"insert into %s\", tabname)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function update (tabname, contents, cond)\r\n\tcond = cond and (\" where \"..cond) or \"\"\r\n\tlocal set = contents\r\n\t\tand \" set \"..tabfullconcat (contents, '=', ',', nil, quote)\r\n\t\tor \"\"\r\n\treturn strformat (\"update %s%s%s\", tabname, set, cond)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function delete (tabname, cond)\r\n\tcond = cond and (\" where \"..cond) or \"\"\r\n\treturn strformat (\"delete from %s%s\", tabname, cond)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function _M.assertexec (self, stmt)\r\n\tlocal cur, msg = self.conn:execute (stmt)\r\n\treturn cur or error (msg..\" SQL = { \"..stmt..\" }\", 2)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local cur, msg = self.conn:execute (stmt)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function _M.commit (self)\r\n\treturn self.conn:commit ()\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function _M.rollback (self)\r\n\treturn self.conn:rollback ()\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function _M.setautocommit (self, bool)\r\n\treturn self.conn:setautocommit (bool)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function _M.nextval (self, seq, field)\r\n\tif field then\r\n\t\tseq = strformat (\"%s_%s_seq\", seq, field)\r\n\tend\r\n\tlocal cur = self:assertexec (\"select nextval('\"..seq..\"')\")\r\n\treturn cur:fetch(), nil, cur:close()\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if field then\r\n\t\tseq = strformat (\"%s_%s_seq\", seq, field)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "seq = strformat (\"%s_%s_seq\", seq, field)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "local cur = self:assertexec (\"select nextval('\"..seq..\"')\")",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function _M.delete (self, tabname, cond)\r\n\treturn self:assertexec (sql.delete (tabname, cond))\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function _M.insert (self, tabname, contents)\r\n\treturn self:assertexec (sql.insert (tabname, contents))\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function _M.update (self, tabname, contents, cond)\r\n\treturn self:assertexec (sql.update (tabname, contents, cond))\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function _M.select (self, columns, tabname, cond, extra, mode)\r\n\tlocal stmt = sql.select (columns, tabname, cond, extra)\r\n\tlocal cur = self:assertexec (stmt)\r\n\treturn function ()\r\n\t\t-- This table must be created inside this function or it could\r\n\t\t-- make `selectall' to return the same row every time.\r\n\t\tlocal t\r\n\t\tif mode then t = {} end\r\n\t\treturn cur:fetch (t, mode)\r\n\tend, cur\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local stmt = sql.select (columns, tabname, cond, extra)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local cur = self:assertexec (stmt)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local t",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if mode then t = {} end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "t = {}",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function _M.selectall (self, columns, tabname, cond, extra, mode)\r\n\tmode = mode or \"a\"\r\n\tlocal rs = {}\r\n\tlocal i = 0\r\n\tfor row in self:select (columns, tabname, cond, extra, mode) do\r\n\t\ti = i+1\r\n\t\trs[i] = row\r\n\tend\r\n\treturn rs\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "mode = mode or \"a\"",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "local rs = {}",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "for row in self:select (columns, tabname, cond, extra, mode) do\r\n\t\ti = i+1\r\n\t\trs[i] = row\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 40,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "rs[i] = row",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function _M.wrap_connection (conn, key)\r\n\tlocal obj = { conn = conn, key = key, }\r\n\tsetmetatable (obj, mt)\r\n\treturn obj\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local obj = { conn = conn, key = key, }",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "setmetatable (obj, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function makekey (dbname, dbuser, dbpass)\r\n\treturn strformat (\"%s-%s-%s\", dbname, tostring(dbuser), tostring(dbpass))\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function _M.connect (dbname, dbuser, dbpass, driver, ...)\r\n\tdriver = driver or \"postgres\"\r\n\r\n\t-- Creating new object\r\n\tlocal key = makekey (dbname, dbuser, dbpass)\r\n\tlocal conn = cache[key]\r\n\tif not conn then\r\n\t\t-- Opening database connection\r\n\t\tlocal ok, luasql = pcall (require, \"luasql.\"..driver)\r\n\t\tif not ok then\r\n\t\t\terror (\"Could not load LuaSQL driver `\"..driver..\"'. Maybe it is not installed properly.\\nLuaSQL: \"..tostring(luasql))\r\n\t\tend\r\n\t\tlocal env, err = luasql[driver] ()\r\n\t\tif not env then error (err, 2) end\r\n\t\tconn, err = env:connect (dbname, dbuser, dbpass, ...)\r\n\t\tif not conn then error (err, 2) end\r\n\t\t-- Storing connection on the cache\r\n\t\tcache[key] = conn\r\n\tend\r\n\treturn _M.wrap_connection (conn, key)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "driver = driver or \"postgres\"",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local key = makekey (dbname, dbuser, dbpass)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local conn = cache[key]",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if not conn then\r\n\t\t-- Opening database connection\r\n\t\tlocal ok, luasql = pcall (require, \"luasql.\"..driver)\r\n\t\tif not ok then\r\n\t\t\terror (\"Could not load LuaSQL driver `\"..driver..\"'. Maybe it is not installed properly.\\nLuaSQL: \"..tostring(luasql))\r\n\t\tend\r\n\t\tlocal env, err = luasql[driver] ()\r\n\t\tif not env then error (err, 2) end\r\n\t\tconn, err = env:connect (dbname, dbuser, dbpass, ...)\r\n\t\tif not conn then error (err, 2) end\r\n\t\t-- Storing connection on the cache\r\n\t\tcache[key] = conn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "local ok, luasql = pcall (require, \"luasql.\"..driver)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if not ok then\r\n\t\t\terror (\"Could not load LuaSQL driver `\"..driver..\"'. Maybe it is not installed properly.\\nLuaSQL: \"..tostring(luasql))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "error (\"Could not load LuaSQL driver `\"..driver..\"'. Maybe it is not installed properly.\\nLuaSQL: \"..tostring(luasql))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "local env, err = luasql[driver] ()",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if not env then error (err, 2) end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "error (err, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "conn, err = env:connect (dbname, dbuser, dbpass, ...)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if not conn then error (err, 2) end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "cache[key] = conn",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function _M.close (self)\r\n\tif self.key then\r\n\t\tcache[self.key] = nil\r\n\tend\r\n\tself.conn:close ()\r\n\tself.conn = nil\r\n\tsetmetatable (self, nil)\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "if self.key then\r\n\t\tcache[self.key] = nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "cache[self.key] = nil",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "self.conn:close ()",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "self.conn = nil",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "setmetatable (self, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function ()\r\n\t\t-- This table must be created inside this function or it could\r\n\t\t-- make `selectall' to return the same row every time.\r\n\t\tlocal t\r\n\t\tif mode then t = {} end\r\n\t\treturn cur:fetch (t, mode)\r\n\tend",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "",
    "type": "function container"
  }, {
    "id": 74,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 75,
    "text": "wrap_connection",
    "type": "global function"
  }, {
    "id": 76,
    "text": "string",
    "type": "module"
  }, {
    "id": 77,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 78,
    "text": "luasql[driver]",
    "type": "global function"
  }, {
    "id": 79,
    "text": "error",
    "type": "global function"
  }, {
    "id": 80,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 81,
    "text": "require",
    "type": "global function"
  }, {
    "id": 82,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 83,
    "text": "strformat",
    "type": "global function"
  }, {
    "id": 84,
    "text": "",
    "type": "variable container"
  }, {
    "id": 85,
    "text": "",
    "type": "require container"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 98,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 99,
    "text": "",
    "type": "string"
  }, {
    "id": 100,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 101,
    "text": "",
    "type": "string"
  }, {
    "id": 102,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 103,
    "text": "",
    "type": "string"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 106,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 107,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "interface container"
  }, {
    "id": 113,
    "text": "",
    "type": "interface"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "require local variable"
  } ]
}