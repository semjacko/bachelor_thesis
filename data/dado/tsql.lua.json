{
  "_filename": "tsql.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/dado/tests/tsql.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 7
  }, {
    "from": 12,
    "label": "calls",
    "to": 7
  }, {
    "from": 12,
    "label": "calls",
    "to": 7
  }, {
    "from": 12,
    "label": "calls",
    "to": 7
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 13
  }, {
    "from": 12,
    "label": "calls",
    "to": 11
  }, {
    "from": 12,
    "label": "calls",
    "to": 11
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 14
  }, {
    "from": 12,
    "label": "calls",
    "to": 15
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 12,
    "label": "calls",
    "to": 9
  }, {
    "from": 12,
    "label": "calls",
    "to": 9
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 12,
    "label": "calls",
    "to": 10
  }, {
    "from": 12,
    "label": "calls",
    "to": 10
  }, {
    "from": 12,
    "label": "calls",
    "to": 16
  }, {
    "from": 12,
    "label": "calls",
    "to": 8
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 4
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 2,
    "label": "contains",
    "to": 12
  }, {
    "from": 2,
    "label": "contains",
    "to": 17
  }, {
    "from": 2,
    "label": "contains",
    "to": 18
  }, {
    "from": 18,
    "label": "initializes",
    "to": 19
  }, {
    "from": 19,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sql",
    "type": "module"
  }, {
    "id": 2,
    "text": "tsql",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function escape (s, char, sub)\r\n\tif not s then return end\r\n\tchar = char or \"%s\"\r\n\tsub = sub or \"\\\\%1\"\r\n\ts = gsub (s, \"[%z\\1\\2\\3\\4\\5\\6\\7\\8\\11\\12\\14\\15\\16\\17\\18\\19\\20\\21\\22\\23\\24\\25\\26\\27\\28\\29\\30\\31]\", \"\")\r\n\ts = gsub (s, \"(\"..char..\")\", sub)\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function quote (s, quote, sub)\r\n\tquote = quote or \"'\"\r\n\tsub = sub or \"\\\\'\"\r\n\tif type(s) == \"number\" or strfind (s, \"^(%b())$\") then\r\n\t\treturn s\r\n\telse\r\n\t\treturn quote..escape (escape (s, \"\\\\\", \"\\\\\\\\\"), quote, sub)..quote\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function AND (tab)\r\n\treturn tabfullconcat (tab, \"=\", \" AND \", nil, quote)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function isinteger (id)\r\n\tlocal tid = type(id)\r\n\tif tid == \"string\" then\r\n\t\treturn (not id:match\"%a\") and (tonumber(id) ~= nil)\r\n\telse\r\n\t\treturn tid == \"number\"\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function select (columns, tabname, cond, extra)\r\n\ttabname  = tabname and (\" from \"..tabname) or \"\"\r\n\tcond     = cond and (\" where \"..cond) or \"\"\r\n\textra    = extra and (\" \"..extra) or \"\"\r\n\treturn strformat (\"select %s%s%s%s\", columns, tabname, cond, extra)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local function subselect (columns, tabname, cond, extra)\r\n\treturn \"(\"..select (columns, tabname, cond, extra)..\")\"\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function insert (tabname, contents)\r\n\tif contents then\r\n\t\treturn strformat (\"insert into %s (%s) values (%s)\",\r\n\t\t\ttabname, tabtwostr (contents, ',', ',', nil, quote))\r\n\telse\r\n\t\treturn strformat (\"insert into %s\", tabname)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local function update (tabname, contents, cond)\r\n\tcond = cond and (\" where \"..cond) or \"\"\r\n\tlocal set = contents\r\n\t\tand \" set \"..tabfullconcat (contents, '=', ',', nil, quote)\r\n\t\tor \"\"\r\n\treturn strformat (\"update %s%s%s\", tabname, set, cond)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function delete (tabname, cond)\r\n\tcond = cond and (\" where \"..cond) or \"\"\r\n\treturn strformat (\"delete from %s%s\", tabname, cond)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "function container"
  }, {
    "id": 13,
    "text": "write",
    "type": "global function"
  }, {
    "id": 14,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 15,
    "text": "print",
    "type": "global function"
  }, {
    "id": 16,
    "text": "require",
    "type": "global function"
  }, {
    "id": 17,
    "text": "",
    "type": "variable container"
  }, {
    "id": 18,
    "text": "",
    "type": "require container"
  }, {
    "id": 19,
    "text": "",
    "type": "require local variable"
  } ]
}