{
  "_filename": "precompiler.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/precompiler.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 34,
    "label": "has",
    "to": 42
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 33,
    "label": "has",
    "to": 43
  }, {
    "from": 15,
    "label": "calls",
    "to": 52
  }, {
    "from": 44,
    "label": "calls",
    "to": 50
  }, {
    "from": 44,
    "label": "calls",
    "to": 6
  }, {
    "from": 44,
    "label": "calls",
    "to": 59
  }, {
    "from": 9,
    "label": "calls",
    "to": 48
  }, {
    "from": 15,
    "label": "calls",
    "to": 48
  }, {
    "from": 44,
    "label": "calls",
    "to": 48
  }, {
    "from": 44,
    "label": "calls",
    "to": 48
  }, {
    "from": 15,
    "label": "calls",
    "to": 60
  }, {
    "from": 44,
    "label": "calls",
    "to": 55
  }, {
    "from": 9,
    "label": "calls",
    "to": 58
  }, {
    "from": 15,
    "label": "calls",
    "to": 9
  }, {
    "from": 15,
    "label": "calls",
    "to": 9
  }, {
    "from": 33,
    "label": "calls",
    "to": 28
  }, {
    "from": 44,
    "label": "calls",
    "to": 33
  }, {
    "from": 15,
    "label": "calls",
    "to": 51
  }, {
    "from": 44,
    "label": "calls",
    "to": 3
  }, {
    "from": 44,
    "label": "calls",
    "to": 3
  }, {
    "from": 44,
    "label": "calls",
    "to": 3
  }, {
    "from": 33,
    "label": "calls",
    "to": 3
  }, {
    "from": 15,
    "label": "calls",
    "to": 49
  }, {
    "from": 15,
    "label": "calls",
    "to": 49
  }, {
    "from": 33,
    "label": "calls",
    "to": 49
  }, {
    "from": 44,
    "label": "calls",
    "to": 49
  }, {
    "from": 44,
    "label": "calls",
    "to": 15
  }, {
    "from": 44,
    "label": "calls",
    "to": 57
  }, {
    "from": 9,
    "label": "calls",
    "to": 54
  }, {
    "from": 9,
    "label": "calls",
    "to": 54
  }, {
    "from": 44,
    "label": "calls",
    "to": 54
  }, {
    "from": 44,
    "label": "calls",
    "to": 54
  }, {
    "from": 44,
    "label": "calls",
    "to": 54
  }, {
    "from": 9,
    "label": "calls",
    "to": 53
  }, {
    "from": 44,
    "label": "calls",
    "to": 61
  }, {
    "from": 44,
    "label": "calls",
    "to": 61
  }, {
    "from": 44,
    "label": "calls",
    "to": 61
  }, {
    "from": 44,
    "label": "calls",
    "to": 61
  }, {
    "from": 44,
    "label": "calls",
    "to": 61
  }, {
    "from": 44,
    "label": "calls",
    "to": 61
  }, {
    "from": 28,
    "label": "calls",
    "to": 62
  }, {
    "from": 28,
    "label": "calls",
    "to": 62
  }, {
    "from": 44,
    "label": "calls",
    "to": 62
  }, {
    "from": 44,
    "label": "calls",
    "to": 56
  }, {
    "from": 44,
    "label": "calls",
    "to": 56
  }, {
    "from": 2,
    "label": "contains",
    "to": 44
  }, {
    "from": 44,
    "label": "declares",
    "to": 3
  }, {
    "from": 44,
    "label": "declares",
    "to": 6
  }, {
    "from": 44,
    "label": "declares",
    "to": 9
  }, {
    "from": 44,
    "label": "declares",
    "to": 15
  }, {
    "from": 44,
    "label": "declares",
    "to": 28
  }, {
    "from": 44,
    "label": "declares",
    "to": 33
  }, {
    "from": 2,
    "label": "contains",
    "to": 63
  }, {
    "from": 2,
    "label": "contains",
    "to": 64
  }, {
    "from": 64,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "requires",
    "to": 45
  }, {
    "from": 64,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "requires",
    "to": 47
  }, {
    "from": 64,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "requires",
    "to": 68
  }, {
    "from": 64,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "requires",
    "to": 46
  }, {
    "from": 64,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "table",
    "type": "module"
  }, {
    "id": 2,
    "text": "precompiler",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function escapepattern(pattern)\r\n\treturn pattern:gsub(\"([%^%$%(%)%%%.%[%]%*%+%-%?])\", \"%%%1\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function adjustpath(path)\r\n\tif path ~= \"\" and not path:find(filesep..\"$\") then\r\n\t\treturn path..FILE_SEP\r\n\tend\r\n\treturn path\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if path ~= \"\" and not path:find(filesep..\"$\") then\r\n\t\treturn path..FILE_SEP\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function readinput(file, name)\r\n\tif bytecodes then\r\n\t\tfile = assert(io.open(file))\r\n\t\tfile = file:read(\"*a\"), file:close()\r\n\telse\r\n\t\tfile = string.dump(assert(loadfile(file)))\r\n\tend\r\n\treturn file\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "if bytecodes then\r\n\t\tfile = assert(io.open(file))\r\n\t\tfile = file:read(\"*a\"), file:close()\r\n\telse\r\n\t\tfile = string.dump(assert(loadfile(file)))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "file = assert(io.open(file))",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "file = file:read(\"*a\"), file:close()",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "file = string.dump(assert(loadfile(file)))",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function getbytecodes(name)\r\n\tif names then\r\n\t\tlocal file = name:gsub(\"%.\", FILE_SEP)\r\n\t\tlocal err = {}\r\n\t\tfor path in luapath:gmatch(template) do\r\n\t\t\tpath = path:gsub(pathmark, file)\r\n\t\t\tlocal file = io.open(path)\r\n\t\t\tif file then\r\n\t\t\t\tfile:close()\r\n\t\t\t\treturn readinput(path)\r\n\t\t\tend\r\n\t\t\ttable.insert(err, string.format(\"\\tno file '%s'\", path))\r\n\t\tend\r\n\t\terr = table.concat(err, \"\\n\")\r\n\t\terror(string.format(\"module '%s' not found:\\n%s\", name, err))\r\n\tend\r\n\treturn readinput(name)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "if names then\r\n\t\tlocal file = name:gsub(\"%.\", FILE_SEP)\r\n\t\tlocal err = {}\r\n\t\tfor path in luapath:gmatch(template) do\r\n\t\t\tpath = path:gsub(pathmark, file)\r\n\t\t\tlocal file = io.open(path)\r\n\t\t\tif file then\r\n\t\t\t\tfile:close()\r\n\t\t\t\treturn readinput(path)\r\n\t\t\tend\r\n\t\t\ttable.insert(err, string.format(\"\\tno file '%s'\", path))\r\n\t\tend\r\n\t\terr = table.concat(err, \"\\n\")\r\n\t\terror(string.format(\"module '%s' not found:\\n%s\", name, err))\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local file = name:gsub(\"%.\", FILE_SEP)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local err = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "for path in luapath:gmatch(template) do\r\n\t\t\tpath = path:gsub(pathmark, file)\r\n\t\t\tlocal file = io.open(path)\r\n\t\t\tif file then\r\n\t\t\t\tfile:close()\r\n\t\t\t\treturn readinput(path)\r\n\t\t\tend\r\n\t\t\ttable.insert(err, string.format(\"\\tno file '%s'\", path))\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "path = path:gsub(pathmark, file)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local file = io.open(path)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if file then\r\n\t\t\t\tfile:close()\r\n\t\t\t\treturn readinput(path)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "table.insert(err, string.format(\"\\tno file '%s'\", path))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "err = table.concat(err, \"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "error(string.format(\"module '%s' not found:\\n%s\", name, err))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function allequals(...)\r\n\tlocal name = ...\r\n\tfor i = 2, select(\"#\", ...) do\r\n\t\tif name ~= select(i, ...) then return nil end\r\n\tend\r\n\treturn name\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local name = ...",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for i = 2, select(\"#\", ...) do\r\n\t\tif name ~= select(i, ...) then return nil end\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 31,
    "text": "if name ~= select(i, ...) then return nil end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function funcname(name)\r\n\tif not names then\r\n\t\tlocal result\r\n\t\tfor path in luapath:gmatch(template) do\r\n\t\t\tpath = path:gsub(pathmark, \"\\0\")\r\n\t\t\tpath = escapepattern(path)\r\n\t\t\tpath = path:gsub(\"%z\", \"(.-)\")\r\n\t\t\tpath = string.format(\"^%s$\", path)\r\n\t\t\tresult = allequals(name:match(path)) or result\r\n\t\tend\r\n\t\tif not result then\r\n\t\t\treturn nil, \"unable to figure package name for file '\"..name..\"'\"\r\n\t\tend\r\n\t\treturn result:gsub(filesep, FUNC_SEP)\r\n\tend\r\n\treturn name:gsub(\"%.\", FUNC_SEP)\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "if not names then\r\n\t\tlocal result\r\n\t\tfor path in luapath:gmatch(template) do\r\n\t\t\tpath = path:gsub(pathmark, \"\\0\")\r\n\t\t\tpath = escapepattern(path)\r\n\t\t\tpath = path:gsub(\"%z\", \"(.-)\")\r\n\t\t\tpath = string.format(\"^%s$\", path)\r\n\t\t\tresult = allequals(name:match(path)) or result\r\n\t\tend\r\n\t\tif not result then\r\n\t\t\treturn nil, \"unable to figure package name for file '\"..name..\"'\"\r\n\t\tend\r\n\t\treturn result:gsub(filesep, FUNC_SEP)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "local result",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "for path in luapath:gmatch(template) do\r\n\t\t\tpath = path:gsub(pathmark, \"\\0\")\r\n\t\t\tpath = escapepattern(path)\r\n\t\t\tpath = path:gsub(\"%z\", \"(.-)\")\r\n\t\t\tpath = string.format(\"^%s$\", path)\r\n\t\t\tresult = allequals(name:match(path)) or result\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "path = path:gsub(pathmark, \"\\0\")",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "path = escapepattern(path)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "path = path:gsub(\"%z\", \"(.-)\")",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "path = string.format(\"^%s$\", path)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "result = allequals(name:match(path)) or result",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if not result then\r\n\t\t\treturn nil, \"unable to figure package name for file '\"..name..\"'\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "",
    "type": "function container"
  }, {
    "id": 45,
    "text": "io",
    "type": "module"
  }, {
    "id": 46,
    "text": "string",
    "type": "module"
  }, {
    "id": 47,
    "text": "os",
    "type": "module"
  }, {
    "id": 48,
    "text": "open",
    "type": "global function"
  }, {
    "id": 49,
    "text": "format",
    "type": "global function"
  }, {
    "id": 50,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 51,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 52,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 53,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 54,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 55,
    "text": "_M",
    "type": "global function"
  }, {
    "id": 56,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 57,
    "text": "module",
    "type": "global function"
  }, {
    "id": 58,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 59,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 60,
    "text": "error",
    "type": "global function"
  }, {
    "id": 61,
    "text": "require",
    "type": "global function"
  }, {
    "id": 62,
    "text": "select",
    "type": "global function"
  }, {
    "id": 63,
    "text": "",
    "type": "variable container"
  }, {
    "id": 64,
    "text": "",
    "type": "require container"
  }, {
    "id": 65,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 68,
    "text": "package",
    "type": "module"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "require local variable"
  } ]
}