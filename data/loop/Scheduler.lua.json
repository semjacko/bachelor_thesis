{
  "_filename": "Scheduler.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/thread/Scheduler.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 8
  }, {
    "from": 10,
    "label": "calls",
    "to": 14
  }, {
    "from": 11,
    "label": "calls",
    "to": 104
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 38,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 13
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 41
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 13
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 62,
    "label": "has",
    "to": 73
  }, {
    "from": 60,
    "label": "has",
    "to": 74
  }, {
    "from": 57,
    "label": "has",
    "to": 75
  }, {
    "from": 57,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 25
  }, {
    "from": 76,
    "label": "has",
    "to": 65
  }, {
    "from": 57,
    "label": "has",
    "to": 13
  }, {
    "from": 57,
    "label": "has",
    "to": 13
  }, {
    "from": 57,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 58
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 83,
    "label": "has",
    "to": 91
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 13
  }, {
    "from": 81,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 13
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 13
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 13
  }, {
    "from": 107,
    "label": "has",
    "to": 13
  }, {
    "from": 107,
    "label": "has",
    "to": 13
  }, {
    "from": 107,
    "label": "has",
    "to": 13
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 112,
    "label": "has",
    "to": 117
  }, {
    "from": 112,
    "label": "has",
    "to": 13
  }, {
    "from": 112,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 13
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 13
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 58
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 129,
    "label": "has",
    "to": 133
  }, {
    "from": 129,
    "label": "has",
    "to": 13
  }, {
    "from": 129,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 58
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 85
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 82
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 138,
    "label": "has",
    "to": 143
  }, {
    "from": 138,
    "label": "has",
    "to": 144
  }, {
    "from": 137,
    "label": "has",
    "to": 145
  }, {
    "from": 137,
    "label": "has",
    "to": 146
  }, {
    "from": 137,
    "label": "has",
    "to": 147
  }, {
    "from": 135,
    "label": "has",
    "to": 13
  }, {
    "from": 135,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 153,
    "label": "has",
    "to": 159
  }, {
    "from": 153,
    "label": "has",
    "to": 160
  }, {
    "from": 152,
    "label": "has",
    "to": 13
  }, {
    "from": 152,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 162,
    "label": "has",
    "to": 171
  }, {
    "from": 162,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 175
  }, {
    "from": 172,
    "label": "has",
    "to": 176
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 177
  }, {
    "from": 172,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 178,
    "label": "has",
    "to": 180
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 181
  }, {
    "from": 172,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 179
  }, {
    "from": 182,
    "label": "has",
    "to": 180
  }, {
    "from": 162,
    "label": "has",
    "to": 183
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 52,
    "label": "calls",
    "to": 203
  }, {
    "from": 52,
    "label": "calls",
    "to": 203
  }, {
    "from": 28,
    "label": "calls",
    "to": 199
  }, {
    "from": 38,
    "label": "calls",
    "to": 199
  }, {
    "from": 57,
    "label": "calls",
    "to": 199
  }, {
    "from": 162,
    "label": "calls",
    "to": 204
  }, {
    "from": 162,
    "label": "calls",
    "to": 204
  }, {
    "from": 162,
    "label": "calls",
    "to": 204
  }, {
    "from": 162,
    "label": "calls",
    "to": 204
  }, {
    "from": 186,
    "label": "calls",
    "to": 14
  }, {
    "from": 186,
    "label": "calls",
    "to": 211
  }, {
    "from": 14,
    "label": "calls",
    "to": 212
  }, {
    "from": 14,
    "label": "calls",
    "to": 205
  }, {
    "from": 14,
    "label": "calls",
    "to": 205
  }, {
    "from": 14,
    "label": "calls",
    "to": 205
  }, {
    "from": 14,
    "label": "calls",
    "to": 205
  }, {
    "from": 14,
    "label": "calls",
    "to": 205
  }, {
    "from": 162,
    "label": "calls",
    "to": 205
  }, {
    "from": 186,
    "label": "calls",
    "to": 9
  }, {
    "from": 38,
    "label": "calls",
    "to": 213
  }, {
    "from": 38,
    "label": "calls",
    "to": 213
  }, {
    "from": 101,
    "label": "calls",
    "to": 12
  }, {
    "from": 101,
    "label": "calls",
    "to": 214
  }, {
    "from": 186,
    "label": "calls",
    "to": 196
  }, {
    "from": 93,
    "label": "calls",
    "to": 196
  }, {
    "from": 186,
    "label": "calls",
    "to": 206
  }, {
    "from": 38,
    "label": "calls",
    "to": 202
  }, {
    "from": 52,
    "label": "calls",
    "to": 202
  }, {
    "from": 186,
    "label": "calls",
    "to": 198
  }, {
    "from": 14,
    "label": "calls",
    "to": 197
  }, {
    "from": 57,
    "label": "calls",
    "to": 208
  }, {
    "from": 28,
    "label": "calls",
    "to": 191
  }, {
    "from": 112,
    "label": "calls",
    "to": 191
  }, {
    "from": 119,
    "label": "calls",
    "to": 191
  }, {
    "from": 125,
    "label": "calls",
    "to": 191
  }, {
    "from": 186,
    "label": "calls",
    "to": 210
  }, {
    "from": 14,
    "label": "calls",
    "to": 209
  }, {
    "from": 152,
    "label": "calls",
    "to": 200
  }, {
    "from": 186,
    "label": "calls",
    "to": 215
  }, {
    "from": 152,
    "label": "calls",
    "to": 217
  }, {
    "from": 162,
    "label": "calls",
    "to": 217
  }, {
    "from": 162,
    "label": "calls",
    "to": 217
  }, {
    "from": 152,
    "label": "calls",
    "to": 192
  }, {
    "from": 186,
    "label": "calls",
    "to": 207
  }, {
    "from": 28,
    "label": "calls",
    "to": 28
  }, {
    "from": 38,
    "label": "calls",
    "to": 28
  }, {
    "from": 93,
    "label": "calls",
    "to": 194
  }, {
    "from": 162,
    "label": "calls",
    "to": 218
  }, {
    "from": 162,
    "label": "calls",
    "to": 218
  }, {
    "from": 28,
    "label": "calls",
    "to": 201
  }, {
    "from": 57,
    "label": "calls",
    "to": 201
  }, {
    "from": 152,
    "label": "calls",
    "to": 219
  }, {
    "from": 14,
    "label": "calls",
    "to": 220
  }, {
    "from": 125,
    "label": "calls",
    "to": 189
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 186,
    "label": "calls",
    "to": 216
  }, {
    "from": 8,
    "label": "contains",
    "to": 186
  }, {
    "from": 186,
    "label": "declares",
    "to": 12
  }, {
    "from": 186,
    "label": "declares",
    "to": 14
  }, {
    "from": 186,
    "label": "declares",
    "to": 28
  }, {
    "from": 186,
    "label": "declares",
    "to": 38
  }, {
    "from": 186,
    "label": "declares",
    "to": 50
  }, {
    "from": 186,
    "label": "declares",
    "to": 52
  }, {
    "from": 186,
    "label": "declares",
    "to": 57
  }, {
    "from": 186,
    "label": "declares",
    "to": 81
  }, {
    "from": 186,
    "label": "declares",
    "to": 93
  }, {
    "from": 186,
    "label": "declares",
    "to": 95
  }, {
    "from": 186,
    "label": "declares",
    "to": 101
  }, {
    "from": 186,
    "label": "declares",
    "to": 104
  }, {
    "from": 186,
    "label": "declares",
    "to": 107
  }, {
    "from": 186,
    "label": "declares",
    "to": 112
  }, {
    "from": 186,
    "label": "declares",
    "to": 119
  }, {
    "from": 186,
    "label": "declares",
    "to": 125
  }, {
    "from": 186,
    "label": "declares",
    "to": 129
  }, {
    "from": 186,
    "label": "declares",
    "to": 135
  }, {
    "from": 186,
    "label": "declares",
    "to": 149
  }, {
    "from": 186,
    "label": "declares",
    "to": 152
  }, {
    "from": 186,
    "label": "declares",
    "to": 162
  }, {
    "from": 186,
    "label": "declares",
    "to": 184
  }, {
    "from": 187,
    "label": "calls",
    "to": 14
  }, {
    "from": 221,
    "label": "requires",
    "to": 8
  }, {
    "from": 8,
    "label": "contains",
    "to": 222
  }, {
    "from": 8,
    "label": "contains",
    "to": 223
  }, {
    "from": 222,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 222,
    "label": "initializes",
    "to": 226
  }, {
    "from": 226,
    "label": "assigns",
    "to": 227
  }, {
    "from": 222,
    "label": "initializes",
    "to": 228
  }, {
    "from": 228,
    "label": "assigns",
    "to": 229
  }, {
    "from": 222,
    "label": "initializes",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 222,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "assigns",
    "to": 233
  }, {
    "from": 222,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 222,
    "label": "initializes",
    "to": 236
  }, {
    "from": 236,
    "label": "assigns",
    "to": 237
  }, {
    "from": 222,
    "label": "initializes",
    "to": 238
  }, {
    "from": 238,
    "label": "assigns",
    "to": 239
  }, {
    "from": 222,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "assigns",
    "to": 241
  }, {
    "from": 222,
    "label": "initializes",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 222,
    "label": "initializes",
    "to": 244
  }, {
    "from": 244,
    "label": "assigns",
    "to": 245
  }, {
    "from": 222,
    "label": "initializes",
    "to": 246
  }, {
    "from": 246,
    "label": "assigns",
    "to": 247
  }, {
    "from": 222,
    "label": "initializes",
    "to": 248
  }, {
    "from": 248,
    "label": "assigns",
    "to": 249
  }, {
    "from": 222,
    "label": "initializes",
    "to": 250
  }, {
    "from": 250,
    "label": "assigns",
    "to": 251
  }, {
    "from": 222,
    "label": "initializes",
    "to": 252
  }, {
    "from": 252,
    "label": "assigns",
    "to": 253
  }, {
    "from": 222,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "assigns",
    "to": 255
  }, {
    "from": 222,
    "label": "initializes",
    "to": 256
  }, {
    "from": 256,
    "label": "assigns",
    "to": 257
  }, {
    "from": 222,
    "label": "initializes",
    "to": 258
  }, {
    "from": 258,
    "label": "assigns",
    "to": 259
  }, {
    "from": 222,
    "label": "initializes",
    "to": 260
  }, {
    "from": 260,
    "label": "assigns",
    "to": 261
  }, {
    "from": 222,
    "label": "initializes",
    "to": 262
  }, {
    "from": 262,
    "label": "assigns",
    "to": 263
  }, {
    "from": 223,
    "label": "initializes",
    "to": 264
  }, {
    "from": 264,
    "label": "requires",
    "to": 190
  }, {
    "from": 223,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "requires",
    "to": 7
  }, {
    "from": 223,
    "label": "initializes",
    "to": 266
  }, {
    "from": 266,
    "label": "requires",
    "to": 195
  }, {
    "from": 223,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "requires",
    "to": 1
  }, {
    "from": 223,
    "label": "initializes",
    "to": 268
  }, {
    "from": 268,
    "label": "requires",
    "to": 6
  }, {
    "from": 223,
    "label": "initializes",
    "to": 269
  }, {
    "from": 269,
    "label": "requires",
    "to": 5
  }, {
    "from": 223,
    "label": "initializes",
    "to": 270
  }, {
    "from": 270,
    "label": "requires",
    "to": 188
  }, {
    "from": 223,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "requires",
    "to": 193
  }, {
    "from": 223,
    "label": "initializes",
    "to": 272
  }, {
    "from": 272,
    "label": "requires",
    "to": 4
  }, {
    "from": 223,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "requires",
    "to": 2
  }, {
    "from": 223,
    "label": "initializes",
    "to": 274
  }, {
    "from": 274,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ObjectCache",
    "type": "module"
  }, {
    "id": 2,
    "text": "OrderedSet",
    "type": "module"
  }, {
    "id": 3,
    "text": "PriorityQueue",
    "type": "module"
  }, {
    "id": 4,
    "text": "base",
    "type": "module"
  }, {
    "id": 5,
    "text": "Inspector",
    "type": "module"
  }, {
    "id": 6,
    "text": "Verbose",
    "type": "module"
  }, {
    "id": 7,
    "text": "table",
    "type": "module"
  }, {
    "id": 8,
    "text": "Scheduler",
    "type": "module"
  }, {
    "id": 9,
    "text": "function class(class, ...)\r\n\tif select(\"#\", ...) > 1\r\n\t\tthen return base.rawnew(table.copy(MultipleClass, {...}), initclass(class))\r\n\t\telse return base.class(class, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function __init(class, self)\r\n\tself = Scheduler.__init(class, self)\r\n\tself.reading = MapWithArrayOfKeys()\r\n\tself.writing = MapWithArrayOfKeys()\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function register(self, routine, previous)\r\n\tlocal reading, writing = self.reading, self.writing\r\n\tfor _, channel in ipairs(reading) do\r\n\t\tif reading[channel] == routine then return end\r\n\tend\r\n\tfor _, channel in ipairs(writing) do\r\n\t\tif writing[channel] == routine then return end\r\n\tend\r\n\treturn Scheduler.register(self, routine, previous)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function(_, err) return err end",
    "type": "function"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "function __init(class, self)\r\n\tself = oo.rawnew(class, self)\r\n\tif rawget(self, \"traps\"     ) == nil then self.traps      = WeakSet()           end\r\n\tif rawget(self, \"running\"   ) == nil then self.running    = OrderedSet()        end\r\n\tif rawget(self, \"sleeping\"  ) == nil then self.sleeping   = PriorityQueue()     end\r\n\tif rawget(self, \"current\"   ) == nil then self.current    = false               end\r\n\tif rawget(self, \"currentkey\") == nil then self.currentkey = OrderedSet.firstkey end\r\n\tself.sleeping.wakeup = self.sleeping.wakeup or self.sleeping.priority\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "self = oo.rawnew(class, self)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if rawget(self, \"traps\"     ) == nil then self.traps      = WeakSet()           end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "self.traps      = WeakSet()",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if rawget(self, \"running\"   ) == nil then self.running    = OrderedSet()        end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "self.running    = OrderedSet()",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if rawget(self, \"sleeping\"  ) == nil then self.sleeping   = PriorityQueue()     end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "self.sleeping   = PriorityQueue()",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if rawget(self, \"current\"   ) == nil then self.current    = false               end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "self.current    = false",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "if rawget(self, \"currentkey\") == nil then self.currentkey = OrderedSet.firstkey end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "self.currentkey = OrderedSet.firstkey",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "self.sleeping.wakeup = self.sleeping.wakeup or self.sleeping.priority",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function resumepcall(pcall, success, ...)\r\n\tif coroutine.status(pcall) == \"suspended\" then\r\n\t\treturn resumepcall(pcall, coroutine.resume(pcall, coroutine.yield(...)))\r\n\telse\r\n\t\tlocal current = PCallMap[pcall]                                             --[[VERBOSE]] verbose:copcall(false, \"protected call finished in \",current)\r\n\t\tlocal running = PCallMap[current]\r\n\t\tif running then\r\n\t\t\tPCallMap[current] = PCallMap[running]\r\n\t\t\tPCallMap[running] = current\r\n\t\tend\r\n\t\tPCallMap[pcall] = nil\r\n\t\treturn success, ...\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "if coroutine.status(pcall) == \"suspended\" then\r\n\t\treturn resumepcall(pcall, coroutine.resume(pcall, coroutine.yield(...)))\r\n\telse\r\n\t\tlocal current = PCallMap[pcall]                                             --[[VERBOSE]] verbose:copcall(false, \"protected call finished in \",current)\r\n\t\tlocal running = PCallMap[current]\r\n\t\tif running then\r\n\t\t\tPCallMap[current] = PCallMap[running]\r\n\t\t\tPCallMap[running] = current\r\n\t\tend\r\n\t\tPCallMap[pcall] = nil\r\n\t\treturn success, ...\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local current = PCallMap[pcall]",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "verbose:copcall(false, \"protected call finished in \",current)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local running = PCallMap[current]",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if running then\r\n\t\t\tPCallMap[current] = PCallMap[running]\r\n\t\t\tPCallMap[running] = current\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "PCallMap[current] = PCallMap[running]",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "PCallMap[running] = current",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "PCallMap[pcall] = nil",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function pcall(func, ...)\r\n\tlocal luafunc, pcall = luapcall(coroutine.create, func)\r\n\tif luafunc then\r\n\t\tlocal running = coroutine.running()\r\n\t\tlocal current = PCallMap[running]                                           --[[VERBOSE]] verbose:copcall(true, \"new protected call in \",current or running)\r\n\t\tif current then\r\n\t\t\tPCallMap[running] = PCallMap[current]\r\n\t\t\tPCallMap[current] = running\r\n\t\t\tPCallMap[pcall] = current\r\n\t\telse\r\n\t\t\tPCallMap[pcall] = running\r\n\t\tend\r\n\t\treturn resumepcall(pcall, coroutine.resume(pcall, ...))\r\n\telse\r\n\t\treturn luapcall(func, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local luafunc, pcall = luapcall(coroutine.create, func)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if luafunc then\r\n\t\tlocal running = coroutine.running()\r\n\t\tlocal current = PCallMap[running]                                           --[[VERBOSE]] verbose:copcall(true, \"new protected call in \",current or running)\r\n\t\tif current then\r\n\t\t\tPCallMap[running] = PCallMap[current]\r\n\t\t\tPCallMap[current] = running\r\n\t\t\tPCallMap[pcall] = current\r\n\t\telse\r\n\t\t\tPCallMap[pcall] = running\r\n\t\tend\r\n\t\treturn resumepcall(pcall, coroutine.resume(pcall, ...))\r\n\telse\r\n\t\treturn luapcall(func, ...)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "local running = coroutine.running()",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local current = PCallMap[running]",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "verbose:copcall(true, \"new protected call in \",current or running)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "if current then\r\n\t\t\tPCallMap[running] = PCallMap[current]\r\n\t\t\tPCallMap[current] = running\r\n\t\t\tPCallMap[pcall] = current\r\n\t\telse\r\n\t\t\tPCallMap[pcall] = running\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "PCallMap[running] = PCallMap[current]",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "PCallMap[current] = running",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "PCallMap[pcall] = current",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "PCallMap[pcall] = running",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function getpcall()\r\n\treturn pcall\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function checkcurrent(self)\r\n\tlocal current = self.current\r\n\tlocal running = coroutine.running()\r\n\tassert(current,\r\n\t\t\"attempt to call scheduler operation out of a scheduled routine context.\")\r\n\tassert(current == running or PCallMap[running] == current,\r\n\t\t\"inconsistent internal state, current scheduled routine is not running.\")\r\n\treturn current\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local current = self.current",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "assert(current,\r\n\t\t\"attempt to call scheduler operation out of a scheduled routine context.\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert(current == running or PCallMap[running] == current,\r\n\t\t\"inconsistent internal state, current scheduled routine is not running.\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function resumeall(self, success, ...)                                          --[[VERBOSE]] local verbose = self.verbose\r\n\tlocal routine = self.current\r\n\tif routine then                                                               --[[VERBOSE]] verbose:threads(false, routine,\" yielded\")\r\n\t\tif coroutine.status(routine) == \"dead\" then                                 --[[VERBOSE]] verbose:threads(routine,\" has finished\")\r\n\t\t\tself:remove(routine, self.currentkey)\r\n\t\t\tself.current = false\r\n\t\t\tlocal trap = self.traps[routine]\r\n\t\t\tif trap then                                                              --[[VERBOSE]] verbose:threads(true, \"executing trap for \",routine)\r\n\t\t\t\ttrap(self, routine, success, ...)                                       --[[VERBOSE]] verbose:threads(false)\r\n\t\t\telseif not success then                                                   --[[VERBOSE]] verbose:threads(\"uncaptured error on \",routine)\r\n\t\t\t\tself:error(routine, ...)\r\n\t\t\tend\r\n\t\telseif self.running:contains(routine) then\r\n\t\t\tself.currentkey = routine\r\n\t\tend                                                                         --[[VERBOSE]] else verbose:scheduler(true, \"resuming running threads\")\r\n\tend\r\n\troutine = self.running[self.currentkey] \r\n\tif routine then\r\n\t\tself.current = routine                                                      --[[VERBOSE]] verbose:threads(true, \"resuming \",routine)\r\n\t\treturn self:resumeall(coroutine.resume(routine, ...))\r\n\telse                                                                          --[[VERBOSE]] verbose:scheduler(false, \"running threads resumed\")\r\n\t\tself.currentkey = OrderedSet.firstkey\r\n\t\tself.current = false\r\n\t\treturn success ~= nil\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local verbose = self.verbose",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local routine = self.current",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if routine then                                                               --[[VERBOSE]] verbose:threads(false, routine,\" yielded\")\r\n\t\tif coroutine.status(routine) == \"dead\" then                                 --[[VERBOSE]] verbose:threads(routine,\" has finished\")\r\n\t\t\tself:remove(routine, self.currentkey)\r\n\t\t\tself.current = false\r\n\t\t\tlocal trap = self.traps[routine]\r\n\t\t\tif trap then                                                              --[[VERBOSE]] verbose:threads(true, \"executing trap for \",routine)\r\n\t\t\t\ttrap(self, routine, success, ...)                                       --[[VERBOSE]] verbose:threads(false)\r\n\t\t\telseif not success then                                                   --[[VERBOSE]] verbose:threads(\"uncaptured error on \",routine)\r\n\t\t\t\tself:error(routine, ...)\r\n\t\t\tend\r\n\t\telseif self.running:contains(routine) then\r\n\t\t\tself.currentkey = routine\r\n\t\tend                                                                         --[[VERBOSE]] else verbose:scheduler(true, \"resuming running threads\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "verbose:threads(false, routine,\" yielded\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "if coroutine.status(routine) == \"dead\" then                                 --[[VERBOSE]] verbose:threads(routine,\" has finished\")\r\n\t\t\tself:remove(routine, self.currentkey)\r\n\t\t\tself.current = false\r\n\t\t\tlocal trap = self.traps[routine]\r\n\t\t\tif trap then                                                              --[[VERBOSE]] verbose:threads(true, \"executing trap for \",routine)\r\n\t\t\t\ttrap(self, routine, success, ...)                                       --[[VERBOSE]] verbose:threads(false)\r\n\t\t\telseif not success then                                                   --[[VERBOSE]] verbose:threads(\"uncaptured error on \",routine)\r\n\t\t\t\tself:error(routine, ...)\r\n\t\t\tend\r\n\t\telseif self.running:contains(routine) then\r\n\t\t\tself.currentkey = routine\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "verbose:threads(routine,\" has finished\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "self:remove(routine, self.currentkey)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "self.current = false",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local trap = self.traps[routine]",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if trap then                                                              --[[VERBOSE]] verbose:threads(true, \"executing trap for \",routine)\r\n\t\t\t\ttrap(self, routine, success, ...)                                       --[[VERBOSE]] verbose:threads(false)\r\n\t\t\telseif not success then                                                   --[[VERBOSE]] verbose:threads(\"uncaptured error on \",routine)\r\n\t\t\t\tself:error(routine, ...)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "verbose:threads(true, \"executing trap for \",routine)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "trap(self, routine, success, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "verbose:threads(false)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "verbose:threads(\"uncaptured error on \",routine)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "self:error(routine, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "self.currentkey = routine",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "verbose:scheduler(true, \"resuming running threads\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "routine = self.running[self.currentkey]",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if routine then\r\n\t\tself.current = routine                                                      --[[VERBOSE]] verbose:threads(true, \"resuming \",routine)\r\n\t\treturn self:resumeall(coroutine.resume(routine, ...))\r\n\telse                                                                          --[[VERBOSE]] verbose:scheduler(false, \"running threads resumed\")\r\n\t\tself.currentkey = OrderedSet.firstkey\r\n\t\tself.current = false\r\n\t\treturn success ~= nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "self.current = routine",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "verbose:threads(true, \"resuming \",routine)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "verbose:scheduler(false, \"running threads resumed\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function wakeupall(self)                                                        --[[VERBOSE]] local verbose = self.verbose\r\n\tlocal sleeping = self.sleeping\r\n\tif sleeping:head() then                                                       --[[VERBOSE]] verbose:scheduler(true, \"waking sleeping threads up\")\r\n\t\tlocal running = self.running\r\n\t\tlocal now = self:time()\r\n\t\trepeat\r\n\t\t\tif sleeping:wakeup(sleeping:head()) <= now\r\n\t\t\t\tthen running:enqueue(sleeping:dequeue())                                --[[VERBOSE]] verbose:threads(self.running:tail(),\" woke up\")\r\n\t\t\t\telse break\r\n\t\t\tend\r\n\t\tuntil sleeping:empty()                                                      --[[VERBOSE]] verbose:scheduler(false, \"sleeping threads waken\")\r\n\t\treturn true\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "local sleeping = self.sleeping",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "if sleeping:head() then                                                       --[[VERBOSE]] verbose:scheduler(true, \"waking sleeping threads up\")\r\n\t\tlocal running = self.running\r\n\t\tlocal now = self:time()\r\n\t\trepeat\r\n\t\t\tif sleeping:wakeup(sleeping:head()) <= now\r\n\t\t\t\tthen running:enqueue(sleeping:dequeue())                                --[[VERBOSE]] verbose:threads(self.running:tail(),\" woke up\")\r\n\t\t\t\telse break\r\n\t\t\tend\r\n\t\tuntil sleeping:empty()                                                      --[[VERBOSE]] verbose:scheduler(false, \"sleeping threads waken\")\r\n\t\treturn true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "verbose:scheduler(true, \"waking sleeping threads up\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "local running = self.running",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local now = self:time()",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "repeat\r\n\t\t\tif sleeping:wakeup(sleeping:head()) <= now\r\n\t\t\t\tthen running:enqueue(sleeping:dequeue())                                --[[VERBOSE]] verbose:threads(self.running:tail(),\" woke up\")\r\n\t\t\t\telse break\r\n\t\t\tend\r\n\t\tuntil sleeping:empty()",
    "type": "statement:repeat"
  }, {
    "id": 88,
    "text": "if sleeping:wakeup(sleeping:head()) <= now\r\n\t\t\t\tthen running:enqueue(sleeping:dequeue())                                --[[VERBOSE]] verbose:threads(self.running:tail(),\" woke up\")\r\n\t\t\t\telse break\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "running:enqueue(sleeping:dequeue())",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "verbose:threads(self.running:tail(),\" woke up\")",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "verbose:scheduler(false, \"sleeping threads waken\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function time(self)\r\n\treturn os.difftime(os.time(), StartTime)\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function idle(self, timeout)                                                    --[[VERBOSE]] self.verbose:scheduler(true, \"starting busy-waiting for \",timeout,\" seconds\")\r\n\tif timeout then repeat until self:time() > timeout end                        --[[VERBOSE]] self.verbose:scheduler(false, \"busy-waiting ended\")\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "self.verbose:scheduler(true, \"starting busy-waiting for \",timeout,\" seconds\")",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "if timeout then repeat until self:time() > timeout end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "repeat until self:time() > timeout",
    "type": "statement:repeat"
  }, {
    "id": 99,
    "text": "self.verbose:scheduler(false, \"busy-waiting ended\")",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function error(self, routine, errmsg)\r\n\tluaerror(traceback(routine, errmsg))\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "luaerror(traceback(routine, errmsg))",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function register(self, routine, previous)                                      --[[VERBOSE]] self.verbose:threads(\"registering \",routine)\r\n\treturn not self.sleeping:contains(routine) and\r\n\t       self.running:insert(routine, previous)\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "self.verbose:threads(\"registering \",routine)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function remove(self, routine)                                                  --[[VERBOSE]] self.verbose:threads(\"removing \",routine)\r\n\tif routine == self.current then\r\n\t\treturn self.running:remove(routine, self.currentkey)\r\n\telseif routine == self.currentkey then\r\n\t\tself.currentkey = self.running:previous(routine)\r\n\t\treturn self.running:remove(routine, self.currentkey)\r\n\telseif self.running:remove(routine) then\r\n\t\treturn routine\r\n\telse\r\n\t\treturn self.sleeping:remove(routine)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "self.verbose:threads(\"removing \",routine)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "if routine == self.current then\r\n\t\treturn self.running:remove(routine, self.currentkey)\r\n\telseif routine == self.currentkey then\r\n\t\tself.currentkey = self.running:previous(routine)\r\n\t\treturn self.running:remove(routine, self.currentkey)\r\n\telseif self.running:remove(routine) then\r\n\t\treturn routine\r\n\telse\r\n\t\treturn self.sleeping:remove(routine)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "self.currentkey = self.running:previous(routine)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function suspend(self, time, ...)\r\n\tlocal routine = self:checkcurrent()\r\n\tself.running:remove(routine, self.currentkey)\r\n\tif time then self.sleeping:enqueue(routine, self:time() + time) end           --[[VERBOSE]] self.verbose:threads(routine,\" waiting for \",time,\" seconds\")\r\n\treturn coroutine.yield(...)\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local routine = self:checkcurrent()",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "self.running:remove(routine, self.currentkey)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "if time then self.sleeping:enqueue(routine, self:time() + time) end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "self.sleeping:enqueue(routine, self:time() + time)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "self.verbose:threads(routine,\" waiting for \",time,\" seconds\")",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function resume(self, routine, ...)                                             --[[VERBOSE]] self.verbose:threads(\"resuming \",routine)\r\n\tlocal current = self:checkcurrent()\r\n\tif not self:register(routine, current) then\r\n\t\tself:register(self:remove(routine), current)\r\n\tend                        \r\n\treturn coroutine.yield(...)\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "self.verbose:threads(\"resuming \",routine)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "local current = self:checkcurrent()",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "if not self:register(routine, current) then\r\n\t\tself:register(self:remove(routine), current)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "self:register(self:remove(routine), current)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function start(self, func, ...)\r\n\tself.running:insert(coroutine.create(func), self:checkcurrent())              --[[VERBOSE]] self.verbose:threads(\"starting \",self.running[self.current])\r\n\treturn coroutine.yield(...)\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "self.running:insert(coroutine.create(func), self:checkcurrent())",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "self.verbose:threads(\"starting \",self.running[self.current])",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function step(self, ...)                                                        --[[VERBOSE]] local verbose = self.verbose; verbose:scheduler(true, \"performing scheduling step\")\r\n\tlocal woken = self:wakeupall()\r\n\tlocal resumed = self:resumeall(nil, ...)                                      --[[VERBOSE]] verbose:scheduler(false, \"scheduling step performed\")\r\n\treturn woken or resumed\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "verbose:scheduler(true, \"performing scheduling step\")",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "local woken = self:wakeupall()",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "local resumed = self:resumeall(nil, ...)",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "verbose:scheduler(false, \"scheduling step performed\")",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function run(self, ...)                                                         --[[VERBOSE]] local verbose = self.verbose; verbose:scheduler(true, \"running scheduler\")\r\n\tif self:step(...) and not self.halted then\r\n\t\tlocal running = self.running\r\n\t\tif running:empty() then\r\n\t\t\tlocal sleeping = self.sleeping\r\n\t\t\tlocal nextwake = sleeping:head()\r\n\t\t\tif nextwake then nextwake = sleeping:wakeup(nextwake) end                 --[[VERBOSE]] verbose:scheduler(true, \"idle until \",nextwake)\r\n\t\t\tself:idle(nextwake)                                                       --[[VERBOSE]] verbose:scheduler(false, \"resuming scheduling\")\r\n\t\tend                                                                         --[[VERBOSE]] verbose:scheduler(false, \"reissue scheduling\")\r\n\t\treturn self:run()\r\n\telse                                                                          --[[VERBOSE]] verbose:scheduler(false, \"no thread pending scheduling or scheduler halted\")\r\n\t\tself.halted = nil\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "verbose:scheduler(true, \"running scheduler\")",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "if self:step(...) and not self.halted then\r\n\t\tlocal running = self.running\r\n\t\tif running:empty() then\r\n\t\t\tlocal sleeping = self.sleeping\r\n\t\t\tlocal nextwake = sleeping:head()\r\n\t\t\tif nextwake then nextwake = sleeping:wakeup(nextwake) end                 --[[VERBOSE]] verbose:scheduler(true, \"idle until \",nextwake)\r\n\t\t\tself:idle(nextwake)                                                       --[[VERBOSE]] verbose:scheduler(false, \"resuming scheduling\")\r\n\t\tend                                                                         --[[VERBOSE]] verbose:scheduler(false, \"reissue scheduling\")\r\n\t\treturn self:run()\r\n\telse                                                                          --[[VERBOSE]] verbose:scheduler(false, \"no thread pending scheduling or scheduler halted\")\r\n\t\tself.halted = nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "if running:empty() then\r\n\t\t\tlocal sleeping = self.sleeping\r\n\t\t\tlocal nextwake = sleeping:head()\r\n\t\t\tif nextwake then nextwake = sleeping:wakeup(nextwake) end                 --[[VERBOSE]] verbose:scheduler(true, \"idle until \",nextwake)\r\n\t\t\tself:idle(nextwake)                                                       --[[VERBOSE]] verbose:scheduler(false, \"resuming scheduling\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "local nextwake = sleeping:head()",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "if nextwake then nextwake = sleeping:wakeup(nextwake) end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "nextwake = sleeping:wakeup(nextwake)",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "verbose:scheduler(true, \"idle until \",nextwake)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "self:idle(nextwake)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "verbose:scheduler(false, \"resuming scheduling\")",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "verbose:scheduler(false, \"reissue scheduling\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "verbose:scheduler(false, \"no thread pending scheduling or scheduler halted\")",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "self.halted = nil",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function halt(self)\r\n  self.halted = true\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "self.halted = true",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function verbose.labels:retrieve(value)\r\n--[[VERBOSE]] \tif type(value) == \"thread\" then\r\n--[[VERBOSE]] \t\tlocal id = self.current\r\n--[[VERBOSE]] \t\tlocal label = {}\r\n--[[VERBOSE]] \t\trepeat\r\n--[[VERBOSE]] \t\t\tlabel[#label+1] = LabelStart + (id % 26)\r\n--[[VERBOSE]] \t\t\tid = math.floor(id / 26)\r\n--[[VERBOSE]] \t\tuntil id <= 0\r\n--[[VERBOSE]] \t\tself.current = self.current + 1\r\n--[[VERBOSE]] \t\tvalue = string.char(unpack(label))\r\n--[[VERBOSE]] \tend\r\n--[[VERBOSE]] \treturn value\r\n--[[VERBOSE]] end",
    "type": "function"
  }, {
    "id": 153,
    "text": "if type(value) == \"thread\" then\r\n--[[VERBOSE]] \t\tlocal id = self.current\r\n--[[VERBOSE]] \t\tlocal label = {}\r\n--[[VERBOSE]] \t\trepeat\r\n--[[VERBOSE]] \t\t\tlabel[#label+1] = LabelStart + (id % 26)\r\n--[[VERBOSE]] \t\t\tid = math.floor(id / 26)\r\n--[[VERBOSE]] \t\tuntil id <= 0\r\n--[[VERBOSE]] \t\tself.current = self.current + 1\r\n--[[VERBOSE]] \t\tvalue = string.char(unpack(label))\r\n--[[VERBOSE]] \tend",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "local id = self.current",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "local label = {}",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "repeat\r\n--[[VERBOSE]] \t\t\tlabel[#label+1] = LabelStart + (id % 26)\r\n--[[VERBOSE]] \t\t\tid = math.floor(id / 26)\r\n--[[VERBOSE]] \t\tuntil id <= 0",
    "type": "statement:repeat"
  }, {
    "id": 157,
    "text": "label[#label+1] = LabelStart + (id % 26)",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "id = math.floor(id / 26)",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "self.current = self.current + 1",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "value = string.char(unpack(label))",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function verbose.custom:threads(...)\r\n--[[VERBOSE]] \tlocal viewer  = self.viewer\r\n--[[VERBOSE]] \tlocal output  = self.viewer.output\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \tfor i = 1, select(\"#\", ...) do\r\n--[[VERBOSE]] \t\tlocal value = select(i, ...)\r\n--[[VERBOSE]] \t\tif type(value) == \"string\" then\r\n--[[VERBOSE]] \t\t\toutput:write(value)\r\n--[[VERBOSE]] \t\telseif type(value) == \"thread\" then\r\n--[[VERBOSE]] \t\t\toutput:write(\"thread \", self.labels[value], \"[\", tostring(value):match(\"%l+: (.+)\"), \"]\")\r\n--[[VERBOSE]] \t\telse\r\n--[[VERBOSE]] \t\t\tviewer:write(value)\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \tend\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \tlocal scheduler = rawget(self, \"schedulerdetails\")\r\n--[[VERBOSE]] \tif scheduler then\r\n--[[VERBOSE]] \t\tlocal newline = \"\\n\"..viewer.prefix..viewer.indentation\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Current: \")\r\n--[[VERBOSE]] \t\toutput:write(tostring(self.labels[scheduler.current]))\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Running:\")\r\n--[[VERBOSE]] \t\tfor current in scheduler.running:sequence() do\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Sleeping:\")\r\n--[[VERBOSE]] \t\tfor current in scheduler.sleeping:sequence() do\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \tend\r\n--[[VERBOSE]] end",
    "type": "function"
  }, {
    "id": 163,
    "text": "local viewer  = self.viewer",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "local output  = self.viewer.output",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "for i = 1, select(\"#\", ...) do\r\n--[[VERBOSE]] \t\tlocal value = select(i, ...)\r\n--[[VERBOSE]] \t\tif type(value) == \"string\" then\r\n--[[VERBOSE]] \t\t\toutput:write(value)\r\n--[[VERBOSE]] \t\telseif type(value) == \"thread\" then\r\n--[[VERBOSE]] \t\t\toutput:write(\"thread \", self.labels[value], \"[\", tostring(value):match(\"%l+: (.+)\"), \"]\")\r\n--[[VERBOSE]] \t\telse\r\n--[[VERBOSE]] \t\t\tviewer:write(value)\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \tend",
    "type": "statement:numericfor"
  }, {
    "id": 166,
    "text": "local value = select(i, ...)",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "if type(value) == \"string\" then\r\n--[[VERBOSE]] \t\t\toutput:write(value)\r\n--[[VERBOSE]] \t\telseif type(value) == \"thread\" then\r\n--[[VERBOSE]] \t\t\toutput:write(\"thread \", self.labels[value], \"[\", tostring(value):match(\"%l+: (.+)\"), \"]\")\r\n--[[VERBOSE]] \t\telse\r\n--[[VERBOSE]] \t\t\tviewer:write(value)\r\n--[[VERBOSE]] \t\tend",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "output:write(value)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "output:write(\"thread \", self.labels[value], \"[\", tostring(value):match(\"%l+: (.+)\"), \"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "viewer:write(value)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "local scheduler = rawget(self, \"schedulerdetails\")",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "if scheduler then\r\n--[[VERBOSE]] \t\tlocal newline = \"\\n\"..viewer.prefix..viewer.indentation\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Current: \")\r\n--[[VERBOSE]] \t\toutput:write(tostring(self.labels[scheduler.current]))\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Running:\")\r\n--[[VERBOSE]] \t\tfor current in scheduler.running:sequence() do\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Sleeping:\")\r\n--[[VERBOSE]] \t\tfor current in scheduler.sleeping:sequence() do\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \tend",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "local newline = \"\\n\"..viewer.prefix..viewer.indentation",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "output:write(newline)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "output:write(\"Current: \")",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "output:write(tostring(self.labels[scheduler.current]))",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "output:write(\"Running:\")",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "for current in scheduler.running:sequence() do\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 179,
    "text": "output:write(\" \")",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "output:write(tostring(self.labels[current]))",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "output:write(\"Sleeping:\")",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "for current in scheduler.sleeping:sequence() do\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "function verbose.inspect:debug() self.I:stop(4) end",
    "type": "function"
  }, {
    "id": 185,
    "text": "self.I:stop(4)",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "function container"
  }, {
    "id": 187,
    "text": "function __init(class, self)\r\n\tself = IOScheduler.__init(class, self)\r\n\tself.sockets = CoSocket({ socketapi = luasocket }, self)\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "coroutine",
    "type": "module"
  }, {
    "id": 189,
    "text": "create",
    "type": "global function"
  }, {
    "id": 190,
    "text": "string",
    "type": "module"
  }, {
    "id": 191,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 192,
    "text": "char",
    "type": "global function"
  }, {
    "id": 193,
    "text": "os",
    "type": "module"
  }, {
    "id": 194,
    "text": "difftime",
    "type": "global function"
  }, {
    "id": 195,
    "text": "math",
    "type": "module"
  }, {
    "id": 196,
    "text": "time",
    "type": "global function"
  }, {
    "id": 197,
    "text": "rawnew",
    "type": "global function"
  }, {
    "id": 198,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 199,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 200,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 201,
    "text": "status",
    "type": "global function"
  }, {
    "id": 202,
    "text": "running",
    "type": "global function"
  }, {
    "id": 203,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 204,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 205,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 206,
    "text": "ObjectCache",
    "type": "global function"
  }, {
    "id": 207,
    "text": "module",
    "type": "global function"
  }, {
    "id": 208,
    "text": "trap",
    "type": "global function"
  }, {
    "id": 209,
    "text": "PriorityQueue",
    "type": "global function"
  }, {
    "id": 210,
    "text": "Inspector",
    "type": "global function"
  }, {
    "id": 211,
    "text": "Verbose",
    "type": "global function"
  }, {
    "id": 212,
    "text": "WeakSet",
    "type": "global function"
  }, {
    "id": 213,
    "text": "luapcall",
    "type": "global function"
  }, {
    "id": 214,
    "text": "luaerror",
    "type": "global function"
  }, {
    "id": 215,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 216,
    "text": "require",
    "type": "global function"
  }, {
    "id": 217,
    "text": "type",
    "type": "global function"
  }, {
    "id": 218,
    "text": "select",
    "type": "global function"
  }, {
    "id": 219,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 220,
    "text": "OrderedSet",
    "type": "global function"
  }, {
    "id": 221,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "variable container"
  }, {
    "id": 223,
    "text": "",
    "type": "require container"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "n/a"
  }, {
    "id": 228,
    "text": "",
    "type": "local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "n/a"
  }, {
    "id": 230,
    "text": "",
    "type": "local variable"
  }, {
    "id": 231,
    "text": "",
    "type": "n/a"
  }, {
    "id": 232,
    "text": "",
    "type": "local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "n/a"
  }, {
    "id": 234,
    "text": "",
    "type": "local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "n/a"
  }, {
    "id": 236,
    "text": "",
    "type": "local variable"
  }, {
    "id": 237,
    "text": "",
    "type": "n/a"
  }, {
    "id": 238,
    "text": "",
    "type": "local variable"
  }, {
    "id": 239,
    "text": "",
    "type": "n/a"
  }, {
    "id": 240,
    "text": "",
    "type": "local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "n/a"
  }, {
    "id": 242,
    "text": "",
    "type": "local variable"
  }, {
    "id": 243,
    "text": "",
    "type": "n/a"
  }, {
    "id": 244,
    "text": "",
    "type": "local variable"
  }, {
    "id": 245,
    "text": "",
    "type": "n/a"
  }, {
    "id": 246,
    "text": "",
    "type": "local variable"
  }, {
    "id": 247,
    "text": "",
    "type": "n/a"
  }, {
    "id": 248,
    "text": "",
    "type": "local variable"
  }, {
    "id": 249,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 250,
    "text": "",
    "type": "local variable"
  }, {
    "id": 251,
    "text": "",
    "type": "n/a"
  }, {
    "id": 252,
    "text": "",
    "type": "local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "n/a"
  }, {
    "id": 254,
    "text": "",
    "type": "global variable"
  }, {
    "id": 255,
    "text": "",
    "type": "n/a"
  }, {
    "id": 256,
    "text": "",
    "type": "global variable"
  }, {
    "id": 257,
    "text": "",
    "type": "n/a"
  }, {
    "id": 258,
    "text": "",
    "type": "global variable"
  }, {
    "id": 259,
    "text": "",
    "type": "n/a"
  }, {
    "id": 260,
    "text": "",
    "type": "global variable"
  }, {
    "id": 261,
    "text": "",
    "type": "n/a"
  }, {
    "id": 262,
    "text": "",
    "type": "global variable"
  }, {
    "id": 263,
    "text": "",
    "type": "n/a"
  }, {
    "id": 264,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 265,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 267,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 269,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 271,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 273,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "require local variable"
  } ]
}