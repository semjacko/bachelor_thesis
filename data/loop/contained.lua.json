{
  "_filename": "contained.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/component/contained.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 4,
    "label": "calls",
    "to": 22
  }, {
    "from": 18,
    "label": "calls",
    "to": 20
  }, {
    "from": 18,
    "label": "calls",
    "to": 23
  }, {
    "from": 18,
    "label": "calls",
    "to": 23
  }, {
    "from": 4,
    "label": "calls",
    "to": 24
  }, {
    "from": 4,
    "label": "calls",
    "to": 25
  }, {
    "from": 18,
    "label": "calls",
    "to": 19
  }, {
    "from": 16,
    "label": "calls",
    "to": 19
  }, {
    "from": 4,
    "label": "calls",
    "to": 21
  }, {
    "from": 2,
    "label": "contains",
    "to": 18
  }, {
    "from": 18,
    "label": "declares",
    "to": 4
  }, {
    "from": 18,
    "label": "declares",
    "to": 16
  }, {
    "from": 2,
    "label": "contains",
    "to": 26
  }, {
    "from": 2,
    "label": "contains",
    "to": 27
  }, {
    "from": 26,
    "label": "initializes",
    "to": 28
  }, {
    "from": 28,
    "label": "assigns",
    "to": 29
  }, {
    "from": 26,
    "label": "initializes",
    "to": 30
  }, {
    "from": 30,
    "label": "assigns",
    "to": 31
  }, {
    "from": 26,
    "label": "initializes",
    "to": 32
  }, {
    "from": 32,
    "label": "assigns",
    "to": 33
  }, {
    "from": 26,
    "label": "initializes",
    "to": 34
  }, {
    "from": 34,
    "label": "assigns",
    "to": 35
  }, {
    "from": 26,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 26,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  }, {
    "from": 26,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 26,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 26,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 26,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 26,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 27,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "requires",
    "to": 1
  }, {
    "from": 27,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "requires",
    "to": 3
  }, {
    "from": 52,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cached",
    "type": "module"
  }, {
    "id": 2,
    "text": "contained",
    "type": "module"
  }, {
    "id": 3,
    "text": "wrapped",
    "type": "module"
  }, {
    "id": 4,
    "text": "function BaseTemplate:__new(...)\r\n\tlocal state = { __factory = self }\r\n\tlocal comp = self.__component or self[1]\r\n\tif comp then\r\n\t\tcomp = comp(...)\r\n\t\tstate.__component = comp\r\n\telse\r\n\t\tcomp = ... or {}\r\n\tend\r\n\tfor port, class in pairs(self) do\r\n\t\tif type(port) == \"string\" and port:match(\"^%a[%w_]*$\") then\r\n\t\t\tstate[port] = class(comp and comp[port], comp)\r\n\t\tend\r\n\tend\r\n\treturn state\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local state = { __factory = self }",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local comp = self.__component or self[1]",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if comp then\r\n\t\tcomp = comp(...)\r\n\t\tstate.__component = comp\r\n\telse\r\n\t\tcomp = ... or {}\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "comp = comp(...)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "state.__component = comp",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "comp = ... or {}",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "for port, class in pairs(self) do\r\n\t\tif type(port) == \"string\" and port:match(\"^%a[%w_]*$\") then\r\n\t\t\tstate[port] = class(comp and comp[port], comp)\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "if type(port) == \"string\" and port:match(\"^%a[%w_]*$\") then\r\n\t\t\tstate[port] = class(comp and comp[port], comp)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "state[port] = class(comp and comp[port], comp)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function Template(template, ...)\r\n\treturn oo.class(template, BaseTemplate, ...)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "",
    "type": "function container"
  }, {
    "id": 19,
    "text": "function class(class, ...)\r\n\tif select(\"#\", ...) > 1\r\n\t\tthen return base.rawnew(table.copy(MultipleClass, {...}), initclass(class))\r\n\t\telse return base.class(class, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "module",
    "type": "global function"
  }, {
    "id": 21,
    "text": "comp",
    "type": "global function"
  }, {
    "id": 22,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 23,
    "text": "require",
    "type": "global function"
  }, {
    "id": 24,
    "text": "type",
    "type": "global function"
  }, {
    "id": 25,
    "text": "class",
    "type": "global function"
  }, {
    "id": 26,
    "text": "",
    "type": "variable container"
  }, {
    "id": 27,
    "text": "",
    "type": "require container"
  }, {
    "id": 28,
    "text": "",
    "type": "local variable"
  }, {
    "id": 29,
    "text": "",
    "type": "n/a"
  }, {
    "id": 30,
    "text": "",
    "type": "local variable"
  }, {
    "id": 31,
    "text": "",
    "type": "n/a"
  }, {
    "id": 32,
    "text": "",
    "type": "local variable"
  }, {
    "id": 33,
    "text": "",
    "type": "n/a"
  }, {
    "id": 34,
    "text": "",
    "type": "global variable"
  }, {
    "id": 35,
    "text": "",
    "type": "n/a"
  }, {
    "id": 36,
    "text": "",
    "type": "global variable"
  }, {
    "id": 37,
    "text": "",
    "type": "n/a"
  }, {
    "id": 38,
    "text": "",
    "type": "global variable"
  }, {
    "id": 39,
    "text": "",
    "type": "n/a"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  }, {
    "id": 41,
    "text": "",
    "type": "n/a"
  }, {
    "id": 42,
    "text": "",
    "type": "global variable"
  }, {
    "id": 43,
    "text": "",
    "type": "n/a"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "global variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "global variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "require local variable"
  } ]
}