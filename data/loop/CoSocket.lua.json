{
  "_filename": "CoSocket.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/thread/CoSocket.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 26,
    "label": "has",
    "to": 34
  }, {
    "from": 26,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 26,
    "label": "has",
    "to": 37
  }, {
    "from": 26,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 26,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 41
  }, {
    "from": 26,
    "label": "has",
    "to": 42
  }, {
    "from": 26,
    "label": "has",
    "to": 43
  }, {
    "from": 26,
    "label": "has",
    "to": 44
  }, {
    "from": 26,
    "label": "has",
    "to": 45
  }, {
    "from": 26,
    "label": "has",
    "to": 46
  }, {
    "from": 26,
    "label": "has",
    "to": 47
  }, {
    "from": 26,
    "label": "has",
    "to": 48
  }, {
    "from": 26,
    "label": "has",
    "to": 49
  }, {
    "from": 26,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 26,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 55
  }, {
    "from": 26,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 27
  }, {
    "from": 57,
    "label": "has",
    "to": 28
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 32
  }, {
    "from": 57,
    "label": "has",
    "to": 33
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 36
  }, {
    "from": 57,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 42
  }, {
    "from": 63,
    "label": "has",
    "to": 43
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 63,
    "label": "has",
    "to": 44
  }, {
    "from": 63,
    "label": "has",
    "to": 45
  }, {
    "from": 63,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 63,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 51
  }, {
    "from": 78,
    "label": "has",
    "to": 52
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 44
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 72
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 63,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 53
  }, {
    "from": 96,
    "label": "has",
    "to": 54
  }, {
    "from": 63,
    "label": "has",
    "to": 49
  }, {
    "from": 63,
    "label": "has",
    "to": 97
  }, {
    "from": 57,
    "label": "has",
    "to": 10
  }, {
    "from": 57,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 18
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 99,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 99,
    "label": "has",
    "to": 107
  }, {
    "from": 99,
    "label": "has",
    "to": 108
  }, {
    "from": 99,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 65
  }, {
    "from": 109,
    "label": "has",
    "to": 42
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 74
  }, {
    "from": 115,
    "label": "has",
    "to": 75
  }, {
    "from": 115,
    "label": "has",
    "to": 76
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 117,
    "label": "has",
    "to": 79
  }, {
    "from": 117,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 113
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 94
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 109,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 53
  }, {
    "from": 96,
    "label": "has",
    "to": 54
  }, {
    "from": 109,
    "label": "has",
    "to": 127
  }, {
    "from": 109,
    "label": "has",
    "to": 128
  }, {
    "from": 109,
    "label": "has",
    "to": 129
  }, {
    "from": 99,
    "label": "has",
    "to": 10
  }, {
    "from": 99,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 32
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 131,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 36
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 138,
    "label": "has",
    "to": 144
  }, {
    "from": 135,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 139
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 141
  }, {
    "from": 146,
    "label": "has",
    "to": 107
  }, {
    "from": 146,
    "label": "has",
    "to": 142
  }, {
    "from": 146,
    "label": "has",
    "to": 143
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 135,
    "label": "has",
    "to": 148
  }, {
    "from": 135,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 65
  }, {
    "from": 149,
    "label": "has",
    "to": 42
  }, {
    "from": 149,
    "label": "has",
    "to": 43
  }, {
    "from": 149,
    "label": "has",
    "to": 111
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 46
  }, {
    "from": 152,
    "label": "has",
    "to": 44
  }, {
    "from": 152,
    "label": "has",
    "to": 45
  }, {
    "from": 149,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 113
  }, {
    "from": 154,
    "label": "has",
    "to": 114
  }, {
    "from": 149,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 67
  }, {
    "from": 156,
    "label": "has",
    "to": 68
  }, {
    "from": 149,
    "label": "has",
    "to": 74
  }, {
    "from": 149,
    "label": "has",
    "to": 75
  }, {
    "from": 149,
    "label": "has",
    "to": 76
  }, {
    "from": 149,
    "label": "has",
    "to": 157
  }, {
    "from": 149,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 94
  }, {
    "from": 159,
    "label": "has",
    "to": 54
  }, {
    "from": 159,
    "label": "has",
    "to": 79
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 149,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 49
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 51
  }, {
    "from": 163,
    "label": "has",
    "to": 52
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 163,
    "label": "has",
    "to": 166
  }, {
    "from": 149,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 127
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 118
  }, {
    "from": 169,
    "label": "has",
    "to": 119
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 149,
    "label": "has",
    "to": 173
  }, {
    "from": 173,
    "label": "has",
    "to": 164
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 173,
    "label": "has",
    "to": 166
  }, {
    "from": 149,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 170
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 172
  }, {
    "from": 135,
    "label": "has",
    "to": 179
  }, {
    "from": 135,
    "label": "has",
    "to": 180
  }, {
    "from": 131,
    "label": "has",
    "to": 10
  }, {
    "from": 131,
    "label": "has",
    "to": 10
  }, {
    "from": 131,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 10
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 185,
    "label": "has",
    "to": 10
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 10
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 10
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 10
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 23
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 193,
    "label": "has",
    "to": 10
  }, {
    "from": 193,
    "label": "has",
    "to": 197
  }, {
    "from": 131,
    "label": "calls",
    "to": 203
  }, {
    "from": 131,
    "label": "calls",
    "to": 203
  }, {
    "from": 131,
    "label": "calls",
    "to": 203
  }, {
    "from": 131,
    "label": "calls",
    "to": 203
  }, {
    "from": 131,
    "label": "calls",
    "to": 203
  }, {
    "from": 131,
    "label": "calls",
    "to": 203
  }, {
    "from": 131,
    "label": "calls",
    "to": 203
  }, {
    "from": 131,
    "label": "calls",
    "to": 203
  }, {
    "from": 26,
    "label": "calls",
    "to": 202
  }, {
    "from": 26,
    "label": "calls",
    "to": 202
  }, {
    "from": 57,
    "label": "calls",
    "to": 202
  }, {
    "from": 57,
    "label": "calls",
    "to": 202
  }, {
    "from": 99,
    "label": "calls",
    "to": 202
  }, {
    "from": 99,
    "label": "calls",
    "to": 202
  }, {
    "from": 131,
    "label": "calls",
    "to": 202
  }, {
    "from": 131,
    "label": "calls",
    "to": 202
  }, {
    "from": 182,
    "label": "calls",
    "to": 202
  }, {
    "from": 131,
    "label": "calls",
    "to": 204
  }, {
    "from": 57,
    "label": "calls",
    "to": 200
  }, {
    "from": 99,
    "label": "calls",
    "to": 200
  }, {
    "from": 131,
    "label": "calls",
    "to": 200
  }, {
    "from": 131,
    "label": "calls",
    "to": 206
  }, {
    "from": 131,
    "label": "calls",
    "to": 206
  }, {
    "from": 187,
    "label": "calls",
    "to": 207
  }, {
    "from": 185,
    "label": "calls",
    "to": 211
  }, {
    "from": 198,
    "label": "calls",
    "to": 212
  }, {
    "from": 198,
    "label": "calls",
    "to": 212
  }, {
    "from": 198,
    "label": "calls",
    "to": 212
  }, {
    "from": 198,
    "label": "calls",
    "to": 212
  }, {
    "from": 198,
    "label": "calls",
    "to": 205
  }, {
    "from": 4,
    "label": "calls",
    "to": 201
  }, {
    "from": 57,
    "label": "calls",
    "to": 213
  }, {
    "from": 57,
    "label": "calls",
    "to": 213
  }, {
    "from": 189,
    "label": "calls",
    "to": 209
  }, {
    "from": 191,
    "label": "calls",
    "to": 210
  }, {
    "from": 193,
    "label": "calls",
    "to": 208
  }, {
    "from": 3,
    "label": "contains",
    "to": 198
  }, {
    "from": 198,
    "label": "declares",
    "to": 4
  }, {
    "from": 198,
    "label": "declares",
    "to": 12
  }, {
    "from": 198,
    "label": "declares",
    "to": 14
  }, {
    "from": 198,
    "label": "declares",
    "to": 17
  }, {
    "from": 198,
    "label": "declares",
    "to": 26
  }, {
    "from": 198,
    "label": "declares",
    "to": 57
  }, {
    "from": 198,
    "label": "declares",
    "to": 99
  }, {
    "from": 198,
    "label": "declares",
    "to": 131
  }, {
    "from": 198,
    "label": "declares",
    "to": 182
  }, {
    "from": 198,
    "label": "declares",
    "to": 185
  }, {
    "from": 198,
    "label": "declares",
    "to": 187
  }, {
    "from": 198,
    "label": "declares",
    "to": 189
  }, {
    "from": 198,
    "label": "declares",
    "to": 191
  }, {
    "from": 198,
    "label": "declares",
    "to": 193
  }, {
    "from": 3,
    "label": "contains",
    "to": 214
  }, {
    "from": 3,
    "label": "contains",
    "to": 215
  }, {
    "from": 214,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 214,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 214,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 214,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 214,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 214,
    "label": "initializes",
    "to": 226
  }, {
    "from": 215,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "requires",
    "to": 228
  }, {
    "from": 215,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "requires",
    "to": 199
  }, {
    "from": 215,
    "label": "initializes",
    "to": 230
  }, {
    "from": 230,
    "label": "requires",
    "to": 1
  }, {
    "from": 215,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "requires",
    "to": 2
  }, {
    "from": 232,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "Wrapper",
    "type": "module"
  }, {
    "id": 3,
    "text": "CoSocket",
    "type": "module"
  }, {
    "id": 4,
    "text": "function __init(class, self, scheduler)\r\n\tself = oo.rawnew(class, self)\r\n\tself.readlocks = {}\r\n\tself.writelocks = {}\r\n\tif not self.scheduler then\r\n\t\tself.scheduler = scheduler\r\n\tend\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "self = oo.rawnew(class, self)",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "self.readlocks = {}",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "self.writelocks = {}",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "if not self.scheduler then\r\n\t\tself.scheduler = scheduler\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "self.scheduler = scheduler",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function __index(self, field)\r\n\treturn _M[field] or self.socketapi[field]\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function wrappedsettimeout(self, timeout)\r\n\tself.timeout = timeout or false\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "self.timeout = timeout or false",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function wrappedconnect(self, host, port)                                 --[[VERBOSE]] local verbose = self.cosocket.scheduler.verbose\r\n\tlocal socket = self.__object                                                  --[[VERBOSE]] verbose:cosocket(true, \"performing blocking connect\")\r\n\tsocket:settimeout(-1)\r\n\tlocal result, errmsg = socket:connect(host, port)\r\n\tsocket:settimeout(0)                                                          --[[VERBOSE]] verbose:cosocket(false, \"blocking connect done\")\r\n\treturn result, errmsg\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local verbose = self.cosocket.scheduler.verbose",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local socket = self.__object",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "verbose:cosocket(true, \"performing blocking connect\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "socket:settimeout(-1)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local result, errmsg = socket:connect(host, port)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "socket:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "verbose:cosocket(false, \"blocking connect done\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function wrappedaccept(self)\r\n\tlocal socket    = self.__object\r\n\tlocal timeout   = self.timeout\r\n\tlocal cosocket  = self.cosocket\r\n\tlocal readlocks = cosocket.readlocks\r\n\tlocal scheduler = cosocket.scheduler                                          --[[VERBOSE]] local verbose = scheduler.verbose\r\n\tlocal current   = scheduler:checkcurrent()                                    --[[VERBOSE]] verbose:cosocket(true, \"performing wrapped accept\")\r\n\r\n\tassert(socket, \"bad argument #1 to `accept' (wrapped socket expected)\")\r\n\tassert(readlocks[socket] == nil, \"attempt to read a socket in use\")\r\n\t\r\n\tlocal conn, errmsg = socket:accept()\r\n\tif conn then                                                                  --[[VERBOSE]] verbose:cosocket(false, \"connection accepted without waiting\")\r\n\t\treturn cosocket:wrap(conn)\r\n\telseif timeout == 0 or errmsg ~= \"timeout\" then                               --[[VERBOSE]] verbose:cosocket(false, \"returning error \",errmsg,\" without waiting\")\r\n\t\treturn nil, errmsg\r\n\tend                                                                           --[[VERBOSE]] verbose:cosocket(true, \"waiting for results\")\r\n\r\n\tlocal sleeping = scheduler.sleeping\r\n\tlocal reading = scheduler.reading\r\n\r\n\t-- subscribing current thread for reading signal\r\n\treading:add(socket, current)                                                  --[[VERBOSE]] verbose:threads(current,\" subscribed for read signal\")\r\n\t\r\n\t-- lock socket for reading and wait for signal until timeout\r\n\treadlocks[socket] = current\r\n\tscheduler:suspend(timeout)                                                    --[[VERBOSE]] verbose:cosocket(false, \"wrapped accept resumed\")\r\n\treadlocks[socket] = nil\r\n\r\n\t-- if thread is still blocked for reading then waiting timed out\r\n\tif reading[socket] == current then\r\n\t\treading:remove(socket)                                                      --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\treturn nil, \"timeout\"                                                       --[[VERBOSE]] , verbose:cosocket(false, \"waiting timed out\")\r\n\telseif timeout then\r\n\t\tsleeping:remove(current)                                                    --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\tend                                                                           --[[VERBOSE]] verbose:cosocket(false, \"returing results after waiting\")\r\n\t\r\n\treturn cosocket:wrap(socket:accept())\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local socket    = self.__object",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local timeout   = self.timeout",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local cosocket  = self.cosocket",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local readlocks = cosocket.readlocks",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local scheduler = cosocket.scheduler",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local verbose = scheduler.verbose",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local current   = scheduler:checkcurrent()",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "verbose:cosocket(true, \"performing wrapped accept\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert(socket, \"bad argument #1 to `accept' (wrapped socket expected)\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert(readlocks[socket] == nil, \"attempt to read a socket in use\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local conn, errmsg = socket:accept()",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if conn then                                                                  --[[VERBOSE]] verbose:cosocket(false, \"connection accepted without waiting\")\r\n\t\treturn cosocket:wrap(conn)\r\n\telseif timeout == 0 or errmsg ~= \"timeout\" then                               --[[VERBOSE]] verbose:cosocket(false, \"returning error \",errmsg,\" without waiting\")\r\n\t\treturn nil, errmsg\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "verbose:cosocket(false, \"connection accepted without waiting\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "verbose:cosocket(false, \"returning error \",errmsg,\" without waiting\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "verbose:cosocket(true, \"waiting for results\")",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local sleeping = scheduler.sleeping",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local reading = scheduler.reading",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "reading:add(socket, current)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "verbose:threads(current,\" subscribed for read signal\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "readlocks[socket] = current",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "scheduler:suspend(timeout)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "verbose:cosocket(false, \"wrapped accept resumed\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "readlocks[socket] = nil",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "if reading[socket] == current then\r\n\t\treading:remove(socket)                                                      --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\treturn nil, \"timeout\"                                                       --[[VERBOSE]] , verbose:cosocket(false, \"waiting timed out\")\r\n\telseif timeout then\r\n\t\tsleeping:remove(current)                                                    --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "reading:remove(socket)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "verbose:threads(current,\" unsubscribed for read signal\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "sleeping:remove(current)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "verbose:threads(current,\" removed from sleeping queue\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "verbose:cosocket(false, \"returing results after waiting\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function wrappedreceive(self, pattern)\r\n\tlocal socket    = self.__object\r\n\tlocal timeout   = self.timeout\r\n\tlocal readlocks = self.cosocket.readlocks\r\n\tlocal scheduler = self.cosocket.scheduler                                     --[[VERBOSE]] local verbose = scheduler.verbose\r\n\tlocal current   = scheduler:checkcurrent()                                    --[[VERBOSE]] verbose:cosocket(true, \"performing wrapped receive\")\r\n\r\n\tassert(socket, \"bad argument #1 to `receive' (wrapped socket expected)\")\r\n\tassert(readlocks[socket] == nil, \"attempt to read a socket in use\")\r\n\r\n\t-- get data already avaliable\r\n\tlocal result, errmsg, partial = socket:receive(pattern)\r\n\r\n\t-- check if job has completed\r\n\tif not result and errmsg == \"timeout\" and timeout ~= 0 then                   --[[VERBOSE]] verbose:cosocket(true, \"waiting for remaining of results\")\r\n\t\tlocal running = scheduler.running\r\n\t\tlocal sleeping = scheduler.sleeping\r\n\t\tlocal reading = scheduler.reading\r\n\t\t\r\n\t\t-- set to be waken at timeout, if specified\r\n\t\tif timeout and timeout > 0 then\r\n\t\t\tsleeping:enqueue(current, scheduler:time() + timeout)                     --[[VERBOSE]] verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")\r\n\t\tend\r\n\t\r\n\t\t-- lock socket to avoid use by other coroutines\r\n\t\treadlocks[socket] = true\r\n\t\r\n\t\t-- block current thread on the socket\r\n\t\treading:add(socket, current)                                                --[[VERBOSE]] verbose:threads(current,\" subscribed for read signal\")\r\n\t\r\n\t\t-- reduce the number of required bytes\r\n\t\tif type(pattern) == \"number\" then\r\n\t\t\tpattern = pattern - #partial                                              --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\tend\r\n\t\t\r\n\t\trepeat\r\n\t\t\t-- stop current thread\r\n\t\t\trunning:remove(current, self.currentkey)                                  --[[VERBOSE]] verbose:threads(current,\" suspended\")\r\n\t\t\tcoroutine.yield()                                                         --[[VERBOSE]] verbose:cosocket(false, \"wrapped receive resumed\")\r\n\t\t\r\n\t\t\t-- check if the socket is ready\r\n\t\t\tif reading[socket] == current then\r\n\t\t\t\treading:remove(socket)                                                  --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\terrmsg = \"timeout\"                                                      --[[VERBOSE]] verbose:cosocket(false, \"wrapped send timed out\")\r\n\t\t\telse                                                                      --[[VERBOSE]] verbose:cosocket \"reading more data from socket\"\r\n\t\t\t\tlocal newdata\r\n\t\t\t\tresult, errmsg, newdata = socket:receive(pattern)\r\n\t\t\t\tif result then                                                          --[[VERBOSE]] verbose:cosocket \"received all requested data\"\r\n\t\t\t\t\tresult, errmsg, partial = partial..result, nil, nil                   --[[VERBOSE]] verbose:cosocket(false, \"returning results after waiting\")\r\n\t\t\t\telse                                                                    --[[VERBOSE]] verbose:cosocket \"received only partial data\"\r\n\t\t\t\t\tpartial = partial..newdata\r\n\t\t\t\t\t\r\n\t\t\t\t\tif errmsg == \"timeout\" then\r\n\t\t\t\t\t\t-- block current thread on the socket for more data\r\n\t\t\t\t\t\treading:add(socket, current)                                        --[[VERBOSE]] verbose:threads(current,\" subscribed for another read signal\")\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- reduce the number of required bytes\r\n\t\t\t\t\t\tif type(pattern) == \"number\" then\r\n\t\t\t\t\t\t\tpattern = pattern - #newdata                                      --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\t\terrmsg = nil                                                        --[[VERBOSE]] else verbose:cosocket(false, \"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tuntil result or errmsg\r\n\t\r\n\t\t-- remove from sleeping queue if it was waken because of data on socket.\r\n\t\tif timeout and timeout > 0 and errmsg ~= \"timeout\" then\r\n\t\t\tsleeping:remove(current)                                                  --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\tend\r\n\t\r\n\t\t-- unlock socket to allow use by other coroutines\r\n\t\treadlocks[socket] = nil                                                     --[[VERBOSE]] else verbose:cosocket(false, \"returning results without waiting\")\r\n\tend\r\n\t\r\n\treturn result, errmsg, partial\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local readlocks = self.cosocket.readlocks",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local scheduler = self.cosocket.scheduler",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "verbose:cosocket(true, \"performing wrapped receive\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert(socket, \"bad argument #1 to `receive' (wrapped socket expected)\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "local result, errmsg, partial = socket:receive(pattern)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if not result and errmsg == \"timeout\" and timeout ~= 0 then                   --[[VERBOSE]] verbose:cosocket(true, \"waiting for remaining of results\")\r\n\t\tlocal running = scheduler.running\r\n\t\tlocal sleeping = scheduler.sleeping\r\n\t\tlocal reading = scheduler.reading\r\n\t\t\r\n\t\t-- set to be waken at timeout, if specified\r\n\t\tif timeout and timeout > 0 then\r\n\t\t\tsleeping:enqueue(current, scheduler:time() + timeout)                     --[[VERBOSE]] verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")\r\n\t\tend\r\n\t\r\n\t\t-- lock socket to avoid use by other coroutines\r\n\t\treadlocks[socket] = true\r\n\t\r\n\t\t-- block current thread on the socket\r\n\t\treading:add(socket, current)                                                --[[VERBOSE]] verbose:threads(current,\" subscribed for read signal\")\r\n\t\r\n\t\t-- reduce the number of required bytes\r\n\t\tif type(pattern) == \"number\" then\r\n\t\t\tpattern = pattern - #partial                                              --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\tend\r\n\t\t\r\n\t\trepeat\r\n\t\t\t-- stop current thread\r\n\t\t\trunning:remove(current, self.currentkey)                                  --[[VERBOSE]] verbose:threads(current,\" suspended\")\r\n\t\t\tcoroutine.yield()                                                         --[[VERBOSE]] verbose:cosocket(false, \"wrapped receive resumed\")\r\n\t\t\r\n\t\t\t-- check if the socket is ready\r\n\t\t\tif reading[socket] == current then\r\n\t\t\t\treading:remove(socket)                                                  --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\terrmsg = \"timeout\"                                                      --[[VERBOSE]] verbose:cosocket(false, \"wrapped send timed out\")\r\n\t\t\telse                                                                      --[[VERBOSE]] verbose:cosocket \"reading more data from socket\"\r\n\t\t\t\tlocal newdata\r\n\t\t\t\tresult, errmsg, newdata = socket:receive(pattern)\r\n\t\t\t\tif result then                                                          --[[VERBOSE]] verbose:cosocket \"received all requested data\"\r\n\t\t\t\t\tresult, errmsg, partial = partial..result, nil, nil                   --[[VERBOSE]] verbose:cosocket(false, \"returning results after waiting\")\r\n\t\t\t\telse                                                                    --[[VERBOSE]] verbose:cosocket \"received only partial data\"\r\n\t\t\t\t\tpartial = partial..newdata\r\n\t\t\t\t\t\r\n\t\t\t\t\tif errmsg == \"timeout\" then\r\n\t\t\t\t\t\t-- block current thread on the socket for more data\r\n\t\t\t\t\t\treading:add(socket, current)                                        --[[VERBOSE]] verbose:threads(current,\" subscribed for another read signal\")\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- reduce the number of required bytes\r\n\t\t\t\t\t\tif type(pattern) == \"number\" then\r\n\t\t\t\t\t\t\tpattern = pattern - #newdata                                      --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\t\terrmsg = nil                                                        --[[VERBOSE]] else verbose:cosocket(false, \"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tuntil result or errmsg\r\n\t\r\n\t\t-- remove from sleeping queue if it was waken because of data on socket.\r\n\t\tif timeout and timeout > 0 and errmsg ~= \"timeout\" then\r\n\t\t\tsleeping:remove(current)                                                  --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\tend\r\n\t\r\n\t\t-- unlock socket to allow use by other coroutines\r\n\t\treadlocks[socket] = nil                                                     --[[VERBOSE]] else verbose:cosocket(false, \"returning results without waiting\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "verbose:cosocket(true, \"waiting for remaining of results\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local running = scheduler.running",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if timeout and timeout > 0 then\r\n\t\t\tsleeping:enqueue(current, scheduler:time() + timeout)                     --[[VERBOSE]] verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "sleeping:enqueue(current, scheduler:time() + timeout)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "readlocks[socket] = true",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if type(pattern) == \"number\" then\r\n\t\t\tpattern = pattern - #partial                                              --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "pattern = pattern - #partial",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "verbose:cosocket(\"amount of required bytes reduced to \",pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "repeat\r\n\t\t\t-- stop current thread\r\n\t\t\trunning:remove(current, self.currentkey)                                  --[[VERBOSE]] verbose:threads(current,\" suspended\")\r\n\t\t\tcoroutine.yield()                                                         --[[VERBOSE]] verbose:cosocket(false, \"wrapped receive resumed\")\r\n\t\t\r\n\t\t\t-- check if the socket is ready\r\n\t\t\tif reading[socket] == current then\r\n\t\t\t\treading:remove(socket)                                                  --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\terrmsg = \"timeout\"                                                      --[[VERBOSE]] verbose:cosocket(false, \"wrapped send timed out\")\r\n\t\t\telse                                                                      --[[VERBOSE]] verbose:cosocket \"reading more data from socket\"\r\n\t\t\t\tlocal newdata\r\n\t\t\t\tresult, errmsg, newdata = socket:receive(pattern)\r\n\t\t\t\tif result then                                                          --[[VERBOSE]] verbose:cosocket \"received all requested data\"\r\n\t\t\t\t\tresult, errmsg, partial = partial..result, nil, nil                   --[[VERBOSE]] verbose:cosocket(false, \"returning results after waiting\")\r\n\t\t\t\telse                                                                    --[[VERBOSE]] verbose:cosocket \"received only partial data\"\r\n\t\t\t\t\tpartial = partial..newdata\r\n\t\t\t\t\t\r\n\t\t\t\t\tif errmsg == \"timeout\" then\r\n\t\t\t\t\t\t-- block current thread on the socket for more data\r\n\t\t\t\t\t\treading:add(socket, current)                                        --[[VERBOSE]] verbose:threads(current,\" subscribed for another read signal\")\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- reduce the number of required bytes\r\n\t\t\t\t\t\tif type(pattern) == \"number\" then\r\n\t\t\t\t\t\t\tpattern = pattern - #newdata                                      --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\t\terrmsg = nil                                                        --[[VERBOSE]] else verbose:cosocket(false, \"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tuntil result or errmsg",
    "type": "statement:repeat"
  }, {
    "id": 74,
    "text": "running:remove(current, self.currentkey)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "verbose:threads(current,\" suspended\")",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "coroutine.yield()",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "verbose:cosocket(false, \"wrapped receive resumed\")",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "if reading[socket] == current then\r\n\t\t\t\treading:remove(socket)                                                  --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\terrmsg = \"timeout\"                                                      --[[VERBOSE]] verbose:cosocket(false, \"wrapped send timed out\")\r\n\t\t\telse                                                                      --[[VERBOSE]] verbose:cosocket \"reading more data from socket\"\r\n\t\t\t\tlocal newdata\r\n\t\t\t\tresult, errmsg, newdata = socket:receive(pattern)\r\n\t\t\t\tif result then                                                          --[[VERBOSE]] verbose:cosocket \"received all requested data\"\r\n\t\t\t\t\tresult, errmsg, partial = partial..result, nil, nil                   --[[VERBOSE]] verbose:cosocket(false, \"returning results after waiting\")\r\n\t\t\t\telse                                                                    --[[VERBOSE]] verbose:cosocket \"received only partial data\"\r\n\t\t\t\t\tpartial = partial..newdata\r\n\t\t\t\t\t\r\n\t\t\t\t\tif errmsg == \"timeout\" then\r\n\t\t\t\t\t\t-- block current thread on the socket for more data\r\n\t\t\t\t\t\treading:add(socket, current)                                        --[[VERBOSE]] verbose:threads(current,\" subscribed for another read signal\")\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- reduce the number of required bytes\r\n\t\t\t\t\t\tif type(pattern) == \"number\" then\r\n\t\t\t\t\t\t\tpattern = pattern - #newdata                                      --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\t\terrmsg = nil                                                        --[[VERBOSE]] else verbose:cosocket(false, \"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "errmsg = \"timeout\"",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "verbose:cosocket(false, \"wrapped send timed out\")",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "verbose:cosocket \"reading more data from socket\"",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "local newdata",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "result, errmsg, newdata = socket:receive(pattern)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "if result then                                                          --[[VERBOSE]] verbose:cosocket \"received all requested data\"\r\n\t\t\t\t\tresult, errmsg, partial = partial..result, nil, nil                   --[[VERBOSE]] verbose:cosocket(false, \"returning results after waiting\")\r\n\t\t\t\telse                                                                    --[[VERBOSE]] verbose:cosocket \"received only partial data\"\r\n\t\t\t\t\tpartial = partial..newdata\r\n\t\t\t\t\t\r\n\t\t\t\t\tif errmsg == \"timeout\" then\r\n\t\t\t\t\t\t-- block current thread on the socket for more data\r\n\t\t\t\t\t\treading:add(socket, current)                                        --[[VERBOSE]] verbose:threads(current,\" subscribed for another read signal\")\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- reduce the number of required bytes\r\n\t\t\t\t\t\tif type(pattern) == \"number\" then\r\n\t\t\t\t\t\t\tpattern = pattern - #newdata                                      --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\t\terrmsg = nil                                                        --[[VERBOSE]] else verbose:cosocket(false, \"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "verbose:cosocket \"received all requested data\"",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "result, errmsg, partial = partial..result, nil, nil",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "verbose:cosocket(false, \"returning results after waiting\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "verbose:cosocket \"received only partial data\"",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "partial = partial..newdata",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "if errmsg == \"timeout\" then\r\n\t\t\t\t\t\t-- block current thread on the socket for more data\r\n\t\t\t\t\t\treading:add(socket, current)                                        --[[VERBOSE]] verbose:threads(current,\" subscribed for another read signal\")\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- reduce the number of required bytes\r\n\t\t\t\t\t\tif type(pattern) == \"number\" then\r\n\t\t\t\t\t\t\tpattern = pattern - #newdata                                      --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\t\terrmsg = nil                                                        --[[VERBOSE]] else verbose:cosocket(false, \"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "verbose:threads(current,\" subscribed for another read signal\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "if type(pattern) == \"number\" then\r\n\t\t\t\t\t\t\tpattern = pattern - #newdata                                      --[[VERBOSE]] verbose:cosocket(\"amount of required bytes reduced to \",pattern)\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "pattern = pattern - #newdata",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "errmsg = nil",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "verbose:cosocket(false, \"returning error \",errmsg,\" after waiting\")",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "if timeout and timeout > 0 and errmsg ~= \"timeout\" then\r\n\t\t\tsleeping:remove(current)                                                  --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "verbose:cosocket(false, \"returning results without waiting\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "local function wrappedsend(self, data, i, j)                                    --[[VERBOSE]] local verbose = self.cosocket.scheduler.verbose\r\n\tlocal socket     = self.__object                                              --[[VERBOSE]] verbose:cosocket(true, \"performing wrapped send\")\r\n\tlocal timeout    = self.timeout\r\n\tlocal writelocks = self.cosocket.writelocks\r\n\tlocal scheduler  = self.cosocket.scheduler\r\n\tlocal current    = scheduler:checkcurrent()\r\n\r\n\tassert(socket, \"bad argument #1 to `send' (wrapped socket expected)\")\r\n\tassert(writelocks[socket] == nil, \"attempt to write a socket in use\")\r\n\r\n\t-- fill buffer space already avaliable\r\n\tlocal sent, errmsg, lastbyte = socket:send(data, i, j)\r\n\r\n\t-- check if job has completed\r\n\tif not sent and errmsg == \"timeout\" and timeout ~= 0 then                     --[[VERBOSE]] verbose:cosocket(true, \"waiting to send remaining data\")\r\n\t\tlocal running = scheduler.running\r\n\t\tlocal sleeping = scheduler.sleeping\r\n\t\tlocal writing = scheduler.writing\r\n\r\n\t\t-- set to be waken at timeout, if specified\r\n\t\tif timeout and timeout > 0 then\r\n\t\t\tsleeping:enqueue(current, scheduler:time() + timeout)                     --[[VERBOSE]] verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")\r\n\t\tend\r\n\t\r\n\t\t-- lock socket to avoid use by other coroutines\r\n\t\twritelocks[socket] = true\r\n\t\r\n\t\t-- block current thread on the socket\r\n\t\twriting:add(socket, current)                                                --[[VERBOSE]] verbose:threads(current,\" subscribed for write signal\")\r\n\t\r\n\t\trepeat\r\n\t\t\t-- stop current thread\r\n\t\t\trunning:remove(current, self.currentkey)                                  --[[VERBOSE]] verbose:threads(current,\" suspended\")\r\n\t\t\tcoroutine.yield()                                                         --[[VERBOSE]] verbose:cosocket \"wrapped send resumed\"\r\n\t\t\r\n\t\t\t-- check if the socket is ready\r\n\t\t\tif writing[socket] == current then\r\n\t\t\t\twriting:remove(socket)                                                  --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\terrmsg = \"timeout\"                                                      --[[VERBOSE]] verbose:cosocket \"wrapped send timed out\"\r\n\t\t\telse                                                                      --[[VERBOSE]] verbose:cosocket \"writing remaining data into socket\"\r\n\t\t\t\tsent, errmsg, lastbyte = socket:send(data, lastbyte+1, j)\r\n\t\t\t\tif not sent and errmsg == \"timeout\" then\r\n\t\t\t\t\t-- block current thread on the socket to write data\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for another write signal\")\r\n\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\terrmsg = nil                                                          --[[VERBOSE]] elseif sent then verbose:cosocket \"sent all supplied data\" else verbose:cosocket(\"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tuntil sent or errmsg\r\n\t\r\n\t\t-- remove from sleeping queue, if it was waken because of data on socket.\r\n\t\tif timeout and timeout > 0 and errmsg ~= \"timeout\" then\r\n\t\t\tsleeping:remove(current)                                                  --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\tend\r\n\t\r\n\t\t-- unlock socket to allow use by other coroutines\r\n\t\twritelocks[socket] = nil                                                    --[[VERBOSE]] verbose:cosocket \"send done after waiting\" else verbose:cosocket(false, \"send done without waiting\")\r\n\tend\r\n\t\r\n\treturn sent, errmsg, lastbyte\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "local socket     = self.__object",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "verbose:cosocket(true, \"performing wrapped send\")",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "local timeout    = self.timeout",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local writelocks = self.cosocket.writelocks",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "local scheduler  = self.cosocket.scheduler",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local current    = scheduler:checkcurrent()",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "assert(socket, \"bad argument #1 to `send' (wrapped socket expected)\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert(writelocks[socket] == nil, \"attempt to write a socket in use\")",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "local sent, errmsg, lastbyte = socket:send(data, i, j)",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if not sent and errmsg == \"timeout\" and timeout ~= 0 then                     --[[VERBOSE]] verbose:cosocket(true, \"waiting to send remaining data\")\r\n\t\tlocal running = scheduler.running\r\n\t\tlocal sleeping = scheduler.sleeping\r\n\t\tlocal writing = scheduler.writing\r\n\r\n\t\t-- set to be waken at timeout, if specified\r\n\t\tif timeout and timeout > 0 then\r\n\t\t\tsleeping:enqueue(current, scheduler:time() + timeout)                     --[[VERBOSE]] verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")\r\n\t\tend\r\n\t\r\n\t\t-- lock socket to avoid use by other coroutines\r\n\t\twritelocks[socket] = true\r\n\t\r\n\t\t-- block current thread on the socket\r\n\t\twriting:add(socket, current)                                                --[[VERBOSE]] verbose:threads(current,\" subscribed for write signal\")\r\n\t\r\n\t\trepeat\r\n\t\t\t-- stop current thread\r\n\t\t\trunning:remove(current, self.currentkey)                                  --[[VERBOSE]] verbose:threads(current,\" suspended\")\r\n\t\t\tcoroutine.yield()                                                         --[[VERBOSE]] verbose:cosocket \"wrapped send resumed\"\r\n\t\t\r\n\t\t\t-- check if the socket is ready\r\n\t\t\tif writing[socket] == current then\r\n\t\t\t\twriting:remove(socket)                                                  --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\terrmsg = \"timeout\"                                                      --[[VERBOSE]] verbose:cosocket \"wrapped send timed out\"\r\n\t\t\telse                                                                      --[[VERBOSE]] verbose:cosocket \"writing remaining data into socket\"\r\n\t\t\t\tsent, errmsg, lastbyte = socket:send(data, lastbyte+1, j)\r\n\t\t\t\tif not sent and errmsg == \"timeout\" then\r\n\t\t\t\t\t-- block current thread on the socket to write data\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for another write signal\")\r\n\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\terrmsg = nil                                                          --[[VERBOSE]] elseif sent then verbose:cosocket \"sent all supplied data\" else verbose:cosocket(\"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tuntil sent or errmsg\r\n\t\r\n\t\t-- remove from sleeping queue, if it was waken because of data on socket.\r\n\t\tif timeout and timeout > 0 and errmsg ~= \"timeout\" then\r\n\t\t\tsleeping:remove(current)                                                  --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\tend\r\n\t\r\n\t\t-- unlock socket to allow use by other coroutines\r\n\t\twritelocks[socket] = nil                                                    --[[VERBOSE]] verbose:cosocket \"send done after waiting\" else verbose:cosocket(false, \"send done without waiting\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "verbose:cosocket(true, \"waiting to send remaining data\")",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "local writing = scheduler.writing",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "writelocks[socket] = true",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "writing:add(socket, current)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "verbose:threads(current,\" subscribed for write signal\")",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "repeat\r\n\t\t\t-- stop current thread\r\n\t\t\trunning:remove(current, self.currentkey)                                  --[[VERBOSE]] verbose:threads(current,\" suspended\")\r\n\t\t\tcoroutine.yield()                                                         --[[VERBOSE]] verbose:cosocket \"wrapped send resumed\"\r\n\t\t\r\n\t\t\t-- check if the socket is ready\r\n\t\t\tif writing[socket] == current then\r\n\t\t\t\twriting:remove(socket)                                                  --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\terrmsg = \"timeout\"                                                      --[[VERBOSE]] verbose:cosocket \"wrapped send timed out\"\r\n\t\t\telse                                                                      --[[VERBOSE]] verbose:cosocket \"writing remaining data into socket\"\r\n\t\t\t\tsent, errmsg, lastbyte = socket:send(data, lastbyte+1, j)\r\n\t\t\t\tif not sent and errmsg == \"timeout\" then\r\n\t\t\t\t\t-- block current thread on the socket to write data\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for another write signal\")\r\n\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\terrmsg = nil                                                          --[[VERBOSE]] elseif sent then verbose:cosocket \"sent all supplied data\" else verbose:cosocket(\"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tuntil sent or errmsg",
    "type": "statement:repeat"
  }, {
    "id": 116,
    "text": "verbose:cosocket \"wrapped send resumed\"",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "if writing[socket] == current then\r\n\t\t\t\twriting:remove(socket)                                                  --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\terrmsg = \"timeout\"                                                      --[[VERBOSE]] verbose:cosocket \"wrapped send timed out\"\r\n\t\t\telse                                                                      --[[VERBOSE]] verbose:cosocket \"writing remaining data into socket\"\r\n\t\t\t\tsent, errmsg, lastbyte = socket:send(data, lastbyte+1, j)\r\n\t\t\t\tif not sent and errmsg == \"timeout\" then\r\n\t\t\t\t\t-- block current thread on the socket to write data\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for another write signal\")\r\n\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\terrmsg = nil                                                          --[[VERBOSE]] elseif sent then verbose:cosocket \"sent all supplied data\" else verbose:cosocket(\"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "writing:remove(socket)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "verbose:threads(current,\" unsubscribed for write signal\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "verbose:cosocket \"wrapped send timed out\"",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "verbose:cosocket \"writing remaining data into socket\"",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "sent, errmsg, lastbyte = socket:send(data, lastbyte+1, j)",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "if not sent and errmsg == \"timeout\" then\r\n\t\t\t\t\t-- block current thread on the socket to write data\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for another write signal\")\r\n\t\t\t\t\t-- cancel error message\r\n\t\t\t\t\terrmsg = nil                                                          --[[VERBOSE]] elseif sent then verbose:cosocket \"sent all supplied data\" else verbose:cosocket(\"returning error \",errmsg,\" after waiting\")\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "verbose:threads(current,\" subscribed for another write signal\")",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "verbose:cosocket \"sent all supplied data\"",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "verbose:cosocket(\"returning error \",errmsg,\" after waiting\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "writelocks[socket] = nil",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "verbose:cosocket \"send done after waiting\"",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "verbose:cosocket(false, \"send done without waiting\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function select(self, recvt, sendt, timeout)\r\n\tlocal scheduler = self.scheduler                                              --[[VERBOSE]] local verbose = scheduler.verbose\r\n\tlocal current = scheduler:checkcurrent()                                      --[[VERBOSE]] verbose:cosocket(true, \"performing wrapped select\")\r\n\t\t\r\n\tif (recvt and #recvt > 0) or (sendt and #sendt > 0) then\r\n\t\tlocal readlocks  = self.readlocks\r\n\t\tlocal writelocks = self.writelocks\r\n\t\t\r\n\t\t-- assert that no thread is already blocked on these sockets\r\n\t\tif recvt then\r\n\t\t\tlocal new = {}\r\n\t\t\tfor index, wrapper in ipairs(recvt) do\r\n\t\t\t\tlocal socket = wrapper.__object\r\n\t\t\t\tassert(readlocks[socket] == nil, \"attempt to read a socket in use\")\r\n\t\t\t\tnew[index] = socket\r\n\t\t\t\tnew[socket] = wrapper\r\n\t\t\tend\r\n\t\t\trecvt = new\r\n\t\tend\r\n\t\tif sendt then\r\n\t\t\tlocal new = {}\r\n\t\t\tfor index, wrapper in ipairs(sendt) do\r\n\t\t\t\tlocal socket = wrapper.__object\r\n\t\t\t\tassert(writelocks[socket] == nil, \"attempt to write a socket in use\")\r\n\t\t\t\tnew[index] = socket\r\n\t\t\t\tnew[socket] = wrapper\r\n\t\t\tend\r\n\t\t\tsendt = new\r\n\t\tend\r\n\t\t\r\n\t\tlocal readok, writeok, errmsg = scheduler.select(recvt, sendt, 0)\r\n\t\r\n\t\tif\r\n\t\t\ttimeout ~= 0 and\r\n\t\t\terrmsg == \"timeout\" and\r\n\t\t\tnext(readok) == nil and\r\n\t\t\tnext(writeok) == nil\r\n\t\tthen                                                                        --[[VERBOSE]] verbose:cosocket(true, \"waiting for ready socket selection\")\r\n\t\t\tlocal running = scheduler.running\r\n\t\t\tlocal sleeping = scheduler.sleeping\r\n\t\t\tlocal reading = scheduler.reading\r\n\t\t\tlocal writing = scheduler.writing\r\n\t\r\n\t\t\t-- block current thread on the sockets and lock them\r\n\t\t\tif recvt then\r\n\t\t\t\tfor _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = current\r\n\t\t\t\t\treading:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for read signal\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif sendt then\r\n\t\t\t\tfor _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = current\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for write signal\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- set to be waken at timeout, if specified\r\n\t\t\tif timeout and timeout > 0 then\r\n\t\t\t\tsleeping:enqueue(current, scheduler:time() + timeout)                   --[[VERBOSE]] verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")\r\n\t\t\tend\r\n\t\t\r\n\t\t\t-- stop current thread\r\n\t\t\trunning:remove(current, self.currentkey)                                  --[[VERBOSE]] verbose:threads(current,\" suspended\")\r\n\t\t\tcoroutine.yield()                                                         --[[VERBOSE]] verbose:cosocket(false, \"wrapped select resumed\")\r\n\t\t\r\n\t\t\t-- remove from sleeping queue, if it was waken because of data on socket.\r\n\t\t\tif timeout and timeout > 0 then\r\n\t\t\t\tif sleeping:remove(current)\r\n\t\t\t\t\tthen errmsg = nil                                                     --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\t\t\t\telse errmsg = \"timeout\"                                               --[[VERBOSE]] verbose:cosocket \"wrapped select timed out\"\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\r\n\t\t\t-- check which sockets are ready and remove block for other sockets\r\n\t\t\tif recvt then\r\n\t\t\t\tfor _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = nil\r\n\t\t\t\t\tif reading[socket] == current then\r\n\t\t\t\t\t\treading:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\t\t\treadok[#readok+1] = wrapper\r\n\t\t\t\t\t\treadok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif sendt then\r\n\t\t\t\tfor _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = nil\r\n\t\t\t\t\tif writing[socket] == current then\r\n\t\t\t\t\t\twriting:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\t\t\twriteok[#writeok+1] = wrapper\r\n\t\t\t\t\t\twriteok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tfor index, socket in ipairs(readok) do\r\n\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\treadok[index] = wrapper\r\n\t\t\t\treadok[socket] = nil\r\n\t\t\t\treadok[wrapper] = true\r\n\t\t\tend\r\n\t\t\tfor index, socket in ipairs(writeok) do\r\n\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\twriteok[index] = wrapper\r\n\t\t\t\twriteok[socket] = nil\r\n\t\t\t\twriteok[wrapper] = true\r\n\t\t\tend\r\n\t\tend                                                                         --[[VERBOSE]] verbose:cosocket(false, \"returning selected sockets after waiting\")\r\n\t\t\r\n\t\treturn readok, writeok, errmsg\r\n\telse                                                                          --[[VERBOSE]] verbose:cosocket(false, \"no sockets for selection\")\r\n\t\treturn {}, {}\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "local scheduler = self.scheduler",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local current = scheduler:checkcurrent()",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "verbose:cosocket(true, \"performing wrapped select\")",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "if (recvt and #recvt > 0) or (sendt and #sendt > 0) then\r\n\t\tlocal readlocks  = self.readlocks\r\n\t\tlocal writelocks = self.writelocks\r\n\t\t\r\n\t\t-- assert that no thread is already blocked on these sockets\r\n\t\tif recvt then\r\n\t\t\tlocal new = {}\r\n\t\t\tfor index, wrapper in ipairs(recvt) do\r\n\t\t\t\tlocal socket = wrapper.__object\r\n\t\t\t\tassert(readlocks[socket] == nil, \"attempt to read a socket in use\")\r\n\t\t\t\tnew[index] = socket\r\n\t\t\t\tnew[socket] = wrapper\r\n\t\t\tend\r\n\t\t\trecvt = new\r\n\t\tend\r\n\t\tif sendt then\r\n\t\t\tlocal new = {}\r\n\t\t\tfor index, wrapper in ipairs(sendt) do\r\n\t\t\t\tlocal socket = wrapper.__object\r\n\t\t\t\tassert(writelocks[socket] == nil, \"attempt to write a socket in use\")\r\n\t\t\t\tnew[index] = socket\r\n\t\t\t\tnew[socket] = wrapper\r\n\t\t\tend\r\n\t\t\tsendt = new\r\n\t\tend\r\n\t\t\r\n\t\tlocal readok, writeok, errmsg = scheduler.select(recvt, sendt, 0)\r\n\t\r\n\t\tif\r\n\t\t\ttimeout ~= 0 and\r\n\t\t\terrmsg == \"timeout\" and\r\n\t\t\tnext(readok) == nil and\r\n\t\t\tnext(writeok) == nil\r\n\t\tthen                                                                        --[[VERBOSE]] verbose:cosocket(true, \"waiting for ready socket selection\")\r\n\t\t\tlocal running = scheduler.running\r\n\t\t\tlocal sleeping = scheduler.sleeping\r\n\t\t\tlocal reading = scheduler.reading\r\n\t\t\tlocal writing = scheduler.writing\r\n\t\r\n\t\t\t-- block current thread on the sockets and lock them\r\n\t\t\tif recvt then\r\n\t\t\t\tfor _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = current\r\n\t\t\t\t\treading:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for read signal\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif sendt then\r\n\t\t\t\tfor _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = current\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for write signal\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- set to be waken at timeout, if specified\r\n\t\t\tif timeout and timeout > 0 then\r\n\t\t\t\tsleeping:enqueue(current, scheduler:time() + timeout)                   --[[VERBOSE]] verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")\r\n\t\t\tend\r\n\t\t\r\n\t\t\t-- stop current thread\r\n\t\t\trunning:remove(current, self.currentkey)                                  --[[VERBOSE]] verbose:threads(current,\" suspended\")\r\n\t\t\tcoroutine.yield()                                                         --[[VERBOSE]] verbose:cosocket(false, \"wrapped select resumed\")\r\n\t\t\r\n\t\t\t-- remove from sleeping queue, if it was waken because of data on socket.\r\n\t\t\tif timeout and timeout > 0 then\r\n\t\t\t\tif sleeping:remove(current)\r\n\t\t\t\t\tthen errmsg = nil                                                     --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\t\t\t\telse errmsg = \"timeout\"                                               --[[VERBOSE]] verbose:cosocket \"wrapped select timed out\"\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\r\n\t\t\t-- check which sockets are ready and remove block for other sockets\r\n\t\t\tif recvt then\r\n\t\t\t\tfor _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = nil\r\n\t\t\t\t\tif reading[socket] == current then\r\n\t\t\t\t\t\treading:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\t\t\treadok[#readok+1] = wrapper\r\n\t\t\t\t\t\treadok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif sendt then\r\n\t\t\t\tfor _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = nil\r\n\t\t\t\t\tif writing[socket] == current then\r\n\t\t\t\t\t\twriting:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\t\t\twriteok[#writeok+1] = wrapper\r\n\t\t\t\t\t\twriteok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tfor index, socket in ipairs(readok) do\r\n\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\treadok[index] = wrapper\r\n\t\t\t\treadok[socket] = nil\r\n\t\t\t\treadok[wrapper] = true\r\n\t\t\tend\r\n\t\t\tfor index, socket in ipairs(writeok) do\r\n\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\twriteok[index] = wrapper\r\n\t\t\t\twriteok[socket] = nil\r\n\t\t\t\twriteok[wrapper] = true\r\n\t\t\tend\r\n\t\tend                                                                         --[[VERBOSE]] verbose:cosocket(false, \"returning selected sockets after waiting\")\r\n\t\t\r\n\t\treturn readok, writeok, errmsg\r\n\telse                                                                          --[[VERBOSE]] verbose:cosocket(false, \"no sockets for selection\")\r\n\t\treturn {}, {}\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 136,
    "text": "local readlocks  = self.readlocks",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local writelocks = self.writelocks",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if recvt then\r\n\t\t\tlocal new = {}\r\n\t\t\tfor index, wrapper in ipairs(recvt) do\r\n\t\t\t\tlocal socket = wrapper.__object\r\n\t\t\t\tassert(readlocks[socket] == nil, \"attempt to read a socket in use\")\r\n\t\t\t\tnew[index] = socket\r\n\t\t\t\tnew[socket] = wrapper\r\n\t\t\tend\r\n\t\t\trecvt = new\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "local new = {}",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "for index, wrapper in ipairs(recvt) do\r\n\t\t\t\tlocal socket = wrapper.__object\r\n\t\t\t\tassert(readlocks[socket] == nil, \"attempt to read a socket in use\")\r\n\t\t\t\tnew[index] = socket\r\n\t\t\t\tnew[socket] = wrapper\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 141,
    "text": "local socket = wrapper.__object",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "new[index] = socket",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "new[socket] = wrapper",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "recvt = new",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "if sendt then\r\n\t\t\tlocal new = {}\r\n\t\t\tfor index, wrapper in ipairs(sendt) do\r\n\t\t\t\tlocal socket = wrapper.__object\r\n\t\t\t\tassert(writelocks[socket] == nil, \"attempt to write a socket in use\")\r\n\t\t\t\tnew[index] = socket\r\n\t\t\t\tnew[socket] = wrapper\r\n\t\t\tend\r\n\t\t\tsendt = new\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "for index, wrapper in ipairs(sendt) do\r\n\t\t\t\tlocal socket = wrapper.__object\r\n\t\t\t\tassert(writelocks[socket] == nil, \"attempt to write a socket in use\")\r\n\t\t\t\tnew[index] = socket\r\n\t\t\t\tnew[socket] = wrapper\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 147,
    "text": "sendt = new",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "local readok, writeok, errmsg = scheduler.select(recvt, sendt, 0)",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "if\r\n\t\t\ttimeout ~= 0 and\r\n\t\t\terrmsg == \"timeout\" and\r\n\t\t\tnext(readok) == nil and\r\n\t\t\tnext(writeok) == nil\r\n\t\tthen                                                                        --[[VERBOSE]] verbose:cosocket(true, \"waiting for ready socket selection\")\r\n\t\t\tlocal running = scheduler.running\r\n\t\t\tlocal sleeping = scheduler.sleeping\r\n\t\t\tlocal reading = scheduler.reading\r\n\t\t\tlocal writing = scheduler.writing\r\n\t\r\n\t\t\t-- block current thread on the sockets and lock them\r\n\t\t\tif recvt then\r\n\t\t\t\tfor _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = current\r\n\t\t\t\t\treading:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for read signal\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif sendt then\r\n\t\t\t\tfor _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = current\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for write signal\")\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\t-- set to be waken at timeout, if specified\r\n\t\t\tif timeout and timeout > 0 then\r\n\t\t\t\tsleeping:enqueue(current, scheduler:time() + timeout)                   --[[VERBOSE]] verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")\r\n\t\t\tend\r\n\t\t\r\n\t\t\t-- stop current thread\r\n\t\t\trunning:remove(current, self.currentkey)                                  --[[VERBOSE]] verbose:threads(current,\" suspended\")\r\n\t\t\tcoroutine.yield()                                                         --[[VERBOSE]] verbose:cosocket(false, \"wrapped select resumed\")\r\n\t\t\r\n\t\t\t-- remove from sleeping queue, if it was waken because of data on socket.\r\n\t\t\tif timeout and timeout > 0 then\r\n\t\t\t\tif sleeping:remove(current)\r\n\t\t\t\t\tthen errmsg = nil                                                     --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\t\t\t\telse errmsg = \"timeout\"                                               --[[VERBOSE]] verbose:cosocket \"wrapped select timed out\"\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\r\n\t\t\t-- check which sockets are ready and remove block for other sockets\r\n\t\t\tif recvt then\r\n\t\t\t\tfor _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = nil\r\n\t\t\t\t\tif reading[socket] == current then\r\n\t\t\t\t\t\treading:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\t\t\treadok[#readok+1] = wrapper\r\n\t\t\t\t\t\treadok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif sendt then\r\n\t\t\t\tfor _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = nil\r\n\t\t\t\t\tif writing[socket] == current then\r\n\t\t\t\t\t\twriting:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\t\t\twriteok[#writeok+1] = wrapper\r\n\t\t\t\t\t\twriteok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tfor index, socket in ipairs(readok) do\r\n\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\treadok[index] = wrapper\r\n\t\t\t\treadok[socket] = nil\r\n\t\t\t\treadok[wrapper] = true\r\n\t\t\tend\r\n\t\t\tfor index, socket in ipairs(writeok) do\r\n\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\twriteok[index] = wrapper\r\n\t\t\t\twriteok[socket] = nil\r\n\t\t\t\twriteok[wrapper] = true\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "verbose:cosocket(true, \"waiting for ready socket selection\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "if recvt then\r\n\t\t\t\tfor _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = current\r\n\t\t\t\t\treading:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for read signal\")\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "for _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = current\r\n\t\t\t\t\treading:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for read signal\")\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 153,
    "text": "if sendt then\r\n\t\t\t\tfor _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = current\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for write signal\")\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "for _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = current\r\n\t\t\t\t\twriting:add(socket, current)                                          --[[VERBOSE]] verbose:threads(current,\" subscribed for write signal\")\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 155,
    "text": "writelocks[socket] = current",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "if timeout and timeout > 0 then\r\n\t\t\t\tsleeping:enqueue(current, scheduler:time() + timeout)                   --[[VERBOSE]] verbose:threads(current,\" registered for signal in \",timeout,\" seconds\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "verbose:cosocket(false, \"wrapped select resumed\")",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "if timeout and timeout > 0 then\r\n\t\t\t\tif sleeping:remove(current)\r\n\t\t\t\t\tthen errmsg = nil                                                     --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\t\t\t\telse errmsg = \"timeout\"                                               --[[VERBOSE]] verbose:cosocket \"wrapped select timed out\"\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "if sleeping:remove(current)\r\n\t\t\t\t\tthen errmsg = nil                                                     --[[VERBOSE]] verbose:threads(current,\" removed from sleeping queue\")\r\n\t\t\t\t\telse errmsg = \"timeout\"                                               --[[VERBOSE]] verbose:cosocket \"wrapped select timed out\"\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "verbose:cosocket \"wrapped select timed out\"",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "if recvt then\r\n\t\t\t\tfor _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = nil\r\n\t\t\t\t\tif reading[socket] == current then\r\n\t\t\t\t\t\treading:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\t\t\treadok[#readok+1] = wrapper\r\n\t\t\t\t\t\treadok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "for _, socket in ipairs(recvt) do\r\n\t\t\t\t\treadlocks[socket] = nil\r\n\t\t\t\t\tif reading[socket] == current then\r\n\t\t\t\t\t\treading:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\t\t\treadok[#readok+1] = wrapper\r\n\t\t\t\t\t\treadok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 163,
    "text": "if reading[socket] == current then\r\n\t\t\t\t\t\treading:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for read signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\t\t\treadok[#readok+1] = wrapper\r\n\t\t\t\t\t\treadok[wrapper] = true\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "local wrapper = recvt[socket]",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "readok[#readok+1] = wrapper",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "readok[wrapper] = true",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "if sendt then\r\n\t\t\t\tfor _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = nil\r\n\t\t\t\t\tif writing[socket] == current then\r\n\t\t\t\t\t\twriting:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\t\t\twriteok[#writeok+1] = wrapper\r\n\t\t\t\t\t\twriteok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 168,
    "text": "for _, socket in ipairs(sendt) do\r\n\t\t\t\t\twritelocks[socket] = nil\r\n\t\t\t\t\tif writing[socket] == current then\r\n\t\t\t\t\t\twriting:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\t\t\twriteok[#writeok+1] = wrapper\r\n\t\t\t\t\t\twriteok[wrapper] = true\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 169,
    "text": "if writing[socket] == current then\r\n\t\t\t\t\t\twriting:remove(socket)                                              --[[VERBOSE]] verbose:threads(current,\" unsubscribed for write signal\")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\t\t\twriteok[#writeok+1] = wrapper\r\n\t\t\t\t\t\twriteok[wrapper] = true\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "local wrapper = sendt[socket]",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "writeok[#writeok+1] = wrapper",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "writeok[wrapper] = true",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "for index, socket in ipairs(readok) do\r\n\t\t\t\tlocal wrapper = recvt[socket]\r\n\t\t\t\treadok[index] = wrapper\r\n\t\t\t\treadok[socket] = nil\r\n\t\t\t\treadok[wrapper] = true\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 174,
    "text": "readok[index] = wrapper",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "readok[socket] = nil",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "for index, socket in ipairs(writeok) do\r\n\t\t\t\tlocal wrapper = sendt[socket]\r\n\t\t\t\twriteok[index] = wrapper\r\n\t\t\t\twriteok[socket] = nil\r\n\t\t\t\twriteok[wrapper] = true\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 177,
    "text": "writeok[index] = wrapper",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "writeok[socket] = nil",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "verbose:cosocket(false, \"returning selected sockets after waiting\")",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "verbose:cosocket(false, \"no sockets for selection\")",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "function sleep(self, timeout)\r\n\tassert(timeout, \"bad argument #1 to `sleep' (number expected)\")\r\n\treturn self.scheduler:suspend(timeout)\r\nend",
    "type": "function"
  }, {
    "id": 183,
    "text": "assert(timeout, \"bad argument #1 to `sleep' (number expected)\")",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 185,
    "text": "function tcp(self)\r\n\treturn self:wrap(self.socketapi.tcp())\r\nend",
    "type": "function"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function udp(self)\r\n\treturn self:wrap(self.socketapi.udp())\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function connect(self, address, port)\r\n\treturn self:wrap(self.socketapi.connect(address, port))\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function bind(self, address, port)\r\n\treturn self:wrap(self.socketapi.bind(address, port))\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function wrap(self, socket, ...)                                                --[[VERBOSE]] self.scheduler.verbose:cosocket \"new wrapped socket\"\r\n\tif socket then\r\n\t\tsocket:settimeout(0)\r\n\t\tsocket = Wrapper {\r\n\t\t\t__object = socket,\r\n\t\t\tcosocket = self,\r\n\t\t\ttimeout = false,\r\n\r\n\t\t\tsettimeout = wrappedsettimeout,\r\n\t\t\tconnect    = wrappedconnect,\r\n\t\t\taccept     = wrappedaccept,\r\n\t\t\tsend       = wrappedsend,\r\n\t\t\treceive    = wrappedreceive,\r\n\t\t}\r\n\tend\r\n\treturn socket, ...\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "self.scheduler.verbose:cosocket \"new wrapped socket\"",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "if socket then\r\n\t\tsocket:settimeout(0)\r\n\t\tsocket = Wrapper {\r\n\t\t\t__object = socket,\r\n\t\t\tcosocket = self,\r\n\t\t\ttimeout = false,\r\n\r\n\t\t\tsettimeout = wrappedsettimeout,\r\n\t\t\tconnect    = wrappedconnect,\r\n\t\t\taccept     = wrappedaccept,\r\n\t\t\tsend       = wrappedsend,\r\n\t\t\treceive    = wrappedreceive,\r\n\t\t}\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "socket = Wrapper {\r\n\t\t\t__object = socket,\r\n\t\t\tcosocket = self,\r\n\t\t\ttimeout = false,\r\n\r\n\t\t\tsettimeout = wrappedsettimeout,\r\n\t\t\tconnect    = wrappedconnect,\r\n\t\t\taccept     = wrappedaccept,\r\n\t\t\tsend       = wrappedsend,\r\n\t\t\treceive    = wrappedreceive,\r\n\t\t}",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "",
    "type": "function container"
  }, {
    "id": 199,
    "text": "coroutine",
    "type": "module"
  }, {
    "id": 200,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 201,
    "text": "rawnew",
    "type": "global function"
  }, {
    "id": 202,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 203,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 204,
    "text": "select",
    "type": "global function"
  }, {
    "id": 205,
    "text": "module",
    "type": "global function"
  }, {
    "id": 206,
    "text": "next",
    "type": "global function"
  }, {
    "id": 207,
    "text": "self.socketapi.udp",
    "type": "global function"
  }, {
    "id": 208,
    "text": "Wrapper",
    "type": "global function"
  }, {
    "id": 209,
    "text": "self.socketapi.connect",
    "type": "global function"
  }, {
    "id": 210,
    "text": "self.socketapi.bind",
    "type": "global function"
  }, {
    "id": 211,
    "text": "self.socketapi.tcp",
    "type": "global function"
  }, {
    "id": 212,
    "text": "require",
    "type": "global function"
  }, {
    "id": 213,
    "text": "type",
    "type": "global function"
  }, {
    "id": 214,
    "text": "",
    "type": "variable container"
  }, {
    "id": 215,
    "text": "",
    "type": "require container"
  }, {
    "id": 216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "n/a"
  }, {
    "id": 218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "n/a"
  }, {
    "id": 220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "n/a"
  }, {
    "id": 222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "n/a"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 226,
    "text": "",
    "type": "global variable"
  }, {
    "id": 227,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 228,
    "text": "Scheduler)",
    "type": "module"
  }, {
    "id": 229,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 231,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "require local variable"
  } ]
}