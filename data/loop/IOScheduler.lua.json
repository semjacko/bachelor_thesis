{
  "_filename": "IOScheduler.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/thread/IOScheduler.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 18,
    "label": "has",
    "to": 30
  }, {
    "from": 18,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 18,
    "label": "has",
    "to": 37
  }, {
    "from": 18,
    "label": "has",
    "to": 38
  }, {
    "from": 18,
    "label": "has",
    "to": 39
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 17
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 11
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 11
  }, {
    "from": 41,
    "label": "has",
    "to": 11
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 17
  }, {
    "from": 47,
    "label": "has",
    "to": 22
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 28
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 29
  }, {
    "from": 47,
    "label": "has",
    "to": 30
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 32
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 36
  }, {
    "from": 52,
    "label": "has",
    "to": 50
  }, {
    "from": 52,
    "label": "has",
    "to": 29
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 11
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 14
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 11
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 68,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 74
  }, {
    "from": 77,
    "label": "has",
    "to": 75
  }, {
    "from": 63,
    "label": "has",
    "to": 79
  }, {
    "from": 54,
    "label": "calls",
    "to": 47
  }, {
    "from": 7,
    "label": "calls",
    "to": 85
  }, {
    "from": 7,
    "label": "calls",
    "to": 85
  }, {
    "from": 13,
    "label": "calls",
    "to": 90
  }, {
    "from": 63,
    "label": "calls",
    "to": 86
  }, {
    "from": 63,
    "label": "calls",
    "to": 86
  }, {
    "from": 13,
    "label": "calls",
    "to": 84
  }, {
    "from": 63,
    "label": "calls",
    "to": 87
  }, {
    "from": 54,
    "label": "calls",
    "to": 5
  }, {
    "from": 80,
    "label": "calls",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 81
  }, {
    "from": 41,
    "label": "calls",
    "to": 88
  }, {
    "from": 41,
    "label": "calls",
    "to": 88
  }, {
    "from": 63,
    "label": "calls",
    "to": 88
  }, {
    "from": 63,
    "label": "calls",
    "to": 88
  }, {
    "from": 13,
    "label": "calls",
    "to": 91
  }, {
    "from": 80,
    "label": "calls",
    "to": 89
  }, {
    "from": 63,
    "label": "calls",
    "to": 92
  }, {
    "from": 80,
    "label": "calls",
    "to": 93
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 80,
    "label": "calls",
    "to": 94
  }, {
    "from": 41,
    "label": "calls",
    "to": 82
  }, {
    "from": 80,
    "label": "calls",
    "to": 7
  }, {
    "from": 3,
    "label": "contains",
    "to": 80
  }, {
    "from": 80,
    "label": "declares",
    "to": 7
  }, {
    "from": 80,
    "label": "declares",
    "to": 13
  }, {
    "from": 80,
    "label": "declares",
    "to": 41
  }, {
    "from": 80,
    "label": "declares",
    "to": 47
  }, {
    "from": 80,
    "label": "declares",
    "to": 54
  }, {
    "from": 80,
    "label": "declares",
    "to": 56
  }, {
    "from": 80,
    "label": "declares",
    "to": 63
  }, {
    "from": 3,
    "label": "contains",
    "to": 95
  }, {
    "from": 3,
    "label": "contains",
    "to": 96
  }, {
    "from": 95,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 95,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 95,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 95,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 95,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 95,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 96,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "requires",
    "to": 83
  }, {
    "from": 96,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "requires",
    "to": 2
  }, {
    "from": 96,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 1
  }, {
    "from": 96,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 4
  }, {
    "from": 113,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "MapWithArrayOfKeys",
    "type": "module"
  }, {
    "id": 2,
    "text": "simple",
    "type": "module"
  }, {
    "id": 3,
    "text": "IOScheduler",
    "type": "module"
  }, {
    "id": 4,
    "text": "Scheduler",
    "type": "module"
  }, {
    "id": 5,
    "text": "function remove(self, index)\r\n\tlocal size = #self\r\n\tif index == size then\r\n\t\tself[size] = nil\r\n\telseif (index > 0) and (index < size) then\r\n\t\tself[index], self[size] = self[size], nil\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function class(class, ...)\r\n\tif select(\"#\", ...) > 1\r\n\t\tthen return base.rawnew(table.copy(MultipleClass, {...}), initclass(class))\r\n\t\telse return base.class(class, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function __init(class, self)\r\n\tself = Scheduler.__init(class, self)\r\n\tself.reading = MapWithArrayOfKeys()\r\n\tself.writing = MapWithArrayOfKeys()\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "self = Scheduler.__init(class, self)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "self.reading = MapWithArrayOfKeys()",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "self.writing = MapWithArrayOfKeys()",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function signalall(self, timeout)                                               --[[VERBOSE]] local verbose = self.verbose\r\n\tif timeout then timeout = math.max(timeout - self:time(), 0) end\r\n\tlocal reading, writing = self.reading, self.writing\r\n\tif #reading > 0 or #writing > 0 then                                          --[[VERBOSE]] verbose:scheduler(true, \"signaling blocked threads for \",timeout,\" seconds\")\r\n\t\tlocal running = self.running\r\n\t\tlocal readok, writeok = self.select(reading, writing, timeout)\r\n\t\tlocal index = 1\r\n\t\twhile index <= #reading do\r\n\t\t\tlocal channel = reading[index]\r\n\t\t\tif readok[channel] then                                                   --[[VERBOSE]] verbose:threads(\"unblocking reading \",reading[channel])\r\n\t\t\t\trunning:enqueue(reading[channel])\r\n\t\t\t\treading:removeat(index)\r\n\t\t\telse\r\n\t\t\t\tindex = index + 1\r\n\t\t\tend\r\n\t\tend\r\n\t\tindex = 1\r\n\t\twhile index <= #writing do\r\n\t\t\tlocal channel = writing[index]\r\n\t\t\tif writeok[channel] then                                                  --[[VERBOSE]] verbose:threads(\"unblocking writing \", writing[channel])\r\n\t\t\t\trunning:enqueue(writing[channel])\r\n\t\t\t\twriting:removeat(index)         \r\n\t\t\telse\r\n\t\t\t\tindex = index + 1\r\n\t\t\tend\r\n\t\tend                                                                         --[[VERBOSE]] verbose:scheduler(false,  \"blocked threads signaled\")\r\n\t\treturn true\r\n\telseif timeout and timeout > 0 then                                           --[[VERBOSE]] verbose:scheduler(\"no threads blocked, sleeping for \",timeout,\" seconds\")\r\n\t\tself.sleep(timeout)\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local verbose = self.verbose",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if timeout then timeout = math.max(timeout - self:time(), 0) end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "timeout = math.max(timeout - self:time(), 0)",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local reading, writing = self.reading, self.writing",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if #reading > 0 or #writing > 0 then                                          --[[VERBOSE]] verbose:scheduler(true, \"signaling blocked threads for \",timeout,\" seconds\")\r\n\t\tlocal running = self.running\r\n\t\tlocal readok, writeok = self.select(reading, writing, timeout)\r\n\t\tlocal index = 1\r\n\t\twhile index <= #reading do\r\n\t\t\tlocal channel = reading[index]\r\n\t\t\tif readok[channel] then                                                   --[[VERBOSE]] verbose:threads(\"unblocking reading \",reading[channel])\r\n\t\t\t\trunning:enqueue(reading[channel])\r\n\t\t\t\treading:removeat(index)\r\n\t\t\telse\r\n\t\t\t\tindex = index + 1\r\n\t\t\tend\r\n\t\tend\r\n\t\tindex = 1\r\n\t\twhile index <= #writing do\r\n\t\t\tlocal channel = writing[index]\r\n\t\t\tif writeok[channel] then                                                  --[[VERBOSE]] verbose:threads(\"unblocking writing \", writing[channel])\r\n\t\t\t\trunning:enqueue(writing[channel])\r\n\t\t\t\twriting:removeat(index)         \r\n\t\t\telse\r\n\t\t\t\tindex = index + 1\r\n\t\t\tend\r\n\t\tend                                                                         --[[VERBOSE]] verbose:scheduler(false,  \"blocked threads signaled\")\r\n\t\treturn true\r\n\telseif timeout and timeout > 0 then                                           --[[VERBOSE]] verbose:scheduler(\"no threads blocked, sleeping for \",timeout,\" seconds\")\r\n\t\tself.sleep(timeout)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "verbose:scheduler(true, \"signaling blocked threads for \",timeout,\" seconds\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local running = self.running",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local readok, writeok = self.select(reading, writing, timeout)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local index = 1",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "while index <= #reading do\r\n\t\t\tlocal channel = reading[index]\r\n\t\t\tif readok[channel] then                                                   --[[VERBOSE]] verbose:threads(\"unblocking reading \",reading[channel])\r\n\t\t\t\trunning:enqueue(reading[channel])\r\n\t\t\t\treading:removeat(index)\r\n\t\t\telse\r\n\t\t\t\tindex = index + 1\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 24,
    "text": "local channel = reading[index]",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if readok[channel] then                                                   --[[VERBOSE]] verbose:threads(\"unblocking reading \",reading[channel])\r\n\t\t\t\trunning:enqueue(reading[channel])\r\n\t\t\t\treading:removeat(index)\r\n\t\t\telse\r\n\t\t\t\tindex = index + 1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "verbose:threads(\"unblocking reading \",reading[channel])",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "running:enqueue(reading[channel])",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "reading:removeat(index)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "index = index + 1",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "index = 1",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "while index <= #writing do\r\n\t\t\tlocal channel = writing[index]\r\n\t\t\tif writeok[channel] then                                                  --[[VERBOSE]] verbose:threads(\"unblocking writing \", writing[channel])\r\n\t\t\t\trunning:enqueue(writing[channel])\r\n\t\t\t\twriting:removeat(index)         \r\n\t\t\telse\r\n\t\t\t\tindex = index + 1\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 32,
    "text": "local channel = writing[index]",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if writeok[channel] then                                                  --[[VERBOSE]] verbose:threads(\"unblocking writing \", writing[channel])\r\n\t\t\t\trunning:enqueue(writing[channel])\r\n\t\t\t\twriting:removeat(index)         \r\n\t\t\telse\r\n\t\t\t\tindex = index + 1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "verbose:threads(\"unblocking writing \", writing[channel])",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "running:enqueue(writing[channel])",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "writing:removeat(index)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "verbose:scheduler(false,  \"blocked threads signaled\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "verbose:scheduler(\"no threads blocked, sleeping for \",timeout,\" seconds\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "self.sleep(timeout)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function register(self, routine, previous)\r\n\tlocal reading, writing = self.reading, self.writing\r\n\tfor _, channel in ipairs(reading) do\r\n\t\tif reading[channel] == routine then return end\r\n\tend\r\n\tfor _, channel in ipairs(writing) do\r\n\t\tif writing[channel] == routine then return end\r\n\tend\r\n\treturn Scheduler.register(self, routine, previous)\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "for _, channel in ipairs(reading) do\r\n\t\tif reading[channel] == routine then return end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 43,
    "text": "if reading[channel] == routine then return end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "for _, channel in ipairs(writing) do\r\n\t\tif writing[channel] == routine then return end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "if writing[channel] == routine then return end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function handleremoved(self, routine, removed, ...)\r\n\tlocal reading, writing = self.reading, self.writing\r\n\tlocal index = 1\r\n\twhile index <= #reading do\r\n\t\tlocal channel = reading[index]\r\n\t\tif reading[channel] == routine then\r\n\t\t\treading:removeat(index)\r\n\t\t\tremoved = routine\r\n\t\telse\r\n\t\t\tindex = index + 1\r\n\t\tend\r\n\tend\r\n\tindex = 1\r\n\twhile index <= #writing do\r\n\t\tlocal channel = writing[index]\r\n\t\tif writing[channel] == routine then\r\n\t\t\twriting:removeat(index)\r\n\t\t\tremoved = routine\r\n\t\telse\r\n\t\t\tindex = index + 1\r\n\t\tend\r\n\tend\r\n\treturn removed, ...\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "while index <= #reading do\r\n\t\tlocal channel = reading[index]\r\n\t\tif reading[channel] == routine then\r\n\t\t\treading:removeat(index)\r\n\t\t\tremoved = routine\r\n\t\telse\r\n\t\t\tindex = index + 1\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 49,
    "text": "if reading[channel] == routine then\r\n\t\t\treading:removeat(index)\r\n\t\t\tremoved = routine\r\n\t\telse\r\n\t\t\tindex = index + 1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "removed = routine",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "while index <= #writing do\r\n\t\tlocal channel = writing[index]\r\n\t\tif writing[channel] == routine then\r\n\t\t\twriting:removeat(index)\r\n\t\t\tremoved = routine\r\n\t\telse\r\n\t\t\tindex = index + 1\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 52,
    "text": "if writing[channel] == routine then\r\n\t\t\twriting:removeat(index)\r\n\t\t\tremoved = routine\r\n\t\telse\r\n\t\t\tindex = index + 1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function remove(self, routine)\r\n\treturn handleremoved(self, routine, Scheduler.remove(self, routine))\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function step(self, ...)                                                        --[[VERBOSE]] local verbose = self.verbose; verbose:scheduler(true, \"performing scheduling step\")\r\n\tlocal signaled = self:signalall(0)\r\n\tlocal wokenup = self:wakeupall()\r\n\tlocal resumed = self:resumeall(nil, ...)                                      --[[VERBOSE]] verbose:scheduler(false, \"scheduling step performed\")\r\n\treturn signaled or wokenup or resumed\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "verbose:scheduler(true, \"performing scheduling step\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "local signaled = self:signalall(0)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local wokenup = self:wakeupall()",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local resumed = self:resumeall(nil, ...)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "verbose:scheduler(false, \"scheduling step performed\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function verbose.custom:threads(...)\r\n--[[VERBOSE]] \tlocal viewer  = self.viewer\r\n--[[VERBOSE]] \tlocal output  = self.viewer.output\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \toldfunc(self, ...)\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \tlocal scheduler = rawget(self, \"schedulerdetails\")\r\n--[[VERBOSE]] \tif scheduler then\r\n--[[VERBOSE]] \t\tlocal newline = \"\\n\"..viewer.prefix..viewer.indentation\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Reading:\")\r\n--[[VERBOSE]] \t\tfor _, current in ipairs(scheduler.reading) do\r\n--[[VERBOSE]]\t\t\t\tcurrent = scheduler.reading[current]\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Writing:\")\r\n--[[VERBOSE]] \t\tfor _, current in ipairs(scheduler.writing) do\r\n--[[VERBOSE]]\t\t\t\tcurrent = scheduler.writing[current]\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \tend\r\n--[[VERBOSE]] end",
    "type": "function"
  }, {
    "id": 64,
    "text": "local viewer  = self.viewer",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local output  = self.viewer.output",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "oldfunc(self, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "local scheduler = rawget(self, \"schedulerdetails\")",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if scheduler then\r\n--[[VERBOSE]] \t\tlocal newline = \"\\n\"..viewer.prefix..viewer.indentation\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Reading:\")\r\n--[[VERBOSE]] \t\tfor _, current in ipairs(scheduler.reading) do\r\n--[[VERBOSE]]\t\t\t\tcurrent = scheduler.reading[current]\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \t\r\n--[[VERBOSE]] \t\toutput:write(newline)\r\n--[[VERBOSE]] \t\toutput:write(\"Writing:\")\r\n--[[VERBOSE]] \t\tfor _, current in ipairs(scheduler.writing) do\r\n--[[VERBOSE]]\t\t\t\tcurrent = scheduler.writing[current]\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend\r\n--[[VERBOSE]] \tend",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "local newline = \"\\n\"..viewer.prefix..viewer.indentation",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "output:write(newline)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "output:write(\"Reading:\")",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "for _, current in ipairs(scheduler.reading) do\r\n--[[VERBOSE]]\t\t\t\tcurrent = scheduler.reading[current]\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "current = scheduler.reading[current]",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "output:write(\" \")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "output:write(tostring(self.labels[current]))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "output:write(\"Writing:\")",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "for _, current in ipairs(scheduler.writing) do\r\n--[[VERBOSE]]\t\t\t\tcurrent = scheduler.writing[current]\r\n--[[VERBOSE]] \t\t\toutput:write(\" \")\r\n--[[VERBOSE]] \t\t\toutput:write(tostring(self.labels[current]))\r\n--[[VERBOSE]] \t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 78,
    "text": "current = scheduler.writing[current]",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "",
    "type": "function container"
  }, {
    "id": 81,
    "text": "function __init(class, self)\r\n\tself = oo.rawnew(class, self)\r\n\tif rawget(self, \"traps\"     ) == nil then self.traps      = WeakSet()           end\r\n\tif rawget(self, \"running\"   ) == nil then self.running    = OrderedSet()        end\r\n\tif rawget(self, \"sleeping\"  ) == nil then self.sleeping   = PriorityQueue()     end\r\n\tif rawget(self, \"current\"   ) == nil then self.current    = false               end\r\n\tif rawget(self, \"currentkey\") == nil then self.currentkey = OrderedSet.firstkey end\r\n\tself.sleeping.wakeup = self.sleeping.wakeup or self.sleeping.priority\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "function register(self, routine, previous)                                      --[[VERBOSE]] self.verbose:threads(\"registering \",routine)\r\n\treturn not self.sleeping:contains(routine) and\r\n\t       self.running:insert(routine, previous)\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "math",
    "type": "module"
  }, {
    "id": 84,
    "text": "max",
    "type": "global function"
  }, {
    "id": 85,
    "text": "MapWithArrayOfKeys",
    "type": "global function"
  }, {
    "id": 86,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 87,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 88,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 89,
    "text": "module",
    "type": "global function"
  }, {
    "id": 90,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 91,
    "text": "select",
    "type": "global function"
  }, {
    "id": 92,
    "text": "oldfunc",
    "type": "global function"
  }, {
    "id": 93,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 94,
    "text": "require",
    "type": "global function"
  }, {
    "id": 95,
    "text": "",
    "type": "variable container"
  }, {
    "id": 96,
    "text": "",
    "type": "require container"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "n/a"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "global variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  } ]
}