{
  "_filename": "multiple.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/multiple.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 10,
    "label": "calls",
    "to": 24
  }, {
    "from": 6,
    "label": "calls",
    "to": 24
  }, {
    "from": 5,
    "label": "calls",
    "to": 50
  }, {
    "from": 6,
    "label": "calls",
    "to": 40
  }, {
    "from": 8,
    "label": "calls",
    "to": 40
  }, {
    "from": 9,
    "label": "calls",
    "to": 40
  }, {
    "from": 4,
    "label": "calls",
    "to": 24
  }, {
    "from": 11,
    "label": "calls",
    "to": 24
  }, {
    "from": 11,
    "label": "calls",
    "to": 24
  }, {
    "from": 4,
    "label": "calls",
    "to": 24
  }, {
    "from": 4,
    "label": "calls",
    "to": 24
  }, {
    "from": 4,
    "label": "calls",
    "to": 24
  }, {
    "from": 4,
    "label": "calls",
    "to": 24
  }, {
    "from": 13,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 24
  }, {
    "from": 17,
    "label": "calls",
    "to": 24
  }, {
    "from": 17,
    "label": "calls",
    "to": 24
  }, {
    "from": 17,
    "label": "calls",
    "to": 24
  }, {
    "from": 17,
    "label": "calls",
    "to": 24
  }, {
    "from": 17,
    "label": "calls",
    "to": 24
  }, {
    "from": 14,
    "label": "calls",
    "to": 24
  }, {
    "from": 15,
    "label": "calls",
    "to": 50
  }, {
    "from": 16,
    "label": "calls",
    "to": 50
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 19,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 18,
    "label": "calls",
    "to": 50
  }, {
    "from": 23,
    "label": "calls",
    "to": 24
  }, {
    "from": 23,
    "label": "calls",
    "to": 24
  }, {
    "from": 21,
    "label": "calls",
    "to": 24
  }, {
    "from": 22,
    "label": "calls",
    "to": 50
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 29
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 26
  }, {
    "from": 32,
    "label": "has",
    "to": 26
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 26
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 34
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 26
  }, {
    "from": 40,
    "label": "has",
    "to": 26
  }, {
    "from": 40,
    "label": "has",
    "to": 26
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 26
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 26
  }, {
    "from": 45,
    "label": "has",
    "to": 26
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 26
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 26
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 24,
    "label": "calls",
    "to": 24
  }, {
    "from": 58,
    "label": "calls",
    "to": 76
  }, {
    "from": 40,
    "label": "calls",
    "to": 76
  }, {
    "from": 58,
    "label": "calls",
    "to": 73
  }, {
    "from": 28,
    "label": "calls",
    "to": 73
  }, {
    "from": 32,
    "label": "calls",
    "to": 73
  }, {
    "from": 45,
    "label": "calls",
    "to": 40
  }, {
    "from": 40,
    "label": "calls",
    "to": 78
  }, {
    "from": 50,
    "label": "calls",
    "to": 78
  }, {
    "from": 58,
    "label": "calls",
    "to": 77
  }, {
    "from": 28,
    "label": "calls",
    "to": 7
  }, {
    "from": 58,
    "label": "calls",
    "to": 69
  }, {
    "from": 24,
    "label": "calls",
    "to": 69
  }, {
    "from": 45,
    "label": "calls",
    "to": 45
  }, {
    "from": 50,
    "label": "calls",
    "to": 45
  }, {
    "from": 24,
    "label": "calls",
    "to": 74
  }, {
    "from": 32,
    "label": "calls",
    "to": 81
  }, {
    "from": 58,
    "label": "calls",
    "to": 79
  }, {
    "from": 58,
    "label": "calls",
    "to": 79
  }, {
    "from": 24,
    "label": "calls",
    "to": 80
  }, {
    "from": 24,
    "label": "calls",
    "to": 75
  }, {
    "from": 1,
    "label": "contains",
    "to": 58
  }, {
    "from": 58,
    "label": "declares",
    "to": 24
  }, {
    "from": 58,
    "label": "declares",
    "to": 28
  }, {
    "from": 58,
    "label": "declares",
    "to": 32
  }, {
    "from": 58,
    "label": "declares",
    "to": 37
  }, {
    "from": 58,
    "label": "declares",
    "to": 40
  }, {
    "from": 58,
    "label": "declares",
    "to": 45
  }, {
    "from": 58,
    "label": "declares",
    "to": 50
  }, {
    "from": 58,
    "label": "declares",
    "to": 52
  }, {
    "from": 61,
    "label": "calls",
    "to": 50
  }, {
    "from": 59,
    "label": "calls",
    "to": 24
  }, {
    "from": 60,
    "label": "calls",
    "to": 24
  }, {
    "from": 62,
    "label": "calls",
    "to": 24
  }, {
    "from": 63,
    "label": "calls",
    "to": 24
  }, {
    "from": 64,
    "label": "calls",
    "to": 24
  }, {
    "from": 64,
    "label": "calls",
    "to": 24
  }, {
    "from": 65,
    "label": "calls",
    "to": 24
  }, {
    "from": 66,
    "label": "calls",
    "to": 24
  }, {
    "from": 68,
    "label": "calls",
    "to": 24
  }, {
    "from": 67,
    "label": "calls",
    "to": 24
  }, {
    "from": 70,
    "label": "calls",
    "to": 24
  }, {
    "from": 71,
    "label": "calls",
    "to": 24
  }, {
    "from": 72,
    "label": "calls",
    "to": 24
  }, {
    "from": 82,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 83
  }, {
    "from": 1,
    "label": "contains",
    "to": 84
  }, {
    "from": 83,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 83,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 83,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 83,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 83,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 94,
    "label": "assigns",
    "to": 97
  }, {
    "from": 97,
    "label": "assigns",
    "to": 98
  }, {
    "from": 84,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 3
  }, {
    "from": 84,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "requires",
    "to": 2
  }, {
    "from": 101,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "multiple",
    "type": "module"
  }, {
    "id": 2,
    "text": "simple",
    "type": "module"
  }, {
    "id": 3,
    "text": "table",
    "type": "module"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "function getclass(class)\r\n\tlocal cached = base.classof(class)\r\n\tif base.instanceof(cached, CachedClass) then\r\n\t\treturn cached\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function CachedClass:updatesuperclasses()\r\n\tlocal uncached = {}\r\n\t-- copy uncached superclasses defined in the class\r\n\tfor _, super in ipairs(self.uncached) do\r\n\t\tif not uncached[super] then\r\n\t\t\tuncached[super] = true\r\n\t\t\tuncached[#uncached + 1] = super\r\n\t\tend\r\n\tend\r\n\t-- copy inherited uncached superclasses\r\n\tfor _, cached in ipairs(self.supers) do\r\n\t\tfor _, super in base.supers(cached.class) do\r\n\t\t\tif not uncached[super] then\r\n\t\t\t\tuncached[super] = true\r\n\t\t\t\tuncached[#uncached + 1] = super\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tbase.class(self.class, unpack(uncached))\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function isclass(class)\r\n\treturn getclass(class) ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function superclass(class)\r\n\tlocal supers = {}\r\n\tlocal cached = getclass(class)\r\n\tif cached then\r\n\t\tfor index, super in ipairs(cached.supers) do\r\n\t\t\tsupers[index] = super.proxy\r\n\t\tend\r\n\t\tclass = cached.class\r\n\tend\r\n\tfor _, super in base.supers(class) do\r\n\t\tsupers[#supers + 1] = super\r\n\tend\r\n\treturn unpack(supers)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function supers(class)\r\n\tlocal cached = getclass(class)\r\n\tif cached\r\n\t\tthen return icached, cached, 0\r\n\t\telse return base.supers(class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "function container"
  }, {
    "id": 11,
    "text": "function Template(template, ...)\r\n\tif select(\"#\", ...) > 0\r\n\t\tthen return oo.class(template, ...)\r\n\t\telse return oo.class(template, BaseTemplate)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function Template(template, ...)\r\n\treturn oo.class(template, BaseTemplate, ...)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "function container"
  }, {
    "id": 14,
    "text": "function Template(template, ...)\r\n\treturn oo.class(template, BaseTemplate, ...)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function addport(scope, name, port, class)\r\n\tif oo.isclass(scope) or oo.instanceof(scope, BaseTemplate) then\r\n\t\tscope[name] = DynamicPort{\r\n\t\t\tname = name,\r\n\t\t\tport = port,\r\n\t\t\tclass = class,\r\n\t\t}\r\n\telse\r\n\t\tbase.addport(scope, name, port, class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function removeport(scope, name)\r\n\tif oo.isclass(scope) or oo.instanceof(scope, BaseTemplate) then\r\n\t\tscope[name] = nil\r\n\telse\r\n\t\tbase.removeport(scope, name)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "function container"
  }, {
    "id": 18,
    "text": "function intercept(scope, port, event, iceptor)\r\n\tlocal container = rawget(scope, \"__container\")\r\n\tlocal wrapper = container and container[port]\r\n\tif oo.instanceof(wrapper, Wrapper)\r\n\t\tthen rawset(wrapper, \"  \"..event, iceptor)\r\n\t\telse scope[\"  \"..event..port] = iceptor\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function ReceptacleWrapper:__init(state, key, context)\r\n\tself = oo.rawnew(self, state[key])\r\n\t\r\n\tlocal connections\r\n\tfor key, port in self.__receptacle:__all() do\r\n\t\tconnections = {}\r\n\t\tfor key, port in self.__receptacle:__all() do\r\n\t\t\tconnections[key] = port\r\n\t\tend\r\n\t\tbreak\r\n\tend\r\n\t\r\n\trawset(self, \"__new\", oo.class(Wrapper:__init{\r\n\t\t__get = Receptacle.__get,\r\n\t\t__state = state,\r\n\t\t__context = context,\r\n\t\t__key = key,\r\n\t\t__name = tostring(key),\r\n\t\t__factory = state.__factory,\r\n\t}, Wrapper))\r\n\t\r\n\tif connections then\r\n\t\tfor key, port in pairs(connections) do\r\n\t\t\tself.__receptacle:__unbind(key)\r\n\t\t\tself:__bind(port, key)\r\n\t\tend\r\n\tend\r\n\t\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "function container"
  }, {
    "id": 21,
    "text": "function Template(template, ...)\r\n\treturn oo.class(template, BaseTemplate, ...)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function templateof(factory)\r\n\tif not oo.instanceof(factory, BaseTemplate) then\r\n\t\tfactory = factoryof(factory)\r\n\tend\r\n\treturn oo.classof(factory)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "function container"
  }, {
    "id": 24,
    "text": "function class(class, ...)\r\n\tif select(\"#\", ...) > 1\r\n\t\tthen return base.rawnew(table.copy(MultipleClass, {...}), initclass(class))\r\n\t\telse return base.class(class, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "if select(\"#\", ...) > 1\r\n\t\tthen return base.rawnew(table.copy(MultipleClass, {...}), initclass(class))\r\n\t\telse return base.class(class, ...)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function isclass(class)\r\n\tlocal metaclass = base.classof(class)\r\n\tif metaclass then\r\n\t\treturn metaclass.__index == MultipleClass.__index or\r\n\t\t       base.isclass(class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local metaclass = base.classof(class)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if metaclass then\r\n\t\treturn metaclass.__index == MultipleClass.__index or\r\n\t\t       base.isclass(class)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function superclass(class)\r\n\tlocal metaclass = base.classof(class)\r\n\tif metaclass then\r\n\t\tlocal indexer = metaclass.__index\r\n\t\tif (indexer == MultipleClass.__index)\r\n\t\t\tthen return unpack(metaclass)\r\n\t\t\telse return metaclass.__index\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "if metaclass then\r\n\t\tlocal indexer = metaclass.__index\r\n\t\tif (indexer == MultipleClass.__index)\r\n\t\t\tthen return unpack(metaclass)\r\n\t\t\telse return metaclass.__index\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "local indexer = metaclass.__index",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if (indexer == MultipleClass.__index)\r\n\t\t\tthen return unpack(metaclass)\r\n\t\t\telse return metaclass.__index\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function isingle(single, index)\r\n\tif single and not index then\r\n\t\treturn 1, single\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if single and not index then\r\n\t\treturn 1, single\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function supers(class)\r\n\tlocal metaclass = classof(class)\r\n\tif metaclass then\r\n\t\tlocal indexer = metaclass.__index\r\n\t\tif indexer == MultipleClass.__index\r\n\t\t\tthen return ipairs(metaclass)\r\n\t\t\telse return isingle, indexer\r\n\t\tend\r\n\tend\r\n\treturn isingle\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local metaclass = classof(class)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if metaclass then\r\n\t\tlocal indexer = metaclass.__index\r\n\t\tif indexer == MultipleClass.__index\r\n\t\t\tthen return ipairs(metaclass)\r\n\t\t\telse return isingle, indexer\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "if indexer == MultipleClass.__index\r\n\t\t\tthen return ipairs(metaclass)\r\n\t\t\telse return isingle, indexer\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function subclassof(class, super)\r\n\tif class == super then return true end\r\n\tfor _, superclass in supers(class) do\r\n\t\tif subclassof(superclass, super) then return true end\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if class == super then return true end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "for _, superclass in supers(class) do\r\n\t\tif subclassof(superclass, super) then return true end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "if subclassof(superclass, super) then return true end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function instanceof(object, class)\r\n\treturn subclassof(classof(object), class)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function (self, field)\r\n\t\tself = base.classof(self)\r\n\t\tfor _, super in ipairs(self) do\r\n\t\t\tlocal value = super[field]\r\n\t\t\tif value ~= nil then return value end\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 53,
    "text": "self = base.classof(self)",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "for _, super in ipairs(self) do\r\n\t\t\tlocal value = super[field]\r\n\t\t\tif value ~= nil then return value end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "local value = super[field]",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if value ~= nil then return value end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "",
    "type": "function container"
  }, {
    "id": 59,
    "text": "local function ProtectedPool(members)                                           -- [[VERBOSE]] verbose:scoped \"new protected pool\"\r\n\treturn ObjectCache {\r\n\t\tclass = base.class(members),\r\n\t\tretrieve = newprotected,\r\n\t}\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local function PrivatePool(members)                                             -- [[VERBOSE]] verbose:scoped{\"new private pool\", members = members}\r\n\treturn ObjectCache {\r\n\t\tclass = base.class(members),\r\n\t\tretrieve = newprivate,\r\n\t}\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "function ScopedClass:updatemembers()\r\n\t--\r\n\t-- metatables to collect with current members\r\n\t--\r\n\tlocal public = table.clear(self.class)\r\n\tlocal protected\r\n\tlocal private\r\n\t\r\n\t--\r\n\t-- copy inherited members\r\n\t--\r\n\tlocal publicindex, publicnewindex\r\n\tlocal protectedindex, protectednewindex\r\n\tlocal superclasses = self.supers\r\n\tfor i = #superclasses, 1, -1 do\r\n\t\tlocal super = superclasses[i]\r\n\r\n\t\t-- copy members from superclass metatables\r\n\t\tpublic = table.copy(super.class, public)\r\n\r\n\t\tif base.instanceof(super, ScopedClass) then\r\n\t\t\t-- copy protected members from superclass metatables\r\n\t\t\tprotected = table.copy(super:getmeta(\"protected\"), protected)\r\n\r\n\t\t\t-- extract the __index and __newindex values\r\n\t\t\tpublicindex    = unwrap(public, \"index\")    or publicindex\r\n\t\t\tpublicnewindex = unwrap(public, \"newindex\") or publicnewindex\r\n\t\t\tif protected then\r\n\t\t\t\tprotectedindex    = unwrap(protected, \"index\")    or protectedindex\r\n\t\t\t\tprotectednewindex = unwrap(protected, \"newindex\") or protectednewindex\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tpublic.__index    = publicindex\r\n\tpublic.__newindex = publicnewindex\r\n\tif protected then\r\n\t\tprotected.__index    = protectedindex\r\n\t\tprotected.__newindex = protectednewindex\r\n\tend\r\n\r\n\t--\r\n\t-- copy members defined in the class\r\n\t--\r\n\tpublic    = copymembers(self, self.members.public,    public)\r\n\tprotected = copymembers(self, self.members.protected, protected)\r\n\tprivate   = copymembers(self, self.members.private,   private)\r\n\r\n\t--\r\n\t-- setup public metatable with proper indexers\r\n\t--\r\n\tpublic.__index = createindexer(self, \"public\", \"index\")\r\n\tpublic.__newindex = createindexer(self, \"public\", \"newindex\")\r\n\t\r\n\t--\r\n\t-- setup proper protected state features: pool, proxy and indexers\r\n\t--\r\n\tif protected then\r\n\t\tif not self.protected then\r\n\t\t\t-- create state object pool and class proxy for protected state\r\n\t\t\tself.protected = ProtectedPool(protected)\r\n\t\t\trawset(self.proxy, \"protected\", setmetatable({}, {\r\n\t\t\t\t__call = protectedproxy_call,\r\n\t\t\t\t__index = protected,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"protected\")\r\n\t\t\t\tend,\r\n\t\t\t}))\r\n\t\t\t-- register new pool in superclasses\r\n\t\t\tlocal protected_pool = self.protected\r\n\t\t\tfor super in hierarchyof(self) do\r\n\t\t\t\tlocal registry = super.registry\r\n\t\t\t\tif registry then\r\n\t\t\t\t\tregistry[public] = protected_pool\r\n\t\t\t\t\tregistry[protected] = false\r\n\t\r\n\t\t\t\t\tlocal pool = super.private\r\n\t\t\t\t\tif pool then\r\n\t\t\t\t\t\tsuper[public] = pool\r\n\t\t\t\t\t\tsuper[protected] = pool\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsuper[public] = protected_pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- update current metatable with new members\r\n\t\t\tprotected = table.copy(protected, table.clear(self.protected.class))\r\n\t\tend\r\n\r\n\t\t-- setup metatable with proper indexers\r\n\t\tprotected.__index = createindexer(self, \"protected\", \"index\")\r\n\t\tprotected.__newindex = createindexer(self, \"protected\", \"newindex\")\r\n\r\n\telseif self.protected then\r\n\t\t-- remove old pool from registry in superclasses\r\n\t\tlocal protected_pool = self.protected\r\n\t\tfor super in hierarchyof(self) do\r\n\t\t\tlocal registry = super.registry\r\n\t\t\tif registry then\r\n\t\t\t\tregistry[public] = false\r\n\t\t\t\tregistry[protected_pool.class] = nil\r\n\t\r\n\t\t\t\tsuper[public] = super.private\r\n\t\t\t\tsuper[protected_pool.class] = nil\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- remove state object pool and class proxy for protected state\r\n\t\tself.protected = nil\r\n\t\trawset(self.proxy, \"protected\", nil)\r\n\tend\r\n\t\r\n\t--\r\n\t-- setup proper private state features: pool, proxy and indexers\r\n\t--\r\n\tif private then\r\n\t\tif not self.private then\r\n\t\t\t-- create state object pool and class proxy for private state\r\n\t\t\tself.private = PrivatePool(private)\r\n\t\t\trawset(self.proxy, \"private\", setmetatable({}, {\r\n\t\t\t\t__call = privateproxy_call,\r\n\t\t\t\t__index = private,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"private\")\r\n\t\t\t\tend\r\n\t\t\t}))\r\n\t\t\t-- registry new pool in superclasses\r\n\t\t\tlocal private_pool = self.private\r\n\t\t\tlocal pool = self.protected or Object\r\n\t\t\tfor _, super in ipairs(superclasses) do\r\n\t\t\t\tfor class in hierarchyof(super) do\r\n\t\t\t\t\tlocal registry = class.registry\r\n\t\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\t\tregistry[private] = pool\r\n\t\t\t\t\t\tclass[private] = class.private_pool or pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tfor meta in pairs(self.registry) do\r\n\t\t\t\tself[meta] = private_pool\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- update current metatable with new members\r\n\t\t\tprivate = table.copy(private, table.clear(self:getmeta(\"private\")))\r\n\t\tend\r\n\r\n\t\t-- setup metatable with proper indexers\r\n\t\tprivate.__index = createindexer(self, \"private\", \"index\")\r\n\t\tprivate.__newindex = createindexer(self, \"private\", \"newindex\")\r\n\r\n\telseif self.private then\r\n\t\t-- remove old pool from registry in superclasses\r\n\t\tlocal private_pool = self.private\r\n\t\tfor _, super in ipairs(superclasses) do\r\n\t\t\tfor class in hierarchyof(super) do\r\n\t\t\t\tlocal registry = class.registry\r\n\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\tregistry[private_pool.class] = nil\r\n\t\t\t\t\tclass[private_pool.class] = nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor meta, pool in pairs(self.registry) do\r\n\t\t\tself[meta] = pool or nil\r\n\t\tend\r\n\t\t-- remove state object pool and class proxy for private state\r\n\t\tself.private = nil\r\n\t\trawset(self.proxy, \"private\", nil)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "function container"
  }, {
    "id": 63,
    "text": "",
    "type": "function container"
  }, {
    "id": 64,
    "text": "",
    "type": "function container"
  }, {
    "id": 65,
    "text": "",
    "type": "function container"
  }, {
    "id": 66,
    "text": "",
    "type": "function container"
  }, {
    "id": 67,
    "text": "function class(class, super)\r\n\tif super\r\n\t\tthen return DerivedClass[super](initclass(class))\r\n\t\telse return base.class(class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "function container"
  }, {
    "id": 69,
    "text": "function copy(source, destiny)\r\n\tif source then\r\n\t\tif not destiny then destiny = {} end\r\n\t\tfor field, value in pairs(source) do\r\n\t\t\trawset(destiny, field, value)\r\n\t\tend\r\n\tend\r\n\treturn destiny\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "function container"
  }, {
    "id": 71,
    "text": "",
    "type": "function container"
  }, {
    "id": 72,
    "text": "",
    "type": "function container"
  }, {
    "id": 73,
    "text": "classof",
    "type": "global function"
  }, {
    "id": 74,
    "text": "rawnew",
    "type": "global function"
  }, {
    "id": 75,
    "text": "initclass",
    "type": "global function"
  }, {
    "id": 76,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 77,
    "text": "module",
    "type": "global function"
  }, {
    "id": 78,
    "text": "classof",
    "type": "global function"
  }, {
    "id": 79,
    "text": "require",
    "type": "global function"
  }, {
    "id": 80,
    "text": "select",
    "type": "global function"
  }, {
    "id": 81,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "variable container"
  }, {
    "id": 84,
    "text": "",
    "type": "require container"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 95,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 96,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 97,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 98,
    "text": "",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "require local variable"
  } ]
}