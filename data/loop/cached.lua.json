{
  "_filename": "cached.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/cached.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 10
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 10
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 28,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 28,
    "label": "has",
    "to": 40
  }, {
    "from": 28,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 28,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 59
  }, {
    "from": 63,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 55,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 66,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 77,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 10
  }, {
    "from": 77,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 10
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 10
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 10
  }, {
    "from": 107,
    "label": "has",
    "to": 10
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 10
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 10
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 30
  }, {
    "from": 115,
    "label": "has",
    "to": 103
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 105
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 36
  }, {
    "from": 115,
    "label": "has",
    "to": 10
  }, {
    "from": 115,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 121,
    "label": "has",
    "to": 125
  }, {
    "from": 121,
    "label": "has",
    "to": 126
  }, {
    "from": 121,
    "label": "has",
    "to": 10
  }, {
    "from": 121,
    "label": "has",
    "to": 127
  }, {
    "from": 121,
    "label": "has",
    "to": 128
  }, {
    "from": 121,
    "label": "has",
    "to": 10
  }, {
    "from": 121,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 103
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 10
  }, {
    "from": 130,
    "label": "has",
    "to": 10
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 10
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 133,
    "label": "has",
    "to": 10
  }, {
    "from": 133,
    "label": "has",
    "to": 10
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 10
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 103
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 10
  }, {
    "from": 140,
    "label": "has",
    "to": 10
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 103
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 10
  }, {
    "from": 143,
    "label": "has",
    "to": 10
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 103
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 10
  }, {
    "from": 146,
    "label": "has",
    "to": 10
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 22,
    "label": "calls",
    "to": 163
  }, {
    "from": 66,
    "label": "calls",
    "to": 163
  }, {
    "from": 149,
    "label": "calls",
    "to": 157
  }, {
    "from": 55,
    "label": "calls",
    "to": 157
  }, {
    "from": 5,
    "label": "calls",
    "to": 174
  }, {
    "from": 77,
    "label": "calls",
    "to": 174
  }, {
    "from": 77,
    "label": "calls",
    "to": 174
  }, {
    "from": 143,
    "label": "calls",
    "to": 174
  }, {
    "from": 146,
    "label": "calls",
    "to": 174
  }, {
    "from": 149,
    "label": "calls",
    "to": 165
  }, {
    "from": 149,
    "label": "calls",
    "to": 162
  }, {
    "from": 22,
    "label": "calls",
    "to": 162
  }, {
    "from": 66,
    "label": "calls",
    "to": 162
  }, {
    "from": 66,
    "label": "calls",
    "to": 162
  }, {
    "from": 66,
    "label": "calls",
    "to": 169
  }, {
    "from": 66,
    "label": "calls",
    "to": 169
  }, {
    "from": 149,
    "label": "calls",
    "to": 172
  }, {
    "from": 22,
    "label": "calls",
    "to": 176
  }, {
    "from": 143,
    "label": "calls",
    "to": 166
  }, {
    "from": 146,
    "label": "calls",
    "to": 166
  }, {
    "from": 149,
    "label": "calls",
    "to": 175
  }, {
    "from": 149,
    "label": "calls",
    "to": 175
  }, {
    "from": 149,
    "label": "calls",
    "to": 175
  }, {
    "from": 140,
    "label": "calls",
    "to": 164
  }, {
    "from": 28,
    "label": "calls",
    "to": 18
  }, {
    "from": 97,
    "label": "calls",
    "to": 18
  }, {
    "from": 102,
    "label": "calls",
    "to": 18
  }, {
    "from": 113,
    "label": "calls",
    "to": 18
  }, {
    "from": 115,
    "label": "calls",
    "to": 18
  }, {
    "from": 130,
    "label": "calls",
    "to": 18
  }, {
    "from": 140,
    "label": "calls",
    "to": 18
  }, {
    "from": 143,
    "label": "calls",
    "to": 18
  }, {
    "from": 146,
    "label": "calls",
    "to": 18
  }, {
    "from": 138,
    "label": "calls",
    "to": 110
  }, {
    "from": 28,
    "label": "calls",
    "to": 170
  }, {
    "from": 28,
    "label": "calls",
    "to": 170
  }, {
    "from": 55,
    "label": "calls",
    "to": 170
  }, {
    "from": 55,
    "label": "calls",
    "to": 170
  }, {
    "from": 77,
    "label": "calls",
    "to": 170
  }, {
    "from": 115,
    "label": "calls",
    "to": 170
  }, {
    "from": 16,
    "label": "calls",
    "to": 167
  }, {
    "from": 18,
    "label": "calls",
    "to": 167
  }, {
    "from": 110,
    "label": "calls",
    "to": 167
  }, {
    "from": 28,
    "label": "calls",
    "to": 177
  }, {
    "from": 28,
    "label": "calls",
    "to": 177
  }, {
    "from": 133,
    "label": "calls",
    "to": 130
  }, {
    "from": 97,
    "label": "calls",
    "to": 171
  }, {
    "from": 22,
    "label": "calls",
    "to": 168
  }, {
    "from": 102,
    "label": "calls",
    "to": 168
  }, {
    "from": 18,
    "label": "calls",
    "to": 160
  }, {
    "from": 44,
    "label": "calls",
    "to": 12
  }, {
    "from": 133,
    "label": "calls",
    "to": 133
  }, {
    "from": 138,
    "label": "calls",
    "to": 133
  }, {
    "from": 55,
    "label": "calls",
    "to": 159
  }, {
    "from": 115,
    "label": "calls",
    "to": 159
  }, {
    "from": 130,
    "label": "calls",
    "to": 159
  }, {
    "from": 55,
    "label": "calls",
    "to": 178
  }, {
    "from": 115,
    "label": "calls",
    "to": 178
  }, {
    "from": 12,
    "label": "calls",
    "to": 179
  }, {
    "from": 77,
    "label": "calls",
    "to": 179
  }, {
    "from": 107,
    "label": "calls",
    "to": 102
  }, {
    "from": 66,
    "label": "calls",
    "to": 173
  }, {
    "from": 66,
    "label": "calls",
    "to": 173
  }, {
    "from": 1,
    "label": "contains",
    "to": 149
  }, {
    "from": 149,
    "label": "declares",
    "to": 5
  }, {
    "from": 149,
    "label": "declares",
    "to": 12
  }, {
    "from": 149,
    "label": "declares",
    "to": 16
  }, {
    "from": 149,
    "label": "declares",
    "to": 18
  }, {
    "from": 149,
    "label": "declares",
    "to": 22
  }, {
    "from": 149,
    "label": "declares",
    "to": 28
  }, {
    "from": 149,
    "label": "declares",
    "to": 44
  }, {
    "from": 149,
    "label": "declares",
    "to": 49
  }, {
    "from": 149,
    "label": "declares",
    "to": 52
  }, {
    "from": 149,
    "label": "declares",
    "to": 55
  }, {
    "from": 149,
    "label": "declares",
    "to": 66
  }, {
    "from": 149,
    "label": "declares",
    "to": 77
  }, {
    "from": 149,
    "label": "declares",
    "to": 97
  }, {
    "from": 149,
    "label": "declares",
    "to": 102
  }, {
    "from": 149,
    "label": "declares",
    "to": 107
  }, {
    "from": 149,
    "label": "declares",
    "to": 110
  }, {
    "from": 149,
    "label": "declares",
    "to": 113
  }, {
    "from": 149,
    "label": "declares",
    "to": 115
  }, {
    "from": 149,
    "label": "declares",
    "to": 121
  }, {
    "from": 149,
    "label": "declares",
    "to": 130
  }, {
    "from": 149,
    "label": "declares",
    "to": 133
  }, {
    "from": 149,
    "label": "declares",
    "to": 138
  }, {
    "from": 149,
    "label": "declares",
    "to": 140
  }, {
    "from": 149,
    "label": "declares",
    "to": 143
  }, {
    "from": 149,
    "label": "declares",
    "to": 146
  }, {
    "from": 151,
    "label": "calls",
    "to": 133
  }, {
    "from": 150,
    "label": "calls",
    "to": 146
  }, {
    "from": 151,
    "label": "calls",
    "to": 146
  }, {
    "from": 152,
    "label": "calls",
    "to": 115
  }, {
    "from": 153,
    "label": "calls",
    "to": 113
  }, {
    "from": 154,
    "label": "calls",
    "to": 113
  }, {
    "from": 155,
    "label": "calls",
    "to": 146
  }, {
    "from": 156,
    "label": "calls",
    "to": 133
  }, {
    "from": 158,
    "label": "calls",
    "to": 113
  }, {
    "from": 161,
    "label": "calls",
    "to": 113
  }, {
    "from": 1,
    "label": "contains",
    "to": 180
  }, {
    "from": 1,
    "label": "contains",
    "to": 181
  }, {
    "from": 180,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 180,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 180,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 180,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 180,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 180,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 180,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 180,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 180,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 180,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 180,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 181,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "requires",
    "to": 4
  }, {
    "from": 181,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "requires",
    "to": 2
  }, {
    "from": 181,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "requires",
    "to": 3
  }, {
    "from": 207,
    "label": "requires",
    "to": 1
  }, {
    "from": 208,
    "label": "requires",
    "to": 1
  }, {
    "from": 209,
    "label": "requires",
    "to": 1
  }, {
    "from": 210,
    "label": "requires",
    "to": 1
  }, {
    "from": 211,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cached",
    "type": "module"
  }, {
    "id": 2,
    "text": "OrderedSet",
    "type": "module"
  }, {
    "id": 3,
    "text": "multiple",
    "type": "module"
  }, {
    "id": 4,
    "text": "table",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function subsiterator(queue, class)\r\n\tclass = queue[class]\r\n\tif class then\r\n\t\tfor sub in pairs(class.subs) do\r\n\t\t\tqueue:enqueue(sub)\r\n\t\tend\r\n\t\treturn class\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "class = queue[class]",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if class then\r\n\t\tfor sub in pairs(class.subs) do\r\n\t\t\tqueue:enqueue(sub)\r\n\t\tend\r\n\t\treturn class\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "for sub in pairs(class.subs) do\r\n\t\t\tqueue:enqueue(sub)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "queue:enqueue(sub)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function subs(class)\r\n\tqueue = OrderedSet()\r\n\tqueue:enqueue(class)\r\n\treturn subsiterator, queue, OrderedSet.firstkey\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "queue = OrderedSet()",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "queue:enqueue(class)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function proxy_newindex(proxy, field, value)\r\n\treturn base.classof(proxy):updatefield(field, value)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function getclass(class)\r\n\tlocal cached = base.classof(class)\r\n\tif base.instanceof(cached, CachedClass) then\r\n\t\treturn cached\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local cached = base.classof(class)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if base.instanceof(cached, CachedClass) then\r\n\t\treturn cached\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function CachedClass:__init(class)\r\n\tlocal meta = {}\r\n\tself = base.rawnew(self, {\r\n\t\t__call = new,\r\n\t\t__index = meta,\r\n\t\t__newindex = proxy_newindex,\r\n\t\tsupers = {},\r\n\t\tsubs = {},\r\n\t\tmembers = table.copy(class, {}),\r\n\t\tclass = meta,\r\n\t})\r\n\tself.proxy = setmetatable(class and table.clear(class) or {}, self)\r\n\tClassMap[self.class] = self.proxy\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local meta = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "self = base.rawnew(self, {\r\n\t\t__call = new,\r\n\t\t__index = meta,\r\n\t\t__newindex = proxy_newindex,\r\n\t\tsupers = {},\r\n\t\tsubs = {},\r\n\t\tmembers = table.copy(class, {}),\r\n\t\tclass = meta,\r\n\t})",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "self.proxy = setmetatable(class and table.clear(class) or {}, self)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "ClassMap[self.class] = self.proxy",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function CachedClass:updatehierarchy(...)\r\n\t-- separate cached from non-cached classes\r\n\tlocal caches = {}\r\n\tlocal supers = {}\r\n\tfor i = 1, select(\"#\", ...) do\r\n\t\tlocal super = select(i, ...)\r\n\t\tlocal cached = getclass(super)\r\n\t\tif cached\r\n\t\t\tthen caches[#caches + 1] = cached\r\n\t\t\telse supers[#supers + 1] = super\r\n\t\tend\r\n\tend\r\n\r\n\t-- remove it from its old superclasses\r\n\tfor _, super in ipairs(self.supers) do\r\n\t\tsuper:removesubclass(self)\r\n\tend\r\n\t\r\n\t-- update superclasses\r\n\tself.uncached = supers\r\n\tself.supers = caches\r\n\r\n\t-- register as subclass in all superclasses\r\n\tfor _, super in ipairs(self.supers) do\r\n\t\tsuper:addsubclass(self)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local caches = {}",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local supers = {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for i = 1, select(\"#\", ...) do\r\n\t\tlocal super = select(i, ...)\r\n\t\tlocal cached = getclass(super)\r\n\t\tif cached\r\n\t\t\tthen caches[#caches + 1] = cached\r\n\t\t\telse supers[#supers + 1] = super\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 32,
    "text": "local super = select(i, ...)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local cached = getclass(super)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if cached\r\n\t\t\tthen caches[#caches + 1] = cached\r\n\t\t\telse supers[#supers + 1] = super\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "caches[#caches + 1] = cached",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "supers[#supers + 1] = super",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "for _, super in ipairs(self.supers) do\r\n\t\tsuper:removesubclass(self)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "super:removesubclass(self)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "self.uncached = supers",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "self.supers = caches",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "for _, super in ipairs(self.supers) do\r\n\t\tsuper:addsubclass(self)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "super:addsubclass(self)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function CachedClass:updateinheritance()\r\n\t-- relink all affected classes\r\n\tfor sub in subs(self) do\r\n\t\tsub:updatemembers()\r\n\t\tsub:updatesuperclasses()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "for sub in subs(self) do\r\n\t\tsub:updatemembers()\r\n\t\tsub:updatesuperclasses()\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "sub:updatemembers()",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "sub:updatesuperclasses()",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function CachedClass:addsubclass(class)\r\n\tself.subs[class] = true\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "self.subs[class] = true",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function CachedClass:removesubclass(class)\r\n\tself.subs[class] = nil\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "self.subs[class] = nil",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function CachedClass:updatesuperclasses()\r\n\tlocal uncached = {}\r\n\t-- copy uncached superclasses defined in the class\r\n\tfor _, super in ipairs(self.uncached) do\r\n\t\tif not uncached[super] then\r\n\t\t\tuncached[super] = true\r\n\t\t\tuncached[#uncached + 1] = super\r\n\t\tend\r\n\tend\r\n\t-- copy inherited uncached superclasses\r\n\tfor _, cached in ipairs(self.supers) do\r\n\t\tfor _, super in base.supers(cached.class) do\r\n\t\t\tif not uncached[super] then\r\n\t\t\t\tuncached[super] = true\r\n\t\t\t\tuncached[#uncached + 1] = super\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tbase.class(self.class, unpack(uncached))\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local uncached = {}",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "for _, super in ipairs(self.uncached) do\r\n\t\tif not uncached[super] then\r\n\t\t\tuncached[super] = true\r\n\t\t\tuncached[#uncached + 1] = super\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 58,
    "text": "if not uncached[super] then\r\n\t\t\tuncached[super] = true\r\n\t\t\tuncached[#uncached + 1] = super\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "uncached[super] = true",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "uncached[#uncached + 1] = super",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "for _, cached in ipairs(self.supers) do\r\n\t\tfor _, super in base.supers(cached.class) do\r\n\t\t\tif not uncached[super] then\r\n\t\t\t\tuncached[super] = true\r\n\t\t\t\tuncached[#uncached + 1] = super\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "for _, super in base.supers(cached.class) do\r\n\t\t\tif not uncached[super] then\r\n\t\t\t\tuncached[super] = true\r\n\t\t\t\tuncached[#uncached + 1] = super\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 63,
    "text": "if not uncached[super] then\r\n\t\t\t\tuncached[super] = true\r\n\t\t\t\tuncached[#uncached + 1] = super\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "base.class(self.class, unpack(uncached))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function CachedClass:updatemembers()\r\n\tlocal class = table.clear(self.class)\r\n\tfor i = #self.supers, 1, -1 do\r\n\t\tlocal super = self.supers[i].class\r\n\t\t-- copy inherited members\r\n\t\ttable.copy(super, class)\r\n\t\t-- do not copy the default __index value\r\n\t\tif rawget(class, \"__index\") == super then\r\n\t\t\trawset(class, \"__index\", nil)\r\n\t\tend\r\n\tend\r\n\t-- copy members defined in the class\r\n\ttable.copy(self.members, class)\r\n\t-- set the default __index value\r\n\tif rawget(class, \"__index\") == nil then\r\n\t\trawset(class, \"__index\", class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local class = table.clear(self.class)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "for i = #self.supers, 1, -1 do\r\n\t\tlocal super = self.supers[i].class\r\n\t\t-- copy inherited members\r\n\t\ttable.copy(super, class)\r\n\t\t-- do not copy the default __index value\r\n\t\tif rawget(class, \"__index\") == super then\r\n\t\t\trawset(class, \"__index\", nil)\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 69,
    "text": "local super = self.supers[i].class",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "table.copy(super, class)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "if rawget(class, \"__index\") == super then\r\n\t\t\trawset(class, \"__index\", nil)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "rawset(class, \"__index\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "table.copy(self.members, class)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if rawget(class, \"__index\") == nil then\r\n\t\trawset(class, \"__index\", class)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "rawset(class, \"__index\", class)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function CachedClass:updatefield(name, member)\r\n\t-- update member list\r\n\tlocal members = self.members\r\n\tmembers[name] = member\r\n\r\n\t-- get old linkage\r\n\tlocal class = self.class\r\n\tlocal old = class[name]\r\n\t\r\n\t-- replace old linkage for the new one\r\n\tclass[name] = member\r\n\tlocal queue = OrderedSet()\r\n\tfor sub in pairs(self.subs) do\r\n\t\tqueue:enqueue(sub)\r\n\tend\r\n\twhile queue:head() do\r\n\t\tlocal current = queue:dequeue()\r\n\t\tclass = current.class\r\n\t\tmembers = current.members\r\n\t\tif members[name] == nil then\r\n\t\t\tfor _, super in ipairs(current.supers) do\r\n\t\t\t\tlocal superclass = super.class\r\n\t\t\t\tif superclass[name] ~= nil then\r\n\t\t\t\t\tif superclass[name] ~= class[name] then\r\n\t\t\t\t\t\tclass[name] = superclass[name]\r\n\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn old\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "local members = self.members",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "members[name] = member",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "local class = self.class",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local old = class[name]",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "class[name] = member",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "local queue = OrderedSet()",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "for sub in pairs(self.subs) do\r\n\t\tqueue:enqueue(sub)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 85,
    "text": "while queue:head() do\r\n\t\tlocal current = queue:dequeue()\r\n\t\tclass = current.class\r\n\t\tmembers = current.members\r\n\t\tif members[name] == nil then\r\n\t\t\tfor _, super in ipairs(current.supers) do\r\n\t\t\t\tlocal superclass = super.class\r\n\t\t\t\tif superclass[name] ~= nil then\r\n\t\t\t\t\tif superclass[name] ~= class[name] then\r\n\t\t\t\t\t\tclass[name] = superclass[name]\r\n\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 86,
    "text": "local current = queue:dequeue()",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "class = current.class",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "members = current.members",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if members[name] == nil then\r\n\t\t\tfor _, super in ipairs(current.supers) do\r\n\t\t\t\tlocal superclass = super.class\r\n\t\t\t\tif superclass[name] ~= nil then\r\n\t\t\t\t\tif superclass[name] ~= class[name] then\r\n\t\t\t\t\t\tclass[name] = superclass[name]\r\n\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "for _, super in ipairs(current.supers) do\r\n\t\t\t\tlocal superclass = super.class\r\n\t\t\t\tif superclass[name] ~= nil then\r\n\t\t\t\t\tif superclass[name] ~= class[name] then\r\n\t\t\t\t\t\tclass[name] = superclass[name]\r\n\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 91,
    "text": "local superclass = super.class",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if superclass[name] ~= nil then\r\n\t\t\t\t\tif superclass[name] ~= class[name] then\r\n\t\t\t\t\t\tclass[name] = superclass[name]\r\n\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "if superclass[name] ~= class[name] then\r\n\t\t\t\t\t\tclass[name] = superclass[name]\r\n\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "class[name] = superclass[name]",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "for sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function class(class, ...)\r\n\tclass = getclass(class) or CachedClass(class)\r\n\tclass:updatehierarchy(...)\r\n\tclass:updateinheritance()\r\n\treturn class.proxy\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "class = getclass(class) or CachedClass(class)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "class:updatehierarchy(...)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "class:updateinheritance()",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function rawnew(class, object)\r\n\tlocal cached = getclass(class)\r\n\tif cached then class = cached.class end\r\n\treturn base.rawnew(class, object)\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local cached = getclass(class)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "if cached then class = cached.class end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "class = cached.class",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function new(class, ...)\r\n\tif class.__init\r\n\t\tthen return class:__init(...)\r\n\t\telse return rawnew(class, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "if class.__init\r\n\t\tthen return class:__init(...)\r\n\t\telse return rawnew(class, ...)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function classof(object)\r\n\tlocal class = base.classof(object)\r\n\treturn ClassMap[class] or class\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local class = base.classof(object)",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function isclass(class)\r\n\treturn getclass(class) ~= nil\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function superclass(class)\r\n\tlocal supers = {}\r\n\tlocal cached = getclass(class)\r\n\tif cached then\r\n\t\tfor index, super in ipairs(cached.supers) do\r\n\t\t\tsupers[index] = super.proxy\r\n\t\tend\r\n\t\tclass = cached.class\r\n\tend\r\n\tfor _, super in base.supers(class) do\r\n\t\tsupers[#supers + 1] = super\r\n\tend\r\n\treturn unpack(supers)\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "if cached then\r\n\t\tfor index, super in ipairs(cached.supers) do\r\n\t\t\tsupers[index] = super.proxy\r\n\t\tend\r\n\t\tclass = cached.class\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "for index, super in ipairs(cached.supers) do\r\n\t\t\tsupers[index] = super.proxy\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "supers[index] = super.proxy",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "for _, super in base.supers(class) do\r\n\t\tsupers[#supers + 1] = super\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "local function icached(cached, index)\r\n\tlocal super\r\n\tlocal supers = cached.supers\r\n\tindex = index + 1\r\n\t-- check if index points to a cached superclass\r\n\tsuper = supers[index]\r\n\tif super then return index, super.proxy end\r\n\t-- check if index points to an uncached superclass\r\n\tsuper = cached.uncached[index - #supers]\r\n\tif super then return index, super end\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "local super",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "local supers = cached.supers",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "index = index + 1",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "super = supers[index]",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "if super then return index, super.proxy end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "super = cached.uncached[index - #supers]",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "if super then return index, super end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function supers(class)\r\n\tlocal cached = getclass(class)\r\n\tif cached\r\n\t\tthen return icached, cached, 0\r\n\t\telse return base.supers(class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "if cached\r\n\t\tthen return icached, cached, 0\r\n\t\telse return base.supers(class)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function subclassof(class, super)\r\n\tif class == super then return true end\r\n\tfor _, superclass in supers(class) do\r\n\t\tif subclassof(superclass, super) then return true end\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "if class == super then return true end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "for _, superclass in supers(class) do\r\n\t\tif subclassof(superclass, super) then return true end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 136,
    "text": "if subclassof(superclass, super) then return true end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function instanceof(object, class)\r\n\treturn subclassof(classof(object), class)\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function memberof(class, name)\r\n\tlocal cached = getclass(class)\r\n\tif cached\r\n\t\tthen return cached.members[name]\r\n\t\telse return base.member(class, name)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "if cached\r\n\t\tthen return cached.members[name]\r\n\t\telse return base.member(class, name)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function members(class)\r\n\tlocal cached = getclass(class)\r\n\tif cached\r\n\t\tthen return pairs(cached.members)\r\n\t\telse return base.members(class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "if cached\r\n\t\tthen return pairs(cached.members)\r\n\t\telse return base.members(class)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function allmembers(class)\r\n\tlocal cached = getclass(class)\r\n\tif cached\r\n\t\tthen return pairs(cached.class)\r\n\t\telse return base.members(class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "if cached\r\n\t\tthen return pairs(cached.class)\r\n\t\telse return base.members(class)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "",
    "type": "function container"
  }, {
    "id": 150,
    "text": "function BaseTemplate:__build(segments)\r\n\tfor port, class in oo.allmembers(oo.classof(self)) do\r\n\t\tif port:match(\"^%a[%w_]*$\") then\r\n\t\t\tclass(segments, port, segments)\r\n\t\tend\r\n\tend\r\n\tsegments.__reference = segments\r\n\tfor port in pairs(self) do\r\n\t\tif port == 1\r\n\t\t\tthen self:__setcontext(segments.__component, segments)\r\n\t\t\telse self:__setcontext(segments[port], segments)\r\n\t\tend\r\n\tend\r\n\treturn segments\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "function ports(template)\r\n\tif not oo.subclassof(template, BaseTemplate) then\r\n\t\ttemplate = templateof(template)\r\n\tend\r\n\tlocal state, var\r\n\tnextmember, state, var = oo.allmembers(template)\r\n\treturn portiterator, state, var\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "function ExternalState:__index(name)\r\n\tlocal port, manager = oo.superclass(ExternalState).__index(self, name)\r\n\tif port and manager then\r\n\t\treturn rawget(manager, \"__external\") or manager\r\n\telse\r\n\t\tlocal component = self.__container.__state.__component\r\n\t\treturn base.delegate(port or component[name], component)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "function addport(scope, name, port, class)\r\n\tif oo.isclass(scope) or oo.instanceof(scope, BaseTemplate) then\r\n\t\tscope[name] = DynamicPort{\r\n\t\t\tname = name,\r\n\t\t\tport = port,\r\n\t\t\tclass = class,\r\n\t\t}\r\n\telse\r\n\t\tbase.addport(scope, name, port, class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "function removeport(scope, name)\r\n\tif oo.isclass(scope) or oo.instanceof(scope, BaseTemplate) then\r\n\t\tscope[name] = nil\r\n\telse\r\n\t\tbase.removeport(scope, name)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 155,
    "text": "function BaseTemplate:__build(segments)\r\n\tlocal container = self:__container(segments)\r\n\tlocal state = container.__state\r\n\tlocal context = container.__internal\r\n\tfor port, class in oo.allmembers(oo.classof(self)) do\r\n\t\tif port:find(\"^%a[%w_]*$\") then\r\n\t\t\tcontainer[port] = class(state, port, context)\r\n\t\tend\r\n\tend\r\n\tstate.__reference = container.__external\r\n\tfor port in pairs(self) do\r\n\t\tif port == 1\r\n\t\t\tthen self:__setcontext(segments.__component, context)\r\n\t\t\telse self:__setcontext(segments[port], context)\r\n\t\tend\r\n\tend\r\n\treturn container.__external\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "function ports(template)\r\n\tif not oo.subclassof(template, BaseTemplate) then\r\n\t\ttemplate = templateof(template)\r\n\tend\r\n\treturn base.ports(template)\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "function class(class, ...)\r\n\tif select(\"#\", ...) > 1\r\n\t\tthen return base.rawnew(table.copy(MultipleClass, {...}), initclass(class))\r\n\t\telse return base.class(class, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "function isclass(class)\r\n\tlocal metaclass = base.classof(class)\r\n\tif metaclass then\r\n\t\treturn metaclass.__index == MultipleClass.__index or\r\n\t\t       base.isclass(class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "function supers(class)\r\n\tlocal metaclass = classof(class)\r\n\tif metaclass then\r\n\t\tlocal indexer = metaclass.__index\r\n\t\tif indexer == MultipleClass.__index\r\n\t\t\tthen return ipairs(metaclass)\r\n\t\t\telse return isingle, indexer\r\n\t\tend\r\n\tend\r\n\treturn isingle\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "function instanceof(object, class)\r\n\treturn subclassof(classof(object), class)\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "function isclass(class)\r\n\tlocal metaclass = classof(class)\r\n\tif metaclass then\r\n\t\treturn metaclass == rawget(DerivedClass, metaclass.__index) or\r\n\t\t       base.isclass(class)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "function copy(source, destiny)\r\n\tif source then\r\n\t\tif not destiny then destiny = {} end\r\n\t\tfor field, value in pairs(source) do\r\n\t\t\trawset(destiny, field, value)\r\n\t\tend\r\n\tend\r\n\treturn destiny\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "function clear(tab)\r\n\tlocal elem = next(tab)\r\n\twhile elem ~= nil do\r\n\t\ttab[elem] = nil\r\n\t\telem = next(tab)\r\n\tend\r\n\treturn tab\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "member",
    "type": "global function"
  }, {
    "id": 165,
    "text": "new",
    "type": "global function"
  }, {
    "id": 166,
    "text": "members",
    "type": "global function"
  }, {
    "id": 167,
    "text": "classof",
    "type": "global function"
  }, {
    "id": 168,
    "text": "rawnew",
    "type": "global function"
  }, {
    "id": 169,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 170,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 171,
    "text": "CachedClass",
    "type": "global function"
  }, {
    "id": 172,
    "text": "module",
    "type": "global function"
  }, {
    "id": 173,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 174,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 175,
    "text": "require",
    "type": "global function"
  }, {
    "id": 176,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 177,
    "text": "select",
    "type": "global function"
  }, {
    "id": 178,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 179,
    "text": "OrderedSet",
    "type": "global function"
  }, {
    "id": 180,
    "text": "",
    "type": "variable container"
  }, {
    "id": 181,
    "text": "",
    "type": "require container"
  }, {
    "id": 182,
    "text": "",
    "type": "local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "n/a"
  }, {
    "id": 186,
    "text": "",
    "type": "local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "n/a"
  }, {
    "id": 188,
    "text": "",
    "type": "local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "n/a"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "",
    "type": "local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "n/a"
  }, {
    "id": 198,
    "text": "",
    "type": "local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "n/a"
  }, {
    "id": 200,
    "text": "",
    "type": "local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "n/a"
  }, {
    "id": 202,
    "text": "",
    "type": "global variable"
  }, {
    "id": 203,
    "text": "",
    "type": "n/a"
  }, {
    "id": 204,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "require local variable"
  } ]
}