{
  "_filename": "Inspector.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/debug/Inspector.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 21,
    "label": "has",
    "to": 28
  }, {
    "from": 19,
    "label": "has",
    "to": 29
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 17
  }, {
    "from": 31,
    "label": "has",
    "to": 18
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 22
  }, {
    "from": 35,
    "label": "has",
    "to": 23
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 26
  }, {
    "from": 35,
    "label": "has",
    "to": 27
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 29
  }, {
    "from": 31,
    "label": "has",
    "to": 8
  }, {
    "from": 31,
    "label": "has",
    "to": 8
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 8
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 52,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 52,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 15
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 72,
    "label": "has",
    "to": 79
  }, {
    "from": 71,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 66
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 67
  }, {
    "from": 84,
    "label": "has",
    "to": 68
  }, {
    "from": 84,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 89
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 66
  }, {
    "from": 82,
    "label": "has",
    "to": 90
  }, {
    "from": 81,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 92,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 22
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 103,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 86
  }, {
    "from": 113,
    "label": "has",
    "to": 68
  }, {
    "from": 113,
    "label": "has",
    "to": 67
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 117,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 125,
    "label": "has",
    "to": 130
  }, {
    "from": 125,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 125,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 139,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 139,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 148,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 142
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 121
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 153,
    "label": "has",
    "to": 159
  }, {
    "from": 153,
    "label": "has",
    "to": 160
  }, {
    "from": 153,
    "label": "has",
    "to": 161
  }, {
    "from": 153,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 153,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 151,
    "label": "has",
    "to": 8
  }, {
    "from": 151,
    "label": "has",
    "to": 167
  }, {
    "from": 151,
    "label": "has",
    "to": 168
  }, {
    "from": 151,
    "label": "has",
    "to": 169
  }, {
    "from": 151,
    "label": "has",
    "to": 8
  }, {
    "from": 148,
    "label": "has",
    "to": 8
  }, {
    "from": 148,
    "label": "has",
    "to": 170
  }, {
    "from": 171,
    "label": "has",
    "to": 152
  }, {
    "from": 171,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 142
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 121
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 153,
    "label": "has",
    "to": 159
  }, {
    "from": 153,
    "label": "has",
    "to": 160
  }, {
    "from": 153,
    "label": "has",
    "to": 161
  }, {
    "from": 153,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 153,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 164,
    "label": "has",
    "to": 166
  }, {
    "from": 171,
    "label": "has",
    "to": 8
  }, {
    "from": 171,
    "label": "has",
    "to": 167
  }, {
    "from": 171,
    "label": "has",
    "to": 168
  }, {
    "from": 171,
    "label": "has",
    "to": 169
  }, {
    "from": 171,
    "label": "has",
    "to": 8
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 8
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 173,
    "label": "has",
    "to": 8
  }, {
    "from": 173,
    "label": "has",
    "to": 18
  }, {
    "from": 173,
    "label": "has",
    "to": 177
  }, {
    "from": 173,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 17
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 29
  }, {
    "from": 173,
    "label": "has",
    "to": 8
  }, {
    "from": 173,
    "label": "has",
    "to": 182
  }, {
    "from": 173,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 17
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 34
  }, {
    "from": 185,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 29
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 183,
    "label": "has",
    "to": 187
  }, {
    "from": 173,
    "label": "has",
    "to": 8
  }, {
    "from": 173,
    "label": "has",
    "to": 8
  }, {
    "from": 173,
    "label": "has",
    "to": 8
  }, {
    "from": 173,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 190,
    "label": "has",
    "to": 192
  }, {
    "from": 190,
    "label": "has",
    "to": 193
  }, {
    "from": 190,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 29
  }, {
    "from": 190,
    "label": "has",
    "to": 199
  }, {
    "from": 190,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 184
  }, {
    "from": 200,
    "label": "has",
    "to": 195
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 29
  }, {
    "from": 200,
    "label": "has",
    "to": 204
  }, {
    "from": 189,
    "label": "has",
    "to": 8
  }, {
    "from": 189,
    "label": "has",
    "to": 8
  }, {
    "from": 189,
    "label": "has",
    "to": 8
  }, {
    "from": 189,
    "label": "has",
    "to": 205
  }, {
    "from": 189,
    "label": "has",
    "to": 206
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 11
  }, {
    "from": 208,
    "label": "has",
    "to": 12
  }, {
    "from": 207,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 212,
    "label": "has",
    "to": 216
  }, {
    "from": 212,
    "label": "has",
    "to": 217
  }, {
    "from": 212,
    "label": "has",
    "to": 22
  }, {
    "from": 212,
    "label": "has",
    "to": 218
  }, {
    "from": 212,
    "label": "has",
    "to": 219
  }, {
    "from": 212,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 220,
    "label": "has",
    "to": 223
  }, {
    "from": 220,
    "label": "has",
    "to": 224
  }, {
    "from": 220,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 220,
    "label": "has",
    "to": 228
  }, {
    "from": 220,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 229,
    "label": "has",
    "to": 232
  }, {
    "from": 211,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 235,
    "label": "has",
    "to": 237
  }, {
    "from": 235,
    "label": "has",
    "to": 238
  }, {
    "from": 235,
    "label": "has",
    "to": 239
  }, {
    "from": 235,
    "label": "has",
    "to": 240
  }, {
    "from": 234,
    "label": "has",
    "to": 241
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 243,
    "label": "has",
    "to": 245
  }, {
    "from": 243,
    "label": "has",
    "to": 246
  }, {
    "from": 243,
    "label": "has",
    "to": 247
  }, {
    "from": 243,
    "label": "has",
    "to": 248
  }, {
    "from": 242,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 250,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 137
  }, {
    "from": 254,
    "label": "has",
    "to": 252
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 142
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 144
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 146
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 163
  }, {
    "from": 256,
    "label": "has",
    "to": 260
  }, {
    "from": 261,
    "label": "has",
    "to": 142
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 261,
    "label": "has",
    "to": 8
  }, {
    "from": 261,
    "label": "has",
    "to": 266
  }, {
    "from": 267,
    "label": "has",
    "to": 8
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 269,
    "label": "has",
    "to": 8
  }, {
    "from": 269,
    "label": "has",
    "to": 272
  }, {
    "from": 14,
    "label": "calls",
    "to": 5
  }, {
    "from": 14,
    "label": "calls",
    "to": 5
  }, {
    "from": 52,
    "label": "calls",
    "to": 5
  }, {
    "from": 52,
    "label": "calls",
    "to": 5
  }, {
    "from": 71,
    "label": "calls",
    "to": 5
  }, {
    "from": 81,
    "label": "calls",
    "to": 5
  }, {
    "from": 81,
    "label": "calls",
    "to": 5
  }, {
    "from": 81,
    "label": "calls",
    "to": 5
  }, {
    "from": 103,
    "label": "calls",
    "to": 5
  }, {
    "from": 173,
    "label": "calls",
    "to": 5
  }, {
    "from": 189,
    "label": "calls",
    "to": 5
  }, {
    "from": 189,
    "label": "calls",
    "to": 5
  }, {
    "from": 211,
    "label": "calls",
    "to": 5
  }, {
    "from": 134,
    "label": "calls",
    "to": 286
  }, {
    "from": 134,
    "label": "calls",
    "to": 286
  }, {
    "from": 139,
    "label": "calls",
    "to": 286
  }, {
    "from": 139,
    "label": "calls",
    "to": 286
  }, {
    "from": 211,
    "label": "calls",
    "to": 286
  }, {
    "from": 211,
    "label": "calls",
    "to": 286
  }, {
    "from": 148,
    "label": "calls",
    "to": 283
  }, {
    "from": 125,
    "label": "calls",
    "to": 295
  }, {
    "from": 125,
    "label": "calls",
    "to": 295
  }, {
    "from": 148,
    "label": "calls",
    "to": 295
  }, {
    "from": 52,
    "label": "calls",
    "to": 282
  }, {
    "from": 273,
    "label": "calls",
    "to": 297
  }, {
    "from": 273,
    "label": "calls",
    "to": 297
  }, {
    "from": 273,
    "label": "calls",
    "to": 297
  }, {
    "from": 273,
    "label": "calls",
    "to": 297
  }, {
    "from": 273,
    "label": "calls",
    "to": 297
  }, {
    "from": 273,
    "label": "calls",
    "to": 297
  }, {
    "from": 52,
    "label": "calls",
    "to": 296
  }, {
    "from": 52,
    "label": "calls",
    "to": 296
  }, {
    "from": 71,
    "label": "calls",
    "to": 296
  }, {
    "from": 71,
    "label": "calls",
    "to": 296
  }, {
    "from": 81,
    "label": "calls",
    "to": 296
  }, {
    "from": 52,
    "label": "calls",
    "to": 298
  }, {
    "from": 81,
    "label": "calls",
    "to": 298
  }, {
    "from": 92,
    "label": "calls",
    "to": 298
  }, {
    "from": 134,
    "label": "calls",
    "to": 298
  }, {
    "from": 134,
    "label": "calls",
    "to": 298
  }, {
    "from": 139,
    "label": "calls",
    "to": 298
  }, {
    "from": 139,
    "label": "calls",
    "to": 298
  }, {
    "from": 148,
    "label": "calls",
    "to": 290
  }, {
    "from": 125,
    "label": "calls",
    "to": 281
  }, {
    "from": 117,
    "label": "calls",
    "to": 113
  }, {
    "from": 273,
    "label": "calls",
    "to": 289
  }, {
    "from": 211,
    "label": "calls",
    "to": 303
  }, {
    "from": 148,
    "label": "calls",
    "to": 300
  }, {
    "from": 39,
    "label": "calls",
    "to": 299
  }, {
    "from": 173,
    "label": "calls",
    "to": 299
  }, {
    "from": 211,
    "label": "calls",
    "to": 207
  }, {
    "from": 125,
    "label": "calls",
    "to": 288
  }, {
    "from": 242,
    "label": "calls",
    "to": 284
  }, {
    "from": 211,
    "label": "calls",
    "to": 293
  }, {
    "from": 139,
    "label": "calls",
    "to": 291
  }, {
    "from": 234,
    "label": "calls",
    "to": 291
  }, {
    "from": 256,
    "label": "calls",
    "to": 291
  }, {
    "from": 261,
    "label": "calls",
    "to": 291
  }, {
    "from": 261,
    "label": "calls",
    "to": 291
  }, {
    "from": 267,
    "label": "calls",
    "to": 291
  }, {
    "from": 52,
    "label": "calls",
    "to": 294
  }, {
    "from": 52,
    "label": "calls",
    "to": 294
  }, {
    "from": 52,
    "label": "calls",
    "to": 294
  }, {
    "from": 71,
    "label": "calls",
    "to": 294
  }, {
    "from": 117,
    "label": "calls",
    "to": 294
  }, {
    "from": 273,
    "label": "calls",
    "to": 294
  }, {
    "from": 148,
    "label": "calls",
    "to": 294
  }, {
    "from": 148,
    "label": "calls",
    "to": 294
  }, {
    "from": 189,
    "label": "calls",
    "to": 294
  }, {
    "from": 211,
    "label": "calls",
    "to": 294
  }, {
    "from": 211,
    "label": "calls",
    "to": 294
  }, {
    "from": 211,
    "label": "calls",
    "to": 294
  }, {
    "from": 234,
    "label": "calls",
    "to": 294
  }, {
    "from": 234,
    "label": "calls",
    "to": 294
  }, {
    "from": 234,
    "label": "calls",
    "to": 294
  }, {
    "from": 234,
    "label": "calls",
    "to": 294
  }, {
    "from": 242,
    "label": "calls",
    "to": 294
  }, {
    "from": 242,
    "label": "calls",
    "to": 294
  }, {
    "from": 242,
    "label": "calls",
    "to": 294
  }, {
    "from": 250,
    "label": "calls",
    "to": 294
  }, {
    "from": 139,
    "label": "calls",
    "to": 287
  }, {
    "from": 148,
    "label": "calls",
    "to": 287
  }, {
    "from": 148,
    "label": "calls",
    "to": 287
  }, {
    "from": 148,
    "label": "calls",
    "to": 287
  }, {
    "from": 148,
    "label": "calls",
    "to": 287
  }, {
    "from": 173,
    "label": "calls",
    "to": 287
  }, {
    "from": 173,
    "label": "calls",
    "to": 287
  }, {
    "from": 173,
    "label": "calls",
    "to": 287
  }, {
    "from": 173,
    "label": "calls",
    "to": 287
  }, {
    "from": 189,
    "label": "calls",
    "to": 287
  }, {
    "from": 211,
    "label": "calls",
    "to": 287
  }, {
    "from": 211,
    "label": "calls",
    "to": 287
  }, {
    "from": 234,
    "label": "calls",
    "to": 287
  }, {
    "from": 234,
    "label": "calls",
    "to": 287
  }, {
    "from": 234,
    "label": "calls",
    "to": 287
  }, {
    "from": 242,
    "label": "calls",
    "to": 287
  }, {
    "from": 256,
    "label": "calls",
    "to": 287
  }, {
    "from": 256,
    "label": "calls",
    "to": 287
  }, {
    "from": 261,
    "label": "calls",
    "to": 287
  }, {
    "from": 234,
    "label": "calls",
    "to": 277
  }, {
    "from": 242,
    "label": "calls",
    "to": 277
  }, {
    "from": 211,
    "label": "calls",
    "to": 285
  }, {
    "from": 14,
    "label": "calls",
    "to": 301
  }, {
    "from": 31,
    "label": "calls",
    "to": 301
  }, {
    "from": 39,
    "label": "calls",
    "to": 301
  }, {
    "from": 46,
    "label": "calls",
    "to": 301
  }, {
    "from": 207,
    "label": "calls",
    "to": 301
  }, {
    "from": 148,
    "label": "calls",
    "to": 279
  }, {
    "from": 31,
    "label": "calls",
    "to": 278
  }, {
    "from": 189,
    "label": "calls",
    "to": 278
  }, {
    "from": 211,
    "label": "calls",
    "to": 292
  }, {
    "from": 5,
    "label": "calls",
    "to": 302
  }, {
    "from": 5,
    "label": "calls",
    "to": 302
  }, {
    "from": 31,
    "label": "calls",
    "to": 280
  }, {
    "from": 173,
    "label": "calls",
    "to": 280
  }, {
    "from": 189,
    "label": "calls",
    "to": 280
  }, {
    "from": 2,
    "label": "contains",
    "to": 273
  }, {
    "from": 273,
    "label": "declares",
    "to": 5
  }, {
    "from": 273,
    "label": "declares",
    "to": 10
  }, {
    "from": 273,
    "label": "declares",
    "to": 14
  }, {
    "from": 273,
    "label": "declares",
    "to": 31
  }, {
    "from": 273,
    "label": "declares",
    "to": 39
  }, {
    "from": 273,
    "label": "declares",
    "to": 46
  }, {
    "from": 273,
    "label": "declares",
    "to": 52
  }, {
    "from": 273,
    "label": "declares",
    "to": 71
  }, {
    "from": 273,
    "label": "declares",
    "to": 81
  }, {
    "from": 273,
    "label": "declares",
    "to": 92
  }, {
    "from": 273,
    "label": "declares",
    "to": 103
  }, {
    "from": 273,
    "label": "declares",
    "to": 113
  }, {
    "from": 273,
    "label": "declares",
    "to": 117
  }, {
    "from": 273,
    "label": "declares",
    "to": 125
  }, {
    "from": 273,
    "label": "declares",
    "to": 134
  }, {
    "from": 273,
    "label": "declares",
    "to": 139
  }, {
    "from": 273,
    "label": "declares",
    "to": 148
  }, {
    "from": 273,
    "label": "declares",
    "to": 171
  }, {
    "from": 273,
    "label": "declares",
    "to": 173
  }, {
    "from": 273,
    "label": "declares",
    "to": 189
  }, {
    "from": 273,
    "label": "declares",
    "to": 207
  }, {
    "from": 273,
    "label": "declares",
    "to": 211
  }, {
    "from": 273,
    "label": "declares",
    "to": 234
  }, {
    "from": 273,
    "label": "declares",
    "to": 242
  }, {
    "from": 273,
    "label": "declares",
    "to": 250
  }, {
    "from": 273,
    "label": "declares",
    "to": 254
  }, {
    "from": 273,
    "label": "declares",
    "to": 256
  }, {
    "from": 273,
    "label": "declares",
    "to": 261
  }, {
    "from": 273,
    "label": "declares",
    "to": 267
  }, {
    "from": 273,
    "label": "declares",
    "to": 269
  }, {
    "from": 2,
    "label": "contains",
    "to": 304
  }, {
    "from": 2,
    "label": "contains",
    "to": 305
  }, {
    "from": 304,
    "label": "initializes",
    "to": 306
  }, {
    "from": 306,
    "label": "assigns",
    "to": 307
  }, {
    "from": 304,
    "label": "initializes",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 304,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 304,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 304,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 304,
    "label": "initializes",
    "to": 316
  }, {
    "from": 316,
    "label": "assigns",
    "to": 317
  }, {
    "from": 304,
    "label": "initializes",
    "to": 318
  }, {
    "from": 318,
    "label": "assigns",
    "to": 319
  }, {
    "from": 304,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "assigns",
    "to": 321
  }, {
    "from": 304,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "assigns",
    "to": 323
  }, {
    "from": 304,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 304,
    "label": "initializes",
    "to": 326
  }, {
    "from": 326,
    "label": "assigns",
    "to": 327
  }, {
    "from": 304,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "assigns",
    "to": 329
  }, {
    "from": 304,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "assigns",
    "to": 331
  }, {
    "from": 304,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "assigns",
    "to": 333
  }, {
    "from": 304,
    "label": "initializes",
    "to": 334
  }, {
    "from": 334,
    "label": "assigns",
    "to": 335
  }, {
    "from": 304,
    "label": "initializes",
    "to": 336
  }, {
    "from": 336,
    "label": "assigns",
    "to": 337
  }, {
    "from": 304,
    "label": "initializes",
    "to": 338
  }, {
    "from": 304,
    "label": "initializes",
    "to": 339
  }, {
    "from": 339,
    "label": "assigns",
    "to": 340
  }, {
    "from": 304,
    "label": "initializes",
    "to": 341
  }, {
    "from": 341,
    "label": "assigns",
    "to": 342
  }, {
    "from": 304,
    "label": "initializes",
    "to": 343
  }, {
    "from": 343,
    "label": "assigns",
    "to": 344
  }, {
    "from": 344,
    "label": "assigns",
    "to": 345
  }, {
    "from": 345,
    "label": "assigns",
    "to": 346
  }, {
    "from": 304,
    "label": "initializes",
    "to": 347
  }, {
    "from": 304,
    "label": "initializes",
    "to": 348
  }, {
    "from": 348,
    "label": "assigns",
    "to": 349
  }, {
    "from": 304,
    "label": "initializes",
    "to": 350
  }, {
    "from": 350,
    "label": "assigns",
    "to": 351
  }, {
    "from": 305,
    "label": "initializes",
    "to": 352
  }, {
    "from": 352,
    "label": "requires",
    "to": 275
  }, {
    "from": 305,
    "label": "initializes",
    "to": 353
  }, {
    "from": 353,
    "label": "requires",
    "to": 276
  }, {
    "from": 305,
    "label": "initializes",
    "to": 354
  }, {
    "from": 354,
    "label": "requires",
    "to": 274
  }, {
    "from": 305,
    "label": "initializes",
    "to": 355
  }, {
    "from": 355,
    "label": "requires",
    "to": 4
  }, {
    "from": 305,
    "label": "initializes",
    "to": 356
  }, {
    "from": 356,
    "label": "requires",
    "to": 1
  }, {
    "from": 305,
    "label": "initializes",
    "to": 357
  }, {
    "from": 357,
    "label": "requires",
    "to": 3
  }, {
    "from": 358,
    "label": "requires",
    "to": 2
  }, {
    "from": 341,
    "label": "contains",
    "to": 10
  }, {
    "from": 341,
    "label": "contains",
    "to": 14
  }, {
    "from": 341,
    "label": "contains",
    "to": 31
  }, {
    "from": 341,
    "label": "contains",
    "to": 39
  }, {
    "from": 341,
    "label": "contains",
    "to": 46
  }, {
    "from": 341,
    "label": "contains",
    "to": 52
  }, {
    "from": 341,
    "label": "contains",
    "to": 71
  }, {
    "from": 341,
    "label": "contains",
    "to": 81
  }, {
    "from": 341,
    "label": "contains",
    "to": 92
  }, {
    "from": 341,
    "label": "contains",
    "to": 103
  }, {
    "from": 341,
    "label": "contains",
    "to": 113
  }, {
    "from": 341,
    "label": "contains",
    "to": 117
  }, {
    "from": 341,
    "label": "contains",
    "to": 125
  }, {
    "from": 341,
    "label": "contains",
    "to": 134
  }, {
    "from": 341,
    "label": "contains",
    "to": 139
  }, {
    "from": 11,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 25,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 75,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 111,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 132,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 140,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 141,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 159,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 163,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 167,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 205,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 209,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 213,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 215,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 216,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 217,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 222,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 230,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 231,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 236,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 238,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 245,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 246,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 247,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 248,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 251,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 252,
    "label": "hasArgument",
    "to": 346
  }, {
    "from": 271,
    "label": "hasArgument",
    "to": 346
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "Inspector",
    "type": "module"
  }, {
    "id": 3,
    "text": "Viewer",
    "type": "module"
  }, {
    "id": 4,
    "text": "table",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function call(self, op, ...)\r\n\tself = self[\".thread\"]\r\n\tif self\r\n\t\tthen return op(self, ...)\r\n\t\telse return op(...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "self = self[\".thread\"]",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if self\r\n\t\tthen return op(self, ...)\r\n\t\telse return op(...)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function Command.see(...)\r\n\tself.viewer:write(...)\r\n\tself.viewer.output:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "self.viewer:write(...)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "self.viewer.output:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function Command.loc(which, ...)\r\n\tlocal level = self[\".level\"]\r\n\tif level then\r\n\t\tlocal index = 1\r\n\t\tlocal name, value\r\n\t\trepeat\r\n\t\t\tname, value = call(self, debug.getlocal, level, index)\r\n\t\t\tif not which and name then\r\n\t\t\t\tlocal viewer = self.viewer\r\n\t\t\t\tlocal output = viewer.output\r\n\t\t\t\toutput:write(name)\r\n\t\t\t\toutput:write(\" = \")\r\n\t\t\t\tviewer:write(value)\r\n\t\t\t\toutput:write(\"\\n\")\r\n\t\t\telseif name == which then\r\n\t\t\tif select(\"#\", ...) == 0\r\n\t\t\t\tthen return value\r\n\t\t\t\telse return call(self, debug.setlocal, level, index, (...))\r\n\t\t\tend\r\n\t\t\tend\r\n\t\t\tindex = index + 1\r\n\t\tuntil not name\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local level = self[\".level\"]",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if level then\r\n\t\tlocal index = 1\r\n\t\tlocal name, value\r\n\t\trepeat\r\n\t\t\tname, value = call(self, debug.getlocal, level, index)\r\n\t\t\tif not which and name then\r\n\t\t\t\tlocal viewer = self.viewer\r\n\t\t\t\tlocal output = viewer.output\r\n\t\t\t\toutput:write(name)\r\n\t\t\t\toutput:write(\" = \")\r\n\t\t\t\tviewer:write(value)\r\n\t\t\t\toutput:write(\"\\n\")\r\n\t\t\telseif name == which then\r\n\t\t\tif select(\"#\", ...) == 0\r\n\t\t\t\tthen return value\r\n\t\t\t\telse return call(self, debug.setlocal, level, index, (...))\r\n\t\t\tend\r\n\t\t\tend\r\n\t\t\tindex = index + 1\r\n\t\tuntil not name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local index = 1",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local name, value",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "repeat\r\n\t\t\tname, value = call(self, debug.getlocal, level, index)\r\n\t\t\tif not which and name then\r\n\t\t\t\tlocal viewer = self.viewer\r\n\t\t\t\tlocal output = viewer.output\r\n\t\t\t\toutput:write(name)\r\n\t\t\t\toutput:write(\" = \")\r\n\t\t\t\tviewer:write(value)\r\n\t\t\t\toutput:write(\"\\n\")\r\n\t\t\telseif name == which then\r\n\t\t\tif select(\"#\", ...) == 0\r\n\t\t\t\tthen return value\r\n\t\t\t\telse return call(self, debug.setlocal, level, index, (...))\r\n\t\t\tend\r\n\t\t\tend\r\n\t\t\tindex = index + 1\r\n\t\tuntil not name",
    "type": "statement:repeat"
  }, {
    "id": 20,
    "text": "name, value = call(self, debug.getlocal, level, index)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if not which and name then\r\n\t\t\t\tlocal viewer = self.viewer\r\n\t\t\t\tlocal output = viewer.output\r\n\t\t\t\toutput:write(name)\r\n\t\t\t\toutput:write(\" = \")\r\n\t\t\t\tviewer:write(value)\r\n\t\t\t\toutput:write(\"\\n\")\r\n\t\t\telseif name == which then\r\n\t\t\tif select(\"#\", ...) == 0\r\n\t\t\t\tthen return value\r\n\t\t\t\telse return call(self, debug.setlocal, level, index, (...))\r\n\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local viewer = self.viewer",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local output = viewer.output",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "output:write(name)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "output:write(\" = \")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "viewer:write(value)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "output:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "if select(\"#\", ...) == 0\r\n\t\t\t\tthen return value\r\n\t\t\t\telse return call(self, debug.setlocal, level, index, (...))\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "index = index + 1",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function Command.upv(which, ...)\r\n\tlocal func = self[\".current\"].func\r\n\tlocal index = 1\r\n\tlocal name, value\r\n\trepeat\r\n\t\tname, value = debug.getupvalue(func, index)\r\n\t\tif not which and name then\r\n\t\t\tlocal viewer = self.viewer\r\n\t\t\tlocal output = viewer.output\r\n\t\t\toutput:write(name,\" = \")\r\n\t\t\tviewer:write(value)\r\n\t\t\toutput:write(\"\\n\")\r\n\t\telseif name == which then\r\n\t\t\tif select(\"#\", ...) == 0\r\n\t\t\t\tthen return value\r\n\t\t\t\telse return debug.setupvalue(func, index, (...))\r\n\t\t\tend\r\n\t\tend\r\n\t\tindex = index + 1\r\n\tuntil not name\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local func = self[\".current\"].func",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "repeat\r\n\t\tname, value = debug.getupvalue(func, index)\r\n\t\tif not which and name then\r\n\t\t\tlocal viewer = self.viewer\r\n\t\t\tlocal output = viewer.output\r\n\t\t\toutput:write(name,\" = \")\r\n\t\t\tviewer:write(value)\r\n\t\t\toutput:write(\"\\n\")\r\n\t\telseif name == which then\r\n\t\t\tif select(\"#\", ...) == 0\r\n\t\t\t\tthen return value\r\n\t\t\t\telse return debug.setupvalue(func, index, (...))\r\n\t\t\tend\r\n\t\tend\r\n\t\tindex = index + 1\r\n\tuntil not name",
    "type": "statement:repeat"
  }, {
    "id": 34,
    "text": "name, value = debug.getupvalue(func, index)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if not which and name then\r\n\t\t\tlocal viewer = self.viewer\r\n\t\t\tlocal output = viewer.output\r\n\t\t\toutput:write(name,\" = \")\r\n\t\t\tviewer:write(value)\r\n\t\t\toutput:write(\"\\n\")\r\n\t\telseif name == which then\r\n\t\t\tif select(\"#\", ...) == 0\r\n\t\t\t\tthen return value\r\n\t\t\t\telse return debug.setupvalue(func, index, (...))\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "output:write(name,\" = \")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if select(\"#\", ...) == 0\r\n\t\t\t\tthen return value\r\n\t\t\t\telse return debug.setupvalue(func, index, (...))\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function Command.env(which, ...)\r\n\tlocal env = getfenv(self[\".current\"].func)\r\n\tif which then\r\n\t\tif select(\"#\", ...) == 0\r\n\t\t\tthen return env[which]\r\n\t\t\telse env[which] = (...)\r\n\t\tend\r\n\telse\r\n\t\tself.viewer:print(env)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local env = getfenv(self[\".current\"].func)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if which then\r\n\t\tif select(\"#\", ...) == 0\r\n\t\t\tthen return env[which]\r\n\t\t\telse env[which] = (...)\r\n\t\tend\r\n\telse\r\n\t\tself.viewer:print(env)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "if select(\"#\", ...) == 0\r\n\t\t\tthen return env[which]\r\n\t\t\telse env[which] = (...)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "env[which] = (...)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "self.viewer:print(env)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function Command.lua(which, ...)\r\n\tif which then\r\n\t\tif select(\"#\", ...) == 0\r\n\t\t\tthen return _G[which]\r\n\t\t\telse _G[which] = (...)\r\n\t\tend\r\n\telse\r\n\t\tself.viewer:print(_G)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "if which then\r\n\t\tif select(\"#\", ...) == 0\r\n\t\t\tthen return _G[which]\r\n\t\t\telse _G[which] = (...)\r\n\t\tend\r\n\telse\r\n\t\tself.viewer:print(_G)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "if select(\"#\", ...) == 0\r\n\t\t\tthen return _G[which]\r\n\t\t\telse _G[which] = (...)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "_G[which] = (...)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "self.viewer:print(_G)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function Command.goto(where)\r\n\tlocal kind = type(where)\r\n\tif kind == \"thread\" then\r\n\t\tlocal status = coroutine.status(where)\r\n\t\tif status ~= \"running\" and status ~= \"suspended\" then\r\n\t\t\terror(\"unable to inspect an inactive thread\")\r\n\t\tend\r\n\telseif kind ~= \"function\" then\r\n\t\terror(\"invalid inspection value, got `\"..kind..\"' (`function' or `thread' expected)\")\r\n\tend\r\n\r\n\tif self[\".level\"] then\r\n\t\trawset(self, #self+1, self[\".level\"])\r\n\t\trawset(self, #self+1, self[\".thread\"])\r\n\telse\r\n\t\trawset(self, #self+1, self[\".current\"].func)\r\n\tend\r\n\tif kind == \"thread\" then\r\n\t\tself[\".level\"] = 1\r\n\t\tself[\".thread\"] = where\r\n\t\tself[\".current\"] = call(self, debug.getinfo, self[\".level\"], infoflags)\r\n\telse\r\n\t\tself[\".level\"] = false\r\n\t\tself[\".thread\"] = false\r\n\t\tself[\".current\"] = call(self, debug.getinfo, where, infoflags)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local kind = type(where)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if kind == \"thread\" then\r\n\t\tlocal status = coroutine.status(where)\r\n\t\tif status ~= \"running\" and status ~= \"suspended\" then\r\n\t\t\terror(\"unable to inspect an inactive thread\")\r\n\t\tend\r\n\telseif kind ~= \"function\" then\r\n\t\terror(\"invalid inspection value, got `\"..kind..\"' (`function' or `thread' expected)\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local status = coroutine.status(where)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if status ~= \"running\" and status ~= \"suspended\" then\r\n\t\t\terror(\"unable to inspect an inactive thread\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "error(\"unable to inspect an inactive thread\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "error(\"invalid inspection value, got `\"..kind..\"' (`function' or `thread' expected)\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "if self[\".level\"] then\r\n\t\trawset(self, #self+1, self[\".level\"])\r\n\t\trawset(self, #self+1, self[\".thread\"])\r\n\telse\r\n\t\trawset(self, #self+1, self[\".current\"].func)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "rawset(self, #self+1, self[\".level\"])",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "rawset(self, #self+1, self[\".thread\"])",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "rawset(self, #self+1, self[\".current\"].func)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "if kind == \"thread\" then\r\n\t\tself[\".level\"] = 1\r\n\t\tself[\".thread\"] = where\r\n\t\tself[\".current\"] = call(self, debug.getinfo, self[\".level\"], infoflags)\r\n\telse\r\n\t\tself[\".level\"] = false\r\n\t\tself[\".thread\"] = false\r\n\t\tself[\".current\"] = call(self, debug.getinfo, where, infoflags)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "self[\".level\"] = 1",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "self[\".thread\"] = where",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "self[\".current\"] = call(self, debug.getinfo, self[\".level\"], infoflags)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "self[\".level\"] = false",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "self[\".thread\"] = false",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "self[\".current\"] = call(self, debug.getinfo, where, infoflags)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function Command.goup()\r\n\tlocal level = self[\".level\"]\r\n\tif level then\r\n\t\tlocal next = call(self, debug.getinfo, level + 1, infoflags)\r\n\t\tif next then\r\n\t\t\trawset(self, #self+1, -1)\r\n\t\t\tself[\".level\"] = level + 1\r\n\t\t\tself[\".current\"] = next\r\n\t\telse\r\n\t\t\terror(\"top level reached\")\r\n\t\tend\r\n\telse\r\n\t\terror(\"unable to go up in inactive functions\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "if level then\r\n\t\tlocal next = call(self, debug.getinfo, level + 1, infoflags)\r\n\t\tif next then\r\n\t\t\trawset(self, #self+1, -1)\r\n\t\t\tself[\".level\"] = level + 1\r\n\t\t\tself[\".current\"] = next\r\n\t\telse\r\n\t\t\terror(\"top level reached\")\r\n\t\tend\r\n\telse\r\n\t\terror(\"unable to go up in inactive functions\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "local next = call(self, debug.getinfo, level + 1, infoflags)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if next then\r\n\t\t\trawset(self, #self+1, -1)\r\n\t\t\tself[\".level\"] = level + 1\r\n\t\t\tself[\".current\"] = next\r\n\t\telse\r\n\t\t\terror(\"top level reached\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "rawset(self, #self+1, -1)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "self[\".level\"] = level + 1",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "self[\".current\"] = next",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "error(\"top level reached\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "error(\"unable to go up in inactive functions\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function Command.back()\r\n\tif #self > 0 then\r\n\t\tlocal kind = type(self[#self])\r\n\t\tif kind == \"number\" then\r\n\t\t\tself[\".level\"] = self[\".level\"] + self[#self]\r\n\t\t\tself[\".current\"] = call(self, debug.getinfo, self[\".level\"], infoflags)\r\n\t\t\tself[#self] = nil\r\n\t\telseif kind == \"function\" then\r\n\t\t\tself[\".level\"] = false\r\n\t\t\tself[\".thread\"] = false\r\n\t\t\tself[\".current\"] = call(self, debug.getinfo, self[#self], infoflags)\r\n\t\t\tself[#self] = nil\r\n\t\telse\r\n\t\t\tself[\".thread\"] = self[#self]\r\n\t\t\tself[#self] = nil\r\n\t\t\tself[\".level\"] = self[#self]\r\n\t\t\tself[#self] = nil\r\n\t\t\tself[\".current\"] = call(self, debug.getinfo, self[\".level\"], infoflags)\r\n\t\tend\r\n\telse\r\n\t\terror(\"no more backs avaliable\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "if #self > 0 then\r\n\t\tlocal kind = type(self[#self])\r\n\t\tif kind == \"number\" then\r\n\t\t\tself[\".level\"] = self[\".level\"] + self[#self]\r\n\t\t\tself[\".current\"] = call(self, debug.getinfo, self[\".level\"], infoflags)\r\n\t\t\tself[#self] = nil\r\n\t\telseif kind == \"function\" then\r\n\t\t\tself[\".level\"] = false\r\n\t\t\tself[\".thread\"] = false\r\n\t\t\tself[\".current\"] = call(self, debug.getinfo, self[#self], infoflags)\r\n\t\t\tself[#self] = nil\r\n\t\telse\r\n\t\t\tself[\".thread\"] = self[#self]\r\n\t\t\tself[#self] = nil\r\n\t\t\tself[\".level\"] = self[#self]\r\n\t\t\tself[#self] = nil\r\n\t\t\tself[\".current\"] = call(self, debug.getinfo, self[\".level\"], infoflags)\r\n\t\tend\r\n\telse\r\n\t\terror(\"no more backs avaliable\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "local kind = type(self[#self])",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if kind == \"number\" then\r\n\t\t\tself[\".level\"] = self[\".level\"] + self[#self]\r\n\t\t\tself[\".current\"] = call(self, debug.getinfo, self[\".level\"], infoflags)\r\n\t\t\tself[#self] = nil\r\n\t\telseif kind == \"function\" then\r\n\t\t\tself[\".level\"] = false\r\n\t\t\tself[\".thread\"] = false\r\n\t\t\tself[\".current\"] = call(self, debug.getinfo, self[#self], infoflags)\r\n\t\t\tself[#self] = nil\r\n\t\telse\r\n\t\t\tself[\".thread\"] = self[#self]\r\n\t\t\tself[#self] = nil\r\n\t\t\tself[\".level\"] = self[#self]\r\n\t\t\tself[#self] = nil\r\n\t\t\tself[\".current\"] = call(self, debug.getinfo, self[\".level\"], infoflags)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "self[\".level\"] = self[\".level\"] + self[#self]",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "self[#self] = nil",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "self[\".current\"] = call(self, debug.getinfo, self[#self], infoflags)",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "self[\".thread\"] = self[#self]",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "self[\".level\"] = self[#self]",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "error(\"no more backs avaliable\")",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function Command.hist()\r\n\tlocal index = #self\r\n\twhile self[index] ~= nil do\r\n\t\tlocal kind = type(self[index])\r\n\t\tif kind == \"number\" then\r\n\t\t\tself.viewer:print(\"  up one level\")\r\n\t\t\tindex = index - 1\r\n\t\telseif kind == \"function\" then\r\n\t\t\tself.viewer:print(\"  left inactive \",self[index])\r\n\t\t\tindex = index - 1\r\n\t\telse\r\n\t\t\tself.viewer:print(\"  left \",self[index] or \"main thread\",\" at level \",self[index-1])\r\n\t\t\tindex = index - 2\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "local index = #self",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "while self[index] ~= nil do\r\n\t\tlocal kind = type(self[index])\r\n\t\tif kind == \"number\" then\r\n\t\t\tself.viewer:print(\"  up one level\")\r\n\t\t\tindex = index - 1\r\n\t\telseif kind == \"function\" then\r\n\t\t\tself.viewer:print(\"  left inactive \",self[index])\r\n\t\t\tindex = index - 1\r\n\t\telse\r\n\t\t\tself.viewer:print(\"  left \",self[index] or \"main thread\",\" at level \",self[index-1])\r\n\t\t\tindex = index - 2\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 95,
    "text": "local kind = type(self[index])",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if kind == \"number\" then\r\n\t\t\tself.viewer:print(\"  up one level\")\r\n\t\t\tindex = index - 1\r\n\t\telseif kind == \"function\" then\r\n\t\t\tself.viewer:print(\"  left inactive \",self[index])\r\n\t\t\tindex = index - 1\r\n\t\telse\r\n\t\t\tself.viewer:print(\"  left \",self[index] or \"main thread\",\" at level \",self[index-1])\r\n\t\t\tindex = index - 2\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "self.viewer:print(\"  up one level\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "index = index - 1",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "self.viewer:print(\"  left inactive \",self[index])",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "self.viewer:print(\"  left \",self[index] or \"main thread\",\" at level \",self[index-1])",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "index = index - 2",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function Command.curr()\r\n\tlocal viewer = self.viewer\r\n\tlocal level  = self[\".level\"]\r\n\tif level then\r\n\t\tlocal thread = self[\".thread\"]\r\n\t\tif thread\r\n\t\t\tthen viewer:write(thread)\r\n\t\t\telse viewer.output:write(\"main thread\")\r\n\t\tend\r\n\t\tviewer:print(\", level \", call(self, debug.traceback, level, level))\r\n\telse\r\n\t\tviewer:print(\"inactive function \",self[\".current\"].func)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local level  = self[\".level\"]",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if level then\r\n\t\tlocal thread = self[\".thread\"]\r\n\t\tif thread\r\n\t\t\tthen viewer:write(thread)\r\n\t\t\telse viewer.output:write(\"main thread\")\r\n\t\tend\r\n\t\tviewer:print(\", level \", call(self, debug.traceback, level, level))\r\n\telse\r\n\t\tviewer:print(\"inactive function \",self[\".current\"].func)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "local thread = self[\".thread\"]",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "if thread\r\n\t\t\tthen viewer:write(thread)\r\n\t\t\telse viewer.output:write(\"main thread\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "viewer:write(thread)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "viewer.output:write(\"main thread\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "viewer:print(\", level \", call(self, debug.traceback, level, level))",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "viewer:print(\"inactive function \",self[\".current\"].func)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function Command.done()\r\n\twhile #self > 0 do\r\n\t\tself[#self] = nil\r\n\tend\r\n\tself[\".thread\"] = false\r\n\tself[\".level\"] = false\r\n\tself[\".current\"] = false\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "while #self > 0 do\r\n\t\tself[#self] = nil\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 115,
    "text": "self[\".current\"] = false",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function Command.step(level)\r\n\tif level == \"in\"  then level = -1\r\n\telseif level == \"out\" then level = 1\r\n\telse level = 0 end\r\n\trawset(self, \".hook\", level)\r\n\tCommand.done()\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "if level == \"in\"  then level = -1\r\n\telseif level == \"out\" then level = 1\r\n\telse level = 0 end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "level = -1",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "level = 1",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "level = 0",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "rawset(self, \".hook\", level)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "Command.done()",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function Command.lsbp()\r\n\tlocal breaks = {}\r\n\tfor line, files in pairs(self.breaks) do\r\n\t\tfor file in pairs(files) do\r\n\t\t\tbreaks[#breaks+1] = file..\":\"..line\r\n\t\tend\r\n\tend\r\n\ttable.sort(breaks)\r\n\tfor _, bp in ipairs(breaks) do\r\n\t\tself.viewer:print(bp)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local breaks = {}",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "for line, files in pairs(self.breaks) do\r\n\t\tfor file in pairs(files) do\r\n\t\t\tbreaks[#breaks+1] = file..\":\"..line\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 128,
    "text": "for file in pairs(files) do\r\n\t\t\tbreaks[#breaks+1] = file..\":\"..line\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 129,
    "text": "breaks[#breaks+1] = file..\":\"..line",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "table.sort(breaks)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "for _, bp in ipairs(breaks) do\r\n\t\tself.viewer:print(bp)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 132,
    "text": "self.viewer:print(bp)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function Command.mkbp(file, line)\r\n\tassert(type(file) == \"string\", \"usage: mkbp(<file>, <line>)\")\r\n\tassert(type(line) == \"number\", \"usage: mkbp(<file>, <line>)\")\r\n\tself.breaks[line][file] = true\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "assert(type(file) == \"string\", \"usage: mkbp(<file>, <line>)\")",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "assert(type(line) == \"number\", \"usage: mkbp(<file>, <line>)\")",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "self.breaks[line][file] = true",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function Command.rmbp(file, line)\r\n\tassert(type(file) == \"string\", \"usage: rmbp(<file>, <line>)\")\r\n\tassert(type(line) == \"number\", \"usage: rmbp(<file>, <line>)\")\r\n\tlocal files = rawget(self.breaks, line)\r\n\tif files then\r\n\t\tfiles[file] = nil\r\n\t\tif next(files) == nil then\r\n\t\t\tself.breaks[line] = nil\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "assert(type(file) == \"string\", \"usage: rmbp(<file>, <line>)\")",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "assert(type(line) == \"number\", \"usage: rmbp(<file>, <line>)\")",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "local files = rawget(self.breaks, line)",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "if files then\r\n\t\tfiles[file] = nil\r\n\t\tif next(files) == nil then\r\n\t\t\tself.breaks[line] = nil\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "files[file] = nil",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "if next(files) == nil then\r\n\t\t\tself.breaks[line] = nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 146,
    "text": "self.breaks[line] = nil",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function __init(self, object)\r\n\tself = oo.rawnew(self, object)\r\n\t\r\n\tself.breaks = setmetatable(self.breaks or {}, BreaksListMeta)\r\n\t\r\n\tfunction self.breakhook(event, line)\r\n\t\tlocal level = rawget(self, \"break.level\")\r\n\t\tif event == \"line\" then\r\n\t\t\t-- check for break points\r\n\t\t\tlocal files = rawget(self.breaks, line)\r\n\t\t\tif files then\r\n\t\t\t\tlocal source = debug.getinfo(2, \"S\").source\r\n\t\t\t\tfor file in pairs(files) do\r\n\t\t\t\t\tif source:find(file, #source - #file + 1, true) then\r\n\t\t\t\t\t\tlevel = 0\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif level == nil or level > 0 then return end\r\n\t\t\tself:console(2)\r\n\t\t\tlevel = rawget(self, \".hook\")\r\n\t\t\trawset(self, \".hook\", nil)\r\n\t\t\tif level == nil then self:restorehook() end\r\n\t\telseif level ~= nil then\r\n\t\t\tif event == \"call\" then\r\n\t\t\t\tlevel = level + 1\r\n\t\t\telse\r\n\t\t\t\tlevel = level - 1\r\n\t\t\tend\r\n\t\tend\r\n\t\trawset(self, \"break.level\", level)\r\n\t\t\r\n\t\tlocal hookbak = rawget(self, \"hook.bak\")\r\n\t\tif hookbak then\r\n\t\t\treturn hookbak(event, line)\r\n\t\tend\r\n\tend\r\n\t\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "self = oo.rawnew(self, object)",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "self.breaks = setmetatable(self.breaks or {}, BreaksListMeta)",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "function self.breakhook(event, line)\r\n\t\tlocal level = rawget(self, \"break.level\")\r\n\t\tif event == \"line\" then\r\n\t\t\t-- check for break points\r\n\t\t\tlocal files = rawget(self.breaks, line)\r\n\t\t\tif files then\r\n\t\t\t\tlocal source = debug.getinfo(2, \"S\").source\r\n\t\t\t\tfor file in pairs(files) do\r\n\t\t\t\t\tif source:find(file, #source - #file + 1, true) then\r\n\t\t\t\t\t\tlevel = 0\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif level == nil or level > 0 then return end\r\n\t\t\tself:console(2)\r\n\t\t\tlevel = rawget(self, \".hook\")\r\n\t\t\trawset(self, \".hook\", nil)\r\n\t\t\tif level == nil then self:restorehook() end\r\n\t\telseif level ~= nil then\r\n\t\t\tif event == \"call\" then\r\n\t\t\t\tlevel = level + 1\r\n\t\t\telse\r\n\t\t\t\tlevel = level - 1\r\n\t\t\tend\r\n\t\tend\r\n\t\trawset(self, \"break.level\", level)\r\n\t\t\r\n\t\tlocal hookbak = rawget(self, \"hook.bak\")\r\n\t\tif hookbak then\r\n\t\t\treturn hookbak(event, line)\r\n\t\tend\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 152,
    "text": "local level = rawget(self, \"break.level\")",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "if event == \"line\" then\r\n\t\t\t-- check for break points\r\n\t\t\tlocal files = rawget(self.breaks, line)\r\n\t\t\tif files then\r\n\t\t\t\tlocal source = debug.getinfo(2, \"S\").source\r\n\t\t\t\tfor file in pairs(files) do\r\n\t\t\t\t\tif source:find(file, #source - #file + 1, true) then\r\n\t\t\t\t\t\tlevel = 0\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif level == nil or level > 0 then return end\r\n\t\t\tself:console(2)\r\n\t\t\tlevel = rawget(self, \".hook\")\r\n\t\t\trawset(self, \".hook\", nil)\r\n\t\t\tif level == nil then self:restorehook() end\r\n\t\telseif level ~= nil then\r\n\t\t\tif event == \"call\" then\r\n\t\t\t\tlevel = level + 1\r\n\t\t\telse\r\n\t\t\t\tlevel = level - 1\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 154,
    "text": "if files then\r\n\t\t\t\tlocal source = debug.getinfo(2, \"S\").source\r\n\t\t\t\tfor file in pairs(files) do\r\n\t\t\t\t\tif source:find(file, #source - #file + 1, true) then\r\n\t\t\t\t\t\tlevel = 0\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "local source = debug.getinfo(2, \"S\").source",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "for file in pairs(files) do\r\n\t\t\t\t\tif source:find(file, #source - #file + 1, true) then\r\n\t\t\t\t\t\tlevel = 0\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 157,
    "text": "if source:find(file, #source - #file + 1, true) then\r\n\t\t\t\t\t\tlevel = 0\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "if level == nil or level > 0 then return end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "self:console(2)",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "level = rawget(self, \".hook\")",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "rawset(self, \".hook\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "if level == nil then self:restorehook() end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "self:restorehook()",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "if event == \"call\" then\r\n\t\t\t\tlevel = level + 1\r\n\t\t\telse\r\n\t\t\t\tlevel = level - 1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "level = level + 1",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "level = level - 1",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "rawset(self, \"break.level\", level)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "local hookbak = rawget(self, \"hook.bak\")",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "if hookbak then\r\n\t\t\treturn hookbak(event, line)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 171,
    "text": "function self.breakhook(event, line)\r\n\t\tlocal level = rawget(self, \"break.level\")\r\n\t\tif event == \"line\" then\r\n\t\t\t-- check for break points\r\n\t\t\tlocal files = rawget(self.breaks, line)\r\n\t\t\tif files then\r\n\t\t\t\tlocal source = debug.getinfo(2, \"S\").source\r\n\t\t\t\tfor file in pairs(files) do\r\n\t\t\t\t\tif source:find(file, #source - #file + 1, true) then\r\n\t\t\t\t\t\tlevel = 0\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tif level == nil or level > 0 then return end\r\n\t\t\tself:console(2)\r\n\t\t\tlevel = rawget(self, \".hook\")\r\n\t\t\trawset(self, \".hook\", nil)\r\n\t\t\tif level == nil then self:restorehook() end\r\n\t\telseif level ~= nil then\r\n\t\t\tif event == \"call\" then\r\n\t\t\t\tlevel = level + 1\r\n\t\t\telse\r\n\t\t\t\tlevel = level - 1\r\n\t\t\tend\r\n\t\tend\r\n\t\trawset(self, \"break.level\", level)\r\n\t\t\r\n\t\tlocal hookbak = rawget(self, \"hook.bak\")\r\n\t\tif hookbak then\r\n\t\t\treturn hookbak(event, line)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function __index(inspector, field)\r\n\tif rawget(_M, field) ~= nil then\r\n\t\treturn rawget(_M, field)\r\n\tend\r\n\t\r\n\tif Command[field] then\r\n\t\tself = inspector\r\n\t\treturn Command[field]\r\n\tend\r\n\r\n\tlocal name, value\r\n\t\r\n\tlocal func = rawget(inspector, \".level\")\r\n\tif func then\r\n\t\tlocal index = 1\r\n\t\trepeat\r\n\t\t\tname, value = call(inspector, debug.getlocal, func, index)\r\n\t\t\tif name == field\r\n\t\t\t\tthen return value\r\n\t\t\t\telse index = index + 1\r\n\t\t\tend\r\n\t\tuntil not name\r\n\tend\r\n\t\r\n\tlocal func = rawget(inspector, \".current\")\r\n\tif func then\r\n\t\tfunc = func.func\r\n\t\tlocal index = 1\r\n\t\trepeat\r\n\t\t\tname, value = debug.getupvalue(func, index)\r\n\t\t\tif name == field\r\n\t\t\t\tthen return value\r\n\t\t\t\telse index = index + 1\r\n\t\t\tend\r\n\t\tuntil not name\r\n\t\t\r\n\t\tvalue = getfenv(func)[field]\r\n\t\tif value ~= nil then return value end\r\n\t\t\r\n\t\treturn _G[field]\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 174,
    "text": "if rawget(_M, field) ~= nil then\r\n\t\treturn rawget(_M, field)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "if Command[field] then\r\n\t\tself = inspector\r\n\t\treturn Command[field]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 176,
    "text": "self = inspector",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "local func = rawget(inspector, \".level\")",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if func then\r\n\t\tlocal index = 1\r\n\t\trepeat\r\n\t\t\tname, value = call(inspector, debug.getlocal, func, index)\r\n\t\t\tif name == field\r\n\t\t\t\tthen return value\r\n\t\t\t\telse index = index + 1\r\n\t\t\tend\r\n\t\tuntil not name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "repeat\r\n\t\t\tname, value = call(inspector, debug.getlocal, func, index)\r\n\t\t\tif name == field\r\n\t\t\t\tthen return value\r\n\t\t\t\telse index = index + 1\r\n\t\t\tend\r\n\t\tuntil not name",
    "type": "statement:repeat"
  }, {
    "id": 180,
    "text": "name, value = call(inspector, debug.getlocal, func, index)",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "if name == field\r\n\t\t\t\tthen return value\r\n\t\t\t\telse index = index + 1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "local func = rawget(inspector, \".current\")",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "if func then\r\n\t\tfunc = func.func\r\n\t\tlocal index = 1\r\n\t\trepeat\r\n\t\t\tname, value = debug.getupvalue(func, index)\r\n\t\t\tif name == field\r\n\t\t\t\tthen return value\r\n\t\t\t\telse index = index + 1\r\n\t\t\tend\r\n\t\tuntil not name\r\n\t\t\r\n\t\tvalue = getfenv(func)[field]\r\n\t\tif value ~= nil then return value end\r\n\t\t\r\n\t\treturn _G[field]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "func = func.func",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "repeat\r\n\t\t\tname, value = debug.getupvalue(func, index)\r\n\t\t\tif name == field\r\n\t\t\t\tthen return value\r\n\t\t\t\telse index = index + 1\r\n\t\t\tend\r\n\t\tuntil not name",
    "type": "statement:repeat"
  }, {
    "id": 186,
    "text": "value = getfenv(func)[field]",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "if value ~= nil then return value end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function __newindex(inspector, field, value)\r\n\tif rawget(_M, field) == nil then\r\n\t\tlocal name\r\n\t\tlocal index\r\n\t\tlocal func = inspector[\".level\"]\r\n\t\tif func then\r\n\t\t\tindex = 1\r\n\t\t\trepeat\r\n\t\t\t\tname = call(inspector, debug.getlocal, func, index)\r\n\t\t\t\tif name == field\r\n\t\t\t\t\tthen return call(inspector, debug.setlocal, func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend\r\n\t\t\tuntil not name\r\n\t\tend\r\n\t\r\n\t\tfunc = inspector[\".current\"]\r\n\t\tif func then\r\n\t\t\tfunc = func.func\r\n\t\t\tindex = 1\r\n\t\t\trepeat\r\n\t\t\t\tname = debug.getupvalue(func, index)\r\n\t\t\t\tif name == field\r\n\t\t\t\t\tthen return debug.setupvalue(func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend\r\n\t\t\tuntil not name\r\n\t\t\t\r\n\t\t\tgetfenv(func)[field] = value\r\n\t\t\treturn\r\n\t\tend\r\n\tend\r\n\trawset(inspector, field, value)\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "if rawget(_M, field) == nil then\r\n\t\tlocal name\r\n\t\tlocal index\r\n\t\tlocal func = inspector[\".level\"]\r\n\t\tif func then\r\n\t\t\tindex = 1\r\n\t\t\trepeat\r\n\t\t\t\tname = call(inspector, debug.getlocal, func, index)\r\n\t\t\t\tif name == field\r\n\t\t\t\t\tthen return call(inspector, debug.setlocal, func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend\r\n\t\t\tuntil not name\r\n\t\tend\r\n\t\r\n\t\tfunc = inspector[\".current\"]\r\n\t\tif func then\r\n\t\t\tfunc = func.func\r\n\t\t\tindex = 1\r\n\t\t\trepeat\r\n\t\t\t\tname = debug.getupvalue(func, index)\r\n\t\t\t\tif name == field\r\n\t\t\t\t\tthen return debug.setupvalue(func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend\r\n\t\t\tuntil not name\r\n\t\t\t\r\n\t\t\tgetfenv(func)[field] = value\r\n\t\t\treturn\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 191,
    "text": "local name",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "local index",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "local func = inspector[\".level\"]",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "if func then\r\n\t\t\tindex = 1\r\n\t\t\trepeat\r\n\t\t\t\tname = call(inspector, debug.getlocal, func, index)\r\n\t\t\t\tif name == field\r\n\t\t\t\t\tthen return call(inspector, debug.setlocal, func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend\r\n\t\t\tuntil not name\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "index = 1",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "repeat\r\n\t\t\t\tname = call(inspector, debug.getlocal, func, index)\r\n\t\t\t\tif name == field\r\n\t\t\t\t\tthen return call(inspector, debug.setlocal, func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend\r\n\t\t\tuntil not name",
    "type": "statement:repeat"
  }, {
    "id": 197,
    "text": "name = call(inspector, debug.getlocal, func, index)",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "if name == field\r\n\t\t\t\t\tthen return call(inspector, debug.setlocal, func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "func = inspector[\".current\"]",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "if func then\r\n\t\t\tfunc = func.func\r\n\t\t\tindex = 1\r\n\t\t\trepeat\r\n\t\t\t\tname = debug.getupvalue(func, index)\r\n\t\t\t\tif name == field\r\n\t\t\t\t\tthen return debug.setupvalue(func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend\r\n\t\t\tuntil not name\r\n\t\t\t\r\n\t\t\tgetfenv(func)[field] = value\r\n\t\t\treturn\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "repeat\r\n\t\t\t\tname = debug.getupvalue(func, index)\r\n\t\t\t\tif name == field\r\n\t\t\t\t\tthen return debug.setupvalue(func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend\r\n\t\t\tuntil not name",
    "type": "statement:repeat"
  }, {
    "id": 202,
    "text": "name = debug.getupvalue(func, index)",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "if name == field\r\n\t\t\t\t\tthen return debug.setupvalue(func, index, value)\r\n\t\t\t\t\telse index = index + 1\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "getfenv(func)[field] = value",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "rawset(inspector, field, value)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 207,
    "text": "local function results(self, success, ...)\r\n\tif not success then\r\n\t\tio.stderr:write(..., \"\\n\")\r\n\telseif select(\"#\", ...) > 0 then\r\n\t\tself.viewer:write(...)\r\n\t\tself.viewer.output:write(\"\\n\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "if not success then\r\n\t\tio.stderr:write(..., \"\\n\")\r\n\telseif select(\"#\", ...) > 0 then\r\n\t\tself.viewer:write(...)\r\n\t\tself.viewer.output:write(\"\\n\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "io.stderr:write(..., \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function console(self, level)\r\n\tif self.active then\r\n\t\tassert(not rawget(self, \".current\"),\r\n\t\t\t\"cannot invoke inspector operation from the console\")\r\n\t\tlevel = level or 1\r\n\t\trawset(self, \".thread\", coroutine.running() or false)\r\n\t\trawset(self, \".current\", call(self, debug.getinfo, level + 2, infoflags)) -- call, stop\r\n\t\trawset(self, \".level\", level + 5) -- call, command, <inspection>, xpcall, stop\r\n\t\tlocal viewer = self.viewer\r\n\t\tlocal input = self.input\r\n\t\tlocal cmd, errmsg\r\n\t\trepeat\r\n\t\t\tlocal info = self[\".current\"]\r\n\t\t\tviewer.output:write(\r\n\t\t\t\tinfo.short_src or info.what,\r\n\t\t\t\t\":\",\r\n\t\t\t\t(info.currentline ~= -1 and info.currentline) or\r\n\t\t\t\t(info.linedefined ~= -1 and info.linedefined) or \"?\",\r\n\t\t\t\t\" \",\r\n\t\t\t\tinfo.namewhat,\r\n\t\t\t\tinfo.namewhat == \"\" and \"\" or \" \",\r\n\t\t\t\tinfo.name or viewer:tostring(info.func),\r\n\t\t\t\t\"> \"\r\n\t\t\t)\r\n\t\t\tcmd = assert(input:read())\r\n\t\t\tlocal short = cmd:match(\"^%s*([%a_][%w_]*)%s*$\")\r\n\t\t\tif short and Command[short]\r\n\t\t\t\tthen cmd = short..\"()\"\r\n\t\t\t\telse cmd = cmd:gsub(\"^%s*=\", \"return \")\r\n\t\t\tend\r\n\t\t\tcmd, errmsg = loadstring(cmd, \"inspection\")\r\n\t\t\tif cmd then\r\n\t\t\t\tsetfenv(cmd, self)\r\n\t\t\t\tresults(self, xpcall(cmd, debug.traceback))\r\n\t\t\telse\r\n\t\t\t\tviewer.output:write(errmsg, \"\\n\")\r\n\t\t\tend\r\n\t\tuntil not rawget(self, \".current\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 212,
    "text": "if self.active then\r\n\t\tassert(not rawget(self, \".current\"),\r\n\t\t\t\"cannot invoke inspector operation from the console\")\r\n\t\tlevel = level or 1\r\n\t\trawset(self, \".thread\", coroutine.running() or false)\r\n\t\trawset(self, \".current\", call(self, debug.getinfo, level + 2, infoflags)) -- call, stop\r\n\t\trawset(self, \".level\", level + 5) -- call, command, <inspection>, xpcall, stop\r\n\t\tlocal viewer = self.viewer\r\n\t\tlocal input = self.input\r\n\t\tlocal cmd, errmsg\r\n\t\trepeat\r\n\t\t\tlocal info = self[\".current\"]\r\n\t\t\tviewer.output:write(\r\n\t\t\t\tinfo.short_src or info.what,\r\n\t\t\t\t\":\",\r\n\t\t\t\t(info.currentline ~= -1 and info.currentline) or\r\n\t\t\t\t(info.linedefined ~= -1 and info.linedefined) or \"?\",\r\n\t\t\t\t\" \",\r\n\t\t\t\tinfo.namewhat,\r\n\t\t\t\tinfo.namewhat == \"\" and \"\" or \" \",\r\n\t\t\t\tinfo.name or viewer:tostring(info.func),\r\n\t\t\t\t\"> \"\r\n\t\t\t)\r\n\t\t\tcmd = assert(input:read())\r\n\t\t\tlocal short = cmd:match(\"^%s*([%a_][%w_]*)%s*$\")\r\n\t\t\tif short and Command[short]\r\n\t\t\t\tthen cmd = short..\"()\"\r\n\t\t\t\telse cmd = cmd:gsub(\"^%s*=\", \"return \")\r\n\t\t\tend\r\n\t\t\tcmd, errmsg = loadstring(cmd, \"inspection\")\r\n\t\t\tif cmd then\r\n\t\t\t\tsetfenv(cmd, self)\r\n\t\t\t\tresults(self, xpcall(cmd, debug.traceback))\r\n\t\t\telse\r\n\t\t\t\tviewer.output:write(errmsg, \"\\n\")\r\n\t\t\tend\r\n\t\tuntil not rawget(self, \".current\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "assert(not rawget(self, \".current\"),\r\n\t\t\t\"cannot invoke inspector operation from the console\")",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "level = level or 1",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "rawset(self, \".thread\", coroutine.running() or false)",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "rawset(self, \".current\", call(self, debug.getinfo, level + 2, infoflags))",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "rawset(self, \".level\", level + 5)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "local input = self.input",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "local cmd, errmsg",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "repeat\r\n\t\t\tlocal info = self[\".current\"]\r\n\t\t\tviewer.output:write(\r\n\t\t\t\tinfo.short_src or info.what,\r\n\t\t\t\t\":\",\r\n\t\t\t\t(info.currentline ~= -1 and info.currentline) or\r\n\t\t\t\t(info.linedefined ~= -1 and info.linedefined) or \"?\",\r\n\t\t\t\t\" \",\r\n\t\t\t\tinfo.namewhat,\r\n\t\t\t\tinfo.namewhat == \"\" and \"\" or \" \",\r\n\t\t\t\tinfo.name or viewer:tostring(info.func),\r\n\t\t\t\t\"> \"\r\n\t\t\t)\r\n\t\t\tcmd = assert(input:read())\r\n\t\t\tlocal short = cmd:match(\"^%s*([%a_][%w_]*)%s*$\")\r\n\t\t\tif short and Command[short]\r\n\t\t\t\tthen cmd = short..\"()\"\r\n\t\t\t\telse cmd = cmd:gsub(\"^%s*=\", \"return \")\r\n\t\t\tend\r\n\t\t\tcmd, errmsg = loadstring(cmd, \"inspection\")\r\n\t\t\tif cmd then\r\n\t\t\t\tsetfenv(cmd, self)\r\n\t\t\t\tresults(self, xpcall(cmd, debug.traceback))\r\n\t\t\telse\r\n\t\t\t\tviewer.output:write(errmsg, \"\\n\")\r\n\t\t\tend\r\n\t\tuntil not rawget(self, \".current\")",
    "type": "statement:repeat"
  }, {
    "id": 221,
    "text": "local info = self[\".current\"]",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "viewer.output:write(\r\n\t\t\t\tinfo.short_src or info.what,\r\n\t\t\t\t\":\",\r\n\t\t\t\t(info.currentline ~= -1 and info.currentline) or\r\n\t\t\t\t(info.linedefined ~= -1 and info.linedefined) or \"?\",\r\n\t\t\t\t\" \",\r\n\t\t\t\tinfo.namewhat,\r\n\t\t\t\tinfo.namewhat == \"\" and \"\" or \" \",\r\n\t\t\t\tinfo.name or viewer:tostring(info.func),\r\n\t\t\t\t\"> \"\r\n\t\t\t)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "cmd = assert(input:read())",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "local short = cmd:match(\"^%s*([%a_][%w_]*)%s*$\")",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "if short and Command[short]\r\n\t\t\t\tthen cmd = short..\"()\"\r\n\t\t\t\telse cmd = cmd:gsub(\"^%s*=\", \"return \")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "cmd = short..\"()\"",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "cmd = cmd:gsub(\"^%s*=\", \"return \")",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "cmd, errmsg = loadstring(cmd, \"inspection\")",
    "type": "statement:assign"
  }, {
    "id": 229,
    "text": "if cmd then\r\n\t\t\t\tsetfenv(cmd, self)\r\n\t\t\t\tresults(self, xpcall(cmd, debug.traceback))\r\n\t\t\telse\r\n\t\t\t\tviewer.output:write(errmsg, \"\\n\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "setfenv(cmd, self)",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "results(self, xpcall(cmd, debug.traceback))",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "viewer.output:write(errmsg, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function restorehook(self)\r\n\tif next(self.breaks) == nil then\r\n\t\tdebug.sethook(\r\n\t\t\trawget(self, \"hook.bak\") or nil,\r\n\t\t\trawget(self, \"mask.bak\"),\r\n\t\t\trawget(self, \"count.bak\")\r\n\t\t)\r\n\t\trawset(self, \"hook.bak\", nil)\r\n\t\trawset(self, \"mask.bak\", nil)\r\n\t\trawset(self, \"count.bak\", nil)\r\n\t\trawset(self, \"break.level\", nil)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "if next(self.breaks) == nil then\r\n\t\tdebug.sethook(\r\n\t\t\trawget(self, \"hook.bak\") or nil,\r\n\t\t\trawget(self, \"mask.bak\"),\r\n\t\t\trawget(self, \"count.bak\")\r\n\t\t)\r\n\t\trawset(self, \"hook.bak\", nil)\r\n\t\trawset(self, \"mask.bak\", nil)\r\n\t\trawset(self, \"count.bak\", nil)\r\n\t\trawset(self, \"break.level\", nil)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "debug.sethook(\r\n\t\t\trawget(self, \"hook.bak\") or nil,\r\n\t\t\trawget(self, \"mask.bak\"),\r\n\t\t\trawget(self, \"count.bak\")\r\n\t\t)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "rawset(self, \"hook.bak\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "rawset(self, \"mask.bak\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "rawset(self, \"count.bak\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "rawset(self, \"break.level\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 242,
    "text": "function setuphook(self)\r\n\tif rawget(self, \"hook.bak\") ~= self.breakhook then\r\n\t\tlocal hook, mask, count = debug.gethook()\r\n\t\trawset(self, \"hook.bak\", hook or false)\r\n\t\trawset(self, \"mask.bak\", mask)\r\n\t\trawset(self, \"count.bak\", count)\r\n\t\tdebug.sethook(self.breakhook, \"crl\", count)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 243,
    "text": "if rawget(self, \"hook.bak\") ~= self.breakhook then\r\n\t\tlocal hook, mask, count = debug.gethook()\r\n\t\trawset(self, \"hook.bak\", hook or false)\r\n\t\trawset(self, \"mask.bak\", mask)\r\n\t\trawset(self, \"count.bak\", count)\r\n\t\tdebug.sethook(self.breakhook, \"crl\", count)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "local hook, mask, count = debug.gethook()",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "rawset(self, \"hook.bak\", hook or false)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "rawset(self, \"mask.bak\", mask)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "rawset(self, \"count.bak\", count)",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "debug.sethook(self.breakhook, \"crl\", count)",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function stop(self, level)\r\n\trawset(self, \"break.level\", level and level+2 or 3)\r\n\tself:setuphook()\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "rawset(self, \"break.level\", level and level+2 or 3)",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "self:setuphook()",
    "type": "statement:functioncall"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "function setbreak(self, file, line)\r\n\tself.breaks[line][file] = true\r\n\tself:setuphook()\r\nend",
    "type": "function"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "function removebreak(self, file, line)\r\n\tlocal files = rawget(self.breaks, line)\r\n\tif files then\r\n\t\tfiles[file] = nil\r\n\t\tif next(files) == nil then\r\n\t\t\tself.breaks[line] = nil\r\n\t\t\tif rawget(self, \"break.level\") == nil then\r\n\t\t\t\tself:restorehook()\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 257,
    "text": "if files then\r\n\t\tfiles[file] = nil\r\n\t\tif next(files) == nil then\r\n\t\t\tself.breaks[line] = nil\r\n\t\t\tif rawget(self, \"break.level\") == nil then\r\n\t\t\t\tself:restorehook()\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 258,
    "text": "if next(files) == nil then\r\n\t\t\tself.breaks[line] = nil\r\n\t\t\tif rawget(self, \"break.level\") == nil then\r\n\t\t\t\tself:restorehook()\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 259,
    "text": "if rawget(self, \"break.level\") == nil then\r\n\t\t\t\tself:restorehook()\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "local function ibreaks(self, file, line)\r\n\tlocal files = rawget(self.breaks, line)\r\n\twhile files do\r\n\t\tfile = next(files, file)\r\n\t\tif file then\r\n\t\t\treturn file, line\r\n\t\tend\r\n\t\tline, files = next(self.breaks, line)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 262,
    "text": "while files do\r\n\t\tfile = next(files, file)\r\n\t\tif file then\r\n\t\t\treturn file, line\r\n\t\tend\r\n\t\tline, files = next(self.breaks, line)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 263,
    "text": "file = next(files, file)",
    "type": "statement:assign"
  }, {
    "id": 264,
    "text": "if file then\r\n\t\t\treturn file, line\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "line, files = next(self.breaks, line)",
    "type": "statement:assign"
  }, {
    "id": 266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 267,
    "text": "function allbreaks(self)\r\n\treturn ibreaks, self, nil, next(self.breaks)\r\nend",
    "type": "function"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function(self, line)\r\n\t\tlocal files = {}\r\n\t\trawset(self, line, files)\r\n\t\treturn files\r\n\tend",
    "type": "function"
  }, {
    "id": 270,
    "text": "local files = {}",
    "type": "statement:localassign"
  }, {
    "id": 271,
    "text": "rawset(self, line, files)",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "",
    "type": "function container"
  }, {
    "id": 274,
    "text": "io",
    "type": "module"
  }, {
    "id": 275,
    "text": "coroutine",
    "type": "module"
  }, {
    "id": 276,
    "text": "debug",
    "type": "module"
  }, {
    "id": 277,
    "text": "sethook",
    "type": "global function"
  }, {
    "id": 278,
    "text": "setupvalue",
    "type": "global function"
  }, {
    "id": 279,
    "text": "rawnew",
    "type": "global function"
  }, {
    "id": 280,
    "text": "getupvalue",
    "type": "global function"
  }, {
    "id": 281,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 282,
    "text": "status",
    "type": "global function"
  }, {
    "id": 283,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 284,
    "text": "gethook",
    "type": "global function"
  }, {
    "id": 285,
    "text": "running",
    "type": "global function"
  }, {
    "id": 286,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 287,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 288,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 289,
    "text": "module",
    "type": "global function"
  }, {
    "id": 290,
    "text": "hookbak",
    "type": "global function"
  }, {
    "id": 291,
    "text": "next",
    "type": "global function"
  }, {
    "id": 292,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 293,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 294,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 295,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 296,
    "text": "error",
    "type": "global function"
  }, {
    "id": 297,
    "text": "require",
    "type": "global function"
  }, {
    "id": 298,
    "text": "type",
    "type": "global function"
  }, {
    "id": 299,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 300,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 301,
    "text": "select",
    "type": "global function"
  }, {
    "id": 302,
    "text": "op",
    "type": "global function"
  }, {
    "id": 303,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 304,
    "text": "",
    "type": "variable container"
  }, {
    "id": 305,
    "text": "",
    "type": "require container"
  }, {
    "id": 306,
    "text": "",
    "type": "local variable"
  }, {
    "id": 307,
    "text": "",
    "type": "n/a"
  }, {
    "id": 308,
    "text": "",
    "type": "local variable"
  }, {
    "id": 309,
    "text": "",
    "type": "n/a"
  }, {
    "id": 310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 312,
    "text": "",
    "type": "local variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "local variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "local variable"
  }, {
    "id": 317,
    "text": "",
    "type": "n/a"
  }, {
    "id": 318,
    "text": "",
    "type": "local variable"
  }, {
    "id": 319,
    "text": "",
    "type": "n/a"
  }, {
    "id": 320,
    "text": "",
    "type": "local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "n/a"
  }, {
    "id": 322,
    "text": "",
    "type": "local variable"
  }, {
    "id": 323,
    "text": "",
    "type": "n/a"
  }, {
    "id": 324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 325,
    "text": "",
    "type": "n/a"
  }, {
    "id": 326,
    "text": "",
    "type": "local variable"
  }, {
    "id": 327,
    "text": "",
    "type": "n/a"
  }, {
    "id": 328,
    "text": "",
    "type": "local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "n/a"
  }, {
    "id": 330,
    "text": "",
    "type": "local variable"
  }, {
    "id": 331,
    "text": "",
    "type": "n/a"
  }, {
    "id": 332,
    "text": "",
    "type": "local variable"
  }, {
    "id": 333,
    "text": "",
    "type": "n/a"
  }, {
    "id": 334,
    "text": "",
    "type": "local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "n/a"
  }, {
    "id": 336,
    "text": "",
    "type": "local variable"
  }, {
    "id": 337,
    "text": "",
    "type": "n/a"
  }, {
    "id": 338,
    "text": "",
    "type": "local variable"
  }, {
    "id": 339,
    "text": "",
    "type": "local variable"
  }, {
    "id": 340,
    "text": "",
    "type": "string"
  }, {
    "id": 341,
    "text": "",
    "type": "local variable"
  }, {
    "id": 342,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 343,
    "text": "",
    "type": "local variable"
  }, {
    "id": 344,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 345,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 346,
    "text": "",
    "type": "function"
  }, {
    "id": 347,
    "text": "",
    "type": "global variable"
  }, {
    "id": 348,
    "text": "",
    "type": "global variable"
  }, {
    "id": 349,
    "text": "",
    "type": "n/a"
  }, {
    "id": 350,
    "text": "",
    "type": "global variable"
  }, {
    "id": 351,
    "text": "",
    "type": "n/a"
  }, {
    "id": 352,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 353,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 354,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 355,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 356,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 357,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 358,
    "text": "",
    "type": "require local variable"
  } ]
}