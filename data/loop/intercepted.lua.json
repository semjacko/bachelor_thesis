{
  "_filename": "intercepted.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/component/intercepted.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 10
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 10
  }, {
    "from": 32,
    "label": "has",
    "to": 25
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 32,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 32,
    "label": "has",
    "to": 10
  }, {
    "from": 32,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 25
  }, {
    "from": 48,
    "label": "has",
    "to": 35
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 25
  }, {
    "from": 55,
    "label": "has",
    "to": 35
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 10
  }, {
    "from": 55,
    "label": "has",
    "to": 10
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 10
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 10
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 71
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 10
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 10
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 10
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 10
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 97,
    "label": "has",
    "to": 104
  }, {
    "from": 97,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 97,
    "label": "has",
    "to": 10
  }, {
    "from": 97,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 10
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 10
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 10
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 10
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 10
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 125,
    "label": "has",
    "to": 129
  }, {
    "from": 125,
    "label": "has",
    "to": 10
  }, {
    "from": 125,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 10
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 10
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 25
  }, {
    "from": 136,
    "label": "has",
    "to": 26
  }, {
    "from": 136,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 136,
    "label": "has",
    "to": 10
  }, {
    "from": 136,
    "label": "has",
    "to": 10
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 128
  }, {
    "from": 138,
    "label": "has",
    "to": 129
  }, {
    "from": 138,
    "label": "has",
    "to": 10
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 5,
    "label": "calls",
    "to": 150
  }, {
    "from": 5,
    "label": "calls",
    "to": 150
  }, {
    "from": 12,
    "label": "calls",
    "to": 150
  }, {
    "from": 97,
    "label": "calls",
    "to": 155
  }, {
    "from": 70,
    "label": "calls",
    "to": 145
  }, {
    "from": 79,
    "label": "calls",
    "to": 145
  }, {
    "from": 97,
    "label": "calls",
    "to": 145
  }, {
    "from": 133,
    "label": "calls",
    "to": 158
  }, {
    "from": 24,
    "label": "calls",
    "to": 146
  }, {
    "from": 32,
    "label": "calls",
    "to": 146
  }, {
    "from": 48,
    "label": "calls",
    "to": 146
  }, {
    "from": 55,
    "label": "calls",
    "to": 146
  }, {
    "from": 63,
    "label": "calls",
    "to": 146
  }, {
    "from": 90,
    "label": "calls",
    "to": 146
  }, {
    "from": 119,
    "label": "calls",
    "to": 146
  }, {
    "from": 121,
    "label": "calls",
    "to": 146
  }, {
    "from": 125,
    "label": "calls",
    "to": 146
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 140,
    "label": "calls",
    "to": 141
  }, {
    "from": 140,
    "label": "calls",
    "to": 141
  }, {
    "from": 140,
    "label": "calls",
    "to": 141
  }, {
    "from": 140,
    "label": "calls",
    "to": 141
  }, {
    "from": 97,
    "label": "calls",
    "to": 141
  }, {
    "from": 140,
    "label": "calls",
    "to": 141
  }, {
    "from": 140,
    "label": "calls",
    "to": 141
  }, {
    "from": 140,
    "label": "calls",
    "to": 141
  }, {
    "from": 140,
    "label": "calls",
    "to": 141
  }, {
    "from": 55,
    "label": "calls",
    "to": 151
  }, {
    "from": 32,
    "label": "calls",
    "to": 143
  }, {
    "from": 63,
    "label": "calls",
    "to": 142
  }, {
    "from": 24,
    "label": "calls",
    "to": 12
  }, {
    "from": 32,
    "label": "calls",
    "to": 12
  }, {
    "from": 48,
    "label": "calls",
    "to": 12
  }, {
    "from": 55,
    "label": "calls",
    "to": 12
  }, {
    "from": 70,
    "label": "calls",
    "to": 159
  }, {
    "from": 79,
    "label": "calls",
    "to": 159
  }, {
    "from": 140,
    "label": "calls",
    "to": 156
  }, {
    "from": 140,
    "label": "calls",
    "to": 156
  }, {
    "from": 140,
    "label": "calls",
    "to": 156
  }, {
    "from": 140,
    "label": "calls",
    "to": 148
  }, {
    "from": 16,
    "label": "calls",
    "to": 144
  }, {
    "from": 97,
    "label": "calls",
    "to": 144
  }, {
    "from": 133,
    "label": "calls",
    "to": 144
  }, {
    "from": 5,
    "label": "calls",
    "to": 153
  }, {
    "from": 5,
    "label": "calls",
    "to": 153
  }, {
    "from": 24,
    "label": "calls",
    "to": 153
  }, {
    "from": 140,
    "label": "calls",
    "to": 149
  }, {
    "from": 125,
    "label": "calls",
    "to": 92
  }, {
    "from": 32,
    "label": "calls",
    "to": 157
  }, {
    "from": 110,
    "label": "calls",
    "to": 152
  }, {
    "from": 60,
    "label": "calls",
    "to": 154
  }, {
    "from": 63,
    "label": "calls",
    "to": 154
  }, {
    "from": 82,
    "label": "calls",
    "to": 154
  }, {
    "from": 86,
    "label": "calls",
    "to": 154
  }, {
    "from": 97,
    "label": "calls",
    "to": 154
  }, {
    "from": 117,
    "label": "calls",
    "to": 147
  }, {
    "from": 4,
    "label": "contains",
    "to": 140
  }, {
    "from": 140,
    "label": "declares",
    "to": 5
  }, {
    "from": 140,
    "label": "declares",
    "to": 12
  }, {
    "from": 140,
    "label": "declares",
    "to": 16
  }, {
    "from": 140,
    "label": "declares",
    "to": 24
  }, {
    "from": 140,
    "label": "declares",
    "to": 30
  }, {
    "from": 140,
    "label": "declares",
    "to": 32
  }, {
    "from": 140,
    "label": "declares",
    "to": 45
  }, {
    "from": 140,
    "label": "declares",
    "to": 48
  }, {
    "from": 140,
    "label": "declares",
    "to": 55
  }, {
    "from": 140,
    "label": "declares",
    "to": 60
  }, {
    "from": 140,
    "label": "declares",
    "to": 63
  }, {
    "from": 140,
    "label": "declares",
    "to": 70
  }, {
    "from": 140,
    "label": "declares",
    "to": 74
  }, {
    "from": 140,
    "label": "declares",
    "to": 77
  }, {
    "from": 140,
    "label": "declares",
    "to": 79
  }, {
    "from": 140,
    "label": "declares",
    "to": 82
  }, {
    "from": 140,
    "label": "declares",
    "to": 86
  }, {
    "from": 140,
    "label": "declares",
    "to": 90
  }, {
    "from": 140,
    "label": "declares",
    "to": 92
  }, {
    "from": 140,
    "label": "declares",
    "to": 95
  }, {
    "from": 140,
    "label": "declares",
    "to": 97
  }, {
    "from": 140,
    "label": "declares",
    "to": 110
  }, {
    "from": 140,
    "label": "declares",
    "to": 112
  }, {
    "from": 140,
    "label": "declares",
    "to": 117
  }, {
    "from": 140,
    "label": "declares",
    "to": 119
  }, {
    "from": 140,
    "label": "declares",
    "to": 121
  }, {
    "from": 140,
    "label": "declares",
    "to": 125
  }, {
    "from": 140,
    "label": "declares",
    "to": 131
  }, {
    "from": 140,
    "label": "declares",
    "to": 133
  }, {
    "from": 140,
    "label": "declares",
    "to": 136
  }, {
    "from": 140,
    "label": "declares",
    "to": 138
  }, {
    "from": 4,
    "label": "contains",
    "to": 160
  }, {
    "from": 4,
    "label": "contains",
    "to": 161
  }, {
    "from": 160,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 160,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 160,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "assigns",
    "to": 167
  }, {
    "from": 160,
    "label": "initializes",
    "to": 168
  }, {
    "from": 168,
    "label": "assigns",
    "to": 169
  }, {
    "from": 160,
    "label": "initializes",
    "to": 170
  }, {
    "from": 170,
    "label": "assigns",
    "to": 171
  }, {
    "from": 160,
    "label": "initializes",
    "to": 172
  }, {
    "from": 172,
    "label": "assigns",
    "to": 173
  }, {
    "from": 160,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 160,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 160,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 160,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 160,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 160,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 160,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 160,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 160,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 160,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 160,
    "label": "initializes",
    "to": 194
  }, {
    "from": 160,
    "label": "initializes",
    "to": 195
  }, {
    "from": 160,
    "label": "initializes",
    "to": 196
  }, {
    "from": 160,
    "label": "initializes",
    "to": 197
  }, {
    "from": 160,
    "label": "initializes",
    "to": 198
  }, {
    "from": 161,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "requires",
    "to": 2
  }, {
    "from": 161,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "requires",
    "to": 1
  }, {
    "from": 161,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cached",
    "type": "module"
  }, {
    "id": 2,
    "text": "ObjectCache",
    "type": "module"
  }, {
    "id": 3,
    "text": "base",
    "type": "module"
  }, {
    "id": 4,
    "text": "intercepted",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function doafter(iceptor, request, method, ...)\r\n\tlocal operation = iceptor.after\r\n\tif operation then\r\n\t\tif request.cancel\r\n\t\t\tthen return operation(iceptor, request, ...)\r\n\t\t\telse return operation(iceptor, request, method(...))\r\n\t\tend\r\n\telse\r\n\t\tif request.cancel\r\n\t\t\tthen return ...\r\n\t\t\telse return method(...)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local operation = iceptor.after",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if operation then\r\n\t\tif request.cancel\r\n\t\t\tthen return operation(iceptor, request, ...)\r\n\t\t\telse return operation(iceptor, request, method(...))\r\n\t\tend\r\n\telse\r\n\t\tif request.cancel\r\n\t\t\tthen return ...\r\n\t\t\telse return method(...)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "if request.cancel\r\n\t\t\tthen return operation(iceptor, request, ...)\r\n\t\t\telse return operation(iceptor, request, method(...))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "if request.cancel\r\n\t\t\tthen return ...\r\n\t\t\telse return method(...)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function dobefore(iceptor, request, method, ...)\r\n\tlocal operation = iceptor.before\r\n\tif operation\r\n\t\tthen return doafter(iceptor, request, method, operation(iceptor, request, ...))\r\n\t\telse return doafter(iceptor, request, method, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local operation = iceptor.before",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if operation\r\n\t\tthen return doafter(iceptor, request, method, operation(iceptor, request, ...))\r\n\t\telse return doafter(iceptor, request, method, ...)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function Wrapper:__init(object)\r\n\tlocal name = object.__name\r\n\tobject.__init        = false\r\n\tobject.__methodkey   = \"  method\"..name\r\n\tobject.__indexkey    = \"  index\"..name\r\n\tobject.__newindexkey = \"  newindex\"..name\r\n\tobject.__callkey     = \"  call\"..name\r\n\treturn oo.rawnew(self, object)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local name = object.__name",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "object.__init        = false",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "object.__methodkey   = \"  method\"..name",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "object.__indexkey    = \"  index\"..name",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "object.__newindexkey = \"  newindex\"..name",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "object.__callkey     = \"  call\"..name",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function MethodCache:retrieve(method)\r\n\treturn function(self, ...)\r\n\t\tlocal object = self:__get()\r\n\t\tlocal iceptor = rawget(self, \"  method\") or self.__factory[self.__methodkey]\r\n\t\tif iceptor then\r\n\t\t\tlocal request = {\r\n\t\t\t\tcontext = self.__context,\r\n\t\t\t\tport = self.__name,\r\n\t\t\t\tobject = object,\r\n\t\t\t\tmethod = method,\r\n\t\t\t\tevent = \"method\",\r\n\t\t\t}\r\n\t\t\treturn dobefore(iceptor, request, method, object, ...)\r\n\t\tend\r\n\t\treturn method(object, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local object = self:__get()",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local iceptor = rawget(self, \"  method\") or self.__factory[self.__methodkey]",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if iceptor then\r\n\t\t\tlocal request = {\r\n\t\t\t\tcontext = self.__context,\r\n\t\t\t\tport = self.__name,\r\n\t\t\t\tobject = object,\r\n\t\t\t\tmethod = method,\r\n\t\t\t\tevent = \"method\",\r\n\t\t\t}\r\n\t\t\treturn dobefore(iceptor, request, method, object, ...)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "local request = {\r\n\t\t\t\tcontext = self.__context,\r\n\t\t\t\tport = self.__name,\r\n\t\t\t\tobject = object,\r\n\t\t\t\tmethod = method,\r\n\t\t\t\tevent = \"method\",\r\n\t\t\t}",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function getfield(table, field)\r\n\treturn table[field]\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function Wrapper:__index(field)\r\n\t-- NOTE: retrieve class members first\r\n\tlocal class = oo.classof(self)\r\n\tif class[field] then return class[field] end\r\n\r\n\tlocal object = self:__get()\r\n\tlocal factory = self.__factory\r\n\tlocal iceptor = rawget(self, \"  index\") or factory[self.__indexkey]\r\n\r\n\tlocal value\r\n\tif iceptor then\r\n\t\tlocal request = {\r\n\t\t\tcontext = self.__context,\r\n\t\t\tport = self.__name,\r\n\t\t\tobject = object,\r\n\t\t\tfield = field,\r\n\t\t\tevent = \"index\",\r\n\t\t}\r\n\t\tvalue = dobefore(iceptor, request, getfield, object, field)\r\n\telse\r\n\t\tvalue = object[field]\r\n\tend\r\n\r\n\tif type(value) == \"function\" then\r\n\t\tvalue = MethodCache[value]\r\n\tend\r\n\r\n\treturn value\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local class = oo.classof(self)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if class[field] then return class[field] end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "local factory = self.__factory",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local iceptor = rawget(self, \"  index\") or factory[self.__indexkey]",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local value",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if iceptor then\r\n\t\tlocal request = {\r\n\t\t\tcontext = self.__context,\r\n\t\t\tport = self.__name,\r\n\t\t\tobject = object,\r\n\t\t\tfield = field,\r\n\t\t\tevent = \"index\",\r\n\t\t}\r\n\t\tvalue = dobefore(iceptor, request, getfield, object, field)\r\n\telse\r\n\t\tvalue = object[field]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local request = {\r\n\t\t\tcontext = self.__context,\r\n\t\t\tport = self.__name,\r\n\t\t\tobject = object,\r\n\t\t\tfield = field,\r\n\t\t\tevent = \"index\",\r\n\t\t}",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "value = dobefore(iceptor, request, getfield, object, field)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "value = object[field]",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if type(value) == \"function\" then\r\n\t\tvalue = MethodCache[value]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "value = MethodCache[value]",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function setfield(table, field, value)\r\n\ttable[field] = value\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "table[field] = value",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function Wrapper:__newindex(field, value)\r\n\tlocal object = self:__get()\r\n\tlocal factory = self.__factory\r\n\tlocal interceptor = rawget(self, \"  newindex\") or factory[self.__newindex]\r\n\tif interceptor then\r\n\t\tlocal request = {\r\n\t\t\tcontext = self.__context,\r\n\t\t\tport = self.__name,\r\n\t\t\tobject = object,\r\n\t\t\tfield = field,\r\n\t\t\tevent = \"newindex\",\r\n\t\t}\r\n\t\tdobefore(iceptor, request, setfield, object, field, value)\r\n\telse\r\n\t\tobject[field] = value\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local interceptor = rawget(self, \"  newindex\") or factory[self.__newindex]",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if interceptor then\r\n\t\tlocal request = {\r\n\t\t\tcontext = self.__context,\r\n\t\t\tport = self.__name,\r\n\t\t\tobject = object,\r\n\t\t\tfield = field,\r\n\t\t\tevent = \"newindex\",\r\n\t\t}\r\n\t\tdobefore(iceptor, request, setfield, object, field, value)\r\n\telse\r\n\t\tobject[field] = value\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "local request = {\r\n\t\t\tcontext = self.__context,\r\n\t\t\tport = self.__name,\r\n\t\t\tobject = object,\r\n\t\t\tfield = field,\r\n\t\t\tevent = \"newindex\",\r\n\t\t}",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "dobefore(iceptor, request, setfield, object, field, value)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "object[field] = value",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function Wrapper:__call(...)\r\n\tlocal object = self:__get()\r\n\tlocal factory = self.__factory\r\n\tlocal iceptor = rawget(self, \"  call\") or factory[self.__callkey]\r\n\tif iceptor then\r\n\t\tlocal request = {\r\n\t\t\tcontext = self.__context,\r\n\t\t\tport = self.__name,\r\n\t\t\tobject = object,\r\n\t\t\tevent = \"call\",\r\n\t\t}\r\n\t\treturn dobefore(iceptor, request, object, ...)\r\n\telse\r\n\t\treturn object(...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local iceptor = rawget(self, \"  call\") or factory[self.__callkey]",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if iceptor then\r\n\t\tlocal request = {\r\n\t\t\tcontext = self.__context,\r\n\t\t\tport = self.__name,\r\n\t\t\tobject = object,\r\n\t\t\tevent = \"call\",\r\n\t\t}\r\n\t\treturn dobefore(iceptor, request, object, ...)\r\n\telse\r\n\t\treturn object(...)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "local request = {\r\n\t\t\tcontext = self.__context,\r\n\t\t\tport = self.__name,\r\n\t\t\tobject = object,\r\n\t\t\tevent = \"call\",\r\n\t\t}",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function Wrapper:__intercept(event, iceptor)\r\n\trawset(self, \"  \"..event, iceptor)\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "rawset(self, \"  \"..event, iceptor)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function intercept(scope, port, event, iceptor)\r\n\tlocal container = rawget(scope, \"__container\")\r\n\tlocal wrapper = container and container[port]\r\n\tif oo.instanceof(wrapper, Wrapper)\r\n\t\tthen rawset(wrapper, \"  \"..event, iceptor)\r\n\t\telse scope[\"  \"..event..port] = iceptor\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "local container = rawget(scope, \"__container\")",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local wrapper = container and container[port]",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if oo.instanceof(wrapper, Wrapper)\r\n\t\tthen rawset(wrapper, \"  \"..event, iceptor)\r\n\t\telse scope[\"  \"..event..port] = iceptor\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "rawset(wrapper, \"  \"..event, iceptor)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "scope[\"  \"..event..port] = iceptor",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function Facet:__init(state, key, context)\r\n\tlocal wrapper = Wrapper.__init(self, {\r\n\t\t__state = state,\r\n\t\t__context = context,\r\n\t\t__key = key,\r\n\t\t__name = tostring(key),\r\n\t\t__factory = state.__factory,\r\n\t})\r\n\twrapper:__bind(state[key] or state.__component[key] or state.__component)\r\n\treturn wrapper\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local wrapper = Wrapper.__init(self, {\r\n\t\t__state = state,\r\n\t\t__context = context,\r\n\t\t__key = key,\r\n\t\t__name = tostring(key),\r\n\t\t__factory = state.__factory,\r\n\t})",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "wrapper:__bind(state[key] or state.__component[key] or state.__component)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function Facet:__bind(port)\r\n\tself.__state[self.__key] = port\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "self.__state[self.__key] = port",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function Facet:__get()\r\n\treturn self.__state[self.__key]\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function Receptacle:__init(state, key, context)\r\n\tlocal wrapper = Wrapper.__init(self, {\r\n\t\t__state = state,\r\n\t\t__context = context,\r\n\t\t__key = key,\r\n\t\t__name = tostring(key),\r\n\t\t__factory = state.__factory,\r\n\t})\r\n\twrapper:__bind(state[key])\r\n\treturn wrapper\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "wrapper:__bind(state[key])",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function Receptacle:__bind(port)\r\n\trawset(self, \"__external\", port)\r\n\tself.__state[self.__key] = port and self\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "rawset(self, \"__external\", port)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "self.__state[self.__key] = port and self",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function Receptacle:__unbind()\r\n\trawset(self, \"__external\", nil)\r\n\tself.__state[self.__key] = nil\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "rawset(self, \"__external\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "self.__state[self.__key] = nil",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function Receptacle:__get()\r\n\treturn rawget(self, \"__external\")\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "local function iterator(self, done)\r\n\tif not done then return 1, self:__get() end\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "if not done then return 1, self:__get() end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function Receptacle:__all()\r\n\treturn iterator, self\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function ReceptacleWrapper:__init(state, key, context)\r\n\tself = oo.rawnew(self, state[key])\r\n\t\r\n\tlocal connections\r\n\tfor key, port in self.__receptacle:__all() do\r\n\t\tconnections = {}\r\n\t\tfor key, port in self.__receptacle:__all() do\r\n\t\t\tconnections[key] = port\r\n\t\tend\r\n\t\tbreak\r\n\tend\r\n\t\r\n\trawset(self, \"__new\", oo.class(Wrapper:__init{\r\n\t\t__get = Receptacle.__get,\r\n\t\t__state = state,\r\n\t\t__context = context,\r\n\t\t__key = key,\r\n\t\t__name = tostring(key),\r\n\t\t__factory = state.__factory,\r\n\t}, Wrapper))\r\n\t\r\n\tif connections then\r\n\t\tfor key, port in pairs(connections) do\r\n\t\t\tself.__receptacle:__unbind(key)\r\n\t\t\tself:__bind(port, key)\r\n\t\tend\r\n\tend\r\n\t\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "self = oo.rawnew(self, state[key])",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "local connections",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "for key, port in self.__receptacle:__all() do\r\n\t\tconnections = {}\r\n\t\tfor key, port in self.__receptacle:__all() do\r\n\t\t\tconnections[key] = port\r\n\t\tend\r\n\t\tbreak\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 101,
    "text": "connections = {}",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "for key, port in self.__receptacle:__all() do\r\n\t\t\tconnections[key] = port\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 103,
    "text": "connections[key] = port",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "rawset(self, \"__new\", oo.class(Wrapper:__init{\r\n\t\t__get = Receptacle.__get,\r\n\t\t__state = state,\r\n\t\t__context = context,\r\n\t\t__key = key,\r\n\t\t__name = tostring(key),\r\n\t\t__factory = state.__factory,\r\n\t}, Wrapper))",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "if connections then\r\n\t\tfor key, port in pairs(connections) do\r\n\t\t\tself.__receptacle:__unbind(key)\r\n\t\t\tself:__bind(port, key)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "for key, port in pairs(connections) do\r\n\t\t\tself.__receptacle:__unbind(key)\r\n\t\t\tself:__bind(port, key)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 107,
    "text": "self.__receptacle:__unbind(key)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "self:__bind(port, key)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function ReceptacleWrapper:__index(key)\r\n\treturn getmetatable(self)[key] or self:__get(key)\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function ReceptacleWrapper:__newindex(key, value)\r\n\tif value == nil\r\n\t\tthen self:__unbind(key)\r\n\t\telse self:__bind(value, key)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "if value == nil\r\n\t\tthen self:__unbind(key)\r\n\t\telse self:__bind(value, key)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "self:__unbind(key)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "self:__bind(value, key)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function ReceptacleWrapper:__bind(port, key)\r\n\treturn self.__receptacle:__bind(self.__new{ __external = port }, key)\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function ReceptacleWrapper:__unbind(key)\r\n\treturn rawget(self.__receptacle:__unbind(key), \"__external\")\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function ReceptacleWrapper:__get(key)\r\n\tlocal element = self.__receptacle:__get(key)\r\n\tif element then return rawget(element, \"__external\") end\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "local element = self.__receptacle:__get(key)",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "if element then return rawget(element, \"__external\") end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function ReceptacleWrapper:__all()\r\n\tlocal iterator, state, key = self.__receptacle:__all()\r\n\tlocal element\r\n\treturn function(state, key)\r\n\t\tkey, element = iterator(state, key)\r\n\t\tif key and element then return key, rawget(element, \"__external\") end\r\n\tend, state, key\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local iterator, state, key = self.__receptacle:__all()",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local element",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "key, element = iterator(state, key)",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "if key and element then return key, rawget(element, \"__external\") end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function ReceptacleWrapper:__intercept(interceptor, event, field)\r\n\treturn self.__new:__intercept(interceptor, event, field)\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function MultipleReceptacle:__init(segments, name, context)\r\n\tsegments[name] = { __receptacle = oo.rawnew(self, segments[name]) }\r\n\treturn ReceptacleWrapper(segments, name, context)\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "segments[name] = { __receptacle = oo.rawnew(self, segments[name]) }",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function(self, ...)\r\n\t\tlocal object = self:__get()\r\n\t\tlocal iceptor = rawget(self, \"  method\") or self.__factory[self.__methodkey]\r\n\t\tif iceptor then\r\n\t\t\tlocal request = {\r\n\t\t\t\tcontext = self.__context,\r\n\t\t\t\tport = self.__name,\r\n\t\t\t\tobject = object,\r\n\t\t\t\tmethod = method,\r\n\t\t\t\tevent = \"method\",\r\n\t\t\t}\r\n\t\t\treturn dobefore(iceptor, request, method, object, ...)\r\n\t\tend\r\n\t\treturn method(object, ...)\r\n\tend",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function(state, key)\r\n\t\tkey, element = iterator(state, key)\r\n\t\tif key and element then return key, rawget(element, \"__external\") end\r\n\tend",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "",
    "type": "function container"
  }, {
    "id": 141,
    "text": "function class(class, ...)\r\n\tif select(\"#\", ...) > 1\r\n\t\tthen return base.rawnew(table.copy(MultipleClass, {...}), initclass(class))\r\n\t\telse return base.class(class, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "function instanceof(object, class)\r\n\treturn subclassof(classof(object), class)\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "classof",
    "type": "global function"
  }, {
    "id": 144,
    "text": "rawnew",
    "type": "global function"
  }, {
    "id": 145,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 146,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 147,
    "text": "__new",
    "type": "global function"
  }, {
    "id": 148,
    "text": "ObjectCache",
    "type": "global function"
  }, {
    "id": 149,
    "text": "module",
    "type": "global function"
  }, {
    "id": 150,
    "text": "operation",
    "type": "global function"
  }, {
    "id": 151,
    "text": "object",
    "type": "global function"
  }, {
    "id": 152,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 153,
    "text": "method",
    "type": "global function"
  }, {
    "id": 154,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 155,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 156,
    "text": "require",
    "type": "global function"
  }, {
    "id": 157,
    "text": "type",
    "type": "global function"
  }, {
    "id": 158,
    "text": "ReceptacleWrapper",
    "type": "global function"
  }, {
    "id": 159,
    "text": "__init",
    "type": "global function"
  }, {
    "id": 160,
    "text": "",
    "type": "variable container"
  }, {
    "id": 161,
    "text": "",
    "type": "require container"
  }, {
    "id": 162,
    "text": "",
    "type": "local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "n/a"
  }, {
    "id": 164,
    "text": "",
    "type": "local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "n/a"
  }, {
    "id": 166,
    "text": "",
    "type": "local variable"
  }, {
    "id": 167,
    "text": "",
    "type": "n/a"
  }, {
    "id": 168,
    "text": "",
    "type": "local variable"
  }, {
    "id": 169,
    "text": "",
    "type": "n/a"
  }, {
    "id": 170,
    "text": "",
    "type": "local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "n/a"
  }, {
    "id": 172,
    "text": "",
    "type": "local variable"
  }, {
    "id": 173,
    "text": "",
    "type": "n/a"
  }, {
    "id": 174,
    "text": "",
    "type": "local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "n/a"
  }, {
    "id": 176,
    "text": "",
    "type": "global variable"
  }, {
    "id": 177,
    "text": "",
    "type": "n/a"
  }, {
    "id": 178,
    "text": "",
    "type": "global variable"
  }, {
    "id": 179,
    "text": "",
    "type": "n/a"
  }, {
    "id": 180,
    "text": "",
    "type": "global variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "global variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "global variable"
  }, {
    "id": 185,
    "text": "",
    "type": "n/a"
  }, {
    "id": 186,
    "text": "",
    "type": "global variable"
  }, {
    "id": 187,
    "text": "",
    "type": "n/a"
  }, {
    "id": 188,
    "text": "",
    "type": "global variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "global variable"
  }, {
    "id": 191,
    "text": "",
    "type": "n/a"
  }, {
    "id": 192,
    "text": "",
    "type": "global variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "global variable"
  }, {
    "id": 195,
    "text": "",
    "type": "global variable"
  }, {
    "id": 196,
    "text": "",
    "type": "global variable"
  }, {
    "id": 197,
    "text": "",
    "type": "global variable"
  }, {
    "id": 198,
    "text": "",
    "type": "global variable"
  }, {
    "id": 199,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "require local variable"
  } ]
}