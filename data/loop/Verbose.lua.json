{
  "_filename": "Verbose.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/debug/Verbose.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 14
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 21,
    "label": "has",
    "to": 28
  }, {
    "from": 21,
    "label": "has",
    "to": 29
  }, {
    "from": 21,
    "label": "has",
    "to": 30
  }, {
    "from": 21,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 21,
    "label": "has",
    "to": 39
  }, {
    "from": 21,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 21,
    "label": "has",
    "to": 46
  }, {
    "from": 21,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 21,
    "label": "has",
    "to": 52
  }, {
    "from": 19,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 14
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 54,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 65,
    "label": "has",
    "to": 75
  }, {
    "from": 65,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 80,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 88,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 96,
    "label": "has",
    "to": 102
  }, {
    "from": 96,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 96,
    "label": "has",
    "to": 111
  }, {
    "from": 96,
    "label": "has",
    "to": 112
  }, {
    "from": 96,
    "label": "has",
    "to": 58
  }, {
    "from": 94,
    "label": "has",
    "to": 14
  }, {
    "from": 94,
    "label": "has",
    "to": 14
  }, {
    "from": 94,
    "label": "has",
    "to": 14
  }, {
    "from": 94,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 14
  }, {
    "from": 114,
    "label": "has",
    "to": 14
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 55
  }, {
    "from": 121,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 121,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 54,
    "label": "calls",
    "to": 19
  }, {
    "from": 54,
    "label": "calls",
    "to": 19
  }, {
    "from": 54,
    "label": "calls",
    "to": 19
  }, {
    "from": 94,
    "label": "calls",
    "to": 142
  }, {
    "from": 65,
    "label": "calls",
    "to": 132
  }, {
    "from": 94,
    "label": "calls",
    "to": 132
  }, {
    "from": 94,
    "label": "calls",
    "to": 132
  }, {
    "from": 94,
    "label": "calls",
    "to": 132
  }, {
    "from": 94,
    "label": "calls",
    "to": 132
  }, {
    "from": 19,
    "label": "calls",
    "to": 134
  }, {
    "from": 19,
    "label": "calls",
    "to": 134
  }, {
    "from": 94,
    "label": "calls",
    "to": 134
  }, {
    "from": 6,
    "label": "calls",
    "to": 136
  }, {
    "from": 6,
    "label": "calls",
    "to": 136
  }, {
    "from": 6,
    "label": "calls",
    "to": 136
  }, {
    "from": 6,
    "label": "calls",
    "to": 136
  }, {
    "from": 54,
    "label": "calls",
    "to": 136
  }, {
    "from": 65,
    "label": "calls",
    "to": 136
  }, {
    "from": 19,
    "label": "calls",
    "to": 125
  }, {
    "from": 94,
    "label": "calls",
    "to": 54
  }, {
    "from": 94,
    "label": "calls",
    "to": 137
  }, {
    "from": 80,
    "label": "calls",
    "to": 133
  }, {
    "from": 65,
    "label": "calls",
    "to": 128
  }, {
    "from": 19,
    "label": "calls",
    "to": 145
  }, {
    "from": 6,
    "label": "calls",
    "to": 139
  }, {
    "from": 123,
    "label": "calls",
    "to": 138
  }, {
    "from": 54,
    "label": "calls",
    "to": 135
  }, {
    "from": 123,
    "label": "calls",
    "to": 140
  }, {
    "from": 6,
    "label": "calls",
    "to": 131
  }, {
    "from": 19,
    "label": "calls",
    "to": 144
  }, {
    "from": 19,
    "label": "calls",
    "to": 144
  }, {
    "from": 19,
    "label": "calls",
    "to": 144
  }, {
    "from": 19,
    "label": "calls",
    "to": 144
  }, {
    "from": 19,
    "label": "calls",
    "to": 144
  }, {
    "from": 94,
    "label": "calls",
    "to": 144
  }, {
    "from": 94,
    "label": "calls",
    "to": 144
  }, {
    "from": 123,
    "label": "calls",
    "to": 143
  }, {
    "from": 123,
    "label": "calls",
    "to": 143
  }, {
    "from": 123,
    "label": "calls",
    "to": 143
  }, {
    "from": 123,
    "label": "calls",
    "to": 143
  }, {
    "from": 123,
    "label": "calls",
    "to": 143
  }, {
    "from": 123,
    "label": "calls",
    "to": 143
  }, {
    "from": 123,
    "label": "calls",
    "to": 143
  }, {
    "from": 123,
    "label": "calls",
    "to": 143
  }, {
    "from": 123,
    "label": "calls",
    "to": 143
  }, {
    "from": 19,
    "label": "calls",
    "to": 141
  }, {
    "from": 19,
    "label": "calls",
    "to": 146
  }, {
    "from": 19,
    "label": "calls",
    "to": 146
  }, {
    "from": 94,
    "label": "calls",
    "to": 146
  }, {
    "from": 114,
    "label": "calls",
    "to": 146
  }, {
    "from": 3,
    "label": "contains",
    "to": 123
  }, {
    "from": 123,
    "label": "declares",
    "to": 6
  }, {
    "from": 123,
    "label": "declares",
    "to": 16
  }, {
    "from": 123,
    "label": "declares",
    "to": 17
  }, {
    "from": 123,
    "label": "declares",
    "to": 19
  }, {
    "from": 123,
    "label": "declares",
    "to": 54
  }, {
    "from": 123,
    "label": "declares",
    "to": 65
  }, {
    "from": 123,
    "label": "declares",
    "to": 77
  }, {
    "from": 123,
    "label": "declares",
    "to": 80
  }, {
    "from": 123,
    "label": "declares",
    "to": 88
  }, {
    "from": 123,
    "label": "declares",
    "to": 94
  }, {
    "from": 123,
    "label": "declares",
    "to": 114
  }, {
    "from": 123,
    "label": "declares",
    "to": 121
  }, {
    "from": 3,
    "label": "contains",
    "to": 147
  }, {
    "from": 3,
    "label": "contains",
    "to": 148
  }, {
    "from": 147,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 147,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 147,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 147,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 147,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 147,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 147,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 147,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 147,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 147,
    "label": "initializes",
    "to": 167
  }, {
    "from": 147,
    "label": "initializes",
    "to": 168
  }, {
    "from": 147,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 148,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "requires",
    "to": 124
  }, {
    "from": 148,
    "label": "initializes",
    "to": 172
  }, {
    "from": 172,
    "label": "requires",
    "to": 129
  }, {
    "from": 148,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "requires",
    "to": 130
  }, {
    "from": 148,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "requires",
    "to": 5
  }, {
    "from": 148,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "requires",
    "to": 127
  }, {
    "from": 148,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "requires",
    "to": 126
  }, {
    "from": 148,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "requires",
    "to": 2
  }, {
    "from": 148,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "requires",
    "to": 1
  }, {
    "from": 148,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "requires",
    "to": 4
  }, {
    "from": 180,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ObjectCache",
    "type": "module"
  }, {
    "id": 2,
    "text": "base",
    "type": "module"
  }, {
    "id": 3,
    "text": "Verbose",
    "type": "module"
  }, {
    "id": 4,
    "text": "Viewer",
    "type": "module"
  }, {
    "id": 5,
    "text": "table",
    "type": "module"
  }, {
    "id": 6,
    "text": "function __init(class, verbose)\r\n\tverbose = oo.rawnew(class, verbose)\r\n\tverbose.flags    = {}\r\n\tverbose.tabcount = ObjectCache{ default = 0 }\r\n\tverbose.groups   = rawget(verbose, \"groups\")  or {}\r\n\tverbose.custom   = rawget(verbose, \"custom\")  or {}\r\n\tverbose.inspect  = rawget(verbose, \"inspect\") or {}\r\n\tverbose.timed    = rawget(verbose, \"timed\")   or {}\r\n\treturn verbose\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "verbose = oo.rawnew(class, verbose)",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "verbose.flags    = {}",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "verbose.tabcount = ObjectCache{ default = 0 }",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "verbose.groups   = rawget(verbose, \"groups\")  or {}",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "verbose.custom   = rawget(verbose, \"custom\")  or {}",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "verbose.inspect  = rawget(verbose, \"inspect\") or {}",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "verbose.timed    = rawget(verbose, \"timed\")   or {}",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function dummy() end",
    "type": "function"
  }, {
    "id": 17,
    "text": "function __index(self, field)\r\n\treturn field and ( _M[field] or self.flags[field] or dummy )\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function write(self, flag, ...)\r\n\tlocal count = select(\"#\", ...)\r\n\tif count > 0 then\r\n\t\tlocal viewer  = self.viewer\r\n\t\tlocal output  = self.viewer.output\r\n\t\tlocal timed   = self.timed\r\n\t\tlocal custom  = self.custom\r\n\t\tlocal inspect = self.inspect\r\n\t\t\r\n\t\tlocal flaglength = self.flaglength\r\n\t\toutput:write(\"[\", flag, \"]\")\r\n\t\toutput:write(viewer.prefix:sub(#flag + 3, flaglength))\r\n\t\t\r\n\t\ttimed = (type(timed) == \"table\") and timed[flag] or timed\r\n\t\tif timed == true then\r\n\t\t\ttimed = os.date()\r\n\t\t\toutput:write(timed, \" - \")\r\n\t\t\toutput:write(viewer.prefix:sub(flaglength + #timed + 4))\r\n\t\telseif type(timed) == \"string\" then\r\n\t\t\ttimed = os.date(timed)\r\n\t\t\toutput:write(timed, \" \")\r\n\t\t\toutput:write(viewer.prefix:sub(flaglength + #timed + 2))\r\n\t\telse\r\n\t\t\toutput:write(viewer.prefix:sub(flaglength + 1))\r\n\t\tend\r\n\t\t\r\n\t\tcustom = custom[flag]\r\n\t\tif custom == nil or custom(self, ...) then\r\n\t\t\tfor i = 1, count do\r\n\t\t\t\tlocal value = select(i, ...)\r\n\t\t\t\tif type(value) == \"string\"\r\n\t\t\t\t\tthen output:write(value)\r\n\t\t\t\t\telse viewer:write(value)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\r\n\t\tinspect = (type(inspect) == \"table\") and inspect[flag] or inspect\r\n\t\tif inspect == true then\r\n\t\t\tio.read()\r\n\t\telse\r\n\t\t\toutput:write(\"\\n\")\r\n\t\t\tif type(inspect) == \"function\" then inspect(self) end\r\n\t\tend\r\n\t\r\n\t\toutput:flush()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local count = select(\"#\", ...)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if count > 0 then\r\n\t\tlocal viewer  = self.viewer\r\n\t\tlocal output  = self.viewer.output\r\n\t\tlocal timed   = self.timed\r\n\t\tlocal custom  = self.custom\r\n\t\tlocal inspect = self.inspect\r\n\t\t\r\n\t\tlocal flaglength = self.flaglength\r\n\t\toutput:write(\"[\", flag, \"]\")\r\n\t\toutput:write(viewer.prefix:sub(#flag + 3, flaglength))\r\n\t\t\r\n\t\ttimed = (type(timed) == \"table\") and timed[flag] or timed\r\n\t\tif timed == true then\r\n\t\t\ttimed = os.date()\r\n\t\t\toutput:write(timed, \" - \")\r\n\t\t\toutput:write(viewer.prefix:sub(flaglength + #timed + 4))\r\n\t\telseif type(timed) == \"string\" then\r\n\t\t\ttimed = os.date(timed)\r\n\t\t\toutput:write(timed, \" \")\r\n\t\t\toutput:write(viewer.prefix:sub(flaglength + #timed + 2))\r\n\t\telse\r\n\t\t\toutput:write(viewer.prefix:sub(flaglength + 1))\r\n\t\tend\r\n\t\t\r\n\t\tcustom = custom[flag]\r\n\t\tif custom == nil or custom(self, ...) then\r\n\t\t\tfor i = 1, count do\r\n\t\t\t\tlocal value = select(i, ...)\r\n\t\t\t\tif type(value) == \"string\"\r\n\t\t\t\t\tthen output:write(value)\r\n\t\t\t\t\telse viewer:write(value)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\r\n\t\tinspect = (type(inspect) == \"table\") and inspect[flag] or inspect\r\n\t\tif inspect == true then\r\n\t\t\tio.read()\r\n\t\telse\r\n\t\t\toutput:write(\"\\n\")\r\n\t\t\tif type(inspect) == \"function\" then inspect(self) end\r\n\t\tend\r\n\t\r\n\t\toutput:flush()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local viewer  = self.viewer",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local output  = self.viewer.output",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local timed   = self.timed",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local custom  = self.custom",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local inspect = self.inspect",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local flaglength = self.flaglength",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "output:write(\"[\", flag, \"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "output:write(viewer.prefix:sub(#flag + 3, flaglength))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "timed = (type(timed) == \"table\") and timed[flag] or timed",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if timed == true then\r\n\t\t\ttimed = os.date()\r\n\t\t\toutput:write(timed, \" - \")\r\n\t\t\toutput:write(viewer.prefix:sub(flaglength + #timed + 4))\r\n\t\telseif type(timed) == \"string\" then\r\n\t\t\ttimed = os.date(timed)\r\n\t\t\toutput:write(timed, \" \")\r\n\t\t\toutput:write(viewer.prefix:sub(flaglength + #timed + 2))\r\n\t\telse\r\n\t\t\toutput:write(viewer.prefix:sub(flaglength + 1))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "timed = os.date()",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "output:write(timed, \" - \")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "output:write(viewer.prefix:sub(flaglength + #timed + 4))",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "timed = os.date(timed)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "output:write(timed, \" \")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "output:write(viewer.prefix:sub(flaglength + #timed + 2))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "output:write(viewer.prefix:sub(flaglength + 1))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "custom = custom[flag]",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if custom == nil or custom(self, ...) then\r\n\t\t\tfor i = 1, count do\r\n\t\t\t\tlocal value = select(i, ...)\r\n\t\t\t\tif type(value) == \"string\"\r\n\t\t\t\t\tthen output:write(value)\r\n\t\t\t\t\telse viewer:write(value)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "for i = 1, count do\r\n\t\t\t\tlocal value = select(i, ...)\r\n\t\t\t\tif type(value) == \"string\"\r\n\t\t\t\t\tthen output:write(value)\r\n\t\t\t\t\telse viewer:write(value)\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 42,
    "text": "local value = select(i, ...)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if type(value) == \"string\"\r\n\t\t\t\t\tthen output:write(value)\r\n\t\t\t\t\telse viewer:write(value)\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "output:write(value)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "viewer:write(value)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "inspect = (type(inspect) == \"table\") and inspect[flag] or inspect",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "if inspect == true then\r\n\t\t\tio.read()\r\n\t\telse\r\n\t\t\toutput:write(\"\\n\")\r\n\t\t\tif type(inspect) == \"function\" then inspect(self) end\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "io.read()",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "output:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "if type(inspect) == \"function\" then inspect(self) end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "inspect(self)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "output:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function taggedprint(tag)\r\n\treturn function (self, start, ...)\r\n\t\tlocal running = coroutine.running()\r\n\t\tif rawget(self, \"current\") ~= running then\r\n\t\t\tself.current = running\r\n\t\t\tself:updatetabs()\r\n\t\tend\r\n\t\tif start == false then\r\n\t\t\tself:updatetabs(-1)\r\n\t\t\twrite(self, tag, ...)\r\n\t\telseif start == true then\r\n\t\t\twrite(self, tag, ...)\r\n\t\t\tself:updatetabs(1)\r\n\t\telse\r\n\t\t\twrite(self, tag, start, ...)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local running = coroutine.running()",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if rawget(self, \"current\") ~= running then\r\n\t\t\tself.current = running\r\n\t\t\tself:updatetabs()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "self.current = running",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "self:updatetabs()",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "if start == false then\r\n\t\t\tself:updatetabs(-1)\r\n\t\t\twrite(self, tag, ...)\r\n\t\telseif start == true then\r\n\t\t\twrite(self, tag, ...)\r\n\t\t\tself:updatetabs(1)\r\n\t\telse\r\n\t\t\twrite(self, tag, start, ...)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "self:updatetabs(-1)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "write(self, tag, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "self:updatetabs(1)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "write(self, tag, start, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function updatetabs(self, shift)\r\n\tlocal current = rawget(self, \"current\")\r\n\tlocal tabcount = self.tabcount\r\n\tlocal viewer = self.viewer\r\n\tlocal tabs = tabcount[current] or tabcount.default\r\n\tif shift then\r\n\t\ttabs = math.max(tabs + shift, 0)\r\n\t\tif current\r\n\t\t\tthen tabcount[current] = tabs\r\n\t\t\telse tabcount.default = tabs\r\n\t\tend\r\n\tend\r\n\tviewer.prefix = string.rep(\" \", self.flaglength + self.timelength)..\r\n\t                viewer.indentation:rep(tabs)\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local current = rawget(self, \"current\")",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local tabcount = self.tabcount",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local viewer = self.viewer",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local tabs = tabcount[current] or tabcount.default",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if shift then\r\n\t\ttabs = math.max(tabs + shift, 0)\r\n\t\tif current\r\n\t\t\tthen tabcount[current] = tabs\r\n\t\t\telse tabcount.default = tabs\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "tabs = math.max(tabs + shift, 0)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "if current\r\n\t\t\tthen tabcount[current] = tabs\r\n\t\t\telse tabcount.default = tabs\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "tabcount[current] = tabs",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "tabcount.default = tabs",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "viewer.prefix = string.rep(\" \", self.flaglength + self.timelength)..\r\n\t                viewer.indentation:rep(tabs)",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function setgroup(self, name, group)\r\n\tself.groups[name] = group\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "self.groups[name] = group",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function newlevel(self, level, group)\r\n\tlocal groups = self.groups\r\n\tlocal count = #groups\r\n\tif not group then\r\n\t\tgroups[count+1] = level\r\n\telseif level <= count then\r\n\t\ttable.insert(groups, level, group)\r\n\telse\r\n\t\tself:setlevel(level, group)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local groups = self.groups",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local count = #groups",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "if not group then\r\n\t\tgroups[count+1] = level\r\n\telseif level <= count then\r\n\t\ttable.insert(groups, level, group)\r\n\telse\r\n\t\tself:setlevel(level, group)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "groups[count+1] = level",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "table.insert(groups, level, group)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "self:setlevel(level, group)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function setlevel(self, level, group)\r\n\tfor i = 1, level - 1 do\r\n\t\tif not self.groups[i] then\r\n\t\t\tself.groups[i] = {}\r\n\t\tend\r\n\tend\r\n\tself.groups[level] = group\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "for i = 1, level - 1 do\r\n\t\tif not self.groups[i] then\r\n\t\t\tself.groups[i] = {}\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 90,
    "text": "if not self.groups[i] then\r\n\t\t\tself.groups[i] = {}\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "self.groups[i] = {}",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "self.groups[level] = group",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function flag(self, name, ...)\r\n\tlocal group = self.groups[name]\r\n\tif group then\r\n\t\tfor _, name in ipairs(group) do\r\n\t\t\tif not self:flag(name, ...) then return false end\r\n\t\tend\r\n\telseif select(\"#\", ...) > 0 then\r\n\t\tself.flags[name] = (...) and taggedprint(name) or nil\r\n\t\tlocal timed = self.timed\r\n\t\tlocal timelen = 0\r\n\t\tlocal taglen = 5\r\n\t\tfor name in pairs(self.flags) do\r\n\t\t\tlocal length = (type(timed) == \"table\") and timed[flag] or timed\r\n\t\t\tif length == true then\r\n\t\t\t\tlength = 19 -- length of 'DD/MM/YY HH:mm:ss -'\r\n\t\t\telseif type(length) == \"string\" then\r\n\t\t\t\tlength = #os.date(length)\r\n\t\t\telse\r\n\t\t\t\tlength = 0\r\n\t\t\tend\r\n\t\t\ttimelen = math.max(timelen, length)\r\n\t\t\ttaglen = math.max(taglen, #name)\r\n\t\tend\r\n\t\tself.flaglength = math.max(taglen + 3, self.flaglength)\r\n\t\tself.timelength = math.max(timelen + 1, self.timelength)\r\n\t\tself:updatetabs()\r\n\telse\r\n\t\treturn self.flags[name] ~= nil\r\n\tend\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "local group = self.groups[name]",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if group then\r\n\t\tfor _, name in ipairs(group) do\r\n\t\t\tif not self:flag(name, ...) then return false end\r\n\t\tend\r\n\telseif select(\"#\", ...) > 0 then\r\n\t\tself.flags[name] = (...) and taggedprint(name) or nil\r\n\t\tlocal timed = self.timed\r\n\t\tlocal timelen = 0\r\n\t\tlocal taglen = 5\r\n\t\tfor name in pairs(self.flags) do\r\n\t\t\tlocal length = (type(timed) == \"table\") and timed[flag] or timed\r\n\t\t\tif length == true then\r\n\t\t\t\tlength = 19 -- length of 'DD/MM/YY HH:mm:ss -'\r\n\t\t\telseif type(length) == \"string\" then\r\n\t\t\t\tlength = #os.date(length)\r\n\t\t\telse\r\n\t\t\t\tlength = 0\r\n\t\t\tend\r\n\t\t\ttimelen = math.max(timelen, length)\r\n\t\t\ttaglen = math.max(taglen, #name)\r\n\t\tend\r\n\t\tself.flaglength = math.max(taglen + 3, self.flaglength)\r\n\t\tself.timelength = math.max(timelen + 1, self.timelength)\r\n\t\tself:updatetabs()\r\n\telse\r\n\t\treturn self.flags[name] ~= nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "for _, name in ipairs(group) do\r\n\t\t\tif not self:flag(name, ...) then return false end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 98,
    "text": "if not self:flag(name, ...) then return false end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "self.flags[name] = (...) and taggedprint(name) or nil",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "local timed = self.timed",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local timelen = 0",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local taglen = 5",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "for name in pairs(self.flags) do\r\n\t\t\tlocal length = (type(timed) == \"table\") and timed[flag] or timed\r\n\t\t\tif length == true then\r\n\t\t\t\tlength = 19 -- length of 'DD/MM/YY HH:mm:ss -'\r\n\t\t\telseif type(length) == \"string\" then\r\n\t\t\t\tlength = #os.date(length)\r\n\t\t\telse\r\n\t\t\t\tlength = 0\r\n\t\t\tend\r\n\t\t\ttimelen = math.max(timelen, length)\r\n\t\t\ttaglen = math.max(taglen, #name)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 104,
    "text": "local length = (type(timed) == \"table\") and timed[flag] or timed",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if length == true then\r\n\t\t\t\tlength = 19 -- length of 'DD/MM/YY HH:mm:ss -'\r\n\t\t\telseif type(length) == \"string\" then\r\n\t\t\t\tlength = #os.date(length)\r\n\t\t\telse\r\n\t\t\t\tlength = 0\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "length = 19",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "length = #os.date(length)",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "length = 0",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "timelen = math.max(timelen, length)",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "taglen = math.max(taglen, #name)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "self.flaglength = math.max(taglen + 3, self.flaglength)",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "self.timelength = math.max(timelen + 1, self.timelength)",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function level(self, ...)\r\n\tif select(\"#\", ...) == 0 then\r\n\t\tfor level = 1, #self.groups do\r\n\t\t\tif not self:flag(level) then return level - 1 end\r\n\t\tend\r\n\t\treturn #self.groups\r\n\telse\r\n\t\tfor level = 1, #self.groups do\r\n\t\t\tself:flag(level, level <= ...)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "if select(\"#\", ...) == 0 then\r\n\t\tfor level = 1, #self.groups do\r\n\t\t\tif not self:flag(level) then return level - 1 end\r\n\t\tend\r\n\t\treturn #self.groups\r\n\telse\r\n\t\tfor level = 1, #self.groups do\r\n\t\t\tself:flag(level, level <= ...)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "for level = 1, #self.groups do\r\n\t\t\tif not self:flag(level) then return level - 1 end\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 117,
    "text": "if not self:flag(level) then return level - 1 end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "for level = 1, #self.groups do\r\n\t\t\tself:flag(level, level <= ...)\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 119,
    "text": "self:flag(level, level <= ...)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function (self, start, ...)\r\n\t\tlocal running = coroutine.running()\r\n\t\tif rawget(self, \"current\") ~= running then\r\n\t\t\tself.current = running\r\n\t\t\tself:updatetabs()\r\n\t\tend\r\n\t\tif start == false then\r\n\t\t\tself:updatetabs(-1)\r\n\t\t\twrite(self, tag, ...)\r\n\t\telseif start == true then\r\n\t\t\twrite(self, tag, ...)\r\n\t\t\tself:updatetabs(1)\r\n\t\telse\r\n\t\t\twrite(self, tag, start, ...)\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "",
    "type": "function container"
  }, {
    "id": 124,
    "text": "io",
    "type": "module"
  }, {
    "id": 125,
    "text": "read",
    "type": "global function"
  }, {
    "id": 126,
    "text": "coroutine",
    "type": "module"
  }, {
    "id": 127,
    "text": "string",
    "type": "module"
  }, {
    "id": 128,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 129,
    "text": "os",
    "type": "module"
  }, {
    "id": 130,
    "text": "math",
    "type": "module"
  }, {
    "id": 131,
    "text": "rawnew",
    "type": "global function"
  }, {
    "id": 132,
    "text": "max",
    "type": "global function"
  }, {
    "id": 133,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 134,
    "text": "date",
    "type": "global function"
  }, {
    "id": 135,
    "text": "running",
    "type": "global function"
  }, {
    "id": 136,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 137,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 138,
    "text": "Viewer",
    "type": "global function"
  }, {
    "id": 139,
    "text": "ObjectCache",
    "type": "global function"
  }, {
    "id": 140,
    "text": "module",
    "type": "global function"
  }, {
    "id": 141,
    "text": "custom",
    "type": "global function"
  }, {
    "id": 142,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 143,
    "text": "require",
    "type": "global function"
  }, {
    "id": 144,
    "text": "type",
    "type": "global function"
  }, {
    "id": 145,
    "text": "inspect",
    "type": "global function"
  }, {
    "id": 146,
    "text": "select",
    "type": "global function"
  }, {
    "id": 147,
    "text": "",
    "type": "variable container"
  }, {
    "id": 148,
    "text": "",
    "type": "require container"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "n/a"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "n/a"
  }, {
    "id": 159,
    "text": "",
    "type": "local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "global variable"
  }, {
    "id": 168,
    "text": "",
    "type": "global variable"
  }, {
    "id": 169,
    "text": "",
    "type": "global variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 173,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "require local variable"
  } ]
}