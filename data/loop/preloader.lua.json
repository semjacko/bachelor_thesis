{
  "_filename": "preloader.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/preloader.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "calls",
    "to": 8
  }, {
    "from": 16,
    "label": "calls",
    "to": 20
  }, {
    "from": 16,
    "label": "calls",
    "to": 5
  }, {
    "from": 8,
    "label": "calls",
    "to": 5
  }, {
    "from": 16,
    "label": "calls",
    "to": 25
  }, {
    "from": 16,
    "label": "calls",
    "to": 2
  }, {
    "from": 16,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 19
  }, {
    "from": 8,
    "label": "calls",
    "to": 19
  }, {
    "from": 16,
    "label": "calls",
    "to": 19
  }, {
    "from": 16,
    "label": "calls",
    "to": 19
  }, {
    "from": 16,
    "label": "calls",
    "to": 22
  }, {
    "from": 16,
    "label": "calls",
    "to": 24
  }, {
    "from": 8,
    "label": "calls",
    "to": 23
  }, {
    "from": 16,
    "label": "calls",
    "to": 23
  }, {
    "from": 16,
    "label": "calls",
    "to": 23
  }, {
    "from": 16,
    "label": "calls",
    "to": 26
  }, {
    "from": 16,
    "label": "calls",
    "to": 26
  }, {
    "from": 16,
    "label": "calls",
    "to": 26
  }, {
    "from": 16,
    "label": "calls",
    "to": 21
  }, {
    "from": 16,
    "label": "calls",
    "to": 21
  }, {
    "from": 16,
    "label": "calls",
    "to": 21
  }, {
    "from": 16,
    "label": "calls",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 16
  }, {
    "from": 16,
    "label": "declares",
    "to": 2
  }, {
    "from": 16,
    "label": "declares",
    "to": 5
  }, {
    "from": 16,
    "label": "declares",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 29,
    "label": "initializes",
    "to": 30
  }, {
    "from": 30,
    "label": "requires",
    "to": 17
  }, {
    "from": 29,
    "label": "initializes",
    "to": 31
  }, {
    "from": 31,
    "label": "requires",
    "to": 18
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "preloader",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function escapepattern(pattern)\r\n\treturn pattern:gsub(\"([%^%$%(%)%%%.%[%]%*%+%-%?])\", \"%%%1\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function adjustpath(path)\r\n\tif path ~= \"\" and not path:find(filesep..\"$\") then\r\n\t\treturn path..FILE_SEP\r\n\tend\r\n\treturn path\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if path ~= \"\" and not path:find(filesep..\"$\") then\r\n\t\treturn path..FILE_SEP\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function openheader(name)\r\n\tlocal file, errmsg = io.open(name)\r\n\tif not file then\r\n\t\tfor _, path in ipairs(include) do\r\n\t\t\tpath = adjustpath(path)..name\r\n\t\t\tfile, errmsg = io.open(path)\r\n\t\t\tif file then break end\r\n\t\tend\r\n\tend\r\n\treturn file, errmsg\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local file, errmsg = io.open(name)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if not file then\r\n\t\tfor _, path in ipairs(include) do\r\n\t\t\tpath = adjustpath(path)..name\r\n\t\t\tfile, errmsg = io.open(path)\r\n\t\t\tif file then break end\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "for _, path in ipairs(include) do\r\n\t\t\tpath = adjustpath(path)..name\r\n\t\t\tfile, errmsg = io.open(path)\r\n\t\t\tif file then break end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "path = adjustpath(path)..name",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "file, errmsg = io.open(path)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if file then break end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "",
    "type": "function container"
  }, {
    "id": 17,
    "text": "io",
    "type": "module"
  }, {
    "id": 18,
    "text": "os",
    "type": "module"
  }, {
    "id": 19,
    "text": "open",
    "type": "global function"
  }, {
    "id": 20,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 21,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 22,
    "text": "_M",
    "type": "global function"
  }, {
    "id": 23,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 24,
    "text": "module",
    "type": "global function"
  }, {
    "id": 25,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 26,
    "text": "require",
    "type": "global function"
  }, {
    "id": 27,
    "text": "select",
    "type": "global function"
  }, {
    "id": 28,
    "text": "",
    "type": "variable container"
  }, {
    "id": 29,
    "text": "",
    "type": "require container"
  }, {
    "id": 30,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 31,
    "text": "",
    "type": "require local variable"
  } ]
}