{
  "_filename": "scoped.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/scoped.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 12
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 12
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 12
  }, {
    "from": 32,
    "label": "has",
    "to": 12
  }, {
    "from": 28,
    "label": "has",
    "to": 12
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 33
  }, {
    "from": 36,
    "label": "has",
    "to": 34
  }, {
    "from": 36,
    "label": "has",
    "to": 12
  }, {
    "from": 36,
    "label": "has",
    "to": 12
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 44,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 12
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 12
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 12
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 12
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 12
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 12
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 12
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 74,
    "label": "has",
    "to": 83
  }, {
    "from": 74,
    "label": "has",
    "to": 84
  }, {
    "from": 74,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 74,
    "label": "has",
    "to": 12
  }, {
    "from": 74,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 88,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 92
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 97,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 113,
    "label": "has",
    "to": 12
  }, {
    "from": 113,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 120,
    "label": "has",
    "to": 125
  }, {
    "from": 120,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 120,
    "label": "has",
    "to": 137
  }, {
    "from": 120,
    "label": "has",
    "to": 138
  }, {
    "from": 120,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 120,
    "label": "has",
    "to": 142
  }, {
    "from": 120,
    "label": "has",
    "to": 143
  }, {
    "from": 120,
    "label": "has",
    "to": 144
  }, {
    "from": 120,
    "label": "has",
    "to": 145
  }, {
    "from": 120,
    "label": "has",
    "to": 146
  }, {
    "from": 120,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 148,
    "label": "has",
    "to": 152
  }, {
    "from": 148,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 92
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 154,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 148,
    "label": "has",
    "to": 162
  }, {
    "from": 147,
    "label": "has",
    "to": 163
  }, {
    "from": 147,
    "label": "has",
    "to": 164
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 92
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 94
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 95
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 147,
    "label": "has",
    "to": 169
  }, {
    "from": 147,
    "label": "has",
    "to": 170
  }, {
    "from": 120,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 172,
    "label": "has",
    "to": 176
  }, {
    "from": 172,
    "label": "has",
    "to": 177
  }, {
    "from": 172,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 172,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 172,
    "label": "has",
    "to": 186
  }, {
    "from": 171,
    "label": "has",
    "to": 187
  }, {
    "from": 171,
    "label": "has",
    "to": 188
  }, {
    "from": 171,
    "label": "has",
    "to": 176
  }, {
    "from": 171,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 180
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 171,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 171,
    "label": "has",
    "to": 196
  }, {
    "from": 171,
    "label": "has",
    "to": 197
  }, {
    "from": 120,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 12
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 199,
    "label": "has",
    "to": 206
  }, {
    "from": 199,
    "label": "has",
    "to": 207
  }, {
    "from": 199,
    "label": "has",
    "to": 208
  }, {
    "from": 199,
    "label": "has",
    "to": 209
  }, {
    "from": 199,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 210,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 214,
    "label": "has",
    "to": 217
  }, {
    "from": 214,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 213
  }, {
    "from": 199,
    "label": "has",
    "to": 12
  }, {
    "from": 199,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 226,
    "label": "has",
    "to": 229
  }, {
    "from": 226,
    "label": "has",
    "to": 12
  }, {
    "from": 226,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 12
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 12
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 237,
    "label": "has",
    "to": 12
  }, {
    "from": 237,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 12
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 243,
    "label": "has",
    "to": 246
  }, {
    "from": 243,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 243,
    "label": "has",
    "to": 12
  }, {
    "from": 243,
    "label": "has",
    "to": 12
  }, {
    "from": 243,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 250,
    "label": "has",
    "to": 12
  }, {
    "from": 250,
    "label": "has",
    "to": 12
  }, {
    "from": 250,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "has",
    "to": 86
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 151
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 175
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 38,
    "label": "calls",
    "to": 267
  }, {
    "from": 97,
    "label": "calls",
    "to": 273
  }, {
    "from": 44,
    "label": "calls",
    "to": 268
  }, {
    "from": 233,
    "label": "calls",
    "to": 268
  }, {
    "from": 237,
    "label": "calls",
    "to": 268
  }, {
    "from": 68,
    "label": "calls",
    "to": 243
  }, {
    "from": 88,
    "label": "calls",
    "to": 60
  }, {
    "from": 97,
    "label": "calls",
    "to": 60
  }, {
    "from": 120,
    "label": "calls",
    "to": 60
  }, {
    "from": 120,
    "label": "calls",
    "to": 60
  }, {
    "from": 120,
    "label": "calls",
    "to": 60
  }, {
    "from": 120,
    "label": "calls",
    "to": 60
  }, {
    "from": 261,
    "label": "calls",
    "to": 262
  }, {
    "from": 74,
    "label": "calls",
    "to": 262
  }, {
    "from": 120,
    "label": "calls",
    "to": 262
  }, {
    "from": 120,
    "label": "calls",
    "to": 262
  }, {
    "from": 120,
    "label": "calls",
    "to": 262
  }, {
    "from": 120,
    "label": "calls",
    "to": 262
  }, {
    "from": 16,
    "label": "calls",
    "to": 269
  }, {
    "from": 28,
    "label": "calls",
    "to": 269
  }, {
    "from": 231,
    "label": "calls",
    "to": 282
  }, {
    "from": 120,
    "label": "calls",
    "to": 38
  }, {
    "from": 120,
    "label": "calls",
    "to": 38
  }, {
    "from": 120,
    "label": "calls",
    "to": 38
  }, {
    "from": 120,
    "label": "calls",
    "to": 38
  }, {
    "from": 120,
    "label": "calls",
    "to": 38
  }, {
    "from": 120,
    "label": "calls",
    "to": 38
  }, {
    "from": 120,
    "label": "calls",
    "to": 44
  }, {
    "from": 120,
    "label": "calls",
    "to": 44
  }, {
    "from": 120,
    "label": "calls",
    "to": 44
  }, {
    "from": 120,
    "label": "calls",
    "to": 44
  }, {
    "from": 226,
    "label": "calls",
    "to": 277
  }, {
    "from": 243,
    "label": "calls",
    "to": 277
  }, {
    "from": 250,
    "label": "calls",
    "to": 277
  }, {
    "from": 54,
    "label": "calls",
    "to": 270
  }, {
    "from": 120,
    "label": "calls",
    "to": 270
  }, {
    "from": 120,
    "label": "calls",
    "to": 270
  }, {
    "from": 199,
    "label": "calls",
    "to": 270
  }, {
    "from": 113,
    "label": "calls",
    "to": 28
  }, {
    "from": 199,
    "label": "calls",
    "to": 28
  }, {
    "from": 14,
    "label": "calls",
    "to": 271
  }, {
    "from": 26,
    "label": "calls",
    "to": 271
  }, {
    "from": 9,
    "label": "calls",
    "to": 286
  }, {
    "from": 16,
    "label": "calls",
    "to": 286
  }, {
    "from": 28,
    "label": "calls",
    "to": 275
  }, {
    "from": 28,
    "label": "calls",
    "to": 275
  }, {
    "from": 120,
    "label": "calls",
    "to": 8
  }, {
    "from": 74,
    "label": "calls",
    "to": 276
  }, {
    "from": 120,
    "label": "calls",
    "to": 14
  }, {
    "from": 74,
    "label": "calls",
    "to": 263
  }, {
    "from": 120,
    "label": "calls",
    "to": 263
  }, {
    "from": 120,
    "label": "calls",
    "to": 263
  }, {
    "from": 120,
    "label": "calls",
    "to": 263
  }, {
    "from": 88,
    "label": "calls",
    "to": 278
  }, {
    "from": 74,
    "label": "calls",
    "to": 280
  }, {
    "from": 120,
    "label": "calls",
    "to": 280
  }, {
    "from": 120,
    "label": "calls",
    "to": 280
  }, {
    "from": 120,
    "label": "calls",
    "to": 280
  }, {
    "from": 120,
    "label": "calls",
    "to": 280
  }, {
    "from": 120,
    "label": "calls",
    "to": 113
  }, {
    "from": 120,
    "label": "calls",
    "to": 113
  }, {
    "from": 120,
    "label": "calls",
    "to": 113
  }, {
    "from": 261,
    "label": "calls",
    "to": 283
  }, {
    "from": 64,
    "label": "calls",
    "to": 241
  }, {
    "from": 231,
    "label": "calls",
    "to": 241
  }, {
    "from": 250,
    "label": "calls",
    "to": 241
  }, {
    "from": 226,
    "label": "calls",
    "to": 279
  }, {
    "from": 243,
    "label": "calls",
    "to": 265
  }, {
    "from": 250,
    "label": "calls",
    "to": 265
  }, {
    "from": 60,
    "label": "calls",
    "to": 288
  }, {
    "from": 199,
    "label": "calls",
    "to": 288
  }, {
    "from": 120,
    "label": "calls",
    "to": 26
  }, {
    "from": 243,
    "label": "calls",
    "to": 231
  }, {
    "from": 250,
    "label": "calls",
    "to": 231
  }, {
    "from": 261,
    "label": "calls",
    "to": 284
  }, {
    "from": 261,
    "label": "calls",
    "to": 284
  }, {
    "from": 261,
    "label": "calls",
    "to": 284
  }, {
    "from": 261,
    "label": "calls",
    "to": 284
  }, {
    "from": 261,
    "label": "calls",
    "to": 284
  }, {
    "from": 261,
    "label": "calls",
    "to": 284
  }, {
    "from": 261,
    "label": "calls",
    "to": 284
  }, {
    "from": 261,
    "label": "calls",
    "to": 272
  }, {
    "from": 261,
    "label": "calls",
    "to": 287
  }, {
    "from": 74,
    "label": "calls",
    "to": 287
  }, {
    "from": 120,
    "label": "calls",
    "to": 287
  }, {
    "from": 120,
    "label": "calls",
    "to": 287
  }, {
    "from": 44,
    "label": "calls",
    "to": 266
  }, {
    "from": 233,
    "label": "calls",
    "to": 266
  }, {
    "from": 237,
    "label": "calls",
    "to": 266
  }, {
    "from": 14,
    "label": "calls",
    "to": 7
  }, {
    "from": 26,
    "label": "calls",
    "to": 7
  }, {
    "from": 261,
    "label": "calls",
    "to": 7
  }, {
    "from": 28,
    "label": "calls",
    "to": 285
  }, {
    "from": 38,
    "label": "calls",
    "to": 285
  }, {
    "from": 74,
    "label": "calls",
    "to": 285
  }, {
    "from": 74,
    "label": "calls",
    "to": 285
  }, {
    "from": 74,
    "label": "calls",
    "to": 285
  }, {
    "from": 199,
    "label": "calls",
    "to": 285
  }, {
    "from": 28,
    "label": "calls",
    "to": 274
  }, {
    "from": 66,
    "label": "calls",
    "to": 250
  }, {
    "from": 113,
    "label": "calls",
    "to": 281
  }, {
    "from": 120,
    "label": "calls",
    "to": 281
  }, {
    "from": 120,
    "label": "calls",
    "to": 281
  }, {
    "from": 199,
    "label": "calls",
    "to": 281
  }, {
    "from": 199,
    "label": "calls",
    "to": 281
  }, {
    "from": 5,
    "label": "contains",
    "to": 261
  }, {
    "from": 261,
    "label": "declares",
    "to": 9
  }, {
    "from": 261,
    "label": "declares",
    "to": 14
  }, {
    "from": 261,
    "label": "declares",
    "to": 16
  }, {
    "from": 261,
    "label": "declares",
    "to": 26
  }, {
    "from": 261,
    "label": "declares",
    "to": 28
  }, {
    "from": 261,
    "label": "declares",
    "to": 36
  }, {
    "from": 261,
    "label": "declares",
    "to": 38
  }, {
    "from": 261,
    "label": "declares",
    "to": 44
  }, {
    "from": 261,
    "label": "declares",
    "to": 54
  }, {
    "from": 261,
    "label": "declares",
    "to": 60
  }, {
    "from": 261,
    "label": "declares",
    "to": 64
  }, {
    "from": 261,
    "label": "declares",
    "to": 66
  }, {
    "from": 261,
    "label": "declares",
    "to": 68
  }, {
    "from": 261,
    "label": "declares",
    "to": 70
  }, {
    "from": 261,
    "label": "declares",
    "to": 72
  }, {
    "from": 261,
    "label": "declares",
    "to": 74
  }, {
    "from": 261,
    "label": "declares",
    "to": 88
  }, {
    "from": 261,
    "label": "declares",
    "to": 97
  }, {
    "from": 261,
    "label": "declares",
    "to": 113
  }, {
    "from": 261,
    "label": "declares",
    "to": 120
  }, {
    "from": 261,
    "label": "declares",
    "to": 199
  }, {
    "from": 261,
    "label": "declares",
    "to": 226
  }, {
    "from": 261,
    "label": "declares",
    "to": 231
  }, {
    "from": 261,
    "label": "declares",
    "to": 233
  }, {
    "from": 261,
    "label": "declares",
    "to": 237
  }, {
    "from": 261,
    "label": "declares",
    "to": 241
  }, {
    "from": 261,
    "label": "declares",
    "to": 243
  }, {
    "from": 261,
    "label": "declares",
    "to": 250
  }, {
    "from": 261,
    "label": "declares",
    "to": 255
  }, {
    "from": 261,
    "label": "declares",
    "to": 257
  }, {
    "from": 261,
    "label": "declares",
    "to": 259
  }, {
    "from": 5,
    "label": "contains",
    "to": 289
  }, {
    "from": 5,
    "label": "contains",
    "to": 290
  }, {
    "from": 289,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 289,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 289,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 289,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 289,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 289,
    "label": "initializes",
    "to": 301
  }, {
    "from": 301,
    "label": "assigns",
    "to": 302
  }, {
    "from": 289,
    "label": "initializes",
    "to": 303
  }, {
    "from": 303,
    "label": "assigns",
    "to": 304
  }, {
    "from": 289,
    "label": "initializes",
    "to": 305
  }, {
    "from": 305,
    "label": "assigns",
    "to": 306
  }, {
    "from": 289,
    "label": "initializes",
    "to": 307
  }, {
    "from": 307,
    "label": "assigns",
    "to": 308
  }, {
    "from": 289,
    "label": "initializes",
    "to": 309
  }, {
    "from": 309,
    "label": "assigns",
    "to": 310
  }, {
    "from": 289,
    "label": "initializes",
    "to": 311
  }, {
    "from": 311,
    "label": "assigns",
    "to": 312
  }, {
    "from": 289,
    "label": "initializes",
    "to": 313
  }, {
    "from": 313,
    "label": "assigns",
    "to": 314
  }, {
    "from": 289,
    "label": "initializes",
    "to": 315
  }, {
    "from": 315,
    "label": "assigns",
    "to": 316
  }, {
    "from": 289,
    "label": "initializes",
    "to": 317
  }, {
    "from": 317,
    "label": "assigns",
    "to": 318
  }, {
    "from": 290,
    "label": "initializes",
    "to": 319
  }, {
    "from": 319,
    "label": "requires",
    "to": 264
  }, {
    "from": 290,
    "label": "initializes",
    "to": 320
  }, {
    "from": 320,
    "label": "requires",
    "to": 6
  }, {
    "from": 290,
    "label": "initializes",
    "to": 321
  }, {
    "from": 321,
    "label": "requires",
    "to": 1
  }, {
    "from": 290,
    "label": "initializes",
    "to": 322
  }, {
    "from": 322,
    "label": "requires",
    "to": 2
  }, {
    "from": 290,
    "label": "initializes",
    "to": 323
  }, {
    "from": 323,
    "label": "requires",
    "to": 4
  }, {
    "from": 290,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "requires",
    "to": 3
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 255
  }, {
    "from": 150,
    "label": "hasArgument",
    "to": 257
  }, {
    "from": 174,
    "label": "hasArgument",
    "to": 259
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ObjectCache",
    "type": "module"
  }, {
    "id": 2,
    "text": "OrderedSet",
    "type": "module"
  }, {
    "id": 3,
    "text": "Conditional",
    "type": "module"
  }, {
    "id": 4,
    "text": "multiple",
    "type": "module"
  }, {
    "id": 5,
    "text": "scoped",
    "type": "module"
  }, {
    "id": 6,
    "text": "table",
    "type": "module"
  }, {
    "id": 7,
    "text": "function class(class, ...)\r\n\tif select(\"#\", ...) > 1\r\n\t\tthen return base.rawnew(table.copy(MultipleClass, {...}), initclass(class))\r\n\t\telse return base.class(class, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function instanceof(object, class)\r\n\treturn subclassof(classof(object), class)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function newprotected(self, object)                                       -- [[VERBOSE]] verbose:scoped(\"new 'protected' for 'public' \",object)\r\n\tlocal protected = self.class()\r\n\tObject[protected] = object\r\n\treturn protected\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local protected = self.class()",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "Object[protected] = object",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function ProtectedPool(members)                                           -- [[VERBOSE]] verbose:scoped \"new protected pool\"\r\n\treturn ObjectCache {\r\n\t\tclass = base.class(members),\r\n\t\tretrieve = newprotected,\r\n\t}\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function newprivate(self, outter)                                         -- [[VERBOSE]] verbose:scoped(true, \"retrieving 'private' for reference \",outter)\r\n\tlocal object = Object[outter]                                                 -- [[VERBOSE]] verbose:scoped(\"'public' is \",object or outter)\r\n\tlocal private = rawget(self, object)\r\n\tif not private then\r\n\t\tprivate = self.class()                                                      -- [[VERBOSE]] verbose:scoped(\"new 'private' created: \",private)\r\n\t\tif object then\r\n\t\t\tObject[private] = object                                                  -- [[VERBOSE]] verbose:scoped(\"'public' \",object,\" registered for the new 'private' \",private)\r\n\t\t\tself[object] = private                                                    -- [[VERBOSE]] verbose:scoped(\"new 'private' \",private,\" stored at the pool for 'public' \",object)\r\n\t\telse\r\n\t\t\tObject[private] = outter                                                  -- [[VERBOSE]] verbose:scoped(\"'public' \",outter,\" registered for the new 'private' \",private)\r\n\t\tend                                                                         -- [[VERBOSE]] else verbose:scoped(\"reusing 'private' \",private,\" associated to 'public'\")\r\n\tend                                                                           -- [[VERBOSE]] verbose:scoped(false, \"returning 'private' \",private,\" for reference \",outter)\r\n\treturn private\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local object = Object[outter]",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local private = rawget(self, object)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if not private then\r\n\t\tprivate = self.class()                                                      -- [[VERBOSE]] verbose:scoped(\"new 'private' created: \",private)\r\n\t\tif object then\r\n\t\t\tObject[private] = object                                                  -- [[VERBOSE]] verbose:scoped(\"'public' \",object,\" registered for the new 'private' \",private)\r\n\t\t\tself[object] = private                                                    -- [[VERBOSE]] verbose:scoped(\"new 'private' \",private,\" stored at the pool for 'public' \",object)\r\n\t\telse\r\n\t\t\tObject[private] = outter                                                  -- [[VERBOSE]] verbose:scoped(\"'public' \",outter,\" registered for the new 'private' \",private)\r\n\t\tend                                                                         -- [[VERBOSE]] else verbose:scoped(\"reusing 'private' \",private,\" associated to 'public'\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "private = self.class()",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if object then\r\n\t\t\tObject[private] = object                                                  -- [[VERBOSE]] verbose:scoped(\"'public' \",object,\" registered for the new 'private' \",private)\r\n\t\t\tself[object] = private                                                    -- [[VERBOSE]] verbose:scoped(\"new 'private' \",private,\" stored at the pool for 'public' \",object)\r\n\t\telse\r\n\t\t\tObject[private] = outter                                                  -- [[VERBOSE]] verbose:scoped(\"'public' \",outter,\" registered for the new 'private' \",private)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "Object[private] = object",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "self[object] = private",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "Object[private] = outter",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function PrivatePool(members)                                             -- [[VERBOSE]] verbose:scoped{\"new private pool\", members = members}\r\n\treturn ObjectCache {\r\n\t\tclass = base.class(members),\r\n\t\tretrieve = newprivate,\r\n\t}\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function bindto(class, member)\r\n\tif type(member) == \"function\" then                                            -- [[VERBOSE]] verbose:scoped(\"new method closure for \",member)\r\n\t\tlocal pool\r\n\t\tlocal method = member\r\n\t\tmember = function (self, ...)\r\n\t\t\tpool = rawget(class, getmetatable(self))                                  -- [[VERBOSE]] verbose:scoped(\"method call on reference \",self,\" (pool: \",pool,\")\")\r\n\t\t\tif pool\r\n\t\t\t\tthen return method(pool[self], ...)\r\n\t\t\t\telse return method(self, ...)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn member\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "if type(member) == \"function\" then                                            -- [[VERBOSE]] verbose:scoped(\"new method closure for \",member)\r\n\t\tlocal pool\r\n\t\tlocal method = member\r\n\t\tmember = function (self, ...)\r\n\t\t\tpool = rawget(class, getmetatable(self))                                  -- [[VERBOSE]] verbose:scoped(\"method call on reference \",self,\" (pool: \",pool,\")\")\r\n\t\t\tif pool\r\n\t\t\t\tthen return method(pool[self], ...)\r\n\t\t\t\telse return method(self, ...)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local pool",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local method = member",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "member = function (self, ...)\r\n\t\t\tpool = rawget(class, getmetatable(self))                                  -- [[VERBOSE]] verbose:scoped(\"method call on reference \",self,\" (pool: \",pool,\")\")\r\n\t\t\tif pool\r\n\t\t\t\tthen return method(pool[self], ...)\r\n\t\t\t\telse return method(self, ...)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "pool = rawget(class, getmetatable(self))",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if pool\r\n\t\t\t\tthen return method(pool[self], ...)\r\n\t\t\t\telse return method(self, ...)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function (self, ...)\r\n\t\t\tpool = rawget(class, getmetatable(self))                                  -- [[VERBOSE]] verbose:scoped(\"method call on reference \",self,\" (pool: \",pool,\")\")\r\n\t\t\tif pool\r\n\t\t\t\tthen return method(pool[self], ...)\r\n\t\t\t\telse return method(self, ...)\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function createindexer(class, scope, action)\r\n\tlocal meta = class:getmeta(scope)\r\n\tlocal index = meta[\"__\"..action]\r\n\tlocal indextype = type(index)..\"index\"\r\n\tlocal codename = table.concat({scope,action,index and (\"with \"..indextype)},\" \")\r\n\r\n\treturn indexer:execute({\r\n\t\t\t[action]    = true,\r\n\t\t\t[scope]     = true,\r\n\t\t\t[indextype] = true,\r\n\t\t},\r\n\t\tObject,\r\n\t\tmeta,\r\n\t\tclass,\r\n\t\tbindto,\r\n\t\tindex\r\n\t)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local meta = class:getmeta(scope)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local index = meta[\"__\"..action]",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local indextype = type(index)..\"index\"",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local codename = table.concat({scope,action,index and (\"with \"..indextype)},\" \")",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function unwrap(meta, tag)\r\n\tlocal indexer\r\n\tlocal key = \"__\"..tag\r\n\tlocal func = assert(meta[key], \"no indexer found in scoped class metatable.\")\r\n\tlocal name, value\r\n\tlocal i = 1\r\n\trepeat\r\n\t\tname, value = debug.getupvalue(func, i)\r\n\t\ti = i + 1\r\n\tuntil name == nil or name == tag\r\n\treturn value\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local indexer",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local key = \"__\"..tag",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local func = assert(meta[key], \"no indexer found in scoped class metatable.\")",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local name, value",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "repeat\r\n\t\tname, value = debug.getupvalue(func, i)\r\n\t\ti = i + 1\r\n\tuntil name == nil or name == tag",
    "type": "statement:repeat"
  }, {
    "id": 51,
    "text": "name, value = debug.getupvalue(func, i)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function supersiterator(stack, class)\r\n\tclass = stack[class]\r\n\tif class then\r\n\t\tfor _, super in ipairs(class.supers) do\r\n\t\t\tstack:insert(super, class)\r\n\t\tend\r\n\t\treturn class\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "class = stack[class]",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if class then\r\n\t\tfor _, super in ipairs(class.supers) do\r\n\t\t\tstack:insert(super, class)\r\n\t\tend\r\n\t\treturn class\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "for _, super in ipairs(class.supers) do\r\n\t\t\tstack:insert(super, class)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 58,
    "text": "stack:insert(super, class)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "local function hierarchyof(class)\r\n\tlocal stack = OrderedSet()\r\n\tstack:push(class)\r\n\treturn supersiterator, stack, OrderedSet.firstkey\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local stack = OrderedSet()",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "stack:push(class)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "local function publicproxy_call(_, object)\r\n\treturn this(object)\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local function protectedproxy_call(_, object)\r\n\treturn prot(object)\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function privateproxy_call(_, object, class)\r\n\treturn priv(object, class)\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function ScopedClass:getmeta(scope)\r\n\treturn self[scope] and self[scope].class\r\n\t         or\r\n\t       (scope == \"public\") and self.class\r\n\t         or\r\n\t       nil\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function ScopedClass:getmembers(scope)\r\n\treturn self.members[scope]\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function ScopedClass:__init(class)\r\n\tif not class then class = { public = {} } end\r\n\t\r\n\t-- adjust class definition to use scoped member tables\r\n\tif type(class.public) ~= \"table\" then\r\n\t\tif\r\n\t\t\t(type(class.protected) == \"table\")\r\n\t\t\t\tor\r\n\t\t\t(type(class.private) == \"table\")\r\n\t\tthen\r\n\t\t\tclass.public = {}\r\n\t\telse\r\n\t\t\tlocal public = table.copy(class)\r\n\t\t\ttable.clear(class)\r\n\t\t\tclass.public = public\r\n\t\tend\r\n\tend\r\n\r\n\t-- initialize scoped cached class\r\n\tself = CachedClass.__init(self, class)\r\n\tself.registry = { [self.class] = false }\r\n\r\n\t-- define scoped class proxy for public state\r\n\trawset(self.proxy, \"public\", setmetatable({}, {\r\n\t\t__call = publicproxy_call,\r\n\t\t__index = self.class,\r\n\t\t__newindex = function(_, field, value)\r\n\t\t\tself:updatefield(field, value, \"public\")\r\n\t\tend,\r\n\t}))\r\n\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "if not class then class = { public = {} } end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "class = { public = {} }",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "if type(class.public) ~= \"table\" then\r\n\t\tif\r\n\t\t\t(type(class.protected) == \"table\")\r\n\t\t\t\tor\r\n\t\t\t(type(class.private) == \"table\")\r\n\t\tthen\r\n\t\t\tclass.public = {}\r\n\t\telse\r\n\t\t\tlocal public = table.copy(class)\r\n\t\t\ttable.clear(class)\r\n\t\t\tclass.public = public\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "if\r\n\t\t\t(type(class.protected) == \"table\")\r\n\t\t\t\tor\r\n\t\t\t(type(class.private) == \"table\")\r\n\t\tthen\r\n\t\t\tclass.public = {}\r\n\t\telse\r\n\t\t\tlocal public = table.copy(class)\r\n\t\t\ttable.clear(class)\r\n\t\t\tclass.public = public\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "class.public = {}",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "local public = table.copy(class)",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "table.clear(class)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "class.public = public",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "self = CachedClass.__init(self, class)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "self.registry = { [self.class] = false }",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "rawset(self.proxy, \"public\", setmetatable({}, {\r\n\t\t__call = publicproxy_call,\r\n\t\t__index = self.class,\r\n\t\t__newindex = function(_, field, value)\r\n\t\t\tself:updatefield(field, value, \"public\")\r\n\t\tend,\r\n\t}))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "self:updatefield(field, value, \"public\")",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function ScopedClass:addsubclass(class)\r\n\tCachedClass.addsubclass(self, class)\r\n\r\n\tlocal public = class.class\r\n\tfor super in hierarchyof(self) do\r\n\t\tlocal registry = super.registry\r\n\t\tif registry then -- if super is a scoped class\r\n\t\t\tregistry[public] = false\r\n\t\t\tsuper[public] = super.private\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "CachedClass.addsubclass(self, class)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local public = class.class",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "for super in hierarchyof(self) do\r\n\t\tlocal registry = super.registry\r\n\t\tif registry then -- if super is a scoped class\r\n\t\t\tregistry[public] = false\r\n\t\t\tsuper[public] = super.private\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 92,
    "text": "local registry = super.registry",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if registry then -- if super is a scoped class\r\n\t\t\tregistry[public] = false\r\n\t\t\tsuper[public] = super.private\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "registry[public] = false",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "super[public] = super.private",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function ScopedClass:removesubclass(class)\r\n\tCachedClass.removesubclass(self, class)\r\n\r\n\tlocal public = self.class\r\n\tlocal protected = self:getmeta(\"protected\")\r\n\tlocal private = self:getmeta(\"private\")\r\n\r\n\tfor super in hierarchyof(self) do\r\n\t\tlocal registry = super.registry\r\n\t\tif registry then -- if super is a scoped class\r\n\t\t\tregistry[public] = nil\r\n\t\t\tsuper[public] = nil\r\n\t\t\tif protected then\r\n\t\t\t\tregistry[protected] = nil\r\n\t\t\t\tsuper[protected] = nil\r\n\t\t\tend\r\n\t\t\tif private then\r\n\t\t\t\tregistry[private] = nil\r\n\t\t\t\tsuper[private] = nil\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "CachedClass.removesubclass(self, class)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "local public = self.class",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local protected = self:getmeta(\"protected\")",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local private = self:getmeta(\"private\")",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "for super in hierarchyof(self) do\r\n\t\tlocal registry = super.registry\r\n\t\tif registry then -- if super is a scoped class\r\n\t\t\tregistry[public] = nil\r\n\t\t\tsuper[public] = nil\r\n\t\t\tif protected then\r\n\t\t\t\tregistry[protected] = nil\r\n\t\t\t\tsuper[protected] = nil\r\n\t\t\tend\r\n\t\t\tif private then\r\n\t\t\t\tregistry[private] = nil\r\n\t\t\t\tsuper[private] = nil\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 103,
    "text": "if registry then -- if super is a scoped class\r\n\t\t\tregistry[public] = nil\r\n\t\t\tsuper[public] = nil\r\n\t\t\tif protected then\r\n\t\t\t\tregistry[protected] = nil\r\n\t\t\t\tsuper[protected] = nil\r\n\t\t\tend\r\n\t\t\tif private then\r\n\t\t\t\tregistry[private] = nil\r\n\t\t\t\tsuper[private] = nil\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "registry[public] = nil",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "super[public] = nil",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "if protected then\r\n\t\t\t\tregistry[protected] = nil\r\n\t\t\t\tsuper[protected] = nil\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "registry[protected] = nil",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "super[protected] = nil",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "if private then\r\n\t\t\t\tregistry[private] = nil\r\n\t\t\t\tsuper[private] = nil\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "registry[private] = nil",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "super[private] = nil",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "local function copymembers(class, source, destiny)\r\n\tif source then\r\n\t\tif not destiny then destiny = {} end\r\n\t\tfor field, value in pairs(source) do\r\n\t\t\tdestiny[field] = bindto(class, value)\r\n\t\tend\r\n\tend\r\n\treturn destiny\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "if source then\r\n\t\tif not destiny then destiny = {} end\r\n\t\tfor field, value in pairs(source) do\r\n\t\t\tdestiny[field] = bindto(class, value)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "if not destiny then destiny = {} end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "destiny = {}",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "for field, value in pairs(source) do\r\n\t\t\tdestiny[field] = bindto(class, value)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 118,
    "text": "destiny[field] = bindto(class, value)",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function ScopedClass:updatemembers()\r\n\t--\r\n\t-- metatables to collect with current members\r\n\t--\r\n\tlocal public = table.clear(self.class)\r\n\tlocal protected\r\n\tlocal private\r\n\t\r\n\t--\r\n\t-- copy inherited members\r\n\t--\r\n\tlocal publicindex, publicnewindex\r\n\tlocal protectedindex, protectednewindex\r\n\tlocal superclasses = self.supers\r\n\tfor i = #superclasses, 1, -1 do\r\n\t\tlocal super = superclasses[i]\r\n\r\n\t\t-- copy members from superclass metatables\r\n\t\tpublic = table.copy(super.class, public)\r\n\r\n\t\tif base.instanceof(super, ScopedClass) then\r\n\t\t\t-- copy protected members from superclass metatables\r\n\t\t\tprotected = table.copy(super:getmeta(\"protected\"), protected)\r\n\r\n\t\t\t-- extract the __index and __newindex values\r\n\t\t\tpublicindex    = unwrap(public, \"index\")    or publicindex\r\n\t\t\tpublicnewindex = unwrap(public, \"newindex\") or publicnewindex\r\n\t\t\tif protected then\r\n\t\t\t\tprotectedindex    = unwrap(protected, \"index\")    or protectedindex\r\n\t\t\t\tprotectednewindex = unwrap(protected, \"newindex\") or protectednewindex\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tpublic.__index    = publicindex\r\n\tpublic.__newindex = publicnewindex\r\n\tif protected then\r\n\t\tprotected.__index    = protectedindex\r\n\t\tprotected.__newindex = protectednewindex\r\n\tend\r\n\r\n\t--\r\n\t-- copy members defined in the class\r\n\t--\r\n\tpublic    = copymembers(self, self.members.public,    public)\r\n\tprotected = copymembers(self, self.members.protected, protected)\r\n\tprivate   = copymembers(self, self.members.private,   private)\r\n\r\n\t--\r\n\t-- setup public metatable with proper indexers\r\n\t--\r\n\tpublic.__index = createindexer(self, \"public\", \"index\")\r\n\tpublic.__newindex = createindexer(self, \"public\", \"newindex\")\r\n\t\r\n\t--\r\n\t-- setup proper protected state features: pool, proxy and indexers\r\n\t--\r\n\tif protected then\r\n\t\tif not self.protected then\r\n\t\t\t-- create state object pool and class proxy for protected state\r\n\t\t\tself.protected = ProtectedPool(protected)\r\n\t\t\trawset(self.proxy, \"protected\", setmetatable({}, {\r\n\t\t\t\t__call = protectedproxy_call,\r\n\t\t\t\t__index = protected,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"protected\")\r\n\t\t\t\tend,\r\n\t\t\t}))\r\n\t\t\t-- register new pool in superclasses\r\n\t\t\tlocal protected_pool = self.protected\r\n\t\t\tfor super in hierarchyof(self) do\r\n\t\t\t\tlocal registry = super.registry\r\n\t\t\t\tif registry then\r\n\t\t\t\t\tregistry[public] = protected_pool\r\n\t\t\t\t\tregistry[protected] = false\r\n\t\r\n\t\t\t\t\tlocal pool = super.private\r\n\t\t\t\t\tif pool then\r\n\t\t\t\t\t\tsuper[public] = pool\r\n\t\t\t\t\t\tsuper[protected] = pool\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsuper[public] = protected_pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- update current metatable with new members\r\n\t\t\tprotected = table.copy(protected, table.clear(self.protected.class))\r\n\t\tend\r\n\r\n\t\t-- setup metatable with proper indexers\r\n\t\tprotected.__index = createindexer(self, \"protected\", \"index\")\r\n\t\tprotected.__newindex = createindexer(self, \"protected\", \"newindex\")\r\n\r\n\telseif self.protected then\r\n\t\t-- remove old pool from registry in superclasses\r\n\t\tlocal protected_pool = self.protected\r\n\t\tfor super in hierarchyof(self) do\r\n\t\t\tlocal registry = super.registry\r\n\t\t\tif registry then\r\n\t\t\t\tregistry[public] = false\r\n\t\t\t\tregistry[protected_pool.class] = nil\r\n\t\r\n\t\t\t\tsuper[public] = super.private\r\n\t\t\t\tsuper[protected_pool.class] = nil\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- remove state object pool and class proxy for protected state\r\n\t\tself.protected = nil\r\n\t\trawset(self.proxy, \"protected\", nil)\r\n\tend\r\n\t\r\n\t--\r\n\t-- setup proper private state features: pool, proxy and indexers\r\n\t--\r\n\tif private then\r\n\t\tif not self.private then\r\n\t\t\t-- create state object pool and class proxy for private state\r\n\t\t\tself.private = PrivatePool(private)\r\n\t\t\trawset(self.proxy, \"private\", setmetatable({}, {\r\n\t\t\t\t__call = privateproxy_call,\r\n\t\t\t\t__index = private,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"private\")\r\n\t\t\t\tend\r\n\t\t\t}))\r\n\t\t\t-- registry new pool in superclasses\r\n\t\t\tlocal private_pool = self.private\r\n\t\t\tlocal pool = self.protected or Object\r\n\t\t\tfor _, super in ipairs(superclasses) do\r\n\t\t\t\tfor class in hierarchyof(super) do\r\n\t\t\t\t\tlocal registry = class.registry\r\n\t\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\t\tregistry[private] = pool\r\n\t\t\t\t\t\tclass[private] = class.private_pool or pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tfor meta in pairs(self.registry) do\r\n\t\t\t\tself[meta] = private_pool\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- update current metatable with new members\r\n\t\t\tprivate = table.copy(private, table.clear(self:getmeta(\"private\")))\r\n\t\tend\r\n\r\n\t\t-- setup metatable with proper indexers\r\n\t\tprivate.__index = createindexer(self, \"private\", \"index\")\r\n\t\tprivate.__newindex = createindexer(self, \"private\", \"newindex\")\r\n\r\n\telseif self.private then\r\n\t\t-- remove old pool from registry in superclasses\r\n\t\tlocal private_pool = self.private\r\n\t\tfor _, super in ipairs(superclasses) do\r\n\t\t\tfor class in hierarchyof(super) do\r\n\t\t\t\tlocal registry = class.registry\r\n\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\tregistry[private_pool.class] = nil\r\n\t\t\t\t\tclass[private_pool.class] = nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor meta, pool in pairs(self.registry) do\r\n\t\t\tself[meta] = pool or nil\r\n\t\tend\r\n\t\t-- remove state object pool and class proxy for private state\r\n\t\tself.private = nil\r\n\t\trawset(self.proxy, \"private\", nil)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "local public = table.clear(self.class)",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local protected",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "local private",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "local publicindex, publicnewindex",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local protectedindex, protectednewindex",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local superclasses = self.supers",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "for i = #superclasses, 1, -1 do\r\n\t\tlocal super = superclasses[i]\r\n\r\n\t\t-- copy members from superclass metatables\r\n\t\tpublic = table.copy(super.class, public)\r\n\r\n\t\tif base.instanceof(super, ScopedClass) then\r\n\t\t\t-- copy protected members from superclass metatables\r\n\t\t\tprotected = table.copy(super:getmeta(\"protected\"), protected)\r\n\r\n\t\t\t-- extract the __index and __newindex values\r\n\t\t\tpublicindex    = unwrap(public, \"index\")    or publicindex\r\n\t\t\tpublicnewindex = unwrap(public, \"newindex\") or publicnewindex\r\n\t\t\tif protected then\r\n\t\t\t\tprotectedindex    = unwrap(protected, \"index\")    or protectedindex\r\n\t\t\t\tprotectednewindex = unwrap(protected, \"newindex\") or protectednewindex\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 128,
    "text": "local super = superclasses[i]",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "public = table.copy(super.class, public)",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "if base.instanceof(super, ScopedClass) then\r\n\t\t\t-- copy protected members from superclass metatables\r\n\t\t\tprotected = table.copy(super:getmeta(\"protected\"), protected)\r\n\r\n\t\t\t-- extract the __index and __newindex values\r\n\t\t\tpublicindex    = unwrap(public, \"index\")    or publicindex\r\n\t\t\tpublicnewindex = unwrap(public, \"newindex\") or publicnewindex\r\n\t\t\tif protected then\r\n\t\t\t\tprotectedindex    = unwrap(protected, \"index\")    or protectedindex\r\n\t\t\t\tprotectednewindex = unwrap(protected, \"newindex\") or protectednewindex\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "protected = table.copy(super:getmeta(\"protected\"), protected)",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "publicindex    = unwrap(public, \"index\")    or publicindex",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "publicnewindex = unwrap(public, \"newindex\") or publicnewindex",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "if protected then\r\n\t\t\t\tprotectedindex    = unwrap(protected, \"index\")    or protectedindex\r\n\t\t\t\tprotectednewindex = unwrap(protected, \"newindex\") or protectednewindex\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "protectedindex    = unwrap(protected, \"index\")    or protectedindex",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "protectednewindex = unwrap(protected, \"newindex\") or protectednewindex",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "public.__index    = publicindex",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "public.__newindex = publicnewindex",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "if protected then\r\n\t\tprotected.__index    = protectedindex\r\n\t\tprotected.__newindex = protectednewindex\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "protected.__index    = protectedindex",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "protected.__newindex = protectednewindex",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "public    = copymembers(self, self.members.public,    public)",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "protected = copymembers(self, self.members.protected, protected)",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "private   = copymembers(self, self.members.private,   private)",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "public.__index = createindexer(self, \"public\", \"index\")",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "public.__newindex = createindexer(self, \"public\", \"newindex\")",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "if protected then\r\n\t\tif not self.protected then\r\n\t\t\t-- create state object pool and class proxy for protected state\r\n\t\t\tself.protected = ProtectedPool(protected)\r\n\t\t\trawset(self.proxy, \"protected\", setmetatable({}, {\r\n\t\t\t\t__call = protectedproxy_call,\r\n\t\t\t\t__index = protected,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"protected\")\r\n\t\t\t\tend,\r\n\t\t\t}))\r\n\t\t\t-- register new pool in superclasses\r\n\t\t\tlocal protected_pool = self.protected\r\n\t\t\tfor super in hierarchyof(self) do\r\n\t\t\t\tlocal registry = super.registry\r\n\t\t\t\tif registry then\r\n\t\t\t\t\tregistry[public] = protected_pool\r\n\t\t\t\t\tregistry[protected] = false\r\n\t\r\n\t\t\t\t\tlocal pool = super.private\r\n\t\t\t\t\tif pool then\r\n\t\t\t\t\t\tsuper[public] = pool\r\n\t\t\t\t\t\tsuper[protected] = pool\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsuper[public] = protected_pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- update current metatable with new members\r\n\t\t\tprotected = table.copy(protected, table.clear(self.protected.class))\r\n\t\tend\r\n\r\n\t\t-- setup metatable with proper indexers\r\n\t\tprotected.__index = createindexer(self, \"protected\", \"index\")\r\n\t\tprotected.__newindex = createindexer(self, \"protected\", \"newindex\")\r\n\r\n\telseif self.protected then\r\n\t\t-- remove old pool from registry in superclasses\r\n\t\tlocal protected_pool = self.protected\r\n\t\tfor super in hierarchyof(self) do\r\n\t\t\tlocal registry = super.registry\r\n\t\t\tif registry then\r\n\t\t\t\tregistry[public] = false\r\n\t\t\t\tregistry[protected_pool.class] = nil\r\n\t\r\n\t\t\t\tsuper[public] = super.private\r\n\t\t\t\tsuper[protected_pool.class] = nil\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- remove state object pool and class proxy for protected state\r\n\t\tself.protected = nil\r\n\t\trawset(self.proxy, \"protected\", nil)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "if not self.protected then\r\n\t\t\t-- create state object pool and class proxy for protected state\r\n\t\t\tself.protected = ProtectedPool(protected)\r\n\t\t\trawset(self.proxy, \"protected\", setmetatable({}, {\r\n\t\t\t\t__call = protectedproxy_call,\r\n\t\t\t\t__index = protected,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"protected\")\r\n\t\t\t\tend,\r\n\t\t\t}))\r\n\t\t\t-- register new pool in superclasses\r\n\t\t\tlocal protected_pool = self.protected\r\n\t\t\tfor super in hierarchyof(self) do\r\n\t\t\t\tlocal registry = super.registry\r\n\t\t\t\tif registry then\r\n\t\t\t\t\tregistry[public] = protected_pool\r\n\t\t\t\t\tregistry[protected] = false\r\n\t\r\n\t\t\t\t\tlocal pool = super.private\r\n\t\t\t\t\tif pool then\r\n\t\t\t\t\t\tsuper[public] = pool\r\n\t\t\t\t\t\tsuper[protected] = pool\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsuper[public] = protected_pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- update current metatable with new members\r\n\t\t\tprotected = table.copy(protected, table.clear(self.protected.class))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "self.protected = ProtectedPool(protected)",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "rawset(self.proxy, \"protected\", setmetatable({}, {\r\n\t\t\t\t__call = protectedproxy_call,\r\n\t\t\t\t__index = protected,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"protected\")\r\n\t\t\t\tend,\r\n\t\t\t}))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "self:updatefield(field, value, \"protected\")",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "local protected_pool = self.protected",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "for super in hierarchyof(self) do\r\n\t\t\t\tlocal registry = super.registry\r\n\t\t\t\tif registry then\r\n\t\t\t\t\tregistry[public] = protected_pool\r\n\t\t\t\t\tregistry[protected] = false\r\n\t\r\n\t\t\t\t\tlocal pool = super.private\r\n\t\t\t\t\tif pool then\r\n\t\t\t\t\t\tsuper[public] = pool\r\n\t\t\t\t\t\tsuper[protected] = pool\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsuper[public] = protected_pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 154,
    "text": "if registry then\r\n\t\t\t\t\tregistry[public] = protected_pool\r\n\t\t\t\t\tregistry[protected] = false\r\n\t\r\n\t\t\t\t\tlocal pool = super.private\r\n\t\t\t\t\tif pool then\r\n\t\t\t\t\t\tsuper[public] = pool\r\n\t\t\t\t\t\tsuper[protected] = pool\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsuper[public] = protected_pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "registry[public] = protected_pool",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "registry[protected] = false",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "local pool = super.private",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if pool then\r\n\t\t\t\t\t\tsuper[public] = pool\r\n\t\t\t\t\t\tsuper[protected] = pool\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsuper[public] = protected_pool\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "super[public] = pool",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "super[protected] = pool",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "super[public] = protected_pool",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "protected = table.copy(protected, table.clear(self.protected.class))",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "protected.__index = createindexer(self, \"protected\", \"index\")",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "protected.__newindex = createindexer(self, \"protected\", \"newindex\")",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "for super in hierarchyof(self) do\r\n\t\t\tlocal registry = super.registry\r\n\t\t\tif registry then\r\n\t\t\t\tregistry[public] = false\r\n\t\t\t\tregistry[protected_pool.class] = nil\r\n\t\r\n\t\t\t\tsuper[public] = super.private\r\n\t\t\t\tsuper[protected_pool.class] = nil\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 166,
    "text": "if registry then\r\n\t\t\t\tregistry[public] = false\r\n\t\t\t\tregistry[protected_pool.class] = nil\r\n\t\r\n\t\t\t\tsuper[public] = super.private\r\n\t\t\t\tsuper[protected_pool.class] = nil\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "registry[protected_pool.class] = nil",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "super[protected_pool.class] = nil",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "self.protected = nil",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "rawset(self.proxy, \"protected\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "if private then\r\n\t\tif not self.private then\r\n\t\t\t-- create state object pool and class proxy for private state\r\n\t\t\tself.private = PrivatePool(private)\r\n\t\t\trawset(self.proxy, \"private\", setmetatable({}, {\r\n\t\t\t\t__call = privateproxy_call,\r\n\t\t\t\t__index = private,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"private\")\r\n\t\t\t\tend\r\n\t\t\t}))\r\n\t\t\t-- registry new pool in superclasses\r\n\t\t\tlocal private_pool = self.private\r\n\t\t\tlocal pool = self.protected or Object\r\n\t\t\tfor _, super in ipairs(superclasses) do\r\n\t\t\t\tfor class in hierarchyof(super) do\r\n\t\t\t\t\tlocal registry = class.registry\r\n\t\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\t\tregistry[private] = pool\r\n\t\t\t\t\t\tclass[private] = class.private_pool or pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tfor meta in pairs(self.registry) do\r\n\t\t\t\tself[meta] = private_pool\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- update current metatable with new members\r\n\t\t\tprivate = table.copy(private, table.clear(self:getmeta(\"private\")))\r\n\t\tend\r\n\r\n\t\t-- setup metatable with proper indexers\r\n\t\tprivate.__index = createindexer(self, \"private\", \"index\")\r\n\t\tprivate.__newindex = createindexer(self, \"private\", \"newindex\")\r\n\r\n\telseif self.private then\r\n\t\t-- remove old pool from registry in superclasses\r\n\t\tlocal private_pool = self.private\r\n\t\tfor _, super in ipairs(superclasses) do\r\n\t\t\tfor class in hierarchyof(super) do\r\n\t\t\t\tlocal registry = class.registry\r\n\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\tregistry[private_pool.class] = nil\r\n\t\t\t\t\tclass[private_pool.class] = nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor meta, pool in pairs(self.registry) do\r\n\t\t\tself[meta] = pool or nil\r\n\t\tend\r\n\t\t-- remove state object pool and class proxy for private state\r\n\t\tself.private = nil\r\n\t\trawset(self.proxy, \"private\", nil)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "if not self.private then\r\n\t\t\t-- create state object pool and class proxy for private state\r\n\t\t\tself.private = PrivatePool(private)\r\n\t\t\trawset(self.proxy, \"private\", setmetatable({}, {\r\n\t\t\t\t__call = privateproxy_call,\r\n\t\t\t\t__index = private,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"private\")\r\n\t\t\t\tend\r\n\t\t\t}))\r\n\t\t\t-- registry new pool in superclasses\r\n\t\t\tlocal private_pool = self.private\r\n\t\t\tlocal pool = self.protected or Object\r\n\t\t\tfor _, super in ipairs(superclasses) do\r\n\t\t\t\tfor class in hierarchyof(super) do\r\n\t\t\t\t\tlocal registry = class.registry\r\n\t\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\t\tregistry[private] = pool\r\n\t\t\t\t\t\tclass[private] = class.private_pool or pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tfor meta in pairs(self.registry) do\r\n\t\t\t\tself[meta] = private_pool\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- update current metatable with new members\r\n\t\t\tprivate = table.copy(private, table.clear(self:getmeta(\"private\")))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "self.private = PrivatePool(private)",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "rawset(self.proxy, \"private\", setmetatable({}, {\r\n\t\t\t\t__call = privateproxy_call,\r\n\t\t\t\t__index = private,\r\n\t\t\t\t__newindex = function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"private\")\r\n\t\t\t\tend\r\n\t\t\t}))",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "self:updatefield(field, value, \"private\")",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "local private_pool = self.private",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local pool = self.protected or Object",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "for _, super in ipairs(superclasses) do\r\n\t\t\t\tfor class in hierarchyof(super) do\r\n\t\t\t\t\tlocal registry = class.registry\r\n\t\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\t\tregistry[private] = pool\r\n\t\t\t\t\t\tclass[private] = class.private_pool or pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 179,
    "text": "for class in hierarchyof(super) do\r\n\t\t\t\t\tlocal registry = class.registry\r\n\t\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\t\tregistry[private] = pool\r\n\t\t\t\t\t\tclass[private] = class.private_pool or pool\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 180,
    "text": "local registry = class.registry",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "if registry then -- if class is a scoped class\r\n\t\t\t\t\t\tregistry[private] = pool\r\n\t\t\t\t\t\tclass[private] = class.private_pool or pool\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "registry[private] = pool",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "class[private] = class.private_pool or pool",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "for meta in pairs(self.registry) do\r\n\t\t\t\tself[meta] = private_pool\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 185,
    "text": "self[meta] = private_pool",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "private = table.copy(private, table.clear(self:getmeta(\"private\")))",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "private.__index = createindexer(self, \"private\", \"index\")",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "private.__newindex = createindexer(self, \"private\", \"newindex\")",
    "type": "statement:assign"
  }, {
    "id": 189,
    "text": "for _, super in ipairs(superclasses) do\r\n\t\t\tfor class in hierarchyof(super) do\r\n\t\t\t\tlocal registry = class.registry\r\n\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\tregistry[private_pool.class] = nil\r\n\t\t\t\t\tclass[private_pool.class] = nil\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 190,
    "text": "for class in hierarchyof(super) do\r\n\t\t\t\tlocal registry = class.registry\r\n\t\t\t\tif registry then -- if class is a scoped class\r\n\t\t\t\t\tregistry[private_pool.class] = nil\r\n\t\t\t\t\tclass[private_pool.class] = nil\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 191,
    "text": "if registry then -- if class is a scoped class\r\n\t\t\t\t\tregistry[private_pool.class] = nil\r\n\t\t\t\t\tclass[private_pool.class] = nil\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "registry[private_pool.class] = nil",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "class[private_pool.class] = nil",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "for meta, pool in pairs(self.registry) do\r\n\t\t\tself[meta] = pool or nil\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 195,
    "text": "self[meta] = pool or nil",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "self.private = nil",
    "type": "statement:assign"
  }, {
    "id": 197,
    "text": "rawset(self.proxy, \"private\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function ScopedClass:updatefield(name, member, scope)                           -- [[VERBOSE]] verbose:scoped(true, \"updating field \",name,\" on scope \",scope,\" with value \",member)\r\n\tmember = bindto(self, member)\r\n\tif not scope then\r\n\t\tif\r\n\t\t\t(\r\n\t\t\t\tname == \"public\"\r\n\t\t\t\t\tor\r\n\t\t\t\tname == \"protected\"\r\n\t\t\t\t\tor\r\n\t\t\t\tname == \"private\"\r\n\t\t\t) and (\r\n\t\t\t\tmember == nil\r\n\t\t\t\t\tor\r\n\t\t\t\ttype(member) == \"table\"\r\n\t\t\t)\r\n\t\tthen                                                                        -- [[VERBOSE]] verbose:scoped(\"updating scope field\")\r\n\t\t\tself.members[name] = member\r\n\t\t\treturn self:updatemembers()                                               -- [[VERBOSE]] , verbose:scoped(false, \"whole scope field updated\")\r\n\t\tend\r\n\t\tscope = \"public\"\r\n\tend\r\n\r\n\t-- Update member list\r\n\tlocal members = self:getmembers(scope)\r\n\tmembers[name] = member\r\n\r\n\t-- Create new member linkage and get old linkage\r\n\tlocal metatable = self:getmeta(scope)\r\n\tlocal old = metatable[name]\r\n\t\r\n\t-- Replace old linkage for the new one\r\n\tmetatable[name] = member\r\n\tif scope ~= \"private\" then\r\n\t\tlocal queue = OrderedSet()\r\n\t\tfor sub in pairs(self.subs) do\r\n\t\t\tqueue:enqueue(sub)\r\n\t\tend\r\n\t\twhile queue:head() do\r\n\t\t\tlocal current = queue:dequeue()\r\n\t\t\tmetatable = current:getmeta(scope)\r\n\t\t\tmembers = current:getmembers(scope)\r\n\t\t\tif members and (members[name] == nil) then\r\n\t\t\t\tfor _, super in ipairs(current.supers) do\r\n\t\t\t\t\tlocal super_meta = super:getmeta(scope)\r\n\t\t\t\t\tif super_meta[name] ~= nil then\r\n\t\t\t\t\t\tif super_meta[name] ~= metatable[name] then\r\n\t\t\t\t\t\t\tmetatable[name] = super_meta[name]\r\n\t\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend                                                                           -- [[VERBOSE]] verbose:scoped(false, \"field updated\")\r\n\treturn old\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "member = bindto(self, member)",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "if not scope then\r\n\t\tif\r\n\t\t\t(\r\n\t\t\t\tname == \"public\"\r\n\t\t\t\t\tor\r\n\t\t\t\tname == \"protected\"\r\n\t\t\t\t\tor\r\n\t\t\t\tname == \"private\"\r\n\t\t\t) and (\r\n\t\t\t\tmember == nil\r\n\t\t\t\t\tor\r\n\t\t\t\ttype(member) == \"table\"\r\n\t\t\t)\r\n\t\tthen                                                                        -- [[VERBOSE]] verbose:scoped(\"updating scope field\")\r\n\t\t\tself.members[name] = member\r\n\t\t\treturn self:updatemembers()                                               -- [[VERBOSE]] , verbose:scoped(false, \"whole scope field updated\")\r\n\t\tend\r\n\t\tscope = \"public\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "if\r\n\t\t\t(\r\n\t\t\t\tname == \"public\"\r\n\t\t\t\t\tor\r\n\t\t\t\tname == \"protected\"\r\n\t\t\t\t\tor\r\n\t\t\t\tname == \"private\"\r\n\t\t\t) and (\r\n\t\t\t\tmember == nil\r\n\t\t\t\t\tor\r\n\t\t\t\ttype(member) == \"table\"\r\n\t\t\t)\r\n\t\tthen                                                                        -- [[VERBOSE]] verbose:scoped(\"updating scope field\")\r\n\t\t\tself.members[name] = member\r\n\t\t\treturn self:updatemembers()                                               -- [[VERBOSE]] , verbose:scoped(false, \"whole scope field updated\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "self.members[name] = member",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "scope = \"public\"",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "local members = self:getmembers(scope)",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "members[name] = member",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "local metatable = self:getmeta(scope)",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "local old = metatable[name]",
    "type": "statement:localassign"
  }, {
    "id": 209,
    "text": "metatable[name] = member",
    "type": "statement:assign"
  }, {
    "id": 210,
    "text": "if scope ~= \"private\" then\r\n\t\tlocal queue = OrderedSet()\r\n\t\tfor sub in pairs(self.subs) do\r\n\t\t\tqueue:enqueue(sub)\r\n\t\tend\r\n\t\twhile queue:head() do\r\n\t\t\tlocal current = queue:dequeue()\r\n\t\t\tmetatable = current:getmeta(scope)\r\n\t\t\tmembers = current:getmembers(scope)\r\n\t\t\tif members and (members[name] == nil) then\r\n\t\t\t\tfor _, super in ipairs(current.supers) do\r\n\t\t\t\t\tlocal super_meta = super:getmeta(scope)\r\n\t\t\t\t\tif super_meta[name] ~= nil then\r\n\t\t\t\t\t\tif super_meta[name] ~= metatable[name] then\r\n\t\t\t\t\t\t\tmetatable[name] = super_meta[name]\r\n\t\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 211,
    "text": "local queue = OrderedSet()",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "for sub in pairs(self.subs) do\r\n\t\t\tqueue:enqueue(sub)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 213,
    "text": "queue:enqueue(sub)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "while queue:head() do\r\n\t\t\tlocal current = queue:dequeue()\r\n\t\t\tmetatable = current:getmeta(scope)\r\n\t\t\tmembers = current:getmembers(scope)\r\n\t\t\tif members and (members[name] == nil) then\r\n\t\t\t\tfor _, super in ipairs(current.supers) do\r\n\t\t\t\t\tlocal super_meta = super:getmeta(scope)\r\n\t\t\t\t\tif super_meta[name] ~= nil then\r\n\t\t\t\t\t\tif super_meta[name] ~= metatable[name] then\r\n\t\t\t\t\t\t\tmetatable[name] = super_meta[name]\r\n\t\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 215,
    "text": "local current = queue:dequeue()",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "metatable = current:getmeta(scope)",
    "type": "statement:assign"
  }, {
    "id": 217,
    "text": "members = current:getmembers(scope)",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "if members and (members[name] == nil) then\r\n\t\t\t\tfor _, super in ipairs(current.supers) do\r\n\t\t\t\t\tlocal super_meta = super:getmeta(scope)\r\n\t\t\t\t\tif super_meta[name] ~= nil then\r\n\t\t\t\t\t\tif super_meta[name] ~= metatable[name] then\r\n\t\t\t\t\t\t\tmetatable[name] = super_meta[name]\r\n\t\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "for _, super in ipairs(current.supers) do\r\n\t\t\t\t\tlocal super_meta = super:getmeta(scope)\r\n\t\t\t\t\tif super_meta[name] ~= nil then\r\n\t\t\t\t\t\tif super_meta[name] ~= metatable[name] then\r\n\t\t\t\t\t\t\tmetatable[name] = super_meta[name]\r\n\t\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 220,
    "text": "local super_meta = super:getmeta(scope)",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "if super_meta[name] ~= nil then\r\n\t\t\t\t\t\tif super_meta[name] ~= metatable[name] then\r\n\t\t\t\t\t\t\tmetatable[name] = super_meta[name]\r\n\t\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 222,
    "text": "if super_meta[name] ~= metatable[name] then\r\n\t\t\t\t\t\t\tmetatable[name] = super_meta[name]\r\n\t\t\t\t\t\t\tfor sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "metatable[name] = super_meta[name]",
    "type": "statement:assign"
  }, {
    "id": 224,
    "text": "for sub in pairs(current.subs) do\r\n\t\t\t\t\t\t\t\tqueue:enqueue(sub)\r\n\t\t\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function class(class, ...)\r\n\tclass = getclass(class) or ScopedClass(class)\r\n\tclass:updatehierarchy(...)\r\n\tclass:updateinheritance()\r\n\treturn class.proxy\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "class = getclass(class) or ScopedClass(class)",
    "type": "statement:assign"
  }, {
    "id": 228,
    "text": "class:updatehierarchy(...)",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "class:updateinheritance()",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function classof(object)\r\n\treturn cached_classof(this(object))\r\nend",
    "type": "function"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function methodfunction(method)\r\n\tlocal name, value = debug.getupvalue(method, 5)\r\n\tassert(name == \"method\", \"Oops! Got the wrong upvalue in 'methodfunction'\")\r\n\treturn value\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "local name, value = debug.getupvalue(method, 5)",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "assert(name == \"method\", \"Oops! Got the wrong upvalue in 'methodfunction'\")",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function methodclass(method)\r\n\tlocal name, value = debug.getupvalue(method, 3)\r\n\tassert(name == \"class\", \"Oops! Got the wrong upvalue in 'methodclass'\")\r\n\treturn value.proxy\r\nend",
    "type": "function"
  }, {
    "id": 238,
    "text": "local name, value = debug.getupvalue(method, 3)",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "assert(name == \"class\", \"Oops! Got the wrong upvalue in 'methodclass'\")",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "function this(object)\r\n\treturn Object[object] or object\r\nend",
    "type": "function"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "function priv(object, class)\r\n\tif not class then class = classof(object) end\r\n\tclass = getclass(class)\r\n\tif class and class.private then\r\n\t\tif base.classof(object) == class.private.class\r\n\t\t\tthen return object                 -- private object\r\n\t\t\telse return class.private[object]  -- protected or public object\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 244,
    "text": "if not class then class = classof(object) end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "class = classof(object)",
    "type": "statement:assign"
  }, {
    "id": 246,
    "text": "class = getclass(class)",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "if class and class.private then\r\n\t\tif base.classof(object) == class.private.class\r\n\t\t\tthen return object                 -- private object\r\n\t\t\telse return class.private[object]  -- protected or public object\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "if base.classof(object) == class.private.class\r\n\t\t\tthen return object                 -- private object\r\n\t\t\telse return class.private[object]  -- protected or public object\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function prot(object)\r\n\tlocal class = getclass(classof(object))\r\n\tif class and class.protected then\r\n\t\tif base.classof(object) == class.protected.class\r\n\t\t\tthen return object                         -- protected object\r\n\t\t\telse return class.protected[this(object)]  -- private or public object\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "local class = getclass(classof(object))",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "if class and class.protected then\r\n\t\tif base.classof(object) == class.protected.class\r\n\t\t\tthen return object                         -- protected object\r\n\t\t\telse return class.protected[this(object)]  -- private or public object\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 253,
    "text": "if base.classof(object) == class.protected.class\r\n\t\t\tthen return object                         -- protected object\r\n\t\t\telse return class.protected[this(object)]  -- private or public object\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 254,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 255,
    "text": "function(_, field, value)\r\n\t\t\tself:updatefield(field, value, \"public\")\r\n\t\tend",
    "type": "function"
  }, {
    "id": 256,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 257,
    "text": "function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"protected\")\r\n\t\t\t\tend",
    "type": "function"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "function(_, field, value)\r\n\t\t\t\t\tself:updatefield(field, value, \"private\")\r\n\t\t\t\tend",
    "type": "function"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "",
    "type": "function container"
  }, {
    "id": 262,
    "text": "function copy(source, destiny)\r\n\tif source then\r\n\t\tif not destiny then destiny = {} end\r\n\t\tfor field, value in pairs(source) do\r\n\t\t\trawset(destiny, field, value)\r\n\t\tend\r\n\tend\r\n\treturn destiny\r\nend",
    "type": "function"
  }, {
    "id": 263,
    "text": "function clear(tab)\r\n\tlocal elem = next(tab)\r\n\twhile elem ~= nil do\r\n\t\ttab[elem] = nil\r\n\t\telem = next(tab)\r\n\tend\r\n\treturn tab\r\nend",
    "type": "function"
  }, {
    "id": 264,
    "text": "debug",
    "type": "module"
  }, {
    "id": 265,
    "text": "classof",
    "type": "global function"
  }, {
    "id": 266,
    "text": "getupvalue",
    "type": "global function"
  }, {
    "id": 267,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 268,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 269,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 270,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 271,
    "text": "ObjectCache",
    "type": "global function"
  }, {
    "id": 272,
    "text": "module",
    "type": "global function"
  }, {
    "id": 273,
    "text": "removesubclass",
    "type": "global function"
  }, {
    "id": 274,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 275,
    "text": "method",
    "type": "global function"
  }, {
    "id": 276,
    "text": "__init",
    "type": "global function"
  }, {
    "id": 277,
    "text": "getclass",
    "type": "global function"
  }, {
    "id": 278,
    "text": "addsubclass",
    "type": "global function"
  }, {
    "id": 279,
    "text": "ScopedClass",
    "type": "global function"
  }, {
    "id": 280,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 281,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 282,
    "text": "cached_classof",
    "type": "global function"
  }, {
    "id": 283,
    "text": "ConditionalCompiler",
    "type": "global function"
  }, {
    "id": 284,
    "text": "require",
    "type": "global function"
  }, {
    "id": 285,
    "text": "type",
    "type": "global function"
  }, {
    "id": 286,
    "text": "class",
    "type": "global function"
  }, {
    "id": 287,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 288,
    "text": "OrderedSet",
    "type": "global function"
  }, {
    "id": 289,
    "text": "",
    "type": "variable container"
  }, {
    "id": 290,
    "text": "",
    "type": "require container"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "n/a"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "n/a"
  }, {
    "id": 295,
    "text": "",
    "type": "local variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "local variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  }, {
    "id": 301,
    "text": "",
    "type": "local variable"
  }, {
    "id": 302,
    "text": "",
    "type": "n/a"
  }, {
    "id": 303,
    "text": "",
    "type": "local variable"
  }, {
    "id": 304,
    "text": "",
    "type": "n/a"
  }, {
    "id": 305,
    "text": "",
    "type": "local variable"
  }, {
    "id": 306,
    "text": "",
    "type": "n/a"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "n/a"
  }, {
    "id": 309,
    "text": "",
    "type": "local variable"
  }, {
    "id": 310,
    "text": "",
    "type": "n/a"
  }, {
    "id": 311,
    "text": "",
    "type": "local variable"
  }, {
    "id": 312,
    "text": "",
    "type": "n/a"
  }, {
    "id": 313,
    "text": "",
    "type": "local variable"
  }, {
    "id": 314,
    "text": "",
    "type": "n/a"
  }, {
    "id": 315,
    "text": "",
    "type": "local variable"
  }, {
    "id": 316,
    "text": "",
    "type": "n/a"
  }, {
    "id": 317,
    "text": "",
    "type": "local variable"
  }, {
    "id": 318,
    "text": "",
    "type": "n/a"
  }, {
    "id": 319,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 320,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 321,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 322,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 323,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 324,
    "text": "",
    "type": "require local variable"
  } ]
}