{
  "_filename": "Serializer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/serial/Serializer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 12,
    "label": "has",
    "to": 26
  }, {
    "from": 12,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 33,
    "label": "has",
    "to": 43
  }, {
    "from": 31,
    "label": "has",
    "to": 26
  }, {
    "from": 31,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 47,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 47,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 45,
    "label": "has",
    "to": 26
  }, {
    "from": 45,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 26
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 70,
    "label": "has",
    "to": 79
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 78
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 70,
    "label": "has",
    "to": 84
  }, {
    "from": 70,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 86,
    "label": "has",
    "to": 93
  }, {
    "from": 86,
    "label": "has",
    "to": 94
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 86,
    "label": "has",
    "to": 78
  }, {
    "from": 86,
    "label": "has",
    "to": 99
  }, {
    "from": 86,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 52
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 78
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 54
  }, {
    "from": 86,
    "label": "has",
    "to": 84
  }, {
    "from": 86,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 88
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 78
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 84
  }, {
    "from": 107,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 114,
    "label": "has",
    "to": 26
  }, {
    "from": 114,
    "label": "has",
    "to": 120
  }, {
    "from": 114,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 122,
    "label": "has",
    "to": 129
  }, {
    "from": 122,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 122,
    "label": "has",
    "to": 26
  }, {
    "from": 122,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 78
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 46
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 134,
    "label": "has",
    "to": 146
  }, {
    "from": 67,
    "label": "calls",
    "to": 151
  }, {
    "from": 31,
    "label": "calls",
    "to": 156
  }, {
    "from": 31,
    "label": "calls",
    "to": 156
  }, {
    "from": 122,
    "label": "calls",
    "to": 157
  }, {
    "from": 134,
    "label": "calls",
    "to": 157
  }, {
    "from": 122,
    "label": "calls",
    "to": 158
  }, {
    "from": 28,
    "label": "calls",
    "to": 148
  }, {
    "from": 122,
    "label": "calls",
    "to": 159
  }, {
    "from": 147,
    "label": "calls",
    "to": 4
  }, {
    "from": 147,
    "label": "calls",
    "to": 4
  }, {
    "from": 31,
    "label": "calls",
    "to": 160
  }, {
    "from": 12,
    "label": "calls",
    "to": 161
  }, {
    "from": 147,
    "label": "calls",
    "to": 162
  }, {
    "from": 12,
    "label": "calls",
    "to": 153
  }, {
    "from": 31,
    "label": "calls",
    "to": 169
  }, {
    "from": 61,
    "label": "calls",
    "to": 169
  }, {
    "from": 134,
    "label": "calls",
    "to": 163
  }, {
    "from": 45,
    "label": "calls",
    "to": 172
  }, {
    "from": 5,
    "label": "calls",
    "to": 173
  }, {
    "from": 12,
    "label": "calls",
    "to": 173
  }, {
    "from": 12,
    "label": "calls",
    "to": 173
  }, {
    "from": 70,
    "label": "calls",
    "to": 173
  }, {
    "from": 70,
    "label": "calls",
    "to": 174
  }, {
    "from": 86,
    "label": "calls",
    "to": 175
  }, {
    "from": 114,
    "label": "calls",
    "to": 176
  }, {
    "from": 134,
    "label": "calls",
    "to": 176
  }, {
    "from": 114,
    "label": "calls",
    "to": 177
  }, {
    "from": 12,
    "label": "calls",
    "to": 164
  }, {
    "from": 31,
    "label": "calls",
    "to": 180
  }, {
    "from": 31,
    "label": "calls",
    "to": 152
  }, {
    "from": 45,
    "label": "calls",
    "to": 167
  }, {
    "from": 147,
    "label": "calls",
    "to": 178
  }, {
    "from": 147,
    "label": "calls",
    "to": 178
  }, {
    "from": 147,
    "label": "calls",
    "to": 178
  }, {
    "from": 134,
    "label": "calls",
    "to": 122
  }, {
    "from": 86,
    "label": "calls",
    "to": 155
  }, {
    "from": 61,
    "label": "calls",
    "to": 170
  }, {
    "from": 86,
    "label": "calls",
    "to": 168
  }, {
    "from": 86,
    "label": "calls",
    "to": 154
  }, {
    "from": 28,
    "label": "calls",
    "to": 181
  }, {
    "from": 45,
    "label": "calls",
    "to": 182
  }, {
    "from": 107,
    "label": "calls",
    "to": 182
  }, {
    "from": 134,
    "label": "calls",
    "to": 182
  }, {
    "from": 134,
    "label": "calls",
    "to": 182
  }, {
    "from": 122,
    "label": "calls",
    "to": 150
  }, {
    "from": 5,
    "label": "calls",
    "to": 179
  }, {
    "from": 5,
    "label": "calls",
    "to": 179
  }, {
    "from": 5,
    "label": "calls",
    "to": 179
  }, {
    "from": 12,
    "label": "calls",
    "to": 179
  }, {
    "from": 12,
    "label": "calls",
    "to": 179
  }, {
    "from": 45,
    "label": "calls",
    "to": 179
  }, {
    "from": 134,
    "label": "calls",
    "to": 179
  }, {
    "from": 45,
    "label": "calls",
    "to": 166
  }, {
    "from": 114,
    "label": "calls",
    "to": 166
  }, {
    "from": 122,
    "label": "calls",
    "to": 166
  }, {
    "from": 122,
    "label": "calls",
    "to": 171
  }, {
    "from": 122,
    "label": "calls",
    "to": 171
  }, {
    "from": 45,
    "label": "calls",
    "to": 165
  }, {
    "from": 2,
    "label": "contains",
    "to": 147
  }, {
    "from": 147,
    "label": "declares",
    "to": 5
  }, {
    "from": 147,
    "label": "declares",
    "to": 12
  }, {
    "from": 147,
    "label": "declares",
    "to": 28
  }, {
    "from": 147,
    "label": "declares",
    "to": 31
  }, {
    "from": 147,
    "label": "declares",
    "to": 45
  }, {
    "from": 147,
    "label": "declares",
    "to": 61
  }, {
    "from": 147,
    "label": "declares",
    "to": 67
  }, {
    "from": 147,
    "label": "declares",
    "to": 70
  }, {
    "from": 147,
    "label": "declares",
    "to": 86
  }, {
    "from": 147,
    "label": "declares",
    "to": 107
  }, {
    "from": 147,
    "label": "declares",
    "to": 114
  }, {
    "from": 147,
    "label": "declares",
    "to": 122
  }, {
    "from": 147,
    "label": "declares",
    "to": 134
  }, {
    "from": 183,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 184
  }, {
    "from": 2,
    "label": "contains",
    "to": 185
  }, {
    "from": 184,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 184,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 184,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 184,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 184,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 184,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 184,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 184,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 184,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 184,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 184,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 184,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 184,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 184,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 184,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 184,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 184,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 184,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 184,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 184,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 184,
    "label": "initializes",
    "to": 226
  }, {
    "from": 226,
    "label": "assigns",
    "to": 227
  }, {
    "from": 184,
    "label": "initializes",
    "to": 228
  }, {
    "from": 184,
    "label": "initializes",
    "to": 229
  }, {
    "from": 184,
    "label": "initializes",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 184,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "assigns",
    "to": 233
  }, {
    "from": 184,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 184,
    "label": "initializes",
    "to": 236
  }, {
    "from": 236,
    "label": "assigns",
    "to": 237
  }, {
    "from": 184,
    "label": "initializes",
    "to": 238
  }, {
    "from": 238,
    "label": "assigns",
    "to": 239
  }, {
    "from": 184,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "assigns",
    "to": 241
  }, {
    "from": 184,
    "label": "initializes",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 184,
    "label": "initializes",
    "to": 244
  }, {
    "from": 244,
    "label": "assigns",
    "to": 245
  }, {
    "from": 184,
    "label": "initializes",
    "to": 246
  }, {
    "from": 246,
    "label": "assigns",
    "to": 247
  }, {
    "from": 184,
    "label": "initializes",
    "to": 248
  }, {
    "from": 248,
    "label": "assigns",
    "to": 249
  }, {
    "from": 184,
    "label": "initializes",
    "to": 250
  }, {
    "from": 250,
    "label": "assigns",
    "to": 251
  }, {
    "from": 184,
    "label": "initializes",
    "to": 252
  }, {
    "from": 252,
    "label": "assigns",
    "to": 253
  }, {
    "from": 184,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "assigns",
    "to": 255
  }, {
    "from": 184,
    "label": "initializes",
    "to": 256
  }, {
    "from": 256,
    "label": "assigns",
    "to": 257
  }, {
    "from": 185,
    "label": "initializes",
    "to": 258
  }, {
    "from": 258,
    "label": "requires",
    "to": 149
  }, {
    "from": 185,
    "label": "initializes",
    "to": 259
  }, {
    "from": 259,
    "label": "requires",
    "to": 3
  }, {
    "from": 185,
    "label": "initializes",
    "to": 260
  }, {
    "from": 260,
    "label": "requires",
    "to": 1
  }, {
    "from": 261,
    "label": "requires",
    "to": 2
  }, {
    "from": 262,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "Serializer",
    "type": "module"
  }, {
    "id": 3,
    "text": "table",
    "type": "module"
  }, {
    "id": 4,
    "text": "function class(class, ...)\r\n\tif select(\"#\", ...) > 1\r\n\t\tthen return base.rawnew(table.copy(MultipleClass, {...}), initclass(class))\r\n\t\telse return base.class(class, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function addmembers(self, pack)\r\n\tif type(pack) == \"table\" then\r\n\t\tfor field, member in pairs(pack) do\r\n\t\t\tlocal kind = type(member)\r\n\t\t\tif\r\n\t\t\t\tself[member] == nil and\r\n\t\t\t\tkind ~= \"boolean\" and kind ~= \"number\" and kind ~= \"string\" and\r\n\t\t\t\ttype(field) == \"string\" and field:match(\"^[%a_]+[%w_]*$\")\r\n\t\t\tthen\r\n\t\t\t\tself[member] = self[pack]..\".\"..field\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if type(pack) == \"table\" then\r\n\t\tfor field, member in pairs(pack) do\r\n\t\t\tlocal kind = type(member)\r\n\t\t\tif\r\n\t\t\t\tself[member] == nil and\r\n\t\t\t\tkind ~= \"boolean\" and kind ~= \"number\" and kind ~= \"string\" and\r\n\t\t\t\ttype(field) == \"string\" and field:match(\"^[%a_]+[%w_]*$\")\r\n\t\t\tthen\r\n\t\t\t\tself[member] = self[pack]..\".\"..field\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "for field, member in pairs(pack) do\r\n\t\t\tlocal kind = type(member)\r\n\t\t\tif\r\n\t\t\t\tself[member] == nil and\r\n\t\t\t\tkind ~= \"boolean\" and kind ~= \"number\" and kind ~= \"string\" and\r\n\t\t\t\ttype(field) == \"string\" and field:match(\"^[%a_]+[%w_]*$\")\r\n\t\t\tthen\r\n\t\t\t\tself[member] = self[pack]..\".\"..field\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "local kind = type(member)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if\r\n\t\t\t\tself[member] == nil and\r\n\t\t\t\tkind ~= \"boolean\" and kind ~= \"number\" and kind ~= \"string\" and\r\n\t\t\t\ttype(field) == \"string\" and field:match(\"^[%a_]+[%w_]*$\")\r\n\t\t\tthen\r\n\t\t\t\tself[member] = self[pack]..\".\"..field\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "self[member] = self[pack]..\".\"..field",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function __init(self, object)\r\n\tself = oo.rawnew(self, object)\r\n\tself.environment = self.environment or Environment()\r\n\tself.environment[self.namespace] = self\r\n\tif self.globals then\r\n\t\tself[self.globals] = self.namespace..\".globals\"\r\n\t\tfor field, member in pairs(self.globals) do\r\n\t\t\tif\r\n\t\t\t\tself[member] == nil and\r\n\t\t\t\ttype(field) == \"string\" and field:match(\"^[%a_]+[%w_]*$\") and\r\n\t\t\t\ttype(member) == \"function\" and not pcall(string.dump, member)\r\n\t\t\tthen\r\n\t\t\t\tself[member] = self.namespace..\".globals.\"..field\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tif self.package then\r\n\t\tfor name, pack in pairs(self.package) do\r\n\t\t\tif self[pack] == nil then\r\n\t\t\t\tself[pack] = self.namespace..'.require(\"'..name..'\")'\r\n\t\t\t\tself:addmembers(pack)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn self\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "self = oo.rawnew(self, object)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "self.environment = self.environment or Environment()",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "self.environment[self.namespace] = self",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if self.globals then\r\n\t\tself[self.globals] = self.namespace..\".globals\"\r\n\t\tfor field, member in pairs(self.globals) do\r\n\t\t\tif\r\n\t\t\t\tself[member] == nil and\r\n\t\t\t\ttype(field) == \"string\" and field:match(\"^[%a_]+[%w_]*$\") and\r\n\t\t\t\ttype(member) == \"function\" and not pcall(string.dump, member)\r\n\t\t\tthen\r\n\t\t\t\tself[member] = self.namespace..\".globals.\"..field\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "self[self.globals] = self.namespace..\".globals\"",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "for field, member in pairs(self.globals) do\r\n\t\t\tif\r\n\t\t\t\tself[member] == nil and\r\n\t\t\t\ttype(field) == \"string\" and field:match(\"^[%a_]+[%w_]*$\") and\r\n\t\t\t\ttype(member) == \"function\" and not pcall(string.dump, member)\r\n\t\t\tthen\r\n\t\t\t\tself[member] = self.namespace..\".globals.\"..field\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if\r\n\t\t\t\tself[member] == nil and\r\n\t\t\t\ttype(field) == \"string\" and field:match(\"^[%a_]+[%w_]*$\") and\r\n\t\t\t\ttype(member) == \"function\" and not pcall(string.dump, member)\r\n\t\t\tthen\r\n\t\t\t\tself[member] = self.namespace..\".globals.\"..field\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "self[member] = self.namespace..\".globals.\"..field",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if self.package then\r\n\t\tfor name, pack in pairs(self.package) do\r\n\t\t\tif self[pack] == nil then\r\n\t\t\t\tself[pack] = self.namespace..'.require(\"'..name..'\")'\r\n\t\t\t\tself:addmembers(pack)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "for name, pack in pairs(self.package) do\r\n\t\t\tif self[pack] == nil then\r\n\t\t\t\tself[pack] = self.namespace..'.require(\"'..name..'\")'\r\n\t\t\t\tself:addmembers(pack)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "if self[pack] == nil then\r\n\t\t\t\tself[pack] = self.namespace..'.require(\"'..name..'\")'\r\n\t\t\t\tself:addmembers(pack)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "self[pack] = self.namespace..'.require(\"'..name..'\")'",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "self:addmembers(pack)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function Incomplete:__load(contents, metatable)\r\n\ttable.copy(contents, self)\r\n\treturn setmetatable(self, metatable)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "table.copy(contents, self)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function value(self, id, type, ...)\r\n\tlocal value = self[id]\r\n\tif not value then\r\n\t\tif type == \"function\" then\r\n\t\t\tvalue = assert(loadstring((...)))\r\n\t\telseif type == \"userdata\" then\r\n\t\t\tvalue = assert(self[...], \"unknown userdata\")()\r\n\t\telseif type == \"table\" then\r\n\t\t\tlocal meta\r\n\t\t\tvalue, meta = ...\r\n\t\t\tif meta and self.setmetatable then\r\n\t\t\t\tself.setmetatable(value, meta)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tvalue = Incomplete()\r\n\t\tend\r\n\t\tself[id] = value\r\n\telseif type == \"table\" and oo.classof(value) == Incomplete then\r\n\t\tvalue:__load(...)\r\n\tend\r\n\treturn value\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local value = self[id]",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if not value then\r\n\t\tif type == \"function\" then\r\n\t\t\tvalue = assert(loadstring((...)))\r\n\t\telseif type == \"userdata\" then\r\n\t\t\tvalue = assert(self[...], \"unknown userdata\")()\r\n\t\telseif type == \"table\" then\r\n\t\t\tlocal meta\r\n\t\t\tvalue, meta = ...\r\n\t\t\tif meta and self.setmetatable then\r\n\t\t\t\tself.setmetatable(value, meta)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tvalue = Incomplete()\r\n\t\tend\r\n\t\tself[id] = value\r\n\telseif type == \"table\" and oo.classof(value) == Incomplete then\r\n\t\tvalue:__load(...)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "if type == \"function\" then\r\n\t\t\tvalue = assert(loadstring((...)))\r\n\t\telseif type == \"userdata\" then\r\n\t\t\tvalue = assert(self[...], \"unknown userdata\")()\r\n\t\telseif type == \"table\" then\r\n\t\t\tlocal meta\r\n\t\t\tvalue, meta = ...\r\n\t\t\tif meta and self.setmetatable then\r\n\t\t\t\tself.setmetatable(value, meta)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tvalue = Incomplete()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "value = assert(loadstring((...)))",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "value = assert(self[...], \"unknown userdata\")()",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "local meta",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "value, meta = ...",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if meta and self.setmetatable then\r\n\t\t\t\tself.setmetatable(value, meta)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "self.setmetatable(value, meta)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "value = Incomplete()",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "self[id] = value",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "value:__load(...)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function setup(self, value, ...)\r\n\tlocal type = type(value)\r\n\tif type == \"function\" then\r\n\t\tif self.setfenv then self.setfenv(value, ... or self.globals) end\r\n\t\tlocal setupvalue = self.setupvalue\r\n\t\tif setupvalue then\r\n\t\t\tlocal up = 1\r\n\t\t\twhile setupvalue(value, up, select(up+1, ...) or nil) do\r\n\t\t\t\tup = up + 1\r\n\t\t\tend\r\n\t\tend\r\n\telse\r\n\t\tlocal loader = getmetatable(value)\r\n\t\tif loader then loader = loader.__load end\r\n\t\tif loader then loader(value, ...) end\r\n\tend\r\n\treturn value\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local type = type(value)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if type == \"function\" then\r\n\t\tif self.setfenv then self.setfenv(value, ... or self.globals) end\r\n\t\tlocal setupvalue = self.setupvalue\r\n\t\tif setupvalue then\r\n\t\t\tlocal up = 1\r\n\t\t\twhile setupvalue(value, up, select(up+1, ...) or nil) do\r\n\t\t\t\tup = up + 1\r\n\t\t\tend\r\n\t\tend\r\n\telse\r\n\t\tlocal loader = getmetatable(value)\r\n\t\tif loader then loader = loader.__load end\r\n\t\tif loader then loader(value, ...) end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "if self.setfenv then self.setfenv(value, ... or self.globals) end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "self.setfenv(value, ... or self.globals)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "local setupvalue = self.setupvalue",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if setupvalue then\r\n\t\t\tlocal up = 1\r\n\t\t\twhile setupvalue(value, up, select(up+1, ...) or nil) do\r\n\t\t\t\tup = up + 1\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "local up = 1",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "while setupvalue(value, up, select(up+1, ...) or nil) do\r\n\t\t\t\tup = up + 1\r\n\t\t\tend",
    "type": "statement:while"
  }, {
    "id": 54,
    "text": "up = up + 1",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local loader = getmetatable(value)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if loader then loader = loader.__load end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "loader = loader.__load",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "if loader then loader(value, ...) end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "loader(value, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function load(self, data)\r\n\tlocal errmsg\r\n\tdata, errmsg = loadstring(data)\r\n\tif data then setfenv(data, self.environment) end\r\n\treturn data, errmsg\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local errmsg",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "data, errmsg = loadstring(data)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if data then setfenv(data, self.environment) end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "setfenv(data, self.environment)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function serialstring(self, string)\r\n\tself:write(string.format(\"%q\", string))\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "self:write(string.format(\"%q\", string))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function serialtable(self, table, id)\r\n\tself[table] = self.namespace..\":value(\"..id..\")\"\r\n\t\r\n\t-- serialize contents\r\n\tself:write(self.namespace,\":value(\",id,\",'table',{\")\r\n\tfor key, val in pairs(table) do\r\n\t\tself:write(\"[\")\r\n\t\tself:serialize(key)\r\n\t\tself:write(\"]=\")\r\n\t\tself:serialize(val)\r\n\t\tself:write(\",\")\r\n\tend\r\n\tself:write(\"}\")\r\n\r\n\t-- serialize metatable\r\n\tif self.getmetatable then\r\n\t\tlocal meta = self.getmetatable(table)\r\n\t\tif meta then\r\n\t\t\tself:write(\",\")\r\n\t\t\tself:serialize(meta)\r\n\t\tend\r\n\tend\r\n\t\r\n\tself:write(\")\")\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "self[table] = self.namespace..\":value(\"..id..\")\"",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "self:write(self.namespace,\":value(\",id,\",'table',{\")",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "for key, val in pairs(table) do\r\n\t\tself:write(\"[\")\r\n\t\tself:serialize(key)\r\n\t\tself:write(\"]=\")\r\n\t\tself:serialize(val)\r\n\t\tself:write(\",\")\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 74,
    "text": "self:write(\"[\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "self:serialize(key)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "self:write(\"]=\")",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "self:serialize(val)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "self:write(\",\")",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "self:write(\"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "if self.getmetatable then\r\n\t\tlocal meta = self.getmetatable(table)\r\n\t\tif meta then\r\n\t\t\tself:write(\",\")\r\n\t\t\tself:serialize(meta)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "local meta = self.getmetatable(table)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if meta then\r\n\t\t\tself:write(\",\")\r\n\t\t\tself:serialize(meta)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "self:serialize(meta)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "self:write(\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function serialfunction(self, func, id)\r\n\tself[func] = self.namespace..\":value(\"..id..\")\"\r\n\tself:write(self.namespace,\":setup(\")\r\n\t\r\n\t-- serialize bytecodes\r\n\tself:write(self.namespace,\":value(\",id,\",'function','\")\r\n\tlocal bytecodes = string.dump(func)\r\n\tfor i = 1, #bytecodes do\r\n\t\tself:write(\"\\\\\",string.byte(bytecodes, i))\r\n\tend\r\n\tself:write(\"')\")\r\n\r\n\t-- serialize environment\r\n\tlocal env\r\n\tif self.getfenv then\r\n\t\tenv = self.getfenv(func)\r\n\t\tif env == self.globals then env = nil end\r\n\tend\r\n\tself:write(\",\")\r\n\tself:serialize(env)\r\n\r\n\t-- serialize upvalues\r\n\tif self.getupvalue then\r\n\t\tlocal name, value\r\n\t\tlocal up = 1\r\n\t\trepeat\r\n\t\t\tname, value = self.getupvalue(func, up)\r\n\t\t\tif name then\r\n\t\t\t\tself:write(\",\")\r\n\t\t\t\tself:serialize(value)\r\n\t\t\tend\r\n\t\t\tup = up + 1\r\n\t\tuntil not name\r\n\tend\r\n\t\r\n\tself:write(\")\")\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "self[func] = self.namespace..\":value(\"..id..\")\"",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "self:write(self.namespace,\":setup(\")",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "self:write(self.namespace,\":value(\",id,\",'function','\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local bytecodes = string.dump(func)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "for i = 1, #bytecodes do\r\n\t\tself:write(\"\\\\\",string.byte(bytecodes, i))\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 92,
    "text": "self:write(\"\\\\\",string.byte(bytecodes, i))",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "self:write(\"')\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "local env",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if self.getfenv then\r\n\t\tenv = self.getfenv(func)\r\n\t\tif env == self.globals then env = nil end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "env = self.getfenv(func)",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if env == self.globals then env = nil end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "env = nil",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "self:serialize(env)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "if self.getupvalue then\r\n\t\tlocal name, value\r\n\t\tlocal up = 1\r\n\t\trepeat\r\n\t\t\tname, value = self.getupvalue(func, up)\r\n\t\t\tif name then\r\n\t\t\t\tself:write(\",\")\r\n\t\t\t\tself:serialize(value)\r\n\t\t\tend\r\n\t\t\tup = up + 1\r\n\t\tuntil not name\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "local name, value",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "repeat\r\n\t\t\tname, value = self.getupvalue(func, up)\r\n\t\t\tif name then\r\n\t\t\t\tself:write(\",\")\r\n\t\t\t\tself:serialize(value)\r\n\t\t\tend\r\n\t\t\tup = up + 1\r\n\t\tuntil not name",
    "type": "statement:repeat"
  }, {
    "id": 103,
    "text": "name, value = self.getupvalue(func, up)",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "if name then\r\n\t\t\t\tself:write(\",\")\r\n\t\t\t\tself:serialize(value)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "self:serialize(value)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function serialcustom(self, id, name, ...)\r\n\tlocal state = select(\"#\", ...) > 0\r\n\tif state then\r\n\t\tself:write(self.namespace,\":setup(\")\r\n\tend\r\n\tself:write(self.namespace,\":value(\",id,\",'userdata','\",name,\"')\")\r\n\tif state then\r\n\t\tself:write(\",\")\r\n\t\tself:serialize(...)\r\n\t\tself:write(\")\")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "local state = select(\"#\", ...) > 0",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "if state then\r\n\t\tself:write(self.namespace,\":setup(\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "self:write(self.namespace,\":value(\",id,\",'userdata','\",name,\"')\")",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "if state then\r\n\t\tself:write(\",\")\r\n\t\tself:serialize(...)\r\n\t\tself:write(\")\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "self:serialize(...)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function serialuserdata(self, userdata, id)\r\n\tlocal serializer = getmetatable(userdata)\r\n\tif serializer then\r\n\t\tserializer = serializer.__serialize\r\n\t\tif serializer then\r\n\t\t\tself[userdata] = self.namespace..\":value(\"..id..\")\"\r\n\t\t\treturn self:serialcustom(id, serializer(userdata))\r\n\t\tend\r\n\tend\r\n\terror(\"unable to serialize a userdata without custom serialization\")\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "local serializer = getmetatable(userdata)",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "if serializer then\r\n\t\tserializer = serializer.__serialize\r\n\t\tif serializer then\r\n\t\t\tself[userdata] = self.namespace..\":value(\"..id..\")\"\r\n\t\t\treturn self:serialcustom(id, serializer(userdata))\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "serializer = serializer.__serialize",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "if serializer then\r\n\t\t\tself[userdata] = self.namespace..\":value(\"..id..\")\"\r\n\t\t\treturn self:serialcustom(id, serializer(userdata))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "self[userdata] = self.namespace..\":value(\"..id..\")\"",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "error(\"unable to serialize a userdata without custom serialization\")",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local function getidfor(value)\r\n\tlocal meta = getmetatable(value)\r\n\tlocal backup\r\n\tif meta then\r\n\t\tbackup = rawget(meta, \"__tostring\")\r\n\t\tif backup ~= nil then rawset(meta, \"__tostring\", nil) end\r\n\tend\r\n\tlocal id = string.match(tostring(value), \"%l+: (%w+)\")\r\n\tif meta then\r\n\t\tif backup ~= nil then rawset(meta, \"__tostring\", backup) end\r\n\tend\r\n\treturn tonumber(id, 16) or id\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "local meta = getmetatable(value)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "local backup",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "if meta then\r\n\t\tbackup = rawget(meta, \"__tostring\")\r\n\t\tif backup ~= nil then rawset(meta, \"__tostring\", nil) end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "backup = rawget(meta, \"__tostring\")",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "if backup ~= nil then rawset(meta, \"__tostring\", nil) end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "rawset(meta, \"__tostring\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "local id = string.match(tostring(value), \"%l+: (%w+)\")",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "if meta then\r\n\t\tif backup ~= nil then rawset(meta, \"__tostring\", backup) end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "if backup ~= nil then rawset(meta, \"__tostring\", backup) end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "rawset(meta, \"__tostring\", backup)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function serialize(self, ...)\r\n\tfor i=1, select(\"#\", ...) do\r\n\t\tif i ~= 1 then self:write(\",\") end\r\n\t\tlocal value = select(i, ...)\r\n\t\tlocal type = type(value)\r\n\t\tif type == \"nil\" or type == \"boolean\" or type == \"number\" then\r\n\t\t\tself:write(tostring(value))\r\n\t\telseif type == \"string\" then\r\n\t\t\tself:serialstring(value)\r\n\t\telse\r\n\t\t\tlocal id = self[value]\r\n\t\t\tif id then\r\n\t\t\t\tself:write(id)\r\n\t\t\telseif self[type] then\r\n\t\t\t\tself[type](self, value, getidfor(value))\r\n\t\t\telse\r\n\t\t\t\terror(\"unable to serialize a \"..type)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "for i=1, select(\"#\", ...) do\r\n\t\tif i ~= 1 then self:write(\",\") end\r\n\t\tlocal value = select(i, ...)\r\n\t\tlocal type = type(value)\r\n\t\tif type == \"nil\" or type == \"boolean\" or type == \"number\" then\r\n\t\t\tself:write(tostring(value))\r\n\t\telseif type == \"string\" then\r\n\t\t\tself:serialstring(value)\r\n\t\telse\r\n\t\t\tlocal id = self[value]\r\n\t\t\tif id then\r\n\t\t\t\tself:write(id)\r\n\t\t\telseif self[type] then\r\n\t\t\t\tself[type](self, value, getidfor(value))\r\n\t\t\telse\r\n\t\t\t\terror(\"unable to serialize a \"..type)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 136,
    "text": "if i ~= 1 then self:write(\",\") end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "local value = select(i, ...)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if type == \"nil\" or type == \"boolean\" or type == \"number\" then\r\n\t\t\tself:write(tostring(value))\r\n\t\telseif type == \"string\" then\r\n\t\t\tself:serialstring(value)\r\n\t\telse\r\n\t\t\tlocal id = self[value]\r\n\t\t\tif id then\r\n\t\t\t\tself:write(id)\r\n\t\t\telseif self[type] then\r\n\t\t\t\tself[type](self, value, getidfor(value))\r\n\t\t\telse\r\n\t\t\t\terror(\"unable to serialize a \"..type)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "self:write(tostring(value))",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "self:serialstring(value)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "local id = self[value]",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "if id then\r\n\t\t\t\tself:write(id)\r\n\t\t\telseif self[type] then\r\n\t\t\t\tself[type](self, value, getidfor(value))\r\n\t\t\telse\r\n\t\t\t\terror(\"unable to serialize a \"..type)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "self:write(id)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "self[type](self, value, getidfor(value))",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "error(\"unable to serialize a \"..type)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "",
    "type": "function container"
  }, {
    "id": 148,
    "text": "function copy(source, destiny)\r\n\tif source then\r\n\t\tif not destiny then destiny = {} end\r\n\t\tfor field, value in pairs(source) do\r\n\t\t\trawset(destiny, field, value)\r\n\t\tend\r\n\tend\r\n\treturn destiny\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "string",
    "type": "module"
  }, {
    "id": 150,
    "text": "match",
    "type": "global function"
  }, {
    "id": 151,
    "text": "format",
    "type": "global function"
  }, {
    "id": 152,
    "text": "classof",
    "type": "global function"
  }, {
    "id": 153,
    "text": "rawnew",
    "type": "global function"
  }, {
    "id": 154,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 155,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 156,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 157,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 158,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 159,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 160,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 161,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 162,
    "text": "module",
    "type": "global function"
  }, {
    "id": 163,
    "text": "self[type]",
    "type": "global function"
  }, {
    "id": 164,
    "text": "Environment",
    "type": "global function"
  }, {
    "id": 165,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 166,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 167,
    "text": "setupvalue",
    "type": "global function"
  }, {
    "id": 168,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 169,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 170,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 171,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 172,
    "text": "loader",
    "type": "global function"
  }, {
    "id": 173,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 174,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 175,
    "text": "getupvalue",
    "type": "global function"
  }, {
    "id": 176,
    "text": "error",
    "type": "global function"
  }, {
    "id": 177,
    "text": "serializer",
    "type": "global function"
  }, {
    "id": 178,
    "text": "require",
    "type": "global function"
  }, {
    "id": 179,
    "text": "type",
    "type": "global function"
  }, {
    "id": 180,
    "text": "Incomplete",
    "type": "global function"
  }, {
    "id": 181,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 182,
    "text": "select",
    "type": "global function"
  }, {
    "id": 183,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "variable container"
  }, {
    "id": 185,
    "text": "",
    "type": "require container"
  }, {
    "id": 186,
    "text": "",
    "type": "local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "n/a"
  }, {
    "id": 188,
    "text": "",
    "type": "local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "n/a"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "",
    "type": "local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "n/a"
  }, {
    "id": 198,
    "text": "",
    "type": "local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "n/a"
  }, {
    "id": 200,
    "text": "",
    "type": "local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "n/a"
  }, {
    "id": 202,
    "text": "",
    "type": "local variable"
  }, {
    "id": 203,
    "text": "",
    "type": "n/a"
  }, {
    "id": 204,
    "text": "",
    "type": "local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "n/a"
  }, {
    "id": 206,
    "text": "",
    "type": "local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "n/a"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "n/a"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "n/a"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "n/a"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "n/a"
  }, {
    "id": 216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "n/a"
  }, {
    "id": 218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "n/a"
  }, {
    "id": 220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "n/a"
  }, {
    "id": 222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "n/a"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "n/a"
  }, {
    "id": 228,
    "text": "",
    "type": "global variable"
  }, {
    "id": 229,
    "text": "",
    "type": "global variable"
  }, {
    "id": 230,
    "text": "",
    "type": "global variable"
  }, {
    "id": 231,
    "text": "",
    "type": "n/a"
  }, {
    "id": 232,
    "text": "",
    "type": "global variable"
  }, {
    "id": 233,
    "text": "",
    "type": "n/a"
  }, {
    "id": 234,
    "text": "",
    "type": "global variable"
  }, {
    "id": 235,
    "text": "",
    "type": "n/a"
  }, {
    "id": 236,
    "text": "",
    "type": "global variable"
  }, {
    "id": 237,
    "text": "",
    "type": "n/a"
  }, {
    "id": 238,
    "text": "",
    "type": "global variable"
  }, {
    "id": 239,
    "text": "",
    "type": "n/a"
  }, {
    "id": 240,
    "text": "",
    "type": "global variable"
  }, {
    "id": 241,
    "text": "",
    "type": "n/a"
  }, {
    "id": 242,
    "text": "",
    "type": "global variable"
  }, {
    "id": 243,
    "text": "",
    "type": "n/a"
  }, {
    "id": 244,
    "text": "",
    "type": "global variable"
  }, {
    "id": 245,
    "text": "",
    "type": "n/a"
  }, {
    "id": 246,
    "text": "",
    "type": "global variable"
  }, {
    "id": 247,
    "text": "",
    "type": "n/a"
  }, {
    "id": 248,
    "text": "",
    "type": "global variable"
  }, {
    "id": 249,
    "text": "",
    "type": "n/a"
  }, {
    "id": 250,
    "text": "",
    "type": "global variable"
  }, {
    "id": 251,
    "text": "",
    "type": "n/a"
  }, {
    "id": 252,
    "text": "",
    "type": "global variable"
  }, {
    "id": 253,
    "text": "",
    "type": "n/a"
  }, {
    "id": 254,
    "text": "",
    "type": "global variable"
  }, {
    "id": 255,
    "text": "",
    "type": "n/a"
  }, {
    "id": 256,
    "text": "",
    "type": "global variable"
  }, {
    "id": 257,
    "text": "",
    "type": "n/a"
  }, {
    "id": 258,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 259,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 261,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "require local variable"
  } ]
}