{
  "_filename": "Viewer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/loop/lua/loop/debug/Viewer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 23
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 34
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 28,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 18,
    "label": "has",
    "to": 37
  }, {
    "from": 17,
    "label": "has",
    "to": 38
  }, {
    "from": 14,
    "label": "has",
    "to": 39
  }, {
    "from": 14,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 42
  }, {
    "from": 62,
    "label": "has",
    "to": 43
  }, {
    "from": 62,
    "label": "has",
    "to": 44
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 62,
    "label": "has",
    "to": 70
  }, {
    "from": 62,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 72,
    "label": "has",
    "to": 57
  }, {
    "from": 72,
    "label": "has",
    "to": 57
  }, {
    "from": 72,
    "label": "has",
    "to": 57
  }, {
    "from": 72,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 83,
    "label": "has",
    "to": 90
  }, {
    "from": 4,
    "label": "calls",
    "to": 94
  }, {
    "from": 83,
    "label": "calls",
    "to": 103
  }, {
    "from": 91,
    "label": "calls",
    "to": 103
  }, {
    "from": 91,
    "label": "calls",
    "to": 103
  }, {
    "from": 91,
    "label": "calls",
    "to": 103
  }, {
    "from": 91,
    "label": "calls",
    "to": 98
  }, {
    "from": 72,
    "label": "calls",
    "to": 102
  }, {
    "from": 72,
    "label": "calls",
    "to": 102
  }, {
    "from": 4,
    "label": "calls",
    "to": 100
  }, {
    "from": 4,
    "label": "calls",
    "to": 100
  }, {
    "from": 91,
    "label": "calls",
    "to": 95
  }, {
    "from": 91,
    "label": "calls",
    "to": 83
  }, {
    "from": 91,
    "label": "calls",
    "to": 83
  }, {
    "from": 91,
    "label": "calls",
    "to": 104
  }, {
    "from": 91,
    "label": "calls",
    "to": 104
  }, {
    "from": 91,
    "label": "calls",
    "to": 104
  }, {
    "from": 91,
    "label": "calls",
    "to": 104
  }, {
    "from": 91,
    "label": "calls",
    "to": 106
  }, {
    "from": 72,
    "label": "calls",
    "to": 97
  }, {
    "from": 54,
    "label": "calls",
    "to": 96
  }, {
    "from": 4,
    "label": "calls",
    "to": 105
  }, {
    "from": 4,
    "label": "calls",
    "to": 105
  }, {
    "from": 62,
    "label": "calls",
    "to": 105
  }, {
    "from": 83,
    "label": "calls",
    "to": 105
  }, {
    "from": 91,
    "label": "calls",
    "to": 105
  }, {
    "from": 91,
    "label": "calls",
    "to": 105
  }, {
    "from": 72,
    "label": "calls",
    "to": 101
  }, {
    "from": 41,
    "label": "calls",
    "to": 107
  }, {
    "from": 41,
    "label": "calls",
    "to": 107
  }, {
    "from": 50,
    "label": "calls",
    "to": 107
  }, {
    "from": 50,
    "label": "calls",
    "to": 107
  }, {
    "from": 62,
    "label": "calls",
    "to": 107
  }, {
    "from": 62,
    "label": "calls",
    "to": 107
  }, {
    "from": 4,
    "label": "calls",
    "to": 99
  }, {
    "from": 72,
    "label": "calls",
    "to": 99
  }, {
    "from": 72,
    "label": "calls",
    "to": 99
  }, {
    "from": 72,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "contains",
    "to": 91
  }, {
    "from": 91,
    "label": "declares",
    "to": 4
  }, {
    "from": 91,
    "label": "declares",
    "to": 41
  }, {
    "from": 91,
    "label": "declares",
    "to": 50
  }, {
    "from": 91,
    "label": "declares",
    "to": 54
  }, {
    "from": 91,
    "label": "declares",
    "to": 59
  }, {
    "from": 91,
    "label": "declares",
    "to": 62
  }, {
    "from": 91,
    "label": "declares",
    "to": 72
  }, {
    "from": 91,
    "label": "declares",
    "to": 83
  }, {
    "from": 108,
    "label": "requires",
    "to": 2
  }, {
    "from": 109,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 110
  }, {
    "from": 2,
    "label": "contains",
    "to": 111
  }, {
    "from": 110,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 110,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 110,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 110,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 110,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 110,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 110,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 110,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 110,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 110,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 110,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 110,
    "label": "initializes",
    "to": 134
  }, {
    "from": 110,
    "label": "initializes",
    "to": 135
  }, {
    "from": 110,
    "label": "initializes",
    "to": 136
  }, {
    "from": 110,
    "label": "initializes",
    "to": 137
  }, {
    "from": 110,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 111,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "requires",
    "to": 93
  }, {
    "from": 111,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "requires",
    "to": 3
  }, {
    "from": 111,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "requires",
    "to": 92
  }, {
    "from": 111,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "base",
    "type": "module"
  }, {
    "id": 2,
    "text": "Viewer",
    "type": "module"
  }, {
    "id": 3,
    "text": "table",
    "type": "module"
  }, {
    "id": 4,
    "text": "function writevalue(self, buffer, value, history, prefix, maxdepth)\r\n\tlocal luatype = type(value)\r\n\tif luatype == \"nil\" or luatype == \"boolean\" or luatype == \"number\" then\r\n\t\tbuffer:write(luatostring(value))\r\n\telseif luatype == \"string\" then\r\n\t\tbuffer:write(string.format(\"%q\", value))\r\n\telse\r\n\t\tlocal label = history[value]\r\n\t\tif label then\r\n\t\t\tbuffer:write(label)\r\n\t\telse\r\n\t\t\tlabel = self.labels[value] or self:label(value)\r\n\t\t\thistory[value] = label\r\n\t\t\tif luatype == \"table\" then\r\n\t\t\t\tbuffer:write(\"{ --[[\",label,\"]]\")\r\n\t\t\t\tlocal key, field = next(value)\r\n\t\t\t\tif key then\r\n\t\t\t\t\tif maxdepth == 0 then\r\n\t\t\t\t\t\tbuffer:write(\" ... \")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tmaxdepth = maxdepth - 1\r\n\t\t\t\t\t\tlocal newprefix = prefix..self.indentation\r\n\t\t\t\t\t\tfor i = 1, #value do\r\n\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\tself:writevalue(buffer, value[i], history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\trepeat\r\n\t\t\t\t\t\t\tlocal keytype = type(key)\r\n\t\t\t\t\t\t\tif keytype ~= \"number\" or key<=0 or key>#value or (key%1)~=0 then\r\n\t\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\t\tif keytype == \"string\" and key:match(\"^[%a_][%w_]*$\") then\r\n\t\t\t\t\t\t\t\t\tbuffer:write(key)\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"[\")\r\n\t\t\t\t\t\t\t\t\tself:writevalue(buffer, key, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"]\")\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tbuffer:write(\" = \")\r\n\t\t\t\t\t\t\t\tself:writevalue(buffer, field, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tkey, field = next(value, key)\r\n\t\t\t\t\t\tuntil not key\r\n\t\t\t\t\t\tbuffer:write(self.linebreak, prefix)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tbuffer:write(\" \")\r\n\t\t\t\tend\r\n\t\t\t\tbuffer:write(\"}\")\r\n\t\t\telse\r\n\t\t\t\tbuffer:write(label)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local luatype = type(value)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if luatype == \"nil\" or luatype == \"boolean\" or luatype == \"number\" then\r\n\t\tbuffer:write(luatostring(value))\r\n\telseif luatype == \"string\" then\r\n\t\tbuffer:write(string.format(\"%q\", value))\r\n\telse\r\n\t\tlocal label = history[value]\r\n\t\tif label then\r\n\t\t\tbuffer:write(label)\r\n\t\telse\r\n\t\t\tlabel = self.labels[value] or self:label(value)\r\n\t\t\thistory[value] = label\r\n\t\t\tif luatype == \"table\" then\r\n\t\t\t\tbuffer:write(\"{ --[[\",label,\"]]\")\r\n\t\t\t\tlocal key, field = next(value)\r\n\t\t\t\tif key then\r\n\t\t\t\t\tif maxdepth == 0 then\r\n\t\t\t\t\t\tbuffer:write(\" ... \")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tmaxdepth = maxdepth - 1\r\n\t\t\t\t\t\tlocal newprefix = prefix..self.indentation\r\n\t\t\t\t\t\tfor i = 1, #value do\r\n\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\tself:writevalue(buffer, value[i], history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\trepeat\r\n\t\t\t\t\t\t\tlocal keytype = type(key)\r\n\t\t\t\t\t\t\tif keytype ~= \"number\" or key<=0 or key>#value or (key%1)~=0 then\r\n\t\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\t\tif keytype == \"string\" and key:match(\"^[%a_][%w_]*$\") then\r\n\t\t\t\t\t\t\t\t\tbuffer:write(key)\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"[\")\r\n\t\t\t\t\t\t\t\t\tself:writevalue(buffer, key, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"]\")\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tbuffer:write(\" = \")\r\n\t\t\t\t\t\t\t\tself:writevalue(buffer, field, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tkey, field = next(value, key)\r\n\t\t\t\t\t\tuntil not key\r\n\t\t\t\t\t\tbuffer:write(self.linebreak, prefix)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tbuffer:write(\" \")\r\n\t\t\t\tend\r\n\t\t\t\tbuffer:write(\"}\")\r\n\t\t\telse\r\n\t\t\t\tbuffer:write(label)\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "buffer:write(luatostring(value))",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "buffer:write(string.format(\"%q\", value))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "local label = history[value]",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if label then\r\n\t\t\tbuffer:write(label)\r\n\t\telse\r\n\t\t\tlabel = self.labels[value] or self:label(value)\r\n\t\t\thistory[value] = label\r\n\t\t\tif luatype == \"table\" then\r\n\t\t\t\tbuffer:write(\"{ --[[\",label,\"]]\")\r\n\t\t\t\tlocal key, field = next(value)\r\n\t\t\t\tif key then\r\n\t\t\t\t\tif maxdepth == 0 then\r\n\t\t\t\t\t\tbuffer:write(\" ... \")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tmaxdepth = maxdepth - 1\r\n\t\t\t\t\t\tlocal newprefix = prefix..self.indentation\r\n\t\t\t\t\t\tfor i = 1, #value do\r\n\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\tself:writevalue(buffer, value[i], history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\trepeat\r\n\t\t\t\t\t\t\tlocal keytype = type(key)\r\n\t\t\t\t\t\t\tif keytype ~= \"number\" or key<=0 or key>#value or (key%1)~=0 then\r\n\t\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\t\tif keytype == \"string\" and key:match(\"^[%a_][%w_]*$\") then\r\n\t\t\t\t\t\t\t\t\tbuffer:write(key)\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"[\")\r\n\t\t\t\t\t\t\t\t\tself:writevalue(buffer, key, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"]\")\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tbuffer:write(\" = \")\r\n\t\t\t\t\t\t\t\tself:writevalue(buffer, field, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tkey, field = next(value, key)\r\n\t\t\t\t\t\tuntil not key\r\n\t\t\t\t\t\tbuffer:write(self.linebreak, prefix)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tbuffer:write(\" \")\r\n\t\t\t\tend\r\n\t\t\t\tbuffer:write(\"}\")\r\n\t\t\telse\r\n\t\t\t\tbuffer:write(label)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "buffer:write(label)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "label = self.labels[value] or self:label(value)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "history[value] = label",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if luatype == \"table\" then\r\n\t\t\t\tbuffer:write(\"{ --[[\",label,\"]]\")\r\n\t\t\t\tlocal key, field = next(value)\r\n\t\t\t\tif key then\r\n\t\t\t\t\tif maxdepth == 0 then\r\n\t\t\t\t\t\tbuffer:write(\" ... \")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tmaxdepth = maxdepth - 1\r\n\t\t\t\t\t\tlocal newprefix = prefix..self.indentation\r\n\t\t\t\t\t\tfor i = 1, #value do\r\n\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\tself:writevalue(buffer, value[i], history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\trepeat\r\n\t\t\t\t\t\t\tlocal keytype = type(key)\r\n\t\t\t\t\t\t\tif keytype ~= \"number\" or key<=0 or key>#value or (key%1)~=0 then\r\n\t\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\t\tif keytype == \"string\" and key:match(\"^[%a_][%w_]*$\") then\r\n\t\t\t\t\t\t\t\t\tbuffer:write(key)\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"[\")\r\n\t\t\t\t\t\t\t\t\tself:writevalue(buffer, key, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"]\")\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tbuffer:write(\" = \")\r\n\t\t\t\t\t\t\t\tself:writevalue(buffer, field, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tkey, field = next(value, key)\r\n\t\t\t\t\t\tuntil not key\r\n\t\t\t\t\t\tbuffer:write(self.linebreak, prefix)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tbuffer:write(\" \")\r\n\t\t\t\tend\r\n\t\t\t\tbuffer:write(\"}\")\r\n\t\t\telse\r\n\t\t\t\tbuffer:write(label)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "buffer:write(\"{ --[[\",label,\"]]\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "local key, field = next(value)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if key then\r\n\t\t\t\t\tif maxdepth == 0 then\r\n\t\t\t\t\t\tbuffer:write(\" ... \")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tmaxdepth = maxdepth - 1\r\n\t\t\t\t\t\tlocal newprefix = prefix..self.indentation\r\n\t\t\t\t\t\tfor i = 1, #value do\r\n\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\tself:writevalue(buffer, value[i], history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\trepeat\r\n\t\t\t\t\t\t\tlocal keytype = type(key)\r\n\t\t\t\t\t\t\tif keytype ~= \"number\" or key<=0 or key>#value or (key%1)~=0 then\r\n\t\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\t\tif keytype == \"string\" and key:match(\"^[%a_][%w_]*$\") then\r\n\t\t\t\t\t\t\t\t\tbuffer:write(key)\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"[\")\r\n\t\t\t\t\t\t\t\t\tself:writevalue(buffer, key, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"]\")\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tbuffer:write(\" = \")\r\n\t\t\t\t\t\t\t\tself:writevalue(buffer, field, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tkey, field = next(value, key)\r\n\t\t\t\t\t\tuntil not key\r\n\t\t\t\t\t\tbuffer:write(self.linebreak, prefix)\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tbuffer:write(\" \")\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "if maxdepth == 0 then\r\n\t\t\t\t\t\tbuffer:write(\" ... \")\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tmaxdepth = maxdepth - 1\r\n\t\t\t\t\t\tlocal newprefix = prefix..self.indentation\r\n\t\t\t\t\t\tfor i = 1, #value do\r\n\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\tself:writevalue(buffer, value[i], history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\trepeat\r\n\t\t\t\t\t\t\tlocal keytype = type(key)\r\n\t\t\t\t\t\t\tif keytype ~= \"number\" or key<=0 or key>#value or (key%1)~=0 then\r\n\t\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\t\tif keytype == \"string\" and key:match(\"^[%a_][%w_]*$\") then\r\n\t\t\t\t\t\t\t\t\tbuffer:write(key)\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"[\")\r\n\t\t\t\t\t\t\t\t\tself:writevalue(buffer, key, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"]\")\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tbuffer:write(\" = \")\r\n\t\t\t\t\t\t\t\tself:writevalue(buffer, field, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tkey, field = next(value, key)\r\n\t\t\t\t\t\tuntil not key\r\n\t\t\t\t\t\tbuffer:write(self.linebreak, prefix)\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "buffer:write(\" ... \")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "maxdepth = maxdepth - 1",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local newprefix = prefix..self.indentation",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "for i = 1, #value do\r\n\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\tself:writevalue(buffer, value[i], history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 23,
    "text": "buffer:write(self.linebreak, newprefix)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "self:writevalue(buffer, value[i], history, newprefix, maxdepth)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "buffer:write(\",\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "repeat\r\n\t\t\t\t\t\t\tlocal keytype = type(key)\r\n\t\t\t\t\t\t\tif keytype ~= \"number\" or key<=0 or key>#value or (key%1)~=0 then\r\n\t\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\t\tif keytype == \"string\" and key:match(\"^[%a_][%w_]*$\") then\r\n\t\t\t\t\t\t\t\t\tbuffer:write(key)\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"[\")\r\n\t\t\t\t\t\t\t\t\tself:writevalue(buffer, key, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"]\")\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tbuffer:write(\" = \")\r\n\t\t\t\t\t\t\t\tself:writevalue(buffer, field, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tkey, field = next(value, key)\r\n\t\t\t\t\t\tuntil not key",
    "type": "statement:repeat"
  }, {
    "id": 27,
    "text": "local keytype = type(key)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if keytype ~= \"number\" or key<=0 or key>#value or (key%1)~=0 then\r\n\t\t\t\t\t\t\t\tbuffer:write(self.linebreak, newprefix)\r\n\t\t\t\t\t\t\t\tif keytype == \"string\" and key:match(\"^[%a_][%w_]*$\") then\r\n\t\t\t\t\t\t\t\t\tbuffer:write(key)\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"[\")\r\n\t\t\t\t\t\t\t\t\tself:writevalue(buffer, key, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"]\")\r\n\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\tbuffer:write(\" = \")\r\n\t\t\t\t\t\t\t\tself:writevalue(buffer, field, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\tbuffer:write(\",\")\r\n\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "if keytype == \"string\" and key:match(\"^[%a_][%w_]*$\") then\r\n\t\t\t\t\t\t\t\t\tbuffer:write(key)\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"[\")\r\n\t\t\t\t\t\t\t\t\tself:writevalue(buffer, key, history, newprefix, maxdepth)\r\n\t\t\t\t\t\t\t\t\tbuffer:write(\"]\")\r\n\t\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "buffer:write(key)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "buffer:write(\"[\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "self:writevalue(buffer, key, history, newprefix, maxdepth)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "buffer:write(\"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "buffer:write(\" = \")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "self:writevalue(buffer, field, history, newprefix, maxdepth)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "key, field = next(value, key)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "buffer:write(self.linebreak, prefix)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "buffer:write(\" \")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "buffer:write(\"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function writeto(self, buffer, ...)\r\n\tlocal prefix   = self.prefix\r\n\tlocal maxdepth = self.maxdepth\r\n\tlocal history  = {}\r\n\tfor i = 1, select(\"#\", ...) do\r\n\t\tif i ~= 1 then buffer:write(\", \") end\r\n\t\tself:writevalue(buffer, select(i, ...), history, prefix, maxdepth)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local prefix   = self.prefix",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local maxdepth = self.maxdepth",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local history  = {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "for i = 1, select(\"#\", ...) do\r\n\t\tif i ~= 1 then buffer:write(\", \") end\r\n\t\tself:writevalue(buffer, select(i, ...), history, prefix, maxdepth)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 46,
    "text": "if i ~= 1 then buffer:write(\", \") end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "buffer:write(\", \")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "self:writevalue(buffer, select(i, ...), history, prefix, maxdepth)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function add(self, ...)\r\n\tfor i = 1, select(\"#\", ...) do self[#self+1] = select(i, ...) end\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "for i = 1, select(\"#\", ...) do self[#self+1] = select(i, ...) end",
    "type": "statement:numericfor"
  }, {
    "id": 52,
    "text": "self[#self+1] = select(i, ...)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function tostring(self, ...)\r\n\tlocal buffer = { write = add }\r\n\tself:writeto(buffer, ...)\r\n\treturn table.concat(buffer)\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local buffer = { write = add }",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "self:writeto(buffer, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function write(self, ...)\r\n\tself:writeto(self.output, ...)\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "self:writeto(self.output, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function print(self, ...)\r\n\tlocal output   = self.output\r\n\tlocal prefix   = self.prefix\r\n\tlocal maxdepth = self.maxdepth\r\n\tlocal history  = {}\r\n\tlocal value\r\n\tfor i = 1, select(\"#\", ...) do\r\n\t\tvalue = select(i, ...)\r\n\t\tif type(value) == \"string\"\r\n\t\t\tthen output:write(value)\r\n\t\t\telse self:writevalue(output, value, history, prefix, maxdepth)\r\n\t\tend\r\n\tend\r\n\toutput:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local output   = self.output",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local value",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "for i = 1, select(\"#\", ...) do\r\n\t\tvalue = select(i, ...)\r\n\t\tif type(value) == \"string\"\r\n\t\t\tthen output:write(value)\r\n\t\t\telse self:writevalue(output, value, history, prefix, maxdepth)\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 66,
    "text": "value = select(i, ...)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "if type(value) == \"string\"\r\n\t\t\tthen output:write(value)\r\n\t\t\telse self:writevalue(output, value, history, prefix, maxdepth)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "output:write(value)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "self:writevalue(output, value, history, prefix, maxdepth)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "output:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function label(self, value)\r\n\tlocal meta = getmetatable(value)\r\n\tif meta then\r\n\t\tlocal custom = rawget(meta, \"__tostring\")\r\n\t\tif custom then\r\n\t\t\trawset(meta, \"__tostring\", nil)\r\n\t\t\tlocal raw = luatostring(value)\r\n\t\t\trawset(meta, \"__tostring\", custom)\r\n\t\t\tcustom = luatostring(value)\r\n\t\t\tif raw == custom\r\n\t\t\t\tthen return raw\r\n\t\t\t\telse return custom..\" (\"..raw..\")\"\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn luatostring(value)\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "local meta = getmetatable(value)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if meta then\r\n\t\tlocal custom = rawget(meta, \"__tostring\")\r\n\t\tif custom then\r\n\t\t\trawset(meta, \"__tostring\", nil)\r\n\t\t\tlocal raw = luatostring(value)\r\n\t\t\trawset(meta, \"__tostring\", custom)\r\n\t\t\tcustom = luatostring(value)\r\n\t\t\tif raw == custom\r\n\t\t\t\tthen return raw\r\n\t\t\t\telse return custom..\" (\"..raw..\")\"\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "local custom = rawget(meta, \"__tostring\")",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "if custom then\r\n\t\t\trawset(meta, \"__tostring\", nil)\r\n\t\t\tlocal raw = luatostring(value)\r\n\t\t\trawset(meta, \"__tostring\", custom)\r\n\t\t\tcustom = luatostring(value)\r\n\t\t\tif raw == custom\r\n\t\t\t\tthen return raw\r\n\t\t\t\telse return custom..\" (\"..raw..\")\"\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "rawset(meta, \"__tostring\", nil)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "local raw = luatostring(value)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "rawset(meta, \"__tostring\", custom)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "custom = luatostring(value)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if raw == custom\r\n\t\t\t\tthen return raw\r\n\t\t\t\telse return custom..\" (\"..raw..\")\"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function package(self, name, pack)\r\n\tlocal labels = self.labels\r\n\tlabels[pack] = name\r\n\tfor field, member in pairs(pack) do\r\n\t\tlocal kind = type(member)\r\n\t\tif\r\n \t\t\tlabels[member] == nil and\r\n\t\t\t(kind == \"function\" or kind == \"userdata\") and\r\n\t\t\tfield:match(\"^[%a_]+[%w_]*$\")\r\n\t\tthen\r\n\t\t\tlabels[member] = name..\".\"..field\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "local labels = self.labels",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "labels[pack] = name",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "for field, member in pairs(pack) do\r\n\t\tlocal kind = type(member)\r\n\t\tif\r\n \t\t\tlabels[member] == nil and\r\n\t\t\t(kind == \"function\" or kind == \"userdata\") and\r\n\t\t\tfield:match(\"^[%a_]+[%w_]*$\")\r\n\t\tthen\r\n\t\t\tlabels[member] = name..\".\"..field\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 87,
    "text": "local kind = type(member)",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if\r\n \t\t\tlabels[member] == nil and\r\n\t\t\t(kind == \"function\" or kind == \"userdata\") and\r\n\t\t\tfield:match(\"^[%a_]+[%w_]*$\")\r\n\t\tthen\r\n\t\t\tlabels[member] = name..\".\"..field\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "labels[member] = name..\".\"..field",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "",
    "type": "function container"
  }, {
    "id": 92,
    "text": "io",
    "type": "module"
  }, {
    "id": 93,
    "text": "string",
    "type": "module"
  }, {
    "id": 94,
    "text": "format",
    "type": "global function"
  }, {
    "id": 95,
    "text": "output",
    "type": "global function"
  }, {
    "id": 96,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 97,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 98,
    "text": "module",
    "type": "global function"
  }, {
    "id": 99,
    "text": "luatostring",
    "type": "global function"
  }, {
    "id": 100,
    "text": "next",
    "type": "global function"
  }, {
    "id": 101,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 102,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 103,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 104,
    "text": "require",
    "type": "global function"
  }, {
    "id": 105,
    "text": "type",
    "type": "global function"
  }, {
    "id": 106,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 107,
    "text": "select",
    "type": "global function"
  }, {
    "id": 108,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "variable container"
  }, {
    "id": 111,
    "text": "",
    "type": "require container"
  }, {
    "id": 112,
    "text": "",
    "type": "local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  }, {
    "id": 118,
    "text": "",
    "type": "local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "n/a"
  }, {
    "id": 124,
    "text": "",
    "type": "local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "n/a"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "n/a"
  }, {
    "id": 134,
    "text": "",
    "type": "global variable"
  }, {
    "id": 135,
    "text": "",
    "type": "global variable"
  }, {
    "id": 136,
    "text": "",
    "type": "global variable"
  }, {
    "id": 137,
    "text": "",
    "type": "global variable"
  }, {
    "id": 138,
    "text": "",
    "type": "global variable"
  }, {
    "id": 139,
    "text": "",
    "type": "n/a"
  }, {
    "id": 140,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "require local variable"
  } ]
}