{
  "_filename": "iupcdaux.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/cd-examples/modules/iupcdaux.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 11
  }, {
    "from": 26,
    "label": "has",
    "to": 12
  }, {
    "from": 26,
    "label": "has",
    "to": 13
  }, {
    "from": 26,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 17
  }, {
    "from": 28,
    "label": "has",
    "to": 18
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 20
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 2,
    "label": "calls",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 2
  }, {
    "from": 30,
    "label": "declares",
    "to": 24
  }, {
    "from": 30,
    "label": "declares",
    "to": 26
  }, {
    "from": 30,
    "label": "declares",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 36,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  }, {
    "from": 36,
    "label": "initializes",
    "to": 40
  }, {
    "from": 37,
    "label": "initializes",
    "to": 35
  }, {
    "from": 37,
    "label": "initializes",
    "to": 35
  }, {
    "from": 37,
    "label": "initializes",
    "to": 35
  }, {
    "from": 38,
    "label": "contains",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "iupcdaux",
    "type": "module"
  }, {
    "id": 2,
    "text": "function iupcdaux.new_dialog(w, h)\r\n\r\n  -- defaul size\r\n  w = w or 300\r\n  h = h or 200\r\n  \r\n  cnv = iup.canvas { bgcolor=\"255 255 255\", rastersize=w..\"x\"..h }\r\n  dlg = iup.dialog { cnv; title=\"canvas_\"..(iupcdaux.count+1) }\r\n\r\n  function cnv:map_cb()\r\n    canvas = cd.CreateCanvas(cd.IUP, self)\r\n    self.canvas = canvas     -- store the CD canvas in a IUP attribute\r\n  end\r\n  \r\n  function cnv:action()\r\n    canvas = self.canvas     -- retrieve the CD canvas from the IUP attribute\r\n    canvas:Activate()\r\n    canvas:Clear()\r\n    \r\n    if (self.Draw) then\r\n      self:Draw(canvas)\r\n    end\r\n  end\r\n\r\n  function dlg:close_cb()\r\n    cnv = self[1]\r\n    canvas = cnv.canvas     -- retrieve the CD canvas from the IUP attribute\r\n    canvas:Kill()\r\n    self:destroy()\r\n    return iup.IGNORE -- because we destroy the dialog\r\n  end\r\n\r\n  iupcdaux.count = iupcdaux.count + 1\r\n  return dlg\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "w = w or 300",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "h = h or 200",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "cnv = iup.canvas { bgcolor=\"255 255 255\", rastersize=w..\"x\"..h }",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "dlg = iup.dialog { cnv; title=\"canvas_\"..(iupcdaux.count+1) }",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "function cnv:map_cb()\r\n    canvas = cd.CreateCanvas(cd.IUP, self)\r\n    self.canvas = canvas     -- store the CD canvas in a IUP attribute\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 8,
    "text": "canvas = cd.CreateCanvas(cd.IUP, self)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "self.canvas = canvas",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "function cnv:action()\r\n    canvas = self.canvas     -- retrieve the CD canvas from the IUP attribute\r\n    canvas:Activate()\r\n    canvas:Clear()\r\n    \r\n    if (self.Draw) then\r\n      self:Draw(canvas)\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 11,
    "text": "canvas = self.canvas",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "canvas:Activate()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "canvas:Clear()",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "if (self.Draw) then\r\n      self:Draw(canvas)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "self:Draw(canvas)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "function dlg:close_cb()\r\n    cnv = self[1]\r\n    canvas = cnv.canvas     -- retrieve the CD canvas from the IUP attribute\r\n    canvas:Kill()\r\n    self:destroy()\r\n    return iup.IGNORE -- because we destroy the dialog\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 17,
    "text": "cnv = self[1]",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "canvas = cnv.canvas",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "canvas:Kill()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "self:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "iupcdaux.count = iupcdaux.count + 1",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function cnv:map_cb()\r\n    canvas = cd.CreateCanvas(cd.IUP, self)\r\n    self.canvas = canvas     -- store the CD canvas in a IUP attribute\r\n  end",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function cnv:action()\r\n    canvas = self.canvas     -- retrieve the CD canvas from the IUP attribute\r\n    canvas:Activate()\r\n    canvas:Clear()\r\n    \r\n    if (self.Draw) then\r\n      self:Draw(canvas)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function dlg:close_cb()\r\n    cnv = self[1]\r\n    canvas = cnv.canvas     -- retrieve the CD canvas from the IUP attribute\r\n    canvas:Kill()\r\n    self:destroy()\r\n    return iup.IGNORE -- because we destroy the dialog\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "canvas",
    "type": "global function"
  }, {
    "id": 32,
    "text": "dialog",
    "type": "global function"
  }, {
    "id": 33,
    "text": "CreateCanvas",
    "type": "global function"
  }, {
    "id": 34,
    "text": "require",
    "type": "global function"
  }, {
    "id": 35,
    "text": "",
    "type": "global variable"
  }, {
    "id": 36,
    "text": "",
    "type": "variable container"
  }, {
    "id": 37,
    "text": "",
    "type": "require container"
  }, {
    "id": 38,
    "text": "",
    "type": "global variable"
  }, {
    "id": 39,
    "text": "",
    "type": "n/a"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  } ]
}