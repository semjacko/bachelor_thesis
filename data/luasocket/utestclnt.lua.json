{
  "_filename": "utestclnt.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luasocket/test/utestclnt.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 4
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 4
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 42
  }, {
    "from": 45,
    "label": "has",
    "to": 39
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 40
  }, {
    "from": 50,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 47
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 43,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 47
  }, {
    "from": 53,
    "label": "has",
    "to": 48
  }, {
    "from": 34,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 47
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 64,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 70,
    "label": "has",
    "to": 78
  }, {
    "from": 70,
    "label": "has",
    "to": 79
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 81
  }, {
    "from": 70,
    "label": "has",
    "to": 82
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 83
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 84
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 85
  }, {
    "from": 70,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 70,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 70,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 71
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 90,
    "label": "has",
    "to": 94
  }, {
    "from": 90,
    "label": "has",
    "to": 95
  }, {
    "from": 90,
    "label": "has",
    "to": 96
  }, {
    "from": 90,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 90,
    "label": "has",
    "to": 97
  }, {
    "from": 90,
    "label": "has",
    "to": 98
  }, {
    "from": 90,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 90,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 90,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 71
  }, {
    "from": 103,
    "label": "has",
    "to": 91
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 94
  }, {
    "from": 103,
    "label": "has",
    "to": 95
  }, {
    "from": 103,
    "label": "has",
    "to": 96
  }, {
    "from": 103,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 98
  }, {
    "from": 103,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 103,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 71
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 108,
    "label": "has",
    "to": 112
  }, {
    "from": 108,
    "label": "has",
    "to": 113
  }, {
    "from": 108,
    "label": "has",
    "to": 114
  }, {
    "from": 108,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 108,
    "label": "has",
    "to": 115
  }, {
    "from": 108,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 108,
    "label": "has",
    "to": 116
  }, {
    "from": 108,
    "label": "has",
    "to": 117
  }, {
    "from": 108,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 47
  }, {
    "from": 108,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 108,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 71
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 122,
    "label": "has",
    "to": 128
  }, {
    "from": 122,
    "label": "has",
    "to": 129
  }, {
    "from": 122,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 71
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 124
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 131,
    "label": "has",
    "to": 126
  }, {
    "from": 131,
    "label": "has",
    "to": 134
  }, {
    "from": 131,
    "label": "has",
    "to": 135
  }, {
    "from": 131,
    "label": "has",
    "to": 136
  }, {
    "from": 131,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 71
  }, {
    "from": 138,
    "label": "has",
    "to": 123
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 125
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 128
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 138,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 71
  }, {
    "from": 143,
    "label": "has",
    "to": 132
  }, {
    "from": 143,
    "label": "has",
    "to": 139
  }, {
    "from": 143,
    "label": "has",
    "to": 133
  }, {
    "from": 143,
    "label": "has",
    "to": 140
  }, {
    "from": 143,
    "label": "has",
    "to": 134
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 71
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 148,
    "label": "has",
    "to": 58
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 147,
    "label": "has",
    "to": 151
  }, {
    "from": 147,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 48
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 147,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 28
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 71
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 58
  }, {
    "from": 158,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 158,
    "label": "has",
    "to": 149
  }, {
    "from": 158,
    "label": "has",
    "to": 163
  }, {
    "from": 158,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 160
  }, {
    "from": 158,
    "label": "has",
    "to": 165
  }, {
    "from": 158,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 162
  }, {
    "from": 158,
    "label": "has",
    "to": 48
  }, {
    "from": 158,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 170
  }, {
    "from": 168,
    "label": "has",
    "to": 71
  }, {
    "from": 168,
    "label": "has",
    "to": 171
  }, {
    "from": 168,
    "label": "has",
    "to": 172
  }, {
    "from": 168,
    "label": "has",
    "to": 173
  }, {
    "from": 168,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 168,
    "label": "has",
    "to": 71
  }, {
    "from": 168,
    "label": "has",
    "to": 179
  }, {
    "from": 168,
    "label": "has",
    "to": 180
  }, {
    "from": 168,
    "label": "has",
    "to": 181
  }, {
    "from": 168,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 176
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 168,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 186,
    "label": "has",
    "to": 163
  }, {
    "from": 186,
    "label": "has",
    "to": 165
  }, {
    "from": 186,
    "label": "has",
    "to": 190
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 191
  }, {
    "from": 186,
    "label": "has",
    "to": 192
  }, {
    "from": 186,
    "label": "has",
    "to": 193
  }, {
    "from": 186,
    "label": "has",
    "to": 194
  }, {
    "from": 186,
    "label": "has",
    "to": 193
  }, {
    "from": 186,
    "label": "has",
    "to": 195
  }, {
    "from": 186,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 197,
    "label": "has",
    "to": 200
  }, {
    "from": 197,
    "label": "has",
    "to": 127
  }, {
    "from": 197,
    "label": "has",
    "to": 201
  }, {
    "from": 197,
    "label": "has",
    "to": 202
  }, {
    "from": 197,
    "label": "has",
    "to": 203
  }, {
    "from": 197,
    "label": "has",
    "to": 204
  }, {
    "from": 197,
    "label": "has",
    "to": 205
  }, {
    "from": 197,
    "label": "has",
    "to": 206
  }, {
    "from": 197,
    "label": "has",
    "to": 207
  }, {
    "from": 197,
    "label": "has",
    "to": 208
  }, {
    "from": 197,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 127
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 210,
    "label": "has",
    "to": 213
  }, {
    "from": 210,
    "label": "has",
    "to": 214
  }, {
    "from": 210,
    "label": "has",
    "to": 127
  }, {
    "from": 210,
    "label": "has",
    "to": 215
  }, {
    "from": 210,
    "label": "has",
    "to": 216
  }, {
    "from": 210,
    "label": "has",
    "to": 217
  }, {
    "from": 210,
    "label": "has",
    "to": 218
  }, {
    "from": 210,
    "label": "has",
    "to": 219
  }, {
    "from": 210,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 221,
    "label": "has",
    "to": 224
  }, {
    "from": 221,
    "label": "has",
    "to": 212
  }, {
    "from": 221,
    "label": "has",
    "to": 213
  }, {
    "from": 221,
    "label": "has",
    "to": 225
  }, {
    "from": 221,
    "label": "has",
    "to": 226
  }, {
    "from": 221,
    "label": "has",
    "to": 227
  }, {
    "from": 221,
    "label": "has",
    "to": 228
  }, {
    "from": 221,
    "label": "has",
    "to": 229
  }, {
    "from": 221,
    "label": "has",
    "to": 230
  }, {
    "from": 221,
    "label": "has",
    "to": 231
  }, {
    "from": 221,
    "label": "has",
    "to": 213
  }, {
    "from": 221,
    "label": "has",
    "to": 225
  }, {
    "from": 221,
    "label": "has",
    "to": 227
  }, {
    "from": 221,
    "label": "has",
    "to": 228
  }, {
    "from": 221,
    "label": "has",
    "to": 229
  }, {
    "from": 221,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 233,
    "label": "has",
    "to": 229
  }, {
    "from": 233,
    "label": "has",
    "to": 237
  }, {
    "from": 233,
    "label": "has",
    "to": 238
  }, {
    "from": 233,
    "label": "has",
    "to": 239
  }, {
    "from": 233,
    "label": "has",
    "to": 229
  }, {
    "from": 233,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 244
  }, {
    "from": 241,
    "label": "has",
    "to": 200
  }, {
    "from": 241,
    "label": "has",
    "to": 245
  }, {
    "from": 241,
    "label": "has",
    "to": 246
  }, {
    "from": 241,
    "label": "has",
    "to": 247
  }, {
    "from": 241,
    "label": "has",
    "to": 248
  }, {
    "from": 241,
    "label": "has",
    "to": 229
  }, {
    "from": 241,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 71
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 252,
    "label": "has",
    "to": 254
  }, {
    "from": 252,
    "label": "has",
    "to": 255
  }, {
    "from": 252,
    "label": "has",
    "to": 256
  }, {
    "from": 252,
    "label": "has",
    "to": 257
  }, {
    "from": 252,
    "label": "has",
    "to": 258
  }, {
    "from": 252,
    "label": "has",
    "to": 259
  }, {
    "from": 252,
    "label": "has",
    "to": 260
  }, {
    "from": 250,
    "label": "has",
    "to": 219
  }, {
    "from": 250,
    "label": "has",
    "to": 261
  }, {
    "from": 262,
    "label": "has",
    "to": 71
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 262,
    "label": "has",
    "to": 268
  }, {
    "from": 262,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 262,
    "label": "has",
    "to": 272
  }, {
    "from": 262,
    "label": "has",
    "to": 71
  }, {
    "from": 262,
    "label": "has",
    "to": 273
  }, {
    "from": 262,
    "label": "has",
    "to": 268
  }, {
    "from": 262,
    "label": "has",
    "to": 274
  }, {
    "from": 262,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 275,
    "label": "has",
    "to": 271
  }, {
    "from": 262,
    "label": "has",
    "to": 277
  }, {
    "from": 262,
    "label": "has",
    "to": 278
  }, {
    "from": 262,
    "label": "has",
    "to": 279
  }, {
    "from": 262,
    "label": "has",
    "to": 280
  }, {
    "from": 262,
    "label": "has",
    "to": 219
  }, {
    "from": 262,
    "label": "has",
    "to": 281
  }, {
    "from": 158,
    "label": "calls",
    "to": 156
  }, {
    "from": 158,
    "label": "calls",
    "to": 156
  }, {
    "from": 158,
    "label": "calls",
    "to": 156
  }, {
    "from": 158,
    "label": "calls",
    "to": 156
  }, {
    "from": 3,
    "label": "calls",
    "to": 286
  }, {
    "from": 7,
    "label": "calls",
    "to": 286
  }, {
    "from": 12,
    "label": "calls",
    "to": 286
  }, {
    "from": 15,
    "label": "calls",
    "to": 286
  }, {
    "from": 70,
    "label": "calls",
    "to": 286
  }, {
    "from": 108,
    "label": "calls",
    "to": 286
  }, {
    "from": 122,
    "label": "calls",
    "to": 286
  }, {
    "from": 131,
    "label": "calls",
    "to": 286
  }, {
    "from": 138,
    "label": "calls",
    "to": 286
  }, {
    "from": 143,
    "label": "calls",
    "to": 286
  }, {
    "from": 168,
    "label": "calls",
    "to": 286
  }, {
    "from": 197,
    "label": "calls",
    "to": 286
  }, {
    "from": 197,
    "label": "calls",
    "to": 286
  }, {
    "from": 250,
    "label": "calls",
    "to": 286
  }, {
    "from": 262,
    "label": "calls",
    "to": 286
  }, {
    "from": 262,
    "label": "calls",
    "to": 286
  }, {
    "from": 282,
    "label": "calls",
    "to": 286
  }, {
    "from": 7,
    "label": "calls",
    "to": 303
  }, {
    "from": 25,
    "label": "calls",
    "to": 298
  }, {
    "from": 25,
    "label": "calls",
    "to": 298
  }, {
    "from": 30,
    "label": "calls",
    "to": 298
  }, {
    "from": 30,
    "label": "calls",
    "to": 298
  }, {
    "from": 30,
    "label": "calls",
    "to": 298
  }, {
    "from": 186,
    "label": "calls",
    "to": 298
  }, {
    "from": 186,
    "label": "calls",
    "to": 298
  }, {
    "from": 186,
    "label": "calls",
    "to": 298
  }, {
    "from": 186,
    "label": "calls",
    "to": 298
  }, {
    "from": 197,
    "label": "calls",
    "to": 298
  }, {
    "from": 197,
    "label": "calls",
    "to": 298
  }, {
    "from": 197,
    "label": "calls",
    "to": 298
  }, {
    "from": 197,
    "label": "calls",
    "to": 298
  }, {
    "from": 210,
    "label": "calls",
    "to": 298
  }, {
    "from": 210,
    "label": "calls",
    "to": 298
  }, {
    "from": 210,
    "label": "calls",
    "to": 298
  }, {
    "from": 221,
    "label": "calls",
    "to": 298
  }, {
    "from": 221,
    "label": "calls",
    "to": 298
  }, {
    "from": 221,
    "label": "calls",
    "to": 298
  }, {
    "from": 221,
    "label": "calls",
    "to": 298
  }, {
    "from": 221,
    "label": "calls",
    "to": 298
  }, {
    "from": 233,
    "label": "calls",
    "to": 298
  }, {
    "from": 233,
    "label": "calls",
    "to": 298
  }, {
    "from": 241,
    "label": "calls",
    "to": 298
  }, {
    "from": 241,
    "label": "calls",
    "to": 298
  }, {
    "from": 241,
    "label": "calls",
    "to": 298
  }, {
    "from": 250,
    "label": "calls",
    "to": 298
  }, {
    "from": 250,
    "label": "calls",
    "to": 298
  }, {
    "from": 262,
    "label": "calls",
    "to": 298
  }, {
    "from": 262,
    "label": "calls",
    "to": 298
  }, {
    "from": 34,
    "label": "calls",
    "to": 7
  }, {
    "from": 34,
    "label": "calls",
    "to": 7
  }, {
    "from": 34,
    "label": "calls",
    "to": 7
  }, {
    "from": 34,
    "label": "calls",
    "to": 7
  }, {
    "from": 34,
    "label": "calls",
    "to": 7
  }, {
    "from": 34,
    "label": "calls",
    "to": 7
  }, {
    "from": 34,
    "label": "calls",
    "to": 7
  }, {
    "from": 282,
    "label": "calls",
    "to": 7
  }, {
    "from": 55,
    "label": "calls",
    "to": 7
  }, {
    "from": 282,
    "label": "calls",
    "to": 7
  }, {
    "from": 64,
    "label": "calls",
    "to": 7
  }, {
    "from": 70,
    "label": "calls",
    "to": 7
  }, {
    "from": 70,
    "label": "calls",
    "to": 7
  }, {
    "from": 70,
    "label": "calls",
    "to": 7
  }, {
    "from": 70,
    "label": "calls",
    "to": 7
  }, {
    "from": 70,
    "label": "calls",
    "to": 7
  }, {
    "from": 70,
    "label": "calls",
    "to": 7
  }, {
    "from": 90,
    "label": "calls",
    "to": 7
  }, {
    "from": 90,
    "label": "calls",
    "to": 7
  }, {
    "from": 90,
    "label": "calls",
    "to": 7
  }, {
    "from": 103,
    "label": "calls",
    "to": 7
  }, {
    "from": 103,
    "label": "calls",
    "to": 7
  }, {
    "from": 103,
    "label": "calls",
    "to": 7
  }, {
    "from": 108,
    "label": "calls",
    "to": 7
  }, {
    "from": 108,
    "label": "calls",
    "to": 7
  }, {
    "from": 108,
    "label": "calls",
    "to": 7
  }, {
    "from": 108,
    "label": "calls",
    "to": 7
  }, {
    "from": 158,
    "label": "calls",
    "to": 7
  }, {
    "from": 158,
    "label": "calls",
    "to": 7
  }, {
    "from": 158,
    "label": "calls",
    "to": 7
  }, {
    "from": 158,
    "label": "calls",
    "to": 7
  }, {
    "from": 168,
    "label": "calls",
    "to": 7
  }, {
    "from": 168,
    "label": "calls",
    "to": 7
  }, {
    "from": 168,
    "label": "calls",
    "to": 7
  }, {
    "from": 168,
    "label": "calls",
    "to": 7
  }, {
    "from": 90,
    "label": "calls",
    "to": 292
  }, {
    "from": 103,
    "label": "calls",
    "to": 292
  }, {
    "from": 108,
    "label": "calls",
    "to": 292
  }, {
    "from": 55,
    "label": "calls",
    "to": 15
  }, {
    "from": 70,
    "label": "calls",
    "to": 15
  }, {
    "from": 70,
    "label": "calls",
    "to": 15
  }, {
    "from": 90,
    "label": "calls",
    "to": 15
  }, {
    "from": 90,
    "label": "calls",
    "to": 15
  }, {
    "from": 103,
    "label": "calls",
    "to": 15
  }, {
    "from": 103,
    "label": "calls",
    "to": 15
  }, {
    "from": 108,
    "label": "calls",
    "to": 15
  }, {
    "from": 108,
    "label": "calls",
    "to": 15
  }, {
    "from": 122,
    "label": "calls",
    "to": 15
  }, {
    "from": 131,
    "label": "calls",
    "to": 15
  }, {
    "from": 138,
    "label": "calls",
    "to": 15
  }, {
    "from": 143,
    "label": "calls",
    "to": 15
  }, {
    "from": 147,
    "label": "calls",
    "to": 15
  }, {
    "from": 168,
    "label": "calls",
    "to": 15
  }, {
    "from": 168,
    "label": "calls",
    "to": 15
  }, {
    "from": 250,
    "label": "calls",
    "to": 15
  }, {
    "from": 262,
    "label": "calls",
    "to": 15
  }, {
    "from": 262,
    "label": "calls",
    "to": 15
  }, {
    "from": 34,
    "label": "calls",
    "to": 12
  }, {
    "from": 70,
    "label": "calls",
    "to": 300
  }, {
    "from": 282,
    "label": "calls",
    "to": 122
  }, {
    "from": 282,
    "label": "calls",
    "to": 122
  }, {
    "from": 282,
    "label": "calls",
    "to": 122
  }, {
    "from": 282,
    "label": "calls",
    "to": 122
  }, {
    "from": 210,
    "label": "calls",
    "to": 305
  }, {
    "from": 221,
    "label": "calls",
    "to": 305
  }, {
    "from": 221,
    "label": "calls",
    "to": 305
  }, {
    "from": 233,
    "label": "calls",
    "to": 305
  }, {
    "from": 233,
    "label": "calls",
    "to": 305
  }, {
    "from": 241,
    "label": "calls",
    "to": 305
  }, {
    "from": 250,
    "label": "calls",
    "to": 305
  }, {
    "from": 262,
    "label": "calls",
    "to": 305
  }, {
    "from": 262,
    "label": "calls",
    "to": 305
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 282,
    "label": "calls",
    "to": 103
  }, {
    "from": 7,
    "label": "calls",
    "to": 283
  }, {
    "from": 186,
    "label": "calls",
    "to": 301
  }, {
    "from": 186,
    "label": "calls",
    "to": 301
  }, {
    "from": 103,
    "label": "calls",
    "to": 288
  }, {
    "from": 103,
    "label": "calls",
    "to": 288
  }, {
    "from": 282,
    "label": "calls",
    "to": 138
  }, {
    "from": 282,
    "label": "calls",
    "to": 138
  }, {
    "from": 282,
    "label": "calls",
    "to": 138
  }, {
    "from": 282,
    "label": "calls",
    "to": 138
  }, {
    "from": 15,
    "label": "calls",
    "to": 287
  }, {
    "from": 15,
    "label": "calls",
    "to": 287
  }, {
    "from": 15,
    "label": "calls",
    "to": 287
  }, {
    "from": 282,
    "label": "calls",
    "to": 131
  }, {
    "from": 282,
    "label": "calls",
    "to": 131
  }, {
    "from": 282,
    "label": "calls",
    "to": 131
  }, {
    "from": 282,
    "label": "calls",
    "to": 131
  }, {
    "from": 210,
    "label": "calls",
    "to": 294
  }, {
    "from": 221,
    "label": "calls",
    "to": 294
  }, {
    "from": 241,
    "label": "calls",
    "to": 294
  }, {
    "from": 197,
    "label": "calls",
    "to": 297
  }, {
    "from": 221,
    "label": "calls",
    "to": 297
  }, {
    "from": 241,
    "label": "calls",
    "to": 297
  }, {
    "from": 158,
    "label": "calls",
    "to": 285
  }, {
    "from": 186,
    "label": "calls",
    "to": 285
  }, {
    "from": 221,
    "label": "calls",
    "to": 285
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 262
  }, {
    "from": 282,
    "label": "calls",
    "to": 197
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 282,
    "label": "calls",
    "to": 108
  }, {
    "from": 70,
    "label": "calls",
    "to": 293
  }, {
    "from": 70,
    "label": "calls",
    "to": 293
  }, {
    "from": 70,
    "label": "calls",
    "to": 293
  }, {
    "from": 70,
    "label": "calls",
    "to": 293
  }, {
    "from": 70,
    "label": "calls",
    "to": 293
  }, {
    "from": 122,
    "label": "calls",
    "to": 293
  }, {
    "from": 138,
    "label": "calls",
    "to": 293
  }, {
    "from": 250,
    "label": "calls",
    "to": 289
  }, {
    "from": 64,
    "label": "calls",
    "to": 304
  }, {
    "from": 70,
    "label": "calls",
    "to": 306
  }, {
    "from": 70,
    "label": "calls",
    "to": 306
  }, {
    "from": 70,
    "label": "calls",
    "to": 306
  }, {
    "from": 70,
    "label": "calls",
    "to": 306
  }, {
    "from": 90,
    "label": "calls",
    "to": 306
  }, {
    "from": 90,
    "label": "calls",
    "to": 306
  }, {
    "from": 103,
    "label": "calls",
    "to": 306
  }, {
    "from": 103,
    "label": "calls",
    "to": 306
  }, {
    "from": 108,
    "label": "calls",
    "to": 306
  }, {
    "from": 108,
    "label": "calls",
    "to": 306
  }, {
    "from": 131,
    "label": "calls",
    "to": 306
  }, {
    "from": 143,
    "label": "calls",
    "to": 306
  }, {
    "from": 168,
    "label": "calls",
    "to": 306
  }, {
    "from": 250,
    "label": "calls",
    "to": 306
  }, {
    "from": 262,
    "label": "calls",
    "to": 306
  }, {
    "from": 262,
    "label": "calls",
    "to": 306
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 55,
    "label": "calls",
    "to": 3
  }, {
    "from": 282,
    "label": "calls",
    "to": 3
  }, {
    "from": 282,
    "label": "calls",
    "to": 3
  }, {
    "from": 64,
    "label": "calls",
    "to": 3
  }, {
    "from": 70,
    "label": "calls",
    "to": 3
  }, {
    "from": 90,
    "label": "calls",
    "to": 3
  }, {
    "from": 103,
    "label": "calls",
    "to": 3
  }, {
    "from": 108,
    "label": "calls",
    "to": 3
  }, {
    "from": 122,
    "label": "calls",
    "to": 3
  }, {
    "from": 131,
    "label": "calls",
    "to": 3
  }, {
    "from": 138,
    "label": "calls",
    "to": 3
  }, {
    "from": 143,
    "label": "calls",
    "to": 3
  }, {
    "from": 147,
    "label": "calls",
    "to": 3
  }, {
    "from": 147,
    "label": "calls",
    "to": 3
  }, {
    "from": 158,
    "label": "calls",
    "to": 3
  }, {
    "from": 168,
    "label": "calls",
    "to": 3
  }, {
    "from": 168,
    "label": "calls",
    "to": 3
  }, {
    "from": 168,
    "label": "calls",
    "to": 3
  }, {
    "from": 168,
    "label": "calls",
    "to": 3
  }, {
    "from": 168,
    "label": "calls",
    "to": 3
  }, {
    "from": 186,
    "label": "calls",
    "to": 3
  }, {
    "from": 186,
    "label": "calls",
    "to": 3
  }, {
    "from": 186,
    "label": "calls",
    "to": 3
  }, {
    "from": 197,
    "label": "calls",
    "to": 3
  }, {
    "from": 282,
    "label": "calls",
    "to": 64
  }, {
    "from": 25,
    "label": "calls",
    "to": 284
  }, {
    "from": 30,
    "label": "calls",
    "to": 284
  }, {
    "from": 282,
    "label": "calls",
    "to": 284
  }, {
    "from": 282,
    "label": "calls",
    "to": 168
  }, {
    "from": 70,
    "label": "calls",
    "to": 55
  }, {
    "from": 90,
    "label": "calls",
    "to": 55
  }, {
    "from": 103,
    "label": "calls",
    "to": 55
  }, {
    "from": 108,
    "label": "calls",
    "to": 55
  }, {
    "from": 122,
    "label": "calls",
    "to": 55
  }, {
    "from": 131,
    "label": "calls",
    "to": 55
  }, {
    "from": 138,
    "label": "calls",
    "to": 55
  }, {
    "from": 143,
    "label": "calls",
    "to": 55
  }, {
    "from": 147,
    "label": "calls",
    "to": 55
  }, {
    "from": 158,
    "label": "calls",
    "to": 55
  }, {
    "from": 168,
    "label": "calls",
    "to": 55
  }, {
    "from": 168,
    "label": "calls",
    "to": 55
  }, {
    "from": 250,
    "label": "calls",
    "to": 55
  }, {
    "from": 262,
    "label": "calls",
    "to": 55
  }, {
    "from": 262,
    "label": "calls",
    "to": 55
  }, {
    "from": 282,
    "label": "calls",
    "to": 158
  }, {
    "from": 186,
    "label": "calls",
    "to": 295
  }, {
    "from": 186,
    "label": "calls",
    "to": 295
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 282,
    "label": "calls",
    "to": 22
  }, {
    "from": 55,
    "label": "calls",
    "to": 25
  }, {
    "from": 282,
    "label": "calls",
    "to": 25
  }, {
    "from": 250,
    "label": "calls",
    "to": 299
  }, {
    "from": 250,
    "label": "calls",
    "to": 299
  }, {
    "from": 250,
    "label": "calls",
    "to": 299
  }, {
    "from": 250,
    "label": "calls",
    "to": 299
  }, {
    "from": 122,
    "label": "calls",
    "to": 34
  }, {
    "from": 131,
    "label": "calls",
    "to": 34
  }, {
    "from": 138,
    "label": "calls",
    "to": 34
  }, {
    "from": 143,
    "label": "calls",
    "to": 34
  }, {
    "from": 282,
    "label": "calls",
    "to": 221
  }, {
    "from": 282,
    "label": "calls",
    "to": 296
  }, {
    "from": 122,
    "label": "calls",
    "to": 296
  }, {
    "from": 197,
    "label": "calls",
    "to": 296
  }, {
    "from": 197,
    "label": "calls",
    "to": 296
  }, {
    "from": 210,
    "label": "calls",
    "to": 296
  }, {
    "from": 210,
    "label": "calls",
    "to": 296
  }, {
    "from": 210,
    "label": "calls",
    "to": 296
  }, {
    "from": 282,
    "label": "calls",
    "to": 296
  }, {
    "from": 282,
    "label": "calls",
    "to": 250
  }, {
    "from": 282,
    "label": "calls",
    "to": 70
  }, {
    "from": 282,
    "label": "calls",
    "to": 70
  }, {
    "from": 282,
    "label": "calls",
    "to": 70
  }, {
    "from": 282,
    "label": "calls",
    "to": 70
  }, {
    "from": 282,
    "label": "calls",
    "to": 70
  }, {
    "from": 282,
    "label": "calls",
    "to": 70
  }, {
    "from": 282,
    "label": "calls",
    "to": 70
  }, {
    "from": 282,
    "label": "calls",
    "to": 70
  }, {
    "from": 282,
    "label": "calls",
    "to": 70
  }, {
    "from": 282,
    "label": "calls",
    "to": 143
  }, {
    "from": 282,
    "label": "calls",
    "to": 143
  }, {
    "from": 282,
    "label": "calls",
    "to": 143
  }, {
    "from": 282,
    "label": "calls",
    "to": 143
  }, {
    "from": 147,
    "label": "calls",
    "to": 291
  }, {
    "from": 147,
    "label": "calls",
    "to": 291
  }, {
    "from": 233,
    "label": "calls",
    "to": 291
  }, {
    "from": 233,
    "label": "calls",
    "to": 291
  }, {
    "from": 64,
    "label": "calls",
    "to": 302
  }, {
    "from": 186,
    "label": "calls",
    "to": 302
  }, {
    "from": 186,
    "label": "calls",
    "to": 302
  }, {
    "from": 186,
    "label": "calls",
    "to": 302
  }, {
    "from": 186,
    "label": "calls",
    "to": 302
  }, {
    "from": 282,
    "label": "calls",
    "to": 307
  }, {
    "from": 282,
    "label": "calls",
    "to": 307
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 282,
    "label": "calls",
    "to": 90
  }, {
    "from": 90,
    "label": "calls",
    "to": 290
  }, {
    "from": 103,
    "label": "calls",
    "to": 290
  }, {
    "from": 2,
    "label": "contains",
    "to": 282
  }, {
    "from": 282,
    "label": "declares",
    "to": 3
  }, {
    "from": 282,
    "label": "declares",
    "to": 7
  }, {
    "from": 282,
    "label": "declares",
    "to": 12
  }, {
    "from": 282,
    "label": "declares",
    "to": 15
  }, {
    "from": 282,
    "label": "declares",
    "to": 22
  }, {
    "from": 282,
    "label": "declares",
    "to": 25
  }, {
    "from": 282,
    "label": "declares",
    "to": 30
  }, {
    "from": 282,
    "label": "declares",
    "to": 34
  }, {
    "from": 282,
    "label": "declares",
    "to": 55
  }, {
    "from": 282,
    "label": "declares",
    "to": 64
  }, {
    "from": 282,
    "label": "declares",
    "to": 70
  }, {
    "from": 282,
    "label": "declares",
    "to": 90
  }, {
    "from": 282,
    "label": "declares",
    "to": 103
  }, {
    "from": 282,
    "label": "declares",
    "to": 108
  }, {
    "from": 282,
    "label": "declares",
    "to": 122
  }, {
    "from": 282,
    "label": "declares",
    "to": 131
  }, {
    "from": 282,
    "label": "declares",
    "to": 138
  }, {
    "from": 282,
    "label": "declares",
    "to": 143
  }, {
    "from": 282,
    "label": "declares",
    "to": 147
  }, {
    "from": 282,
    "label": "declares",
    "to": 156
  }, {
    "from": 282,
    "label": "declares",
    "to": 158
  }, {
    "from": 282,
    "label": "declares",
    "to": 168
  }, {
    "from": 282,
    "label": "declares",
    "to": 186
  }, {
    "from": 282,
    "label": "declares",
    "to": 197
  }, {
    "from": 282,
    "label": "declares",
    "to": 210
  }, {
    "from": 282,
    "label": "declares",
    "to": 221
  }, {
    "from": 282,
    "label": "declares",
    "to": 233
  }, {
    "from": 282,
    "label": "declares",
    "to": 241
  }, {
    "from": 282,
    "label": "declares",
    "to": 250
  }, {
    "from": 282,
    "label": "declares",
    "to": 262
  }, {
    "from": 2,
    "label": "contains",
    "to": 308
  }, {
    "from": 2,
    "label": "contains",
    "to": 309
  }, {
    "from": 308,
    "label": "initializes",
    "to": 310
  }, {
    "from": 310,
    "label": "assigns",
    "to": 311
  }, {
    "from": 308,
    "label": "initializes",
    "to": 312
  }, {
    "from": 312,
    "label": "assigns",
    "to": 313
  }, {
    "from": 308,
    "label": "initializes",
    "to": 314
  }, {
    "from": 314,
    "label": "assigns",
    "to": 315
  }, {
    "from": 308,
    "label": "initializes",
    "to": 316
  }, {
    "from": 309,
    "label": "initializes",
    "to": 317
  }, {
    "from": 317,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "socket",
    "type": "module"
  }, {
    "id": 2,
    "text": "utestclnt",
    "type": "module"
  }, {
    "id": 3,
    "text": "function pass(...)\r\n    local s = string.format(...)\r\n    io.stderr:write(s, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local s = string.format(...)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "io.stderr:write(s, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function fail(...)\r\n    local s = string.format(...)\r\n    io.stderr:write(\"ERROR: \", s, \"!\\n\")\r\nsocket.sleep(3)\r\n    os.exit()\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "io.stderr:write(\"ERROR: \", s, \"!\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "socket.sleep(3)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "os.exit()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function warn(...)\r\n    local s = string.format(...)\r\n    io.stderr:write(\"WARNING: \", s, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "io.stderr:write(\"WARNING: \", s, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function remote(...)\r\n    local s = string.format(...)\r\n    s = string.gsub(s, \"\\n\", \";\")\r\n    s = string.gsub(s, \"%s+\", \" \")\r\n    s = string.gsub(s, \"^%s*\", \"\")\r\n    control:send(s .. \"\\n\")\r\n    control:receive()\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "s = string.gsub(s, \"\\n\", \";\")",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "s = string.gsub(s, \"%s+\", \" \")",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "s = string.gsub(s, \"^%s*\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "control:send(s .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "control:receive()",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function test(test)\r\n    io.stderr:write(\"----------------------------------------------\\n\",\r\n        \"testing: \", test, \"\\n\",\r\n        \"----------------------------------------------\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "io.stderr:write(\"----------------------------------------------\\n\",\r\n        \"testing: \", test, \"\\n\",\r\n        \"----------------------------------------------\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function uconnect(path)\r\n    local u = assert(socket.unix())\r\n    assert(u:connect(path))\r\n    return u\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local u = assert(socket.unix())",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "assert(u:connect(path))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function ubind(path)\r\n    local u = assert(socket.unix())\r\n    assert(u:bind(path))\r\n    assert(u:listen(5))\r\n    return u\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "assert(u:bind(path))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert(u:listen(5))",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function check_timeout(tm, sl, elapsed, err, opp, mode, alldone)\r\n    if tm < sl then\r\n        if opp == \"send\" then\r\n            if not err then warn(\"must be buffered\")\r\n            elseif err == \"timeout\" then pass(\"proper timeout\")\r\n            else fail(\"unexpected error '%s'\", err) end\r\n        else \r\n            if err ~= \"timeout\" then fail(\"should have timed out\") \r\n            else pass(\"proper timeout\") end\r\n        end\r\n    else\r\n        if mode == \"total\" then\r\n            if elapsed > tm then \r\n                if err ~= \"timeout\" then fail(\"should have timed out\")\r\n                else pass(\"proper timeout\") end\r\n            elseif elapsed < tm then\r\n                if err then fail(err) \r\n                else pass(\"ok\") end\r\n            else \r\n                if alldone then \r\n                    if err then fail(\"unexpected error '%s'\", err) \r\n                    else pass(\"ok\") end\r\n                else\r\n                    if err ~= \"timeout\" then fail(err) \r\n                    else pass(\"proper timeoutk\") end\r\n                end\r\n            end\r\n        else \r\n            if err then fail(err) \r\n            else pass(\"ok\") end \r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "if tm < sl then\r\n        if opp == \"send\" then\r\n            if not err then warn(\"must be buffered\")\r\n            elseif err == \"timeout\" then pass(\"proper timeout\")\r\n            else fail(\"unexpected error '%s'\", err) end\r\n        else \r\n            if err ~= \"timeout\" then fail(\"should have timed out\") \r\n            else pass(\"proper timeout\") end\r\n        end\r\n    else\r\n        if mode == \"total\" then\r\n            if elapsed > tm then \r\n                if err ~= \"timeout\" then fail(\"should have timed out\")\r\n                else pass(\"proper timeout\") end\r\n            elseif elapsed < tm then\r\n                if err then fail(err) \r\n                else pass(\"ok\") end\r\n            else \r\n                if alldone then \r\n                    if err then fail(\"unexpected error '%s'\", err) \r\n                    else pass(\"ok\") end\r\n                else\r\n                    if err ~= \"timeout\" then fail(err) \r\n                    else pass(\"proper timeoutk\") end\r\n                end\r\n            end\r\n        else \r\n            if err then fail(err) \r\n            else pass(\"ok\") end \r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if opp == \"send\" then\r\n            if not err then warn(\"must be buffered\")\r\n            elseif err == \"timeout\" then pass(\"proper timeout\")\r\n            else fail(\"unexpected error '%s'\", err) end\r\n        else \r\n            if err ~= \"timeout\" then fail(\"should have timed out\") \r\n            else pass(\"proper timeout\") end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "if not err then warn(\"must be buffered\")\r\n            elseif err == \"timeout\" then pass(\"proper timeout\")\r\n            else fail(\"unexpected error '%s'\", err) end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "warn(\"must be buffered\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "pass(\"proper timeout\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "fail(\"unexpected error '%s'\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "if err ~= \"timeout\" then fail(\"should have timed out\") \r\n            else pass(\"proper timeout\") end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "fail(\"should have timed out\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if mode == \"total\" then\r\n            if elapsed > tm then \r\n                if err ~= \"timeout\" then fail(\"should have timed out\")\r\n                else pass(\"proper timeout\") end\r\n            elseif elapsed < tm then\r\n                if err then fail(err) \r\n                else pass(\"ok\") end\r\n            else \r\n                if alldone then \r\n                    if err then fail(\"unexpected error '%s'\", err) \r\n                    else pass(\"ok\") end\r\n                else\r\n                    if err ~= \"timeout\" then fail(err) \r\n                    else pass(\"proper timeoutk\") end\r\n                end\r\n            end\r\n        else \r\n            if err then fail(err) \r\n            else pass(\"ok\") end \r\n        end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "if elapsed > tm then \r\n                if err ~= \"timeout\" then fail(\"should have timed out\")\r\n                else pass(\"proper timeout\") end\r\n            elseif elapsed < tm then\r\n                if err then fail(err) \r\n                else pass(\"ok\") end\r\n            else \r\n                if alldone then \r\n                    if err then fail(\"unexpected error '%s'\", err) \r\n                    else pass(\"ok\") end\r\n                else\r\n                    if err ~= \"timeout\" then fail(err) \r\n                    else pass(\"proper timeoutk\") end\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "if err ~= \"timeout\" then fail(\"should have timed out\")\r\n                else pass(\"proper timeout\") end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "if err then fail(err) \r\n                else pass(\"ok\") end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "fail(err)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "pass(\"ok\")",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "if alldone then \r\n                    if err then fail(\"unexpected error '%s'\", err) \r\n                    else pass(\"ok\") end\r\n                else\r\n                    if err ~= \"timeout\" then fail(err) \r\n                    else pass(\"proper timeoutk\") end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "if err then fail(\"unexpected error '%s'\", err) \r\n                    else pass(\"ok\") end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "if err ~= \"timeout\" then fail(err) \r\n                    else pass(\"proper timeoutk\") end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "pass(\"proper timeoutk\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if err then fail(err) \r\n            else pass(\"ok\") end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function reconnect()\r\n    io.stderr:write(\"attempting data connection... \")\r\n    if data then data:close() end\r\n    remote [[\r\n        i = i or 1\r\n        if data then data:close() data = nil end\r\n        print(\"accepting\")\r\n        data = server:accept()\r\n        i = i + 1\r\n        print(\"done \" .. i)\r\n    ]]\r\n    data, err = uconnect(host, port)\r\n    if not data then fail(err) \r\n    else pass(\"connected!\") end\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "io.stderr:write(\"attempting data connection... \")",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "if data then data:close() end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "data:close()",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "remote [[\r\n        i = i or 1\r\n        if data then data:close() data = nil end\r\n        print(\"accepting\")\r\n        data = server:accept()\r\n        i = i + 1\r\n        print(\"done \" .. i)\r\n    ]]",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "data, err = uconnect(host, port)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if not data then fail(err) \r\n    else pass(\"connected!\") end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "pass(\"connected!\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function test_methods(sock, methods)\r\n    for _, v in pairs(methods) do\r\n        if type(sock[v]) ~= \"function\" then \r\n            fail(sock.class .. \" method '\" .. v .. \"' not registered\") \r\n        end\r\n    end\r\n    pass(sock.class .. \" methods are ok\")\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "for _, v in pairs(methods) do\r\n        if type(sock[v]) ~= \"function\" then \r\n            fail(sock.class .. \" method '\" .. v .. \"' not registered\") \r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 66,
    "text": "if type(sock[v]) ~= \"function\" then \r\n            fail(sock.class .. \" method '\" .. v .. \"' not registered\") \r\n        end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "fail(sock.class .. \" method '\" .. v .. \"' not registered\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "pass(sock.class .. \" methods are ok\")",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function test_mixed(len)\r\n    reconnect()\r\n    local inter = math.ceil(len/4)\r\n    local p1 = \"unix \" .. string.rep(\"x\", inter) .. \"line\\n\"\r\n    local p2 = \"dos \" .. string.rep(\"y\", inter) .. \"line\\r\\n\"\r\n    local p3 = \"raw \" .. string.rep(\"z\", inter) .. \"bytes\"\r\n    local p4 = \"end\" .. string.rep(\"w\", inter) .. \"bytes\"\r\n    local bp1, bp2, bp3, bp4\r\nremote (string.format(\"str = data:receive(%d)\", \r\n            string.len(p1)+string.len(p2)+string.len(p3)+string.len(p4)))\r\n    sent, err = data:send(p1..p2..p3..p4)\r\n    if err then fail(err) end\r\nremote \"data:send(str); data:close()\"\r\n    bp1, err = data:receive()\r\n    if err then fail(err) end\r\n    bp2, err = data:receive()\r\n    if err then fail(err) end\r\n    bp3, err = data:receive(string.len(p3))\r\n    if err then fail(err) end\r\n    bp4, err = data:receive(\"*a\")\r\n    if err then fail(err) end\r\n    if bp1..\"\\n\" == p1 and bp2..\"\\r\\n\" == p2 and bp3 == p3 and bp4 == p4 then\r\n        pass(\"patterns match\")\r\n    else fail(\"patterns don't match\") end\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "reconnect()",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "local inter = math.ceil(len/4)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local p1 = \"unix \" .. string.rep(\"x\", inter) .. \"line\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local p2 = \"dos \" .. string.rep(\"y\", inter) .. \"line\\r\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local p3 = \"raw \" .. string.rep(\"z\", inter) .. \"bytes\"",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local p4 = \"end\" .. string.rep(\"w\", inter) .. \"bytes\"",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local bp1, bp2, bp3, bp4",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "remote (string.format(\"str = data:receive(%d)\", \r\n            string.len(p1)+string.len(p2)+string.len(p3)+string.len(p4)))",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "sent, err = data:send(p1..p2..p3..p4)",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if err then fail(err) end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "remote \"data:send(str); data:close()\"",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "bp1, err = data:receive()",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "bp2, err = data:receive()",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "bp3, err = data:receive(string.len(p3))",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "bp4, err = data:receive(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if bp1..\"\\n\" == p1 and bp2..\"\\r\\n\" == p2 and bp3 == p3 and bp4 == p4 then\r\n        pass(\"patterns match\")\r\n    else fail(\"patterns don't match\") end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "pass(\"patterns match\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "fail(\"patterns don't match\")",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function test_asciiline(len)\r\n    reconnect()\r\n    local str, str10, back, err\r\n    str = string.rep(\"x\", math.mod(len, 10))\r\n    str10 = string.rep(\"aZb.c#dAe?\", math.floor(len/10))\r\n    str = str .. str10\r\nremote \"str = data:receive()\"\r\n    sent, err = data:send(str..\"\\n\")\r\n    if err then fail(err) end\r\nremote \"data:send(str ..'\\\\n')\"\r\n    back, err = data:receive()\r\n    if err then fail(err) end\r\n    if back == str then pass(\"lines match\")\r\n    else fail(\"lines don't match\") end\r\nend",
    "type": "function"
  }, {
    "id": 91,
    "text": "local str, str10, back, err",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "str = string.rep(\"x\", math.mod(len, 10))",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "str10 = string.rep(\"aZb.c#dAe?\", math.floor(len/10))",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "str = str .. str10",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "remote \"str = data:receive()\"",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "sent, err = data:send(str..\"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "remote \"data:send(str ..'\\\\n')\"",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "back, err = data:receive()",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if back == str then pass(\"lines match\")\r\n    else fail(\"lines don't match\") end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "pass(\"lines match\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "fail(\"lines don't match\")",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function test_rawline(len)\r\n    reconnect()\r\n    local str, str10, back, err\r\n    str = string.rep(string.char(47), math.mod(len, 10))\r\n    str10 = string.rep(string.char(120,21,77,4,5,0,7,36,44,100), \r\n            math.floor(len/10))\r\n    str = str .. str10\r\nremote \"str = data:receive()\"\r\n    sent, err = data:send(str..\"\\n\")\r\n    if err then fail(err) end\r\nremote \"data:send(str..'\\\\n')\"\r\n    back, err = data:receive()\r\n    if err then fail(err) end\r\n    if back == str then pass(\"lines match\")\r\n    else fail(\"lines don't match\") end\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "str = string.rep(string.char(47), math.mod(len, 10))",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "str10 = string.rep(string.char(120,21,77,4,5,0,7,36,44,100), \r\n            math.floor(len/10))",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "remote \"data:send(str..'\\\\n')\"",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function test_raw(len)\r\n    reconnect()\r\n    local half = math.floor(len/2)\r\n    local s1, s2, back, err\r\n    s1 = string.rep(\"x\", half)\r\n    s2 = string.rep(\"y\", len-half)\r\nremote (string.format(\"str = data:receive(%d)\", len))\r\n    sent, err = data:send(s1)\r\n    if err then fail(err) end\r\n    sent, err = data:send(s2)\r\n    if err then fail(err) end\r\nremote \"data:send(str)\"\r\n    back, err = data:receive(len)\r\n    if err then fail(err) end\r\n    if back == s1..s2 then pass(\"blocks match\")\r\n    else fail(\"blocks don't match\") end\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "local half = math.floor(len/2)",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "local s1, s2, back, err",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "s1 = string.rep(\"x\", half)",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "s2 = string.rep(\"y\", len-half)",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "remote (string.format(\"str = data:receive(%d)\", len))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "sent, err = data:send(s1)",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "sent, err = data:send(s2)",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "remote \"data:send(str)\"",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "back, err = data:receive(len)",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "if back == s1..s2 then pass(\"blocks match\")\r\n    else fail(\"blocks don't match\") end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "pass(\"blocks match\")",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "fail(\"blocks don't match\")",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function test_totaltimeoutreceive(len, tm, sl)\r\n    reconnect()\r\n    local str, err, partial\r\n    pass(\"%d bytes, %ds total timeout, %ds pause\", len, tm, sl)\r\n    remote (string.format ([[\r\n        data:settimeout(%d)\r\n        str = string.rep('a', %d)\r\n        data:send(str)\r\n        print('server: sleeping for %ds')\r\n        socket.sleep(%d)\r\n        print('server: woke up')\r\n        data:send(str)\r\n    ]], 2*tm, len, sl, sl))\r\n    data:settimeout(tm, \"total\")\r\nlocal t = socket.gettime()\r\n    str, err, partial, elapsed = data:receive(2*len)\r\n    check_timeout(tm, sl, elapsed, err, \"receive\", \"total\", \r\n        string.len(str or partial) == 2*len)\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "local str, err, partial",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "pass(\"%d bytes, %ds total timeout, %ds pause\", len, tm, sl)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "remote (string.format ([[\r\n        data:settimeout(%d)\r\n        str = string.rep('a', %d)\r\n        data:send(str)\r\n        print('server: sleeping for %ds')\r\n        socket.sleep(%d)\r\n        print('server: woke up')\r\n        data:send(str)\r\n    ]], 2*tm, len, sl, sl))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "data:settimeout(tm, \"total\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "local t = socket.gettime()",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "str, err, partial, elapsed = data:receive(2*len)",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "check_timeout(tm, sl, elapsed, err, \"receive\", \"total\", \r\n        string.len(str or partial) == 2*len)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function test_totaltimeoutsend(len, tm, sl)\r\n    reconnect()\r\n    local str, err, total\r\n    pass(\"%d bytes, %ds total timeout, %ds pause\", len, tm, sl)\r\n    remote (string.format ([[\r\n        data:settimeout(%d)\r\n        str = data:receive(%d)\r\n        print('server: sleeping for %ds')\r\n        socket.sleep(%d)\r\n        print('server: woke up')\r\n        str = data:receive(%d)\r\n    ]], 2*tm, len, sl, sl, len))\r\n    data:settimeout(tm, \"total\")\r\n    str = string.rep(\"a\", 2*len)\r\n    total, err, partial, elapsed = data:send(str)\r\n    check_timeout(tm, sl, elapsed, err, \"send\", \"total\", \r\n        total == 2*len)\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "local str, err, total",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "remote (string.format ([[\r\n        data:settimeout(%d)\r\n        str = data:receive(%d)\r\n        print('server: sleeping for %ds')\r\n        socket.sleep(%d)\r\n        print('server: woke up')\r\n        str = data:receive(%d)\r\n    ]], 2*tm, len, sl, sl, len))",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "str = string.rep(\"a\", 2*len)",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "total, err, partial, elapsed = data:send(str)",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "check_timeout(tm, sl, elapsed, err, \"send\", \"total\", \r\n        total == 2*len)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function test_blockingtimeoutreceive(len, tm, sl)\r\n    reconnect()\r\n    local str, err, partial\r\n    pass(\"%d bytes, %ds blocking timeout, %ds pause\", len, tm, sl)\r\n    remote (string.format ([[\r\n        data:settimeout(%d)\r\n        str = string.rep('a', %d)\r\n        data:send(str)\r\n        print('server: sleeping for %ds')\r\n        socket.sleep(%d)\r\n        print('server: woke up')\r\n        data:send(str)\r\n    ]], 2*tm, len, sl, sl))\r\n    data:settimeout(tm)\r\n    str, err, partial, elapsed = data:receive(2*len)\r\n    check_timeout(tm, sl, elapsed, err, \"receive\", \"blocking\", \r\n        string.len(str or partial) == 2*len)\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "pass(\"%d bytes, %ds blocking timeout, %ds pause\", len, tm, sl)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "data:settimeout(tm)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "check_timeout(tm, sl, elapsed, err, \"receive\", \"blocking\", \r\n        string.len(str or partial) == 2*len)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function test_blockingtimeoutsend(len, tm, sl)\r\n    reconnect()\r\n    local str, err, total\r\n    pass(\"%d bytes, %ds blocking timeout, %ds pause\", len, tm, sl)\r\n    remote (string.format ([[\r\n        data:settimeout(%d)\r\n        str = data:receive(%d)\r\n        print('server: sleeping for %ds')\r\n        socket.sleep(%d)\r\n        print('server: woke up')\r\n        str = data:receive(%d)\r\n    ]], 2*tm, len, sl, sl, len))\r\n    data:settimeout(tm)\r\n    str = string.rep(\"a\", 2*len)\r\n    total, err,  partial, elapsed = data:send(str)\r\n    check_timeout(tm, sl, elapsed, err, \"send\", \"blocking\",\r\n        total == 2*len)\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "total, err,  partial, elapsed = data:send(str)",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "check_timeout(tm, sl, elapsed, err, \"send\", \"blocking\",\r\n        total == 2*len)",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function empty_connect()\r\n    reconnect()\r\n    if data then data:close() data = nil end\r\n    remote [[\r\n        if data then data:close() data = nil end\r\n        data = server:accept()\r\n    ]]\r\n    data, err = socket.connect(\"\", port)\r\n    if not data then \r\n        pass(\"ok\")\r\n        data = socket.connect(host, port)\r\n    else \r\n        pass(\"gethostbyname returns localhost on empty string...\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "if data then data:close() data = nil end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "data = nil",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "remote [[\r\n        if data then data:close() data = nil end\r\n        data = server:accept()\r\n    ]]",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "data, err = socket.connect(\"\", port)",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "if not data then \r\n        pass(\"ok\")\r\n        data = socket.connect(host, port)\r\n    else \r\n        pass(\"gethostbyname returns localhost on empty string...\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "data = socket.connect(host, port)",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "pass(\"gethostbyname returns localhost on empty string...\")",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function isclosed(c)\r\n    return c:getfd() == -1 or c:getfd() == (2^32-1)\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function active_close()\r\n    reconnect()\r\n    if isclosed(data) then fail(\"should not be closed\") end\r\n    data:close()\r\n    if not isclosed(data) then fail(\"should be closed\") end\r\n    data = nil\r\n    local udp = socket.udp()\r\n    if isclosed(udp) then fail(\"should not be closed\") end\r\n    udp:close()\r\n    if not isclosed(udp) then fail(\"should be closed\") end\r\n    pass(\"ok\")\r\nend",
    "type": "function"
  }, {
    "id": 159,
    "text": "if isclosed(data) then fail(\"should not be closed\") end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "fail(\"should not be closed\")",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "if not isclosed(data) then fail(\"should be closed\") end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "fail(\"should be closed\")",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "local udp = socket.udp()",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "if isclosed(udp) then fail(\"should not be closed\") end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "udp:close()",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "if not isclosed(udp) then fail(\"should be closed\") end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "function test_closed()\r\n    local back, partial, err\r\n    local str = 'little string'\r\n    reconnect()\r\n    pass(\"trying read detection\")\r\n    remote (string.format ([[\r\n        data:send('%s')\r\n        data:close()\r\n        data = nil\r\n    ]], str))\r\n    -- try to get a line \r\n    back, err, partial = data:receive()\r\n    if not err then fail(\"should have gotten 'closed'.\")\r\n    elseif err ~= \"closed\" then fail(\"got '\"..err..\"' instead of 'closed'.\")\r\n    elseif str ~= partial then fail(\"didn't receive partial result.\")\r\n    else pass(\"graceful 'closed' received\") end\r\n    reconnect()\r\n    pass(\"trying write detection\")\r\n    remote [[\r\n        data:close()\r\n        data = nil\r\n    ]]\r\n    total, err, partial = data:send(string.rep(\"ugauga\", 100000))\r\n    if not err then \r\n        pass(\"failed: output buffer is at least %d bytes long!\", total)\r\n    elseif err ~= \"closed\" then \r\n        fail(\"got '\"..err..\"' instead of 'closed'.\")\r\n    else \r\n        pass(\"graceful 'closed' received after %d bytes were sent\", partial) \r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "local back, partial, err",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "local str = 'little string'",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "pass(\"trying read detection\")",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "remote (string.format ([[\r\n        data:send('%s')\r\n        data:close()\r\n        data = nil\r\n    ]], str))",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "back, err, partial = data:receive()",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "if not err then fail(\"should have gotten 'closed'.\")\r\n    elseif err ~= \"closed\" then fail(\"got '\"..err..\"' instead of 'closed'.\")\r\n    elseif str ~= partial then fail(\"didn't receive partial result.\")\r\n    else pass(\"graceful 'closed' received\") end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "fail(\"should have gotten 'closed'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "fail(\"got '\"..err..\"' instead of 'closed'.\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "fail(\"didn't receive partial result.\")",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "pass(\"graceful 'closed' received\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "pass(\"trying write detection\")",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "remote [[\r\n        data:close()\r\n        data = nil\r\n    ]]",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "total, err, partial = data:send(string.rep(\"ugauga\", 100000))",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "if not err then \r\n        pass(\"failed: output buffer is at least %d bytes long!\", total)\r\n    elseif err ~= \"closed\" then \r\n        fail(\"got '\"..err..\"' instead of 'closed'.\")\r\n    else \r\n        pass(\"graceful 'closed' received after %d bytes were sent\", partial) \r\n    end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "pass(\"failed: output buffer is at least %d bytes long!\", total)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "pass(\"graceful 'closed' received after %d bytes were sent\", partial)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function test_selectbugs()\r\n    local r, s, e = socket.select(nil, nil, 0.1)\r\n    assert(type(r) == \"table\" and type(s) == \"table\" and \r\n        (e == \"timeout\" or e == \"error\"))\r\n    pass(\"both nil: ok\")\r\n    local udp = socket.udp()\r\n    udp:close()\r\n    r, s, e = socket.select({ udp }, { udp }, 0.1)\r\n    assert(type(r) == \"table\" and type(s) == \"table\" and \r\n        (e == \"timeout\" or e == \"error\"))\r\n    pass(\"closed sockets: ok\")\r\n    e = pcall(socket.select, \"wrong\", 1, 0.1)\r\n    assert(e == false)\r\n    e = pcall(socket.select, {}, 1, 0.1)\r\n    assert(e == false)\r\n    pass(\"invalid input: ok\")\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "local r, s, e = socket.select(nil, nil, 0.1)",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "assert(type(r) == \"table\" and type(s) == \"table\" and \r\n        (e == \"timeout\" or e == \"error\"))",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "pass(\"both nil: ok\")",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "r, s, e = socket.select({ udp }, { udp }, 0.1)",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "pass(\"closed sockets: ok\")",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "e = pcall(socket.select, \"wrong\", 1, 0.1)",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "assert(e == false)",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "e = pcall(socket.select, {}, 1, 0.1)",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "pass(\"invalid input: ok\")",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function accept_timeout()\r\n    io.stderr:write(\"accept with timeout (if it hangs, it failed): \")\r\n    local s, e = socket.bind(\"*\", 0, 0)\r\n    assert(s, e)\r\n    local t = socket.gettime()\r\n    s:settimeout(1)\r\n    local c, e = s:accept()\r\n    assert(not c, \"should not accept\") \r\n    assert(e == \"timeout\", string.format(\"wrong error message (%s)\", e))\r\n    t = socket.gettime() - t\r\n    assert(t < 2, string.format(\"took to long to give up (%gs)\", t))\r\n    s:close()\r\n    pass(\"good\")\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "io.stderr:write(\"accept with timeout (if it hangs, it failed): \")",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "local s, e = socket.bind(\"*\", 0, 0)",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "assert(s, e)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "s:settimeout(1)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "local c, e = s:accept()",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "assert(not c, \"should not accept\")",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "assert(e == \"timeout\", string.format(\"wrong error message (%s)\", e))",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "t = socket.gettime() - t",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "assert(t < 2, string.format(\"took to long to give up (%gs)\", t))",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "s:close()",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "pass(\"good\")",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function connect_timeout()\r\n    io.stderr:write(\"connect with timeout (if it hangs, it failed!): \")\r\n    local t = socket.gettime()\r\n    local c, e = socket.tcp()\r\n    assert(c, e)\r\n    c:settimeout(0.1)\r\n    local t = socket.gettime()\r\n    local r, e = c:connect(\"127.0.0.2\", 80)\r\n    assert(not r, \"should not connect\")\r\n    assert(socket.gettime() - t < 2, \"took too long to give up.\") \r\n    c:close()\r\n    print(\"ok\") \r\nend",
    "type": "function"
  }, {
    "id": 211,
    "text": "io.stderr:write(\"connect with timeout (if it hangs, it failed!): \")",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "local c, e = socket.tcp()",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "assert(c, e)",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "c:settimeout(0.1)",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "local r, e = c:connect(\"127.0.0.2\", 80)",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "assert(not r, \"should not connect\")",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "assert(socket.gettime() - t < 2, \"took too long to give up.\")",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "c:close()",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "print(\"ok\")",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function accept_errors()\r\n    io.stderr:write(\"not listening: \")\r\n    local d, e = socket.bind(\"*\", 0)\r\n    assert(d, e);\r\n    local c, e = socket.tcp();\r\n    assert(c, e);\r\n    d:setfd(c:getfd())\r\n    d:settimeout(2)\r\n    local r, e = d:accept()\r\n    assert(not r and e)\r\n    print(\"ok: \", e)\r\n    io.stderr:write(\"not supported: \")\r\n    local c, e = socket.udp()\r\n    assert(c, e);\r\n    d:setfd(c:getfd())\r\n    local r, e = d:accept()\r\n    assert(not r and e)\r\n    print(\"ok: \", e)\r\nend",
    "type": "function"
  }, {
    "id": 222,
    "text": "io.stderr:write(\"not listening: \")",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "local d, e = socket.bind(\"*\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 224,
    "text": "assert(d, e)",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "d:setfd(c:getfd())",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "d:settimeout(2)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "local r, e = d:accept()",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "assert(not r and e)",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "print(\"ok: \", e)",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "io.stderr:write(\"not supported: \")",
    "type": "statement:functioncall"
  }, {
    "id": 231,
    "text": "local c, e = socket.udp()",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function connect_errors()\r\n    io.stderr:write(\"connection refused: \")\r\n    local c, e = socket.connect(\"localhost\", 1);\r\n    assert(not c and e)\r\n    print(\"ok: \", e)\r\n    io.stderr:write(\"host not found: \")\r\n    local c, e = socket.connect(\"host.is.invalid\", 1);\r\n    assert(not c and e, e)\r\n    print(\"ok: \", e)\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "io.stderr:write(\"connection refused: \")",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "local c, e = socket.connect(\"localhost\", 1)",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "assert(not c and e)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "io.stderr:write(\"host not found: \")",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "local c, e = socket.connect(\"host.is.invalid\", 1)",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "assert(not c and e, e)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "function rebind_test()\r\n    local c = socket.bind(\"localhost\", 0)\r\n    local i, p = c:getsockname()\r\n    local s, e = socket.tcp()\r\n    assert(s, e)\r\n    s:setoption(\"reuseaddr\", false)\r\n    r, e = s:bind(\"localhost\", p)\r\n    assert(not r, \"managed to rebind!\")\r\n    assert(e)\r\n    print(\"ok: \", e)\r\nend",
    "type": "function"
  }, {
    "id": 242,
    "text": "local c = socket.bind(\"localhost\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 243,
    "text": "local i, p = c:getsockname()",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "local s, e = socket.tcp()",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "s:setoption(\"reuseaddr\", false)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "r, e = s:bind(\"localhost\", p)",
    "type": "statement:assign"
  }, {
    "id": 247,
    "text": "assert(not r, \"managed to rebind!\")",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "assert(e)",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function getstats_test()\r\n    reconnect()\r\n    local t = 0\r\n    for i = 1, 25 do\r\n        local c = math.random(1, 100)\r\n        remote (string.format ([[\r\n            str = data:receive(%d)\r\n            data:send(str)\r\n        ]], c))\r\n        data:send(string.rep(\"a\", c))\r\n        data:receive(c)\r\n        t = t + c\r\n        local r, s, a = data:getstats()\r\n        assert(r == t, \"received count failed\" .. tostring(r) \r\n            .. \"/\" .. tostring(t))\r\n        assert(s == t, \"sent count failed\" .. tostring(s) \r\n            .. \"/\" .. tostring(t))\r\n    end\r\n    print(\"ok\")\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "local t = 0",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "for i = 1, 25 do\r\n        local c = math.random(1, 100)\r\n        remote (string.format ([[\r\n            str = data:receive(%d)\r\n            data:send(str)\r\n        ]], c))\r\n        data:send(string.rep(\"a\", c))\r\n        data:receive(c)\r\n        t = t + c\r\n        local r, s, a = data:getstats()\r\n        assert(r == t, \"received count failed\" .. tostring(r) \r\n            .. \"/\" .. tostring(t))\r\n        assert(s == t, \"sent count failed\" .. tostring(s) \r\n            .. \"/\" .. tostring(t))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 253,
    "text": "local c = math.random(1, 100)",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "remote (string.format ([[\r\n            str = data:receive(%d)\r\n            data:send(str)\r\n        ]], c))",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "data:send(string.rep(\"a\", c))",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "data:receive(c)",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "t = t + c",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "local r, s, a = data:getstats()",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "assert(r == t, \"received count failed\" .. tostring(r) \r\n            .. \"/\" .. tostring(t))",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "assert(s == t, \"sent count failed\" .. tostring(s) \r\n            .. \"/\" .. tostring(t))",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 262,
    "text": "function test_nonblocking(size) \r\n    reconnect()\r\nprint(\"Testing \"  .. 2*size .. \" bytes\")\r\nremote(string.format([[\r\n    data:send(string.rep(\"a\", %d))\r\n    socket.sleep(0.5)\r\n    data:send(string.rep(\"b\", %d) .. \"\\n\")\r\n]], size, size))\r\n    local err = \"timeout\"\r\n    local part = \"\"\r\n    local str\r\n    data:settimeout(0)\r\n    while 1 do\r\n        str, err, part = data:receive(\"*l\", part)\r\n        if err ~= \"timeout\" then break end\r\n    end\r\n    assert(str == (string.rep(\"a\", size) .. string.rep(\"b\", size)))\r\n    reconnect()\r\nremote(string.format([[\r\n    str = data:receive(%d)\r\n    socket.sleep(0.5)\r\n    str = data:receive(%d, str)\r\n    data:send(str)\r\n]], size, size))\r\n    data:settimeout(0)\r\n    local start = 0\r\n    while 1 do\r\n        ret, err, start = data:send(str, start+1)\r\n        if err ~= \"timeout\" then break end\r\n    end\r\n    data:send(\"\\n\")\r\n    data:settimeout(-1)\r\n    local back = data:receive(2*size)\r\n    assert(back == str, \"'\" .. back .. \"' vs '\" .. str .. \"'\")\r\n    print(\"ok\")\r\nend",
    "type": "function"
  }, {
    "id": 263,
    "text": "print(\"Testing \"  .. 2*size .. \" bytes\")",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "remote(string.format([[\r\n    data:send(string.rep(\"a\", %d))\r\n    socket.sleep(0.5)\r\n    data:send(string.rep(\"b\", %d) .. \"\\n\")\r\n]], size, size))",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "local err = \"timeout\"",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "local part = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "local str",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "data:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "while 1 do\r\n        str, err, part = data:receive(\"*l\", part)\r\n        if err ~= \"timeout\" then break end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 270,
    "text": "str, err, part = data:receive(\"*l\", part)",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "if err ~= \"timeout\" then break end",
    "type": "statement:if"
  }, {
    "id": 272,
    "text": "assert(str == (string.rep(\"a\", size) .. string.rep(\"b\", size)))",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "remote(string.format([[\r\n    str = data:receive(%d)\r\n    socket.sleep(0.5)\r\n    str = data:receive(%d, str)\r\n    data:send(str)\r\n]], size, size))",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "local start = 0",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "while 1 do\r\n        ret, err, start = data:send(str, start+1)\r\n        if err ~= \"timeout\" then break end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 276,
    "text": "ret, err, start = data:send(str, start+1)",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "data:send(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 278,
    "text": "data:settimeout(-1)",
    "type": "statement:functioncall"
  }, {
    "id": 279,
    "text": "local back = data:receive(2*size)",
    "type": "statement:localassign"
  }, {
    "id": 280,
    "text": "assert(back == str, \"'\" .. back .. \"' vs '\" .. str .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 282,
    "text": "",
    "type": "function container"
  }, {
    "id": 283,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 284,
    "text": "unix",
    "type": "global function"
  }, {
    "id": 285,
    "text": "udp",
    "type": "global function"
  }, {
    "id": 286,
    "text": "format",
    "type": "global function"
  }, {
    "id": 287,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 288,
    "text": "char",
    "type": "global function"
  }, {
    "id": 289,
    "text": "random",
    "type": "global function"
  }, {
    "id": 290,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 291,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 292,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 293,
    "text": "len",
    "type": "global function"
  }, {
    "id": 294,
    "text": "tcp",
    "type": "global function"
  }, {
    "id": 295,
    "text": "select",
    "type": "global function"
  }, {
    "id": 296,
    "text": "gettime",
    "type": "global function"
  }, {
    "id": 297,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 298,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 299,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 300,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 301,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 302,
    "text": "type",
    "type": "global function"
  }, {
    "id": 303,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 304,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 305,
    "text": "print",
    "type": "global function"
  }, {
    "id": 306,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 307,
    "text": "require",
    "type": "global function"
  }, {
    "id": 308,
    "text": "",
    "type": "variable container"
  }, {
    "id": 309,
    "text": "",
    "type": "require container"
  }, {
    "id": 310,
    "text": "",
    "type": "global variable"
  }, {
    "id": 311,
    "text": "",
    "type": "n/a"
  }, {
    "id": 312,
    "text": "",
    "type": "global variable"
  }, {
    "id": 313,
    "text": "",
    "type": "n/a"
  }, {
    "id": 314,
    "text": "",
    "type": "global variable"
  }, {
    "id": 315,
    "text": "",
    "type": "n/a"
  }, {
    "id": 316,
    "text": "",
    "type": "global variable"
  }, {
    "id": 317,
    "text": "",
    "type": "require local variable"
  } ]
}