{
  "_filename": "dict.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/etc/dict.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 4
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 12
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 16
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 4
  }, {
    "from": 44,
    "label": "has",
    "to": 4
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 47,
    "label": "has",
    "to": 57
  }, {
    "from": 47,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 47,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 47,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 47,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 4
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 4
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 56
  }, {
    "from": 80,
    "label": "has",
    "to": 59
  }, {
    "from": 81,
    "label": "has",
    "to": 62
  }, {
    "from": 82,
    "label": "has",
    "to": 64
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 11,
    "label": "calls",
    "to": 89
  }, {
    "from": 2,
    "label": "calls",
    "to": 96
  }, {
    "from": 6,
    "label": "calls",
    "to": 96
  }, {
    "from": 8,
    "label": "calls",
    "to": 96
  }, {
    "from": 11,
    "label": "calls",
    "to": 96
  }, {
    "from": 11,
    "label": "calls",
    "to": 96
  }, {
    "from": 18,
    "label": "calls",
    "to": 96
  }, {
    "from": 28,
    "label": "calls",
    "to": 96
  }, {
    "from": 28,
    "label": "calls",
    "to": 96
  }, {
    "from": 28,
    "label": "calls",
    "to": 96
  }, {
    "from": 47,
    "label": "calls",
    "to": 96
  }, {
    "from": 47,
    "label": "calls",
    "to": 96
  }, {
    "from": 47,
    "label": "calls",
    "to": 96
  }, {
    "from": 47,
    "label": "calls",
    "to": 96
  }, {
    "from": 47,
    "label": "calls",
    "to": 96
  }, {
    "from": 47,
    "label": "calls",
    "to": 96
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 66,
    "label": "calls",
    "to": 2
  }, {
    "from": 47,
    "label": "calls",
    "to": 93
  }, {
    "from": 86,
    "label": "calls",
    "to": 76
  }, {
    "from": 47,
    "label": "calls",
    "to": 44
  }, {
    "from": 47,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 94
  }, {
    "from": 8,
    "label": "calls",
    "to": 91
  }, {
    "from": 28,
    "label": "calls",
    "to": 91
  }, {
    "from": 47,
    "label": "calls",
    "to": 91
  }, {
    "from": 86,
    "label": "calls",
    "to": 99
  }, {
    "from": 11,
    "label": "calls",
    "to": 95
  }, {
    "from": 18,
    "label": "calls",
    "to": 95
  }, {
    "from": 28,
    "label": "calls",
    "to": 95
  }, {
    "from": 8,
    "label": "calls",
    "to": 88
  }, {
    "from": 28,
    "label": "calls",
    "to": 88
  }, {
    "from": 47,
    "label": "calls",
    "to": 88
  }, {
    "from": 76,
    "label": "calls",
    "to": 66
  }, {
    "from": 86,
    "label": "calls",
    "to": 66
  }, {
    "from": 86,
    "label": "calls",
    "to": 98
  }, {
    "from": 86,
    "label": "calls",
    "to": 101
  }, {
    "from": 86,
    "label": "calls",
    "to": 101
  }, {
    "from": 86,
    "label": "calls",
    "to": 101
  }, {
    "from": 86,
    "label": "calls",
    "to": 101
  }, {
    "from": 86,
    "label": "calls",
    "to": 101
  }, {
    "from": 76,
    "label": "calls",
    "to": 47
  }, {
    "from": 47,
    "label": "calls",
    "to": 90
  }, {
    "from": 47,
    "label": "calls",
    "to": 90
  }, {
    "from": 47,
    "label": "calls",
    "to": 90
  }, {
    "from": 47,
    "label": "calls",
    "to": 90
  }, {
    "from": 8,
    "label": "calls",
    "to": 100
  }, {
    "from": 47,
    "label": "calls",
    "to": 100
  }, {
    "from": 86,
    "label": "calls",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 86
  }, {
    "from": 86,
    "label": "declares",
    "to": 2
  }, {
    "from": 86,
    "label": "declares",
    "to": 6
  }, {
    "from": 86,
    "label": "declares",
    "to": 8
  }, {
    "from": 86,
    "label": "declares",
    "to": 11
  }, {
    "from": 86,
    "label": "declares",
    "to": 18
  }, {
    "from": 86,
    "label": "declares",
    "to": 28
  }, {
    "from": 86,
    "label": "declares",
    "to": 39
  }, {
    "from": 86,
    "label": "declares",
    "to": 42
  }, {
    "from": 86,
    "label": "declares",
    "to": 44
  }, {
    "from": 86,
    "label": "declares",
    "to": 47
  }, {
    "from": 86,
    "label": "declares",
    "to": 66
  }, {
    "from": 86,
    "label": "declares",
    "to": 76
  }, {
    "from": 86,
    "label": "declares",
    "to": 79
  }, {
    "from": 86,
    "label": "declares",
    "to": 80
  }, {
    "from": 86,
    "label": "declares",
    "to": 81
  }, {
    "from": 86,
    "label": "declares",
    "to": 82
  }, {
    "from": 86,
    "label": "declares",
    "to": 83
  }, {
    "from": 1,
    "label": "contains",
    "to": 103
  }, {
    "from": 1,
    "label": "contains",
    "to": 104
  }, {
    "from": 103,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 103,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 103,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 112,
    "label": "assigns",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 103,
    "label": "initializes",
    "to": 117
  }, {
    "from": 103,
    "label": "initializes",
    "to": 118
  }, {
    "from": 103,
    "label": "initializes",
    "to": 119
  }, {
    "from": 103,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 104,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 123
  }, {
    "from": 104,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "requires",
    "to": 125
  }, {
    "from": 104,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "requires",
    "to": 127
  }, {
    "from": 104,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "requires",
    "to": 102
  }, {
    "from": 104,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "requires",
    "to": 130
  }, {
    "from": 131,
    "label": "requires",
    "to": 125
  }, {
    "from": 132,
    "label": "requires",
    "to": 127
  }, {
    "from": 133,
    "label": "requires",
    "to": 127
  }, {
    "from": 134,
    "label": "requires",
    "to": 123
  }, {
    "from": 135,
    "label": "requires",
    "to": 127
  }, {
    "from": 136,
    "label": "requires",
    "to": 125
  }, {
    "from": 137,
    "label": "requires",
    "to": 123
  }, {
    "from": 138,
    "label": "requires",
    "to": 127
  }, {
    "from": 139,
    "label": "requires",
    "to": 127
  }, {
    "from": 140,
    "label": "requires",
    "to": 127
  }, {
    "from": 141,
    "label": "requires",
    "to": 127
  }, {
    "from": 142,
    "label": "requires",
    "to": 127
  }, {
    "from": 143,
    "label": "requires",
    "to": 127
  }, {
    "from": 144,
    "label": "requires",
    "to": 127
  }, {
    "from": 145,
    "label": "requires",
    "to": 125
  }, {
    "from": 146,
    "label": "requires",
    "to": 123
  }, {
    "from": 147,
    "label": "requires",
    "to": 127
  }, {
    "from": 148,
    "label": "requires",
    "to": 130
  }, {
    "from": 149,
    "label": "requires",
    "to": 127
  }, {
    "from": 150,
    "label": "requires",
    "to": 127
  }, {
    "from": 151,
    "label": "requires",
    "to": 123
  }, {
    "from": 152,
    "label": "requires",
    "to": 125
  }, {
    "from": 153,
    "label": "requires",
    "to": 123
  }, {
    "from": 154,
    "label": "requires",
    "to": 125
  }, {
    "from": 155,
    "label": "requires",
    "to": 123
  }, {
    "from": 156,
    "label": "requires",
    "to": 123
  }, {
    "from": 157,
    "label": "requires",
    "to": 127
  }, {
    "from": 158,
    "label": "requires",
    "to": 130
  }, {
    "from": 159,
    "label": "requires",
    "to": 123
  }, {
    "from": 160,
    "label": "requires",
    "to": 123
  }, {
    "from": 161,
    "label": "requires",
    "to": 127
  }, {
    "from": 162,
    "label": "requires",
    "to": 123
  }, {
    "from": 163,
    "label": "requires",
    "to": 125
  }, {
    "from": 164,
    "label": "requires",
    "to": 127
  }, {
    "from": 165,
    "label": "requires",
    "to": 1
  }, {
    "from": 166,
    "label": "requires",
    "to": 127
  }, {
    "from": 167,
    "label": "requires",
    "to": 127
  }, {
    "from": 168,
    "label": "requires",
    "to": 127
  }, {
    "from": 169,
    "label": "requires",
    "to": 127
  }, {
    "from": 170,
    "label": "requires",
    "to": 127
  }, {
    "from": 109,
    "label": "contains",
    "to": 87
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 82
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dict",
    "type": "module"
  }, {
    "id": 2,
    "text": "function open(host, port)\r\n    local tp = socket.try(tp.connect(host or HOST, port or PORT, TIMEOUT))\r\n    return base.setmetatable({tp = tp}, metat)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local tp = socket.try(tp.connect(host or HOST, port or PORT, TIMEOUT))",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function metat.__index:greet()\r\n    return socket.try(self.tp:check(220))\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function metat.__index:check(ok)\r\n    local code, status = socket.try(self.tp:check(ok))\r\n    return code,\r\n        base.tonumber(socket.skip(2, string.find(status, \"^%d%d%d (%d*)\")))\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local code, status = socket.try(self.tp:check(ok))",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function metat.__index:getdef()\r\n    local line = socket.try(self.tp:receive())\r\n    local def = {}\r\n    while line ~= \".\" do\r\n        table.insert(def, line)\r\n        line = socket.try(self.tp:receive())\r\n    end\r\n    return table.concat(def, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local line = socket.try(self.tp:receive())",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local def = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "while line ~= \".\" do\r\n        table.insert(def, line)\r\n        line = socket.try(self.tp:receive())\r\n    end",
    "type": "statement:while"
  }, {
    "id": 15,
    "text": "table.insert(def, line)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "line = socket.try(self.tp:receive())",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function metat.__index:define(database, word)\r\n    database = database or \"!\"\r\n      socket.try(self.tp:command(\"DEFINE\",  database .. \" \" .. word))\r\n    local code, count = self:check(150)\r\n    local defs = {}\r\n    for i = 1, count do\r\n          self:check(151)\r\n        table.insert(defs, self:getdef())\r\n    end\r\n      self:check(250)\r\n    return defs\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "database = database or \"!\"",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "socket.try(self.tp:command(\"DEFINE\",  database .. \" \" .. word))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "local code, count = self:check(150)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local defs = {}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for i = 1, count do\r\n          self:check(151)\r\n        table.insert(defs, self:getdef())\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 24,
    "text": "self:check(151)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "table.insert(defs, self:getdef())",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "self:check(250)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function metat.__index:match(database, strat, word)\r\n    database = database or \"!\"\r\n    strat = strat or \".\"\r\n      socket.try(self.tp:command(\"MATCH\",  database ..\" \".. strat ..\" \".. word))\r\n    self:check(152)\r\n    local mat = {}\r\n    local line = socket.try(self.tp:receive())\r\n    while line ~= '.' do\r\n        database, word = socket.skip(2, string.find(line, \"(%S+) (.*)\"))\r\n        if not mat[database] then mat[database] = {} end\r\n        table.insert(mat[database], word)\r\n        line = socket.try(self.tp:receive())\r\n    end\r\n      self:check(250)\r\n    return mat\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "strat = strat or \".\"",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "socket.try(self.tp:command(\"MATCH\",  database ..\" \".. strat ..\" \".. word))",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "self:check(152)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local mat = {}",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "while line ~= '.' do\r\n        database, word = socket.skip(2, string.find(line, \"(%S+) (.*)\"))\r\n        if not mat[database] then mat[database] = {} end\r\n        table.insert(mat[database], word)\r\n        line = socket.try(self.tp:receive())\r\n    end",
    "type": "statement:while"
  }, {
    "id": 34,
    "text": "database, word = socket.skip(2, string.find(line, \"(%S+) (.*)\"))",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if not mat[database] then mat[database] = {} end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "mat[database] = {}",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "table.insert(mat[database], word)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function metat.__index:quit()\r\n    self.tp:command(\"QUIT\")\r\n    return self:check(221)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "self.tp:command(\"QUIT\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function metat.__index:close()\r\n    return self.tp:close()\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function there(f)\r\n    if f == \"\" then return nil\r\n    else return f end\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "if f == \"\" then return nil\r\n    else return f end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function parse(u)\r\n    local t = socket.try(url.parse(u, default))\r\n    socket.try(t.scheme == \"dict\", \"invalid scheme '\" .. t.scheme .. \"'\")\r\n    socket.try(t.path, \"invalid path in url\")\r\n    local cmd, arg = socket.skip(2, string.find(t.path, \"^/(.)(.*)$\"))\r\n    socket.try(cmd == \"d\" or cmd == \"m\", \"<command> should be 'm' or 'd'\")\r\n    socket.try(arg and arg ~= \"\", \"need at least <word> in URL\")\r\n    t.command, t.argument = cmd, arg\r\n    arg = string.gsub(arg, \"^:([^:]+)\", function(f) t.word = f end)\r\n    socket.try(t.word, \"need at least <word> in URL\")\r\n    arg = string.gsub(arg, \"^:([^:]*)\", function(f) t.database = there(f) end)\r\n    if cmd == \"m\" then\r\n        arg = string.gsub(arg, \"^:([^:]*)\", function(f) t.strat = there(f) end)\r\n    end\r\n    string.gsub(arg, \":([^:]*)$\", function(f) t.n = base.tonumber(f) end)\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local t = socket.try(url.parse(u, default))",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "socket.try(t.scheme == \"dict\", \"invalid scheme '\" .. t.scheme .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "socket.try(t.path, \"invalid path in url\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "local cmd, arg = socket.skip(2, string.find(t.path, \"^/(.)(.*)$\"))",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "socket.try(cmd == \"d\" or cmd == \"m\", \"<command> should be 'm' or 'd'\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "socket.try(arg and arg ~= \"\", \"need at least <word> in URL\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "t.command, t.argument = cmd, arg",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "arg = string.gsub(arg, \"^:([^:]+)\", function(f) t.word = f end)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "t.word = f",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "socket.try(t.word, \"need at least <word> in URL\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "arg = string.gsub(arg, \"^:([^:]*)\", function(f) t.database = there(f) end)",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "t.database = there(f)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if cmd == \"m\" then\r\n        arg = string.gsub(arg, \"^:([^:]*)\", function(f) t.strat = there(f) end)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "arg = string.gsub(arg, \"^:([^:]*)\", function(f) t.strat = there(f) end)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "t.strat = there(f)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "string.gsub(arg, \":([^:]*)$\", function(f) t.n = base.tonumber(f) end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "t.n = base.tonumber(f)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local function tget(gett)\r\n    local con = open(gett.host, gett.port)\r\n    con:greet()\r\n    if gett.command == \"d\" then\r\n        local def = con:define(gett.database, gett.word)\r\n        con:quit()\r\n        con:close()\r\n        if gett.n then return def[gett.n]\r\n        else return def end\r\n    elseif gett.command == \"m\" then\r\n        local mat = con:match(gett.database, gett.strat, gett.word)\r\n        con:quit()\r\n        con:close()\r\n        return mat\r\n    else return nil, \"invalid command\" end\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local con = open(gett.host, gett.port)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "con:greet()",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "if gett.command == \"d\" then\r\n        local def = con:define(gett.database, gett.word)\r\n        con:quit()\r\n        con:close()\r\n        if gett.n then return def[gett.n]\r\n        else return def end\r\n    elseif gett.command == \"m\" then\r\n        local mat = con:match(gett.database, gett.strat, gett.word)\r\n        con:quit()\r\n        con:close()\r\n        return mat\r\n    else return nil, \"invalid command\" end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "local def = con:define(gett.database, gett.word)",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "con:quit()",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "con:close()",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "if gett.n then return def[gett.n]\r\n        else return def end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local mat = con:match(gett.database, gett.strat, gett.word)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "local function sget(u)\r\n    local gett = parse(u)\r\n    return tget(gett)\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "local gett = parse(u)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function(f) t.word = f end",
    "type": "function"
  }, {
    "id": 80,
    "text": "function(f) t.database = there(f) end",
    "type": "function"
  }, {
    "id": 81,
    "text": "function(f) t.strat = there(f) end",
    "type": "function"
  }, {
    "id": 82,
    "text": "function(f) t.n = base.tonumber(f) end",
    "type": "function"
  }, {
    "id": 83,
    "text": "function(gett)\r\n    if base.type(gett) == \"string\" then return sget(gett)\r\n    else return tget(gett) end\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "if base.type(gett) == \"string\" then return sget(gett)\r\n    else return tget(gett) end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "",
    "type": "function container"
  }, {
    "id": 87,
    "text": "function(table, key)\r\n        table[key] = function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end\r\n        return table[key]\r\n    end",
    "type": "function"
  }, {
    "id": 88,
    "text": "find",
    "type": "global function"
  }, {
    "id": 89,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 90,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 91,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 92,
    "text": "protect",
    "type": "global function"
  }, {
    "id": 93,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 94,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 95,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 96,
    "text": "try",
    "type": "global function"
  }, {
    "id": 97,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 98,
    "text": "module",
    "type": "global function"
  }, {
    "id": 99,
    "text": "type",
    "type": "global function"
  }, {
    "id": 100,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 101,
    "text": "require",
    "type": "global function"
  }, {
    "id": 102,
    "text": "url)",
    "type": "module"
  }, {
    "id": 103,
    "text": "",
    "type": "variable container"
  }, {
    "id": 104,
    "text": "",
    "type": "require container"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 109,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 110,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 113,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 114,
    "text": "",
    "type": "string"
  }, {
    "id": 115,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 116,
    "text": "",
    "type": "string"
  }, {
    "id": 117,
    "text": "",
    "type": "global variable"
  }, {
    "id": 118,
    "text": "",
    "type": "global variable"
  }, {
    "id": 119,
    "text": "",
    "type": "global variable"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "(table)",
    "type": "module"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 128,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "tp)",
    "type": "module"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 148,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 161,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 167,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 168,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 169,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "require local variable"
  } ]
}