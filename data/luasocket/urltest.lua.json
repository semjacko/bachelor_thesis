{
  "_filename": "urltest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luasocket/test/urltest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 28
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 17
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 49,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "calls",
    "to": 58
  }, {
    "from": 52,
    "label": "calls",
    "to": 58
  }, {
    "from": 52,
    "label": "calls",
    "to": 58
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 60
  }, {
    "from": 52,
    "label": "calls",
    "to": 57
  }, {
    "from": 52,
    "label": "calls",
    "to": 57
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 52,
    "label": "calls",
    "to": 62
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 52,
    "label": "calls",
    "to": 59
  }, {
    "from": 52,
    "label": "calls",
    "to": 61
  }, {
    "from": 52,
    "label": "calls",
    "to": 63
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 16
  }, {
    "from": 52,
    "label": "calls",
    "to": 56
  }, {
    "from": 52,
    "label": "calls",
    "to": 56
  }, {
    "from": 52,
    "label": "calls",
    "to": 54
  }, {
    "from": 52,
    "label": "calls",
    "to": 54
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 64
  }, {
    "from": 52,
    "label": "calls",
    "to": 53
  }, {
    "from": 52,
    "label": "calls",
    "to": 53
  }, {
    "from": 52,
    "label": "calls",
    "to": 53
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 10
  }, {
    "from": 52,
    "label": "calls",
    "to": 55
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 2
  }, {
    "from": 52,
    "label": "calls",
    "to": 65
  }, {
    "from": 52,
    "label": "calls",
    "to": 65
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 52,
    "label": "calls",
    "to": 24
  }, {
    "from": 52,
    "label": "calls",
    "to": 24
  }, {
    "from": 52,
    "label": "calls",
    "to": 24
  }, {
    "from": 52,
    "label": "calls",
    "to": 24
  }, {
    "from": 52,
    "label": "calls",
    "to": 24
  }, {
    "from": 52,
    "label": "calls",
    "to": 24
  }, {
    "from": 52,
    "label": "calls",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 52,
    "label": "declares",
    "to": 2
  }, {
    "from": 52,
    "label": "declares",
    "to": 10
  }, {
    "from": 52,
    "label": "declares",
    "to": 16
  }, {
    "from": 52,
    "label": "declares",
    "to": 24
  }, {
    "from": 52,
    "label": "declares",
    "to": 35
  }, {
    "from": 52,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 1,
    "label": "contains",
    "to": 68
  }, {
    "from": 67,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 67,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 67,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 67,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 67,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 67,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 68,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 66
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "urltest",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(parsed)\r\n    local built = socket.url.build(parsed)\r\n    if built ~= parsed.url then\r\n        print(\"built is different from expected\")\r\n        print(built)\r\n        print(expected)\r\n        os.exit()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local built = socket.url.build(parsed)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if built ~= parsed.url then\r\n        print(\"built is different from expected\")\r\n        print(built)\r\n        print(expected)\r\n        os.exit()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "print(\"built is different from expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "print(built)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "print(expected)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "os.exit()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function(parsed, path, unsafe)\r\n    local built = socket.url.build_path(parsed, unsafe)\r\n    if built ~= path then\r\n        print(built, path)\r\n        print(\"path composition failed.\")\r\n        os.exit()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local built = socket.url.build_path(parsed, unsafe)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if built ~= path then\r\n        print(built, path)\r\n        print(\"path composition failed.\")\r\n        os.exit()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "print(built, path)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "print(\"path composition failed.\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function(url)\r\n    local parsed = socket.url.parse(url)\r\n    parsed.path = socket.url.build_path(socket.url.parse_path(parsed.path))\r\n    local rebuilt = socket.url.build(parsed)\r\n    if rebuilt ~= url then\r\n        print(url, rebuilt)\r\n        print(\"original and rebuilt are different\")\r\n        os.exit()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local parsed = socket.url.parse(url)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "parsed.path = socket.url.build_path(socket.url.parse_path(parsed.path))",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "local rebuilt = socket.url.build(parsed)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if rebuilt ~= url then\r\n        print(url, rebuilt)\r\n        print(\"original and rebuilt are different\")\r\n        os.exit()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "print(url, rebuilt)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "print(\"original and rebuilt are different\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function(path, expect)\r\n    local parsed = socket.url.parse_path(path)\r\n    for i = 1, math.max(#parsed, #expect) do\r\n        if parsed[i] ~= expect[i] then\r\n            print(path)\r\n            os.exit()\r\n        end\r\n    end\r\n    if expect.is_directory ~= parsed.is_directory then\r\n        print(path)\r\n        print(\"is_directory mismatch\")\r\n        os.exit()\r\n    end\r\n    if expect.is_absolute ~= parsed.is_absolute then\r\n        print(path)\r\n        print(\"is_absolute mismatch\")\r\n        os.exit()\r\n    end\r\n    local built = socket.url.build_path(expect)\r\n    if built ~= path then\r\n        print(built, path)\r\n        print(\"path composition failed.\")\r\n        os.exit()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local parsed = socket.url.parse_path(path)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "for i = 1, math.max(#parsed, #expect) do\r\n        if parsed[i] ~= expect[i] then\r\n            print(path)\r\n            os.exit()\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 27,
    "text": "if parsed[i] ~= expect[i] then\r\n            print(path)\r\n            os.exit()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "print(path)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if expect.is_directory ~= parsed.is_directory then\r\n        print(path)\r\n        print(\"is_directory mismatch\")\r\n        os.exit()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "print(\"is_directory mismatch\")",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "if expect.is_absolute ~= parsed.is_absolute then\r\n        print(path)\r\n        print(\"is_absolute mismatch\")\r\n        os.exit()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "print(\"is_absolute mismatch\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local built = socket.url.build_path(expect)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function(base, relative, absolute)\r\n    local res = socket.url.absolute(base, relative)\r\n    if res ~= absolute then \r\n        io.write(\"absolute: In test for '\", relative, \"' expected '\", \r\n            absolute, \"' but got '\", res, \"'\\n\")\r\n        os.exit()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local res = socket.url.absolute(base, relative)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if res ~= absolute then \r\n        io.write(\"absolute: In test for '\", relative, \"' expected '\", \r\n            absolute, \"' but got '\", res, \"'\\n\")\r\n        os.exit()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "io.write(\"absolute: In test for '\", relative, \"' expected '\", \r\n            absolute, \"' but got '\", res, \"'\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function(gaba)\r\n    local url = gaba.url\r\n    gaba.url = nil\r\n    local parsed = socket.url.parse(url)\r\n    for i, v in pairs(gaba) do\r\n        if v ~= parsed[i] then\r\n            io.write(\"parse: In test for '\", url, \"' expected \", i, \" = '\", \r\n                   v, \"' but got '\", tostring(parsed[i]), \"'\\n\")\r\n            for i,v in pairs(parsed) do print(i,v) end\r\n            os.exit()\r\n        end\r\n    end\r\n    for i, v in pairs(parsed) do\r\n        if v ~= gaba[i] then\r\n            io.write(\"parse: In test for '\", url, \"' expected \", i, \" = '\", \r\n                   tostring(gaba[i]), \"' but got '\", v, \"'\\n\")\r\n            for i,v in pairs(parsed) do print(i,v) end\r\n            os.exit()\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local url = gaba.url",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "gaba.url = nil",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "for i, v in pairs(gaba) do\r\n        if v ~= parsed[i] then\r\n            io.write(\"parse: In test for '\", url, \"' expected \", i, \" = '\", \r\n                   v, \"' but got '\", tostring(parsed[i]), \"'\\n\")\r\n            for i,v in pairs(parsed) do print(i,v) end\r\n            os.exit()\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "if v ~= parsed[i] then\r\n            io.write(\"parse: In test for '\", url, \"' expected \", i, \" = '\", \r\n                   v, \"' but got '\", tostring(parsed[i]), \"'\\n\")\r\n            for i,v in pairs(parsed) do print(i,v) end\r\n            os.exit()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "io.write(\"parse: In test for '\", url, \"' expected \", i, \" = '\", \r\n                   v, \"' but got '\", tostring(parsed[i]), \"'\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "for i,v in pairs(parsed) do print(i,v) end",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "print(i,v)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "for i, v in pairs(parsed) do\r\n        if v ~= gaba[i] then\r\n            io.write(\"parse: In test for '\", url, \"' expected \", i, \" = '\", \r\n                   tostring(gaba[i]), \"' but got '\", v, \"'\\n\")\r\n            for i,v in pairs(parsed) do print(i,v) end\r\n            os.exit()\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "if v ~= gaba[i] then\r\n            io.write(\"parse: In test for '\", url, \"' expected \", i, \" = '\", \r\n                   tostring(gaba[i]), \"' but got '\", v, \"'\\n\")\r\n            for i,v in pairs(parsed) do print(i,v) end\r\n            os.exit()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "io.write(\"parse: In test for '\", url, \"' expected \", i, \" = '\", \r\n                   tostring(gaba[i]), \"' but got '\", v, \"'\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "",
    "type": "function container"
  }, {
    "id": 53,
    "text": "url.build_path",
    "type": "global function"
  }, {
    "id": 54,
    "text": "url.parse",
    "type": "global function"
  }, {
    "id": 55,
    "text": "url.absolute",
    "type": "global function"
  }, {
    "id": 56,
    "text": "url.parse_path",
    "type": "global function"
  }, {
    "id": 57,
    "text": "url.build",
    "type": "global function"
  }, {
    "id": 58,
    "text": "write",
    "type": "global function"
  }, {
    "id": 59,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 60,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 61,
    "text": "max",
    "type": "global function"
  }, {
    "id": 62,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 63,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 64,
    "text": "print",
    "type": "global function"
  }, {
    "id": 65,
    "text": "require",
    "type": "global function"
  }, {
    "id": 66,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 67,
    "text": "",
    "type": "variable container"
  }, {
    "id": 68,
    "text": "",
    "type": "require container"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  } ]
}