{
  "_filename": "ltn12.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/src/ltn12.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 156
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 140
  }, {
    "from": 2,
    "label": "calls",
    "to": 130
  }, {
    "from": 2,
    "label": "calls",
    "to": 61
  }, {
    "from": 3,
    "label": "calls",
    "to": 87
  }, {
    "from": 3,
    "label": "calls",
    "to": 130
  }, {
    "from": 3,
    "label": "calls",
    "to": 61
  }, {
    "from": 3,
    "label": "calls",
    "to": 156
  }, {
    "from": 4,
    "label": "calls",
    "to": 140
  }, {
    "from": 5,
    "label": "calls",
    "to": 140
  }, {
    "from": 4,
    "label": "calls",
    "to": 130
  }, {
    "from": 5,
    "label": "calls",
    "to": 130
  }, {
    "from": 6,
    "label": "calls",
    "to": 156
  }, {
    "from": 6,
    "label": "calls",
    "to": 35
  }, {
    "from": 6,
    "label": "calls",
    "to": 35
  }, {
    "from": 6,
    "label": "calls",
    "to": 87
  }, {
    "from": 6,
    "label": "calls",
    "to": 130
  }, {
    "from": 6,
    "label": "calls",
    "to": 61
  }, {
    "from": 7,
    "label": "calls",
    "to": 136
  }, {
    "from": 8,
    "label": "calls",
    "to": 117
  }, {
    "from": 11,
    "label": "calls",
    "to": 35
  }, {
    "from": 11,
    "label": "calls",
    "to": 87
  }, {
    "from": 11,
    "label": "calls",
    "to": 61
  }, {
    "from": 22,
    "label": "calls",
    "to": 73
  }, {
    "from": 20,
    "label": "calls",
    "to": 156
  }, {
    "from": 21,
    "label": "calls",
    "to": 156
  }, {
    "from": 23,
    "label": "calls",
    "to": 117
  }, {
    "from": 25,
    "label": "calls",
    "to": 57
  }, {
    "from": 28,
    "label": "calls",
    "to": 73
  }, {
    "from": 27,
    "label": "calls",
    "to": 80
  }, {
    "from": 25,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 27,
    "label": "calls",
    "to": 156
  }, {
    "from": 26,
    "label": "calls",
    "to": 136
  }, {
    "from": 28,
    "label": "calls",
    "to": 117
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 31
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 45
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 35,
    "label": "has",
    "to": 31
  }, {
    "from": 35,
    "label": "has",
    "to": 31
  }, {
    "from": 35,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 31
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 31
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 31
  }, {
    "from": 59,
    "label": "has",
    "to": 31
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 31
  }, {
    "from": 61,
    "label": "has",
    "to": 31
  }, {
    "from": 61,
    "label": "has",
    "to": 31
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 31
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 31
  }, {
    "from": 67,
    "label": "has",
    "to": 31
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 31
  }, {
    "from": 74,
    "label": "has",
    "to": 31
  }, {
    "from": 73,
    "label": "has",
    "to": 31
  }, {
    "from": 73,
    "label": "has",
    "to": 31
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 68
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 31
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 80,
    "label": "has",
    "to": 31
  }, {
    "from": 80,
    "label": "has",
    "to": 31
  }, {
    "from": 80,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 31
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 87,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 87,
    "label": "has",
    "to": 31
  }, {
    "from": 87,
    "label": "has",
    "to": 31
  }, {
    "from": 87,
    "label": "has",
    "to": 31
  }, {
    "from": 87,
    "label": "has",
    "to": 31
  }, {
    "from": 87,
    "label": "has",
    "to": 31
  }, {
    "from": 87,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 36
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 31
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 97
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 110,
    "label": "has",
    "to": 31
  }, {
    "from": 110,
    "label": "has",
    "to": 31
  }, {
    "from": 110,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 85
  }, {
    "from": 119,
    "label": "has",
    "to": 31
  }, {
    "from": 117,
    "label": "has",
    "to": 31
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 85
  }, {
    "from": 122,
    "label": "has",
    "to": 31
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 31
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 31
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 124,
    "label": "has",
    "to": 31
  }, {
    "from": 124,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 65
  }, {
    "from": 131,
    "label": "has",
    "to": 31
  }, {
    "from": 131,
    "label": "has",
    "to": 31
  }, {
    "from": 130,
    "label": "has",
    "to": 31
  }, {
    "from": 130,
    "label": "has",
    "to": 31
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 31
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 31
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 31
  }, {
    "from": 138,
    "label": "has",
    "to": 31
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 31
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 145,
    "label": "has",
    "to": 149
  }, {
    "from": 140,
    "label": "has",
    "to": 31
  }, {
    "from": 140,
    "label": "has",
    "to": 31
  }, {
    "from": 140,
    "label": "has",
    "to": 31
  }, {
    "from": 140,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 151,
    "label": "has",
    "to": 153
  }, {
    "from": 151,
    "label": "has",
    "to": 154
  }, {
    "from": 151,
    "label": "has",
    "to": 31
  }, {
    "from": 151,
    "label": "has",
    "to": 31
  }, {
    "from": 151,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 156,
    "label": "has",
    "to": 31
  }, {
    "from": 156,
    "label": "has",
    "to": 31
  }, {
    "from": 156,
    "label": "has",
    "to": 163
  }, {
    "from": 164,
    "label": "has",
    "to": 32
  }, {
    "from": 164,
    "label": "has",
    "to": 33
  }, {
    "from": 164,
    "label": "has",
    "to": 31
  }, {
    "from": 164,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 40
  }, {
    "from": 166,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 45
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 166,
    "label": "has",
    "to": 31
  }, {
    "from": 166,
    "label": "has",
    "to": 31
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 31
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 170,
    "label": "has",
    "to": 63
  }, {
    "from": 170,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 170,
    "label": "has",
    "to": 31
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 69
  }, {
    "from": 172,
    "label": "has",
    "to": 70
  }, {
    "from": 172,
    "label": "has",
    "to": 71
  }, {
    "from": 172,
    "label": "has",
    "to": 31
  }, {
    "from": 172,
    "label": "has",
    "to": 31
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 76
  }, {
    "from": 174,
    "label": "has",
    "to": 77
  }, {
    "from": 174,
    "label": "has",
    "to": 78
  }, {
    "from": 174,
    "label": "has",
    "to": 31
  }, {
    "from": 174,
    "label": "has",
    "to": 31
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 176,
    "label": "has",
    "to": 31
  }, {
    "from": 176,
    "label": "has",
    "to": 31
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 178,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 95,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 178,
    "label": "has",
    "to": 31
  }, {
    "from": 178,
    "label": "has",
    "to": 31
  }, {
    "from": 178,
    "label": "has",
    "to": 31
  }, {
    "from": 178,
    "label": "has",
    "to": 31
  }, {
    "from": 178,
    "label": "has",
    "to": 31
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 97
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 180,
    "label": "has",
    "to": 31
  }, {
    "from": 180,
    "label": "has",
    "to": 31
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 182,
    "label": "has",
    "to": 126
  }, {
    "from": 182,
    "label": "has",
    "to": 127
  }, {
    "from": 182,
    "label": "has",
    "to": 31
  }, {
    "from": 182,
    "label": "has",
    "to": 128
  }, {
    "from": 182,
    "label": "has",
    "to": 31
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 184,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 65
  }, {
    "from": 184,
    "label": "has",
    "to": 31
  }, {
    "from": 184,
    "label": "has",
    "to": 31
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 31
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 188,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 145,
    "label": "has",
    "to": 149
  }, {
    "from": 188,
    "label": "has",
    "to": 31
  }, {
    "from": 188,
    "label": "has",
    "to": 31
  }, {
    "from": 188,
    "label": "has",
    "to": 31
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 156,
    "label": "calls",
    "to": 233
  }, {
    "from": 87,
    "label": "calls",
    "to": 122
  }, {
    "from": 87,
    "label": "calls",
    "to": 122
  }, {
    "from": 140,
    "label": "calls",
    "to": 122
  }, {
    "from": 140,
    "label": "calls",
    "to": 122
  }, {
    "from": 124,
    "label": "calls",
    "to": 238
  }, {
    "from": 140,
    "label": "calls",
    "to": 238
  }, {
    "from": 151,
    "label": "calls",
    "to": 238
  }, {
    "from": 35,
    "label": "calls",
    "to": 240
  }, {
    "from": 80,
    "label": "calls",
    "to": 232
  }, {
    "from": 117,
    "label": "calls",
    "to": 232
  }, {
    "from": 29,
    "label": "calls",
    "to": 236
  }, {
    "from": 73,
    "label": "calls",
    "to": 57
  }, {
    "from": 67,
    "label": "calls",
    "to": 239
  }, {
    "from": 80,
    "label": "calls",
    "to": 239
  }, {
    "from": 87,
    "label": "calls",
    "to": 239
  }, {
    "from": 110,
    "label": "calls",
    "to": 239
  }, {
    "from": 151,
    "label": "calls",
    "to": 239
  }, {
    "from": 35,
    "label": "calls",
    "to": 237
  }, {
    "from": 87,
    "label": "calls",
    "to": 237
  }, {
    "from": 87,
    "label": "calls",
    "to": 237
  }, {
    "from": 87,
    "label": "calls",
    "to": 237
  }, {
    "from": 87,
    "label": "calls",
    "to": 237
  }, {
    "from": 130,
    "label": "calls",
    "to": 138
  }, {
    "from": 35,
    "label": "calls",
    "to": 235
  }, {
    "from": 35,
    "label": "calls",
    "to": 235
  }, {
    "from": 61,
    "label": "calls",
    "to": 59
  }, {
    "from": 29,
    "label": "calls",
    "to": 234
  }, {
    "from": 67,
    "label": "calls",
    "to": 234
  }, {
    "from": 80,
    "label": "calls",
    "to": 234
  }, {
    "from": 87,
    "label": "calls",
    "to": 234
  }, {
    "from": 124,
    "label": "calls",
    "to": 234
  }, {
    "from": 140,
    "label": "calls",
    "to": 234
  }, {
    "from": 156,
    "label": "calls",
    "to": 234
  }, {
    "from": 190,
    "label": "calls",
    "to": 241
  }, {
    "from": 190,
    "label": "calls",
    "to": 241
  }, {
    "from": 73,
    "label": "calls",
    "to": 231
  }, {
    "from": 80,
    "label": "calls",
    "to": 230
  }, {
    "from": 110,
    "label": "calls",
    "to": 230
  }, {
    "from": 110,
    "label": "calls",
    "to": 230
  }, {
    "from": 1,
    "label": "contains",
    "to": 190
  }, {
    "from": 190,
    "label": "declares",
    "to": 29
  }, {
    "from": 190,
    "label": "declares",
    "to": 35
  }, {
    "from": 190,
    "label": "declares",
    "to": 55
  }, {
    "from": 190,
    "label": "declares",
    "to": 57
  }, {
    "from": 190,
    "label": "declares",
    "to": 59
  }, {
    "from": 190,
    "label": "declares",
    "to": 61
  }, {
    "from": 190,
    "label": "declares",
    "to": 67
  }, {
    "from": 190,
    "label": "declares",
    "to": 73
  }, {
    "from": 190,
    "label": "declares",
    "to": 80
  }, {
    "from": 190,
    "label": "declares",
    "to": 87
  }, {
    "from": 190,
    "label": "declares",
    "to": 110
  }, {
    "from": 190,
    "label": "declares",
    "to": 117
  }, {
    "from": 190,
    "label": "declares",
    "to": 122
  }, {
    "from": 190,
    "label": "declares",
    "to": 124
  }, {
    "from": 190,
    "label": "declares",
    "to": 130
  }, {
    "from": 190,
    "label": "declares",
    "to": 134
  }, {
    "from": 190,
    "label": "declares",
    "to": 136
  }, {
    "from": 190,
    "label": "declares",
    "to": 138
  }, {
    "from": 190,
    "label": "declares",
    "to": 140
  }, {
    "from": 190,
    "label": "declares",
    "to": 151
  }, {
    "from": 190,
    "label": "declares",
    "to": 156
  }, {
    "from": 190,
    "label": "declares",
    "to": 164
  }, {
    "from": 190,
    "label": "declares",
    "to": 166
  }, {
    "from": 190,
    "label": "declares",
    "to": 168
  }, {
    "from": 190,
    "label": "declares",
    "to": 170
  }, {
    "from": 190,
    "label": "declares",
    "to": 172
  }, {
    "from": 190,
    "label": "declares",
    "to": 174
  }, {
    "from": 190,
    "label": "declares",
    "to": 176
  }, {
    "from": 190,
    "label": "declares",
    "to": 178
  }, {
    "from": 190,
    "label": "declares",
    "to": 180
  }, {
    "from": 190,
    "label": "declares",
    "to": 182
  }, {
    "from": 190,
    "label": "declares",
    "to": 184
  }, {
    "from": 190,
    "label": "declares",
    "to": 186
  }, {
    "from": 190,
    "label": "declares",
    "to": 188
  }, {
    "from": 201,
    "label": "calls",
    "to": 29
  }, {
    "from": 201,
    "label": "calls",
    "to": 29
  }, {
    "from": 201,
    "label": "calls",
    "to": 29
  }, {
    "from": 201,
    "label": "calls",
    "to": 29
  }, {
    "from": 201,
    "label": "calls",
    "to": 29
  }, {
    "from": 201,
    "label": "calls",
    "to": 29
  }, {
    "from": 199,
    "label": "calls",
    "to": 29
  }, {
    "from": 200,
    "label": "calls",
    "to": 29
  }, {
    "from": 202,
    "label": "calls",
    "to": 87
  }, {
    "from": 209,
    "label": "calls",
    "to": 156
  }, {
    "from": 218,
    "label": "calls",
    "to": 117
  }, {
    "from": 219,
    "label": "calls",
    "to": 117
  }, {
    "from": 220,
    "label": "calls",
    "to": 140
  }, {
    "from": 220,
    "label": "calls",
    "to": 73
  }, {
    "from": 220,
    "label": "calls",
    "to": 130
  }, {
    "from": 220,
    "label": "calls",
    "to": 130
  }, {
    "from": 220,
    "label": "calls",
    "to": 61
  }, {
    "from": 220,
    "label": "calls",
    "to": 61
  }, {
    "from": 220,
    "label": "calls",
    "to": 87
  }, {
    "from": 220,
    "label": "calls",
    "to": 35
  }, {
    "from": 220,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 73
  }, {
    "from": 221,
    "label": "calls",
    "to": 73
  }, {
    "from": 221,
    "label": "calls",
    "to": 73
  }, {
    "from": 221,
    "label": "calls",
    "to": 73
  }, {
    "from": 221,
    "label": "calls",
    "to": 73
  }, {
    "from": 221,
    "label": "calls",
    "to": 73
  }, {
    "from": 221,
    "label": "calls",
    "to": 73
  }, {
    "from": 221,
    "label": "calls",
    "to": 35
  }, {
    "from": 221,
    "label": "calls",
    "to": 35
  }, {
    "from": 221,
    "label": "calls",
    "to": 35
  }, {
    "from": 221,
    "label": "calls",
    "to": 35
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 117
  }, {
    "from": 221,
    "label": "calls",
    "to": 156
  }, {
    "from": 221,
    "label": "calls",
    "to": 156
  }, {
    "from": 221,
    "label": "calls",
    "to": 156
  }, {
    "from": 221,
    "label": "calls",
    "to": 156
  }, {
    "from": 221,
    "label": "calls",
    "to": 156
  }, {
    "from": 221,
    "label": "calls",
    "to": 156
  }, {
    "from": 221,
    "label": "calls",
    "to": 156
  }, {
    "from": 221,
    "label": "calls",
    "to": 140
  }, {
    "from": 221,
    "label": "calls",
    "to": 140
  }, {
    "from": 221,
    "label": "calls",
    "to": 140
  }, {
    "from": 221,
    "label": "calls",
    "to": 140
  }, {
    "from": 221,
    "label": "calls",
    "to": 140
  }, {
    "from": 221,
    "label": "calls",
    "to": 87
  }, {
    "from": 221,
    "label": "calls",
    "to": 87
  }, {
    "from": 221,
    "label": "calls",
    "to": 87
  }, {
    "from": 221,
    "label": "calls",
    "to": 87
  }, {
    "from": 224,
    "label": "calls",
    "to": 35
  }, {
    "from": 225,
    "label": "calls",
    "to": 35
  }, {
    "from": 226,
    "label": "calls",
    "to": 35
  }, {
    "from": 227,
    "label": "calls",
    "to": 35
  }, {
    "from": 222,
    "label": "calls",
    "to": 57
  }, {
    "from": 223,
    "label": "calls",
    "to": 156
  }, {
    "from": 223,
    "label": "calls",
    "to": 130
  }, {
    "from": 223,
    "label": "calls",
    "to": 140
  }, {
    "from": 223,
    "label": "calls",
    "to": 87
  }, {
    "from": 229,
    "label": "calls",
    "to": 35
  }, {
    "from": 229,
    "label": "calls",
    "to": 87
  }, {
    "from": 229,
    "label": "calls",
    "to": 87
  }, {
    "from": 229,
    "label": "calls",
    "to": 87
  }, {
    "from": 229,
    "label": "calls",
    "to": 61
  }, {
    "from": 242,
    "label": "requires",
    "to": 1
  }, {
    "from": 245,
    "label": "requires",
    "to": 1
  }, {
    "from": 250,
    "label": "requires",
    "to": 1
  }, {
    "from": 250,
    "label": "requires",
    "to": 1
  }, {
    "from": 250,
    "label": "requires",
    "to": 1
  }, {
    "from": 250,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 268
  }, {
    "from": 1,
    "label": "contains",
    "to": 269
  }, {
    "from": 268,
    "label": "initializes",
    "to": 270
  }, {
    "from": 270,
    "label": "assigns",
    "to": 271
  }, {
    "from": 268,
    "label": "initializes",
    "to": 272
  }, {
    "from": 272,
    "label": "assigns",
    "to": 273
  }, {
    "from": 268,
    "label": "initializes",
    "to": 274
  }, {
    "from": 274,
    "label": "assigns",
    "to": 275
  }, {
    "from": 268,
    "label": "initializes",
    "to": 276
  }, {
    "from": 276,
    "label": "assigns",
    "to": 277
  }, {
    "from": 268,
    "label": "initializes",
    "to": 278
  }, {
    "from": 278,
    "label": "assigns",
    "to": 279
  }, {
    "from": 268,
    "label": "initializes",
    "to": 280
  }, {
    "from": 280,
    "label": "assigns",
    "to": 281
  }, {
    "from": 268,
    "label": "initializes",
    "to": 282
  }, {
    "from": 282,
    "label": "assigns",
    "to": 283
  }, {
    "from": 268,
    "label": "initializes",
    "to": 284
  }, {
    "from": 284,
    "label": "assigns",
    "to": 285
  }, {
    "from": 268,
    "label": "initializes",
    "to": 286
  }, {
    "from": 286,
    "label": "assigns",
    "to": 287
  }, {
    "from": 268,
    "label": "initializes",
    "to": 288
  }, {
    "from": 288,
    "label": "assigns",
    "to": 289
  }, {
    "from": 268,
    "label": "initializes",
    "to": 290
  }, {
    "from": 268,
    "label": "initializes",
    "to": 291
  }, {
    "from": 269,
    "label": "initializes",
    "to": 292
  }, {
    "from": 292,
    "label": "requires",
    "to": 243
  }, {
    "from": 269,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "requires",
    "to": 244
  }, {
    "from": 1,
    "label": "provides",
    "to": 294
  }, {
    "from": 267,
    "label": "represents",
    "to": 295
  }, {
    "from": 294,
    "label": "provides",
    "to": 295
  }, {
    "from": 280,
    "label": "contains",
    "to": 9
  }, {
    "from": 280,
    "label": "contains",
    "to": 10
  }, {
    "from": 274,
    "label": "contains",
    "to": 12
  }, {
    "from": 274,
    "label": "contains",
    "to": 13
  }, {
    "from": 276,
    "label": "contains",
    "to": 14
  }, {
    "from": 276,
    "label": "contains",
    "to": 15
  }, {
    "from": 276,
    "label": "contains",
    "to": 16
  }, {
    "from": 278,
    "label": "contains",
    "to": 17
  }, {
    "from": 278,
    "label": "contains",
    "to": 18
  }, {
    "from": 272,
    "label": "contains",
    "to": 19
  }, {
    "from": 272,
    "label": "contains",
    "to": 24
  }, {
    "from": 249,
    "label": "contains",
    "to": 29
  }, {
    "from": 254,
    "label": "contains",
    "to": 29
  }, {
    "from": 258,
    "label": "contains",
    "to": 29
  }, {
    "from": 262,
    "label": "contains",
    "to": 29
  }, {
    "from": 266,
    "label": "contains",
    "to": 29
  }, {
    "from": 274,
    "label": "contains",
    "to": 29
  }, {
    "from": 249,
    "label": "contains",
    "to": 35
  }, {
    "from": 254,
    "label": "contains",
    "to": 35
  }, {
    "from": 258,
    "label": "contains",
    "to": 35
  }, {
    "from": 262,
    "label": "contains",
    "to": 35
  }, {
    "from": 266,
    "label": "contains",
    "to": 35
  }, {
    "from": 274,
    "label": "contains",
    "to": 35
  }, {
    "from": 246,
    "label": "contains",
    "to": 57
  }, {
    "from": 251,
    "label": "contains",
    "to": 57
  }, {
    "from": 255,
    "label": "contains",
    "to": 57
  }, {
    "from": 259,
    "label": "contains",
    "to": 57
  }, {
    "from": 263,
    "label": "contains",
    "to": 57
  }, {
    "from": 276,
    "label": "contains",
    "to": 57
  }, {
    "from": 246,
    "label": "contains",
    "to": 59
  }, {
    "from": 251,
    "label": "contains",
    "to": 59
  }, {
    "from": 255,
    "label": "contains",
    "to": 59
  }, {
    "from": 259,
    "label": "contains",
    "to": 59
  }, {
    "from": 263,
    "label": "contains",
    "to": 59
  }, {
    "from": 276,
    "label": "contains",
    "to": 59
  }, {
    "from": 246,
    "label": "contains",
    "to": 61
  }, {
    "from": 251,
    "label": "contains",
    "to": 61
  }, {
    "from": 255,
    "label": "contains",
    "to": 61
  }, {
    "from": 259,
    "label": "contains",
    "to": 61
  }, {
    "from": 263,
    "label": "contains",
    "to": 61
  }, {
    "from": 276,
    "label": "contains",
    "to": 61
  }, {
    "from": 246,
    "label": "contains",
    "to": 67
  }, {
    "from": 251,
    "label": "contains",
    "to": 67
  }, {
    "from": 255,
    "label": "contains",
    "to": 67
  }, {
    "from": 259,
    "label": "contains",
    "to": 67
  }, {
    "from": 263,
    "label": "contains",
    "to": 67
  }, {
    "from": 276,
    "label": "contains",
    "to": 67
  }, {
    "from": 246,
    "label": "contains",
    "to": 73
  }, {
    "from": 251,
    "label": "contains",
    "to": 73
  }, {
    "from": 255,
    "label": "contains",
    "to": 73
  }, {
    "from": 259,
    "label": "contains",
    "to": 73
  }, {
    "from": 263,
    "label": "contains",
    "to": 73
  }, {
    "from": 276,
    "label": "contains",
    "to": 73
  }, {
    "from": 246,
    "label": "contains",
    "to": 80
  }, {
    "from": 251,
    "label": "contains",
    "to": 80
  }, {
    "from": 255,
    "label": "contains",
    "to": 80
  }, {
    "from": 259,
    "label": "contains",
    "to": 80
  }, {
    "from": 263,
    "label": "contains",
    "to": 80
  }, {
    "from": 276,
    "label": "contains",
    "to": 80
  }, {
    "from": 246,
    "label": "contains",
    "to": 87
  }, {
    "from": 251,
    "label": "contains",
    "to": 87
  }, {
    "from": 255,
    "label": "contains",
    "to": 87
  }, {
    "from": 259,
    "label": "contains",
    "to": 87
  }, {
    "from": 263,
    "label": "contains",
    "to": 87
  }, {
    "from": 276,
    "label": "contains",
    "to": 87
  }, {
    "from": 246,
    "label": "contains",
    "to": 110
  }, {
    "from": 251,
    "label": "contains",
    "to": 110
  }, {
    "from": 255,
    "label": "contains",
    "to": 110
  }, {
    "from": 259,
    "label": "contains",
    "to": 110
  }, {
    "from": 263,
    "label": "contains",
    "to": 110
  }, {
    "from": 276,
    "label": "contains",
    "to": 110
  }, {
    "from": 247,
    "label": "contains",
    "to": 117
  }, {
    "from": 252,
    "label": "contains",
    "to": 117
  }, {
    "from": 256,
    "label": "contains",
    "to": 117
  }, {
    "from": 260,
    "label": "contains",
    "to": 117
  }, {
    "from": 264,
    "label": "contains",
    "to": 117
  }, {
    "from": 278,
    "label": "contains",
    "to": 117
  }, {
    "from": 247,
    "label": "contains",
    "to": 124
  }, {
    "from": 252,
    "label": "contains",
    "to": 124
  }, {
    "from": 256,
    "label": "contains",
    "to": 124
  }, {
    "from": 260,
    "label": "contains",
    "to": 124
  }, {
    "from": 264,
    "label": "contains",
    "to": 124
  }, {
    "from": 278,
    "label": "contains",
    "to": 124
  }, {
    "from": 247,
    "label": "contains",
    "to": 130
  }, {
    "from": 252,
    "label": "contains",
    "to": 130
  }, {
    "from": 256,
    "label": "contains",
    "to": 130
  }, {
    "from": 260,
    "label": "contains",
    "to": 130
  }, {
    "from": 264,
    "label": "contains",
    "to": 130
  }, {
    "from": 278,
    "label": "contains",
    "to": 130
  }, {
    "from": 247,
    "label": "contains",
    "to": 136
  }, {
    "from": 252,
    "label": "contains",
    "to": 136
  }, {
    "from": 256,
    "label": "contains",
    "to": 136
  }, {
    "from": 260,
    "label": "contains",
    "to": 136
  }, {
    "from": 264,
    "label": "contains",
    "to": 136
  }, {
    "from": 278,
    "label": "contains",
    "to": 136
  }, {
    "from": 247,
    "label": "contains",
    "to": 138
  }, {
    "from": 252,
    "label": "contains",
    "to": 138
  }, {
    "from": 256,
    "label": "contains",
    "to": 138
  }, {
    "from": 260,
    "label": "contains",
    "to": 138
  }, {
    "from": 264,
    "label": "contains",
    "to": 138
  }, {
    "from": 278,
    "label": "contains",
    "to": 138
  }, {
    "from": 247,
    "label": "contains",
    "to": 140
  }, {
    "from": 252,
    "label": "contains",
    "to": 140
  }, {
    "from": 256,
    "label": "contains",
    "to": 140
  }, {
    "from": 260,
    "label": "contains",
    "to": 140
  }, {
    "from": 264,
    "label": "contains",
    "to": 140
  }, {
    "from": 278,
    "label": "contains",
    "to": 140
  }, {
    "from": 248,
    "label": "contains",
    "to": 151
  }, {
    "from": 253,
    "label": "contains",
    "to": 151
  }, {
    "from": 257,
    "label": "contains",
    "to": 151
  }, {
    "from": 261,
    "label": "contains",
    "to": 151
  }, {
    "from": 265,
    "label": "contains",
    "to": 151
  }, {
    "from": 280,
    "label": "contains",
    "to": 151
  }, {
    "from": 248,
    "label": "contains",
    "to": 156
  }, {
    "from": 253,
    "label": "contains",
    "to": 156
  }, {
    "from": 257,
    "label": "contains",
    "to": 156
  }, {
    "from": 261,
    "label": "contains",
    "to": 156
  }, {
    "from": 265,
    "label": "contains",
    "to": 156
  }, {
    "from": 280,
    "label": "contains",
    "to": 156
  }, {
    "from": 272,
    "label": "contains",
    "to": 191
  }, {
    "from": 272,
    "label": "contains",
    "to": 192
  }, {
    "from": 272,
    "label": "contains",
    "to": 193
  }, {
    "from": 272,
    "label": "contains",
    "to": 194
  }, {
    "from": 272,
    "label": "contains",
    "to": 195
  }, {
    "from": 272,
    "label": "contains",
    "to": 196
  }, {
    "from": 272,
    "label": "contains",
    "to": 197
  }, {
    "from": 272,
    "label": "contains",
    "to": 198
  }, {
    "from": 272,
    "label": "contains",
    "to": 199
  }, {
    "from": 272,
    "label": "contains",
    "to": 200
  }, {
    "from": 272,
    "label": "contains",
    "to": 203
  }, {
    "from": 272,
    "label": "contains",
    "to": 204
  }, {
    "from": 272,
    "label": "contains",
    "to": 205
  }, {
    "from": 272,
    "label": "contains",
    "to": 206
  }, {
    "from": 272,
    "label": "contains",
    "to": 207
  }, {
    "from": 272,
    "label": "contains",
    "to": 208
  }, {
    "from": 272,
    "label": "contains",
    "to": 210
  }, {
    "from": 272,
    "label": "contains",
    "to": 211
  }, {
    "from": 272,
    "label": "contains",
    "to": 212
  }, {
    "from": 272,
    "label": "contains",
    "to": 213
  }, {
    "from": 272,
    "label": "contains",
    "to": 214
  }, {
    "from": 272,
    "label": "contains",
    "to": 215
  }, {
    "from": 272,
    "label": "contains",
    "to": 216
  }, {
    "from": 272,
    "label": "contains",
    "to": 217
  }, {
    "from": 274,
    "label": "contains",
    "to": 228
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ltn12",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "function getbyhttp(u, file)\r\n    local save = ltn12.sink.file(file or io.stdout)\r\n    -- only print feedback if output is not stdout\r\n    if file then save = ltn12.sink.chain(stats(gethttpsize(u)), save) end\r\n    local r, c, h, s = http.request {url = u, sink = save }\r\n    if c ~= 200 then io.stderr:write(s or c, \"\\n\") end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function getbyftp(u, file)\r\n    local save = ltn12.sink.file(file or io.stdout)\r\n    -- only print feedback if output is not stdout\r\n    -- and we don't know how big the file is\r\n    if file then save = ltn12.sink.chain(stats(), save) end\r\n    local gett = url.parse(u)\r\n    gett.sink = save\r\n    gett.type = \"i\"\r\n    local ret, err = ftp.get(gett)\r\n    if err then print(err) end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "function container"
  }, {
    "id": 7,
    "text": "local function tget(gett)\r\n    local retries, dgram, sent, datahost, dataport, code\r\n    local last = 0\r\n    socket.try(gett.host, \"missing host\")\r\n    local con = socket.try(socket.udp())\r\n    local try = socket.newtry(function() con:close() end)\r\n    -- convert from name to ip if needed\r\n    gett.host = try(socket.dns.toip(gett.host))\r\n    con:settimeout(1)\r\n    -- first packet gives data host/port to be used for data transfers\r\n    local path = string.gsub(gett.path or \"\", \"^/\", \"\")\r\n    path = url.unescape(path)\r\n    retries = 0\r\n    repeat\r\n        sent = try(con:sendto(RRQ(path, \"octet\"), gett.host, gett.port))\r\n        dgram, datahost, dataport = con:receivefrom()\r\n        retries = retries + 1\r\n    until dgram or datahost ~= \"timeout\" or retries > 5\r\n    try(dgram, datahost)\r\n    -- associate socket with data host/port\r\n    try(con:setpeername(datahost, dataport))\r\n    -- default sink\r\n    local sink = gett.sink or ltn12.sink.null()\r\n    -- process all data packets\r\n    while 1 do\r\n        -- decode packet\r\n        code = get_OP(dgram)\r\n        try(code ~= OP_ERROR, get_ERROR(dgram))\r\n        try(code == OP_DATA, \"unhandled opcode \" .. code)\r\n        -- get data packet parts\r\n        local block, data = split_DATA(dgram)\r\n        -- if not repeated, write\r\n        if block == last+1 then\r\n            try(sink(data))\r\n            last = block\r\n        end\r\n        -- last packet brings less than 512 bytes of data\r\n        if string.len(data) < 512 then\r\n            try(con:send(ACK(block)))\r\n            try(con:close())\r\n            try(sink(nil))\r\n            return 1\r\n        end\r\n        -- get the next packet\r\n        retries = 0\r\n        repeat\r\n            sent = try(con:send(ACK(last)))\r\n            dgram, err = con:receive()\r\n            retries = retries + 1\r\n        until dgram or err ~= \"timeout\" or retries > 5\r\n        try(dgram, err)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local function sget(u)\r\n    local gett = parse(u)\r\n    local t = {}\r\n    gett.sink = ltn12.sink.table(t)\r\n    tget(gett)\r\n    return table.concat(t)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function pump.step(src, snk)\r\n  local chunk, src_err = src()\r\n  local ret, snk_err = snk(chunk, src_err)\r\n  if chunk and ret then return 1\r\n  else return nil, src_err or snk_err end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function pump.all(src, snk, step)\r\n    step = step or pump.step\r\n    while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "function container"
  }, {
    "id": 12,
    "text": "function filter.cycle(lowlevel, context, extra)\r\n  return function(chunk)\r\n    local ret\r\n    ret, context = lowlevel(context, chunk, extra)\r\n    return ret\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function filter.chain(...)\r\n  local f = select(1, ...) \r\n  for i = 2, select('#', ...) do\r\n    f = chainpair(f, select(i, ...))\r\n  end\r\n  return f\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function source.empty(err)\r\n  return function()\r\n    return nil, err\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function source.file(handle, io_err)\r\n  if handle then\r\n    return function()\r\n      local chunk = handle:read(20)\r\n      if not chunk then handle:close() end\r\n      return chunk\r\n    end\r\n  else return source.empty(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function source.chain(src, f)\r\n  return function()\r\n    if not src then\r\n      return nil\r\n    end\r\n    local chunk, err = src()\r\n    if not chunk then\r\n      src = nil\r\n      return f(nil)\r\n    else\r\n      return f(chunk)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function sink.table(t)\r\n  t = t or {}\r\n  local f = function(chunk, err)\r\n    if chunk then table.insert(t, chunk) end\r\n    return 1\r\n  end\r\n  return f, t\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function sink.null()\r\n  return null\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function _M.open(server, port, create)\r\n    local tp = socket.try(tp.connect(server, port or _M.PORT, _M.TIMEOUT, create))\r\n    local f = base.setmetatable({ tp = tp }, metat)\r\n    -- make sure everything gets closed in an exception\r\n    f.try = socket.newtry(function() f:close() end)\r\n    return f\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function metat.__index:send(sendt)\r\n    self.try(self.pasvt or self.server, \"need port or pasv first\")\r\n    -- if there is a pasvt table, we already sent a PASV command\r\n    -- we just get the data connection into self.data\r\n    if self.pasvt then self:pasvconnect() end\r\n    -- get the transfer argument and command\r\n    local argument = sendt.argument or\r\n        url.unescape(string.gsub(sendt.path or \"\", \"^[/\\\\]\", \"\"))\r\n    if argument == \"\" then argument = nil end\r\n    local command = sendt.command or \"stor\"\r\n    -- send the transfer command and check the reply\r\n    self.try(self.tp:command(command, argument))\r\n    local code, reply = self.try(self.tp:check{\"2..\", \"1..\"})\r\n    -- if there is not a a pasvt table, then there is a server\r\n    -- and we already sent a PORT command\r\n    if not self.pasvt then self:portconnect() end\r\n    -- get the sink, source and step for the transfer\r\n    local step = sendt.step or ltn12.pump.step\r\n    local readt = {self.tp.c}\r\n    local checkstep = function(src, snk)\r\n        -- check status in control connection while downloading\r\n        local readyt = socket.select(readt, nil, 0)\r\n        if readyt[tp] then code = self.try(self.tp:check(\"2..\")) end\r\n        return step(src, snk)\r\n    end\r\n    local sink = socket.sink(\"close-when-done\", self.data)\r\n    -- transfer all data and check error\r\n    self.try(ltn12.pump.all(sendt.source, sink, checkstep))\r\n    if string.find(code, \"1..\") then self.try(self.tp:check(\"2..\")) end\r\n    -- done with data connection\r\n    self.data:close()\r\n    -- find out how many bytes were sent\r\n    local sent = socket.skip(1, self.data:getstats())\r\n    self.data = nil\r\n    return sent\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function metat.__index:receive(recvt)\r\n    self.try(self.pasvt or self.server, \"need port or pasv first\")\r\n    if self.pasvt then self:pasvconnect() end\r\n    local argument = recvt.argument or\r\n        url.unescape(string.gsub(recvt.path or \"\", \"^[/\\\\]\", \"\"))\r\n    if argument == \"\" then argument = nil end\r\n    local command = recvt.command or \"retr\"\r\n    self.try(self.tp:command(command, argument))\r\n    local code,reply = self.try(self.tp:check{\"1..\", \"2..\"})\r\n    if (code >= 200) and (code <= 299) then\r\n        recvt.sink(reply)\r\n        return 1\r\n    end\r\n    if not self.pasvt then self:portconnect() end\r\n    local source = socket.source(\"until-closed\", self.data)\r\n    local step = recvt.step or ltn12.pump.step\r\n    self.try(ltn12.pump.all(source, recvt.sink, step))\r\n    if string.find(code, \"1..\") then self.try(self.tp:check(\"2..\")) end\r\n    self.data:close()\r\n    self.data = nil\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local function sput(u, body)\r\n    local putt = parse(u)\r\n    putt.source = ltn12.source.string(body)\r\n    return tput(putt)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local function sget(u)\r\n    local gett = parse(u)\r\n    local t = {}\r\n    gett.sink = ltn12.sink.table(t)\r\n    tget(gett)\r\n    return table.concat(t)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function _M.open(host, port, create)\r\n    -- create socket with user connect function, or with default\r\n    local c = socket.try((create or socket.tcp)())\r\n    local h = base.setmetatable({ c = c }, metat)\r\n    -- create finalized try\r\n    h.try = socket.newtry(function() h:close() end)\r\n    -- set timeout before connecting\r\n    h.try(c:settimeout(_M.TIMEOUT))\r\n    h.try(c:connect(host, port or _M.PORT))\r\n    -- here everything worked\r\n    return h\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function metat.__index:sendbody(headers, source, step)\r\n    source = source or ltn12.source.empty()\r\n    step = step or ltn12.pump.step\r\n    -- if we don't know the size in advance, send chunked and hope for the best\r\n    local mode = \"http-chunked\"\r\n    if headers[\"content-length\"] then mode = \"keep-open\" end\r\n    return self.try(ltn12.pump.all(source, socket.sink(mode, self.c), step))\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function metat.__index:receivebody(headers, sink, step)\r\n    sink = sink or ltn12.sink.null()\r\n    step = step or ltn12.pump.step\r\n    local length = base.tonumber(headers[\"content-length\"])\r\n    local t = headers[\"transfer-encoding\"] -- shortcut\r\n    local mode = \"default\" -- connection close\r\n    if t and t ~= \"identity\" then mode = \"http-chunked\"\r\n    elseif base.tonumber(headers[\"content-length\"]) then mode = \"by-length\" end\r\n    return self.try(ltn12.pump.all(socket.source(mode, self.c, length),\r\n        sink, step))\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function metat.__index:receive09body(status, sink, step)\r\n    local source = ltn12.source.rewind(socket.source(\"until-closed\", self.c))\r\n    source(status)\r\n    return self.try(ltn12.pump.all(source, sink, step))\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local function srequest(u, b)\r\n    local t = {}\r\n    local reqt = {\r\n        url = u,\r\n        sink = ltn12.sink.table(t)\r\n    }\r\n    if b then\r\n        reqt.source = ltn12.source.string(b)\r\n        reqt.headers = {\r\n            [\"content-length\"] = string.len(b),\r\n            [\"content-type\"] = \"application/x-www-form-urlencoded\"\r\n        }\r\n        reqt.method = \"POST\"\r\n    end\r\n    local code, headers, status = socket.skip(1, trequest(reqt))\r\n    return table.concat(t), code, headers, status\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function filter.cycle(low, ctx, extra)\r\n    base.assert(low)\r\n    return function(chunk)\r\n        local ret\r\n        ret, ctx = low(ctx, chunk, extra)\r\n        return ret\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "base.assert(low)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 32,
    "text": "local ret",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "ret, ctx = low(ctx, chunk, extra)",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function filter.chain(...)\r\n    local arg = {...}\r\n    local n = select('#',...)\r\n    local top, index = 1, 1\r\n    local retry = \"\"\r\n    return function(chunk)\r\n        retry = chunk and retry\r\n        while true do\r\n            if index == top then\r\n                chunk = arg[index](chunk)\r\n                if chunk == \"\" or top == n then return chunk\r\n                elseif chunk then index = index + 1\r\n                else\r\n                    top = top+1\r\n                    index = top\r\n                end\r\n            else\r\n                chunk = arg[index](chunk or \"\")\r\n                if chunk == \"\" then\r\n                    index = index - 1\r\n                    chunk = retry\r\n                elseif chunk then\r\n                    if index == n then return chunk\r\n                    else index = index + 1 end\r\n                else base.error(\"filter returned inappropriate nil\") end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local arg = {...}",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local n = select('#',...)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local top, index = 1, 1",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local retry = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "retry = chunk and retry",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "while true do\r\n            if index == top then\r\n                chunk = arg[index](chunk)\r\n                if chunk == \"\" or top == n then return chunk\r\n                elseif chunk then index = index + 1\r\n                else\r\n                    top = top+1\r\n                    index = top\r\n                end\r\n            else\r\n                chunk = arg[index](chunk or \"\")\r\n                if chunk == \"\" then\r\n                    index = index - 1\r\n                    chunk = retry\r\n                elseif chunk then\r\n                    if index == n then return chunk\r\n                    else index = index + 1 end\r\n                else base.error(\"filter returned inappropriate nil\") end\r\n            end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 42,
    "text": "if index == top then\r\n                chunk = arg[index](chunk)\r\n                if chunk == \"\" or top == n then return chunk\r\n                elseif chunk then index = index + 1\r\n                else\r\n                    top = top+1\r\n                    index = top\r\n                end\r\n            else\r\n                chunk = arg[index](chunk or \"\")\r\n                if chunk == \"\" then\r\n                    index = index - 1\r\n                    chunk = retry\r\n                elseif chunk then\r\n                    if index == n then return chunk\r\n                    else index = index + 1 end\r\n                else base.error(\"filter returned inappropriate nil\") end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "chunk = arg[index](chunk)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if chunk == \"\" or top == n then return chunk\r\n                elseif chunk then index = index + 1\r\n                else\r\n                    top = top+1\r\n                    index = top\r\n                end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "index = index + 1",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "top = top+1",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "index = top",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "chunk = arg[index](chunk or \"\")",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "if chunk == \"\" then\r\n                    index = index - 1\r\n                    chunk = retry\r\n                elseif chunk then\r\n                    if index == n then return chunk\r\n                    else index = index + 1 end\r\n                else base.error(\"filter returned inappropriate nil\") end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "index = index - 1",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "chunk = retry",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if index == n then return chunk\r\n                    else index = index + 1 end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "base.error(\"filter returned inappropriate nil\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function empty()\r\n    return nil\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function source.empty()\r\n    return empty\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function source.error(err)\r\n    return function()\r\n        return nil, err\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function source.file(handle, io_err)\r\n    if handle then\r\n        return function()\r\n            local chunk = handle:read(_M.BLOCKSIZE)\r\n            if not chunk then handle:close() end\r\n            return chunk\r\n        end\r\n    else return source.error(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "if handle then\r\n        return function()\r\n            local chunk = handle:read(_M.BLOCKSIZE)\r\n            if not chunk then handle:close() end\r\n            return chunk\r\n        end\r\n    else return source.error(io_err or \"unable to open file\") end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "local chunk = handle:read(_M.BLOCKSIZE)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if not chunk then handle:close() end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "handle:close()",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function source.simplify(src)\r\n    base.assert(src)\r\n    return function()\r\n        local chunk, err_or_new = src()\r\n        src = err_or_new or src\r\n        if not chunk then return nil, err_or_new\r\n        else return chunk end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "base.assert(src)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local chunk, err_or_new = src()",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "src = err_or_new or src",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "if not chunk then return nil, err_or_new\r\n        else return chunk end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function source.string(s)\r\n    if s then\r\n        local i = 1\r\n        return function()\r\n            local chunk = string.sub(s, i, i+_M.BLOCKSIZE-1)\r\n            i = i + _M.BLOCKSIZE\r\n            if chunk ~= \"\" then return chunk\r\n            else return nil end\r\n        end\r\n    else return source.empty() end\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "if s then\r\n        local i = 1\r\n        return function()\r\n            local chunk = string.sub(s, i, i+_M.BLOCKSIZE-1)\r\n            i = i + _M.BLOCKSIZE\r\n            if chunk ~= \"\" then return chunk\r\n            else return nil end\r\n        end\r\n    else return source.empty() end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local chunk = string.sub(s, i, i+_M.BLOCKSIZE-1)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "i = i + _M.BLOCKSIZE",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if chunk ~= \"\" then return chunk\r\n            else return nil end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function source.rewind(src)\r\n    base.assert(src)\r\n    local t = {}\r\n    return function(chunk)\r\n        if not chunk then\r\n            chunk = table.remove(t)\r\n            if not chunk then return src()\r\n            else return chunk end\r\n        else\r\n            table.insert(t, chunk)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if not chunk then\r\n            chunk = table.remove(t)\r\n            if not chunk then return src()\r\n            else return chunk end\r\n        else\r\n            table.insert(t, chunk)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "chunk = table.remove(t)",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "if not chunk then return src()\r\n            else return chunk end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "table.insert(t, chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function source.chain(src, f)\r\n    base.assert(src and f)\r\n    local last_in, last_out = \"\", \"\"\r\n    local state = \"feeding\"\r\n    local err\r\n    return function()\r\n        if not last_out then\r\n            base.error('source is empty!', 2)\r\n        end\r\n        while true do\r\n            if state == \"feeding\" then\r\n                last_in, err = src()\r\n                if err then return nil, err end\r\n                last_out = f(last_in)\r\n                if not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                elseif last_out ~= \"\" then\r\n                    state = \"eating\"\r\n                    if last_in then last_in = \"\" end\r\n                    return last_out\r\n                end\r\n            else\r\n                last_out = f(last_in)\r\n                if last_out == \"\" then\r\n                    if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end\r\n                elseif not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                else\r\n                    return last_out\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "base.assert(src and f)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "local last_in, last_out = \"\", \"\"",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local state = \"feeding\"",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if not last_out then\r\n            base.error('source is empty!', 2)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "base.error('source is empty!', 2)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "while true do\r\n            if state == \"feeding\" then\r\n                last_in, err = src()\r\n                if err then return nil, err end\r\n                last_out = f(last_in)\r\n                if not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                elseif last_out ~= \"\" then\r\n                    state = \"eating\"\r\n                    if last_in then last_in = \"\" end\r\n                    return last_out\r\n                end\r\n            else\r\n                last_out = f(last_in)\r\n                if last_out == \"\" then\r\n                    if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end\r\n                elseif not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                else\r\n                    return last_out\r\n                end\r\n            end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 95,
    "text": "if state == \"feeding\" then\r\n                last_in, err = src()\r\n                if err then return nil, err end\r\n                last_out = f(last_in)\r\n                if not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                elseif last_out ~= \"\" then\r\n                    state = \"eating\"\r\n                    if last_in then last_in = \"\" end\r\n                    return last_out\r\n                end\r\n            else\r\n                last_out = f(last_in)\r\n                if last_out == \"\" then\r\n                    if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end\r\n                elseif not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                else\r\n                    return last_out\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "last_in, err = src()",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "last_out = f(last_in)",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                elseif last_out ~= \"\" then\r\n                    state = \"eating\"\r\n                    if last_in then last_in = \"\" end\r\n                    return last_out\r\n                end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "base.error('filter returned inappropriate nil')",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "state = \"eating\"",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "if last_in then last_in = \"\" end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "last_in = \"\"",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "if last_out == \"\" then\r\n                    if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end\r\n                elseif not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                else\r\n                    return last_out\r\n                end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "state = \"feeding\"",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "base.error('filter returned \"\"')",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function source.cat(...)\r\n    local arg = {...}\r\n    local src = table.remove(arg, 1)\r\n    return function()\r\n        while src do\r\n            local chunk, err = src()\r\n            if chunk then return chunk end\r\n            if err then return nil, err end\r\n            src = table.remove(arg, 1)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local src = table.remove(arg, 1)",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "while src do\r\n            local chunk, err = src()\r\n            if chunk then return chunk end\r\n            if err then return nil, err end\r\n            src = table.remove(arg, 1)\r\n        end",
    "type": "statement:while"
  }, {
    "id": 113,
    "text": "local chunk, err = src()",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "if chunk then return chunk end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "src = table.remove(arg, 1)",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function sink.table(t)\r\n    t = t or {}\r\n    local f = function(chunk, err)\r\n        if chunk then table.insert(t, chunk) end\r\n        return 1\r\n    end\r\n    return f, t\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "t = t or {}",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "local f = function(chunk, err)\r\n        if chunk then table.insert(t, chunk) end\r\n        return 1\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "if chunk then table.insert(t, chunk) end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function(chunk, err)\r\n        if chunk then table.insert(t, chunk) end\r\n        return 1\r\n    end",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function sink.simplify(snk)\r\n    base.assert(snk)\r\n    return function(chunk, err)\r\n        local ret, err_or_new = snk(chunk, err)\r\n        if not ret then return nil, err_or_new end\r\n        snk = err_or_new or snk\r\n        return 1\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "base.assert(snk)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "local ret, err_or_new = snk(chunk, err)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "if not ret then return nil, err_or_new end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "snk = err_or_new or snk",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function sink.file(handle, io_err)\r\n    if handle then\r\n        return function(chunk, err)\r\n            if not chunk then\r\n                handle:close()\r\n                return 1\r\n            else return handle:write(chunk) end\r\n        end\r\n    else return sink.error(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "if handle then\r\n        return function(chunk, err)\r\n            if not chunk then\r\n                handle:close()\r\n                return 1\r\n            else return handle:write(chunk) end\r\n        end\r\n    else return sink.error(io_err or \"unable to open file\") end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "if not chunk then\r\n                handle:close()\r\n                return 1\r\n            else return handle:write(chunk) end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "local function null()\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function sink.null()\r\n    return null\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function sink.error(err)\r\n    return function()\r\n        return nil, err\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function sink.chain(f, snk)\r\n    base.assert(f and snk)\r\n    return function(chunk, err)\r\n        if chunk ~= \"\" then\r\n            local filtered = f(chunk)\r\n            local done = chunk and \"\"\r\n            while true do\r\n                local ret, snkerr = snk(filtered, err)\r\n                if not ret then return nil, snkerr end\r\n                if filtered == done then return 1 end\r\n                filtered = f(done)\r\n            end\r\n        else return 1 end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "base.assert(f and snk)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "if chunk ~= \"\" then\r\n            local filtered = f(chunk)\r\n            local done = chunk and \"\"\r\n            while true do\r\n                local ret, snkerr = snk(filtered, err)\r\n                if not ret then return nil, snkerr end\r\n                if filtered == done then return 1 end\r\n                filtered = f(done)\r\n            end\r\n        else return 1 end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "local filtered = f(chunk)",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "local done = chunk and \"\"",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "while true do\r\n                local ret, snkerr = snk(filtered, err)\r\n                if not ret then return nil, snkerr end\r\n                if filtered == done then return 1 end\r\n                filtered = f(done)\r\n            end",
    "type": "statement:while"
  }, {
    "id": 146,
    "text": "local ret, snkerr = snk(filtered, err)",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "if not ret then return nil, snkerr end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "if filtered == done then return 1 end",
    "type": "statement:if"
  }, {
    "id": 149,
    "text": "filtered = f(done)",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function pump.step(src, snk)\r\n    local chunk, src_err = src()\r\n    local ret, snk_err = snk(chunk, src_err)\r\n    if chunk and ret then return 1\r\n    else return nil, src_err or snk_err end\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "local chunk, src_err = src()",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "local ret, snk_err = snk(chunk, src_err)",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if chunk and ret then return 1\r\n    else return nil, src_err or snk_err end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function pump.all(src, snk, step)\r\n    base.assert(src and snk)\r\n    step = step or pump.step\r\n    while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "base.assert(src and snk)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "step = step or pump.step",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 160,
    "text": "local ret, err = step(src, snk)",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 162,
    "text": "if err then return nil, err\r\n            else return 1 end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function(chunk)\r\n        local ret\r\n        ret, ctx = low(ctx, chunk, extra)\r\n        return ret\r\n    end",
    "type": "function"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "function(chunk)\r\n        retry = chunk and retry\r\n        while true do\r\n            if index == top then\r\n                chunk = arg[index](chunk)\r\n                if chunk == \"\" or top == n then return chunk\r\n                elseif chunk then index = index + 1\r\n                else\r\n                    top = top+1\r\n                    index = top\r\n                end\r\n            else\r\n                chunk = arg[index](chunk or \"\")\r\n                if chunk == \"\" then\r\n                    index = index - 1\r\n                    chunk = retry\r\n                elseif chunk then\r\n                    if index == n then return chunk\r\n                    else index = index + 1 end\r\n                else base.error(\"filter returned inappropriate nil\") end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "function()\r\n        return nil, err\r\n    end",
    "type": "function"
  }, {
    "id": 169,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 170,
    "text": "function()\r\n            local chunk = handle:read(_M.BLOCKSIZE)\r\n            if not chunk then handle:close() end\r\n            return chunk\r\n        end",
    "type": "function"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "function()\r\n        local chunk, err_or_new = src()\r\n        src = err_or_new or src\r\n        if not chunk then return nil, err_or_new\r\n        else return chunk end\r\n    end",
    "type": "function"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function()\r\n            local chunk = string.sub(s, i, i+_M.BLOCKSIZE-1)\r\n            i = i + _M.BLOCKSIZE\r\n            if chunk ~= \"\" then return chunk\r\n            else return nil end\r\n        end",
    "type": "function"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function(chunk)\r\n        if not chunk then\r\n            chunk = table.remove(t)\r\n            if not chunk then return src()\r\n            else return chunk end\r\n        else\r\n            table.insert(t, chunk)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "function()\r\n        if not last_out then\r\n            base.error('source is empty!', 2)\r\n        end\r\n        while true do\r\n            if state == \"feeding\" then\r\n                last_in, err = src()\r\n                if err then return nil, err end\r\n                last_out = f(last_in)\r\n                if not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                elseif last_out ~= \"\" then\r\n                    state = \"eating\"\r\n                    if last_in then last_in = \"\" end\r\n                    return last_out\r\n                end\r\n            else\r\n                last_out = f(last_in)\r\n                if last_out == \"\" then\r\n                    if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end\r\n                elseif not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                else\r\n                    return last_out\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function()\r\n        while src do\r\n            local chunk, err = src()\r\n            if chunk then return chunk end\r\n            if err then return nil, err end\r\n            src = table.remove(arg, 1)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "function(chunk, err)\r\n        local ret, err_or_new = snk(chunk, err)\r\n        if not ret then return nil, err_or_new end\r\n        snk = err_or_new or snk\r\n        return 1\r\n    end",
    "type": "function"
  }, {
    "id": 183,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 184,
    "text": "function(chunk, err)\r\n            if not chunk then\r\n                handle:close()\r\n                return 1\r\n            else return handle:write(chunk) end\r\n        end",
    "type": "function"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function()\r\n        return nil, err\r\n    end",
    "type": "function"
  }, {
    "id": 187,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 188,
    "text": "function(chunk, err)\r\n        if chunk ~= \"\" then\r\n            local filtered = f(chunk)\r\n            local done = chunk and \"\"\r\n            while true do\r\n                local ret, snkerr = snk(filtered, err)\r\n                if not ret then return nil, snkerr end\r\n                if filtered == done then return 1 end\r\n                filtered = f(done)\r\n            end\r\n        else return 1 end\r\n    end",
    "type": "function"
  }, {
    "id": 189,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 190,
    "text": "",
    "type": "function container"
  }, {
    "id": 191,
    "text": "function _M.split_message(message_s)\r\n    local message = {}\r\n    message_s = string.gsub(message_s, \"\\r\\n\", \"\\n\")\r\n    string.gsub(message_s, \"^(.-\\n)\\n\", function (h) message.headers = h end)\r\n    string.gsub(message_s, \"^.-\\n\\n(.*)\", function (b) message.body = b end)\r\n    if not message.body then\r\n        string.gsub(message_s, \"^\\n(.*)\", function (b) message.body = b end)\r\n    end\r\n    if not message.headers and not message.body then\r\n        message.headers = message_s\r\n    end\r\n    return message.headers or \"\", message.body or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "function _M.split_headers(headers_s)\r\n    local headers = {}\r\n    headers_s = string.gsub(headers_s, \"\\r\\n\", \"\\n\")\r\n    headers_s = string.gsub(headers_s, \"\\n[ ]+\", \" \")\r\n    string.gsub(\"\\n\" .. headers_s, \"\\n([^\\n]+)\", function (h) table.insert(headers, h) end)\r\n    return headers\r\nend",
    "type": "function"
  }, {
    "id": 193,
    "text": "function _M.parse_header(header_s)\r\n    header_s = string.gsub(header_s, \"\\n[ ]+\", \" \")\r\n    header_s = string.gsub(header_s, \"\\n+\", \"\")\r\n    local _, __, name, value = string.find(header_s, \"([^%s:]-):%s*(.*)\")\r\n    return name, value\r\nend",
    "type": "function"
  }, {
    "id": 194,
    "text": "function _M.parse_headers(headers_s)\r\n    local headers_t = _M.split_headers(headers_s)\r\n    local headers = {}\r\n    for i = 1, #headers_t do\r\n        local name, value = _M.parse_header(headers_t[i])\r\n        if name then\r\n            name = string.lower(name)\r\n            if headers[name] then\r\n                headers[name] = headers[name] .. \", \" .. value\r\n            else headers[name] = value end\r\n        end\r\n    end\r\n    return headers\r\nend",
    "type": "function"
  }, {
    "id": 195,
    "text": "function _M.parse_from(from)\r\n    local _, __, name, address = string.find(from, \"^%s*(.-)%s*%<(.-)%>\")\r\n    if not address then\r\n        _, __, address = string.find(from, \"%s*(.+)%s*\")\r\n    end\r\n    name = name or \"\"\r\n    address = address or \"\"\r\n    if name == \"\" then name = address end\r\n    name = string.gsub(name, '\"', \"\")\r\n    return name, address\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "function _M.split_mbox(mbox_s)\r\n    mbox = {}\r\n    mbox_s = string.gsub(mbox_s, \"\\r\\n\", \"\\n\") ..\"\\n\\nFrom \\n\"\r\n    local nj, i, j = 1, 1, 1\r\n    while 1 do\r\n        i, nj = string.find(mbox_s, \"\\n\\nFrom .-\\n\", j)\r\n        if not i then break end\r\n        local message = string.sub(mbox_s, j, i-1)\r\n        table.insert(mbox, message)\r\n        j = nj+1\r\n    end\r\n    return mbox\r\nend",
    "type": "function"
  }, {
    "id": 197,
    "text": "function _M.parse(mbox_s)\r\n    local mbox = _M.split_mbox(mbox_s)\r\n    for i = 1, #mbox do\r\n        mbox[i] = _M.parse_message(mbox[i])\r\n    end\r\n    return mbox\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "function _M.parse_message(message_s)\r\n    local message = {}\r\n    message.headers, message.body = _M.split_message(message_s)\r\n    message.headers = _M.parse_headers(message.headers)\r\n    return message\r\nend",
    "type": "function"
  }, {
    "id": 199,
    "text": "function _M.normalize(marker)\r\n    return ltn12.filter.cycle(_M.eol, 0, marker)\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "function _M.stuff()\r\n    return ltn12.filter.cycle(_M.dot, 2)\r\nend",
    "type": "function"
  }, {
    "id": 201,
    "text": "",
    "type": "function container"
  }, {
    "id": 202,
    "text": "function metat.__index:send(mailt)\r\n    self:mail(mailt.from)\r\n    if base.type(mailt.rcpt) == \"table\" then\r\n        for i,v in base.ipairs(mailt.rcpt) do\r\n            self:rcpt(v)\r\n        end\r\n    else\r\n        self:rcpt(mailt.rcpt)\r\n    end\r\n    self:data(ltn12.source.chain(mailt.source, mime.stuff()), mailt.step)\r\nend",
    "type": "function"
  }, {
    "id": 203,
    "text": "function _M.open(server, port, create)\r\n    local tp = socket.try(tp.connect(server or _M.SERVER, port or _M.PORT,\r\n        _M.TIMEOUT, create))\r\n    local s = base.setmetatable({tp = tp}, metat)\r\n    -- make sure tp is closed if we get an exception\r\n    s.try = socket.newtry(function()\r\n        s:close()\r\n    end)\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 204,
    "text": "function _M.message(mesgt)\r\n    mesgt.headers = adjust_headers(mesgt)\r\n    -- create and return message source\r\n    local co = coroutine.create(function() send_message(mesgt) end)\r\n    return function()\r\n        local ret, a, b = coroutine.resume(co)\r\n        if ret then return a, b\r\n        else return nil, a end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 205,
    "text": "function _M.connect4(address, port, laddress, lport)\r\n    return socket.connect(address, port, laddress, lport, \"inet\")\r\nend",
    "type": "function"
  }, {
    "id": 206,
    "text": "function _M.connect6(address, port, laddress, lport)\r\n    return socket.connect(address, port, laddress, lport, \"inet6\")\r\nend",
    "type": "function"
  }, {
    "id": 207,
    "text": "function _M.bind(host, port, backlog)\r\n    if host == \"*\" then host = \"0.0.0.0\" end\r\n    local addrinfo, err = socket.dns.getaddrinfo(host);\r\n    if not addrinfo then return nil, err end\r\n    local sock, res\r\n    err = \"no info on address\"\r\n    for i, alt in base.ipairs(addrinfo) do\r\n        if alt.family == \"inet\" then\r\n            sock, err = socket.tcp()\r\n        else\r\n            sock, err = socket.tcp6()\r\n        end\r\n        if not sock then return nil, err end\r\n        sock:setoption(\"reuseaddr\", true)\r\n        res, err = sock:bind(alt.addr, port)\r\n        if not res then \r\n            sock:close()\r\n        else \r\n            res, err = sock:listen(backlog)\r\n            if not res then \r\n                sock:close()\r\n            else\r\n                return sock\r\n            end\r\n        end \r\n    end\r\n    return nil, err\r\nend",
    "type": "function"
  }, {
    "id": 208,
    "text": "function _M.choose(table)\r\n    return function(name, opt1, opt2)\r\n        if base.type(name) ~= \"string\" then\r\n            name, opt1, opt2 = \"default\", name, opt1\r\n        end\r\n        local f = table[name or \"nil\"]\r\n        if not f then base.error(\"unknown key (\".. base.tostring(name) ..\")\", 3)\r\n        else return f(opt1, opt2) end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 209,
    "text": "function metat.__index:source(source, step)\r\n    local sink = socket.sink(\"keep-open\", self.c)\r\n    local ret, err = ltn12.pump.all(source, sink, step or ltn12.pump.step)\r\n    return ret, err\r\nend",
    "type": "function"
  }, {
    "id": 210,
    "text": "function _M.connect(host, port, timeout, create)\r\n    local c, e = (create or socket.tcp)()\r\n    if not c then return nil, e end\r\n    c:settimeout(timeout or _M.TIMEOUT)\r\n    local r, e = c:connect(host, port)\r\n    if not r then\r\n        c:close()\r\n        return nil, e\r\n    end\r\n    return base.setmetatable({c = c}, metat)\r\nend",
    "type": "function"
  }, {
    "id": 211,
    "text": "function _M.escape(s)\r\n    return (string.gsub(s, \"([^A-Za-z0-9_])\", function(c)\r\n        return string.format(\"%%%02x\", string.byte(c))\r\n    end))\r\nend",
    "type": "function"
  }, {
    "id": 212,
    "text": "function _M.unescape(s)\r\n    return (string.gsub(s, \"%%(%x%x)\", function(hex)\r\n        return string.char(base.tonumber(hex, 16))\r\n    end))\r\nend",
    "type": "function"
  }, {
    "id": 213,
    "text": "function _M.parse(url, default)\r\n    -- initialize default parameters\r\n    local parsed = {}\r\n    for i,v in base.pairs(default or parsed) do parsed[i] = v end\r\n    -- empty url is parsed to nil\r\n    if not url or url == \"\" then return nil, \"invalid url\" end\r\n    -- remove whitespace\r\n    -- url = string.gsub(url, \"%s\", \"\")\r\n    -- get fragment\r\n    url = string.gsub(url, \"#(.*)$\", function(f)\r\n        parsed.fragment = f\r\n        return \"\"\r\n    end)\r\n    -- get scheme\r\n    url = string.gsub(url, \"^([%w][%w%+%-%.]*)%:\",\r\n        function(s) parsed.scheme = s; return \"\" end)\r\n    -- get authority\r\n    url = string.gsub(url, \"^//([^/]*)\", function(n)\r\n        parsed.authority = n\r\n        return \"\"\r\n    end)\r\n    -- get query string\r\n    url = string.gsub(url, \"%?(.*)\", function(q)\r\n        parsed.query = q\r\n        return \"\"\r\n    end)\r\n    -- get params\r\n    url = string.gsub(url, \"%;(.*)\", function(p)\r\n        parsed.params = p\r\n        return \"\"\r\n    end)\r\n    -- path is whatever was left\r\n    if url ~= \"\" then parsed.path = url end\r\n    local authority = parsed.authority\r\n    if not authority then return parsed end\r\n    authority = string.gsub(authority,\"^([^@]*)@\",\r\n        function(u) parsed.userinfo = u; return \"\" end)\r\n    authority = string.gsub(authority, \":([^:%]]*)$\",\r\n        function(p) parsed.port = p; return \"\" end)\r\n    if authority ~= \"\" then \r\n        -- IPv6?\r\n        parsed.host = string.match(authority, \"^%[(.+)%]$\") or authority \r\n    end\r\n    local userinfo = parsed.userinfo\r\n    if not userinfo then return parsed end\r\n    userinfo = string.gsub(userinfo, \":([^:]*)$\",\r\n        function(p) parsed.password = p; return \"\" end)\r\n    parsed.user = userinfo\r\n    return parsed\r\nend",
    "type": "function"
  }, {
    "id": 214,
    "text": "function _M.build(parsed)\r\n    local ppath = _M.parse_path(parsed.path or \"\")\r\n    local url = _M.build_path(ppath)\r\n    if parsed.params then url = url .. \";\" .. parsed.params end\r\n    if parsed.query then url = url .. \"?\" .. parsed.query end\r\n    local authority = parsed.authority\r\n    if parsed.host then\r\n        authority = parsed.host\r\n        if string.find(authority, \":\") then -- IPv6?\r\n            authority = \"[\" .. authority .. \"]\"\r\n        end\r\n        if parsed.port then authority = authority .. \":\" .. parsed.port end\r\n        local userinfo = parsed.userinfo\r\n        if parsed.user then\r\n            userinfo = parsed.user\r\n            if parsed.password then\r\n                userinfo = userinfo .. \":\" .. parsed.password\r\n            end\r\n        end\r\n        if userinfo then authority = userinfo .. \"@\" .. authority end\r\n    end\r\n    if authority then url = \"//\" .. authority .. url end\r\n    if parsed.scheme then url = parsed.scheme .. \":\" .. url end\r\n    if parsed.fragment then url = url .. \"#\" .. parsed.fragment end\r\n    -- url = string.gsub(url, \"%s\", \"\")\r\n    return url\r\nend",
    "type": "function"
  }, {
    "id": 215,
    "text": "function _M.absolute(base_url, relative_url)\r\n    if base.type(base_url) == \"table\" then\r\n        base_parsed = base_url\r\n        base_url = _M.build(base_parsed)\r\n    else\r\n        base_parsed = _M.parse(base_url)\r\n    end\r\n    local relative_parsed = _M.parse(relative_url)\r\n    if not base_parsed then return relative_url\r\n    elseif not relative_parsed then return base_url\r\n    elseif relative_parsed.scheme then return relative_url\r\n    else\r\n        relative_parsed.scheme = base_parsed.scheme\r\n        if not relative_parsed.authority then\r\n            relative_parsed.authority = base_parsed.authority\r\n            if not relative_parsed.path then\r\n                relative_parsed.path = base_parsed.path\r\n                if not relative_parsed.params then\r\n                    relative_parsed.params = base_parsed.params\r\n                    if not relative_parsed.query then\r\n                        relative_parsed.query = base_parsed.query\r\n                    end\r\n                end\r\n            else    \r\n                relative_parsed.path = absolute_path(base_parsed.path or \"\",\r\n                    relative_parsed.path)\r\n            end\r\n        end\r\n        return _M.build(relative_parsed)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 216,
    "text": "function _M.parse_path(path)\r\n    local parsed = {}\r\n    path = path or \"\"\r\n    --path = string.gsub(path, \"%s\", \"\")\r\n    string.gsub(path, \"([^/]+)\", function (s) table.insert(parsed, s) end)\r\n    for i = 1, #parsed do\r\n        parsed[i] = _M.unescape(parsed[i])\r\n    end\r\n    if string.sub(path, 1, 1) == \"/\" then parsed.is_absolute = 1 end\r\n    if string.sub(path, -1, -1) == \"/\" then parsed.is_directory = 1 end\r\n    return parsed\r\nend",
    "type": "function"
  }, {
    "id": 217,
    "text": "function _M.build_path(parsed, unsafe)\r\n    local path = \"\"\r\n    local n = #parsed\r\n    if unsafe then\r\n        for i = 1, n-1 do\r\n            path = path .. parsed[i]\r\n            path = path .. \"/\"\r\n        end\r\n        if n > 0 then\r\n            path = path .. parsed[n]\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end\r\n    else\r\n        for i = 1, n-1 do\r\n            path = path .. protect_segment(parsed[i])\r\n            path = path .. \"/\"\r\n        end\r\n        if n > 0 then\r\n            path = path .. protect_segment(parsed[n])\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end\r\n    end\r\n    if parsed.is_absolute then path = \"/\" .. path end\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 218,
    "text": "local function nlst(u)\r\n    local t = {}\r\n    local p = url.parse(u)\r\n    p.command = \"nlst\"\r\n    p.sink = ltn12.sink.table(t)\r\n    local r, e = ftp.get(p)\r\n    return r and table.concat(t), e\r\nend",
    "type": "function"
  }, {
    "id": 219,
    "text": "",
    "type": "function container"
  }, {
    "id": 220,
    "text": "",
    "type": "function container"
  }, {
    "id": 221,
    "text": "",
    "type": "function container"
  }, {
    "id": 222,
    "text": "local function random(handle, io_err)\r\n    if handle then\r\n        return function()\r\n            if not handle then error(\"source is empty!\", 2) end\r\n            local len = math.random(0, 1024)\r\n            local chunk = handle:read(len)\r\n            if not chunk then \r\n                handle:close() \r\n                handle = nil\r\n            end\r\n            return chunk\r\n        end\r\n    else return ltn12.source.empty(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 223,
    "text": "local function transform(input, output, filter)\r\n    local source = random(io.open(input, \"rb\"))\r\n    local sink = ltn12.sink.file(io.open(output, \"wb\"))\r\n    if what then \r\n        sink = ltn12.sink.chain(filter, sink)\r\n    else\r\n        source = ltn12.source.chain(source, filter)\r\n    end\r\n    --what = not what\r\n    ltn12.pump.all(source, sink)\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "local function encode_qptest(mode)\r\n    local encode = mime.encode(\"quoted-printable\", mode)\r\n    local split = mime.wrap(\"quoted-printable\")\r\n    local chain = ltn12.filter.chain(encode, split)\r\n    transform(qptest, eqptest, chain)\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "local function encode_b64test()\r\n    local e1 = mime.encode(\"base64\")\r\n    local e2 = mime.encode(\"base64\")\r\n    local e3 = mime.encode(\"base64\")\r\n    local e4 = mime.encode(\"base64\")\r\n    local sp4 = mime.wrap()\r\n    local sp3 = mime.wrap(59)\r\n    local sp2 = mime.wrap(\"base64\", 30)\r\n    local sp1 = mime.wrap(27)\r\n    local chain = ltn12.filter.chain(e1, sp1, e2, sp2, e3, sp3, e4, sp4)\r\n    transform(b64test, eb64test, chain)\r\nend",
    "type": "function"
  }, {
    "id": 226,
    "text": "local function decode_b64test()\r\n    local d1 = named(mime.decode(\"base64\"), \"d1\")\r\n    local d2 = named(mime.decode(\"base64\"), \"d2\")\r\n    local d3 = named(mime.decode(\"base64\"), \"d3\")\r\n    local d4 = named(mime.decode(\"base64\"), \"d4\")\r\n    local chain = named(ltn12.filter.chain(d1, d2, d3, d4), \"chain\")\r\n    transform(eb64test, db64test, chain)\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "local function identity_test()\r\nio.write(\"testing identity: \")\r\n    local chain = named(ltn12.filter.chain(\r\n        named(mime.encode(\"quoted-printable\"), \"1 eq\"),\r\n        named(mime.encode(\"base64\"), \"2 eb\"),\r\n        named(mime.decode(\"base64\"), \"3 db\"),\r\n        named(mime.decode(\"quoted-printable\"), \"4 dq\")\r\n    ), \"chain\")\r\n    transform(b64test, eb64test, chain)\r\n    compare(b64test, eb64test)\r\n    os.remove(eb64test)\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "function filter(s)\r\n    if s then io.write(s) end\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "",
    "type": "function container"
  }, {
    "id": 230,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 231,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 232,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 233,
    "text": "step",
    "type": "global function"
  }, {
    "id": 234,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 235,
    "text": "arg[index]",
    "type": "global function"
  }, {
    "id": 236,
    "text": "low",
    "type": "global function"
  }, {
    "id": 237,
    "text": "error",
    "type": "global function"
  }, {
    "id": 238,
    "text": "snk",
    "type": "global function"
  }, {
    "id": 239,
    "text": "src",
    "type": "global function"
  }, {
    "id": 240,
    "text": "select",
    "type": "global function"
  }, {
    "id": 241,
    "text": "require",
    "type": "global function"
  }, {
    "id": 242,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 243,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 244,
    "text": "(table)",
    "type": "module"
  }, {
    "id": 245,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 246,
    "text": "",
    "type": "global variable"
  }, {
    "id": 247,
    "text": "",
    "type": "global variable"
  }, {
    "id": 248,
    "text": "",
    "type": "global variable"
  }, {
    "id": 249,
    "text": "",
    "type": "global variable"
  }, {
    "id": 250,
    "text": "",
    "type": "global variable"
  }, {
    "id": 251,
    "text": "",
    "type": "global variable"
  }, {
    "id": 252,
    "text": "",
    "type": "global variable"
  }, {
    "id": 253,
    "text": "",
    "type": "global variable"
  }, {
    "id": 254,
    "text": "",
    "type": "global variable"
  }, {
    "id": 255,
    "text": "",
    "type": "global variable"
  }, {
    "id": 256,
    "text": "",
    "type": "global variable"
  }, {
    "id": 257,
    "text": "",
    "type": "global variable"
  }, {
    "id": 258,
    "text": "",
    "type": "global variable"
  }, {
    "id": 259,
    "text": "",
    "type": "global variable"
  }, {
    "id": 260,
    "text": "",
    "type": "global variable"
  }, {
    "id": 261,
    "text": "",
    "type": "global variable"
  }, {
    "id": 262,
    "text": "",
    "type": "global variable"
  }, {
    "id": 263,
    "text": "",
    "type": "global variable"
  }, {
    "id": 264,
    "text": "",
    "type": "global variable"
  }, {
    "id": 265,
    "text": "",
    "type": "global variable"
  }, {
    "id": 266,
    "text": "",
    "type": "global variable"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "variable container"
  }, {
    "id": 269,
    "text": "",
    "type": "require container"
  }, {
    "id": 270,
    "text": "",
    "type": "local variable"
  }, {
    "id": 271,
    "text": "",
    "type": "n/a"
  }, {
    "id": 272,
    "text": "",
    "type": "local variable"
  }, {
    "id": 273,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 274,
    "text": "",
    "type": "local variable"
  }, {
    "id": 275,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 276,
    "text": "",
    "type": "local variable"
  }, {
    "id": 277,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 278,
    "text": "",
    "type": "local variable"
  }, {
    "id": 279,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 280,
    "text": "",
    "type": "local variable"
  }, {
    "id": 281,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 282,
    "text": "",
    "type": "global variable"
  }, {
    "id": 283,
    "text": "",
    "type": "n/a"
  }, {
    "id": 284,
    "text": "",
    "type": "global variable"
  }, {
    "id": 285,
    "text": "",
    "type": "n/a"
  }, {
    "id": 286,
    "text": "",
    "type": "global variable"
  }, {
    "id": 287,
    "text": "",
    "type": "n/a"
  }, {
    "id": 288,
    "text": "",
    "type": "global variable"
  }, {
    "id": 289,
    "text": "",
    "type": "n/a"
  }, {
    "id": 290,
    "text": "",
    "type": "global variable"
  }, {
    "id": 291,
    "text": "",
    "type": "global variable"
  }, {
    "id": 292,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 293,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "interface container"
  }, {
    "id": 295,
    "text": "",
    "type": "interface"
  } ]
}