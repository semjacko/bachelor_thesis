{
  "_filename": "t2.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/gem/t2.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 11,
    "label": "calls",
    "to": 31
  }, {
    "from": 11,
    "label": "calls",
    "to": 31
  }, {
    "from": 11,
    "label": "calls",
    "to": 31
  }, {
    "from": 11,
    "label": "calls",
    "to": 31
  }, {
    "from": 11,
    "label": "calls",
    "to": 31
  }, {
    "from": 11,
    "label": "calls",
    "to": 31
  }, {
    "from": 11,
    "label": "calls",
    "to": 32
  }, {
    "from": 11,
    "label": "calls",
    "to": 32
  }, {
    "from": 11,
    "label": "calls",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 11
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 35
  }, {
    "from": 34,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "assigns",
    "to": 37
  }, {
    "from": 34,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  }, {
    "from": 34,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 34,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 34,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 34,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 34,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 34,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 34,
    "label": "initializes",
    "to": 52
  }, {
    "from": 35,
    "label": "initializes",
    "to": 33
  }, {
    "from": 35,
    "label": "initializes",
    "to": 33
  }, {
    "from": 35,
    "label": "initializes",
    "to": 33
  }, {
    "from": 40,
    "label": "contains",
    "to": 2
  }, {
    "from": 40,
    "label": "contains",
    "to": 3
  }, {
    "from": 42,
    "label": "contains",
    "to": 4
  }, {
    "from": 42,
    "label": "contains",
    "to": 5
  }, {
    "from": 36,
    "label": "contains",
    "to": 6
  }, {
    "from": 36,
    "label": "contains",
    "to": 7
  }, {
    "from": 36,
    "label": "contains",
    "to": 8
  }, {
    "from": 38,
    "label": "contains",
    "to": 9
  }, {
    "from": 38,
    "label": "contains",
    "to": 10
  }, {
    "from": 42,
    "label": "contains",
    "to": 12
  }, {
    "from": 42,
    "label": "contains",
    "to": 13
  }, {
    "from": 36,
    "label": "contains",
    "to": 14
  }, {
    "from": 36,
    "label": "contains",
    "to": 15
  }, {
    "from": 36,
    "label": "contains",
    "to": 16
  }, {
    "from": 36,
    "label": "contains",
    "to": 17
  }, {
    "from": 36,
    "label": "contains",
    "to": 18
  }, {
    "from": 36,
    "label": "contains",
    "to": 19
  }, {
    "from": 36,
    "label": "contains",
    "to": 20
  }, {
    "from": 36,
    "label": "contains",
    "to": 21
  }, {
    "from": 38,
    "label": "contains",
    "to": 22
  }, {
    "from": 38,
    "label": "contains",
    "to": 23
  }, {
    "from": 38,
    "label": "contains",
    "to": 24
  }, {
    "from": 38,
    "label": "contains",
    "to": 25
  }, {
    "from": 38,
    "label": "contains",
    "to": 26
  }, {
    "from": 38,
    "label": "contains",
    "to": 27
  }, {
    "from": 40,
    "label": "contains",
    "to": 28
  }, {
    "from": 40,
    "label": "contains",
    "to": 29
  }, {
    "from": 42,
    "label": "contains",
    "to": 30
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "t2",
    "type": "module"
  }, {
    "id": 2,
    "text": "function pump.step(src, snk)\r\n  local chunk, src_err = src()\r\n  local ret, snk_err = snk(chunk, src_err)\r\n  if chunk and ret then return 1\r\n  else return nil, src_err or snk_err end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function pump.all(src, snk, step)\r\n    step = step or pump.step\r\n    while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function filter.cycle(lowlevel, context, extra)\r\n  return function(chunk)\r\n    local ret\r\n    ret, context = lowlevel(context, chunk, extra)\r\n    return ret\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function filter.chain(...)\r\n  local f = select(1, ...) \r\n  for i = 2, select('#', ...) do\r\n    f = chainpair(f, select(i, ...))\r\n  end\r\n  return f\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function source.empty(err)\r\n  return function()\r\n    return nil, err\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function source.file(handle, io_err)\r\n  if handle then\r\n    return function()\r\n      local chunk = handle:read(20)\r\n      if not chunk then handle:close() end\r\n      return chunk\r\n    end\r\n  else return source.empty(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function source.chain(src, f)\r\n  return function()\r\n    if not src then\r\n      return nil\r\n    end\r\n    local chunk, err = src()\r\n    if not chunk then\r\n      src = nil\r\n      return f(nil)\r\n    else\r\n      return f(chunk)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function sink.table(t)\r\n  t = t or {}\r\n  local f = function(chunk, err)\r\n    if chunk then table.insert(t, chunk) end\r\n    return 1\r\n  end\r\n  return f, t\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function sink.null()\r\n  return null\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "function container"
  }, {
    "id": 12,
    "text": "function filter.cycle(low, ctx, extra)\r\n    base.assert(low)\r\n    return function(chunk)\r\n        local ret\r\n        ret, ctx = low(ctx, chunk, extra)\r\n        return ret\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function filter.chain(...)\r\n    local arg = {...}\r\n    local n = select('#',...)\r\n    local top, index = 1, 1\r\n    local retry = \"\"\r\n    return function(chunk)\r\n        retry = chunk and retry\r\n        while true do\r\n            if index == top then\r\n                chunk = arg[index](chunk)\r\n                if chunk == \"\" or top == n then return chunk\r\n                elseif chunk then index = index + 1\r\n                else\r\n                    top = top+1\r\n                    index = top\r\n                end\r\n            else\r\n                chunk = arg[index](chunk or \"\")\r\n                if chunk == \"\" then\r\n                    index = index - 1\r\n                    chunk = retry\r\n                elseif chunk then\r\n                    if index == n then return chunk\r\n                    else index = index + 1 end\r\n                else base.error(\"filter returned inappropriate nil\") end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function source.empty()\r\n    return empty\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function source.error(err)\r\n    return function()\r\n        return nil, err\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function source.file(handle, io_err)\r\n    if handle then\r\n        return function()\r\n            local chunk = handle:read(_M.BLOCKSIZE)\r\n            if not chunk then handle:close() end\r\n            return chunk\r\n        end\r\n    else return source.error(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "function source.simplify(src)\r\n    base.assert(src)\r\n    return function()\r\n        local chunk, err_or_new = src()\r\n        src = err_or_new or src\r\n        if not chunk then return nil, err_or_new\r\n        else return chunk end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function source.string(s)\r\n    if s then\r\n        local i = 1\r\n        return function()\r\n            local chunk = string.sub(s, i, i+_M.BLOCKSIZE-1)\r\n            i = i + _M.BLOCKSIZE\r\n            if chunk ~= \"\" then return chunk\r\n            else return nil end\r\n        end\r\n    else return source.empty() end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function source.rewind(src)\r\n    base.assert(src)\r\n    local t = {}\r\n    return function(chunk)\r\n        if not chunk then\r\n            chunk = table.remove(t)\r\n            if not chunk then return src()\r\n            else return chunk end\r\n        else\r\n            table.insert(t, chunk)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function source.chain(src, f)\r\n    base.assert(src and f)\r\n    local last_in, last_out = \"\", \"\"\r\n    local state = \"feeding\"\r\n    local err\r\n    return function()\r\n        if not last_out then\r\n            base.error('source is empty!', 2)\r\n        end\r\n        while true do\r\n            if state == \"feeding\" then\r\n                last_in, err = src()\r\n                if err then return nil, err end\r\n                last_out = f(last_in)\r\n                if not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                elseif last_out ~= \"\" then\r\n                    state = \"eating\"\r\n                    if last_in then last_in = \"\" end\r\n                    return last_out\r\n                end\r\n            else\r\n                last_out = f(last_in)\r\n                if last_out == \"\" then\r\n                    if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end\r\n                elseif not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                else\r\n                    return last_out\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function source.cat(...)\r\n    local arg = {...}\r\n    local src = table.remove(arg, 1)\r\n    return function()\r\n        while src do\r\n            local chunk, err = src()\r\n            if chunk then return chunk end\r\n            if err then return nil, err end\r\n            src = table.remove(arg, 1)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function sink.table(t)\r\n    t = t or {}\r\n    local f = function(chunk, err)\r\n        if chunk then table.insert(t, chunk) end\r\n        return 1\r\n    end\r\n    return f, t\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function sink.simplify(snk)\r\n    base.assert(snk)\r\n    return function(chunk, err)\r\n        local ret, err_or_new = snk(chunk, err)\r\n        if not ret then return nil, err_or_new end\r\n        snk = err_or_new or snk\r\n        return 1\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function sink.file(handle, io_err)\r\n    if handle then\r\n        return function(chunk, err)\r\n            if not chunk then\r\n                handle:close()\r\n                return 1\r\n            else return handle:write(chunk) end\r\n        end\r\n    else return sink.error(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function sink.null()\r\n    return null\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function sink.error(err)\r\n    return function()\r\n        return nil, err\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function sink.chain(f, snk)\r\n    base.assert(f and snk)\r\n    return function(chunk, err)\r\n        if chunk ~= \"\" then\r\n            local filtered = f(chunk)\r\n            local done = chunk and \"\"\r\n            while true do\r\n                local ret, snkerr = snk(filtered, err)\r\n                if not ret then return nil, snkerr end\r\n                if filtered == done then return 1 end\r\n                filtered = f(done)\r\n            end\r\n        else return 1 end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function pump.step(src, snk)\r\n    local chunk, src_err = src()\r\n    local ret, snk_err = snk(chunk, src_err)\r\n    if chunk and ret then return 1\r\n    else return nil, src_err or snk_err end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function pump.all(src, snk, step)\r\n    base.assert(src and snk)\r\n    step = step or pump.step\r\n    while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "function filter(s)\r\n    if s then io.write(s) end\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 32,
    "text": "require",
    "type": "global function"
  }, {
    "id": 33,
    "text": "",
    "type": "global variable"
  }, {
    "id": 34,
    "text": "",
    "type": "variable container"
  }, {
    "id": 35,
    "text": "",
    "type": "require container"
  }, {
    "id": 36,
    "text": "",
    "type": "global variable"
  }, {
    "id": 37,
    "text": "",
    "type": "n/a"
  }, {
    "id": 38,
    "text": "",
    "type": "global variable"
  }, {
    "id": 39,
    "text": "",
    "type": "n/a"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  }, {
    "id": 41,
    "text": "",
    "type": "n/a"
  }, {
    "id": 42,
    "text": "",
    "type": "global variable"
  }, {
    "id": 43,
    "text": "",
    "type": "n/a"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "global variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "global variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  } ]
}