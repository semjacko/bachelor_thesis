{
  "_filename": "lp.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/etc/lp.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 8
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 39
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 36
  }, {
    "from": 46,
    "label": "has",
    "to": 44
  }, {
    "from": 46,
    "label": "has",
    "to": 36
  }, {
    "from": 46,
    "label": "has",
    "to": 21
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 59,
    "label": "has",
    "to": 67
  }, {
    "from": 59,
    "label": "has",
    "to": 68
  }, {
    "from": 59,
    "label": "has",
    "to": 69
  }, {
    "from": 59,
    "label": "has",
    "to": 70
  }, {
    "from": 59,
    "label": "has",
    "to": 71
  }, {
    "from": 59,
    "label": "has",
    "to": 72
  }, {
    "from": 59,
    "label": "has",
    "to": 73
  }, {
    "from": 59,
    "label": "has",
    "to": 74
  }, {
    "from": 59,
    "label": "has",
    "to": 75
  }, {
    "from": 59,
    "label": "has",
    "to": 76
  }, {
    "from": 59,
    "label": "has",
    "to": 77
  }, {
    "from": 59,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 59,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 59,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 59,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 59,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 59,
    "label": "has",
    "to": 88
  }, {
    "from": 59,
    "label": "has",
    "to": 89
  }, {
    "from": 59,
    "label": "has",
    "to": 90
  }, {
    "from": 59,
    "label": "has",
    "to": 91
  }, {
    "from": 59,
    "label": "has",
    "to": 92
  }, {
    "from": 59,
    "label": "has",
    "to": 93
  }, {
    "from": 59,
    "label": "has",
    "to": 94
  }, {
    "from": 59,
    "label": "has",
    "to": 95
  }, {
    "from": 59,
    "label": "has",
    "to": 96
  }, {
    "from": 59,
    "label": "has",
    "to": 97
  }, {
    "from": 59,
    "label": "has",
    "to": 21
  }, {
    "from": 59,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 66
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 99,
    "label": "has",
    "to": 106
  }, {
    "from": 99,
    "label": "has",
    "to": 107
  }, {
    "from": 99,
    "label": "has",
    "to": 97
  }, {
    "from": 99,
    "label": "has",
    "to": 21
  }, {
    "from": 99,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "calls",
    "to": 117
  }, {
    "from": 109,
    "label": "calls",
    "to": 117
  }, {
    "from": 109,
    "label": "calls",
    "to": 38
  }, {
    "from": 109,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 124
  }, {
    "from": 2,
    "label": "calls",
    "to": 124
  }, {
    "from": 2,
    "label": "calls",
    "to": 124
  }, {
    "from": 109,
    "label": "calls",
    "to": 124
  }, {
    "from": 109,
    "label": "calls",
    "to": 124
  }, {
    "from": 109,
    "label": "calls",
    "to": 124
  }, {
    "from": 109,
    "label": "calls",
    "to": 113
  }, {
    "from": 109,
    "label": "calls",
    "to": 113
  }, {
    "from": 109,
    "label": "calls",
    "to": 113
  }, {
    "from": 109,
    "label": "calls",
    "to": 113
  }, {
    "from": 109,
    "label": "calls",
    "to": 113
  }, {
    "from": 109,
    "label": "calls",
    "to": 113
  }, {
    "from": 109,
    "label": "calls",
    "to": 113
  }, {
    "from": 109,
    "label": "calls",
    "to": 113
  }, {
    "from": 55,
    "label": "calls",
    "to": 118
  }, {
    "from": 109,
    "label": "calls",
    "to": 116
  }, {
    "from": 42,
    "label": "calls",
    "to": 27
  }, {
    "from": 46,
    "label": "calls",
    "to": 27
  }, {
    "from": 31,
    "label": "calls",
    "to": 112
  }, {
    "from": 109,
    "label": "calls",
    "to": 112
  }, {
    "from": 109,
    "label": "calls",
    "to": 112
  }, {
    "from": 109,
    "label": "calls",
    "to": 112
  }, {
    "from": 109,
    "label": "calls",
    "to": 112
  }, {
    "from": 109,
    "label": "calls",
    "to": 112
  }, {
    "from": 109,
    "label": "calls",
    "to": 110
  }, {
    "from": 31,
    "label": "calls",
    "to": 23
  }, {
    "from": 38,
    "label": "calls",
    "to": 23
  }, {
    "from": 46,
    "label": "calls",
    "to": 23
  }, {
    "from": 46,
    "label": "calls",
    "to": 23
  }, {
    "from": 109,
    "label": "calls",
    "to": 42
  }, {
    "from": 109,
    "label": "calls",
    "to": 119
  }, {
    "from": 109,
    "label": "calls",
    "to": 119
  }, {
    "from": 109,
    "label": "calls",
    "to": 119
  }, {
    "from": 109,
    "label": "calls",
    "to": 119
  }, {
    "from": 109,
    "label": "calls",
    "to": 119
  }, {
    "from": 109,
    "label": "calls",
    "to": 119
  }, {
    "from": 109,
    "label": "calls",
    "to": 119
  }, {
    "from": 31,
    "label": "calls",
    "to": 120
  }, {
    "from": 109,
    "label": "calls",
    "to": 120
  }, {
    "from": 109,
    "label": "calls",
    "to": 121
  }, {
    "from": 109,
    "label": "calls",
    "to": 127
  }, {
    "from": 109,
    "label": "calls",
    "to": 127
  }, {
    "from": 109,
    "label": "calls",
    "to": 31
  }, {
    "from": 23,
    "label": "calls",
    "to": 128
  }, {
    "from": 27,
    "label": "calls",
    "to": 128
  }, {
    "from": 31,
    "label": "calls",
    "to": 128
  }, {
    "from": 38,
    "label": "calls",
    "to": 128
  }, {
    "from": 42,
    "label": "calls",
    "to": 128
  }, {
    "from": 46,
    "label": "calls",
    "to": 128
  }, {
    "from": 46,
    "label": "calls",
    "to": 128
  }, {
    "from": 109,
    "label": "calls",
    "to": 128
  }, {
    "from": 109,
    "label": "calls",
    "to": 128
  }, {
    "from": 23,
    "label": "calls",
    "to": 114
  }, {
    "from": 27,
    "label": "calls",
    "to": 114
  }, {
    "from": 2,
    "label": "calls",
    "to": 122
  }, {
    "from": 2,
    "label": "calls",
    "to": 122
  }, {
    "from": 109,
    "label": "calls",
    "to": 46
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 2
  }, {
    "from": 109,
    "label": "calls",
    "to": 111
  }, {
    "from": 109,
    "label": "calls",
    "to": 111
  }, {
    "from": 109,
    "label": "calls",
    "to": 55
  }, {
    "from": 109,
    "label": "calls",
    "to": 125
  }, {
    "from": 55,
    "label": "calls",
    "to": 123
  }, {
    "from": 2,
    "label": "calls",
    "to": 129
  }, {
    "from": 2,
    "label": "calls",
    "to": 129
  }, {
    "from": 109,
    "label": "calls",
    "to": 130
  }, {
    "from": 109,
    "label": "calls",
    "to": 130
  }, {
    "from": 109,
    "label": "calls",
    "to": 130
  }, {
    "from": 109,
    "label": "calls",
    "to": 130
  }, {
    "from": 109,
    "label": "calls",
    "to": 130
  }, {
    "from": 109,
    "label": "calls",
    "to": 130
  }, {
    "from": 2,
    "label": "calls",
    "to": 115
  }, {
    "from": 109,
    "label": "calls",
    "to": 126
  }, {
    "from": 1,
    "label": "contains",
    "to": 109
  }, {
    "from": 109,
    "label": "declares",
    "to": 2
  }, {
    "from": 109,
    "label": "declares",
    "to": 23
  }, {
    "from": 109,
    "label": "declares",
    "to": 27
  }, {
    "from": 109,
    "label": "declares",
    "to": 31
  }, {
    "from": 109,
    "label": "declares",
    "to": 38
  }, {
    "from": 109,
    "label": "declares",
    "to": 42
  }, {
    "from": 109,
    "label": "declares",
    "to": 46
  }, {
    "from": 109,
    "label": "declares",
    "to": 55
  }, {
    "from": 109,
    "label": "declares",
    "to": 58
  }, {
    "from": 109,
    "label": "declares",
    "to": 59
  }, {
    "from": 109,
    "label": "declares",
    "to": 99
  }, {
    "from": 1,
    "label": "contains",
    "to": 134
  }, {
    "from": 1,
    "label": "contains",
    "to": 135
  }, {
    "from": 134,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 134,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 134,
    "label": "initializes",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 141,
    "label": "assigns",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 141,
    "label": "assigns",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 141,
    "label": "assigns",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 141,
    "label": "assigns",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 141,
    "label": "assigns",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 141,
    "label": "assigns",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 141,
    "label": "assigns",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 141,
    "label": "assigns",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 141,
    "label": "assigns",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 134,
    "label": "initializes",
    "to": 162
  }, {
    "from": 134,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 134,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 134,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 134,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 135,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "requires",
    "to": 172
  }, {
    "from": 135,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "requires",
    "to": 174
  }, {
    "from": 135,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "requires",
    "to": 176
  }, {
    "from": 135,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "requires",
    "to": 132
  }, {
    "from": 135,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "requires",
    "to": 133
  }, {
    "from": 135,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "requires",
    "to": 131
  }, {
    "from": 180,
    "label": "requires",
    "to": 176
  }, {
    "from": 181,
    "label": "requires",
    "to": 176
  }, {
    "from": 182,
    "label": "requires",
    "to": 172
  }, {
    "from": 183,
    "label": "requires",
    "to": 176
  }, {
    "from": 184,
    "label": "requires",
    "to": 174
  }, {
    "from": 185,
    "label": "requires",
    "to": 176
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lp",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function connect(localhost, option)\r\n    local host = option.host or SERVER\r\n    local port = option.port or PORT\r\n    local skt\r\n    local try = socket.newtry(function() if skt then skt:close() end end)\r\n    if option.localbind then\r\n        -- bind to a local port (if we can)\r\n        local localport = 721\r\n        local done, err\r\n        repeat\r\n            skt = socket.try(socket.tcp())\r\n            try(skt:settimeout(30))\r\n            done, err = skt:bind(localhost, localport)\r\n            if not done then\r\n                localport = localport + 1\r\n                skt:close()\r\n                skt = nil\r\n            else break end\r\n        until localport > 731\r\n        socket.try(skt, err)\r\n    else skt = socket.try(socket.tcp()) end\r\n    try(skt:connect(host, port))\r\n    return { skt = skt, try = try }\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local host = option.host or SERVER",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local port = option.port or PORT",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local skt",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local try = socket.newtry(function() if skt then skt:close() end end)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if skt then skt:close() end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "skt:close()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "if option.localbind then\r\n        -- bind to a local port (if we can)\r\n        local localport = 721\r\n        local done, err\r\n        repeat\r\n            skt = socket.try(socket.tcp())\r\n            try(skt:settimeout(30))\r\n            done, err = skt:bind(localhost, localport)\r\n            if not done then\r\n                localport = localport + 1\r\n                skt:close()\r\n                skt = nil\r\n            else break end\r\n        until localport > 731\r\n        socket.try(skt, err)\r\n    else skt = socket.try(socket.tcp()) end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local localport = 721",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local done, err",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "repeat\r\n            skt = socket.try(socket.tcp())\r\n            try(skt:settimeout(30))\r\n            done, err = skt:bind(localhost, localport)\r\n            if not done then\r\n                localport = localport + 1\r\n                skt:close()\r\n                skt = nil\r\n            else break end\r\n        until localport > 731",
    "type": "statement:repeat"
  }, {
    "id": 13,
    "text": "skt = socket.try(socket.tcp())",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "try(skt:settimeout(30))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "done, err = skt:bind(localhost, localport)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if not done then\r\n                localport = localport + 1\r\n                skt:close()\r\n                skt = nil\r\n            else break end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "localport = localport + 1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "skt = nil",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "socket.try(skt, err)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "try(skt:connect(host, port))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function recv_ack(con)\r\n  local ack = con.skt:receive(1)\r\n  con.try(string.char(0) == ack, \"failed to receive server acknowledgement\")\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local ack = con.skt:receive(1)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "con.try(string.char(0) == ack, \"failed to receive server acknowledgement\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function send_ack(con)\r\n  local sent = con.skt:send(string.char(0))\r\n  con.try(sent == 1, \"failed to send acknowledgement\")\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local sent = con.skt:send(string.char(0))",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "con.try(sent == 1, \"failed to send acknowledgement\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "local function send_queue(con, queue)\r\n  queue = queue or PRINTER\r\n  local str = string.format(\"\\2%s\\10\", queue)\r\n  local sent = con.skt:send(str)\r\n  con.try(sent == string.len(str), \"failed to send print request\")\r\n  recv_ack(con)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "queue = queue or PRINTER",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "local str = string.format(\"\\2%s\\10\", queue)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local sent = con.skt:send(str)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "con.try(sent == string.len(str), \"failed to send print request\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "recv_ack(con)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "local function send_hdr(con, control)\r\n  local sent = con.skt:send(control)\r\n  con.try(sent and sent >= 1 , \"failed to send header file\")\r\n  recv_ack(con)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local sent = con.skt:send(control)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "con.try(sent and sent >= 1 , \"failed to send header file\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function send_control(con, control)\r\n  local sent = con.skt:send(control)\r\n  con.try(sent and sent >= 1, \"failed to send control file\")\r\n  send_ack(con)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "con.try(sent and sent >= 1, \"failed to send control file\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "send_ack(con)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function send_data(con,fh,size)\r\n  local buf\r\n  while size > 0 do\r\n    buf,message = fh:read(8192)\r\n    if buf then\r\n      st = con.try(con.skt:send(buf))\r\n      size = size - st\r\n    else\r\n      con.try(size == 0, \"file size mismatch\")\r\n    end\r\n  end\r\n  recv_ack(con) -- note the double acknowledgement\r\n  send_ack(con)\r\n  recv_ack(con)\r\n  return size\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local buf",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "while size > 0 do\r\n    buf,message = fh:read(8192)\r\n    if buf then\r\n      st = con.try(con.skt:send(buf))\r\n      size = size - st\r\n    else\r\n      con.try(size == 0, \"file size mismatch\")\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 49,
    "text": "buf,message = fh:read(8192)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "if buf then\r\n      st = con.try(con.skt:send(buf))\r\n      size = size - st\r\n    else\r\n      con.try(size == 0, \"file size mismatch\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "st = con.try(con.skt:send(buf))",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "size = size - st",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "con.try(size == 0, \"file size mismatch\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function newjob(connection)\r\n    seq = seq + 1\r\n    return math.floor(socket.gettime() * 1000 + seq)%1000\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "seq = seq + 1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function() if skt then skt:close() end end",
    "type": "function"
  }, {
    "id": 59,
    "text": "function(option)\r\n  socket.try(option and base.type(option) == \"table\", \"invalid options\")\r\n  local file = option.file\r\n  socket.try(file, \"invalid file name\")\r\n  local fh = socket.try(io.open(file,\"rb\"))\r\n  local datafile_size = fh:seek(\"end\") -- get total size\r\n  fh:seek(\"set\")                       -- go back to start of file\r\n  local localhost = socket.dns.gethostname() or os.getenv(\"COMPUTERNAME\")\r\n    or \"localhost\"\r\n  local con = connect(localhost, option)\r\n-- format the control file\r\n  local jobno = newjob()\r\n  local localip = socket.dns.toip(localhost)\r\n  localhost = string.sub(localhost,1,31)\r\n  local user = string.sub(option.user or os.getenv(\"LPRUSER\") or\r\n    os.getenv(\"USERNAME\") or os.getenv(\"USER\") or \"anonymous\", 1,31)\r\n  local lpfile = string.format(\"dfA%3.3d%-s\", jobno, localhost);\r\n  local fmt = format_codes[option.format] or 'l'\r\n  local class = string.sub(option.class or localip or localhost,1,31)\r\n  local _,_,ctlfn = string.find(file,\".*[%/%\\\\](.*)\")\r\n  ctlfn = string.sub(ctlfn  or file,1,131)\r\n    local cfile =\r\n      string.format(\"H%-s\\nC%-s\\nJ%-s\\nP%-s\\n%.1s%-s\\nU%-s\\nN%-s\\n\",\r\n      localhost,\r\n    class,\r\n      option.job or \"LuaSocket\",\r\n    user,\r\n    fmt, lpfile,\r\n    lpfile,\r\n    ctlfn); -- mandatory part of ctl file\r\n  if (option.banner) then cfile = cfile .. 'L'..user..'\\10' end\r\n  if (option.indent) then cfile = cfile .. 'I'..base.tonumber(option.indent)..'\\10' end\r\n  if (option.mail) then cfile = cfile .. 'M'..string.sub((option.mail),1,128)..'\\10' end\r\n  if (fmt == 'p' and option.title) then cfile = cfile .. 'T'..string.sub((option.title),1,79)..'\\10' end\r\n  if ((fmt == 'p' or fmt == 'l' or fmt == 'f') and option.width) then\r\n    cfile = cfile .. 'W'..base.tonumber(option,width)..'\\10'\r\n  end\r\n\r\n  con.skt:settimeout(option.timeout or 65)\r\n-- send the queue header\r\n  send_queue(con, option.queue)\r\n-- send the control file header\r\n  local cfilecmd = string.format(\"\\2%d cfA%3.3d%-s\\n\",string.len(cfile), jobno, localhost);\r\n  send_hdr(con,cfilecmd)\r\n\r\n-- send the control file\r\n  send_control(con,cfile)\r\n\r\n-- send the data file header\r\n  local dfilecmd = string.format(\"\\3%d dfA%3.3d%-s\\n\",datafile_size, jobno, localhost);\r\n  send_hdr(con,dfilecmd)\r\n\r\n-- send the data file\r\n  send_data(con,fh,datafile_size)\r\n  fh:close()\r\n  con.skt:close();\r\n  return jobno, datafile_size\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "socket.try(option and base.type(option) == \"table\", \"invalid options\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "local file = option.file",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "socket.try(file, \"invalid file name\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "local fh = socket.try(io.open(file,\"rb\"))",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local datafile_size = fh:seek(\"end\")",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "fh:seek(\"set\")",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "local localhost = socket.dns.gethostname() or os.getenv(\"COMPUTERNAME\")\r\n    or \"localhost\"",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local con = connect(localhost, option)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local jobno = newjob()",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local localip = socket.dns.toip(localhost)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "localhost = string.sub(localhost,1,31)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "local user = string.sub(option.user or os.getenv(\"LPRUSER\") or\r\n    os.getenv(\"USERNAME\") or os.getenv(\"USER\") or \"anonymous\", 1,31)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local lpfile = string.format(\"dfA%3.3d%-s\", jobno, localhost)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local fmt = format_codes[option.format] or 'l'",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "local class = string.sub(option.class or localip or localhost,1,31)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "local _,_,ctlfn = string.find(file,\".*[%/%\\\\](.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "ctlfn = string.sub(ctlfn  or file,1,131)",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "local cfile =\r\n      string.format(\"H%-s\\nC%-s\\nJ%-s\\nP%-s\\n%.1s%-s\\nU%-s\\nN%-s\\n\",\r\n      localhost,\r\n    class,\r\n      option.job or \"LuaSocket\",\r\n    user,\r\n    fmt, lpfile,\r\n    lpfile,\r\n    ctlfn)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if (option.banner) then cfile = cfile .. 'L'..user..'\\10' end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "cfile = cfile .. 'L'..user..'\\10'",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if (option.indent) then cfile = cfile .. 'I'..base.tonumber(option.indent)..'\\10' end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "cfile = cfile .. 'I'..base.tonumber(option.indent)..'\\10'",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if (option.mail) then cfile = cfile .. 'M'..string.sub((option.mail),1,128)..'\\10' end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "cfile = cfile .. 'M'..string.sub((option.mail),1,128)..'\\10'",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "if (fmt == 'p' and option.title) then cfile = cfile .. 'T'..string.sub((option.title),1,79)..'\\10' end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "cfile = cfile .. 'T'..string.sub((option.title),1,79)..'\\10'",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "if ((fmt == 'p' or fmt == 'l' or fmt == 'f') and option.width) then\r\n    cfile = cfile .. 'W'..base.tonumber(option,width)..'\\10'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "cfile = cfile .. 'W'..base.tonumber(option,width)..'\\10'",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "con.skt:settimeout(option.timeout or 65)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "send_queue(con, option.queue)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local cfilecmd = string.format(\"\\2%d cfA%3.3d%-s\\n\",string.len(cfile), jobno, localhost)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "send_hdr(con,cfilecmd)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "send_control(con,cfile)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "local dfilecmd = string.format(\"\\3%d dfA%3.3d%-s\\n\",datafile_size, jobno, localhost)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "send_hdr(con,dfilecmd)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "send_data(con,fh,datafile_size)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "con.skt:close()",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function(p)\r\n  p = p or {}\r\n  local localhost = socket.dns.gethostname() or os.getenv(\"COMPUTERNAME\")\r\n    or \"localhost\"\r\n  local con = connect(localhost,p)\r\n  local fmt\r\n  if string.sub(p.format or 's',1,1) == 's' then fmt = 3 else fmt = 4 end\r\n  con.try(con.skt:send(string.format(\"%c%s %s\\n\", fmt, p.queue or \"*\",\r\n    p.list or \"\")))\r\n  local data = con.try(con.skt:receive(\"*a\"))\r\n  con.skt:close()\r\n  return data\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "p = p or {}",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "local con = connect(localhost,p)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "local fmt",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "if string.sub(p.format or 's',1,1) == 's' then fmt = 3 else fmt = 4 end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "fmt = 3",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "fmt = 4",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "con.try(con.skt:send(string.format(\"%c%s %s\\n\", fmt, p.queue or \"*\",\r\n    p.list or \"\")))",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "local data = con.try(con.skt:receive(\"*a\"))",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "",
    "type": "function container"
  }, {
    "id": 110,
    "text": "find",
    "type": "global function"
  }, {
    "id": 111,
    "text": "dns.gethostname",
    "type": "global function"
  }, {
    "id": 112,
    "text": "format",
    "type": "global function"
  }, {
    "id": 113,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 114,
    "text": "char",
    "type": "global function"
  }, {
    "id": 115,
    "text": "newtry",
    "type": "global function"
  }, {
    "id": 116,
    "text": "dns.toip",
    "type": "global function"
  }, {
    "id": 117,
    "text": "protect",
    "type": "global function"
  }, {
    "id": 118,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 119,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 120,
    "text": "len",
    "type": "global function"
  }, {
    "id": 121,
    "text": "open",
    "type": "global function"
  }, {
    "id": 122,
    "text": "tcp",
    "type": "global function"
  }, {
    "id": 123,
    "text": "gettime",
    "type": "global function"
  }, {
    "id": 124,
    "text": "try",
    "type": "global function"
  }, {
    "id": 125,
    "text": "module",
    "type": "global function"
  }, {
    "id": 126,
    "text": "type",
    "type": "global function"
  }, {
    "id": 127,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 128,
    "text": "try",
    "type": "global function"
  }, {
    "id": 129,
    "text": "try",
    "type": "global function"
  }, {
    "id": 130,
    "text": "require",
    "type": "global function"
  }, {
    "id": 131,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 132,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 133,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 134,
    "text": "",
    "type": "variable container"
  }, {
    "id": 135,
    "text": "",
    "type": "require container"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "n/a"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "number"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 142,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 143,
    "text": "",
    "type": "string"
  }, {
    "id": 144,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 145,
    "text": "",
    "type": "string"
  }, {
    "id": 146,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 147,
    "text": "",
    "type": "string"
  }, {
    "id": 148,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 149,
    "text": "",
    "type": "string"
  }, {
    "id": 150,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 151,
    "text": "",
    "type": "string"
  }, {
    "id": 152,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 153,
    "text": "",
    "type": "string"
  }, {
    "id": 154,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 155,
    "text": "",
    "type": "string"
  }, {
    "id": 156,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 157,
    "text": "",
    "type": "string"
  }, {
    "id": 158,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 159,
    "text": "",
    "type": "string"
  }, {
    "id": 160,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 161,
    "text": "",
    "type": "string"
  }, {
    "id": 162,
    "text": "",
    "type": "global variable"
  }, {
    "id": 163,
    "text": "",
    "type": "global variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "global variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "global variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "global variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 172,
    "text": "(io)",
    "type": "module"
  }, {
    "id": 173,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 174,
    "text": "(os)",
    "type": "module"
  }, {
    "id": 175,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 176,
    "text": "(math)",
    "type": "module"
  }, {
    "id": 177,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "require local variable"
  } ]
}