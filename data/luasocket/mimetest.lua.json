{
  "_filename": "mimetest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luasocket/test/mimetest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 9,
    "label": "has",
    "to": 17
  }, {
    "from": 8,
    "label": "has",
    "to": 17
  }, {
    "from": 8,
    "label": "has",
    "to": 17
  }, {
    "from": 8,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 17
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 21,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 43,
    "label": "has",
    "to": 52
  }, {
    "from": 43,
    "label": "has",
    "to": 53
  }, {
    "from": 43,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 17
  }, {
    "from": 54,
    "label": "has",
    "to": 17
  }, {
    "from": 43,
    "label": "has",
    "to": 58
  }, {
    "from": 43,
    "label": "has",
    "to": 59
  }, {
    "from": 43,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 17
  }, {
    "from": 43,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 43,
    "label": "has",
    "to": 51
  }, {
    "from": 43,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 43,
    "label": "has",
    "to": 51
  }, {
    "from": 43,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 43,
    "label": "has",
    "to": 51
  }, {
    "from": 43,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 43,
    "label": "has",
    "to": 51
  }, {
    "from": 43,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 43,
    "label": "has",
    "to": 51
  }, {
    "from": 43,
    "label": "has",
    "to": 76
  }, {
    "from": 43,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 83,
    "label": "has",
    "to": 76
  }, {
    "from": 83,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 91,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 91,
    "label": "has",
    "to": 99
  }, {
    "from": 91,
    "label": "has",
    "to": 100
  }, {
    "from": 91,
    "label": "has",
    "to": 101
  }, {
    "from": 91,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 101
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 113
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 125,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 125,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 135,
    "label": "has",
    "to": 139
  }, {
    "from": 135,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 133,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 143,
    "label": "has",
    "to": 148
  }, {
    "from": 143,
    "label": "has",
    "to": 149
  }, {
    "from": 143,
    "label": "has",
    "to": 150
  }, {
    "from": 143,
    "label": "has",
    "to": 151
  }, {
    "from": 143,
    "label": "has",
    "to": 152
  }, {
    "from": 143,
    "label": "has",
    "to": 153
  }, {
    "from": 143,
    "label": "has",
    "to": 154
  }, {
    "from": 143,
    "label": "has",
    "to": 155
  }, {
    "from": 143,
    "label": "has",
    "to": 156
  }, {
    "from": 143,
    "label": "has",
    "to": 157
  }, {
    "from": 143,
    "label": "has",
    "to": 158
  }, {
    "from": 143,
    "label": "has",
    "to": 159
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 160,
    "label": "has",
    "to": 162
  }, {
    "from": 160,
    "label": "has",
    "to": 163
  }, {
    "from": 160,
    "label": "has",
    "to": 164
  }, {
    "from": 160,
    "label": "has",
    "to": 165
  }, {
    "from": 160,
    "label": "has",
    "to": 166
  }, {
    "from": 160,
    "label": "has",
    "to": 167
  }, {
    "from": 160,
    "label": "has",
    "to": 166
  }, {
    "from": 160,
    "label": "has",
    "to": 168
  }, {
    "from": 160,
    "label": "has",
    "to": 164
  }, {
    "from": 160,
    "label": "has",
    "to": 169
  }, {
    "from": 160,
    "label": "has",
    "to": 166
  }, {
    "from": 160,
    "label": "has",
    "to": 170
  }, {
    "from": 160,
    "label": "has",
    "to": 166
  }, {
    "from": 160,
    "label": "has",
    "to": 171
  }, {
    "from": 160,
    "label": "has",
    "to": 172
  }, {
    "from": 160,
    "label": "has",
    "to": 173
  }, {
    "from": 160,
    "label": "has",
    "to": 174
  }, {
    "from": 160,
    "label": "has",
    "to": 158
  }, {
    "from": 160,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 176,
    "label": "has",
    "to": 12
  }, {
    "from": 176,
    "label": "has",
    "to": 13
  }, {
    "from": 176,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 176,
    "label": "has",
    "to": 17
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 178,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 178,
    "label": "has",
    "to": 17
  }, {
    "from": 178,
    "label": "has",
    "to": 17
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 61
  }, {
    "from": 180,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 180,
    "label": "has",
    "to": 17
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 29,
    "label": "calls",
    "to": 2
  }, {
    "from": 91,
    "label": "calls",
    "to": 2
  }, {
    "from": 103,
    "label": "calls",
    "to": 2
  }, {
    "from": 120,
    "label": "calls",
    "to": 2
  }, {
    "from": 83,
    "label": "calls",
    "to": 197
  }, {
    "from": 160,
    "label": "calls",
    "to": 197
  }, {
    "from": 160,
    "label": "calls",
    "to": 197
  }, {
    "from": 160,
    "label": "calls",
    "to": 197
  }, {
    "from": 160,
    "label": "calls",
    "to": 197
  }, {
    "from": 160,
    "label": "calls",
    "to": 197
  }, {
    "from": 160,
    "label": "calls",
    "to": 197
  }, {
    "from": 160,
    "label": "calls",
    "to": 197
  }, {
    "from": 43,
    "label": "calls",
    "to": 198
  }, {
    "from": 125,
    "label": "calls",
    "to": 198
  }, {
    "from": 125,
    "label": "calls",
    "to": 198
  }, {
    "from": 133,
    "label": "calls",
    "to": 198
  }, {
    "from": 182,
    "label": "calls",
    "to": 111
  }, {
    "from": 182,
    "label": "calls",
    "to": 120
  }, {
    "from": 39,
    "label": "calls",
    "to": 187
  }, {
    "from": 103,
    "label": "calls",
    "to": 187
  }, {
    "from": 103,
    "label": "calls",
    "to": 187
  }, {
    "from": 103,
    "label": "calls",
    "to": 187
  }, {
    "from": 103,
    "label": "calls",
    "to": 187
  }, {
    "from": 120,
    "label": "calls",
    "to": 187
  }, {
    "from": 120,
    "label": "calls",
    "to": 187
  }, {
    "from": 182,
    "label": "calls",
    "to": 35
  }, {
    "from": 182,
    "label": "calls",
    "to": 35
  }, {
    "from": 29,
    "label": "calls",
    "to": 190
  }, {
    "from": 91,
    "label": "calls",
    "to": 190
  }, {
    "from": 91,
    "label": "calls",
    "to": 190
  }, {
    "from": 91,
    "label": "calls",
    "to": 190
  }, {
    "from": 91,
    "label": "calls",
    "to": 190
  }, {
    "from": 120,
    "label": "calls",
    "to": 190
  }, {
    "from": 120,
    "label": "calls",
    "to": 190
  }, {
    "from": 182,
    "label": "calls",
    "to": 78
  }, {
    "from": 143,
    "label": "calls",
    "to": 204
  }, {
    "from": 160,
    "label": "calls",
    "to": 204
  }, {
    "from": 182,
    "label": "calls",
    "to": 204
  }, {
    "from": 78,
    "label": "calls",
    "to": 201
  }, {
    "from": 78,
    "label": "calls",
    "to": 201
  }, {
    "from": 78,
    "label": "calls",
    "to": 201
  }, {
    "from": 111,
    "label": "calls",
    "to": 201
  }, {
    "from": 111,
    "label": "calls",
    "to": 201
  }, {
    "from": 111,
    "label": "calls",
    "to": 201
  }, {
    "from": 120,
    "label": "calls",
    "to": 201
  }, {
    "from": 182,
    "label": "calls",
    "to": 29
  }, {
    "from": 182,
    "label": "calls",
    "to": 29
  }, {
    "from": 43,
    "label": "calls",
    "to": 186
  }, {
    "from": 43,
    "label": "calls",
    "to": 186
  }, {
    "from": 43,
    "label": "calls",
    "to": 186
  }, {
    "from": 43,
    "label": "calls",
    "to": 186
  }, {
    "from": 43,
    "label": "calls",
    "to": 186
  }, {
    "from": 83,
    "label": "calls",
    "to": 186
  }, {
    "from": 160,
    "label": "calls",
    "to": 186
  }, {
    "from": 182,
    "label": "calls",
    "to": 103
  }, {
    "from": 43,
    "label": "calls",
    "to": 185
  }, {
    "from": 43,
    "label": "calls",
    "to": 185
  }, {
    "from": 29,
    "label": "calls",
    "to": 194
  }, {
    "from": 91,
    "label": "calls",
    "to": 194
  }, {
    "from": 91,
    "label": "calls",
    "to": 194
  }, {
    "from": 91,
    "label": "calls",
    "to": 194
  }, {
    "from": 91,
    "label": "calls",
    "to": 194
  }, {
    "from": 182,
    "label": "calls",
    "to": 91
  }, {
    "from": 182,
    "label": "calls",
    "to": 43
  }, {
    "from": 103,
    "label": "calls",
    "to": 19
  }, {
    "from": 103,
    "label": "calls",
    "to": 19
  }, {
    "from": 103,
    "label": "calls",
    "to": 19
  }, {
    "from": 103,
    "label": "calls",
    "to": 19
  }, {
    "from": 103,
    "label": "calls",
    "to": 19
  }, {
    "from": 120,
    "label": "calls",
    "to": 19
  }, {
    "from": 120,
    "label": "calls",
    "to": 19
  }, {
    "from": 120,
    "label": "calls",
    "to": 19
  }, {
    "from": 120,
    "label": "calls",
    "to": 19
  }, {
    "from": 120,
    "label": "calls",
    "to": 19
  }, {
    "from": 125,
    "label": "calls",
    "to": 188
  }, {
    "from": 133,
    "label": "calls",
    "to": 188
  }, {
    "from": 133,
    "label": "calls",
    "to": 188
  }, {
    "from": 160,
    "label": "calls",
    "to": 188
  }, {
    "from": 160,
    "label": "calls",
    "to": 188
  }, {
    "from": 160,
    "label": "calls",
    "to": 188
  }, {
    "from": 160,
    "label": "calls",
    "to": 188
  }, {
    "from": 8,
    "label": "calls",
    "to": 189
  }, {
    "from": 83,
    "label": "calls",
    "to": 189
  }, {
    "from": 21,
    "label": "calls",
    "to": 193
  }, {
    "from": 21,
    "label": "calls",
    "to": 193
  }, {
    "from": 43,
    "label": "calls",
    "to": 193
  }, {
    "from": 83,
    "label": "calls",
    "to": 193
  }, {
    "from": 182,
    "label": "calls",
    "to": 184
  }, {
    "from": 8,
    "label": "calls",
    "to": 202
  }, {
    "from": 133,
    "label": "calls",
    "to": 192
  }, {
    "from": 182,
    "label": "calls",
    "to": 39
  }, {
    "from": 182,
    "label": "calls",
    "to": 39
  }, {
    "from": 182,
    "label": "calls",
    "to": 203
  }, {
    "from": 29,
    "label": "calls",
    "to": 21
  }, {
    "from": 39,
    "label": "calls",
    "to": 21
  }, {
    "from": 91,
    "label": "calls",
    "to": 21
  }, {
    "from": 103,
    "label": "calls",
    "to": 21
  }, {
    "from": 120,
    "label": "calls",
    "to": 21
  }, {
    "from": 143,
    "label": "calls",
    "to": 133
  }, {
    "from": 143,
    "label": "calls",
    "to": 133
  }, {
    "from": 143,
    "label": "calls",
    "to": 133
  }, {
    "from": 133,
    "label": "calls",
    "to": 191
  }, {
    "from": 133,
    "label": "calls",
    "to": 191
  }, {
    "from": 8,
    "label": "calls",
    "to": 3
  }, {
    "from": 21,
    "label": "calls",
    "to": 7
  }, {
    "from": 182,
    "label": "calls",
    "to": 83
  }, {
    "from": 21,
    "label": "calls",
    "to": 5
  }, {
    "from": 35,
    "label": "calls",
    "to": 196
  }, {
    "from": 116,
    "label": "calls",
    "to": 196
  }, {
    "from": 120,
    "label": "calls",
    "to": 196
  }, {
    "from": 143,
    "label": "calls",
    "to": 196
  }, {
    "from": 160,
    "label": "calls",
    "to": 196
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 143,
    "label": "calls",
    "to": 125
  }, {
    "from": 182,
    "label": "calls",
    "to": 143
  }, {
    "from": 182,
    "label": "calls",
    "to": 195
  }, {
    "from": 182,
    "label": "calls",
    "to": 195
  }, {
    "from": 182,
    "label": "calls",
    "to": 116
  }, {
    "from": 21,
    "label": "calls",
    "to": 8
  }, {
    "from": 125,
    "label": "calls",
    "to": 183
  }, {
    "from": 160,
    "label": "calls",
    "to": 183
  }, {
    "from": 160,
    "label": "calls",
    "to": 183
  }, {
    "from": 160,
    "label": "calls",
    "to": 183
  }, {
    "from": 160,
    "label": "calls",
    "to": 183
  }, {
    "from": 21,
    "label": "calls",
    "to": 6
  }, {
    "from": 21,
    "label": "calls",
    "to": 4
  }, {
    "from": 83,
    "label": "calls",
    "to": 199
  }, {
    "from": 182,
    "label": "calls",
    "to": 205
  }, {
    "from": 182,
    "label": "calls",
    "to": 205
  }, {
    "from": 182,
    "label": "calls",
    "to": 205
  }, {
    "from": 182,
    "label": "calls",
    "to": 160
  }, {
    "from": 35,
    "label": "calls",
    "to": 200
  }, {
    "from": 116,
    "label": "calls",
    "to": 200
  }, {
    "from": 120,
    "label": "calls",
    "to": 200
  }, {
    "from": 1,
    "label": "contains",
    "to": 182
  }, {
    "from": 182,
    "label": "declares",
    "to": 8
  }, {
    "from": 182,
    "label": "declares",
    "to": 19
  }, {
    "from": 182,
    "label": "declares",
    "to": 21
  }, {
    "from": 182,
    "label": "declares",
    "to": 29
  }, {
    "from": 182,
    "label": "declares",
    "to": 35
  }, {
    "from": 182,
    "label": "declares",
    "to": 39
  }, {
    "from": 182,
    "label": "declares",
    "to": 43
  }, {
    "from": 182,
    "label": "declares",
    "to": 78
  }, {
    "from": 182,
    "label": "declares",
    "to": 83
  }, {
    "from": 182,
    "label": "declares",
    "to": 91
  }, {
    "from": 182,
    "label": "declares",
    "to": 103
  }, {
    "from": 182,
    "label": "declares",
    "to": 111
  }, {
    "from": 182,
    "label": "declares",
    "to": 116
  }, {
    "from": 182,
    "label": "declares",
    "to": 120
  }, {
    "from": 182,
    "label": "declares",
    "to": 125
  }, {
    "from": 182,
    "label": "declares",
    "to": 133
  }, {
    "from": 182,
    "label": "declares",
    "to": 143
  }, {
    "from": 182,
    "label": "declares",
    "to": 160
  }, {
    "from": 182,
    "label": "declares",
    "to": 176
  }, {
    "from": 182,
    "label": "declares",
    "to": 178
  }, {
    "from": 182,
    "label": "declares",
    "to": 180
  }, {
    "from": 1,
    "label": "contains",
    "to": 209
  }, {
    "from": 1,
    "label": "contains",
    "to": 210
  }, {
    "from": 209,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 209,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 209,
    "label": "initializes",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 209,
    "label": "initializes",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 209,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 209,
    "label": "initializes",
    "to": 221
  }, {
    "from": 221,
    "label": "assigns",
    "to": 222
  }, {
    "from": 209,
    "label": "initializes",
    "to": 223
  }, {
    "from": 223,
    "label": "assigns",
    "to": 224
  }, {
    "from": 209,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 209,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 209,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 210,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "requires",
    "to": 208
  }, {
    "from": 210,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "requires",
    "to": 206
  }, {
    "from": 210,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "requires",
    "to": 207
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 178
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 180
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mimetest",
    "type": "module"
  }, {
    "id": 2,
    "text": "function filter.chain(...)\r\n    local arg = {...}\r\n    local n = select('#',...)\r\n    local top, index = 1, 1\r\n    local retry = \"\"\r\n    return function(chunk)\r\n        retry = chunk and retry\r\n        while true do\r\n            if index == top then\r\n                chunk = arg[index](chunk)\r\n                if chunk == \"\" or top == n then return chunk\r\n                elseif chunk then index = index + 1\r\n                else\r\n                    top = top+1\r\n                    index = top\r\n                end\r\n            else\r\n                chunk = arg[index](chunk or \"\")\r\n                if chunk == \"\" then\r\n                    index = index - 1\r\n                    chunk = retry\r\n                elseif chunk then\r\n                    if index == n then return chunk\r\n                    else index = index + 1 end\r\n                else base.error(\"filter returned inappropriate nil\") end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function source.empty()\r\n    return empty\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function source.chain(src, f)\r\n    base.assert(src and f)\r\n    local last_in, last_out = \"\", \"\"\r\n    local state = \"feeding\"\r\n    local err\r\n    return function()\r\n        if not last_out then\r\n            base.error('source is empty!', 2)\r\n        end\r\n        while true do\r\n            if state == \"feeding\" then\r\n                last_in, err = src()\r\n                if err then return nil, err end\r\n                last_out = f(last_in)\r\n                if not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                elseif last_out ~= \"\" then\r\n                    state = \"eating\"\r\n                    if last_in then last_in = \"\" end\r\n                    return last_out\r\n                end\r\n            else\r\n                last_out = f(last_in)\r\n                if last_out == \"\" then\r\n                    if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end\r\n                elseif not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                else\r\n                    return last_out\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function sink.file(handle, io_err)\r\n    if handle then\r\n        return function(chunk, err)\r\n            if not chunk then\r\n                handle:close()\r\n                return 1\r\n            else return handle:write(chunk) end\r\n        end\r\n    else return sink.error(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function sink.chain(f, snk)\r\n    base.assert(f and snk)\r\n    return function(chunk, err)\r\n        if chunk ~= \"\" then\r\n            local filtered = f(chunk)\r\n            local done = chunk and \"\"\r\n            while true do\r\n                local ret, snkerr = snk(filtered, err)\r\n                if not ret then return nil, snkerr end\r\n                if filtered == done then return 1 end\r\n                filtered = f(done)\r\n            end\r\n        else return 1 end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function pump.all(src, snk, step)\r\n    base.assert(src and snk)\r\n    step = step or pump.step\r\n    while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local function random(handle, io_err)\r\n    if handle then\r\n        return function()\r\n            if not handle then error(\"source is empty!\", 2) end\r\n            local len = math.random(0, 1024)\r\n            local chunk = handle:read(len)\r\n            if not chunk then \r\n                handle:close() \r\n                handle = nil\r\n            end\r\n            return chunk\r\n        end\r\n    else return ltn12.source.empty(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if handle then\r\n        return function()\r\n            if not handle then error(\"source is empty!\", 2) end\r\n            local len = math.random(0, 1024)\r\n            local chunk = handle:read(len)\r\n            if not chunk then \r\n                handle:close() \r\n                handle = nil\r\n            end\r\n            return chunk\r\n        end\r\n    else return ltn12.source.empty(io_err or \"unable to open file\") end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "if not handle then error(\"source is empty!\", 2) end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "error(\"source is empty!\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "local len = math.random(0, 1024)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local chunk = handle:read(len)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if not chunk then \r\n                handle:close() \r\n                handle = nil\r\n            end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "handle:close()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "handle = nil",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function named(f)\r\n    return f\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function transform(input, output, filter)\r\n    local source = random(io.open(input, \"rb\"))\r\n    local sink = ltn12.sink.file(io.open(output, \"wb\"))\r\n    if what then \r\n        sink = ltn12.sink.chain(filter, sink)\r\n    else\r\n        source = ltn12.source.chain(source, filter)\r\n    end\r\n    --what = not what\r\n    ltn12.pump.all(source, sink)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local source = random(io.open(input, \"rb\"))",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local sink = ltn12.sink.file(io.open(output, \"wb\"))",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if what then \r\n        sink = ltn12.sink.chain(filter, sink)\r\n    else\r\n        source = ltn12.source.chain(source, filter)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "sink = ltn12.sink.chain(filter, sink)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "source = ltn12.source.chain(source, filter)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "ltn12.pump.all(source, sink)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function encode_qptest(mode)\r\n    local encode = mime.encode(\"quoted-printable\", mode)\r\n    local split = mime.wrap(\"quoted-printable\")\r\n    local chain = ltn12.filter.chain(encode, split)\r\n    transform(qptest, eqptest, chain)\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local encode = mime.encode(\"quoted-printable\", mode)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local split = mime.wrap(\"quoted-printable\")",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local chain = ltn12.filter.chain(encode, split)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "transform(qptest, eqptest, chain)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "local function compare_qptest()\r\nio.write(\"testing qp encoding and wrap: \")\r\n    compare(qptest, dqptest)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "io.write(\"testing qp encoding and wrap: \")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "compare(qptest, dqptest)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function decode_qptest()\r\n    local decode = mime.decode(\"quoted-printable\")\r\n    transform(eqptest, dqptest, decode)\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local decode = mime.decode(\"quoted-printable\")",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "transform(eqptest, dqptest, decode)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function create_qptest()\r\n    local f, err = io.open(qptest, \"wb\")\r\n    if not f then fail(err) end\r\n    -- try all characters\r\n    for i = 0, 255 do\r\n        f:write(string.char(i))\r\n    end\r\n    -- try all characters and different line sizes\r\n    for i = 0, 255 do\r\n        for j = 0, i do\r\n            f:write(string.char(i))\r\n        end\r\n        f:write(\"\\r\\n\")\r\n    end\r\n    -- test latin text\r\n    f:write(mao)\r\n    -- force soft line breaks and treatment of space/tab in end of line\r\n    local tab\r\n    f:write(string.gsub(mao, \"(%s)\", function(c)\r\n        if tab then\r\n            tab = nil\r\n            return \"\\t\"\r\n        else\r\n            tab = 1\r\n            return \" \"\r\n        end\r\n    end))\r\n    -- test crazy end of line conventions\r\n    local eol = { \"\\r\\n\", \"\\r\", \"\\n\", \"\\n\\r\" }\r\n    local which = 0\r\n    f:write(string.gsub(mao, \"(\\n)\", function(c)\r\n        which = which + 1\r\n        if which > 4 then which = 1 end\r\n        return eol[which]\r\n    end))\r\n    for i = 1, 4 do\r\n        for j = 1, 4 do\r\n            f:write(eol[i])\r\n            f:write(eol[j])\r\n        end\r\n    end\r\n    -- try long spaced and tabbed lines\r\n    f:write(\"\\r\\n\")\r\n    for i = 0, 255 do\r\n        f:write(string.char(9))\r\n    end\r\n    f:write(\"\\r\\n\")\r\n    for i = 0, 255 do\r\n        f:write(' ')\r\n    end\r\n    f:write(\"\\r\\n\")\r\n    for i = 0, 255 do\r\n        f:write(string.char(9),' ')\r\n    end\r\n    f:write(\"\\r\\n\")\r\n    for i = 0, 255 do\r\n        f:write(' ',string.char(32))\r\n    end\r\n    f:write(\"\\r\\n\")\r\n    \r\n    f:close()\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local f, err = io.open(qptest, \"wb\")",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if not f then fail(err) end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "fail(err)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "for i = 0, 255 do\r\n        f:write(string.char(i))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 48,
    "text": "f:write(string.char(i))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "for i = 0, 255 do\r\n        for j = 0, i do\r\n            f:write(string.char(i))\r\n        end\r\n        f:write(\"\\r\\n\")\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 50,
    "text": "for j = 0, i do\r\n            f:write(string.char(i))\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 51,
    "text": "f:write(\"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "f:write(mao)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local tab",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "f:write(string.gsub(mao, \"(%s)\", function(c)\r\n        if tab then\r\n            tab = nil\r\n            return \"\\t\"\r\n        else\r\n            tab = 1\r\n            return \" \"\r\n        end\r\n    end))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "if tab then\r\n            tab = nil\r\n            return \"\\t\"\r\n        else\r\n            tab = 1\r\n            return \" \"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "tab = nil",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "tab = 1",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "local eol = { \"\\r\\n\", \"\\r\", \"\\n\", \"\\n\\r\" }",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local which = 0",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "f:write(string.gsub(mao, \"(\\n)\", function(c)\r\n        which = which + 1\r\n        if which > 4 then which = 1 end\r\n        return eol[which]\r\n    end))",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "which = which + 1",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if which > 4 then which = 1 end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "which = 1",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "for i = 1, 4 do\r\n        for j = 1, 4 do\r\n            f:write(eol[i])\r\n            f:write(eol[j])\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 65,
    "text": "for j = 1, 4 do\r\n            f:write(eol[i])\r\n            f:write(eol[j])\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 66,
    "text": "f:write(eol[i])",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "f:write(eol[j])",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "for i = 0, 255 do\r\n        f:write(string.char(9))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 69,
    "text": "f:write(string.char(9))",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "for i = 0, 255 do\r\n        f:write(' ')\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 71,
    "text": "f:write(' ')",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "for i = 0, 255 do\r\n        f:write(string.char(9),' ')\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 73,
    "text": "f:write(string.char(9),' ')",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "for i = 0, 255 do\r\n        f:write(' ',string.char(32))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 75,
    "text": "f:write(' ',string.char(32))",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "local function cleanup_qptest()\r\n    os.remove(qptest)\r\n    os.remove(eqptest)\r\n    os.remove(dqptest)\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "os.remove(qptest)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "os.remove(eqptest)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "os.remove(dqptest)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "local function create_b64test()\r\n    local f = assert(io.open(b64test, \"wb\"))\r\n    local t = {}\r\n    for j = 1, 100 do\r\n        for i = 1, 100 do\r\n            t[i] = math.random(0, 255)\r\n        end\r\n        f:write(string.char(unpack(t)))\r\n    end\r\n    f:close()\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "local f = assert(io.open(b64test, \"wb\"))",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "for j = 1, 100 do\r\n        for i = 1, 100 do\r\n            t[i] = math.random(0, 255)\r\n        end\r\n        f:write(string.char(unpack(t)))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 87,
    "text": "for i = 1, 100 do\r\n            t[i] = math.random(0, 255)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 88,
    "text": "t[i] = math.random(0, 255)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "f:write(string.char(unpack(t)))",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "local function encode_b64test()\r\n    local e1 = mime.encode(\"base64\")\r\n    local e2 = mime.encode(\"base64\")\r\n    local e3 = mime.encode(\"base64\")\r\n    local e4 = mime.encode(\"base64\")\r\n    local sp4 = mime.wrap()\r\n    local sp3 = mime.wrap(59)\r\n    local sp2 = mime.wrap(\"base64\", 30)\r\n    local sp1 = mime.wrap(27)\r\n    local chain = ltn12.filter.chain(e1, sp1, e2, sp2, e3, sp3, e4, sp4)\r\n    transform(b64test, eb64test, chain)\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "local e1 = mime.encode(\"base64\")",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local e2 = mime.encode(\"base64\")",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local e3 = mime.encode(\"base64\")",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local e4 = mime.encode(\"base64\")",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "local sp4 = mime.wrap()",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "local sp3 = mime.wrap(59)",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local sp2 = mime.wrap(\"base64\", 30)",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "local sp1 = mime.wrap(27)",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "local chain = ltn12.filter.chain(e1, sp1, e2, sp2, e3, sp3, e4, sp4)",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "transform(b64test, eb64test, chain)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "local function decode_b64test()\r\n    local d1 = named(mime.decode(\"base64\"), \"d1\")\r\n    local d2 = named(mime.decode(\"base64\"), \"d2\")\r\n    local d3 = named(mime.decode(\"base64\"), \"d3\")\r\n    local d4 = named(mime.decode(\"base64\"), \"d4\")\r\n    local chain = named(ltn12.filter.chain(d1, d2, d3, d4), \"chain\")\r\n    transform(eb64test, db64test, chain)\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local d1 = named(mime.decode(\"base64\"), \"d1\")",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local d2 = named(mime.decode(\"base64\"), \"d2\")",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local d3 = named(mime.decode(\"base64\"), \"d3\")",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "local d4 = named(mime.decode(\"base64\"), \"d4\")",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local chain = named(ltn12.filter.chain(d1, d2, d3, d4), \"chain\")",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "transform(eb64test, db64test, chain)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "local function cleanup_b64test()\r\n    os.remove(b64test)\r\n    os.remove(eb64test)\r\n    os.remove(db64test)\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "os.remove(b64test)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "os.remove(eb64test)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "os.remove(db64test)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "local function compare_b64test()\r\nio.write(\"testing b64 chained encode: \")\r\n    compare(b64test, db64test)\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "io.write(\"testing b64 chained encode: \")",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "compare(b64test, db64test)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "local function identity_test()\r\nio.write(\"testing identity: \")\r\n    local chain = named(ltn12.filter.chain(\r\n        named(mime.encode(\"quoted-printable\"), \"1 eq\"),\r\n        named(mime.encode(\"base64\"), \"2 eb\"),\r\n        named(mime.decode(\"base64\"), \"3 db\"),\r\n        named(mime.decode(\"quoted-printable\"), \"4 dq\")\r\n    ), \"chain\")\r\n    transform(b64test, eb64test, chain)\r\n    compare(b64test, eb64test)\r\n    os.remove(eb64test)\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "io.write(\"testing identity: \")",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "local chain = named(ltn12.filter.chain(\r\n        named(mime.encode(\"quoted-printable\"), \"1 eq\"),\r\n        named(mime.encode(\"base64\"), \"2 eb\"),\r\n        named(mime.decode(\"base64\"), \"3 db\"),\r\n        named(mime.decode(\"quoted-printable\"), \"4 dq\")\r\n    ), \"chain\")",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "compare(b64test, eb64test)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "local function padcheck(original, encoded)\r\n    local e = (mime.b64(original))\r\n    local d = (mime.unb64(encoded))\r\n    if e ~= encoded then fail(\"encoding failed\") end\r\n    if d ~= original then fail(\"decoding failed\") end\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local e = (mime.b64(original))",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local d = (mime.unb64(encoded))",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "if e ~= encoded then fail(\"encoding failed\") end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "fail(\"encoding failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "if d ~= original then fail(\"decoding failed\") end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "fail(\"decoding failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "local function chunkcheck(original, encoded)\r\n    local len = string.len(original)\r\n    for i = 0, len do\r\n        local a = string.sub(original, 1, i)\r\n        local b = string.sub(original, i+1)\r\n        local e, r = mime.b64(a, b)\r\n        local f = (mime.b64(r))\r\n        if (e .. (f or \"\") ~= encoded) then fail(e .. (f or \"\")) end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "local len = string.len(original)",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "for i = 0, len do\r\n        local a = string.sub(original, 1, i)\r\n        local b = string.sub(original, i+1)\r\n        local e, r = mime.b64(a, b)\r\n        local f = (mime.b64(r))\r\n        if (e .. (f or \"\") ~= encoded) then fail(e .. (f or \"\")) end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 136,
    "text": "local a = string.sub(original, 1, i)",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local b = string.sub(original, i+1)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "local e, r = mime.b64(a, b)",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "local f = (mime.b64(r))",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "if (e .. (f or \"\") ~= encoded) then fail(e .. (f or \"\")) end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "fail(e .. (f or \"\"))",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "local function padding_b64test()\r\nio.write(\"testing b64 padding: \")\r\n    padcheck(\"a\", \"YQ==\")\r\n    padcheck(\"ab\", \"YWI=\")\r\n    padcheck(\"abc\", \"YWJj\")\r\n    padcheck(\"abcd\", \"YWJjZA==\")\r\n    padcheck(\"abcde\", \"YWJjZGU=\")\r\n    padcheck(\"abcdef\", \"YWJjZGVm\")\r\n    padcheck(\"abcdefg\", \"YWJjZGVmZw==\")\r\n    padcheck(\"abcdefgh\", \"YWJjZGVmZ2g=\")\r\n    padcheck(\"abcdefghi\", \"YWJjZGVmZ2hp\")\r\n    padcheck(\"abcdefghij\", \"YWJjZGVmZ2hpag==\")\r\n    chunkcheck(\"abcdefgh\", \"YWJjZGVmZ2g=\")\r\n    chunkcheck(\"abcdefghi\", \"YWJjZGVmZ2hp\")\r\n    chunkcheck(\"abcdefghij\", \"YWJjZGVmZ2hpag==\")\r\n    print(\"ok\")\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "io.write(\"testing b64 padding: \")",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "padcheck(\"a\", \"YQ==\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "padcheck(\"ab\", \"YWI=\")",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "padcheck(\"abc\", \"YWJj\")",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "padcheck(\"abcd\", \"YWJjZA==\")",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "padcheck(\"abcde\", \"YWJjZGU=\")",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "padcheck(\"abcdef\", \"YWJjZGVm\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "padcheck(\"abcdefg\", \"YWJjZGVmZw==\")",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "padcheck(\"abcdefgh\", \"YWJjZGVmZ2g=\")",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "padcheck(\"abcdefghi\", \"YWJjZGVmZ2hp\")",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "padcheck(\"abcdefghij\", \"YWJjZGVmZ2hpag==\")",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "chunkcheck(\"abcdefgh\", \"YWJjZGVmZ2g=\")",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "chunkcheck(\"abcdefghi\", \"YWJjZGVmZ2hp\")",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "chunkcheck(\"abcdefghij\", \"YWJjZGVmZ2hpag==\")",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "print(\"ok\")",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 160,
    "text": "local function test_b64lowlevel()\r\nio.write(\"testing b64 low-level: \")\r\n    local a, b\r\n    a, b = mime.b64(\"\", \"\")\r\n    assert(a == \"\" and b == \"\")\r\n    a, b = mime.b64(nil, \"blablabla\")\r\n    assert(a == nil and b == nil)\r\n    a, b = mime.b64(\"\", nil)\r\n    assert(a == nil and b == nil)\r\n    a, b = mime.unb64(\"\", \"\")\r\n    assert(a == \"\" and b == \"\")\r\n    a, b = mime.unb64(nil, \"blablabla\")\r\n    assert(a == nil and b == nil)\r\n    a, b = mime.unb64(\"\", nil)\r\n    assert(a == nil and b == nil)\r\n    local binary=string.char(0x00,0x44,0x1D,0x14,0x0F,0xF4,0xDA,0x11,0xA9,0x78,0x00,0x14,0x38,0x50,0x60,0xCE)\r\n    local encoded = mime.b64(binary)\r\n    local decoded=mime.unb64(encoded)\r\n    assert(binary == decoded)\r\n    print(\"ok\")\r\nend",
    "type": "function"
  }, {
    "id": 161,
    "text": "io.write(\"testing b64 low-level: \")",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "local a, b",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "a, b = mime.b64(\"\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "assert(a == \"\" and b == \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "a, b = mime.b64(nil, \"blablabla\")",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "assert(a == nil and b == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "a, b = mime.b64(\"\", nil)",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "a, b = mime.unb64(\"\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "a, b = mime.unb64(nil, \"blablabla\")",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "a, b = mime.unb64(\"\", nil)",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "local binary=string.char(0x00,0x44,0x1D,0x14,0x0F,0xF4,0xDA,0x11,0xA9,0x78,0x00,0x14,0x38,0x50,0x60,0xCE)",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "local encoded = mime.b64(binary)",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "local decoded=mime.unb64(encoded)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "assert(binary == decoded)",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function()\r\n            if not handle then error(\"source is empty!\", 2) end\r\n            local len = math.random(0, 1024)\r\n            local chunk = handle:read(len)\r\n            if not chunk then \r\n                handle:close() \r\n                handle = nil\r\n            end\r\n            return chunk\r\n        end",
    "type": "function"
  }, {
    "id": 177,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 178,
    "text": "function(c)\r\n        if tab then\r\n            tab = nil\r\n            return \"\\t\"\r\n        else\r\n            tab = 1\r\n            return \" \"\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function(c)\r\n        which = which + 1\r\n        if which > 4 then which = 1 end\r\n        return eol[which]\r\n    end",
    "type": "function"
  }, {
    "id": 181,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 182,
    "text": "",
    "type": "function container"
  }, {
    "id": 183,
    "text": "unb64",
    "type": "global function"
  }, {
    "id": 184,
    "text": "format",
    "type": "global function"
  }, {
    "id": 185,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 186,
    "text": "char",
    "type": "global function"
  }, {
    "id": 187,
    "text": "decode",
    "type": "global function"
  }, {
    "id": 188,
    "text": "b64",
    "type": "global function"
  }, {
    "id": 189,
    "text": "random",
    "type": "global function"
  }, {
    "id": 190,
    "text": "encode",
    "type": "global function"
  }, {
    "id": 191,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 192,
    "text": "len",
    "type": "global function"
  }, {
    "id": 193,
    "text": "open",
    "type": "global function"
  }, {
    "id": 194,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 195,
    "text": "gettime",
    "type": "global function"
  }, {
    "id": 196,
    "text": "write",
    "type": "global function"
  }, {
    "id": 197,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 198,
    "text": "fail",
    "type": "global function"
  }, {
    "id": 199,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 200,
    "text": "compare",
    "type": "global function"
  }, {
    "id": 201,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 202,
    "text": "error",
    "type": "global function"
  }, {
    "id": 203,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 204,
    "text": "print",
    "type": "global function"
  }, {
    "id": 205,
    "text": "require",
    "type": "global function"
  }, {
    "id": 206,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 207,
    "text": "(mime)",
    "type": "module"
  }, {
    "id": 208,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 209,
    "text": "",
    "type": "variable container"
  }, {
    "id": 210,
    "text": "",
    "type": "require container"
  }, {
    "id": 211,
    "text": "",
    "type": "local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "n/a"
  }, {
    "id": 213,
    "text": "",
    "type": "local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "string"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "string"
  }, {
    "id": 217,
    "text": "",
    "type": "local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "string"
  }, {
    "id": 219,
    "text": "",
    "type": "local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "string"
  }, {
    "id": 221,
    "text": "",
    "type": "local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "string"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "string"
  }, {
    "id": 225,
    "text": "",
    "type": "local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "string"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "keyword"
  }, {
    "id": 229,
    "text": "",
    "type": "local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "require local variable"
  } ]
}