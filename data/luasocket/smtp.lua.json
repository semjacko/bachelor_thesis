{
  "_filename": "smtp.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/src/smtp.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 7
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 7
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 7
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 17
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 17
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 7
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 7
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 7
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 7
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 69,
    "label": "has",
    "to": 81
  }, {
    "from": 69,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 71
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 74
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 85,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 71
  }, {
    "from": 93,
    "label": "has",
    "to": 86
  }, {
    "from": 93,
    "label": "has",
    "to": 74
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 102,
    "label": "has",
    "to": 7
  }, {
    "from": 102,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 108,
    "label": "has",
    "to": 7
  }, {
    "from": 108,
    "label": "has",
    "to": 112
  }, {
    "from": 108,
    "label": "has",
    "to": 113
  }, {
    "from": 108,
    "label": "has",
    "to": 7
  }, {
    "from": 108,
    "label": "has",
    "to": 7
  }, {
    "from": 108,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 52
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 111
  }, {
    "from": 118,
    "label": "has",
    "to": 112
  }, {
    "from": 118,
    "label": "has",
    "to": 113
  }, {
    "from": 118,
    "label": "has",
    "to": 7
  }, {
    "from": 118,
    "label": "has",
    "to": 7
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 120,
    "label": "has",
    "to": 125
  }, {
    "from": 120,
    "label": "has",
    "to": 7
  }, {
    "from": 120,
    "label": "has",
    "to": 126
  }, {
    "from": 59,
    "label": "calls",
    "to": 133
  }, {
    "from": 108,
    "label": "calls",
    "to": 134
  }, {
    "from": 48,
    "label": "calls",
    "to": 144
  }, {
    "from": 127,
    "label": "calls",
    "to": 135
  }, {
    "from": 69,
    "label": "calls",
    "to": 96
  }, {
    "from": 108,
    "label": "calls",
    "to": 96
  }, {
    "from": 69,
    "label": "calls",
    "to": 59
  }, {
    "from": 35,
    "label": "calls",
    "to": 128
  }, {
    "from": 35,
    "label": "calls",
    "to": 128
  }, {
    "from": 4,
    "label": "calls",
    "to": 139
  }, {
    "from": 54,
    "label": "calls",
    "to": 131
  }, {
    "from": 96,
    "label": "calls",
    "to": 69
  }, {
    "from": 69,
    "label": "calls",
    "to": 54
  }, {
    "from": 85,
    "label": "calls",
    "to": 54
  }, {
    "from": 93,
    "label": "calls",
    "to": 54
  }, {
    "from": 102,
    "label": "calls",
    "to": 54
  }, {
    "from": 85,
    "label": "calls",
    "to": 145
  }, {
    "from": 127,
    "label": "calls",
    "to": 141
  }, {
    "from": 48,
    "label": "calls",
    "to": 143
  }, {
    "from": 62,
    "label": "calls",
    "to": 136
  }, {
    "from": 69,
    "label": "calls",
    "to": 136
  }, {
    "from": 69,
    "label": "calls",
    "to": 136
  }, {
    "from": 69,
    "label": "calls",
    "to": 136
  }, {
    "from": 69,
    "label": "calls",
    "to": 136
  }, {
    "from": 69,
    "label": "calls",
    "to": 136
  }, {
    "from": 69,
    "label": "calls",
    "to": 136
  }, {
    "from": 85,
    "label": "calls",
    "to": 136
  }, {
    "from": 85,
    "label": "calls",
    "to": 136
  }, {
    "from": 93,
    "label": "calls",
    "to": 136
  }, {
    "from": 59,
    "label": "calls",
    "to": 132
  }, {
    "from": 102,
    "label": "calls",
    "to": 132
  }, {
    "from": 40,
    "label": "calls",
    "to": 130
  }, {
    "from": 48,
    "label": "calls",
    "to": 142
  }, {
    "from": 4,
    "label": "calls",
    "to": 149
  }, {
    "from": 4,
    "label": "calls",
    "to": 149
  }, {
    "from": 4,
    "label": "calls",
    "to": 149
  }, {
    "from": 9,
    "label": "calls",
    "to": 149
  }, {
    "from": 9,
    "label": "calls",
    "to": 149
  }, {
    "from": 12,
    "label": "calls",
    "to": 149
  }, {
    "from": 12,
    "label": "calls",
    "to": 149
  }, {
    "from": 15,
    "label": "calls",
    "to": 149
  }, {
    "from": 15,
    "label": "calls",
    "to": 149
  }, {
    "from": 15,
    "label": "calls",
    "to": 149
  }, {
    "from": 15,
    "label": "calls",
    "to": 149
  }, {
    "from": 15,
    "label": "calls",
    "to": 149
  }, {
    "from": 21,
    "label": "calls",
    "to": 149
  }, {
    "from": 21,
    "label": "calls",
    "to": 149
  }, {
    "from": 26,
    "label": "calls",
    "to": 149
  }, {
    "from": 26,
    "label": "calls",
    "to": 149
  }, {
    "from": 26,
    "label": "calls",
    "to": 149
  }, {
    "from": 26,
    "label": "calls",
    "to": 149
  }, {
    "from": 26,
    "label": "calls",
    "to": 149
  }, {
    "from": 26,
    "label": "calls",
    "to": 149
  }, {
    "from": 31,
    "label": "calls",
    "to": 149
  }, {
    "from": 31,
    "label": "calls",
    "to": 149
  }, {
    "from": 35,
    "label": "calls",
    "to": 149
  }, {
    "from": 40,
    "label": "calls",
    "to": 146
  }, {
    "from": 96,
    "label": "calls",
    "to": 146
  }, {
    "from": 96,
    "label": "calls",
    "to": 146
  }, {
    "from": 96,
    "label": "calls",
    "to": 85
  }, {
    "from": 108,
    "label": "calls",
    "to": 129
  }, {
    "from": 54,
    "label": "calls",
    "to": 147
  }, {
    "from": 62,
    "label": "calls",
    "to": 147
  }, {
    "from": 59,
    "label": "calls",
    "to": 140
  }, {
    "from": 127,
    "label": "calls",
    "to": 48
  }, {
    "from": 69,
    "label": "calls",
    "to": 62
  }, {
    "from": 85,
    "label": "calls",
    "to": 62
  }, {
    "from": 93,
    "label": "calls",
    "to": 62
  }, {
    "from": 96,
    "label": "calls",
    "to": 93
  }, {
    "from": 108,
    "label": "calls",
    "to": 102
  }, {
    "from": 40,
    "label": "calls",
    "to": 3
  }, {
    "from": 26,
    "label": "calls",
    "to": 138
  }, {
    "from": 26,
    "label": "calls",
    "to": 138
  }, {
    "from": 31,
    "label": "calls",
    "to": 138
  }, {
    "from": 127,
    "label": "calls",
    "to": 150
  }, {
    "from": 127,
    "label": "calls",
    "to": 150
  }, {
    "from": 127,
    "label": "calls",
    "to": 150
  }, {
    "from": 127,
    "label": "calls",
    "to": 150
  }, {
    "from": 127,
    "label": "calls",
    "to": 150
  }, {
    "from": 127,
    "label": "calls",
    "to": 150
  }, {
    "from": 127,
    "label": "calls",
    "to": 150
  }, {
    "from": 127,
    "label": "calls",
    "to": 150
  }, {
    "from": 127,
    "label": "calls",
    "to": 150
  }, {
    "from": 48,
    "label": "calls",
    "to": 137
  }, {
    "from": 40,
    "label": "calls",
    "to": 148
  }, {
    "from": 69,
    "label": "calls",
    "to": 148
  }, {
    "from": 1,
    "label": "contains",
    "to": 127
  }, {
    "from": 127,
    "label": "declares",
    "to": 4
  }, {
    "from": 127,
    "label": "declares",
    "to": 9
  }, {
    "from": 127,
    "label": "declares",
    "to": 12
  }, {
    "from": 127,
    "label": "declares",
    "to": 15
  }, {
    "from": 127,
    "label": "declares",
    "to": 21
  }, {
    "from": 127,
    "label": "declares",
    "to": 24
  }, {
    "from": 127,
    "label": "declares",
    "to": 26
  }, {
    "from": 127,
    "label": "declares",
    "to": 31
  }, {
    "from": 127,
    "label": "declares",
    "to": 35
  }, {
    "from": 127,
    "label": "declares",
    "to": 40
  }, {
    "from": 127,
    "label": "declares",
    "to": 48
  }, {
    "from": 127,
    "label": "declares",
    "to": 54
  }, {
    "from": 127,
    "label": "declares",
    "to": 59
  }, {
    "from": 127,
    "label": "declares",
    "to": 62
  }, {
    "from": 127,
    "label": "declares",
    "to": 69
  }, {
    "from": 127,
    "label": "declares",
    "to": 85
  }, {
    "from": 127,
    "label": "declares",
    "to": 93
  }, {
    "from": 127,
    "label": "declares",
    "to": 96
  }, {
    "from": 127,
    "label": "declares",
    "to": 102
  }, {
    "from": 127,
    "label": "declares",
    "to": 108
  }, {
    "from": 127,
    "label": "declares",
    "to": 115
  }, {
    "from": 127,
    "label": "declares",
    "to": 117
  }, {
    "from": 127,
    "label": "declares",
    "to": 118
  }, {
    "from": 127,
    "label": "declares",
    "to": 120
  }, {
    "from": 159,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 164
  }, {
    "from": 1,
    "label": "contains",
    "to": 165
  }, {
    "from": 164,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "assigns",
    "to": 167
  }, {
    "from": 164,
    "label": "initializes",
    "to": 168
  }, {
    "from": 168,
    "label": "assigns",
    "to": 169
  }, {
    "from": 164,
    "label": "initializes",
    "to": 170
  }, {
    "from": 170,
    "label": "assigns",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 172,
    "label": "assigns",
    "to": 173
  }, {
    "from": 164,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 164,
    "label": "initializes",
    "to": 176
  }, {
    "from": 164,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 164,
    "label": "initializes",
    "to": 179
  }, {
    "from": 164,
    "label": "initializes",
    "to": 180
  }, {
    "from": 164,
    "label": "initializes",
    "to": 181
  }, {
    "from": 164,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 164,
    "label": "initializes",
    "to": 184
  }, {
    "from": 164,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 165,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "requires",
    "to": 156
  }, {
    "from": 165,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "requires",
    "to": 153
  }, {
    "from": 165,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "requires",
    "to": 158
  }, {
    "from": 165,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "requires",
    "to": 157
  }, {
    "from": 165,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "requires",
    "to": 154
  }, {
    "from": 165,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "requires",
    "to": 155
  }, {
    "from": 165,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "requires",
    "to": 151
  }, {
    "from": 165,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "requires",
    "to": 161
  }, {
    "from": 165,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "requires",
    "to": 152
  }, {
    "from": 1,
    "label": "provides",
    "to": 196
  }, {
    "from": 160,
    "label": "represents",
    "to": 197
  }, {
    "from": 196,
    "label": "provides",
    "to": 197
  }, {
    "from": 172,
    "label": "contains",
    "to": 2
  }, {
    "from": 162,
    "label": "contains",
    "to": 48
  }, {
    "from": 163,
    "label": "contains",
    "to": 48
  }, {
    "from": 162,
    "label": "contains",
    "to": 108
  }, {
    "from": 163,
    "label": "contains",
    "to": 108
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "smtp",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(table, key)\r\n        table[key] = function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end\r\n        return table[key]\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function source.chain(src, f)\r\n    base.assert(src and f)\r\n    local last_in, last_out = \"\", \"\"\r\n    local state = \"feeding\"\r\n    local err\r\n    return function()\r\n        if not last_out then\r\n            base.error('source is empty!', 2)\r\n        end\r\n        while true do\r\n            if state == \"feeding\" then\r\n                last_in, err = src()\r\n                if err then return nil, err end\r\n                last_out = f(last_in)\r\n                if not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                elseif last_out ~= \"\" then\r\n                    state = \"eating\"\r\n                    if last_in then last_in = \"\" end\r\n                    return last_out\r\n                end\r\n            else\r\n                last_out = f(last_in)\r\n                if last_out == \"\" then\r\n                    if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end\r\n                elseif not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                else\r\n                    return last_out\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function metat.__index:greet(domain)\r\n    self.try(self.tp:check(\"2..\"))\r\n    self.try(self.tp:command(\"EHLO\", domain or _M.DOMAIN))\r\n    return socket.skip(1, self.try(self.tp:check(\"2..\")))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "self.try(self.tp:check(\"2..\"))",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "self.try(self.tp:command(\"EHLO\", domain or _M.DOMAIN))",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function metat.__index:mail(from)\r\n    self.try(self.tp:command(\"MAIL\", \"FROM:\" .. from))\r\n    return self.try(self.tp:check(\"2..\"))\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "self.try(self.tp:command(\"MAIL\", \"FROM:\" .. from))",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function metat.__index:rcpt(to)\r\n    self.try(self.tp:command(\"RCPT\", \"TO:\" .. to))\r\n    return self.try(self.tp:check(\"2..\"))\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "self.try(self.tp:command(\"RCPT\", \"TO:\" .. to))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function metat.__index:data(src, step)\r\n    self.try(self.tp:command(\"DATA\"))\r\n    self.try(self.tp:check(\"3..\"))\r\n    self.try(self.tp:source(src, step))\r\n    self.try(self.tp:send(\"\\r\\n.\\r\\n\"))\r\n    return self.try(self.tp:check(\"2..\"))\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "self.try(self.tp:command(\"DATA\"))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "self.try(self.tp:check(\"3..\"))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "self.try(self.tp:source(src, step))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "self.try(self.tp:send(\"\\r\\n.\\r\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function metat.__index:quit()\r\n    self.try(self.tp:command(\"QUIT\"))\r\n    return self.try(self.tp:check(\"2..\"))\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "self.try(self.tp:command(\"QUIT\"))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function metat.__index:close()\r\n    return self.tp:close()\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function metat.__index:login(user, password)\r\n    self.try(self.tp:command(\"AUTH\", \"LOGIN\"))\r\n    self.try(self.tp:check(\"3..\"))\r\n    self.try(self.tp:send(mime.b64(user) .. \"\\r\\n\"))\r\n    self.try(self.tp:check(\"3..\"))\r\n    self.try(self.tp:send(mime.b64(password) .. \"\\r\\n\"))\r\n    return self.try(self.tp:check(\"2..\"))\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "self.try(self.tp:command(\"AUTH\", \"LOGIN\"))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "self.try(self.tp:send(mime.b64(user) .. \"\\r\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "self.try(self.tp:send(mime.b64(password) .. \"\\r\\n\"))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function metat.__index:plain(user, password)\r\n    local auth = \"PLAIN \" .. mime.b64(\"\\0\" .. user .. \"\\0\" .. password)\r\n    self.try(self.tp:command(\"AUTH\", auth))\r\n    return self.try(self.tp:check(\"2..\"))\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local auth = \"PLAIN \" .. mime.b64(\"\\0\" .. user .. \"\\0\" .. password)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "self.try(self.tp:command(\"AUTH\", auth))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function metat.__index:auth(user, password, ext)\r\n    if not user or not password then return 1 end\r\n    if string.find(ext, \"AUTH[^\\n]+LOGIN\") then\r\n        return self:login(user, password)\r\n    elseif string.find(ext, \"AUTH[^\\n]+PLAIN\") then\r\n        return self:plain(user, password)\r\n    else\r\n        self.try(nil, \"authentication not supported\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "if not user or not password then return 1 end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "if string.find(ext, \"AUTH[^\\n]+LOGIN\") then\r\n        return self:login(user, password)\r\n    elseif string.find(ext, \"AUTH[^\\n]+PLAIN\") then\r\n        return self:plain(user, password)\r\n    else\r\n        self.try(nil, \"authentication not supported\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "self.try(nil, \"authentication not supported\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function metat.__index:send(mailt)\r\n    self:mail(mailt.from)\r\n    if base.type(mailt.rcpt) == \"table\" then\r\n        for i,v in base.ipairs(mailt.rcpt) do\r\n            self:rcpt(v)\r\n        end\r\n    else\r\n        self:rcpt(mailt.rcpt)\r\n    end\r\n    self:data(ltn12.source.chain(mailt.source, mime.stuff()), mailt.step)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "self:mail(mailt.from)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "if base.type(mailt.rcpt) == \"table\" then\r\n        for i,v in base.ipairs(mailt.rcpt) do\r\n            self:rcpt(v)\r\n        end\r\n    else\r\n        self:rcpt(mailt.rcpt)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "for i,v in base.ipairs(mailt.rcpt) do\r\n            self:rcpt(v)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "self:rcpt(v)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "self:rcpt(mailt.rcpt)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "self:data(ltn12.source.chain(mailt.source, mime.stuff()), mailt.step)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function _M.open(server, port, create)\r\n    local tp = socket.try(tp.connect(server or _M.SERVER, port or _M.PORT,\r\n        _M.TIMEOUT, create))\r\n    local s = base.setmetatable({tp = tp}, metat)\r\n    -- make sure tp is closed if we get an exception\r\n    s.try = socket.newtry(function()\r\n        s:close()\r\n    end)\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local tp = socket.try(tp.connect(server or _M.SERVER, port or _M.PORT,\r\n        _M.TIMEOUT, create))",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local s = base.setmetatable({tp = tp}, metat)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "s.try = socket.newtry(function()\r\n        s:close()\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "s:close()",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function lower_headers(headers)\r\n    local lower = {}\r\n    for i,v in base.pairs(headers or lower) do\r\n        lower[string.lower(i)] = v\r\n    end\r\n    return lower\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local lower = {}",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "for i,v in base.pairs(headers or lower) do\r\n        lower[string.lower(i)] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 57,
    "text": "lower[string.lower(i)] = v",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "local function newboundary()\r\n    seqno = seqno + 1\r\n    return string.format('%s%05d==%05u', os.date('%d%m%Y%H%M%S'),\r\n        math.random(0, 99999), seqno)\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "seqno = seqno + 1",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "local function send_headers(tosend)\r\n    local canonic = headers.canonic\r\n    local h = \"\\r\\n\"\r\n    for f,v in base.pairs(tosend) do\r\n        h = (canonic[f] or f) .. ': ' .. v .. \"\\r\\n\" .. h\r\n    end\r\n    coroutine.yield(h)\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local canonic = headers.canonic",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local h = \"\\r\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "for f,v in base.pairs(tosend) do\r\n        h = (canonic[f] or f) .. ': ' .. v .. \"\\r\\n\" .. h\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 66,
    "text": "h = (canonic[f] or f) .. ': ' .. v .. \"\\r\\n\" .. h",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "coroutine.yield(h)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "local function send_multipart(mesgt)\r\n    -- make sure we have our boundary and send headers\r\n    local bd = newboundary()\r\n    local headers = lower_headers(mesgt.headers or {})\r\n    headers['content-type'] = headers['content-type'] or 'multipart/mixed'\r\n    headers['content-type'] = headers['content-type'] ..\r\n        '; boundary=\"' ..  bd .. '\"'\r\n    send_headers(headers)\r\n    -- send preamble\r\n    if mesgt.body.preamble then\r\n        coroutine.yield(mesgt.body.preamble)\r\n        coroutine.yield(\"\\r\\n\")\r\n    end\r\n    -- send each part separated by a boundary\r\n    for i, m in base.ipairs(mesgt.body) do\r\n        coroutine.yield(\"\\r\\n--\" .. bd .. \"\\r\\n\")\r\n        send_message(m)\r\n    end\r\n    -- send last boundary\r\n    coroutine.yield(\"\\r\\n--\" .. bd .. \"--\\r\\n\\r\\n\")\r\n    -- send epilogue\r\n    if mesgt.body.epilogue then\r\n        coroutine.yield(mesgt.body.epilogue)\r\n        coroutine.yield(\"\\r\\n\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local bd = newboundary()",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local headers = lower_headers(mesgt.headers or {})",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "headers['content-type'] = headers['content-type'] or 'multipart/mixed'",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "headers['content-type'] = headers['content-type'] ..\r\n        '; boundary=\"' ..  bd .. '\"'",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "send_headers(headers)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "if mesgt.body.preamble then\r\n        coroutine.yield(mesgt.body.preamble)\r\n        coroutine.yield(\"\\r\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "coroutine.yield(mesgt.body.preamble)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "coroutine.yield(\"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "for i, m in base.ipairs(mesgt.body) do\r\n        coroutine.yield(\"\\r\\n--\" .. bd .. \"\\r\\n\")\r\n        send_message(m)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 79,
    "text": "coroutine.yield(\"\\r\\n--\" .. bd .. \"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "send_message(m)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "coroutine.yield(\"\\r\\n--\" .. bd .. \"--\\r\\n\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "if mesgt.body.epilogue then\r\n        coroutine.yield(mesgt.body.epilogue)\r\n        coroutine.yield(\"\\r\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "coroutine.yield(mesgt.body.epilogue)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "local function send_source(mesgt)\r\n    -- make sure we have a content-type\r\n    local headers = lower_headers(mesgt.headers or {})\r\n    headers['content-type'] = headers['content-type'] or\r\n        'text/plain; charset=\"iso-8859-1\"'\r\n    send_headers(headers)\r\n    -- send body from source\r\n    while true do\r\n        local chunk, err = mesgt.body()\r\n        if err then coroutine.yield(nil, err)\r\n        elseif chunk then coroutine.yield(chunk)\r\n        else break end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "headers['content-type'] = headers['content-type'] or\r\n        'text/plain; charset=\"iso-8859-1\"'",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "while true do\r\n        local chunk, err = mesgt.body()\r\n        if err then coroutine.yield(nil, err)\r\n        elseif chunk then coroutine.yield(chunk)\r\n        else break end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 88,
    "text": "local chunk, err = mesgt.body()",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "if err then coroutine.yield(nil, err)\r\n        elseif chunk then coroutine.yield(chunk)\r\n        else break end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "coroutine.yield(nil, err)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "coroutine.yield(chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "local function send_string(mesgt)\r\n    -- make sure we have a content-type\r\n    local headers = lower_headers(mesgt.headers or {})\r\n    headers['content-type'] = headers['content-type'] or\r\n        'text/plain; charset=\"iso-8859-1\"'\r\n    send_headers(headers)\r\n    -- send body from string\r\n    coroutine.yield(mesgt.body)\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "coroutine.yield(mesgt.body)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function send_message(mesgt)\r\n    if base.type(mesgt.body) == \"table\" then send_multipart(mesgt)\r\n    elseif base.type(mesgt.body) == \"function\" then send_source(mesgt)\r\n    else send_string(mesgt) end\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "if base.type(mesgt.body) == \"table\" then send_multipart(mesgt)\r\n    elseif base.type(mesgt.body) == \"function\" then send_source(mesgt)\r\n    else send_string(mesgt) end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "send_multipart(mesgt)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "send_source(mesgt)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "send_string(mesgt)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "local function adjust_headers(mesgt)\r\n    local lower = lower_headers(mesgt.headers)\r\n    lower[\"date\"] = lower[\"date\"] or\r\n        os.date(\"!%a, %d %b %Y %H:%M:%S \") .. (mesgt.zone or _M.ZONE)\r\n    lower[\"x-mailer\"] = lower[\"x-mailer\"] or socket._VERSION\r\n    -- this can't be overriden\r\n    lower[\"mime-version\"] = \"1.0\"\r\n    return lower\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local lower = lower_headers(mesgt.headers)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "lower[\"date\"] = lower[\"date\"] or\r\n        os.date(\"!%a, %d %b %Y %H:%M:%S \") .. (mesgt.zone or _M.ZONE)",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "lower[\"x-mailer\"] = lower[\"x-mailer\"] or socket._VERSION",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "lower[\"mime-version\"] = \"1.0\"",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function _M.message(mesgt)\r\n    mesgt.headers = adjust_headers(mesgt)\r\n    -- create and return message source\r\n    local co = coroutine.create(function() send_message(mesgt) end)\r\n    return function()\r\n        local ret, a, b = coroutine.resume(co)\r\n        if ret then return a, b\r\n        else return nil, a end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "mesgt.headers = adjust_headers(mesgt)",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "local co = coroutine.create(function() send_message(mesgt) end)",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "send_message(mesgt)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "local ret, a, b = coroutine.resume(co)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if ret then return a, b\r\n        else return nil, a end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function()\r\n        s:close()\r\n    end",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function() send_message(mesgt) end",
    "type": "function"
  }, {
    "id": 118,
    "text": "function()\r\n        local ret, a, b = coroutine.resume(co)\r\n        if ret then return a, b\r\n        else return nil, a end\r\n    end",
    "type": "function"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function(mailt)\r\n    local s = _M.open(mailt.server, mailt.port, mailt.create)\r\n    local ext = s:greet(mailt.domain)\r\n    s:auth(mailt.user, mailt.password, ext)\r\n    s:send(mailt)\r\n    s:quit()\r\n    return s:close()\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "local s = _M.open(mailt.server, mailt.port, mailt.create)",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local ext = s:greet(mailt.domain)",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "s:auth(mailt.user, mailt.password, ext)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "s:send(mailt)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "s:quit()",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "",
    "type": "function container"
  }, {
    "id": 128,
    "text": "find",
    "type": "global function"
  }, {
    "id": 129,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 130,
    "text": "stuff",
    "type": "global function"
  }, {
    "id": 131,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 132,
    "text": "date",
    "type": "global function"
  }, {
    "id": 133,
    "text": "format",
    "type": "global function"
  }, {
    "id": 134,
    "text": "create",
    "type": "global function"
  }, {
    "id": 135,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 136,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 137,
    "text": "newtry",
    "type": "global function"
  }, {
    "id": 138,
    "text": "b64",
    "type": "global function"
  }, {
    "id": 139,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 140,
    "text": "random",
    "type": "global function"
  }, {
    "id": 141,
    "text": "protect",
    "type": "global function"
  }, {
    "id": 142,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 143,
    "text": "try",
    "type": "global function"
  }, {
    "id": 144,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 145,
    "text": "body",
    "type": "global function"
  }, {
    "id": 146,
    "text": "type",
    "type": "global function"
  }, {
    "id": 147,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 148,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 149,
    "text": "try",
    "type": "global function"
  }, {
    "id": 150,
    "text": "require",
    "type": "global function"
  }, {
    "id": 151,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 152,
    "text": "(mime)",
    "type": "module"
  }, {
    "id": 153,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 154,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 155,
    "text": "tp)",
    "type": "module"
  }, {
    "id": 156,
    "text": "(coroutine)",
    "type": "module"
  }, {
    "id": 157,
    "text": "(os)",
    "type": "module"
  }, {
    "id": 158,
    "text": "(math)",
    "type": "module"
  }, {
    "id": 159,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "local variable"
  }, {
    "id": 161,
    "text": "headers)",
    "type": "module"
  }, {
    "id": 162,
    "text": "",
    "type": "local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "variable container"
  }, {
    "id": 165,
    "text": "",
    "type": "require container"
  }, {
    "id": 166,
    "text": "",
    "type": "local variable"
  }, {
    "id": 167,
    "text": "",
    "type": "n/a"
  }, {
    "id": 168,
    "text": "",
    "type": "local variable"
  }, {
    "id": 169,
    "text": "",
    "type": "n/a"
  }, {
    "id": 170,
    "text": "",
    "type": "local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 172,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 173,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 174,
    "text": "",
    "type": "local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "number"
  }, {
    "id": 176,
    "text": "",
    "type": "local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "global variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "global variable"
  }, {
    "id": 180,
    "text": "",
    "type": "global variable"
  }, {
    "id": 181,
    "text": "",
    "type": "global variable"
  }, {
    "id": 182,
    "text": "",
    "type": "global variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "global variable"
  }, {
    "id": 185,
    "text": "",
    "type": "global variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "interface container"
  }, {
    "id": 197,
    "text": "",
    "type": "interface"
  } ]
}