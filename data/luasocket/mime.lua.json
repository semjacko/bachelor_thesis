{
  "_filename": "mime.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/src/mime.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 4
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 4
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 4
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 4
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 7
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 32,
    "label": "has",
    "to": 4
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 46
  }, {
    "from": 34,
    "label": "calls",
    "to": 2
  }, {
    "from": 34,
    "label": "calls",
    "to": 2
  }, {
    "from": 34,
    "label": "calls",
    "to": 2
  }, {
    "from": 34,
    "label": "calls",
    "to": 2
  }, {
    "from": 34,
    "label": "calls",
    "to": 2
  }, {
    "from": 34,
    "label": "calls",
    "to": 2
  }, {
    "from": 28,
    "label": "calls",
    "to": 2
  }, {
    "from": 30,
    "label": "calls",
    "to": 2
  }, {
    "from": 3,
    "label": "calls",
    "to": 48
  }, {
    "from": 19,
    "label": "calls",
    "to": 43
  }, {
    "from": 34,
    "label": "calls",
    "to": 49
  }, {
    "from": 34,
    "label": "calls",
    "to": 49
  }, {
    "from": 34,
    "label": "calls",
    "to": 49
  }, {
    "from": 34,
    "label": "calls",
    "to": 49
  }, {
    "from": 3,
    "label": "calls",
    "to": 47
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 34,
    "label": "calls",
    "to": 3
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "declares",
    "to": 3
  }, {
    "from": 34,
    "label": "declares",
    "to": 11
  }, {
    "from": 34,
    "label": "declares",
    "to": 13
  }, {
    "from": 34,
    "label": "declares",
    "to": 15
  }, {
    "from": 34,
    "label": "declares",
    "to": 17
  }, {
    "from": 34,
    "label": "declares",
    "to": 19
  }, {
    "from": 34,
    "label": "declares",
    "to": 23
  }, {
    "from": 34,
    "label": "declares",
    "to": 26
  }, {
    "from": 34,
    "label": "declares",
    "to": 28
  }, {
    "from": 34,
    "label": "declares",
    "to": 30
  }, {
    "from": 34,
    "label": "declares",
    "to": 32
  }, {
    "from": 1,
    "label": "declares",
    "to": 35
  }, {
    "from": 1,
    "label": "declares",
    "to": 36
  }, {
    "from": 1,
    "label": "declares",
    "to": 37
  }, {
    "from": 1,
    "label": "declares",
    "to": 38
  }, {
    "from": 1,
    "label": "declares",
    "to": 39
  }, {
    "from": 1,
    "label": "declares",
    "to": 40
  }, {
    "from": 1,
    "label": "declares",
    "to": 41
  }, {
    "from": 1,
    "label": "declares",
    "to": 42
  }, {
    "from": 1,
    "label": "declares",
    "to": 44
  }, {
    "from": 53,
    "label": "requires",
    "to": 1
  }, {
    "from": 54,
    "label": "requires",
    "to": 1
  }, {
    "from": 54,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 58,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 58,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 58,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 58,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 58,
    "label": "initializes",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 58,
    "label": "initializes",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 58,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 58,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 58,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 58,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 58,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 58,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 58,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 58,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 58,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 58,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 58,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 58,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 58,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 59,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 50
  }, {
    "from": 59,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 100
  }, {
    "from": 59,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "requires",
    "to": 52
  }, {
    "from": 59,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "requires",
    "to": 51
  }, {
    "from": 1,
    "label": "provides",
    "to": 103
  }, {
    "from": 55,
    "label": "represents",
    "to": 104
  }, {
    "from": 103,
    "label": "provides",
    "to": 104
  }, {
    "from": 105,
    "label": "requires",
    "to": 100
  }, {
    "from": 106,
    "label": "requires",
    "to": 1
  }, {
    "from": 56,
    "label": "contains",
    "to": 28
  }, {
    "from": 57,
    "label": "contains",
    "to": 28
  }, {
    "from": 56,
    "label": "contains",
    "to": 30
  }, {
    "from": 57,
    "label": "contains",
    "to": 30
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mime",
    "type": "module"
  }, {
    "id": 2,
    "text": "function filter.cycle(low, ctx, extra)\r\n    base.assert(low)\r\n    return function(chunk)\r\n        local ret\r\n        ret, ctx = low(ctx, chunk, extra)\r\n        return ret\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function choose(table)\r\n    return function(name, opt1, opt2)\r\n        if base.type(name) ~= \"string\" then\r\n            name, opt1, opt2 = \"default\", name, opt1\r\n        end\r\n        local f = table[name or \"nil\"]\r\n        if not f then \r\n            base.error(\"unknown key (\" .. base.tostring(name) .. \")\", 3)\r\n        else return f(opt1, opt2) end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "if base.type(name) ~= \"string\" then\r\n            name, opt1, opt2 = \"default\", name, opt1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "name, opt1, opt2 = \"default\", name, opt1",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "local f = table[name or \"nil\"]",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not f then \r\n            base.error(\"unknown key (\" .. base.tostring(name) .. \")\", 3)\r\n        else return f(opt1, opt2) end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "base.error(\"unknown key (\" .. base.tostring(name) .. \")\", 3)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function()\r\n    return ltn12.filter.cycle(_M.b64, \"\")\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function(mode)\r\n    return ltn12.filter.cycle(_M.qp, \"\",\r\n        (mode == \"binary\") and \"=0D=0A\" or \"\\r\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function()\r\n    return ltn12.filter.cycle(_M.unb64, \"\")\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n    return ltn12.filter.cycle(_M.unqp, \"\")\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function format(chunk)\r\n    if chunk then\r\n        if chunk == \"\" then return \"''\"\r\n        else return string.len(chunk) end\r\n    else return \"nil\" end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "if chunk then\r\n        if chunk == \"\" then return \"''\"\r\n        else return string.len(chunk) end\r\n    else return \"nil\" end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "if chunk == \"\" then return \"''\"\r\n        else return string.len(chunk) end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function(length)\r\n    length = length or 76\r\n    return ltn12.filter.cycle(_M.wrp, length, length)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "length = length or 76",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n    return ltn12.filter.cycle(_M.qpwrp, 76, 76)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function _M.normalize(marker)\r\n    return ltn12.filter.cycle(_M.eol, 0, marker)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function _M.stuff()\r\n    return ltn12.filter.cycle(_M.dot, 2)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(name, opt1, opt2)\r\n        if base.type(name) ~= \"string\" then\r\n            name, opt1, opt2 = \"default\", name, opt1\r\n        end\r\n        local f = table[name or \"nil\"]\r\n        if not f then \r\n            base.error(\"unknown key (\" .. base.tostring(name) .. \")\", 3)\r\n        else return f(opt1, opt2) end\r\n    end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "",
    "type": "function container"
  }, {
    "id": 35,
    "text": "dot",
    "type": "global function"
  }, {
    "id": 36,
    "text": "stuff",
    "type": "global function"
  }, {
    "id": 37,
    "text": "unb64",
    "type": "global function"
  }, {
    "id": 38,
    "text": "decode",
    "type": "global function"
  }, {
    "id": 39,
    "text": "b64",
    "type": "global function"
  }, {
    "id": 40,
    "text": "encode",
    "type": "global function"
  }, {
    "id": 41,
    "text": "normalize",
    "type": "global function"
  }, {
    "id": 42,
    "text": "eol",
    "type": "global function"
  }, {
    "id": 43,
    "text": "len",
    "type": "global function"
  }, {
    "id": 44,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 45,
    "text": "type",
    "type": "global function"
  }, {
    "id": 46,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 47,
    "text": "error",
    "type": "global function"
  }, {
    "id": 48,
    "text": "f",
    "type": "global function"
  }, {
    "id": 49,
    "text": "require",
    "type": "global function"
  }, {
    "id": 50,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 51,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 52,
    "text": "(io)",
    "type": "module"
  }, {
    "id": 53,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "global variable"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "variable container"
  }, {
    "id": 59,
    "text": "",
    "type": "require container"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "n/a"
  }, {
    "id": 72,
    "text": "",
    "type": "global variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "global variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "global variable"
  }, {
    "id": 77,
    "text": "",
    "type": "n/a"
  }, {
    "id": 78,
    "text": "",
    "type": "global variable"
  }, {
    "id": 79,
    "text": "",
    "type": "n/a"
  }, {
    "id": 80,
    "text": "",
    "type": "global variable"
  }, {
    "id": 81,
    "text": "",
    "type": "n/a"
  }, {
    "id": 82,
    "text": "",
    "type": "global variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "global variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "global variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "global variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "global variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "global variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "global variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "core)",
    "type": "module"
  }, {
    "id": 101,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "interface container"
  }, {
    "id": 104,
    "text": "",
    "type": "interface"
  }, {
    "id": 105,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "require local variable"
  } ]
}