{
  "_filename": "dispatch.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/etc/dispatch.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 5
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 11,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 22,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 5
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 36,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 5
  }, {
    "from": 54,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 51
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 61,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 58
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 5
  }, {
    "from": 66,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 5
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 48
  }, {
    "from": 81,
    "label": "has",
    "to": 49
  }, {
    "from": 81,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 81,
    "label": "has",
    "to": 5
  }, {
    "from": 81,
    "label": "has",
    "to": 5
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 55
  }, {
    "from": 83,
    "label": "has",
    "to": 56
  }, {
    "from": 83,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 83,
    "label": "has",
    "to": 5
  }, {
    "from": 83,
    "label": "has",
    "to": 5
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 62
  }, {
    "from": 85,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 51
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 85,
    "label": "has",
    "to": 5
  }, {
    "from": 85,
    "label": "has",
    "to": 5
  }, {
    "from": 85,
    "label": "has",
    "to": 5
  }, {
    "from": 85,
    "label": "has",
    "to": 5
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 58
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 5
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 71
  }, {
    "from": 89,
    "label": "has",
    "to": 72
  }, {
    "from": 89,
    "label": "has",
    "to": 73
  }, {
    "from": 89,
    "label": "has",
    "to": 74
  }, {
    "from": 89,
    "label": "has",
    "to": 75
  }, {
    "from": 89,
    "label": "has",
    "to": 5
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 91,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 104
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 106
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 112,
    "label": "has",
    "to": 118
  }, {
    "from": 112,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 112,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 5
  }, {
    "from": 128,
    "label": "has",
    "to": 5
  }, {
    "from": 128,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 5
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 12
  }, {
    "from": 135,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 135,
    "label": "has",
    "to": 5
  }, {
    "from": 135,
    "label": "has",
    "to": 5
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 28
  }, {
    "from": 139,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 5
  }, {
    "from": 141,
    "label": "has",
    "to": 5
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 11,
    "label": "calls",
    "to": 147
  }, {
    "from": 124,
    "label": "calls",
    "to": 147
  }, {
    "from": 22,
    "label": "calls",
    "to": 154
  }, {
    "from": 36,
    "label": "calls",
    "to": 154
  }, {
    "from": 128,
    "label": "calls",
    "to": 154
  }, {
    "from": 11,
    "label": "calls",
    "to": 145
  }, {
    "from": 103,
    "label": "calls",
    "to": 145
  }, {
    "from": 108,
    "label": "calls",
    "to": 145
  }, {
    "from": 124,
    "label": "calls",
    "to": 145
  }, {
    "from": 112,
    "label": "calls",
    "to": 103
  }, {
    "from": 112,
    "label": "calls",
    "to": 103
  }, {
    "from": 36,
    "label": "calls",
    "to": 36
  }, {
    "from": 128,
    "label": "calls",
    "to": 36
  }, {
    "from": 112,
    "label": "calls",
    "to": 161
  }, {
    "from": 112,
    "label": "calls",
    "to": 161
  }, {
    "from": 11,
    "label": "calls",
    "to": 146
  }, {
    "from": 103,
    "label": "calls",
    "to": 99
  }, {
    "from": 108,
    "label": "calls",
    "to": 99
  }, {
    "from": 11,
    "label": "calls",
    "to": 163
  }, {
    "from": 91,
    "label": "calls",
    "to": 163
  }, {
    "from": 128,
    "label": "calls",
    "to": 151
  }, {
    "from": 36,
    "label": "calls",
    "to": 164
  }, {
    "from": 7,
    "label": "calls",
    "to": 155
  }, {
    "from": 11,
    "label": "calls",
    "to": 159
  }, {
    "from": 11,
    "label": "calls",
    "to": 156
  }, {
    "from": 11,
    "label": "calls",
    "to": 156
  }, {
    "from": 36,
    "label": "calls",
    "to": 162
  }, {
    "from": 22,
    "label": "calls",
    "to": 150
  }, {
    "from": 112,
    "label": "calls",
    "to": 160
  }, {
    "from": 112,
    "label": "calls",
    "to": 152
  }, {
    "from": 91,
    "label": "calls",
    "to": 153
  }, {
    "from": 112,
    "label": "calls",
    "to": 153
  }, {
    "from": 11,
    "label": "calls",
    "to": 149
  }, {
    "from": 22,
    "label": "calls",
    "to": 149
  }, {
    "from": 11,
    "label": "calls",
    "to": 148
  }, {
    "from": 36,
    "label": "calls",
    "to": 148
  }, {
    "from": 36,
    "label": "calls",
    "to": 148
  }, {
    "from": 36,
    "label": "calls",
    "to": 148
  }, {
    "from": 36,
    "label": "calls",
    "to": 148
  }, {
    "from": 143,
    "label": "calls",
    "to": 157
  }, {
    "from": 128,
    "label": "calls",
    "to": 22
  }, {
    "from": 128,
    "label": "calls",
    "to": 22
  }, {
    "from": 3,
    "label": "calls",
    "to": 158
  }, {
    "from": 143,
    "label": "calls",
    "to": 165
  }, {
    "from": 143,
    "label": "calls",
    "to": 165
  }, {
    "from": 143,
    "label": "calls",
    "to": 165
  }, {
    "from": 112,
    "label": "calls",
    "to": 91
  }, {
    "from": 112,
    "label": "calls",
    "to": 91
  }, {
    "from": 124,
    "label": "calls",
    "to": 91
  }, {
    "from": 112,
    "label": "calls",
    "to": 108
  }, {
    "from": 112,
    "label": "calls",
    "to": 108
  }, {
    "from": 1,
    "label": "contains",
    "to": 143
  }, {
    "from": 143,
    "label": "declares",
    "to": 3
  }, {
    "from": 143,
    "label": "declares",
    "to": 7
  }, {
    "from": 143,
    "label": "declares",
    "to": 9
  }, {
    "from": 143,
    "label": "declares",
    "to": 11
  }, {
    "from": 143,
    "label": "declares",
    "to": 22
  }, {
    "from": 143,
    "label": "declares",
    "to": 36
  }, {
    "from": 143,
    "label": "declares",
    "to": 77
  }, {
    "from": 143,
    "label": "declares",
    "to": 79
  }, {
    "from": 143,
    "label": "declares",
    "to": 81
  }, {
    "from": 143,
    "label": "declares",
    "to": 83
  }, {
    "from": 143,
    "label": "declares",
    "to": 85
  }, {
    "from": 143,
    "label": "declares",
    "to": 87
  }, {
    "from": 143,
    "label": "declares",
    "to": 89
  }, {
    "from": 143,
    "label": "declares",
    "to": 91
  }, {
    "from": 143,
    "label": "declares",
    "to": 99
  }, {
    "from": 143,
    "label": "declares",
    "to": 103
  }, {
    "from": 143,
    "label": "declares",
    "to": 108
  }, {
    "from": 143,
    "label": "declares",
    "to": 112
  }, {
    "from": 143,
    "label": "declares",
    "to": 124
  }, {
    "from": 143,
    "label": "declares",
    "to": 128
  }, {
    "from": 143,
    "label": "declares",
    "to": 133
  }, {
    "from": 143,
    "label": "declares",
    "to": 135
  }, {
    "from": 143,
    "label": "declares",
    "to": 137
  }, {
    "from": 143,
    "label": "declares",
    "to": 139
  }, {
    "from": 143,
    "label": "declares",
    "to": 141
  }, {
    "from": 144,
    "label": "calls",
    "to": 3
  }, {
    "from": 1,
    "label": "contains",
    "to": 169
  }, {
    "from": 1,
    "label": "contains",
    "to": 170
  }, {
    "from": 169,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 169,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 169,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 169,
    "label": "initializes",
    "to": 179
  }, {
    "from": 170,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "requires",
    "to": 167
  }, {
    "from": 170,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "requires",
    "to": 168
  }, {
    "from": 170,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "requires",
    "to": 183
  }, {
    "from": 187,
    "label": "requires",
    "to": 183
  }, {
    "from": 173,
    "label": "contains",
    "to": 9
  }, {
    "from": 173,
    "label": "contains",
    "to": 128
  }, {
    "from": 166,
    "label": "contains",
    "to": 141
  }, {
    "from": 177,
    "label": "contains",
    "to": 141
  }, {
    "from": 184,
    "label": "contains",
    "to": 141
  }, {
    "from": 185,
    "label": "contains",
    "to": 141
  }, {
    "from": 186,
    "label": "contains",
    "to": 141
  }, {
    "from": 188,
    "label": "contains",
    "to": 141
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "dispatch",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "function newhandler(mode)\r\n    mode = mode or \"coroutine\"\r\n    return handlert[mode]()\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "mode = mode or \"coroutine\"",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function seqstart(self, func)\r\n    return func()\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function handlert.sequential()\r\n    return {\r\n        tcp = socket.tcp,\r\n        start = seqstart\r\n    }\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function socket.protect(f)\r\n  return function(...)\r\n    local co = coroutine.create(f)\r\n    while true do\r\n      local results = {coroutine.resume(co, ...)}\r\n      local status = table.remove(results, 1)\r\n      if not status then\r\n        if base.type(results[1]) == 'table' then\r\n          return nil, results[1][1]\r\n        else base.error(results[1]) end\r\n      end\r\n      if coroutine.status(co) == \"suspended\" then\r\n        arg = {coroutine.yield(base.unpack(results))}\r\n      else\r\n        return base.unpack(results)\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local co = coroutine.create(f)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "while true do\r\n      local results = {coroutine.resume(co, ...)}\r\n      local status = table.remove(results, 1)\r\n      if not status then\r\n        if base.type(results[1]) == 'table' then\r\n          return nil, results[1][1]\r\n        else base.error(results[1]) end\r\n      end\r\n      if coroutine.status(co) == \"suspended\" then\r\n        arg = {coroutine.yield(base.unpack(results))}\r\n      else\r\n        return base.unpack(results)\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 14,
    "text": "local results = {coroutine.resume(co, ...)}",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local status = table.remove(results, 1)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if not status then\r\n        if base.type(results[1]) == 'table' then\r\n          return nil, results[1][1]\r\n        else base.error(results[1]) end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "if base.type(results[1]) == 'table' then\r\n          return nil, results[1][1]\r\n        else base.error(results[1]) end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "base.error(results[1])",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if coroutine.status(co) == \"suspended\" then\r\n        arg = {coroutine.yield(base.unpack(results))}\r\n      else\r\n        return base.unpack(results)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "arg = {coroutine.yield(base.unpack(results))}",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function newset()\r\n    local reverse = {}\r\n    local set = {}\r\n    return base.setmetatable(set, {__index = {\r\n        insert = function(set, value)\r\n            if not reverse[value] then\r\n                table.insert(set, value)\r\n                reverse[value] = #set\r\n            end\r\n        end,\r\n        remove = function(set, value)\r\n            local index = reverse[value]\r\n            if index then\r\n                reverse[value] = nil\r\n                local top = table.remove(set)\r\n                if top ~= value then\r\n                    reverse[top] = index\r\n                    set[index] = top\r\n                end\r\n            end\r\n        end\r\n    }})\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local reverse = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local set = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if not reverse[value] then\r\n                table.insert(set, value)\r\n                reverse[value] = #set\r\n            end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "table.insert(set, value)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "reverse[value] = #set",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local index = reverse[value]",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if index then\r\n                reverse[value] = nil\r\n                local top = table.remove(set)\r\n                if top ~= value then\r\n                    reverse[top] = index\r\n                    set[index] = top\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "reverse[value] = nil",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "local top = table.remove(set)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if top ~= value then\r\n                    reverse[top] = index\r\n                    set[index] = top\r\n                end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "reverse[top] = index",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "set[index] = top",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function cowrap(dispatcher, tcp, error)\r\n    if not tcp then return nil, error end\r\n    -- put it in non-blocking mode right away\r\n    tcp:settimeout(0)\r\n    -- metatable for wrap produces new methods on demand for those that we\r\n    -- don't override explicitly.\r\n    local metat = { __index = function(table, key)\r\n        table[key] = function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end\r\n        return table[key]\r\n    end}\r\n    -- does our user want to do his own non-blocking I/O?\r\n    local zero = false\r\n    -- create a wrap object that will behave just like a real socket object\r\n    local wrap = {  }\r\n    -- we ignore settimeout to preserve our 0 timeout, but record whether\r\n    -- the user wants to do his own non-blocking I/O\r\n    function wrap:settimeout(value, mode)\r\n        if value == 0 then zero = true\r\n        else zero = false end\r\n        return 1\r\n    end\r\n    -- send in non-blocking mode and yield on timeout\r\n    function wrap:send(data, first, last)\r\n        first = (first or 1) - 1\r\n        local result, error\r\n        while true do\r\n            -- return control to dispatcher and tell it we want to send\r\n            -- if upon return the dispatcher tells us we timed out,\r\n            -- return an error to whoever called us\r\n            if coroutine.yield(dispatcher.sending, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- try sending\r\n            result, error, first = tcp:send(data, first+1, last)\r\n            -- if we are done, or there was an unexpected error,\r\n            -- break away from loop\r\n            if error ~= \"timeout\" then return result, error, first end\r\n        end\r\n    end\r\n    -- receive in non-blocking mode and yield on timeout\r\n    -- or simply return partial read, if user requested timeout = 0\r\n    function wrap:receive(pattern, partial)\r\n        local error = \"timeout\"\r\n        local value\r\n        while true do\r\n            -- return control to dispatcher and tell it we want to receive\r\n            -- if upon return the dispatcher tells us we timed out,\r\n            -- return an error to whoever called us\r\n            if coroutine.yield(dispatcher.receiving, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- try receiving\r\n            value, error, partial = tcp:receive(pattern, partial)\r\n            -- if we are done, or there was an unexpected error,\r\n            -- break away from loop. also, if the user requested\r\n            -- zero timeout, return all we got\r\n            if (error ~= \"timeout\") or zero then\r\n                return value, error, partial\r\n            end\r\n        end\r\n    end\r\n    -- connect in non-blocking mode and yield on timeout\r\n    function wrap:connect(host, port)\r\n        local result, error = tcp:connect(host, port)\r\n        if error == \"timeout\" then\r\n            -- return control to dispatcher. we will be writable when\r\n            -- connection succeeds.\r\n            -- if upon return the dispatcher tells us we have a\r\n            -- timeout, just abort\r\n            if coroutine.yield(dispatcher.sending, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- when we come back, check if connection was successful\r\n            result, error = tcp:connect(host, port)\r\n            if result or error == \"already connected\" then return 1\r\n            else return nil, \"non-blocking connect failed\" end\r\n        else return result, error end\r\n    end\r\n    -- accept in non-blocking mode and yield on timeout\r\n    function wrap:accept()\r\n        while 1 do\r\n            -- return control to dispatcher. we will be readable when a\r\n            -- connection arrives.\r\n            -- if upon return the dispatcher tells us we have a\r\n            -- timeout, just abort\r\n            if coroutine.yield(dispatcher.receiving, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            local client, error = tcp:accept()\r\n            if error ~= \"timeout\" then\r\n                return cowrap(dispatcher, client, error)\r\n            end\r\n        end\r\n    end\r\n    -- remove cortn from context\r\n    function wrap:close()\r\n        dispatcher.stamp[tcp] = nil\r\n        dispatcher.sending.set:remove(tcp)\r\n        dispatcher.sending.cortn[tcp] = nil\r\n        dispatcher.receiving.set:remove(tcp)\r\n        dispatcher.receiving.cortn[tcp] = nil\r\n        return tcp:close()\r\n    end\r\n    return base.setmetatable(wrap, metat)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "if not tcp then return nil, error end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "tcp:settimeout(0)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "local metat = { __index = function(table, key)\r\n        table[key] = function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end\r\n        return table[key]\r\n    end}",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "table[key] = function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "local zero = false",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local wrap = {  }",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "function wrap:settimeout(value, mode)\r\n        if value == 0 then zero = true\r\n        else zero = false end\r\n        return 1\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 44,
    "text": "if value == 0 then zero = true\r\n        else zero = false end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "zero = true",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "zero = false",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "function wrap:send(data, first, last)\r\n        first = (first or 1) - 1\r\n        local result, error\r\n        while true do\r\n            -- return control to dispatcher and tell it we want to send\r\n            -- if upon return the dispatcher tells us we timed out,\r\n            -- return an error to whoever called us\r\n            if coroutine.yield(dispatcher.sending, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- try sending\r\n            result, error, first = tcp:send(data, first+1, last)\r\n            -- if we are done, or there was an unexpected error,\r\n            -- break away from loop\r\n            if error ~= \"timeout\" then return result, error, first end\r\n        end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 48,
    "text": "first = (first or 1) - 1",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "local result, error",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "while true do\r\n            -- return control to dispatcher and tell it we want to send\r\n            -- if upon return the dispatcher tells us we timed out,\r\n            -- return an error to whoever called us\r\n            if coroutine.yield(dispatcher.sending, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- try sending\r\n            result, error, first = tcp:send(data, first+1, last)\r\n            -- if we are done, or there was an unexpected error,\r\n            -- break away from loop\r\n            if error ~= \"timeout\" then return result, error, first end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 51,
    "text": "if coroutine.yield(dispatcher.sending, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "result, error, first = tcp:send(data, first+1, last)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if error ~= \"timeout\" then return result, error, first end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "function wrap:receive(pattern, partial)\r\n        local error = \"timeout\"\r\n        local value\r\n        while true do\r\n            -- return control to dispatcher and tell it we want to receive\r\n            -- if upon return the dispatcher tells us we timed out,\r\n            -- return an error to whoever called us\r\n            if coroutine.yield(dispatcher.receiving, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- try receiving\r\n            value, error, partial = tcp:receive(pattern, partial)\r\n            -- if we are done, or there was an unexpected error,\r\n            -- break away from loop. also, if the user requested\r\n            -- zero timeout, return all we got\r\n            if (error ~= \"timeout\") or zero then\r\n                return value, error, partial\r\n            end\r\n        end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 55,
    "text": "local error = \"timeout\"",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local value",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "while true do\r\n            -- return control to dispatcher and tell it we want to receive\r\n            -- if upon return the dispatcher tells us we timed out,\r\n            -- return an error to whoever called us\r\n            if coroutine.yield(dispatcher.receiving, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- try receiving\r\n            value, error, partial = tcp:receive(pattern, partial)\r\n            -- if we are done, or there was an unexpected error,\r\n            -- break away from loop. also, if the user requested\r\n            -- zero timeout, return all we got\r\n            if (error ~= \"timeout\") or zero then\r\n                return value, error, partial\r\n            end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 58,
    "text": "if coroutine.yield(dispatcher.receiving, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "value, error, partial = tcp:receive(pattern, partial)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if (error ~= \"timeout\") or zero then\r\n                return value, error, partial\r\n            end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "function wrap:connect(host, port)\r\n        local result, error = tcp:connect(host, port)\r\n        if error == \"timeout\" then\r\n            -- return control to dispatcher. we will be writable when\r\n            -- connection succeeds.\r\n            -- if upon return the dispatcher tells us we have a\r\n            -- timeout, just abort\r\n            if coroutine.yield(dispatcher.sending, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- when we come back, check if connection was successful\r\n            result, error = tcp:connect(host, port)\r\n            if result or error == \"already connected\" then return 1\r\n            else return nil, \"non-blocking connect failed\" end\r\n        else return result, error end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 62,
    "text": "local result, error = tcp:connect(host, port)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if error == \"timeout\" then\r\n            -- return control to dispatcher. we will be writable when\r\n            -- connection succeeds.\r\n            -- if upon return the dispatcher tells us we have a\r\n            -- timeout, just abort\r\n            if coroutine.yield(dispatcher.sending, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- when we come back, check if connection was successful\r\n            result, error = tcp:connect(host, port)\r\n            if result or error == \"already connected\" then return 1\r\n            else return nil, \"non-blocking connect failed\" end\r\n        else return result, error end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "result, error = tcp:connect(host, port)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if result or error == \"already connected\" then return 1\r\n            else return nil, \"non-blocking connect failed\" end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "function wrap:accept()\r\n        while 1 do\r\n            -- return control to dispatcher. we will be readable when a\r\n            -- connection arrives.\r\n            -- if upon return the dispatcher tells us we have a\r\n            -- timeout, just abort\r\n            if coroutine.yield(dispatcher.receiving, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            local client, error = tcp:accept()\r\n            if error ~= \"timeout\" then\r\n                return cowrap(dispatcher, client, error)\r\n            end\r\n        end\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 67,
    "text": "while 1 do\r\n            -- return control to dispatcher. we will be readable when a\r\n            -- connection arrives.\r\n            -- if upon return the dispatcher tells us we have a\r\n            -- timeout, just abort\r\n            if coroutine.yield(dispatcher.receiving, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            local client, error = tcp:accept()\r\n            if error ~= \"timeout\" then\r\n                return cowrap(dispatcher, client, error)\r\n            end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 68,
    "text": "local client, error = tcp:accept()",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if error ~= \"timeout\" then\r\n                return cowrap(dispatcher, client, error)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "function wrap:close()\r\n        dispatcher.stamp[tcp] = nil\r\n        dispatcher.sending.set:remove(tcp)\r\n        dispatcher.sending.cortn[tcp] = nil\r\n        dispatcher.receiving.set:remove(tcp)\r\n        dispatcher.receiving.cortn[tcp] = nil\r\n        return tcp:close()\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 71,
    "text": "dispatcher.stamp[tcp] = nil",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "dispatcher.sending.set:remove(tcp)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "dispatcher.sending.cortn[tcp] = nil",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "dispatcher.receiving.set:remove(tcp)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "dispatcher.receiving.cortn[tcp] = nil",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function wrap:settimeout(value, mode)\r\n        if value == 0 then zero = true\r\n        else zero = false end\r\n        return 1\r\n    end",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function wrap:send(data, first, last)\r\n        first = (first or 1) - 1\r\n        local result, error\r\n        while true do\r\n            -- return control to dispatcher and tell it we want to send\r\n            -- if upon return the dispatcher tells us we timed out,\r\n            -- return an error to whoever called us\r\n            if coroutine.yield(dispatcher.sending, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- try sending\r\n            result, error, first = tcp:send(data, first+1, last)\r\n            -- if we are done, or there was an unexpected error,\r\n            -- break away from loop\r\n            if error ~= \"timeout\" then return result, error, first end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function wrap:receive(pattern, partial)\r\n        local error = \"timeout\"\r\n        local value\r\n        while true do\r\n            -- return control to dispatcher and tell it we want to receive\r\n            -- if upon return the dispatcher tells us we timed out,\r\n            -- return an error to whoever called us\r\n            if coroutine.yield(dispatcher.receiving, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- try receiving\r\n            value, error, partial = tcp:receive(pattern, partial)\r\n            -- if we are done, or there was an unexpected error,\r\n            -- break away from loop. also, if the user requested\r\n            -- zero timeout, return all we got\r\n            if (error ~= \"timeout\") or zero then\r\n                return value, error, partial\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function wrap:connect(host, port)\r\n        local result, error = tcp:connect(host, port)\r\n        if error == \"timeout\" then\r\n            -- return control to dispatcher. we will be writable when\r\n            -- connection succeeds.\r\n            -- if upon return the dispatcher tells us we have a\r\n            -- timeout, just abort\r\n            if coroutine.yield(dispatcher.sending, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            -- when we come back, check if connection was successful\r\n            result, error = tcp:connect(host, port)\r\n            if result or error == \"already connected\" then return 1\r\n            else return nil, \"non-blocking connect failed\" end\r\n        else return result, error end\r\n    end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function wrap:accept()\r\n        while 1 do\r\n            -- return control to dispatcher. we will be readable when a\r\n            -- connection arrives.\r\n            -- if upon return the dispatcher tells us we have a\r\n            -- timeout, just abort\r\n            if coroutine.yield(dispatcher.receiving, tcp) == \"timeout\" then\r\n                return nil, \"timeout\"\r\n            end\r\n            local client, error = tcp:accept()\r\n            if error ~= \"timeout\" then\r\n                return cowrap(dispatcher, client, error)\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function wrap:close()\r\n        dispatcher.stamp[tcp] = nil\r\n        dispatcher.sending.set:remove(tcp)\r\n        dispatcher.sending.cortn[tcp] = nil\r\n        dispatcher.receiving.set:remove(tcp)\r\n        dispatcher.receiving.cortn[tcp] = nil\r\n        return tcp:close()\r\n    end",
    "type": "function"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function schedule(cortn, status, operation, tcp)\r\n    if status then\r\n        if cortn and operation then\r\n            operation.set:insert(tcp)\r\n            operation.cortn[tcp] = cortn\r\n            operation.stamp[tcp] = socket.gettime()\r\n        end\r\n    else base.error(operation) end\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "if status then\r\n        if cortn and operation then\r\n            operation.set:insert(tcp)\r\n            operation.cortn[tcp] = cortn\r\n            operation.stamp[tcp] = socket.gettime()\r\n        end\r\n    else base.error(operation) end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "if cortn and operation then\r\n            operation.set:insert(tcp)\r\n            operation.cortn[tcp] = cortn\r\n            operation.stamp[tcp] = socket.gettime()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "operation.set:insert(tcp)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "operation.cortn[tcp] = cortn",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "operation.stamp[tcp] = socket.gettime()",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "base.error(operation)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function kick(operation, tcp)\r\n    operation.cortn[tcp] = nil\r\n    operation.set:remove(tcp)\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "operation.cortn[tcp] = nil",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "operation.set:remove(tcp)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function wakeup(operation, tcp)\r\n    local cortn = operation.cortn[tcp]\r\n    -- if cortn is still valid, wake it up\r\n    if cortn then\r\n        kick(operation, tcp)\r\n        return cortn, coroutine.resume(cortn)\r\n    -- othrewise, just get scheduler not to do anything\r\n    else\r\n        return nil, true\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local cortn = operation.cortn[tcp]",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if cortn then\r\n        kick(operation, tcp)\r\n        return cortn, coroutine.resume(cortn)\r\n    -- othrewise, just get scheduler not to do anything\r\n    else\r\n        return nil, true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "kick(operation, tcp)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function abort(operation, tcp)\r\n    local cortn = operation.cortn[tcp]\r\n    if cortn then\r\n        kick(operation, tcp)\r\n        coroutine.resume(cortn, \"timeout\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "if cortn then\r\n        kick(operation, tcp)\r\n        coroutine.resume(cortn, \"timeout\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "coroutine.resume(cortn, \"timeout\")",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function cometat.__index:step()\r\n    -- check which sockets are interesting and act on them\r\n    local readable, writable = socket.select(self.receiving.set,\r\n        self.sending.set, 1)\r\n    -- for all readable connections, resume their cortns and reschedule\r\n    -- when they yield back to us\r\n    for _, tcp in base.ipairs(readable) do\r\n        schedule(wakeup(self.receiving, tcp))\r\n    end\r\n    -- for all writable connections, do the same\r\n    for _, tcp in base.ipairs(writable) do\r\n        schedule(wakeup(self.sending, tcp))\r\n    end\r\n    -- politely ask replacement I/O functions in idle cortns to\r\n    -- return reporting a timeout\r\n    local now = socket.gettime()\r\n    for tcp, stamp in base.pairs(self.stamp) do\r\n        if tcp.class == \"tcp{client}\" and now - stamp > TIMEOUT then\r\n            abort(self.sending, tcp)\r\n            abort(self.receiving, tcp)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local readable, writable = socket.select(self.receiving.set,\r\n        self.sending.set, 1)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "for _, tcp in base.ipairs(readable) do\r\n        schedule(wakeup(self.receiving, tcp))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 115,
    "text": "schedule(wakeup(self.receiving, tcp))",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "for _, tcp in base.ipairs(writable) do\r\n        schedule(wakeup(self.sending, tcp))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 117,
    "text": "schedule(wakeup(self.sending, tcp))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "local now = socket.gettime()",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "for tcp, stamp in base.pairs(self.stamp) do\r\n        if tcp.class == \"tcp{client}\" and now - stamp > TIMEOUT then\r\n            abort(self.sending, tcp)\r\n            abort(self.receiving, tcp)\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 120,
    "text": "if tcp.class == \"tcp{client}\" and now - stamp > TIMEOUT then\r\n            abort(self.sending, tcp)\r\n            abort(self.receiving, tcp)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "abort(self.sending, tcp)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "abort(self.receiving, tcp)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function cometat.__index:start(func)\r\n    local cortn = coroutine.create(func)\r\n    schedule(cortn, coroutine.resume(cortn))\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "local cortn = coroutine.create(func)",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "schedule(cortn, coroutine.resume(cortn))",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function handlert.coroutine()\r\n    local stamp = {}\r\n    local dispatcher = {\r\n        stamp = stamp,\r\n        sending  = {\r\n            name = \"sending\",\r\n            set = newset(),\r\n            cortn = {},\r\n            stamp = stamp\r\n        },\r\n        receiving = {\r\n            name = \"receiving\",\r\n            set = newset(),\r\n            cortn = {},\r\n            stamp = stamp\r\n        },\r\n    }\r\n    function dispatcher.tcp()\r\n        return cowrap(dispatcher, socket.tcp())\r\n    end\r\n    return base.setmetatable(dispatcher, cometat)\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local stamp = {}",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local dispatcher = {\r\n        stamp = stamp,\r\n        sending  = {\r\n            name = \"sending\",\r\n            set = newset(),\r\n            cortn = {},\r\n            stamp = stamp\r\n        },\r\n        receiving = {\r\n            name = \"receiving\",\r\n            set = newset(),\r\n            cortn = {},\r\n            stamp = stamp\r\n        },\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "function dispatcher.tcp()\r\n        return cowrap(dispatcher, socket.tcp())\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function dispatcher.tcp()\r\n        return cowrap(dispatcher, socket.tcp())\r\n    end",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function(...)\r\n    local co = coroutine.create(f)\r\n    while true do\r\n      local results = {coroutine.resume(co, ...)}\r\n      local status = table.remove(results, 1)\r\n      if not status then\r\n        if base.type(results[1]) == 'table' then\r\n          return nil, results[1][1]\r\n        else base.error(results[1]) end\r\n      end\r\n      if coroutine.status(co) == \"suspended\" then\r\n        arg = {coroutine.yield(base.unpack(results))}\r\n      else\r\n        return base.unpack(results)\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function(set, value)\r\n            if not reverse[value] then\r\n                table.insert(set, value)\r\n                reverse[value] = #set\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function(set, value)\r\n            local index = reverse[value]\r\n            if index then\r\n                reverse[value] = nil\r\n                local top = table.remove(set)\r\n                if top ~= value then\r\n                    reverse[top] = index\r\n                    set[index] = top\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function(table, key)\r\n        table[key] = function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end\r\n        return table[key]\r\n    end",
    "type": "function"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "",
    "type": "function container"
  }, {
    "id": 144,
    "text": "",
    "type": "function container"
  }, {
    "id": 145,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 146,
    "text": "status",
    "type": "global function"
  }, {
    "id": 147,
    "text": "create",
    "type": "global function"
  }, {
    "id": 148,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 149,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 150,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 151,
    "text": "tcp",
    "type": "global function"
  }, {
    "id": 152,
    "text": "select",
    "type": "global function"
  }, {
    "id": 153,
    "text": "gettime",
    "type": "global function"
  }, {
    "id": 154,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 155,
    "text": "func",
    "type": "global function"
  }, {
    "id": 156,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 157,
    "text": "module",
    "type": "global function"
  }, {
    "id": 158,
    "text": "handlert[mode]",
    "type": "global function"
  }, {
    "id": 159,
    "text": "type",
    "type": "global function"
  }, {
    "id": 160,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 161,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 162,
    "text": "tcp[key]",
    "type": "global function"
  }, {
    "id": 163,
    "text": "error",
    "type": "global function"
  }, {
    "id": 164,
    "text": "select",
    "type": "global function"
  }, {
    "id": 165,
    "text": "require",
    "type": "global function"
  }, {
    "id": 166,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 167,
    "text": "(table)",
    "type": "module"
  }, {
    "id": 168,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 169,
    "text": "",
    "type": "variable container"
  }, {
    "id": 170,
    "text": "",
    "type": "require container"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 177,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 178,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 179,
    "text": "",
    "type": "global variable"
  }, {
    "id": 180,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 183,
    "text": "(coroutine)",
    "type": "module"
  }, {
    "id": 184,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 185,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 186,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 187,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "table assign node"
  } ]
}