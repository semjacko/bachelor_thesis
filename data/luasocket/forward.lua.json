{
  "_filename": "forward.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/etc/forward.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 18
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 20
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 28,
    "label": "has",
    "to": 22
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 32
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 3
  }, {
    "from": 30,
    "label": "calls",
    "to": 3
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 30,
    "label": "calls",
    "to": 2
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 30,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 3
  }, {
    "from": 30,
    "label": "declares",
    "to": 14
  }, {
    "from": 30,
    "label": "declares",
    "to": 17
  }, {
    "from": 30,
    "label": "declares",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 39,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 40,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "requires",
    "to": 38
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 17
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "forward",
    "type": "module"
  }, {
    "id": 2,
    "text": "function newhandler(mode)\r\n    mode = mode or \"coroutine\"\r\n    return handlert[mode]()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function move(foo, bar)\r\n    local live\r\n    while 1 do\r\n        local data, error, partial = foo:receive(2048)\r\n        live = data or error == \"timeout\"\r\n        data = data or partial\r\n        local result, error = bar:send(data)\r\n        if not live or not result then\r\n            foo:close()\r\n            bar:close()\r\n            break\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local live",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "while 1 do\r\n        local data, error, partial = foo:receive(2048)\r\n        live = data or error == \"timeout\"\r\n        data = data or partial\r\n        local result, error = bar:send(data)\r\n        if not live or not result then\r\n            foo:close()\r\n            bar:close()\r\n            break\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 6,
    "text": "local data, error, partial = foo:receive(2048)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "live = data or error == \"timeout\"",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "data = data or partial",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "local result, error = bar:send(data)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if not live or not result then\r\n            foo:close()\r\n            bar:close()\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "foo:close()",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "bar:close()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function()\r\n                    move(client, peer)\r\n                end",
    "type": "function"
  }, {
    "id": 15,
    "text": "move(client, peer)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n                -- handler tries to connect to peer\r\n                local peer = assert(handler.tcp())\r\n                assert(peer:settimeout(0))\r\n                assert(peer:connect(ohost, oport))\r\n                -- if sucessful, starts a new handler to send data from\r\n                -- client to peer\r\n                handler:start(function()\r\n                    move(client, peer)\r\n                end)\r\n                -- afte starting new handler, enter in loop sending data from\r\n                -- peer to client\r\n                move(peer, client)\r\n            end",
    "type": "function"
  }, {
    "id": 18,
    "text": "local peer = assert(handler.tcp())",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "assert(peer:settimeout(0))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert(peer:connect(ohost, oport))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "handler:start(function()\r\n                    move(client, peer)\r\n                end)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "move(peer, client)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n        while 1 do\r\n            local client = assert(server:accept())\r\n            assert(client:settimeout(0))\r\n            -- for each new connection, start a new client handler\r\n            handler:start(function()\r\n                -- handler tries to connect to peer\r\n                local peer = assert(handler.tcp())\r\n                assert(peer:settimeout(0))\r\n                assert(peer:connect(ohost, oport))\r\n                -- if sucessful, starts a new handler to send data from\r\n                -- client to peer\r\n                handler:start(function()\r\n                    move(client, peer)\r\n                end)\r\n                -- afte starting new handler, enter in loop sending data from\r\n                -- peer to client\r\n                move(peer, client)\r\n            end)\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 25,
    "text": "while 1 do\r\n            local client = assert(server:accept())\r\n            assert(client:settimeout(0))\r\n            -- for each new connection, start a new client handler\r\n            handler:start(function()\r\n                -- handler tries to connect to peer\r\n                local peer = assert(handler.tcp())\r\n                assert(peer:settimeout(0))\r\n                assert(peer:connect(ohost, oport))\r\n                -- if sucessful, starts a new handler to send data from\r\n                -- client to peer\r\n                handler:start(function()\r\n                    move(client, peer)\r\n                end)\r\n                -- afte starting new handler, enter in loop sending data from\r\n                -- peer to client\r\n                move(peer, client)\r\n            end)\r\n        end",
    "type": "statement:while"
  }, {
    "id": 26,
    "text": "local client = assert(server:accept())",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "assert(client:settimeout(0))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "handler:start(function()\r\n                -- handler tries to connect to peer\r\n                local peer = assert(handler.tcp())\r\n                assert(peer:settimeout(0))\r\n                assert(peer:connect(ohost, oport))\r\n                -- if sucessful, starts a new handler to send data from\r\n                -- client to peer\r\n                handler:start(function()\r\n                    move(client, peer)\r\n                end)\r\n                -- afte starting new handler, enter in loop sending data from\r\n                -- peer to client\r\n                move(peer, client)\r\n            end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "find",
    "type": "global function"
  }, {
    "id": 32,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 33,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 34,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 35,
    "text": "tcp",
    "type": "global function"
  }, {
    "id": 36,
    "text": "print",
    "type": "global function"
  }, {
    "id": 37,
    "text": "require",
    "type": "global function"
  }, {
    "id": 38,
    "text": "(dispatch)",
    "type": "module"
  }, {
    "id": 39,
    "text": "",
    "type": "variable container"
  }, {
    "id": 40,
    "text": "",
    "type": "require container"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "n/a"
  }, {
    "id": 43,
    "text": "",
    "type": "require local variable"
  } ]
}