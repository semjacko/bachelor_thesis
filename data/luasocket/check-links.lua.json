{
  "_filename": "check-links.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/etc/check-links.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 19
  }, {
    "from": 34,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 19
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 7
  }, {
    "from": 51,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 51,
    "label": "has",
    "to": 11
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 38
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 38
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 38
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 34,
    "label": "calls",
    "to": 61
  }, {
    "from": 34,
    "label": "calls",
    "to": 61
  }, {
    "from": 34,
    "label": "calls",
    "to": 61
  }, {
    "from": 59,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 71
  }, {
    "from": 2,
    "label": "calls",
    "to": 65
  }, {
    "from": 21,
    "label": "calls",
    "to": 65
  }, {
    "from": 42,
    "label": "calls",
    "to": 2
  }, {
    "from": 59,
    "label": "calls",
    "to": 60
  }, {
    "from": 59,
    "label": "calls",
    "to": 60
  }, {
    "from": 21,
    "label": "calls",
    "to": 63
  }, {
    "from": 42,
    "label": "calls",
    "to": 72
  }, {
    "from": 59,
    "label": "calls",
    "to": 72
  }, {
    "from": 13,
    "label": "calls",
    "to": 69
  }, {
    "from": 34,
    "label": "calls",
    "to": 67
  }, {
    "from": 34,
    "label": "calls",
    "to": 67
  }, {
    "from": 34,
    "label": "calls",
    "to": 67
  }, {
    "from": 59,
    "label": "calls",
    "to": 66
  }, {
    "from": 21,
    "label": "calls",
    "to": 13
  }, {
    "from": 13,
    "label": "calls",
    "to": 68
  }, {
    "from": 34,
    "label": "calls",
    "to": 64
  }, {
    "from": 34,
    "label": "calls",
    "to": 64
  }, {
    "from": 34,
    "label": "calls",
    "to": 64
  }, {
    "from": 34,
    "label": "calls",
    "to": 64
  }, {
    "from": 42,
    "label": "calls",
    "to": 21
  }, {
    "from": 2,
    "label": "calls",
    "to": 62
  }, {
    "from": 21,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 74
  }, {
    "from": 42,
    "label": "calls",
    "to": 74
  }, {
    "from": 42,
    "label": "calls",
    "to": 74
  }, {
    "from": 59,
    "label": "calls",
    "to": 42
  }, {
    "from": 59,
    "label": "calls",
    "to": 75
  }, {
    "from": 59,
    "label": "calls",
    "to": 75
  }, {
    "from": 59,
    "label": "calls",
    "to": 75
  }, {
    "from": 59,
    "label": "calls",
    "to": 73
  }, {
    "from": 42,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 59,
    "label": "declares",
    "to": 2
  }, {
    "from": 59,
    "label": "declares",
    "to": 13
  }, {
    "from": 59,
    "label": "declares",
    "to": 21
  }, {
    "from": 59,
    "label": "declares",
    "to": 34
  }, {
    "from": 59,
    "label": "declares",
    "to": 42
  }, {
    "from": 59,
    "label": "declares",
    "to": 51
  }, {
    "from": 59,
    "label": "declares",
    "to": 53
  }, {
    "from": 59,
    "label": "declares",
    "to": 55
  }, {
    "from": 59,
    "label": "declares",
    "to": 57
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 76,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 76,
    "label": "initializes",
    "to": 80
  }, {
    "from": 76,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 77,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 84
  }, {
    "from": 77,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 86
  }, {
    "from": 77,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "requires",
    "to": 88
  }, {
    "from": 89,
    "label": "requires",
    "to": 84
  }, {
    "from": 90,
    "label": "requires",
    "to": 86
  }, {
    "from": 91,
    "label": "requires",
    "to": 88
  }, {
    "from": 92,
    "label": "requires",
    "to": 84
  }, {
    "from": 93,
    "label": "requires",
    "to": 84
  }, {
    "from": 94,
    "label": "requires",
    "to": 88
  }, {
    "from": 95,
    "label": "requires",
    "to": 84
  }, {
    "from": 96,
    "label": "requires",
    "to": 84
  }, {
    "from": 97,
    "label": "requires",
    "to": 84
  }, {
    "from": 98,
    "label": "requires",
    "to": 88
  }, {
    "from": 99,
    "label": "requires",
    "to": 84
  }, {
    "from": 6,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 55
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 57
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "check-links",
    "type": "module"
  }, {
    "id": 2,
    "text": "function getstatus(link)\r\n    local parsed = url.parse(link, {scheme = \"file\"})\r\n    if parsed.scheme == \"http\" then\r\n        nthreads = nthreads + 1\r\n        handler:start(function()\r\n            local r, c, h, s = http.request{\r\n                method = \"HEAD\",\r\n                url = link,\r\n                create = handler.tcp\r\n            }\r\n            if r and c == 200 then io.write('\\t', link, '\\n')\r\n            else io.write('\\t', link, ': ', tostring(c), '\\n') end\r\n            nthreads = nthreads - 1\r\n        end)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local parsed = url.parse(link, {scheme = \"file\"})",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if parsed.scheme == \"http\" then\r\n        nthreads = nthreads + 1\r\n        handler:start(function()\r\n            local r, c, h, s = http.request{\r\n                method = \"HEAD\",\r\n                url = link,\r\n                create = handler.tcp\r\n            }\r\n            if r and c == 200 then io.write('\\t', link, '\\n')\r\n            else io.write('\\t', link, ': ', tostring(c), '\\n') end\r\n            nthreads = nthreads - 1\r\n        end)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "nthreads = nthreads + 1",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "handler:start(function()\r\n            local r, c, h, s = http.request{\r\n                method = \"HEAD\",\r\n                url = link,\r\n                create = handler.tcp\r\n            }\r\n            if r and c == 200 then io.write('\\t', link, '\\n')\r\n            else io.write('\\t', link, ': ', tostring(c), '\\n') end\r\n            nthreads = nthreads - 1\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local r, c, h, s = http.request{\r\n                method = \"HEAD\",\r\n                url = link,\r\n                create = handler.tcp\r\n            }",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if r and c == 200 then io.write('\\t', link, '\\n')\r\n            else io.write('\\t', link, ': ', tostring(c), '\\n') end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "io.write('\\t', link, '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "io.write('\\t', link, ': ', tostring(c), '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "nthreads = nthreads - 1",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function readfile(path)\r\n    path = url.unescape(path)\r\n    local file, error = io.open(path, \"r\")\r\n    if file then\r\n        local body = file:read(\"*a\")\r\n        file:close()\r\n        return body\r\n    else return nil, error end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "path = url.unescape(path)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local file, error = io.open(path, \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if file then\r\n        local body = file:read(\"*a\")\r\n        file:close()\r\n        return body\r\n    else return nil, error end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local body = file:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function load(u)\r\n    local parsed = url.parse(u, { scheme = \"file\" })\r\n    local body, headers, code, error\r\n    local base = u\r\n    if parsed.scheme == \"http\" then\r\n        body, code, headers = http.request(u)\r\n        if code == 200 then\r\n            -- if there was a redirect, update base to reflect it\r\n            base = headers.location or base\r\n        end\r\n        if not body then\r\n            error = code\r\n        end\r\n    elseif parsed.scheme == \"file\" then\r\n        body, error = readfile(parsed.path)\r\n    else error = string.format(\"unhandled scheme '%s'\", parsed.scheme) end\r\n    return base, body, error\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local parsed = url.parse(u, { scheme = \"file\" })",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local body, headers, code, error",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local base = u",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if parsed.scheme == \"http\" then\r\n        body, code, headers = http.request(u)\r\n        if code == 200 then\r\n            -- if there was a redirect, update base to reflect it\r\n            base = headers.location or base\r\n        end\r\n        if not body then\r\n            error = code\r\n        end\r\n    elseif parsed.scheme == \"file\" then\r\n        body, error = readfile(parsed.path)\r\n    else error = string.format(\"unhandled scheme '%s'\", parsed.scheme) end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "body, code, headers = http.request(u)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if code == 200 then\r\n            -- if there was a redirect, update base to reflect it\r\n            base = headers.location or base\r\n        end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "base = headers.location or base",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if not body then\r\n            error = code\r\n        end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "error = code",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "body, error = readfile(parsed.path)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "error = string.format(\"unhandled scheme '%s'\", parsed.scheme)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function getlinks(body, base)\r\n    -- get rid of comments\r\n    body = string.gsub(body, \"%<%!%-%-.-%-%-%>\", \"\")\r\n    local links = {}\r\n    -- extract links\r\n    body = string.gsub(body, '[Hh][Rr][Ee][Ff]%s*=%s*\"([^\"]*)\"', function(href)\r\n        table.insert(links, url.absolute(base, href))\r\n    end)\r\n    body = string.gsub(body, \"[Hh][Rr][Ee][Ff]%s*=%s*'([^']*)'\", function(href)\r\n        table.insert(links, url.absolute(base, href))\r\n    end)\r\n    string.gsub(body, \"[Hh][Rr][Ee][Ff]%s*=%s*(.-)>\", function(href)\r\n        table.insert(links, url.absolute(base, href))\r\n    end)\r\n    return links\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "body = string.gsub(body, \"%<%!%-%-.-%-%-%>\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local links = {}",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "body = string.gsub(body, '[Hh][Rr][Ee][Ff]%s*=%s*\"([^\"]*)\"', function(href)\r\n        table.insert(links, url.absolute(base, href))\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "table.insert(links, url.absolute(base, href))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "body = string.gsub(body, \"[Hh][Rr][Ee][Ff]%s*=%s*'([^']*)'\", function(href)\r\n        table.insert(links, url.absolute(base, href))\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "string.gsub(body, \"[Hh][Rr][Ee][Ff]%s*=%s*(.-)>\", function(href)\r\n        table.insert(links, url.absolute(base, href))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function checklinks(address)\r\n    local base, body, error = load(address)\r\n    if not body then print(error) return end\r\n    print(\"Checking \", base)\r\n    local links = getlinks(body, base)\r\n    for _, link in ipairs(links) do\r\n        getstatus(link)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local base, body, error = load(address)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if not body then print(error) return end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "print(error)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "print(\"Checking \", base)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local links = getlinks(body, base)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "for _, link in ipairs(links) do\r\n        getstatus(link)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "getstatus(link)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n            local r, c, h, s = http.request{\r\n                method = \"HEAD\",\r\n                url = link,\r\n                create = handler.tcp\r\n            }\r\n            if r and c == 200 then io.write('\\t', link, '\\n')\r\n            else io.write('\\t', link, ': ', tostring(c), '\\n') end\r\n            nthreads = nthreads - 1\r\n        end",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function(href)\r\n        table.insert(links, url.absolute(base, href))\r\n    end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function(href)\r\n        table.insert(links, url.absolute(base, href))\r\n    end",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function(href)\r\n        table.insert(links, url.absolute(base, href))\r\n    end",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "",
    "type": "function container"
  }, {
    "id": 60,
    "text": "function newhandler(mode)\r\n    mode = mode or \"coroutine\"\r\n    return handlert[mode]()\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "absolute",
    "type": "global function"
  }, {
    "id": 62,
    "text": "request",
    "type": "global function"
  }, {
    "id": 63,
    "text": "format",
    "type": "global function"
  }, {
    "id": 64,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 65,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 66,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 67,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 68,
    "text": "unescape",
    "type": "global function"
  }, {
    "id": 69,
    "text": "open",
    "type": "global function"
  }, {
    "id": 70,
    "text": "write",
    "type": "global function"
  }, {
    "id": 71,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 72,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 73,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 74,
    "text": "print",
    "type": "global function"
  }, {
    "id": 75,
    "text": "require",
    "type": "global function"
  }, {
    "id": 76,
    "text": "",
    "type": "variable container"
  }, {
    "id": 77,
    "text": "",
    "type": "require container"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "number"
  }, {
    "id": 80,
    "text": "",
    "type": "global variable"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "url)",
    "type": "module"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "(dispatch)",
    "type": "module"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 88,
    "text": "http)",
    "type": "module"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  } ]
}