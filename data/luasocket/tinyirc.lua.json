{
  "_filename": "tinyirc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/samples/tinyirc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 9
  }, {
    "from": 19,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 27
  }, {
    "from": 21,
    "label": "calls",
    "to": 26
  }, {
    "from": 21,
    "label": "calls",
    "to": 26
  }, {
    "from": 21,
    "label": "calls",
    "to": 28
  }, {
    "from": 21,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 21,
    "label": "calls",
    "to": 25
  }, {
    "from": 21,
    "label": "calls",
    "to": 25
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 31
  }, {
    "from": 21,
    "label": "calls",
    "to": 29
  }, {
    "from": 21,
    "label": "calls",
    "to": 29
  }, {
    "from": 21,
    "label": "calls",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 21
  }, {
    "from": 21,
    "label": "declares",
    "to": 2
  }, {
    "from": 21,
    "label": "declares",
    "to": 17
  }, {
    "from": 21,
    "label": "declares",
    "to": 19
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 33,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 33,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 33,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 33,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 33,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 33,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 34,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "requires",
    "to": 32
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tinyirc",
    "type": "module"
  }, {
    "id": 2,
    "text": "function newset()\r\n    local reverse = {}\r\n    local set = {}\r\n    return setmetatable(set, {__index = {\r\n        insert = function(set, value)\r\n            if not reverse[value] then\r\n                table.insert(set, value)\r\n                reverse[value] = #set\r\n            end\r\n        end,\r\n        remove = function(set, value)\r\n            local index = reverse[value]\r\n            if index then\r\n                reverse[value] = nil\r\n                local top = table.remove(set)\r\n                if top ~= value then\r\n                    reverse[top] = index\r\n                    set[index] = top\r\n                end\r\n            end\r\n        end\r\n    }})\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local reverse = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local set = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "if not reverse[value] then\r\n                table.insert(set, value)\r\n                reverse[value] = #set\r\n            end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "table.insert(set, value)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "reverse[value] = #set",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "local index = reverse[value]",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if index then\r\n                reverse[value] = nil\r\n                local top = table.remove(set)\r\n                if top ~= value then\r\n                    reverse[top] = index\r\n                    set[index] = top\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "reverse[value] = nil",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "local top = table.remove(set)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if top ~= value then\r\n                    reverse[top] = index\r\n                    set[index] = top\r\n                end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "reverse[top] = index",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "set[index] = top",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function(set, value)\r\n            if not reverse[value] then\r\n                table.insert(set, value)\r\n                reverse[value] = #set\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function(set, value)\r\n            local index = reverse[value]\r\n            if index then\r\n                reverse[value] = nil\r\n                local top = table.remove(set)\r\n                if top ~= value then\r\n                    reverse[top] = index\r\n                    set[index] = top\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "",
    "type": "function container"
  }, {
    "id": 22,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 23,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 24,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 25,
    "text": "select",
    "type": "global function"
  }, {
    "id": 26,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 27,
    "text": "write",
    "type": "global function"
  }, {
    "id": 28,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 29,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 30,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 31,
    "text": "require",
    "type": "global function"
  }, {
    "id": 32,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 33,
    "text": "",
    "type": "variable container"
  }, {
    "id": 34,
    "text": "",
    "type": "require container"
  }, {
    "id": 35,
    "text": "",
    "type": "global variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "global variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  }, {
    "id": 39,
    "text": "",
    "type": "global variable"
  }, {
    "id": 40,
    "text": "",
    "type": "n/a"
  }, {
    "id": 41,
    "text": "",
    "type": "global variable"
  }, {
    "id": 42,
    "text": "",
    "type": "n/a"
  }, {
    "id": 43,
    "text": "",
    "type": "global variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  }, {
    "id": 45,
    "text": "",
    "type": "global variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  } ]
}