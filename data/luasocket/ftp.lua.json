{
  "_filename": "ftp.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/src/ftp.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 8
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 26,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 26,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 11
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 37,
    "label": "has",
    "to": 45
  }, {
    "from": 37,
    "label": "has",
    "to": 46
  }, {
    "from": 37,
    "label": "has",
    "to": 24
  }, {
    "from": 37,
    "label": "has",
    "to": 8
  }, {
    "from": 37,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 48,
    "label": "has",
    "to": 60
  }, {
    "from": 48,
    "label": "has",
    "to": 61
  }, {
    "from": 48,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 8
  }, {
    "from": 48,
    "label": "has",
    "to": 66
  }, {
    "from": 48,
    "label": "has",
    "to": 67
  }, {
    "from": 48,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 24
  }, {
    "from": 48,
    "label": "has",
    "to": 69
  }, {
    "from": 48,
    "label": "has",
    "to": 70
  }, {
    "from": 48,
    "label": "has",
    "to": 71
  }, {
    "from": 48,
    "label": "has",
    "to": 8
  }, {
    "from": 48,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 63
  }, {
    "from": 73,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 73,
    "label": "has",
    "to": 8
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 49
  }, {
    "from": 75,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 56
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 8
  }, {
    "from": 75,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 75,
    "label": "has",
    "to": 82
  }, {
    "from": 75,
    "label": "has",
    "to": 83
  }, {
    "from": 75,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 24
  }, {
    "from": 75,
    "label": "has",
    "to": 69
  }, {
    "from": 75,
    "label": "has",
    "to": 71
  }, {
    "from": 75,
    "label": "has",
    "to": 8
  }, {
    "from": 75,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 8
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 8
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 24
  }, {
    "from": 93,
    "label": "has",
    "to": 8
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 24
  }, {
    "from": 96,
    "label": "has",
    "to": 8
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 69
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 34
  }, {
    "from": 99,
    "label": "has",
    "to": 8
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 8
  }, {
    "from": 103,
    "label": "has",
    "to": 8
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 109,
    "label": "has",
    "to": 114
  }, {
    "from": 109,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 109,
    "label": "has",
    "to": 117
  }, {
    "from": 109,
    "label": "has",
    "to": 118
  }, {
    "from": 109,
    "label": "has",
    "to": 119
  }, {
    "from": 109,
    "label": "has",
    "to": 7
  }, {
    "from": 109,
    "label": "has",
    "to": 8
  }, {
    "from": 109,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 121,
    "label": "has",
    "to": 125
  }, {
    "from": 121,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 121,
    "label": "has",
    "to": 8
  }, {
    "from": 121,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 130,
    "label": "has",
    "to": 8
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 113
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 134,
    "label": "has",
    "to": 117
  }, {
    "from": 134,
    "label": "has",
    "to": 141
  }, {
    "from": 134,
    "label": "has",
    "to": 119
  }, {
    "from": 134,
    "label": "has",
    "to": 8
  }, {
    "from": 134,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 143,
    "label": "has",
    "to": 8
  }, {
    "from": 143,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 7
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 8
  }, {
    "from": 150,
    "label": "has",
    "to": 8
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 153,
    "label": "has",
    "to": 157
  }, {
    "from": 153,
    "label": "has",
    "to": 113
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 153,
    "label": "has",
    "to": 159
  }, {
    "from": 153,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 153,
    "label": "has",
    "to": 119
  }, {
    "from": 153,
    "label": "has",
    "to": 8
  }, {
    "from": 153,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 8
  }, {
    "from": 163,
    "label": "has",
    "to": 8
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 26,
    "label": "calls",
    "to": 173
  }, {
    "from": 37,
    "label": "calls",
    "to": 173
  }, {
    "from": 3,
    "label": "calls",
    "to": 187
  }, {
    "from": 48,
    "label": "calls",
    "to": 186
  }, {
    "from": 103,
    "label": "calls",
    "to": 179
  }, {
    "from": 121,
    "label": "calls",
    "to": 179
  }, {
    "from": 26,
    "label": "calls",
    "to": 171
  }, {
    "from": 48,
    "label": "calls",
    "to": 171
  }, {
    "from": 75,
    "label": "calls",
    "to": 171
  }, {
    "from": 93,
    "label": "calls",
    "to": 171
  }, {
    "from": 121,
    "label": "calls",
    "to": 171
  }, {
    "from": 26,
    "label": "calls",
    "to": 176
  }, {
    "from": 48,
    "label": "calls",
    "to": 176
  }, {
    "from": 121,
    "label": "calls",
    "to": 176
  }, {
    "from": 75,
    "label": "calls",
    "to": 170
  }, {
    "from": 15,
    "label": "calls",
    "to": 182
  }, {
    "from": 75,
    "label": "calls",
    "to": 188
  }, {
    "from": 143,
    "label": "calls",
    "to": 134
  }, {
    "from": 166,
    "label": "calls",
    "to": 134
  }, {
    "from": 37,
    "label": "calls",
    "to": 174
  }, {
    "from": 48,
    "label": "calls",
    "to": 174
  }, {
    "from": 75,
    "label": "calls",
    "to": 174
  }, {
    "from": 48,
    "label": "calls",
    "to": 189
  }, {
    "from": 166,
    "label": "calls",
    "to": 177
  }, {
    "from": 166,
    "label": "calls",
    "to": 177
  }, {
    "from": 166,
    "label": "calls",
    "to": 177
  }, {
    "from": 37,
    "label": "calls",
    "to": 185
  }, {
    "from": 3,
    "label": "calls",
    "to": 184
  }, {
    "from": 109,
    "label": "calls",
    "to": 184
  }, {
    "from": 121,
    "label": "calls",
    "to": 184
  }, {
    "from": 121,
    "label": "calls",
    "to": 184
  }, {
    "from": 121,
    "label": "calls",
    "to": 184
  }, {
    "from": 121,
    "label": "calls",
    "to": 184
  }, {
    "from": 134,
    "label": "calls",
    "to": 184
  }, {
    "from": 166,
    "label": "calls",
    "to": 184
  }, {
    "from": 166,
    "label": "calls",
    "to": 184
  }, {
    "from": 166,
    "label": "calls",
    "to": 193
  }, {
    "from": 166,
    "label": "calls",
    "to": 143
  }, {
    "from": 130,
    "label": "calls",
    "to": 167
  }, {
    "from": 3,
    "label": "calls",
    "to": 180
  }, {
    "from": 109,
    "label": "calls",
    "to": 103
  }, {
    "from": 134,
    "label": "calls",
    "to": 103
  }, {
    "from": 166,
    "label": "calls",
    "to": 103
  }, {
    "from": 10,
    "label": "calls",
    "to": 194
  }, {
    "from": 10,
    "label": "calls",
    "to": 194
  }, {
    "from": 10,
    "label": "calls",
    "to": 194
  }, {
    "from": 15,
    "label": "calls",
    "to": 194
  }, {
    "from": 15,
    "label": "calls",
    "to": 194
  }, {
    "from": 15,
    "label": "calls",
    "to": 194
  }, {
    "from": 19,
    "label": "calls",
    "to": 194
  }, {
    "from": 19,
    "label": "calls",
    "to": 194
  }, {
    "from": 19,
    "label": "calls",
    "to": 194
  }, {
    "from": 19,
    "label": "calls",
    "to": 194
  }, {
    "from": 26,
    "label": "calls",
    "to": 194
  }, {
    "from": 26,
    "label": "calls",
    "to": 194
  }, {
    "from": 26,
    "label": "calls",
    "to": 194
  }, {
    "from": 37,
    "label": "calls",
    "to": 194
  }, {
    "from": 37,
    "label": "calls",
    "to": 194
  }, {
    "from": 37,
    "label": "calls",
    "to": 194
  }, {
    "from": 37,
    "label": "calls",
    "to": 194
  }, {
    "from": 37,
    "label": "calls",
    "to": 194
  }, {
    "from": 37,
    "label": "calls",
    "to": 194
  }, {
    "from": 48,
    "label": "calls",
    "to": 194
  }, {
    "from": 48,
    "label": "calls",
    "to": 194
  }, {
    "from": 48,
    "label": "calls",
    "to": 194
  }, {
    "from": 48,
    "label": "calls",
    "to": 194
  }, {
    "from": 48,
    "label": "calls",
    "to": 194
  }, {
    "from": 48,
    "label": "calls",
    "to": 194
  }, {
    "from": 75,
    "label": "calls",
    "to": 194
  }, {
    "from": 75,
    "label": "calls",
    "to": 194
  }, {
    "from": 75,
    "label": "calls",
    "to": 194
  }, {
    "from": 75,
    "label": "calls",
    "to": 194
  }, {
    "from": 75,
    "label": "calls",
    "to": 194
  }, {
    "from": 85,
    "label": "calls",
    "to": 194
  }, {
    "from": 85,
    "label": "calls",
    "to": 194
  }, {
    "from": 89,
    "label": "calls",
    "to": 194
  }, {
    "from": 89,
    "label": "calls",
    "to": 194
  }, {
    "from": 93,
    "label": "calls",
    "to": 194
  }, {
    "from": 93,
    "label": "calls",
    "to": 194
  }, {
    "from": 96,
    "label": "calls",
    "to": 194
  }, {
    "from": 96,
    "label": "calls",
    "to": 194
  }, {
    "from": 48,
    "label": "calls",
    "to": 169
  }, {
    "from": 75,
    "label": "calls",
    "to": 169
  }, {
    "from": 166,
    "label": "calls",
    "to": 190
  }, {
    "from": 166,
    "label": "calls",
    "to": 190
  }, {
    "from": 143,
    "label": "calls",
    "to": 172
  }, {
    "from": 130,
    "label": "calls",
    "to": 109
  }, {
    "from": 166,
    "label": "calls",
    "to": 109
  }, {
    "from": 109,
    "label": "calls",
    "to": 3
  }, {
    "from": 134,
    "label": "calls",
    "to": 3
  }, {
    "from": 48,
    "label": "calls",
    "to": 183
  }, {
    "from": 48,
    "label": "calls",
    "to": 181
  }, {
    "from": 75,
    "label": "calls",
    "to": 181
  }, {
    "from": 166,
    "label": "calls",
    "to": 130
  }, {
    "from": 103,
    "label": "calls",
    "to": 191
  }, {
    "from": 166,
    "label": "calls",
    "to": 192
  }, {
    "from": 166,
    "label": "calls",
    "to": 192
  }, {
    "from": 143,
    "label": "calls",
    "to": 168
  }, {
    "from": 130,
    "label": "calls",
    "to": 121
  }, {
    "from": 143,
    "label": "calls",
    "to": 121
  }, {
    "from": 166,
    "label": "calls",
    "to": 195
  }, {
    "from": 166,
    "label": "calls",
    "to": 195
  }, {
    "from": 166,
    "label": "calls",
    "to": 195
  }, {
    "from": 166,
    "label": "calls",
    "to": 195
  }, {
    "from": 166,
    "label": "calls",
    "to": 195
  }, {
    "from": 166,
    "label": "calls",
    "to": 195
  }, {
    "from": 166,
    "label": "calls",
    "to": 195
  }, {
    "from": 37,
    "label": "calls",
    "to": 178
  }, {
    "from": 3,
    "label": "calls",
    "to": 175
  }, {
    "from": 1,
    "label": "contains",
    "to": 166
  }, {
    "from": 166,
    "label": "declares",
    "to": 3
  }, {
    "from": 166,
    "label": "declares",
    "to": 10
  }, {
    "from": 166,
    "label": "declares",
    "to": 15
  }, {
    "from": 166,
    "label": "declares",
    "to": 19
  }, {
    "from": 166,
    "label": "declares",
    "to": 26
  }, {
    "from": 166,
    "label": "declares",
    "to": 37
  }, {
    "from": 166,
    "label": "declares",
    "to": 48
  }, {
    "from": 166,
    "label": "declares",
    "to": 73
  }, {
    "from": 166,
    "label": "declares",
    "to": 75
  }, {
    "from": 166,
    "label": "declares",
    "to": 85
  }, {
    "from": 166,
    "label": "declares",
    "to": 89
  }, {
    "from": 166,
    "label": "declares",
    "to": 93
  }, {
    "from": 166,
    "label": "declares",
    "to": 96
  }, {
    "from": 166,
    "label": "declares",
    "to": 99
  }, {
    "from": 166,
    "label": "declares",
    "to": 103
  }, {
    "from": 166,
    "label": "declares",
    "to": 109
  }, {
    "from": 166,
    "label": "declares",
    "to": 121
  }, {
    "from": 166,
    "label": "declares",
    "to": 130
  }, {
    "from": 166,
    "label": "declares",
    "to": 134
  }, {
    "from": 166,
    "label": "declares",
    "to": 143
  }, {
    "from": 166,
    "label": "declares",
    "to": 149
  }, {
    "from": 166,
    "label": "declares",
    "to": 150
  }, {
    "from": 166,
    "label": "declares",
    "to": 153
  }, {
    "from": 166,
    "label": "declares",
    "to": 163
  }, {
    "from": 1,
    "label": "contains",
    "to": 203
  }, {
    "from": 1,
    "label": "contains",
    "to": 204
  }, {
    "from": 203,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 203,
    "label": "initializes",
    "to": 207
  }, {
    "from": 207,
    "label": "assigns",
    "to": 208
  }, {
    "from": 203,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 211,
    "label": "assigns",
    "to": 212
  }, {
    "from": 203,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 214,
    "label": "assigns",
    "to": 217
  }, {
    "from": 217,
    "label": "assigns",
    "to": 218
  }, {
    "from": 203,
    "label": "initializes",
    "to": 219
  }, {
    "from": 219,
    "label": "assigns",
    "to": 220
  }, {
    "from": 203,
    "label": "initializes",
    "to": 221
  }, {
    "from": 203,
    "label": "initializes",
    "to": 222
  }, {
    "from": 203,
    "label": "initializes",
    "to": 223
  }, {
    "from": 203,
    "label": "initializes",
    "to": 224
  }, {
    "from": 203,
    "label": "initializes",
    "to": 225
  }, {
    "from": 225,
    "label": "assigns",
    "to": 226
  }, {
    "from": 203,
    "label": "initializes",
    "to": 227
  }, {
    "from": 227,
    "label": "assigns",
    "to": 228
  }, {
    "from": 203,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 204,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "requires",
    "to": 199
  }, {
    "from": 204,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "requires",
    "to": 198
  }, {
    "from": 204,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "requires",
    "to": 202
  }, {
    "from": 204,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "requires",
    "to": 200
  }, {
    "from": 204,
    "label": "initializes",
    "to": 235
  }, {
    "from": 235,
    "label": "requires",
    "to": 197
  }, {
    "from": 204,
    "label": "initializes",
    "to": 236
  }, {
    "from": 236,
    "label": "requires",
    "to": 201
  }, {
    "from": 204,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "requires",
    "to": 196
  }, {
    "from": 1,
    "label": "provides",
    "to": 238
  }, {
    "from": 207,
    "label": "represents",
    "to": 239
  }, {
    "from": 238,
    "label": "provides",
    "to": 239
  }, {
    "from": 207,
    "label": "represents",
    "to": 240
  }, {
    "from": 207,
    "label": "represents",
    "to": 241
  }, {
    "from": 207,
    "label": "represents",
    "to": 243
  }, {
    "from": 207,
    "label": "represents",
    "to": 245
  }, {
    "from": 207,
    "label": "represents",
    "to": 246
  }, {
    "from": 207,
    "label": "represents",
    "to": 247
  }, {
    "from": 207,
    "label": "represents",
    "to": 248
  }, {
    "from": 207,
    "label": "represents",
    "to": 249
  }, {
    "from": 207,
    "label": "represents",
    "to": 250
  }, {
    "from": 211,
    "label": "contains",
    "to": 2
  }, {
    "from": 242,
    "label": "contains",
    "to": 3
  }, {
    "from": 244,
    "label": "contains",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ftp",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(table, key)\r\n        table[key] = function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end\r\n        return table[key]\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function _M.open(server, port, create)\r\n    local tp = socket.try(tp.connect(server, port or _M.PORT, _M.TIMEOUT, create))\r\n    local f = base.setmetatable({ tp = tp }, metat)\r\n    -- make sure everything gets closed in an exception\r\n    f.try = socket.newtry(function() f:close() end)\r\n    return f\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local tp = socket.try(tp.connect(server, port or _M.PORT, _M.TIMEOUT, create))",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local f = base.setmetatable({ tp = tp }, metat)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "f.try = socket.newtry(function() f:close() end)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function metat.__index:portconnect()\r\n    self.try(self.server:settimeout(_M.TIMEOUT))\r\n    self.data = self.try(self.server:accept())\r\n    self.try(self.data:settimeout(_M.TIMEOUT))\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "self.try(self.server:settimeout(_M.TIMEOUT))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "self.data = self.try(self.server:accept())",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "self.try(self.data:settimeout(_M.TIMEOUT))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function metat.__index:pasvconnect()\r\n    self.data = self.try(socket.tcp())\r\n    self.try(self.data:settimeout(_M.TIMEOUT))\r\n    self.try(self.data:connect(self.pasvt.ip, self.pasvt.port))\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "self.data = self.try(socket.tcp())",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "self.try(self.data:connect(self.pasvt.ip, self.pasvt.port))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function metat.__index:login(user, password)\r\n    self.try(self.tp:command(\"user\", user or _M.USER))\r\n    local code, reply = self.try(self.tp:check{\"2..\", 331})\r\n    if code == 331 then\r\n        self.try(self.tp:command(\"pass\", password or _M.PASSWORD))\r\n        self.try(self.tp:check(\"2..\"))\r\n    end\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "self.try(self.tp:command(\"user\", user or _M.USER))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "local code, reply = self.try(self.tp:check{\"2..\", 331})",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if code == 331 then\r\n        self.try(self.tp:command(\"pass\", password or _M.PASSWORD))\r\n        self.try(self.tp:check(\"2..\"))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "self.try(self.tp:command(\"pass\", password or _M.PASSWORD))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "self.try(self.tp:check(\"2..\"))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function metat.__index:pasv()\r\n    self.try(self.tp:command(\"pasv\"))\r\n    local code, reply = self.try(self.tp:check(\"2..\"))\r\n    local pattern = \"(%d+)%D(%d+)%D(%d+)%D(%d+)%D(%d+)%D(%d+)\"\r\n    local a, b, c, d, p1, p2 = socket.skip(2, string.find(reply, pattern))\r\n    self.try(a and b and c and d and p1 and p2, reply)\r\n    self.pasvt = {\r\n        ip = string.format(\"%d.%d.%d.%d\", a, b, c, d),\r\n        port = p1*256 + p2\r\n    }\r\n    if self.server then\r\n        self.server:close()\r\n        self.server = nil\r\n    end\r\n    return self.pasvt.ip, self.pasvt.port\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "self.try(self.tp:command(\"pasv\"))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local code, reply = self.try(self.tp:check(\"2..\"))",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local pattern = \"(%d+)%D(%d+)%D(%d+)%D(%d+)%D(%d+)%D(%d+)\"",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local a, b, c, d, p1, p2 = socket.skip(2, string.find(reply, pattern))",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "self.try(a and b and c and d and p1 and p2, reply)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "self.pasvt = {\r\n        ip = string.format(\"%d.%d.%d.%d\", a, b, c, d),\r\n        port = p1*256 + p2\r\n    }",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if self.server then\r\n        self.server:close()\r\n        self.server = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "self.server:close()",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "self.server = nil",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function metat.__index:port(ip, port)\r\n    self.pasvt = nil\r\n    if not ip then\r\n        ip, port = self.try(self.tp:getcontrol():getsockname())\r\n        self.server = self.try(socket.bind(ip, 0))\r\n        ip, port = self.try(self.server:getsockname())\r\n        self.try(self.server:settimeout(_M.TIMEOUT))\r\n    end\r\n    local pl = math.mod(port, 256)\r\n    local ph = (port - pl)/256\r\n    local arg = string.gsub(string.format(\"%s,%d,%d\", ip, ph, pl), \"%.\", \",\")\r\n    self.try(self.tp:command(\"port\", arg))\r\n    self.try(self.tp:check(\"2..\"))\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "self.pasvt = nil",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if not ip then\r\n        ip, port = self.try(self.tp:getcontrol():getsockname())\r\n        self.server = self.try(socket.bind(ip, 0))\r\n        ip, port = self.try(self.server:getsockname())\r\n        self.try(self.server:settimeout(_M.TIMEOUT))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "ip, port = self.try(self.tp:getcontrol():getsockname())",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "self.server = self.try(socket.bind(ip, 0))",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "ip, port = self.try(self.server:getsockname())",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "local pl = math.mod(port, 256)",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local ph = (port - pl)/256",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local arg = string.gsub(string.format(\"%s,%d,%d\", ip, ph, pl), \"%.\", \",\")",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "self.try(self.tp:command(\"port\", arg))",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function metat.__index:send(sendt)\r\n    self.try(self.pasvt or self.server, \"need port or pasv first\")\r\n    -- if there is a pasvt table, we already sent a PASV command\r\n    -- we just get the data connection into self.data\r\n    if self.pasvt then self:pasvconnect() end\r\n    -- get the transfer argument and command\r\n    local argument = sendt.argument or\r\n        url.unescape(string.gsub(sendt.path or \"\", \"^[/\\\\]\", \"\"))\r\n    if argument == \"\" then argument = nil end\r\n    local command = sendt.command or \"stor\"\r\n    -- send the transfer command and check the reply\r\n    self.try(self.tp:command(command, argument))\r\n    local code, reply = self.try(self.tp:check{\"2..\", \"1..\"})\r\n    -- if there is not a a pasvt table, then there is a server\r\n    -- and we already sent a PORT command\r\n    if not self.pasvt then self:portconnect() end\r\n    -- get the sink, source and step for the transfer\r\n    local step = sendt.step or ltn12.pump.step\r\n    local readt = {self.tp.c}\r\n    local checkstep = function(src, snk)\r\n        -- check status in control connection while downloading\r\n        local readyt = socket.select(readt, nil, 0)\r\n        if readyt[tp] then code = self.try(self.tp:check(\"2..\")) end\r\n        return step(src, snk)\r\n    end\r\n    local sink = socket.sink(\"close-when-done\", self.data)\r\n    -- transfer all data and check error\r\n    self.try(ltn12.pump.all(sendt.source, sink, checkstep))\r\n    if string.find(code, \"1..\") then self.try(self.tp:check(\"2..\")) end\r\n    -- done with data connection\r\n    self.data:close()\r\n    -- find out how many bytes were sent\r\n    local sent = socket.skip(1, self.data:getstats())\r\n    self.data = nil\r\n    return sent\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "self.try(self.pasvt or self.server, \"need port or pasv first\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "if self.pasvt then self:pasvconnect() end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "self:pasvconnect()",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local argument = sendt.argument or\r\n        url.unescape(string.gsub(sendt.path or \"\", \"^[/\\\\]\", \"\"))",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if argument == \"\" then argument = nil end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "argument = nil",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local command = sendt.command or \"stor\"",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "self.try(self.tp:command(command, argument))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "local code, reply = self.try(self.tp:check{\"2..\", \"1..\"})",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if not self.pasvt then self:portconnect() end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "self:portconnect()",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local step = sendt.step or ltn12.pump.step",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local readt = {self.tp.c}",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "local checkstep = function(src, snk)\r\n        -- check status in control connection while downloading\r\n        local readyt = socket.select(readt, nil, 0)\r\n        if readyt[tp] then code = self.try(self.tp:check(\"2..\")) end\r\n        return step(src, snk)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local readyt = socket.select(readt, nil, 0)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if readyt[tp] then code = self.try(self.tp:check(\"2..\")) end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "code = self.try(self.tp:check(\"2..\"))",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local sink = socket.sink(\"close-when-done\", self.data)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "self.try(ltn12.pump.all(sendt.source, sink, checkstep))",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "if string.find(code, \"1..\") then self.try(self.tp:check(\"2..\")) end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "self.data:close()",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "local sent = socket.skip(1, self.data:getstats())",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "self.data = nil",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function(src, snk)\r\n        -- check status in control connection while downloading\r\n        local readyt = socket.select(readt, nil, 0)\r\n        if readyt[tp] then code = self.try(self.tp:check(\"2..\")) end\r\n        return step(src, snk)\r\n    end",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function metat.__index:receive(recvt)\r\n    self.try(self.pasvt or self.server, \"need port or pasv first\")\r\n    if self.pasvt then self:pasvconnect() end\r\n    local argument = recvt.argument or\r\n        url.unescape(string.gsub(recvt.path or \"\", \"^[/\\\\]\", \"\"))\r\n    if argument == \"\" then argument = nil end\r\n    local command = recvt.command or \"retr\"\r\n    self.try(self.tp:command(command, argument))\r\n    local code,reply = self.try(self.tp:check{\"1..\", \"2..\"})\r\n    if (code >= 200) and (code <= 299) then\r\n        recvt.sink(reply)\r\n        return 1\r\n    end\r\n    if not self.pasvt then self:portconnect() end\r\n    local source = socket.source(\"until-closed\", self.data)\r\n    local step = recvt.step or ltn12.pump.step\r\n    self.try(ltn12.pump.all(source, recvt.sink, step))\r\n    if string.find(code, \"1..\") then self.try(self.tp:check(\"2..\")) end\r\n    self.data:close()\r\n    self.data = nil\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "local argument = recvt.argument or\r\n        url.unescape(string.gsub(recvt.path or \"\", \"^[/\\\\]\", \"\"))",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local command = recvt.command or \"retr\"",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local code,reply = self.try(self.tp:check{\"1..\", \"2..\"})",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if (code >= 200) and (code <= 299) then\r\n        recvt.sink(reply)\r\n        return 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "recvt.sink(reply)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "local source = socket.source(\"until-closed\", self.data)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "local step = recvt.step or ltn12.pump.step",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "self.try(ltn12.pump.all(source, recvt.sink, step))",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function metat.__index:cwd(dir)\r\n    self.try(self.tp:command(\"cwd\", dir))\r\n    self.try(self.tp:check(250))\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "self.try(self.tp:command(\"cwd\", dir))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "self.try(self.tp:check(250))",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function metat.__index:type(type)\r\n    self.try(self.tp:command(\"type\", type))\r\n    self.try(self.tp:check(200))\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "self.try(self.tp:command(\"type\", type))",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "self.try(self.tp:check(200))",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function metat.__index:greet()\r\n    local code = self.try(self.tp:check{\"1..\", \"2..\"})\r\n    if string.find(code, \"1..\") then self.try(self.tp:check(\"2..\")) end\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "local code = self.try(self.tp:check{\"1..\", \"2..\"})",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function metat.__index:quit()\r\n    self.try(self.tp:command(\"quit\"))\r\n    self.try(self.tp:check(\"2..\"))\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 97,
    "text": "self.try(self.tp:command(\"quit\"))",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function metat.__index:close()\r\n    if self.data then self.data:close() end\r\n    if self.server then self.server:close() end\r\n    return self.tp:close()\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "if self.data then self.data:close() end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "if self.server then self.server:close() end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "local function override(t)\r\n    if t.url then\r\n        local u = url.parse(t.url)\r\n        for i,v in base.pairs(t) do\r\n            u[i] = v\r\n        end\r\n        return u\r\n    else return t end\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "if t.url then\r\n        local u = url.parse(t.url)\r\n        for i,v in base.pairs(t) do\r\n            u[i] = v\r\n        end\r\n        return u\r\n    else return t end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "local u = url.parse(t.url)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "for i,v in base.pairs(t) do\r\n            u[i] = v\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 107,
    "text": "u[i] = v",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "local function tput(putt)\r\n    putt = override(putt)\r\n    socket.try(putt.host, \"missing hostname\")\r\n    local f = _M.open(putt.host, putt.port, putt.create)\r\n    f:greet()\r\n    f:login(putt.user, putt.password)\r\n    if putt.type then f:type(putt.type) end\r\n    f:pasv()\r\n    local sent = f:send(putt)\r\n    f:quit()\r\n    f:close()\r\n    return sent\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "putt = override(putt)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "socket.try(putt.host, \"missing hostname\")",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "local f = _M.open(putt.host, putt.port, putt.create)",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "f:greet()",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "f:login(putt.user, putt.password)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "if putt.type then f:type(putt.type) end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "f:type(putt.type)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "f:pasv()",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "local sent = f:send(putt)",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "f:quit()",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "local function parse(u)\r\n    local t = socket.try(url.parse(u, default))\r\n    socket.try(t.scheme == \"ftp\", \"wrong scheme '\" .. t.scheme .. \"'\")\r\n    socket.try(t.host, \"missing hostname\")\r\n    local pat = \"^type=(.)$\"\r\n    if t.params then\r\n        t.type = socket.skip(2, string.find(t.params, pat))\r\n        socket.try(t.type == \"a\" or t.type == \"i\",\r\n            \"invalid type '\" .. t.type .. \"'\")\r\n    end\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 122,
    "text": "local t = socket.try(url.parse(u, default))",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "socket.try(t.scheme == \"ftp\", \"wrong scheme '\" .. t.scheme .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "socket.try(t.host, \"missing hostname\")",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "local pat = \"^type=(.)$\"",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if t.params then\r\n        t.type = socket.skip(2, string.find(t.params, pat))\r\n        socket.try(t.type == \"a\" or t.type == \"i\",\r\n            \"invalid type '\" .. t.type .. \"'\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "t.type = socket.skip(2, string.find(t.params, pat))",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "socket.try(t.type == \"a\" or t.type == \"i\",\r\n            \"invalid type '\" .. t.type .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "local function sput(u, body)\r\n    local putt = parse(u)\r\n    putt.source = ltn12.source.string(body)\r\n    return tput(putt)\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "local putt = parse(u)",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "putt.source = ltn12.source.string(body)",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "local function tget(gett)\r\n    gett = override(gett)\r\n    socket.try(gett.host, \"missing hostname\")\r\n    local f = _M.open(gett.host, gett.port, gett.create)\r\n    f:greet()\r\n    f:login(gett.user, gett.password)\r\n    if gett.type then f:type(gett.type) end\r\n    f:pasv()\r\n    f:receive(gett)\r\n    f:quit()\r\n    return f:close()\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "gett = override(gett)",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "socket.try(gett.host, \"missing hostname\")",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "local f = _M.open(gett.host, gett.port, gett.create)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "f:login(gett.user, gett.password)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "if gett.type then f:type(gett.type) end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "f:type(gett.type)",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "f:receive(gett)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "local function sget(u)\r\n    local gett = parse(u)\r\n    local t = {}\r\n    gett.sink = ltn12.sink.table(t)\r\n    tget(gett)\r\n    return table.concat(t)\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "local gett = parse(u)",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "gett.sink = ltn12.sink.table(t)",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "tget(gett)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function() f:close() end",
    "type": "function"
  }, {
    "id": 150,
    "text": "function(putt, body)\r\n    if base.type(putt) == \"string\" then return sput(putt, body)\r\n    else return tput(putt) end\r\nend",
    "type": "function"
  }, {
    "id": 151,
    "text": "if base.type(putt) == \"string\" then return sput(putt, body)\r\n    else return tput(putt) end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function(cmdt)\r\n    cmdt = override(cmdt)\r\n    socket.try(cmdt.host, \"missing hostname\")\r\n    socket.try(cmdt.command, \"missing command\")\r\n    local f = open(cmdt.host, cmdt.port, cmdt.create)\r\n    f:greet()\r\n    f:login(cmdt.user, cmdt.password)\r\n    f.try(f.tp:command(cmdt.command, cmdt.argument))\r\n    if cmdt.check then f.try(f.tp:check(cmdt.check)) end\r\n    f:quit()\r\n    return f:close()\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "cmdt = override(cmdt)",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "socket.try(cmdt.host, \"missing hostname\")",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "socket.try(cmdt.command, \"missing command\")",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "local f = open(cmdt.host, cmdt.port, cmdt.create)",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "f:login(cmdt.user, cmdt.password)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "f.try(f.tp:command(cmdt.command, cmdt.argument))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "if cmdt.check then f.try(f.tp:check(cmdt.check)) end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "f.try(f.tp:check(cmdt.check))",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function(gett)\r\n    if base.type(gett) == \"string\" then return sget(gett)\r\n    else return tget(gett) end\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "if base.type(gett) == \"string\" then return sget(gett)\r\n    else return tget(gett) end",
    "type": "statement:if"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "",
    "type": "function container"
  }, {
    "id": 167,
    "text": "function source.string(s)\r\n    if s then\r\n        local i = 1\r\n        return function()\r\n            local chunk = string.sub(s, i, i+_M.BLOCKSIZE-1)\r\n            i = i + _M.BLOCKSIZE\r\n            if chunk ~= \"\" then return chunk\r\n            else return nil end\r\n        end\r\n    else return source.empty() end\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "function sink.table(t)\r\n    t = t or {}\r\n    local f = function(chunk, err)\r\n        if chunk then table.insert(t, chunk) end\r\n        return 1\r\n    end\r\n    return f, t\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "function pump.all(src, snk, step)\r\n    base.assert(src and snk)\r\n    step = step or pump.step\r\n    while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "source",
    "type": "global function"
  }, {
    "id": 171,
    "text": "find",
    "type": "global function"
  }, {
    "id": 172,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 173,
    "text": "format",
    "type": "global function"
  }, {
    "id": 174,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 175,
    "text": "newtry",
    "type": "global function"
  }, {
    "id": 176,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 177,
    "text": "protect",
    "type": "global function"
  }, {
    "id": 178,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 179,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 180,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 181,
    "text": "unescape",
    "type": "global function"
  }, {
    "id": 182,
    "text": "tcp",
    "type": "global function"
  }, {
    "id": 183,
    "text": "select",
    "type": "global function"
  }, {
    "id": 184,
    "text": "try",
    "type": "global function"
  }, {
    "id": 185,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 186,
    "text": "sink",
    "type": "global function"
  }, {
    "id": 187,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 188,
    "text": "sink",
    "type": "global function"
  }, {
    "id": 189,
    "text": "step",
    "type": "global function"
  }, {
    "id": 190,
    "text": "type",
    "type": "global function"
  }, {
    "id": 191,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 192,
    "text": "try",
    "type": "global function"
  }, {
    "id": 193,
    "text": "open",
    "type": "global function"
  }, {
    "id": 194,
    "text": "try",
    "type": "global function"
  }, {
    "id": 195,
    "text": "require",
    "type": "global function"
  }, {
    "id": 196,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 197,
    "text": "url)",
    "type": "module"
  }, {
    "id": 198,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 199,
    "text": "(table)",
    "type": "module"
  }, {
    "id": 200,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 201,
    "text": "tp)",
    "type": "module"
  }, {
    "id": 202,
    "text": "(math)",
    "type": "module"
  }, {
    "id": 203,
    "text": "",
    "type": "variable container"
  }, {
    "id": 204,
    "text": "",
    "type": "require container"
  }, {
    "id": 205,
    "text": "",
    "type": "local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "n/a"
  }, {
    "id": 207,
    "text": "",
    "type": "local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "n/a"
  }, {
    "id": 209,
    "text": "",
    "type": "local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 211,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 212,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 213,
    "text": "",
    "type": "local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 215,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 216,
    "text": "",
    "type": "string"
  }, {
    "id": 217,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 218,
    "text": "",
    "type": "string"
  }, {
    "id": 219,
    "text": "",
    "type": "global variable"
  }, {
    "id": 220,
    "text": "",
    "type": "n/a"
  }, {
    "id": 221,
    "text": "",
    "type": "global variable"
  }, {
    "id": 222,
    "text": "",
    "type": "global variable"
  }, {
    "id": 223,
    "text": "",
    "type": "global variable"
  }, {
    "id": 224,
    "text": "",
    "type": "global variable"
  }, {
    "id": 225,
    "text": "",
    "type": "global variable"
  }, {
    "id": 226,
    "text": "",
    "type": "n/a"
  }, {
    "id": 227,
    "text": "",
    "type": "global variable"
  }, {
    "id": 228,
    "text": "",
    "type": "n/a"
  }, {
    "id": 229,
    "text": "",
    "type": "global variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 236,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 237,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "interface container"
  }, {
    "id": 239,
    "text": "",
    "type": "interface"
  }, {
    "id": 240,
    "text": "",
    "type": "interface"
  }, {
    "id": 241,
    "text": "",
    "type": "interface"
  }, {
    "id": 242,
    "text": "",
    "type": "local variable"
  }, {
    "id": 243,
    "text": "",
    "type": "interface"
  }, {
    "id": 244,
    "text": "",
    "type": "local variable"
  }, {
    "id": 245,
    "text": "",
    "type": "interface"
  }, {
    "id": 246,
    "text": "",
    "type": "interface"
  }, {
    "id": 247,
    "text": "",
    "type": "interface"
  }, {
    "id": 248,
    "text": "",
    "type": "interface"
  }, {
    "id": 249,
    "text": "",
    "type": "interface"
  }, {
    "id": 250,
    "text": "",
    "type": "interface"
  } ]
}