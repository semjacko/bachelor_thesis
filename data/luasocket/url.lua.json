{
  "_filename": "url.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/src/url.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 3
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 25,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 30,
    "label": "has",
    "to": 47
  }, {
    "from": 30,
    "label": "has",
    "to": 48
  }, {
    "from": 30,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 30,
    "label": "has",
    "to": 55
  }, {
    "from": 30,
    "label": "has",
    "to": 56
  }, {
    "from": 30,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 59
  }, {
    "from": 30,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 47
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 55
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 68,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 61,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 61,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 61,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 87,
    "label": "has",
    "to": 3
  }, {
    "from": 87,
    "label": "has",
    "to": 3
  }, {
    "from": 87,
    "label": "has",
    "to": 3
  }, {
    "from": 87,
    "label": "has",
    "to": 3
  }, {
    "from": 87,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 31
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 105,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 105,
    "label": "has",
    "to": 3
  }, {
    "from": 105,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 122
  }, {
    "from": 116,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 3
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 11
  }, {
    "from": 135,
    "label": "has",
    "to": 3
  }, {
    "from": 135,
    "label": "has",
    "to": 3
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 3
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 20
  }, {
    "from": 139,
    "label": "has",
    "to": 3
  }, {
    "from": 139,
    "label": "has",
    "to": 3
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 26
  }, {
    "from": 141,
    "label": "has",
    "to": 3
  }, {
    "from": 141,
    "label": "has",
    "to": 3
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 28
  }, {
    "from": 143,
    "label": "has",
    "to": 3
  }, {
    "from": 143,
    "label": "has",
    "to": 3
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 36
  }, {
    "from": 145,
    "label": "has",
    "to": 3
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 38
  }, {
    "from": 147,
    "label": "has",
    "to": 3
  }, {
    "from": 148,
    "label": "has",
    "to": 40
  }, {
    "from": 148,
    "label": "has",
    "to": 3
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 42
  }, {
    "from": 150,
    "label": "has",
    "to": 3
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 44
  }, {
    "from": 152,
    "label": "has",
    "to": 3
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 50
  }, {
    "from": 154,
    "label": "has",
    "to": 3
  }, {
    "from": 155,
    "label": "has",
    "to": 52
  }, {
    "from": 155,
    "label": "has",
    "to": 3
  }, {
    "from": 156,
    "label": "has",
    "to": 58
  }, {
    "from": 156,
    "label": "has",
    "to": 3
  }, {
    "from": 157,
    "label": "has",
    "to": 108
  }, {
    "from": 2,
    "label": "calls",
    "to": 161
  }, {
    "from": 10,
    "label": "calls",
    "to": 161
  }, {
    "from": 87,
    "label": "calls",
    "to": 15
  }, {
    "from": 87,
    "label": "calls",
    "to": 61
  }, {
    "from": 87,
    "label": "calls",
    "to": 61
  }, {
    "from": 87,
    "label": "calls",
    "to": 30
  }, {
    "from": 87,
    "label": "calls",
    "to": 30
  }, {
    "from": 5,
    "label": "calls",
    "to": 169
  }, {
    "from": 61,
    "label": "calls",
    "to": 159
  }, {
    "from": 158,
    "label": "calls",
    "to": 5
  }, {
    "from": 116,
    "label": "calls",
    "to": 10
  }, {
    "from": 116,
    "label": "calls",
    "to": 10
  }, {
    "from": 15,
    "label": "calls",
    "to": 165
  }, {
    "from": 105,
    "label": "calls",
    "to": 165
  }, {
    "from": 105,
    "label": "calls",
    "to": 165
  }, {
    "from": 87,
    "label": "calls",
    "to": 167
  }, {
    "from": 61,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 166
  }, {
    "from": 30,
    "label": "calls",
    "to": 168
  }, {
    "from": 13,
    "label": "calls",
    "to": 170
  }, {
    "from": 2,
    "label": "calls",
    "to": 160
  }, {
    "from": 10,
    "label": "calls",
    "to": 160
  }, {
    "from": 13,
    "label": "calls",
    "to": 163
  }, {
    "from": 30,
    "label": "calls",
    "to": 164
  }, {
    "from": 61,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 162
  }, {
    "from": 10,
    "label": "calls",
    "to": 162
  }, {
    "from": 13,
    "label": "calls",
    "to": 162
  }, {
    "from": 15,
    "label": "calls",
    "to": 162
  }, {
    "from": 15,
    "label": "calls",
    "to": 162
  }, {
    "from": 15,
    "label": "calls",
    "to": 162
  }, {
    "from": 15,
    "label": "calls",
    "to": 162
  }, {
    "from": 15,
    "label": "calls",
    "to": 162
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 30,
    "label": "calls",
    "to": 162
  }, {
    "from": 105,
    "label": "calls",
    "to": 162
  }, {
    "from": 158,
    "label": "calls",
    "to": 171
  }, {
    "from": 158,
    "label": "calls",
    "to": 171
  }, {
    "from": 158,
    "label": "calls",
    "to": 171
  }, {
    "from": 105,
    "label": "calls",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 158
  }, {
    "from": 158,
    "label": "declares",
    "to": 2
  }, {
    "from": 158,
    "label": "declares",
    "to": 5
  }, {
    "from": 158,
    "label": "declares",
    "to": 10
  }, {
    "from": 158,
    "label": "declares",
    "to": 13
  }, {
    "from": 158,
    "label": "declares",
    "to": 15
  }, {
    "from": 158,
    "label": "declares",
    "to": 30
  }, {
    "from": 158,
    "label": "declares",
    "to": 61
  }, {
    "from": 158,
    "label": "declares",
    "to": 87
  }, {
    "from": 158,
    "label": "declares",
    "to": 105
  }, {
    "from": 158,
    "label": "declares",
    "to": 116
  }, {
    "from": 158,
    "label": "declares",
    "to": 133
  }, {
    "from": 158,
    "label": "declares",
    "to": 135
  }, {
    "from": 158,
    "label": "declares",
    "to": 137
  }, {
    "from": 158,
    "label": "declares",
    "to": 139
  }, {
    "from": 158,
    "label": "declares",
    "to": 141
  }, {
    "from": 158,
    "label": "declares",
    "to": 143
  }, {
    "from": 158,
    "label": "declares",
    "to": 145
  }, {
    "from": 158,
    "label": "declares",
    "to": 147
  }, {
    "from": 158,
    "label": "declares",
    "to": 148
  }, {
    "from": 158,
    "label": "declares",
    "to": 150
  }, {
    "from": 158,
    "label": "declares",
    "to": 152
  }, {
    "from": 158,
    "label": "declares",
    "to": 154
  }, {
    "from": 158,
    "label": "declares",
    "to": 155
  }, {
    "from": 158,
    "label": "declares",
    "to": 156
  }, {
    "from": 158,
    "label": "declares",
    "to": 157
  }, {
    "from": 172,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 179
  }, {
    "from": 1,
    "label": "contains",
    "to": 180
  }, {
    "from": 179,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 179,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 179,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 179,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 179,
    "label": "initializes",
    "to": 189
  }, {
    "from": 180,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "requires",
    "to": 173
  }, {
    "from": 180,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "requires",
    "to": 174
  }, {
    "from": 180,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "requires",
    "to": 175
  }, {
    "from": 1,
    "label": "provides",
    "to": 193
  }, {
    "from": 176,
    "label": "represents",
    "to": 194
  }, {
    "from": 193,
    "label": "provides",
    "to": 194
  }, {
    "from": 177,
    "label": "contains",
    "to": 2
  }, {
    "from": 178,
    "label": "contains",
    "to": 2
  }, {
    "from": 177,
    "label": "contains",
    "to": 13
  }, {
    "from": 178,
    "label": "contains",
    "to": 13
  }, {
    "from": 177,
    "label": "contains",
    "to": 30
  }, {
    "from": 178,
    "label": "contains",
    "to": 30
  }, {
    "from": 177,
    "label": "contains",
    "to": 61
  }, {
    "from": 178,
    "label": "contains",
    "to": 61
  }, {
    "from": 177,
    "label": "contains",
    "to": 87
  }, {
    "from": 178,
    "label": "contains",
    "to": 87
  }, {
    "from": 177,
    "label": "contains",
    "to": 105
  }, {
    "from": 178,
    "label": "contains",
    "to": 105
  }, {
    "from": 177,
    "label": "contains",
    "to": 116
  }, {
    "from": 178,
    "label": "contains",
    "to": 116
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 157
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "url",
    "type": "module"
  }, {
    "id": 2,
    "text": "function _M.escape(s)\r\n    return (string.gsub(s, \"([^A-Za-z0-9_])\", function(c)\r\n        return string.format(\"%%%02x\", string.byte(c))\r\n    end))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function make_set(t)\r\n    local s = {}\r\n    for i,v in base.ipairs(t) do\r\n        s[t[i]] = 1\r\n    end\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local s = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for i,v in base.ipairs(t) do\r\n        s[t[i]] = 1\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "s[t[i]] = 1",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function protect_segment(s)\r\n    return string.gsub(s, \"([^A-Za-z0-9_])\", function (c)\r\n        if segment_set[c] then return c\r\n        else return string.format(\"%%%02x\", string.byte(c)) end\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "if segment_set[c] then return c\r\n        else return string.format(\"%%%02x\", string.byte(c)) end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function _M.unescape(s)\r\n    return (string.gsub(s, \"%%(%x%x)\", function(hex)\r\n        return string.char(base.tonumber(hex, 16))\r\n    end))\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function absolute_path(base_path, relative_path)\r\n    if string.sub(relative_path, 1, 1) == \"/\" then return relative_path end\r\n    local path = string.gsub(base_path, \"[^/]*$\", \"\")\r\n    path = path .. relative_path\r\n    path = string.gsub(path, \"([^/]*%./)\", function (s)\r\n        if s ~= \"./\" then return s else return \"\" end\r\n    end)\r\n    path = string.gsub(path, \"/%.$\", \"/\")\r\n    local reduced\r\n    while reduced ~= path do\r\n        reduced = path\r\n        path = string.gsub(reduced, \"([^/]*/%.%./)\", function (s)\r\n            if s ~= \"../../\" then return \"\" else return s end\r\n        end)\r\n    end\r\n    path = string.gsub(reduced, \"([^/]*/%.%.)$\", function (s)\r\n        if s ~= \"../..\" then return \"\" else return s end\r\n    end)\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "if string.sub(relative_path, 1, 1) == \"/\" then return relative_path end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local path = string.gsub(base_path, \"[^/]*$\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "path = path .. relative_path",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "path = string.gsub(path, \"([^/]*%./)\", function (s)\r\n        if s ~= \"./\" then return s else return \"\" end\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if s ~= \"./\" then return s else return \"\" end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "path = string.gsub(path, \"/%.$\", \"/\")",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "local reduced",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "while reduced ~= path do\r\n        reduced = path\r\n        path = string.gsub(reduced, \"([^/]*/%.%./)\", function (s)\r\n            if s ~= \"../../\" then return \"\" else return s end\r\n        end)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 24,
    "text": "reduced = path",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "path = string.gsub(reduced, \"([^/]*/%.%./)\", function (s)\r\n            if s ~= \"../../\" then return \"\" else return s end\r\n        end)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if s ~= \"../../\" then return \"\" else return s end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "path = string.gsub(reduced, \"([^/]*/%.%.)$\", function (s)\r\n        if s ~= \"../..\" then return \"\" else return s end\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if s ~= \"../..\" then return \"\" else return s end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function _M.parse(url, default)\r\n    -- initialize default parameters\r\n    local parsed = {}\r\n    for i,v in base.pairs(default or parsed) do parsed[i] = v end\r\n    -- empty url is parsed to nil\r\n    if not url or url == \"\" then return nil, \"invalid url\" end\r\n    -- remove whitespace\r\n    -- url = string.gsub(url, \"%s\", \"\")\r\n    -- get fragment\r\n    url = string.gsub(url, \"#(.*)$\", function(f)\r\n        parsed.fragment = f\r\n        return \"\"\r\n    end)\r\n    -- get scheme\r\n    url = string.gsub(url, \"^([%w][%w%+%-%.]*)%:\",\r\n        function(s) parsed.scheme = s; return \"\" end)\r\n    -- get authority\r\n    url = string.gsub(url, \"^//([^/]*)\", function(n)\r\n        parsed.authority = n\r\n        return \"\"\r\n    end)\r\n    -- get query string\r\n    url = string.gsub(url, \"%?(.*)\", function(q)\r\n        parsed.query = q\r\n        return \"\"\r\n    end)\r\n    -- get params\r\n    url = string.gsub(url, \"%;(.*)\", function(p)\r\n        parsed.params = p\r\n        return \"\"\r\n    end)\r\n    -- path is whatever was left\r\n    if url ~= \"\" then parsed.path = url end\r\n    local authority = parsed.authority\r\n    if not authority then return parsed end\r\n    authority = string.gsub(authority,\"^([^@]*)@\",\r\n        function(u) parsed.userinfo = u; return \"\" end)\r\n    authority = string.gsub(authority, \":([^:%]]*)$\",\r\n        function(p) parsed.port = p; return \"\" end)\r\n    if authority ~= \"\" then \r\n        -- IPv6?\r\n        parsed.host = string.match(authority, \"^%[(.+)%]$\") or authority \r\n    end\r\n    local userinfo = parsed.userinfo\r\n    if not userinfo then return parsed end\r\n    userinfo = string.gsub(userinfo, \":([^:]*)$\",\r\n        function(p) parsed.password = p; return \"\" end)\r\n    parsed.user = userinfo\r\n    return parsed\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local parsed = {}",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "for i,v in base.pairs(default or parsed) do parsed[i] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "parsed[i] = v",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if not url or url == \"\" then return nil, \"invalid url\" end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "url = string.gsub(url, \"#(.*)$\", function(f)\r\n        parsed.fragment = f\r\n        return \"\"\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "parsed.fragment = f",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "url = string.gsub(url, \"^([%w][%w%+%-%.]*)%:\",\r\n        function(s) parsed.scheme = s; return \"\" end)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "parsed.scheme = s",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "url = string.gsub(url, \"^//([^/]*)\", function(n)\r\n        parsed.authority = n\r\n        return \"\"\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "parsed.authority = n",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "url = string.gsub(url, \"%?(.*)\", function(q)\r\n        parsed.query = q\r\n        return \"\"\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "parsed.query = q",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "url = string.gsub(url, \"%;(.*)\", function(p)\r\n        parsed.params = p\r\n        return \"\"\r\n    end)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "parsed.params = p",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if url ~= \"\" then parsed.path = url end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "parsed.path = url",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "local authority = parsed.authority",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if not authority then return parsed end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "authority = string.gsub(authority,\"^([^@]*)@\",\r\n        function(u) parsed.userinfo = u; return \"\" end)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "parsed.userinfo = u",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "authority = string.gsub(authority, \":([^:%]]*)$\",\r\n        function(p) parsed.port = p; return \"\" end)",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "parsed.port = p",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if authority ~= \"\" then \r\n        -- IPv6?\r\n        parsed.host = string.match(authority, \"^%[(.+)%]$\") or authority \r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "parsed.host = string.match(authority, \"^%[(.+)%]$\") or authority",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local userinfo = parsed.userinfo",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if not userinfo then return parsed end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "userinfo = string.gsub(userinfo, \":([^:]*)$\",\r\n        function(p) parsed.password = p; return \"\" end)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "parsed.password = p",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "parsed.user = userinfo",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function _M.build(parsed)\r\n    local ppath = _M.parse_path(parsed.path or \"\")\r\n    local url = _M.build_path(ppath)\r\n    if parsed.params then url = url .. \";\" .. parsed.params end\r\n    if parsed.query then url = url .. \"?\" .. parsed.query end\r\n    local authority = parsed.authority\r\n    if parsed.host then\r\n        authority = parsed.host\r\n        if string.find(authority, \":\") then -- IPv6?\r\n            authority = \"[\" .. authority .. \"]\"\r\n        end\r\n        if parsed.port then authority = authority .. \":\" .. parsed.port end\r\n        local userinfo = parsed.userinfo\r\n        if parsed.user then\r\n            userinfo = parsed.user\r\n            if parsed.password then\r\n                userinfo = userinfo .. \":\" .. parsed.password\r\n            end\r\n        end\r\n        if userinfo then authority = userinfo .. \"@\" .. authority end\r\n    end\r\n    if authority then url = \"//\" .. authority .. url end\r\n    if parsed.scheme then url = parsed.scheme .. \":\" .. url end\r\n    if parsed.fragment then url = url .. \"#\" .. parsed.fragment end\r\n    -- url = string.gsub(url, \"%s\", \"\")\r\n    return url\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local ppath = _M.parse_path(parsed.path or \"\")",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local url = _M.build_path(ppath)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if parsed.params then url = url .. \";\" .. parsed.params end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "url = url .. \";\" .. parsed.params",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if parsed.query then url = url .. \"?\" .. parsed.query end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "url = url .. \"?\" .. parsed.query",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if parsed.host then\r\n        authority = parsed.host\r\n        if string.find(authority, \":\") then -- IPv6?\r\n            authority = \"[\" .. authority .. \"]\"\r\n        end\r\n        if parsed.port then authority = authority .. \":\" .. parsed.port end\r\n        local userinfo = parsed.userinfo\r\n        if parsed.user then\r\n            userinfo = parsed.user\r\n            if parsed.password then\r\n                userinfo = userinfo .. \":\" .. parsed.password\r\n            end\r\n        end\r\n        if userinfo then authority = userinfo .. \"@\" .. authority end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "authority = parsed.host",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if string.find(authority, \":\") then -- IPv6?\r\n            authority = \"[\" .. authority .. \"]\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "authority = \"[\" .. authority .. \"]\"",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "if parsed.port then authority = authority .. \":\" .. parsed.port end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "authority = authority .. \":\" .. parsed.port",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "if parsed.user then\r\n            userinfo = parsed.user\r\n            if parsed.password then\r\n                userinfo = userinfo .. \":\" .. parsed.password\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "userinfo = parsed.user",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if parsed.password then\r\n                userinfo = userinfo .. \":\" .. parsed.password\r\n            end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "userinfo = userinfo .. \":\" .. parsed.password",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "if userinfo then authority = userinfo .. \"@\" .. authority end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "authority = userinfo .. \"@\" .. authority",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if authority then url = \"//\" .. authority .. url end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "url = \"//\" .. authority .. url",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if parsed.scheme then url = parsed.scheme .. \":\" .. url end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "url = parsed.scheme .. \":\" .. url",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "if parsed.fragment then url = url .. \"#\" .. parsed.fragment end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "url = url .. \"#\" .. parsed.fragment",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function _M.absolute(base_url, relative_url)\r\n    if base.type(base_url) == \"table\" then\r\n        base_parsed = base_url\r\n        base_url = _M.build(base_parsed)\r\n    else\r\n        base_parsed = _M.parse(base_url)\r\n    end\r\n    local relative_parsed = _M.parse(relative_url)\r\n    if not base_parsed then return relative_url\r\n    elseif not relative_parsed then return base_url\r\n    elseif relative_parsed.scheme then return relative_url\r\n    else\r\n        relative_parsed.scheme = base_parsed.scheme\r\n        if not relative_parsed.authority then\r\n            relative_parsed.authority = base_parsed.authority\r\n            if not relative_parsed.path then\r\n                relative_parsed.path = base_parsed.path\r\n                if not relative_parsed.params then\r\n                    relative_parsed.params = base_parsed.params\r\n                    if not relative_parsed.query then\r\n                        relative_parsed.query = base_parsed.query\r\n                    end\r\n                end\r\n            else    \r\n                relative_parsed.path = absolute_path(base_parsed.path or \"\",\r\n                    relative_parsed.path)\r\n            end\r\n        end\r\n        return _M.build(relative_parsed)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "if base.type(base_url) == \"table\" then\r\n        base_parsed = base_url\r\n        base_url = _M.build(base_parsed)\r\n    else\r\n        base_parsed = _M.parse(base_url)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "base_parsed = base_url",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "base_url = _M.build(base_parsed)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "base_parsed = _M.parse(base_url)",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local relative_parsed = _M.parse(relative_url)",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if not base_parsed then return relative_url\r\n    elseif not relative_parsed then return base_url\r\n    elseif relative_parsed.scheme then return relative_url\r\n    else\r\n        relative_parsed.scheme = base_parsed.scheme\r\n        if not relative_parsed.authority then\r\n            relative_parsed.authority = base_parsed.authority\r\n            if not relative_parsed.path then\r\n                relative_parsed.path = base_parsed.path\r\n                if not relative_parsed.params then\r\n                    relative_parsed.params = base_parsed.params\r\n                    if not relative_parsed.query then\r\n                        relative_parsed.query = base_parsed.query\r\n                    end\r\n                end\r\n            else    \r\n                relative_parsed.path = absolute_path(base_parsed.path or \"\",\r\n                    relative_parsed.path)\r\n            end\r\n        end\r\n        return _M.build(relative_parsed)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "relative_parsed.scheme = base_parsed.scheme",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if not relative_parsed.authority then\r\n            relative_parsed.authority = base_parsed.authority\r\n            if not relative_parsed.path then\r\n                relative_parsed.path = base_parsed.path\r\n                if not relative_parsed.params then\r\n                    relative_parsed.params = base_parsed.params\r\n                    if not relative_parsed.query then\r\n                        relative_parsed.query = base_parsed.query\r\n                    end\r\n                end\r\n            else    \r\n                relative_parsed.path = absolute_path(base_parsed.path or \"\",\r\n                    relative_parsed.path)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "relative_parsed.authority = base_parsed.authority",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if not relative_parsed.path then\r\n                relative_parsed.path = base_parsed.path\r\n                if not relative_parsed.params then\r\n                    relative_parsed.params = base_parsed.params\r\n                    if not relative_parsed.query then\r\n                        relative_parsed.query = base_parsed.query\r\n                    end\r\n                end\r\n            else    \r\n                relative_parsed.path = absolute_path(base_parsed.path or \"\",\r\n                    relative_parsed.path)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "relative_parsed.path = base_parsed.path",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "if not relative_parsed.params then\r\n                    relative_parsed.params = base_parsed.params\r\n                    if not relative_parsed.query then\r\n                        relative_parsed.query = base_parsed.query\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "relative_parsed.params = base_parsed.params",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "if not relative_parsed.query then\r\n                        relative_parsed.query = base_parsed.query\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "relative_parsed.query = base_parsed.query",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "relative_parsed.path = absolute_path(base_parsed.path or \"\",\r\n                    relative_parsed.path)",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function _M.parse_path(path)\r\n    local parsed = {}\r\n    path = path or \"\"\r\n    --path = string.gsub(path, \"%s\", \"\")\r\n    string.gsub(path, \"([^/]+)\", function (s) table.insert(parsed, s) end)\r\n    for i = 1, #parsed do\r\n        parsed[i] = _M.unescape(parsed[i])\r\n    end\r\n    if string.sub(path, 1, 1) == \"/\" then parsed.is_absolute = 1 end\r\n    if string.sub(path, -1, -1) == \"/\" then parsed.is_directory = 1 end\r\n    return parsed\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "path = path or \"\"",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "string.gsub(path, \"([^/]+)\", function (s) table.insert(parsed, s) end)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "table.insert(parsed, s)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "for i = 1, #parsed do\r\n        parsed[i] = _M.unescape(parsed[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 110,
    "text": "parsed[i] = _M.unescape(parsed[i])",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "if string.sub(path, 1, 1) == \"/\" then parsed.is_absolute = 1 end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "parsed.is_absolute = 1",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if string.sub(path, -1, -1) == \"/\" then parsed.is_directory = 1 end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "parsed.is_directory = 1",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function _M.build_path(parsed, unsafe)\r\n    local path = \"\"\r\n    local n = #parsed\r\n    if unsafe then\r\n        for i = 1, n-1 do\r\n            path = path .. parsed[i]\r\n            path = path .. \"/\"\r\n        end\r\n        if n > 0 then\r\n            path = path .. parsed[n]\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end\r\n    else\r\n        for i = 1, n-1 do\r\n            path = path .. protect_segment(parsed[i])\r\n            path = path .. \"/\"\r\n        end\r\n        if n > 0 then\r\n            path = path .. protect_segment(parsed[n])\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end\r\n    end\r\n    if parsed.is_absolute then path = \"/\" .. path end\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "local path = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local n = #parsed",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if unsafe then\r\n        for i = 1, n-1 do\r\n            path = path .. parsed[i]\r\n            path = path .. \"/\"\r\n        end\r\n        if n > 0 then\r\n            path = path .. parsed[n]\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end\r\n    else\r\n        for i = 1, n-1 do\r\n            path = path .. protect_segment(parsed[i])\r\n            path = path .. \"/\"\r\n        end\r\n        if n > 0 then\r\n            path = path .. protect_segment(parsed[n])\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "for i = 1, n-1 do\r\n            path = path .. parsed[i]\r\n            path = path .. \"/\"\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 121,
    "text": "path = path .. parsed[i]",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "path = path .. \"/\"",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "if n > 0 then\r\n            path = path .. parsed[n]\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "path = path .. parsed[n]",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "if parsed.is_directory then path = path .. \"/\" end",
    "type": "statement:if"
  }, {
    "id": 126,
    "text": "for i = 1, n-1 do\r\n            path = path .. protect_segment(parsed[i])\r\n            path = path .. \"/\"\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 127,
    "text": "path = path .. protect_segment(parsed[i])",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "if n > 0 then\r\n            path = path .. protect_segment(parsed[n])\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "path = path .. protect_segment(parsed[n])",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "if parsed.is_absolute then path = \"/\" .. path end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "path = \"/\" .. path",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function(c)\r\n        return string.format(\"%%%02x\", string.byte(c))\r\n    end",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function (c)\r\n        if segment_set[c] then return c\r\n        else return string.format(\"%%%02x\", string.byte(c)) end\r\n    end",
    "type": "function"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function(hex)\r\n        return string.char(base.tonumber(hex, 16))\r\n    end",
    "type": "function"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function (s)\r\n        if s ~= \"./\" then return s else return \"\" end\r\n    end",
    "type": "function"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function (s)\r\n            if s ~= \"../../\" then return \"\" else return s end\r\n        end",
    "type": "function"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function (s)\r\n        if s ~= \"../..\" then return \"\" else return s end\r\n    end",
    "type": "function"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function(f)\r\n        parsed.fragment = f\r\n        return \"\"\r\n    end",
    "type": "function"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function(s) parsed.scheme = s; return \"\" end",
    "type": "function"
  }, {
    "id": 148,
    "text": "function(n)\r\n        parsed.authority = n\r\n        return \"\"\r\n    end",
    "type": "function"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function(q)\r\n        parsed.query = q\r\n        return \"\"\r\n    end",
    "type": "function"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function(p)\r\n        parsed.params = p\r\n        return \"\"\r\n    end",
    "type": "function"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function(u) parsed.userinfo = u; return \"\" end",
    "type": "function"
  }, {
    "id": 155,
    "text": "function(p) parsed.port = p; return \"\" end",
    "type": "function"
  }, {
    "id": 156,
    "text": "function(p) parsed.password = p; return \"\" end",
    "type": "function"
  }, {
    "id": 157,
    "text": "function (s) table.insert(parsed, s) end",
    "type": "function"
  }, {
    "id": 158,
    "text": "",
    "type": "function container"
  }, {
    "id": 159,
    "text": "find",
    "type": "global function"
  }, {
    "id": 160,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 161,
    "text": "format",
    "type": "global function"
  }, {
    "id": 162,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 163,
    "text": "char",
    "type": "global function"
  }, {
    "id": 164,
    "text": "match",
    "type": "global function"
  }, {
    "id": 165,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 166,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 167,
    "text": "type",
    "type": "global function"
  }, {
    "id": 168,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 169,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 170,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 171,
    "text": "require",
    "type": "global function"
  }, {
    "id": 172,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 173,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 174,
    "text": "(table)",
    "type": "module"
  }, {
    "id": 175,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 176,
    "text": "",
    "type": "local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "variable container"
  }, {
    "id": 180,
    "text": "",
    "type": "require container"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "n/a"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "global variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "global variable"
  }, {
    "id": 190,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "interface container"
  }, {
    "id": 194,
    "text": "",
    "type": "interface"
  } ]
}