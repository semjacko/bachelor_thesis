{
  "_filename": "tp.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/src/tp.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 8
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 9
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 9
  }, {
    "from": 27,
    "label": "has",
    "to": 9
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 9
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 9
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 9
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 9
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 9
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 9
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 58
  }, {
    "from": 44,
    "label": "calls",
    "to": 3
  }, {
    "from": 18,
    "label": "calls",
    "to": 65
  }, {
    "from": 18,
    "label": "calls",
    "to": 65
  }, {
    "from": 31,
    "label": "calls",
    "to": 68
  }, {
    "from": 51,
    "label": "calls",
    "to": 64
  }, {
    "from": 44,
    "label": "calls",
    "to": 63
  }, {
    "from": 18,
    "label": "calls",
    "to": 69
  }, {
    "from": 18,
    "label": "calls",
    "to": 69
  }, {
    "from": 18,
    "label": "calls",
    "to": 69
  }, {
    "from": 27,
    "label": "calls",
    "to": 62
  }, {
    "from": 18,
    "label": "calls",
    "to": 66
  }, {
    "from": 4,
    "label": "calls",
    "to": 60
  }, {
    "from": 4,
    "label": "calls",
    "to": 60
  }, {
    "from": 18,
    "label": "calls",
    "to": 60
  }, {
    "from": 18,
    "label": "calls",
    "to": 60
  }, {
    "from": 18,
    "label": "calls",
    "to": 4
  }, {
    "from": 59,
    "label": "calls",
    "to": 70
  }, {
    "from": 59,
    "label": "calls",
    "to": 70
  }, {
    "from": 59,
    "label": "calls",
    "to": 70
  }, {
    "from": 18,
    "label": "calls",
    "to": 67
  }, {
    "from": 4,
    "label": "calls",
    "to": 61
  }, {
    "from": 4,
    "label": "calls",
    "to": 61
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 59,
    "label": "declares",
    "to": 4
  }, {
    "from": 59,
    "label": "declares",
    "to": 18
  }, {
    "from": 59,
    "label": "declares",
    "to": 27
  }, {
    "from": 59,
    "label": "declares",
    "to": 31
  }, {
    "from": 59,
    "label": "declares",
    "to": 34
  }, {
    "from": 59,
    "label": "declares",
    "to": 36
  }, {
    "from": 59,
    "label": "declares",
    "to": 38
  }, {
    "from": 59,
    "label": "declares",
    "to": 40
  }, {
    "from": 59,
    "label": "declares",
    "to": 42
  }, {
    "from": 59,
    "label": "declares",
    "to": 44
  }, {
    "from": 59,
    "label": "declares",
    "to": 48
  }, {
    "from": 59,
    "label": "declares",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 1,
    "label": "contains",
    "to": 78
  }, {
    "from": 77,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 77,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 77,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 77,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 77,
    "label": "initializes",
    "to": 89
  }, {
    "from": 78,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "requires",
    "to": 72
  }, {
    "from": 78,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 73
  }, {
    "from": 78,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "requires",
    "to": 71
  }, {
    "from": 1,
    "label": "provides",
    "to": 93
  }, {
    "from": 74,
    "label": "represents",
    "to": 94
  }, {
    "from": 93,
    "label": "provides",
    "to": 94
  }, {
    "from": 85,
    "label": "contains",
    "to": 2
  }, {
    "from": 75,
    "label": "contains",
    "to": 51
  }, {
    "from": 76,
    "label": "contains",
    "to": 51
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tp",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(table, key)\r\n        table[key] = function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end\r\n        return table[key]\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "function pump.all(src, snk, step)\r\n    base.assert(src and snk)\r\n    step = step or pump.step\r\n    while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function get_reply(c)\r\n    local code, current, sep\r\n    local line, err = c:receive()\r\n    local reply = line\r\n    if err then return nil, err end\r\n    code, sep = socket.skip(2, string.find(line, \"^(%d%d%d)(.?)\"))\r\n    if not code then return nil, \"invalid server reply\" end\r\n    if sep == \"-\" then -- reply is multiline\r\n        repeat\r\n            line, err = c:receive()\r\n            if err then return nil, err end\r\n            current, sep = socket.skip(2, string.find(line, \"^(%d%d%d)(.?)\"))\r\n            reply = reply .. \"\\n\" .. line\r\n        -- reply ends with same code\r\n        until code == current and sep == \" \"\r\n    end\r\n    return code, reply\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local code, current, sep",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local line, err = c:receive()",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local reply = line",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "code, sep = socket.skip(2, string.find(line, \"^(%d%d%d)(.?)\"))",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if not code then return nil, \"invalid server reply\" end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if sep == \"-\" then -- reply is multiline\r\n        repeat\r\n            line, err = c:receive()\r\n            if err then return nil, err end\r\n            current, sep = socket.skip(2, string.find(line, \"^(%d%d%d)(.?)\"))\r\n            reply = reply .. \"\\n\" .. line\r\n        -- reply ends with same code\r\n        until code == current and sep == \" \"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "repeat\r\n            line, err = c:receive()\r\n            if err then return nil, err end\r\n            current, sep = socket.skip(2, string.find(line, \"^(%d%d%d)(.?)\"))\r\n            reply = reply .. \"\\n\" .. line\r\n        -- reply ends with same code\r\n        until code == current and sep == \" \"",
    "type": "statement:repeat"
  }, {
    "id": 14,
    "text": "line, err = c:receive()",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "current, sep = socket.skip(2, string.find(line, \"^(%d%d%d)(.?)\"))",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "reply = reply .. \"\\n\" .. line",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function metat.__index:check(ok)\r\n    local code, reply = get_reply(self.c)\r\n    if not code then return nil, reply end\r\n    if base.type(ok) ~= \"function\" then\r\n        if base.type(ok) == \"table\" then\r\n            for i, v in base.ipairs(ok) do\r\n                if string.find(code, v) then\r\n                    return base.tonumber(code), reply\r\n                end\r\n            end\r\n            return nil, reply\r\n        else\r\n            if string.find(code, ok) then return base.tonumber(code), reply\r\n            else return nil, reply end\r\n        end\r\n    else return ok(base.tonumber(code), reply) end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local code, reply = get_reply(self.c)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not code then return nil, reply end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "if base.type(ok) ~= \"function\" then\r\n        if base.type(ok) == \"table\" then\r\n            for i, v in base.ipairs(ok) do\r\n                if string.find(code, v) then\r\n                    return base.tonumber(code), reply\r\n                end\r\n            end\r\n            return nil, reply\r\n        else\r\n            if string.find(code, ok) then return base.tonumber(code), reply\r\n            else return nil, reply end\r\n        end\r\n    else return ok(base.tonumber(code), reply) end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if base.type(ok) == \"table\" then\r\n            for i, v in base.ipairs(ok) do\r\n                if string.find(code, v) then\r\n                    return base.tonumber(code), reply\r\n                end\r\n            end\r\n            return nil, reply\r\n        else\r\n            if string.find(code, ok) then return base.tonumber(code), reply\r\n            else return nil, reply end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "for i, v in base.ipairs(ok) do\r\n                if string.find(code, v) then\r\n                    return base.tonumber(code), reply\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "if string.find(code, v) then\r\n                    return base.tonumber(code), reply\r\n                end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "if string.find(code, ok) then return base.tonumber(code), reply\r\n            else return nil, reply end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function metat.__index:command(cmd, arg)\r\n    cmd = string.upper(cmd)\r\n    if arg then\r\n        return self.c:send(cmd .. \" \" .. arg.. \"\\r\\n\")\r\n    else\r\n        return self.c:send(cmd .. \"\\r\\n\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "cmd = string.upper(cmd)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if arg then\r\n        return self.c:send(cmd .. \" \" .. arg.. \"\\r\\n\")\r\n    else\r\n        return self.c:send(cmd .. \"\\r\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function metat.__index:sink(snk, pat)\r\n    local chunk, err = c:receive(pat)\r\n    return snk(chunk, err)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local chunk, err = c:receive(pat)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function metat.__index:send(data)\r\n    return self.c:send(data)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function metat.__index:receive(pat)\r\n    return self.c:receive(pat)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function metat.__index:getfd()\r\n    return self.c:getfd()\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function metat.__index:dirty()\r\n    return self.c:dirty()\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function metat.__index:getcontrol()\r\n    return self.c\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function metat.__index:source(source, step)\r\n    local sink = socket.sink(\"keep-open\", self.c)\r\n    local ret, err = ltn12.pump.all(source, sink, step or ltn12.pump.step)\r\n    return ret, err\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local sink = socket.sink(\"keep-open\", self.c)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local ret, err = ltn12.pump.all(source, sink, step or ltn12.pump.step)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function metat.__index:close()\r\n    self.c:close()\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "self.c:close()",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function _M.connect(host, port, timeout, create)\r\n    local c, e = (create or socket.tcp)()\r\n    if not c then return nil, e end\r\n    c:settimeout(timeout or _M.TIMEOUT)\r\n    local r, e = c:connect(host, port)\r\n    if not r then\r\n        c:close()\r\n        return nil, e\r\n    end\r\n    return base.setmetatable({c = c}, metat)\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local c, e = (create or socket.tcp)()",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if not c then return nil, e end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "c:settimeout(timeout or _M.TIMEOUT)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local r, e = c:connect(host, port)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if not r then\r\n        c:close()\r\n        return nil, e\r\n    end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "c:close()",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "",
    "type": "function container"
  }, {
    "id": 60,
    "text": "find",
    "type": "global function"
  }, {
    "id": 61,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 62,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 63,
    "text": "sink",
    "type": "global function"
  }, {
    "id": 64,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 65,
    "text": "type",
    "type": "global function"
  }, {
    "id": 66,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 67,
    "text": "ok",
    "type": "global function"
  }, {
    "id": 68,
    "text": "snk",
    "type": "global function"
  }, {
    "id": 69,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 70,
    "text": "require",
    "type": "global function"
  }, {
    "id": 71,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 72,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 73,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "variable container"
  }, {
    "id": 78,
    "text": "",
    "type": "require container"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 85,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "global variable"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "interface container"
  }, {
    "id": 94,
    "text": "",
    "type": "interface"
  } ]
}