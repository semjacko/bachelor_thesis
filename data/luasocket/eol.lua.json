{
  "_filename": "eol.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/etc/eol.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 7
  }, {
    "from": 2,
    "label": "calls",
    "to": 4
  }, {
    "from": 2,
    "label": "calls",
    "to": 5
  }, {
    "from": 2,
    "label": "calls",
    "to": 8
  }, {
    "from": 2,
    "label": "calls",
    "to": 8
  }, {
    "from": 2,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "calls",
    "to": 6
  }, {
    "from": 1,
    "label": "contains",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 11
  }, {
    "from": 1,
    "label": "contains",
    "to": 12
  }, {
    "from": 11,
    "label": "initializes",
    "to": 13
  }, {
    "from": 13,
    "label": "assigns",
    "to": 14
  }, {
    "from": 11,
    "label": "initializes",
    "to": 15
  }, {
    "from": 15,
    "label": "assigns",
    "to": 16
  }, {
    "from": 11,
    "label": "initializes",
    "to": 17
  }, {
    "from": 17,
    "label": "assigns",
    "to": 18
  }, {
    "from": 11,
    "label": "initializes",
    "to": 19
  }, {
    "from": 19,
    "label": "assigns",
    "to": 20
  }, {
    "from": 12,
    "label": "initializes",
    "to": 21
  }, {
    "from": 21,
    "label": "requires",
    "to": 10
  }, {
    "from": 12,
    "label": "initializes",
    "to": 22
  }, {
    "from": 22,
    "label": "requires",
    "to": 9
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "eol",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "function source.file(handle, io_err)\r\n    if handle then\r\n        return function()\r\n            local chunk = handle:read(_M.BLOCKSIZE)\r\n            if not chunk then handle:close() end\r\n            return chunk\r\n        end\r\n    else return source.error(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function source.chain(src, f)\r\n    base.assert(src and f)\r\n    local last_in, last_out = \"\", \"\"\r\n    local state = \"feeding\"\r\n    local err\r\n    return function()\r\n        if not last_out then\r\n            base.error('source is empty!', 2)\r\n        end\r\n        while true do\r\n            if state == \"feeding\" then\r\n                last_in, err = src()\r\n                if err then return nil, err end\r\n                last_out = f(last_in)\r\n                if not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                elseif last_out ~= \"\" then\r\n                    state = \"eating\"\r\n                    if last_in then last_in = \"\" end\r\n                    return last_out\r\n                end\r\n            else\r\n                last_out = f(last_in)\r\n                if last_out == \"\" then\r\n                    if last_in == \"\" then\r\n                        state = \"feeding\"\r\n                    else\r\n                        base.error('filter returned \"\"')\r\n                    end\r\n                elseif not last_out then\r\n                    if last_in then\r\n                        base.error('filter returned inappropriate nil')\r\n                    else\r\n                        return nil\r\n                    end\r\n                else\r\n                    return last_out\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function sink.file(handle, io_err)\r\n    if handle then\r\n        return function(chunk, err)\r\n            if not chunk then\r\n                handle:close()\r\n                return 1\r\n            else return handle:write(chunk) end\r\n        end\r\n    else return sink.error(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function pump.all(src, snk, step)\r\n    base.assert(src and snk)\r\n    step = step or pump.step\r\n    while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "normalize",
    "type": "global function"
  }, {
    "id": 8,
    "text": "require",
    "type": "global function"
  }, {
    "id": 9,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 10,
    "text": "(mime)",
    "type": "module"
  }, {
    "id": 11,
    "text": "",
    "type": "variable container"
  }, {
    "id": 12,
    "text": "",
    "type": "require container"
  }, {
    "id": 13,
    "text": "",
    "type": "local variable"
  }, {
    "id": 14,
    "text": "",
    "type": "string"
  }, {
    "id": 15,
    "text": "",
    "type": "local variable"
  }, {
    "id": 16,
    "text": "",
    "type": "n/a"
  }, {
    "id": 17,
    "text": "",
    "type": "local variable"
  }, {
    "id": 18,
    "text": "",
    "type": "n/a"
  }, {
    "id": 19,
    "text": "",
    "type": "local variable"
  }, {
    "id": 20,
    "text": "",
    "type": "n/a"
  }, {
    "id": 21,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 22,
    "text": "",
    "type": "require local variable"
  } ]
}