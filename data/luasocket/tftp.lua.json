{
  "_filename": "tftp.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/etc/tftp.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 24,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 24,
    "label": "has",
    "to": 35
  }, {
    "from": 24,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 24,
    "label": "has",
    "to": 40
  }, {
    "from": 24,
    "label": "has",
    "to": 41
  }, {
    "from": 24,
    "label": "has",
    "to": 42
  }, {
    "from": 24,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 43,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 43,
    "label": "has",
    "to": 35
  }, {
    "from": 43,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 39
  }, {
    "from": 43,
    "label": "has",
    "to": 58
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 3
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 65,
    "label": "has",
    "to": 3
  }, {
    "from": 65,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 30
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 24,
    "label": "calls",
    "to": 7
  }, {
    "from": 24,
    "label": "calls",
    "to": 7
  }, {
    "from": 7,
    "label": "calls",
    "to": 86
  }, {
    "from": 24,
    "label": "calls",
    "to": 15
  }, {
    "from": 24,
    "label": "calls",
    "to": 83
  }, {
    "from": 19,
    "label": "calls",
    "to": 81
  }, {
    "from": 75,
    "label": "calls",
    "to": 85
  }, {
    "from": 24,
    "label": "calls",
    "to": 84
  }, {
    "from": 60,
    "label": "calls",
    "to": 87
  }, {
    "from": 75,
    "label": "calls",
    "to": 65
  }, {
    "from": 75,
    "label": "calls",
    "to": 98
  }, {
    "from": 75,
    "label": "calls",
    "to": 98
  }, {
    "from": 75,
    "label": "calls",
    "to": 98
  }, {
    "from": 75,
    "label": "calls",
    "to": 98
  }, {
    "from": 75,
    "label": "calls",
    "to": 98
  }, {
    "from": 75,
    "label": "calls",
    "to": 98
  }, {
    "from": 19,
    "label": "calls",
    "to": 78
  }, {
    "from": 2,
    "label": "calls",
    "to": 95
  }, {
    "from": 2,
    "label": "calls",
    "to": 95
  }, {
    "from": 2,
    "label": "calls",
    "to": 95
  }, {
    "from": 5,
    "label": "calls",
    "to": 95
  }, {
    "from": 5,
    "label": "calls",
    "to": 95
  }, {
    "from": 5,
    "label": "calls",
    "to": 95
  }, {
    "from": 7,
    "label": "calls",
    "to": 95
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 97
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 94
  }, {
    "from": 12,
    "label": "calls",
    "to": 94
  }, {
    "from": 15,
    "label": "calls",
    "to": 94
  }, {
    "from": 15,
    "label": "calls",
    "to": 94
  }, {
    "from": 19,
    "label": "calls",
    "to": 94
  }, {
    "from": 19,
    "label": "calls",
    "to": 94
  }, {
    "from": 24,
    "label": "calls",
    "to": 12
  }, {
    "from": 75,
    "label": "calls",
    "to": 93
  }, {
    "from": 24,
    "label": "calls",
    "to": 91
  }, {
    "from": 24,
    "label": "calls",
    "to": 91
  }, {
    "from": 60,
    "label": "calls",
    "to": 91
  }, {
    "from": 60,
    "label": "calls",
    "to": 91
  }, {
    "from": 60,
    "label": "calls",
    "to": 91
  }, {
    "from": 24,
    "label": "calls",
    "to": 96
  }, {
    "from": 24,
    "label": "calls",
    "to": 96
  }, {
    "from": 24,
    "label": "calls",
    "to": 77
  }, {
    "from": 65,
    "label": "calls",
    "to": 60
  }, {
    "from": 24,
    "label": "calls",
    "to": 19
  }, {
    "from": 24,
    "label": "calls",
    "to": 90
  }, {
    "from": 15,
    "label": "calls",
    "to": 88
  }, {
    "from": 65,
    "label": "calls",
    "to": 24
  }, {
    "from": 75,
    "label": "calls",
    "to": 24
  }, {
    "from": 75,
    "label": "calls",
    "to": 92
  }, {
    "from": 65,
    "label": "calls",
    "to": 76
  }, {
    "from": 24,
    "label": "calls",
    "to": 89
  }, {
    "from": 24,
    "label": "calls",
    "to": 82
  }, {
    "from": 24,
    "label": "calls",
    "to": 79
  }, {
    "from": 65,
    "label": "calls",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 75,
    "label": "declares",
    "to": 2
  }, {
    "from": 75,
    "label": "declares",
    "to": 5
  }, {
    "from": 75,
    "label": "declares",
    "to": 7
  }, {
    "from": 75,
    "label": "declares",
    "to": 12
  }, {
    "from": 75,
    "label": "declares",
    "to": 15
  }, {
    "from": 75,
    "label": "declares",
    "to": 19
  }, {
    "from": 75,
    "label": "declares",
    "to": 24
  }, {
    "from": 75,
    "label": "declares",
    "to": 60
  }, {
    "from": 75,
    "label": "declares",
    "to": 65
  }, {
    "from": 75,
    "label": "declares",
    "to": 71
  }, {
    "from": 75,
    "label": "declares",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 105
  }, {
    "from": 1,
    "label": "contains",
    "to": 106
  }, {
    "from": 105,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 105,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 105,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 105,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 105,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 105,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 105,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 105,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 105,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 124,
    "label": "assigns",
    "to": 126
  }, {
    "from": 124,
    "label": "assigns",
    "to": 127
  }, {
    "from": 124,
    "label": "assigns",
    "to": 128
  }, {
    "from": 124,
    "label": "assigns",
    "to": 129
  }, {
    "from": 105,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 131,
    "label": "assigns",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 131,
    "label": "assigns",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 105,
    "label": "initializes",
    "to": 138
  }, {
    "from": 105,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 106,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "requires",
    "to": 102
  }, {
    "from": 106,
    "label": "initializes",
    "to": 142
  }, {
    "from": 142,
    "label": "requires",
    "to": 104
  }, {
    "from": 106,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "requires",
    "to": 101
  }, {
    "from": 106,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "requires",
    "to": 103
  }, {
    "from": 106,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "requires",
    "to": 99
  }, {
    "from": 106,
    "label": "initializes",
    "to": 146
  }, {
    "from": 146,
    "label": "requires",
    "to": 100
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tftp",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function RRQ(source, mode)\r\n    return char(0, OP_RRQ) .. source .. char(0) .. mode .. char(0)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function WRQ(source, mode)\r\n    return char(0, OP_RRQ) .. source .. char(0) .. mode .. char(0)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function ACK(block)\r\n    local low, high\r\n    low = math.mod(block, 256)\r\n    high = (block - low)/256\r\n    return char(0, OP_ACK, high, low)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local low, high",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "low = math.mod(block, 256)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "high = (block - low)/256",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function get_OP(dgram)\r\n    local op = byte(dgram, 1)*256 + byte(dgram, 2)\r\n    return op\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local op = byte(dgram, 1)*256 + byte(dgram, 2)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function split_DATA(dgram)\r\n    local block = byte(dgram, 3)*256 + byte(dgram, 4)\r\n    local data = string.sub(dgram, 5)\r\n    return block, data\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local block = byte(dgram, 3)*256 + byte(dgram, 4)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local data = string.sub(dgram, 5)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function get_ERROR(dgram)\r\n    local code = byte(dgram, 3)*256 + byte(dgram, 4)\r\n    local msg\r\n    _,_, msg = string.find(dgram, \"(.*)\\000\", 5)\r\n    return string.format(\"error code %d: %s\", code, msg)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local code = byte(dgram, 3)*256 + byte(dgram, 4)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local msg",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "_,_, msg = string.find(dgram, \"(.*)\\000\", 5)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "local function tget(gett)\r\n    local retries, dgram, sent, datahost, dataport, code\r\n    local last = 0\r\n    socket.try(gett.host, \"missing host\")\r\n    local con = socket.try(socket.udp())\r\n    local try = socket.newtry(function() con:close() end)\r\n    -- convert from name to ip if needed\r\n    gett.host = try(socket.dns.toip(gett.host))\r\n    con:settimeout(1)\r\n    -- first packet gives data host/port to be used for data transfers\r\n    local path = string.gsub(gett.path or \"\", \"^/\", \"\")\r\n    path = url.unescape(path)\r\n    retries = 0\r\n    repeat\r\n        sent = try(con:sendto(RRQ(path, \"octet\"), gett.host, gett.port))\r\n        dgram, datahost, dataport = con:receivefrom()\r\n        retries = retries + 1\r\n    until dgram or datahost ~= \"timeout\" or retries > 5\r\n    try(dgram, datahost)\r\n    -- associate socket with data host/port\r\n    try(con:setpeername(datahost, dataport))\r\n    -- default sink\r\n    local sink = gett.sink or ltn12.sink.null()\r\n    -- process all data packets\r\n    while 1 do\r\n        -- decode packet\r\n        code = get_OP(dgram)\r\n        try(code ~= OP_ERROR, get_ERROR(dgram))\r\n        try(code == OP_DATA, \"unhandled opcode \" .. code)\r\n        -- get data packet parts\r\n        local block, data = split_DATA(dgram)\r\n        -- if not repeated, write\r\n        if block == last+1 then\r\n            try(sink(data))\r\n            last = block\r\n        end\r\n        -- last packet brings less than 512 bytes of data\r\n        if string.len(data) < 512 then\r\n            try(con:send(ACK(block)))\r\n            try(con:close())\r\n            try(sink(nil))\r\n            return 1\r\n        end\r\n        -- get the next packet\r\n        retries = 0\r\n        repeat\r\n            sent = try(con:send(ACK(last)))\r\n            dgram, err = con:receive()\r\n            retries = retries + 1\r\n        until dgram or err ~= \"timeout\" or retries > 5\r\n        try(dgram, err)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "local retries, dgram, sent, datahost, dataport, code",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local last = 0",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "socket.try(gett.host, \"missing host\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local con = socket.try(socket.udp())",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local try = socket.newtry(function() con:close() end)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "con:close()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "gett.host = try(socket.dns.toip(gett.host))",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "con:settimeout(1)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "local path = string.gsub(gett.path or \"\", \"^/\", \"\")",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "path = url.unescape(path)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "retries = 0",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "repeat\r\n        sent = try(con:sendto(RRQ(path, \"octet\"), gett.host, gett.port))\r\n        dgram, datahost, dataport = con:receivefrom()\r\n        retries = retries + 1\r\n    until dgram or datahost ~= \"timeout\" or retries > 5",
    "type": "statement:repeat"
  }, {
    "id": 37,
    "text": "sent = try(con:sendto(RRQ(path, \"octet\"), gett.host, gett.port))",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "dgram, datahost, dataport = con:receivefrom()",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "retries = retries + 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "try(dgram, datahost)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "try(con:setpeername(datahost, dataport))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local sink = gett.sink or ltn12.sink.null()",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "while 1 do\r\n        -- decode packet\r\n        code = get_OP(dgram)\r\n        try(code ~= OP_ERROR, get_ERROR(dgram))\r\n        try(code == OP_DATA, \"unhandled opcode \" .. code)\r\n        -- get data packet parts\r\n        local block, data = split_DATA(dgram)\r\n        -- if not repeated, write\r\n        if block == last+1 then\r\n            try(sink(data))\r\n            last = block\r\n        end\r\n        -- last packet brings less than 512 bytes of data\r\n        if string.len(data) < 512 then\r\n            try(con:send(ACK(block)))\r\n            try(con:close())\r\n            try(sink(nil))\r\n            return 1\r\n        end\r\n        -- get the next packet\r\n        retries = 0\r\n        repeat\r\n            sent = try(con:send(ACK(last)))\r\n            dgram, err = con:receive()\r\n            retries = retries + 1\r\n        until dgram or err ~= \"timeout\" or retries > 5\r\n        try(dgram, err)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 44,
    "text": "code = get_OP(dgram)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "try(code ~= OP_ERROR, get_ERROR(dgram))",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "try(code == OP_DATA, \"unhandled opcode \" .. code)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local block, data = split_DATA(dgram)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if block == last+1 then\r\n            try(sink(data))\r\n            last = block\r\n        end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "try(sink(data))",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "last = block",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if string.len(data) < 512 then\r\n            try(con:send(ACK(block)))\r\n            try(con:close())\r\n            try(sink(nil))\r\n            return 1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "try(con:send(ACK(block)))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "try(con:close())",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "try(sink(nil))",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "repeat\r\n            sent = try(con:send(ACK(last)))\r\n            dgram, err = con:receive()\r\n            retries = retries + 1\r\n        until dgram or err ~= \"timeout\" or retries > 5",
    "type": "statement:repeat"
  }, {
    "id": 56,
    "text": "sent = try(con:send(ACK(last)))",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "dgram, err = con:receive()",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "try(dgram, err)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "local function parse(u)\r\n    local t = socket.try(url.parse(u, default))\r\n    socket.try(t.scheme == \"tftp\", \"invalid scheme '\" .. t.scheme .. \"'\")\r\n    socket.try(t.host, \"invalid host\")\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local t = socket.try(url.parse(u, default))",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "socket.try(t.scheme == \"tftp\", \"invalid scheme '\" .. t.scheme .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "socket.try(t.host, \"invalid host\")",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "local function sget(u)\r\n    local gett = parse(u)\r\n    local t = {}\r\n    gett.sink = ltn12.sink.table(t)\r\n    tget(gett)\r\n    return table.concat(t)\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local gett = parse(u)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "gett.sink = ltn12.sink.table(t)",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "tget(gett)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function() con:close() end",
    "type": "function"
  }, {
    "id": 72,
    "text": "function(gett)\r\n    if base.type(gett) == \"string\" then return sget(gett)\r\n    else return tget(gett) end\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "if base.type(gett) == \"string\" then return sget(gett)\r\n    else return tget(gett) end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "",
    "type": "function container"
  }, {
    "id": 76,
    "text": "function sink.table(t)\r\n    t = t or {}\r\n    local f = function(chunk, err)\r\n        if chunk then table.insert(t, chunk) end\r\n        return 1\r\n    end\r\n    return f, t\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "function sink.null()\r\n    return null\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "find",
    "type": "global function"
  }, {
    "id": 79,
    "text": "udp",
    "type": "global function"
  }, {
    "id": 80,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 81,
    "text": "format",
    "type": "global function"
  }, {
    "id": 82,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 83,
    "text": "newtry",
    "type": "global function"
  }, {
    "id": 84,
    "text": "dns.toip",
    "type": "global function"
  }, {
    "id": 85,
    "text": "protect",
    "type": "global function"
  }, {
    "id": 86,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 87,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 88,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 89,
    "text": "len",
    "type": "global function"
  }, {
    "id": 90,
    "text": "unescape",
    "type": "global function"
  }, {
    "id": 91,
    "text": "try",
    "type": "global function"
  }, {
    "id": 92,
    "text": "module",
    "type": "global function"
  }, {
    "id": 93,
    "text": "type",
    "type": "global function"
  }, {
    "id": 94,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 95,
    "text": "char",
    "type": "global function"
  }, {
    "id": 96,
    "text": "sink",
    "type": "global function"
  }, {
    "id": 97,
    "text": "try",
    "type": "global function"
  }, {
    "id": 98,
    "text": "require",
    "type": "global function"
  }, {
    "id": 99,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 100,
    "text": "url)",
    "type": "module"
  }, {
    "id": 101,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 102,
    "text": "(table)",
    "type": "module"
  }, {
    "id": 103,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 104,
    "text": "(math)",
    "type": "module"
  }, {
    "id": 105,
    "text": "",
    "type": "variable container"
  }, {
    "id": 106,
    "text": "",
    "type": "require container"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "number"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "number"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "number"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "number"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "number"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 125,
    "text": "",
    "type": "string"
  }, {
    "id": 126,
    "text": "",
    "type": "string"
  }, {
    "id": 127,
    "text": "",
    "type": "string"
  }, {
    "id": 128,
    "text": "",
    "type": "string"
  }, {
    "id": 129,
    "text": "",
    "type": "string"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 132,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 133,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 134,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 135,
    "text": "",
    "type": "string"
  }, {
    "id": 136,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 137,
    "text": "",
    "type": "string"
  }, {
    "id": 138,
    "text": "",
    "type": "global variable"
  }, {
    "id": 139,
    "text": "",
    "type": "global variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "require local variable"
  } ]
}