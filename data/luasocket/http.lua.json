{
  "_filename": "http.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/src/http.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 7
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 36,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 8
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 8
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 8
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 8
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 8
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 8
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 56
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 69,
    "label": "has",
    "to": 8
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 8
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 8
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 84,
    "label": "has",
    "to": 8
  }, {
    "from": 84,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 8
  }, {
    "from": 89,
    "label": "has",
    "to": 8
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 94,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 94,
    "label": "has",
    "to": 8
  }, {
    "from": 94,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 101,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 101,
    "label": "has",
    "to": 109
  }, {
    "from": 101,
    "label": "has",
    "to": 110
  }, {
    "from": 101,
    "label": "has",
    "to": 8
  }, {
    "from": 101,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 8
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 8
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 8
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 114,
    "label": "has",
    "to": 8
  }, {
    "from": 114,
    "label": "has",
    "to": 8
  }, {
    "from": 114,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 5
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 8
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 123,
    "label": "has",
    "to": 127
  }, {
    "from": 123,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 123,
    "label": "has",
    "to": 130
  }, {
    "from": 123,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 123,
    "label": "has",
    "to": 8
  }, {
    "from": 123,
    "label": "has",
    "to": 133
  }, {
    "from": 123,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 123,
    "label": "has",
    "to": 135
  }, {
    "from": 123,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 40
  }, {
    "from": 123,
    "label": "has",
    "to": 8
  }, {
    "from": 123,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 123,
    "label": "has",
    "to": 40
  }, {
    "from": 123,
    "label": "has",
    "to": 8
  }, {
    "from": 123,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 144,
    "label": "has",
    "to": 146
  }, {
    "from": 144,
    "label": "has",
    "to": 147
  }, {
    "from": 141,
    "label": "has",
    "to": 148
  }, {
    "from": 141,
    "label": "has",
    "to": 8
  }, {
    "from": 141,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 8
  }, {
    "from": 151,
    "label": "has",
    "to": 8
  }, {
    "from": 152,
    "label": "has",
    "to": 22
  }, {
    "from": 152,
    "label": "has",
    "to": 7
  }, {
    "from": 152,
    "label": "has",
    "to": 8
  }, {
    "from": 152,
    "label": "has",
    "to": 23
  }, {
    "from": 152,
    "label": "has",
    "to": 24
  }, {
    "from": 152,
    "label": "has",
    "to": 8
  }, {
    "from": 152,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 152,
    "label": "has",
    "to": 8
  }, {
    "from": 152,
    "label": "has",
    "to": 8
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 154,
    "label": "has",
    "to": 8
  }, {
    "from": 155,
    "label": "has",
    "to": 8
  }, {
    "from": 156,
    "label": "has",
    "to": 33
  }, {
    "from": 156,
    "label": "has",
    "to": 8
  }, {
    "from": 156,
    "label": "has",
    "to": 34
  }, {
    "from": 156,
    "label": "has",
    "to": 8
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 158,
    "label": "has",
    "to": 40
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 8
  }, {
    "from": 159,
    "label": "has",
    "to": 8
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "calls",
    "to": 175
  }, {
    "from": 44,
    "label": "calls",
    "to": 175
  }, {
    "from": 119,
    "label": "calls",
    "to": 170
  }, {
    "from": 162,
    "label": "calls",
    "to": 185
  }, {
    "from": 162,
    "label": "calls",
    "to": 185
  }, {
    "from": 36,
    "label": "calls",
    "to": 185
  }, {
    "from": 123,
    "label": "calls",
    "to": 112
  }, {
    "from": 119,
    "label": "calls",
    "to": 123
  }, {
    "from": 141,
    "label": "calls",
    "to": 123
  }, {
    "from": 162,
    "label": "calls",
    "to": 123
  }, {
    "from": 89,
    "label": "calls",
    "to": 181
  }, {
    "from": 101,
    "label": "calls",
    "to": 181
  }, {
    "from": 123,
    "label": "calls",
    "to": 119
  }, {
    "from": 3,
    "label": "calls",
    "to": 171
  }, {
    "from": 3,
    "label": "calls",
    "to": 171
  }, {
    "from": 61,
    "label": "calls",
    "to": 171
  }, {
    "from": 3,
    "label": "calls",
    "to": 179
  }, {
    "from": 61,
    "label": "calls",
    "to": 179
  }, {
    "from": 141,
    "label": "calls",
    "to": 179
  }, {
    "from": 162,
    "label": "calls",
    "to": 141
  }, {
    "from": 3,
    "label": "calls",
    "to": 173
  }, {
    "from": 94,
    "label": "calls",
    "to": 173
  }, {
    "from": 69,
    "label": "calls",
    "to": 169
  }, {
    "from": 78,
    "label": "calls",
    "to": 169
  }, {
    "from": 101,
    "label": "calls",
    "to": 84
  }, {
    "from": 54,
    "label": "calls",
    "to": 163
  }, {
    "from": 84,
    "label": "calls",
    "to": 172
  }, {
    "from": 101,
    "label": "calls",
    "to": 189
  }, {
    "from": 162,
    "label": "calls",
    "to": 176
  }, {
    "from": 112,
    "label": "calls",
    "to": 176
  }, {
    "from": 162,
    "label": "calls",
    "to": 180
  }, {
    "from": 36,
    "label": "calls",
    "to": 183
  }, {
    "from": 84,
    "label": "calls",
    "to": 183
  }, {
    "from": 101,
    "label": "calls",
    "to": 183
  }, {
    "from": 54,
    "label": "calls",
    "to": 184
  }, {
    "from": 141,
    "label": "calls",
    "to": 164
  }, {
    "from": 78,
    "label": "calls",
    "to": 165
  }, {
    "from": 141,
    "label": "calls",
    "to": 174
  }, {
    "from": 162,
    "label": "calls",
    "to": 192
  }, {
    "from": 162,
    "label": "calls",
    "to": 192
  }, {
    "from": 162,
    "label": "calls",
    "to": 192
  }, {
    "from": 162,
    "label": "calls",
    "to": 192
  }, {
    "from": 162,
    "label": "calls",
    "to": 192
  }, {
    "from": 162,
    "label": "calls",
    "to": 192
  }, {
    "from": 162,
    "label": "calls",
    "to": 192
  }, {
    "from": 101,
    "label": "calls",
    "to": 89
  }, {
    "from": 44,
    "label": "calls",
    "to": 190
  }, {
    "from": 47,
    "label": "calls",
    "to": 190
  }, {
    "from": 54,
    "label": "calls",
    "to": 190
  }, {
    "from": 61,
    "label": "calls",
    "to": 190
  }, {
    "from": 61,
    "label": "calls",
    "to": 190
  }, {
    "from": 61,
    "label": "calls",
    "to": 190
  }, {
    "from": 67,
    "label": "calls",
    "to": 190
  }, {
    "from": 69,
    "label": "calls",
    "to": 190
  }, {
    "from": 78,
    "label": "calls",
    "to": 190
  }, {
    "from": 54,
    "label": "calls",
    "to": 168
  }, {
    "from": 69,
    "label": "calls",
    "to": 168
  }, {
    "from": 78,
    "label": "calls",
    "to": 168
  }, {
    "from": 162,
    "label": "calls",
    "to": 191
  }, {
    "from": 61,
    "label": "calls",
    "to": 191
  }, {
    "from": 69,
    "label": "calls",
    "to": 191
  }, {
    "from": 69,
    "label": "calls",
    "to": 191
  }, {
    "from": 94,
    "label": "calls",
    "to": 178
  }, {
    "from": 162,
    "label": "calls",
    "to": 187
  }, {
    "from": 69,
    "label": "calls",
    "to": 167
  }, {
    "from": 47,
    "label": "calls",
    "to": 188
  }, {
    "from": 94,
    "label": "calls",
    "to": 188
  }, {
    "from": 101,
    "label": "calls",
    "to": 188
  }, {
    "from": 101,
    "label": "calls",
    "to": 94
  }, {
    "from": 162,
    "label": "calls",
    "to": 3
  }, {
    "from": 67,
    "label": "calls",
    "to": 3
  }, {
    "from": 78,
    "label": "calls",
    "to": 186
  }, {
    "from": 36,
    "label": "calls",
    "to": 177
  }, {
    "from": 123,
    "label": "calls",
    "to": 101
  }, {
    "from": 141,
    "label": "calls",
    "to": 166
  }, {
    "from": 162,
    "label": "calls",
    "to": 182
  }, {
    "from": 141,
    "label": "calls",
    "to": 182
  }, {
    "from": 123,
    "label": "calls",
    "to": 114
  }, {
    "from": 36,
    "label": "calls",
    "to": 193
  }, {
    "from": 36,
    "label": "calls",
    "to": 193
  }, {
    "from": 123,
    "label": "calls",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 162
  }, {
    "from": 162,
    "label": "declares",
    "to": 3
  }, {
    "from": 162,
    "label": "declares",
    "to": 21
  }, {
    "from": 162,
    "label": "declares",
    "to": 32
  }, {
    "from": 162,
    "label": "declares",
    "to": 36
  }, {
    "from": 162,
    "label": "declares",
    "to": 44
  }, {
    "from": 162,
    "label": "declares",
    "to": 47
  }, {
    "from": 162,
    "label": "declares",
    "to": 54
  }, {
    "from": 162,
    "label": "declares",
    "to": 61
  }, {
    "from": 162,
    "label": "declares",
    "to": 67
  }, {
    "from": 162,
    "label": "declares",
    "to": 69
  }, {
    "from": 162,
    "label": "declares",
    "to": 78
  }, {
    "from": 162,
    "label": "declares",
    "to": 82
  }, {
    "from": 162,
    "label": "declares",
    "to": 84
  }, {
    "from": 162,
    "label": "declares",
    "to": 89
  }, {
    "from": 162,
    "label": "declares",
    "to": 94
  }, {
    "from": 162,
    "label": "declares",
    "to": 101
  }, {
    "from": 162,
    "label": "declares",
    "to": 112
  }, {
    "from": 162,
    "label": "declares",
    "to": 114
  }, {
    "from": 162,
    "label": "declares",
    "to": 119
  }, {
    "from": 162,
    "label": "declares",
    "to": 123
  }, {
    "from": 162,
    "label": "declares",
    "to": 141
  }, {
    "from": 162,
    "label": "declares",
    "to": 150
  }, {
    "from": 162,
    "label": "declares",
    "to": 151
  }, {
    "from": 162,
    "label": "declares",
    "to": 152
  }, {
    "from": 162,
    "label": "declares",
    "to": 154
  }, {
    "from": 162,
    "label": "declares",
    "to": 155
  }, {
    "from": 162,
    "label": "declares",
    "to": 156
  }, {
    "from": 162,
    "label": "declares",
    "to": 158
  }, {
    "from": 162,
    "label": "declares",
    "to": 159
  }, {
    "from": 197,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 202
  }, {
    "from": 1,
    "label": "contains",
    "to": 203
  }, {
    "from": 202,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 202,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 202,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 209,
    "label": "assigns",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 202,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 213,
    "label": "assigns",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 213,
    "label": "assigns",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 213,
    "label": "assigns",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 213,
    "label": "assigns",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 202,
    "label": "initializes",
    "to": 222
  }, {
    "from": 202,
    "label": "initializes",
    "to": 223
  }, {
    "from": 202,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 202,
    "label": "initializes",
    "to": 226
  }, {
    "from": 202,
    "label": "initializes",
    "to": 227
  }, {
    "from": 202,
    "label": "initializes",
    "to": 228
  }, {
    "from": 228,
    "label": "assigns",
    "to": 229
  }, {
    "from": 202,
    "label": "initializes",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 202,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "assigns",
    "to": 233
  }, {
    "from": 202,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 203,
    "label": "initializes",
    "to": 236
  }, {
    "from": 236,
    "label": "requires",
    "to": 200
  }, {
    "from": 203,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "requires",
    "to": 196
  }, {
    "from": 203,
    "label": "initializes",
    "to": 238
  }, {
    "from": 238,
    "label": "requires",
    "to": 194
  }, {
    "from": 203,
    "label": "initializes",
    "to": 239
  }, {
    "from": 239,
    "label": "requires",
    "to": 195
  }, {
    "from": 203,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "requires",
    "to": 198
  }, {
    "from": 203,
    "label": "initializes",
    "to": 241
  }, {
    "from": 241,
    "label": "requires",
    "to": 242
  }, {
    "from": 203,
    "label": "initializes",
    "to": 243
  }, {
    "from": 243,
    "label": "requires",
    "to": 199
  }, {
    "from": 1,
    "label": "provides",
    "to": 244
  }, {
    "from": 201,
    "label": "represents",
    "to": 245
  }, {
    "from": 244,
    "label": "provides",
    "to": 245
  }, {
    "from": 248,
    "label": "requires",
    "to": 242
  }, {
    "from": 210,
    "label": "contains",
    "to": 2
  }, {
    "from": 246,
    "label": "contains",
    "to": 36
  }, {
    "from": 247,
    "label": "contains",
    "to": 36
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "http",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(table, key)\r\n        table[key] = function(...)\r\n            return tcp[key](tcp,select(2,...))\r\n        end\r\n        return table[key]\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function receiveheaders(sock, headers)\r\n    local line, name, value, err\r\n    headers = headers or {}\r\n    -- get first line\r\n    line, err = sock:receive()\r\n    if err then return nil, err end\r\n    -- headers go until a blank line is found\r\n    while line ~= \"\" do\r\n        -- get field-name and value\r\n        name, value = socket.skip(2, string.find(line, \"^(.-):%s*(.*)\"))\r\n        if not (name and value) then return nil, \"malformed reponse headers\" end\r\n        name = string.lower(name)\r\n        -- get next line (value might be folded)\r\n        line, err  = sock:receive()\r\n        if err then return nil, err end\r\n        -- unfold any folded values\r\n        while string.find(line, \"^%s\") do\r\n            value = value .. line\r\n            line = sock:receive()\r\n            if err then return nil, err end\r\n        end\r\n        -- save pair in table\r\n        if headers[name] then headers[name] = headers[name] .. \", \" .. value\r\n        else headers[name] = value end\r\n    end\r\n    return headers\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local line, name, value, err",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "headers = headers or {}",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "line, err = sock:receive()",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if err then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "while line ~= \"\" do\r\n        -- get field-name and value\r\n        name, value = socket.skip(2, string.find(line, \"^(.-):%s*(.*)\"))\r\n        if not (name and value) then return nil, \"malformed reponse headers\" end\r\n        name = string.lower(name)\r\n        -- get next line (value might be folded)\r\n        line, err  = sock:receive()\r\n        if err then return nil, err end\r\n        -- unfold any folded values\r\n        while string.find(line, \"^%s\") do\r\n            value = value .. line\r\n            line = sock:receive()\r\n            if err then return nil, err end\r\n        end\r\n        -- save pair in table\r\n        if headers[name] then headers[name] = headers[name] .. \", \" .. value\r\n        else headers[name] = value end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 10,
    "text": "name, value = socket.skip(2, string.find(line, \"^(.-):%s*(.*)\"))",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if not (name and value) then return nil, \"malformed reponse headers\" end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "name = string.lower(name)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "line, err  = sock:receive()",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "while string.find(line, \"^%s\") do\r\n            value = value .. line\r\n            line = sock:receive()\r\n            if err then return nil, err end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 15,
    "text": "value = value .. line",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "line = sock:receive()",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if headers[name] then headers[name] = headers[name] .. \", \" .. value\r\n        else headers[name] = value end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "headers[name] = headers[name] .. \", \" .. value",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "headers[name] = value",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function(sock, headers)\r\n    return base.setmetatable({\r\n        getfd = function() return sock:getfd() end,\r\n        dirty = function() return sock:dirty() end\r\n    }, {\r\n        __call = function()\r\n            -- get chunk size, skip extention\r\n            local line, err = sock:receive()\r\n            if err then return nil, err end\r\n            local size = base.tonumber(string.gsub(line, \";.*\", \"\"), 16)\r\n            if not size then return nil, \"invalid chunk size\" end\r\n            -- was it the last chunk?\r\n            if size > 0 then\r\n                -- if not, get chunk and skip terminating CRLF\r\n                local chunk, err, part = sock:receive(size)\r\n                if chunk then sock:receive() end\r\n                return chunk, err\r\n            else\r\n                -- if it was, read trailers into headers table\r\n                headers, err = receiveheaders(sock, headers)\r\n                if not headers then return nil, err end\r\n            end\r\n        end\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local line, err = sock:receive()",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local size = base.tonumber(string.gsub(line, \";.*\", \"\"), 16)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if not size then return nil, \"invalid chunk size\" end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "if size > 0 then\r\n                -- if not, get chunk and skip terminating CRLF\r\n                local chunk, err, part = sock:receive(size)\r\n                if chunk then sock:receive() end\r\n                return chunk, err\r\n            else\r\n                -- if it was, read trailers into headers table\r\n                headers, err = receiveheaders(sock, headers)\r\n                if not headers then return nil, err end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local chunk, err, part = sock:receive(size)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if chunk then sock:receive() end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "sock:receive()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "headers, err = receiveheaders(sock, headers)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if not headers then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(sock)\r\n    return base.setmetatable({\r\n        getfd = function() return sock:getfd() end,\r\n        dirty = function() return sock:dirty() end\r\n    }, {\r\n        __call = function(self, chunk, err)\r\n            if not chunk then return sock:send(\"0\\r\\n\\r\\n\") end\r\n            local size = string.format(\"%X\\r\\n\", string.len(chunk))\r\n            return sock:send(size ..  chunk .. \"\\r\\n\")\r\n        end\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "if not chunk then return sock:send(\"0\\r\\n\\r\\n\") end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "local size = string.format(\"%X\\r\\n\", string.len(chunk))",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function _M.open(host, port, create)\r\n    -- create socket with user connect function, or with default\r\n    local c = socket.try((create or socket.tcp)())\r\n    local h = base.setmetatable({ c = c }, metat)\r\n    -- create finalized try\r\n    h.try = socket.newtry(function() h:close() end)\r\n    -- set timeout before connecting\r\n    h.try(c:settimeout(_M.TIMEOUT))\r\n    h.try(c:connect(host, port or _M.PORT))\r\n    -- here everything worked\r\n    return h\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local c = socket.try((create or socket.tcp)())",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "local h = base.setmetatable({ c = c }, metat)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "h.try = socket.newtry(function() h:close() end)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "h:close()",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "h.try(c:settimeout(_M.TIMEOUT))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "h.try(c:connect(host, port or _M.PORT))",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function metat.__index:sendrequestline(method, uri)\r\n    local reqline = string.format(\"%s %s HTTP/1.1\\r\\n\", method or \"GET\", uri)\r\n    return self.try(self.c:send(reqline))\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local reqline = string.format(\"%s %s HTTP/1.1\\r\\n\", method or \"GET\", uri)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function metat.__index:sendheaders(tosend)\r\n    local canonic = headers.canonic\r\n    local h = \"\\r\\n\"\r\n    for f, v in base.pairs(tosend) do\r\n        h = (canonic[f] or f) .. \": \" .. v .. \"\\r\\n\" .. h\r\n    end\r\n    self.try(self.c:send(h))\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local canonic = headers.canonic",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local h = \"\\r\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "for f, v in base.pairs(tosend) do\r\n        h = (canonic[f] or f) .. \": \" .. v .. \"\\r\\n\" .. h\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "h = (canonic[f] or f) .. \": \" .. v .. \"\\r\\n\" .. h",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "self.try(self.c:send(h))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function metat.__index:sendbody(headers, source, step)\r\n    source = source or ltn12.source.empty()\r\n    step = step or ltn12.pump.step\r\n    -- if we don't know the size in advance, send chunked and hope for the best\r\n    local mode = \"http-chunked\"\r\n    if headers[\"content-length\"] then mode = \"keep-open\" end\r\n    return self.try(ltn12.pump.all(source, socket.sink(mode, self.c), step))\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "source = source or ltn12.source.empty()",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "step = step or ltn12.pump.step",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "local mode = \"http-chunked\"",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if headers[\"content-length\"] then mode = \"keep-open\" end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "mode = \"keep-open\"",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function metat.__index:receivestatusline()\r\n    local status = self.try(self.c:receive(5))\r\n    -- identify HTTP/0.9 responses, which do not contain a status line\r\n    -- this is just a heuristic, but is what the RFC recommends\r\n    if status ~= \"HTTP/\" then return nil, status end\r\n    -- otherwise proceed reading a status line\r\n    status = self.try(self.c:receive(\"*l\", status))\r\n    local code = socket.skip(2, string.find(status, \"HTTP/%d*%.%d* (%d%d%d)\"))\r\n    return self.try(base.tonumber(code), status)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local status = self.try(self.c:receive(5))",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if status ~= \"HTTP/\" then return nil, status end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "status = self.try(self.c:receive(\"*l\", status))",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "local code = socket.skip(2, string.find(status, \"HTTP/%d*%.%d* (%d%d%d)\"))",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function metat.__index:receiveheaders()\r\n    return self.try(receiveheaders(self.c))\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function metat.__index:receivebody(headers, sink, step)\r\n    sink = sink or ltn12.sink.null()\r\n    step = step or ltn12.pump.step\r\n    local length = base.tonumber(headers[\"content-length\"])\r\n    local t = headers[\"transfer-encoding\"] -- shortcut\r\n    local mode = \"default\" -- connection close\r\n    if t and t ~= \"identity\" then mode = \"http-chunked\"\r\n    elseif base.tonumber(headers[\"content-length\"]) then mode = \"by-length\" end\r\n    return self.try(ltn12.pump.all(socket.source(mode, self.c, length),\r\n        sink, step))\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "sink = sink or ltn12.sink.null()",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "local length = base.tonumber(headers[\"content-length\"])",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local t = headers[\"transfer-encoding\"]",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local mode = \"default\"",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if t and t ~= \"identity\" then mode = \"http-chunked\"\r\n    elseif base.tonumber(headers[\"content-length\"]) then mode = \"by-length\" end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "mode = \"http-chunked\"",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "mode = \"by-length\"",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function metat.__index:receive09body(status, sink, step)\r\n    local source = ltn12.source.rewind(socket.source(\"until-closed\", self.c))\r\n    source(status)\r\n    return self.try(ltn12.pump.all(source, sink, step))\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local source = ltn12.source.rewind(socket.source(\"until-closed\", self.c))",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "source(status)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function metat.__index:close()\r\n    return self.c:close()\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function adjusturi(reqt)\r\n    local u = reqt\r\n    -- if there is a proxy, we need the full url. otherwise, just a part.\r\n    if not reqt.proxy and not PROXY then\r\n        u = {\r\n           path = socket.try(reqt.path, \"invalid path 'nil'\"),\r\n           params = reqt.params,\r\n           query = reqt.query,\r\n           fragment = reqt.fragment\r\n        }\r\n    end\r\n    return url.build(u)\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "local u = reqt",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "if not reqt.proxy and not PROXY then\r\n        u = {\r\n           path = socket.try(reqt.path, \"invalid path 'nil'\"),\r\n           params = reqt.params,\r\n           query = reqt.query,\r\n           fragment = reqt.fragment\r\n        }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "u = {\r\n           path = socket.try(reqt.path, \"invalid path 'nil'\"),\r\n           params = reqt.params,\r\n           query = reqt.query,\r\n           fragment = reqt.fragment\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "local function adjustproxy(reqt)\r\n    local proxy = reqt.proxy or PROXY\r\n    if proxy then\r\n        proxy = url.parse(proxy)\r\n        return proxy.host, proxy.port or 3128\r\n    else\r\n        return reqt.host, reqt.port\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "local proxy = reqt.proxy or PROXY",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if proxy then\r\n        proxy = url.parse(proxy)\r\n        return proxy.host, proxy.port or 3128\r\n    else\r\n        return reqt.host, reqt.port\r\n    end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "proxy = url.parse(proxy)",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "local function adjustheaders(reqt)\r\n    -- default headers\r\n    local lower = {\r\n        [\"user-agent\"] = _M.USERAGENT,\r\n        [\"host\"] = reqt.host,\r\n        [\"connection\"] = \"close, TE\",\r\n        [\"te\"] = \"trailers\"\r\n    }\r\n    -- if we have authentication information, pass it along\r\n    if reqt.user and reqt.password then\r\n        lower[\"authorization\"] = \r\n            \"Basic \" ..  (mime.b64(reqt.user .. \":\" .. reqt.password))\r\n    end\r\n    -- override with user headers\r\n    for i,v in base.pairs(reqt.headers or lower) do\r\n        lower[string.lower(i)] = v\r\n    end\r\n    return lower\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "local lower = {\r\n        [\"user-agent\"] = _M.USERAGENT,\r\n        [\"host\"] = reqt.host,\r\n        [\"connection\"] = \"close, TE\",\r\n        [\"te\"] = \"trailers\"\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if reqt.user and reqt.password then\r\n        lower[\"authorization\"] = \r\n            \"Basic \" ..  (mime.b64(reqt.user .. \":\" .. reqt.password))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "lower[\"authorization\"] = \r\n            \"Basic \" ..  (mime.b64(reqt.user .. \":\" .. reqt.password))",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "for i,v in base.pairs(reqt.headers or lower) do\r\n        lower[string.lower(i)] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 99,
    "text": "lower[string.lower(i)] = v",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "local function adjustrequest(reqt)\r\n    -- parse url if provided\r\n    local nreqt = reqt.url and url.parse(reqt.url, default) or {}\r\n    -- explicit components override url\r\n    for i,v in base.pairs(reqt) do nreqt[i] = v end\r\n    if nreqt.port == \"\" then nreqt.port = 80 end\r\n    socket.try(nreqt.host and nreqt.host ~= \"\", \r\n        \"invalid host '\" .. base.tostring(nreqt.host) .. \"'\")\r\n    -- compute uri if user hasn't overriden\r\n    nreqt.uri = reqt.uri or adjusturi(nreqt)\r\n    -- ajust host and port if there is a proxy\r\n    nreqt.host, nreqt.port = adjustproxy(nreqt)\r\n    -- adjust headers in request\r\n    nreqt.headers = adjustheaders(nreqt)\r\n    return nreqt\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "local nreqt = reqt.url and url.parse(reqt.url, default) or {}",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "for i,v in base.pairs(reqt) do nreqt[i] = v end",
    "type": "statement:genericfor"
  }, {
    "id": 104,
    "text": "nreqt[i] = v",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "if nreqt.port == \"\" then nreqt.port = 80 end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "nreqt.port = 80",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "socket.try(nreqt.host and nreqt.host ~= \"\", \r\n        \"invalid host '\" .. base.tostring(nreqt.host) .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "nreqt.uri = reqt.uri or adjusturi(nreqt)",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "nreqt.host, nreqt.port = adjustproxy(nreqt)",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "nreqt.headers = adjustheaders(nreqt)",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "local function shouldredirect(reqt, code, headers)\r\n    return headers.location and\r\n           string.gsub(headers.location, \"%s\", \"\") ~= \"\" and\r\n           (reqt.redirect ~= false) and\r\n           (code == 301 or code == 302 or code == 303 or code == 307) and\r\n           (not reqt.method or reqt.method == \"GET\" or reqt.method == \"HEAD\")\r\n           and (not reqt.nredirects or reqt.nredirects < 5)\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "local function shouldreceivebody(reqt, code)\r\n    if reqt.method == \"HEAD\" then return nil end\r\n    if code == 204 or code == 304 then return nil end\r\n    if code >= 100 and code < 200 then return nil end\r\n    return 1\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "if reqt.method == \"HEAD\" then return nil end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "if code == 204 or code == 304 then return nil end",
    "type": "statement:if"
  }, {
    "id": 117,
    "text": "if code >= 100 and code < 200 then return nil end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function tredirect(reqt, location)\r\n    local result, code, headers, status = trequest {\r\n        -- the RFC says the redirect URL has to be absolute, but some\r\n        -- servers do not respect that\r\n        url = url.absolute(reqt.url, location),\r\n        source = reqt.source,\r\n        sink = reqt.sink,\r\n        headers = reqt.headers,\r\n        proxy = reqt.proxy, \r\n        nredirects = (reqt.nredirects or 0) + 1,\r\n        create = reqt.create\r\n    }   \r\n    -- pass location header back as a hint we redirected\r\n    headers = headers or {}\r\n    headers.location = headers.location or location\r\n    return result, code, headers, status\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "local result, code, headers, status = trequest {\r\n        -- the RFC says the redirect URL has to be absolute, but some\r\n        -- servers do not respect that\r\n        url = url.absolute(reqt.url, location),\r\n        source = reqt.source,\r\n        sink = reqt.sink,\r\n        headers = reqt.headers,\r\n        proxy = reqt.proxy, \r\n        nredirects = (reqt.nredirects or 0) + 1,\r\n        create = reqt.create\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "headers.location = headers.location or location",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function trequest(reqt)\r\n    -- we loop until we get what we want, or\r\n    -- until we are sure there is no way to get it\r\n    local nreqt = adjustrequest(reqt)\r\n    local h = _M.open(nreqt.host, nreqt.port, nreqt.create)\r\n    -- send request line and headers\r\n    h:sendrequestline(nreqt.method, nreqt.uri)\r\n    h:sendheaders(nreqt.headers)\r\n    -- if there is a body, send it\r\n    if nreqt.source then\r\n        h:sendbody(nreqt.headers, nreqt.source, nreqt.step) \r\n    end\r\n    local code, status = h:receivestatusline()\r\n    -- if it is an HTTP/0.9 server, simply get the body and we are done\r\n    if not code then\r\n        h:receive09body(status, nreqt.sink, nreqt.step)\r\n        return 1, 200\r\n    end\r\n    local headers\r\n    -- ignore any 100-continue messages\r\n    while code == 100 do \r\n        headers = h:receiveheaders()\r\n        code, status = h:receivestatusline()\r\n    end\r\n    headers = h:receiveheaders()\r\n    -- at this point we should have a honest reply from the server\r\n    -- we can't redirect if we already used the source, so we report the error \r\n    if shouldredirect(nreqt, code, headers) and not nreqt.source then\r\n        h:close()\r\n        return tredirect(reqt, headers.location)\r\n    end\r\n    -- here we are finally done\r\n    if shouldreceivebody(nreqt, code) then\r\n        h:receivebody(headers, nreqt.sink, nreqt.step)\r\n    end\r\n    h:close()\r\n    return 1, code, headers, status\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "local nreqt = adjustrequest(reqt)",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local h = _M.open(nreqt.host, nreqt.port, nreqt.create)",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "h:sendrequestline(nreqt.method, nreqt.uri)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "h:sendheaders(nreqt.headers)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "if nreqt.source then\r\n        h:sendbody(nreqt.headers, nreqt.source, nreqt.step) \r\n    end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "h:sendbody(nreqt.headers, nreqt.source, nreqt.step)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "local code, status = h:receivestatusline()",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if not code then\r\n        h:receive09body(status, nreqt.sink, nreqt.step)\r\n        return 1, 200\r\n    end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "h:receive09body(status, nreqt.sink, nreqt.step)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "local headers",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "while code == 100 do \r\n        headers = h:receiveheaders()\r\n        code, status = h:receivestatusline()\r\n    end",
    "type": "statement:while"
  }, {
    "id": 135,
    "text": "headers = h:receiveheaders()",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "code, status = h:receivestatusline()",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "if shouldredirect(nreqt, code, headers) and not nreqt.source then\r\n        h:close()\r\n        return tredirect(reqt, headers.location)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "if shouldreceivebody(nreqt, code) then\r\n        h:receivebody(headers, nreqt.sink, nreqt.step)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "h:receivebody(headers, nreqt.sink, nreqt.step)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "local function srequest(u, b)\r\n    local t = {}\r\n    local reqt = {\r\n        url = u,\r\n        sink = ltn12.sink.table(t)\r\n    }\r\n    if b then\r\n        reqt.source = ltn12.source.string(b)\r\n        reqt.headers = {\r\n            [\"content-length\"] = string.len(b),\r\n            [\"content-type\"] = \"application/x-www-form-urlencoded\"\r\n        }\r\n        reqt.method = \"POST\"\r\n    end\r\n    local code, headers, status = socket.skip(1, trequest(reqt))\r\n    return table.concat(t), code, headers, status\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "local reqt = {\r\n        url = u,\r\n        sink = ltn12.sink.table(t)\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if b then\r\n        reqt.source = ltn12.source.string(b)\r\n        reqt.headers = {\r\n            [\"content-length\"] = string.len(b),\r\n            [\"content-type\"] = \"application/x-www-form-urlencoded\"\r\n        }\r\n        reqt.method = \"POST\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "reqt.source = ltn12.source.string(b)",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "reqt.headers = {\r\n            [\"content-length\"] = string.len(b),\r\n            [\"content-type\"] = \"application/x-www-form-urlencoded\"\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "reqt.method = \"POST\"",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "local code, headers, status = socket.skip(1, trequest(reqt))",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function() return sock:getfd() end",
    "type": "function"
  }, {
    "id": 151,
    "text": "function() return sock:dirty() end",
    "type": "function"
  }, {
    "id": 152,
    "text": "function()\r\n            -- get chunk size, skip extention\r\n            local line, err = sock:receive()\r\n            if err then return nil, err end\r\n            local size = base.tonumber(string.gsub(line, \";.*\", \"\"), 16)\r\n            if not size then return nil, \"invalid chunk size\" end\r\n            -- was it the last chunk?\r\n            if size > 0 then\r\n                -- if not, get chunk and skip terminating CRLF\r\n                local chunk, err, part = sock:receive(size)\r\n                if chunk then sock:receive() end\r\n                return chunk, err\r\n            else\r\n                -- if it was, read trailers into headers table\r\n                headers, err = receiveheaders(sock, headers)\r\n                if not headers then return nil, err end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 153,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 154,
    "text": "function() return sock:getfd() end",
    "type": "function"
  }, {
    "id": 155,
    "text": "function() return sock:dirty() end",
    "type": "function"
  }, {
    "id": 156,
    "text": "function(self, chunk, err)\r\n            if not chunk then return sock:send(\"0\\r\\n\\r\\n\") end\r\n            local size = string.format(\"%X\\r\\n\", string.len(chunk))\r\n            return sock:send(size ..  chunk .. \"\\r\\n\")\r\n        end",
    "type": "function"
  }, {
    "id": 157,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 158,
    "text": "function() h:close() end",
    "type": "function"
  }, {
    "id": 159,
    "text": "function(reqt, body)\r\n    if base.type(reqt) == \"string\" then return srequest(reqt, body)\r\n    else return trequest(reqt) end\r\nend",
    "type": "function"
  }, {
    "id": 160,
    "text": "if base.type(reqt) == \"string\" then return srequest(reqt, body)\r\n    else return trequest(reqt) end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "",
    "type": "function container"
  }, {
    "id": 163,
    "text": "function source.empty()\r\n    return empty\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "function source.string(s)\r\n    if s then\r\n        local i = 1\r\n        return function()\r\n            local chunk = string.sub(s, i, i+_M.BLOCKSIZE-1)\r\n            i = i + _M.BLOCKSIZE\r\n            if chunk ~= \"\" then return chunk\r\n            else return nil end\r\n        end\r\n    else return source.empty() end\r\nend",
    "type": "function"
  }, {
    "id": 165,
    "text": "function source.rewind(src)\r\n    base.assert(src)\r\n    local t = {}\r\n    return function(chunk)\r\n        if not chunk then\r\n            chunk = table.remove(t)\r\n            if not chunk then return src()\r\n            else return chunk end\r\n        else\r\n            table.insert(t, chunk)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "function sink.table(t)\r\n    t = t or {}\r\n    local f = function(chunk, err)\r\n        if chunk then table.insert(t, chunk) end\r\n        return 1\r\n    end\r\n    return f, t\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "function sink.null()\r\n    return null\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "function pump.all(src, snk, step)\r\n    base.assert(src and snk)\r\n    step = step or pump.step\r\n    while true do\r\n        local ret, err = step(src, snk)\r\n        if not ret then\r\n            if err then return nil, err\r\n            else return 1 end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "source",
    "type": "global function"
  }, {
    "id": 170,
    "text": "absolute",
    "type": "global function"
  }, {
    "id": 171,
    "text": "find",
    "type": "global function"
  }, {
    "id": 172,
    "text": "build",
    "type": "global function"
  }, {
    "id": 173,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 174,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 175,
    "text": "format",
    "type": "global function"
  }, {
    "id": 176,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 177,
    "text": "newtry",
    "type": "global function"
  }, {
    "id": 178,
    "text": "b64",
    "type": "global function"
  }, {
    "id": 179,
    "text": "skip",
    "type": "global function"
  }, {
    "id": 180,
    "text": "protect",
    "type": "global function"
  }, {
    "id": 181,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 182,
    "text": "len",
    "type": "global function"
  }, {
    "id": 183,
    "text": "try",
    "type": "global function"
  }, {
    "id": 184,
    "text": "sink",
    "type": "global function"
  }, {
    "id": 185,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 186,
    "text": "source",
    "type": "global function"
  }, {
    "id": 187,
    "text": "type",
    "type": "global function"
  }, {
    "id": 188,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 189,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 190,
    "text": "try",
    "type": "global function"
  }, {
    "id": 191,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 192,
    "text": "require",
    "type": "global function"
  }, {
    "id": 193,
    "text": "try",
    "type": "global function"
  }, {
    "id": 194,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 195,
    "text": "(mime)",
    "type": "module"
  }, {
    "id": 196,
    "text": "url)",
    "type": "module"
  }, {
    "id": 197,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 198,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 199,
    "text": "(table)",
    "type": "module"
  }, {
    "id": 200,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 201,
    "text": "",
    "type": "local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "variable container"
  }, {
    "id": 203,
    "text": "",
    "type": "require container"
  }, {
    "id": 204,
    "text": "",
    "type": "local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "n/a"
  }, {
    "id": 206,
    "text": "",
    "type": "local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "n/a"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 210,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 211,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 214,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 215,
    "text": "",
    "type": "string"
  }, {
    "id": 216,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 217,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 218,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 219,
    "text": "",
    "type": "string"
  }, {
    "id": 220,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 221,
    "text": "",
    "type": "string"
  }, {
    "id": 222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "global variable"
  }, {
    "id": 225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 226,
    "text": "",
    "type": "global variable"
  }, {
    "id": 227,
    "text": "",
    "type": "global variable"
  }, {
    "id": 228,
    "text": "",
    "type": "global variable"
  }, {
    "id": 229,
    "text": "",
    "type": "n/a"
  }, {
    "id": 230,
    "text": "",
    "type": "global variable"
  }, {
    "id": 231,
    "text": "",
    "type": "n/a"
  }, {
    "id": 232,
    "text": "",
    "type": "global variable"
  }, {
    "id": 233,
    "text": "",
    "type": "n/a"
  }, {
    "id": 234,
    "text": "",
    "type": "global variable"
  }, {
    "id": 235,
    "text": "",
    "type": "n/a"
  }, {
    "id": 236,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 237,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 239,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 242,
    "text": "headers)",
    "type": "module"
  }, {
    "id": 243,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 244,
    "text": "",
    "type": "interface container"
  }, {
    "id": 245,
    "text": "",
    "type": "interface"
  }, {
    "id": 246,
    "text": "",
    "type": "local variable"
  }, {
    "id": 247,
    "text": "",
    "type": "local variable"
  }, {
    "id": 248,
    "text": "",
    "type": "require local variable"
  } ]
}