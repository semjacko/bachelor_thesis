{
  "_filename": "get.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/etc/get.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 18
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 18
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 15,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 25,
    "label": "has",
    "to": 13
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 13
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 29,
    "label": "has",
    "to": 13
  }, {
    "from": 29,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 13
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 47
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 54,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 54,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 13
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 33
  }, {
    "from": 77,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 77,
    "label": "has",
    "to": 13
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 2,
    "label": "calls",
    "to": 84
  }, {
    "from": 15,
    "label": "calls",
    "to": 84
  }, {
    "from": 25,
    "label": "calls",
    "to": 84
  }, {
    "from": 25,
    "label": "calls",
    "to": 84
  }, {
    "from": 79,
    "label": "calls",
    "to": 92
  }, {
    "from": 69,
    "label": "calls",
    "to": 87
  }, {
    "from": 54,
    "label": "calls",
    "to": 85
  }, {
    "from": 64,
    "label": "calls",
    "to": 85
  }, {
    "from": 64,
    "label": "calls",
    "to": 82
  }, {
    "from": 54,
    "label": "calls",
    "to": 89
  }, {
    "from": 29,
    "label": "calls",
    "to": 25
  }, {
    "from": 29,
    "label": "calls",
    "to": 25
  }, {
    "from": 25,
    "label": "calls",
    "to": 15
  }, {
    "from": 25,
    "label": "calls",
    "to": 15
  }, {
    "from": 25,
    "label": "calls",
    "to": 15
  }, {
    "from": 25,
    "label": "calls",
    "to": 15
  }, {
    "from": 69,
    "label": "calls",
    "to": 64
  }, {
    "from": 69,
    "label": "calls",
    "to": 46
  }, {
    "from": 29,
    "label": "calls",
    "to": 88
  }, {
    "from": 29,
    "label": "calls",
    "to": 88
  }, {
    "from": 79,
    "label": "calls",
    "to": 90
  }, {
    "from": 42,
    "label": "calls",
    "to": 91
  }, {
    "from": 42,
    "label": "calls",
    "to": 83
  }, {
    "from": 46,
    "label": "calls",
    "to": 83
  }, {
    "from": 46,
    "label": "calls",
    "to": 81
  }, {
    "from": 54,
    "label": "calls",
    "to": 81
  }, {
    "from": 46,
    "label": "calls",
    "to": 29
  }, {
    "from": 54,
    "label": "calls",
    "to": 29
  }, {
    "from": 46,
    "label": "calls",
    "to": 80
  }, {
    "from": 54,
    "label": "calls",
    "to": 80
  }, {
    "from": 46,
    "label": "calls",
    "to": 42
  }, {
    "from": 69,
    "label": "calls",
    "to": 54
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 25,
    "label": "calls",
    "to": 2
  }, {
    "from": 29,
    "label": "calls",
    "to": 86
  }, {
    "from": 79,
    "label": "calls",
    "to": 94
  }, {
    "from": 79,
    "label": "calls",
    "to": 94
  }, {
    "from": 79,
    "label": "calls",
    "to": 94
  }, {
    "from": 79,
    "label": "calls",
    "to": 94
  }, {
    "from": 79,
    "label": "calls",
    "to": 94
  }, {
    "from": 54,
    "label": "calls",
    "to": 93
  }, {
    "from": 69,
    "label": "calls",
    "to": 93
  }, {
    "from": 79,
    "label": "calls",
    "to": 69
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 79,
    "label": "declares",
    "to": 2
  }, {
    "from": 79,
    "label": "declares",
    "to": 15
  }, {
    "from": 79,
    "label": "declares",
    "to": 25
  }, {
    "from": 79,
    "label": "declares",
    "to": 29
  }, {
    "from": 79,
    "label": "declares",
    "to": 42
  }, {
    "from": 79,
    "label": "declares",
    "to": 46
  }, {
    "from": 79,
    "label": "declares",
    "to": 54
  }, {
    "from": 79,
    "label": "declares",
    "to": 64
  }, {
    "from": 79,
    "label": "declares",
    "to": 69
  }, {
    "from": 79,
    "label": "declares",
    "to": 77
  }, {
    "from": 1,
    "label": "contains",
    "to": 99
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 99,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 99,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 99,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 100,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "requires",
    "to": 98
  }, {
    "from": 100,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "requires",
    "to": 97
  }, {
    "from": 100,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "requires",
    "to": 110
  }, {
    "from": 100,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 96
  }, {
    "from": 100,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "requires",
    "to": 95
  }, {
    "from": 113,
    "label": "requires",
    "to": 110
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "get",
    "type": "module"
  }, {
    "id": 2,
    "text": "function nicetime(s)\r\n    local l = \"s\"\r\n    if s > 60 then\r\n        s = s / 60\r\n        l = \"m\"\r\n        if s > 60 then\r\n            s = s / 60\r\n            l = \"h\"\r\n            if s > 24 then\r\n                s = s / 24\r\n                l = \"d\" -- hmmm\r\n            end\r\n        end\r\n    end\r\n    if l == \"s\" then return string.format(\"%5.0f%s\", s, l)\r\n    else return string.format(\"%5.2f%s\", s, l) end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local l = \"s\"",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if s > 60 then\r\n        s = s / 60\r\n        l = \"m\"\r\n        if s > 60 then\r\n            s = s / 60\r\n            l = \"h\"\r\n            if s > 24 then\r\n                s = s / 24\r\n                l = \"d\" -- hmmm\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "s = s / 60",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "l = \"m\"",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if s > 60 then\r\n            s = s / 60\r\n            l = \"h\"\r\n            if s > 24 then\r\n                s = s / 24\r\n                l = \"d\" -- hmmm\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "l = \"h\"",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if s > 24 then\r\n                s = s / 24\r\n                l = \"d\" -- hmmm\r\n            end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "s = s / 24",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "l = \"d\"",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if l == \"s\" then return string.format(\"%5.0f%s\", s, l)\r\n    else return string.format(\"%5.2f%s\", s, l) end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function nicesize(b)\r\n    local l = \"B\"\r\n    if b > 1024 then\r\n        b = b / 1024\r\n        l = \"KB\"\r\n        if b > 1024 then\r\n            b = b / 1024\r\n            l = \"MB\"\r\n            if b > 1024 then\r\n                b = b / 1024\r\n                l = \"GB\" -- hmmm\r\n            end\r\n        end\r\n    end\r\n    return string.format(\"%7.2f%2s\", b, l)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local l = \"B\"",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if b > 1024 then\r\n        b = b / 1024\r\n        l = \"KB\"\r\n        if b > 1024 then\r\n            b = b / 1024\r\n            l = \"MB\"\r\n            if b > 1024 then\r\n                b = b / 1024\r\n                l = \"GB\" -- hmmm\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "b = b / 1024",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "l = \"KB\"",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if b > 1024 then\r\n            b = b / 1024\r\n            l = \"MB\"\r\n            if b > 1024 then\r\n                b = b / 1024\r\n                l = \"GB\" -- hmmm\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "l = \"MB\"",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "if b > 1024 then\r\n                b = b / 1024\r\n                l = \"GB\" -- hmmm\r\n            end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "l = \"GB\"",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function gauge(got, delta, size)\r\n    local rate = got / delta\r\n    if size and size >= 1 then\r\n        return string.format(remaining_s, nicesize(got),  nicesize(rate),\r\n            100*got/size, nicetime((size-got)/rate))\r\n    else\r\n        return string.format(elapsed_s, nicesize(got),\r\n            nicesize(rate), nicetime(delta))\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local rate = got / delta",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if size and size >= 1 then\r\n        return string.format(remaining_s, nicesize(got),  nicesize(rate),\r\n            100*got/size, nicetime((size-got)/rate))\r\n    else\r\n        return string.format(elapsed_s, nicesize(got),\r\n            nicesize(rate), nicetime(delta))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function stats(size)\r\n    local start = socket.gettime()\r\n    local last = start\r\n    local got = 0\r\n    return function(chunk)\r\n        -- elapsed time since start\r\n        local current = socket.gettime()\r\n        if chunk then\r\n            -- total bytes received\r\n            got = got + string.len(chunk)   \r\n            -- not enough time for estimate\r\n            if current - last > 1 then\r\n                io.stderr:write(\"\\r\", gauge(got, current - start, size))\r\n                io.stderr:flush()\r\n                last = current\r\n            end\r\n        else\r\n            -- close up\r\n            io.stderr:write(\"\\r\", gauge(got, current - start), \"\\n\")\r\n        end\r\n        return chunk\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local start = socket.gettime()",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local last = start",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local got = 0",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local current = socket.gettime()",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if chunk then\r\n            -- total bytes received\r\n            got = got + string.len(chunk)   \r\n            -- not enough time for estimate\r\n            if current - last > 1 then\r\n                io.stderr:write(\"\\r\", gauge(got, current - start, size))\r\n                io.stderr:flush()\r\n                last = current\r\n            end\r\n        else\r\n            -- close up\r\n            io.stderr:write(\"\\r\", gauge(got, current - start), \"\\n\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "got = got + string.len(chunk)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if current - last > 1 then\r\n                io.stderr:write(\"\\r\", gauge(got, current - start, size))\r\n                io.stderr:flush()\r\n                last = current\r\n            end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "io.stderr:write(\"\\r\", gauge(got, current - start, size))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "io.stderr:flush()",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "last = current",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "io.stderr:write(\"\\r\", gauge(got, current - start), \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function gethttpsize(u)\r\n    local r, c, h = http.request {method = \"HEAD\", url = u}\r\n    if c == 200 then\r\n        return tonumber(h[\"content-length\"])\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local r, c, h = http.request {method = \"HEAD\", url = u}",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if c == 200 then\r\n        return tonumber(h[\"content-length\"])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function getbyhttp(u, file)\r\n    local save = ltn12.sink.file(file or io.stdout)\r\n    -- only print feedback if output is not stdout\r\n    if file then save = ltn12.sink.chain(stats(gethttpsize(u)), save) end\r\n    local r, c, h, s = http.request {url = u, sink = save }\r\n    if c ~= 200 then io.stderr:write(s or c, \"\\n\") end\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "local save = ltn12.sink.file(file or io.stdout)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "if file then save = ltn12.sink.chain(stats(gethttpsize(u)), save) end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "save = ltn12.sink.chain(stats(gethttpsize(u)), save)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "local r, c, h, s = http.request {url = u, sink = save }",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if c ~= 200 then io.stderr:write(s or c, \"\\n\") end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "io.stderr:write(s or c, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function getbyftp(u, file)\r\n    local save = ltn12.sink.file(file or io.stdout)\r\n    -- only print feedback if output is not stdout\r\n    -- and we don't know how big the file is\r\n    if file then save = ltn12.sink.chain(stats(), save) end\r\n    local gett = url.parse(u)\r\n    gett.sink = save\r\n    gett.type = \"i\"\r\n    local ret, err = ftp.get(gett)\r\n    if err then print(err) end\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "if file then save = ltn12.sink.chain(stats(), save) end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "save = ltn12.sink.chain(stats(), save)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "local gett = url.parse(u)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "gett.sink = save",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "gett.type = \"i\"",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "local ret, err = ftp.get(gett)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if err then print(err) end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "print(err)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function getscheme(u)\r\n    -- this is an heuristic to solve a common invalid url poblem\r\n    if not string.find(u, \"//\") then u = \"//\" .. u end\r\n    local parsed = url.parse(u, {scheme = \"http\"})\r\n    return parsed.scheme\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "if not string.find(u, \"//\") then u = \"//\" .. u end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "u = \"//\" .. u",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "local parsed = url.parse(u, {scheme = \"http\"})",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function get(u, name)\r\n    local fout = name and io.open(name, \"wb\")\r\n    local scheme = getscheme(u)\r\n    if scheme == \"ftp\" then getbyftp(u, fout)\r\n    elseif scheme == \"http\" then getbyhttp(u, fout)\r\n    else print(\"unknown scheme\" .. scheme) end\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local fout = name and io.open(name, \"wb\")",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local scheme = getscheme(u)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if scheme == \"ftp\" then getbyftp(u, fout)\r\n    elseif scheme == \"http\" then getbyhttp(u, fout)\r\n    else print(\"unknown scheme\" .. scheme) end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "getbyftp(u, fout)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "getbyhttp(u, fout)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "print(\"unknown scheme\" .. scheme)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function(chunk)\r\n        -- elapsed time since start\r\n        local current = socket.gettime()\r\n        if chunk then\r\n            -- total bytes received\r\n            got = got + string.len(chunk)   \r\n            -- not enough time for estimate\r\n            if current - last > 1 then\r\n                io.stderr:write(\"\\r\", gauge(got, current - start, size))\r\n                io.stderr:flush()\r\n                last = current\r\n            end\r\n        else\r\n            -- close up\r\n            io.stderr:write(\"\\r\", gauge(got, current - start), \"\\n\")\r\n        end\r\n        return chunk\r\n    end",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "",
    "type": "function container"
  }, {
    "id": 80,
    "text": "function sink.file(handle, io_err)\r\n    if handle then\r\n        return function(chunk, err)\r\n            if not chunk then\r\n                handle:close()\r\n                return 1\r\n            else return handle:write(chunk) end\r\n        end\r\n    else return sink.error(io_err or \"unable to open file\") end\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "function sink.chain(f, snk)\r\n    base.assert(f and snk)\r\n    return function(chunk, err)\r\n        if chunk ~= \"\" then\r\n            local filtered = f(chunk)\r\n            local done = chunk and \"\"\r\n            while true do\r\n                local ret, snkerr = snk(filtered, err)\r\n                if not ret then return nil, snkerr end\r\n                if filtered == done then return 1 end\r\n                filtered = f(done)\r\n            end\r\n        else return 1 end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "find",
    "type": "global function"
  }, {
    "id": 83,
    "text": "request",
    "type": "global function"
  }, {
    "id": 84,
    "text": "format",
    "type": "global function"
  }, {
    "id": 85,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 86,
    "text": "len",
    "type": "global function"
  }, {
    "id": 87,
    "text": "open",
    "type": "global function"
  }, {
    "id": 88,
    "text": "gettime",
    "type": "global function"
  }, {
    "id": 89,
    "text": "get",
    "type": "global function"
  }, {
    "id": 90,
    "text": "write",
    "type": "global function"
  }, {
    "id": 91,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 92,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 93,
    "text": "print",
    "type": "global function"
  }, {
    "id": 94,
    "text": "require",
    "type": "global function"
  }, {
    "id": 95,
    "text": "(ltn12)",
    "type": "module"
  }, {
    "id": 96,
    "text": "url)",
    "type": "module"
  }, {
    "id": 97,
    "text": "http)",
    "type": "module"
  }, {
    "id": 98,
    "text": "(socket)",
    "type": "module"
  }, {
    "id": 99,
    "text": "",
    "type": "variable container"
  }, {
    "id": 100,
    "text": "",
    "type": "require container"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "string"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "string"
  }, {
    "id": 105,
    "text": "",
    "type": "global variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "ftp)",
    "type": "module"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  } ]
}