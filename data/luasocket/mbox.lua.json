{
  "_filename": "mbox.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luasocket/src/mbox.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 4,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 15
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 18
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 29,
    "label": "has",
    "to": 15
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 39,
    "label": "has",
    "to": 47
  }, {
    "from": 39,
    "label": "has",
    "to": 15
  }, {
    "from": 39,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 49,
    "label": "has",
    "to": 15
  }, {
    "from": 49,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 15
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 15
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 8
  }, {
    "from": 70,
    "label": "has",
    "to": 10
  }, {
    "from": 71,
    "label": "has",
    "to": 10
  }, {
    "from": 72,
    "label": "has",
    "to": 22
  }, {
    "from": 60,
    "label": "calls",
    "to": 65
  }, {
    "from": 29,
    "label": "calls",
    "to": 91
  }, {
    "from": 29,
    "label": "calls",
    "to": 17
  }, {
    "from": 17,
    "label": "calls",
    "to": 94
  }, {
    "from": 49,
    "label": "calls",
    "to": 94
  }, {
    "from": 65,
    "label": "calls",
    "to": 29
  }, {
    "from": 60,
    "label": "calls",
    "to": 49
  }, {
    "from": 29,
    "label": "calls",
    "to": 24
  }, {
    "from": 24,
    "label": "calls",
    "to": 90
  }, {
    "from": 39,
    "label": "calls",
    "to": 90
  }, {
    "from": 39,
    "label": "calls",
    "to": 90
  }, {
    "from": 49,
    "label": "calls",
    "to": 90
  }, {
    "from": 4,
    "label": "calls",
    "to": 92
  }, {
    "from": 4,
    "label": "calls",
    "to": 92
  }, {
    "from": 4,
    "label": "calls",
    "to": 92
  }, {
    "from": 4,
    "label": "calls",
    "to": 92
  }, {
    "from": 17,
    "label": "calls",
    "to": 92
  }, {
    "from": 17,
    "label": "calls",
    "to": 92
  }, {
    "from": 17,
    "label": "calls",
    "to": 92
  }, {
    "from": 24,
    "label": "calls",
    "to": 92
  }, {
    "from": 24,
    "label": "calls",
    "to": 92
  }, {
    "from": 39,
    "label": "calls",
    "to": 92
  }, {
    "from": 49,
    "label": "calls",
    "to": 92
  }, {
    "from": 49,
    "label": "calls",
    "to": 93
  }, {
    "from": 65,
    "label": "calls",
    "to": 4
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 73,
    "label": "declares",
    "to": 4
  }, {
    "from": 73,
    "label": "declares",
    "to": 17
  }, {
    "from": 73,
    "label": "declares",
    "to": 24
  }, {
    "from": 73,
    "label": "declares",
    "to": 29
  }, {
    "from": 73,
    "label": "declares",
    "to": 39
  }, {
    "from": 73,
    "label": "declares",
    "to": 49
  }, {
    "from": 73,
    "label": "declares",
    "to": 60
  }, {
    "from": 73,
    "label": "declares",
    "to": 65
  }, {
    "from": 73,
    "label": "declares",
    "to": 69
  }, {
    "from": 73,
    "label": "declares",
    "to": 70
  }, {
    "from": 73,
    "label": "declares",
    "to": 71
  }, {
    "from": 73,
    "label": "declares",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 97
  }, {
    "from": 1,
    "label": "contains",
    "to": 98
  }, {
    "from": 97,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 1,
    "label": "provides",
    "to": 101
  }, {
    "from": 95,
    "label": "represents",
    "to": 102
  }, {
    "from": 101,
    "label": "provides",
    "to": 102
  }, {
    "from": 99,
    "label": "contains",
    "to": 2
  }, {
    "from": 99,
    "label": "contains",
    "to": 3
  }, {
    "from": 96,
    "label": "contains",
    "to": 4
  }, {
    "from": 99,
    "label": "contains",
    "to": 4
  }, {
    "from": 96,
    "label": "contains",
    "to": 17
  }, {
    "from": 99,
    "label": "contains",
    "to": 17
  }, {
    "from": 96,
    "label": "contains",
    "to": 24
  }, {
    "from": 99,
    "label": "contains",
    "to": 24
  }, {
    "from": 96,
    "label": "contains",
    "to": 29
  }, {
    "from": 99,
    "label": "contains",
    "to": 29
  }, {
    "from": 96,
    "label": "contains",
    "to": 39
  }, {
    "from": 99,
    "label": "contains",
    "to": 39
  }, {
    "from": 96,
    "label": "contains",
    "to": 49
  }, {
    "from": 99,
    "label": "contains",
    "to": 49
  }, {
    "from": 96,
    "label": "contains",
    "to": 60
  }, {
    "from": 99,
    "label": "contains",
    "to": 60
  }, {
    "from": 96,
    "label": "contains",
    "to": 65
  }, {
    "from": 99,
    "label": "contains",
    "to": 65
  }, {
    "from": 99,
    "label": "contains",
    "to": 74
  }, {
    "from": 99,
    "label": "contains",
    "to": 75
  }, {
    "from": 99,
    "label": "contains",
    "to": 76
  }, {
    "from": 99,
    "label": "contains",
    "to": 77
  }, {
    "from": 99,
    "label": "contains",
    "to": 78
  }, {
    "from": 99,
    "label": "contains",
    "to": 79
  }, {
    "from": 99,
    "label": "contains",
    "to": 80
  }, {
    "from": 99,
    "label": "contains",
    "to": 81
  }, {
    "from": 99,
    "label": "contains",
    "to": 82
  }, {
    "from": 99,
    "label": "contains",
    "to": 83
  }, {
    "from": 99,
    "label": "contains",
    "to": 84
  }, {
    "from": 99,
    "label": "contains",
    "to": 85
  }, {
    "from": 99,
    "label": "contains",
    "to": 86
  }, {
    "from": 99,
    "label": "contains",
    "to": 87
  }, {
    "from": 99,
    "label": "contains",
    "to": 88
  }, {
    "from": 99,
    "label": "contains",
    "to": 89
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 9,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 9,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 71
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 72
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mbox",
    "type": "module"
  }, {
    "id": 2,
    "text": "function _M.open(server, port, create)\r\n    local tp = socket.try(tp.connect(server, port or _M.PORT, _M.TIMEOUT, create))\r\n    local f = base.setmetatable({ tp = tp }, metat)\r\n    -- make sure everything gets closed in an exception\r\n    f.try = socket.newtry(function() f:close() end)\r\n    return f\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function _M.open(host, port, create)\r\n    -- create socket with user connect function, or with default\r\n    local c = socket.try((create or socket.tcp)())\r\n    local h = base.setmetatable({ c = c }, metat)\r\n    -- create finalized try\r\n    h.try = socket.newtry(function() h:close() end)\r\n    -- set timeout before connecting\r\n    h.try(c:settimeout(_M.TIMEOUT))\r\n    h.try(c:connect(host, port or _M.PORT))\r\n    -- here everything worked\r\n    return h\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function _M.split_message(message_s)\r\n    local message = {}\r\n    message_s = string.gsub(message_s, \"\\r\\n\", \"\\n\")\r\n    string.gsub(message_s, \"^(.-\\n)\\n\", function (h) message.headers = h end)\r\n    string.gsub(message_s, \"^.-\\n\\n(.*)\", function (b) message.body = b end)\r\n    if not message.body then\r\n        string.gsub(message_s, \"^\\n(.*)\", function (b) message.body = b end)\r\n    end\r\n    if not message.headers and not message.body then\r\n        message.headers = message_s\r\n    end\r\n    return message.headers or \"\", message.body or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local message = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "message_s = string.gsub(message_s, \"\\r\\n\", \"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "string.gsub(message_s, \"^(.-\\n)\\n\", function (h) message.headers = h end)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "message.headers = h",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "string.gsub(message_s, \"^.-\\n\\n(.*)\", function (b) message.body = b end)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "message.body = b",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if not message.body then\r\n        string.gsub(message_s, \"^\\n(.*)\", function (b) message.body = b end)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "string.gsub(message_s, \"^\\n(.*)\", function (b) message.body = b end)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "if not message.headers and not message.body then\r\n        message.headers = message_s\r\n    end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "message.headers = message_s",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function _M.split_headers(headers_s)\r\n    local headers = {}\r\n    headers_s = string.gsub(headers_s, \"\\r\\n\", \"\\n\")\r\n    headers_s = string.gsub(headers_s, \"\\n[ ]+\", \" \")\r\n    string.gsub(\"\\n\" .. headers_s, \"\\n([^\\n]+)\", function (h) table.insert(headers, h) end)\r\n    return headers\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local headers = {}",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "headers_s = string.gsub(headers_s, \"\\r\\n\", \"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "headers_s = string.gsub(headers_s, \"\\n[ ]+\", \" \")",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "string.gsub(\"\\n\" .. headers_s, \"\\n([^\\n]+)\", function (h) table.insert(headers, h) end)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "table.insert(headers, h)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function _M.parse_header(header_s)\r\n    header_s = string.gsub(header_s, \"\\n[ ]+\", \" \")\r\n    header_s = string.gsub(header_s, \"\\n+\", \"\")\r\n    local _, __, name, value = string.find(header_s, \"([^%s:]-):%s*(.*)\")\r\n    return name, value\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "header_s = string.gsub(header_s, \"\\n[ ]+\", \" \")",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "header_s = string.gsub(header_s, \"\\n+\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "local _, __, name, value = string.find(header_s, \"([^%s:]-):%s*(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function _M.parse_headers(headers_s)\r\n    local headers_t = _M.split_headers(headers_s)\r\n    local headers = {}\r\n    for i = 1, #headers_t do\r\n        local name, value = _M.parse_header(headers_t[i])\r\n        if name then\r\n            name = string.lower(name)\r\n            if headers[name] then\r\n                headers[name] = headers[name] .. \", \" .. value\r\n            else headers[name] = value end\r\n        end\r\n    end\r\n    return headers\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local headers_t = _M.split_headers(headers_s)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for i = 1, #headers_t do\r\n        local name, value = _M.parse_header(headers_t[i])\r\n        if name then\r\n            name = string.lower(name)\r\n            if headers[name] then\r\n                headers[name] = headers[name] .. \", \" .. value\r\n            else headers[name] = value end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 32,
    "text": "local name, value = _M.parse_header(headers_t[i])",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "if name then\r\n            name = string.lower(name)\r\n            if headers[name] then\r\n                headers[name] = headers[name] .. \", \" .. value\r\n            else headers[name] = value end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "name = string.lower(name)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "if headers[name] then\r\n                headers[name] = headers[name] .. \", \" .. value\r\n            else headers[name] = value end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "headers[name] = headers[name] .. \", \" .. value",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "headers[name] = value",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function _M.parse_from(from)\r\n    local _, __, name, address = string.find(from, \"^%s*(.-)%s*%<(.-)%>\")\r\n    if not address then\r\n        _, __, address = string.find(from, \"%s*(.+)%s*\")\r\n    end\r\n    name = name or \"\"\r\n    address = address or \"\"\r\n    if name == \"\" then name = address end\r\n    name = string.gsub(name, '\"', \"\")\r\n    return name, address\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local _, __, name, address = string.find(from, \"^%s*(.-)%s*%<(.-)%>\")",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if not address then\r\n        _, __, address = string.find(from, \"%s*(.+)%s*\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "_, __, address = string.find(from, \"%s*(.+)%s*\")",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "name = name or \"\"",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "address = address or \"\"",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if name == \"\" then name = address end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "name = address",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "name = string.gsub(name, '\"', \"\")",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function _M.split_mbox(mbox_s)\r\n    mbox = {}\r\n    mbox_s = string.gsub(mbox_s, \"\\r\\n\", \"\\n\") ..\"\\n\\nFrom \\n\"\r\n    local nj, i, j = 1, 1, 1\r\n    while 1 do\r\n        i, nj = string.find(mbox_s, \"\\n\\nFrom .-\\n\", j)\r\n        if not i then break end\r\n        local message = string.sub(mbox_s, j, i-1)\r\n        table.insert(mbox, message)\r\n        j = nj+1\r\n    end\r\n    return mbox\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "mbox = {}",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "mbox_s = string.gsub(mbox_s, \"\\r\\n\", \"\\n\") ..\"\\n\\nFrom \\n\"",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "local nj, i, j = 1, 1, 1",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "while 1 do\r\n        i, nj = string.find(mbox_s, \"\\n\\nFrom .-\\n\", j)\r\n        if not i then break end\r\n        local message = string.sub(mbox_s, j, i-1)\r\n        table.insert(mbox, message)\r\n        j = nj+1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 54,
    "text": "i, nj = string.find(mbox_s, \"\\n\\nFrom .-\\n\", j)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if not i then break end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local message = string.sub(mbox_s, j, i-1)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "table.insert(mbox, message)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "j = nj+1",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function _M.parse(mbox_s)\r\n    local mbox = _M.split_mbox(mbox_s)\r\n    for i = 1, #mbox do\r\n        mbox[i] = _M.parse_message(mbox[i])\r\n    end\r\n    return mbox\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local mbox = _M.split_mbox(mbox_s)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "for i = 1, #mbox do\r\n        mbox[i] = _M.parse_message(mbox[i])\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 63,
    "text": "mbox[i] = _M.parse_message(mbox[i])",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function _M.parse_message(message_s)\r\n    local message = {}\r\n    message.headers, message.body = _M.split_message(message_s)\r\n    message.headers = _M.parse_headers(message.headers)\r\n    return message\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "message.headers, message.body = _M.split_message(message_s)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "message.headers = _M.parse_headers(message.headers)",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function (h) message.headers = h end",
    "type": "function"
  }, {
    "id": 70,
    "text": "function (b) message.body = b end",
    "type": "function"
  }, {
    "id": 71,
    "text": "function (b) message.body = b end",
    "type": "function"
  }, {
    "id": 72,
    "text": "function (h) table.insert(headers, h) end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "function container"
  }, {
    "id": 74,
    "text": "function _M.normalize(marker)\r\n    return ltn12.filter.cycle(_M.eol, 0, marker)\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "function _M.stuff()\r\n    return ltn12.filter.cycle(_M.dot, 2)\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "function _M.open(server, port, create)\r\n    local tp = socket.try(tp.connect(server or _M.SERVER, port or _M.PORT,\r\n        _M.TIMEOUT, create))\r\n    local s = base.setmetatable({tp = tp}, metat)\r\n    -- make sure tp is closed if we get an exception\r\n    s.try = socket.newtry(function()\r\n        s:close()\r\n    end)\r\n    return s\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "function _M.message(mesgt)\r\n    mesgt.headers = adjust_headers(mesgt)\r\n    -- create and return message source\r\n    local co = coroutine.create(function() send_message(mesgt) end)\r\n    return function()\r\n        local ret, a, b = coroutine.resume(co)\r\n        if ret then return a, b\r\n        else return nil, a end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "function _M.connect4(address, port, laddress, lport)\r\n    return socket.connect(address, port, laddress, lport, \"inet\")\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "function _M.connect6(address, port, laddress, lport)\r\n    return socket.connect(address, port, laddress, lport, \"inet6\")\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "function _M.bind(host, port, backlog)\r\n    if host == \"*\" then host = \"0.0.0.0\" end\r\n    local addrinfo, err = socket.dns.getaddrinfo(host);\r\n    if not addrinfo then return nil, err end\r\n    local sock, res\r\n    err = \"no info on address\"\r\n    for i, alt in base.ipairs(addrinfo) do\r\n        if alt.family == \"inet\" then\r\n            sock, err = socket.tcp()\r\n        else\r\n            sock, err = socket.tcp6()\r\n        end\r\n        if not sock then return nil, err end\r\n        sock:setoption(\"reuseaddr\", true)\r\n        res, err = sock:bind(alt.addr, port)\r\n        if not res then \r\n            sock:close()\r\n        else \r\n            res, err = sock:listen(backlog)\r\n            if not res then \r\n                sock:close()\r\n            else\r\n                return sock\r\n            end\r\n        end \r\n    end\r\n    return nil, err\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "function _M.choose(table)\r\n    return function(name, opt1, opt2)\r\n        if base.type(name) ~= \"string\" then\r\n            name, opt1, opt2 = \"default\", name, opt1\r\n        end\r\n        local f = table[name or \"nil\"]\r\n        if not f then base.error(\"unknown key (\".. base.tostring(name) ..\")\", 3)\r\n        else return f(opt1, opt2) end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "function _M.connect(host, port, timeout, create)\r\n    local c, e = (create or socket.tcp)()\r\n    if not c then return nil, e end\r\n    c:settimeout(timeout or _M.TIMEOUT)\r\n    local r, e = c:connect(host, port)\r\n    if not r then\r\n        c:close()\r\n        return nil, e\r\n    end\r\n    return base.setmetatable({c = c}, metat)\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "function _M.escape(s)\r\n    return (string.gsub(s, \"([^A-Za-z0-9_])\", function(c)\r\n        return string.format(\"%%%02x\", string.byte(c))\r\n    end))\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "function _M.unescape(s)\r\n    return (string.gsub(s, \"%%(%x%x)\", function(hex)\r\n        return string.char(base.tonumber(hex, 16))\r\n    end))\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "function _M.parse(url, default)\r\n    -- initialize default parameters\r\n    local parsed = {}\r\n    for i,v in base.pairs(default or parsed) do parsed[i] = v end\r\n    -- empty url is parsed to nil\r\n    if not url or url == \"\" then return nil, \"invalid url\" end\r\n    -- remove whitespace\r\n    -- url = string.gsub(url, \"%s\", \"\")\r\n    -- get fragment\r\n    url = string.gsub(url, \"#(.*)$\", function(f)\r\n        parsed.fragment = f\r\n        return \"\"\r\n    end)\r\n    -- get scheme\r\n    url = string.gsub(url, \"^([%w][%w%+%-%.]*)%:\",\r\n        function(s) parsed.scheme = s; return \"\" end)\r\n    -- get authority\r\n    url = string.gsub(url, \"^//([^/]*)\", function(n)\r\n        parsed.authority = n\r\n        return \"\"\r\n    end)\r\n    -- get query string\r\n    url = string.gsub(url, \"%?(.*)\", function(q)\r\n        parsed.query = q\r\n        return \"\"\r\n    end)\r\n    -- get params\r\n    url = string.gsub(url, \"%;(.*)\", function(p)\r\n        parsed.params = p\r\n        return \"\"\r\n    end)\r\n    -- path is whatever was left\r\n    if url ~= \"\" then parsed.path = url end\r\n    local authority = parsed.authority\r\n    if not authority then return parsed end\r\n    authority = string.gsub(authority,\"^([^@]*)@\",\r\n        function(u) parsed.userinfo = u; return \"\" end)\r\n    authority = string.gsub(authority, \":([^:%]]*)$\",\r\n        function(p) parsed.port = p; return \"\" end)\r\n    if authority ~= \"\" then \r\n        -- IPv6?\r\n        parsed.host = string.match(authority, \"^%[(.+)%]$\") or authority \r\n    end\r\n    local userinfo = parsed.userinfo\r\n    if not userinfo then return parsed end\r\n    userinfo = string.gsub(userinfo, \":([^:]*)$\",\r\n        function(p) parsed.password = p; return \"\" end)\r\n    parsed.user = userinfo\r\n    return parsed\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "function _M.build(parsed)\r\n    local ppath = _M.parse_path(parsed.path or \"\")\r\n    local url = _M.build_path(ppath)\r\n    if parsed.params then url = url .. \";\" .. parsed.params end\r\n    if parsed.query then url = url .. \"?\" .. parsed.query end\r\n    local authority = parsed.authority\r\n    if parsed.host then\r\n        authority = parsed.host\r\n        if string.find(authority, \":\") then -- IPv6?\r\n            authority = \"[\" .. authority .. \"]\"\r\n        end\r\n        if parsed.port then authority = authority .. \":\" .. parsed.port end\r\n        local userinfo = parsed.userinfo\r\n        if parsed.user then\r\n            userinfo = parsed.user\r\n            if parsed.password then\r\n                userinfo = userinfo .. \":\" .. parsed.password\r\n            end\r\n        end\r\n        if userinfo then authority = userinfo .. \"@\" .. authority end\r\n    end\r\n    if authority then url = \"//\" .. authority .. url end\r\n    if parsed.scheme then url = parsed.scheme .. \":\" .. url end\r\n    if parsed.fragment then url = url .. \"#\" .. parsed.fragment end\r\n    -- url = string.gsub(url, \"%s\", \"\")\r\n    return url\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "function _M.absolute(base_url, relative_url)\r\n    if base.type(base_url) == \"table\" then\r\n        base_parsed = base_url\r\n        base_url = _M.build(base_parsed)\r\n    else\r\n        base_parsed = _M.parse(base_url)\r\n    end\r\n    local relative_parsed = _M.parse(relative_url)\r\n    if not base_parsed then return relative_url\r\n    elseif not relative_parsed then return base_url\r\n    elseif relative_parsed.scheme then return relative_url\r\n    else\r\n        relative_parsed.scheme = base_parsed.scheme\r\n        if not relative_parsed.authority then\r\n            relative_parsed.authority = base_parsed.authority\r\n            if not relative_parsed.path then\r\n                relative_parsed.path = base_parsed.path\r\n                if not relative_parsed.params then\r\n                    relative_parsed.params = base_parsed.params\r\n                    if not relative_parsed.query then\r\n                        relative_parsed.query = base_parsed.query\r\n                    end\r\n                end\r\n            else    \r\n                relative_parsed.path = absolute_path(base_parsed.path or \"\",\r\n                    relative_parsed.path)\r\n            end\r\n        end\r\n        return _M.build(relative_parsed)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "function _M.parse_path(path)\r\n    local parsed = {}\r\n    path = path or \"\"\r\n    --path = string.gsub(path, \"%s\", \"\")\r\n    string.gsub(path, \"([^/]+)\", function (s) table.insert(parsed, s) end)\r\n    for i = 1, #parsed do\r\n        parsed[i] = _M.unescape(parsed[i])\r\n    end\r\n    if string.sub(path, 1, 1) == \"/\" then parsed.is_absolute = 1 end\r\n    if string.sub(path, -1, -1) == \"/\" then parsed.is_directory = 1 end\r\n    return parsed\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "function _M.build_path(parsed, unsafe)\r\n    local path = \"\"\r\n    local n = #parsed\r\n    if unsafe then\r\n        for i = 1, n-1 do\r\n            path = path .. parsed[i]\r\n            path = path .. \"/\"\r\n        end\r\n        if n > 0 then\r\n            path = path .. parsed[n]\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end\r\n    else\r\n        for i = 1, n-1 do\r\n            path = path .. protect_segment(parsed[i])\r\n            path = path .. \"/\"\r\n        end\r\n        if n > 0 then\r\n            path = path .. protect_segment(parsed[n])\r\n            if parsed.is_directory then path = path .. \"/\" end\r\n        end\r\n    end\r\n    if parsed.is_absolute then path = \"/\" .. path end\r\n    return path\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "find",
    "type": "global function"
  }, {
    "id": 91,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 92,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 93,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 94,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "variable container"
  }, {
    "id": 98,
    "text": "",
    "type": "require container"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 101,
    "text": "",
    "type": "interface container"
  }, {
    "id": 102,
    "text": "",
    "type": "interface"
  } ]
}