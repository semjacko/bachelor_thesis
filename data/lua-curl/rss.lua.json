{
  "_filename": "rss.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-curl/examples/rss.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "calls",
    "to": 17
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 14,
    "label": "calls",
    "to": 19
  }, {
    "from": 14,
    "label": "calls",
    "to": 19
  }, {
    "from": 14,
    "label": "calls",
    "to": 20
  }, {
    "from": 14,
    "label": "calls",
    "to": 21
  }, {
    "from": 14,
    "label": "calls",
    "to": 21
  }, {
    "from": 14,
    "label": "calls",
    "to": 16
  }, {
    "from": 14,
    "label": "calls",
    "to": 22
  }, {
    "from": 14,
    "label": "calls",
    "to": 22
  }, {
    "from": 14,
    "label": "calls",
    "to": 15
  }, {
    "from": 7,
    "label": "calls",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 14
  }, {
    "from": 14,
    "label": "declares",
    "to": 2
  }, {
    "from": 14,
    "label": "declares",
    "to": 7
  }, {
    "from": 14,
    "label": "declares",
    "to": 11
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 25,
    "label": "initializes",
    "to": 27
  }, {
    "from": 27,
    "label": "assigns",
    "to": 28
  }, {
    "from": 25,
    "label": "initializes",
    "to": 29
  }, {
    "from": 29,
    "label": "assigns",
    "to": 30
  }, {
    "from": 25,
    "label": "initializes",
    "to": 31
  }, {
    "from": 31,
    "label": "assigns",
    "to": 32
  }, {
    "from": 25,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "assigns",
    "to": 34
  }, {
    "from": 25,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 25,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 26,
    "label": "initializes",
    "to": 24
  }, {
    "from": 24,
    "label": "requires",
    "to": 39
  }, {
    "from": 26,
    "label": "initializes",
    "to": 24
  }, {
    "from": 31,
    "label": "contains",
    "to": 2
  }, {
    "from": 31,
    "label": "contains",
    "to": 7
  }, {
    "from": 31,
    "label": "contains",
    "to": 11
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "rss",
    "type": "module"
  }, {
    "id": 2,
    "text": "function callback.StartElement(parser, tagname)\r\n   tags[#tags + 1] = tagname\r\n   if (tagname == \"item\") then\r\n      items[#items + 1] = {}\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "tags[#tags + 1] = tagname",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "if (tagname == \"item\") then\r\n      items[#items + 1] = {}\r\n   end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "items[#items + 1] = {}",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function callback.CharacterData(parser, str) \r\n   if (tags[#tags -1] == \"item\") then\r\n      --we are parsing a item, get rid of trailing whitespace\r\n      items[#items][tags[#tags]] = string.gsub(str, \"%s*$\", \"\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if (tags[#tags -1] == \"item\") then\r\n      --we are parsing a item, get rid of trailing whitespace\r\n      items[#items][tags[#tags]] = string.gsub(str, \"%s*$\", \"\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "items[#items][tags[#tags]] = string.gsub(str, \"%s*$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function callback.EndElement(parser, tagname)\r\n   --assuming well formed xml\r\n   tags[#tags] = nil\t\t\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "tags[#tags] = nil",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "",
    "type": "function container"
  }, {
    "id": 15,
    "text": "multi_init",
    "type": "global function"
  }, {
    "id": 16,
    "text": "new",
    "type": "global function"
  }, {
    "id": 17,
    "text": "easy_init",
    "type": "global function"
  }, {
    "id": 18,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 19,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 20,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 21,
    "text": "print",
    "type": "global function"
  }, {
    "id": 22,
    "text": "require",
    "type": "global function"
  }, {
    "id": 23,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 24,
    "text": "",
    "type": "global variable"
  }, {
    "id": 25,
    "text": "",
    "type": "variable container"
  }, {
    "id": 26,
    "text": "",
    "type": "require container"
  }, {
    "id": 27,
    "text": "",
    "type": "global variable"
  }, {
    "id": 28,
    "text": "",
    "type": "n/a"
  }, {
    "id": 29,
    "text": "",
    "type": "global variable"
  }, {
    "id": 30,
    "text": "",
    "type": "n/a"
  }, {
    "id": 31,
    "text": "",
    "type": "global variable"
  }, {
    "id": 32,
    "text": "",
    "type": "n/a"
  }, {
    "id": 33,
    "text": "",
    "type": "global variable"
  }, {
    "id": 34,
    "text": "",
    "type": "n/a"
  }, {
    "id": 35,
    "text": "",
    "type": "global variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "global variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  }, {
    "id": 39,
    "text": "(lxp)",
    "type": "module"
  } ]
}