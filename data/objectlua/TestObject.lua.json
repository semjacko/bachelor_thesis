{
  "_filename": "TestObject.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/objectlua/test/TestObject.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 9,
    "label": "has",
    "to": 17
  }, {
    "from": 9,
    "label": "has",
    "to": 18
  }, {
    "from": 9,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 20
  }, {
    "from": 9,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 12
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 12
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 12
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 33,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 33,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 12
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 36
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 10
  }, {
    "from": 44,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 34
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 36
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 36
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 44,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 12
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 36
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 36
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 65
  }, {
    "from": 57,
    "label": "has",
    "to": 66
  }, {
    "from": 57,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 60
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 62
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 62
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 62
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 62
  }, {
    "from": 74,
    "label": "has",
    "to": 80
  }, {
    "from": 74,
    "label": "has",
    "to": 81
  }, {
    "from": 74,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 62
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 62
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 75
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 60
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 62
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 77
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 62
  }, {
    "from": 87,
    "label": "has",
    "to": 94
  }, {
    "from": 87,
    "label": "has",
    "to": 78
  }, {
    "from": 87,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 62
  }, {
    "from": 87,
    "label": "has",
    "to": 97
  }, {
    "from": 87,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 60
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 62
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 92
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 62
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 92
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 62
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 10
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 12
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 34
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 111,
    "label": "has",
    "to": 119
  }, {
    "from": 111,
    "label": "has",
    "to": 120
  }, {
    "from": 111,
    "label": "has",
    "to": 121
  }, {
    "from": 111,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 12
  }, {
    "from": 123,
    "label": "has",
    "to": 113
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 118
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 62
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 62
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 62
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 78
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 62
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 134,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 62
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 62
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 135
  }, {
    "from": 145,
    "label": "has",
    "to": 78
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 80
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 145,
    "label": "has",
    "to": 149
  }, {
    "from": 145,
    "label": "has",
    "to": 150
  }, {
    "from": 145,
    "label": "has",
    "to": 151
  }, {
    "from": 145,
    "label": "has",
    "to": 152
  }, {
    "from": 145,
    "label": "has",
    "to": 153
  }, {
    "from": 145,
    "label": "has",
    "to": 154
  }, {
    "from": 145,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 135
  }, {
    "from": 156,
    "label": "has",
    "to": 78
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 162,
    "label": "has",
    "to": 168
  }, {
    "from": 162,
    "label": "has",
    "to": 169
  }, {
    "from": 162,
    "label": "has",
    "to": 170
  }, {
    "from": 162,
    "label": "has",
    "to": 171
  }, {
    "from": 162,
    "label": "has",
    "to": 172
  }, {
    "from": 162,
    "label": "has",
    "to": 173
  }, {
    "from": 174,
    "label": "has",
    "to": 135
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 174,
    "label": "has",
    "to": 177
  }, {
    "from": 174,
    "label": "has",
    "to": 178
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 174,
    "label": "has",
    "to": 180
  }, {
    "from": 174,
    "label": "has",
    "to": 181
  }, {
    "from": 174,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 135
  }, {
    "from": 183,
    "label": "has",
    "to": 175
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 62
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 62
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 62
  }, {
    "from": 199,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 199,
    "label": "has",
    "to": 206
  }, {
    "from": 199,
    "label": "has",
    "to": 207
  }, {
    "from": 199,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 202
  }, {
    "from": 209,
    "label": "has",
    "to": 203
  }, {
    "from": 209,
    "label": "has",
    "to": 62
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 211,
    "label": "has",
    "to": 58
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 62
  }, {
    "from": 211,
    "label": "has",
    "to": 63
  }, {
    "from": 211,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 62
  }, {
    "from": 211,
    "label": "has",
    "to": 65
  }, {
    "from": 211,
    "label": "has",
    "to": 216
  }, {
    "from": 211,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 213
  }, {
    "from": 218,
    "label": "has",
    "to": 62
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 220,
    "label": "has",
    "to": 215
  }, {
    "from": 220,
    "label": "has",
    "to": 62
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 222,
    "label": "has",
    "to": 58
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 62
  }, {
    "from": 222,
    "label": "has",
    "to": 63
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 62
  }, {
    "from": 222,
    "label": "has",
    "to": 65
  }, {
    "from": 222,
    "label": "has",
    "to": 225
  }, {
    "from": 222,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 62
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 62
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 231,
    "label": "has",
    "to": 233
  }, {
    "from": 231,
    "label": "has",
    "to": 234
  }, {
    "from": 231,
    "label": "has",
    "to": 235
  }, {
    "from": 231,
    "label": "has",
    "to": 10
  }, {
    "from": 231,
    "label": "has",
    "to": 236
  }, {
    "from": 231,
    "label": "has",
    "to": 237
  }, {
    "from": 231,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 10
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 62
  }, {
    "from": 239,
    "label": "has",
    "to": 241
  }, {
    "from": 239,
    "label": "has",
    "to": 242
  }, {
    "from": 239,
    "label": "has",
    "to": 243
  }, {
    "from": 239,
    "label": "has",
    "to": 244
  }, {
    "from": 239,
    "label": "has",
    "to": 245
  }, {
    "from": 246,
    "label": "has",
    "to": 62
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 188
  }, {
    "from": 248,
    "label": "has",
    "to": 189
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 128
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 251,
    "label": "has",
    "to": 206
  }, {
    "from": 251,
    "label": "has",
    "to": 255
  }, {
    "from": 251,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 254
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 128
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 206
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 259,
    "label": "has",
    "to": 263
  }, {
    "from": 259,
    "label": "has",
    "to": 264
  }, {
    "from": 265,
    "label": "has",
    "to": 261
  }, {
    "from": 265,
    "label": "has",
    "to": 266
  }, {
    "from": 267,
    "label": "has",
    "to": 62
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 269,
    "label": "has",
    "to": 271
  }, {
    "from": 269,
    "label": "has",
    "to": 272
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 273,
    "label": "has",
    "to": 276
  }, {
    "from": 273,
    "label": "has",
    "to": 277
  }, {
    "from": 277,
    "label": "has",
    "to": 270
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 273,
    "label": "has",
    "to": 279
  }, {
    "from": 273,
    "label": "has",
    "to": 280
  }, {
    "from": 273,
    "label": "has",
    "to": 281
  }, {
    "from": 273,
    "label": "has",
    "to": 282
  }, {
    "from": 273,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 287
  }, {
    "from": 284,
    "label": "has",
    "to": 288
  }, {
    "from": 284,
    "label": "has",
    "to": 289
  }, {
    "from": 284,
    "label": "has",
    "to": 290
  }, {
    "from": 284,
    "label": "has",
    "to": 291
  }, {
    "from": 284,
    "label": "has",
    "to": 292
  }, {
    "from": 284,
    "label": "has",
    "to": 293
  }, {
    "from": 284,
    "label": "has",
    "to": 294
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 295,
    "label": "has",
    "to": 298
  }, {
    "from": 295,
    "label": "has",
    "to": 299
  }, {
    "from": 295,
    "label": "has",
    "to": 300
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 301,
    "label": "has",
    "to": 304
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 302
  }, {
    "from": 305,
    "label": "has",
    "to": 308
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 309,
    "label": "has",
    "to": 311
  }, {
    "from": 309,
    "label": "has",
    "to": 312
  }, {
    "from": 309,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 286
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 316,
    "label": "has",
    "to": 302
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 134,
    "label": "calls",
    "to": 319
  }, {
    "from": 145,
    "label": "calls",
    "to": 319
  }, {
    "from": 145,
    "label": "calls",
    "to": 319
  }, {
    "from": 145,
    "label": "calls",
    "to": 319
  }, {
    "from": 145,
    "label": "calls",
    "to": 319
  }, {
    "from": 145,
    "label": "calls",
    "to": 319
  }, {
    "from": 145,
    "label": "calls",
    "to": 319
  }, {
    "from": 145,
    "label": "calls",
    "to": 319
  }, {
    "from": 145,
    "label": "calls",
    "to": 319
  }, {
    "from": 156,
    "label": "calls",
    "to": 319
  }, {
    "from": 156,
    "label": "calls",
    "to": 319
  }, {
    "from": 156,
    "label": "calls",
    "to": 319
  }, {
    "from": 156,
    "label": "calls",
    "to": 319
  }, {
    "from": 162,
    "label": "calls",
    "to": 319
  }, {
    "from": 162,
    "label": "calls",
    "to": 319
  }, {
    "from": 162,
    "label": "calls",
    "to": 319
  }, {
    "from": 162,
    "label": "calls",
    "to": 319
  }, {
    "from": 162,
    "label": "calls",
    "to": 319
  }, {
    "from": 162,
    "label": "calls",
    "to": 319
  }, {
    "from": 162,
    "label": "calls",
    "to": 319
  }, {
    "from": 174,
    "label": "calls",
    "to": 319
  }, {
    "from": 174,
    "label": "calls",
    "to": 319
  }, {
    "from": 174,
    "label": "calls",
    "to": 319
  }, {
    "from": 192,
    "label": "calls",
    "to": 319
  }, {
    "from": 199,
    "label": "calls",
    "to": 319
  }, {
    "from": 199,
    "label": "calls",
    "to": 319
  }, {
    "from": 211,
    "label": "calls",
    "to": 319
  }, {
    "from": 231,
    "label": "calls",
    "to": 319
  }, {
    "from": 231,
    "label": "calls",
    "to": 319
  }, {
    "from": 231,
    "label": "calls",
    "to": 319
  }, {
    "from": 231,
    "label": "calls",
    "to": 319
  }, {
    "from": 231,
    "label": "calls",
    "to": 319
  }, {
    "from": 231,
    "label": "calls",
    "to": 319
  }, {
    "from": 273,
    "label": "calls",
    "to": 319
  }, {
    "from": 295,
    "label": "calls",
    "to": 319
  }, {
    "from": 309,
    "label": "calls",
    "to": 319
  }, {
    "from": 309,
    "label": "calls",
    "to": 319
  }, {
    "from": 187,
    "label": "calls",
    "to": 323
  }, {
    "from": 248,
    "label": "calls",
    "to": 323
  }, {
    "from": 301,
    "label": "calls",
    "to": 323
  }, {
    "from": 305,
    "label": "calls",
    "to": 323
  }, {
    "from": 211,
    "label": "calls",
    "to": 324
  }, {
    "from": 183,
    "label": "calls",
    "to": 326
  }, {
    "from": 183,
    "label": "calls",
    "to": 326
  }, {
    "from": 273,
    "label": "calls",
    "to": 322
  }, {
    "from": 211,
    "label": "calls",
    "to": 325
  }, {
    "from": 318,
    "label": "calls",
    "to": 321
  }, {
    "from": 318,
    "label": "calls",
    "to": 321
  }, {
    "from": 295,
    "label": "calls",
    "to": 321
  }, {
    "from": 305,
    "label": "calls",
    "to": 321
  }, {
    "from": 9,
    "label": "calls",
    "to": 327
  }, {
    "from": 9,
    "label": "calls",
    "to": 327
  }, {
    "from": 9,
    "label": "calls",
    "to": 327
  }, {
    "from": 9,
    "label": "calls",
    "to": 327
  }, {
    "from": 9,
    "label": "calls",
    "to": 327
  }, {
    "from": 9,
    "label": "calls",
    "to": 327
  }, {
    "from": 24,
    "label": "calls",
    "to": 327
  }, {
    "from": 24,
    "label": "calls",
    "to": 327
  }, {
    "from": 33,
    "label": "calls",
    "to": 327
  }, {
    "from": 44,
    "label": "calls",
    "to": 327
  }, {
    "from": 57,
    "label": "calls",
    "to": 327
  }, {
    "from": 74,
    "label": "calls",
    "to": 327
  }, {
    "from": 87,
    "label": "calls",
    "to": 327
  }, {
    "from": 87,
    "label": "calls",
    "to": 327
  }, {
    "from": 87,
    "label": "calls",
    "to": 327
  }, {
    "from": 111,
    "label": "calls",
    "to": 327
  }, {
    "from": 111,
    "label": "calls",
    "to": 327
  }, {
    "from": 111,
    "label": "calls",
    "to": 327
  }, {
    "from": 111,
    "label": "calls",
    "to": 327
  }, {
    "from": 127,
    "label": "calls",
    "to": 327
  }, {
    "from": 134,
    "label": "calls",
    "to": 327
  }, {
    "from": 162,
    "label": "calls",
    "to": 327
  }, {
    "from": 162,
    "label": "calls",
    "to": 327
  }, {
    "from": 162,
    "label": "calls",
    "to": 327
  }, {
    "from": 183,
    "label": "calls",
    "to": 327
  }, {
    "from": 183,
    "label": "calls",
    "to": 327
  }, {
    "from": 211,
    "label": "calls",
    "to": 327
  }, {
    "from": 222,
    "label": "calls",
    "to": 327
  }, {
    "from": 239,
    "label": "calls",
    "to": 327
  }, {
    "from": 239,
    "label": "calls",
    "to": 327
  }, {
    "from": 251,
    "label": "calls",
    "to": 327
  }, {
    "from": 259,
    "label": "calls",
    "to": 327
  }, {
    "from": 269,
    "label": "calls",
    "to": 327
  }, {
    "from": 273,
    "label": "calls",
    "to": 327
  }, {
    "from": 273,
    "label": "calls",
    "to": 327
  }, {
    "from": 273,
    "label": "calls",
    "to": 327
  }, {
    "from": 284,
    "label": "calls",
    "to": 327
  }, {
    "from": 284,
    "label": "calls",
    "to": 327
  }, {
    "from": 284,
    "label": "calls",
    "to": 327
  }, {
    "from": 284,
    "label": "calls",
    "to": 327
  }, {
    "from": 284,
    "label": "calls",
    "to": 327
  }, {
    "from": 284,
    "label": "calls",
    "to": 327
  }, {
    "from": 295,
    "label": "calls",
    "to": 327
  }, {
    "from": 33,
    "label": "calls",
    "to": 320
  }, {
    "from": 44,
    "label": "calls",
    "to": 320
  }, {
    "from": 44,
    "label": "calls",
    "to": 320
  }, {
    "from": 74,
    "label": "calls",
    "to": 320
  }, {
    "from": 87,
    "label": "calls",
    "to": 320
  }, {
    "from": 87,
    "label": "calls",
    "to": 320
  }, {
    "from": 111,
    "label": "calls",
    "to": 320
  }, {
    "from": 134,
    "label": "calls",
    "to": 320
  }, {
    "from": 199,
    "label": "calls",
    "to": 320
  }, {
    "from": 211,
    "label": "calls",
    "to": 320
  }, {
    "from": 222,
    "label": "calls",
    "to": 320
  }, {
    "from": 4,
    "label": "contains",
    "to": 318
  }, {
    "from": 318,
    "label": "declares",
    "to": 5
  }, {
    "from": 318,
    "label": "declares",
    "to": 9
  }, {
    "from": 318,
    "label": "declares",
    "to": 22
  }, {
    "from": 318,
    "label": "declares",
    "to": 24
  }, {
    "from": 318,
    "label": "declares",
    "to": 31
  }, {
    "from": 318,
    "label": "declares",
    "to": 33
  }, {
    "from": 318,
    "label": "declares",
    "to": 40
  }, {
    "from": 318,
    "label": "declares",
    "to": 42
  }, {
    "from": 318,
    "label": "declares",
    "to": 44
  }, {
    "from": 318,
    "label": "declares",
    "to": 51
  }, {
    "from": 318,
    "label": "declares",
    "to": 53
  }, {
    "from": 318,
    "label": "declares",
    "to": 55
  }, {
    "from": 318,
    "label": "declares",
    "to": 57
  }, {
    "from": 318,
    "label": "declares",
    "to": 68
  }, {
    "from": 318,
    "label": "declares",
    "to": 70
  }, {
    "from": 318,
    "label": "declares",
    "to": 72
  }, {
    "from": 318,
    "label": "declares",
    "to": 74
  }, {
    "from": 318,
    "label": "declares",
    "to": 83
  }, {
    "from": 318,
    "label": "declares",
    "to": 85
  }, {
    "from": 318,
    "label": "declares",
    "to": 87
  }, {
    "from": 318,
    "label": "declares",
    "to": 99
  }, {
    "from": 318,
    "label": "declares",
    "to": 101
  }, {
    "from": 318,
    "label": "declares",
    "to": 103
  }, {
    "from": 318,
    "label": "declares",
    "to": 105
  }, {
    "from": 318,
    "label": "declares",
    "to": 107
  }, {
    "from": 318,
    "label": "declares",
    "to": 109
  }, {
    "from": 318,
    "label": "declares",
    "to": 111
  }, {
    "from": 318,
    "label": "declares",
    "to": 123
  }, {
    "from": 318,
    "label": "declares",
    "to": 125
  }, {
    "from": 318,
    "label": "declares",
    "to": 127
  }, {
    "from": 318,
    "label": "declares",
    "to": 132
  }, {
    "from": 318,
    "label": "declares",
    "to": 134
  }, {
    "from": 318,
    "label": "declares",
    "to": 141
  }, {
    "from": 318,
    "label": "declares",
    "to": 143
  }, {
    "from": 318,
    "label": "declares",
    "to": 145
  }, {
    "from": 318,
    "label": "declares",
    "to": 156
  }, {
    "from": 318,
    "label": "declares",
    "to": 162
  }, {
    "from": 318,
    "label": "declares",
    "to": 174
  }, {
    "from": 318,
    "label": "declares",
    "to": 183
  }, {
    "from": 318,
    "label": "declares",
    "to": 187
  }, {
    "from": 318,
    "label": "declares",
    "to": 192
  }, {
    "from": 318,
    "label": "declares",
    "to": 197
  }, {
    "from": 318,
    "label": "declares",
    "to": 199
  }, {
    "from": 318,
    "label": "declares",
    "to": 209
  }, {
    "from": 318,
    "label": "declares",
    "to": 211
  }, {
    "from": 318,
    "label": "declares",
    "to": 218
  }, {
    "from": 318,
    "label": "declares",
    "to": 220
  }, {
    "from": 318,
    "label": "declares",
    "to": 222
  }, {
    "from": 318,
    "label": "declares",
    "to": 227
  }, {
    "from": 318,
    "label": "declares",
    "to": 229
  }, {
    "from": 318,
    "label": "declares",
    "to": 231
  }, {
    "from": 318,
    "label": "declares",
    "to": 239
  }, {
    "from": 318,
    "label": "declares",
    "to": 246
  }, {
    "from": 318,
    "label": "declares",
    "to": 248
  }, {
    "from": 318,
    "label": "declares",
    "to": 251
  }, {
    "from": 318,
    "label": "declares",
    "to": 257
  }, {
    "from": 318,
    "label": "declares",
    "to": 259
  }, {
    "from": 318,
    "label": "declares",
    "to": 265
  }, {
    "from": 318,
    "label": "declares",
    "to": 267
  }, {
    "from": 318,
    "label": "declares",
    "to": 269
  }, {
    "from": 318,
    "label": "declares",
    "to": 273
  }, {
    "from": 318,
    "label": "declares",
    "to": 284
  }, {
    "from": 318,
    "label": "declares",
    "to": 295
  }, {
    "from": 318,
    "label": "declares",
    "to": 301
  }, {
    "from": 318,
    "label": "declares",
    "to": 305
  }, {
    "from": 318,
    "label": "declares",
    "to": 309
  }, {
    "from": 318,
    "label": "declares",
    "to": 314
  }, {
    "from": 318,
    "label": "declares",
    "to": 316
  }, {
    "from": 4,
    "label": "contains",
    "to": 329
  }, {
    "from": 4,
    "label": "contains",
    "to": 330
  }, {
    "from": 329,
    "label": "initializes",
    "to": 331
  }, {
    "from": 331,
    "label": "assigns",
    "to": 332
  }, {
    "from": 330,
    "label": "initializes",
    "to": 333
  }, {
    "from": 333,
    "label": "requires",
    "to": 2
  }, {
    "from": 330,
    "label": "initializes",
    "to": 334
  }, {
    "from": 334,
    "label": "requires",
    "to": 1
  }, {
    "from": 330,
    "label": "initializes",
    "to": 335
  }, {
    "from": 335,
    "label": "requires",
    "to": 3
  }, {
    "from": 330,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "requires",
    "to": 4
  }, {
    "from": 285,
    "label": "hasArgument",
    "to": 314
  }, {
    "from": 307,
    "label": "hasArgument",
    "to": 316
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Class",
    "type": "module"
  }, {
    "id": 2,
    "text": "Object",
    "type": "module"
  }, {
    "id": 3,
    "text": "SomeClass",
    "type": "module"
  }, {
    "id": 4,
    "text": "TestObject",
    "type": "module"
  }, {
    "id": 5,
    "text": "function TestObject:tearDown()\r\n    Class:reset()\r\n    package.loaded['SomeClass'] = nil\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "Class:reset()",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "package.loaded['SomeClass'] = nil",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function TestObject:testInheritanceAndInitialization()\r\n    local Toto = Object:subclass()\r\n\r\n    function Toto:initialize(name)\r\n        self.name = name\r\n    end\r\n\r\n    local toto = Toto:new('John')\r\n    local otherToto = Toto:new('Bob')\r\n\r\n    assertEquals(Toto, toto.class)\r\n    assertEquals(Object, Toto.superclass)\r\n    assertEquals(Object.class, Toto.class.superclass)\r\n    assertEquals(nil, toto.new)\r\n    assertEquals(toto.name, 'John')\r\n    assertEquals(otherToto.name, 'Bob')\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local Toto = Object:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "function Toto:initialize(name)\r\n        self.name = name\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 12,
    "text": "self.name = name",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "local toto = Toto:new('John')",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local otherToto = Toto:new('Bob')",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "assertEquals(Toto, toto.class)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assertEquals(Object, Toto.superclass)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assertEquals(Object.class, Toto.class.superclass)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assertEquals(nil, toto.new)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assertEquals(toto.name, 'John')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assertEquals(otherToto.name, 'Bob')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function Toto:initialize(name)\r\n        self.name = name\r\n    end",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function TestObject:testSubclassing()\r\n   local Toto = Object:subclass()\r\n\r\n   function Toto:initialize(name)\r\n      self.name = name\r\n   end\r\n\r\n   local john = Toto:new('John')\r\n   local bob = Toto:new('Bob')\r\n\r\n   assertEquals(john.name, 'John')\r\n   assertEquals(bob.name, 'Bob')\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function Toto:initialize(name)\r\n      self.name = name\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 26,
    "text": "local john = Toto:new('John')",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local bob = Toto:new('Bob')",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assertEquals(john.name, 'John')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "assertEquals(bob.name, 'Bob')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function Toto:initialize(name)\r\n      self.name = name\r\n   end",
    "type": "function"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function TestObject:testSuper()\r\n    local Toto = Object:subclass()\r\n    function Toto:initialize(name)\r\n        self.name = name\r\n    end\r\n\r\n    local Tata = Toto:subclass()\r\n    function Tata:initialize(name)\r\n       super(self, name)\r\n    end\r\n\r\n    local tata = Tata:new('Bob')\r\n    assertEquals(tata.name, 'Bob')\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local Tata = Toto:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "function Tata:initialize(name)\r\n       super(self, name)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 36,
    "text": "super(self, name)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local tata = Tata:new('Bob')",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "assertEquals(tata.name, 'Bob')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function Toto:initialize(name)\r\n        self.name = name\r\n    end",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function Tata:initialize(name)\r\n       super(self, name)\r\n    end",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function TestObject:testSuperThroughTwoLevels()\r\n    local Toto = Object:subclass()\r\n    function Toto:initialize(name)\r\n        self.name = name\r\n    end\r\n\r\n    local Tata = Toto:subclass()\r\n    function Tata:initialize(name)\r\n        super(self, name)\r\n    end\r\n\r\n    local Titi = Tata:subclass()\r\n    function Titi:initialize(name)\r\n        super(self, name)\r\n    end\r\n\r\n    local titi = Titi:new('Paul')\r\n    assertEquals(titi.name, 'Paul')\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "function Tata:initialize(name)\r\n        super(self, name)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 46,
    "text": "local Titi = Tata:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "function Titi:initialize(name)\r\n        super(self, name)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 48,
    "text": "local titi = Titi:new('Paul')",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "assertEquals(titi.name, 'Paul')",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function Toto:initialize(name)\r\n        self.name = name\r\n    end",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function Tata:initialize(name)\r\n        super(self, name)\r\n    end",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function Titi:initialize(name)\r\n        super(self, name)\r\n    end",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function TestObject:testVirtualCall()\r\n    local Base = Object:subclass()\r\n\r\n    function Base:initialize()\r\n        self.type = self:getType()\r\n    end\r\n\r\n    function Base:getType()\r\n        return 'base'\r\n    end\r\n\r\n    --\r\n    local Derived = Base:subclass()\r\n\r\n    function Derived:getType()\r\n        return 'derived'\r\n    end\r\n\r\n    local derived = Derived:new()\r\n    assertEquals(derived.type, 'derived')\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local Base = Object:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "function Base:initialize()\r\n        self.type = self:getType()\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 60,
    "text": "self.type = self:getType()",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "function Base:getType()\r\n        return 'base'\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 62,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 63,
    "text": "local Derived = Base:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "function Derived:getType()\r\n        return 'derived'\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 65,
    "text": "local derived = Derived:new()",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "assertEquals(derived.type, 'derived')",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function Base:initialize()\r\n        self.type = self:getType()\r\n    end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function Base:getType()\r\n        return 'base'\r\n    end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function Derived:getType()\r\n        return 'derived'\r\n    end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function TestObject:testSuperJump()\r\n    local Level0 = Object:subclass()\r\n    function Level0:getNumber()\r\n        return 10\r\n    end\r\n\r\n    local Level1 = Level0:subclass()\r\n\r\n    local Level2 = Level1:subclass()\r\n    -- Calling super(self) in getNumber() on a Level2 object skips Level1\r\n    -- (since it's not overriden here) and calls Level0:getNumber()\r\n    function Level2:getNumber()\r\n        return super(self) + 1\r\n    end\r\n\r\n    local level2 = Level2:new()\r\n    assertEquals(level2:getNumber(), 11)\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "local Level0 = Object:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "function Level0:getNumber()\r\n        return 10\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 77,
    "text": "local Level1 = Level0:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local Level2 = Level1:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "function Level2:getNumber()\r\n        return super(self) + 1\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 80,
    "text": "local level2 = Level2:new()",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "assertEquals(level2:getNumber(), 11)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function Level0:getNumber()\r\n        return 10\r\n    end",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function Level2:getNumber()\r\n        return super(self) + 1\r\n    end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function TestObject:testVirtualSuperThroughTwoLevels()\r\n    local Level0 = Object:subclass()\r\n    function Level0:initialize()\r\n        self.type = self:getType()\r\n    end\r\n    function Level0:getType()\r\n        return 'level0'\r\n    end\r\n    assertEquals(Level0:new().type, 'level0')\r\n\r\n    local Level1 = Level0:subclass()\r\n    function Level1:initialize()\r\n        super(self)\r\n    end\r\n    function Level1:getType()\r\n        return 'level1'\r\n    end\r\n    assertEquals(Level1:new().type, 'level1')\r\n\r\n    local Level2 = Level1:subclass()\r\n    function Level2:initialize()\r\n        super(self)\r\n    end\r\n    function Level2:getType()\r\n        return 'level2'\r\n    end\r\n    assertEquals(Level2:new().type, 'level2')\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "function Level0:initialize()\r\n        self.type = self:getType()\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 89,
    "text": "function Level0:getType()\r\n        return 'level0'\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 90,
    "text": "assertEquals(Level0:new().type, 'level0')",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "function Level1:initialize()\r\n        super(self)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 92,
    "text": "super(self)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "function Level1:getType()\r\n        return 'level1'\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 94,
    "text": "assertEquals(Level1:new().type, 'level1')",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "function Level2:initialize()\r\n        super(self)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 96,
    "text": "function Level2:getType()\r\n        return 'level2'\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 97,
    "text": "assertEquals(Level2:new().type, 'level2')",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function Level0:initialize()\r\n        self.type = self:getType()\r\n    end",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function Level0:getType()\r\n        return 'level0'\r\n    end",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function Level1:initialize()\r\n        super(self)\r\n    end",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function Level1:getType()\r\n        return 'level1'\r\n    end",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function Level2:initialize()\r\n        super(self)\r\n    end",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function Level2:getType()\r\n        return 'level2'\r\n    end",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function TestObject:testInitializeWithTwoArguments()\r\n    local Toto = Object:subclass()\r\n\r\n    function Toto:initialize(name, color)\r\n        self.name = name\r\n        self.color = color\r\n    end\r\n\r\n    local toto = Toto:new('Bob', 'red')\r\n    assertEquals(toto.name, 'Bob')\r\n    assertEquals(toto.color, 'red')\r\n\r\n    local Tata = Toto:subclass()\r\n    function Tata:initialize(name, color)\r\n        super(self, name, color)\r\n    end\r\n    local tata = Tata:new('John', 'blue')\r\n    assertEquals(tata.name, 'John')\r\n    assertEquals(tata.color, 'blue')\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "function Toto:initialize(name, color)\r\n        self.name = name\r\n        self.color = color\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 113,
    "text": "self.color = color",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "local toto = Toto:new('Bob', 'red')",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "assertEquals(toto.name, 'Bob')",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assertEquals(toto.color, 'red')",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "function Tata:initialize(name, color)\r\n        super(self, name, color)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 118,
    "text": "super(self, name, color)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "local tata = Tata:new('John', 'blue')",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "assertEquals(tata.name, 'John')",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assertEquals(tata.color, 'blue')",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function Toto:initialize(name, color)\r\n        self.name = name\r\n        self.color = color\r\n    end",
    "type": "function"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function Tata:initialize(name, color)\r\n        super(self, name, color)\r\n    end",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function TestObject:testClassMethods()\r\n   local Foo = Object:subclass()\r\n   function Foo.class:sayHello()\r\n      return 'Hello'\r\n   end\r\n   assertEquals(Foo:sayHello(), 'Hello')\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "local Foo = Object:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "function Foo.class:sayHello()\r\n      return 'Hello'\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 130,
    "text": "assertEquals(Foo:sayHello(), 'Hello')",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function Foo.class:sayHello()\r\n      return 'Hello'\r\n   end",
    "type": "function"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function TestObject:testSuperInClassMethods()\r\n    local Level1 = Object:subclass()\r\n    function Level1.class:getName()\r\n        return 'Level1'\r\n    end\r\n    assert('Level1' == Level1:getName())\r\n\r\n    local Level2 = Level1:subclass()\r\n    function Level2.class:getName()\r\n        return super(self)..'-Level2'\r\n    end\r\n\r\n    assertEquals(Level2:getName(), 'Level1-Level2')\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "local Level1 = Object:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "function Level1.class:getName()\r\n        return 'Level1'\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 137,
    "text": "assert('Level1' == Level1:getName())",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "function Level2.class:getName()\r\n        return super(self)..'-Level2'\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 139,
    "text": "assertEquals(Level2:getName(), 'Level1-Level2')",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function Level1.class:getName()\r\n        return 'Level1'\r\n    end",
    "type": "function"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function Level2.class:getName()\r\n        return super(self)..'-Level2'\r\n    end",
    "type": "function"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function TestObject:testIsKindOf()\r\n    local Level1 = Object:subclass()\r\n    local Level2 = Level1:subclass()\r\n    local object = Object:new()\r\n    local level2 = Level2:new()\r\n\r\n    assert(not object:isKindOf())\r\n    assert(object:isKindOf(Object))\r\n    assert(not object:isKindOf(Level1))\r\n    assert(level2:isKindOf(Object))\r\n    assert(level2:isKindOf(Level1))\r\n    assert(level2:isKindOf(Level2))\r\n    assert(not object:isKindOf(Class))\r\n\r\n    assert(not Level2:isKindOf(Level2))\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "local object = Object:new()",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "assert(not object:isKindOf())",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "assert(object:isKindOf(Object))",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "assert(not object:isKindOf(Level1))",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "assert(level2:isKindOf(Object))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "assert(level2:isKindOf(Level1))",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "assert(level2:isKindOf(Level2))",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "assert(not object:isKindOf(Class))",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "assert(not Level2:isKindOf(Level2))",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function TestObject:testInheritsFrom()\r\n    local Level1 = Object:subclass()\r\n    local Level2 = Level1:subclass()\r\n\r\n    assert(Level1:inheritsFrom(Object))\r\n    assert(Level2:inheritsFrom(Object))\r\n    assert(Level2:inheritsFrom(Level1))\r\n    assert(not Level2:inheritsFrom(Level2))\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "assert(Level1:inheritsFrom(Object))",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "assert(Level2:inheritsFrom(Object))",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "assert(Level2:inheritsFrom(Level1))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "assert(not Level2:inheritsFrom(Level2))",
    "type": "statement:functioncall"
  }, {
    "id": 161,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 162,
    "text": "function TestObject:testObjectModel()\r\n    assertEquals(Object.class.class, Class)\r\n    assertEquals(Class.class.class, Class)\r\n    assertEquals(Object:subclass().class.class, Class)\r\n    assert(Object:isKindOf(Object))\r\n    assert(Object:isKindOf(Class))\r\n    assert(Class:isKindOf(Object))\r\n    assert(Class:isKindOf(Class))\r\n\r\n    assert(not Object:inheritsFrom(Class))\r\n    assert(Class:inheritsFrom(Object))\r\n    assert(not Object:inheritsFrom(Object))\r\nend",
    "type": "function"
  }, {
    "id": 163,
    "text": "assertEquals(Object.class.class, Class)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "assertEquals(Class.class.class, Class)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "assertEquals(Object:subclass().class.class, Class)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "assert(Object:isKindOf(Object))",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert(Object:isKindOf(Class))",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "assert(Class:isKindOf(Object))",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "assert(Class:isKindOf(Class))",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "assert(not Object:inheritsFrom(Class))",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "assert(Class:inheritsFrom(Object))",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "assert(not Object:inheritsFrom(Object))",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "function TestObject:testClone()\r\n    local Level1 = Object:subclass()\r\n    local level1 = Level1:new()\r\n    level1.value = 5\r\n    level1.values = {6, 7}\r\n    local clone = level1:clone()\r\n\r\n    assert(clone:isKindOf(level1.class))\r\n    assert(clone.value == level1.value)\r\n    assert(clone.values == level1.values)\r\nend",
    "type": "function"
  }, {
    "id": 175,
    "text": "local level1 = Level1:new()",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "level1.value = 5",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "level1.values = {6, 7}",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "local clone = level1:clone()",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "assert(clone:isKindOf(level1.class))",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "assert(clone.value == level1.value)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "assert(clone.values == level1.values)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function TestObject:testPrivateMetatable()\r\n    local Level1 = Object:subclass()\r\n    local level1 = Level1:new()\r\n\r\n    assertEquals(getmetatable(Level1), 'private')\r\n    assertEquals(getmetatable(level1), 'private')\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "assertEquals(getmetatable(Level1), 'private')",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assertEquals(getmetatable(level1), 'private')",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function TestObject:testSetMetatableFails()\r\n    local Titi = Object:subclass()\r\n    local titi = Titi:new()\r\n    assertError(setmetatable, titi, {})\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "local Titi = Object:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "local titi = Titi:new()",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "assertError(setmetatable, titi, {})",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 192,
    "text": "function TestObject:testAddingMethodToInstance()\r\n    local john = Object:new()\r\n    function john:itWorks()\r\n        return true\r\n    end\r\n    assert(john:itWorks())\r\nend",
    "type": "function"
  }, {
    "id": 193,
    "text": "local john = Object:new()",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "function john:itWorks()\r\n        return true\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 195,
    "text": "assert(john:itWorks())",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function john:itWorks()\r\n        return true\r\n    end",
    "type": "function"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function TestObject:testRedefiningNew()\r\n    local OtherNew = Object:subclass()\r\n\r\n    function OtherNew.class:new(...)\r\n       local instance = super(self, ...)\r\n       instance.fromOtherNew = true\r\n       return instance\r\n    end\r\n\r\n    local Foo = OtherNew:subclass()\r\n    assert(Foo:isKindOf(Class))\r\n    local foo = Foo:new()\r\n    assert(foo.fromOtherNew)\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "local OtherNew = Object:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "function OtherNew.class:new(...)\r\n       local instance = super(self, ...)\r\n       instance.fromOtherNew = true\r\n       return instance\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 202,
    "text": "local instance = super(self, ...)",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "instance.fromOtherNew = true",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "local Foo = OtherNew:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "assert(Foo:isKindOf(Class))",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "local foo = Foo:new()",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "assert(foo.fromOtherNew)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function OtherNew.class:new(...)\r\n       local instance = super(self, ...)\r\n       instance.fromOtherNew = true\r\n       return instance\r\n    end",
    "type": "function"
  }, {
    "id": 210,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 211,
    "text": "function TestObject:testExceptionInSuper()\r\n    local Base = Object:subclass()\r\n    function Base:getString(name)\r\n        assert('string' == type(name))\r\n        return 'Base:'..name\r\n    end\r\n\r\n    local Derived = Base:subclass()\r\n    function Derived:getString()\r\n        pcall(super, self) -- throws & recovers immediately\r\n        return super(self, 'John')\r\n    end\r\n\r\n    local derived = Derived:new()\r\n    assertEquals(derived:getString(), 'Base:John')\r\nend",
    "type": "function"
  }, {
    "id": 212,
    "text": "function Base:getString(name)\r\n        assert('string' == type(name))\r\n        return 'Base:'..name\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 213,
    "text": "assert('string' == type(name))",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "function Derived:getString()\r\n        pcall(super, self) -- throws & recovers immediately\r\n        return super(self, 'John')\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 215,
    "text": "pcall(super, self)",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "assertEquals(derived:getString(), 'Base:John')",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 218,
    "text": "function Base:getString(name)\r\n        assert('string' == type(name))\r\n        return 'Base:'..name\r\n    end",
    "type": "function"
  }, {
    "id": 219,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 220,
    "text": "function Derived:getString()\r\n        pcall(super, self) -- throws & recovers immediately\r\n        return super(self, 'John')\r\n    end",
    "type": "function"
  }, {
    "id": 221,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 222,
    "text": "function TestObject:testSuperTailCall()\r\n    local Base = Object:subclass()\r\n    function Base:getAnyString()\r\n        return 'Coco'\r\n    end\r\n\r\n    local Derived = Base:subclass()\r\n    function Derived:getAnyString()\r\n        return super(self)\r\n    end\r\n\r\n    local derived = Derived:new()\r\n    assertEquals(derived:getAnyString(), 'Coco')\r\nend",
    "type": "function"
  }, {
    "id": 223,
    "text": "function Base:getAnyString()\r\n        return 'Coco'\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 224,
    "text": "function Derived:getAnyString()\r\n        return super(self)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 225,
    "text": "assertEquals(derived:getAnyString(), 'Coco')",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function Base:getAnyString()\r\n        return 'Coco'\r\n    end",
    "type": "function"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function Derived:getAnyString()\r\n        return super(self)\r\n    end",
    "type": "function"
  }, {
    "id": 230,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 231,
    "text": "function TestObject:testIsMeta()\r\n   assert(not Object:isMeta())\r\n   assert(not Class:isMeta())\r\n   assert(Object.class:isMeta())\r\n   assert(Class.class:isMeta())\r\n   local Toto = Object:subclass()\r\n   assert(not Toto:isMeta())\r\n   assert(Toto.class:isMeta())\r\nend",
    "type": "function"
  }, {
    "id": 232,
    "text": "assert(not Object:isMeta())",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "assert(not Class:isMeta())",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "assert(Object.class:isMeta())",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "assert(Class.class:isMeta())",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "assert(not Toto:isMeta())",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "assert(Toto.class:isMeta())",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function TestObject:testMultipleReturnValues()\r\n    local Toto = Object:subclass()\r\n    function Toto:returnTwoValues()\r\n        return 1, 2\r\n    end\r\n\r\n    local toto = Toto:new()\r\n    a, b = toto:returnTwoValues()\r\n    assertEquals(a, 1)\r\n    assertEquals(b, 2)\r\nend",
    "type": "function"
  }, {
    "id": 240,
    "text": "function Toto:returnTwoValues()\r\n        return 1, 2\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 241,
    "text": "local toto = Toto:new()",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "a, b = toto:returnTwoValues()",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "assertEquals(a, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "assertEquals(b, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 246,
    "text": "function Toto:returnTwoValues()\r\n        return 1, 2\r\n    end",
    "type": "function"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function TestObject:testCallingNonExistingMethodFails()\r\n    local Titi = Object:subclass()\r\n    local titi = Titi:new()\r\n    assertError(titi.aNonExistingMethod, titi)\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "assertError(titi.aNonExistingMethod, titi)",
    "type": "statement:functioncall"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function TestObject:testReadOutsideData()\r\n    local toto = 1\r\n    local Foo = Object:subclass()\r\n    function Foo:readToto()\r\n        assertEquals(toto, 1)\r\n    end\r\n\r\n    local foo = Foo:new()\r\n    foo:readToto()\r\nend",
    "type": "function"
  }, {
    "id": 252,
    "text": "local toto = 1",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "function Foo:readToto()\r\n        assertEquals(toto, 1)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 254,
    "text": "assertEquals(toto, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "foo:readToto()",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 257,
    "text": "function Foo:readToto()\r\n        assertEquals(toto, 1)\r\n    end",
    "type": "function"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "function TestObject:testCreateGlobalData()\r\n    local Foo = Object:subclass()\r\n    function Foo:createToto()\r\n        toto = 2\r\n    end\r\n\r\n    local foo = Foo:new()\r\n    foo:createToto()\r\n    assertEquals(toto, 2)\r\nend",
    "type": "function"
  }, {
    "id": 260,
    "text": "function Foo:createToto()\r\n        toto = 2\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 261,
    "text": "toto = 2",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "foo:createToto()",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "assertEquals(toto, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 265,
    "text": "function Foo:createToto()\r\n        toto = 2\r\n    end",
    "type": "function"
  }, {
    "id": 266,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 267,
    "text": "function TestObject:testNamedSubclassInTailCall()\r\n    return Object:subclass 'NamedClass'\r\nend",
    "type": "function"
  }, {
    "id": 268,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 269,
    "text": "function TestObject:testClassName()\r\n    local NamedClass = Object:subclass 'NamedClass'\r\n    assertEquals(NamedClass:name(), 'NamedClass')\r\nend",
    "type": "function"
  }, {
    "id": 270,
    "text": "local NamedClass = Object:subclass 'NamedClass'",
    "type": "statement:localassign"
  }, {
    "id": 271,
    "text": "assertEquals(NamedClass:name(), 'NamedClass')",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 273,
    "text": "function TestObject:testNamedAndAnonymClassScope()\r\n    local assert = assert\r\n    local assertEquals = assertEquals\r\n    setfenv(1, {})\r\n    do\r\n        local NamedClass = Object:subclass 'NamedClass'\r\n        local AnonymClass = Object:subclass()\r\n    end\r\n\r\n    assertEquals(NamedClass, nil)\r\n    assertEquals(AnonymClass, nil)\r\n\r\n    assert(nil ~= Class:find 'NamedClass')\r\n    assertEquals(Class:find 'AnonymClass', nil)\r\nend",
    "type": "function"
  }, {
    "id": 274,
    "text": "local assert = assert",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "local assertEquals = assertEquals",
    "type": "statement:localassign"
  }, {
    "id": 276,
    "text": "setfenv(1, {})",
    "type": "statement:functioncall"
  }, {
    "id": 277,
    "text": "do\r\n        local NamedClass = Object:subclass 'NamedClass'\r\n        local AnonymClass = Object:subclass()\r\n    end",
    "type": "statement:do"
  }, {
    "id": 278,
    "text": "local AnonymClass = Object:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 279,
    "text": "assertEquals(NamedClass, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "assertEquals(AnonymClass, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "assert(nil ~= Class:find 'NamedClass')",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "assertEquals(Class:find 'AnonymClass', nil)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "function TestObject:testAllClasses()\r\n    (function()\r\n         Object:subclass 'NamedClass'\r\n     end)()\r\n\r\n    local classes = Class:all()\r\n\r\n    assertEquals(classes['objectlua.Object']:name(), 'objectlua.Object')\r\n    assertEquals(classes['objectlua.Object Metaclass']:name(), 'objectlua.Object Metaclass')\r\n\r\n    assertEquals(classes['objectlua.Class']:name(), 'objectlua.Class')\r\n    assertEquals(classes['objectlua.Class Metaclass']:name(), 'objectlua.Class Metaclass')\r\n\r\n    assertEquals(classes['NamedClass']:name(), 'NamedClass')\r\n    assertEquals(classes['NamedClass Metaclass']:name(), 'NamedClass Metaclass')\r\nend",
    "type": "function"
  }, {
    "id": 285,
    "text": "(function()\r\n         Object:subclass 'NamedClass'\r\n     end)()",
    "type": "statement:functioncall"
  }, {
    "id": 286,
    "text": "Object:subclass 'NamedClass'",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "local classes = Class:all()",
    "type": "statement:localassign"
  }, {
    "id": 288,
    "text": "assertEquals(classes['objectlua.Object']:name(), 'objectlua.Object')",
    "type": "statement:functioncall"
  }, {
    "id": 289,
    "text": "assertEquals(classes['objectlua.Object Metaclass']:name(), 'objectlua.Object Metaclass')",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "assertEquals(classes['objectlua.Class']:name(), 'objectlua.Class')",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "assertEquals(classes['objectlua.Class Metaclass']:name(), 'objectlua.Class Metaclass')",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "assertEquals(classes['NamedClass']:name(), 'NamedClass')",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "assertEquals(classes['NamedClass Metaclass']:name(), 'NamedClass Metaclass')",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 295,
    "text": "function TestObject:testLoadAClassFromFile()\r\n    local SomeClass = require 'SomeClass'\r\n\r\n    local someObject = SomeClass:new()\r\n    assertEquals(someObject:className(), 'SomeClass')\r\n    assert(someObject:itWorks())\r\nend",
    "type": "function"
  }, {
    "id": 296,
    "text": "local SomeClass = require 'SomeClass'",
    "type": "statement:localassign"
  }, {
    "id": 297,
    "text": "local someObject = SomeClass:new()",
    "type": "statement:localassign"
  }, {
    "id": 298,
    "text": "assertEquals(someObject:className(), 'SomeClass')",
    "type": "statement:functioncall"
  }, {
    "id": 299,
    "text": "assert(someObject:itWorks())",
    "type": "statement:functioncall"
  }, {
    "id": 300,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 301,
    "text": "function TestObject:testClassShadowedFails1()\r\n    Object:subclass('SomeClass')\r\n    assertError(require, 'SomeClass')\r\nend",
    "type": "function"
  }, {
    "id": 302,
    "text": "Object:subclass('SomeClass')",
    "type": "statement:functioncall"
  }, {
    "id": 303,
    "text": "assertError(require, 'SomeClass')",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 305,
    "text": "function TestObject:testClassShadowedFails2()\r\n    require 'SomeClass'\r\n    assertError(function()\r\n                    Object:subclass('SomeClass')\r\n                end)\r\nend",
    "type": "function"
  }, {
    "id": 306,
    "text": "require 'SomeClass'",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "assertError(function()\r\n                    Object:subclass('SomeClass')\r\n                end)",
    "type": "statement:functioncall"
  }, {
    "id": 308,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 309,
    "text": "function TestObject:testGlobalName()\r\n    local Toto = Object:subclass('tata.Toto')\r\n    assert(_G.tata)\r\n    assert(_G.tata.Toto)\r\nend",
    "type": "function"
  }, {
    "id": 310,
    "text": "local Toto = Object:subclass('tata.Toto')",
    "type": "statement:localassign"
  }, {
    "id": 311,
    "text": "assert(_G.tata)",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "assert(_G.tata.Toto)",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function()\r\n         Object:subclass 'NamedClass'\r\n     end",
    "type": "function"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "function()\r\n                    Object:subclass('SomeClass')\r\n                end",
    "type": "function"
  }, {
    "id": 317,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 318,
    "text": "",
    "type": "function container"
  }, {
    "id": 319,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 320,
    "text": "super",
    "type": "global function"
  }, {
    "id": 321,
    "text": "require",
    "type": "global function"
  }, {
    "id": 322,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 323,
    "text": "assertError",
    "type": "global function"
  }, {
    "id": 324,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 325,
    "text": "type",
    "type": "global function"
  }, {
    "id": 326,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 327,
    "text": "assertEquals",
    "type": "global function"
  }, {
    "id": 328,
    "text": "",
    "type": "global variable"
  }, {
    "id": 329,
    "text": "",
    "type": "variable container"
  }, {
    "id": 330,
    "text": "",
    "type": "require container"
  }, {
    "id": 331,
    "text": "",
    "type": "global variable"
  }, {
    "id": 332,
    "text": "",
    "type": "n/a"
  }, {
    "id": 333,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 334,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 335,
    "text": "",
    "type": "require local variable"
  } ]
}