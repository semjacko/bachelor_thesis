{
  "_filename": "bootstrap.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/objectlua/src/objectlua/bootstrap.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 6
  }, {
    "from": 18,
    "label": "has",
    "to": 6
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 6
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 18,
    "label": "calls",
    "to": 38
  }, {
    "from": 37,
    "label": "calls",
    "to": 8
  }, {
    "from": 37,
    "label": "calls",
    "to": 8
  }, {
    "from": 8,
    "label": "calls",
    "to": 39
  }, {
    "from": 13,
    "label": "calls",
    "to": 39
  }, {
    "from": 23,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 8,
    "label": "calls",
    "to": 42
  }, {
    "from": 13,
    "label": "calls",
    "to": 42
  }, {
    "from": 13,
    "label": "calls",
    "to": 42
  }, {
    "from": 23,
    "label": "calls",
    "to": 42
  }, {
    "from": 31,
    "label": "calls",
    "to": 42
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 37,
    "label": "calls",
    "to": 2
  }, {
    "from": 23,
    "label": "calls",
    "to": 46
  }, {
    "from": 23,
    "label": "calls",
    "to": 20
  }, {
    "from": 20,
    "label": "calls",
    "to": 18
  }, {
    "from": 2,
    "label": "calls",
    "to": 44
  }, {
    "from": 20,
    "label": "calls",
    "to": 44
  }, {
    "from": 37,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 31,
    "label": "calls",
    "to": 40
  }, {
    "from": 37,
    "label": "calls",
    "to": 13
  }, {
    "from": 20,
    "label": "calls",
    "to": 45
  }, {
    "from": 20,
    "label": "calls",
    "to": 43
  }, {
    "from": 37,
    "label": "calls",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 37,
    "label": "declares",
    "to": 2
  }, {
    "from": 37,
    "label": "declares",
    "to": 8
  }, {
    "from": 37,
    "label": "declares",
    "to": 13
  }, {
    "from": 37,
    "label": "declares",
    "to": 18
  }, {
    "from": 37,
    "label": "declares",
    "to": 20
  }, {
    "from": 37,
    "label": "declares",
    "to": 23
  }, {
    "from": 37,
    "label": "declares",
    "to": 31
  }, {
    "from": 37,
    "label": "declares",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 47,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 47,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 47,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 47,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 47,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 47,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 47,
    "label": "initializes",
    "to": 63
  }, {
    "from": 47,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 47,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 47,
    "label": "initializes",
    "to": 68
  }, {
    "from": 47,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 47,
    "label": "initializes",
    "to": 71
  }, {
    "from": 47,
    "label": "initializes",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 47,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 47,
    "label": "initializes",
    "to": 76
  }, {
    "from": 47,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 47,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 47,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 47,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 47,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 1,
    "label": "provides",
    "to": 87
  }, {
    "from": 49,
    "label": "represents",
    "to": 88
  }, {
    "from": 87,
    "label": "provides",
    "to": 88
  }, {
    "from": 89,
    "label": "requires",
    "to": 1
  }, {
    "from": 90,
    "label": "requires",
    "to": 1
  }, {
    "from": 53,
    "label": "represents",
    "to": 91
  }, {
    "from": 92,
    "label": "requires",
    "to": 1
  }, {
    "from": 59,
    "label": "represents",
    "to": 93
  }, {
    "from": 49,
    "label": "contains",
    "to": 31
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bootstrap",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function delegated(table)\r\n   if nil == rawget(table, '__index') then\r\n      rawset(table, '__index', table)\r\n      rawset(table, '__metatable', 'private')\r\n   end\r\n   return setmetatable({}, table)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if nil == rawget(table, '__index') then\r\n      rawset(table, '__index', table)\r\n      rawset(table, '__metatable', 'private')\r\n   end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "rawset(table, '__index', table)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "rawset(table, '__metatable', 'private')",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function basicNew(self)\r\n   assert(nil ~= self.__prototype__)\r\n   local instance = delegated(self.__prototype__)\r\n   rawset(instance, 'class', self)\r\n   return instance\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "assert(nil ~= self.__prototype__)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local instance = delegated(self.__prototype__)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "rawset(instance, 'class', self)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function setSuperclass(self, class)\r\n   assert(nil ~= class.__prototype__)\r\n   rawset(self, 'superclass', class)\r\n   rawset(self, '__prototype__', delegated(class.__prototype__))\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert(nil ~= class.__prototype__)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "rawset(self, 'superclass', class)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "rawset(self, '__prototype__', delegated(class.__prototype__))",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function getSuper(superclass, symbol)\r\n    return function(self, ...)\r\n               return superclass.__prototype__[symbol](self, ...)\r\n           end\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function addSuper(superclass, symbol, method)\r\n    local fenv = getfenv(method)\r\n    return setfenv(method, setmetatable(\r\n                       {super = getSuper(superclass, symbol)},\r\n                       {__index = fenv, __newindex = fenv}))\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local fenv = getfenv(method)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function newindex(t, k, v)\r\n    local prototype = t.__prototype__\r\n    local superclass = t.superclass\r\n    if nil ~= superclass and 'function' == type(v) then\r\n        v = addSuper(superclass, k, v)\r\n    end\r\n    assert(nil ~= prototype)\r\n    rawset(prototype, k, v)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local prototype = t.__prototype__",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local superclass = t.superclass",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if nil ~= superclass and 'function' == type(v) then\r\n        v = addSuper(superclass, k, v)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "v = addSuper(superclass, k, v)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "assert(nil ~= prototype)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "rawset(prototype, k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function bootstrap.setAsMetaclass(...)\r\n   for _, class in pairs{...} do\r\n      rawset(class.__prototype__, '__newindex',  newindex)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "for _, class in pairs{...} do\r\n      rawset(class.__prototype__, '__newindex',  newindex)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "rawset(class.__prototype__, '__newindex',  newindex)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function(self, ...)\r\n               return superclass.__prototype__[symbol](self, ...)\r\n           end",
    "type": "function"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "",
    "type": "function container"
  }, {
    "id": 38,
    "text": "__prototype__[symbol]",
    "type": "global function"
  }, {
    "id": 39,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 40,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 41,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 42,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 43,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 44,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 45,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 46,
    "text": "type",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "variable container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 55,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 56,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "",
    "type": "global variable"
  }, {
    "id": 64,
    "text": "",
    "type": "global variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "global variable"
  }, {
    "id": 67,
    "text": "",
    "type": "n/a"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "global variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  }, {
    "id": 71,
    "text": "",
    "type": "global variable"
  }, {
    "id": 72,
    "text": "",
    "type": "global variable"
  }, {
    "id": 73,
    "text": "",
    "type": "n/a"
  }, {
    "id": 74,
    "text": "",
    "type": "global variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "global variable"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "global variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "global variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "global variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "interface container"
  }, {
    "id": 88,
    "text": "",
    "type": "interface"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "interface"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "interface"
  } ]
}