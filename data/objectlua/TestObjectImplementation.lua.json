{
  "_filename": "TestObjectImplementation.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/objectlua/test/TestObjectImplementation.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 13
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 13
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 22
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 24
  }, {
    "from": 30,
    "label": "has",
    "to": 13
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 34
  }, {
    "from": 4,
    "label": "calls",
    "to": 34
  }, {
    "from": 4,
    "label": "calls",
    "to": 34
  }, {
    "from": 4,
    "label": "calls",
    "to": 34
  }, {
    "from": 20,
    "label": "calls",
    "to": 30
  }, {
    "from": 30,
    "label": "calls",
    "to": 28
  }, {
    "from": 20,
    "label": "calls",
    "to": 37
  }, {
    "from": 20,
    "label": "calls",
    "to": 36
  }, {
    "from": 10,
    "label": "calls",
    "to": 38
  }, {
    "from": 32,
    "label": "calls",
    "to": 35
  }, {
    "from": 32,
    "label": "calls",
    "to": 35
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 39
  }, {
    "from": 10,
    "label": "calls",
    "to": 39
  }, {
    "from": 10,
    "label": "calls",
    "to": 39
  }, {
    "from": 10,
    "label": "calls",
    "to": 39
  }, {
    "from": 20,
    "label": "calls",
    "to": 39
  }, {
    "from": 28,
    "label": "calls",
    "to": 33
  }, {
    "from": 3,
    "label": "contains",
    "to": 32
  }, {
    "from": 32,
    "label": "declares",
    "to": 4
  }, {
    "from": 32,
    "label": "declares",
    "to": 10
  }, {
    "from": 32,
    "label": "declares",
    "to": 18
  }, {
    "from": 32,
    "label": "declares",
    "to": 20
  }, {
    "from": 32,
    "label": "declares",
    "to": 28
  }, {
    "from": 32,
    "label": "declares",
    "to": 30
  }, {
    "from": 3,
    "label": "contains",
    "to": 41
  }, {
    "from": 3,
    "label": "contains",
    "to": 42
  }, {
    "from": 41,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 42,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "requires",
    "to": 2
  }, {
    "from": 42,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "requires",
    "to": 1
  }, {
    "from": 40,
    "label": "requires",
    "to": 3
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Class",
    "type": "module"
  }, {
    "id": 2,
    "text": "Object",
    "type": "module"
  }, {
    "id": 3,
    "text": "TestObjectImplementation",
    "type": "module"
  }, {
    "id": 4,
    "text": "function TestObjectImplementation:testObjectModel()\r\n    assertEquals(debug.getmetatable(Class), Class.class.__prototype__)\r\n    assertEquals(debug.getmetatable(Class.class.__prototype__), Object.class.__prototype__)\r\n    assertEquals(debug.getmetatable(Object.class), Class.__prototype__)\r\n    assertEquals(debug.getmetatable(Class.__prototype__), Object.__prototype__)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "assertEquals(debug.getmetatable(Class), Class.class.__prototype__)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "assertEquals(debug.getmetatable(Class.class.__prototype__), Object.class.__prototype__)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assertEquals(debug.getmetatable(Object.class), Class.__prototype__)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assertEquals(debug.getmetatable(Class.__prototype__), Object.__prototype__)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function TestObjectImplementation:testClassMethods()\r\n   local Foo = Object:subclass()\r\n   function Foo.class:sayHello()\r\n      return 'Hello'\r\n   end\r\n\r\n   assertEquals(nil, Foo.class.sayHello)\r\n   assertEquals('function', type(Foo.class.__prototype__.sayHello))\r\n   assertEquals('Hello',Foo:sayHello())\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local Foo = Object:subclass()",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "function Foo.class:sayHello()\r\n      return 'Hello'\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "assertEquals(nil, Foo.class.sayHello)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assertEquals('function', type(Foo.class.__prototype__.sayHello))",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assertEquals('Hello',Foo:sayHello())",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function Foo.class:sayHello()\r\n      return 'Hello'\r\n   end",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function TestObjectImplementation:testFenv()\r\n    local function notFenved()\r\n        assert(toto ~= 1)\r\n    end\r\n\r\n    local function fenved()\r\n        notFenved()\r\n        return toto\r\n    end\r\n\r\n    setfenv(fenved, setmetatable({toto = 1}, {__index = _G}))\r\n    assertEquals(fenved(), 1)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local function notFenved()\r\n        assert(toto ~= 1)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 22,
    "text": "assert(toto ~= 1)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local function fenved()\r\n        notFenved()\r\n        return toto\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 24,
    "text": "notFenved()",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "setfenv(fenved, setmetatable({toto = 1}, {__index = _G}))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assertEquals(fenved(), 1)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function notFenved()\r\n        assert(toto ~= 1)\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function fenved()\r\n        notFenved()\r\n        return toto\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "",
    "type": "function container"
  }, {
    "id": 33,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 34,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 35,
    "text": "require",
    "type": "global function"
  }, {
    "id": 36,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 37,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 38,
    "text": "type",
    "type": "global function"
  }, {
    "id": 39,
    "text": "assertEquals",
    "type": "global function"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  }, {
    "id": 41,
    "text": "",
    "type": "variable container"
  }, {
    "id": 42,
    "text": "",
    "type": "require container"
  }, {
    "id": 43,
    "text": "",
    "type": "global variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  }, {
    "id": 45,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "require local variable"
  } ]
}