{
  "_filename": "Class.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/objectlua/src/objectlua/Class.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 20,
    "label": "has",
    "to": 18
  }, {
    "from": 20,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 18
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 18
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 18
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 18
  }, {
    "from": 38,
    "label": "has",
    "to": 18
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 18
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 18
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 50,
    "label": "has",
    "to": 58
  }, {
    "from": 50,
    "label": "has",
    "to": 59
  }, {
    "from": 50,
    "label": "has",
    "to": 60
  }, {
    "from": 4,
    "label": "calls",
    "to": 67
  }, {
    "from": 20,
    "label": "calls",
    "to": 67
  }, {
    "from": 20,
    "label": "calls",
    "to": 66
  }, {
    "from": 20,
    "label": "calls",
    "to": 66
  }, {
    "from": 20,
    "label": "calls",
    "to": 4
  }, {
    "from": 20,
    "label": "calls",
    "to": 4
  }, {
    "from": 50,
    "label": "calls",
    "to": 4
  }, {
    "from": 50,
    "label": "calls",
    "to": 4
  }, {
    "from": 50,
    "label": "calls",
    "to": 4
  }, {
    "from": 50,
    "label": "calls",
    "to": 4
  }, {
    "from": 43,
    "label": "calls",
    "to": 64
  }, {
    "from": 61,
    "label": "calls",
    "to": 65
  }, {
    "from": 50,
    "label": "calls",
    "to": 65
  }, {
    "from": 50,
    "label": "calls",
    "to": 65
  }, {
    "from": 4,
    "label": "calls",
    "to": 63
  }, {
    "from": 20,
    "label": "calls",
    "to": 63
  }, {
    "from": 20,
    "label": "calls",
    "to": 62
  }, {
    "from": 2,
    "label": "contains",
    "to": 61
  }, {
    "from": 61,
    "label": "declares",
    "to": 4
  }, {
    "from": 61,
    "label": "declares",
    "to": 15
  }, {
    "from": 61,
    "label": "declares",
    "to": 20
  }, {
    "from": 61,
    "label": "declares",
    "to": 34
  }, {
    "from": 61,
    "label": "declares",
    "to": 36
  }, {
    "from": 61,
    "label": "declares",
    "to": 38
  }, {
    "from": 61,
    "label": "declares",
    "to": 43
  }, {
    "from": 61,
    "label": "declares",
    "to": 48
  }, {
    "from": 61,
    "label": "declares",
    "to": 50
  }, {
    "from": 2,
    "label": "contains",
    "to": 69
  }, {
    "from": 2,
    "label": "contains",
    "to": 70
  }, {
    "from": 69,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 69,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 69,
    "label": "initializes",
    "to": 75
  }, {
    "from": 70,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "requires",
    "to": 1
  }, {
    "from": 70,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "requires",
    "to": 3
  }, {
    "from": 70,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 79
  }, {
    "from": 68,
    "label": "represents",
    "to": 80
  }, {
    "from": 79,
    "label": "provides",
    "to": 80
  }, {
    "from": 81,
    "label": "requires",
    "to": 2
  }, {
    "from": 82,
    "label": "requires",
    "to": 2
  }, {
    "from": 83,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bootstrap",
    "type": "module"
  }, {
    "id": 2,
    "text": "Class",
    "type": "module"
  }, {
    "id": 3,
    "text": "Prototype",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function addClass(class)\r\n    local name = class:name()\r\n    assert('string' == type(name))\r\n    classes[name] = class\r\n    local package = _G\r\n    for packageName in name:gmatch('([^%.]*)%.') do\r\n        if nil == package[packageName] then\r\n            package[packageName] = {}\r\n        end\r\n        package = package[packageName]\r\n    end\r\n    package[name:gsub('.*%.', '')] = class\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local name = class:name()",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "assert('string' == type(name))",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "classes[name] = class",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "local package = _G",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "for packageName in name:gmatch('([^%.]*)%.') do\r\n        if nil == package[packageName] then\r\n            package[packageName] = {}\r\n        end\r\n        package = package[packageName]\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 10,
    "text": "if nil == package[packageName] then\r\n            package[packageName] = {}\r\n        end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "package[packageName] = {}",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "package = package[packageName]",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "package[name:gsub('.*%.', '')] = class",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function Class:new(...)\r\n   local instance = self:basicNew()\r\n   instance:initialize(...)\r\n   return instance\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local instance = self:basicNew()",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "instance:initialize(...)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function Class:subclass(className)\r\n   local metaclass = Class:new()\r\n   metaclass:setSuperclass(self.class)\r\n   bootstrap.setAsMetaclass(metaclass)\r\n   local subclass = metaclass:new()\r\n   subclass:setSuperclass(self)\r\n   if 'string' == type(className) then\r\n       assert(nil == self:find(className))\r\n       local metaclassName = className..' Metaclass'\r\n       rawset(subclass, '__name__', className)\r\n       rawset(metaclass, '__name__', metaclassName)\r\n\r\n       addClass(subclass)\r\n       addClass(metaclass)\r\n   end\r\n   return subclass\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local metaclass = Class:new()",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "metaclass:setSuperclass(self.class)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "bootstrap.setAsMetaclass(metaclass)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "local subclass = metaclass:new()",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "subclass:setSuperclass(self)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "if 'string' == type(className) then\r\n       assert(nil == self:find(className))\r\n       local metaclassName = className..' Metaclass'\r\n       rawset(subclass, '__name__', className)\r\n       rawset(metaclass, '__name__', metaclassName)\r\n\r\n       addClass(subclass)\r\n       addClass(metaclass)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "assert(nil == self:find(className))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local metaclassName = className..' Metaclass'",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "rawset(subclass, '__name__', className)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "rawset(metaclass, '__name__', metaclassName)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "addClass(subclass)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "addClass(metaclass)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function Class:isMeta()\r\n   return self.class == Class\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function Class:name()\r\n    return self.__name__\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function Class:inheritsFrom(class)\r\n    if nil == self or Object == self then\r\n        return false\r\n    end\r\n    local superclass = self.superclass\r\n    if superclass == class then\r\n        return true\r\n    end\r\n    return superclass:inheritsFrom(class)\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "if nil == self or Object == self then\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local superclass = self.superclass",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if superclass == class then\r\n        return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function Class:all()\r\n    local t = {}\r\n    for k, v in pairs(classes) do\r\n        t[k] = v\r\n    end\r\n    return t\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "for k, v in pairs(classes) do\r\n        t[k] = v\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "t[k] = v",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function Class:find(name)\r\n    return classes[name]\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function Class:reset()\r\n    classes = {}\r\n\r\n    local Prototype       = require 'objectlua.Prototype'\r\n    local bootstrap       = require 'objectlua.bootstrap'\r\n    local ObjectMetaclass = bootstrap['Object Metaclass']\r\n    local ClassMetaclass  = bootstrap['Class Metaclass']\r\n\r\n    addClass(Object)\r\n    addClass(Class)\r\n    addClass(ObjectMetaclass)\r\n    addClass(ClassMetaclass)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "classes = {}",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "local Prototype       = require 'objectlua.Prototype'",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local bootstrap       = require 'objectlua.bootstrap'",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local ObjectMetaclass = bootstrap['Object Metaclass']",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local ClassMetaclass  = bootstrap['Class Metaclass']",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "addClass(Object)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "addClass(Class)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "addClass(ObjectMetaclass)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "addClass(ClassMetaclass)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "",
    "type": "function container"
  }, {
    "id": 62,
    "text": "setAsMetaclass",
    "type": "global function"
  }, {
    "id": 63,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 64,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 65,
    "text": "require",
    "type": "global function"
  }, {
    "id": 66,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 67,
    "text": "type",
    "type": "global function"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "variable container"
  }, {
    "id": 70,
    "text": "",
    "type": "require container"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "interface container"
  }, {
    "id": 80,
    "text": "",
    "type": "interface"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  } ]
}