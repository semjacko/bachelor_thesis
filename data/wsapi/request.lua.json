{
  "_filename": "request.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wsapi/src/wsapi/request.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 5
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 26,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 5
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 5
  }, {
    "from": 43,
    "label": "has",
    "to": 5
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 5
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 5
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 54,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 54,
    "label": "has",
    "to": 5
  }, {
    "from": 54,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 16
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 5
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 16
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 71,
    "label": "has",
    "to": 5
  }, {
    "from": 71,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 5
  }, {
    "from": 80,
    "label": "has",
    "to": 87
  }, {
    "from": 80,
    "label": "has",
    "to": 5
  }, {
    "from": 80,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 5
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 91,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 5
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 104
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 109,
    "label": "has",
    "to": 5
  }, {
    "from": 109,
    "label": "has",
    "to": 112
  }, {
    "from": 109,
    "label": "has",
    "to": 5
  }, {
    "from": 109,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 5
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 5
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 5
  }, {
    "from": 123,
    "label": "has",
    "to": 5
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 5
  }, {
    "from": 118,
    "label": "has",
    "to": 128
  }, {
    "from": 118,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 5
  }, {
    "from": 118,
    "label": "has",
    "to": 132
  }, {
    "from": 118,
    "label": "has",
    "to": 133
  }, {
    "from": 118,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 134,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 134,
    "label": "has",
    "to": 5
  }, {
    "from": 118,
    "label": "has",
    "to": 5
  }, {
    "from": 118,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 5
  }, {
    "from": 142,
    "label": "has",
    "to": 124
  }, {
    "from": 142,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 5
  }, {
    "from": 142,
    "label": "has",
    "to": 5
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 5
  }, {
    "from": 145,
    "label": "has",
    "to": 58
  }, {
    "from": 145,
    "label": "has",
    "to": 59
  }, {
    "from": 145,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 145,
    "label": "has",
    "to": 5
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 130
  }, {
    "from": 147,
    "label": "has",
    "to": 131
  }, {
    "from": 147,
    "label": "has",
    "to": 5
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 135
  }, {
    "from": 149,
    "label": "has",
    "to": 136
  }, {
    "from": 149,
    "label": "has",
    "to": 137
  }, {
    "from": 149,
    "label": "has",
    "to": 138
  }, {
    "from": 149,
    "label": "has",
    "to": 139
  }, {
    "from": 149,
    "label": "has",
    "to": 5
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 91,
    "label": "calls",
    "to": 164
  }, {
    "from": 23,
    "label": "calls",
    "to": 153
  }, {
    "from": 71,
    "label": "calls",
    "to": 154
  }, {
    "from": 71,
    "label": "calls",
    "to": 154
  }, {
    "from": 71,
    "label": "calls",
    "to": 154
  }, {
    "from": 66,
    "label": "calls",
    "to": 23
  }, {
    "from": 32,
    "label": "calls",
    "to": 162
  }, {
    "from": 43,
    "label": "calls",
    "to": 162
  }, {
    "from": 54,
    "label": "calls",
    "to": 162
  }, {
    "from": 71,
    "label": "calls",
    "to": 162
  }, {
    "from": 71,
    "label": "calls",
    "to": 162
  }, {
    "from": 97,
    "label": "calls",
    "to": 155
  }, {
    "from": 26,
    "label": "calls",
    "to": 156
  }, {
    "from": 15,
    "label": "calls",
    "to": 7
  }, {
    "from": 66,
    "label": "calls",
    "to": 7
  }, {
    "from": 151,
    "label": "calls",
    "to": 158
  }, {
    "from": 15,
    "label": "calls",
    "to": 159
  }, {
    "from": 26,
    "label": "calls",
    "to": 159
  }, {
    "from": 37,
    "label": "calls",
    "to": 159
  }, {
    "from": 37,
    "label": "calls",
    "to": 3
  }, {
    "from": 32,
    "label": "calls",
    "to": 26
  }, {
    "from": 54,
    "label": "calls",
    "to": 43
  }, {
    "from": 54,
    "label": "calls",
    "to": 43
  }, {
    "from": 54,
    "label": "calls",
    "to": 48
  }, {
    "from": 118,
    "label": "calls",
    "to": 172
  }, {
    "from": 118,
    "label": "calls",
    "to": 172
  }, {
    "from": 15,
    "label": "calls",
    "to": 167
  }, {
    "from": 97,
    "label": "calls",
    "to": 167
  }, {
    "from": 32,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 71,
    "label": "calls",
    "to": 66
  }, {
    "from": 48,
    "label": "calls",
    "to": 165
  }, {
    "from": 91,
    "label": "calls",
    "to": 165
  }, {
    "from": 118,
    "label": "calls",
    "to": 160
  }, {
    "from": 118,
    "label": "calls",
    "to": 152
  }, {
    "from": 7,
    "label": "calls",
    "to": 166
  }, {
    "from": 3,
    "label": "calls",
    "to": 169
  }, {
    "from": 23,
    "label": "calls",
    "to": 169
  }, {
    "from": 114,
    "label": "calls",
    "to": 169
  }, {
    "from": 118,
    "label": "calls",
    "to": 169
  }, {
    "from": 66,
    "label": "calls",
    "to": 54
  }, {
    "from": 15,
    "label": "calls",
    "to": 157
  }, {
    "from": 15,
    "label": "calls",
    "to": 157
  }, {
    "from": 54,
    "label": "calls",
    "to": 32
  }, {
    "from": 118,
    "label": "calls",
    "to": 168
  }, {
    "from": 118,
    "label": "calls",
    "to": 168
  }, {
    "from": 118,
    "label": "calls",
    "to": 168
  }, {
    "from": 54,
    "label": "calls",
    "to": 37
  }, {
    "from": 71,
    "label": "calls",
    "to": 15
  }, {
    "from": 118,
    "label": "calls",
    "to": 15
  }, {
    "from": 7,
    "label": "calls",
    "to": 170
  }, {
    "from": 15,
    "label": "calls",
    "to": 170
  }, {
    "from": 151,
    "label": "calls",
    "to": 171
  }, {
    "from": 91,
    "label": "calls",
    "to": 161
  }, {
    "from": 118,
    "label": "calls",
    "to": 71
  }, {
    "from": 118,
    "label": "calls",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 151
  }, {
    "from": 151,
    "label": "declares",
    "to": 3
  }, {
    "from": 151,
    "label": "declares",
    "to": 7
  }, {
    "from": 151,
    "label": "declares",
    "to": 15
  }, {
    "from": 151,
    "label": "declares",
    "to": 23
  }, {
    "from": 151,
    "label": "declares",
    "to": 26
  }, {
    "from": 151,
    "label": "declares",
    "to": 32
  }, {
    "from": 151,
    "label": "declares",
    "to": 37
  }, {
    "from": 151,
    "label": "declares",
    "to": 43
  }, {
    "from": 151,
    "label": "declares",
    "to": 48
  }, {
    "from": 151,
    "label": "declares",
    "to": 54
  }, {
    "from": 151,
    "label": "declares",
    "to": 66
  }, {
    "from": 151,
    "label": "declares",
    "to": 71
  }, {
    "from": 151,
    "label": "declares",
    "to": 80
  }, {
    "from": 151,
    "label": "declares",
    "to": 89
  }, {
    "from": 151,
    "label": "declares",
    "to": 91
  }, {
    "from": 151,
    "label": "declares",
    "to": 97
  }, {
    "from": 151,
    "label": "declares",
    "to": 103
  }, {
    "from": 151,
    "label": "declares",
    "to": 107
  }, {
    "from": 151,
    "label": "declares",
    "to": 109
  }, {
    "from": 151,
    "label": "declares",
    "to": 114
  }, {
    "from": 151,
    "label": "declares",
    "to": 116
  }, {
    "from": 151,
    "label": "declares",
    "to": 118
  }, {
    "from": 151,
    "label": "declares",
    "to": 141
  }, {
    "from": 151,
    "label": "declares",
    "to": 142
  }, {
    "from": 151,
    "label": "declares",
    "to": 144
  }, {
    "from": 151,
    "label": "declares",
    "to": 145
  }, {
    "from": 151,
    "label": "declares",
    "to": 147
  }, {
    "from": 151,
    "label": "declares",
    "to": 149
  }, {
    "from": 174,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 175
  }, {
    "from": 1,
    "label": "contains",
    "to": 176
  }, {
    "from": 175,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 176,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "requires",
    "to": 2
  }, {
    "from": 173,
    "label": "requires",
    "to": 1
  }, {
    "from": 177,
    "label": "contains",
    "to": 80
  }, {
    "from": 180,
    "label": "contains",
    "to": 80
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 147
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 149
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "request",
    "type": "module"
  }, {
    "id": 2,
    "text": "util",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function split_filename(path)\r\n  local name_patt = \"[/\\\\]?([^/\\\\]+)$\"\r\n  return (string.match(path, name_patt))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local name_patt = \"[/\\\\]?([^/\\\\]+)$\"",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function insert_field (tab, name, value, overwrite)\r\n  if overwrite or not tab[name] then\r\n    tab[name] = value\r\n  else\r\n    local t = type (tab[name])\r\n    if t == \"table\" then\r\n      table.insert (tab[name], value)\r\n    else\r\n      tab[name] = { tab[name], value }\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if overwrite or not tab[name] then\r\n    tab[name] = value\r\n  else\r\n    local t = type (tab[name])\r\n    if t == \"table\" then\r\n      table.insert (tab[name], value)\r\n    else\r\n      tab[name] = { tab[name], value }\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "tab[name] = value",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local t = type (tab[name])",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if t == \"table\" then\r\n      table.insert (tab[name], value)\r\n    else\r\n      tab[name] = { tab[name], value }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "table.insert (tab[name], value)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "tab[name] = { tab[name], value }",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function parse_qs(qs, tab, overwrite)\r\n  tab = tab or {}\r\n  if type(qs) == \"string\" then\r\n    local url_decode = util.url_decode\r\n    for key, val in string.gmatch(qs, \"([^&=]+)=([^&=]*)&?\") do\r\n      insert_field(tab, url_decode(key), url_decode(val), overwrite)\r\n    end\r\n  elseif qs then\r\n    error(\"WSAPI Request error: invalid query string\")\r\n  end\r\n  return tab\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "tab = tab or {}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "if type(qs) == \"string\" then\r\n    local url_decode = util.url_decode\r\n    for key, val in string.gmatch(qs, \"([^&=]+)=([^&=]*)&?\") do\r\n      insert_field(tab, url_decode(key), url_decode(val), overwrite)\r\n    end\r\n  elseif qs then\r\n    error(\"WSAPI Request error: invalid query string\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "local url_decode = util.url_decode",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "for key, val in string.gmatch(qs, \"([^&=]+)=([^&=]*)&?\") do\r\n      insert_field(tab, url_decode(key), url_decode(val), overwrite)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "insert_field(tab, url_decode(key), url_decode(val), overwrite)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "error(\"WSAPI Request error: invalid query string\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function get_boundary(content_type)\r\n  local boundary = string.match(content_type, \"boundary%=(.-)$\")\r\n  return \"--\" .. tostring(boundary)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local boundary = string.match(content_type, \"boundary%=(.-)$\")",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function break_headers(header_data)\r\n  local headers = {}\r\n  for type, val in string.gmatch(header_data, '([^%c%s:]+):%s+([^\\n]+)') do\r\n    type = string.lower(type)\r\n    headers[type] = val\r\n  end\r\n  return headers\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "local headers = {}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "for type, val in string.gmatch(header_data, '([^%c%s:]+):%s+([^\\n]+)') do\r\n    type = string.lower(type)\r\n    headers[type] = val\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 29,
    "text": "type = string.lower(type)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "headers[type] = val",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function read_field_headers(input, pos)\r\n  local EOH = \"\\r\\n\\r\\n\"\r\n  local s, e = string.find(input, EOH, pos, true)\r\n  if s then\r\n    return break_headers(string.sub(input, pos, s-1)), e+1\r\n  else return nil, pos end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local EOH = \"\\r\\n\\r\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local s, e = string.find(input, EOH, pos, true)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if s then\r\n    return break_headers(string.sub(input, pos, s-1)), e+1\r\n  else return nil, pos end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function get_field_names(headers)\r\n  local disp_header = headers[\"content-disposition\"] or \"\"\r\n  local attrs = {}\r\n  for attr, val in string.gmatch(disp_header, ';%s*([^%s=]+)=\"(.-)\"') do\r\n    attrs[attr] = val\r\n  end\r\n  return attrs.name, attrs.filename and split_filename(attrs.filename)\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local disp_header = headers[\"content-disposition\"] or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local attrs = {}",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "for attr, val in string.gmatch(disp_header, ';%s*([^%s=]+)=\"(.-)\"') do\r\n    attrs[attr] = val\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "attrs[attr] = val",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function read_field_contents(input, boundary, pos)\r\n  local boundaryline = \"\\r\\n\" .. boundary\r\n  local s, e = string.find(input, boundaryline, pos, true)\r\n  if s then\r\n    return string.sub(input, pos, s-1), s-pos, e+1\r\n  else return nil, 0, pos end\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local boundaryline = \"\\r\\n\" .. boundary",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local s, e = string.find(input, boundaryline, pos, true)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if s then\r\n    return string.sub(input, pos, s-1), s-pos, e+1\r\n  else return nil, 0, pos end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function file_value(file_contents, file_name, file_size, headers)\r\n  local value = { contents = file_contents, name = file_name,\r\n    size = file_size }\r\n  for h, v in pairs(headers) do\r\n    if h ~= \"content-disposition\" then\r\n      value[h] = v\r\n    end\r\n  end\r\n  return value\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local value = { contents = file_contents, name = file_name,\r\n    size = file_size }",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "for h, v in pairs(headers) do\r\n    if h ~= \"content-disposition\" then\r\n      value[h] = v\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "if h ~= \"content-disposition\" then\r\n      value[h] = v\r\n    end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "value[h] = v",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function fields(input, boundary)\r\n  local state, _ = { }\r\n  _, state.pos = string.find(input, boundary, 1, true)\r\n  state.pos = state.pos + 1\r\n  return function (state, _)\r\n     local headers, name, file_name, value, size\r\n     headers, state.pos = read_field_headers(input, state.pos)\r\n     if headers then\r\n       name, file_name = get_field_names(headers)\r\n       if file_name then\r\n         value, size, state.pos = read_field_contents(input, boundary,\r\n            state.pos)\r\n         value = file_value(value, file_name, size, headers)\r\n       else\r\n         value, size, state.pos = read_field_contents(input, boundary,\r\n            state.pos)\r\n       end\r\n     end\r\n     return name, value\r\n   end, state\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local state, _ = { }",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "_, state.pos = string.find(input, boundary, 1, true)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "state.pos = state.pos + 1",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "local headers, name, file_name, value, size",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "headers, state.pos = read_field_headers(input, state.pos)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if headers then\r\n       name, file_name = get_field_names(headers)\r\n       if file_name then\r\n         value, size, state.pos = read_field_contents(input, boundary,\r\n            state.pos)\r\n         value = file_value(value, file_name, size, headers)\r\n       else\r\n         value, size, state.pos = read_field_contents(input, boundary,\r\n            state.pos)\r\n       end\r\n     end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "name, file_name = get_field_names(headers)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if file_name then\r\n         value, size, state.pos = read_field_contents(input, boundary,\r\n            state.pos)\r\n         value = file_value(value, file_name, size, headers)\r\n       else\r\n         value, size, state.pos = read_field_contents(input, boundary,\r\n            state.pos)\r\n       end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "value, size, state.pos = read_field_contents(input, boundary,\r\n            state.pos)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "value = file_value(value, file_name, size, headers)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local function parse_multipart_data(input, input_type, tab, overwrite)\r\n  tab = tab or {}\r\n  local boundary = get_boundary(input_type)\r\n  for name, value in fields(input, boundary) do\r\n    insert_field(tab, name, value, overwrite)\r\n  end\r\n  return tab\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local boundary = get_boundary(input_type)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "for name, value in fields(input, boundary) do\r\n    insert_field(tab, name, value, overwrite)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 69,
    "text": "insert_field(tab, name, value, overwrite)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "local function parse_post_data(wsapi_env, tab, overwrite)\r\n  tab = tab or {}\r\n  local input_type = wsapi_env.CONTENT_TYPE\r\n  if string.find(input_type, \"x-www-form-urlencoded\", 1, true) then\r\n    local length = tonumber(wsapi_env.CONTENT_LENGTH) or 0\r\n    parse_qs(wsapi_env.input:read(length) or \"\", tab, overwrite)\r\n  elseif string.find(input_type, \"multipart/form-data\", 1, true) then\r\n    local length = tonumber(wsapi_env.CONTENT_LENGTH) or 0\r\n    if length > 0 then\r\n       parse_multipart_data(wsapi_env.input:read(length) or \"\", input_type, tab, overwrite)\r\n    end\r\n  else\r\n    local length = tonumber(wsapi_env.CONTENT_LENGTH) or 0\r\n    tab.post_data = wsapi_env.input:read(length) or \"\"\r\n  end\r\n  return tab\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local input_type = wsapi_env.CONTENT_TYPE",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if string.find(input_type, \"x-www-form-urlencoded\", 1, true) then\r\n    local length = tonumber(wsapi_env.CONTENT_LENGTH) or 0\r\n    parse_qs(wsapi_env.input:read(length) or \"\", tab, overwrite)\r\n  elseif string.find(input_type, \"multipart/form-data\", 1, true) then\r\n    local length = tonumber(wsapi_env.CONTENT_LENGTH) or 0\r\n    if length > 0 then\r\n       parse_multipart_data(wsapi_env.input:read(length) or \"\", input_type, tab, overwrite)\r\n    end\r\n  else\r\n    local length = tonumber(wsapi_env.CONTENT_LENGTH) or 0\r\n    tab.post_data = wsapi_env.input:read(length) or \"\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local length = tonumber(wsapi_env.CONTENT_LENGTH) or 0",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "parse_qs(wsapi_env.input:read(length) or \"\", tab, overwrite)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "if length > 0 then\r\n       parse_multipart_data(wsapi_env.input:read(length) or \"\", input_type, tab, overwrite)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "parse_multipart_data(wsapi_env.input:read(length) or \"\", input_type, tab, overwrite)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "tab.post_data = wsapi_env.input:read(length) or \"\"",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function methods.__index(tab, name)\r\n  local func\r\n  if methods[name] then\r\n    func = methods[name]\r\n  else\r\n    local route_name = name:match(\"link_([%w_]+)\")\r\n    if route_name then\r\n      func = function (self, query, ...)\r\n         return tab:route_link(route_name, query, ...)\r\n       end\r\n    end\r\n  end\r\n  tab[name] = func\r\n  return func\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local func",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if methods[name] then\r\n    func = methods[name]\r\n  else\r\n    local route_name = name:match(\"link_([%w_]+)\")\r\n    if route_name then\r\n      func = function (self, query, ...)\r\n         return tab:route_link(route_name, query, ...)\r\n       end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "func = methods[name]",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "local route_name = name:match(\"link_([%w_]+)\")",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if route_name then\r\n      func = function (self, query, ...)\r\n         return tab:route_link(route_name, query, ...)\r\n       end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "func = function (self, query, ...)\r\n         return tab:route_link(route_name, query, ...)\r\n       end",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "tab[name] = func",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function (self, query, ...)\r\n         return tab:route_link(route_name, query, ...)\r\n       end",
    "type": "function"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function methods:qs_encode(query)\r\n  local parts = {}\r\n  for k, v in pairs(query or {}) do\r\n    parts[#parts+1] = k .. \"=\" .. wsapi.util.url_encode(v)\r\n  end\r\n  if #parts > 0 then\r\n    return \"?\" .. table.concat(parts, \"&\")\r\n  else\r\n    return \"\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "local parts = {}",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "for k, v in pairs(query or {}) do\r\n    parts[#parts+1] = k .. \"=\" .. wsapi.util.url_encode(v)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 94,
    "text": "parts[#parts+1] = k .. \"=\" .. wsapi.util.url_encode(v)",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "if #parts > 0 then\r\n    return \"?\" .. table.concat(parts, \"&\")\r\n  else\r\n    return \"\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function methods:route_link(route, query, ...)\r\n  local builder = self.mk_app[\"link_\" .. route]\r\n  if builder then\r\n    local uri = builder(self.mk_app, self.env, ...)\r\n    return uri .. self:qs_encode(query)\r\n  else\r\n    error(\"there is no route named \" .. route)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "local builder = self.mk_app[\"link_\" .. route]",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "if builder then\r\n    local uri = builder(self.mk_app, self.env, ...)\r\n    return uri .. self:qs_encode(query)\r\n  else\r\n    error(\"there is no route named \" .. route)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "local uri = builder(self.mk_app, self.env, ...)",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "error(\"there is no route named \" .. route)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function methods:link(url, query)\r\n  local prefix = (self.mk_app and self.mk_app.prefix) or self.script_name\r\n  local uri = prefix .. url\r\n  return prefix .. url .. self:qs_encode(query)\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local prefix = (self.mk_app and self.mk_app.prefix) or self.script_name",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local uri = prefix .. url",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function methods:absolute_link(url, query)\r\n  return url .. self:qs_encode(query)\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function methods:static_link(url)\r\n  local prefix = (self.mk_app and self.mk_app.prefix) or self.script_name\r\n  local is_script = prefix:match(\"(%.%w+)$\")\r\n  if not is_script then return self:link(url) end\r\n  local vpath = prefix:match(\"(.*)/\") or \"\"\r\n  return vpath .. url\r\nend",
    "type": "function"
  }, {
    "id": 110,
    "text": "local is_script = prefix:match(\"(%.%w+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "if not is_script then return self:link(url) end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "local vpath = prefix:match(\"(.*)/\") or \"\"",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function methods:empty(s)\r\n  return not s or string.match(s, \"^%s*$\")\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function methods:empty_param(param)\r\n  return self:empty(self.params[param])\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function new(wsapi_env, options)\r\n  options = options or {}\r\n  local req = {\r\n    GET          = {},\r\n    POST         = {},\r\n    method       = wsapi_env.REQUEST_METHOD,\r\n    path_info    = wsapi_env.PATH_INFO,\r\n    query_string = wsapi_env.QUERY_STRING,\r\n    script_name  = wsapi_env.SCRIPT_NAME,\r\n    env          = wsapi_env,\r\n    mk_app       = options.mk_app,\r\n    doc_root     = wsapi_env.DOCUMENT_ROOT,\r\n    app_path     = wsapi_env.APP_PATH\r\n  }\r\n  parse_qs(wsapi_env.QUERY_STRING, req.GET, options.overwrite)\r\n  if options.delay_post then\r\n    req.parse_post = function (self)\r\n      parse_post_data(wsapi_env, self.POST, options.overwrite)\r\n      self.parse_post = function () return nil, \"postdata already parsed\" end\r\n      return self.POST\r\n    end\r\n  else\r\n    parse_post_data(wsapi_env, req.POST, options.overwrite)\r\n    req.parse_post = function () return nil, \"postdata already parsed\" end\r\n  end\r\n  req.params = {}\r\n  setmetatable(req.params, { __index = function (tab, name)\r\n    local var = req.GET[name] or req.POST[name]\r\n    rawset(tab, name, var)\r\n    return var\r\n  end})\r\n  req.cookies = {}\r\n  local cookies = string.gsub(\";\" .. (wsapi_env.HTTP_COOKIE or \"\") .. \";\",\r\n            \"%s*;%s*\", \";\")\r\n  setmetatable(req.cookies, { __index = function (tab, name)\r\n    name = name\r\n    local pattern = \";\" .. name ..\r\n      \"=(.-);\"\r\n    local cookie = string.match(cookies, pattern)\r\n    cookie = util.url_decode(cookie)\r\n    rawset(tab, name, cookie)\r\n    return cookie\r\n  end})\r\n  return setmetatable(req, methods)\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "options = options or {}",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "local req = {\r\n    GET          = {},\r\n    POST         = {},\r\n    method       = wsapi_env.REQUEST_METHOD,\r\n    path_info    = wsapi_env.PATH_INFO,\r\n    query_string = wsapi_env.QUERY_STRING,\r\n    script_name  = wsapi_env.SCRIPT_NAME,\r\n    env          = wsapi_env,\r\n    mk_app       = options.mk_app,\r\n    doc_root     = wsapi_env.DOCUMENT_ROOT,\r\n    app_path     = wsapi_env.APP_PATH\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "parse_qs(wsapi_env.QUERY_STRING, req.GET, options.overwrite)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "if options.delay_post then\r\n    req.parse_post = function (self)\r\n      parse_post_data(wsapi_env, self.POST, options.overwrite)\r\n      self.parse_post = function () return nil, \"postdata already parsed\" end\r\n      return self.POST\r\n    end\r\n  else\r\n    parse_post_data(wsapi_env, req.POST, options.overwrite)\r\n    req.parse_post = function () return nil, \"postdata already parsed\" end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 123,
    "text": "req.parse_post = function (self)\r\n      parse_post_data(wsapi_env, self.POST, options.overwrite)\r\n      self.parse_post = function () return nil, \"postdata already parsed\" end\r\n      return self.POST\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "parse_post_data(wsapi_env, self.POST, options.overwrite)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "self.parse_post = function () return nil, \"postdata already parsed\" end",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "parse_post_data(wsapi_env, req.POST, options.overwrite)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "req.parse_post = function () return nil, \"postdata already parsed\" end",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "req.params = {}",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "setmetatable(req.params, { __index = function (tab, name)\r\n    local var = req.GET[name] or req.POST[name]\r\n    rawset(tab, name, var)\r\n    return var\r\n  end})",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "local var = req.GET[name] or req.POST[name]",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "rawset(tab, name, var)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "req.cookies = {}",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "local cookies = string.gsub(\";\" .. (wsapi_env.HTTP_COOKIE or \"\") .. \";\",\r\n            \"%s*;%s*\", \";\")",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "setmetatable(req.cookies, { __index = function (tab, name)\r\n    name = name\r\n    local pattern = \";\" .. name ..\r\n      \"=(.-);\"\r\n    local cookie = string.match(cookies, pattern)\r\n    cookie = util.url_decode(cookie)\r\n    rawset(tab, name, cookie)\r\n    return cookie\r\n  end})",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "name = name",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "local pattern = \";\" .. name ..\r\n      \"=(.-);\"",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local cookie = string.match(cookies, pattern)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "cookie = util.url_decode(cookie)",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "rawset(tab, name, cookie)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function () return nil, \"postdata already parsed\" end",
    "type": "function"
  }, {
    "id": 142,
    "text": "function (self)\r\n      parse_post_data(wsapi_env, self.POST, options.overwrite)\r\n      self.parse_post = function () return nil, \"postdata already parsed\" end\r\n      return self.POST\r\n    end",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function () return nil, \"postdata already parsed\" end",
    "type": "function"
  }, {
    "id": 145,
    "text": "function (state, _)\r\n     local headers, name, file_name, value, size\r\n     headers, state.pos = read_field_headers(input, state.pos)\r\n     if headers then\r\n       name, file_name = get_field_names(headers)\r\n       if file_name then\r\n         value, size, state.pos = read_field_contents(input, boundary,\r\n            state.pos)\r\n         value = file_value(value, file_name, size, headers)\r\n       else\r\n         value, size, state.pos = read_field_contents(input, boundary,\r\n            state.pos)\r\n       end\r\n     end\r\n     return name, value\r\n   end",
    "type": "function"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function (tab, name)\r\n    local var = req.GET[name] or req.POST[name]\r\n    rawset(tab, name, var)\r\n    return var\r\n  end",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function (tab, name)\r\n    name = name\r\n    local pattern = \";\" .. name ..\r\n      \"=(.-);\"\r\n    local cookie = string.match(cookies, pattern)\r\n    cookie = util.url_decode(cookie)\r\n    rawset(tab, name, cookie)\r\n    return cookie\r\n  end",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "",
    "type": "function container"
  }, {
    "id": 152,
    "text": "function url_decode(str)\r\n  if not str then return nil end\r\n  str = string.gsub (str, \"+\", \" \")\r\n  str = string.gsub (str, \"%%(%x%x)\", function(h) return string.char(tonumber(h,16)) end)\r\n  str = string.gsub (str, \"\\r\\n\", \"\\n\")\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 154,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 155,
    "text": "builder",
    "type": "global function"
  }, {
    "id": 156,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 157,
    "text": "url_decode",
    "type": "global function"
  }, {
    "id": 158,
    "text": "module",
    "type": "global function"
  }, {
    "id": 159,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 160,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 161,
    "text": "wsapi.util.url_encode",
    "type": "global function"
  }, {
    "id": 162,
    "text": "find",
    "type": "global function"
  }, {
    "id": 163,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 164,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 165,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 166,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 167,
    "text": "error",
    "type": "global function"
  }, {
    "id": 168,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 169,
    "text": "match",
    "type": "global function"
  }, {
    "id": 170,
    "text": "type",
    "type": "global function"
  }, {
    "id": 171,
    "text": "require",
    "type": "global function"
  }, {
    "id": 172,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 173,
    "text": "",
    "type": "global variable"
  }, {
    "id": 174,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "variable container"
  }, {
    "id": 176,
    "text": "",
    "type": "require container"
  }, {
    "id": 177,
    "text": "",
    "type": "global variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "global variable"
  } ]
}