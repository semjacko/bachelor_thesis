{
  "_filename": "ringer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wsapi/src/wsapi/ringer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 2,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 10
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 10
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 30,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 8
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 10
  }, {
    "from": 43,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 43,
    "label": "has",
    "to": 10
  }, {
    "from": 43,
    "label": "has",
    "to": 34
  }, {
    "from": 43,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 26
  }, {
    "from": 43,
    "label": "has",
    "to": 10
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 43,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 10
  }, {
    "from": 45,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 45,
    "label": "has",
    "to": 17
  }, {
    "from": 45,
    "label": "has",
    "to": 18
  }, {
    "from": 45,
    "label": "has",
    "to": 19
  }, {
    "from": 45,
    "label": "has",
    "to": 20
  }, {
    "from": 45,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 45,
    "label": "has",
    "to": 27
  }, {
    "from": 45,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 10
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 10
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 30,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 45,
    "label": "has",
    "to": 10
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 49
  }, {
    "from": 2,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 47,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 47,
    "label": "calls",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 47,
    "label": "declares",
    "to": 2
  }, {
    "from": 47,
    "label": "declares",
    "to": 40
  }, {
    "from": 47,
    "label": "declares",
    "to": 42
  }, {
    "from": 47,
    "label": "declares",
    "to": 43
  }, {
    "from": 47,
    "label": "declares",
    "to": 45
  }, {
    "from": 1,
    "label": "declares",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 58,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 59,
    "label": "initializes",
    "to": 57
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ringer",
    "type": "module"
  }, {
    "id": 2,
    "text": "function new(app_name, bootstrap, is_file)\r\n  local data = { created_at = os.time() }\r\n  setmetatable(data, { __index = _G })\r\n  local state = rings.new(data)\r\n  assert(state:dostring(init, app_name, bootstrap, is_file))\r\n  local error = function (msg)\r\n    data.status, data.headers, data.env = nil\r\n    error(msg)\r\n  end\r\n  return function (wsapi_env)\r\n    if state and wsapi_env == \"close\" then\r\n      state:close()\r\n      state = nil\r\n    end\r\n    if not state then\r\n      return nil\r\n    end\r\n    if rawget(data, \"status\") then\r\n      error(\"this state is already in use\")\r\n    end\r\n    data.status = 500\r\n    data.headers = {}\r\n    data.env = wsapi_env\r\n    local ok, flag, s =\r\n     state:dostring([[\r\n      main_coro = coroutine.wrap(main_func)\r\n      return main_coro(...)\r\n     ]])\r\n    repeat\r\n      if not ok then error(flag) end\r\n      if flag == \"RECEIVE\" then\r\n        ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n          wsapi_env.input:read(s))\r\n      elseif flag == \"SEND\" then\r\n        break\r\n      else\r\n        error(\"Invalid command: \" .. tostring(flag))\r\n      end\r\n    until flag == \"SEND\"\r\n    local res\r\n    if not s then\r\n      res = function () return nil end\r\n    else\r\n      res = function ()\r\n        if s then\r\n          local res = s\r\n          s = nil\r\n          return res\r\n        end\r\n        local ok, flag, s = state:dostring(\"return main_coro()\")\r\n        while ok and flag and s do\r\n          if flag == \"RECEIVE\" then\r\n            ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n                wsapi_env.input:read(s))\r\n          elseif flag == \"SEND\" then\r\n            return s\r\n          else\r\n            error(\"Invalid command: \" .. tostring(flag))\r\n          end\r\n        end\r\n        data.status, data.headers, data.env = nil\r\n        if data.cleanup then\r\n          state:close()\r\n          state = nil\r\n        end\r\n        if not ok then error(flag) end\r\n      end\r\n    end\r\n    return data.status, data.headers, res\r\n  end, data\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local data = { created_at = os.time() }",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "setmetatable(data, { __index = _G })",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local state = rings.new(data)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "assert(state:dostring(init, app_name, bootstrap, is_file))",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local error = function (msg)\r\n    data.status, data.headers, data.env = nil\r\n    error(msg)\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "data.status, data.headers, data.env = nil",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "error(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "if state and wsapi_env == \"close\" then\r\n      state:close()\r\n      state = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "state:close()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "state = nil",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if not state then\r\n      return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if rawget(data, \"status\") then\r\n      error(\"this state is already in use\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "error(\"this state is already in use\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "data.status = 500",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "data.headers = {}",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "data.env = wsapi_env",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "local ok, flag, s =\r\n     state:dostring([[\r\n      main_coro = coroutine.wrap(main_func)\r\n      return main_coro(...)\r\n     ]])",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "repeat\r\n      if not ok then error(flag) end\r\n      if flag == \"RECEIVE\" then\r\n        ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n          wsapi_env.input:read(s))\r\n      elseif flag == \"SEND\" then\r\n        break\r\n      else\r\n        error(\"Invalid command: \" .. tostring(flag))\r\n      end\r\n    until flag == \"SEND\"",
    "type": "statement:repeat"
  }, {
    "id": 22,
    "text": "if not ok then error(flag) end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "error(flag)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "if flag == \"RECEIVE\" then\r\n        ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n          wsapi_env.input:read(s))\r\n      elseif flag == \"SEND\" then\r\n        break\r\n      else\r\n        error(\"Invalid command: \" .. tostring(flag))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n          wsapi_env.input:read(s))",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "error(\"Invalid command: \" .. tostring(flag))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if not s then\r\n      res = function () return nil end\r\n    else\r\n      res = function ()\r\n        if s then\r\n          local res = s\r\n          s = nil\r\n          return res\r\n        end\r\n        local ok, flag, s = state:dostring(\"return main_coro()\")\r\n        while ok and flag and s do\r\n          if flag == \"RECEIVE\" then\r\n            ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n                wsapi_env.input:read(s))\r\n          elseif flag == \"SEND\" then\r\n            return s\r\n          else\r\n            error(\"Invalid command: \" .. tostring(flag))\r\n          end\r\n        end\r\n        data.status, data.headers, data.env = nil\r\n        if data.cleanup then\r\n          state:close()\r\n          state = nil\r\n        end\r\n        if not ok then error(flag) end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "res = function () return nil end",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "res = function ()\r\n        if s then\r\n          local res = s\r\n          s = nil\r\n          return res\r\n        end\r\n        local ok, flag, s = state:dostring(\"return main_coro()\")\r\n        while ok and flag and s do\r\n          if flag == \"RECEIVE\" then\r\n            ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n                wsapi_env.input:read(s))\r\n          elseif flag == \"SEND\" then\r\n            return s\r\n          else\r\n            error(\"Invalid command: \" .. tostring(flag))\r\n          end\r\n        end\r\n        data.status, data.headers, data.env = nil\r\n        if data.cleanup then\r\n          state:close()\r\n          state = nil\r\n        end\r\n        if not ok then error(flag) end\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if s then\r\n          local res = s\r\n          s = nil\r\n          return res\r\n        end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "local res = s",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "s = nil",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "local ok, flag, s = state:dostring(\"return main_coro()\")",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "while ok and flag and s do\r\n          if flag == \"RECEIVE\" then\r\n            ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n                wsapi_env.input:read(s))\r\n          elseif flag == \"SEND\" then\r\n            return s\r\n          else\r\n            error(\"Invalid command: \" .. tostring(flag))\r\n          end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 36,
    "text": "if flag == \"RECEIVE\" then\r\n            ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n                wsapi_env.input:read(s))\r\n          elseif flag == \"SEND\" then\r\n            return s\r\n          else\r\n            error(\"Invalid command: \" .. tostring(flag))\r\n          end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n                wsapi_env.input:read(s))",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if data.cleanup then\r\n          state:close()\r\n          state = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function (msg)\r\n    data.status, data.headers, data.env = nil\r\n    error(msg)\r\n  end",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function () return nil end",
    "type": "function"
  }, {
    "id": 43,
    "text": "function ()\r\n        if s then\r\n          local res = s\r\n          s = nil\r\n          return res\r\n        end\r\n        local ok, flag, s = state:dostring(\"return main_coro()\")\r\n        while ok and flag and s do\r\n          if flag == \"RECEIVE\" then\r\n            ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n                wsapi_env.input:read(s))\r\n          elseif flag == \"SEND\" then\r\n            return s\r\n          else\r\n            error(\"Invalid command: \" .. tostring(flag))\r\n          end\r\n        end\r\n        data.status, data.headers, data.env = nil\r\n        if data.cleanup then\r\n          state:close()\r\n          state = nil\r\n        end\r\n        if not ok then error(flag) end\r\n      end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function (wsapi_env)\r\n    if state and wsapi_env == \"close\" then\r\n      state:close()\r\n      state = nil\r\n    end\r\n    if not state then\r\n      return nil\r\n    end\r\n    if rawget(data, \"status\") then\r\n      error(\"this state is already in use\")\r\n    end\r\n    data.status = 500\r\n    data.headers = {}\r\n    data.env = wsapi_env\r\n    local ok, flag, s =\r\n     state:dostring([[\r\n      main_coro = coroutine.wrap(main_func)\r\n      return main_coro(...)\r\n     ]])\r\n    repeat\r\n      if not ok then error(flag) end\r\n      if flag == \"RECEIVE\" then\r\n        ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n          wsapi_env.input:read(s))\r\n      elseif flag == \"SEND\" then\r\n        break\r\n      else\r\n        error(\"Invalid command: \" .. tostring(flag))\r\n      end\r\n    until flag == \"SEND\"\r\n    local res\r\n    if not s then\r\n      res = function () return nil end\r\n    else\r\n      res = function ()\r\n        if s then\r\n          local res = s\r\n          s = nil\r\n          return res\r\n        end\r\n        local ok, flag, s = state:dostring(\"return main_coro()\")\r\n        while ok and flag and s do\r\n          if flag == \"RECEIVE\" then\r\n            ok, flag, s = state:dostring(\"return main_coro(...)\",\r\n                wsapi_env.input:read(s))\r\n          elseif flag == \"SEND\" then\r\n            return s\r\n          else\r\n            error(\"Invalid command: \" .. tostring(flag))\r\n          end\r\n        end\r\n        data.status, data.headers, data.env = nil\r\n        if data.cleanup then\r\n          state:close()\r\n          state = nil\r\n        end\r\n        if not ok then error(flag) end\r\n      end\r\n    end\r\n    return data.status, data.headers, res\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "",
    "type": "function container"
  }, {
    "id": 48,
    "text": "new",
    "type": "global function"
  }, {
    "id": 49,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 50,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 51,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 52,
    "text": "module",
    "type": "global function"
  }, {
    "id": 53,
    "text": "time",
    "type": "global function"
  }, {
    "id": 54,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 55,
    "text": "require",
    "type": "global function"
  }, {
    "id": 56,
    "text": "new",
    "type": "global function"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "variable container"
  }, {
    "id": 59,
    "text": "",
    "type": "require container"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "string"
  } ]
}