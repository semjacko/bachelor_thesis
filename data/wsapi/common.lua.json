{
  "_filename": "common.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wsapi/src/wsapi/common.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 14
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 7
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 7
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 29,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 29,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 30
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 52
  }, {
    "from": 41,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 7
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 7
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 7
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 7
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 7
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 7
  }, {
    "from": 62,
    "label": "has",
    "to": 7
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 7
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 68
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 73
  }, {
    "from": 75,
    "label": "has",
    "to": 7
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 7
  }, {
    "from": 79,
    "label": "has",
    "to": 7
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 7
  }, {
    "from": 79,
    "label": "has",
    "to": 7
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 83,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 83,
    "label": "has",
    "to": 7
  }, {
    "from": 83,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 7
  }, {
    "from": 95,
    "label": "has",
    "to": 103
  }, {
    "from": 95,
    "label": "has",
    "to": 104
  }, {
    "from": 92,
    "label": "has",
    "to": 7
  }, {
    "from": 92,
    "label": "has",
    "to": 7
  }, {
    "from": 92,
    "label": "has",
    "to": 7
  }, {
    "from": 92,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 101
  }, {
    "from": 106,
    "label": "has",
    "to": 102
  }, {
    "from": 106,
    "label": "has",
    "to": 7
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 7
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 7
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 119,
    "label": "has",
    "to": 125
  }, {
    "from": 116,
    "label": "has",
    "to": 7
  }, {
    "from": 116,
    "label": "has",
    "to": 126
  }, {
    "from": 116,
    "label": "has",
    "to": 7
  }, {
    "from": 116,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 128,
    "label": "has",
    "to": 7
  }, {
    "from": 128,
    "label": "has",
    "to": 7
  }, {
    "from": 128,
    "label": "has",
    "to": 7
  }, {
    "from": 128,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 134,
    "label": "has",
    "to": 7
  }, {
    "from": 134,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 141,
    "label": "has",
    "to": 146
  }, {
    "from": 141,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 147,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 147,
    "label": "has",
    "to": 153
  }, {
    "from": 147,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 154,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 154,
    "label": "has",
    "to": 159
  }, {
    "from": 147,
    "label": "has",
    "to": 160
  }, {
    "from": 141,
    "label": "has",
    "to": 161
  }, {
    "from": 140,
    "label": "has",
    "to": 7
  }, {
    "from": 140,
    "label": "has",
    "to": 7
  }, {
    "from": 140,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 165,
    "label": "has",
    "to": 171
  }, {
    "from": 165,
    "label": "has",
    "to": 172
  }, {
    "from": 165,
    "label": "has",
    "to": 171
  }, {
    "from": 165,
    "label": "has",
    "to": 172
  }, {
    "from": 163,
    "label": "has",
    "to": 173
  }, {
    "from": 163,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 163,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 7
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 7
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 186,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 186,
    "label": "has",
    "to": 7
  }, {
    "from": 186,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 193,
    "label": "has",
    "to": 7
  }, {
    "from": 193,
    "label": "has",
    "to": 7
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 199,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 204,
    "label": "has",
    "to": 206
  }, {
    "from": 199,
    "label": "has",
    "to": 207
  }, {
    "from": 198,
    "label": "has",
    "to": 208
  }, {
    "from": 197,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 210,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 210,
    "label": "has",
    "to": 216
  }, {
    "from": 210,
    "label": "has",
    "to": 217
  }, {
    "from": 210,
    "label": "has",
    "to": 7
  }, {
    "from": 210,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 219,
    "label": "has",
    "to": 187
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 219,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 223,
    "label": "has",
    "to": 227
  }, {
    "from": 223,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 205
  }, {
    "from": 229,
    "label": "has",
    "to": 206
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 223,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 219,
    "label": "has",
    "to": 7
  }, {
    "from": 219,
    "label": "has",
    "to": 7
  }, {
    "from": 219,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 7
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 233,
    "label": "has",
    "to": 7
  }, {
    "from": 233,
    "label": "has",
    "to": 236
  }, {
    "from": 237,
    "label": "has",
    "to": 7
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 239,
    "label": "has",
    "to": 7
  }, {
    "from": 239,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 200
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 203
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 205
  }, {
    "from": 246,
    "label": "has",
    "to": 206
  }, {
    "from": 243,
    "label": "has",
    "to": 207
  }, {
    "from": 242,
    "label": "has",
    "to": 208
  }, {
    "from": 241,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 248,
    "label": "has",
    "to": 7
  }, {
    "from": 248,
    "label": "has",
    "to": 250
  }, {
    "from": 251,
    "label": "has",
    "to": 221
  }, {
    "from": 251,
    "label": "has",
    "to": 222
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 251,
    "label": "has",
    "to": 253
  }, {
    "from": 251,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 254,
    "label": "has",
    "to": 227
  }, {
    "from": 254,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 259,
    "label": "has",
    "to": 205
  }, {
    "from": 259,
    "label": "has",
    "to": 206
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 254,
    "label": "has",
    "to": 260
  }, {
    "from": 251,
    "label": "has",
    "to": 7
  }, {
    "from": 251,
    "label": "has",
    "to": 7
  }, {
    "from": 251,
    "label": "has",
    "to": 261
  }, {
    "from": 262,
    "label": "has",
    "to": 234
  }, {
    "from": 262,
    "label": "has",
    "to": 7
  }, {
    "from": 262,
    "label": "has",
    "to": 235
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 7
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 7
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 270,
    "label": "has",
    "to": 272
  }, {
    "from": 272,
    "label": "has",
    "to": 273
  }, {
    "from": 270,
    "label": "has",
    "to": 274
  }, {
    "from": 269,
    "label": "has",
    "to": 208
  }, {
    "from": 268,
    "label": "has",
    "to": 275
  }, {
    "from": 276,
    "label": "has",
    "to": 220
  }, {
    "from": 276,
    "label": "has",
    "to": 187
  }, {
    "from": 276,
    "label": "has",
    "to": 188
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 276,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 278,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 276,
    "label": "has",
    "to": 7
  }, {
    "from": 276,
    "label": "has",
    "to": 7
  }, {
    "from": 276,
    "label": "has",
    "to": 283
  }, {
    "from": 284,
    "label": "has",
    "to": 211
  }, {
    "from": 284,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 284,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 217
  }, {
    "from": 284,
    "label": "has",
    "to": 7
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 287,
    "label": "has",
    "to": 234
  }, {
    "from": 287,
    "label": "has",
    "to": 7
  }, {
    "from": 287,
    "label": "has",
    "to": 235
  }, {
    "from": 287,
    "label": "has",
    "to": 7
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 289,
    "label": "has",
    "to": 291
  }, {
    "from": 289,
    "label": "has",
    "to": 7
  }, {
    "from": 289,
    "label": "has",
    "to": 7
  }, {
    "from": 289,
    "label": "has",
    "to": 292
  }, {
    "from": 293,
    "label": "has",
    "to": 5
  }, {
    "from": 293,
    "label": "has",
    "to": 6
  }, {
    "from": 293,
    "label": "has",
    "to": 7
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 295,
    "label": "has",
    "to": 8
  }, {
    "from": 295,
    "label": "has",
    "to": 6
  }, {
    "from": 295,
    "label": "has",
    "to": 7
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 297,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 297,
    "label": "has",
    "to": 7
  }, {
    "from": 297,
    "label": "has",
    "to": 7
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 299,
    "label": "has",
    "to": 7
  }, {
    "from": 300,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 300,
    "label": "has",
    "to": 7
  }, {
    "from": 300,
    "label": "has",
    "to": 7
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 7
  }, {
    "from": 302,
    "label": "has",
    "to": 304
  }, {
    "from": 305,
    "label": "has",
    "to": 235
  }, {
    "from": 305,
    "label": "has",
    "to": 7
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 307,
    "label": "has",
    "to": 303
  }, {
    "from": 307,
    "label": "has",
    "to": 7
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 309,
    "label": "has",
    "to": 235
  }, {
    "from": 309,
    "label": "has",
    "to": 263
  }, {
    "from": 309,
    "label": "has",
    "to": 264
  }, {
    "from": 309,
    "label": "has",
    "to": 7
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 311,
    "label": "has",
    "to": 7
  }, {
    "from": 311,
    "label": "has",
    "to": 313
  }, {
    "from": 314,
    "label": "has",
    "to": 235
  }, {
    "from": 314,
    "label": "has",
    "to": 7
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 92,
    "label": "calls",
    "to": 338
  }, {
    "from": 54,
    "label": "calls",
    "to": 323
  }, {
    "from": 58,
    "label": "calls",
    "to": 323
  }, {
    "from": 60,
    "label": "calls",
    "to": 323
  }, {
    "from": 92,
    "label": "calls",
    "to": 323
  }, {
    "from": 29,
    "label": "calls",
    "to": 324
  }, {
    "from": 29,
    "label": "calls",
    "to": 324
  }, {
    "from": 41,
    "label": "calls",
    "to": 324
  }, {
    "from": 41,
    "label": "calls",
    "to": 324
  }, {
    "from": 41,
    "label": "calls",
    "to": 324
  }, {
    "from": 41,
    "label": "calls",
    "to": 324
  }, {
    "from": 41,
    "label": "calls",
    "to": 324
  }, {
    "from": 116,
    "label": "calls",
    "to": 325
  }, {
    "from": 116,
    "label": "calls",
    "to": 325
  }, {
    "from": 10,
    "label": "calls",
    "to": 326
  }, {
    "from": 92,
    "label": "calls",
    "to": 75
  }, {
    "from": 29,
    "label": "calls",
    "to": 327
  }, {
    "from": 41,
    "label": "calls",
    "to": 327
  }, {
    "from": 41,
    "label": "calls",
    "to": 327
  }, {
    "from": 54,
    "label": "calls",
    "to": 327
  }, {
    "from": 58,
    "label": "calls",
    "to": 327
  }, {
    "from": 60,
    "label": "calls",
    "to": 327
  }, {
    "from": 67,
    "label": "calls",
    "to": 327
  }, {
    "from": 289,
    "label": "calls",
    "to": 287
  }, {
    "from": 41,
    "label": "calls",
    "to": 328
  }, {
    "from": 83,
    "label": "calls",
    "to": 328
  }, {
    "from": 116,
    "label": "calls",
    "to": 108
  }, {
    "from": 116,
    "label": "calls",
    "to": 108
  }, {
    "from": 251,
    "label": "calls",
    "to": 108
  }, {
    "from": 83,
    "label": "calls",
    "to": 3
  }, {
    "from": 29,
    "label": "calls",
    "to": 330
  }, {
    "from": 3,
    "label": "calls",
    "to": 331
  }, {
    "from": 3,
    "label": "calls",
    "to": 350
  }, {
    "from": 23,
    "label": "calls",
    "to": 350
  }, {
    "from": 41,
    "label": "calls",
    "to": 350
  }, {
    "from": 41,
    "label": "calls",
    "to": 350
  }, {
    "from": 79,
    "label": "calls",
    "to": 350
  }, {
    "from": 29,
    "label": "calls",
    "to": 347
  }, {
    "from": 29,
    "label": "calls",
    "to": 347
  }, {
    "from": 79,
    "label": "calls",
    "to": 347
  }, {
    "from": 186,
    "label": "calls",
    "to": 180
  }, {
    "from": 177,
    "label": "calls",
    "to": 163
  }, {
    "from": 262,
    "label": "calls",
    "to": 163
  }, {
    "from": 262,
    "label": "calls",
    "to": 251
  }, {
    "from": 41,
    "label": "calls",
    "to": 333
  }, {
    "from": 163,
    "label": "calls",
    "to": 333
  }, {
    "from": 197,
    "label": "calls",
    "to": 333
  }, {
    "from": 219,
    "label": "calls",
    "to": 333
  }, {
    "from": 219,
    "label": "calls",
    "to": 333
  }, {
    "from": 197,
    "label": "calls",
    "to": 333
  }, {
    "from": 251,
    "label": "calls",
    "to": 333
  }, {
    "from": 251,
    "label": "calls",
    "to": 333
  }, {
    "from": 92,
    "label": "calls",
    "to": 79
  }, {
    "from": 83,
    "label": "calls",
    "to": 10
  }, {
    "from": 83,
    "label": "calls",
    "to": 348
  }, {
    "from": 316,
    "label": "calls",
    "to": 348
  }, {
    "from": 316,
    "label": "calls",
    "to": 348
  }, {
    "from": 316,
    "label": "calls",
    "to": 348
  }, {
    "from": 92,
    "label": "calls",
    "to": 83
  }, {
    "from": 116,
    "label": "calls",
    "to": 111
  }, {
    "from": 316,
    "label": "calls",
    "to": 334
  }, {
    "from": 19,
    "label": "calls",
    "to": 334
  }, {
    "from": 19,
    "label": "calls",
    "to": 334
  }, {
    "from": 219,
    "label": "calls",
    "to": 193
  }, {
    "from": 219,
    "label": "calls",
    "to": 193
  }, {
    "from": 251,
    "label": "calls",
    "to": 193
  }, {
    "from": 251,
    "label": "calls",
    "to": 193
  }, {
    "from": 276,
    "label": "calls",
    "to": 193
  }, {
    "from": 316,
    "label": "calls",
    "to": 335
  }, {
    "from": 79,
    "label": "calls",
    "to": 336
  }, {
    "from": 210,
    "label": "calls",
    "to": 177
  }, {
    "from": 284,
    "label": "calls",
    "to": 177
  }, {
    "from": 67,
    "label": "calls",
    "to": 62
  }, {
    "from": 75,
    "label": "calls",
    "to": 62
  }, {
    "from": 23,
    "label": "calls",
    "to": 346
  }, {
    "from": 140,
    "label": "calls",
    "to": 346
  }, {
    "from": 140,
    "label": "calls",
    "to": 346
  }, {
    "from": 210,
    "label": "calls",
    "to": 346
  }, {
    "from": 284,
    "label": "calls",
    "to": 346
  }, {
    "from": 67,
    "label": "calls",
    "to": 337
  }, {
    "from": 289,
    "label": "calls",
    "to": 233
  }, {
    "from": 56,
    "label": "calls",
    "to": 54
  }, {
    "from": 67,
    "label": "calls",
    "to": 54
  }, {
    "from": 23,
    "label": "calls",
    "to": 23
  }, {
    "from": 23,
    "label": "calls",
    "to": 23
  }, {
    "from": 79,
    "label": "calls",
    "to": 23
  }, {
    "from": 186,
    "label": "calls",
    "to": 23
  }, {
    "from": 140,
    "label": "calls",
    "to": 134
  }, {
    "from": 197,
    "label": "calls",
    "to": 353
  }, {
    "from": 219,
    "label": "calls",
    "to": 353
  }, {
    "from": 197,
    "label": "calls",
    "to": 353
  }, {
    "from": 251,
    "label": "calls",
    "to": 353
  }, {
    "from": 186,
    "label": "calls",
    "to": 321
  }, {
    "from": 219,
    "label": "calls",
    "to": 321
  }, {
    "from": 276,
    "label": "calls",
    "to": 321
  }, {
    "from": 197,
    "label": "calls",
    "to": 332
  }, {
    "from": 219,
    "label": "calls",
    "to": 332
  }, {
    "from": 197,
    "label": "calls",
    "to": 332
  }, {
    "from": 251,
    "label": "calls",
    "to": 332
  }, {
    "from": 163,
    "label": "calls",
    "to": 140
  }, {
    "from": 41,
    "label": "calls",
    "to": 29
  }, {
    "from": 177,
    "label": "calls",
    "to": 116
  }, {
    "from": 180,
    "label": "calls",
    "to": 339
  }, {
    "from": 23,
    "label": "calls",
    "to": 340
  }, {
    "from": 186,
    "label": "calls",
    "to": 340
  }, {
    "from": 210,
    "label": "calls",
    "to": 341
  }, {
    "from": 262,
    "label": "calls",
    "to": 341
  }, {
    "from": 284,
    "label": "calls",
    "to": 341
  }, {
    "from": 79,
    "label": "calls",
    "to": 342
  }, {
    "from": 197,
    "label": "calls",
    "to": 329
  }, {
    "from": 197,
    "label": "calls",
    "to": 329
  }, {
    "from": 219,
    "label": "calls",
    "to": 329
  }, {
    "from": 219,
    "label": "calls",
    "to": 329
  }, {
    "from": 197,
    "label": "calls",
    "to": 329
  }, {
    "from": 197,
    "label": "calls",
    "to": 329
  }, {
    "from": 251,
    "label": "calls",
    "to": 329
  }, {
    "from": 251,
    "label": "calls",
    "to": 329
  }, {
    "from": 233,
    "label": "calls",
    "to": 197
  }, {
    "from": 262,
    "label": "calls",
    "to": 197
  }, {
    "from": 287,
    "label": "calls",
    "to": 197
  }, {
    "from": 92,
    "label": "calls",
    "to": 67
  }, {
    "from": 233,
    "label": "calls",
    "to": 210
  }, {
    "from": 237,
    "label": "calls",
    "to": 210
  }, {
    "from": 239,
    "label": "calls",
    "to": 210
  }, {
    "from": 75,
    "label": "calls",
    "to": 58
  }, {
    "from": 41,
    "label": "calls",
    "to": 344
  }, {
    "from": 197,
    "label": "calls",
    "to": 344
  }, {
    "from": 197,
    "label": "calls",
    "to": 344
  }, {
    "from": 197,
    "label": "calls",
    "to": 344
  }, {
    "from": 197,
    "label": "calls",
    "to": 345
  }, {
    "from": 219,
    "label": "calls",
    "to": 345
  }, {
    "from": 197,
    "label": "calls",
    "to": 345
  }, {
    "from": 251,
    "label": "calls",
    "to": 345
  }, {
    "from": 287,
    "label": "calls",
    "to": 284
  }, {
    "from": 116,
    "label": "calls",
    "to": 322
  }, {
    "from": 116,
    "label": "calls",
    "to": 322
  }, {
    "from": 140,
    "label": "calls",
    "to": 322
  }, {
    "from": 140,
    "label": "calls",
    "to": 322
  }, {
    "from": 251,
    "label": "calls",
    "to": 322
  }, {
    "from": 210,
    "label": "calls",
    "to": 219
  }, {
    "from": 163,
    "label": "calls",
    "to": 128
  }, {
    "from": 284,
    "label": "calls",
    "to": 276
  }, {
    "from": 316,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 316,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 316,
    "label": "calls",
    "to": 343
  }, {
    "from": 316,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 197,
    "label": "calls",
    "to": 343
  }, {
    "from": 108,
    "label": "calls",
    "to": 349
  }, {
    "from": 111,
    "label": "calls",
    "to": 349
  }, {
    "from": 193,
    "label": "calls",
    "to": 186
  }, {
    "from": 316,
    "label": "calls",
    "to": 351
  }, {
    "from": 23,
    "label": "calls",
    "to": 351
  }, {
    "from": 193,
    "label": "calls",
    "to": 352
  }, {
    "from": 193,
    "label": "calls",
    "to": 352
  }, {
    "from": 193,
    "label": "calls",
    "to": 352
  }, {
    "from": 67,
    "label": "calls",
    "to": 41
  }, {
    "from": 75,
    "label": "calls",
    "to": 41
  }, {
    "from": 92,
    "label": "calls",
    "to": 41
  }, {
    "from": 1,
    "label": "contains",
    "to": 316
  }, {
    "from": 316,
    "label": "declares",
    "to": 3
  }, {
    "from": 316,
    "label": "declares",
    "to": 10
  }, {
    "from": 316,
    "label": "declares",
    "to": 17
  }, {
    "from": 316,
    "label": "declares",
    "to": 19
  }, {
    "from": 316,
    "label": "declares",
    "to": 23
  }, {
    "from": 316,
    "label": "declares",
    "to": 29
  }, {
    "from": 316,
    "label": "declares",
    "to": 41
  }, {
    "from": 316,
    "label": "declares",
    "to": 54
  }, {
    "from": 316,
    "label": "declares",
    "to": 56
  }, {
    "from": 316,
    "label": "declares",
    "to": 58
  }, {
    "from": 316,
    "label": "declares",
    "to": 60
  }, {
    "from": 316,
    "label": "declares",
    "to": 62
  }, {
    "from": 316,
    "label": "declares",
    "to": 67
  }, {
    "from": 316,
    "label": "declares",
    "to": 75
  }, {
    "from": 316,
    "label": "declares",
    "to": 79
  }, {
    "from": 316,
    "label": "declares",
    "to": 83
  }, {
    "from": 316,
    "label": "declares",
    "to": 92
  }, {
    "from": 316,
    "label": "declares",
    "to": 106
  }, {
    "from": 316,
    "label": "declares",
    "to": 108
  }, {
    "from": 316,
    "label": "declares",
    "to": 111
  }, {
    "from": 316,
    "label": "declares",
    "to": 116
  }, {
    "from": 316,
    "label": "declares",
    "to": 128
  }, {
    "from": 316,
    "label": "declares",
    "to": 134
  }, {
    "from": 316,
    "label": "declares",
    "to": 140
  }, {
    "from": 316,
    "label": "declares",
    "to": 163
  }, {
    "from": 316,
    "label": "declares",
    "to": 177
  }, {
    "from": 316,
    "label": "declares",
    "to": 180
  }, {
    "from": 316,
    "label": "declares",
    "to": 186
  }, {
    "from": 316,
    "label": "declares",
    "to": 193
  }, {
    "from": 316,
    "label": "declares",
    "to": 197
  }, {
    "from": 316,
    "label": "declares",
    "to": 210
  }, {
    "from": 316,
    "label": "declares",
    "to": 219
  }, {
    "from": 316,
    "label": "declares",
    "to": 233
  }, {
    "from": 316,
    "label": "declares",
    "to": 237
  }, {
    "from": 316,
    "label": "declares",
    "to": 239
  }, {
    "from": 316,
    "label": "declares",
    "to": 241
  }, {
    "from": 316,
    "label": "declares",
    "to": 248
  }, {
    "from": 316,
    "label": "declares",
    "to": 251
  }, {
    "from": 316,
    "label": "declares",
    "to": 262
  }, {
    "from": 316,
    "label": "declares",
    "to": 266
  }, {
    "from": 316,
    "label": "declares",
    "to": 268
  }, {
    "from": 316,
    "label": "declares",
    "to": 276
  }, {
    "from": 316,
    "label": "declares",
    "to": 284
  }, {
    "from": 316,
    "label": "declares",
    "to": 287
  }, {
    "from": 316,
    "label": "declares",
    "to": 289
  }, {
    "from": 316,
    "label": "declares",
    "to": 293
  }, {
    "from": 316,
    "label": "declares",
    "to": 295
  }, {
    "from": 316,
    "label": "declares",
    "to": 297
  }, {
    "from": 316,
    "label": "declares",
    "to": 299
  }, {
    "from": 316,
    "label": "declares",
    "to": 300
  }, {
    "from": 316,
    "label": "declares",
    "to": 302
  }, {
    "from": 316,
    "label": "declares",
    "to": 305
  }, {
    "from": 316,
    "label": "declares",
    "to": 307
  }, {
    "from": 316,
    "label": "declares",
    "to": 309
  }, {
    "from": 316,
    "label": "declares",
    "to": 311
  }, {
    "from": 316,
    "label": "declares",
    "to": 314
  }, {
    "from": 317,
    "label": "calls",
    "to": 29
  }, {
    "from": 318,
    "label": "calls",
    "to": 79
  }, {
    "from": 318,
    "label": "calls",
    "to": 29
  }, {
    "from": 318,
    "label": "calls",
    "to": 54
  }, {
    "from": 318,
    "label": "calls",
    "to": 83
  }, {
    "from": 319,
    "label": "calls",
    "to": 289
  }, {
    "from": 354,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 355
  }, {
    "from": 1,
    "label": "contains",
    "to": 356
  }, {
    "from": 355,
    "label": "initializes",
    "to": 357
  }, {
    "from": 357,
    "label": "assigns",
    "to": 358
  }, {
    "from": 355,
    "label": "initializes",
    "to": 359
  }, {
    "from": 355,
    "label": "initializes",
    "to": 360
  }, {
    "from": 360,
    "label": "assigns",
    "to": 361
  }, {
    "from": 355,
    "label": "initializes",
    "to": 362
  }, {
    "from": 355,
    "label": "initializes",
    "to": 363
  }, {
    "from": 355,
    "label": "initializes",
    "to": 364
  }, {
    "from": 355,
    "label": "initializes",
    "to": 365
  }, {
    "from": 365,
    "label": "assigns",
    "to": 366
  }, {
    "from": 356,
    "label": "initializes",
    "to": 367
  }, {
    "from": 367,
    "label": "requires",
    "to": 320
  }, {
    "from": 368,
    "label": "requires",
    "to": 1
  }, {
    "from": 369,
    "label": "requires",
    "to": 1
  }, {
    "from": 370,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "common",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "function sv_index(func)\r\n  if type(func) == \"table\" then\r\n    return function (env, n)\r\n             local v = func[n]\r\n             env[n] = v or \"\"\r\n             return v or \"\"\r\n           end\r\n  else\r\n    return function (env, n)\r\n             local v = func(n)\r\n             env[n] = v or \"\"\r\n             return v or \"\"\r\n           end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "if type(func) == \"table\" then\r\n    return function (env, n)\r\n             local v = func[n]\r\n             env[n] = v or \"\"\r\n             return v or \"\"\r\n           end\r\n  else\r\n    return function (env, n)\r\n             local v = func(n)\r\n             env[n] = v or \"\"\r\n             return v or \"\"\r\n           end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "local v = func[n]",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "env[n] = v or \"\"",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "local v = func(n)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function input_maker(obj, read_method)\r\n   local input = {}\r\n   read = obj[read_method or \"read\"]\r\n\r\n   function input:read(n)\r\n     n = n or self.length or 0\r\n     if n > 0 then return read(obj, n) end\r\n   end\r\n   return input\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local input = {}",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "read = obj[read_method or \"read\"]",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "function input:read(n)\r\n     n = n or self.length or 0\r\n     if n > 0 then return read(obj, n) end\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 14,
    "text": "n = n or self.length or 0",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if n > 0 then return read(obj, n) end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function input:read(n)\r\n     n = n or self.length or 0\r\n     if n > 0 then return read(obj, n) end\r\n   end",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function setmode()\r\n   pcall(lfs.setmode, io.stdin, \"binary\")\r\n   pcall(lfs.setmode, io.stdout, \"binary\")\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "pcall(lfs.setmode, io.stdin, \"binary\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "pcall(lfs.setmode, io.stdout, \"binary\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function normalize_app(app_run, is_file)\r\n   local t = type(app_run)\r\n   if t == \"function\" then\r\n      return app_run\r\n   elseif t == \"table\" then\r\n      return app_run.run\r\n   elseif t == \"string\" then\r\n      if is_file then\r\n         return normalize_app(dofile(app_run))\r\n      else\r\n         return normalize_app(require(app_run))\r\n      end\r\n   else\r\n      error(\"not a valid WSAPI application\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "local t = type(app_run)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if t == \"function\" then\r\n      return app_run\r\n   elseif t == \"table\" then\r\n      return app_run.run\r\n   elseif t == \"string\" then\r\n      if is_file then\r\n         return normalize_app(dofile(app_run))\r\n      else\r\n         return normalize_app(require(app_run))\r\n      end\r\n   else\r\n      error(\"not a valid WSAPI application\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if is_file then\r\n         return normalize_app(dofile(app_run))\r\n      else\r\n         return normalize_app(require(app_run))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "error(\"not a valid WSAPI application\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function send_content(out, res_iter, write_method)\r\n   local write = out[write_method or \"write\"]\r\n   local flush = out.flush\r\n   local ok, res = xpcall(res_iter, debug.traceback)\r\n   while ok and res do\r\n      write(out, res)\r\n      if flush then flush(out) end\r\n      ok, res = xpcall(res_iter, debug.traceback)\r\n   end\r\n   if not ok then\r\n      write(out,\r\n            \"======== WSAPI ERROR DURING RESPONSE PROCESSING: \\n<pre>\" ..\r\n              tostring(res) .. \"\\n</pre>\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local write = out[write_method or \"write\"]",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local flush = out.flush",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local ok, res = xpcall(res_iter, debug.traceback)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "while ok and res do\r\n      write(out, res)\r\n      if flush then flush(out) end\r\n      ok, res = xpcall(res_iter, debug.traceback)\r\n   end",
    "type": "statement:while"
  }, {
    "id": 34,
    "text": "write(out, res)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if flush then flush(out) end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "flush(out)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "ok, res = xpcall(res_iter, debug.traceback)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if not ok then\r\n      write(out,\r\n            \"======== WSAPI ERROR DURING RESPONSE PROCESSING: \\n<pre>\" ..\r\n              tostring(res) .. \"\\n</pre>\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "write(out,\r\n            \"======== WSAPI ERROR DURING RESPONSE PROCESSING: \\n<pre>\" ..\r\n              tostring(res) .. \"\\n</pre>\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function send_output(out, status, headers, res_iter, write_method, res_line)\r\n   local write = out[write_method or \"write\"]\r\n   if type(status) == \"number\" or status:match(\"^%d+$\") then\r\n     status = status .. \" \" .. status_codes[tonumber(status)]\r\n   end\r\n   if res_line then\r\n     write(out, \"HTTP/1.1 \" .. (status or \"500 Internal Server Error\") .. \"\\r\\n\")\r\n   else\r\n     write(out, \"Status: \" .. (status or \"500 Internal Server Error\") .. \"\\r\\n\")\r\n   end\r\n   for h, v in pairs(headers or {}) do\r\n      if type(v) ~= \"table\" then\r\n         write(out, h .. \": \" .. tostring(v) .. \"\\r\\n\")\r\n      else\r\n         for _, v in ipairs(v) do\r\n            write(out, h .. \": \" .. tostring(v) .. \"\\r\\n\")\r\n         end\r\n      end\r\n   end\r\n   write(out, \"\\r\\n\")\r\n   send_content(out, res_iter, write_method)\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "if type(status) == \"number\" or status:match(\"^%d+$\") then\r\n     status = status .. \" \" .. status_codes[tonumber(status)]\r\n   end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "status = status .. \" \" .. status_codes[tonumber(status)]",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if res_line then\r\n     write(out, \"HTTP/1.1 \" .. (status or \"500 Internal Server Error\") .. \"\\r\\n\")\r\n   else\r\n     write(out, \"Status: \" .. (status or \"500 Internal Server Error\") .. \"\\r\\n\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "write(out, \"HTTP/1.1 \" .. (status or \"500 Internal Server Error\") .. \"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "write(out, \"Status: \" .. (status or \"500 Internal Server Error\") .. \"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "for h, v in pairs(headers or {}) do\r\n      if type(v) ~= \"table\" then\r\n         write(out, h .. \": \" .. tostring(v) .. \"\\r\\n\")\r\n      else\r\n         for _, v in ipairs(v) do\r\n            write(out, h .. \": \" .. tostring(v) .. \"\\r\\n\")\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "if type(v) ~= \"table\" then\r\n         write(out, h .. \": \" .. tostring(v) .. \"\\r\\n\")\r\n      else\r\n         for _, v in ipairs(v) do\r\n            write(out, h .. \": \" .. tostring(v) .. \"\\r\\n\")\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "write(out, h .. \": \" .. tostring(v) .. \"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "for _, v in ipairs(v) do\r\n            write(out, h .. \": \" .. tostring(v) .. \"\\r\\n\")\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "write(out, \"\\r\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "send_content(out, res_iter, write_method)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function error_html(msg)\r\n   return string.format([[\r\n        <html>\r\n        <head><title>WSAPI Error in Application</title></head>\r\n        <body>\r\n        <p>There was an error in the specified application.\r\n        The full error message follows:</p>\r\n<pre>\r\n%s\r\n</pre>\r\n        </body>\r\n        </html>\r\n      ]], tostring(msg))\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function status_500_html(msg)\r\n   return error_html(msg)\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function status_404_html(msg)\r\n   return string.format([[\r\n        <html>\r\n        <head><title>Resource not found</title></head>\r\n        <body>\r\n        <p>%s</p>\r\n        </body>\r\n        </html>\r\n      ]], tostring(msg))\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function status_200_html(msg)\r\n   return string.format([[\r\n        <html>\r\n        <head><title>Resource not found</title></head>\r\n        <body>\r\n        <p>%s</p>\r\n        </body>\r\n        </html>\r\n      ]], tostring(msg))\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "local function make_iterator(msg)\r\n  local sent = false\r\n  return function ()\r\n           if sent then return nil\r\n           else\r\n             sent = true\r\n             return msg\r\n           end\r\n         end\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local sent = false",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if sent then return nil\r\n           else\r\n             sent = true\r\n             return msg\r\n           end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "sent = true",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function send_error(out, err, msg, out_method, err_method, http_response)\r\n   local write = out[out_method or \"write\"]\r\n   local write_err = err[err_method or \"write\"]\r\n   write_err(err, \"WSAPI error in application: \" .. tostring(msg) .. \"\\n\")\r\n   local msg = error_html(msg)\r\n   local status, headers, res_iter = \"500 Internal Server Error\", {\r\n        [\"Content-Type\"] = \"text/html\",\r\n        [\"Content-Length\"] = #msg\r\n      }, make_iterator(msg)\r\n   send_output(out, status, headers, res_iter, out_method, http_response)\r\n   return status, headers\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "local write = out[out_method or \"write\"]",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local write_err = err[err_method or \"write\"]",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "write_err(err, \"WSAPI error in application: \" .. tostring(msg) .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "local msg = error_html(msg)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "local status, headers, res_iter = \"500 Internal Server Error\", {\r\n        [\"Content-Type\"] = \"text/html\",\r\n        [\"Content-Length\"] = #msg\r\n      }, make_iterator(msg)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "send_output(out, status, headers, res_iter, out_method, http_response)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function send_404(out, msg, out_method, http_response)\r\n   local write = out[out_method or \"write\"]\r\n   local msg = status_404_html(msg)\r\n   local status, headers, res_iter = \"404 Not Found\", {\r\n        [\"Content-Type\"] = \"text/html\",\r\n        [\"Content-Length\"] = #msg\r\n      }, make_iterator(msg)\r\n   send_output(out, status, headers, res_iter, out_method, http_response)\r\n   return status, headers\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "local msg = status_404_html(msg)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local status, headers, res_iter = \"404 Not Found\", {\r\n        [\"Content-Type\"] = \"text/html\",\r\n        [\"Content-Length\"] = #msg\r\n      }, make_iterator(msg)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function run_app(app, env)\r\n   return xpcall(function () return (normalize_app(app))(env) end,\r\n                 function (msg)\r\n                    if type(msg) == \"table\" then\r\n                       env.STATUS = msg[1]\r\n                       return _M[\"status_\" .. msg[1] .. \"_html\"](msg[2])\r\n                    else\r\n                       return debug.traceback(msg, 2)\r\n                    end\r\n                 end)\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "if type(msg) == \"table\" then\r\n                       env.STATUS = msg[1]\r\n                       return _M[\"status_\" .. msg[1] .. \"_html\"](msg[2])\r\n                    else\r\n                       return debug.traceback(msg, 2)\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "env.STATUS = msg[1]",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function wsapi_env(t)\r\n   local env = {}\r\n   setmetatable(env, { __index = sv_index(t.env) })\r\n   env.input = input_maker(t.input, t.read_method)\r\n   env.error = t.error\r\n   env.input.length = tonumber(env.CONTENT_LENGTH) or 0\r\n   if env.PATH_INFO == \"\" then env.PATH_INFO = \"/\" end\r\n   return env\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "local env = {}",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "setmetatable(env, { __index = sv_index(t.env) })",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "env.input = input_maker(t.input, t.read_method)",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "env.error = t.error",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "env.input.length = tonumber(env.CONTENT_LENGTH) or 0",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if env.PATH_INFO == \"\" then env.PATH_INFO = \"/\" end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "env.PATH_INFO = \"/\"",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function run(app, t)\r\n   local env = wsapi_env(t)\r\n   local ok, status, headers, res_iter =\r\n      run_app(app, env)\r\n   if ok then\r\n     if not headers[\"Content-Length\"] then\r\n       if t.http_response then\r\n         headers[\"Transfer-Encoding\"] = \"chunked\"\r\n         local unchunked = res_iter\r\n         res_iter = function ()\r\n                      local msg = unchunked()\r\n                      if msg then\r\n                        return string.format(\"%x\\r\\n%s\\r\\n\", #msg, msg)\r\n                      end\r\n                    end\r\n       end\r\n     end\r\n     send_output(t.output, status, headers, res_iter, t.write_method, t.http_response)\r\n   else\r\n     if env.STATUS == 404 then\r\n       return send_404(t.output, status, t.write_method, t.http_response)\r\n     else\r\n       return send_error(t.output, t.error, status, t.write_method, t.err_method, t.http_response)\r\n     end\r\n   end\r\n   return status, headers\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "local env = wsapi_env(t)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local ok, status, headers, res_iter =\r\n      run_app(app, env)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if ok then\r\n     if not headers[\"Content-Length\"] then\r\n       if t.http_response then\r\n         headers[\"Transfer-Encoding\"] = \"chunked\"\r\n         local unchunked = res_iter\r\n         res_iter = function ()\r\n                      local msg = unchunked()\r\n                      if msg then\r\n                        return string.format(\"%x\\r\\n%s\\r\\n\", #msg, msg)\r\n                      end\r\n                    end\r\n       end\r\n     end\r\n     send_output(t.output, status, headers, res_iter, t.write_method, t.http_response)\r\n   else\r\n     if env.STATUS == 404 then\r\n       return send_404(t.output, status, t.write_method, t.http_response)\r\n     else\r\n       return send_error(t.output, t.error, status, t.write_method, t.err_method, t.http_response)\r\n     end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "if not headers[\"Content-Length\"] then\r\n       if t.http_response then\r\n         headers[\"Transfer-Encoding\"] = \"chunked\"\r\n         local unchunked = res_iter\r\n         res_iter = function ()\r\n                      local msg = unchunked()\r\n                      if msg then\r\n                        return string.format(\"%x\\r\\n%s\\r\\n\", #msg, msg)\r\n                      end\r\n                    end\r\n       end\r\n     end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "if t.http_response then\r\n         headers[\"Transfer-Encoding\"] = \"chunked\"\r\n         local unchunked = res_iter\r\n         res_iter = function ()\r\n                      local msg = unchunked()\r\n                      if msg then\r\n                        return string.format(\"%x\\r\\n%s\\r\\n\", #msg, msg)\r\n                      end\r\n                    end\r\n       end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "headers[\"Transfer-Encoding\"] = \"chunked\"",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "local unchunked = res_iter",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "res_iter = function ()\r\n                      local msg = unchunked()\r\n                      if msg then\r\n                        return string.format(\"%x\\r\\n%s\\r\\n\", #msg, msg)\r\n                      end\r\n                    end",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "local msg = unchunked()",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if msg then\r\n                        return string.format(\"%x\\r\\n%s\\r\\n\", #msg, msg)\r\n                      end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "send_output(t.output, status, headers, res_iter, t.write_method, t.http_response)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "if env.STATUS == 404 then\r\n       return send_404(t.output, status, t.write_method, t.http_response)\r\n     else\r\n       return send_error(t.output, t.error, status, t.write_method, t.err_method, t.http_response)\r\n     end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function ()\r\n                      local msg = unchunked()\r\n                      if msg then\r\n                        return string.format(\"%x\\r\\n%s\\r\\n\", #msg, msg)\r\n                      end\r\n                    end",
    "type": "function"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function splitpath(filename)\r\n  local path, file = string.match(filename, \"^(.*)[/\\\\]([^/\\\\]*)$\")\r\n  return path, file\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "local path, file = string.match(filename, \"^(.*)[/\\\\]([^/\\\\]*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function splitext(filename)\r\n  local modname, ext = string.match(filename, \"^(.+)%.([^%.]+)$\")\r\n  if not modname then modname, ext = filename, \"\" end\r\n  return modname, ext\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "local modname, ext = string.match(filename, \"^(.+)%.([^%.]+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if not modname then modname, ext = filename, \"\" end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "modname, ext = filename, \"\"",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function find_file(filename)\r\n   local mode = assert(lfs.attributes(filename, \"mode\"))\r\n   local path, file, modname, ext\r\n   if mode == \"directory\" then\r\n      path, modname = splitpath(filename)\r\n      path = path .. \"/\" .. modname\r\n      file = modname .. \".lua\"\r\n      ext = \"lua\"\r\n   elseif mode == \"file\" then\r\n      path, file = splitpath(filename)\r\n      modname, ext = splitext(file)\r\n   else\r\n      return nil\r\n   end\r\n   local mtime = assert(lfs.attributes(path .. \"/\" .. file, \"modification\"))\r\n   return path, file, modname, ext, mtime\r\nend",
    "type": "function"
  }, {
    "id": 117,
    "text": "local mode = assert(lfs.attributes(filename, \"mode\"))",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local path, file, modname, ext",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if mode == \"directory\" then\r\n      path, modname = splitpath(filename)\r\n      path = path .. \"/\" .. modname\r\n      file = modname .. \".lua\"\r\n      ext = \"lua\"\r\n   elseif mode == \"file\" then\r\n      path, file = splitpath(filename)\r\n      modname, ext = splitext(file)\r\n   else\r\n      return nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "path, modname = splitpath(filename)",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "path = path .. \"/\" .. modname",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "file = modname .. \".lua\"",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "ext = \"lua\"",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "path, file = splitpath(filename)",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "modname, ext = splitext(file)",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "local mtime = assert(lfs.attributes(path .. \"/\" .. file, \"modification\"))",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function adjust_iis_path(wsapi_env, filename)\r\n   local script_name, ext =\r\n      wsapi_env.SCRIPT_NAME:match(\"([^/%.]+)%.([^%.]+)$\")\r\n   if script_name then\r\n      local path =\r\n         filename:match(\"^(.+)\" .. script_name .. \"%.\" .. ext .. \"[/\\\\]\")\r\n      if path then\r\n         return path .. script_name .. \".\" .. ext\r\n      else\r\n         return filename\r\n      end\r\n   else\r\n      return filename\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local script_name, ext =\r\n      wsapi_env.SCRIPT_NAME:match(\"([^/%.]+)%.([^%.]+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "if script_name then\r\n      local path =\r\n         filename:match(\"^(.+)\" .. script_name .. \"%.\" .. ext .. \"[/\\\\]\")\r\n      if path then\r\n         return path .. script_name .. \".\" .. ext\r\n      else\r\n         return filename\r\n      end\r\n   else\r\n      return filename\r\n   end",
    "type": "statement:if"
  }, {
    "id": 131,
    "text": "local path =\r\n         filename:match(\"^(.+)\" .. script_name .. \"%.\" .. ext .. \"[/\\\\]\")",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "if path then\r\n         return path .. script_name .. \".\" .. ext\r\n      else\r\n         return filename\r\n      end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "local function not_compatible(wsapi_env, filename)\r\n  local script_name = wsapi_env.SCRIPT_NAME\r\n  if not filename:gsub(\"\\\\\",\"/\"):find(script_name, 1, true) then\r\n    -- more IIS madness, down into the rabbit hole...\r\n    local path_info = wsapi_env.PATH_INFO:gsub(\"/\", \"\\\\\")\r\n    wsapi_env.DOCUMENT_ROOT = filename:sub(1, #filename-#path_info)\r\n    return true\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "local script_name = wsapi_env.SCRIPT_NAME",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "if not filename:gsub(\"\\\\\",\"/\"):find(script_name, 1, true) then\r\n    -- more IIS madness, down into the rabbit hole...\r\n    local path_info = wsapi_env.PATH_INFO:gsub(\"/\", \"\\\\\")\r\n    wsapi_env.DOCUMENT_ROOT = filename:sub(1, #filename-#path_info)\r\n    return true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "local path_info = wsapi_env.PATH_INFO:gsub(\"/\", \"\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "wsapi_env.DOCUMENT_ROOT = filename:sub(1, #filename-#path_info)",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function adjust_non_wrapped(wsapi_env, filename, launcher)\r\n  if filename == \"\" or not_compatible(wsapi_env, filename) or\r\n    (launcher and filename:match(launcher:gsub(\"%.\", \"%.\") .. \"$\")) then\r\n    local path_info = wsapi_env.PATH_INFO\r\n    local docroot = wsapi_env.DOCUMENT_ROOT\r\n    if docroot:sub(#docroot) ~= \"/\" and docroot:sub(#docroot) ~= \"\\\\\" then\r\n      docroot = docroot .. \"/\"\r\n    end\r\n    local s, e = path_info:find(\"[^/%.]+%.[^/%.]+\", 1)\r\n    while s do\r\n      local filepath = path_info:sub(2, e)\r\n        local filename\r\n        if docroot:find(\"\\\\\", 1, true) then\r\n        filename = docroot .. filepath:gsub(\"/\",\"\\\\\")\r\n      else\r\n        filename = docroot .. filepath\r\n      end\r\n      local mode = lfs.attributes(filename, \"mode\")\r\n      if not mode then\r\n        error({ 404, \"Resource \" .. wsapi_env.SCRIPT_NAME .. \"/\" .. filepath\r\n                 .. \" not found!\" }, 0)\r\n      elseif lfs.attributes(filename, \"mode\") == \"file\" then\r\n        wsapi_env.PATH_INFO = path_info:sub(e + 1)\r\n        if wsapi_env.PATH_INFO == \"\" then wsapi_env.PATH_INFO = \"/\" end\r\n        wsapi_env.SCRIPT_NAME = wsapi_env.SCRIPT_NAME .. \"/\" .. filepath\r\n        return filename\r\n      end\r\n      s, e = path_info:find(\"[^/%.]+%.[^/%.]+\", e + 1)\r\n    end\r\n    error(\"could not find a filename to load, check your configuration or URL\")\r\n  else return filename end\r\nend",
    "type": "function"
  }, {
    "id": 141,
    "text": "if filename == \"\" or not_compatible(wsapi_env, filename) or\r\n    (launcher and filename:match(launcher:gsub(\"%.\", \"%.\") .. \"$\")) then\r\n    local path_info = wsapi_env.PATH_INFO\r\n    local docroot = wsapi_env.DOCUMENT_ROOT\r\n    if docroot:sub(#docroot) ~= \"/\" and docroot:sub(#docroot) ~= \"\\\\\" then\r\n      docroot = docroot .. \"/\"\r\n    end\r\n    local s, e = path_info:find(\"[^/%.]+%.[^/%.]+\", 1)\r\n    while s do\r\n      local filepath = path_info:sub(2, e)\r\n        local filename\r\n        if docroot:find(\"\\\\\", 1, true) then\r\n        filename = docroot .. filepath:gsub(\"/\",\"\\\\\")\r\n      else\r\n        filename = docroot .. filepath\r\n      end\r\n      local mode = lfs.attributes(filename, \"mode\")\r\n      if not mode then\r\n        error({ 404, \"Resource \" .. wsapi_env.SCRIPT_NAME .. \"/\" .. filepath\r\n                 .. \" not found!\" }, 0)\r\n      elseif lfs.attributes(filename, \"mode\") == \"file\" then\r\n        wsapi_env.PATH_INFO = path_info:sub(e + 1)\r\n        if wsapi_env.PATH_INFO == \"\" then wsapi_env.PATH_INFO = \"/\" end\r\n        wsapi_env.SCRIPT_NAME = wsapi_env.SCRIPT_NAME .. \"/\" .. filepath\r\n        return filename\r\n      end\r\n      s, e = path_info:find(\"[^/%.]+%.[^/%.]+\", e + 1)\r\n    end\r\n    error(\"could not find a filename to load, check your configuration or URL\")\r\n  else return filename end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "local path_info = wsapi_env.PATH_INFO",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "local docroot = wsapi_env.DOCUMENT_ROOT",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "if docroot:sub(#docroot) ~= \"/\" and docroot:sub(#docroot) ~= \"\\\\\" then\r\n      docroot = docroot .. \"/\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 145,
    "text": "docroot = docroot .. \"/\"",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "local s, e = path_info:find(\"[^/%.]+%.[^/%.]+\", 1)",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "while s do\r\n      local filepath = path_info:sub(2, e)\r\n        local filename\r\n        if docroot:find(\"\\\\\", 1, true) then\r\n        filename = docroot .. filepath:gsub(\"/\",\"\\\\\")\r\n      else\r\n        filename = docroot .. filepath\r\n      end\r\n      local mode = lfs.attributes(filename, \"mode\")\r\n      if not mode then\r\n        error({ 404, \"Resource \" .. wsapi_env.SCRIPT_NAME .. \"/\" .. filepath\r\n                 .. \" not found!\" }, 0)\r\n      elseif lfs.attributes(filename, \"mode\") == \"file\" then\r\n        wsapi_env.PATH_INFO = path_info:sub(e + 1)\r\n        if wsapi_env.PATH_INFO == \"\" then wsapi_env.PATH_INFO = \"/\" end\r\n        wsapi_env.SCRIPT_NAME = wsapi_env.SCRIPT_NAME .. \"/\" .. filepath\r\n        return filename\r\n      end\r\n      s, e = path_info:find(\"[^/%.]+%.[^/%.]+\", e + 1)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 148,
    "text": "local filepath = path_info:sub(2, e)",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "local filename",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "if docroot:find(\"\\\\\", 1, true) then\r\n        filename = docroot .. filepath:gsub(\"/\",\"\\\\\")\r\n      else\r\n        filename = docroot .. filepath\r\n      end",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "filename = docroot .. filepath:gsub(\"/\",\"\\\\\")",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "filename = docroot .. filepath",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "local mode = lfs.attributes(filename, \"mode\")",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if not mode then\r\n        error({ 404, \"Resource \" .. wsapi_env.SCRIPT_NAME .. \"/\" .. filepath\r\n                 .. \" not found!\" }, 0)\r\n      elseif lfs.attributes(filename, \"mode\") == \"file\" then\r\n        wsapi_env.PATH_INFO = path_info:sub(e + 1)\r\n        if wsapi_env.PATH_INFO == \"\" then wsapi_env.PATH_INFO = \"/\" end\r\n        wsapi_env.SCRIPT_NAME = wsapi_env.SCRIPT_NAME .. \"/\" .. filepath\r\n        return filename\r\n      end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "error({ 404, \"Resource \" .. wsapi_env.SCRIPT_NAME .. \"/\" .. filepath\r\n                 .. \" not found!\" }, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "wsapi_env.PATH_INFO = path_info:sub(e + 1)",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "if wsapi_env.PATH_INFO == \"\" then wsapi_env.PATH_INFO = \"/\" end",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "wsapi_env.PATH_INFO = \"/\"",
    "type": "statement:assign"
  }, {
    "id": 159,
    "text": "wsapi_env.SCRIPT_NAME = wsapi_env.SCRIPT_NAME .. \"/\" .. filepath",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "s, e = path_info:find(\"[^/%.]+%.[^/%.]+\", e + 1)",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "error(\"could not find a filename to load, check your configuration or URL\")",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function normalize_paths(wsapi_env, filename, launcher, vars)\r\n   vars = vars or { \"SCRIPT_FILENAME\", \"PATH_TRANSLATED\" }\r\n   if not filename or filename == \"\" then\r\n     for _, var in ipairs(vars) do\r\n        filename = wsapi_env[var]\r\n        if filename ~= \"\" then break end\r\n     end\r\n     filename = adjust_non_wrapped(wsapi_env, filename, launcher)\r\n     filename = adjust_iis_path(wsapi_env, filename)\r\n     wsapi_env.PATH_TRANSLATED = filename\r\n     wsapi_env.SCRIPT_FILENAME = filename\r\n   else\r\n     wsapi_env.PATH_TRANSLATED = filename\r\n     wsapi_env.SCRIPT_FILENAME = filename\r\n   end\r\n   local s, e = wsapi_env.PATH_INFO:find(wsapi_env.SCRIPT_NAME, 1, true)\r\n   if s == 1 then\r\n     wsapi_env.PATH_INFO = wsapi_env.PATH_INFO:sub(e+1)\r\n     if wsapi_env.PATH_INFO == \"\" then wsapi_env.PATH_INFO = \"/\" end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 164,
    "text": "vars = vars or { \"SCRIPT_FILENAME\", \"PATH_TRANSLATED\" }",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "if not filename or filename == \"\" then\r\n     for _, var in ipairs(vars) do\r\n        filename = wsapi_env[var]\r\n        if filename ~= \"\" then break end\r\n     end\r\n     filename = adjust_non_wrapped(wsapi_env, filename, launcher)\r\n     filename = adjust_iis_path(wsapi_env, filename)\r\n     wsapi_env.PATH_TRANSLATED = filename\r\n     wsapi_env.SCRIPT_FILENAME = filename\r\n   else\r\n     wsapi_env.PATH_TRANSLATED = filename\r\n     wsapi_env.SCRIPT_FILENAME = filename\r\n   end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "for _, var in ipairs(vars) do\r\n        filename = wsapi_env[var]\r\n        if filename ~= \"\" then break end\r\n     end",
    "type": "statement:genericfor"
  }, {
    "id": 167,
    "text": "filename = wsapi_env[var]",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "if filename ~= \"\" then break end",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "filename = adjust_non_wrapped(wsapi_env, filename, launcher)",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "filename = adjust_iis_path(wsapi_env, filename)",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "wsapi_env.PATH_TRANSLATED = filename",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "wsapi_env.SCRIPT_FILENAME = filename",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "local s, e = wsapi_env.PATH_INFO:find(wsapi_env.SCRIPT_NAME, 1, true)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "if s == 1 then\r\n     wsapi_env.PATH_INFO = wsapi_env.PATH_INFO:sub(e+1)\r\n     if wsapi_env.PATH_INFO == \"\" then wsapi_env.PATH_INFO = \"/\" end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "wsapi_env.PATH_INFO = wsapi_env.PATH_INFO:sub(e+1)",
    "type": "statement:assign"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function find_module(wsapi_env, filename, launcher, vars)\r\n   normalize_paths(wsapi_env, filename or \"\", launcher, vars)\r\n   return find_file(wsapi_env.PATH_TRANSLATED)\r\nend",
    "type": "function"
  }, {
    "id": 178,
    "text": "normalize_paths(wsapi_env, filename or \"\", launcher, vars)",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function require_file(filename, modname)\r\n  package.loaded[modname] = true\r\n  local res = loadfile(filename)(modname)\r\n  if res then\r\n    package.loaded[modname] = res\r\n  end\r\n  return package.loaded[modname]\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "package.loaded[modname] = true",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "local res = loadfile(filename)(modname)",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "if res then\r\n    package.loaded[modname] = res\r\n  end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "package.loaded[modname] = res",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 186,
    "text": "function load_wsapi(path, file, modname, ext)\r\n  lfs.chdir(path)\r\n  local app\r\n  if ext == \"lua\" then\r\n    app = require_file(file, modname)\r\n  else\r\n    app = dofile(file)\r\n  end\r\n  return normalize_app(app)\r\nend",
    "type": "function"
  }, {
    "id": 187,
    "text": "lfs.chdir(path)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "local app",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "if ext == \"lua\" then\r\n    app = require_file(file, modname)\r\n  else\r\n    app = dofile(file)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "app = require_file(file, modname)",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "app = dofile(file)",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "local function bootstrap_app(path, file, modname, ext)\r\n     local bootstrap = [=[\r\n           _, package.path = remotedostring(\"return package.path\")\r\n           _, package.cpath = remotedostring(\"return package.cpath\")\r\n           pcall(require, \"luarocks.require\")\r\n           wsapi = {}\r\n           wsapi.app_path = [[]=] .. path .. [=[]]\r\n     ]=]\r\n     if ext == \"lua\" then\r\n        return ringer.new(modname, bootstrap)\r\n     else\r\n        return ringer.new(file, bootstrap, true)\r\n     end\r\n  end",
    "type": "function"
  }, {
    "id": 194,
    "text": "local bootstrap = [=[\r\n           _, package.path = remotedostring(\"return package.path\")\r\n           _, package.cpath = remotedostring(\"return package.cpath\")\r\n           pcall(require, \"luarocks.require\")\r\n           wsapi = {}\r\n           wsapi.app_path = [[]=] .. path .. [=[]]\r\n     ]=]",
    "type": "statement:localassign"
  }, {
    "id": 195,
    "text": "if ext == \"lua\" then\r\n        return ringer.new(modname, bootstrap)\r\n     else\r\n        return ringer.new(file, bootstrap, true)\r\n     end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "local function collect_states(period, ttl)\r\n     if period and (last_collection + period < os.time()) then\r\n        for app, app_state in pairs(app_states) do\r\n           local new_states = {}\r\n           for _, state in ipairs(app_state.states) do\r\n              if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                 table.insert(new_states, state)\r\n              else\r\n                 if not rawget(state.data, \"status\") then\r\n                   state.app(\"close\")\r\n                 else\r\n                   rawset(state.data, \"cleanup\", true)\r\n                 end\r\n              end\r\n           end\r\n           app_state.states = new_states\r\n        end\r\n        last_collection = os.time()\r\n     end\r\n  end",
    "type": "function"
  }, {
    "id": 198,
    "text": "if period and (last_collection + period < os.time()) then\r\n        for app, app_state in pairs(app_states) do\r\n           local new_states = {}\r\n           for _, state in ipairs(app_state.states) do\r\n              if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                 table.insert(new_states, state)\r\n              else\r\n                 if not rawget(state.data, \"status\") then\r\n                   state.app(\"close\")\r\n                 else\r\n                   rawset(state.data, \"cleanup\", true)\r\n                 end\r\n              end\r\n           end\r\n           app_state.states = new_states\r\n        end\r\n        last_collection = os.time()\r\n     end",
    "type": "statement:if"
  }, {
    "id": 199,
    "text": "for app, app_state in pairs(app_states) do\r\n           local new_states = {}\r\n           for _, state in ipairs(app_state.states) do\r\n              if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                 table.insert(new_states, state)\r\n              else\r\n                 if not rawget(state.data, \"status\") then\r\n                   state.app(\"close\")\r\n                 else\r\n                   rawset(state.data, \"cleanup\", true)\r\n                 end\r\n              end\r\n           end\r\n           app_state.states = new_states\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 200,
    "text": "local new_states = {}",
    "type": "statement:localassign"
  }, {
    "id": 201,
    "text": "for _, state in ipairs(app_state.states) do\r\n              if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                 table.insert(new_states, state)\r\n              else\r\n                 if not rawget(state.data, \"status\") then\r\n                   state.app(\"close\")\r\n                 else\r\n                   rawset(state.data, \"cleanup\", true)\r\n                 end\r\n              end\r\n           end",
    "type": "statement:genericfor"
  }, {
    "id": 202,
    "text": "if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                 table.insert(new_states, state)\r\n              else\r\n                 if not rawget(state.data, \"status\") then\r\n                   state.app(\"close\")\r\n                 else\r\n                   rawset(state.data, \"cleanup\", true)\r\n                 end\r\n              end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "table.insert(new_states, state)",
    "type": "statement:functioncall"
  }, {
    "id": 204,
    "text": "if not rawget(state.data, \"status\") then\r\n                   state.app(\"close\")\r\n                 else\r\n                   rawset(state.data, \"cleanup\", true)\r\n                 end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "state.app(\"close\")",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "rawset(state.data, \"cleanup\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "app_state.states = new_states",
    "type": "statement:assign"
  }, {
    "id": 208,
    "text": "last_collection = os.time()",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "local function wsapi_loader_isolated_helper(wsapi_env, params)\r\n     local path, file, modname, ext, mtime =\r\n        find_module(wsapi_env, params.filename, params.launcher, params.vars)\r\n     if params.reload then mtime = nil end\r\n     if not path then\r\n        error({ 404, \"Resource \" .. wsapi_env.SCRIPT_NAME .. \" not found\"})\r\n     end\r\n     local app = load_wsapi_isolated(path, file, modname, ext, mtime)\r\n     wsapi_env.APP_PATH = path\r\n     return app(wsapi_env)\r\n  end",
    "type": "function"
  }, {
    "id": 211,
    "text": "local path, file, modname, ext, mtime =\r\n        find_module(wsapi_env, params.filename, params.launcher, params.vars)",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "if params.reload then mtime = nil end",
    "type": "statement:if"
  }, {
    "id": 213,
    "text": "mtime = nil",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "if not path then\r\n        error({ 404, \"Resource \" .. wsapi_env.SCRIPT_NAME .. \" not found\"})\r\n     end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "error({ 404, \"Resource \" .. wsapi_env.SCRIPT_NAME .. \" not found\"})",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "local app = load_wsapi_isolated(path, file, modname, ext, mtime)",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "wsapi_env.APP_PATH = path",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function load_wsapi_isolated(path, file, modname, ext, mtime)\r\n    local filename = path .. \"/\" .. file\r\n    lfs.chdir(path)\r\n    local app, data\r\n    local app_state = app_states[filename]\r\n    if mtime and app_state.mtime == mtime then\r\n      for i, state in ipairs(app_state.states) do\r\n         if not rawget(state.data, \"status\") then\r\n            return state.app\r\n         end\r\n      end\r\n      app, data = bootstrap_app(path, file, modname, ext)\r\n      table.insert(app_state.states, { app = app, data = data })\r\n    else\r\n      for _, state in ipairs(app_state.states) do\r\n        if not rawget(state.data, \"status\") then\r\n          state.app(\"close\")\r\n        else\r\n          rawset(state.data, \"cleanup\", true)\r\n        end\r\n      end\r\n      app, data = bootstrap_app(path, file, modname, ext)\r\n      if mtime then\r\n        app_states[filename] = { states = { { app = app, data = data } },\r\n                                 mtime = mtime }\r\n      end\r\n    end\r\n    return app\r\n  end",
    "type": "function"
  }, {
    "id": 220,
    "text": "local filename = path .. \"/\" .. file",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "local app, data",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "local app_state = app_states[filename]",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "if mtime and app_state.mtime == mtime then\r\n      for i, state in ipairs(app_state.states) do\r\n         if not rawget(state.data, \"status\") then\r\n            return state.app\r\n         end\r\n      end\r\n      app, data = bootstrap_app(path, file, modname, ext)\r\n      table.insert(app_state.states, { app = app, data = data })\r\n    else\r\n      for _, state in ipairs(app_state.states) do\r\n        if not rawget(state.data, \"status\") then\r\n          state.app(\"close\")\r\n        else\r\n          rawset(state.data, \"cleanup\", true)\r\n        end\r\n      end\r\n      app, data = bootstrap_app(path, file, modname, ext)\r\n      if mtime then\r\n        app_states[filename] = { states = { { app = app, data = data } },\r\n                                 mtime = mtime }\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "for i, state in ipairs(app_state.states) do\r\n         if not rawget(state.data, \"status\") then\r\n            return state.app\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 225,
    "text": "if not rawget(state.data, \"status\") then\r\n            return state.app\r\n         end",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "app, data = bootstrap_app(path, file, modname, ext)",
    "type": "statement:assign"
  }, {
    "id": 227,
    "text": "table.insert(app_state.states, { app = app, data = data })",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "for _, state in ipairs(app_state.states) do\r\n        if not rawget(state.data, \"status\") then\r\n          state.app(\"close\")\r\n        else\r\n          rawset(state.data, \"cleanup\", true)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 229,
    "text": "if not rawget(state.data, \"status\") then\r\n          state.app(\"close\")\r\n        else\r\n          rawset(state.data, \"cleanup\", true)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "if mtime then\r\n        app_states[filename] = { states = { { app = app, data = data } },\r\n                                 mtime = mtime }\r\n      end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "app_states[filename] = { states = { { app = app, data = data } },\r\n                                 mtime = mtime }",
    "type": "statement:assign"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "function make_isolated_loader(params)\r\n     params = params or {}\r\n     return function (wsapi_env)\r\n               collect_states(params.period, params.ttl)\r\n               return wsapi_loader_isolated_helper(wsapi_env, params)\r\n            end\r\n  end",
    "type": "function"
  }, {
    "id": 234,
    "text": "params = params or {}",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "collect_states(params.period, params.ttl)",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 237,
    "text": "function wsapi_loader_isolated(wsapi_env)\r\n     return wsapi_loader_isolated_helper(wsapi_env, {})\r\n  end",
    "type": "function"
  }, {
    "id": 238,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 239,
    "text": "function wsapi_loader_isolated_reload(wsapi_env)\r\n     return wsapi_loader_isolated_helper(wsapi_env, { reload = true })\r\n  end",
    "type": "function"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "local function collect_states(period, ttl)\r\n     if period and (last_collection + period < os.time()) then\r\n        for app, app_state in pairs(app_states) do\r\n           local new_states = {}\r\n           for _, state in ipairs(app_state.states) do\r\n              if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                table.insert(new_states, state)\r\n              else\r\n                if not rawget(state.data, \"status\") then\r\n                  state.app(\"close\")\r\n                else\r\n                  rawset(state.data, \"cleanup\", true)\r\n                end\r\n              end\r\n           end\r\n           app_state.states = new_states\r\n        end\r\n        last_collection = os.time()\r\n     end\r\n  end",
    "type": "function"
  }, {
    "id": 242,
    "text": "if period and (last_collection + period < os.time()) then\r\n        for app, app_state in pairs(app_states) do\r\n           local new_states = {}\r\n           for _, state in ipairs(app_state.states) do\r\n              if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                table.insert(new_states, state)\r\n              else\r\n                if not rawget(state.data, \"status\") then\r\n                  state.app(\"close\")\r\n                else\r\n                  rawset(state.data, \"cleanup\", true)\r\n                end\r\n              end\r\n           end\r\n           app_state.states = new_states\r\n        end\r\n        last_collection = os.time()\r\n     end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "for app, app_state in pairs(app_states) do\r\n           local new_states = {}\r\n           for _, state in ipairs(app_state.states) do\r\n              if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                table.insert(new_states, state)\r\n              else\r\n                if not rawget(state.data, \"status\") then\r\n                  state.app(\"close\")\r\n                else\r\n                  rawset(state.data, \"cleanup\", true)\r\n                end\r\n              end\r\n           end\r\n           app_state.states = new_states\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 244,
    "text": "for _, state in ipairs(app_state.states) do\r\n              if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                table.insert(new_states, state)\r\n              else\r\n                if not rawget(state.data, \"status\") then\r\n                  state.app(\"close\")\r\n                else\r\n                  rawset(state.data, \"cleanup\", true)\r\n                end\r\n              end\r\n           end",
    "type": "statement:genericfor"
  }, {
    "id": 245,
    "text": "if ttl and (rawget(state.data, \"created_at\") + ttl > os.time()) then\r\n                table.insert(new_states, state)\r\n              else\r\n                if not rawget(state.data, \"status\") then\r\n                  state.app(\"close\")\r\n                else\r\n                  rawset(state.data, \"cleanup\", true)\r\n                end\r\n              end",
    "type": "statement:if"
  }, {
    "id": 246,
    "text": "if not rawget(state.data, \"status\") then\r\n                  state.app(\"close\")\r\n                else\r\n                  rawset(state.data, \"cleanup\", true)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "local function bootstrap_app(path, app_modname, extra)\r\n     local bootstrap = [=[\r\n           _, package.path = remotedostring(\"return package.path\")\r\n           _, package.cpath = remotedostring(\"return package.cpath\")\r\n           pcall(require, \"luarocks.require\")\r\n           wsapi = {}\r\n           wsapi.app_path = [[]=] .. path .. [=[]]\r\n     ]=] .. (extra or \"\")\r\n     return ringer.new(app_modname, bootstrap)\r\n  end",
    "type": "function"
  }, {
    "id": 249,
    "text": "local bootstrap = [=[\r\n           _, package.path = remotedostring(\"return package.path\")\r\n           _, package.cpath = remotedostring(\"return package.cpath\")\r\n           pcall(require, \"luarocks.require\")\r\n           wsapi = {}\r\n           wsapi.app_path = [[]=] .. path .. [=[]]\r\n     ]=] .. (extra or \"\")",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 251,
    "text": "function load_isolated_launcher(filename, app_modname, bootstrap, reload)\r\n    local app, data\r\n    local app_state = app_states[filename]\r\n    local path, _ = splitpath(filename)\r\n    local mtime = lfs.attributes(filename, \"modification\")\r\n    if not reload and app_state.mtime == mtime then\r\n       for _, state in ipairs(app_state.states) do\r\n          if not rawget(state.data, \"status\") then\r\n             return state.app\r\n          end\r\n       end\r\n       app, data = bootstrap_app(path, app_modname, bootstrap)\r\n       table.insert(app_state.states, { app = app, data = data })\r\n    else\r\n       for _, state in ipairs(app_state.states) do\r\n         if not rawget(state.data, \"status\") then\r\n           state.app(\"close\")\r\n         else\r\n           rawset(state.data, \"cleanup\", true)\r\n         end\r\n       end\r\n       app, data = bootstrap_app(path, app_modname, bootstrap)\r\n       app_states[filename] = { states = { { app = app, data = data } },\r\n                                mtime = mtime }\r\n    end\r\n    return app\r\n  end",
    "type": "function"
  }, {
    "id": 252,
    "text": "local path, _ = splitpath(filename)",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "local mtime = lfs.attributes(filename, \"modification\")",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "if not reload and app_state.mtime == mtime then\r\n       for _, state in ipairs(app_state.states) do\r\n          if not rawget(state.data, \"status\") then\r\n             return state.app\r\n          end\r\n       end\r\n       app, data = bootstrap_app(path, app_modname, bootstrap)\r\n       table.insert(app_state.states, { app = app, data = data })\r\n    else\r\n       for _, state in ipairs(app_state.states) do\r\n         if not rawget(state.data, \"status\") then\r\n           state.app(\"close\")\r\n         else\r\n           rawset(state.data, \"cleanup\", true)\r\n         end\r\n       end\r\n       app, data = bootstrap_app(path, app_modname, bootstrap)\r\n       app_states[filename] = { states = { { app = app, data = data } },\r\n                                mtime = mtime }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "for _, state in ipairs(app_state.states) do\r\n          if not rawget(state.data, \"status\") then\r\n             return state.app\r\n          end\r\n       end",
    "type": "statement:genericfor"
  }, {
    "id": 256,
    "text": "if not rawget(state.data, \"status\") then\r\n             return state.app\r\n          end",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "app, data = bootstrap_app(path, app_modname, bootstrap)",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "for _, state in ipairs(app_state.states) do\r\n         if not rawget(state.data, \"status\") then\r\n           state.app(\"close\")\r\n         else\r\n           rawset(state.data, \"cleanup\", true)\r\n         end\r\n       end",
    "type": "statement:genericfor"
  }, {
    "id": 259,
    "text": "if not rawget(state.data, \"status\") then\r\n           state.app(\"close\")\r\n         else\r\n           rawset(state.data, \"cleanup\", true)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 260,
    "text": "app_states[filename] = { states = { { app = app, data = data } },\r\n                                mtime = mtime }",
    "type": "statement:assign"
  }, {
    "id": 261,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 262,
    "text": "function make_isolated_launcher(params)\r\n     params = params or {}\r\n     return function (wsapi_env)\r\n               collect_states(params.period, params.ttl)\r\n               normalize_paths(wsapi_env, params.filename, params.launcher, params.vars)\r\n               local app = load_isolated_launcher(wsapi_env.PATH_TRANSLATED, params.modname, params.bootstrap, params.reload)\r\n               return app(wsapi_env)\r\n            end\r\n  end",
    "type": "function"
  }, {
    "id": 263,
    "text": "normalize_paths(wsapi_env, params.filename, params.launcher, params.vars)",
    "type": "statement:functioncall"
  }, {
    "id": 264,
    "text": "local app = load_isolated_launcher(wsapi_env.PATH_TRANSLATED, params.modname, params.bootstrap, params.reload)",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "local function bootstrap_app(path, file, modname, ext)\r\n     return load_wsapi(path, file, modname, ext)\r\n  end",
    "type": "function"
  }, {
    "id": 267,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 268,
    "text": "local function collect_states(period, ttl)\r\n     if period and (last_collection + period < os.time()) then\r\n        for app_name, app_data in pairs(apps) do\r\n           local new_data = { created_at = os.time() }\r\n           if ttl and app_data.created_at + ttl > os.time() then\r\n              new_data.app = app_data.app\r\n           end\r\n           apps[app_name] = new_data\r\n        end\r\n        last_collection = os.time()\r\n     end\r\n  end",
    "type": "function"
  }, {
    "id": 269,
    "text": "if period and (last_collection + period < os.time()) then\r\n        for app_name, app_data in pairs(apps) do\r\n           local new_data = { created_at = os.time() }\r\n           if ttl and app_data.created_at + ttl > os.time() then\r\n              new_data.app = app_data.app\r\n           end\r\n           apps[app_name] = new_data\r\n        end\r\n        last_collection = os.time()\r\n     end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "for app_name, app_data in pairs(apps) do\r\n           local new_data = { created_at = os.time() }\r\n           if ttl and app_data.created_at + ttl > os.time() then\r\n              new_data.app = app_data.app\r\n           end\r\n           apps[app_name] = new_data\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 271,
    "text": "local new_data = { created_at = os.time() }",
    "type": "statement:localassign"
  }, {
    "id": 272,
    "text": "if ttl and app_data.created_at + ttl > os.time() then\r\n              new_data.app = app_data.app\r\n           end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "new_data.app = app_data.app",
    "type": "statement:assign"
  }, {
    "id": 274,
    "text": "apps[app_name] = new_data",
    "type": "statement:assign"
  }, {
    "id": 275,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 276,
    "text": "local function load_wsapi_persistent(path, file, modname, ext, mtime)\r\n    local filename = path .. \"/\" .. file\r\n    lfs.chdir(path)\r\n    local app\r\n    local app_data = apps[filename]\r\n    if mtime and app_data.mtime == mtime then\r\n      return app_data.app\r\n    else\r\n      app = bootstrap_app(path, file, modname, ext)\r\n      if mtime then\r\n        apps[filename].app = app\r\n        apps[filename].mtime = mtime\r\n      end\r\n      return app\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 277,
    "text": "local app_data = apps[filename]",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "if mtime and app_data.mtime == mtime then\r\n      return app_data.app\r\n    else\r\n      app = bootstrap_app(path, file, modname, ext)\r\n      if mtime then\r\n        apps[filename].app = app\r\n        apps[filename].mtime = mtime\r\n      end\r\n      return app\r\n    end",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "app = bootstrap_app(path, file, modname, ext)",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "if mtime then\r\n        apps[filename].app = app\r\n        apps[filename].mtime = mtime\r\n      end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "apps[filename].app = app",
    "type": "statement:assign"
  }, {
    "id": 282,
    "text": "apps[filename].mtime = mtime",
    "type": "statement:assign"
  }, {
    "id": 283,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 284,
    "text": "local function wsapi_loader_persistent_helper(wsapi_env, params)\r\n     local path, file, modname, ext, mtime =\r\n        find_module(wsapi_env, params.filename, params.launcher, params.vars)\r\n     if params.reload then mtime = nil end\r\n     if not path then\r\n        error({ 404, \"Resource \" .. wsapi_env.SCRIPT_NAME .. \" not found\"})\r\n     end\r\n     local app = load_wsapi_persistent(path, file, modname, ext, mtime)\r\n     wsapi_env.APP_PATH = path\r\n     return app(wsapi_env)\r\n  end",
    "type": "function"
  }, {
    "id": 285,
    "text": "local app = load_wsapi_persistent(path, file, modname, ext, mtime)",
    "type": "statement:localassign"
  }, {
    "id": 286,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 287,
    "text": "function make_persistent_loader(params)\r\n     params = params or {}\r\n     return function (wsapi_env)\r\n               collect_states(params.period, params.ttl)\r\n               return wsapi_loader_persistent_helper(wsapi_env, params)\r\n            end\r\n  end",
    "type": "function"
  }, {
    "id": 288,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 289,
    "text": "function make_loader(params)\r\n   params = params or { isolated = true }\r\n   if params.isolated then\r\n      return make_isolated_loader(params)\r\n   else\r\n      return make_persistent_loader(params)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 290,
    "text": "params = params or { isolated = true }",
    "type": "statement:assign"
  }, {
    "id": 291,
    "text": "if params.isolated then\r\n      return make_isolated_loader(params)\r\n   else\r\n      return make_persistent_loader(params)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 292,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 293,
    "text": "function (env, n)\r\n             local v = func[n]\r\n             env[n] = v or \"\"\r\n             return v or \"\"\r\n           end",
    "type": "function"
  }, {
    "id": 294,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 295,
    "text": "function (env, n)\r\n             local v = func(n)\r\n             env[n] = v or \"\"\r\n             return v or \"\"\r\n           end",
    "type": "function"
  }, {
    "id": 296,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 297,
    "text": "function ()\r\n           if sent then return nil\r\n           else\r\n             sent = true\r\n             return msg\r\n           end\r\n         end",
    "type": "function"
  }, {
    "id": 298,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 299,
    "text": "function () return (normalize_app(app))(env) end",
    "type": "function"
  }, {
    "id": 300,
    "text": "function (msg)\r\n                    if type(msg) == \"table\" then\r\n                       env.STATUS = msg[1]\r\n                       return _M[\"status_\" .. msg[1] .. \"_html\"](msg[2])\r\n                    else\r\n                       return debug.traceback(msg, 2)\r\n                    end\r\n                 end",
    "type": "function"
  }, {
    "id": 301,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 302,
    "text": "function (tab, app)\r\n                                          tab[app] = { states = {} }\r\n                                          return tab[app]\r\n                                       end",
    "type": "function"
  }, {
    "id": 303,
    "text": "tab[app] = { states = {} }",
    "type": "statement:assign"
  }, {
    "id": 304,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 305,
    "text": "function (wsapi_env)\r\n               collect_states(params.period, params.ttl)\r\n               return wsapi_loader_isolated_helper(wsapi_env, params)\r\n            end",
    "type": "function"
  }, {
    "id": 306,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 307,
    "text": "function (tab, app)\r\n                                          tab[app] = { states = {} }\r\n                                          return tab[app]\r\n                                       end",
    "type": "function"
  }, {
    "id": 308,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 309,
    "text": "function (wsapi_env)\r\n               collect_states(params.period, params.ttl)\r\n               normalize_paths(wsapi_env, params.filename, params.launcher, params.vars)\r\n               local app = load_isolated_launcher(wsapi_env.PATH_TRANSLATED, params.modname, params.bootstrap, params.reload)\r\n               return app(wsapi_env)\r\n            end",
    "type": "function"
  }, {
    "id": 310,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 311,
    "text": "function (tab, app)\r\n                                   tab[app] = { created_at = os.time() }\r\n                                   return tab[app]\r\n                                 end",
    "type": "function"
  }, {
    "id": 312,
    "text": "tab[app] = { created_at = os.time() }",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 314,
    "text": "function (wsapi_env)\r\n               collect_states(params.period, params.ttl)\r\n               return wsapi_loader_persistent_helper(wsapi_env, params)\r\n            end",
    "type": "function"
  }, {
    "id": 315,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 316,
    "text": "",
    "type": "function container"
  }, {
    "id": 317,
    "text": "function common.send_output(out, status, headers, res_iter, write_method,res_line)\r\n   common.send_content(out, res_iter, out:write())\r\nend",
    "type": "function"
  }, {
    "id": 318,
    "text": "local function wsapihandler (req, res, wsapi_run, app_prefix, docroot, app_path, extra_vars)\r\n  local path_info_pat = \"^\" .. (app_prefix or \"\") .. \"(.*)\"\r\n  set_cgivars(req, docroot, path_info_pat, app_prefix, extra_vars)\r\n\r\n  local get_cgi_var = function (var)\r\n    return req.cgivars[var] or \"\"\r\n  end\r\n\r\n  local wsapi_env = common.wsapi_env {\r\n    input       = req.socket,\r\n    read_method = \"receive\",\r\n    error       = io.stderr,\r\n    env         = get_cgi_var\r\n  }\r\n  wsapi_env.APP_PATH = app_path\r\n\r\n  local function set_status(status)\r\n    if type(status) == \"number\" or status:match(\"^%d+$\") then\r\n      status = status .. \" \" .. common.status_codes[tonumber(status)]\r\n    end\r\n    res.statusline = \"HTTP/1.1 \" .. (status or \"500 Internal Server Error\")\r\n  end\r\n\r\n  local function send_headers(headers)\r\n    for h, v in pairs(headers) do\r\n      if h == \"Status\" or h == \"Content-Type\" then\r\n        res.headers[h] = v\r\n      elseif type(v) == \"string\" then\r\n        res:add_header(h, v)\r\n      elseif type(v) == \"table\" then\r\n        for _, v in ipairs(v) do\r\n          res:add_header(h, tostring(v))\r\n        end\r\n      else\r\n        res:add_header(h, tostring(v))\r\n      end\r\n    end\r\n    res:send_headers()\r\n  end\r\n\r\n  local ok, status, headers, res_iter = common.run_app(wsapi_run, wsapi_env)\r\n  if ok then\r\n    set_status(status or 500)\r\n    send_headers(headers or {})\r\n    common.send_content(res, res_iter, \"send_data\")\r\n  else\r\n    if wsapi_env.STATUS == 404 then\r\n      res.statusline = \"HTTP/1.1 404\"\r\n      send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = (status and #status) or 0 })\r\n      res:send_data(status)\r\n    else\r\n      local content = common.error_html(status)\r\n      res.statusline = \"HTTP/1.1 500\"\r\n      send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = #content})\r\n      res:send_data(content)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 319,
    "text": "function makeGenericHandler(docroot, params, extra_vars)\r\n  params = params or { isolated = true }\r\n  return function (req, res)\r\n    return wsapihandler(req, res, common.make_loader(params), nil, docroot, nil, extra_vars)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 320,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 321,
    "text": "chdir",
    "type": "global function"
  }, {
    "id": 322,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 323,
    "text": "format",
    "type": "global function"
  }, {
    "id": 324,
    "text": "write",
    "type": "global function"
  }, {
    "id": 325,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 326,
    "text": "read",
    "type": "global function"
  }, {
    "id": 327,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 328,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 329,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 330,
    "text": "flush",
    "type": "global function"
  }, {
    "id": 331,
    "text": "func",
    "type": "global function"
  }, {
    "id": 332,
    "text": "app",
    "type": "global function"
  }, {
    "id": 333,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 334,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 335,
    "text": "module",
    "type": "global function"
  }, {
    "id": 336,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 337,
    "text": "write_err",
    "type": "global function"
  }, {
    "id": 338,
    "text": "unchunked",
    "type": "global function"
  }, {
    "id": 339,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 340,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 341,
    "text": "app",
    "type": "global function"
  }, {
    "id": 342,
    "text": "_M[\"status_\" .. msg[1] .. \"_html\"]",
    "type": "global function"
  }, {
    "id": 343,
    "text": "time",
    "type": "global function"
  }, {
    "id": 344,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 345,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 346,
    "text": "error",
    "type": "global function"
  }, {
    "id": 347,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 348,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 349,
    "text": "match",
    "type": "global function"
  }, {
    "id": 350,
    "text": "type",
    "type": "global function"
  }, {
    "id": 351,
    "text": "require",
    "type": "global function"
  }, {
    "id": 352,
    "text": "new",
    "type": "global function"
  }, {
    "id": 353,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 354,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 355,
    "text": "",
    "type": "variable container"
  }, {
    "id": 356,
    "text": "",
    "type": "require container"
  }, {
    "id": 357,
    "text": "",
    "type": "local variable"
  }, {
    "id": 358,
    "text": "",
    "type": "n/a"
  }, {
    "id": 359,
    "text": "",
    "type": "local variable"
  }, {
    "id": 360,
    "text": "",
    "type": "local variable"
  }, {
    "id": 361,
    "text": "",
    "type": "n/a"
  }, {
    "id": 362,
    "text": "",
    "type": "global variable"
  }, {
    "id": 363,
    "text": "",
    "type": "global variable"
  }, {
    "id": 364,
    "text": "",
    "type": "global variable"
  }, {
    "id": 365,
    "text": "",
    "type": "global variable"
  }, {
    "id": 366,
    "text": "",
    "type": "n/a"
  }, {
    "id": 367,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 368,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 369,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 370,
    "text": "",
    "type": "require local variable"
  } ]
}