{
  "_filename": "xavante.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wsapi/src/wsapi/xavante.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "calls",
    "to": 60
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 9,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 19,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 19,
    "label": "has",
    "to": 38
  }, {
    "from": 19,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 43,
    "label": "has",
    "to": 50
  }, {
    "from": 19,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 23
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 54,
    "label": "has",
    "to": 29
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 56,
    "label": "has",
    "to": 37
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 23
  }, {
    "from": 58,
    "label": "has",
    "to": 23
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 23
  }, {
    "from": 60,
    "label": "has",
    "to": 23
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 23
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 23
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 9,
    "label": "calls",
    "to": 76
  }, {
    "from": 9,
    "label": "calls",
    "to": 77
  }, {
    "from": 9,
    "label": "calls",
    "to": 77
  }, {
    "from": 19,
    "label": "calls",
    "to": 77
  }, {
    "from": 19,
    "label": "calls",
    "to": 71
  }, {
    "from": 19,
    "label": "calls",
    "to": 71
  }, {
    "from": 19,
    "label": "calls",
    "to": 72
  }, {
    "from": 19,
    "label": "calls",
    "to": 6
  }, {
    "from": 19,
    "label": "calls",
    "to": 9
  }, {
    "from": 19,
    "label": "calls",
    "to": 54
  }, {
    "from": 19,
    "label": "calls",
    "to": 4
  }, {
    "from": 19,
    "label": "calls",
    "to": 73
  }, {
    "from": 19,
    "label": "calls",
    "to": 5
  }, {
    "from": 19,
    "label": "calls",
    "to": 79
  }, {
    "from": 19,
    "label": "calls",
    "to": 79
  }, {
    "from": 19,
    "label": "calls",
    "to": 79
  }, {
    "from": 19,
    "label": "calls",
    "to": 56
  }, {
    "from": 19,
    "label": "calls",
    "to": 56
  }, {
    "from": 19,
    "label": "calls",
    "to": 56
  }, {
    "from": 9,
    "label": "calls",
    "to": 75
  }, {
    "from": 9,
    "label": "calls",
    "to": 75
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 9,
    "label": "calls",
    "to": 78
  }, {
    "from": 19,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 67,
    "label": "calls",
    "to": 80
  }, {
    "from": 60,
    "label": "calls",
    "to": 8
  }, {
    "from": 58,
    "label": "calls",
    "to": 19
  }, {
    "from": 60,
    "label": "calls",
    "to": 19
  }, {
    "from": 2,
    "label": "contains",
    "to": 67
  }, {
    "from": 67,
    "label": "declares",
    "to": 9
  }, {
    "from": 67,
    "label": "declares",
    "to": 19
  }, {
    "from": 67,
    "label": "declares",
    "to": 52
  }, {
    "from": 67,
    "label": "declares",
    "to": 54
  }, {
    "from": 67,
    "label": "declares",
    "to": 56
  }, {
    "from": 67,
    "label": "declares",
    "to": 58
  }, {
    "from": 67,
    "label": "declares",
    "to": 60
  }, {
    "from": 67,
    "label": "declares",
    "to": 63
  }, {
    "from": 67,
    "label": "declares",
    "to": 65
  }, {
    "from": 2,
    "label": "declares",
    "to": 68
  }, {
    "from": 2,
    "label": "declares",
    "to": 69
  }, {
    "from": 2,
    "label": "declares",
    "to": 70
  }, {
    "from": 81,
    "label": "requires",
    "to": 2
  }, {
    "from": 81,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 82
  }, {
    "from": 2,
    "label": "contains",
    "to": 83
  }, {
    "from": 82,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 82,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 83,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "requires",
    "to": 1
  }, {
    "from": 83,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 89
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "common",
    "type": "module"
  }, {
    "id": 2,
    "text": "xavante",
    "type": "module"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "function send_content(out, res_iter, write_method)\r\n   local write = out[write_method or \"write\"]\r\n   local flush = out.flush\r\n   local ok, res = xpcall(res_iter, debug.traceback)\r\n   while ok and res do\r\n      write(out, res)\r\n      if flush then flush(out) end\r\n      ok, res = xpcall(res_iter, debug.traceback)\r\n   end\r\n   if not ok then\r\n      write(out,\r\n            \"======== WSAPI ERROR DURING RESPONSE PROCESSING: \\n<pre>\" ..\r\n              tostring(res) .. \"\\n</pre>\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function error_html(msg)\r\n   return string.format([[\r\n        <html>\r\n        <head><title>WSAPI Error in Application</title></head>\r\n        <body>\r\n        <p>There was an error in the specified application.\r\n        The full error message follows:</p>\r\n<pre>\r\n%s\r\n</pre>\r\n        </body>\r\n        </html>\r\n      ]], tostring(msg))\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function run_app(app, env)\r\n   return xpcall(function () return (normalize_app(app))(env) end,\r\n                 function (msg)\r\n                    if type(msg) == \"table\" then\r\n                       env.STATUS = msg[1]\r\n                       return _M[\"status_\" .. msg[1] .. \"_html\"](msg[2])\r\n                    else\r\n                       return debug.traceback(msg, 2)\r\n                    end\r\n                 end)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function wsapi_env(t)\r\n   local env = {}\r\n   setmetatable(env, { __index = sv_index(t.env) })\r\n   env.input = input_maker(t.input, t.read_method)\r\n   env.error = t.error\r\n   env.input.length = tonumber(env.CONTENT_LENGTH) or 0\r\n   if env.PATH_INFO == \"\" then env.PATH_INFO = \"/\" end\r\n   return env\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function make_loader(params)\r\n   params = params or { isolated = true }\r\n   if params.isolated then\r\n      return make_isolated_loader(params)\r\n   else\r\n      return make_persistent_loader(params)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function set_cgivars (req, diskpath, path_info_pat, script_name_pat, extra_vars)\r\n  diskpath = diskpath or req.diskpath or \"\"\r\n  req.cgivars = {\r\n    SERVER_SOFTWARE   = req.serversoftware,\r\n    SERVER_NAME       = req.parsed_url.host,\r\n    GATEWAY_INTERFACE = \"CGI/1.1\",\r\n    SERVER_PROTOCOL   = \"HTTP/1.1\",\r\n    SERVER_PORT       = req.parsed_url.port,\r\n    REQUEST_METHOD    = req.cmd_mth,\r\n    DOCUMENT_ROOT     = diskpath,\r\n    PATH_INFO         = string.match(req.parsed_url.path, path_info_pat) or \"\",\r\n    PATH_TRANSLATED   = script_name_pat and (diskpath .. script_name_pat),\r\n    SCRIPT_NAME       = script_name_pat,\r\n    QUERY_STRING      = req.parsed_url.query or \"\",\r\n    REMOTE_ADDR       = string.gsub (req.rawskt:getpeername (), \":%d*$\", \"\"),\r\n    CONTENT_TYPE      = req.headers [\"content-type\"],\r\n    CONTENT_LENGTH    = req.headers [\"content-length\"],\r\n  }\r\n  if req.cgivars.PATH_INFO == \"\" then req.cgivars.PATH_INFO = \"/\" end\r\n  for n,v in pairs(extra_vars or {}) do\r\n    req.cgivars[n] = v\r\n  end\r\n  for n,v in pairs (req.headers) do\r\n    req.cgivars [\"HTTP_\"..string.gsub (string.upper (n), \"-\", \"_\")] = v\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "diskpath = diskpath or req.diskpath or \"\"",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "req.cgivars = {\r\n    SERVER_SOFTWARE   = req.serversoftware,\r\n    SERVER_NAME       = req.parsed_url.host,\r\n    GATEWAY_INTERFACE = \"CGI/1.1\",\r\n    SERVER_PROTOCOL   = \"HTTP/1.1\",\r\n    SERVER_PORT       = req.parsed_url.port,\r\n    REQUEST_METHOD    = req.cmd_mth,\r\n    DOCUMENT_ROOT     = diskpath,\r\n    PATH_INFO         = string.match(req.parsed_url.path, path_info_pat) or \"\",\r\n    PATH_TRANSLATED   = script_name_pat and (diskpath .. script_name_pat),\r\n    SCRIPT_NAME       = script_name_pat,\r\n    QUERY_STRING      = req.parsed_url.query or \"\",\r\n    REMOTE_ADDR       = string.gsub (req.rawskt:getpeername (), \":%d*$\", \"\"),\r\n    CONTENT_TYPE      = req.headers [\"content-type\"],\r\n    CONTENT_LENGTH    = req.headers [\"content-length\"],\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if req.cgivars.PATH_INFO == \"\" then req.cgivars.PATH_INFO = \"/\" end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "req.cgivars.PATH_INFO = \"/\"",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "for n,v in pairs(extra_vars or {}) do\r\n    req.cgivars[n] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "req.cgivars[n] = v",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "for n,v in pairs (req.headers) do\r\n    req.cgivars [\"HTTP_\"..string.gsub (string.upper (n), \"-\", \"_\")] = v\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "req.cgivars [\"HTTP_\"..string.gsub (string.upper (n), \"-\", \"_\")] = v",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function wsapihandler (req, res, wsapi_run, app_prefix, docroot, app_path, extra_vars)\r\n  local path_info_pat = \"^\" .. (app_prefix or \"\") .. \"(.*)\"\r\n  set_cgivars(req, docroot, path_info_pat, app_prefix, extra_vars)\r\n\r\n  local get_cgi_var = function (var)\r\n    return req.cgivars[var] or \"\"\r\n  end\r\n\r\n  local wsapi_env = common.wsapi_env {\r\n    input       = req.socket,\r\n    read_method = \"receive\",\r\n    error       = io.stderr,\r\n    env         = get_cgi_var\r\n  }\r\n  wsapi_env.APP_PATH = app_path\r\n\r\n  local function set_status(status)\r\n    if type(status) == \"number\" or status:match(\"^%d+$\") then\r\n      status = status .. \" \" .. common.status_codes[tonumber(status)]\r\n    end\r\n    res.statusline = \"HTTP/1.1 \" .. (status or \"500 Internal Server Error\")\r\n  end\r\n\r\n  local function send_headers(headers)\r\n    for h, v in pairs(headers) do\r\n      if h == \"Status\" or h == \"Content-Type\" then\r\n        res.headers[h] = v\r\n      elseif type(v) == \"string\" then\r\n        res:add_header(h, v)\r\n      elseif type(v) == \"table\" then\r\n        for _, v in ipairs(v) do\r\n          res:add_header(h, tostring(v))\r\n        end\r\n      else\r\n        res:add_header(h, tostring(v))\r\n      end\r\n    end\r\n    res:send_headers()\r\n  end\r\n\r\n  local ok, status, headers, res_iter = common.run_app(wsapi_run, wsapi_env)\r\n  if ok then\r\n    set_status(status or 500)\r\n    send_headers(headers or {})\r\n    common.send_content(res, res_iter, \"send_data\")\r\n  else\r\n    if wsapi_env.STATUS == 404 then\r\n      res.statusline = \"HTTP/1.1 404\"\r\n      send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = (status and #status) or 0 })\r\n      res:send_data(status)\r\n    else\r\n      local content = common.error_html(status)\r\n      res.statusline = \"HTTP/1.1 500\"\r\n      send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = #content})\r\n      res:send_data(content)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local path_info_pat = \"^\" .. (app_prefix or \"\") .. \"(.*)\"",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "set_cgivars(req, docroot, path_info_pat, app_prefix, extra_vars)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local get_cgi_var = function (var)\r\n    return req.cgivars[var] or \"\"\r\n  end",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 24,
    "text": "local wsapi_env = common.wsapi_env {\r\n    input       = req.socket,\r\n    read_method = \"receive\",\r\n    error       = io.stderr,\r\n    env         = get_cgi_var\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "wsapi_env.APP_PATH = app_path",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local function set_status(status)\r\n    if type(status) == \"number\" or status:match(\"^%d+$\") then\r\n      status = status .. \" \" .. common.status_codes[tonumber(status)]\r\n    end\r\n    res.statusline = \"HTTP/1.1 \" .. (status or \"500 Internal Server Error\")\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 27,
    "text": "if type(status) == \"number\" or status:match(\"^%d+$\") then\r\n      status = status .. \" \" .. common.status_codes[tonumber(status)]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "status = status .. \" \" .. common.status_codes[tonumber(status)]",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "res.statusline = \"HTTP/1.1 \" .. (status or \"500 Internal Server Error\")",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local function send_headers(headers)\r\n    for h, v in pairs(headers) do\r\n      if h == \"Status\" or h == \"Content-Type\" then\r\n        res.headers[h] = v\r\n      elseif type(v) == \"string\" then\r\n        res:add_header(h, v)\r\n      elseif type(v) == \"table\" then\r\n        for _, v in ipairs(v) do\r\n          res:add_header(h, tostring(v))\r\n        end\r\n      else\r\n        res:add_header(h, tostring(v))\r\n      end\r\n    end\r\n    res:send_headers()\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 31,
    "text": "for h, v in pairs(headers) do\r\n      if h == \"Status\" or h == \"Content-Type\" then\r\n        res.headers[h] = v\r\n      elseif type(v) == \"string\" then\r\n        res:add_header(h, v)\r\n      elseif type(v) == \"table\" then\r\n        for _, v in ipairs(v) do\r\n          res:add_header(h, tostring(v))\r\n        end\r\n      else\r\n        res:add_header(h, tostring(v))\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "if h == \"Status\" or h == \"Content-Type\" then\r\n        res.headers[h] = v\r\n      elseif type(v) == \"string\" then\r\n        res:add_header(h, v)\r\n      elseif type(v) == \"table\" then\r\n        for _, v in ipairs(v) do\r\n          res:add_header(h, tostring(v))\r\n        end\r\n      else\r\n        res:add_header(h, tostring(v))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "res.headers[h] = v",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "res:add_header(h, v)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "for _, v in ipairs(v) do\r\n          res:add_header(h, tostring(v))\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "res:add_header(h, tostring(v))",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "res:send_headers()",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local ok, status, headers, res_iter = common.run_app(wsapi_run, wsapi_env)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if ok then\r\n    set_status(status or 500)\r\n    send_headers(headers or {})\r\n    common.send_content(res, res_iter, \"send_data\")\r\n  else\r\n    if wsapi_env.STATUS == 404 then\r\n      res.statusline = \"HTTP/1.1 404\"\r\n      send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = (status and #status) or 0 })\r\n      res:send_data(status)\r\n    else\r\n      local content = common.error_html(status)\r\n      res.statusline = \"HTTP/1.1 500\"\r\n      send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = #content})\r\n      res:send_data(content)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "set_status(status or 500)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "send_headers(headers or {})",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "common.send_content(res, res_iter, \"send_data\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "if wsapi_env.STATUS == 404 then\r\n      res.statusline = \"HTTP/1.1 404\"\r\n      send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = (status and #status) or 0 })\r\n      res:send_data(status)\r\n    else\r\n      local content = common.error_html(status)\r\n      res.statusline = \"HTTP/1.1 500\"\r\n      send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = #content})\r\n      res:send_data(content)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "res.statusline = \"HTTP/1.1 404\"",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = (status and #status) or 0 })",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "res:send_data(status)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "local content = common.error_html(status)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "res.statusline = \"HTTP/1.1 500\"",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "send_headers({ [\"Content-Type\"] = \"text/html\", [\"Content-Length\"] = #content})",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "res:send_data(content)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function (var)\r\n    return req.cgivars[var] or \"\"\r\n  end",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function set_status(status)\r\n    if type(status) == \"number\" or status:match(\"^%d+$\") then\r\n      status = status .. \" \" .. common.status_codes[tonumber(status)]\r\n    end\r\n    res.statusline = \"HTTP/1.1 \" .. (status or \"500 Internal Server Error\")\r\n  end",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local function send_headers(headers)\r\n    for h, v in pairs(headers) do\r\n      if h == \"Status\" or h == \"Content-Type\" then\r\n        res.headers[h] = v\r\n      elseif type(v) == \"string\" then\r\n        res:add_header(h, v)\r\n      elseif type(v) == \"table\" then\r\n        for _, v in ipairs(v) do\r\n          res:add_header(h, tostring(v))\r\n        end\r\n      else\r\n        res:add_header(h, tostring(v))\r\n      end\r\n    end\r\n    res:send_headers()\r\n  end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function makeHandler (app_func, app_prefix, docroot, app_path, extra_vars)\r\n  return function (req, res)\r\n    return wsapihandler(req, res, app_func, app_prefix, docroot, app_path, extra_vars)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function makeGenericHandler(docroot, params, extra_vars)\r\n  params = params or { isolated = true }\r\n  return function (req, res)\r\n    return wsapihandler(req, res, common.make_loader(params), nil, docroot, nil, extra_vars)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "params = params or { isolated = true }",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function (req, res)\r\n    return wsapihandler(req, res, app_func, app_prefix, docroot, app_path, extra_vars)\r\n  end",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function (req, res)\r\n    return wsapihandler(req, res, common.make_loader(params), nil, docroot, nil, extra_vars)\r\n  end",
    "type": "function"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "",
    "type": "function container"
  }, {
    "id": 68,
    "text": "start_message",
    "type": "global function"
  }, {
    "id": 69,
    "text": "start",
    "type": "global function"
  }, {
    "id": 70,
    "text": "HTTP",
    "type": "global function"
  }, {
    "id": 71,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 72,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 73,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 74,
    "text": "module",
    "type": "global function"
  }, {
    "id": 75,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 76,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 77,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 78,
    "text": "match",
    "type": "global function"
  }, {
    "id": 79,
    "text": "type",
    "type": "global function"
  }, {
    "id": 80,
    "text": "require",
    "type": "global function"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "variable container"
  }, {
    "id": 83,
    "text": "",
    "type": "require container"
  }, {
    "id": 84,
    "text": "",
    "type": "global variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "global variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "coxpcall",
    "type": "module"
  } ]
}