{
  "_filename": "makedoc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/wsapi/doc/us/makedoc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 16,
    "label": "calls",
    "to": 37
  }, {
    "from": 16,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 38
  }, {
    "from": 12,
    "label": "calls",
    "to": 38
  }, {
    "from": 31,
    "label": "calls",
    "to": 6
  }, {
    "from": 31,
    "label": "calls",
    "to": 39
  }, {
    "from": 16,
    "label": "calls",
    "to": 36
  }, {
    "from": 16,
    "label": "calls",
    "to": 36
  }, {
    "from": 16,
    "label": "calls",
    "to": 36
  }, {
    "from": 31,
    "label": "calls",
    "to": 16
  }, {
    "from": 31,
    "label": "calls",
    "to": 40
  }, {
    "from": 31,
    "label": "calls",
    "to": 40
  }, {
    "from": 31,
    "label": "calls",
    "to": 12
  }, {
    "from": 16,
    "label": "calls",
    "to": 34
  }, {
    "from": 16,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "declares",
    "to": 6
  }, {
    "from": 31,
    "label": "declares",
    "to": 12
  }, {
    "from": 31,
    "label": "declares",
    "to": 16
  }, {
    "from": 31,
    "label": "declares",
    "to": 27
  }, {
    "from": 31,
    "label": "declares",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 41,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 44,
    "label": "assigns",
    "to": 46
  }, {
    "from": 44,
    "label": "assigns",
    "to": 47
  }, {
    "from": 44,
    "label": "assigns",
    "to": 48
  }, {
    "from": 41,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 50,
    "label": "assigns",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 50,
    "label": "assigns",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 41,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 42,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "requires",
    "to": 33
  }, {
    "from": 42,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 61
  }, {
    "from": 62,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 5
  }, {
    "from": 62,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 63
  }, {
    "from": 62,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 5
  }, {
    "from": 64,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 32
  }, {
    "from": 65,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 4
  }, {
    "from": 65,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 35
  }, {
    "from": 66,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 67
  }, {
    "from": 68,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 2
  }, {
    "from": 69,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 3
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 29
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "makedoc",
    "type": "module"
  }, {
    "id": 2,
    "text": "mock",
    "type": "module"
  }, {
    "id": 3,
    "text": "request",
    "type": "module"
  }, {
    "id": 4,
    "text": "response",
    "type": "module"
  }, {
    "id": 5,
    "text": "xavante",
    "type": "module"
  }, {
    "id": 6,
    "text": "local function readfile(filename)\r\n  local file = io.open(filename)\r\n  local contents = file:read(\"*a\")\r\n  file:close()\r\n  return contents\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local file = io.open(filename)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local contents = file:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function writefile(filename, contents)\r\n  local file = io.open(filename, \"w+\")\r\n  file:write(contents)\r\n  file:close()\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local file = io.open(filename, \"w+\")",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "file:write(contents)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function gen_page(project, pages, p)\r\n  project.pages = function ()\r\n    for _, page in ipairs(pages) do\r\n      local namelink\r\n      if page.file == p.file then\r\n        namelink = cosmo.fill([[<strong>$name</strong>]], { name = page.name})\r\n      else\r\n\tnamelink = cosmo.fill([[<a href=\"$file{}.html\">$name</a>]], { name = page.name, file = page.file})\r\n      end\r\n      cosmo.yield{ namelink = namelink, sections = function ()\r\n                                                     for _, s in ipairs(page.sections) do\r\n                                                       cosmo.yield{ name = s.name, anchor = \r\n                                                         page.file .. \".html#\" .. s.anchor }\r\n                                                     end\r\n                                                   end }\r\n    end  \r\n  end\r\n  return (cosmo.fill(template, project))\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "project.pages = function ()\r\n    for _, page in ipairs(pages) do\r\n      local namelink\r\n      if page.file == p.file then\r\n        namelink = cosmo.fill([[<strong>$name</strong>]], { name = page.name})\r\n      else\r\n\tnamelink = cosmo.fill([[<a href=\"$file{}.html\">$name</a>]], { name = page.name, file = page.file})\r\n      end\r\n      cosmo.yield{ namelink = namelink, sections = function ()\r\n                                                     for _, s in ipairs(page.sections) do\r\n                                                       cosmo.yield{ name = s.name, anchor = \r\n                                                         page.file .. \".html#\" .. s.anchor }\r\n                                                     end\r\n                                                   end }\r\n    end  \r\n  end",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "for _, page in ipairs(pages) do\r\n      local namelink\r\n      if page.file == p.file then\r\n        namelink = cosmo.fill([[<strong>$name</strong>]], { name = page.name})\r\n      else\r\n\tnamelink = cosmo.fill([[<a href=\"$file{}.html\">$name</a>]], { name = page.name, file = page.file})\r\n      end\r\n      cosmo.yield{ namelink = namelink, sections = function ()\r\n                                                     for _, s in ipairs(page.sections) do\r\n                                                       cosmo.yield{ name = s.name, anchor = \r\n                                                         page.file .. \".html#\" .. s.anchor }\r\n                                                     end\r\n                                                   end }\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "local namelink",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if page.file == p.file then\r\n        namelink = cosmo.fill([[<strong>$name</strong>]], { name = page.name})\r\n      else\r\n\tnamelink = cosmo.fill([[<a href=\"$file{}.html\">$name</a>]], { name = page.name, file = page.file})\r\n      end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "namelink = cosmo.fill([[<strong>$name</strong>]], { name = page.name})",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "namelink = cosmo.fill([[<a href=\"$file{}.html\">$name</a>]], { name = page.name, file = page.file})",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "cosmo.yield{ namelink = namelink, sections = function ()\r\n                                                     for _, s in ipairs(page.sections) do\r\n                                                       cosmo.yield{ name = s.name, anchor = \r\n                                                         page.file .. \".html#\" .. s.anchor }\r\n                                                     end\r\n                                                   end }",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "for _, s in ipairs(page.sections) do\r\n                                                       cosmo.yield{ name = s.name, anchor = \r\n                                                         page.file .. \".html#\" .. s.anchor }\r\n                                                     end",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "cosmo.yield{ name = s.name, anchor = \r\n                                                         page.file .. \".html#\" .. s.anchor }",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function ()\r\n    for _, page in ipairs(pages) do\r\n      local namelink\r\n      if page.file == p.file then\r\n        namelink = cosmo.fill([[<strong>$name</strong>]], { name = page.name})\r\n      else\r\n\tnamelink = cosmo.fill([[<a href=\"$file{}.html\">$name</a>]], { name = page.name, file = page.file})\r\n      end\r\n      cosmo.yield{ namelink = namelink, sections = function ()\r\n                                                     for _, s in ipairs(page.sections) do\r\n                                                       cosmo.yield{ name = s.name, anchor = \r\n                                                         page.file .. \".html#\" .. s.anchor }\r\n                                                     end\r\n                                                   end }\r\n    end  \r\n  end",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function ()\r\n                                                     for _, s in ipairs(page.sections) do\r\n                                                       cosmo.yield{ name = s.name, anchor = \r\n                                                         page.file .. \".html#\" .. s.anchor }\r\n                                                     end\r\n                                                   end",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "",
    "type": "function container"
  }, {
    "id": 32,
    "text": "rings",
    "type": "module"
  }, {
    "id": 33,
    "text": "cosmo",
    "type": "module"
  }, {
    "id": 34,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 35,
    "text": "cgilua",
    "type": "module"
  }, {
    "id": 36,
    "text": "fill",
    "type": "global function"
  }, {
    "id": 37,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 38,
    "text": "open",
    "type": "global function"
  }, {
    "id": 39,
    "text": "markdown",
    "type": "global function"
  }, {
    "id": 40,
    "text": "require",
    "type": "global function"
  }, {
    "id": 41,
    "text": "",
    "type": "variable container"
  }, {
    "id": 42,
    "text": "",
    "type": "require container"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 45,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 46,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 47,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 48,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 51,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 52,
    "text": "",
    "type": "string"
  }, {
    "id": 53,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 54,
    "text": "",
    "type": "string"
  }, {
    "id": 55,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 56,
    "text": "",
    "type": "string"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "string"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "global variable"
  }, {
    "id": 61,
    "text": "markdown",
    "type": "module"
  }, {
    "id": 62,
    "text": "",
    "type": "require container"
  }, {
    "id": 63,
    "text": "filehandler",
    "type": "module"
  }, {
    "id": 64,
    "text": "",
    "type": "require container"
  }, {
    "id": 65,
    "text": "",
    "type": "require container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "coxpcall",
    "type": "module"
  }, {
    "id": 68,
    "text": "",
    "type": "require container"
  }, {
    "id": 69,
    "text": "",
    "type": "require container"
  } ]
}