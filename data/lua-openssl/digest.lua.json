{
  "_filename": "digest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-openssl/test/digest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 20
  }, {
    "from": 10,
    "label": "has",
    "to": 21
  }, {
    "from": 10,
    "label": "has",
    "to": 22
  }, {
    "from": 10,
    "label": "has",
    "to": 23
  }, {
    "from": 10,
    "label": "calls",
    "to": 27
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 24,
    "label": "calls",
    "to": 10
  }, {
    "from": 2,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 24,
    "label": "calls",
    "to": 32
  }, {
    "from": 10,
    "label": "calls",
    "to": 26
  }, {
    "from": 10,
    "label": "calls",
    "to": 26
  }, {
    "from": 10,
    "label": "calls",
    "to": 26
  }, {
    "from": 10,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 24
  }, {
    "from": 24,
    "label": "declares",
    "to": 2
  }, {
    "from": 24,
    "label": "declares",
    "to": 10
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 35
  }, {
    "from": 35,
    "label": "initializes",
    "to": 36
  }, {
    "from": 36,
    "label": "requires",
    "to": 25
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "digest",
    "type": "module"
  }, {
    "id": 2,
    "text": "function dump(t,i)\r\n        for k,v in pairs(t) do\r\n                if(type(v)=='table') then\r\n                        print( string.rep('\\t',i),k..'={')\r\n                                dump(v,i+1)\r\n                        print( string.rep('\\t',i),k..'=}')\r\n                else\r\n                        print( string.rep('\\t',i),k..'='..tostring(v))\r\n                end\r\n        end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "for k,v in pairs(t) do\r\n                if(type(v)=='table') then\r\n                        print( string.rep('\\t',i),k..'={')\r\n                                dump(v,i+1)\r\n                        print( string.rep('\\t',i),k..'=}')\r\n                else\r\n                        print( string.rep('\\t',i),k..'='..tostring(v))\r\n                end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 4,
    "text": "if(type(v)=='table') then\r\n                        print( string.rep('\\t',i),k..'={')\r\n                                dump(v,i+1)\r\n                        print( string.rep('\\t',i),k..'=}')\r\n                else\r\n                        print( string.rep('\\t',i),k..'='..tostring(v))\r\n                end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "print( string.rep('\\t',i),k..'={')",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "dump(v,i+1)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "print( string.rep('\\t',i),k..'=}')",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "print( string.rep('\\t',i),k..'='..tostring(v))",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function test_digest()\r\n        t = openssl.get_digest()\r\n        dump(t,0)\r\n\r\n        t = openssl.get_digest(false)\r\n        dump(t,0)\r\n\r\n        t = openssl.get_digest(true)\r\n        dump(t,0)\r\n\r\n        md = openssl.get_digest('md5')\r\n        dump(md:info(),0)\r\n        aa = md:digest('abcd')\r\n\r\n        mdc=md:init()\r\n        dump(mdc:info(),0)\r\n        mdc:update('abcd')\r\n        bb = mdc:final()\r\n        assert(aa==bb)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "t = openssl.get_digest()",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "dump(t,0)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "t = openssl.get_digest(false)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "t = openssl.get_digest(true)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "md = openssl.get_digest('md5')",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "dump(md:info(),0)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "aa = md:digest('abcd')",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "mdc=md:init()",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "dump(mdc:info(),0)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "mdc:update('abcd')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "bb = mdc:final()",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "assert(aa==bb)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "",
    "type": "function container"
  }, {
    "id": 25,
    "text": "openssl",
    "type": "module"
  }, {
    "id": 26,
    "text": "get_digest",
    "type": "global function"
  }, {
    "id": 27,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 28,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 29,
    "text": "print",
    "type": "global function"
  }, {
    "id": 30,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 31,
    "text": "type",
    "type": "global function"
  }, {
    "id": 32,
    "text": "require",
    "type": "global function"
  }, {
    "id": 33,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 34,
    "text": "",
    "type": "variable container"
  }, {
    "id": 35,
    "text": "",
    "type": "require container"
  }, {
    "id": 36,
    "text": "",
    "type": "require local variable"
  } ]
}