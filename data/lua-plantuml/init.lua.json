{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-plantuml/src/luaplantuml/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 3,
    "label": "has",
    "to": 25
  }, {
    "from": 3,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 25
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 3,
    "label": "calls",
    "to": 41
  }, {
    "from": 27,
    "label": "calls",
    "to": 40
  }, {
    "from": 27,
    "label": "calls",
    "to": 2
  }, {
    "from": 36,
    "label": "calls",
    "to": 43
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 27,
    "label": "calls",
    "to": 45
  }, {
    "from": 36,
    "label": "calls",
    "to": 42
  }, {
    "from": 36,
    "label": "calls",
    "to": 42
  }, {
    "from": 3,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 3
  }, {
    "from": 27,
    "label": "calls",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 36,
    "label": "declares",
    "to": 3
  }, {
    "from": 36,
    "label": "declares",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 46,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 46,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 46,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 46,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 47,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "requires",
    "to": 57
  }, {
    "from": 47,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "requires",
    "to": 38
  }, {
    "from": 1,
    "label": "provides",
    "to": 59
  }, {
    "from": 37,
    "label": "represents",
    "to": 60
  }, {
    "from": 59,
    "label": "provides",
    "to": 60
  }, {
    "from": 3,
    "label": "represents",
    "to": 61
  }, {
    "from": 59,
    "label": "provides",
    "to": 61
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "init",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function generate_prepare(comment, paths_to_diagram, settings)\r\n\r\n\t--_ set up where generated UML diagrams will be stored\r\n\tif (settings.dir_path ~= nil) then\r\n\r\n\t\tlfs.mkdir(settings.dir_path .. \"uml_files/\")\r\n\t\tfinal_path_temp = settings.dir_path .. \"uml_files/\"\r\n\r\n\t\tlocal temp = lfs.currentdir()\r\n\t\tlfs.chdir( final_path_temp )\r\n\r\n\t\t--_ create directories in output dir\r\n\t\tfor text in settings.extended_path:gmatch( \"[^/]+\" ) do\r\n\t\t\tlfs.mkdir( text ) \r\n\t\t\tlfs.chdir( text )\r\n\t\tend\r\n\r\n\t\tfinal_path_temp = final_path_temp .. settings.extended_path\r\n\t\tlfs.chdir(temp)\r\n\tend\r\n\r\n\tprocess(comment, paths_to_diagram, settings)\r\n-- for _, v in ipairs(paths_to_diagram) do\r\n-- \t\t\tprint(' CESTA: ' .. v.path .. '  STRING: ' .. v.uml_string)\r\n-- \t\tend\r\nreturn paths_to_diagram\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function parse_util(ast, check)\r\n\t\r\n\t--_ set keys in table with name of the function, path to diagram and uml string syntax\r\n\tfor _,v in ipairs(ast.data) do\r\n\t\tparse_util(v, check) \t--_ recursive call\r\n\r\n\t\tif (v.text == \"require\" or v.text == \"module\") and comment_ends == 1 then\r\n\t\t\t\r\n\t\t\t--_ create keys for global PlantUML comment\r\n\t\t\tpaths_to_diagram[#paths_to_diagram+1] = {}\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].name = \"global\"\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].path = nil\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].uml_string = nil\r\n\r\n\t\t\tcomment=\"\" \t\t--_ clear comment for next parsing\r\n\t\t\tcomment_ends = 0\r\n\r\n\t\telseif v.name ~= nil and comment_ends == 1 then\r\n\t\t\t\r\n\t\t\t--_ create keys for function PlantUML comment\r\n\t\t\tpaths_to_diagram[#paths_to_diagram+1] = {}\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].name = v.name\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].path = nil\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].uml_string = nil\r\n\r\n\t\t\tcomment = \"\"\r\n\t\t\tcomment_ends = 0\r\n\t\tend\r\n\t\t\r\n\t\tif(v.tag == \"COMMENT\") then \t\t\t\t\t--_ search for PlantUML syntax in comments\r\n\r\n\t\t\tif(string.match(v.text, \"@startuml\")) then \t--_ where PlantUML tag starts \r\n\t\t\t\tcheck = 1 \t\t\t\t\t\t\t\t\t--_ start parsing lines\r\n\t\t\tend\r\n\r\n\t\t\tif(check == 1) then\r\n\t\t\t\tcomment = comment .. string.gsub(v.text, '^%-%-+(%s*)', '%1') .. '\\n' \t--_ parse one line of PlantUML comment ('\\n' needed for plantuml.jar)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif(string.match(v.text, \"@enduml\")) then\t\t--_ if we found last line of PlantUML syntax\r\n\t\t\t\tcheck = 0 \t\t\t\t\t\t\t\t\t--_ stop parsing lines\r\n\t\t\t\tcomment_ends = 1 \t\t\t\t\t\t--_ we readed whole PlantUML syntax from comment, now we store keys in table \"paths_to_diagram\"\r\n\t\t\t\tcomment = string.gsub(comment, '%[(=*)%[(.-)%]%1%]%-*', '%2') --_ if block comment remove \"blocks\"\r\n\t\t\t\t\r\n\t\t\t\tfinal_syntax =  final_syntax .. comment \t--_ and join to final syntax\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\treturn final_syntax\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "for _,v in ipairs(ast.data) do\r\n\t\tparse_util(v, check) \t--_ recursive call\r\n\r\n\t\tif (v.text == \"require\" or v.text == \"module\") and comment_ends == 1 then\r\n\t\t\t\r\n\t\t\t--_ create keys for global PlantUML comment\r\n\t\t\tpaths_to_diagram[#paths_to_diagram+1] = {}\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].name = \"global\"\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].path = nil\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].uml_string = nil\r\n\r\n\t\t\tcomment=\"\" \t\t--_ clear comment for next parsing\r\n\t\t\tcomment_ends = 0\r\n\r\n\t\telseif v.name ~= nil and comment_ends == 1 then\r\n\t\t\t\r\n\t\t\t--_ create keys for function PlantUML comment\r\n\t\t\tpaths_to_diagram[#paths_to_diagram+1] = {}\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].name = v.name\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].path = nil\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].uml_string = nil\r\n\r\n\t\t\tcomment = \"\"\r\n\t\t\tcomment_ends = 0\r\n\t\tend\r\n\t\t\r\n\t\tif(v.tag == \"COMMENT\") then \t\t\t\t\t--_ search for PlantUML syntax in comments\r\n\r\n\t\t\tif(string.match(v.text, \"@startuml\")) then \t--_ where PlantUML tag starts \r\n\t\t\t\tcheck = 1 \t\t\t\t\t\t\t\t\t--_ start parsing lines\r\n\t\t\tend\r\n\r\n\t\t\tif(check == 1) then\r\n\t\t\t\tcomment = comment .. string.gsub(v.text, '^%-%-+(%s*)', '%1') .. '\\n' \t--_ parse one line of PlantUML comment ('\\n' needed for plantuml.jar)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif(string.match(v.text, \"@enduml\")) then\t\t--_ if we found last line of PlantUML syntax\r\n\t\t\t\tcheck = 0 \t\t\t\t\t\t\t\t\t--_ stop parsing lines\r\n\t\t\t\tcomment_ends = 1 \t\t\t\t\t\t--_ we readed whole PlantUML syntax from comment, now we store keys in table \"paths_to_diagram\"\r\n\t\t\t\tcomment = string.gsub(comment, '%[(=*)%[(.-)%]%1%]%-*', '%2') --_ if block comment remove \"blocks\"\r\n\t\t\t\t\r\n\t\t\t\tfinal_syntax =  final_syntax .. comment \t--_ and join to final syntax\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "parse_util(v, check)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "if (v.text == \"require\" or v.text == \"module\") and comment_ends == 1 then\r\n\t\t\t\r\n\t\t\t--_ create keys for global PlantUML comment\r\n\t\t\tpaths_to_diagram[#paths_to_diagram+1] = {}\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].name = \"global\"\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].path = nil\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].uml_string = nil\r\n\r\n\t\t\tcomment=\"\" \t\t--_ clear comment for next parsing\r\n\t\t\tcomment_ends = 0\r\n\r\n\t\telseif v.name ~= nil and comment_ends == 1 then\r\n\t\t\t\r\n\t\t\t--_ create keys for function PlantUML comment\r\n\t\t\tpaths_to_diagram[#paths_to_diagram+1] = {}\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].name = v.name\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].path = nil\r\n\t\t\tpaths_to_diagram[#paths_to_diagram].uml_string = nil\r\n\r\n\t\t\tcomment = \"\"\r\n\t\t\tcomment_ends = 0\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "paths_to_diagram[#paths_to_diagram+1] = {}",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "paths_to_diagram[#paths_to_diagram].name = \"global\"",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "paths_to_diagram[#paths_to_diagram].path = nil",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "paths_to_diagram[#paths_to_diagram].uml_string = nil",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "comment=\"\"",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "comment_ends = 0",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "paths_to_diagram[#paths_to_diagram].name = v.name",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "comment = \"\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if(v.tag == \"COMMENT\") then \t\t\t\t\t--_ search for PlantUML syntax in comments\r\n\r\n\t\t\tif(string.match(v.text, \"@startuml\")) then \t--_ where PlantUML tag starts \r\n\t\t\t\tcheck = 1 \t\t\t\t\t\t\t\t\t--_ start parsing lines\r\n\t\t\tend\r\n\r\n\t\t\tif(check == 1) then\r\n\t\t\t\tcomment = comment .. string.gsub(v.text, '^%-%-+(%s*)', '%1') .. '\\n' \t--_ parse one line of PlantUML comment ('\\n' needed for plantuml.jar)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif(string.match(v.text, \"@enduml\")) then\t\t--_ if we found last line of PlantUML syntax\r\n\t\t\t\tcheck = 0 \t\t\t\t\t\t\t\t\t--_ stop parsing lines\r\n\t\t\t\tcomment_ends = 1 \t\t\t\t\t\t--_ we readed whole PlantUML syntax from comment, now we store keys in table \"paths_to_diagram\"\r\n\t\t\t\tcomment = string.gsub(comment, '%[(=*)%[(.-)%]%1%]%-*', '%2') --_ if block comment remove \"blocks\"\r\n\t\t\t\t\r\n\t\t\t\tfinal_syntax =  final_syntax .. comment \t--_ and join to final syntax\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if(string.match(v.text, \"@startuml\")) then \t--_ where PlantUML tag starts \r\n\t\t\t\tcheck = 1 \t\t\t\t\t\t\t\t\t--_ start parsing lines\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "check = 1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if(check == 1) then\r\n\t\t\t\tcomment = comment .. string.gsub(v.text, '^%-%-+(%s*)', '%1') .. '\\n' \t--_ parse one line of PlantUML comment ('\\n' needed for plantuml.jar)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "comment = comment .. string.gsub(v.text, '^%-%-+(%s*)', '%1') .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if(string.match(v.text, \"@enduml\")) then\t\t--_ if we found last line of PlantUML syntax\r\n\t\t\t\tcheck = 0 \t\t\t\t\t\t\t\t\t--_ stop parsing lines\r\n\t\t\t\tcomment_ends = 1 \t\t\t\t\t\t--_ we readed whole PlantUML syntax from comment, now we store keys in table \"paths_to_diagram\"\r\n\t\t\t\tcomment = string.gsub(comment, '%[(=*)%[(.-)%]%1%]%-*', '%2') --_ if block comment remove \"blocks\"\r\n\t\t\t\t\r\n\t\t\t\tfinal_syntax =  final_syntax .. comment \t--_ and join to final syntax\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "check = 0",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "comment_ends = 1",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "comment = string.gsub(comment, '%[(=*)%[(.-)%]%1%]%-*', '%2')",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "final_syntax =  final_syntax .. comment",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function process_text(file, settings)\r\n\tlocal parsed = parse_util(metrics.processText(file), 0)\t\t--_ parse PlantUML syntax from files\r\n\tfinal_syntax = \"\"  \t\t\t\t--_ clear if reading more files else we will be generating same diagrams over and over again\r\n\r\n\tif parsed ~= nil and settings.wsd ~= nil then\r\n\t\tlocal wsd_file=io.open(string.gsub(settings.current_file, '.%w*$', '.wsd'), \"w+\") \t--_ create file with parsed PlantUML syntax, \"w+\" clear if exists\r\n\r\n\t\twsd_file:write(parsed)\t--_ write that syntax to file\r\n\t\twsd_file:close()\r\n\tend\r\n\r\n\t--_ go to do main functions to generate images and full main table 'paths_to_diagram'\r\n\tluaplantuml.generate_prepare(parsed, paths_to_diagram, settings)\r\n\t\r\n\treturn paths_to_diagram\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local parsed = parse_util(metrics.processText(file), 0)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "final_syntax = \"\"",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if parsed ~= nil and settings.wsd ~= nil then\r\n\t\tlocal wsd_file=io.open(string.gsub(settings.current_file, '.%w*$', '.wsd'), \"w+\") \t--_ create file with parsed PlantUML syntax, \"w+\" clear if exists\r\n\r\n\t\twsd_file:write(parsed)\t--_ write that syntax to file\r\n\t\twsd_file:close()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "local wsd_file=io.open(string.gsub(settings.current_file, '.%w*$', '.wsd'), \"w+\")",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "wsd_file:write(parsed)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "wsd_file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "luaplantuml.generate_prepare(parsed, paths_to_diagram, settings)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "",
    "type": "function container"
  }, {
    "id": 37,
    "text": "process_text",
    "type": "global function"
  }, {
    "id": 38,
    "text": "metrics",
    "type": "module"
  }, {
    "id": 39,
    "text": "processText",
    "type": "global function"
  }, {
    "id": 40,
    "text": "open",
    "type": "global function"
  }, {
    "id": 41,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 42,
    "text": "require",
    "type": "global function"
  }, {
    "id": 43,
    "text": "module",
    "type": "global function"
  }, {
    "id": 44,
    "text": "match",
    "type": "global function"
  }, {
    "id": 45,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 46,
    "text": "",
    "type": "variable container"
  }, {
    "id": 47,
    "text": "",
    "type": "require container"
  }, {
    "id": 48,
    "text": "",
    "type": "local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "string"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "keyword"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "string"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 56,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 57,
    "text": "generate_uml)",
    "type": "module"
  }, {
    "id": 58,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "interface container"
  }, {
    "id": 60,
    "text": "",
    "type": "interface"
  }, {
    "id": 61,
    "text": "",
    "type": "interface"
  } ]
}