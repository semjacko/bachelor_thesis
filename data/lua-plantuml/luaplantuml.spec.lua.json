{
  "_filename": "luaplantuml.spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": true,
  "_path": "modules/lua-plantuml/tests/luaplantuml.spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 16,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 13
  }, {
    "from": 15,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 33,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 33,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 34
  }, {
    "from": 56,
    "label": "has",
    "to": 35
  }, {
    "from": 56,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 56,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 56,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 59
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "calls",
    "to": 3
  }, {
    "from": 64,
    "label": "calls",
    "to": 74
  }, {
    "from": 64,
    "label": "calls",
    "to": 74
  }, {
    "from": 64,
    "label": "calls",
    "to": 74
  }, {
    "from": 64,
    "label": "calls",
    "to": 73
  }, {
    "from": 64,
    "label": "calls",
    "to": 75
  }, {
    "from": 64,
    "label": "calls",
    "to": 75
  }, {
    "from": 64,
    "label": "calls",
    "to": 76
  }, {
    "from": 64,
    "label": "calls",
    "to": 79
  }, {
    "from": 64,
    "label": "calls",
    "to": 79
  }, {
    "from": 64,
    "label": "calls",
    "to": 79
  }, {
    "from": 64,
    "label": "calls",
    "to": 79
  }, {
    "from": 64,
    "label": "calls",
    "to": 79
  }, {
    "from": 64,
    "label": "calls",
    "to": 77
  }, {
    "from": 64,
    "label": "calls",
    "to": 77
  }, {
    "from": 64,
    "label": "calls",
    "to": 77
  }, {
    "from": 64,
    "label": "calls",
    "to": 77
  }, {
    "from": 64,
    "label": "calls",
    "to": 77
  }, {
    "from": 64,
    "label": "calls",
    "to": 4
  }, {
    "from": 64,
    "label": "calls",
    "to": 68
  }, {
    "from": 64,
    "label": "calls",
    "to": 68
  }, {
    "from": 64,
    "label": "calls",
    "to": 78
  }, {
    "from": 64,
    "label": "calls",
    "to": 69
  }, {
    "from": 64,
    "label": "calls",
    "to": 69
  }, {
    "from": 64,
    "label": "calls",
    "to": 69
  }, {
    "from": 64,
    "label": "calls",
    "to": 69
  }, {
    "from": 64,
    "label": "calls",
    "to": 70
  }, {
    "from": 64,
    "label": "calls",
    "to": 72
  }, {
    "from": 64,
    "label": "calls",
    "to": 71
  }, {
    "from": 64,
    "label": "calls",
    "to": 71
  }, {
    "from": 64,
    "label": "calls",
    "to": 67
  }, {
    "from": 2,
    "label": "contains",
    "to": 64
  }, {
    "from": 64,
    "label": "declares",
    "to": 5
  }, {
    "from": 64,
    "label": "declares",
    "to": 9
  }, {
    "from": 64,
    "label": "declares",
    "to": 12
  }, {
    "from": 64,
    "label": "declares",
    "to": 15
  }, {
    "from": 64,
    "label": "declares",
    "to": 25
  }, {
    "from": 64,
    "label": "declares",
    "to": 27
  }, {
    "from": 64,
    "label": "declares",
    "to": 30
  }, {
    "from": 64,
    "label": "declares",
    "to": 33
  }, {
    "from": 64,
    "label": "declares",
    "to": 55
  }, {
    "from": 64,
    "label": "declares",
    "to": 58
  }, {
    "from": 64,
    "label": "declares",
    "to": 61
  }, {
    "from": 2,
    "label": "declares",
    "to": 66
  }, {
    "from": 80,
    "label": "requires",
    "to": 2
  }, {
    "from": 2,
    "label": "contains",
    "to": 81
  }, {
    "from": 2,
    "label": "contains",
    "to": 82
  }, {
    "from": 81,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 81,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 81,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 81,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 81,
    "label": "initializes",
    "to": 91
  }, {
    "from": 81,
    "label": "initializes",
    "to": 92
  }, {
    "from": 81,
    "label": "initializes",
    "to": 93
  }, {
    "from": 81,
    "label": "initializes",
    "to": 94
  }, {
    "from": 82,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "requires",
    "to": 1
  }, {
    "from": 82,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "requires",
    "to": 65
  }, {
    "from": 10,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 28,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 58
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "generate_uml",
    "type": "module"
  }, {
    "id": 2,
    "text": "luaplantuml",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function get_uml_string(comment, start_position, end_position)\r\n\tlocal uml_string = string.sub(comment, start_position, end_position) -- UML definition text\r\n\treturn uml_string\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function generate_prepare(comment, paths_to_diagram, settings)\r\n\r\n\t--_ set up where generated UML diagrams will be stored\r\n\tif (settings.dir_path ~= nil) then\r\n\r\n\t\tlfs.mkdir(settings.dir_path .. \"uml_files/\")\r\n\t\tfinal_path_temp = settings.dir_path .. \"uml_files/\"\r\n\r\n\t\tlocal temp = lfs.currentdir()\r\n\t\tlfs.chdir( final_path_temp )\r\n\r\n\t\t--_ create directories in output dir\r\n\t\tfor text in settings.extended_path:gmatch( \"[^/]+\" ) do\r\n\t\t\tlfs.mkdir( text ) \r\n\t\t\tlfs.chdir( text )\r\n\t\tend\r\n\r\n\t\tfinal_path_temp = final_path_temp .. settings.extended_path\r\n\t\tlfs.chdir(temp)\r\n\tend\r\n\r\n\tprocess(comment, paths_to_diagram, settings)\r\n-- for _, v in ipairs(paths_to_diagram) do\r\n-- \t\t\tprint(' CESTA: ' .. v.path .. '  STRING: ' .. v.uml_string)\r\n-- \t\tend\r\nreturn paths_to_diagram\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function ()\r\n\t\tassert.is_not_nil(plantuml)\r\n\t\tassert.is_not_nil(lfs)\r\n\tend",
    "type": "function"
  }, {
    "id": 6,
    "text": "assert.is_not_nil(plantuml)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assert.is_not_nil(lfs)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function ()\r\n\tit(\"Check modules\", function ()\r\n\t\tassert.is_not_nil(plantuml)\r\n\t\tassert.is_not_nil(lfs)\r\n\tend)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "it(\"Check modules\", function ()\r\n\t\tassert.is_not_nil(plantuml)\r\n\t\tassert.is_not_nil(lfs)\r\n\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n\t\tassert.same(paths_to_diagram, diagram_results)  \t\r\n\tend",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert.same(paths_to_diagram, diagram_results)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function()\r\n\tfor i=1, 7 do\r\n\t\tpaths_to_diagram[#paths_to_diagram+1] = {}\r\n\t\tpaths_to_diagram[#paths_to_diagram].path = nil\r\n\t\tpaths_to_diagram[#paths_to_diagram].uml_string = nil\r\n\t\tdiagram_results[#diagram_results+1] = {}\r\n\t\tdiagram_results[#diagram_results].path = nil\r\n\t\tdiagram_results[#diagram_results].uml_string = nil\r\n\tend\r\n\tit(\"has tests2\", function()\r\n\t\tassert.same(paths_to_diagram, diagram_results)  \t\r\n\tend)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "for i=1, 7 do\r\n\t\tpaths_to_diagram[#paths_to_diagram+1] = {}\r\n\t\tpaths_to_diagram[#paths_to_diagram].path = nil\r\n\t\tpaths_to_diagram[#paths_to_diagram].uml_string = nil\r\n\t\tdiagram_results[#diagram_results+1] = {}\r\n\t\tdiagram_results[#diagram_results].path = nil\r\n\t\tdiagram_results[#diagram_results].uml_string = nil\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 17,
    "text": "paths_to_diagram[#paths_to_diagram+1] = {}",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "paths_to_diagram[#paths_to_diagram].path = nil",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "paths_to_diagram[#paths_to_diagram].uml_string = nil",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "diagram_results[#diagram_results+1] = {}",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "diagram_results[#diagram_results].path = nil",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "diagram_results[#diagram_results].uml_string = nil",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "it(\"has tests2\", function()\r\n\t\tassert.same(paths_to_diagram, diagram_results)  \t\r\n\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function() diagram_results = plantuml.generate_prepare(comment, paths_to_diagram, settings) end",
    "type": "function"
  }, {
    "id": 26,
    "text": "diagram_results = plantuml.generate_prepare(comment, paths_to_diagram, settings)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "function()\r\n\t\tfinally( function() diagram_results = plantuml.generate_prepare(comment, paths_to_diagram, settings) end)\r\n\tend",
    "type": "function"
  }, {
    "id": 28,
    "text": "finally( function() diagram_results = plantuml.generate_prepare(comment, paths_to_diagram, settings) end)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function()\r\n\tit(\"generates diagrams\", function()\r\n\t\tfinally( function() diagram_results = plantuml.generate_prepare(comment, paths_to_diagram, settings) end)\r\n\tend)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "it(\"generates diagrams\", function()\r\n\t\tfinally( function() diagram_results = plantuml.generate_prepare(comment, paths_to_diagram, settings) end)\r\n\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n\t\r\n\r\n\tlocal end_position\r\n\r\n\tlocal start_position = string.find(comment, \"@startuml\")\r\n\tif start_position then\r\n\t\t_, end_position = string.find(comment, \"@enduml\", start_position+1)\r\n\tend\r\n\r\n\tfor i=1, 7 do\r\n\t\t--_ set to first PlantUML syntax\r\n\t\tlocal preStr = string.sub(comment, 1, start_position-1)\r\n\t\tlocal postStr = string.sub(comment, end_position+1)\r\n\r\n\t\tlocal uml_string = plantuml.get_uml_string(comment, start_position, end_position)\r\n\t\tassert.same(uml_string.gsub(uml_string, \"{.*}\", \"\"), diagram_results[i].uml_string)\r\n\t\t--_ move to next PlantUML commet\r\n\t\tcomment = preStr .. postStr\r\n\t\t\t\r\n\t\tstart_position = string.find(comment, \"@startuml\", #preStr+1)\r\n\t\tif start_position then\r\n\t\t\t_, end_position = string.find(comment, \"@enduml\",start_position+1)\r\n\t\tend\r\n\tend\r\n\r\n\r\n\t-- for _,v in ipairs(diagram_results) do \r\n\t-- \tprint(v.uml_string , )\r\n\t-- end\r\n\r\n\tfor file in lfs.dir(\"./uml_files\") do\r\n\tif file ~= \".\" and file ~= \"..\" then\r\n\t\tlocal f = \"./uml_files\"..'/'..file\r\n\r\n\t\tfor _,v in ipairs(diagram_results) do\r\n\t\t\tif v.path == f then\r\n\t\t\t\tprint(\"FOUND \" .. v.path .. \" -> \" .. f )\r\n\t\t\t\tassert.same(v.path, f)\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local end_position",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local start_position = string.find(comment, \"@startuml\")",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if start_position then\r\n\t\t_, end_position = string.find(comment, \"@enduml\", start_position+1)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "_, end_position = string.find(comment, \"@enduml\", start_position+1)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "for i=1, 7 do\r\n\t\t--_ set to first PlantUML syntax\r\n\t\tlocal preStr = string.sub(comment, 1, start_position-1)\r\n\t\tlocal postStr = string.sub(comment, end_position+1)\r\n\r\n\t\tlocal uml_string = plantuml.get_uml_string(comment, start_position, end_position)\r\n\t\tassert.same(uml_string.gsub(uml_string, \"{.*}\", \"\"), diagram_results[i].uml_string)\r\n\t\t--_ move to next PlantUML commet\r\n\t\tcomment = preStr .. postStr\r\n\t\t\t\r\n\t\tstart_position = string.find(comment, \"@startuml\", #preStr+1)\r\n\t\tif start_position then\r\n\t\t\t_, end_position = string.find(comment, \"@enduml\",start_position+1)\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 39,
    "text": "local preStr = string.sub(comment, 1, start_position-1)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "local postStr = string.sub(comment, end_position+1)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local uml_string = plantuml.get_uml_string(comment, start_position, end_position)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "assert.same(uml_string.gsub(uml_string, \"{.*}\", \"\"), diagram_results[i].uml_string)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "comment = preStr .. postStr",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "start_position = string.find(comment, \"@startuml\", #preStr+1)",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if start_position then\r\n\t\t\t_, end_position = string.find(comment, \"@enduml\",start_position+1)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "_, end_position = string.find(comment, \"@enduml\",start_position+1)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "for file in lfs.dir(\"./uml_files\") do\r\n\tif file ~= \".\" and file ~= \"..\" then\r\n\t\tlocal f = \"./uml_files\"..'/'..file\r\n\r\n\t\tfor _,v in ipairs(diagram_results) do\r\n\t\t\tif v.path == f then\r\n\t\t\t\tprint(\"FOUND \" .. v.path .. \" -> \" .. f )\r\n\t\t\t\tassert.same(v.path, f)\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "if file ~= \".\" and file ~= \"..\" then\r\n\t\tlocal f = \"./uml_files\"..'/'..file\r\n\r\n\t\tfor _,v in ipairs(diagram_results) do\r\n\t\t\tif v.path == f then\r\n\t\t\t\tprint(\"FOUND \" .. v.path .. \" -> \" .. f )\r\n\t\t\t\tassert.same(v.path, f)\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "local f = \"./uml_files\"..'/'..file",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "for _,v in ipairs(diagram_results) do\r\n\t\t\tif v.path == f then\r\n\t\t\t\tprint(\"FOUND \" .. v.path .. \" -> \" .. f )\r\n\t\t\t\tassert.same(v.path, f)\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "if v.path == f then\r\n\t\t\t\tprint(\"FOUND \" .. v.path .. \" -> \" .. f )\r\n\t\t\t\tassert.same(v.path, f)\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "print(\"FOUND \" .. v.path .. \" -> \" .. f )",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "assert.same(v.path, f)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function()\r\n  it(\"compares same paths and names\", function()\r\n\t\r\n\r\n\tlocal end_position\r\n\r\n\tlocal start_position = string.find(comment, \"@startuml\")\r\n\tif start_position then\r\n\t\t_, end_position = string.find(comment, \"@enduml\", start_position+1)\r\n\tend\r\n\r\n\tfor i=1, 7 do\r\n\t\t--_ set to first PlantUML syntax\r\n\t\tlocal preStr = string.sub(comment, 1, start_position-1)\r\n\t\tlocal postStr = string.sub(comment, end_position+1)\r\n\r\n\t\tlocal uml_string = plantuml.get_uml_string(comment, start_position, end_position)\r\n\t\tassert.same(uml_string.gsub(uml_string, \"{.*}\", \"\"), diagram_results[i].uml_string)\r\n\t\t--_ move to next PlantUML commet\r\n\t\tcomment = preStr .. postStr\r\n\t\t\t\r\n\t\tstart_position = string.find(comment, \"@startuml\", #preStr+1)\r\n\t\tif start_position then\r\n\t\t\t_, end_position = string.find(comment, \"@enduml\",start_position+1)\r\n\t\tend\r\n\tend\r\n\r\n\r\n\t-- for _,v in ipairs(diagram_results) do \r\n\t-- \tprint(v.uml_string , )\r\n\t-- end\r\n\r\n\tfor file in lfs.dir(\"./uml_files\") do\r\n\tif file ~= \".\" and file ~= \"..\" then\r\n\t\tlocal f = \"./uml_files\"..'/'..file\r\n\r\n\t\tfor _,v in ipairs(diagram_results) do\r\n\t\t\tif v.path == f then\r\n\t\t\t\tprint(\"FOUND \" .. v.path .. \" -> \" .. f )\r\n\t\t\t\tassert.same(v.path, f)\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tend\r\nend)\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "it(\"compares same paths and names\", function()\r\n\t\r\n\r\n\tlocal end_position\r\n\r\n\tlocal start_position = string.find(comment, \"@startuml\")\r\n\tif start_position then\r\n\t\t_, end_position = string.find(comment, \"@enduml\", start_position+1)\r\n\tend\r\n\r\n\tfor i=1, 7 do\r\n\t\t--_ set to first PlantUML syntax\r\n\t\tlocal preStr = string.sub(comment, 1, start_position-1)\r\n\t\tlocal postStr = string.sub(comment, end_position+1)\r\n\r\n\t\tlocal uml_string = plantuml.get_uml_string(comment, start_position, end_position)\r\n\t\tassert.same(uml_string.gsub(uml_string, \"{.*}\", \"\"), diagram_results[i].uml_string)\r\n\t\t--_ move to next PlantUML commet\r\n\t\tcomment = preStr .. postStr\r\n\t\t\t\r\n\t\tstart_position = string.find(comment, \"@startuml\", #preStr+1)\r\n\t\tif start_position then\r\n\t\t\t_, end_position = string.find(comment, \"@enduml\",start_position+1)\r\n\t\tend\r\n\tend\r\n\r\n\r\n\t-- for _,v in ipairs(diagram_results) do \r\n\t-- \tprint(v.uml_string , )\r\n\t-- end\r\n\r\n\tfor file in lfs.dir(\"./uml_files\") do\r\n\tif file ~= \".\" and file ~= \"..\" then\r\n\t\tlocal f = \"./uml_files\"..'/'..file\r\n\r\n\t\tfor _,v in ipairs(diagram_results) do\r\n\t\t\tif v.path == f then\r\n\t\t\t\tprint(\"FOUND \" .. v.path .. \" -> \" .. f )\r\n\t\t\t\tassert.same(v.path, f)\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tend\r\nend)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n\t\tos.execute(\"rm ./uml_files/ -R\")\r\n\tend",
    "type": "function"
  }, {
    "id": 59,
    "text": "os.execute(\"rm ./uml_files/ -R\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function()\r\n\tit(\"remove  generated files directory (uml_files)\", function()\r\n\t\tos.execute(\"rm ./uml_files/ -R\")\r\n\tend)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "it(\"remove  generated files directory (uml_files)\", function()\r\n\t\tos.execute(\"rm ./uml_files/ -R\")\r\n\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "",
    "type": "function container"
  }, {
    "id": 65,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 66,
    "text": "process_text",
    "type": "global function"
  }, {
    "id": 67,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 68,
    "text": "is_not_nil",
    "type": "global function"
  }, {
    "id": 69,
    "text": "find",
    "type": "global function"
  }, {
    "id": 70,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 71,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 72,
    "text": "finally",
    "type": "global function"
  }, {
    "id": 73,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 74,
    "text": "same",
    "type": "global function"
  }, {
    "id": 75,
    "text": "require",
    "type": "global function"
  }, {
    "id": 76,
    "text": "print",
    "type": "global function"
  }, {
    "id": 77,
    "text": "it",
    "type": "global function"
  }, {
    "id": 78,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 79,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 80,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "variable container"
  }, {
    "id": 82,
    "text": "",
    "type": "require container"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "string"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 91,
    "text": "",
    "type": "global variable"
  }, {
    "id": 92,
    "text": "",
    "type": "global variable"
  }, {
    "id": 93,
    "text": "",
    "type": "global variable"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "require local variable"
  } ]
}