{
  "_filename": "monitor1b.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/concurrentlua/test/distributed/monitor1b.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "calls",
    "to": 19
  }, {
    "from": 2,
    "label": "calls",
    "to": 16
  }, {
    "from": 2,
    "label": "calls",
    "to": 18
  }, {
    "from": 2,
    "label": "calls",
    "to": 20
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 13,
    "label": "calls",
    "to": 22
  }, {
    "from": 2,
    "label": "calls",
    "to": 15
  }, {
    "from": 2,
    "label": "calls",
    "to": 21
  }, {
    "from": 13,
    "label": "calls",
    "to": 24
  }, {
    "from": 13,
    "label": "calls",
    "to": 17
  }, {
    "from": 13,
    "label": "calls",
    "to": 14
  }, {
    "from": 1,
    "label": "contains",
    "to": 13
  }, {
    "from": 13,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 27
  }, {
    "from": 27,
    "label": "initializes",
    "to": 25
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "monitor1b",
    "type": "module"
  }, {
    "id": 2,
    "text": "function ping(pid)\r\n    concurrent.register('ping', concurrent.self())\r\n    concurrent.monitor(pid)\r\n    while true do\r\n        concurrent.send(pid, { from = { 'ping', 'ping@localhost' },\r\n            body = 'ping' })\r\n        print('ping sent message to pong')\r\n        local msg = concurrent.receive(1000)\r\n        if msg and msg.signal == 'DOWN' then break end\r\n        print('ping received reply from pong')\r\n    end\r\n    print('ping received DOWN and exiting')\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "concurrent.register('ping', concurrent.self())",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "concurrent.monitor(pid)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "while true do\r\n        concurrent.send(pid, { from = { 'ping', 'ping@localhost' },\r\n            body = 'ping' })\r\n        print('ping sent message to pong')\r\n        local msg = concurrent.receive(1000)\r\n        if msg and msg.signal == 'DOWN' then break end\r\n        print('ping received reply from pong')\r\n    end",
    "type": "statement:while"
  }, {
    "id": 6,
    "text": "concurrent.send(pid, { from = { 'ping', 'ping@localhost' },\r\n            body = 'ping' })",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "print('ping sent message to pong')",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local msg = concurrent.receive(1000)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if msg and msg.signal == 'DOWN' then break end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "print('ping received reply from pong')",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "print('ping received DOWN and exiting')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "",
    "type": "function container"
  }, {
    "id": 14,
    "text": "spawn",
    "type": "global function"
  }, {
    "id": 15,
    "text": "receive",
    "type": "global function"
  }, {
    "id": 16,
    "text": "send",
    "type": "global function"
  }, {
    "id": 17,
    "text": "loop",
    "type": "global function"
  }, {
    "id": 18,
    "text": "register",
    "type": "global function"
  }, {
    "id": 19,
    "text": "init",
    "type": "global function"
  }, {
    "id": 20,
    "text": "monitor",
    "type": "global function"
  }, {
    "id": 21,
    "text": "self",
    "type": "global function"
  }, {
    "id": 22,
    "text": "shutdown",
    "type": "global function"
  }, {
    "id": 23,
    "text": "print",
    "type": "global function"
  }, {
    "id": 24,
    "text": "require",
    "type": "global function"
  }, {
    "id": 25,
    "text": "",
    "type": "global variable"
  }, {
    "id": 26,
    "text": "",
    "type": "variable container"
  }, {
    "id": 27,
    "text": "",
    "type": "require container"
  } ]
}