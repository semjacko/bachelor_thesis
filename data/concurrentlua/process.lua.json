{
  "_filename": "process.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/concurrentlua/src/concurrent/process.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 7,
    "label": "calls",
    "to": 63
  }, {
    "from": 1,
    "label": "contains",
    "to": 7
  }, {
    "from": 7,
    "label": "declares",
    "to": 2
  }, {
    "from": 7,
    "label": "declares",
    "to": 3
  }, {
    "from": 7,
    "label": "declares",
    "to": 4
  }, {
    "from": 7,
    "label": "declares",
    "to": 5
  }, {
    "from": 7,
    "label": "declares",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 8,
    "label": "has",
    "to": 16
  }, {
    "from": 8,
    "label": "has",
    "to": 17
  }, {
    "from": 8,
    "label": "has",
    "to": 18
  }, {
    "from": 8,
    "label": "has",
    "to": 19
  }, {
    "from": 8,
    "label": "has",
    "to": 19
  }, {
    "from": 8,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 19
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 19
  }, {
    "from": 36,
    "label": "has",
    "to": 19
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 26
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 19
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 10
  }, {
    "from": 57,
    "label": "has",
    "to": 11
  }, {
    "from": 57,
    "label": "has",
    "to": 12
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 8,
    "label": "calls",
    "to": 60
  }, {
    "from": 32,
    "label": "calls",
    "to": 67
  }, {
    "from": 47,
    "label": "calls",
    "to": 71
  }, {
    "from": 51,
    "label": "calls",
    "to": 71
  }, {
    "from": 47,
    "label": "calls",
    "to": 59
  }, {
    "from": 40,
    "label": "calls",
    "to": 70
  }, {
    "from": 21,
    "label": "calls",
    "to": 51
  }, {
    "from": 43,
    "label": "calls",
    "to": 51
  }, {
    "from": 8,
    "label": "calls",
    "to": 21
  }, {
    "from": 8,
    "label": "calls",
    "to": 62
  }, {
    "from": 47,
    "label": "calls",
    "to": 69
  }, {
    "from": 51,
    "label": "calls",
    "to": 69
  }, {
    "from": 8,
    "label": "calls",
    "to": 64
  }, {
    "from": 8,
    "label": "calls",
    "to": 47
  }, {
    "from": 21,
    "label": "calls",
    "to": 32
  }, {
    "from": 28,
    "label": "calls",
    "to": 32
  }, {
    "from": 28,
    "label": "calls",
    "to": 66
  }, {
    "from": 7,
    "label": "calls",
    "to": 63
  }, {
    "from": 21,
    "label": "calls",
    "to": 68
  }, {
    "from": 36,
    "label": "calls",
    "to": 68
  }, {
    "from": 43,
    "label": "calls",
    "to": 68
  }, {
    "from": 21,
    "label": "calls",
    "to": 65
  }, {
    "from": 36,
    "label": "calls",
    "to": 65
  }, {
    "from": 43,
    "label": "calls",
    "to": 65
  }, {
    "from": 8,
    "label": "calls",
    "to": 72
  }, {
    "from": 21,
    "label": "calls",
    "to": 61
  }, {
    "from": 43,
    "label": "calls",
    "to": 61
  }, {
    "from": 7,
    "label": "declares",
    "to": 8
  }, {
    "from": 7,
    "label": "declares",
    "to": 21
  }, {
    "from": 7,
    "label": "declares",
    "to": 28
  }, {
    "from": 7,
    "label": "declares",
    "to": 32
  }, {
    "from": 7,
    "label": "declares",
    "to": 36
  }, {
    "from": 7,
    "label": "declares",
    "to": 40
  }, {
    "from": 7,
    "label": "declares",
    "to": 43
  }, {
    "from": 7,
    "label": "declares",
    "to": 47
  }, {
    "from": 7,
    "label": "declares",
    "to": 51
  }, {
    "from": 7,
    "label": "declares",
    "to": 55
  }, {
    "from": 7,
    "label": "declares",
    "to": 57
  }, {
    "from": 73,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 74,
    "label": "initializes",
    "to": 76
  }, {
    "from": 74,
    "label": "initializes",
    "to": 77
  }, {
    "from": 74,
    "label": "initializes",
    "to": 78
  }, {
    "from": 74,
    "label": "initializes",
    "to": 79
  }, {
    "from": 73,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 80,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 80,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 80,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 80,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 80,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 80,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 80,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 80,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 80,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "process",
    "type": "module"
  }, {
    "id": 2,
    "text": "function spawn(...)\r\n    local args = { ... }\r\n    if type(args[1]) == 'function' then\r\n        return _spawn(unpack(args))\r\n    end\r\n\r\n    local node = args[1]\r\n    table.remove(args, 1)\r\n    local func = args[1]\r\n    table.remove(args, 1)\r\n\r\n    local pid, errmsg = spawn_system(spawn_process, concurrent.self(), node,\r\n        func, args)\r\n    local msg = concurrent._scheduler.wait()\r\n    if not msg.pid then\r\n        return nil, msg.errmsg\r\n    end\r\n    return { msg.pid, node }\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function spawn_process(parent, node, func, args)\r\n    concurrent.send({ -1, node} , { subject = 'SPAWN',\r\n        from = { pid = concurrent.self(), node = concurrent.node() },\r\n        func = func, args = args })\r\n    local msg = concurrent.receive()\r\n    concurrent._scheduler.barriers[parent] = msg\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function controller_spawn(msg)\r\n    local func = loadstring('return ' .. msg.func)\r\n    if func then\r\n        local pid, errmsg = spawn(func(), unpack(msg.args))\r\n        concurrent.send({ msg.from.pid, msg.from.node }, { pid = pid,\r\n            errmsg = errmsg })\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function spawn_system(func, ...)\r\n    local co = coroutine.create(\r\n        function (...)\r\n            coroutine.yield()\r\n            func(...)\r\n        end\r\n    )\r\n\r\n    last = last - 1\r\n    local pid = last\r\n\r\n    concurrent._process.processes[pid] = co\r\n    concurrent._message.mailboxes[pid] = {}\r\n    concurrent._scheduler.timeouts[pid] = 0\r\n\r\n    local status, errmsg = concurrent._process.resume(co, ...)\r\n    if not status then\r\n        return nil, errmsg\r\n    end\r\n    return pid\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function (...)\r\n            coroutine.yield()\r\n            func(...)\r\n        end",
    "type": "function"
  }, {
    "id": 7,
    "text": "",
    "type": "function container"
  }, {
    "id": 8,
    "text": "function spawn(func, ...)\r\n    local co = coroutine.create(\r\n        function (...)\r\n            coroutine.yield()\r\n            func(...)\r\n            destroy()\r\n        end)\r\n    table.insert(processes, co)\r\n    local pid = #processes\r\n    concurrent._message.mailboxes[pid] = {}\r\n    concurrent._scheduler.timeouts[pid] = 0\r\n    local status, errmsg = resume(co, ...)\r\n    if not status then\r\n        return nil, errmsg\r\n    end\r\n    return pid\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local co = coroutine.create(\r\n        function (...)\r\n            coroutine.yield()\r\n            func(...)\r\n            destroy()\r\n        end)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "coroutine.yield()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "func(...)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "table.insert(processes, co)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "local pid = #processes",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "concurrent._message.mailboxes[pid] = {}",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "concurrent._scheduler.timeouts[pid] = 0",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local status, errmsg = resume(co, ...)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if not status then\r\n        return nil, errmsg\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function resume(co, ...)\r\n    if type(co) ~= 'thread' or coroutine.status(co) ~= 'suspended' then\r\n        return\r\n    end\r\n    local status, errmsg = coroutine.resume(co, ...)\r\n    if not status then\r\n        local pid = whois(co)\r\n        die(pid, errmsg)\r\n    end\r\n    return status, errmsg\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "if type(co) ~= 'thread' or coroutine.status(co) ~= 'suspended' then\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local status, errmsg = coroutine.resume(co, ...)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if not status then\r\n        local pid = whois(co)\r\n        die(pid, errmsg)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local pid = whois(co)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "die(pid, errmsg)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function self()\r\n    local co = coroutine.running()\r\n    if co then\r\n        return whois(co)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local co = coroutine.running()",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if co then\r\n        return whois(co)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function whois(co)\r\n    for k, v in pairs(processes) do\r\n        if v == co then\r\n            return k\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "for k, v in pairs(processes) do\r\n        if v == co then\r\n            return k\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "if v == co then\r\n            return k\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function isalive(pid)\r\n    local co = processes[pid]\r\n    if co and type(co) == 'thread' and coroutine.status(co) ~= 'dead' then\r\n        return true\r\n    else\r\n        return false\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local co = processes[pid]",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if co and type(co) == 'thread' and coroutine.status(co) ~= 'dead' then\r\n        return true\r\n    else\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function exit(reason)\r\n    error(reason, 0)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "error(reason, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function kill(pid, reason)\r\n    if type(processes[pid]) == 'thread' and\r\n        coroutine.status(processes[pid]) == 'suspended' then\r\n        local status, errmsg = coroutine.resume(processes[pid], 'EXIT')\r\n        die(pid, errmsg)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "if type(processes[pid]) == 'thread' and\r\n        coroutine.status(processes[pid]) == 'suspended' then\r\n        local status, errmsg = coroutine.resume(processes[pid], 'EXIT')\r\n        die(pid, errmsg)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "local status, errmsg = coroutine.resume(processes[pid], 'EXIT')",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function destroy()\r\n    for _, v in ipairs(ondestruction) do\r\n        v(concurrent.self(), 'normal')\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "for _, v in ipairs(ondestruction) do\r\n        v(concurrent.self(), 'normal')\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "v(concurrent.self(), 'normal')",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function die(pid, reason)\r\n    for _, v in ipairs(ondeath) do\r\n        v(pid, reason)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "for _, v in ipairs(ondeath) do\r\n        v(pid, reason)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "v(pid, reason)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function whereis(pid)\r\n    return pid\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function (...)\r\n            coroutine.yield()\r\n            func(...)\r\n            destroy()\r\n        end",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "self",
    "type": "global function"
  }, {
    "id": 60,
    "text": "create",
    "type": "global function"
  }, {
    "id": 61,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 62,
    "text": "func",
    "type": "global function"
  }, {
    "id": 63,
    "text": "module",
    "type": "global function"
  }, {
    "id": 64,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 65,
    "text": "status",
    "type": "global function"
  }, {
    "id": 66,
    "text": "running",
    "type": "global function"
  }, {
    "id": 67,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 68,
    "text": "type",
    "type": "global function"
  }, {
    "id": 69,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 70,
    "text": "error",
    "type": "global function"
  }, {
    "id": 71,
    "text": "v",
    "type": "global function"
  }, {
    "id": 72,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 73,
    "text": "",
    "type": "global variable"
  }, {
    "id": 74,
    "text": "",
    "type": "variable container"
  }, {
    "id": 75,
    "text": "",
    "type": "require container"
  }, {
    "id": 76,
    "text": "",
    "type": "global variable"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "global variable"
  }, {
    "id": 79,
    "text": "",
    "type": "global variable"
  }, {
    "id": 80,
    "text": "",
    "type": "variable container"
  }, {
    "id": 81,
    "text": "",
    "type": "require container"
  }, {
    "id": 82,
    "text": "",
    "type": "global variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "global variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "global variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "global variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "global variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "global variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "global variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "global variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  } ]
}