{
  "_filename": "network.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/concurrentlua/src/concurrent/distributed/network.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 23,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "has",
    "to": 32
  }, {
    "from": 20,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 37,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 5
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 60,
    "label": "has",
    "to": 65
  }, {
    "from": 60,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 60,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 58,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 83,
    "label": "has",
    "to": 5
  }, {
    "from": 83,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 5
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 5
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 5
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 5
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 101,
    "label": "has",
    "to": 105
  }, {
    "from": 101,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 5
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 101,
    "label": "has",
    "to": 108
  }, {
    "from": 101,
    "label": "has",
    "to": 109
  }, {
    "from": 101,
    "label": "has",
    "to": 110
  }, {
    "from": 101,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 109
  }, {
    "from": 111,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 101,
    "label": "has",
    "to": 5
  }, {
    "from": 101,
    "label": "has",
    "to": 114
  }, {
    "from": 101,
    "label": "has",
    "to": 115
  }, {
    "from": 101,
    "label": "has",
    "to": 116
  }, {
    "from": 101,
    "label": "has",
    "to": 5
  }, {
    "from": 101,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 5
  }, {
    "from": 118,
    "label": "has",
    "to": 105
  }, {
    "from": 118,
    "label": "has",
    "to": 106
  }, {
    "from": 118,
    "label": "has",
    "to": 5
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 114
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 118,
    "label": "has",
    "to": 124
  }, {
    "from": 118,
    "label": "has",
    "to": 5
  }, {
    "from": 118,
    "label": "has",
    "to": 125
  }, {
    "from": 2,
    "label": "calls",
    "to": 130
  }, {
    "from": 20,
    "label": "calls",
    "to": 130
  }, {
    "from": 34,
    "label": "calls",
    "to": 130
  }, {
    "from": 58,
    "label": "calls",
    "to": 130
  }, {
    "from": 118,
    "label": "calls",
    "to": 130
  }, {
    "from": 2,
    "label": "calls",
    "to": 131
  }, {
    "from": 101,
    "label": "calls",
    "to": 141
  }, {
    "from": 101,
    "label": "calls",
    "to": 141
  }, {
    "from": 83,
    "label": "calls",
    "to": 140
  }, {
    "from": 2,
    "label": "calls",
    "to": 142
  }, {
    "from": 58,
    "label": "calls",
    "to": 142
  }, {
    "from": 58,
    "label": "calls",
    "to": 142
  }, {
    "from": 20,
    "label": "calls",
    "to": 127
  }, {
    "from": 83,
    "label": "calls",
    "to": 143
  }, {
    "from": 97,
    "label": "calls",
    "to": 143
  }, {
    "from": 58,
    "label": "calls",
    "to": 144
  }, {
    "from": 97,
    "label": "calls",
    "to": 95
  }, {
    "from": 37,
    "label": "calls",
    "to": 158
  }, {
    "from": 48,
    "label": "calls",
    "to": 158
  }, {
    "from": 58,
    "label": "calls",
    "to": 145
  }, {
    "from": 2,
    "label": "calls",
    "to": 150
  }, {
    "from": 101,
    "label": "calls",
    "to": 139
  }, {
    "from": 58,
    "label": "calls",
    "to": 161
  }, {
    "from": 77,
    "label": "calls",
    "to": 162
  }, {
    "from": 126,
    "label": "calls",
    "to": 147
  }, {
    "from": 20,
    "label": "calls",
    "to": 128
  }, {
    "from": 37,
    "label": "calls",
    "to": 128
  }, {
    "from": 118,
    "label": "calls",
    "to": 128
  }, {
    "from": 118,
    "label": "calls",
    "to": 128
  }, {
    "from": 118,
    "label": "calls",
    "to": 128
  }, {
    "from": 93,
    "label": "calls",
    "to": 83
  }, {
    "from": 101,
    "label": "calls",
    "to": 138
  }, {
    "from": 37,
    "label": "calls",
    "to": 152
  }, {
    "from": 83,
    "label": "calls",
    "to": 152
  }, {
    "from": 118,
    "label": "calls",
    "to": 152
  }, {
    "from": 48,
    "label": "calls",
    "to": 159
  }, {
    "from": 95,
    "label": "calls",
    "to": 91
  }, {
    "from": 37,
    "label": "calls",
    "to": 132
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 20,
    "label": "calls",
    "to": 129
  }, {
    "from": 58,
    "label": "calls",
    "to": 135
  }, {
    "from": 20,
    "label": "calls",
    "to": 156
  }, {
    "from": 20,
    "label": "calls",
    "to": 48
  }, {
    "from": 55,
    "label": "calls",
    "to": 48
  }, {
    "from": 118,
    "label": "calls",
    "to": 48
  }, {
    "from": 126,
    "label": "calls",
    "to": 160
  }, {
    "from": 126,
    "label": "calls",
    "to": 160
  }, {
    "from": 126,
    "label": "calls",
    "to": 160
  }, {
    "from": 126,
    "label": "calls",
    "to": 160
  }, {
    "from": 37,
    "label": "calls",
    "to": 155
  }, {
    "from": 83,
    "label": "calls",
    "to": 136
  }, {
    "from": 2,
    "label": "calls",
    "to": 149
  }, {
    "from": 58,
    "label": "calls",
    "to": 149
  }, {
    "from": 58,
    "label": "calls",
    "to": 149
  }, {
    "from": 101,
    "label": "calls",
    "to": 149
  }, {
    "from": 58,
    "label": "calls",
    "to": 146
  }, {
    "from": 58,
    "label": "calls",
    "to": 146
  }, {
    "from": 77,
    "label": "calls",
    "to": 148
  }, {
    "from": 97,
    "label": "calls",
    "to": 93
  }, {
    "from": 37,
    "label": "calls",
    "to": 2
  }, {
    "from": 37,
    "label": "calls",
    "to": 2
  }, {
    "from": 83,
    "label": "calls",
    "to": 134
  }, {
    "from": 91,
    "label": "calls",
    "to": 134
  }, {
    "from": 58,
    "label": "calls",
    "to": 151
  }, {
    "from": 37,
    "label": "calls",
    "to": 153
  }, {
    "from": 2,
    "label": "calls",
    "to": 137
  }, {
    "from": 2,
    "label": "calls",
    "to": 137
  }, {
    "from": 101,
    "label": "calls",
    "to": 137
  }, {
    "from": 118,
    "label": "calls",
    "to": 137
  }, {
    "from": 58,
    "label": "calls",
    "to": 154
  }, {
    "from": 93,
    "label": "calls",
    "to": 101
  }, {
    "from": 95,
    "label": "calls",
    "to": 101
  }, {
    "from": 97,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 157
  }, {
    "from": 20,
    "label": "calls",
    "to": 157
  }, {
    "from": 37,
    "label": "calls",
    "to": 157
  }, {
    "from": 58,
    "label": "calls",
    "to": 157
  }, {
    "from": 97,
    "label": "calls",
    "to": 157
  }, {
    "from": 20,
    "label": "calls",
    "to": 133
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 126,
    "label": "declares",
    "to": 2
  }, {
    "from": 126,
    "label": "declares",
    "to": 20
  }, {
    "from": 126,
    "label": "declares",
    "to": 34
  }, {
    "from": 126,
    "label": "declares",
    "to": 37
  }, {
    "from": 126,
    "label": "declares",
    "to": 48
  }, {
    "from": 126,
    "label": "declares",
    "to": 55
  }, {
    "from": 126,
    "label": "declares",
    "to": 58
  }, {
    "from": 126,
    "label": "declares",
    "to": 77
  }, {
    "from": 126,
    "label": "declares",
    "to": 83
  }, {
    "from": 126,
    "label": "declares",
    "to": 91
  }, {
    "from": 126,
    "label": "declares",
    "to": 93
  }, {
    "from": 126,
    "label": "declares",
    "to": 95
  }, {
    "from": 126,
    "label": "declares",
    "to": 97
  }, {
    "from": 126,
    "label": "declares",
    "to": 101
  }, {
    "from": 126,
    "label": "declares",
    "to": 118
  }, {
    "from": 163,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 164
  }, {
    "from": 1,
    "label": "contains",
    "to": 165
  }, {
    "from": 164,
    "label": "initializes",
    "to": 166
  }, {
    "from": 164,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 164,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 164,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 164,
    "label": "initializes",
    "to": 173
  }, {
    "from": 164,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 164,
    "label": "initializes",
    "to": 176
  }, {
    "from": 164,
    "label": "initializes",
    "to": 177
  }, {
    "from": 164,
    "label": "initializes",
    "to": 178
  }, {
    "from": 164,
    "label": "initializes",
    "to": 179
  }, {
    "from": 164,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 164,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 164,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 164,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 164,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 165,
    "label": "initializes",
    "to": 163
  }, {
    "from": 165,
    "label": "initializes",
    "to": 163
  }, {
    "from": 165,
    "label": "initializes",
    "to": 163
  }, {
    "from": 165,
    "label": "initializes",
    "to": 163
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "network",
    "type": "module"
  }, {
    "id": 2,
    "text": "function connect(url)\r\n    local node, host = string.match(url, '^(%a[%w_]*)@(.+)$')\r\n    if not node or not host then\r\n        return\r\n    end\r\n\r\n    if connections[url] then\r\n        return connections[url]\r\n    end\r\n    \r\n    local pmd = socket.connect(host, 9634)\r\n    if not pmd then\r\n        return\r\n    end\r\n    pmd:send('? ' .. url .. '\\r\\n')\r\n    local port = pmd:receive()\r\n    pmd:shutdown('both')\r\n\r\n    if port then\r\n        local client = socket.connect(host, tonumber(port))\r\n        if not client then\r\n            return\r\n        end\r\n\r\n        connections[url] = client\r\n\r\n        concurrent.send({ -1, url }, { subject = 'HELLO',\r\n            from = { node = nodename }, nodes = concurrent.nodes(),\r\n            names = concurrent._register.names })\r\n        \r\n        if concurrent.getoption('keepalive') then\r\n            concurrent._distributed._process.spawn_system(keepalive_process,\r\n                url)\r\n        end\r\n\r\n        return client\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local node, host = string.match(url, '^(%a[%w_]*)@(.+)$')",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if not node or not host then\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "if connections[url] then\r\n        return connections[url]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "local pmd = socket.connect(host, 9634)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not pmd then\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "pmd:send('? ' .. url .. '\\r\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local port = pmd:receive()",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "pmd:shutdown('both')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "if port then\r\n        local client = socket.connect(host, tonumber(port))\r\n        if not client then\r\n            return\r\n        end\r\n\r\n        connections[url] = client\r\n\r\n        concurrent.send({ -1, url }, { subject = 'HELLO',\r\n            from = { node = nodename }, nodes = concurrent.nodes(),\r\n            names = concurrent._register.names })\r\n        \r\n        if concurrent.getoption('keepalive') then\r\n            concurrent._distributed._process.spawn_system(keepalive_process,\r\n                url)\r\n        end\r\n\r\n        return client\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "local client = socket.connect(host, tonumber(port))",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if not client then\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "connections[url] = client",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "concurrent.send({ -1, url }, { subject = 'HELLO',\r\n            from = { node = nodename }, nodes = concurrent.nodes(),\r\n            names = concurrent._register.names })",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "if concurrent.getoption('keepalive') then\r\n            concurrent._distributed._process.spawn_system(keepalive_process,\r\n                url)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "concurrent._distributed._process.spawn_system(keepalive_process,\r\n                url)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function keepalive_process(name)\r\n    local timeouts = concurrent._scheduler.timeouts\r\n    local timeout = concurrent.getoption('keepalivetimeout')\r\n\r\n    while true do\r\n        local timer = cltime.time() + timeout\r\n\r\n        if not connections[name] then\r\n            break\r\n        end\r\n \r\n        if not concurrent.send({ -1, name }, { subject = 'ECHO',\r\n            from = { pid = concurrent.self(), node = concurrent.node() } }) then\r\n            break\r\n        end\r\n\r\n        local msg = concurrent.receive(timeout)\r\n        if not msg then\r\n            break\r\n        end\r\n\r\n        local diff = timer - cltime.time()\r\n        if diff > 0 then\r\n            concurrent._scheduler.sleep(diff)\r\n        end\r\n    end\r\n    disconnect(name)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local timeouts = concurrent._scheduler.timeouts",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local timeout = concurrent.getoption('keepalivetimeout')",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "while true do\r\n        local timer = cltime.time() + timeout\r\n\r\n        if not connections[name] then\r\n            break\r\n        end\r\n \r\n        if not concurrent.send({ -1, name }, { subject = 'ECHO',\r\n            from = { pid = concurrent.self(), node = concurrent.node() } }) then\r\n            break\r\n        end\r\n\r\n        local msg = concurrent.receive(timeout)\r\n        if not msg then\r\n            break\r\n        end\r\n\r\n        local diff = timer - cltime.time()\r\n        if diff > 0 then\r\n            concurrent._scheduler.sleep(diff)\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 24,
    "text": "local timer = cltime.time() + timeout",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if not connections[name] then\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if not concurrent.send({ -1, name }, { subject = 'ECHO',\r\n            from = { pid = concurrent.self(), node = concurrent.node() } }) then\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "local msg = concurrent.receive(timeout)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if not msg then\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "local diff = timer - cltime.time()",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if diff > 0 then\r\n            concurrent._scheduler.sleep(diff)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "concurrent._scheduler.sleep(diff)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "disconnect(name)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function controller_echo(msg)\r\n    concurrent.send({ msg.from.pid, msg.from.node }, 'ECHO')\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "concurrent.send({ msg.from.pid, msg.from.node }, 'ECHO')",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function controller_hello(msg)\r\n    connect(msg.from.node)\r\n    if concurrent.getoption('connectall') then\r\n        for _, v in ipairs(msg.nodes) do\r\n            if v ~= concurrent.node() then\r\n                connect(v)\r\n            end\r\n        end\r\n        for k, v in pairs(msg.names) do\r\n            if not concurrent.whereis(name) then\r\n                concurrent._register.register(k, v)\r\n            else\r\n                concurrent._register.unregister(k)\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "connect(msg.from.node)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if concurrent.getoption('connectall') then\r\n        for _, v in ipairs(msg.nodes) do\r\n            if v ~= concurrent.node() then\r\n                connect(v)\r\n            end\r\n        end\r\n        for k, v in pairs(msg.names) do\r\n            if not concurrent.whereis(name) then\r\n                concurrent._register.register(k, v)\r\n            else\r\n                concurrent._register.unregister(k)\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "for _, v in ipairs(msg.nodes) do\r\n            if v ~= concurrent.node() then\r\n                connect(v)\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 41,
    "text": "if v ~= concurrent.node() then\r\n                connect(v)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "connect(v)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "for k, v in pairs(msg.names) do\r\n            if not concurrent.whereis(name) then\r\n                concurrent._register.register(k, v)\r\n            else\r\n                concurrent._register.unregister(k)\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "if not concurrent.whereis(name) then\r\n                concurrent._register.register(k, v)\r\n            else\r\n                concurrent._register.unregister(k)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "concurrent._register.register(k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "concurrent._register.unregister(k)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function disconnect(url)\r\n    if not connections[url] then\r\n        return\r\n    end\r\n    connections[url]:shutdown('both')\r\n    connections[url] = nil\r\n\r\n    for _, v in ipairs(onfailure) do\r\n        v(url)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if not connections[url] then\r\n        return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "connections[url]:shutdown('both')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "connections[url] = nil",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "for _, v in ipairs(onfailure) do\r\n        v(url)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 53,
    "text": "v(url)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function controller_bye(msg)\r\n    disconnect(msg.from)\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "disconnect(msg.from)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function handler(socket)\r\n    local s = copas.wrap(socket)\r\n    while true do\r\n        local data = s:receive()\r\n        if not data then\r\n            break\r\n        end\r\n\r\n        if concurrent.getoption('debug') then\r\n            print('<- ' .. data)\r\n        end\r\n\r\n        local recipient, message\r\n        if concurrent.getcookie() then\r\n            recipient, message = string.match(data, '^' ..\r\n                concurrent.getcookie() .. ' ([%w%-_]+) (.+)$')\r\n        else \r\n            recipient, message = string.match(data, '^([%w%-_]+) (.+)$')\r\n        end\r\n        if recipient and message then\r\n            if type(tonumber(recipient)) == 'number' then\r\n                recipient = tonumber(recipient)\r\n            end\r\n            local func = loadstring('return ' .. message)\r\n            if func then\r\n                if pcall(func) then\r\n                    concurrent.send(recipient, func())\r\n                end\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local s = copas.wrap(socket)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "while true do\r\n        local data = s:receive()\r\n        if not data then\r\n            break\r\n        end\r\n\r\n        if concurrent.getoption('debug') then\r\n            print('<- ' .. data)\r\n        end\r\n\r\n        local recipient, message\r\n        if concurrent.getcookie() then\r\n            recipient, message = string.match(data, '^' ..\r\n                concurrent.getcookie() .. ' ([%w%-_]+) (.+)$')\r\n        else \r\n            recipient, message = string.match(data, '^([%w%-_]+) (.+)$')\r\n        end\r\n        if recipient and message then\r\n            if type(tonumber(recipient)) == 'number' then\r\n                recipient = tonumber(recipient)\r\n            end\r\n            local func = loadstring('return ' .. message)\r\n            if func then\r\n                if pcall(func) then\r\n                    concurrent.send(recipient, func())\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 61,
    "text": "local data = s:receive()",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if not data then\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "if concurrent.getoption('debug') then\r\n            print('<- ' .. data)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "print('<- ' .. data)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local recipient, message",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if concurrent.getcookie() then\r\n            recipient, message = string.match(data, '^' ..\r\n                concurrent.getcookie() .. ' ([%w%-_]+) (.+)$')\r\n        else \r\n            recipient, message = string.match(data, '^([%w%-_]+) (.+)$')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "recipient, message = string.match(data, '^' ..\r\n                concurrent.getcookie() .. ' ([%w%-_]+) (.+)$')",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "recipient, message = string.match(data, '^([%w%-_]+) (.+)$')",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "if recipient and message then\r\n            if type(tonumber(recipient)) == 'number' then\r\n                recipient = tonumber(recipient)\r\n            end\r\n            local func = loadstring('return ' .. message)\r\n            if func then\r\n                if pcall(func) then\r\n                    concurrent.send(recipient, func())\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "if type(tonumber(recipient)) == 'number' then\r\n                recipient = tonumber(recipient)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "recipient = tonumber(recipient)",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "local func = loadstring('return ' .. message)",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "if func then\r\n                if pcall(func) then\r\n                    concurrent.send(recipient, func())\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "if pcall(func) then\r\n                    concurrent.send(recipient, func())\r\n                end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "concurrent.send(recipient, func())",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function controller()\r\n    while #concurrent._message.mailboxes[-1] > 0 do\r\n        local msg = table.remove(concurrent._message.mailboxes[-1], 1)\r\n        if controllers[msg.subject] then\r\n            controllers[msg.subject](msg)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "while #concurrent._message.mailboxes[-1] > 0 do\r\n        local msg = table.remove(concurrent._message.mailboxes[-1], 1)\r\n        if controllers[msg.subject] then\r\n            controllers[msg.subject](msg)\r\n        end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 79,
    "text": "local msg = table.remove(concurrent._message.mailboxes[-1], 1)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if controllers[msg.subject] then\r\n            controllers[msg.subject](msg)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "controllers[msg.subject](msg)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function getfqdn()\r\n    local hostname = socket.dns.gethostname()\r\n    local _, resolver = socket.dns.toip(hostname)\r\n    local fqdn\r\n    for _, v in pairs(resolver.ip) do\r\n        fqdn, _ = socket.dns.tohostname(v)\r\n        if string.find(fqdn, '%w+%.%w+') then\r\n            break\r\n        end\r\n    end\r\n    return fqdn \r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "local hostname = socket.dns.gethostname()",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local _, resolver = socket.dns.toip(hostname)",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local fqdn",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "for _, v in pairs(resolver.ip) do\r\n        fqdn, _ = socket.dns.tohostname(v)\r\n        if string.find(fqdn, '%w+%.%w+') then\r\n            break\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 88,
    "text": "fqdn, _ = socket.dns.tohostname(v)",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "if string.find(fqdn, '%w+%.%w+') then\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function gethost()\r\n     return socket.dns.gethostname()\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function hostname(node)\r\n    return dispatcher(node .. '@' .. getfqdn())\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function shortname(node)\r\n    return dispatcher(node .. '@' .. gethost())\r\nend",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function init(node)\r\n    if string.find(node, '@') then\r\n        return dispatcher(node)\r\n    else\r\n        if concurrent.getoption('shortnames') then\r\n            return shortname(node)\r\n        else\r\n            return hostname(node)\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "if string.find(node, '@') then\r\n        return dispatcher(node)\r\n    else\r\n        if concurrent.getoption('shortnames') then\r\n            return shortname(node)\r\n        else\r\n            return hostname(node)\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "if concurrent.getoption('shortnames') then\r\n            return shortname(node)\r\n        else\r\n            return hostname(node)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function dispatcher(name)\r\n    local node, host = string.match(name, '^(%a[%w_]*)@(.+)$')\r\n\r\n    local server = socket.bind('*', 0)\r\n    local _, port = server:getsockname()\r\n\r\n    local client = socket.connect('127.0.0.1', 9634)\r\n    if not client then\r\n        return false\r\n    end\r\n    local answer\r\n    client:send('+ ' .. name .. ' ' .. port .. '\\r\\n')\r\n    client:send('? ' .. name .. '\\r\\n')\r\n    answer = client:receive()\r\n    if answer ~= tostring(port) then\r\n        client:send('= ' .. name .. ' ' .. port .. '\\r\\n')\r\n        client:send('? ' .. name .. '\\r\\n')\r\n        answer = client:receive()\r\n        if answer ~= tostring(port) then\r\n            return false\r\n        end\r\n    end\r\n    client:shutdown('both')\r\n\r\n    nodename = name\r\n\r\n    copas.addserver(server, handler)\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "local node, host = string.match(name, '^(%a[%w_]*)@(.+)$')",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local server = socket.bind('*', 0)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "local _, port = server:getsockname()",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local client = socket.connect('127.0.0.1', 9634)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if not client then\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "local answer",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "client:send('+ ' .. name .. ' ' .. port .. '\\r\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "client:send('? ' .. name .. '\\r\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "answer = client:receive()",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "if answer ~= tostring(port) then\r\n        client:send('= ' .. name .. ' ' .. port .. '\\r\\n')\r\n        client:send('? ' .. name .. '\\r\\n')\r\n        answer = client:receive()\r\n        if answer ~= tostring(port) then\r\n            return false\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "client:send('= ' .. name .. ' ' .. port .. '\\r\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "if answer ~= tostring(port) then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "client:shutdown('both')",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "nodename = name",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "copas.addserver(server, handler)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function shutdown()\r\n    if not concurrent.node() then\r\n        return true\r\n    end\r\n\r\n    local client = socket.connect('127.0.0.1', 9634)\r\n    if not client then\r\n        return false\r\n    end\r\n    client:send('- ' .. concurrent.node() .. '\\r\\n')\r\n    client:shutdown('both')\r\n\r\n    for k, _ in pairs(connections) do\r\n        concurrent.send({ -1, k }, { subject = 'BYE',\r\n            from = concurrent.node() })\r\n        disconnect(k)\r\n    end\r\n\r\n    nodename = nil\r\n\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "if not concurrent.node() then\r\n        return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "client:send('- ' .. concurrent.node() .. '\\r\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "for k, _ in pairs(connections) do\r\n        concurrent.send({ -1, k }, { subject = 'BYE',\r\n            from = concurrent.node() })\r\n        disconnect(k)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 122,
    "text": "concurrent.send({ -1, k }, { subject = 'BYE',\r\n            from = concurrent.node() })",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "disconnect(k)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "nodename = nil",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "",
    "type": "function container"
  }, {
    "id": 127,
    "text": "receive",
    "type": "global function"
  }, {
    "id": 128,
    "text": "node",
    "type": "global function"
  }, {
    "id": 129,
    "text": "time",
    "type": "global function"
  }, {
    "id": 130,
    "text": "send",
    "type": "global function"
  }, {
    "id": 131,
    "text": "nodes",
    "type": "global function"
  }, {
    "id": 132,
    "text": "whereis",
    "type": "global function"
  }, {
    "id": 133,
    "text": "self",
    "type": "global function"
  }, {
    "id": 134,
    "text": "dns.gethostname",
    "type": "global function"
  }, {
    "id": 135,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 136,
    "text": "dns.tohostname",
    "type": "global function"
  }, {
    "id": 137,
    "text": "connect",
    "type": "global function"
  }, {
    "id": 138,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 139,
    "text": "addserver",
    "type": "global function"
  }, {
    "id": 140,
    "text": "dns.toip",
    "type": "global function"
  }, {
    "id": 141,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 142,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 143,
    "text": "find",
    "type": "global function"
  }, {
    "id": 144,
    "text": "func",
    "type": "global function"
  }, {
    "id": 145,
    "text": "print",
    "type": "global function"
  }, {
    "id": 146,
    "text": "getcookie",
    "type": "global function"
  }, {
    "id": 147,
    "text": "module",
    "type": "global function"
  }, {
    "id": 148,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 149,
    "text": "match",
    "type": "global function"
  }, {
    "id": 150,
    "text": "concurrent._distributed._process.spawn_system",
    "type": "global function"
  }, {
    "id": 151,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 152,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 153,
    "text": "concurrent._register.register",
    "type": "global function"
  }, {
    "id": 154,
    "text": "type",
    "type": "global function"
  }, {
    "id": 155,
    "text": "concurrent._register.unregister",
    "type": "global function"
  }, {
    "id": 156,
    "text": "concurrent._scheduler.sleep",
    "type": "global function"
  }, {
    "id": 157,
    "text": "getoption",
    "type": "global function"
  }, {
    "id": 158,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 159,
    "text": "v",
    "type": "global function"
  }, {
    "id": 160,
    "text": "require",
    "type": "global function"
  }, {
    "id": 161,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 162,
    "text": "subject]",
    "type": "global function"
  }, {
    "id": 163,
    "text": "",
    "type": "global variable"
  }, {
    "id": 164,
    "text": "",
    "type": "variable container"
  }, {
    "id": 165,
    "text": "",
    "type": "require container"
  }, {
    "id": 166,
    "text": "",
    "type": "global variable"
  }, {
    "id": 167,
    "text": "",
    "type": "global variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "global variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "global variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  }, {
    "id": 173,
    "text": "",
    "type": "global variable"
  }, {
    "id": 174,
    "text": "",
    "type": "global variable"
  }, {
    "id": 175,
    "text": "",
    "type": "n/a"
  }, {
    "id": 176,
    "text": "",
    "type": "global variable"
  }, {
    "id": 177,
    "text": "",
    "type": "global variable"
  }, {
    "id": 178,
    "text": "",
    "type": "global variable"
  }, {
    "id": 179,
    "text": "",
    "type": "global variable"
  }, {
    "id": 180,
    "text": "",
    "type": "global variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "global variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "global variable"
  }, {
    "id": 185,
    "text": "",
    "type": "n/a"
  }, {
    "id": 186,
    "text": "",
    "type": "global variable"
  }, {
    "id": 187,
    "text": "",
    "type": "n/a"
  }, {
    "id": 188,
    "text": "",
    "type": "global variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  } ]
}