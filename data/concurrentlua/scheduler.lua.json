{
  "_filename": "scheduler.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/concurrentlua/src/concurrent/scheduler.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "calls",
    "to": 65
  }, {
    "from": 5,
    "label": "calls",
    "to": 74
  }, {
    "from": 5,
    "label": "calls",
    "to": 74
  }, {
    "from": 5,
    "label": "calls",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 5
  }, {
    "from": 5,
    "label": "declares",
    "to": 2
  }, {
    "from": 5,
    "label": "declares",
    "to": 3
  }, {
    "from": 5,
    "label": "declares",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 6,
    "label": "has",
    "to": 22
  }, {
    "from": 6,
    "label": "has",
    "to": 22
  }, {
    "from": 6,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 38,
    "label": "has",
    "to": 22
  }, {
    "from": 38,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 39
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 47
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 27,
    "label": "calls",
    "to": 6
  }, {
    "from": 27,
    "label": "calls",
    "to": 6
  }, {
    "from": 6,
    "label": "calls",
    "to": 67
  }, {
    "from": 6,
    "label": "calls",
    "to": 67
  }, {
    "from": 58,
    "label": "calls",
    "to": 73
  }, {
    "from": 38,
    "label": "calls",
    "to": 63
  }, {
    "from": 49,
    "label": "calls",
    "to": 63
  }, {
    "from": 58,
    "label": "calls",
    "to": 72
  }, {
    "from": 46,
    "label": "calls",
    "to": 58
  }, {
    "from": 56,
    "label": "calls",
    "to": 58
  }, {
    "from": 24,
    "label": "calls",
    "to": 64
  }, {
    "from": 6,
    "label": "calls",
    "to": 62
  }, {
    "from": 27,
    "label": "calls",
    "to": 62
  }, {
    "from": 27,
    "label": "calls",
    "to": 62
  }, {
    "from": 49,
    "label": "calls",
    "to": 62
  }, {
    "from": 6,
    "label": "calls",
    "to": 71
  }, {
    "from": 49,
    "label": "calls",
    "to": 56
  }, {
    "from": 27,
    "label": "calls",
    "to": 24
  }, {
    "from": 27,
    "label": "calls",
    "to": 24
  }, {
    "from": 5,
    "label": "calls",
    "to": 65
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 24,
    "label": "calls",
    "to": 70
  }, {
    "from": 6,
    "label": "calls",
    "to": 68
  }, {
    "from": 6,
    "label": "calls",
    "to": 66
  }, {
    "from": 5,
    "label": "calls",
    "to": 74
  }, {
    "from": 6,
    "label": "calls",
    "to": 69
  }, {
    "from": 6,
    "label": "calls",
    "to": 69
  }, {
    "from": 5,
    "label": "declares",
    "to": 6
  }, {
    "from": 5,
    "label": "declares",
    "to": 24
  }, {
    "from": 5,
    "label": "declares",
    "to": 27
  }, {
    "from": 5,
    "label": "declares",
    "to": 35
  }, {
    "from": 5,
    "label": "declares",
    "to": 38
  }, {
    "from": 5,
    "label": "declares",
    "to": 46
  }, {
    "from": 5,
    "label": "declares",
    "to": 49
  }, {
    "from": 5,
    "label": "declares",
    "to": 56
  }, {
    "from": 5,
    "label": "declares",
    "to": 58
  }, {
    "from": 75,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 76,
    "label": "initializes",
    "to": 78
  }, {
    "from": 76,
    "label": "initializes",
    "to": 79
  }, {
    "from": 76,
    "label": "initializes",
    "to": 80
  }, {
    "from": 76,
    "label": "initializes",
    "to": 81
  }, {
    "from": 76,
    "label": "initializes",
    "to": 82
  }, {
    "from": 76,
    "label": "initializes",
    "to": 83
  }, {
    "from": 77,
    "label": "initializes",
    "to": 75
  }, {
    "from": 77,
    "label": "initializes",
    "to": 75
  }, {
    "from": 77,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 84
  }, {
    "from": 1,
    "label": "contains",
    "to": 85
  }, {
    "from": 84,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 84,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 84,
    "label": "initializes",
    "to": 90
  }, {
    "from": 84,
    "label": "initializes",
    "to": 91
  }, {
    "from": 84,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 84,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 84,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 84,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 84,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 85,
    "label": "initializes",
    "to": 75
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "scheduler",
    "type": "module"
  }, {
    "id": 2,
    "text": "function step(timeout)\r\n    if #concurrent._message.mailboxes[-1] > 0 then\r\n        concurrent._distributed._network.controller()\r\n    end\r\n\r\n    return _step(timeout)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function tick()\r\n    copas.step(concurrent.getoption('tick') / 1000)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function loop(timeout)\r\n    if not concurrent.node() then\r\n        return _loop(timeout)\r\n    end\r\n    if timeout then\r\n        local timer = cltime.time() + timeout\r\n        while step(timeout) and concurrent.node() and\r\n            not concurrent._scheduler.stop and timer > cltime.time() do\r\n            tick()\r\n        end\r\n    else\r\n        while step(timeout) and concurrent.node() and\r\n            not concurrent._scheduler.stop do\r\n            tick()\r\n        end\r\n    end\r\n    concurrent._scheduler.stop = false\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "function step(timeout)\r\n    for k, v in pairs(barriers) do\r\n        if v then\r\n            concurrent._process.resume(concurrent._process.processes[k])\r\n        end\r\n    end\r\n\r\n    for k, v in pairs(concurrent._process.processes) do\r\n        if #concurrent._message.mailboxes[k] > 0 or (timeouts[k] and\r\n            cltime.time() - timeouts[k] >= 0) then\r\n            if timeouts[k] then\r\n                timeouts[k] = nil\r\n            end\r\n            if type(barriers[k]) == 'nil' then\r\n                concurrent._process.resume(v)\r\n            end\r\n        end\r\n    end\r\n\r\n    if not timeout then\r\n        local alive = false\r\n        for _, v in ipairs(concurrent._process.processes) do\r\n            if coroutine.status(v) ~= 'dead' then\r\n                alive = true\r\n            end\r\n        end\r\n        if not alive then\r\n            return false\r\n        end\r\n    end\r\n    \r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "for k, v in pairs(barriers) do\r\n        if v then\r\n            concurrent._process.resume(concurrent._process.processes[k])\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "if v then\r\n            concurrent._process.resume(concurrent._process.processes[k])\r\n        end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "concurrent._process.resume(concurrent._process.processes[k])",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "for k, v in pairs(concurrent._process.processes) do\r\n        if #concurrent._message.mailboxes[k] > 0 or (timeouts[k] and\r\n            cltime.time() - timeouts[k] >= 0) then\r\n            if timeouts[k] then\r\n                timeouts[k] = nil\r\n            end\r\n            if type(barriers[k]) == 'nil' then\r\n                concurrent._process.resume(v)\r\n            end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "if #concurrent._message.mailboxes[k] > 0 or (timeouts[k] and\r\n            cltime.time() - timeouts[k] >= 0) then\r\n            if timeouts[k] then\r\n                timeouts[k] = nil\r\n            end\r\n            if type(barriers[k]) == 'nil' then\r\n                concurrent._process.resume(v)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if timeouts[k] then\r\n                timeouts[k] = nil\r\n            end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "timeouts[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if type(barriers[k]) == 'nil' then\r\n                concurrent._process.resume(v)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "concurrent._process.resume(v)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "if not timeout then\r\n        local alive = false\r\n        for _, v in ipairs(concurrent._process.processes) do\r\n            if coroutine.status(v) ~= 'dead' then\r\n                alive = true\r\n            end\r\n        end\r\n        if not alive then\r\n            return false\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "local alive = false",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "for _, v in ipairs(concurrent._process.processes) do\r\n            if coroutine.status(v) ~= 'dead' then\r\n                alive = true\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if coroutine.status(v) ~= 'dead' then\r\n                alive = true\r\n            end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "alive = true",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if not alive then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function tick()\r\n    cltime.sleep(concurrent.getoption('tick'))\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "cltime.sleep(concurrent.getoption('tick'))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function loop(timeout)\r\n    if timeout then\r\n        local timer = cltime.time() + timeout\r\n        while step(timeout) and not stop and timer > cltime.time() do\r\n            tick()\r\n        end\r\n    else\r\n        while step(timeout) and not stop do\r\n            tick()\r\n        end\r\n    end\r\n    stop = false\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "if timeout then\r\n        local timer = cltime.time() + timeout\r\n        while step(timeout) and not stop and timer > cltime.time() do\r\n            tick()\r\n        end\r\n    else\r\n        while step(timeout) and not stop do\r\n            tick()\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "local timer = cltime.time() + timeout",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "while step(timeout) and not stop and timer > cltime.time() do\r\n            tick()\r\n        end",
    "type": "statement:while"
  }, {
    "id": 31,
    "text": "tick()",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "while step(timeout) and not stop do\r\n            tick()\r\n        end",
    "type": "statement:while"
  }, {
    "id": 33,
    "text": "stop = false",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function interrupt()\r\n    stop = true\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "stop = true",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function wait()\r\n    local s = concurrent.self()\r\n    if not barriers[s] then\r\n        barriers[s] = false\r\n        wait_yield()\r\n    end\r\n    r = barriers[s]\r\n    barriers[s] = nil\r\n    return r\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local s = concurrent.self()",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if not barriers[s] then\r\n        barriers[s] = false\r\n        wait_yield()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "barriers[s] = false",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "wait_yield()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "r = barriers[s]",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "barriers[s] = nil",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function wait_yield()\r\n    yield()\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "yield()",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function sleep(timeout)\r\n    local s = concurrent.self()\r\n    if timeout then\r\n        timeouts[s] = cltime.time() + timeout\r\n    end\r\n    sleep_yield()\r\n    if timeout then\r\n        timeouts[s] = nil\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "if timeout then\r\n        timeouts[s] = cltime.time() + timeout\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "timeouts[s] = cltime.time() + timeout",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "sleep_yield()",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "if timeout then\r\n        timeouts[s] = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "timeouts[s] = nil",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function sleep_yield()\r\n    yield()\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function yield()\r\n    if coroutine.yield() == 'EXIT' then\r\n        error('EXIT', 0)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "if coroutine.yield() == 'EXIT' then\r\n        error('EXIT', 0)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "error('EXIT', 0)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "time",
    "type": "global function"
  }, {
    "id": 63,
    "text": "self",
    "type": "global function"
  }, {
    "id": 64,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 65,
    "text": "module",
    "type": "global function"
  }, {
    "id": 66,
    "text": "status",
    "type": "global function"
  }, {
    "id": 67,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 68,
    "text": "type",
    "type": "global function"
  }, {
    "id": 69,
    "text": "concurrent._process.resume",
    "type": "global function"
  }, {
    "id": 70,
    "text": "getoption",
    "type": "global function"
  }, {
    "id": 71,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 72,
    "text": "error",
    "type": "global function"
  }, {
    "id": 73,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 74,
    "text": "require",
    "type": "global function"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  }, {
    "id": 76,
    "text": "",
    "type": "variable container"
  }, {
    "id": 77,
    "text": "",
    "type": "require container"
  }, {
    "id": 78,
    "text": "",
    "type": "global variable"
  }, {
    "id": 79,
    "text": "",
    "type": "global variable"
  }, {
    "id": 80,
    "text": "",
    "type": "global variable"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "global variable"
  }, {
    "id": 83,
    "text": "",
    "type": "global variable"
  }, {
    "id": 84,
    "text": "",
    "type": "variable container"
  }, {
    "id": 85,
    "text": "",
    "type": "require container"
  }, {
    "id": 86,
    "text": "",
    "type": "global variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "global variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "global variable"
  }, {
    "id": 91,
    "text": "",
    "type": "global variable"
  }, {
    "id": 92,
    "text": "",
    "type": "global variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "global variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "global variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "global variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "global variable"
  }, {
    "id": 101,
    "text": "",
    "type": "n/a"
  } ]
}