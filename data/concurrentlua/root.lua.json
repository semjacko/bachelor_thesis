{
  "_filename": "root.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/concurrentlua/src/concurrent/root.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 9
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 13
  }, {
    "from": 20,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 8,
    "label": "calls",
    "to": 33
  }, {
    "from": 16,
    "label": "calls",
    "to": 33
  }, {
    "from": 8,
    "label": "calls",
    "to": 32
  }, {
    "from": 16,
    "label": "calls",
    "to": 32
  }, {
    "from": 25,
    "label": "calls",
    "to": 29
  }, {
    "from": 8,
    "label": "calls",
    "to": 31
  }, {
    "from": 16,
    "label": "calls",
    "to": 30
  }, {
    "from": 5,
    "label": "calls",
    "to": 28
  }, {
    "from": 16,
    "label": "calls",
    "to": 26
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 16,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 25,
    "label": "declares",
    "to": 2
  }, {
    "from": 25,
    "label": "declares",
    "to": 5
  }, {
    "from": 25,
    "label": "declares",
    "to": 8
  }, {
    "from": 25,
    "label": "declares",
    "to": 16
  }, {
    "from": 34,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 35,
    "label": "initializes",
    "to": 37
  }, {
    "from": 35,
    "label": "initializes",
    "to": 38
  }, {
    "from": 38,
    "label": "assigns",
    "to": 39
  }, {
    "from": 35,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 35,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 35,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 35,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 35,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 35,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 35,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 35,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "root",
    "type": "module"
  }, {
    "id": 2,
    "text": "function self()\r\n    return _self() or 0\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function isalive(pid)\r\n    if pid ~= 0 then\r\n        return _isalive(pid)\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if pid ~= 0 then\r\n        return _isalive(pid)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function wait_yield()\r\n    local s = self()\r\n\r\n    if s ~= 0 then\r\n        return _wait_yield()\r\n    end\r\n\r\n    while true do\r\n        if concurrent._scheduler.barriers[s] then\r\n            break\r\n        end\r\n        concurrent.step()\r\n        concurrent.tick()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local s = self()",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if s ~= 0 then\r\n        return _wait_yield()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "while true do\r\n        if concurrent._scheduler.barriers[s] then\r\n            break\r\n        end\r\n        concurrent.step()\r\n        concurrent.tick()\r\n    end",
    "type": "statement:while"
  }, {
    "id": 12,
    "text": "if concurrent._scheduler.barriers[s] then\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "concurrent.step()",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "concurrent.tick()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function sleep_yield()\r\n    local timeouts = concurrent._scheduler.timeouts\r\n    local mailboxes = concurrent._message.mailboxes\r\n    local s = self()\r\n\r\n    if s ~= 0 then\r\n        return _sleep_yield()\r\n    end\r\n\r\n    while true do\r\n        if #mailboxes[s] > 0 then\r\n            break\r\n        end\r\n        if timeouts[s] and cltime.time() - timeouts[s] >= 0 then\r\n            timeouts[s] = nil\r\n            return\r\n        end\r\n        concurrent.step()\r\n        concurrent.tick()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local timeouts = concurrent._scheduler.timeouts",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local mailboxes = concurrent._message.mailboxes",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if s ~= 0 then\r\n        return _sleep_yield()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "while true do\r\n        if #mailboxes[s] > 0 then\r\n            break\r\n        end\r\n        if timeouts[s] and cltime.time() - timeouts[s] >= 0 then\r\n            timeouts[s] = nil\r\n            return\r\n        end\r\n        concurrent.step()\r\n        concurrent.tick()\r\n    end",
    "type": "statement:while"
  }, {
    "id": 21,
    "text": "if #mailboxes[s] > 0 then\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if timeouts[s] and cltime.time() - timeouts[s] >= 0 then\r\n            timeouts[s] = nil\r\n            return\r\n        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "timeouts[s] = nil",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "",
    "type": "function container"
  }, {
    "id": 26,
    "text": "time",
    "type": "global function"
  }, {
    "id": 27,
    "text": "_self",
    "type": "global function"
  }, {
    "id": 28,
    "text": "_isalive",
    "type": "global function"
  }, {
    "id": 29,
    "text": "module",
    "type": "global function"
  }, {
    "id": 30,
    "text": "_sleep_yield",
    "type": "global function"
  }, {
    "id": 31,
    "text": "_wait_yield",
    "type": "global function"
  }, {
    "id": 32,
    "text": "tick",
    "type": "global function"
  }, {
    "id": 33,
    "text": "step",
    "type": "global function"
  }, {
    "id": 34,
    "text": "",
    "type": "global variable"
  }, {
    "id": 35,
    "text": "",
    "type": "variable container"
  }, {
    "id": 36,
    "text": "",
    "type": "require container"
  }, {
    "id": 37,
    "text": "",
    "type": "global variable"
  }, {
    "id": 38,
    "text": "",
    "type": "global variable"
  }, {
    "id": 39,
    "text": "",
    "type": "n/a"
  }, {
    "id": 40,
    "text": "",
    "type": "global variable"
  }, {
    "id": 41,
    "text": "",
    "type": "n/a"
  }, {
    "id": 42,
    "text": "",
    "type": "global variable"
  }, {
    "id": 43,
    "text": "",
    "type": "n/a"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "global variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "global variable"
  }, {
    "id": 49,
    "text": "",
    "type": "n/a"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "global variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  } ]
}