{
  "_filename": "mosync.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/mobdebug/misc/mosync.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 11,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 16
  }, {
    "from": 43,
    "label": "has",
    "to": 17
  }, {
    "from": 43,
    "label": "has",
    "to": 18
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 22
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 16
  }, {
    "from": 51,
    "label": "has",
    "to": 17
  }, {
    "from": 51,
    "label": "has",
    "to": 18
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 22
  }, {
    "from": 47,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 47,
    "label": "has",
    "to": 62
  }, {
    "from": 47,
    "label": "has",
    "to": 63
  }, {
    "from": 47,
    "label": "has",
    "to": 64
  }, {
    "from": 24,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 23
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 5
  }, {
    "from": 72,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 72,
    "label": "has",
    "to": 9
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 29
  }, {
    "from": 74,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 35
  }, {
    "from": 76,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 76,
    "label": "has",
    "to": 9
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 79,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 16
  }, {
    "from": 43,
    "label": "has",
    "to": 17
  }, {
    "from": 43,
    "label": "has",
    "to": 18
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 22
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 16
  }, {
    "from": 51,
    "label": "has",
    "to": 17
  }, {
    "from": 51,
    "label": "has",
    "to": 18
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 22
  }, {
    "from": 47,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 47,
    "label": "has",
    "to": 62
  }, {
    "from": 47,
    "label": "has",
    "to": 63
  }, {
    "from": 47,
    "label": "has",
    "to": 64
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 23
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 3
  }, {
    "from": 85,
    "label": "has",
    "to": 25
  }, {
    "from": 85,
    "label": "has",
    "to": 26
  }, {
    "from": 85,
    "label": "has",
    "to": 14
  }, {
    "from": 85,
    "label": "has",
    "to": 27
  }, {
    "from": 85,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 85,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 85,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 16
  }, {
    "from": 43,
    "label": "has",
    "to": 17
  }, {
    "from": 43,
    "label": "has",
    "to": 18
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 22
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 85,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 16
  }, {
    "from": 51,
    "label": "has",
    "to": 17
  }, {
    "from": 51,
    "label": "has",
    "to": 18
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 22
  }, {
    "from": 47,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 47,
    "label": "has",
    "to": 62
  }, {
    "from": 47,
    "label": "has",
    "to": 63
  }, {
    "from": 47,
    "label": "has",
    "to": 64
  }, {
    "from": 85,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 23
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 85,
    "label": "has",
    "to": 9
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 11,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 24,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 16
  }, {
    "from": 43,
    "label": "has",
    "to": 17
  }, {
    "from": 43,
    "label": "has",
    "to": 18
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 22
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 24,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 16
  }, {
    "from": 51,
    "label": "has",
    "to": 17
  }, {
    "from": 51,
    "label": "has",
    "to": 18
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 22
  }, {
    "from": 47,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 47,
    "label": "has",
    "to": 62
  }, {
    "from": 47,
    "label": "has",
    "to": 63
  }, {
    "from": 47,
    "label": "has",
    "to": 64
  }, {
    "from": 24,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 23
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 66,
    "label": "has",
    "to": 70
  }, {
    "from": 24,
    "label": "has",
    "to": 9
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 2,
    "label": "calls",
    "to": 103
  }, {
    "from": 2,
    "label": "calls",
    "to": 109
  }, {
    "from": 2,
    "label": "calls",
    "to": 109
  }, {
    "from": 2,
    "label": "calls",
    "to": 109
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 98
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 110
  }, {
    "from": 2,
    "label": "calls",
    "to": 110
  }, {
    "from": 89,
    "label": "calls",
    "to": 92
  }, {
    "from": 2,
    "label": "calls",
    "to": 93
  }, {
    "from": 2,
    "label": "calls",
    "to": 104
  }, {
    "from": 2,
    "label": "calls",
    "to": 104
  }, {
    "from": 2,
    "label": "calls",
    "to": 104
  }, {
    "from": 2,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "calls",
    "to": 94
  }, {
    "from": 2,
    "label": "calls",
    "to": 100
  }, {
    "from": 2,
    "label": "calls",
    "to": 100
  }, {
    "from": 2,
    "label": "calls",
    "to": 111
  }, {
    "from": 2,
    "label": "calls",
    "to": 111
  }, {
    "from": 2,
    "label": "calls",
    "to": 111
  }, {
    "from": 2,
    "label": "calls",
    "to": 111
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 2,
    "label": "calls",
    "to": 95
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 2,
    "label": "calls",
    "to": 96
  }, {
    "from": 89,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 112
  }, {
    "from": 2,
    "label": "calls",
    "to": 112
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 91
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 107
  }, {
    "from": 2,
    "label": "calls",
    "to": 108
  }, {
    "from": 2,
    "label": "calls",
    "to": 108
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 101
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 102
  }, {
    "from": 1,
    "label": "contains",
    "to": 89
  }, {
    "from": 89,
    "label": "declares",
    "to": 2
  }, {
    "from": 89,
    "label": "declares",
    "to": 72
  }, {
    "from": 89,
    "label": "declares",
    "to": 74
  }, {
    "from": 89,
    "label": "declares",
    "to": 76
  }, {
    "from": 89,
    "label": "declares",
    "to": 78
  }, {
    "from": 89,
    "label": "declares",
    "to": 79
  }, {
    "from": 89,
    "label": "declares",
    "to": 81
  }, {
    "from": 89,
    "label": "declares",
    "to": 83
  }, {
    "from": 89,
    "label": "declares",
    "to": 85
  }, {
    "from": 89,
    "label": "declares",
    "to": 87
  }, {
    "from": 1,
    "label": "declares",
    "to": 90
  }, {
    "from": 1,
    "label": "declares",
    "to": 91
  }, {
    "from": 1,
    "label": "declares",
    "to": 94
  }, {
    "from": 1,
    "label": "declares",
    "to": 96
  }, {
    "from": 1,
    "label": "declares",
    "to": 97
  }, {
    "from": 1,
    "label": "declares",
    "to": 100
  }, {
    "from": 1,
    "label": "declares",
    "to": 101
  }, {
    "from": 1,
    "label": "declares",
    "to": 102
  }, {
    "from": 1,
    "label": "declares",
    "to": 103
  }, {
    "from": 1,
    "label": "declares",
    "to": 104
  }, {
    "from": 1,
    "label": "declares",
    "to": 105
  }, {
    "from": 1,
    "label": "declares",
    "to": 107
  }, {
    "from": 1,
    "label": "declares",
    "to": 109
  }, {
    "from": 1,
    "label": "declares",
    "to": 110
  }, {
    "from": 1,
    "label": "declares",
    "to": 112
  }, {
    "from": 1,
    "label": "contains",
    "to": 113
  }, {
    "from": 1,
    "label": "contains",
    "to": 114
  }, {
    "from": 113,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 113,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 1,
    "label": "provides",
    "to": 119
  }, {
    "from": 119,
    "label": "provides",
    "to": 120
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "mosync",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function socketMobileLua() \r\n  local self = {}\r\n  self.select = function(readfrom) -- writeto and timeout parameters are ignored\r\n    local canread = {}\r\n    for _,s in ipairs(readfrom) do\r\n      if s:receive(0) then canread[s] = true end\r\n    end\r\n    return canread\r\n  end\r\n  self.connect = coroutine.wrap(function(host, port)\r\n    while true do\r\n      local connection = mosync.maConnect(\"socket://\" .. host .. \":\" .. port)\r\n  \r\n      if connection > 0 then\r\n        local event = mosync.SysEventCreate()\r\n        while true do\r\n          mosync.maWait(0)\r\n          mosync.maGetEvent(event)\r\n          local eventType = mosync.SysEventGetType(event)\r\n          if (mosync.EVENT_TYPE_CONN == eventType and\r\n            mosync.SysEventGetConnHandle(event) == connection and\r\n            mosync.SysEventGetConnOpType(event) == mosync.CONNOP_CONNECT) then\r\n              -- result > 0 ? success : error\r\n              if not (mosync.SysEventGetConnResult(event) > 0) then connection = nil end\r\n              break\r\n          elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n            mosync.EventMonitor:HandleEvent(event)\r\n          end\r\n        end\r\n        mosync.SysFree(event)\r\n      end\r\n  \r\n      host, port = coroutine.yield(connection and (function ()\r\n        local self = {}\r\n        local outBuffer = mosync.SysAlloc(1000)\r\n        local inBuffer = mosync.SysAlloc(1000)\r\n        local event = mosync.SysEventCreate()\r\n        local recvBuffer = \"\"\r\n        function stringToBuffer(s, buffer)\r\n          local i = 0\r\n          for c in s:gmatch(\".\") do\r\n            i = i + 1\r\n            local b = s:byte(i)\r\n            mosync.SysBufferSetByte(buffer, i - 1, b)\r\n          end\r\n          return i\r\n        end\r\n        function bufferToString(buffer, len)\r\n          local s = \"\"\r\n          for i = 0, len - 1 do\r\n            local c = mosync.SysBufferGetByte(buffer, i)\r\n            s = s .. string.char(c)\r\n          end\r\n          return s\r\n        end\r\n        self.send = coroutine.wrap(function(self, msg)\r\n          while true do\r\n            local numberOfBytes = stringToBuffer(msg, outBuffer)\r\n            mosync.maConnWrite(connection, outBuffer, numberOfBytes)\r\n            while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end\r\n            self, msg = coroutine.yield()\r\n          end\r\n        end)\r\n        self.receive = coroutine.wrap(function(self, len)\r\n          while true do\r\n            local line = recvBuffer\r\n            while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end\r\n    \r\n            if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end\r\n    \r\n            recvBuffer = string.sub(line, len+1)\r\n            line = string.sub(line, 1, len)\r\n    \r\n            self, len = coroutine.yield(line)\r\n          end\r\n        end)\r\n        self.close = coroutine.wrap(function(self) \r\n          while true do\r\n            mosync.SysFree(inBuffer)\r\n            mosync.SysFree(outBuffer)\r\n            mosync.SysFree(event)\r\n            mosync.maConnClose(connection)\r\n            coroutine.yield(self)\r\n          end\r\n        end)\r\n        return self\r\n      end)())\r\n    end\r\n  end)\r\n\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local self = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "self.select = function(readfrom) -- writeto and timeout parameters are ignored\r\n    local canread = {}\r\n    for _,s in ipairs(readfrom) do\r\n      if s:receive(0) then canread[s] = true end\r\n    end\r\n    return canread\r\n  end",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "local canread = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "for _,s in ipairs(readfrom) do\r\n      if s:receive(0) then canread[s] = true end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 7,
    "text": "if s:receive(0) then canread[s] = true end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "canread[s] = true",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "self.connect = coroutine.wrap(function(host, port)\r\n    while true do\r\n      local connection = mosync.maConnect(\"socket://\" .. host .. \":\" .. port)\r\n  \r\n      if connection > 0 then\r\n        local event = mosync.SysEventCreate()\r\n        while true do\r\n          mosync.maWait(0)\r\n          mosync.maGetEvent(event)\r\n          local eventType = mosync.SysEventGetType(event)\r\n          if (mosync.EVENT_TYPE_CONN == eventType and\r\n            mosync.SysEventGetConnHandle(event) == connection and\r\n            mosync.SysEventGetConnOpType(event) == mosync.CONNOP_CONNECT) then\r\n              -- result > 0 ? success : error\r\n              if not (mosync.SysEventGetConnResult(event) > 0) then connection = nil end\r\n              break\r\n          elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n            mosync.EventMonitor:HandleEvent(event)\r\n          end\r\n        end\r\n        mosync.SysFree(event)\r\n      end\r\n  \r\n      host, port = coroutine.yield(connection and (function ()\r\n        local self = {}\r\n        local outBuffer = mosync.SysAlloc(1000)\r\n        local inBuffer = mosync.SysAlloc(1000)\r\n        local event = mosync.SysEventCreate()\r\n        local recvBuffer = \"\"\r\n        function stringToBuffer(s, buffer)\r\n          local i = 0\r\n          for c in s:gmatch(\".\") do\r\n            i = i + 1\r\n            local b = s:byte(i)\r\n            mosync.SysBufferSetByte(buffer, i - 1, b)\r\n          end\r\n          return i\r\n        end\r\n        function bufferToString(buffer, len)\r\n          local s = \"\"\r\n          for i = 0, len - 1 do\r\n            local c = mosync.SysBufferGetByte(buffer, i)\r\n            s = s .. string.char(c)\r\n          end\r\n          return s\r\n        end\r\n        self.send = coroutine.wrap(function(self, msg)\r\n          while true do\r\n            local numberOfBytes = stringToBuffer(msg, outBuffer)\r\n            mosync.maConnWrite(connection, outBuffer, numberOfBytes)\r\n            while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end\r\n            self, msg = coroutine.yield()\r\n          end\r\n        end)\r\n        self.receive = coroutine.wrap(function(self, len)\r\n          while true do\r\n            local line = recvBuffer\r\n            while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end\r\n    \r\n            if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end\r\n    \r\n            recvBuffer = string.sub(line, len+1)\r\n            line = string.sub(line, 1, len)\r\n    \r\n            self, len = coroutine.yield(line)\r\n          end\r\n        end)\r\n        self.close = coroutine.wrap(function(self) \r\n          while true do\r\n            mosync.SysFree(inBuffer)\r\n            mosync.SysFree(outBuffer)\r\n            mosync.SysFree(event)\r\n            mosync.maConnClose(connection)\r\n            coroutine.yield(self)\r\n          end\r\n        end)\r\n        return self\r\n      end)())\r\n    end\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "while true do\r\n      local connection = mosync.maConnect(\"socket://\" .. host .. \":\" .. port)\r\n  \r\n      if connection > 0 then\r\n        local event = mosync.SysEventCreate()\r\n        while true do\r\n          mosync.maWait(0)\r\n          mosync.maGetEvent(event)\r\n          local eventType = mosync.SysEventGetType(event)\r\n          if (mosync.EVENT_TYPE_CONN == eventType and\r\n            mosync.SysEventGetConnHandle(event) == connection and\r\n            mosync.SysEventGetConnOpType(event) == mosync.CONNOP_CONNECT) then\r\n              -- result > 0 ? success : error\r\n              if not (mosync.SysEventGetConnResult(event) > 0) then connection = nil end\r\n              break\r\n          elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n            mosync.EventMonitor:HandleEvent(event)\r\n          end\r\n        end\r\n        mosync.SysFree(event)\r\n      end\r\n  \r\n      host, port = coroutine.yield(connection and (function ()\r\n        local self = {}\r\n        local outBuffer = mosync.SysAlloc(1000)\r\n        local inBuffer = mosync.SysAlloc(1000)\r\n        local event = mosync.SysEventCreate()\r\n        local recvBuffer = \"\"\r\n        function stringToBuffer(s, buffer)\r\n          local i = 0\r\n          for c in s:gmatch(\".\") do\r\n            i = i + 1\r\n            local b = s:byte(i)\r\n            mosync.SysBufferSetByte(buffer, i - 1, b)\r\n          end\r\n          return i\r\n        end\r\n        function bufferToString(buffer, len)\r\n          local s = \"\"\r\n          for i = 0, len - 1 do\r\n            local c = mosync.SysBufferGetByte(buffer, i)\r\n            s = s .. string.char(c)\r\n          end\r\n          return s\r\n        end\r\n        self.send = coroutine.wrap(function(self, msg)\r\n          while true do\r\n            local numberOfBytes = stringToBuffer(msg, outBuffer)\r\n            mosync.maConnWrite(connection, outBuffer, numberOfBytes)\r\n            while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end\r\n            self, msg = coroutine.yield()\r\n          end\r\n        end)\r\n        self.receive = coroutine.wrap(function(self, len)\r\n          while true do\r\n            local line = recvBuffer\r\n            while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end\r\n    \r\n            if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end\r\n    \r\n            recvBuffer = string.sub(line, len+1)\r\n            line = string.sub(line, 1, len)\r\n    \r\n            self, len = coroutine.yield(line)\r\n          end\r\n        end)\r\n        self.close = coroutine.wrap(function(self) \r\n          while true do\r\n            mosync.SysFree(inBuffer)\r\n            mosync.SysFree(outBuffer)\r\n            mosync.SysFree(event)\r\n            mosync.maConnClose(connection)\r\n            coroutine.yield(self)\r\n          end\r\n        end)\r\n        return self\r\n      end)())\r\n    end",
    "type": "statement:while"
  }, {
    "id": 12,
    "text": "local connection = mosync.maConnect(\"socket://\" .. host .. \":\" .. port)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if connection > 0 then\r\n        local event = mosync.SysEventCreate()\r\n        while true do\r\n          mosync.maWait(0)\r\n          mosync.maGetEvent(event)\r\n          local eventType = mosync.SysEventGetType(event)\r\n          if (mosync.EVENT_TYPE_CONN == eventType and\r\n            mosync.SysEventGetConnHandle(event) == connection and\r\n            mosync.SysEventGetConnOpType(event) == mosync.CONNOP_CONNECT) then\r\n              -- result > 0 ? success : error\r\n              if not (mosync.SysEventGetConnResult(event) > 0) then connection = nil end\r\n              break\r\n          elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n            mosync.EventMonitor:HandleEvent(event)\r\n          end\r\n        end\r\n        mosync.SysFree(event)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "local event = mosync.SysEventCreate()",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "while true do\r\n          mosync.maWait(0)\r\n          mosync.maGetEvent(event)\r\n          local eventType = mosync.SysEventGetType(event)\r\n          if (mosync.EVENT_TYPE_CONN == eventType and\r\n            mosync.SysEventGetConnHandle(event) == connection and\r\n            mosync.SysEventGetConnOpType(event) == mosync.CONNOP_CONNECT) then\r\n              -- result > 0 ? success : error\r\n              if not (mosync.SysEventGetConnResult(event) > 0) then connection = nil end\r\n              break\r\n          elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n            mosync.EventMonitor:HandleEvent(event)\r\n          end\r\n        end",
    "type": "statement:while"
  }, {
    "id": 16,
    "text": "mosync.maWait(0)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "mosync.maGetEvent(event)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local eventType = mosync.SysEventGetType(event)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if (mosync.EVENT_TYPE_CONN == eventType and\r\n            mosync.SysEventGetConnHandle(event) == connection and\r\n            mosync.SysEventGetConnOpType(event) == mosync.CONNOP_CONNECT) then\r\n              -- result > 0 ? success : error\r\n              if not (mosync.SysEventGetConnResult(event) > 0) then connection = nil end\r\n              break\r\n          elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n            mosync.EventMonitor:HandleEvent(event)\r\n          end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "if not (mosync.SysEventGetConnResult(event) > 0) then connection = nil end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "connection = nil",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "mosync.EventMonitor:HandleEvent(event)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "mosync.SysFree(event)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "host, port = coroutine.yield(connection and (function ()\r\n        local self = {}\r\n        local outBuffer = mosync.SysAlloc(1000)\r\n        local inBuffer = mosync.SysAlloc(1000)\r\n        local event = mosync.SysEventCreate()\r\n        local recvBuffer = \"\"\r\n        function stringToBuffer(s, buffer)\r\n          local i = 0\r\n          for c in s:gmatch(\".\") do\r\n            i = i + 1\r\n            local b = s:byte(i)\r\n            mosync.SysBufferSetByte(buffer, i - 1, b)\r\n          end\r\n          return i\r\n        end\r\n        function bufferToString(buffer, len)\r\n          local s = \"\"\r\n          for i = 0, len - 1 do\r\n            local c = mosync.SysBufferGetByte(buffer, i)\r\n            s = s .. string.char(c)\r\n          end\r\n          return s\r\n        end\r\n        self.send = coroutine.wrap(function(self, msg)\r\n          while true do\r\n            local numberOfBytes = stringToBuffer(msg, outBuffer)\r\n            mosync.maConnWrite(connection, outBuffer, numberOfBytes)\r\n            while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end\r\n            self, msg = coroutine.yield()\r\n          end\r\n        end)\r\n        self.receive = coroutine.wrap(function(self, len)\r\n          while true do\r\n            local line = recvBuffer\r\n            while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end\r\n    \r\n            if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end\r\n    \r\n            recvBuffer = string.sub(line, len+1)\r\n            line = string.sub(line, 1, len)\r\n    \r\n            self, len = coroutine.yield(line)\r\n          end\r\n        end)\r\n        self.close = coroutine.wrap(function(self) \r\n          while true do\r\n            mosync.SysFree(inBuffer)\r\n            mosync.SysFree(outBuffer)\r\n            mosync.SysFree(event)\r\n            mosync.maConnClose(connection)\r\n            coroutine.yield(self)\r\n          end\r\n        end)\r\n        return self\r\n      end)())",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local outBuffer = mosync.SysAlloc(1000)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local inBuffer = mosync.SysAlloc(1000)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local recvBuffer = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "function stringToBuffer(s, buffer)\r\n          local i = 0\r\n          for c in s:gmatch(\".\") do\r\n            i = i + 1\r\n            local b = s:byte(i)\r\n            mosync.SysBufferSetByte(buffer, i - 1, b)\r\n          end\r\n          return i\r\n        end",
    "type": "statement:globalfunction"
  }, {
    "id": 29,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "for c in s:gmatch(\".\") do\r\n            i = i + 1\r\n            local b = s:byte(i)\r\n            mosync.SysBufferSetByte(buffer, i - 1, b)\r\n          end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local b = s:byte(i)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "mosync.SysBufferSetByte(buffer, i - 1, b)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "function bufferToString(buffer, len)\r\n          local s = \"\"\r\n          for i = 0, len - 1 do\r\n            local c = mosync.SysBufferGetByte(buffer, i)\r\n            s = s .. string.char(c)\r\n          end\r\n          return s\r\n        end",
    "type": "statement:globalfunction"
  }, {
    "id": 35,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "for i = 0, len - 1 do\r\n            local c = mosync.SysBufferGetByte(buffer, i)\r\n            s = s .. string.char(c)\r\n          end",
    "type": "statement:numericfor"
  }, {
    "id": 37,
    "text": "local c = mosync.SysBufferGetByte(buffer, i)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "s = s .. string.char(c)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "self.send = coroutine.wrap(function(self, msg)\r\n          while true do\r\n            local numberOfBytes = stringToBuffer(msg, outBuffer)\r\n            mosync.maConnWrite(connection, outBuffer, numberOfBytes)\r\n            while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end\r\n            self, msg = coroutine.yield()\r\n          end\r\n        end)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "while true do\r\n            local numberOfBytes = stringToBuffer(msg, outBuffer)\r\n            mosync.maConnWrite(connection, outBuffer, numberOfBytes)\r\n            while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end\r\n            self, msg = coroutine.yield()\r\n          end",
    "type": "statement:while"
  }, {
    "id": 41,
    "text": "local numberOfBytes = stringToBuffer(msg, outBuffer)",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "mosync.maConnWrite(connection, outBuffer, numberOfBytes)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end",
    "type": "statement:while"
  }, {
    "id": 44,
    "text": "if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "self, msg = coroutine.yield()",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "self.receive = coroutine.wrap(function(self, len)\r\n          while true do\r\n            local line = recvBuffer\r\n            while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end\r\n    \r\n            if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end\r\n    \r\n            recvBuffer = string.sub(line, len+1)\r\n            line = string.sub(line, 1, len)\r\n    \r\n            self, len = coroutine.yield(line)\r\n          end\r\n        end)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "while true do\r\n            local line = recvBuffer\r\n            while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end\r\n    \r\n            if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end\r\n    \r\n            recvBuffer = string.sub(line, len+1)\r\n            line = string.sub(line, 1, len)\r\n    \r\n            self, len = coroutine.yield(line)\r\n          end",
    "type": "statement:while"
  }, {
    "id": 48,
    "text": "local line = recvBuffer",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end",
    "type": "statement:while"
  }, {
    "id": 50,
    "text": "mosync.maConnRead(connection, inBuffer, 1000)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end",
    "type": "statement:while"
  }, {
    "id": 52,
    "text": "if len ~= 0 then mosync.maWait(0) end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "local result = mosync.SysEventGetConnResult(event)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if result > 0 then line = line .. bufferToString(inBuffer, result) end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "line = line .. bufferToString(inBuffer, result)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if len == 0 then self, len = coroutine.yield(\"\") end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "self, len = coroutine.yield(\"\")",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "self, len = coroutine.yield(nil)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "len = string.find(line, \"\\n\") or string.len(line)",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "recvBuffer = string.sub(line, len+1)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "line = string.sub(line, 1, len)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "self, len = coroutine.yield(line)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "self.close = coroutine.wrap(function(self) \r\n          while true do\r\n            mosync.SysFree(inBuffer)\r\n            mosync.SysFree(outBuffer)\r\n            mosync.SysFree(event)\r\n            mosync.maConnClose(connection)\r\n            coroutine.yield(self)\r\n          end\r\n        end)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "while true do\r\n            mosync.SysFree(inBuffer)\r\n            mosync.SysFree(outBuffer)\r\n            mosync.SysFree(event)\r\n            mosync.maConnClose(connection)\r\n            coroutine.yield(self)\r\n          end",
    "type": "statement:while"
  }, {
    "id": 67,
    "text": "mosync.SysFree(inBuffer)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "mosync.SysFree(outBuffer)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "mosync.maConnClose(connection)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "coroutine.yield(self)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function(readfrom) -- writeto and timeout parameters are ignored\r\n    local canread = {}\r\n    for _,s in ipairs(readfrom) do\r\n      if s:receive(0) then canread[s] = true end\r\n    end\r\n    return canread\r\n  end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function stringToBuffer(s, buffer)\r\n          local i = 0\r\n          for c in s:gmatch(\".\") do\r\n            i = i + 1\r\n            local b = s:byte(i)\r\n            mosync.SysBufferSetByte(buffer, i - 1, b)\r\n          end\r\n          return i\r\n        end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function bufferToString(buffer, len)\r\n          local s = \"\"\r\n          for i = 0, len - 1 do\r\n            local c = mosync.SysBufferGetByte(buffer, i)\r\n            s = s .. string.char(c)\r\n          end\r\n          return s\r\n        end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function(self) end",
    "type": "function"
  }, {
    "id": 79,
    "text": "function(self, msg)\r\n          while true do\r\n            local numberOfBytes = stringToBuffer(msg, outBuffer)\r\n            mosync.maConnWrite(connection, outBuffer, numberOfBytes)\r\n            while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end\r\n            self, msg = coroutine.yield()\r\n          end\r\n        end",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function(self, len)\r\n          while true do\r\n            local line = recvBuffer\r\n            while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end\r\n    \r\n            if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end\r\n    \r\n            recvBuffer = string.sub(line, len+1)\r\n            line = string.sub(line, 1, len)\r\n    \r\n            self, len = coroutine.yield(line)\r\n          end\r\n        end",
    "type": "function"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function(self) \r\n          while true do\r\n            mosync.SysFree(inBuffer)\r\n            mosync.SysFree(outBuffer)\r\n            mosync.SysFree(event)\r\n            mosync.maConnClose(connection)\r\n            coroutine.yield(self)\r\n          end\r\n        end",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function ()\r\n        local self = {}\r\n        local outBuffer = mosync.SysAlloc(1000)\r\n        local inBuffer = mosync.SysAlloc(1000)\r\n        local event = mosync.SysEventCreate()\r\n        local recvBuffer = \"\"\r\n        function stringToBuffer(s, buffer)\r\n          local i = 0\r\n          for c in s:gmatch(\".\") do\r\n            i = i + 1\r\n            local b = s:byte(i)\r\n            mosync.SysBufferSetByte(buffer, i - 1, b)\r\n          end\r\n          return i\r\n        end\r\n        function bufferToString(buffer, len)\r\n          local s = \"\"\r\n          for i = 0, len - 1 do\r\n            local c = mosync.SysBufferGetByte(buffer, i)\r\n            s = s .. string.char(c)\r\n          end\r\n          return s\r\n        end\r\n        self.send = coroutine.wrap(function(self, msg)\r\n          while true do\r\n            local numberOfBytes = stringToBuffer(msg, outBuffer)\r\n            mosync.maConnWrite(connection, outBuffer, numberOfBytes)\r\n            while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end\r\n            self, msg = coroutine.yield()\r\n          end\r\n        end)\r\n        self.receive = coroutine.wrap(function(self, len)\r\n          while true do\r\n            local line = recvBuffer\r\n            while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end\r\n    \r\n            if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end\r\n    \r\n            recvBuffer = string.sub(line, len+1)\r\n            line = string.sub(line, 1, len)\r\n    \r\n            self, len = coroutine.yield(line)\r\n          end\r\n        end)\r\n        self.close = coroutine.wrap(function(self) \r\n          while true do\r\n            mosync.SysFree(inBuffer)\r\n            mosync.SysFree(outBuffer)\r\n            mosync.SysFree(event)\r\n            mosync.maConnClose(connection)\r\n            coroutine.yield(self)\r\n          end\r\n        end)\r\n        return self\r\n      end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function(host, port)\r\n    while true do\r\n      local connection = mosync.maConnect(\"socket://\" .. host .. \":\" .. port)\r\n  \r\n      if connection > 0 then\r\n        local event = mosync.SysEventCreate()\r\n        while true do\r\n          mosync.maWait(0)\r\n          mosync.maGetEvent(event)\r\n          local eventType = mosync.SysEventGetType(event)\r\n          if (mosync.EVENT_TYPE_CONN == eventType and\r\n            mosync.SysEventGetConnHandle(event) == connection and\r\n            mosync.SysEventGetConnOpType(event) == mosync.CONNOP_CONNECT) then\r\n              -- result > 0 ? success : error\r\n              if not (mosync.SysEventGetConnResult(event) > 0) then connection = nil end\r\n              break\r\n          elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n            mosync.EventMonitor:HandleEvent(event)\r\n          end\r\n        end\r\n        mosync.SysFree(event)\r\n      end\r\n  \r\n      host, port = coroutine.yield(connection and (function ()\r\n        local self = {}\r\n        local outBuffer = mosync.SysAlloc(1000)\r\n        local inBuffer = mosync.SysAlloc(1000)\r\n        local event = mosync.SysEventCreate()\r\n        local recvBuffer = \"\"\r\n        function stringToBuffer(s, buffer)\r\n          local i = 0\r\n          for c in s:gmatch(\".\") do\r\n            i = i + 1\r\n            local b = s:byte(i)\r\n            mosync.SysBufferSetByte(buffer, i - 1, b)\r\n          end\r\n          return i\r\n        end\r\n        function bufferToString(buffer, len)\r\n          local s = \"\"\r\n          for i = 0, len - 1 do\r\n            local c = mosync.SysBufferGetByte(buffer, i)\r\n            s = s .. string.char(c)\r\n          end\r\n          return s\r\n        end\r\n        self.send = coroutine.wrap(function(self, msg)\r\n          while true do\r\n            local numberOfBytes = stringToBuffer(msg, outBuffer)\r\n            mosync.maConnWrite(connection, outBuffer, numberOfBytes)\r\n            while true do\r\n              mosync.maWait(0)\r\n              mosync.maGetEvent(event)\r\n              local eventType = mosync.SysEventGetType(event)\r\n              if (mosync.EVENT_TYPE_CONN == eventType and\r\n                  mosync.SysEventGetConnHandle(event) == connection and\r\n                  mosync.SysEventGetConnOpType(event) == mosync.CONNOP_WRITE) then\r\n                break\r\n              elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                mosync.EventMonitor:HandleEvent(event)\r\n              end\r\n            end\r\n            self, msg = coroutine.yield()\r\n          end\r\n        end)\r\n        self.receive = coroutine.wrap(function(self, len)\r\n          while true do\r\n            local line = recvBuffer\r\n            while (len and string.len(line) < len)     -- either we need len bytes\r\n               or (not len and not line:find(\"\\n\")) -- or one line (if no len specified)\r\n               or (len == 0) do -- only check for new data (select-like)\r\n              mosync.maConnRead(connection, inBuffer, 1000)\r\n              while true do\r\n                if len ~= 0 then mosync.maWait(0) end\r\n                mosync.maGetEvent(event)\r\n                local eventType = mosync.SysEventGetType(event)\r\n                if (mosync.EVENT_TYPE_CONN == eventType and\r\n                    mosync.SysEventGetConnHandle(event) == connection and\r\n                    mosync.SysEventGetConnOpType(event) == mosync.CONNOP_READ) then\r\n                  local result = mosync.SysEventGetConnResult(event)\r\n                  if result > 0 then line = line .. bufferToString(inBuffer, result) end\r\n                  if len == 0 then self, len = coroutine.yield(\"\") end\r\n                  break -- got the event we wanted; now check if we have all we need\r\n                elseif len == 0 then\r\n                  self, len = coroutine.yield(nil)\r\n                elseif mosync.EventMonitor and mosync.EventMonitor.HandleEvent then\r\n                  mosync.EventMonitor:HandleEvent(event)\r\n                end\r\n              end  \r\n            end\r\n    \r\n            if not len then\r\n              len = string.find(line, \"\\n\") or string.len(line)\r\n            end\r\n    \r\n            recvBuffer = string.sub(line, len+1)\r\n            line = string.sub(line, 1, len)\r\n    \r\n            self, len = coroutine.yield(line)\r\n          end\r\n        end)\r\n        self.close = coroutine.wrap(function(self) \r\n          while true do\r\n            mosync.SysFree(inBuffer)\r\n            mosync.SysFree(outBuffer)\r\n            mosync.SysFree(event)\r\n            mosync.maConnClose(connection)\r\n            coroutine.yield(self)\r\n          end\r\n        end)\r\n        return self\r\n      end)())\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "",
    "type": "function container"
  }, {
    "id": 90,
    "text": "maGetEvent",
    "type": "global function"
  }, {
    "id": 91,
    "text": "SysEventGetConnHandle",
    "type": "global function"
  }, {
    "id": 92,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 93,
    "text": "find",
    "type": "global function"
  }, {
    "id": 94,
    "text": "maConnClose",
    "type": "global function"
  }, {
    "id": 95,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 96,
    "text": "maConnect",
    "type": "global function"
  }, {
    "id": 97,
    "text": "SysFree",
    "type": "global function"
  }, {
    "id": 98,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 99,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 100,
    "text": "SysAlloc",
    "type": "global function"
  }, {
    "id": 101,
    "text": "SysEventGetType",
    "type": "global function"
  }, {
    "id": 102,
    "text": "maConnRead",
    "type": "global function"
  }, {
    "id": 103,
    "text": "maConnWrite",
    "type": "global function"
  }, {
    "id": 104,
    "text": "maWait",
    "type": "global function"
  }, {
    "id": 105,
    "text": "SysBufferSetByte",
    "type": "global function"
  }, {
    "id": 106,
    "text": "char",
    "type": "global function"
  }, {
    "id": 107,
    "text": "SysBufferGetByte",
    "type": "global function"
  }, {
    "id": 108,
    "text": "len",
    "type": "global function"
  }, {
    "id": 109,
    "text": "SysEventGetConnOpType",
    "type": "global function"
  }, {
    "id": 110,
    "text": "SysEventCreate",
    "type": "global function"
  }, {
    "id": 111,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 112,
    "text": "SysEventGetConnResult",
    "type": "global function"
  }, {
    "id": 113,
    "text": "",
    "type": "variable container"
  }, {
    "id": 114,
    "text": "",
    "type": "require container"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "global variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "interface container"
  }, {
    "id": 120,
    "text": "",
    "type": "interface"
  } ]
}