{
  "_filename": "autotest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/mobdebug/examples/autotest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "calls",
    "to": 6
  }, {
    "from": 3,
    "label": "calls",
    "to": 9
  }, {
    "from": 3,
    "label": "calls",
    "to": 11
  }, {
    "from": 3,
    "label": "calls",
    "to": 11
  }, {
    "from": 3,
    "label": "calls",
    "to": 12
  }, {
    "from": 3,
    "label": "calls",
    "to": 12
  }, {
    "from": 3,
    "label": "calls",
    "to": 10
  }, {
    "from": 3,
    "label": "calls",
    "to": 4
  }, {
    "from": 3,
    "label": "calls",
    "to": 7
  }, {
    "from": 3,
    "label": "calls",
    "to": 7
  }, {
    "from": 3,
    "label": "calls",
    "to": 8
  }, {
    "from": 3,
    "label": "calls",
    "to": 8
  }, {
    "from": 3,
    "label": "calls",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 3
  }, {
    "from": 1,
    "label": "contains",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 14
  }, {
    "from": 13,
    "label": "initializes",
    "to": 15
  }, {
    "from": 15,
    "label": "assigns",
    "to": 16
  }, {
    "from": 13,
    "label": "initializes",
    "to": 17
  }, {
    "from": 17,
    "label": "assigns",
    "to": 18
  }, {
    "from": 13,
    "label": "initializes",
    "to": 19
  }, {
    "from": 19,
    "label": "assigns",
    "to": 20
  }, {
    "from": 13,
    "label": "initializes",
    "to": 21
  }, {
    "from": 21,
    "label": "assigns",
    "to": 22
  }, {
    "from": 22,
    "label": "assigns",
    "to": 23
  }, {
    "from": 22,
    "label": "assigns",
    "to": 24
  }, {
    "from": 22,
    "label": "assigns",
    "to": 25
  }, {
    "from": 22,
    "label": "assigns",
    "to": 26
  }, {
    "from": 22,
    "label": "assigns",
    "to": 27
  }, {
    "from": 22,
    "label": "assigns",
    "to": 28
  }, {
    "from": 22,
    "label": "assigns",
    "to": 29
  }, {
    "from": 22,
    "label": "assigns",
    "to": 30
  }, {
    "from": 22,
    "label": "assigns",
    "to": 31
  }, {
    "from": 22,
    "label": "assigns",
    "to": 32
  }, {
    "from": 22,
    "label": "assigns",
    "to": 33
  }, {
    "from": 22,
    "label": "assigns",
    "to": 34
  }, {
    "from": 22,
    "label": "assigns",
    "to": 35
  }, {
    "from": 22,
    "label": "assigns",
    "to": 36
  }, {
    "from": 22,
    "label": "assigns",
    "to": 37
  }, {
    "from": 22,
    "label": "assigns",
    "to": 38
  }, {
    "from": 22,
    "label": "assigns",
    "to": 39
  }, {
    "from": 22,
    "label": "assigns",
    "to": 40
  }, {
    "from": 22,
    "label": "assigns",
    "to": 41
  }, {
    "from": 22,
    "label": "assigns",
    "to": 42
  }, {
    "from": 22,
    "label": "assigns",
    "to": 43
  }, {
    "from": 22,
    "label": "assigns",
    "to": 44
  }, {
    "from": 22,
    "label": "assigns",
    "to": 45
  }, {
    "from": 22,
    "label": "assigns",
    "to": 46
  }, {
    "from": 22,
    "label": "assigns",
    "to": 47
  }, {
    "from": 22,
    "label": "assigns",
    "to": 48
  }, {
    "from": 22,
    "label": "assigns",
    "to": 49
  }, {
    "from": 22,
    "label": "assigns",
    "to": 50
  }, {
    "from": 22,
    "label": "assigns",
    "to": 51
  }, {
    "from": 22,
    "label": "assigns",
    "to": 52
  }, {
    "from": 13,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 13,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 13,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 14,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "requires",
    "to": 2
  }, {
    "from": 14,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 5
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "autotest",
    "type": "module"
  }, {
    "id": 2,
    "text": "mobdebug",
    "type": "module"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "local function handle(params, client, options)\r\n  -- when `options.verbose` is not provided, use normal `print`; verbose output can be\r\n  -- disabled (`options.verbose == false`) or redirected (`options.verbose == function()...end`)\r\n  local verbose = not options or options.verbose ~= nil and options.verbose\r\n  local print = verbose and (type(verbose) == \"function\" and verbose or print) or function() end\r\n  local file, line, watch_idx\r\n  local _, _, command = string.find(params, \"^([a-z]+)\")\r\n  if command == \"run\" or command == \"step\" or command == \"out\"\r\n  or command == \"over\" or command == \"exit\" then\r\n    client:send(string.upper(command) .. \"\\n\")\r\n    client:receive() -- this should consume the first '200 OK' response\r\n    while true do\r\n      local done = true\r\n      local breakpoint = client:receive()\r\n      if not breakpoint then\r\n        print(\"Program finished\")\r\n        return nil, nil, false\r\n      end\r\n      local _, _, status = string.find(breakpoint, \"^(%d+)\")\r\n      if status == \"200\" then\r\n        -- don't need to do anything\r\n      elseif status == \"202\" then\r\n        _, _, file, line = string.find(breakpoint, \"^202 Paused%s+(.-)%s+(%d+)%s*$\")\r\n        if file and line then\r\n          print(\"Paused at file \" .. file .. \" line \" .. line)\r\n        end\r\n      elseif status == \"203\" then\r\n        _, _, file, line, watch_idx = string.find(breakpoint, \"^203 Paused%s+(.-)%s+(%d+)%s+(%d+)%s*$\")\r\n        if file and line and watch_idx then\r\n          print(\"Paused at file \" .. file .. \" line \" .. line .. \" (watch expression \" .. watch_idx .. \": [\" .. watches[watch_idx] .. \"])\")\r\n        end\r\n      elseif status == \"204\" then\r\n        local _, _, stream, size = string.find(breakpoint, \"^204 Output (%w+) (%d+)$\")\r\n        if stream and size then\r\n          local size = tonumber(size)\r\n          local msg = size > 0 and client:receive(size) or \"\"\r\n          print(msg)\r\n          if outputs[stream] then outputs[stream](msg) end\r\n          -- this was just the output, so go back reading the response\r\n          done = false\r\n        end\r\n      elseif status == \"401\" then\r\n        local _, _, size = string.find(breakpoint, \"^401 Error in Execution (%d+)$\")\r\n        if size then\r\n          local msg = client:receive(tonumber(size))\r\n          print(\"Error in remote application: \" .. msg)\r\n          return nil, nil, msg\r\n        end\r\n      else\r\n        print(\"Unknown error\")\r\n        return nil, nil, \"Debugger error: unexpected response '\" .. breakpoint .. \"'\"\r\n      end\r\n      if done then break end\r\n    end\r\n  elseif command == \"done\" then\r\n    client:send(string.upper(command) .. \"\\n\")\r\n    -- no response is expected\r\n  elseif command == \"setb\" or command == \"asetb\" then\r\n    _, _, _, file, line = string.find(params, \"^([a-z]+)%s+(.-)%s+(%d+)%s*$\")\r\n    if file and line then\r\n      -- if this is a file name, and not a file source\r\n      if not file:find('^\".*\"$') then\r\n        file = string.gsub(file, \"\\\\\", \"/\") -- convert slash\r\n        file = removebasedir(file, basedir)\r\n      end\r\n      client:send(\"SETB \" .. file .. \" \" .. line .. \"\\n\")\r\n      if command == \"asetb\" or client:receive() == \"200 OK\" then\r\n        set_breakpoint(file, line)\r\n      else\r\n        print(\"Error: breakpoint not inserted\")\r\n      end\r\n    else\r\n      print(\"Invalid command\")\r\n    end\r\n  elseif command == \"setw\" then\r\n    local _, _, exp = string.find(params, \"^[a-z]+%s+(.+)$\")\r\n    if exp then\r\n      client:send(\"SETW \" .. exp .. \"\\n\")\r\n      local answer = client:receive()\r\n      local _, _, watch_idx = string.find(answer, \"^200 OK (%d+)%s*$\")\r\n      if watch_idx then\r\n        watches[watch_idx] = exp\r\n        print(\"Inserted watch exp no. \" .. watch_idx)\r\n      else\r\n        local _, _, size = string.find(answer, \"^401 Error in Expression (%d+)$\")\r\n        if size then\r\n          local err = client:receive(tonumber(size)):gsub(\".-:%d+:%s*\",\"\")\r\n          print(\"Error: watch expression not set: \" .. err)\r\n        else\r\n          print(\"Error: watch expression not set\")\r\n        end\r\n      end\r\n    else\r\n      print(\"Invalid command\")\r\n    end\r\n  elseif command == \"delb\" or command == \"adelb\" then\r\n    _, _, _, file, line = string.find(params, \"^([a-z]+)%s+(.-)%s+(%d+)%s*$\")\r\n    if file and line then\r\n      -- if this is a file name, and not a file source\r\n      if not file:find('^\".*\"$') then\r\n        file = string.gsub(file, \"\\\\\", \"/\") -- convert slash\r\n        file = removebasedir(file, basedir)\r\n      end\r\n      client:send(\"DELB \" .. file .. \" \" .. line .. \"\\n\")\r\n      if command == \"adelb\" or client:receive() == \"200 OK\" then\r\n        remove_breakpoint(file, line)\r\n      else\r\n        print(\"Error: breakpoint not removed\")\r\n      end\r\n    else\r\n      print(\"Invalid command\")\r\n    end\r\n  elseif command == \"delallb\" then\r\n    local file, line = \"*\", 0\r\n    client:send(\"DELB \" .. file .. \" \" .. tostring(line) .. \"\\n\")\r\n    if client:receive() == \"200 OK\" then\r\n      remove_breakpoint(file, line)\r\n    else\r\n      print(\"Error: all breakpoints not removed\")\r\n    end\r\n  elseif command == \"delw\" then\r\n    local _, _, index = string.find(params, \"^[a-z]+%s+(%d+)%s*$\")\r\n    if index then\r\n      client:send(\"DELW \" .. index .. \"\\n\")\r\n      if client:receive() == \"200 OK\" then\r\n        watches[index] = nil\r\n      else\r\n        print(\"Error: watch expression not removed\")\r\n      end\r\n    else\r\n      print(\"Invalid command\")\r\n    end\r\n  elseif command == \"delallw\" then\r\n    for index, exp in pairs(watches) do\r\n      client:send(\"DELW \" .. index .. \"\\n\")\r\n      if client:receive() == \"200 OK\" then\r\n        watches[index] = nil\r\n      else\r\n        print(\"Error: watch expression at index \" .. index .. \" [\" .. exp .. \"] not removed\")\r\n      end\r\n    end\r\n  elseif command == \"eval\" or command == \"exec\"\r\n      or command == \"load\" or command == \"loadstring\"\r\n      or command == \"reload\" then\r\n    local _, _, exp = string.find(params, \"^[a-z]+%s+(.+)$\")\r\n    if exp or (command == \"reload\") then\r\n      if command == \"eval\" or command == \"exec\" then\r\n        exp = (exp:gsub(\"%-%-%[(=*)%[.-%]%1%]\", \"\") -- remove comments\r\n                  :gsub(\"%-%-.-\\n\", \" \") -- remove line comments\r\n                  :gsub(\"\\n\", \" \")) -- convert new lines\r\n        if command == \"eval\" then exp = \"return \" .. exp end\r\n        client:send(\"EXEC \" .. exp .. \"\\n\")\r\n      elseif command == \"reload\" then\r\n        client:send(\"LOAD 0 -\\n\")\r\n      elseif command == \"loadstring\" then\r\n        local _, _, _, file, lines = string.find(exp, \"^([\\\"'])(.-)%1%s+(.+)\")\r\n        if not file then\r\n           _, _, file, lines = string.find(exp, \"^(%S+)%s+(.+)\")\r\n        end\r\n        client:send(\"LOAD \" .. tostring(#lines) .. \" \" .. file .. \"\\n\")\r\n        client:send(lines)\r\n      else\r\n        local file = io.open(exp, \"r\")\r\n        if not file and pcall(require, \"winapi\") then\r\n          -- if file is not open and winapi is there, try with a short path;\r\n          -- this may be needed for unicode paths on windows\r\n          winapi.set_encoding(winapi.CP_UTF8)\r\n          local shortp = winapi.short_path(exp)\r\n          file = shortp and io.open(shortp, \"r\")\r\n        end\r\n        if not file then return nil, nil, \"Cannot open file \" .. exp end\r\n        -- read the file and remove the shebang line as it causes a compilation error\r\n        local lines = file:read(\"*all\"):gsub(\"^#!.-\\n\", \"\\n\")\r\n        file:close()\r\n\r\n        local file = string.gsub(exp, \"\\\\\", \"/\") -- convert slash\r\n        file = removebasedir(file, basedir)\r\n        client:send(\"LOAD \" .. tostring(#lines) .. \" \" .. file .. \"\\n\")\r\n        if #lines > 0 then client:send(lines) end\r\n      end\r\n      while true do\r\n        local params, err = client:receive()\r\n        if not params then\r\n          return nil, nil, \"Debugger connection \" .. (err or \"error\")\r\n        end\r\n        local done = true\r\n        local _, _, status, len = string.find(params, \"^(%d+).-%s+(%d+)%s*$\")\r\n        if status == \"200\" then\r\n          len = tonumber(len)\r\n          if len > 0 then\r\n            local status, res\r\n            local str = client:receive(len)\r\n            -- handle serialized table with results\r\n            local func, err = loadstring(str)\r\n            if func then\r\n              status, res = pcall(func)\r\n              if not status then err = res\r\n              elseif type(res) ~= \"table\" then\r\n                err = \"received \"..type(res)..\" instead of expected 'table'\"\r\n              end\r\n            end\r\n            if err then\r\n              print(\"Error in processing results: \" .. err)\r\n              return nil, nil, \"Error in processing results: \" .. err\r\n            end\r\n            print(unpack(res))\r\n            return res[1], res\r\n          end\r\n        elseif status == \"201\" then\r\n          _, _, file, line = string.find(params, \"^201 Started%s+(.-)%s+(%d+)%s*$\")\r\n        elseif status == \"202\" or params == \"200 OK\" then\r\n          -- do nothing; this only happens when RE/LOAD command gets the response\r\n          -- that was for the original command that was aborted\r\n        elseif status == \"204\" then\r\n          local _, _, stream, size = string.find(params, \"^204 Output (%w+) (%d+)$\")\r\n          if stream and size then\r\n            local size = tonumber(size)\r\n            local msg = size > 0 and client:receive(size) or \"\"\r\n            print(msg)\r\n            if outputs[stream] then outputs[stream](msg) end\r\n            -- this was just the output, so go back reading the response\r\n            done = false\r\n          end\r\n        elseif status == \"401\" then\r\n          len = tonumber(len)\r\n          local res = client:receive(len)\r\n          print(\"Error in expression: \" .. res)\r\n          return nil, nil, res\r\n        else\r\n          print(\"Unknown error\")\r\n          return nil, nil, \"Debugger error: unexpected response after EXEC/LOAD '\" .. params .. \"'\"\r\n        end\r\n        if done then break end\r\n      end\r\n    else\r\n      print(\"Invalid command\")\r\n    end\r\n  elseif command == \"listb\" then\r\n    for l, v in pairs(breakpoints) do\r\n      for f in pairs(v) do\r\n        print(f .. \": \" .. l)\r\n      end\r\n    end\r\n  elseif command == \"listw\" then\r\n    for i, v in pairs(watches) do\r\n      print(\"Watch exp. \" .. i .. \": \" .. v)\r\n    end\r\n  elseif command == \"suspend\" then\r\n    client:send(\"SUSPEND\\n\")\r\n  elseif command == \"stack\" then\r\n    client:send(\"STACK\\n\")\r\n    local resp = client:receive()\r\n    local _, _, status, res = string.find(resp, \"^(%d+)%s+%w+%s+(.+)%s*$\")\r\n    if status == \"200\" then\r\n      local func, err = loadstring(res)\r\n      if func == nil then\r\n        print(\"Error in stack information: \" .. err)\r\n        return nil, nil, err\r\n      end\r\n      local ok, stack = pcall(func)\r\n      if not ok then\r\n        print(\"Error in stack information: \" .. stack)\r\n        return nil, nil, stack\r\n      end\r\n      for _,frame in ipairs(stack) do\r\n        print(mobdebug.line(frame[1], {comment = false}))\r\n      end\r\n      return stack\r\n    elseif status == \"401\" then\r\n      local _, _, len = string.find(resp, \"%s+(%d+)%s*$\")\r\n      len = tonumber(len)\r\n      local res = len > 0 and client:receive(len) or \"Invalid stack information.\"\r\n      print(\"Error in expression: \" .. res)\r\n      return nil, nil, res\r\n    else\r\n      print(\"Unknown error\")\r\n      return nil, nil, \"Debugger error: unexpected response after STACK\"\r\n    end\r\n  elseif command == \"output\" then\r\n    local _, _, stream, mode = string.find(params, \"^[a-z]+%s+(%w+)%s+([dcr])%s*$\")\r\n    if stream and mode then\r\n      client:send(\"OUTPUT \"..stream..\" \"..mode..\"\\n\")\r\n      local resp, err = client:receive()\r\n      if not resp then\r\n        print(\"Unknown error: \"..err)\r\n        return nil, nil, \"Debugger connection error: \"..err\r\n      end\r\n      local _, _, status = string.find(resp, \"^(%d+)%s+%w+%s*$\")\r\n      if status == \"200\" then\r\n        print(\"Stream \"..stream..\" redirected\")\r\n        outputs[stream] = type(options) == 'table' and options.handler or nil\r\n      -- the client knows when she is doing, so install the handler\r\n      elseif type(options) == 'table' and options.handler then\r\n        outputs[stream] = options.handler\r\n      else\r\n        print(\"Unknown error\")\r\n        return nil, nil, \"Debugger error: can't redirect \"..stream\r\n      end\r\n    else\r\n      print(\"Invalid command\")\r\n    end\r\n  elseif command == \"basedir\" then\r\n    local _, _, dir = string.find(params, \"^[a-z]+%s+(.+)$\")\r\n    if dir then\r\n      dir = string.gsub(dir, \"\\\\\", \"/\") -- convert slash\r\n      if not string.find(dir, \"/$\") then dir = dir .. \"/\" end\r\n\r\n      local remdir = dir:match(\"\\t(.+)\")\r\n      if remdir then dir = dir:gsub(\"/?\\t.+\", \"/\") end\r\n      basedir = dir\r\n\r\n      client:send(\"BASEDIR \"..(remdir or dir)..\"\\n\")\r\n      local resp, err = client:receive()\r\n      if not resp then\r\n        print(\"Unknown error: \"..err)\r\n        return nil, nil, \"Debugger connection error: \"..err\r\n      end\r\n      local _, _, status = string.find(resp, \"^(%d+)%s+%w+%s*$\")\r\n      if status == \"200\" then\r\n        print(\"New base directory is \" .. basedir)\r\n      else\r\n        print(\"Unknown error\")\r\n        return nil, nil, \"Debugger error: unexpected response after BASEDIR\"\r\n      end\r\n    else\r\n      print(basedir)\r\n    end\r\n  elseif command == \"help\" then\r\n    print(\"setb <file> <line>    -- sets a breakpoint\")\r\n    print(\"delb <file> <line>    -- removes a breakpoint\")\r\n    print(\"delallb               -- removes all breakpoints\")\r\n    print(\"setw <exp>            -- adds a new watch expression\")\r\n    print(\"delw <index>          -- removes the watch expression at index\")\r\n    print(\"delallw               -- removes all watch expressions\")\r\n    print(\"run                   -- runs until next breakpoint\")\r\n    print(\"step                  -- runs until next line, stepping into function calls\")\r\n    print(\"over                  -- runs until next line, stepping over function calls\")\r\n    print(\"out                   -- runs until line after returning from current function\")\r\n    print(\"listb                 -- lists breakpoints\")\r\n    print(\"listw                 -- lists watch expressions\")\r\n    print(\"eval <exp>            -- evaluates expression on the current context and returns its value\")\r\n    print(\"exec <stmt>           -- executes statement on the current context\")\r\n    print(\"load <file>           -- loads a local file for debugging\")\r\n    print(\"reload                -- restarts the current debugging session\")\r\n    print(\"stack                 -- reports stack trace\")\r\n    print(\"output stdout <d|c|r> -- capture and redirect io stream (default|copy|redirect)\")\r\n    print(\"basedir [<path>]      -- sets the base path of the remote application, or shows the current one\")\r\n    print(\"done                  -- stops the debugger and continues application execution\")\r\n    print(\"exit                  -- exits debugger and the application\")\r\n  else\r\n    local _, _, spaces = string.find(params, \"^(%s*)$\")\r\n    if spaces then\r\n      return nil, nil, \"Empty command\"\r\n    else\r\n      print(\"Invalid command\")\r\n      return nil, nil, \"Invalid command\"\r\n    end\r\n  end\r\n  return file, line\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "socket",
    "type": "module"
  }, {
    "id": 6,
    "text": "bind",
    "type": "global function"
  }, {
    "id": 7,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 8,
    "text": "print",
    "type": "global function"
  }, {
    "id": 9,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 10,
    "text": "type",
    "type": "global function"
  }, {
    "id": 11,
    "text": "realprint",
    "type": "global function"
  }, {
    "id": 12,
    "text": "require",
    "type": "global function"
  }, {
    "id": 13,
    "text": "",
    "type": "variable container"
  }, {
    "id": 14,
    "text": "",
    "type": "require container"
  }, {
    "id": 15,
    "text": "",
    "type": "local variable"
  }, {
    "id": 16,
    "text": "",
    "type": "n/a"
  }, {
    "id": 17,
    "text": "",
    "type": "local variable"
  }, {
    "id": 18,
    "text": "",
    "type": "n/a"
  }, {
    "id": 19,
    "text": "",
    "type": "local variable"
  }, {
    "id": 20,
    "text": "",
    "type": "n/a"
  }, {
    "id": 21,
    "text": "",
    "type": "local variable"
  }, {
    "id": 22,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 23,
    "text": "",
    "type": "string"
  }, {
    "id": 24,
    "text": "",
    "type": "string"
  }, {
    "id": 25,
    "text": "",
    "type": "string"
  }, {
    "id": 26,
    "text": "",
    "type": "string"
  }, {
    "id": 27,
    "text": "",
    "type": "string"
  }, {
    "id": 28,
    "text": "",
    "type": "string"
  }, {
    "id": 29,
    "text": "",
    "type": "string"
  }, {
    "id": 30,
    "text": "",
    "type": "string"
  }, {
    "id": 31,
    "text": "",
    "type": "string"
  }, {
    "id": 32,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 33,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 34,
    "text": "",
    "type": "string"
  }, {
    "id": 35,
    "text": "",
    "type": "string"
  }, {
    "id": 36,
    "text": "",
    "type": "string"
  }, {
    "id": 37,
    "text": "",
    "type": "string"
  }, {
    "id": 38,
    "text": "",
    "type": "string"
  }, {
    "id": 39,
    "text": "",
    "type": "string"
  }, {
    "id": 40,
    "text": "",
    "type": "string"
  }, {
    "id": 41,
    "text": "",
    "type": "string"
  }, {
    "id": 42,
    "text": "",
    "type": "string"
  }, {
    "id": 43,
    "text": "",
    "type": "string"
  }, {
    "id": 44,
    "text": "",
    "type": "string"
  }, {
    "id": 45,
    "text": "",
    "type": "string"
  }, {
    "id": 46,
    "text": "",
    "type": "string"
  }, {
    "id": 47,
    "text": "",
    "type": "string"
  }, {
    "id": 48,
    "text": "",
    "type": "string"
  }, {
    "id": 49,
    "text": "",
    "type": "string"
  }, {
    "id": 50,
    "text": "",
    "type": "string"
  }, {
    "id": 51,
    "text": "",
    "type": "string"
  }, {
    "id": 52,
    "text": "",
    "type": "string"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "number"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "string"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "string"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  } ]
}