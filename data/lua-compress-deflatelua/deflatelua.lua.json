{
  "_filename": "deflatelua.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-compress-deflatelua/module/lmod/compress/deflatelua.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 343
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 18
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 18
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 18
  }, {
    "from": 30,
    "label": "has",
    "to": 18
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 34
  }, {
    "from": 37,
    "label": "has",
    "to": 35
  }, {
    "from": 37,
    "label": "has",
    "to": 18
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 39,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 48
  }, {
    "from": 39,
    "label": "has",
    "to": 18
  }, {
    "from": 39,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 43
  }, {
    "from": 51,
    "label": "has",
    "to": 44
  }, {
    "from": 51,
    "label": "has",
    "to": 45
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 18
  }, {
    "from": 53,
    "label": "has",
    "to": 18
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 56
  }, {
    "from": 59,
    "label": "has",
    "to": 57
  }, {
    "from": 59,
    "label": "has",
    "to": 18
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 54
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 18
  }, {
    "from": 61,
    "label": "has",
    "to": 18
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 64
  }, {
    "from": 69,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 69,
    "label": "has",
    "to": 18
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 54
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 67
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 74,
    "label": "has",
    "to": 18
  }, {
    "from": 74,
    "label": "has",
    "to": 18
  }, {
    "from": 71,
    "label": "has",
    "to": 18
  }, {
    "from": 71,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 67
  }, {
    "from": 80,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 80,
    "label": "has",
    "to": 18
  }, {
    "from": 80,
    "label": "has",
    "to": 18
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 54
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 18
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 86,
    "label": "has",
    "to": 18
  }, {
    "from": 86,
    "label": "has",
    "to": 93
  }, {
    "from": 86,
    "label": "has",
    "to": 94
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 86,
    "label": "has",
    "to": 96
  }, {
    "from": 86,
    "label": "has",
    "to": 18
  }, {
    "from": 82,
    "label": "has",
    "to": 97
  }, {
    "from": 82,
    "label": "has",
    "to": 18
  }, {
    "from": 82,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 18
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 87
  }, {
    "from": 101,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 101,
    "label": "has",
    "to": 18
  }, {
    "from": 101,
    "label": "has",
    "to": 93
  }, {
    "from": 101,
    "label": "has",
    "to": 94
  }, {
    "from": 101,
    "label": "has",
    "to": 95
  }, {
    "from": 101,
    "label": "has",
    "to": 96
  }, {
    "from": 101,
    "label": "has",
    "to": 18
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 18
  }, {
    "from": 103,
    "label": "has",
    "to": 18
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 104
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 18
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 114
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 121,
    "label": "has",
    "to": 125
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 124
  }, {
    "from": 119,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 18
  }, {
    "from": 119,
    "label": "has",
    "to": 130
  }, {
    "from": 119,
    "label": "has",
    "to": 131
  }, {
    "from": 119,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 119,
    "label": "has",
    "to": 138
  }, {
    "from": 119,
    "label": "has",
    "to": 139
  }, {
    "from": 119,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 119,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 143,
    "label": "has",
    "to": 18
  }, {
    "from": 119,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 18
  }, {
    "from": 119,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 130
  }, {
    "from": 150,
    "label": "has",
    "to": 131
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 156
  }, {
    "from": 152,
    "label": "has",
    "to": 157
  }, {
    "from": 151,
    "label": "has",
    "to": 158
  }, {
    "from": 151,
    "label": "has",
    "to": 159
  }, {
    "from": 150,
    "label": "has",
    "to": 18
  }, {
    "from": 119,
    "label": "has",
    "to": 18
  }, {
    "from": 119,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 144
  }, {
    "from": 161,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 161,
    "label": "has",
    "to": 18
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 163,
    "label": "has",
    "to": 130
  }, {
    "from": 163,
    "label": "has",
    "to": 131
  }, {
    "from": 163,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 156
  }, {
    "from": 152,
    "label": "has",
    "to": 157
  }, {
    "from": 151,
    "label": "has",
    "to": 158
  }, {
    "from": 151,
    "label": "has",
    "to": 159
  }, {
    "from": 163,
    "label": "has",
    "to": 18
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 165,
    "label": "has",
    "to": 171
  }, {
    "from": 165,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 165,
    "label": "has",
    "to": 174
  }, {
    "from": 165,
    "label": "has",
    "to": 175
  }, {
    "from": 165,
    "label": "has",
    "to": 176
  }, {
    "from": 165,
    "label": "has",
    "to": 177
  }, {
    "from": 165,
    "label": "has",
    "to": 178
  }, {
    "from": 165,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 179,
    "label": "has",
    "to": 182
  }, {
    "from": 179,
    "label": "has",
    "to": 183
  }, {
    "from": 179,
    "label": "has",
    "to": 184
  }, {
    "from": 165,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 165,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 187,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 186
  }, {
    "from": 165,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 186
  }, {
    "from": 165,
    "label": "has",
    "to": 197
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 165,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 198
  }, {
    "from": 165,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 200,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 186
  }, {
    "from": 200,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 165,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 194,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 186
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 208,
    "label": "has",
    "to": 209
  }, {
    "from": 208,
    "label": "has",
    "to": 210
  }, {
    "from": 208,
    "label": "has",
    "to": 211
  }, {
    "from": 208,
    "label": "has",
    "to": 212
  }, {
    "from": 208,
    "label": "has",
    "to": 213
  }, {
    "from": 208,
    "label": "has",
    "to": 214
  }, {
    "from": 208,
    "label": "has",
    "to": 215
  }, {
    "from": 208,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 208,
    "label": "has",
    "to": 218
  }, {
    "from": 208,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 208,
    "label": "has",
    "to": 221
  }, {
    "from": 208,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 208,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 208,
    "label": "has",
    "to": 18
  }, {
    "from": 208,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 228,
    "label": "has",
    "to": 231
  }, {
    "from": 228,
    "label": "has",
    "to": 232
  }, {
    "from": 228,
    "label": "has",
    "to": 233
  }, {
    "from": 228,
    "label": "has",
    "to": 234
  }, {
    "from": 228,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 235,
    "label": "has",
    "to": 237
  }, {
    "from": 235,
    "label": "has",
    "to": 238
  }, {
    "from": 228,
    "label": "has",
    "to": 239
  }, {
    "from": 228,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 243
  }, {
    "from": 240,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 246
  }, {
    "from": 244,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 247,
    "label": "has",
    "to": 250
  }, {
    "from": 247,
    "label": "has",
    "to": 251
  }, {
    "from": 247,
    "label": "has",
    "to": 252
  }, {
    "from": 247,
    "label": "has",
    "to": 253
  }, {
    "from": 247,
    "label": "has",
    "to": 252
  }, {
    "from": 247,
    "label": "has",
    "to": 254
  }, {
    "from": 244,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 240,
    "label": "has",
    "to": 258
  }, {
    "from": 240,
    "label": "has",
    "to": 18
  }, {
    "from": 228,
    "label": "has",
    "to": 259
  }, {
    "from": 228,
    "label": "has",
    "to": 260
  }, {
    "from": 228,
    "label": "has",
    "to": 261
  }, {
    "from": 228,
    "label": "has",
    "to": 262
  }, {
    "from": 228,
    "label": "has",
    "to": 18
  }, {
    "from": 228,
    "label": "has",
    "to": 263
  }, {
    "from": 264,
    "label": "has",
    "to": 241
  }, {
    "from": 264,
    "label": "has",
    "to": 242
  }, {
    "from": 264,
    "label": "has",
    "to": 243
  }, {
    "from": 264,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 246
  }, {
    "from": 244,
    "label": "has",
    "to": 247
  }, {
    "from": 247,
    "label": "has",
    "to": 248
  }, {
    "from": 247,
    "label": "has",
    "to": 249
  }, {
    "from": 247,
    "label": "has",
    "to": 250
  }, {
    "from": 247,
    "label": "has",
    "to": 251
  }, {
    "from": 247,
    "label": "has",
    "to": 252
  }, {
    "from": 247,
    "label": "has",
    "to": 253
  }, {
    "from": 247,
    "label": "has",
    "to": 252
  }, {
    "from": 247,
    "label": "has",
    "to": 254
  }, {
    "from": 244,
    "label": "has",
    "to": 255
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 264,
    "label": "has",
    "to": 258
  }, {
    "from": 264,
    "label": "has",
    "to": 18
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 266,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 270,
    "label": "has",
    "to": 272
  }, {
    "from": 270,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 273,
    "label": "has",
    "to": 276
  }, {
    "from": 276,
    "label": "has",
    "to": 277
  }, {
    "from": 270,
    "label": "has",
    "to": 278
  }, {
    "from": 270,
    "label": "has",
    "to": 279
  }, {
    "from": 268,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 120
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 282
  }, {
    "from": 281,
    "label": "has",
    "to": 283
  }, {
    "from": 280,
    "label": "has",
    "to": 284
  }, {
    "from": 280,
    "label": "has",
    "to": 285
  }, {
    "from": 268,
    "label": "has",
    "to": 286
  }, {
    "from": 268,
    "label": "has",
    "to": 287
  }, {
    "from": 268,
    "label": "has",
    "to": 288
  }, {
    "from": 268,
    "label": "has",
    "to": 289
  }, {
    "from": 268,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 290,
    "label": "has",
    "to": 272
  }, {
    "from": 290,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 275
  }, {
    "from": 292,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 277
  }, {
    "from": 290,
    "label": "has",
    "to": 295
  }, {
    "from": 268,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 120
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 296,
    "label": "has",
    "to": 300
  }, {
    "from": 268,
    "label": "has",
    "to": 301
  }, {
    "from": 268,
    "label": "has",
    "to": 302
  }, {
    "from": 268,
    "label": "has",
    "to": 303
  }, {
    "from": 268,
    "label": "has",
    "to": 304
  }, {
    "from": 268,
    "label": "has",
    "to": 305
  }, {
    "from": 268,
    "label": "has",
    "to": 306
  }, {
    "from": 306,
    "label": "has",
    "to": 307
  }, {
    "from": 306,
    "label": "has",
    "to": 308
  }, {
    "from": 266,
    "label": "has",
    "to": 18
  }, {
    "from": 266,
    "label": "has",
    "to": 18
  }, {
    "from": 266,
    "label": "has",
    "to": 309
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 312
  }, {
    "from": 310,
    "label": "has",
    "to": 313
  }, {
    "from": 310,
    "label": "has",
    "to": 314
  }, {
    "from": 310,
    "label": "has",
    "to": 315
  }, {
    "from": 310,
    "label": "has",
    "to": 316
  }, {
    "from": 310,
    "label": "has",
    "to": 317
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 317,
    "label": "has",
    "to": 319
  }, {
    "from": 310,
    "label": "has",
    "to": 320
  }, {
    "from": 320,
    "label": "has",
    "to": 321
  }, {
    "from": 320,
    "label": "has",
    "to": 322
  }, {
    "from": 320,
    "label": "has",
    "to": 323
  }, {
    "from": 320,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 324,
    "label": "has",
    "to": 326
  }, {
    "from": 320,
    "label": "has",
    "to": 327
  }, {
    "from": 320,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 330
  }, {
    "from": 328,
    "label": "has",
    "to": 331
  }, {
    "from": 320,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 320,
    "label": "has",
    "to": 334
  }, {
    "from": 310,
    "label": "has",
    "to": 18
  }, {
    "from": 310,
    "label": "has",
    "to": 335
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 336,
    "label": "has",
    "to": 338
  }, {
    "from": 336,
    "label": "has",
    "to": 339
  }, {
    "from": 336,
    "label": "has",
    "to": 340
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 336,
    "label": "has",
    "to": 342
  }, {
    "from": 343,
    "label": "has",
    "to": 337
  }, {
    "from": 343,
    "label": "has",
    "to": 338
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 343,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 343,
    "label": "has",
    "to": 347
  }, {
    "from": 343,
    "label": "has",
    "to": 348
  }, {
    "from": 343,
    "label": "has",
    "to": 349
  }, {
    "from": 349,
    "label": "has",
    "to": 350
  }, {
    "from": 349,
    "label": "has",
    "to": 351
  }, {
    "from": 343,
    "label": "has",
    "to": 321
  }, {
    "from": 343,
    "label": "has",
    "to": 352
  }, {
    "from": 343,
    "label": "has",
    "to": 353
  }, {
    "from": 343,
    "label": "has",
    "to": 354
  }, {
    "from": 354,
    "label": "has",
    "to": 355
  }, {
    "from": 354,
    "label": "has",
    "to": 356
  }, {
    "from": 343,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 343,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 343,
    "label": "has",
    "to": 362
  }, {
    "from": 363,
    "label": "has",
    "to": 364
  }, {
    "from": 363,
    "label": "has",
    "to": 365
  }, {
    "from": 363,
    "label": "has",
    "to": 366
  }, {
    "from": 363,
    "label": "has",
    "to": 367
  }, {
    "from": 363,
    "label": "has",
    "to": 18
  }, {
    "from": 363,
    "label": "has",
    "to": 368
  }, {
    "from": 369,
    "label": "has",
    "to": 337
  }, {
    "from": 369,
    "label": "has",
    "to": 338
  }, {
    "from": 369,
    "label": "has",
    "to": 344
  }, {
    "from": 369,
    "label": "has",
    "to": 345
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 369,
    "label": "has",
    "to": 371
  }, {
    "from": 369,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 351
  }, {
    "from": 369,
    "label": "has",
    "to": 321
  }, {
    "from": 369,
    "label": "has",
    "to": 374
  }, {
    "from": 369,
    "label": "has",
    "to": 375
  }, {
    "from": 369,
    "label": "has",
    "to": 376
  }, {
    "from": 369,
    "label": "has",
    "to": 377
  }, {
    "from": 369,
    "label": "has",
    "to": 378
  }, {
    "from": 369,
    "label": "has",
    "to": 379
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 369,
    "label": "has",
    "to": 381
  }, {
    "from": 381,
    "label": "has",
    "to": 382
  }, {
    "from": 382,
    "label": "has",
    "to": 359
  }, {
    "from": 369,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 369,
    "label": "has",
    "to": 383
  }, {
    "from": 384,
    "label": "has",
    "to": 18
  }, {
    "from": 385,
    "label": "has",
    "to": 18
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 387,
    "label": "has",
    "to": 18
  }, {
    "from": 388,
    "label": "has",
    "to": 350
  }, {
    "from": 388,
    "label": "has",
    "to": 351
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 390,
    "label": "has",
    "to": 373
  }, {
    "from": 390,
    "label": "has",
    "to": 351
  }, {
    "from": 390,
    "label": "has",
    "to": 391
  }, {
    "from": 336,
    "label": "calls",
    "to": 111
  }, {
    "from": 343,
    "label": "calls",
    "to": 111
  }, {
    "from": 369,
    "label": "calls",
    "to": 111
  }, {
    "from": 343,
    "label": "calls",
    "to": 165
  }, {
    "from": 26,
    "label": "calls",
    "to": 394
  }, {
    "from": 266,
    "label": "calls",
    "to": 394
  }, {
    "from": 336,
    "label": "calls",
    "to": 13
  }, {
    "from": 119,
    "label": "calls",
    "to": 396
  }, {
    "from": 336,
    "label": "calls",
    "to": 310
  }, {
    "from": 343,
    "label": "calls",
    "to": 3
  }, {
    "from": 369,
    "label": "calls",
    "to": 3
  }, {
    "from": 165,
    "label": "calls",
    "to": 28
  }, {
    "from": 165,
    "label": "calls",
    "to": 28
  }, {
    "from": 165,
    "label": "calls",
    "to": 28
  }, {
    "from": 165,
    "label": "calls",
    "to": 28
  }, {
    "from": 103,
    "label": "calls",
    "to": 71
  }, {
    "from": 392,
    "label": "calls",
    "to": 30
  }, {
    "from": 119,
    "label": "calls",
    "to": 30
  }, {
    "from": 103,
    "label": "calls",
    "to": 399
  }, {
    "from": 111,
    "label": "calls",
    "to": 399
  }, {
    "from": 119,
    "label": "calls",
    "to": 400
  }, {
    "from": 119,
    "label": "calls",
    "to": 400
  }, {
    "from": 228,
    "label": "calls",
    "to": 264
  }, {
    "from": 228,
    "label": "calls",
    "to": 264
  }, {
    "from": 6,
    "label": "calls",
    "to": 403
  }, {
    "from": 310,
    "label": "calls",
    "to": 266
  }, {
    "from": 119,
    "label": "calls",
    "to": 161
  }, {
    "from": 119,
    "label": "calls",
    "to": 409
  }, {
    "from": 119,
    "label": "calls",
    "to": 26
  }, {
    "from": 119,
    "label": "calls",
    "to": 26
  }, {
    "from": 228,
    "label": "calls",
    "to": 26
  }, {
    "from": 228,
    "label": "calls",
    "to": 26
  }, {
    "from": 228,
    "label": "calls",
    "to": 26
  }, {
    "from": 228,
    "label": "calls",
    "to": 26
  }, {
    "from": 310,
    "label": "calls",
    "to": 26
  }, {
    "from": 310,
    "label": "calls",
    "to": 26
  }, {
    "from": 343,
    "label": "calls",
    "to": 410
  }, {
    "from": 369,
    "label": "calls",
    "to": 410
  }, {
    "from": 369,
    "label": "calls",
    "to": 208
  }, {
    "from": 336,
    "label": "calls",
    "to": 103
  }, {
    "from": 343,
    "label": "calls",
    "to": 103
  }, {
    "from": 369,
    "label": "calls",
    "to": 103
  }, {
    "from": 119,
    "label": "calls",
    "to": 395
  }, {
    "from": 266,
    "label": "calls",
    "to": 20
  }, {
    "from": 266,
    "label": "calls",
    "to": 20
  }, {
    "from": 310,
    "label": "calls",
    "to": 20
  }, {
    "from": 9,
    "label": "calls",
    "to": 397
  }, {
    "from": 228,
    "label": "calls",
    "to": 397
  }, {
    "from": 228,
    "label": "calls",
    "to": 119
  }, {
    "from": 228,
    "label": "calls",
    "to": 119
  }, {
    "from": 310,
    "label": "calls",
    "to": 119
  }, {
    "from": 310,
    "label": "calls",
    "to": 119
  }, {
    "from": 310,
    "label": "calls",
    "to": 228
  }, {
    "from": 103,
    "label": "calls",
    "to": 61
  }, {
    "from": 369,
    "label": "calls",
    "to": 363
  }, {
    "from": 392,
    "label": "calls",
    "to": 408
  }, {
    "from": 165,
    "label": "calls",
    "to": 6
  }, {
    "from": 165,
    "label": "calls",
    "to": 6
  }, {
    "from": 165,
    "label": "calls",
    "to": 6
  }, {
    "from": 165,
    "label": "calls",
    "to": 6
  }, {
    "from": 165,
    "label": "calls",
    "to": 6
  }, {
    "from": 165,
    "label": "calls",
    "to": 6
  }, {
    "from": 310,
    "label": "calls",
    "to": 6
  }, {
    "from": 310,
    "label": "calls",
    "to": 6
  }, {
    "from": 343,
    "label": "calls",
    "to": 6
  }, {
    "from": 343,
    "label": "calls",
    "to": 6
  }, {
    "from": 369,
    "label": "calls",
    "to": 6
  }, {
    "from": 266,
    "label": "calls",
    "to": 401
  }, {
    "from": 266,
    "label": "calls",
    "to": 401
  }, {
    "from": 103,
    "label": "calls",
    "to": 9
  }, {
    "from": 111,
    "label": "calls",
    "to": 9
  }, {
    "from": 165,
    "label": "calls",
    "to": 9
  }, {
    "from": 165,
    "label": "calls",
    "to": 9
  }, {
    "from": 165,
    "label": "calls",
    "to": 9
  }, {
    "from": 165,
    "label": "calls",
    "to": 9
  }, {
    "from": 165,
    "label": "calls",
    "to": 9
  }, {
    "from": 208,
    "label": "calls",
    "to": 9
  }, {
    "from": 208,
    "label": "calls",
    "to": 9
  }, {
    "from": 208,
    "label": "calls",
    "to": 9
  }, {
    "from": 208,
    "label": "calls",
    "to": 9
  }, {
    "from": 310,
    "label": "calls",
    "to": 9
  }, {
    "from": 343,
    "label": "calls",
    "to": 9
  }, {
    "from": 369,
    "label": "calls",
    "to": 9
  }, {
    "from": 343,
    "label": "calls",
    "to": 398
  }, {
    "from": 20,
    "label": "calls",
    "to": 405
  }, {
    "from": 343,
    "label": "calls",
    "to": 336
  }, {
    "from": 369,
    "label": "calls",
    "to": 336
  }, {
    "from": 165,
    "label": "calls",
    "to": 206
  }, {
    "from": 165,
    "label": "calls",
    "to": 206
  }, {
    "from": 30,
    "label": "calls",
    "to": 406
  }, {
    "from": 392,
    "label": "calls",
    "to": 406
  }, {
    "from": 111,
    "label": "calls",
    "to": 404
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 39,
    "label": "calls",
    "to": 51
  }, {
    "from": 39,
    "label": "calls",
    "to": 51
  }, {
    "from": 71,
    "label": "calls",
    "to": 51
  }, {
    "from": 103,
    "label": "calls",
    "to": 407
  }, {
    "from": 103,
    "label": "calls",
    "to": 407
  }, {
    "from": 111,
    "label": "calls",
    "to": 407
  }, {
    "from": 103,
    "label": "calls",
    "to": 53
  }, {
    "from": 103,
    "label": "calls",
    "to": 82
  }, {
    "from": 103,
    "label": "calls",
    "to": 82
  }, {
    "from": 103,
    "label": "calls",
    "to": 82
  }, {
    "from": 111,
    "label": "calls",
    "to": 402
  }, {
    "from": 1,
    "label": "contains",
    "to": 392
  }, {
    "from": 392,
    "label": "declares",
    "to": 3
  }, {
    "from": 392,
    "label": "declares",
    "to": 6
  }, {
    "from": 392,
    "label": "declares",
    "to": 9
  }, {
    "from": 392,
    "label": "declares",
    "to": 13
  }, {
    "from": 392,
    "label": "declares",
    "to": 20
  }, {
    "from": 392,
    "label": "declares",
    "to": 26
  }, {
    "from": 392,
    "label": "declares",
    "to": 28
  }, {
    "from": 392,
    "label": "declares",
    "to": 30
  }, {
    "from": 392,
    "label": "declares",
    "to": 37
  }, {
    "from": 392,
    "label": "declares",
    "to": 39
  }, {
    "from": 392,
    "label": "declares",
    "to": 51
  }, {
    "from": 392,
    "label": "declares",
    "to": 53
  }, {
    "from": 392,
    "label": "declares",
    "to": 59
  }, {
    "from": 392,
    "label": "declares",
    "to": 61
  }, {
    "from": 392,
    "label": "declares",
    "to": 69
  }, {
    "from": 392,
    "label": "declares",
    "to": 71
  }, {
    "from": 392,
    "label": "declares",
    "to": 80
  }, {
    "from": 392,
    "label": "declares",
    "to": 82
  }, {
    "from": 392,
    "label": "declares",
    "to": 99
  }, {
    "from": 392,
    "label": "declares",
    "to": 101
  }, {
    "from": 392,
    "label": "declares",
    "to": 103
  }, {
    "from": 392,
    "label": "declares",
    "to": 111
  }, {
    "from": 392,
    "label": "declares",
    "to": 118
  }, {
    "from": 392,
    "label": "declares",
    "to": 119
  }, {
    "from": 392,
    "label": "declares",
    "to": 161
  }, {
    "from": 392,
    "label": "declares",
    "to": 163
  }, {
    "from": 392,
    "label": "declares",
    "to": 165
  }, {
    "from": 392,
    "label": "declares",
    "to": 206
  }, {
    "from": 392,
    "label": "declares",
    "to": 208
  }, {
    "from": 392,
    "label": "declares",
    "to": 228
  }, {
    "from": 392,
    "label": "declares",
    "to": 264
  }, {
    "from": 392,
    "label": "declares",
    "to": 266
  }, {
    "from": 392,
    "label": "declares",
    "to": 310
  }, {
    "from": 392,
    "label": "declares",
    "to": 336
  }, {
    "from": 392,
    "label": "declares",
    "to": 343
  }, {
    "from": 392,
    "label": "declares",
    "to": 363
  }, {
    "from": 392,
    "label": "declares",
    "to": 369
  }, {
    "from": 392,
    "label": "declares",
    "to": 384
  }, {
    "from": 392,
    "label": "declares",
    "to": 385
  }, {
    "from": 392,
    "label": "declares",
    "to": 387
  }, {
    "from": 392,
    "label": "declares",
    "to": 388
  }, {
    "from": 392,
    "label": "declares",
    "to": 390
  }, {
    "from": 393,
    "label": "calls",
    "to": 369
  }, {
    "from": 393,
    "label": "calls",
    "to": 343
  }, {
    "from": 411,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 412
  }, {
    "from": 1,
    "label": "contains",
    "to": 413
  }, {
    "from": 412,
    "label": "initializes",
    "to": 414
  }, {
    "from": 414,
    "label": "assigns",
    "to": 415
  }, {
    "from": 412,
    "label": "initializes",
    "to": 416
  }, {
    "from": 416,
    "label": "assigns",
    "to": 417
  }, {
    "from": 412,
    "label": "initializes",
    "to": 418
  }, {
    "from": 418,
    "label": "assigns",
    "to": 419
  }, {
    "from": 412,
    "label": "initializes",
    "to": 420
  }, {
    "from": 420,
    "label": "assigns",
    "to": 421
  }, {
    "from": 412,
    "label": "initializes",
    "to": 422
  }, {
    "from": 422,
    "label": "assigns",
    "to": 423
  }, {
    "from": 412,
    "label": "initializes",
    "to": 424
  }, {
    "from": 424,
    "label": "assigns",
    "to": 425
  }, {
    "from": 412,
    "label": "initializes",
    "to": 426
  }, {
    "from": 426,
    "label": "assigns",
    "to": 427
  }, {
    "from": 412,
    "label": "initializes",
    "to": 428
  }, {
    "from": 428,
    "label": "assigns",
    "to": 429
  }, {
    "from": 412,
    "label": "initializes",
    "to": 430
  }, {
    "from": 430,
    "label": "assigns",
    "to": 431
  }, {
    "from": 412,
    "label": "initializes",
    "to": 432
  }, {
    "from": 432,
    "label": "assigns",
    "to": 433
  }, {
    "from": 412,
    "label": "initializes",
    "to": 434
  }, {
    "from": 434,
    "label": "assigns",
    "to": 435
  }, {
    "from": 412,
    "label": "initializes",
    "to": 436
  }, {
    "from": 436,
    "label": "assigns",
    "to": 437
  }, {
    "from": 412,
    "label": "initializes",
    "to": 438
  }, {
    "from": 438,
    "label": "assigns",
    "to": 439
  }, {
    "from": 412,
    "label": "initializes",
    "to": 440
  }, {
    "from": 440,
    "label": "assigns",
    "to": 441
  }, {
    "from": 412,
    "label": "initializes",
    "to": 442
  }, {
    "from": 442,
    "label": "assigns",
    "to": 443
  }, {
    "from": 412,
    "label": "initializes",
    "to": 444
  }, {
    "from": 444,
    "label": "assigns",
    "to": 445
  }, {
    "from": 412,
    "label": "initializes",
    "to": 446
  }, {
    "from": 446,
    "label": "assigns",
    "to": 447
  }, {
    "from": 412,
    "label": "initializes",
    "to": 448
  }, {
    "from": 448,
    "label": "assigns",
    "to": 449
  }, {
    "from": 412,
    "label": "initializes",
    "to": 450
  }, {
    "from": 450,
    "label": "assigns",
    "to": 451
  }, {
    "from": 412,
    "label": "initializes",
    "to": 452
  }, {
    "from": 452,
    "label": "assigns",
    "to": 453
  }, {
    "from": 412,
    "label": "initializes",
    "to": 454
  }, {
    "from": 412,
    "label": "initializes",
    "to": 455
  }, {
    "from": 412,
    "label": "initializes",
    "to": 456
  }, {
    "from": 412,
    "label": "initializes",
    "to": 457
  }, {
    "from": 412,
    "label": "initializes",
    "to": 458
  }, {
    "from": 412,
    "label": "initializes",
    "to": 459
  }, {
    "from": 459,
    "label": "assigns",
    "to": 460
  }, {
    "from": 412,
    "label": "initializes",
    "to": 461
  }, {
    "from": 461,
    "label": "assigns",
    "to": 462
  }, {
    "from": 412,
    "label": "initializes",
    "to": 463
  }, {
    "from": 463,
    "label": "assigns",
    "to": 464
  }, {
    "from": 413,
    "label": "initializes",
    "to": 465
  }, {
    "from": 465,
    "label": "requires",
    "to": 466
  }, {
    "from": 1,
    "label": "provides",
    "to": 467
  }, {
    "from": 448,
    "label": "represents",
    "to": 468
  }, {
    "from": 467,
    "label": "provides",
    "to": 468
  }, {
    "from": 469,
    "label": "contains",
    "to": 20
  }, {
    "from": 470,
    "label": "contains",
    "to": 20
  }, {
    "from": 469,
    "label": "contains",
    "to": 388
  }, {
    "from": 470,
    "label": "contains",
    "to": 388
  }, {
    "from": 469,
    "label": "contains",
    "to": 390
  }, {
    "from": 470,
    "label": "contains",
    "to": 390
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 385
  }, {
    "from": 349,
    "label": "hasArgument",
    "to": 388
  }, {
    "from": 372,
    "label": "hasArgument",
    "to": 390
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "deflatelua",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function call(...)\r\n  local opt = OptionParser{usage=\"%prog [options] [gzip-file...]\",\r\n                           version=string.format(\"gunzip %s\", version),\r\n                           add_help_option=false}\r\n  opt.add_option{\"-h\", \"--help\", action=\"store_true\", dest=\"help\",\r\n                 help=\"give this help\"}\r\n  opt.add_option{\r\n    \"-c\", \"--stdout\", dest=\"stdout\", action=\"store_true\",\r\n    help=\"write on standard output, keep original files unchanged\"}\r\n  opt.add_option{\r\n    \"-f\", \"--force\", dest=\"force\", action=\"store_true\",\r\n    help=\"force overwrite of output file\"}\r\n  opt.add_option{\r\n    \"--disable-crc\", dest=\"disable_crc\", action=\"store_true\",\r\n    help=\"skip CRC check (faster performance)\"}\r\n\r\n\r\n  local options, args = opt.parse_args()\r\n\r\n  local gzipfiles = args\r\n\r\n  if options.help then\r\n    opt.print_help()\r\n    os.exit()\r\n  end\r\n\r\n  local ok, err = xpcall(function()\r\n    local outfile_of = {}\r\n    local out_of = {}\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      local base = gzipfile:match('(.+)%.[gG][zZ]$')\r\n      if not base then\r\n        runtime_error(gzipfile .. ': unknown suffix')\r\n      end\r\n      outfile_of[gzipfile] = base\r\n\r\n      out_of[gzipfile] =\r\n        (options.stdout or not gzipfile) and assert(io.stdout)\r\n        or outfile_of[gzipfile]\r\n\r\n      if type(out_of[gzipfile]) == 'string' then\r\n        if file_exists(out_of[gzipfile]) then\r\n          io.stderr:write(out_of[gzipfile] ..\r\n            ' already exists; do you wish to overwrite(y or n)? ')\r\n          if not io.stdin:read'*l':match'^[yY]' then\r\n            runtime_error 'not overwritten'\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      local fh = gzipfile and runtime_assert(io.open(gzipfile, 'rb'))\r\n                 or assert(io.stdin)\r\n      local ofh = type(out_of[gzipfile]) == 'string' and\r\n        runtime_assert(io.open(out_of[gzipfile], 'wb'))\r\n        or out_of[gzipfile]\r\n\r\n      DEFLATE.gunzip {input=fh, output=ofh,\r\n        disable_crc=options.disable_crc}\r\n    end\r\n\r\n    for _,gzipfile in ipairs(gzipfiles) do\r\n      assert(os.remove(gzipfile))\r\n    end\r\n\r\n  end, debug_traceback)\r\n  if not ok then\r\n    if type(err) == 'table' then err = err[1] end\r\n    io.stderr:write('error: ' .. err, '\\n')\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function warn(s)\r\n  io.stderr:write(s, '\\n')\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "io.stderr:write(s, '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function debug(...)\r\n  print('DEBUG', ...)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "print('DEBUG', ...)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function runtime_error(s, level)\r\n  level = level or 1\r\n  error({s}, level+1)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "level = level or 1",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "error({s}, level+1)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function make_outstate(outbs)\r\n  local outstate = {}\r\n  outstate.outbs = outbs\r\n  outstate.window = {}\r\n  outstate.window_pos = 1\r\n  return outstate\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local outstate = {}",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "outstate.outbs = outbs",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "outstate.window = {}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "outstate.window_pos = 1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function output(outstate, byte)\r\n  -- debug('OUTPUT:', s)\r\n  local window_pos = outstate.window_pos\r\n  outstate.outbs(byte)\r\n  outstate.window[window_pos] = byte\r\n  outstate.window_pos = window_pos % 32768 + 1  -- 32K\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local window_pos = outstate.window_pos",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "outstate.outbs(byte)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "outstate.window[window_pos] = byte",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "outstate.window_pos = window_pos % 32768 + 1",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function noeof(val)\r\n  return assert(val, 'unexpected end of file')\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function hasbit(bits, bit)\r\n  return bits % (bit + bit) >= bit\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function memoize(f)\r\n  local mt = {}\r\n  local t = setmetatable({}, mt)\r\n  function mt:__index(k)\r\n    local v = f(k)\r\n    t[k] = v\r\n    return v\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local mt = {}",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local t = setmetatable({}, mt)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "function mt:__index(k)\r\n    local v = f(k)\r\n    t[k] = v\r\n    return v\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 34,
    "text": "local v = f(k)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "t[k] = v",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function mt:__index(k)\r\n    local v = f(k)\r\n    t[k] = v\r\n    return v\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function bits_tostring(bits, nbits)\r\n  local s = ''\r\n  local tmp = bits\r\n  local function f()\r\n    local b = tmp % 2 == 1 and 1 or 0\r\n    s = s .. b\r\n    tmp = (tmp - b) / 2\r\n  end\r\n  if nbits then\r\n    for i=1,nbits do f() end\r\n  else\r\n    while tmp ~= 0 do f() end\r\n  end\r\n\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local s = ''",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local tmp = bits",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local function f()\r\n    local b = tmp % 2 == 1 and 1 or 0\r\n    s = s .. b\r\n    tmp = (tmp - b) / 2\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 43,
    "text": "local b = tmp % 2 == 1 and 1 or 0",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "s = s .. b",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "tmp = (tmp - b) / 2",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "if nbits then\r\n    for i=1,nbits do f() end\r\n  else\r\n    while tmp ~= 0 do f() end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "for i=1,nbits do f() end",
    "type": "statement:numericfor"
  }, {
    "id": 48,
    "text": "f()",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "while tmp ~= 0 do f() end",
    "type": "statement:while"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function f()\r\n    local b = tmp % 2 == 1 and 1 or 0\r\n    s = s .. b\r\n    tmp = (tmp - b) / 2\r\n  end",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function bytestream_from_file(fh)\r\n  local o = {}\r\n  function o:read()\r\n    local sb = fh:read(1)\r\n    if sb then return sb:byte() end\r\n  end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local o = {}",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "function o:read()\r\n    local sb = fh:read(1)\r\n    if sb then return sb:byte() end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 56,
    "text": "local sb = fh:read(1)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if sb then return sb:byte() end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function o:read()\r\n    local sb = fh:read(1)\r\n    if sb then return sb:byte() end\r\n  end",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function bytestream_from_string(s)\r\n  local i = 1\r\n  local o = {}\r\n  function o:read()\r\n    local by\r\n    if i <= #s then\r\n      by = s:byte(i)\r\n      i = i + 1\r\n    end\r\n    return by\r\n  end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "function o:read()\r\n    local by\r\n    if i <= #s then\r\n      by = s:byte(i)\r\n      i = i + 1\r\n    end\r\n    return by\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 64,
    "text": "local by",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if i <= #s then\r\n      by = s:byte(i)\r\n      i = i + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "by = s:byte(i)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function o:read()\r\n    local by\r\n    if i <= #s then\r\n      by = s:byte(i)\r\n      i = i + 1\r\n    end\r\n    return by\r\n  end",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "local function bytestream_from_function(f)\r\n  local i = 0\r\n  local buffer = ''\r\n  local o = {}\r\n  function o:read()\r\n    i = i + 1\r\n    if i > #buffer then\r\n      buffer = f()\r\n      if not buffer then return end\r\n      i = 1\r\n    end\r\n    return buffer:byte(i,i)\r\n  end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "local buffer = ''",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "function o:read()\r\n    i = i + 1\r\n    if i > #buffer then\r\n      buffer = f()\r\n      if not buffer then return end\r\n      i = 1\r\n    end\r\n    return buffer:byte(i,i)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 75,
    "text": "if i > #buffer then\r\n      buffer = f()\r\n      if not buffer then return end\r\n      i = 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "buffer = f()",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "if not buffer then return end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "i = 1",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function o:read()\r\n    i = i + 1\r\n    if i > #buffer then\r\n      buffer = f()\r\n      if not buffer then return end\r\n      i = 1\r\n    end\r\n    return buffer:byte(i,i)\r\n  end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "local function bitstream_from_bytestream(bys)\r\n  local buf_byte = 0\r\n  local buf_nbit = 0\r\n  local o = {}\r\n\r\n  function o:nbits_left_in_byte()\r\n    return buf_nbit\r\n  end\r\n\r\n  function o:read(nbits)\r\n    nbits = nbits or 1\r\n    while buf_nbit < nbits do\r\n      local byte = bys:read()\r\n      if not byte then return end  -- note: more calls also return nil\r\n      buf_byte = buf_byte + pow2[buf_nbit] * byte\r\n      buf_nbit = buf_nbit + 8\r\n    end\r\n    local m = pow2[nbits]\r\n    local bits = buf_byte % m\r\n    buf_byte = (buf_byte - bits) / m\r\n    buf_nbit = buf_nbit - nbits\r\n    return bits\r\n  end\r\n  --[[NATIVE_BITOPS\r\n  function o:read(nbits)\r\n    nbits = nbits or 1\r\n    while buf_nbit < nbits do\r\n      local byte = bys:read()\r\n      if not byte then return end  -- note: more calls also return nil\r\n      buf_byte = buf_byte + lshift(byte, buf_nbit)\r\n      buf_nbit = buf_nbit + 8\r\n    end\r\n    local bits\r\n    if nbits == 0 then\r\n      bits = 0\r\n    elseif nbits == 32 then\r\n      bits = buf_byte\r\n      buf_byte = 0\r\n    else\r\n      bits = band(buf_byte, rshift(0xffffffff, 32 - nbits))\r\n      buf_byte = rshift(buf_byte, nbits)\r\n    end\r\n    buf_nbit = buf_nbit - nbits\r\n    return bits\r\n  end\r\n  --]]\r\n  \r\n  is_bitstream[o] = true\r\n\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local buf_byte = 0",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "local buf_nbit = 0",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "function o:nbits_left_in_byte()\r\n    return buf_nbit\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 86,
    "text": "function o:read(nbits)\r\n    nbits = nbits or 1\r\n    while buf_nbit < nbits do\r\n      local byte = bys:read()\r\n      if not byte then return end  -- note: more calls also return nil\r\n      buf_byte = buf_byte + pow2[buf_nbit] * byte\r\n      buf_nbit = buf_nbit + 8\r\n    end\r\n    local m = pow2[nbits]\r\n    local bits = buf_byte % m\r\n    buf_byte = (buf_byte - bits) / m\r\n    buf_nbit = buf_nbit - nbits\r\n    return bits\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 87,
    "text": "nbits = nbits or 1",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "while buf_nbit < nbits do\r\n      local byte = bys:read()\r\n      if not byte then return end  -- note: more calls also return nil\r\n      buf_byte = buf_byte + pow2[buf_nbit] * byte\r\n      buf_nbit = buf_nbit + 8\r\n    end",
    "type": "statement:while"
  }, {
    "id": 89,
    "text": "local byte = bys:read()",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if not byte then return end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "buf_byte = buf_byte + pow2[buf_nbit] * byte",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "buf_nbit = buf_nbit + 8",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "local m = pow2[nbits]",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local bits = buf_byte % m",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "buf_byte = (buf_byte - bits) / m",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "buf_nbit = buf_nbit - nbits",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "is_bitstream[o] = true",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function o:nbits_left_in_byte()\r\n    return buf_nbit\r\n  end",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function o:read(nbits)\r\n    nbits = nbits or 1\r\n    while buf_nbit < nbits do\r\n      local byte = bys:read()\r\n      if not byte then return end  -- note: more calls also return nil\r\n      buf_byte = buf_byte + pow2[buf_nbit] * byte\r\n      buf_nbit = buf_nbit + 8\r\n    end\r\n    local m = pow2[nbits]\r\n    local bits = buf_byte % m\r\n    buf_byte = (buf_byte - bits) / m\r\n    buf_nbit = buf_nbit - nbits\r\n    return bits\r\n  end",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "local function get_bitstream(o)\r\n  local bs\r\n  if is_bitstream[o] then\r\n    return o\r\n  elseif io.type(o) == 'file' then\r\n    bs = bitstream_from_bytestream(bytestream_from_file(o))\r\n  elseif type(o) == 'string' then\r\n    bs = bitstream_from_bytestream(bytestream_from_string(o))\r\n  elseif type(o) == 'function' then\r\n    bs = bitstream_from_bytestream(bytestream_from_function(o))\r\n  else\r\n    runtime_error 'unrecognized type'\r\n  end\r\n  return bs\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local bs",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if is_bitstream[o] then\r\n    return o\r\n  elseif io.type(o) == 'file' then\r\n    bs = bitstream_from_bytestream(bytestream_from_file(o))\r\n  elseif type(o) == 'string' then\r\n    bs = bitstream_from_bytestream(bytestream_from_string(o))\r\n  elseif type(o) == 'function' then\r\n    bs = bitstream_from_bytestream(bytestream_from_function(o))\r\n  else\r\n    runtime_error 'unrecognized type'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "bs = bitstream_from_bytestream(bytestream_from_file(o))",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "bs = bitstream_from_bytestream(bytestream_from_string(o))",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "bs = bitstream_from_bytestream(bytestream_from_function(o))",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "runtime_error 'unrecognized type'",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "local function get_obytestream(o)\r\n  local bs\r\n  if io.type(o) == 'file' then\r\n    bs = function(sbyte) o:write(string_char(sbyte)) end\r\n  elseif type(o) == 'function' then\r\n    bs = o\r\n  else\r\n    runtime_error('unrecognized type: ' .. tostring(o))\r\n  end\r\n  return bs\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "if io.type(o) == 'file' then\r\n    bs = function(sbyte) o:write(string_char(sbyte)) end\r\n  elseif type(o) == 'function' then\r\n    bs = o\r\n  else\r\n    runtime_error('unrecognized type: ' .. tostring(o))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 113,
    "text": "bs = function(sbyte) o:write(string_char(sbyte)) end",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "o:write(string_char(sbyte))",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "bs = o",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "runtime_error('unrecognized type: ' .. tostring(o))",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function(sbyte) o:write(string_char(sbyte)) end",
    "type": "function"
  }, {
    "id": 119,
    "text": "local function HuffmanTable(init, is_full)\r\n  local t = {}\r\n  if is_full then\r\n    for val,nbits in pairs(init) do\r\n      if nbits ~= 0 then\r\n        t[#t+1] = {val=val, nbits=nbits}\r\n        --debug('*',val,nbits)\r\n      end\r\n    end\r\n  else\r\n    for i=1,#init-2,2 do\r\n      local firstval, nbits, nextval = init[i], init[i+1], init[i+2]\r\n      --debug(val, nextval, nbits)\r\n      if nbits ~= 0 then\r\n        for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end\r\n      end\r\n    end\r\n  end\r\n  table_sort(t, function(a,b)\r\n    return a.nbits == b.nbits and a.val < b.val or a.nbits < b.nbits\r\n  end)\r\n\r\n  -- assign codes\r\n  local code = 1  -- leading 1 marker\r\n  local nbits = 0\r\n  for i,s in ipairs(t) do\r\n    if s.nbits ~= nbits then\r\n      code = code * pow2[s.nbits - nbits]\r\n      nbits = s.nbits\r\n    end\r\n    s.code = code\r\n    --debug('huffman code:', i, s.nbits, s.val, code, bits_tostring(code))\r\n    code = code + 1\r\n  end\r\n\r\n  local minbits = math.huge\r\n  local look = {}\r\n  for i,s in ipairs(t) do\r\n    minbits = math.min(minbits, s.nbits)\r\n    look[s.code] = s.val\r\n  end\r\n\r\n  --for _,o in ipairs(t) do\r\n  --  debug(':', o.nbits, o.val)\r\n  --end\r\n\r\n  -- function t:lookup(bits) return look[bits] end\r\n\r\n  local function msb(bits, nbits)\r\n    local res = 0\r\n    for i=1,nbits do\r\n      local b = bits % 2\r\n      bits = (bits - b) / 2\r\n      res = res * 2 + b\r\n    end\r\n    return res\r\n  end\r\n  --[[NATIVE_BITOPS\r\n  local function msb(bits, nbits)\r\n    local res = 0\r\n    for i=1,nbits do\r\n      res = lshift(res, 1) + band(bits, 1)\r\n      bits = rshift(bits, 1)\r\n    end\r\n    return res\r\n  end\r\n  --]]\r\n  \r\n  local tfirstcode = memoize(\r\n    function(bits) return pow2[minbits] + msb(bits, minbits) end)\r\n\r\n  function t:read(bs)\r\n    local code = 1 -- leading 1 marker\r\n    local nbits = 0\r\n    while 1 do\r\n      if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        code = code * 2 + b   -- MSB first\r\n        --[[NATIVE_BITOPS\r\n        code = lshift(code, 1) + b   -- MSB first\r\n        --]]\r\n      end\r\n      --debug('code?', code, bits_tostring(code))\r\n      local val = look[code]\r\n      if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end\r\n    end\r\n  end\r\n\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "if is_full then\r\n    for val,nbits in pairs(init) do\r\n      if nbits ~= 0 then\r\n        t[#t+1] = {val=val, nbits=nbits}\r\n        --debug('*',val,nbits)\r\n      end\r\n    end\r\n  else\r\n    for i=1,#init-2,2 do\r\n      local firstval, nbits, nextval = init[i], init[i+1], init[i+2]\r\n      --debug(val, nextval, nbits)\r\n      if nbits ~= 0 then\r\n        for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "for val,nbits in pairs(init) do\r\n      if nbits ~= 0 then\r\n        t[#t+1] = {val=val, nbits=nbits}\r\n        --debug('*',val,nbits)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 123,
    "text": "if nbits ~= 0 then\r\n        t[#t+1] = {val=val, nbits=nbits}\r\n        --debug('*',val,nbits)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "t[#t+1] = {val=val, nbits=nbits}",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "for i=1,#init-2,2 do\r\n      local firstval, nbits, nextval = init[i], init[i+1], init[i+2]\r\n      --debug(val, nextval, nbits)\r\n      if nbits ~= 0 then\r\n        for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 126,
    "text": "local firstval, nbits, nextval = init[i], init[i+1], init[i+2]",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "if nbits ~= 0 then\r\n        for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 128,
    "text": "for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 129,
    "text": "table_sort(t, function(a,b)\r\n    return a.nbits == b.nbits and a.val < b.val or a.nbits < b.nbits\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "local code = 1",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "local nbits = 0",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "for i,s in ipairs(t) do\r\n    if s.nbits ~= nbits then\r\n      code = code * pow2[s.nbits - nbits]\r\n      nbits = s.nbits\r\n    end\r\n    s.code = code\r\n    --debug('huffman code:', i, s.nbits, s.val, code, bits_tostring(code))\r\n    code = code + 1\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 133,
    "text": "if s.nbits ~= nbits then\r\n      code = code * pow2[s.nbits - nbits]\r\n      nbits = s.nbits\r\n    end",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "code = code * pow2[s.nbits - nbits]",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "nbits = s.nbits",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "s.code = code",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "code = code + 1",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "local minbits = math.huge",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "local look = {}",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "for i,s in ipairs(t) do\r\n    minbits = math.min(minbits, s.nbits)\r\n    look[s.code] = s.val\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 141,
    "text": "minbits = math.min(minbits, s.nbits)",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "look[s.code] = s.val",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "local function msb(bits, nbits)\r\n    local res = 0\r\n    for i=1,nbits do\r\n      local b = bits % 2\r\n      bits = (bits - b) / 2\r\n      res = res * 2 + b\r\n    end\r\n    return res\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 144,
    "text": "local res = 0",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "for i=1,nbits do\r\n      local b = bits % 2\r\n      bits = (bits - b) / 2\r\n      res = res * 2 + b\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 146,
    "text": "local b = bits % 2",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "bits = (bits - b) / 2",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "res = res * 2 + b",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "local tfirstcode = memoize(\r\n    function(bits) return pow2[minbits] + msb(bits, minbits) end)",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "function t:read(bs)\r\n    local code = 1 -- leading 1 marker\r\n    local nbits = 0\r\n    while 1 do\r\n      if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        code = code * 2 + b   -- MSB first\r\n        --[[NATIVE_BITOPS\r\n        code = lshift(code, 1) + b   -- MSB first\r\n        --]]\r\n      end\r\n      --debug('code?', code, bits_tostring(code))\r\n      local val = look[code]\r\n      if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 151,
    "text": "while 1 do\r\n      if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        code = code * 2 + b   -- MSB first\r\n        --[[NATIVE_BITOPS\r\n        code = lshift(code, 1) + b   -- MSB first\r\n        --]]\r\n      end\r\n      --debug('code?', code, bits_tostring(code))\r\n      local val = look[code]\r\n      if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 152,
    "text": "if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        code = code * 2 + b   -- MSB first\r\n        --[[NATIVE_BITOPS\r\n        code = lshift(code, 1) + b   -- MSB first\r\n        --]]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "code = tfirstcode[noeof(bs:read(minbits))]",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "nbits = nbits + minbits",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "local b = noeof(bs:read())",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "nbits = nbits + 1",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "code = code * 2 + b",
    "type": "statement:assign"
  }, {
    "id": 158,
    "text": "local val = look[code]",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end",
    "type": "statement:if"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "local function msb(bits, nbits)\r\n    local res = 0\r\n    for i=1,nbits do\r\n      local b = bits % 2\r\n      bits = (bits - b) / 2\r\n      res = res * 2 + b\r\n    end\r\n    return res\r\n  end",
    "type": "function"
  }, {
    "id": 162,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 163,
    "text": "function t:read(bs)\r\n    local code = 1 -- leading 1 marker\r\n    local nbits = 0\r\n    while 1 do\r\n      if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        code = code * 2 + b   -- MSB first\r\n        --[[NATIVE_BITOPS\r\n        code = lshift(code, 1) + b   -- MSB first\r\n        --]]\r\n      end\r\n      --debug('code?', code, bits_tostring(code))\r\n      local val = look[code]\r\n      if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "local function parse_gzip_header(bs)\r\n  -- local FLG_FTEXT = 2^0\r\n  local FLG_FHCRC = 2^1\r\n  local FLG_FEXTRA = 2^2\r\n  local FLG_FNAME = 2^3\r\n  local FLG_FCOMMENT = 2^4\r\n\r\n  local id1 = bs:read(8)\r\n  local id2 = bs:read(8)\r\n  if id1 ~= 31 or id2 ~= 139 then\r\n    runtime_error 'not in gzip format'\r\n  end\r\n  local cm = bs:read(8)  -- compression method\r\n  local flg = bs:read(8) -- FLaGs\r\n  local mtime = bs:read(32) -- Modification TIME\r\n  local xfl = bs:read(8) -- eXtra FLags\r\n  local os = bs:read(8) -- Operating System\r\n\r\n  if DEBUG then\r\n    debug(\"CM=\", cm)\r\n    debug(\"FLG=\", flg)\r\n    debug(\"MTIME=\", mtime)\r\n    -- debug(\"MTIME_str=\",os.date(\"%Y-%m-%d %H:%M:%S\",mtime)) -- non-portable\r\n    debug(\"XFL=\", xfl)\r\n    debug(\"OS=\", os)\r\n  end\r\n\r\n  if not os then runtime_error 'invalid header' end\r\n\r\n  if hasbit(flg, FLG_FEXTRA) then\r\n    local xlen = bs:read(16)\r\n    local extra = 0\r\n    for i=1,xlen do\r\n      extra = bs:read(8)\r\n    end\r\n    if not extra then runtime_error 'invalid header' end\r\n  end\r\n\r\n  local function parse_zstring(bs)\r\n    repeat\r\n      local by = bs:read(8)\r\n      if not by then runtime_error 'invalid header' end\r\n    until by == 0\r\n  end\r\n\r\n  if hasbit(flg, FLG_FNAME) then\r\n    parse_zstring(bs)\r\n  end\r\n\r\n  if hasbit(flg, FLG_FCOMMENT) then\r\n    parse_zstring(bs)\r\n  end\r\n\r\n  if hasbit(flg, FLG_FHCRC) then\r\n    local crc16 = bs:read(16)\r\n    if not crc16 then runtime_error 'invalid header' end\r\n    -- IMPROVE: check CRC.  where is an example .gz file that\r\n    -- has this set?\r\n    if DEBUG then\r\n      debug(\"CRC16=\", crc16)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "local FLG_FHCRC = 2^1",
    "type": "statement:localassign"
  }, {
    "id": 167,
    "text": "local FLG_FEXTRA = 2^2",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local FLG_FNAME = 2^3",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "local FLG_FCOMMENT = 2^4",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "local id1 = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "local id2 = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "if id1 ~= 31 or id2 ~= 139 then\r\n    runtime_error 'not in gzip format'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 173,
    "text": "runtime_error 'not in gzip format'",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "local cm = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "local flg = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "local mtime = bs:read(32)",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local xfl = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "local os = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "if DEBUG then\r\n    debug(\"CM=\", cm)\r\n    debug(\"FLG=\", flg)\r\n    debug(\"MTIME=\", mtime)\r\n    -- debug(\"MTIME_str=\",os.date(\"%Y-%m-%d %H:%M:%S\",mtime)) -- non-portable\r\n    debug(\"XFL=\", xfl)\r\n    debug(\"OS=\", os)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "debug(\"CM=\", cm)",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "debug(\"FLG=\", flg)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "debug(\"MTIME=\", mtime)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "debug(\"XFL=\", xfl)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "debug(\"OS=\", os)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "if not os then runtime_error 'invalid header' end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "runtime_error 'invalid header'",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "if hasbit(flg, FLG_FEXTRA) then\r\n    local xlen = bs:read(16)\r\n    local extra = 0\r\n    for i=1,xlen do\r\n      extra = bs:read(8)\r\n    end\r\n    if not extra then runtime_error 'invalid header' end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "local xlen = bs:read(16)",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "local extra = 0",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "for i=1,xlen do\r\n      extra = bs:read(8)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 191,
    "text": "extra = bs:read(8)",
    "type": "statement:assign"
  }, {
    "id": 192,
    "text": "if not extra then runtime_error 'invalid header' end",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "local function parse_zstring(bs)\r\n    repeat\r\n      local by = bs:read(8)\r\n      if not by then runtime_error 'invalid header' end\r\n    until by == 0\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 194,
    "text": "repeat\r\n      local by = bs:read(8)\r\n      if not by then runtime_error 'invalid header' end\r\n    until by == 0",
    "type": "statement:repeat"
  }, {
    "id": 195,
    "text": "local by = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "if not by then runtime_error 'invalid header' end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "if hasbit(flg, FLG_FNAME) then\r\n    parse_zstring(bs)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 198,
    "text": "parse_zstring(bs)",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "if hasbit(flg, FLG_FCOMMENT) then\r\n    parse_zstring(bs)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 200,
    "text": "if hasbit(flg, FLG_FHCRC) then\r\n    local crc16 = bs:read(16)\r\n    if not crc16 then runtime_error 'invalid header' end\r\n    -- IMPROVE: check CRC.  where is an example .gz file that\r\n    -- has this set?\r\n    if DEBUG then\r\n      debug(\"CRC16=\", crc16)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "local crc16 = bs:read(16)",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "if not crc16 then runtime_error 'invalid header' end",
    "type": "statement:if"
  }, {
    "id": 203,
    "text": "if DEBUG then\r\n      debug(\"CRC16=\", crc16)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "debug(\"CRC16=\", crc16)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "local function parse_zstring(bs)\r\n    repeat\r\n      local by = bs:read(8)\r\n      if not by then runtime_error 'invalid header' end\r\n    until by == 0\r\n  end",
    "type": "function"
  }, {
    "id": 207,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 208,
    "text": "local function parse_zlib_header(bs)\r\n  local cm = bs:read(4) -- Compression Method\r\n  local cinfo = bs:read(4) -- Compression info\r\n  local fcheck = bs:read(5) -- FLaGs: FCHECK (check bits for CMF and FLG)\r\n  local fdict = bs:read(1) -- FLaGs: FDICT (present dictionary)\r\n  local flevel = bs:read(2) -- FLaGs: FLEVEL (compression level)\r\n  local cmf = cinfo * 16  + cm -- CMF (Compresion Method and flags)\r\n  local flg = fcheck + fdict * 32 + flevel * 64 -- FLaGs\r\n  \r\n  if cm ~= 8 then -- not \"deflate\"\r\n    runtime_error(\"unrecognized zlib compression method: \" + cm)\r\n  end\r\n  local window_size\r\n  if cinfo > 7 then\r\n    runtime_error(\"invalid zlib window size: cinfo=\" + cinfo)\r\n  end\r\n  local window_size = 2^(cinfo + 8)\r\n  \r\n  if (cmf*256 + flg) %  31 ~= 0 then\r\n    runtime_error(\"invalid zlib header (bad fcheck sum)\")\r\n  end\r\n  \r\n  if fdict == 1 then\r\n    runtime_error(\"FIX:TODO - FDICT not currently implemented\")\r\n    local dictid = bs:read(32)\r\n  end\r\n  \r\n  return window_size\r\nend",
    "type": "function"
  }, {
    "id": 209,
    "text": "local cm = bs:read(4)",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "local cinfo = bs:read(4)",
    "type": "statement:localassign"
  }, {
    "id": 211,
    "text": "local fcheck = bs:read(5)",
    "type": "statement:localassign"
  }, {
    "id": 212,
    "text": "local fdict = bs:read(1)",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "local flevel = bs:read(2)",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "local cmf = cinfo * 16  + cm",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "local flg = fcheck + fdict * 32 + flevel * 64",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "if cm ~= 8 then -- not \"deflate\"\r\n    runtime_error(\"unrecognized zlib compression method: \" + cm)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "runtime_error(\"unrecognized zlib compression method: \" + cm)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "local window_size",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "if cinfo > 7 then\r\n    runtime_error(\"invalid zlib window size: cinfo=\" + cinfo)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "runtime_error(\"invalid zlib window size: cinfo=\" + cinfo)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "local window_size = 2^(cinfo + 8)",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "if (cmf*256 + flg) %  31 ~= 0 then\r\n    runtime_error(\"invalid zlib header (bad fcheck sum)\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "runtime_error(\"invalid zlib header (bad fcheck sum)\")",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "if fdict == 1 then\r\n    runtime_error(\"FIX:TODO - FDICT not currently implemented\")\r\n    local dictid = bs:read(32)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "runtime_error(\"FIX:TODO - FDICT not currently implemented\")",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "local dictid = bs:read(32)",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "local function parse_huffmantables(bs)\r\n    local hlit = bs:read(5)  -- # of literal/length codes - 257\r\n    local hdist = bs:read(5) -- # of distance codes - 1\r\n    local hclen = noeof(bs:read(4)) -- # of code length codes - 4\r\n\r\n    local ncodelen_codes = hclen + 4\r\n    local codelen_init = {}\r\n    local codelen_vals = {\r\n      16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}\r\n    for i=1,ncodelen_codes do\r\n      local nbits = bs:read(3)\r\n      local val = codelen_vals[i]\r\n      codelen_init[val] = nbits\r\n    end\r\n    local codelentable = HuffmanTable(codelen_init, true)\r\n\r\n    local function decode(ncodes)\r\n      local init = {}\r\n      local nbits\r\n      local val = 0\r\n      while val < ncodes do\r\n        local codelen = codelentable:read(bs)\r\n        --FIX:check nil?\r\n        local nrepeat\r\n        if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end\r\n        for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end\r\n      end\r\n      local huffmantable = HuffmanTable(init, true)\r\n      return huffmantable\r\n    end\r\n\r\n    local nlit_codes = hlit + 257\r\n    local ndist_codes = hdist + 1\r\n\r\n    local littable = decode(nlit_codes)\r\n    local disttable = decode(ndist_codes)\r\n\r\n    return littable, disttable\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "local hlit = bs:read(5)",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "local hdist = bs:read(5)",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "local hclen = noeof(bs:read(4))",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "local ncodelen_codes = hclen + 4",
    "type": "statement:localassign"
  }, {
    "id": 233,
    "text": "local codelen_init = {}",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "local codelen_vals = {\r\n      16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "for i=1,ncodelen_codes do\r\n      local nbits = bs:read(3)\r\n      local val = codelen_vals[i]\r\n      codelen_init[val] = nbits\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 236,
    "text": "local nbits = bs:read(3)",
    "type": "statement:localassign"
  }, {
    "id": 237,
    "text": "local val = codelen_vals[i]",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "codelen_init[val] = nbits",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "local codelentable = HuffmanTable(codelen_init, true)",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "local function decode(ncodes)\r\n      local init = {}\r\n      local nbits\r\n      local val = 0\r\n      while val < ncodes do\r\n        local codelen = codelentable:read(bs)\r\n        --FIX:check nil?\r\n        local nrepeat\r\n        if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end\r\n        for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end\r\n      end\r\n      local huffmantable = HuffmanTable(init, true)\r\n      return huffmantable\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 241,
    "text": "local init = {}",
    "type": "statement:localassign"
  }, {
    "id": 242,
    "text": "local nbits",
    "type": "statement:localassign"
  }, {
    "id": 243,
    "text": "local val = 0",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "while val < ncodes do\r\n        local codelen = codelentable:read(bs)\r\n        --FIX:check nil?\r\n        local nrepeat\r\n        if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end\r\n        for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end\r\n      end",
    "type": "statement:while"
  }, {
    "id": 245,
    "text": "local codelen = codelentable:read(bs)",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "local nrepeat",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 248,
    "text": "nrepeat = 1",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "nbits = codelen",
    "type": "statement:assign"
  }, {
    "id": 250,
    "text": "nrepeat = 3 + noeof(bs:read(2))",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "nrepeat = 3 + noeof(bs:read(3))",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "nbits = 0",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "nrepeat = 11 + noeof(bs:read(7))",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "error 'ASSERT'",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 256,
    "text": "init[val] = nbits",
    "type": "statement:assign"
  }, {
    "id": 257,
    "text": "val = val + 1",
    "type": "statement:assign"
  }, {
    "id": 258,
    "text": "local huffmantable = HuffmanTable(init, true)",
    "type": "statement:localassign"
  }, {
    "id": 259,
    "text": "local nlit_codes = hlit + 257",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "local ndist_codes = hdist + 1",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "local littable = decode(nlit_codes)",
    "type": "statement:localassign"
  }, {
    "id": 262,
    "text": "local disttable = decode(ndist_codes)",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 264,
    "text": "local function decode(ncodes)\r\n      local init = {}\r\n      local nbits\r\n      local val = 0\r\n      while val < ncodes do\r\n        local codelen = codelentable:read(bs)\r\n        --FIX:check nil?\r\n        local nrepeat\r\n        if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end\r\n        for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end\r\n      end\r\n      local huffmantable = HuffmanTable(init, true)\r\n      return huffmantable\r\n    end",
    "type": "function"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "local function parse_compressed_item(bs, outstate, littable, disttable)\r\n  local val = littable:read(bs)\r\n  --debug(val, val < 256 and string_char(val))\r\n  if val < 256 then -- literal\r\n    output(outstate, val)\r\n  elseif val == 256 then -- end of block\r\n    return true\r\n  else\r\n    if not tdecode_len_base then\r\n      local t = {[257]=3}\r\n      local skip = 1\r\n      for i=258,285,4 do\r\n        for j=i,i+3 do t[j] = t[j-1] + skip end\r\n        if i ~= 258 then skip = skip * 2 end\r\n      end\r\n      t[285] = 258\r\n      tdecode_len_base = t\r\n      --for i=257,285 do debug('T1',i,t[i]) end\r\n    end\r\n    if not tdecode_len_nextrabits then\r\n      local t = {}\r\n      for i=257,285 do\r\n        local j = math_max(i - 261, 0)\r\n        t[i] = (j - (j % 4)) / 4\r\n        --[[NATIVE_BITOPS\r\n        t[i] = rshift(j, 2)\r\n        --]]\r\n      end\r\n      t[285] = 0\r\n      tdecode_len_nextrabits = t\r\n      --for i=257,285 do debug('T2',i,t[i]) end\r\n    end\r\n    local len_base = tdecode_len_base[val]\r\n    local nextrabits = tdecode_len_nextrabits[val]\r\n    local extrabits = bs:read(nextrabits)\r\n    local len = len_base + extrabits\r\n\r\n    if not tdecode_dist_base then\r\n      local t = {[0]=1}\r\n      local skip = 1\r\n      for i=1,29,2 do\r\n        for j=i,i+1 do t[j] = t[j-1] + skip end\r\n        if i ~= 1 then skip = skip * 2 end\r\n      end\r\n      tdecode_dist_base = t\r\n      --for i=0,29 do debug('T3',i,t[i]) end\r\n    end\r\n    if not tdecode_dist_nextrabits then\r\n      local t = {}\r\n      for i=0,29 do\r\n        local j = math_max(i - 2, 0)\r\n        t[i] = (j - (j % 2)) / 2\r\n        --[[NATIVE_BITOPS\r\n        t[i] = rshift(j, 1)\r\n        --]]\r\n      end\r\n      tdecode_dist_nextrabits = t\r\n      --for i=0,29 do debug('T4',i,t[i]) end\r\n    end\r\n    local dist_val = disttable:read(bs)\r\n    local dist_base = tdecode_dist_base[dist_val]\r\n    local dist_nextrabits = tdecode_dist_nextrabits[dist_val]\r\n    local dist_extrabits = bs:read(dist_nextrabits)\r\n    local dist = dist_base + dist_extrabits\r\n\r\n    --debug('BACK', len, dist)\r\n    for i=1,len do\r\n      local pos = (outstate.window_pos - 1 - dist) % 32768 + 1  -- 32K\r\n      output(outstate, assert(outstate.window[pos], 'invalid distance'))\r\n    end\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 267,
    "text": "local val = littable:read(bs)",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "if val < 256 then -- literal\r\n    output(outstate, val)\r\n  elseif val == 256 then -- end of block\r\n    return true\r\n  else\r\n    if not tdecode_len_base then\r\n      local t = {[257]=3}\r\n      local skip = 1\r\n      for i=258,285,4 do\r\n        for j=i,i+3 do t[j] = t[j-1] + skip end\r\n        if i ~= 258 then skip = skip * 2 end\r\n      end\r\n      t[285] = 258\r\n      tdecode_len_base = t\r\n      --for i=257,285 do debug('T1',i,t[i]) end\r\n    end\r\n    if not tdecode_len_nextrabits then\r\n      local t = {}\r\n      for i=257,285 do\r\n        local j = math_max(i - 261, 0)\r\n        t[i] = (j - (j % 4)) / 4\r\n        --[[NATIVE_BITOPS\r\n        t[i] = rshift(j, 2)\r\n        --]]\r\n      end\r\n      t[285] = 0\r\n      tdecode_len_nextrabits = t\r\n      --for i=257,285 do debug('T2',i,t[i]) end\r\n    end\r\n    local len_base = tdecode_len_base[val]\r\n    local nextrabits = tdecode_len_nextrabits[val]\r\n    local extrabits = bs:read(nextrabits)\r\n    local len = len_base + extrabits\r\n\r\n    if not tdecode_dist_base then\r\n      local t = {[0]=1}\r\n      local skip = 1\r\n      for i=1,29,2 do\r\n        for j=i,i+1 do t[j] = t[j-1] + skip end\r\n        if i ~= 1 then skip = skip * 2 end\r\n      end\r\n      tdecode_dist_base = t\r\n      --for i=0,29 do debug('T3',i,t[i]) end\r\n    end\r\n    if not tdecode_dist_nextrabits then\r\n      local t = {}\r\n      for i=0,29 do\r\n        local j = math_max(i - 2, 0)\r\n        t[i] = (j - (j % 2)) / 2\r\n        --[[NATIVE_BITOPS\r\n        t[i] = rshift(j, 1)\r\n        --]]\r\n      end\r\n      tdecode_dist_nextrabits = t\r\n      --for i=0,29 do debug('T4',i,t[i]) end\r\n    end\r\n    local dist_val = disttable:read(bs)\r\n    local dist_base = tdecode_dist_base[dist_val]\r\n    local dist_nextrabits = tdecode_dist_nextrabits[dist_val]\r\n    local dist_extrabits = bs:read(dist_nextrabits)\r\n    local dist = dist_base + dist_extrabits\r\n\r\n    --debug('BACK', len, dist)\r\n    for i=1,len do\r\n      local pos = (outstate.window_pos - 1 - dist) % 32768 + 1  -- 32K\r\n      output(outstate, assert(outstate.window[pos], 'invalid distance'))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 269,
    "text": "output(outstate, val)",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "if not tdecode_len_base then\r\n      local t = {[257]=3}\r\n      local skip = 1\r\n      for i=258,285,4 do\r\n        for j=i,i+3 do t[j] = t[j-1] + skip end\r\n        if i ~= 258 then skip = skip * 2 end\r\n      end\r\n      t[285] = 258\r\n      tdecode_len_base = t\r\n      --for i=257,285 do debug('T1',i,t[i]) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 271,
    "text": "local t = {[257]=3}",
    "type": "statement:localassign"
  }, {
    "id": 272,
    "text": "local skip = 1",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "for i=258,285,4 do\r\n        for j=i,i+3 do t[j] = t[j-1] + skip end\r\n        if i ~= 258 then skip = skip * 2 end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 274,
    "text": "for j=i,i+3 do t[j] = t[j-1] + skip end",
    "type": "statement:numericfor"
  }, {
    "id": 275,
    "text": "t[j] = t[j-1] + skip",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "if i ~= 258 then skip = skip * 2 end",
    "type": "statement:if"
  }, {
    "id": 277,
    "text": "skip = skip * 2",
    "type": "statement:assign"
  }, {
    "id": 278,
    "text": "t[285] = 258",
    "type": "statement:assign"
  }, {
    "id": 279,
    "text": "tdecode_len_base = t",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "if not tdecode_len_nextrabits then\r\n      local t = {}\r\n      for i=257,285 do\r\n        local j = math_max(i - 261, 0)\r\n        t[i] = (j - (j % 4)) / 4\r\n        --[[NATIVE_BITOPS\r\n        t[i] = rshift(j, 2)\r\n        --]]\r\n      end\r\n      t[285] = 0\r\n      tdecode_len_nextrabits = t\r\n      --for i=257,285 do debug('T2',i,t[i]) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 281,
    "text": "for i=257,285 do\r\n        local j = math_max(i - 261, 0)\r\n        t[i] = (j - (j % 4)) / 4\r\n        --[[NATIVE_BITOPS\r\n        t[i] = rshift(j, 2)\r\n        --]]\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 282,
    "text": "local j = math_max(i - 261, 0)",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "t[i] = (j - (j % 4)) / 4",
    "type": "statement:assign"
  }, {
    "id": 284,
    "text": "t[285] = 0",
    "type": "statement:assign"
  }, {
    "id": 285,
    "text": "tdecode_len_nextrabits = t",
    "type": "statement:assign"
  }, {
    "id": 286,
    "text": "local len_base = tdecode_len_base[val]",
    "type": "statement:localassign"
  }, {
    "id": 287,
    "text": "local nextrabits = tdecode_len_nextrabits[val]",
    "type": "statement:localassign"
  }, {
    "id": 288,
    "text": "local extrabits = bs:read(nextrabits)",
    "type": "statement:localassign"
  }, {
    "id": 289,
    "text": "local len = len_base + extrabits",
    "type": "statement:localassign"
  }, {
    "id": 290,
    "text": "if not tdecode_dist_base then\r\n      local t = {[0]=1}\r\n      local skip = 1\r\n      for i=1,29,2 do\r\n        for j=i,i+1 do t[j] = t[j-1] + skip end\r\n        if i ~= 1 then skip = skip * 2 end\r\n      end\r\n      tdecode_dist_base = t\r\n      --for i=0,29 do debug('T3',i,t[i]) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 291,
    "text": "local t = {[0]=1}",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "for i=1,29,2 do\r\n        for j=i,i+1 do t[j] = t[j-1] + skip end\r\n        if i ~= 1 then skip = skip * 2 end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 293,
    "text": "for j=i,i+1 do t[j] = t[j-1] + skip end",
    "type": "statement:numericfor"
  }, {
    "id": 294,
    "text": "if i ~= 1 then skip = skip * 2 end",
    "type": "statement:if"
  }, {
    "id": 295,
    "text": "tdecode_dist_base = t",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "if not tdecode_dist_nextrabits then\r\n      local t = {}\r\n      for i=0,29 do\r\n        local j = math_max(i - 2, 0)\r\n        t[i] = (j - (j % 2)) / 2\r\n        --[[NATIVE_BITOPS\r\n        t[i] = rshift(j, 1)\r\n        --]]\r\n      end\r\n      tdecode_dist_nextrabits = t\r\n      --for i=0,29 do debug('T4',i,t[i]) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 297,
    "text": "for i=0,29 do\r\n        local j = math_max(i - 2, 0)\r\n        t[i] = (j - (j % 2)) / 2\r\n        --[[NATIVE_BITOPS\r\n        t[i] = rshift(j, 1)\r\n        --]]\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 298,
    "text": "local j = math_max(i - 2, 0)",
    "type": "statement:localassign"
  }, {
    "id": 299,
    "text": "t[i] = (j - (j % 2)) / 2",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "tdecode_dist_nextrabits = t",
    "type": "statement:assign"
  }, {
    "id": 301,
    "text": "local dist_val = disttable:read(bs)",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "local dist_base = tdecode_dist_base[dist_val]",
    "type": "statement:localassign"
  }, {
    "id": 303,
    "text": "local dist_nextrabits = tdecode_dist_nextrabits[dist_val]",
    "type": "statement:localassign"
  }, {
    "id": 304,
    "text": "local dist_extrabits = bs:read(dist_nextrabits)",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "local dist = dist_base + dist_extrabits",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "for i=1,len do\r\n      local pos = (outstate.window_pos - 1 - dist) % 32768 + 1  -- 32K\r\n      output(outstate, assert(outstate.window[pos], 'invalid distance'))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 307,
    "text": "local pos = (outstate.window_pos - 1 - dist) % 32768 + 1",
    "type": "statement:localassign"
  }, {
    "id": 308,
    "text": "output(outstate, assert(outstate.window[pos], 'invalid distance'))",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 310,
    "text": "local function parse_block(bs, outstate)\r\n  local bfinal = bs:read(1)\r\n  local btype = bs:read(2)\r\n\r\n  local BTYPE_NO_COMPRESSION = 0\r\n  local BTYPE_FIXED_HUFFMAN = 1\r\n  local BTYPE_DYNAMIC_HUFFMAN = 2\r\n  local BTYPE_RESERVED = 3\r\n\r\n  if DEBUG then\r\n    debug('bfinal=', bfinal)\r\n    debug('btype=', btype)\r\n  end\r\n\r\n  if btype == BTYPE_NO_COMPRESSION then\r\n    bs:read(bs:nbits_left_in_byte())\r\n    local len = bs:read(16)\r\n    local nlen = noeof(bs:read(16))\r\n\r\n    for i=1,len do\r\n      local by = noeof(bs:read(8))\r\n      output(outstate, by)\r\n    end\r\n  elseif btype == BTYPE_FIXED_HUFFMAN or btype == BTYPE_DYNAMIC_HUFFMAN then\r\n    local littable, disttable\r\n    if btype == BTYPE_DYNAMIC_HUFFMAN then\r\n      littable, disttable = parse_huffmantables(bs)\r\n    else\r\n      littable  = HuffmanTable {0,8, 144,9, 256,7, 280,8, 288,nil}\r\n      disttable = HuffmanTable {0,5, 32,nil}\r\n    end\r\n\r\n    repeat\r\n      local is_done = parse_compressed_item(\r\n        bs, outstate, littable, disttable)\r\n    until is_done\r\n  else\r\n    runtime_error 'unrecognized compression type'\r\n  end\r\n\r\n  return bfinal ~= 0\r\nend",
    "type": "function"
  }, {
    "id": 311,
    "text": "local bfinal = bs:read(1)",
    "type": "statement:localassign"
  }, {
    "id": 312,
    "text": "local btype = bs:read(2)",
    "type": "statement:localassign"
  }, {
    "id": 313,
    "text": "local BTYPE_NO_COMPRESSION = 0",
    "type": "statement:localassign"
  }, {
    "id": 314,
    "text": "local BTYPE_FIXED_HUFFMAN = 1",
    "type": "statement:localassign"
  }, {
    "id": 315,
    "text": "local BTYPE_DYNAMIC_HUFFMAN = 2",
    "type": "statement:localassign"
  }, {
    "id": 316,
    "text": "local BTYPE_RESERVED = 3",
    "type": "statement:localassign"
  }, {
    "id": 317,
    "text": "if DEBUG then\r\n    debug('bfinal=', bfinal)\r\n    debug('btype=', btype)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 318,
    "text": "debug('bfinal=', bfinal)",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "debug('btype=', btype)",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "if btype == BTYPE_NO_COMPRESSION then\r\n    bs:read(bs:nbits_left_in_byte())\r\n    local len = bs:read(16)\r\n    local nlen = noeof(bs:read(16))\r\n\r\n    for i=1,len do\r\n      local by = noeof(bs:read(8))\r\n      output(outstate, by)\r\n    end\r\n  elseif btype == BTYPE_FIXED_HUFFMAN or btype == BTYPE_DYNAMIC_HUFFMAN then\r\n    local littable, disttable\r\n    if btype == BTYPE_DYNAMIC_HUFFMAN then\r\n      littable, disttable = parse_huffmantables(bs)\r\n    else\r\n      littable  = HuffmanTable {0,8, 144,9, 256,7, 280,8, 288,nil}\r\n      disttable = HuffmanTable {0,5, 32,nil}\r\n    end\r\n\r\n    repeat\r\n      local is_done = parse_compressed_item(\r\n        bs, outstate, littable, disttable)\r\n    until is_done\r\n  else\r\n    runtime_error 'unrecognized compression type'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 321,
    "text": "bs:read(bs:nbits_left_in_byte())",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "local len = bs:read(16)",
    "type": "statement:localassign"
  }, {
    "id": 323,
    "text": "local nlen = noeof(bs:read(16))",
    "type": "statement:localassign"
  }, {
    "id": 324,
    "text": "for i=1,len do\r\n      local by = noeof(bs:read(8))\r\n      output(outstate, by)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 325,
    "text": "local by = noeof(bs:read(8))",
    "type": "statement:localassign"
  }, {
    "id": 326,
    "text": "output(outstate, by)",
    "type": "statement:functioncall"
  }, {
    "id": 327,
    "text": "local littable, disttable",
    "type": "statement:localassign"
  }, {
    "id": 328,
    "text": "if btype == BTYPE_DYNAMIC_HUFFMAN then\r\n      littable, disttable = parse_huffmantables(bs)\r\n    else\r\n      littable  = HuffmanTable {0,8, 144,9, 256,7, 280,8, 288,nil}\r\n      disttable = HuffmanTable {0,5, 32,nil}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 329,
    "text": "littable, disttable = parse_huffmantables(bs)",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "littable  = HuffmanTable {0,8, 144,9, 256,7, 280,8, 288,nil}",
    "type": "statement:assign"
  }, {
    "id": 331,
    "text": "disttable = HuffmanTable {0,5, 32,nil}",
    "type": "statement:assign"
  }, {
    "id": 332,
    "text": "repeat\r\n      local is_done = parse_compressed_item(\r\n        bs, outstate, littable, disttable)\r\n    until is_done",
    "type": "statement:repeat"
  }, {
    "id": 333,
    "text": "local is_done = parse_compressed_item(\r\n        bs, outstate, littable, disttable)",
    "type": "statement:localassign"
  }, {
    "id": 334,
    "text": "runtime_error 'unrecognized compression type'",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 336,
    "text": "local function deflate(t)\r\n  local bs = get_bitstream(t.input)\r\n  local outbs = get_obytestream(t.output)\r\n  local outstate = make_outstate(outbs)\r\n\r\n  repeat\r\n    local is_final = parse_block(bs, outstate)\r\n  until is_final\r\nend",
    "type": "function"
  }, {
    "id": 337,
    "text": "local bs = get_bitstream(t.input)",
    "type": "statement:localassign"
  }, {
    "id": 338,
    "text": "local outbs = get_obytestream(t.output)",
    "type": "statement:localassign"
  }, {
    "id": 339,
    "text": "local outstate = make_outstate(outbs)",
    "type": "statement:localassign"
  }, {
    "id": 340,
    "text": "repeat\r\n    local is_final = parse_block(bs, outstate)\r\n  until is_final",
    "type": "statement:repeat"
  }, {
    "id": 341,
    "text": "local is_final = parse_block(bs, outstate)",
    "type": "statement:localassign"
  }, {
    "id": 342,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 343,
    "text": "local function gunzip(t)\r\n  local bs = get_bitstream(t.input)\r\n  local outbs = get_obytestream(t.output)\r\n  local disable_crc = t.disable_crc\r\n  if disable_crc == nil then disable_crc = false end\r\n\r\n  parse_gzip_header(bs)\r\n\r\n  local data_crc32 = 0\r\n\r\n  deflate{input=bs, output=\r\n    disable_crc and outbs or\r\n      function(byte)\r\n        data_crc32 = crc32(byte, data_crc32)\r\n        outbs(byte)\r\n      end\r\n  }\r\n\r\n  bs:read(bs:nbits_left_in_byte())\r\n\r\n  local expected_crc32 = bs:read(32)\r\n  local isize = bs:read(32) -- ignored\r\n  if DEBUG then\r\n    debug('crc32=', expected_crc32)\r\n    debug('isize=', isize)\r\n  end\r\n  if not disable_crc and data_crc32 then\r\n    if data_crc32 ~= expected_crc32 then\r\n      runtime_error('invalid compressed data--crc error')\r\n    end    \r\n  end\r\n  if bs:read() then\r\n    warn 'trailing garbage ignored'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 344,
    "text": "local disable_crc = t.disable_crc",
    "type": "statement:localassign"
  }, {
    "id": 345,
    "text": "if disable_crc == nil then disable_crc = false end",
    "type": "statement:if"
  }, {
    "id": 346,
    "text": "disable_crc = false",
    "type": "statement:assign"
  }, {
    "id": 347,
    "text": "parse_gzip_header(bs)",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "local data_crc32 = 0",
    "type": "statement:localassign"
  }, {
    "id": 349,
    "text": "deflate{input=bs, output=\r\n    disable_crc and outbs or\r\n      function(byte)\r\n        data_crc32 = crc32(byte, data_crc32)\r\n        outbs(byte)\r\n      end\r\n  }",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "data_crc32 = crc32(byte, data_crc32)",
    "type": "statement:assign"
  }, {
    "id": 351,
    "text": "outbs(byte)",
    "type": "statement:functioncall"
  }, {
    "id": 352,
    "text": "local expected_crc32 = bs:read(32)",
    "type": "statement:localassign"
  }, {
    "id": 353,
    "text": "local isize = bs:read(32)",
    "type": "statement:localassign"
  }, {
    "id": 354,
    "text": "if DEBUG then\r\n    debug('crc32=', expected_crc32)\r\n    debug('isize=', isize)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 355,
    "text": "debug('crc32=', expected_crc32)",
    "type": "statement:functioncall"
  }, {
    "id": 356,
    "text": "debug('isize=', isize)",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "if not disable_crc and data_crc32 then\r\n    if data_crc32 ~= expected_crc32 then\r\n      runtime_error('invalid compressed data--crc error')\r\n    end    \r\n  end",
    "type": "statement:if"
  }, {
    "id": 358,
    "text": "if data_crc32 ~= expected_crc32 then\r\n      runtime_error('invalid compressed data--crc error')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 359,
    "text": "runtime_error('invalid compressed data--crc error')",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "if bs:read() then\r\n    warn 'trailing garbage ignored'\r\n  end",
    "type": "statement:if"
  }, {
    "id": 361,
    "text": "warn 'trailing garbage ignored'",
    "type": "statement:functioncall"
  }, {
    "id": 362,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 363,
    "text": "local function adler32(byte, crc)\r\n  local s1 = crc % 65536\r\n  local s2 = (crc - s1) / 65536\r\n  s1 = (s1 + byte) % 65521\r\n  s2 = (s2 + s1) % 65521\r\n  return s2*65536 + s1\r\nend",
    "type": "function"
  }, {
    "id": 364,
    "text": "local s1 = crc % 65536",
    "type": "statement:localassign"
  }, {
    "id": 365,
    "text": "local s2 = (crc - s1) / 65536",
    "type": "statement:localassign"
  }, {
    "id": 366,
    "text": "s1 = (s1 + byte) % 65521",
    "type": "statement:assign"
  }, {
    "id": 367,
    "text": "s2 = (s2 + s1) % 65521",
    "type": "statement:assign"
  }, {
    "id": 368,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 369,
    "text": "local function inflate_zlib(t)\r\n  local bs = get_bitstream(t.input)\r\n  local outbs = get_obytestream(t.output)\r\n  local disable_crc = t.disable_crc\r\n  if disable_crc == nil then disable_crc = false end\r\n  \r\n  local window_size = parse_zlib_header(bs)\r\n  \r\n  local data_adler32 = 1\r\n  \r\n  deflate{input=bs, output=\r\n    disable_crc and outbs or\r\n      function(byte)\r\n        data_adler32 = adler32(byte, data_adler32)\r\n        outbs(byte)\r\n      end\r\n  }\r\n\r\n  bs:read(bs:nbits_left_in_byte())\r\n  \r\n  local b3 = bs:read(8)\r\n  local b2 = bs:read(8)\r\n  local b1 = bs:read(8)\r\n  local b0 = bs:read(8)\r\n  local expected_adler32 = ((b3*256 + b2)*256 + b1)*256 + b0\r\n  if DEBUG then\r\n    debug('alder32=', expected_adler32)\r\n  end\r\n  if not disable_crc then\r\n    if data_adler32 ~= expected_adler32 then\r\n      runtime_error('invalid compressed data--crc error')\r\n    end    \r\n  end\r\n  if bs:read() then\r\n    warn 'trailing garbage ignored'\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 370,
    "text": "local window_size = parse_zlib_header(bs)",
    "type": "statement:localassign"
  }, {
    "id": 371,
    "text": "local data_adler32 = 1",
    "type": "statement:localassign"
  }, {
    "id": 372,
    "text": "deflate{input=bs, output=\r\n    disable_crc and outbs or\r\n      function(byte)\r\n        data_adler32 = adler32(byte, data_adler32)\r\n        outbs(byte)\r\n      end\r\n  }",
    "type": "statement:functioncall"
  }, {
    "id": 373,
    "text": "data_adler32 = adler32(byte, data_adler32)",
    "type": "statement:assign"
  }, {
    "id": 374,
    "text": "local b3 = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 375,
    "text": "local b2 = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 376,
    "text": "local b1 = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 377,
    "text": "local b0 = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 378,
    "text": "local expected_adler32 = ((b3*256 + b2)*256 + b1)*256 + b0",
    "type": "statement:localassign"
  }, {
    "id": 379,
    "text": "if DEBUG then\r\n    debug('alder32=', expected_adler32)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 380,
    "text": "debug('alder32=', expected_adler32)",
    "type": "statement:functioncall"
  }, {
    "id": 381,
    "text": "if not disable_crc then\r\n    if data_adler32 ~= expected_adler32 then\r\n      runtime_error('invalid compressed data--crc error')\r\n    end    \r\n  end",
    "type": "statement:if"
  }, {
    "id": 382,
    "text": "if data_adler32 ~= expected_adler32 then\r\n      runtime_error('invalid compressed data--crc error')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 383,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 384,
    "text": "function(n) return 2^n end",
    "type": "function"
  }, {
    "id": 385,
    "text": "function(a,b)\r\n    return a.nbits == b.nbits and a.val < b.val or a.nbits < b.nbits\r\n  end",
    "type": "function"
  }, {
    "id": 386,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 387,
    "text": "function(bits) return pow2[minbits] + msb(bits, minbits) end",
    "type": "function"
  }, {
    "id": 388,
    "text": "function(byte)\r\n        data_crc32 = crc32(byte, data_crc32)\r\n        outbs(byte)\r\n      end",
    "type": "function"
  }, {
    "id": 389,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 390,
    "text": "function(byte)\r\n        data_adler32 = adler32(byte, data_adler32)\r\n        outbs(byte)\r\n      end",
    "type": "function"
  }, {
    "id": 391,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 392,
    "text": "",
    "type": "function container"
  }, {
    "id": 393,
    "text": "",
    "type": "function container"
  }, {
    "id": 394,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 395,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 396,
    "text": "table_sort",
    "type": "global function"
  }, {
    "id": 397,
    "text": "error",
    "type": "global function"
  }, {
    "id": 398,
    "text": "crc32",
    "type": "global function"
  }, {
    "id": 399,
    "text": "type",
    "type": "global function"
  }, {
    "id": 400,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 401,
    "text": "math_max",
    "type": "global function"
  }, {
    "id": 402,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 403,
    "text": "print",
    "type": "global function"
  }, {
    "id": 404,
    "text": "string_char",
    "type": "global function"
  }, {
    "id": 405,
    "text": "outbs",
    "type": "global function"
  }, {
    "id": 406,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 407,
    "text": "type",
    "type": "global function"
  }, {
    "id": 408,
    "text": "require",
    "type": "global function"
  }, {
    "id": 409,
    "text": "min",
    "type": "global function"
  }, {
    "id": 410,
    "text": "outbs",
    "type": "global function"
  }, {
    "id": 411,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 412,
    "text": "",
    "type": "variable container"
  }, {
    "id": 413,
    "text": "",
    "type": "require container"
  }, {
    "id": 414,
    "text": "",
    "type": "local variable"
  }, {
    "id": 415,
    "text": "",
    "type": "n/a"
  }, {
    "id": 416,
    "text": "",
    "type": "local variable"
  }, {
    "id": 417,
    "text": "",
    "type": "n/a"
  }, {
    "id": 418,
    "text": "",
    "type": "local variable"
  }, {
    "id": 419,
    "text": "",
    "type": "n/a"
  }, {
    "id": 420,
    "text": "",
    "type": "local variable"
  }, {
    "id": 421,
    "text": "",
    "type": "n/a"
  }, {
    "id": 422,
    "text": "",
    "type": "local variable"
  }, {
    "id": 423,
    "text": "",
    "type": "n/a"
  }, {
    "id": 424,
    "text": "",
    "type": "local variable"
  }, {
    "id": 425,
    "text": "",
    "type": "n/a"
  }, {
    "id": 426,
    "text": "",
    "type": "local variable"
  }, {
    "id": 427,
    "text": "",
    "type": "n/a"
  }, {
    "id": 428,
    "text": "",
    "type": "local variable"
  }, {
    "id": 429,
    "text": "",
    "type": "n/a"
  }, {
    "id": 430,
    "text": "",
    "type": "local variable"
  }, {
    "id": 431,
    "text": "",
    "type": "n/a"
  }, {
    "id": 432,
    "text": "",
    "type": "local variable"
  }, {
    "id": 433,
    "text": "",
    "type": "n/a"
  }, {
    "id": 434,
    "text": "",
    "type": "local variable"
  }, {
    "id": 435,
    "text": "",
    "type": "n/a"
  }, {
    "id": 436,
    "text": "",
    "type": "local variable"
  }, {
    "id": 437,
    "text": "",
    "type": "n/a"
  }, {
    "id": 438,
    "text": "",
    "type": "local variable"
  }, {
    "id": 439,
    "text": "",
    "type": "n/a"
  }, {
    "id": 440,
    "text": "",
    "type": "local variable"
  }, {
    "id": 441,
    "text": "",
    "type": "n/a"
  }, {
    "id": 442,
    "text": "",
    "type": "local variable"
  }, {
    "id": 443,
    "text": "",
    "type": "n/a"
  }, {
    "id": 444,
    "text": "",
    "type": "local variable"
  }, {
    "id": 445,
    "text": "",
    "type": "n/a"
  }, {
    "id": 446,
    "text": "",
    "type": "local variable"
  }, {
    "id": 447,
    "text": "",
    "type": "boolean"
  }, {
    "id": 448,
    "text": "",
    "type": "local variable"
  }, {
    "id": 449,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 450,
    "text": "",
    "type": "local variable"
  }, {
    "id": 451,
    "text": "",
    "type": "n/a"
  }, {
    "id": 452,
    "text": "",
    "type": "local variable"
  }, {
    "id": 453,
    "text": "",
    "type": "n/a"
  }, {
    "id": 454,
    "text": "",
    "type": "local variable"
  }, {
    "id": 455,
    "text": "",
    "type": "local variable"
  }, {
    "id": 456,
    "text": "",
    "type": "local variable"
  }, {
    "id": 457,
    "text": "",
    "type": "local variable"
  }, {
    "id": 458,
    "text": "",
    "type": "local variable"
  }, {
    "id": 459,
    "text": "",
    "type": "global variable"
  }, {
    "id": 460,
    "text": "",
    "type": "n/a"
  }, {
    "id": 461,
    "text": "",
    "type": "global variable"
  }, {
    "id": 462,
    "text": "",
    "type": "n/a"
  }, {
    "id": 463,
    "text": "",
    "type": "global variable"
  }, {
    "id": 464,
    "text": "",
    "type": "n/a"
  }, {
    "id": 465,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 466,
    "text": "crc32lua",
    "type": "module"
  }, {
    "id": 467,
    "text": "",
    "type": "interface container"
  }, {
    "id": 468,
    "text": "",
    "type": "interface"
  }, {
    "id": 469,
    "text": "",
    "type": "local variable"
  }, {
    "id": 470,
    "text": "",
    "type": "local variable"
  } ]
}